
PROJET_ESE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010744  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b78  08010808  08010808  00020808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011380  08011380  000300a8  2**0
                  CONTENTS
  4 .ARM          00000000  08011380  08011380  000300a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011380  08011380  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011380  08011380  00021380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011384  08011384  00021384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08011388  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ce4  200000a8  08011430  000300a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d8c  08011430  00034d8c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d44a  00000000  00000000  00030113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005060  00000000  00000000  0004d55d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a8  00000000  00000000  000525c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012f5  00000000  00000000  00053e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ba31  00000000  00000000  0005515d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000214de  00000000  00000000  00070b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009baab  00000000  00000000  0009206c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000656c  00000000  00000000  0012db18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00134084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a8 	.word	0x200000a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080107ec 	.word	0x080107ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000ac 	.word	0x200000ac
 8000104:	080107ec 	.word	0x080107ec

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	0010      	movs	r0, r2
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	0019      	movs	r1, r3
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 fe45 	bl	80020b8 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f001 fd95 	bl	8001f68 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fe37 	bl	80020b8 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fe2d 	bl	80020b8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fdbd 	bl	8001fec <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fdb3 	bl	8001fec <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_cfrcmple>:
 8000494:	4684      	mov	ip, r0
 8000496:	0008      	movs	r0, r1
 8000498:	4661      	mov	r1, ip
 800049a:	e7ff      	b.n	800049c <__aeabi_cfcmpeq>

0800049c <__aeabi_cfcmpeq>:
 800049c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800049e:	f000 fb71 	bl	8000b84 <__lesf2>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d401      	bmi.n	80004aa <__aeabi_cfcmpeq+0xe>
 80004a6:	2100      	movs	r1, #0
 80004a8:	42c8      	cmn	r0, r1
 80004aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004ac <__aeabi_fcmpeq>:
 80004ac:	b510      	push	{r4, lr}
 80004ae:	f000 fafd 	bl	8000aac <__eqsf2>
 80004b2:	4240      	negs	r0, r0
 80004b4:	3001      	adds	r0, #1
 80004b6:	bd10      	pop	{r4, pc}

080004b8 <__aeabi_fcmplt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fb63 	bl	8000b84 <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	db01      	blt.n	80004c6 <__aeabi_fcmplt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmple>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb59 	bl	8000b84 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dd01      	ble.n	80004da <__aeabi_fcmple+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmpgt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fb09 	bl	8000af8 <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dc01      	bgt.n	80004ee <__aeabi_fcmpgt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpge>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 faff 	bl	8000af8 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	da01      	bge.n	8000502 <__aeabi_fcmpge+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_f2uiz>:
 8000508:	219e      	movs	r1, #158	; 0x9e
 800050a:	b510      	push	{r4, lr}
 800050c:	05c9      	lsls	r1, r1, #23
 800050e:	1c04      	adds	r4, r0, #0
 8000510:	f7ff fff0 	bl	80004f4 <__aeabi_fcmpge>
 8000514:	2800      	cmp	r0, #0
 8000516:	d103      	bne.n	8000520 <__aeabi_f2uiz+0x18>
 8000518:	1c20      	adds	r0, r4, #0
 800051a:	f000 fe65 	bl	80011e8 <__aeabi_f2iz>
 800051e:	bd10      	pop	{r4, pc}
 8000520:	219e      	movs	r1, #158	; 0x9e
 8000522:	1c20      	adds	r0, r4, #0
 8000524:	05c9      	lsls	r1, r1, #23
 8000526:	f000 fcbf 	bl	8000ea8 <__aeabi_fsub>
 800052a:	f000 fe5d 	bl	80011e8 <__aeabi_f2iz>
 800052e:	2380      	movs	r3, #128	; 0x80
 8000530:	061b      	lsls	r3, r3, #24
 8000532:	469c      	mov	ip, r3
 8000534:	4460      	add	r0, ip
 8000536:	e7f2      	b.n	800051e <__aeabi_f2uiz+0x16>

08000538 <__aeabi_fadd>:
 8000538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800053a:	4647      	mov	r7, r8
 800053c:	46ce      	mov	lr, r9
 800053e:	024a      	lsls	r2, r1, #9
 8000540:	0243      	lsls	r3, r0, #9
 8000542:	0045      	lsls	r5, r0, #1
 8000544:	0fc4      	lsrs	r4, r0, #31
 8000546:	0a50      	lsrs	r0, r2, #9
 8000548:	4680      	mov	r8, r0
 800054a:	0048      	lsls	r0, r1, #1
 800054c:	0a5b      	lsrs	r3, r3, #9
 800054e:	0e00      	lsrs	r0, r0, #24
 8000550:	0992      	lsrs	r2, r2, #6
 8000552:	4694      	mov	ip, r2
 8000554:	b580      	push	{r7, lr}
 8000556:	001e      	movs	r6, r3
 8000558:	4681      	mov	r9, r0
 800055a:	0002      	movs	r2, r0
 800055c:	0e2d      	lsrs	r5, r5, #24
 800055e:	00df      	lsls	r7, r3, #3
 8000560:	0fc9      	lsrs	r1, r1, #31
 8000562:	428c      	cmp	r4, r1
 8000564:	d024      	beq.n	80005b0 <__aeabi_fadd+0x78>
 8000566:	1a28      	subs	r0, r5, r0
 8000568:	2800      	cmp	r0, #0
 800056a:	dd0e      	ble.n	800058a <__aeabi_fadd+0x52>
 800056c:	2a00      	cmp	r2, #0
 800056e:	d13e      	bne.n	80005ee <__aeabi_fadd+0xb6>
 8000570:	4662      	mov	r2, ip
 8000572:	2a00      	cmp	r2, #0
 8000574:	d100      	bne.n	8000578 <__aeabi_fadd+0x40>
 8000576:	e0fd      	b.n	8000774 <__aeabi_fadd+0x23c>
 8000578:	1e42      	subs	r2, r0, #1
 800057a:	2801      	cmp	r0, #1
 800057c:	d100      	bne.n	8000580 <__aeabi_fadd+0x48>
 800057e:	e137      	b.n	80007f0 <__aeabi_fadd+0x2b8>
 8000580:	28ff      	cmp	r0, #255	; 0xff
 8000582:	d100      	bne.n	8000586 <__aeabi_fadd+0x4e>
 8000584:	e0a9      	b.n	80006da <__aeabi_fadd+0x1a2>
 8000586:	0010      	movs	r0, r2
 8000588:	e039      	b.n	80005fe <__aeabi_fadd+0xc6>
 800058a:	2800      	cmp	r0, #0
 800058c:	d063      	beq.n	8000656 <__aeabi_fadd+0x11e>
 800058e:	464b      	mov	r3, r9
 8000590:	1b52      	subs	r2, r2, r5
 8000592:	2d00      	cmp	r5, #0
 8000594:	d000      	beq.n	8000598 <__aeabi_fadd+0x60>
 8000596:	e0e0      	b.n	800075a <__aeabi_fadd+0x222>
 8000598:	2f00      	cmp	r7, #0
 800059a:	d100      	bne.n	800059e <__aeabi_fadd+0x66>
 800059c:	e0ce      	b.n	800073c <__aeabi_fadd+0x204>
 800059e:	1e53      	subs	r3, r2, #1
 80005a0:	2a01      	cmp	r2, #1
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fadd+0x6e>
 80005a4:	e155      	b.n	8000852 <__aeabi_fadd+0x31a>
 80005a6:	2aff      	cmp	r2, #255	; 0xff
 80005a8:	d100      	bne.n	80005ac <__aeabi_fadd+0x74>
 80005aa:	e094      	b.n	80006d6 <__aeabi_fadd+0x19e>
 80005ac:	001a      	movs	r2, r3
 80005ae:	e0d9      	b.n	8000764 <__aeabi_fadd+0x22c>
 80005b0:	1a2a      	subs	r2, r5, r0
 80005b2:	2a00      	cmp	r2, #0
 80005b4:	dc00      	bgt.n	80005b8 <__aeabi_fadd+0x80>
 80005b6:	e099      	b.n	80006ec <__aeabi_fadd+0x1b4>
 80005b8:	2800      	cmp	r0, #0
 80005ba:	d062      	beq.n	8000682 <__aeabi_fadd+0x14a>
 80005bc:	2dff      	cmp	r5, #255	; 0xff
 80005be:	d100      	bne.n	80005c2 <__aeabi_fadd+0x8a>
 80005c0:	e08b      	b.n	80006da <__aeabi_fadd+0x1a2>
 80005c2:	2380      	movs	r3, #128	; 0x80
 80005c4:	4661      	mov	r1, ip
 80005c6:	04db      	lsls	r3, r3, #19
 80005c8:	4319      	orrs	r1, r3
 80005ca:	468c      	mov	ip, r1
 80005cc:	2a1b      	cmp	r2, #27
 80005ce:	dc00      	bgt.n	80005d2 <__aeabi_fadd+0x9a>
 80005d0:	e0d2      	b.n	8000778 <__aeabi_fadd+0x240>
 80005d2:	2301      	movs	r3, #1
 80005d4:	19db      	adds	r3, r3, r7
 80005d6:	015a      	lsls	r2, r3, #5
 80005d8:	d56a      	bpl.n	80006b0 <__aeabi_fadd+0x178>
 80005da:	3501      	adds	r5, #1
 80005dc:	2dff      	cmp	r5, #255	; 0xff
 80005de:	d05b      	beq.n	8000698 <__aeabi_fadd+0x160>
 80005e0:	2201      	movs	r2, #1
 80005e2:	49a3      	ldr	r1, [pc, #652]	; (8000870 <__aeabi_fadd+0x338>)
 80005e4:	401a      	ands	r2, r3
 80005e6:	085b      	lsrs	r3, r3, #1
 80005e8:	400b      	ands	r3, r1
 80005ea:	4313      	orrs	r3, r2
 80005ec:	e01c      	b.n	8000628 <__aeabi_fadd+0xf0>
 80005ee:	2dff      	cmp	r5, #255	; 0xff
 80005f0:	d100      	bne.n	80005f4 <__aeabi_fadd+0xbc>
 80005f2:	e072      	b.n	80006da <__aeabi_fadd+0x1a2>
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	4662      	mov	r2, ip
 80005f8:	04db      	lsls	r3, r3, #19
 80005fa:	431a      	orrs	r2, r3
 80005fc:	4694      	mov	ip, r2
 80005fe:	281b      	cmp	r0, #27
 8000600:	dc00      	bgt.n	8000604 <__aeabi_fadd+0xcc>
 8000602:	e090      	b.n	8000726 <__aeabi_fadd+0x1ee>
 8000604:	2301      	movs	r3, #1
 8000606:	1afb      	subs	r3, r7, r3
 8000608:	015a      	lsls	r2, r3, #5
 800060a:	d551      	bpl.n	80006b0 <__aeabi_fadd+0x178>
 800060c:	019b      	lsls	r3, r3, #6
 800060e:	099e      	lsrs	r6, r3, #6
 8000610:	0030      	movs	r0, r6
 8000612:	f002 fd71 	bl	80030f8 <__clzsi2>
 8000616:	0033      	movs	r3, r6
 8000618:	3805      	subs	r0, #5
 800061a:	4083      	lsls	r3, r0
 800061c:	4285      	cmp	r5, r0
 800061e:	dc00      	bgt.n	8000622 <__aeabi_fadd+0xea>
 8000620:	e075      	b.n	800070e <__aeabi_fadd+0x1d6>
 8000622:	4a94      	ldr	r2, [pc, #592]	; (8000874 <__aeabi_fadd+0x33c>)
 8000624:	1a2d      	subs	r5, r5, r0
 8000626:	4013      	ands	r3, r2
 8000628:	075a      	lsls	r2, r3, #29
 800062a:	d004      	beq.n	8000636 <__aeabi_fadd+0xfe>
 800062c:	220f      	movs	r2, #15
 800062e:	401a      	ands	r2, r3
 8000630:	2a04      	cmp	r2, #4
 8000632:	d000      	beq.n	8000636 <__aeabi_fadd+0xfe>
 8000634:	3304      	adds	r3, #4
 8000636:	015a      	lsls	r2, r3, #5
 8000638:	d53c      	bpl.n	80006b4 <__aeabi_fadd+0x17c>
 800063a:	1c68      	adds	r0, r5, #1
 800063c:	2dfe      	cmp	r5, #254	; 0xfe
 800063e:	d02b      	beq.n	8000698 <__aeabi_fadd+0x160>
 8000640:	019b      	lsls	r3, r3, #6
 8000642:	0a5e      	lsrs	r6, r3, #9
 8000644:	b2c0      	uxtb	r0, r0
 8000646:	05c0      	lsls	r0, r0, #23
 8000648:	4330      	orrs	r0, r6
 800064a:	07e4      	lsls	r4, r4, #31
 800064c:	4320      	orrs	r0, r4
 800064e:	bcc0      	pop	{r6, r7}
 8000650:	46b9      	mov	r9, r7
 8000652:	46b0      	mov	r8, r6
 8000654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000656:	20fe      	movs	r0, #254	; 0xfe
 8000658:	1c6a      	adds	r2, r5, #1
 800065a:	4210      	tst	r0, r2
 800065c:	d172      	bne.n	8000744 <__aeabi_fadd+0x20c>
 800065e:	2d00      	cmp	r5, #0
 8000660:	d000      	beq.n	8000664 <__aeabi_fadd+0x12c>
 8000662:	e0ae      	b.n	80007c2 <__aeabi_fadd+0x28a>
 8000664:	2f00      	cmp	r7, #0
 8000666:	d100      	bne.n	800066a <__aeabi_fadd+0x132>
 8000668:	e0ec      	b.n	8000844 <__aeabi_fadd+0x30c>
 800066a:	4663      	mov	r3, ip
 800066c:	2000      	movs	r0, #0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0e9      	beq.n	8000646 <__aeabi_fadd+0x10e>
 8000672:	1afb      	subs	r3, r7, r3
 8000674:	015a      	lsls	r2, r3, #5
 8000676:	d400      	bmi.n	800067a <__aeabi_fadd+0x142>
 8000678:	e0f3      	b.n	8000862 <__aeabi_fadd+0x32a>
 800067a:	4663      	mov	r3, ip
 800067c:	000c      	movs	r4, r1
 800067e:	1bdb      	subs	r3, r3, r7
 8000680:	e7d2      	b.n	8000628 <__aeabi_fadd+0xf0>
 8000682:	4661      	mov	r1, ip
 8000684:	2900      	cmp	r1, #0
 8000686:	d05b      	beq.n	8000740 <__aeabi_fadd+0x208>
 8000688:	1e51      	subs	r1, r2, #1
 800068a:	2a01      	cmp	r2, #1
 800068c:	d100      	bne.n	8000690 <__aeabi_fadd+0x158>
 800068e:	e0a7      	b.n	80007e0 <__aeabi_fadd+0x2a8>
 8000690:	2aff      	cmp	r2, #255	; 0xff
 8000692:	d022      	beq.n	80006da <__aeabi_fadd+0x1a2>
 8000694:	000a      	movs	r2, r1
 8000696:	e799      	b.n	80005cc <__aeabi_fadd+0x94>
 8000698:	20ff      	movs	r0, #255	; 0xff
 800069a:	2600      	movs	r6, #0
 800069c:	e7d3      	b.n	8000646 <__aeabi_fadd+0x10e>
 800069e:	21fe      	movs	r1, #254	; 0xfe
 80006a0:	1c6a      	adds	r2, r5, #1
 80006a2:	4211      	tst	r1, r2
 80006a4:	d073      	beq.n	800078e <__aeabi_fadd+0x256>
 80006a6:	2aff      	cmp	r2, #255	; 0xff
 80006a8:	d0f6      	beq.n	8000698 <__aeabi_fadd+0x160>
 80006aa:	0015      	movs	r5, r2
 80006ac:	4467      	add	r7, ip
 80006ae:	087b      	lsrs	r3, r7, #1
 80006b0:	075a      	lsls	r2, r3, #29
 80006b2:	d1bb      	bne.n	800062c <__aeabi_fadd+0xf4>
 80006b4:	08db      	lsrs	r3, r3, #3
 80006b6:	2dff      	cmp	r5, #255	; 0xff
 80006b8:	d00f      	beq.n	80006da <__aeabi_fadd+0x1a2>
 80006ba:	025b      	lsls	r3, r3, #9
 80006bc:	0a5e      	lsrs	r6, r3, #9
 80006be:	b2e8      	uxtb	r0, r5
 80006c0:	e7c1      	b.n	8000646 <__aeabi_fadd+0x10e>
 80006c2:	4662      	mov	r2, ip
 80006c4:	2a00      	cmp	r2, #0
 80006c6:	d008      	beq.n	80006da <__aeabi_fadd+0x1a2>
 80006c8:	2280      	movs	r2, #128	; 0x80
 80006ca:	03d2      	lsls	r2, r2, #15
 80006cc:	4213      	tst	r3, r2
 80006ce:	d004      	beq.n	80006da <__aeabi_fadd+0x1a2>
 80006d0:	4640      	mov	r0, r8
 80006d2:	4210      	tst	r0, r2
 80006d4:	d101      	bne.n	80006da <__aeabi_fadd+0x1a2>
 80006d6:	000c      	movs	r4, r1
 80006d8:	4643      	mov	r3, r8
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d0dc      	beq.n	8000698 <__aeabi_fadd+0x160>
 80006de:	2680      	movs	r6, #128	; 0x80
 80006e0:	03f6      	lsls	r6, r6, #15
 80006e2:	431e      	orrs	r6, r3
 80006e4:	0276      	lsls	r6, r6, #9
 80006e6:	20ff      	movs	r0, #255	; 0xff
 80006e8:	0a76      	lsrs	r6, r6, #9
 80006ea:	e7ac      	b.n	8000646 <__aeabi_fadd+0x10e>
 80006ec:	2a00      	cmp	r2, #0
 80006ee:	d0d6      	beq.n	800069e <__aeabi_fadd+0x166>
 80006f0:	1b42      	subs	r2, r0, r5
 80006f2:	2d00      	cmp	r5, #0
 80006f4:	d05c      	beq.n	80007b0 <__aeabi_fadd+0x278>
 80006f6:	28ff      	cmp	r0, #255	; 0xff
 80006f8:	d0ee      	beq.n	80006d8 <__aeabi_fadd+0x1a0>
 80006fa:	2380      	movs	r3, #128	; 0x80
 80006fc:	04db      	lsls	r3, r3, #19
 80006fe:	431f      	orrs	r7, r3
 8000700:	2a1b      	cmp	r2, #27
 8000702:	dc00      	bgt.n	8000706 <__aeabi_fadd+0x1ce>
 8000704:	e082      	b.n	800080c <__aeabi_fadd+0x2d4>
 8000706:	2301      	movs	r3, #1
 8000708:	464d      	mov	r5, r9
 800070a:	4463      	add	r3, ip
 800070c:	e763      	b.n	80005d6 <__aeabi_fadd+0x9e>
 800070e:	2220      	movs	r2, #32
 8000710:	1b40      	subs	r0, r0, r5
 8000712:	3001      	adds	r0, #1
 8000714:	1a12      	subs	r2, r2, r0
 8000716:	0019      	movs	r1, r3
 8000718:	4093      	lsls	r3, r2
 800071a:	40c1      	lsrs	r1, r0
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	4193      	sbcs	r3, r2
 8000720:	2500      	movs	r5, #0
 8000722:	430b      	orrs	r3, r1
 8000724:	e780      	b.n	8000628 <__aeabi_fadd+0xf0>
 8000726:	2320      	movs	r3, #32
 8000728:	4661      	mov	r1, ip
 800072a:	1a1b      	subs	r3, r3, r0
 800072c:	4099      	lsls	r1, r3
 800072e:	4662      	mov	r2, ip
 8000730:	000b      	movs	r3, r1
 8000732:	40c2      	lsrs	r2, r0
 8000734:	1e59      	subs	r1, r3, #1
 8000736:	418b      	sbcs	r3, r1
 8000738:	4313      	orrs	r3, r2
 800073a:	e764      	b.n	8000606 <__aeabi_fadd+0xce>
 800073c:	000c      	movs	r4, r1
 800073e:	4643      	mov	r3, r8
 8000740:	0015      	movs	r5, r2
 8000742:	e7b8      	b.n	80006b6 <__aeabi_fadd+0x17e>
 8000744:	4663      	mov	r3, ip
 8000746:	1afe      	subs	r6, r7, r3
 8000748:	0173      	lsls	r3, r6, #5
 800074a:	d445      	bmi.n	80007d8 <__aeabi_fadd+0x2a0>
 800074c:	2e00      	cmp	r6, #0
 800074e:	d000      	beq.n	8000752 <__aeabi_fadd+0x21a>
 8000750:	e75e      	b.n	8000610 <__aeabi_fadd+0xd8>
 8000752:	2400      	movs	r4, #0
 8000754:	2000      	movs	r0, #0
 8000756:	2600      	movs	r6, #0
 8000758:	e775      	b.n	8000646 <__aeabi_fadd+0x10e>
 800075a:	2bff      	cmp	r3, #255	; 0xff
 800075c:	d0bb      	beq.n	80006d6 <__aeabi_fadd+0x19e>
 800075e:	2380      	movs	r3, #128	; 0x80
 8000760:	04db      	lsls	r3, r3, #19
 8000762:	431f      	orrs	r7, r3
 8000764:	2a1b      	cmp	r2, #27
 8000766:	dd47      	ble.n	80007f8 <__aeabi_fadd+0x2c0>
 8000768:	2301      	movs	r3, #1
 800076a:	4662      	mov	r2, ip
 800076c:	000c      	movs	r4, r1
 800076e:	464d      	mov	r5, r9
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	e749      	b.n	8000608 <__aeabi_fadd+0xd0>
 8000774:	0005      	movs	r5, r0
 8000776:	e79e      	b.n	80006b6 <__aeabi_fadd+0x17e>
 8000778:	4661      	mov	r1, ip
 800077a:	2320      	movs	r3, #32
 800077c:	40d1      	lsrs	r1, r2
 800077e:	1a9b      	subs	r3, r3, r2
 8000780:	4662      	mov	r2, ip
 8000782:	409a      	lsls	r2, r3
 8000784:	0013      	movs	r3, r2
 8000786:	1e5a      	subs	r2, r3, #1
 8000788:	4193      	sbcs	r3, r2
 800078a:	430b      	orrs	r3, r1
 800078c:	e722      	b.n	80005d4 <__aeabi_fadd+0x9c>
 800078e:	2d00      	cmp	r5, #0
 8000790:	d146      	bne.n	8000820 <__aeabi_fadd+0x2e8>
 8000792:	2f00      	cmp	r7, #0
 8000794:	d062      	beq.n	800085c <__aeabi_fadd+0x324>
 8000796:	4663      	mov	r3, ip
 8000798:	2000      	movs	r0, #0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d100      	bne.n	80007a0 <__aeabi_fadd+0x268>
 800079e:	e752      	b.n	8000646 <__aeabi_fadd+0x10e>
 80007a0:	003b      	movs	r3, r7
 80007a2:	4463      	add	r3, ip
 80007a4:	015a      	lsls	r2, r3, #5
 80007a6:	d583      	bpl.n	80006b0 <__aeabi_fadd+0x178>
 80007a8:	4a32      	ldr	r2, [pc, #200]	; (8000874 <__aeabi_fadd+0x33c>)
 80007aa:	3501      	adds	r5, #1
 80007ac:	4013      	ands	r3, r2
 80007ae:	e77f      	b.n	80006b0 <__aeabi_fadd+0x178>
 80007b0:	2f00      	cmp	r7, #0
 80007b2:	d0c4      	beq.n	800073e <__aeabi_fadd+0x206>
 80007b4:	1e53      	subs	r3, r2, #1
 80007b6:	2a01      	cmp	r2, #1
 80007b8:	d012      	beq.n	80007e0 <__aeabi_fadd+0x2a8>
 80007ba:	2aff      	cmp	r2, #255	; 0xff
 80007bc:	d08c      	beq.n	80006d8 <__aeabi_fadd+0x1a0>
 80007be:	001a      	movs	r2, r3
 80007c0:	e79e      	b.n	8000700 <__aeabi_fadd+0x1c8>
 80007c2:	2f00      	cmp	r7, #0
 80007c4:	d000      	beq.n	80007c8 <__aeabi_fadd+0x290>
 80007c6:	e77c      	b.n	80006c2 <__aeabi_fadd+0x18a>
 80007c8:	4663      	mov	r3, ip
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d183      	bne.n	80006d6 <__aeabi_fadd+0x19e>
 80007ce:	2680      	movs	r6, #128	; 0x80
 80007d0:	2400      	movs	r4, #0
 80007d2:	20ff      	movs	r0, #255	; 0xff
 80007d4:	03f6      	lsls	r6, r6, #15
 80007d6:	e736      	b.n	8000646 <__aeabi_fadd+0x10e>
 80007d8:	4663      	mov	r3, ip
 80007da:	000c      	movs	r4, r1
 80007dc:	1bde      	subs	r6, r3, r7
 80007de:	e717      	b.n	8000610 <__aeabi_fadd+0xd8>
 80007e0:	003b      	movs	r3, r7
 80007e2:	4463      	add	r3, ip
 80007e4:	2501      	movs	r5, #1
 80007e6:	015a      	lsls	r2, r3, #5
 80007e8:	d400      	bmi.n	80007ec <__aeabi_fadd+0x2b4>
 80007ea:	e761      	b.n	80006b0 <__aeabi_fadd+0x178>
 80007ec:	2502      	movs	r5, #2
 80007ee:	e6f7      	b.n	80005e0 <__aeabi_fadd+0xa8>
 80007f0:	4663      	mov	r3, ip
 80007f2:	2501      	movs	r5, #1
 80007f4:	1afb      	subs	r3, r7, r3
 80007f6:	e707      	b.n	8000608 <__aeabi_fadd+0xd0>
 80007f8:	2320      	movs	r3, #32
 80007fa:	1a9b      	subs	r3, r3, r2
 80007fc:	0038      	movs	r0, r7
 80007fe:	409f      	lsls	r7, r3
 8000800:	003b      	movs	r3, r7
 8000802:	40d0      	lsrs	r0, r2
 8000804:	1e5a      	subs	r2, r3, #1
 8000806:	4193      	sbcs	r3, r2
 8000808:	4303      	orrs	r3, r0
 800080a:	e7ae      	b.n	800076a <__aeabi_fadd+0x232>
 800080c:	2320      	movs	r3, #32
 800080e:	1a9b      	subs	r3, r3, r2
 8000810:	0039      	movs	r1, r7
 8000812:	409f      	lsls	r7, r3
 8000814:	003b      	movs	r3, r7
 8000816:	40d1      	lsrs	r1, r2
 8000818:	1e5a      	subs	r2, r3, #1
 800081a:	4193      	sbcs	r3, r2
 800081c:	430b      	orrs	r3, r1
 800081e:	e773      	b.n	8000708 <__aeabi_fadd+0x1d0>
 8000820:	2f00      	cmp	r7, #0
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x2ee>
 8000824:	e758      	b.n	80006d8 <__aeabi_fadd+0x1a0>
 8000826:	4662      	mov	r2, ip
 8000828:	2a00      	cmp	r2, #0
 800082a:	d100      	bne.n	800082e <__aeabi_fadd+0x2f6>
 800082c:	e755      	b.n	80006da <__aeabi_fadd+0x1a2>
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	03d2      	lsls	r2, r2, #15
 8000832:	4213      	tst	r3, r2
 8000834:	d100      	bne.n	8000838 <__aeabi_fadd+0x300>
 8000836:	e750      	b.n	80006da <__aeabi_fadd+0x1a2>
 8000838:	4641      	mov	r1, r8
 800083a:	4211      	tst	r1, r2
 800083c:	d000      	beq.n	8000840 <__aeabi_fadd+0x308>
 800083e:	e74c      	b.n	80006da <__aeabi_fadd+0x1a2>
 8000840:	4643      	mov	r3, r8
 8000842:	e74a      	b.n	80006da <__aeabi_fadd+0x1a2>
 8000844:	4663      	mov	r3, ip
 8000846:	2b00      	cmp	r3, #0
 8000848:	d083      	beq.n	8000752 <__aeabi_fadd+0x21a>
 800084a:	000c      	movs	r4, r1
 800084c:	4646      	mov	r6, r8
 800084e:	2000      	movs	r0, #0
 8000850:	e6f9      	b.n	8000646 <__aeabi_fadd+0x10e>
 8000852:	4663      	mov	r3, ip
 8000854:	000c      	movs	r4, r1
 8000856:	1bdb      	subs	r3, r3, r7
 8000858:	3501      	adds	r5, #1
 800085a:	e6d5      	b.n	8000608 <__aeabi_fadd+0xd0>
 800085c:	4646      	mov	r6, r8
 800085e:	2000      	movs	r0, #0
 8000860:	e6f1      	b.n	8000646 <__aeabi_fadd+0x10e>
 8000862:	2b00      	cmp	r3, #0
 8000864:	d000      	beq.n	8000868 <__aeabi_fadd+0x330>
 8000866:	e723      	b.n	80006b0 <__aeabi_fadd+0x178>
 8000868:	2400      	movs	r4, #0
 800086a:	2600      	movs	r6, #0
 800086c:	e6eb      	b.n	8000646 <__aeabi_fadd+0x10e>
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	7dffffff 	.word	0x7dffffff
 8000874:	fbffffff 	.word	0xfbffffff

08000878 <__aeabi_fdiv>:
 8000878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087a:	464f      	mov	r7, r9
 800087c:	4646      	mov	r6, r8
 800087e:	46d6      	mov	lr, sl
 8000880:	0245      	lsls	r5, r0, #9
 8000882:	b5c0      	push	{r6, r7, lr}
 8000884:	0047      	lsls	r7, r0, #1
 8000886:	1c0c      	adds	r4, r1, #0
 8000888:	0a6d      	lsrs	r5, r5, #9
 800088a:	0e3f      	lsrs	r7, r7, #24
 800088c:	0fc6      	lsrs	r6, r0, #31
 800088e:	2f00      	cmp	r7, #0
 8000890:	d100      	bne.n	8000894 <__aeabi_fdiv+0x1c>
 8000892:	e06f      	b.n	8000974 <__aeabi_fdiv+0xfc>
 8000894:	2fff      	cmp	r7, #255	; 0xff
 8000896:	d100      	bne.n	800089a <__aeabi_fdiv+0x22>
 8000898:	e074      	b.n	8000984 <__aeabi_fdiv+0x10c>
 800089a:	2300      	movs	r3, #0
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	4699      	mov	r9, r3
 80008a0:	469a      	mov	sl, r3
 80008a2:	00ed      	lsls	r5, r5, #3
 80008a4:	04d2      	lsls	r2, r2, #19
 80008a6:	4315      	orrs	r5, r2
 80008a8:	3f7f      	subs	r7, #127	; 0x7f
 80008aa:	0263      	lsls	r3, r4, #9
 80008ac:	0a5b      	lsrs	r3, r3, #9
 80008ae:	4698      	mov	r8, r3
 80008b0:	0063      	lsls	r3, r4, #1
 80008b2:	0e1b      	lsrs	r3, r3, #24
 80008b4:	0fe4      	lsrs	r4, r4, #31
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d04d      	beq.n	8000956 <__aeabi_fdiv+0xde>
 80008ba:	2bff      	cmp	r3, #255	; 0xff
 80008bc:	d045      	beq.n	800094a <__aeabi_fdiv+0xd2>
 80008be:	4642      	mov	r2, r8
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	00d2      	lsls	r2, r2, #3
 80008c4:	04c9      	lsls	r1, r1, #19
 80008c6:	4311      	orrs	r1, r2
 80008c8:	4688      	mov	r8, r1
 80008ca:	2200      	movs	r2, #0
 80008cc:	3b7f      	subs	r3, #127	; 0x7f
 80008ce:	0031      	movs	r1, r6
 80008d0:	1aff      	subs	r7, r7, r3
 80008d2:	464b      	mov	r3, r9
 80008d4:	4061      	eors	r1, r4
 80008d6:	b2c9      	uxtb	r1, r1
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	d900      	bls.n	80008de <__aeabi_fdiv+0x66>
 80008dc:	e0b8      	b.n	8000a50 <__aeabi_fdiv+0x1d8>
 80008de:	4870      	ldr	r0, [pc, #448]	; (8000aa0 <__aeabi_fdiv+0x228>)
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	58c3      	ldr	r3, [r0, r3]
 80008e4:	469f      	mov	pc, r3
 80008e6:	2300      	movs	r3, #0
 80008e8:	4698      	mov	r8, r3
 80008ea:	0026      	movs	r6, r4
 80008ec:	4645      	mov	r5, r8
 80008ee:	4692      	mov	sl, r2
 80008f0:	4653      	mov	r3, sl
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fdiv+0x80>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fdiv+0x19c>
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	d100      	bne.n	80008fe <__aeabi_fdiv+0x86>
 80008fc:	e0a1      	b.n	8000a42 <__aeabi_fdiv+0x1ca>
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d018      	beq.n	8000934 <__aeabi_fdiv+0xbc>
 8000902:	003b      	movs	r3, r7
 8000904:	337f      	adds	r3, #127	; 0x7f
 8000906:	2b00      	cmp	r3, #0
 8000908:	dd6d      	ble.n	80009e6 <__aeabi_fdiv+0x16e>
 800090a:	076a      	lsls	r2, r5, #29
 800090c:	d004      	beq.n	8000918 <__aeabi_fdiv+0xa0>
 800090e:	220f      	movs	r2, #15
 8000910:	402a      	ands	r2, r5
 8000912:	2a04      	cmp	r2, #4
 8000914:	d000      	beq.n	8000918 <__aeabi_fdiv+0xa0>
 8000916:	3504      	adds	r5, #4
 8000918:	012a      	lsls	r2, r5, #4
 800091a:	d503      	bpl.n	8000924 <__aeabi_fdiv+0xac>
 800091c:	4b61      	ldr	r3, [pc, #388]	; (8000aa4 <__aeabi_fdiv+0x22c>)
 800091e:	401d      	ands	r5, r3
 8000920:	003b      	movs	r3, r7
 8000922:	3380      	adds	r3, #128	; 0x80
 8000924:	2bfe      	cmp	r3, #254	; 0xfe
 8000926:	dd00      	ble.n	800092a <__aeabi_fdiv+0xb2>
 8000928:	e074      	b.n	8000a14 <__aeabi_fdiv+0x19c>
 800092a:	01aa      	lsls	r2, r5, #6
 800092c:	0a52      	lsrs	r2, r2, #9
 800092e:	b2d8      	uxtb	r0, r3
 8000930:	e002      	b.n	8000938 <__aeabi_fdiv+0xc0>
 8000932:	000e      	movs	r6, r1
 8000934:	2000      	movs	r0, #0
 8000936:	2200      	movs	r2, #0
 8000938:	05c0      	lsls	r0, r0, #23
 800093a:	07f6      	lsls	r6, r6, #31
 800093c:	4310      	orrs	r0, r2
 800093e:	4330      	orrs	r0, r6
 8000940:	bce0      	pop	{r5, r6, r7}
 8000942:	46ba      	mov	sl, r7
 8000944:	46b1      	mov	r9, r6
 8000946:	46a8      	mov	r8, r5
 8000948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094a:	4643      	mov	r3, r8
 800094c:	2b00      	cmp	r3, #0
 800094e:	d13f      	bne.n	80009d0 <__aeabi_fdiv+0x158>
 8000950:	2202      	movs	r2, #2
 8000952:	3fff      	subs	r7, #255	; 0xff
 8000954:	e003      	b.n	800095e <__aeabi_fdiv+0xe6>
 8000956:	4643      	mov	r3, r8
 8000958:	2b00      	cmp	r3, #0
 800095a:	d12d      	bne.n	80009b8 <__aeabi_fdiv+0x140>
 800095c:	2201      	movs	r2, #1
 800095e:	0031      	movs	r1, r6
 8000960:	464b      	mov	r3, r9
 8000962:	4061      	eors	r1, r4
 8000964:	b2c9      	uxtb	r1, r1
 8000966:	4313      	orrs	r3, r2
 8000968:	2b0f      	cmp	r3, #15
 800096a:	d838      	bhi.n	80009de <__aeabi_fdiv+0x166>
 800096c:	484e      	ldr	r0, [pc, #312]	; (8000aa8 <__aeabi_fdiv+0x230>)
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	58c3      	ldr	r3, [r0, r3]
 8000972:	469f      	mov	pc, r3
 8000974:	2d00      	cmp	r5, #0
 8000976:	d113      	bne.n	80009a0 <__aeabi_fdiv+0x128>
 8000978:	2304      	movs	r3, #4
 800097a:	4699      	mov	r9, r3
 800097c:	3b03      	subs	r3, #3
 800097e:	2700      	movs	r7, #0
 8000980:	469a      	mov	sl, r3
 8000982:	e792      	b.n	80008aa <__aeabi_fdiv+0x32>
 8000984:	2d00      	cmp	r5, #0
 8000986:	d105      	bne.n	8000994 <__aeabi_fdiv+0x11c>
 8000988:	2308      	movs	r3, #8
 800098a:	4699      	mov	r9, r3
 800098c:	3b06      	subs	r3, #6
 800098e:	27ff      	movs	r7, #255	; 0xff
 8000990:	469a      	mov	sl, r3
 8000992:	e78a      	b.n	80008aa <__aeabi_fdiv+0x32>
 8000994:	230c      	movs	r3, #12
 8000996:	4699      	mov	r9, r3
 8000998:	3b09      	subs	r3, #9
 800099a:	27ff      	movs	r7, #255	; 0xff
 800099c:	469a      	mov	sl, r3
 800099e:	e784      	b.n	80008aa <__aeabi_fdiv+0x32>
 80009a0:	0028      	movs	r0, r5
 80009a2:	f002 fba9 	bl	80030f8 <__clzsi2>
 80009a6:	2776      	movs	r7, #118	; 0x76
 80009a8:	1f43      	subs	r3, r0, #5
 80009aa:	409d      	lsls	r5, r3
 80009ac:	2300      	movs	r3, #0
 80009ae:	427f      	negs	r7, r7
 80009b0:	4699      	mov	r9, r3
 80009b2:	469a      	mov	sl, r3
 80009b4:	1a3f      	subs	r7, r7, r0
 80009b6:	e778      	b.n	80008aa <__aeabi_fdiv+0x32>
 80009b8:	4640      	mov	r0, r8
 80009ba:	f002 fb9d 	bl	80030f8 <__clzsi2>
 80009be:	4642      	mov	r2, r8
 80009c0:	1f43      	subs	r3, r0, #5
 80009c2:	409a      	lsls	r2, r3
 80009c4:	2376      	movs	r3, #118	; 0x76
 80009c6:	425b      	negs	r3, r3
 80009c8:	4690      	mov	r8, r2
 80009ca:	1a1b      	subs	r3, r3, r0
 80009cc:	2200      	movs	r2, #0
 80009ce:	e77e      	b.n	80008ce <__aeabi_fdiv+0x56>
 80009d0:	2303      	movs	r3, #3
 80009d2:	464a      	mov	r2, r9
 80009d4:	431a      	orrs	r2, r3
 80009d6:	4691      	mov	r9, r2
 80009d8:	33fc      	adds	r3, #252	; 0xfc
 80009da:	2203      	movs	r2, #3
 80009dc:	e777      	b.n	80008ce <__aeabi_fdiv+0x56>
 80009de:	000e      	movs	r6, r1
 80009e0:	20ff      	movs	r0, #255	; 0xff
 80009e2:	2200      	movs	r2, #0
 80009e4:	e7a8      	b.n	8000938 <__aeabi_fdiv+0xc0>
 80009e6:	2201      	movs	r2, #1
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	2b1b      	cmp	r3, #27
 80009ec:	dca2      	bgt.n	8000934 <__aeabi_fdiv+0xbc>
 80009ee:	379e      	adds	r7, #158	; 0x9e
 80009f0:	002a      	movs	r2, r5
 80009f2:	40bd      	lsls	r5, r7
 80009f4:	40da      	lsrs	r2, r3
 80009f6:	1e6b      	subs	r3, r5, #1
 80009f8:	419d      	sbcs	r5, r3
 80009fa:	4315      	orrs	r5, r2
 80009fc:	076a      	lsls	r2, r5, #29
 80009fe:	d004      	beq.n	8000a0a <__aeabi_fdiv+0x192>
 8000a00:	220f      	movs	r2, #15
 8000a02:	402a      	ands	r2, r5
 8000a04:	2a04      	cmp	r2, #4
 8000a06:	d000      	beq.n	8000a0a <__aeabi_fdiv+0x192>
 8000a08:	3504      	adds	r5, #4
 8000a0a:	016a      	lsls	r2, r5, #5
 8000a0c:	d544      	bpl.n	8000a98 <__aeabi_fdiv+0x220>
 8000a0e:	2001      	movs	r0, #1
 8000a10:	2200      	movs	r2, #0
 8000a12:	e791      	b.n	8000938 <__aeabi_fdiv+0xc0>
 8000a14:	20ff      	movs	r0, #255	; 0xff
 8000a16:	2200      	movs	r2, #0
 8000a18:	e78e      	b.n	8000938 <__aeabi_fdiv+0xc0>
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	2600      	movs	r6, #0
 8000a1e:	20ff      	movs	r0, #255	; 0xff
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	e789      	b.n	8000938 <__aeabi_fdiv+0xc0>
 8000a24:	2300      	movs	r3, #0
 8000a26:	4698      	mov	r8, r3
 8000a28:	2280      	movs	r2, #128	; 0x80
 8000a2a:	03d2      	lsls	r2, r2, #15
 8000a2c:	4215      	tst	r5, r2
 8000a2e:	d008      	beq.n	8000a42 <__aeabi_fdiv+0x1ca>
 8000a30:	4643      	mov	r3, r8
 8000a32:	4213      	tst	r3, r2
 8000a34:	d105      	bne.n	8000a42 <__aeabi_fdiv+0x1ca>
 8000a36:	431a      	orrs	r2, r3
 8000a38:	0252      	lsls	r2, r2, #9
 8000a3a:	0026      	movs	r6, r4
 8000a3c:	20ff      	movs	r0, #255	; 0xff
 8000a3e:	0a52      	lsrs	r2, r2, #9
 8000a40:	e77a      	b.n	8000938 <__aeabi_fdiv+0xc0>
 8000a42:	2280      	movs	r2, #128	; 0x80
 8000a44:	03d2      	lsls	r2, r2, #15
 8000a46:	432a      	orrs	r2, r5
 8000a48:	0252      	lsls	r2, r2, #9
 8000a4a:	20ff      	movs	r0, #255	; 0xff
 8000a4c:	0a52      	lsrs	r2, r2, #9
 8000a4e:	e773      	b.n	8000938 <__aeabi_fdiv+0xc0>
 8000a50:	4642      	mov	r2, r8
 8000a52:	016b      	lsls	r3, r5, #5
 8000a54:	0155      	lsls	r5, r2, #5
 8000a56:	42ab      	cmp	r3, r5
 8000a58:	d21a      	bcs.n	8000a90 <__aeabi_fdiv+0x218>
 8000a5a:	201b      	movs	r0, #27
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	3f01      	subs	r7, #1
 8000a60:	2601      	movs	r6, #1
 8000a62:	001c      	movs	r4, r3
 8000a64:	0052      	lsls	r2, r2, #1
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	2c00      	cmp	r4, #0
 8000a6a:	db01      	blt.n	8000a70 <__aeabi_fdiv+0x1f8>
 8000a6c:	429d      	cmp	r5, r3
 8000a6e:	d801      	bhi.n	8000a74 <__aeabi_fdiv+0x1fc>
 8000a70:	1b5b      	subs	r3, r3, r5
 8000a72:	4332      	orrs	r2, r6
 8000a74:	3801      	subs	r0, #1
 8000a76:	2800      	cmp	r0, #0
 8000a78:	d1f3      	bne.n	8000a62 <__aeabi_fdiv+0x1ea>
 8000a7a:	1e58      	subs	r0, r3, #1
 8000a7c:	4183      	sbcs	r3, r0
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	001d      	movs	r5, r3
 8000a82:	003b      	movs	r3, r7
 8000a84:	337f      	adds	r3, #127	; 0x7f
 8000a86:	000e      	movs	r6, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	dd00      	ble.n	8000a8e <__aeabi_fdiv+0x216>
 8000a8c:	e73d      	b.n	800090a <__aeabi_fdiv+0x92>
 8000a8e:	e7aa      	b.n	80009e6 <__aeabi_fdiv+0x16e>
 8000a90:	201a      	movs	r0, #26
 8000a92:	2201      	movs	r2, #1
 8000a94:	1b5b      	subs	r3, r3, r5
 8000a96:	e7e3      	b.n	8000a60 <__aeabi_fdiv+0x1e8>
 8000a98:	01aa      	lsls	r2, r5, #6
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	0a52      	lsrs	r2, r2, #9
 8000a9e:	e74b      	b.n	8000938 <__aeabi_fdiv+0xc0>
 8000aa0:	08010e1c 	.word	0x08010e1c
 8000aa4:	f7ffffff 	.word	0xf7ffffff
 8000aa8:	08010e5c 	.word	0x08010e5c

08000aac <__eqsf2>:
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	0042      	lsls	r2, r0, #1
 8000ab0:	0245      	lsls	r5, r0, #9
 8000ab2:	024e      	lsls	r6, r1, #9
 8000ab4:	004c      	lsls	r4, r1, #1
 8000ab6:	0fc3      	lsrs	r3, r0, #31
 8000ab8:	0a6d      	lsrs	r5, r5, #9
 8000aba:	2001      	movs	r0, #1
 8000abc:	0e12      	lsrs	r2, r2, #24
 8000abe:	0a76      	lsrs	r6, r6, #9
 8000ac0:	0e24      	lsrs	r4, r4, #24
 8000ac2:	0fc9      	lsrs	r1, r1, #31
 8000ac4:	2aff      	cmp	r2, #255	; 0xff
 8000ac6:	d006      	beq.n	8000ad6 <__eqsf2+0x2a>
 8000ac8:	2cff      	cmp	r4, #255	; 0xff
 8000aca:	d003      	beq.n	8000ad4 <__eqsf2+0x28>
 8000acc:	42a2      	cmp	r2, r4
 8000ace:	d101      	bne.n	8000ad4 <__eqsf2+0x28>
 8000ad0:	42b5      	cmp	r5, r6
 8000ad2:	d006      	beq.n	8000ae2 <__eqsf2+0x36>
 8000ad4:	bd70      	pop	{r4, r5, r6, pc}
 8000ad6:	2d00      	cmp	r5, #0
 8000ad8:	d1fc      	bne.n	8000ad4 <__eqsf2+0x28>
 8000ada:	2cff      	cmp	r4, #255	; 0xff
 8000adc:	d1fa      	bne.n	8000ad4 <__eqsf2+0x28>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	d1f8      	bne.n	8000ad4 <__eqsf2+0x28>
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d006      	beq.n	8000af4 <__eqsf2+0x48>
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	2a00      	cmp	r2, #0
 8000aea:	d1f3      	bne.n	8000ad4 <__eqsf2+0x28>
 8000aec:	0028      	movs	r0, r5
 8000aee:	1e43      	subs	r3, r0, #1
 8000af0:	4198      	sbcs	r0, r3
 8000af2:	e7ef      	b.n	8000ad4 <__eqsf2+0x28>
 8000af4:	2000      	movs	r0, #0
 8000af6:	e7ed      	b.n	8000ad4 <__eqsf2+0x28>

08000af8 <__gesf2>:
 8000af8:	b570      	push	{r4, r5, r6, lr}
 8000afa:	0042      	lsls	r2, r0, #1
 8000afc:	0245      	lsls	r5, r0, #9
 8000afe:	024e      	lsls	r6, r1, #9
 8000b00:	004c      	lsls	r4, r1, #1
 8000b02:	0fc3      	lsrs	r3, r0, #31
 8000b04:	0a6d      	lsrs	r5, r5, #9
 8000b06:	0e12      	lsrs	r2, r2, #24
 8000b08:	0a76      	lsrs	r6, r6, #9
 8000b0a:	0e24      	lsrs	r4, r4, #24
 8000b0c:	0fc8      	lsrs	r0, r1, #31
 8000b0e:	2aff      	cmp	r2, #255	; 0xff
 8000b10:	d01b      	beq.n	8000b4a <__gesf2+0x52>
 8000b12:	2cff      	cmp	r4, #255	; 0xff
 8000b14:	d00e      	beq.n	8000b34 <__gesf2+0x3c>
 8000b16:	2a00      	cmp	r2, #0
 8000b18:	d11b      	bne.n	8000b52 <__gesf2+0x5a>
 8000b1a:	2c00      	cmp	r4, #0
 8000b1c:	d101      	bne.n	8000b22 <__gesf2+0x2a>
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	d01c      	beq.n	8000b5c <__gesf2+0x64>
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d00c      	beq.n	8000b40 <__gesf2+0x48>
 8000b26:	4283      	cmp	r3, r0
 8000b28:	d01c      	beq.n	8000b64 <__gesf2+0x6c>
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	1e58      	subs	r0, r3, #1
 8000b2e:	4008      	ands	r0, r1
 8000b30:	3801      	subs	r0, #1
 8000b32:	bd70      	pop	{r4, r5, r6, pc}
 8000b34:	2e00      	cmp	r6, #0
 8000b36:	d122      	bne.n	8000b7e <__gesf2+0x86>
 8000b38:	2a00      	cmp	r2, #0
 8000b3a:	d1f4      	bne.n	8000b26 <__gesf2+0x2e>
 8000b3c:	2d00      	cmp	r5, #0
 8000b3e:	d1f2      	bne.n	8000b26 <__gesf2+0x2e>
 8000b40:	2800      	cmp	r0, #0
 8000b42:	d1f6      	bne.n	8000b32 <__gesf2+0x3a>
 8000b44:	2001      	movs	r0, #1
 8000b46:	4240      	negs	r0, r0
 8000b48:	e7f3      	b.n	8000b32 <__gesf2+0x3a>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d117      	bne.n	8000b7e <__gesf2+0x86>
 8000b4e:	2cff      	cmp	r4, #255	; 0xff
 8000b50:	d0f0      	beq.n	8000b34 <__gesf2+0x3c>
 8000b52:	2c00      	cmp	r4, #0
 8000b54:	d1e7      	bne.n	8000b26 <__gesf2+0x2e>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d1e5      	bne.n	8000b26 <__gesf2+0x2e>
 8000b5a:	e7e6      	b.n	8000b2a <__gesf2+0x32>
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d0e7      	beq.n	8000b32 <__gesf2+0x3a>
 8000b62:	e7e2      	b.n	8000b2a <__gesf2+0x32>
 8000b64:	42a2      	cmp	r2, r4
 8000b66:	dc05      	bgt.n	8000b74 <__gesf2+0x7c>
 8000b68:	dbea      	blt.n	8000b40 <__gesf2+0x48>
 8000b6a:	42b5      	cmp	r5, r6
 8000b6c:	d802      	bhi.n	8000b74 <__gesf2+0x7c>
 8000b6e:	d3e7      	bcc.n	8000b40 <__gesf2+0x48>
 8000b70:	2000      	movs	r0, #0
 8000b72:	e7de      	b.n	8000b32 <__gesf2+0x3a>
 8000b74:	4243      	negs	r3, r0
 8000b76:	4158      	adcs	r0, r3
 8000b78:	0040      	lsls	r0, r0, #1
 8000b7a:	3801      	subs	r0, #1
 8000b7c:	e7d9      	b.n	8000b32 <__gesf2+0x3a>
 8000b7e:	2002      	movs	r0, #2
 8000b80:	4240      	negs	r0, r0
 8000b82:	e7d6      	b.n	8000b32 <__gesf2+0x3a>

08000b84 <__lesf2>:
 8000b84:	b570      	push	{r4, r5, r6, lr}
 8000b86:	0042      	lsls	r2, r0, #1
 8000b88:	0245      	lsls	r5, r0, #9
 8000b8a:	024e      	lsls	r6, r1, #9
 8000b8c:	004c      	lsls	r4, r1, #1
 8000b8e:	0fc3      	lsrs	r3, r0, #31
 8000b90:	0a6d      	lsrs	r5, r5, #9
 8000b92:	0e12      	lsrs	r2, r2, #24
 8000b94:	0a76      	lsrs	r6, r6, #9
 8000b96:	0e24      	lsrs	r4, r4, #24
 8000b98:	0fc8      	lsrs	r0, r1, #31
 8000b9a:	2aff      	cmp	r2, #255	; 0xff
 8000b9c:	d00b      	beq.n	8000bb6 <__lesf2+0x32>
 8000b9e:	2cff      	cmp	r4, #255	; 0xff
 8000ba0:	d00d      	beq.n	8000bbe <__lesf2+0x3a>
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	d11f      	bne.n	8000be6 <__lesf2+0x62>
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	d116      	bne.n	8000bd8 <__lesf2+0x54>
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	d114      	bne.n	8000bd8 <__lesf2+0x54>
 8000bae:	2000      	movs	r0, #0
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d010      	beq.n	8000bd6 <__lesf2+0x52>
 8000bb4:	e009      	b.n	8000bca <__lesf2+0x46>
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	d10c      	bne.n	8000bd4 <__lesf2+0x50>
 8000bba:	2cff      	cmp	r4, #255	; 0xff
 8000bbc:	d113      	bne.n	8000be6 <__lesf2+0x62>
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d108      	bne.n	8000bd4 <__lesf2+0x50>
 8000bc2:	2a00      	cmp	r2, #0
 8000bc4:	d008      	beq.n	8000bd8 <__lesf2+0x54>
 8000bc6:	4283      	cmp	r3, r0
 8000bc8:	d012      	beq.n	8000bf0 <__lesf2+0x6c>
 8000bca:	2102      	movs	r1, #2
 8000bcc:	1e58      	subs	r0, r3, #1
 8000bce:	4008      	ands	r0, r1
 8000bd0:	3801      	subs	r0, #1
 8000bd2:	e000      	b.n	8000bd6 <__lesf2+0x52>
 8000bd4:	2002      	movs	r0, #2
 8000bd6:	bd70      	pop	{r4, r5, r6, pc}
 8000bd8:	2d00      	cmp	r5, #0
 8000bda:	d1f4      	bne.n	8000bc6 <__lesf2+0x42>
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	d1fa      	bne.n	8000bd6 <__lesf2+0x52>
 8000be0:	2001      	movs	r0, #1
 8000be2:	4240      	negs	r0, r0
 8000be4:	e7f7      	b.n	8000bd6 <__lesf2+0x52>
 8000be6:	2c00      	cmp	r4, #0
 8000be8:	d1ed      	bne.n	8000bc6 <__lesf2+0x42>
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	d1eb      	bne.n	8000bc6 <__lesf2+0x42>
 8000bee:	e7ec      	b.n	8000bca <__lesf2+0x46>
 8000bf0:	42a2      	cmp	r2, r4
 8000bf2:	dc05      	bgt.n	8000c00 <__lesf2+0x7c>
 8000bf4:	dbf2      	blt.n	8000bdc <__lesf2+0x58>
 8000bf6:	42b5      	cmp	r5, r6
 8000bf8:	d802      	bhi.n	8000c00 <__lesf2+0x7c>
 8000bfa:	d3ef      	bcc.n	8000bdc <__lesf2+0x58>
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	e7ea      	b.n	8000bd6 <__lesf2+0x52>
 8000c00:	4243      	negs	r3, r0
 8000c02:	4158      	adcs	r0, r3
 8000c04:	0040      	lsls	r0, r0, #1
 8000c06:	3801      	subs	r0, #1
 8000c08:	e7e5      	b.n	8000bd6 <__lesf2+0x52>
 8000c0a:	46c0      	nop			; (mov r8, r8)

08000c0c <__aeabi_fmul>:
 8000c0c:	0243      	lsls	r3, r0, #9
 8000c0e:	0a5b      	lsrs	r3, r3, #9
 8000c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c12:	464f      	mov	r7, r9
 8000c14:	4646      	mov	r6, r8
 8000c16:	4699      	mov	r9, r3
 8000c18:	46d6      	mov	lr, sl
 8000c1a:	0fc3      	lsrs	r3, r0, #31
 8000c1c:	0045      	lsls	r5, r0, #1
 8000c1e:	4698      	mov	r8, r3
 8000c20:	b5c0      	push	{r6, r7, lr}
 8000c22:	464b      	mov	r3, r9
 8000c24:	1c0f      	adds	r7, r1, #0
 8000c26:	0e2d      	lsrs	r5, r5, #24
 8000c28:	d100      	bne.n	8000c2c <__aeabi_fmul+0x20>
 8000c2a:	e0cb      	b.n	8000dc4 <__aeabi_fmul+0x1b8>
 8000c2c:	2dff      	cmp	r5, #255	; 0xff
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_fmul+0x26>
 8000c30:	e0cf      	b.n	8000dd2 <__aeabi_fmul+0x1c6>
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	00db      	lsls	r3, r3, #3
 8000c36:	04d2      	lsls	r2, r2, #19
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	4691      	mov	r9, r2
 8000c3e:	2600      	movs	r6, #0
 8000c40:	469a      	mov	sl, r3
 8000c42:	3d7f      	subs	r5, #127	; 0x7f
 8000c44:	027c      	lsls	r4, r7, #9
 8000c46:	007b      	lsls	r3, r7, #1
 8000c48:	0a64      	lsrs	r4, r4, #9
 8000c4a:	0e1b      	lsrs	r3, r3, #24
 8000c4c:	0fff      	lsrs	r7, r7, #31
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d100      	bne.n	8000c54 <__aeabi_fmul+0x48>
 8000c52:	e0a9      	b.n	8000da8 <__aeabi_fmul+0x19c>
 8000c54:	2bff      	cmp	r3, #255	; 0xff
 8000c56:	d011      	beq.n	8000c7c <__aeabi_fmul+0x70>
 8000c58:	2280      	movs	r2, #128	; 0x80
 8000c5a:	00e4      	lsls	r4, r4, #3
 8000c5c:	04d2      	lsls	r2, r2, #19
 8000c5e:	4314      	orrs	r4, r2
 8000c60:	4642      	mov	r2, r8
 8000c62:	3b7f      	subs	r3, #127	; 0x7f
 8000c64:	195b      	adds	r3, r3, r5
 8000c66:	407a      	eors	r2, r7
 8000c68:	2000      	movs	r0, #0
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	1c5d      	adds	r5, r3, #1
 8000c6e:	2e0a      	cmp	r6, #10
 8000c70:	dd13      	ble.n	8000c9a <__aeabi_fmul+0x8e>
 8000c72:	003a      	movs	r2, r7
 8000c74:	2e0b      	cmp	r6, #11
 8000c76:	d047      	beq.n	8000d08 <__aeabi_fmul+0xfc>
 8000c78:	4647      	mov	r7, r8
 8000c7a:	e03f      	b.n	8000cfc <__aeabi_fmul+0xf0>
 8000c7c:	002b      	movs	r3, r5
 8000c7e:	33ff      	adds	r3, #255	; 0xff
 8000c80:	2c00      	cmp	r4, #0
 8000c82:	d11e      	bne.n	8000cc2 <__aeabi_fmul+0xb6>
 8000c84:	2202      	movs	r2, #2
 8000c86:	4316      	orrs	r6, r2
 8000c88:	4642      	mov	r2, r8
 8000c8a:	3501      	adds	r5, #1
 8000c8c:	407a      	eors	r2, r7
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	35ff      	adds	r5, #255	; 0xff
 8000c92:	2e0a      	cmp	r6, #10
 8000c94:	dd00      	ble.n	8000c98 <__aeabi_fmul+0x8c>
 8000c96:	e0e4      	b.n	8000e62 <__aeabi_fmul+0x256>
 8000c98:	2002      	movs	r0, #2
 8000c9a:	2e02      	cmp	r6, #2
 8000c9c:	dc1c      	bgt.n	8000cd8 <__aeabi_fmul+0xcc>
 8000c9e:	3e01      	subs	r6, #1
 8000ca0:	2e01      	cmp	r6, #1
 8000ca2:	d842      	bhi.n	8000d2a <__aeabi_fmul+0x11e>
 8000ca4:	2802      	cmp	r0, #2
 8000ca6:	d03d      	beq.n	8000d24 <__aeabi_fmul+0x118>
 8000ca8:	2801      	cmp	r0, #1
 8000caa:	d166      	bne.n	8000d7a <__aeabi_fmul+0x16e>
 8000cac:	2000      	movs	r0, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	05c0      	lsls	r0, r0, #23
 8000cb2:	4308      	orrs	r0, r1
 8000cb4:	07d2      	lsls	r2, r2, #31
 8000cb6:	4310      	orrs	r0, r2
 8000cb8:	bce0      	pop	{r5, r6, r7}
 8000cba:	46ba      	mov	sl, r7
 8000cbc:	46b1      	mov	r9, r6
 8000cbe:	46a8      	mov	r8, r5
 8000cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	4316      	orrs	r6, r2
 8000cc6:	4642      	mov	r2, r8
 8000cc8:	3501      	adds	r5, #1
 8000cca:	407a      	eors	r2, r7
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	35ff      	adds	r5, #255	; 0xff
 8000cd0:	2e0a      	cmp	r6, #10
 8000cd2:	dd00      	ble.n	8000cd6 <__aeabi_fmul+0xca>
 8000cd4:	e0e4      	b.n	8000ea0 <__aeabi_fmul+0x294>
 8000cd6:	2003      	movs	r0, #3
 8000cd8:	2101      	movs	r1, #1
 8000cda:	40b1      	lsls	r1, r6
 8000cdc:	26a6      	movs	r6, #166	; 0xa6
 8000cde:	00f6      	lsls	r6, r6, #3
 8000ce0:	4231      	tst	r1, r6
 8000ce2:	d10a      	bne.n	8000cfa <__aeabi_fmul+0xee>
 8000ce4:	2690      	movs	r6, #144	; 0x90
 8000ce6:	00b6      	lsls	r6, r6, #2
 8000ce8:	4231      	tst	r1, r6
 8000cea:	d116      	bne.n	8000d1a <__aeabi_fmul+0x10e>
 8000cec:	3eb9      	subs	r6, #185	; 0xb9
 8000cee:	3eff      	subs	r6, #255	; 0xff
 8000cf0:	420e      	tst	r6, r1
 8000cf2:	d01a      	beq.n	8000d2a <__aeabi_fmul+0x11e>
 8000cf4:	46a1      	mov	r9, r4
 8000cf6:	4682      	mov	sl, r0
 8000cf8:	e000      	b.n	8000cfc <__aeabi_fmul+0xf0>
 8000cfa:	0017      	movs	r7, r2
 8000cfc:	4653      	mov	r3, sl
 8000cfe:	003a      	movs	r2, r7
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d00f      	beq.n	8000d24 <__aeabi_fmul+0x118>
 8000d04:	464c      	mov	r4, r9
 8000d06:	4650      	mov	r0, sl
 8000d08:	2803      	cmp	r0, #3
 8000d0a:	d1cd      	bne.n	8000ca8 <__aeabi_fmul+0x9c>
 8000d0c:	2180      	movs	r1, #128	; 0x80
 8000d0e:	03c9      	lsls	r1, r1, #15
 8000d10:	4321      	orrs	r1, r4
 8000d12:	0249      	lsls	r1, r1, #9
 8000d14:	20ff      	movs	r0, #255	; 0xff
 8000d16:	0a49      	lsrs	r1, r1, #9
 8000d18:	e7ca      	b.n	8000cb0 <__aeabi_fmul+0xa4>
 8000d1a:	2180      	movs	r1, #128	; 0x80
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	20ff      	movs	r0, #255	; 0xff
 8000d20:	03c9      	lsls	r1, r1, #15
 8000d22:	e7c5      	b.n	8000cb0 <__aeabi_fmul+0xa4>
 8000d24:	20ff      	movs	r0, #255	; 0xff
 8000d26:	2100      	movs	r1, #0
 8000d28:	e7c2      	b.n	8000cb0 <__aeabi_fmul+0xa4>
 8000d2a:	0c20      	lsrs	r0, r4, #16
 8000d2c:	4649      	mov	r1, r9
 8000d2e:	0424      	lsls	r4, r4, #16
 8000d30:	0c24      	lsrs	r4, r4, #16
 8000d32:	0027      	movs	r7, r4
 8000d34:	0c0e      	lsrs	r6, r1, #16
 8000d36:	0409      	lsls	r1, r1, #16
 8000d38:	0c09      	lsrs	r1, r1, #16
 8000d3a:	4374      	muls	r4, r6
 8000d3c:	434f      	muls	r7, r1
 8000d3e:	4346      	muls	r6, r0
 8000d40:	4348      	muls	r0, r1
 8000d42:	0c39      	lsrs	r1, r7, #16
 8000d44:	1900      	adds	r0, r0, r4
 8000d46:	1809      	adds	r1, r1, r0
 8000d48:	428c      	cmp	r4, r1
 8000d4a:	d903      	bls.n	8000d54 <__aeabi_fmul+0x148>
 8000d4c:	2080      	movs	r0, #128	; 0x80
 8000d4e:	0240      	lsls	r0, r0, #9
 8000d50:	4684      	mov	ip, r0
 8000d52:	4466      	add	r6, ip
 8000d54:	043f      	lsls	r7, r7, #16
 8000d56:	0408      	lsls	r0, r1, #16
 8000d58:	0c3f      	lsrs	r7, r7, #16
 8000d5a:	19c0      	adds	r0, r0, r7
 8000d5c:	0184      	lsls	r4, r0, #6
 8000d5e:	1e67      	subs	r7, r4, #1
 8000d60:	41bc      	sbcs	r4, r7
 8000d62:	0c09      	lsrs	r1, r1, #16
 8000d64:	0e80      	lsrs	r0, r0, #26
 8000d66:	1989      	adds	r1, r1, r6
 8000d68:	4304      	orrs	r4, r0
 8000d6a:	0189      	lsls	r1, r1, #6
 8000d6c:	430c      	orrs	r4, r1
 8000d6e:	0109      	lsls	r1, r1, #4
 8000d70:	d571      	bpl.n	8000e56 <__aeabi_fmul+0x24a>
 8000d72:	2301      	movs	r3, #1
 8000d74:	0861      	lsrs	r1, r4, #1
 8000d76:	401c      	ands	r4, r3
 8000d78:	430c      	orrs	r4, r1
 8000d7a:	002b      	movs	r3, r5
 8000d7c:	337f      	adds	r3, #127	; 0x7f
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	dd51      	ble.n	8000e26 <__aeabi_fmul+0x21a>
 8000d82:	0761      	lsls	r1, r4, #29
 8000d84:	d004      	beq.n	8000d90 <__aeabi_fmul+0x184>
 8000d86:	210f      	movs	r1, #15
 8000d88:	4021      	ands	r1, r4
 8000d8a:	2904      	cmp	r1, #4
 8000d8c:	d000      	beq.n	8000d90 <__aeabi_fmul+0x184>
 8000d8e:	3404      	adds	r4, #4
 8000d90:	0121      	lsls	r1, r4, #4
 8000d92:	d503      	bpl.n	8000d9c <__aeabi_fmul+0x190>
 8000d94:	4b43      	ldr	r3, [pc, #268]	; (8000ea4 <__aeabi_fmul+0x298>)
 8000d96:	401c      	ands	r4, r3
 8000d98:	002b      	movs	r3, r5
 8000d9a:	3380      	adds	r3, #128	; 0x80
 8000d9c:	2bfe      	cmp	r3, #254	; 0xfe
 8000d9e:	dcc1      	bgt.n	8000d24 <__aeabi_fmul+0x118>
 8000da0:	01a1      	lsls	r1, r4, #6
 8000da2:	0a49      	lsrs	r1, r1, #9
 8000da4:	b2d8      	uxtb	r0, r3
 8000da6:	e783      	b.n	8000cb0 <__aeabi_fmul+0xa4>
 8000da8:	2c00      	cmp	r4, #0
 8000daa:	d12c      	bne.n	8000e06 <__aeabi_fmul+0x1fa>
 8000dac:	2301      	movs	r3, #1
 8000dae:	4642      	mov	r2, r8
 8000db0:	431e      	orrs	r6, r3
 8000db2:	002b      	movs	r3, r5
 8000db4:	407a      	eors	r2, r7
 8000db6:	2001      	movs	r0, #1
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	1c5d      	adds	r5, r3, #1
 8000dbc:	2e0a      	cmp	r6, #10
 8000dbe:	dd00      	ble.n	8000dc2 <__aeabi_fmul+0x1b6>
 8000dc0:	e757      	b.n	8000c72 <__aeabi_fmul+0x66>
 8000dc2:	e76a      	b.n	8000c9a <__aeabi_fmul+0x8e>
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d110      	bne.n	8000dea <__aeabi_fmul+0x1de>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	2604      	movs	r6, #4
 8000dcc:	2500      	movs	r5, #0
 8000dce:	469a      	mov	sl, r3
 8000dd0:	e738      	b.n	8000c44 <__aeabi_fmul+0x38>
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d104      	bne.n	8000de0 <__aeabi_fmul+0x1d4>
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	2608      	movs	r6, #8
 8000dda:	25ff      	movs	r5, #255	; 0xff
 8000ddc:	469a      	mov	sl, r3
 8000dde:	e731      	b.n	8000c44 <__aeabi_fmul+0x38>
 8000de0:	2303      	movs	r3, #3
 8000de2:	260c      	movs	r6, #12
 8000de4:	25ff      	movs	r5, #255	; 0xff
 8000de6:	469a      	mov	sl, r3
 8000de8:	e72c      	b.n	8000c44 <__aeabi_fmul+0x38>
 8000dea:	4648      	mov	r0, r9
 8000dec:	f002 f984 	bl	80030f8 <__clzsi2>
 8000df0:	464a      	mov	r2, r9
 8000df2:	1f43      	subs	r3, r0, #5
 8000df4:	2576      	movs	r5, #118	; 0x76
 8000df6:	409a      	lsls	r2, r3
 8000df8:	2300      	movs	r3, #0
 8000dfa:	426d      	negs	r5, r5
 8000dfc:	4691      	mov	r9, r2
 8000dfe:	2600      	movs	r6, #0
 8000e00:	469a      	mov	sl, r3
 8000e02:	1a2d      	subs	r5, r5, r0
 8000e04:	e71e      	b.n	8000c44 <__aeabi_fmul+0x38>
 8000e06:	0020      	movs	r0, r4
 8000e08:	f002 f976 	bl	80030f8 <__clzsi2>
 8000e0c:	4642      	mov	r2, r8
 8000e0e:	1f43      	subs	r3, r0, #5
 8000e10:	409c      	lsls	r4, r3
 8000e12:	1a2b      	subs	r3, r5, r0
 8000e14:	3b76      	subs	r3, #118	; 0x76
 8000e16:	407a      	eors	r2, r7
 8000e18:	2000      	movs	r0, #0
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	1c5d      	adds	r5, r3, #1
 8000e1e:	2e0a      	cmp	r6, #10
 8000e20:	dd00      	ble.n	8000e24 <__aeabi_fmul+0x218>
 8000e22:	e726      	b.n	8000c72 <__aeabi_fmul+0x66>
 8000e24:	e739      	b.n	8000c9a <__aeabi_fmul+0x8e>
 8000e26:	2101      	movs	r1, #1
 8000e28:	1acb      	subs	r3, r1, r3
 8000e2a:	2b1b      	cmp	r3, #27
 8000e2c:	dd00      	ble.n	8000e30 <__aeabi_fmul+0x224>
 8000e2e:	e73d      	b.n	8000cac <__aeabi_fmul+0xa0>
 8000e30:	359e      	adds	r5, #158	; 0x9e
 8000e32:	0021      	movs	r1, r4
 8000e34:	40ac      	lsls	r4, r5
 8000e36:	40d9      	lsrs	r1, r3
 8000e38:	1e63      	subs	r3, r4, #1
 8000e3a:	419c      	sbcs	r4, r3
 8000e3c:	4321      	orrs	r1, r4
 8000e3e:	074b      	lsls	r3, r1, #29
 8000e40:	d004      	beq.n	8000e4c <__aeabi_fmul+0x240>
 8000e42:	230f      	movs	r3, #15
 8000e44:	400b      	ands	r3, r1
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	d000      	beq.n	8000e4c <__aeabi_fmul+0x240>
 8000e4a:	3104      	adds	r1, #4
 8000e4c:	014b      	lsls	r3, r1, #5
 8000e4e:	d504      	bpl.n	8000e5a <__aeabi_fmul+0x24e>
 8000e50:	2001      	movs	r0, #1
 8000e52:	2100      	movs	r1, #0
 8000e54:	e72c      	b.n	8000cb0 <__aeabi_fmul+0xa4>
 8000e56:	001d      	movs	r5, r3
 8000e58:	e78f      	b.n	8000d7a <__aeabi_fmul+0x16e>
 8000e5a:	0189      	lsls	r1, r1, #6
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	0a49      	lsrs	r1, r1, #9
 8000e60:	e726      	b.n	8000cb0 <__aeabi_fmul+0xa4>
 8000e62:	2302      	movs	r3, #2
 8000e64:	2e0f      	cmp	r6, #15
 8000e66:	d10c      	bne.n	8000e82 <__aeabi_fmul+0x276>
 8000e68:	2180      	movs	r1, #128	; 0x80
 8000e6a:	464b      	mov	r3, r9
 8000e6c:	03c9      	lsls	r1, r1, #15
 8000e6e:	420b      	tst	r3, r1
 8000e70:	d00d      	beq.n	8000e8e <__aeabi_fmul+0x282>
 8000e72:	420c      	tst	r4, r1
 8000e74:	d10b      	bne.n	8000e8e <__aeabi_fmul+0x282>
 8000e76:	4321      	orrs	r1, r4
 8000e78:	0249      	lsls	r1, r1, #9
 8000e7a:	003a      	movs	r2, r7
 8000e7c:	20ff      	movs	r0, #255	; 0xff
 8000e7e:	0a49      	lsrs	r1, r1, #9
 8000e80:	e716      	b.n	8000cb0 <__aeabi_fmul+0xa4>
 8000e82:	2e0b      	cmp	r6, #11
 8000e84:	d000      	beq.n	8000e88 <__aeabi_fmul+0x27c>
 8000e86:	e6f7      	b.n	8000c78 <__aeabi_fmul+0x6c>
 8000e88:	46a1      	mov	r9, r4
 8000e8a:	469a      	mov	sl, r3
 8000e8c:	e736      	b.n	8000cfc <__aeabi_fmul+0xf0>
 8000e8e:	2180      	movs	r1, #128	; 0x80
 8000e90:	464b      	mov	r3, r9
 8000e92:	03c9      	lsls	r1, r1, #15
 8000e94:	4319      	orrs	r1, r3
 8000e96:	0249      	lsls	r1, r1, #9
 8000e98:	4642      	mov	r2, r8
 8000e9a:	20ff      	movs	r0, #255	; 0xff
 8000e9c:	0a49      	lsrs	r1, r1, #9
 8000e9e:	e707      	b.n	8000cb0 <__aeabi_fmul+0xa4>
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e7df      	b.n	8000e64 <__aeabi_fmul+0x258>
 8000ea4:	f7ffffff 	.word	0xf7ffffff

08000ea8 <__aeabi_fsub>:
 8000ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eaa:	46c6      	mov	lr, r8
 8000eac:	0243      	lsls	r3, r0, #9
 8000eae:	0a5b      	lsrs	r3, r3, #9
 8000eb0:	0045      	lsls	r5, r0, #1
 8000eb2:	00da      	lsls	r2, r3, #3
 8000eb4:	0fc4      	lsrs	r4, r0, #31
 8000eb6:	0248      	lsls	r0, r1, #9
 8000eb8:	004f      	lsls	r7, r1, #1
 8000eba:	4694      	mov	ip, r2
 8000ebc:	0a42      	lsrs	r2, r0, #9
 8000ebe:	001e      	movs	r6, r3
 8000ec0:	4690      	mov	r8, r2
 8000ec2:	b500      	push	{lr}
 8000ec4:	0e2d      	lsrs	r5, r5, #24
 8000ec6:	0e3f      	lsrs	r7, r7, #24
 8000ec8:	0fc9      	lsrs	r1, r1, #31
 8000eca:	0980      	lsrs	r0, r0, #6
 8000ecc:	2fff      	cmp	r7, #255	; 0xff
 8000ece:	d059      	beq.n	8000f84 <__aeabi_fsub+0xdc>
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4051      	eors	r1, r2
 8000ed4:	428c      	cmp	r4, r1
 8000ed6:	d039      	beq.n	8000f4c <__aeabi_fsub+0xa4>
 8000ed8:	1bea      	subs	r2, r5, r7
 8000eda:	2a00      	cmp	r2, #0
 8000edc:	dd58      	ble.n	8000f90 <__aeabi_fsub+0xe8>
 8000ede:	2f00      	cmp	r7, #0
 8000ee0:	d068      	beq.n	8000fb4 <__aeabi_fsub+0x10c>
 8000ee2:	2dff      	cmp	r5, #255	; 0xff
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_fsub+0x40>
 8000ee6:	e0d1      	b.n	800108c <__aeabi_fsub+0x1e4>
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	04db      	lsls	r3, r3, #19
 8000eec:	4318      	orrs	r0, r3
 8000eee:	2a1b      	cmp	r2, #27
 8000ef0:	dc00      	bgt.n	8000ef4 <__aeabi_fsub+0x4c>
 8000ef2:	e0e3      	b.n	80010bc <__aeabi_fsub+0x214>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	4662      	mov	r2, ip
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	015a      	lsls	r2, r3, #5
 8000efc:	d400      	bmi.n	8000f00 <__aeabi_fsub+0x58>
 8000efe:	e0ac      	b.n	800105a <__aeabi_fsub+0x1b2>
 8000f00:	019b      	lsls	r3, r3, #6
 8000f02:	099e      	lsrs	r6, r3, #6
 8000f04:	0030      	movs	r0, r6
 8000f06:	f002 f8f7 	bl	80030f8 <__clzsi2>
 8000f0a:	0033      	movs	r3, r6
 8000f0c:	3805      	subs	r0, #5
 8000f0e:	4083      	lsls	r3, r0
 8000f10:	4285      	cmp	r5, r0
 8000f12:	dc00      	bgt.n	8000f16 <__aeabi_fsub+0x6e>
 8000f14:	e0c6      	b.n	80010a4 <__aeabi_fsub+0x1fc>
 8000f16:	4ab2      	ldr	r2, [pc, #712]	; (80011e0 <__aeabi_fsub+0x338>)
 8000f18:	1a2d      	subs	r5, r5, r0
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	075a      	lsls	r2, r3, #29
 8000f1e:	d004      	beq.n	8000f2a <__aeabi_fsub+0x82>
 8000f20:	220f      	movs	r2, #15
 8000f22:	401a      	ands	r2, r3
 8000f24:	2a04      	cmp	r2, #4
 8000f26:	d000      	beq.n	8000f2a <__aeabi_fsub+0x82>
 8000f28:	3304      	adds	r3, #4
 8000f2a:	015a      	lsls	r2, r3, #5
 8000f2c:	d400      	bmi.n	8000f30 <__aeabi_fsub+0x88>
 8000f2e:	e097      	b.n	8001060 <__aeabi_fsub+0x1b8>
 8000f30:	1c6a      	adds	r2, r5, #1
 8000f32:	2dfe      	cmp	r5, #254	; 0xfe
 8000f34:	d100      	bne.n	8000f38 <__aeabi_fsub+0x90>
 8000f36:	e084      	b.n	8001042 <__aeabi_fsub+0x19a>
 8000f38:	019b      	lsls	r3, r3, #6
 8000f3a:	0a5e      	lsrs	r6, r3, #9
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	05d0      	lsls	r0, r2, #23
 8000f40:	4330      	orrs	r0, r6
 8000f42:	07e4      	lsls	r4, r4, #31
 8000f44:	4320      	orrs	r0, r4
 8000f46:	bc80      	pop	{r7}
 8000f48:	46b8      	mov	r8, r7
 8000f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f4c:	1bea      	subs	r2, r5, r7
 8000f4e:	2a00      	cmp	r2, #0
 8000f50:	dd41      	ble.n	8000fd6 <__aeabi_fsub+0x12e>
 8000f52:	2f00      	cmp	r7, #0
 8000f54:	d06b      	beq.n	800102e <__aeabi_fsub+0x186>
 8000f56:	2dff      	cmp	r5, #255	; 0xff
 8000f58:	d100      	bne.n	8000f5c <__aeabi_fsub+0xb4>
 8000f5a:	e097      	b.n	800108c <__aeabi_fsub+0x1e4>
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	04db      	lsls	r3, r3, #19
 8000f60:	4318      	orrs	r0, r3
 8000f62:	2a1b      	cmp	r2, #27
 8000f64:	dc00      	bgt.n	8000f68 <__aeabi_fsub+0xc0>
 8000f66:	e0cc      	b.n	8001102 <__aeabi_fsub+0x25a>
 8000f68:	2301      	movs	r3, #1
 8000f6a:	4463      	add	r3, ip
 8000f6c:	015a      	lsls	r2, r3, #5
 8000f6e:	d574      	bpl.n	800105a <__aeabi_fsub+0x1b2>
 8000f70:	3501      	adds	r5, #1
 8000f72:	2dff      	cmp	r5, #255	; 0xff
 8000f74:	d065      	beq.n	8001042 <__aeabi_fsub+0x19a>
 8000f76:	2201      	movs	r2, #1
 8000f78:	499a      	ldr	r1, [pc, #616]	; (80011e4 <__aeabi_fsub+0x33c>)
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	085b      	lsrs	r3, r3, #1
 8000f7e:	400b      	ands	r3, r1
 8000f80:	4313      	orrs	r3, r2
 8000f82:	e7cb      	b.n	8000f1c <__aeabi_fsub+0x74>
 8000f84:	2800      	cmp	r0, #0
 8000f86:	d01f      	beq.n	8000fc8 <__aeabi_fsub+0x120>
 8000f88:	428c      	cmp	r4, r1
 8000f8a:	d022      	beq.n	8000fd2 <__aeabi_fsub+0x12a>
 8000f8c:	002a      	movs	r2, r5
 8000f8e:	3aff      	subs	r2, #255	; 0xff
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	d035      	beq.n	8001000 <__aeabi_fsub+0x158>
 8000f94:	1b7a      	subs	r2, r7, r5
 8000f96:	2d00      	cmp	r5, #0
 8000f98:	d000      	beq.n	8000f9c <__aeabi_fsub+0xf4>
 8000f9a:	e099      	b.n	80010d0 <__aeabi_fsub+0x228>
 8000f9c:	4663      	mov	r3, ip
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_fsub+0xfc>
 8000fa2:	e0dd      	b.n	8001160 <__aeabi_fsub+0x2b8>
 8000fa4:	1e53      	subs	r3, r2, #1
 8000fa6:	2a01      	cmp	r2, #1
 8000fa8:	d100      	bne.n	8000fac <__aeabi_fsub+0x104>
 8000faa:	e105      	b.n	80011b8 <__aeabi_fsub+0x310>
 8000fac:	2aff      	cmp	r2, #255	; 0xff
 8000fae:	d06b      	beq.n	8001088 <__aeabi_fsub+0x1e0>
 8000fb0:	001a      	movs	r2, r3
 8000fb2:	e094      	b.n	80010de <__aeabi_fsub+0x236>
 8000fb4:	2800      	cmp	r0, #0
 8000fb6:	d073      	beq.n	80010a0 <__aeabi_fsub+0x1f8>
 8000fb8:	1e51      	subs	r1, r2, #1
 8000fba:	2a01      	cmp	r2, #1
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_fsub+0x118>
 8000fbe:	e0df      	b.n	8001180 <__aeabi_fsub+0x2d8>
 8000fc0:	2aff      	cmp	r2, #255	; 0xff
 8000fc2:	d063      	beq.n	800108c <__aeabi_fsub+0x1e4>
 8000fc4:	000a      	movs	r2, r1
 8000fc6:	e792      	b.n	8000eee <__aeabi_fsub+0x46>
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4051      	eors	r1, r2
 8000fcc:	42a1      	cmp	r1, r4
 8000fce:	d000      	beq.n	8000fd2 <__aeabi_fsub+0x12a>
 8000fd0:	e782      	b.n	8000ed8 <__aeabi_fsub+0x30>
 8000fd2:	002a      	movs	r2, r5
 8000fd4:	3aff      	subs	r2, #255	; 0xff
 8000fd6:	2a00      	cmp	r2, #0
 8000fd8:	d036      	beq.n	8001048 <__aeabi_fsub+0x1a0>
 8000fda:	1b7a      	subs	r2, r7, r5
 8000fdc:	2d00      	cmp	r5, #0
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_fsub+0x13a>
 8000fe0:	e0aa      	b.n	8001138 <__aeabi_fsub+0x290>
 8000fe2:	2fff      	cmp	r7, #255	; 0xff
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_fsub+0x140>
 8000fe6:	e0da      	b.n	800119e <__aeabi_fsub+0x2f6>
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	4661      	mov	r1, ip
 8000fec:	04db      	lsls	r3, r3, #19
 8000fee:	4319      	orrs	r1, r3
 8000ff0:	468c      	mov	ip, r1
 8000ff2:	2a1b      	cmp	r2, #27
 8000ff4:	dc00      	bgt.n	8000ff8 <__aeabi_fsub+0x150>
 8000ff6:	e0d4      	b.n	80011a2 <__aeabi_fsub+0x2fa>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	003d      	movs	r5, r7
 8000ffc:	181b      	adds	r3, r3, r0
 8000ffe:	e7b5      	b.n	8000f6c <__aeabi_fsub+0xc4>
 8001000:	27fe      	movs	r7, #254	; 0xfe
 8001002:	1c6a      	adds	r2, r5, #1
 8001004:	4217      	tst	r7, r2
 8001006:	d171      	bne.n	80010ec <__aeabi_fsub+0x244>
 8001008:	2d00      	cmp	r5, #0
 800100a:	d000      	beq.n	800100e <__aeabi_fsub+0x166>
 800100c:	e09e      	b.n	800114c <__aeabi_fsub+0x2a4>
 800100e:	4663      	mov	r3, ip
 8001010:	2b00      	cmp	r3, #0
 8001012:	d100      	bne.n	8001016 <__aeabi_fsub+0x16e>
 8001014:	e0d5      	b.n	80011c2 <__aeabi_fsub+0x31a>
 8001016:	2200      	movs	r2, #0
 8001018:	2800      	cmp	r0, #0
 800101a:	d100      	bne.n	800101e <__aeabi_fsub+0x176>
 800101c:	e78f      	b.n	8000f3e <__aeabi_fsub+0x96>
 800101e:	1a1b      	subs	r3, r3, r0
 8001020:	015e      	lsls	r6, r3, #5
 8001022:	d400      	bmi.n	8001026 <__aeabi_fsub+0x17e>
 8001024:	e0d6      	b.n	80011d4 <__aeabi_fsub+0x32c>
 8001026:	4663      	mov	r3, ip
 8001028:	000c      	movs	r4, r1
 800102a:	1ac3      	subs	r3, r0, r3
 800102c:	e776      	b.n	8000f1c <__aeabi_fsub+0x74>
 800102e:	2800      	cmp	r0, #0
 8001030:	d036      	beq.n	80010a0 <__aeabi_fsub+0x1f8>
 8001032:	1e51      	subs	r1, r2, #1
 8001034:	2a01      	cmp	r2, #1
 8001036:	d100      	bne.n	800103a <__aeabi_fsub+0x192>
 8001038:	e09a      	b.n	8001170 <__aeabi_fsub+0x2c8>
 800103a:	2aff      	cmp	r2, #255	; 0xff
 800103c:	d026      	beq.n	800108c <__aeabi_fsub+0x1e4>
 800103e:	000a      	movs	r2, r1
 8001040:	e78f      	b.n	8000f62 <__aeabi_fsub+0xba>
 8001042:	22ff      	movs	r2, #255	; 0xff
 8001044:	2600      	movs	r6, #0
 8001046:	e77a      	b.n	8000f3e <__aeabi_fsub+0x96>
 8001048:	27fe      	movs	r7, #254	; 0xfe
 800104a:	1c6a      	adds	r2, r5, #1
 800104c:	4217      	tst	r7, r2
 800104e:	d062      	beq.n	8001116 <__aeabi_fsub+0x26e>
 8001050:	2aff      	cmp	r2, #255	; 0xff
 8001052:	d0f6      	beq.n	8001042 <__aeabi_fsub+0x19a>
 8001054:	0015      	movs	r5, r2
 8001056:	4460      	add	r0, ip
 8001058:	0843      	lsrs	r3, r0, #1
 800105a:	075a      	lsls	r2, r3, #29
 800105c:	d000      	beq.n	8001060 <__aeabi_fsub+0x1b8>
 800105e:	e75f      	b.n	8000f20 <__aeabi_fsub+0x78>
 8001060:	08db      	lsrs	r3, r3, #3
 8001062:	2dff      	cmp	r5, #255	; 0xff
 8001064:	d012      	beq.n	800108c <__aeabi_fsub+0x1e4>
 8001066:	025b      	lsls	r3, r3, #9
 8001068:	0a5e      	lsrs	r6, r3, #9
 800106a:	b2ea      	uxtb	r2, r5
 800106c:	e767      	b.n	8000f3e <__aeabi_fsub+0x96>
 800106e:	4662      	mov	r2, ip
 8001070:	2a00      	cmp	r2, #0
 8001072:	d100      	bne.n	8001076 <__aeabi_fsub+0x1ce>
 8001074:	e093      	b.n	800119e <__aeabi_fsub+0x2f6>
 8001076:	2800      	cmp	r0, #0
 8001078:	d008      	beq.n	800108c <__aeabi_fsub+0x1e4>
 800107a:	2280      	movs	r2, #128	; 0x80
 800107c:	03d2      	lsls	r2, r2, #15
 800107e:	4213      	tst	r3, r2
 8001080:	d004      	beq.n	800108c <__aeabi_fsub+0x1e4>
 8001082:	4640      	mov	r0, r8
 8001084:	4210      	tst	r0, r2
 8001086:	d101      	bne.n	800108c <__aeabi_fsub+0x1e4>
 8001088:	000c      	movs	r4, r1
 800108a:	4643      	mov	r3, r8
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0d8      	beq.n	8001042 <__aeabi_fsub+0x19a>
 8001090:	2680      	movs	r6, #128	; 0x80
 8001092:	03f6      	lsls	r6, r6, #15
 8001094:	431e      	orrs	r6, r3
 8001096:	0276      	lsls	r6, r6, #9
 8001098:	22ff      	movs	r2, #255	; 0xff
 800109a:	0a76      	lsrs	r6, r6, #9
 800109c:	e74f      	b.n	8000f3e <__aeabi_fsub+0x96>
 800109e:	4643      	mov	r3, r8
 80010a0:	0015      	movs	r5, r2
 80010a2:	e7de      	b.n	8001062 <__aeabi_fsub+0x1ba>
 80010a4:	2220      	movs	r2, #32
 80010a6:	1b40      	subs	r0, r0, r5
 80010a8:	3001      	adds	r0, #1
 80010aa:	1a12      	subs	r2, r2, r0
 80010ac:	0019      	movs	r1, r3
 80010ae:	4093      	lsls	r3, r2
 80010b0:	40c1      	lsrs	r1, r0
 80010b2:	1e5a      	subs	r2, r3, #1
 80010b4:	4193      	sbcs	r3, r2
 80010b6:	2500      	movs	r5, #0
 80010b8:	430b      	orrs	r3, r1
 80010ba:	e72f      	b.n	8000f1c <__aeabi_fsub+0x74>
 80010bc:	2320      	movs	r3, #32
 80010be:	1a9b      	subs	r3, r3, r2
 80010c0:	0001      	movs	r1, r0
 80010c2:	4098      	lsls	r0, r3
 80010c4:	0003      	movs	r3, r0
 80010c6:	40d1      	lsrs	r1, r2
 80010c8:	1e5a      	subs	r2, r3, #1
 80010ca:	4193      	sbcs	r3, r2
 80010cc:	430b      	orrs	r3, r1
 80010ce:	e712      	b.n	8000ef6 <__aeabi_fsub+0x4e>
 80010d0:	2fff      	cmp	r7, #255	; 0xff
 80010d2:	d0d9      	beq.n	8001088 <__aeabi_fsub+0x1e0>
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	4664      	mov	r4, ip
 80010d8:	04db      	lsls	r3, r3, #19
 80010da:	431c      	orrs	r4, r3
 80010dc:	46a4      	mov	ip, r4
 80010de:	2a1b      	cmp	r2, #27
 80010e0:	dd52      	ble.n	8001188 <__aeabi_fsub+0x2e0>
 80010e2:	2301      	movs	r3, #1
 80010e4:	000c      	movs	r4, r1
 80010e6:	003d      	movs	r5, r7
 80010e8:	1ac3      	subs	r3, r0, r3
 80010ea:	e706      	b.n	8000efa <__aeabi_fsub+0x52>
 80010ec:	4663      	mov	r3, ip
 80010ee:	1a1e      	subs	r6, r3, r0
 80010f0:	0173      	lsls	r3, r6, #5
 80010f2:	d439      	bmi.n	8001168 <__aeabi_fsub+0x2c0>
 80010f4:	2e00      	cmp	r6, #0
 80010f6:	d000      	beq.n	80010fa <__aeabi_fsub+0x252>
 80010f8:	e704      	b.n	8000f04 <__aeabi_fsub+0x5c>
 80010fa:	2400      	movs	r4, #0
 80010fc:	2200      	movs	r2, #0
 80010fe:	2600      	movs	r6, #0
 8001100:	e71d      	b.n	8000f3e <__aeabi_fsub+0x96>
 8001102:	2320      	movs	r3, #32
 8001104:	1a9b      	subs	r3, r3, r2
 8001106:	0001      	movs	r1, r0
 8001108:	4098      	lsls	r0, r3
 800110a:	0003      	movs	r3, r0
 800110c:	40d1      	lsrs	r1, r2
 800110e:	1e5a      	subs	r2, r3, #1
 8001110:	4193      	sbcs	r3, r2
 8001112:	430b      	orrs	r3, r1
 8001114:	e729      	b.n	8000f6a <__aeabi_fsub+0xc2>
 8001116:	2d00      	cmp	r5, #0
 8001118:	d1a9      	bne.n	800106e <__aeabi_fsub+0x1c6>
 800111a:	4663      	mov	r3, ip
 800111c:	2b00      	cmp	r3, #0
 800111e:	d056      	beq.n	80011ce <__aeabi_fsub+0x326>
 8001120:	2200      	movs	r2, #0
 8001122:	2800      	cmp	r0, #0
 8001124:	d100      	bne.n	8001128 <__aeabi_fsub+0x280>
 8001126:	e70a      	b.n	8000f3e <__aeabi_fsub+0x96>
 8001128:	0003      	movs	r3, r0
 800112a:	4463      	add	r3, ip
 800112c:	015a      	lsls	r2, r3, #5
 800112e:	d594      	bpl.n	800105a <__aeabi_fsub+0x1b2>
 8001130:	4a2b      	ldr	r2, [pc, #172]	; (80011e0 <__aeabi_fsub+0x338>)
 8001132:	3501      	adds	r5, #1
 8001134:	4013      	ands	r3, r2
 8001136:	e790      	b.n	800105a <__aeabi_fsub+0x1b2>
 8001138:	4663      	mov	r3, ip
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0af      	beq.n	800109e <__aeabi_fsub+0x1f6>
 800113e:	1e53      	subs	r3, r2, #1
 8001140:	2a01      	cmp	r2, #1
 8001142:	d015      	beq.n	8001170 <__aeabi_fsub+0x2c8>
 8001144:	2aff      	cmp	r2, #255	; 0xff
 8001146:	d02a      	beq.n	800119e <__aeabi_fsub+0x2f6>
 8001148:	001a      	movs	r2, r3
 800114a:	e752      	b.n	8000ff2 <__aeabi_fsub+0x14a>
 800114c:	4662      	mov	r2, ip
 800114e:	2a00      	cmp	r2, #0
 8001150:	d191      	bne.n	8001076 <__aeabi_fsub+0x1ce>
 8001152:	2800      	cmp	r0, #0
 8001154:	d198      	bne.n	8001088 <__aeabi_fsub+0x1e0>
 8001156:	2680      	movs	r6, #128	; 0x80
 8001158:	2400      	movs	r4, #0
 800115a:	22ff      	movs	r2, #255	; 0xff
 800115c:	03f6      	lsls	r6, r6, #15
 800115e:	e6ee      	b.n	8000f3e <__aeabi_fsub+0x96>
 8001160:	000c      	movs	r4, r1
 8001162:	4643      	mov	r3, r8
 8001164:	0015      	movs	r5, r2
 8001166:	e77c      	b.n	8001062 <__aeabi_fsub+0x1ba>
 8001168:	4663      	mov	r3, ip
 800116a:	000c      	movs	r4, r1
 800116c:	1ac6      	subs	r6, r0, r3
 800116e:	e6c9      	b.n	8000f04 <__aeabi_fsub+0x5c>
 8001170:	0003      	movs	r3, r0
 8001172:	4463      	add	r3, ip
 8001174:	2501      	movs	r5, #1
 8001176:	015a      	lsls	r2, r3, #5
 8001178:	d400      	bmi.n	800117c <__aeabi_fsub+0x2d4>
 800117a:	e76e      	b.n	800105a <__aeabi_fsub+0x1b2>
 800117c:	2502      	movs	r5, #2
 800117e:	e6fa      	b.n	8000f76 <__aeabi_fsub+0xce>
 8001180:	4663      	mov	r3, ip
 8001182:	2501      	movs	r5, #1
 8001184:	1a1b      	subs	r3, r3, r0
 8001186:	e6b8      	b.n	8000efa <__aeabi_fsub+0x52>
 8001188:	4664      	mov	r4, ip
 800118a:	2320      	movs	r3, #32
 800118c:	40d4      	lsrs	r4, r2
 800118e:	1a9b      	subs	r3, r3, r2
 8001190:	4662      	mov	r2, ip
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	1e5a      	subs	r2, r3, #1
 8001198:	4193      	sbcs	r3, r2
 800119a:	4323      	orrs	r3, r4
 800119c:	e7a2      	b.n	80010e4 <__aeabi_fsub+0x23c>
 800119e:	4643      	mov	r3, r8
 80011a0:	e774      	b.n	800108c <__aeabi_fsub+0x1e4>
 80011a2:	4661      	mov	r1, ip
 80011a4:	2320      	movs	r3, #32
 80011a6:	40d1      	lsrs	r1, r2
 80011a8:	1a9b      	subs	r3, r3, r2
 80011aa:	4662      	mov	r2, ip
 80011ac:	409a      	lsls	r2, r3
 80011ae:	0013      	movs	r3, r2
 80011b0:	1e5a      	subs	r2, r3, #1
 80011b2:	4193      	sbcs	r3, r2
 80011b4:	430b      	orrs	r3, r1
 80011b6:	e720      	b.n	8000ffa <__aeabi_fsub+0x152>
 80011b8:	4663      	mov	r3, ip
 80011ba:	000c      	movs	r4, r1
 80011bc:	2501      	movs	r5, #1
 80011be:	1ac3      	subs	r3, r0, r3
 80011c0:	e69b      	b.n	8000efa <__aeabi_fsub+0x52>
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d099      	beq.n	80010fa <__aeabi_fsub+0x252>
 80011c6:	000c      	movs	r4, r1
 80011c8:	4646      	mov	r6, r8
 80011ca:	2200      	movs	r2, #0
 80011cc:	e6b7      	b.n	8000f3e <__aeabi_fsub+0x96>
 80011ce:	4646      	mov	r6, r8
 80011d0:	2200      	movs	r2, #0
 80011d2:	e6b4      	b.n	8000f3e <__aeabi_fsub+0x96>
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d000      	beq.n	80011da <__aeabi_fsub+0x332>
 80011d8:	e73f      	b.n	800105a <__aeabi_fsub+0x1b2>
 80011da:	2400      	movs	r4, #0
 80011dc:	2600      	movs	r6, #0
 80011de:	e6ae      	b.n	8000f3e <__aeabi_fsub+0x96>
 80011e0:	fbffffff 	.word	0xfbffffff
 80011e4:	7dffffff 	.word	0x7dffffff

080011e8 <__aeabi_f2iz>:
 80011e8:	0241      	lsls	r1, r0, #9
 80011ea:	0042      	lsls	r2, r0, #1
 80011ec:	0fc3      	lsrs	r3, r0, #31
 80011ee:	0a49      	lsrs	r1, r1, #9
 80011f0:	2000      	movs	r0, #0
 80011f2:	0e12      	lsrs	r2, r2, #24
 80011f4:	2a7e      	cmp	r2, #126	; 0x7e
 80011f6:	dd03      	ble.n	8001200 <__aeabi_f2iz+0x18>
 80011f8:	2a9d      	cmp	r2, #157	; 0x9d
 80011fa:	dd02      	ble.n	8001202 <__aeabi_f2iz+0x1a>
 80011fc:	4a09      	ldr	r2, [pc, #36]	; (8001224 <__aeabi_f2iz+0x3c>)
 80011fe:	1898      	adds	r0, r3, r2
 8001200:	4770      	bx	lr
 8001202:	2080      	movs	r0, #128	; 0x80
 8001204:	0400      	lsls	r0, r0, #16
 8001206:	4301      	orrs	r1, r0
 8001208:	2a95      	cmp	r2, #149	; 0x95
 800120a:	dc07      	bgt.n	800121c <__aeabi_f2iz+0x34>
 800120c:	2096      	movs	r0, #150	; 0x96
 800120e:	1a82      	subs	r2, r0, r2
 8001210:	40d1      	lsrs	r1, r2
 8001212:	4248      	negs	r0, r1
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f3      	bne.n	8001200 <__aeabi_f2iz+0x18>
 8001218:	0008      	movs	r0, r1
 800121a:	e7f1      	b.n	8001200 <__aeabi_f2iz+0x18>
 800121c:	3a96      	subs	r2, #150	; 0x96
 800121e:	4091      	lsls	r1, r2
 8001220:	e7f7      	b.n	8001212 <__aeabi_f2iz+0x2a>
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	7fffffff 	.word	0x7fffffff

08001228 <__aeabi_i2f>:
 8001228:	b570      	push	{r4, r5, r6, lr}
 800122a:	2800      	cmp	r0, #0
 800122c:	d013      	beq.n	8001256 <__aeabi_i2f+0x2e>
 800122e:	17c3      	asrs	r3, r0, #31
 8001230:	18c5      	adds	r5, r0, r3
 8001232:	405d      	eors	r5, r3
 8001234:	0fc4      	lsrs	r4, r0, #31
 8001236:	0028      	movs	r0, r5
 8001238:	f001 ff5e 	bl	80030f8 <__clzsi2>
 800123c:	239e      	movs	r3, #158	; 0x9e
 800123e:	0001      	movs	r1, r0
 8001240:	1a1b      	subs	r3, r3, r0
 8001242:	2b96      	cmp	r3, #150	; 0x96
 8001244:	dc0f      	bgt.n	8001266 <__aeabi_i2f+0x3e>
 8001246:	2808      	cmp	r0, #8
 8001248:	d031      	beq.n	80012ae <__aeabi_i2f+0x86>
 800124a:	3908      	subs	r1, #8
 800124c:	408d      	lsls	r5, r1
 800124e:	026d      	lsls	r5, r5, #9
 8001250:	0a6d      	lsrs	r5, r5, #9
 8001252:	b2d8      	uxtb	r0, r3
 8001254:	e002      	b.n	800125c <__aeabi_i2f+0x34>
 8001256:	2400      	movs	r4, #0
 8001258:	2000      	movs	r0, #0
 800125a:	2500      	movs	r5, #0
 800125c:	05c0      	lsls	r0, r0, #23
 800125e:	4328      	orrs	r0, r5
 8001260:	07e4      	lsls	r4, r4, #31
 8001262:	4320      	orrs	r0, r4
 8001264:	bd70      	pop	{r4, r5, r6, pc}
 8001266:	2b99      	cmp	r3, #153	; 0x99
 8001268:	dd0c      	ble.n	8001284 <__aeabi_i2f+0x5c>
 800126a:	2205      	movs	r2, #5
 800126c:	1a12      	subs	r2, r2, r0
 800126e:	0028      	movs	r0, r5
 8001270:	40d0      	lsrs	r0, r2
 8001272:	0002      	movs	r2, r0
 8001274:	0008      	movs	r0, r1
 8001276:	301b      	adds	r0, #27
 8001278:	4085      	lsls	r5, r0
 800127a:	0028      	movs	r0, r5
 800127c:	1e45      	subs	r5, r0, #1
 800127e:	41a8      	sbcs	r0, r5
 8001280:	4302      	orrs	r2, r0
 8001282:	0015      	movs	r5, r2
 8001284:	2905      	cmp	r1, #5
 8001286:	dc16      	bgt.n	80012b6 <__aeabi_i2f+0x8e>
 8001288:	002a      	movs	r2, r5
 800128a:	480f      	ldr	r0, [pc, #60]	; (80012c8 <__aeabi_i2f+0xa0>)
 800128c:	4002      	ands	r2, r0
 800128e:	076e      	lsls	r6, r5, #29
 8001290:	d009      	beq.n	80012a6 <__aeabi_i2f+0x7e>
 8001292:	260f      	movs	r6, #15
 8001294:	4035      	ands	r5, r6
 8001296:	2d04      	cmp	r5, #4
 8001298:	d005      	beq.n	80012a6 <__aeabi_i2f+0x7e>
 800129a:	3204      	adds	r2, #4
 800129c:	0155      	lsls	r5, r2, #5
 800129e:	d502      	bpl.n	80012a6 <__aeabi_i2f+0x7e>
 80012a0:	239f      	movs	r3, #159	; 0x9f
 80012a2:	4002      	ands	r2, r0
 80012a4:	1a5b      	subs	r3, r3, r1
 80012a6:	0192      	lsls	r2, r2, #6
 80012a8:	0a55      	lsrs	r5, r2, #9
 80012aa:	b2d8      	uxtb	r0, r3
 80012ac:	e7d6      	b.n	800125c <__aeabi_i2f+0x34>
 80012ae:	026d      	lsls	r5, r5, #9
 80012b0:	2096      	movs	r0, #150	; 0x96
 80012b2:	0a6d      	lsrs	r5, r5, #9
 80012b4:	e7d2      	b.n	800125c <__aeabi_i2f+0x34>
 80012b6:	1f4a      	subs	r2, r1, #5
 80012b8:	4095      	lsls	r5, r2
 80012ba:	002a      	movs	r2, r5
 80012bc:	4802      	ldr	r0, [pc, #8]	; (80012c8 <__aeabi_i2f+0xa0>)
 80012be:	4002      	ands	r2, r0
 80012c0:	076e      	lsls	r6, r5, #29
 80012c2:	d0f0      	beq.n	80012a6 <__aeabi_i2f+0x7e>
 80012c4:	e7e5      	b.n	8001292 <__aeabi_i2f+0x6a>
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	fbffffff 	.word	0xfbffffff

080012cc <__aeabi_dadd>:
 80012cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ce:	464f      	mov	r7, r9
 80012d0:	4646      	mov	r6, r8
 80012d2:	46d6      	mov	lr, sl
 80012d4:	0004      	movs	r4, r0
 80012d6:	b5c0      	push	{r6, r7, lr}
 80012d8:	001f      	movs	r7, r3
 80012da:	030b      	lsls	r3, r1, #12
 80012dc:	0010      	movs	r0, r2
 80012de:	004e      	lsls	r6, r1, #1
 80012e0:	0a5b      	lsrs	r3, r3, #9
 80012e2:	0fcd      	lsrs	r5, r1, #31
 80012e4:	0f61      	lsrs	r1, r4, #29
 80012e6:	007a      	lsls	r2, r7, #1
 80012e8:	4319      	orrs	r1, r3
 80012ea:	00e3      	lsls	r3, r4, #3
 80012ec:	033c      	lsls	r4, r7, #12
 80012ee:	0fff      	lsrs	r7, r7, #31
 80012f0:	46bc      	mov	ip, r7
 80012f2:	0a64      	lsrs	r4, r4, #9
 80012f4:	0f47      	lsrs	r7, r0, #29
 80012f6:	4327      	orrs	r7, r4
 80012f8:	0d76      	lsrs	r6, r6, #21
 80012fa:	0d52      	lsrs	r2, r2, #21
 80012fc:	00c0      	lsls	r0, r0, #3
 80012fe:	46b9      	mov	r9, r7
 8001300:	4680      	mov	r8, r0
 8001302:	1ab7      	subs	r7, r6, r2
 8001304:	4565      	cmp	r5, ip
 8001306:	d100      	bne.n	800130a <__aeabi_dadd+0x3e>
 8001308:	e09b      	b.n	8001442 <__aeabi_dadd+0x176>
 800130a:	2f00      	cmp	r7, #0
 800130c:	dc00      	bgt.n	8001310 <__aeabi_dadd+0x44>
 800130e:	e084      	b.n	800141a <__aeabi_dadd+0x14e>
 8001310:	2a00      	cmp	r2, #0
 8001312:	d100      	bne.n	8001316 <__aeabi_dadd+0x4a>
 8001314:	e0be      	b.n	8001494 <__aeabi_dadd+0x1c8>
 8001316:	4ac8      	ldr	r2, [pc, #800]	; (8001638 <__aeabi_dadd+0x36c>)
 8001318:	4296      	cmp	r6, r2
 800131a:	d100      	bne.n	800131e <__aeabi_dadd+0x52>
 800131c:	e124      	b.n	8001568 <__aeabi_dadd+0x29c>
 800131e:	2280      	movs	r2, #128	; 0x80
 8001320:	464c      	mov	r4, r9
 8001322:	0412      	lsls	r2, r2, #16
 8001324:	4314      	orrs	r4, r2
 8001326:	46a1      	mov	r9, r4
 8001328:	2f38      	cmp	r7, #56	; 0x38
 800132a:	dd00      	ble.n	800132e <__aeabi_dadd+0x62>
 800132c:	e167      	b.n	80015fe <__aeabi_dadd+0x332>
 800132e:	2f1f      	cmp	r7, #31
 8001330:	dd00      	ble.n	8001334 <__aeabi_dadd+0x68>
 8001332:	e1d6      	b.n	80016e2 <__aeabi_dadd+0x416>
 8001334:	2220      	movs	r2, #32
 8001336:	464c      	mov	r4, r9
 8001338:	1bd2      	subs	r2, r2, r7
 800133a:	4094      	lsls	r4, r2
 800133c:	46a2      	mov	sl, r4
 800133e:	4644      	mov	r4, r8
 8001340:	40fc      	lsrs	r4, r7
 8001342:	0020      	movs	r0, r4
 8001344:	4654      	mov	r4, sl
 8001346:	4304      	orrs	r4, r0
 8001348:	4640      	mov	r0, r8
 800134a:	4090      	lsls	r0, r2
 800134c:	1e42      	subs	r2, r0, #1
 800134e:	4190      	sbcs	r0, r2
 8001350:	464a      	mov	r2, r9
 8001352:	40fa      	lsrs	r2, r7
 8001354:	4304      	orrs	r4, r0
 8001356:	1a89      	subs	r1, r1, r2
 8001358:	1b1c      	subs	r4, r3, r4
 800135a:	42a3      	cmp	r3, r4
 800135c:	4192      	sbcs	r2, r2
 800135e:	4252      	negs	r2, r2
 8001360:	1a8b      	subs	r3, r1, r2
 8001362:	469a      	mov	sl, r3
 8001364:	4653      	mov	r3, sl
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	d400      	bmi.n	800136c <__aeabi_dadd+0xa0>
 800136a:	e0d4      	b.n	8001516 <__aeabi_dadd+0x24a>
 800136c:	4653      	mov	r3, sl
 800136e:	025a      	lsls	r2, r3, #9
 8001370:	0a53      	lsrs	r3, r2, #9
 8001372:	469a      	mov	sl, r3
 8001374:	4653      	mov	r3, sl
 8001376:	2b00      	cmp	r3, #0
 8001378:	d100      	bne.n	800137c <__aeabi_dadd+0xb0>
 800137a:	e104      	b.n	8001586 <__aeabi_dadd+0x2ba>
 800137c:	4650      	mov	r0, sl
 800137e:	f001 febb 	bl	80030f8 <__clzsi2>
 8001382:	0003      	movs	r3, r0
 8001384:	3b08      	subs	r3, #8
 8001386:	2220      	movs	r2, #32
 8001388:	0020      	movs	r0, r4
 800138a:	1ad2      	subs	r2, r2, r3
 800138c:	4651      	mov	r1, sl
 800138e:	40d0      	lsrs	r0, r2
 8001390:	4099      	lsls	r1, r3
 8001392:	0002      	movs	r2, r0
 8001394:	409c      	lsls	r4, r3
 8001396:	430a      	orrs	r2, r1
 8001398:	42b3      	cmp	r3, r6
 800139a:	da00      	bge.n	800139e <__aeabi_dadd+0xd2>
 800139c:	e102      	b.n	80015a4 <__aeabi_dadd+0x2d8>
 800139e:	1b9b      	subs	r3, r3, r6
 80013a0:	1c59      	adds	r1, r3, #1
 80013a2:	291f      	cmp	r1, #31
 80013a4:	dd00      	ble.n	80013a8 <__aeabi_dadd+0xdc>
 80013a6:	e0a7      	b.n	80014f8 <__aeabi_dadd+0x22c>
 80013a8:	2320      	movs	r3, #32
 80013aa:	0010      	movs	r0, r2
 80013ac:	0026      	movs	r6, r4
 80013ae:	1a5b      	subs	r3, r3, r1
 80013b0:	409c      	lsls	r4, r3
 80013b2:	4098      	lsls	r0, r3
 80013b4:	40ce      	lsrs	r6, r1
 80013b6:	40ca      	lsrs	r2, r1
 80013b8:	1e63      	subs	r3, r4, #1
 80013ba:	419c      	sbcs	r4, r3
 80013bc:	4330      	orrs	r0, r6
 80013be:	4692      	mov	sl, r2
 80013c0:	2600      	movs	r6, #0
 80013c2:	4304      	orrs	r4, r0
 80013c4:	0763      	lsls	r3, r4, #29
 80013c6:	d009      	beq.n	80013dc <__aeabi_dadd+0x110>
 80013c8:	230f      	movs	r3, #15
 80013ca:	4023      	ands	r3, r4
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	d005      	beq.n	80013dc <__aeabi_dadd+0x110>
 80013d0:	1d23      	adds	r3, r4, #4
 80013d2:	42a3      	cmp	r3, r4
 80013d4:	41a4      	sbcs	r4, r4
 80013d6:	4264      	negs	r4, r4
 80013d8:	44a2      	add	sl, r4
 80013da:	001c      	movs	r4, r3
 80013dc:	4653      	mov	r3, sl
 80013de:	021b      	lsls	r3, r3, #8
 80013e0:	d400      	bmi.n	80013e4 <__aeabi_dadd+0x118>
 80013e2:	e09b      	b.n	800151c <__aeabi_dadd+0x250>
 80013e4:	4b94      	ldr	r3, [pc, #592]	; (8001638 <__aeabi_dadd+0x36c>)
 80013e6:	3601      	adds	r6, #1
 80013e8:	429e      	cmp	r6, r3
 80013ea:	d100      	bne.n	80013ee <__aeabi_dadd+0x122>
 80013ec:	e0b8      	b.n	8001560 <__aeabi_dadd+0x294>
 80013ee:	4653      	mov	r3, sl
 80013f0:	4992      	ldr	r1, [pc, #584]	; (800163c <__aeabi_dadd+0x370>)
 80013f2:	08e4      	lsrs	r4, r4, #3
 80013f4:	400b      	ands	r3, r1
 80013f6:	0019      	movs	r1, r3
 80013f8:	075b      	lsls	r3, r3, #29
 80013fa:	4323      	orrs	r3, r4
 80013fc:	0572      	lsls	r2, r6, #21
 80013fe:	024c      	lsls	r4, r1, #9
 8001400:	0b24      	lsrs	r4, r4, #12
 8001402:	0d52      	lsrs	r2, r2, #21
 8001404:	0512      	lsls	r2, r2, #20
 8001406:	07ed      	lsls	r5, r5, #31
 8001408:	4322      	orrs	r2, r4
 800140a:	432a      	orrs	r2, r5
 800140c:	0018      	movs	r0, r3
 800140e:	0011      	movs	r1, r2
 8001410:	bce0      	pop	{r5, r6, r7}
 8001412:	46ba      	mov	sl, r7
 8001414:	46b1      	mov	r9, r6
 8001416:	46a8      	mov	r8, r5
 8001418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141a:	2f00      	cmp	r7, #0
 800141c:	d048      	beq.n	80014b0 <__aeabi_dadd+0x1e4>
 800141e:	1b97      	subs	r7, r2, r6
 8001420:	2e00      	cmp	r6, #0
 8001422:	d000      	beq.n	8001426 <__aeabi_dadd+0x15a>
 8001424:	e10e      	b.n	8001644 <__aeabi_dadd+0x378>
 8001426:	000c      	movs	r4, r1
 8001428:	431c      	orrs	r4, r3
 800142a:	d100      	bne.n	800142e <__aeabi_dadd+0x162>
 800142c:	e1b7      	b.n	800179e <__aeabi_dadd+0x4d2>
 800142e:	1e7c      	subs	r4, r7, #1
 8001430:	2f01      	cmp	r7, #1
 8001432:	d100      	bne.n	8001436 <__aeabi_dadd+0x16a>
 8001434:	e226      	b.n	8001884 <__aeabi_dadd+0x5b8>
 8001436:	4d80      	ldr	r5, [pc, #512]	; (8001638 <__aeabi_dadd+0x36c>)
 8001438:	42af      	cmp	r7, r5
 800143a:	d100      	bne.n	800143e <__aeabi_dadd+0x172>
 800143c:	e1d5      	b.n	80017ea <__aeabi_dadd+0x51e>
 800143e:	0027      	movs	r7, r4
 8001440:	e107      	b.n	8001652 <__aeabi_dadd+0x386>
 8001442:	2f00      	cmp	r7, #0
 8001444:	dc00      	bgt.n	8001448 <__aeabi_dadd+0x17c>
 8001446:	e0b2      	b.n	80015ae <__aeabi_dadd+0x2e2>
 8001448:	2a00      	cmp	r2, #0
 800144a:	d047      	beq.n	80014dc <__aeabi_dadd+0x210>
 800144c:	4a7a      	ldr	r2, [pc, #488]	; (8001638 <__aeabi_dadd+0x36c>)
 800144e:	4296      	cmp	r6, r2
 8001450:	d100      	bne.n	8001454 <__aeabi_dadd+0x188>
 8001452:	e089      	b.n	8001568 <__aeabi_dadd+0x29c>
 8001454:	2280      	movs	r2, #128	; 0x80
 8001456:	464c      	mov	r4, r9
 8001458:	0412      	lsls	r2, r2, #16
 800145a:	4314      	orrs	r4, r2
 800145c:	46a1      	mov	r9, r4
 800145e:	2f38      	cmp	r7, #56	; 0x38
 8001460:	dc6b      	bgt.n	800153a <__aeabi_dadd+0x26e>
 8001462:	2f1f      	cmp	r7, #31
 8001464:	dc00      	bgt.n	8001468 <__aeabi_dadd+0x19c>
 8001466:	e16e      	b.n	8001746 <__aeabi_dadd+0x47a>
 8001468:	003a      	movs	r2, r7
 800146a:	4648      	mov	r0, r9
 800146c:	3a20      	subs	r2, #32
 800146e:	40d0      	lsrs	r0, r2
 8001470:	4684      	mov	ip, r0
 8001472:	2f20      	cmp	r7, #32
 8001474:	d007      	beq.n	8001486 <__aeabi_dadd+0x1ba>
 8001476:	2240      	movs	r2, #64	; 0x40
 8001478:	4648      	mov	r0, r9
 800147a:	1bd2      	subs	r2, r2, r7
 800147c:	4090      	lsls	r0, r2
 800147e:	0002      	movs	r2, r0
 8001480:	4640      	mov	r0, r8
 8001482:	4310      	orrs	r0, r2
 8001484:	4680      	mov	r8, r0
 8001486:	4640      	mov	r0, r8
 8001488:	1e42      	subs	r2, r0, #1
 800148a:	4190      	sbcs	r0, r2
 800148c:	4662      	mov	r2, ip
 800148e:	0004      	movs	r4, r0
 8001490:	4314      	orrs	r4, r2
 8001492:	e057      	b.n	8001544 <__aeabi_dadd+0x278>
 8001494:	464a      	mov	r2, r9
 8001496:	4302      	orrs	r2, r0
 8001498:	d100      	bne.n	800149c <__aeabi_dadd+0x1d0>
 800149a:	e103      	b.n	80016a4 <__aeabi_dadd+0x3d8>
 800149c:	1e7a      	subs	r2, r7, #1
 800149e:	2f01      	cmp	r7, #1
 80014a0:	d100      	bne.n	80014a4 <__aeabi_dadd+0x1d8>
 80014a2:	e193      	b.n	80017cc <__aeabi_dadd+0x500>
 80014a4:	4c64      	ldr	r4, [pc, #400]	; (8001638 <__aeabi_dadd+0x36c>)
 80014a6:	42a7      	cmp	r7, r4
 80014a8:	d100      	bne.n	80014ac <__aeabi_dadd+0x1e0>
 80014aa:	e18a      	b.n	80017c2 <__aeabi_dadd+0x4f6>
 80014ac:	0017      	movs	r7, r2
 80014ae:	e73b      	b.n	8001328 <__aeabi_dadd+0x5c>
 80014b0:	4c63      	ldr	r4, [pc, #396]	; (8001640 <__aeabi_dadd+0x374>)
 80014b2:	1c72      	adds	r2, r6, #1
 80014b4:	4222      	tst	r2, r4
 80014b6:	d000      	beq.n	80014ba <__aeabi_dadd+0x1ee>
 80014b8:	e0e0      	b.n	800167c <__aeabi_dadd+0x3b0>
 80014ba:	000a      	movs	r2, r1
 80014bc:	431a      	orrs	r2, r3
 80014be:	2e00      	cmp	r6, #0
 80014c0:	d000      	beq.n	80014c4 <__aeabi_dadd+0x1f8>
 80014c2:	e174      	b.n	80017ae <__aeabi_dadd+0x4e2>
 80014c4:	2a00      	cmp	r2, #0
 80014c6:	d100      	bne.n	80014ca <__aeabi_dadd+0x1fe>
 80014c8:	e1d0      	b.n	800186c <__aeabi_dadd+0x5a0>
 80014ca:	464a      	mov	r2, r9
 80014cc:	4302      	orrs	r2, r0
 80014ce:	d000      	beq.n	80014d2 <__aeabi_dadd+0x206>
 80014d0:	e1e3      	b.n	800189a <__aeabi_dadd+0x5ce>
 80014d2:	074a      	lsls	r2, r1, #29
 80014d4:	08db      	lsrs	r3, r3, #3
 80014d6:	4313      	orrs	r3, r2
 80014d8:	08c9      	lsrs	r1, r1, #3
 80014da:	e029      	b.n	8001530 <__aeabi_dadd+0x264>
 80014dc:	464a      	mov	r2, r9
 80014de:	4302      	orrs	r2, r0
 80014e0:	d100      	bne.n	80014e4 <__aeabi_dadd+0x218>
 80014e2:	e17d      	b.n	80017e0 <__aeabi_dadd+0x514>
 80014e4:	1e7a      	subs	r2, r7, #1
 80014e6:	2f01      	cmp	r7, #1
 80014e8:	d100      	bne.n	80014ec <__aeabi_dadd+0x220>
 80014ea:	e0e0      	b.n	80016ae <__aeabi_dadd+0x3e2>
 80014ec:	4c52      	ldr	r4, [pc, #328]	; (8001638 <__aeabi_dadd+0x36c>)
 80014ee:	42a7      	cmp	r7, r4
 80014f0:	d100      	bne.n	80014f4 <__aeabi_dadd+0x228>
 80014f2:	e166      	b.n	80017c2 <__aeabi_dadd+0x4f6>
 80014f4:	0017      	movs	r7, r2
 80014f6:	e7b2      	b.n	800145e <__aeabi_dadd+0x192>
 80014f8:	0010      	movs	r0, r2
 80014fa:	3b1f      	subs	r3, #31
 80014fc:	40d8      	lsrs	r0, r3
 80014fe:	2920      	cmp	r1, #32
 8001500:	d003      	beq.n	800150a <__aeabi_dadd+0x23e>
 8001502:	2340      	movs	r3, #64	; 0x40
 8001504:	1a5b      	subs	r3, r3, r1
 8001506:	409a      	lsls	r2, r3
 8001508:	4314      	orrs	r4, r2
 800150a:	1e63      	subs	r3, r4, #1
 800150c:	419c      	sbcs	r4, r3
 800150e:	2300      	movs	r3, #0
 8001510:	2600      	movs	r6, #0
 8001512:	469a      	mov	sl, r3
 8001514:	4304      	orrs	r4, r0
 8001516:	0763      	lsls	r3, r4, #29
 8001518:	d000      	beq.n	800151c <__aeabi_dadd+0x250>
 800151a:	e755      	b.n	80013c8 <__aeabi_dadd+0xfc>
 800151c:	4652      	mov	r2, sl
 800151e:	08e3      	lsrs	r3, r4, #3
 8001520:	0752      	lsls	r2, r2, #29
 8001522:	4313      	orrs	r3, r2
 8001524:	4652      	mov	r2, sl
 8001526:	0037      	movs	r7, r6
 8001528:	08d1      	lsrs	r1, r2, #3
 800152a:	4a43      	ldr	r2, [pc, #268]	; (8001638 <__aeabi_dadd+0x36c>)
 800152c:	4297      	cmp	r7, r2
 800152e:	d01f      	beq.n	8001570 <__aeabi_dadd+0x2a4>
 8001530:	0309      	lsls	r1, r1, #12
 8001532:	057a      	lsls	r2, r7, #21
 8001534:	0b0c      	lsrs	r4, r1, #12
 8001536:	0d52      	lsrs	r2, r2, #21
 8001538:	e764      	b.n	8001404 <__aeabi_dadd+0x138>
 800153a:	4642      	mov	r2, r8
 800153c:	464c      	mov	r4, r9
 800153e:	4314      	orrs	r4, r2
 8001540:	1e62      	subs	r2, r4, #1
 8001542:	4194      	sbcs	r4, r2
 8001544:	18e4      	adds	r4, r4, r3
 8001546:	429c      	cmp	r4, r3
 8001548:	4192      	sbcs	r2, r2
 800154a:	4252      	negs	r2, r2
 800154c:	4692      	mov	sl, r2
 800154e:	448a      	add	sl, r1
 8001550:	4653      	mov	r3, sl
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	d5df      	bpl.n	8001516 <__aeabi_dadd+0x24a>
 8001556:	4b38      	ldr	r3, [pc, #224]	; (8001638 <__aeabi_dadd+0x36c>)
 8001558:	3601      	adds	r6, #1
 800155a:	429e      	cmp	r6, r3
 800155c:	d000      	beq.n	8001560 <__aeabi_dadd+0x294>
 800155e:	e0b3      	b.n	80016c8 <__aeabi_dadd+0x3fc>
 8001560:	0032      	movs	r2, r6
 8001562:	2400      	movs	r4, #0
 8001564:	2300      	movs	r3, #0
 8001566:	e74d      	b.n	8001404 <__aeabi_dadd+0x138>
 8001568:	074a      	lsls	r2, r1, #29
 800156a:	08db      	lsrs	r3, r3, #3
 800156c:	4313      	orrs	r3, r2
 800156e:	08c9      	lsrs	r1, r1, #3
 8001570:	001a      	movs	r2, r3
 8001572:	430a      	orrs	r2, r1
 8001574:	d100      	bne.n	8001578 <__aeabi_dadd+0x2ac>
 8001576:	e200      	b.n	800197a <__aeabi_dadd+0x6ae>
 8001578:	2480      	movs	r4, #128	; 0x80
 800157a:	0324      	lsls	r4, r4, #12
 800157c:	430c      	orrs	r4, r1
 800157e:	0324      	lsls	r4, r4, #12
 8001580:	4a2d      	ldr	r2, [pc, #180]	; (8001638 <__aeabi_dadd+0x36c>)
 8001582:	0b24      	lsrs	r4, r4, #12
 8001584:	e73e      	b.n	8001404 <__aeabi_dadd+0x138>
 8001586:	0020      	movs	r0, r4
 8001588:	f001 fdb6 	bl	80030f8 <__clzsi2>
 800158c:	0003      	movs	r3, r0
 800158e:	3318      	adds	r3, #24
 8001590:	2b1f      	cmp	r3, #31
 8001592:	dc00      	bgt.n	8001596 <__aeabi_dadd+0x2ca>
 8001594:	e6f7      	b.n	8001386 <__aeabi_dadd+0xba>
 8001596:	0022      	movs	r2, r4
 8001598:	3808      	subs	r0, #8
 800159a:	4082      	lsls	r2, r0
 800159c:	2400      	movs	r4, #0
 800159e:	42b3      	cmp	r3, r6
 80015a0:	db00      	blt.n	80015a4 <__aeabi_dadd+0x2d8>
 80015a2:	e6fc      	b.n	800139e <__aeabi_dadd+0xd2>
 80015a4:	1af6      	subs	r6, r6, r3
 80015a6:	4b25      	ldr	r3, [pc, #148]	; (800163c <__aeabi_dadd+0x370>)
 80015a8:	401a      	ands	r2, r3
 80015aa:	4692      	mov	sl, r2
 80015ac:	e70a      	b.n	80013c4 <__aeabi_dadd+0xf8>
 80015ae:	2f00      	cmp	r7, #0
 80015b0:	d02b      	beq.n	800160a <__aeabi_dadd+0x33e>
 80015b2:	1b97      	subs	r7, r2, r6
 80015b4:	2e00      	cmp	r6, #0
 80015b6:	d100      	bne.n	80015ba <__aeabi_dadd+0x2ee>
 80015b8:	e0b8      	b.n	800172c <__aeabi_dadd+0x460>
 80015ba:	4c1f      	ldr	r4, [pc, #124]	; (8001638 <__aeabi_dadd+0x36c>)
 80015bc:	42a2      	cmp	r2, r4
 80015be:	d100      	bne.n	80015c2 <__aeabi_dadd+0x2f6>
 80015c0:	e11c      	b.n	80017fc <__aeabi_dadd+0x530>
 80015c2:	2480      	movs	r4, #128	; 0x80
 80015c4:	0424      	lsls	r4, r4, #16
 80015c6:	4321      	orrs	r1, r4
 80015c8:	2f38      	cmp	r7, #56	; 0x38
 80015ca:	dd00      	ble.n	80015ce <__aeabi_dadd+0x302>
 80015cc:	e11e      	b.n	800180c <__aeabi_dadd+0x540>
 80015ce:	2f1f      	cmp	r7, #31
 80015d0:	dd00      	ble.n	80015d4 <__aeabi_dadd+0x308>
 80015d2:	e19e      	b.n	8001912 <__aeabi_dadd+0x646>
 80015d4:	2620      	movs	r6, #32
 80015d6:	000c      	movs	r4, r1
 80015d8:	1bf6      	subs	r6, r6, r7
 80015da:	0018      	movs	r0, r3
 80015dc:	40b3      	lsls	r3, r6
 80015de:	40b4      	lsls	r4, r6
 80015e0:	40f8      	lsrs	r0, r7
 80015e2:	1e5e      	subs	r6, r3, #1
 80015e4:	41b3      	sbcs	r3, r6
 80015e6:	40f9      	lsrs	r1, r7
 80015e8:	4304      	orrs	r4, r0
 80015ea:	431c      	orrs	r4, r3
 80015ec:	4489      	add	r9, r1
 80015ee:	4444      	add	r4, r8
 80015f0:	4544      	cmp	r4, r8
 80015f2:	419b      	sbcs	r3, r3
 80015f4:	425b      	negs	r3, r3
 80015f6:	444b      	add	r3, r9
 80015f8:	469a      	mov	sl, r3
 80015fa:	0016      	movs	r6, r2
 80015fc:	e7a8      	b.n	8001550 <__aeabi_dadd+0x284>
 80015fe:	4642      	mov	r2, r8
 8001600:	464c      	mov	r4, r9
 8001602:	4314      	orrs	r4, r2
 8001604:	1e62      	subs	r2, r4, #1
 8001606:	4194      	sbcs	r4, r2
 8001608:	e6a6      	b.n	8001358 <__aeabi_dadd+0x8c>
 800160a:	4c0d      	ldr	r4, [pc, #52]	; (8001640 <__aeabi_dadd+0x374>)
 800160c:	1c72      	adds	r2, r6, #1
 800160e:	4222      	tst	r2, r4
 8001610:	d000      	beq.n	8001614 <__aeabi_dadd+0x348>
 8001612:	e0a8      	b.n	8001766 <__aeabi_dadd+0x49a>
 8001614:	000a      	movs	r2, r1
 8001616:	431a      	orrs	r2, r3
 8001618:	2e00      	cmp	r6, #0
 800161a:	d000      	beq.n	800161e <__aeabi_dadd+0x352>
 800161c:	e10a      	b.n	8001834 <__aeabi_dadd+0x568>
 800161e:	2a00      	cmp	r2, #0
 8001620:	d100      	bne.n	8001624 <__aeabi_dadd+0x358>
 8001622:	e15e      	b.n	80018e2 <__aeabi_dadd+0x616>
 8001624:	464a      	mov	r2, r9
 8001626:	4302      	orrs	r2, r0
 8001628:	d000      	beq.n	800162c <__aeabi_dadd+0x360>
 800162a:	e161      	b.n	80018f0 <__aeabi_dadd+0x624>
 800162c:	074a      	lsls	r2, r1, #29
 800162e:	08db      	lsrs	r3, r3, #3
 8001630:	4313      	orrs	r3, r2
 8001632:	08c9      	lsrs	r1, r1, #3
 8001634:	e77c      	b.n	8001530 <__aeabi_dadd+0x264>
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	000007ff 	.word	0x000007ff
 800163c:	ff7fffff 	.word	0xff7fffff
 8001640:	000007fe 	.word	0x000007fe
 8001644:	4ccf      	ldr	r4, [pc, #828]	; (8001984 <__aeabi_dadd+0x6b8>)
 8001646:	42a2      	cmp	r2, r4
 8001648:	d100      	bne.n	800164c <__aeabi_dadd+0x380>
 800164a:	e0ce      	b.n	80017ea <__aeabi_dadd+0x51e>
 800164c:	2480      	movs	r4, #128	; 0x80
 800164e:	0424      	lsls	r4, r4, #16
 8001650:	4321      	orrs	r1, r4
 8001652:	2f38      	cmp	r7, #56	; 0x38
 8001654:	dc5b      	bgt.n	800170e <__aeabi_dadd+0x442>
 8001656:	2f1f      	cmp	r7, #31
 8001658:	dd00      	ble.n	800165c <__aeabi_dadd+0x390>
 800165a:	e0dc      	b.n	8001816 <__aeabi_dadd+0x54a>
 800165c:	2520      	movs	r5, #32
 800165e:	000c      	movs	r4, r1
 8001660:	1bed      	subs	r5, r5, r7
 8001662:	001e      	movs	r6, r3
 8001664:	40ab      	lsls	r3, r5
 8001666:	40ac      	lsls	r4, r5
 8001668:	40fe      	lsrs	r6, r7
 800166a:	1e5d      	subs	r5, r3, #1
 800166c:	41ab      	sbcs	r3, r5
 800166e:	4334      	orrs	r4, r6
 8001670:	40f9      	lsrs	r1, r7
 8001672:	431c      	orrs	r4, r3
 8001674:	464b      	mov	r3, r9
 8001676:	1a5b      	subs	r3, r3, r1
 8001678:	4699      	mov	r9, r3
 800167a:	e04c      	b.n	8001716 <__aeabi_dadd+0x44a>
 800167c:	464a      	mov	r2, r9
 800167e:	1a1c      	subs	r4, r3, r0
 8001680:	1a88      	subs	r0, r1, r2
 8001682:	42a3      	cmp	r3, r4
 8001684:	4192      	sbcs	r2, r2
 8001686:	4252      	negs	r2, r2
 8001688:	4692      	mov	sl, r2
 800168a:	0002      	movs	r2, r0
 800168c:	4650      	mov	r0, sl
 800168e:	1a12      	subs	r2, r2, r0
 8001690:	4692      	mov	sl, r2
 8001692:	0212      	lsls	r2, r2, #8
 8001694:	d478      	bmi.n	8001788 <__aeabi_dadd+0x4bc>
 8001696:	4653      	mov	r3, sl
 8001698:	4323      	orrs	r3, r4
 800169a:	d000      	beq.n	800169e <__aeabi_dadd+0x3d2>
 800169c:	e66a      	b.n	8001374 <__aeabi_dadd+0xa8>
 800169e:	2100      	movs	r1, #0
 80016a0:	2500      	movs	r5, #0
 80016a2:	e745      	b.n	8001530 <__aeabi_dadd+0x264>
 80016a4:	074a      	lsls	r2, r1, #29
 80016a6:	08db      	lsrs	r3, r3, #3
 80016a8:	4313      	orrs	r3, r2
 80016aa:	08c9      	lsrs	r1, r1, #3
 80016ac:	e73d      	b.n	800152a <__aeabi_dadd+0x25e>
 80016ae:	181c      	adds	r4, r3, r0
 80016b0:	429c      	cmp	r4, r3
 80016b2:	419b      	sbcs	r3, r3
 80016b4:	4449      	add	r1, r9
 80016b6:	468a      	mov	sl, r1
 80016b8:	425b      	negs	r3, r3
 80016ba:	449a      	add	sl, r3
 80016bc:	4653      	mov	r3, sl
 80016be:	2601      	movs	r6, #1
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	d400      	bmi.n	80016c6 <__aeabi_dadd+0x3fa>
 80016c4:	e727      	b.n	8001516 <__aeabi_dadd+0x24a>
 80016c6:	2602      	movs	r6, #2
 80016c8:	4652      	mov	r2, sl
 80016ca:	4baf      	ldr	r3, [pc, #700]	; (8001988 <__aeabi_dadd+0x6bc>)
 80016cc:	2101      	movs	r1, #1
 80016ce:	401a      	ands	r2, r3
 80016d0:	0013      	movs	r3, r2
 80016d2:	4021      	ands	r1, r4
 80016d4:	0862      	lsrs	r2, r4, #1
 80016d6:	430a      	orrs	r2, r1
 80016d8:	07dc      	lsls	r4, r3, #31
 80016da:	085b      	lsrs	r3, r3, #1
 80016dc:	469a      	mov	sl, r3
 80016de:	4314      	orrs	r4, r2
 80016e0:	e670      	b.n	80013c4 <__aeabi_dadd+0xf8>
 80016e2:	003a      	movs	r2, r7
 80016e4:	464c      	mov	r4, r9
 80016e6:	3a20      	subs	r2, #32
 80016e8:	40d4      	lsrs	r4, r2
 80016ea:	46a4      	mov	ip, r4
 80016ec:	2f20      	cmp	r7, #32
 80016ee:	d007      	beq.n	8001700 <__aeabi_dadd+0x434>
 80016f0:	2240      	movs	r2, #64	; 0x40
 80016f2:	4648      	mov	r0, r9
 80016f4:	1bd2      	subs	r2, r2, r7
 80016f6:	4090      	lsls	r0, r2
 80016f8:	0002      	movs	r2, r0
 80016fa:	4640      	mov	r0, r8
 80016fc:	4310      	orrs	r0, r2
 80016fe:	4680      	mov	r8, r0
 8001700:	4640      	mov	r0, r8
 8001702:	1e42      	subs	r2, r0, #1
 8001704:	4190      	sbcs	r0, r2
 8001706:	4662      	mov	r2, ip
 8001708:	0004      	movs	r4, r0
 800170a:	4314      	orrs	r4, r2
 800170c:	e624      	b.n	8001358 <__aeabi_dadd+0x8c>
 800170e:	4319      	orrs	r1, r3
 8001710:	000c      	movs	r4, r1
 8001712:	1e63      	subs	r3, r4, #1
 8001714:	419c      	sbcs	r4, r3
 8001716:	4643      	mov	r3, r8
 8001718:	1b1c      	subs	r4, r3, r4
 800171a:	45a0      	cmp	r8, r4
 800171c:	419b      	sbcs	r3, r3
 800171e:	4649      	mov	r1, r9
 8001720:	425b      	negs	r3, r3
 8001722:	1acb      	subs	r3, r1, r3
 8001724:	469a      	mov	sl, r3
 8001726:	4665      	mov	r5, ip
 8001728:	0016      	movs	r6, r2
 800172a:	e61b      	b.n	8001364 <__aeabi_dadd+0x98>
 800172c:	000c      	movs	r4, r1
 800172e:	431c      	orrs	r4, r3
 8001730:	d100      	bne.n	8001734 <__aeabi_dadd+0x468>
 8001732:	e0c7      	b.n	80018c4 <__aeabi_dadd+0x5f8>
 8001734:	1e7c      	subs	r4, r7, #1
 8001736:	2f01      	cmp	r7, #1
 8001738:	d100      	bne.n	800173c <__aeabi_dadd+0x470>
 800173a:	e0f9      	b.n	8001930 <__aeabi_dadd+0x664>
 800173c:	4e91      	ldr	r6, [pc, #580]	; (8001984 <__aeabi_dadd+0x6b8>)
 800173e:	42b7      	cmp	r7, r6
 8001740:	d05c      	beq.n	80017fc <__aeabi_dadd+0x530>
 8001742:	0027      	movs	r7, r4
 8001744:	e740      	b.n	80015c8 <__aeabi_dadd+0x2fc>
 8001746:	2220      	movs	r2, #32
 8001748:	464c      	mov	r4, r9
 800174a:	4640      	mov	r0, r8
 800174c:	1bd2      	subs	r2, r2, r7
 800174e:	4094      	lsls	r4, r2
 8001750:	40f8      	lsrs	r0, r7
 8001752:	4304      	orrs	r4, r0
 8001754:	4640      	mov	r0, r8
 8001756:	4090      	lsls	r0, r2
 8001758:	1e42      	subs	r2, r0, #1
 800175a:	4190      	sbcs	r0, r2
 800175c:	464a      	mov	r2, r9
 800175e:	40fa      	lsrs	r2, r7
 8001760:	4304      	orrs	r4, r0
 8001762:	1889      	adds	r1, r1, r2
 8001764:	e6ee      	b.n	8001544 <__aeabi_dadd+0x278>
 8001766:	4c87      	ldr	r4, [pc, #540]	; (8001984 <__aeabi_dadd+0x6b8>)
 8001768:	42a2      	cmp	r2, r4
 800176a:	d100      	bne.n	800176e <__aeabi_dadd+0x4a2>
 800176c:	e6f9      	b.n	8001562 <__aeabi_dadd+0x296>
 800176e:	1818      	adds	r0, r3, r0
 8001770:	4298      	cmp	r0, r3
 8001772:	419b      	sbcs	r3, r3
 8001774:	4449      	add	r1, r9
 8001776:	425b      	negs	r3, r3
 8001778:	18cb      	adds	r3, r1, r3
 800177a:	07dc      	lsls	r4, r3, #31
 800177c:	0840      	lsrs	r0, r0, #1
 800177e:	085b      	lsrs	r3, r3, #1
 8001780:	469a      	mov	sl, r3
 8001782:	0016      	movs	r6, r2
 8001784:	4304      	orrs	r4, r0
 8001786:	e6c6      	b.n	8001516 <__aeabi_dadd+0x24a>
 8001788:	4642      	mov	r2, r8
 800178a:	1ad4      	subs	r4, r2, r3
 800178c:	45a0      	cmp	r8, r4
 800178e:	4180      	sbcs	r0, r0
 8001790:	464b      	mov	r3, r9
 8001792:	4240      	negs	r0, r0
 8001794:	1a59      	subs	r1, r3, r1
 8001796:	1a0b      	subs	r3, r1, r0
 8001798:	469a      	mov	sl, r3
 800179a:	4665      	mov	r5, ip
 800179c:	e5ea      	b.n	8001374 <__aeabi_dadd+0xa8>
 800179e:	464b      	mov	r3, r9
 80017a0:	464a      	mov	r2, r9
 80017a2:	08c0      	lsrs	r0, r0, #3
 80017a4:	075b      	lsls	r3, r3, #29
 80017a6:	4665      	mov	r5, ip
 80017a8:	4303      	orrs	r3, r0
 80017aa:	08d1      	lsrs	r1, r2, #3
 80017ac:	e6bd      	b.n	800152a <__aeabi_dadd+0x25e>
 80017ae:	2a00      	cmp	r2, #0
 80017b0:	d000      	beq.n	80017b4 <__aeabi_dadd+0x4e8>
 80017b2:	e08e      	b.n	80018d2 <__aeabi_dadd+0x606>
 80017b4:	464b      	mov	r3, r9
 80017b6:	4303      	orrs	r3, r0
 80017b8:	d117      	bne.n	80017ea <__aeabi_dadd+0x51e>
 80017ba:	2180      	movs	r1, #128	; 0x80
 80017bc:	2500      	movs	r5, #0
 80017be:	0309      	lsls	r1, r1, #12
 80017c0:	e6da      	b.n	8001578 <__aeabi_dadd+0x2ac>
 80017c2:	074a      	lsls	r2, r1, #29
 80017c4:	08db      	lsrs	r3, r3, #3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	08c9      	lsrs	r1, r1, #3
 80017ca:	e6d1      	b.n	8001570 <__aeabi_dadd+0x2a4>
 80017cc:	1a1c      	subs	r4, r3, r0
 80017ce:	464a      	mov	r2, r9
 80017d0:	42a3      	cmp	r3, r4
 80017d2:	419b      	sbcs	r3, r3
 80017d4:	1a89      	subs	r1, r1, r2
 80017d6:	425b      	negs	r3, r3
 80017d8:	1acb      	subs	r3, r1, r3
 80017da:	469a      	mov	sl, r3
 80017dc:	2601      	movs	r6, #1
 80017de:	e5c1      	b.n	8001364 <__aeabi_dadd+0x98>
 80017e0:	074a      	lsls	r2, r1, #29
 80017e2:	08db      	lsrs	r3, r3, #3
 80017e4:	4313      	orrs	r3, r2
 80017e6:	08c9      	lsrs	r1, r1, #3
 80017e8:	e69f      	b.n	800152a <__aeabi_dadd+0x25e>
 80017ea:	4643      	mov	r3, r8
 80017ec:	08d8      	lsrs	r0, r3, #3
 80017ee:	464b      	mov	r3, r9
 80017f0:	464a      	mov	r2, r9
 80017f2:	075b      	lsls	r3, r3, #29
 80017f4:	4665      	mov	r5, ip
 80017f6:	4303      	orrs	r3, r0
 80017f8:	08d1      	lsrs	r1, r2, #3
 80017fa:	e6b9      	b.n	8001570 <__aeabi_dadd+0x2a4>
 80017fc:	4643      	mov	r3, r8
 80017fe:	08d8      	lsrs	r0, r3, #3
 8001800:	464b      	mov	r3, r9
 8001802:	464a      	mov	r2, r9
 8001804:	075b      	lsls	r3, r3, #29
 8001806:	4303      	orrs	r3, r0
 8001808:	08d1      	lsrs	r1, r2, #3
 800180a:	e6b1      	b.n	8001570 <__aeabi_dadd+0x2a4>
 800180c:	4319      	orrs	r1, r3
 800180e:	000c      	movs	r4, r1
 8001810:	1e63      	subs	r3, r4, #1
 8001812:	419c      	sbcs	r4, r3
 8001814:	e6eb      	b.n	80015ee <__aeabi_dadd+0x322>
 8001816:	003c      	movs	r4, r7
 8001818:	000d      	movs	r5, r1
 800181a:	3c20      	subs	r4, #32
 800181c:	40e5      	lsrs	r5, r4
 800181e:	2f20      	cmp	r7, #32
 8001820:	d003      	beq.n	800182a <__aeabi_dadd+0x55e>
 8001822:	2440      	movs	r4, #64	; 0x40
 8001824:	1be4      	subs	r4, r4, r7
 8001826:	40a1      	lsls	r1, r4
 8001828:	430b      	orrs	r3, r1
 800182a:	001c      	movs	r4, r3
 800182c:	1e63      	subs	r3, r4, #1
 800182e:	419c      	sbcs	r4, r3
 8001830:	432c      	orrs	r4, r5
 8001832:	e770      	b.n	8001716 <__aeabi_dadd+0x44a>
 8001834:	2a00      	cmp	r2, #0
 8001836:	d0e1      	beq.n	80017fc <__aeabi_dadd+0x530>
 8001838:	464a      	mov	r2, r9
 800183a:	4302      	orrs	r2, r0
 800183c:	d0c1      	beq.n	80017c2 <__aeabi_dadd+0x4f6>
 800183e:	074a      	lsls	r2, r1, #29
 8001840:	08db      	lsrs	r3, r3, #3
 8001842:	4313      	orrs	r3, r2
 8001844:	2280      	movs	r2, #128	; 0x80
 8001846:	08c9      	lsrs	r1, r1, #3
 8001848:	0312      	lsls	r2, r2, #12
 800184a:	4211      	tst	r1, r2
 800184c:	d008      	beq.n	8001860 <__aeabi_dadd+0x594>
 800184e:	4648      	mov	r0, r9
 8001850:	08c4      	lsrs	r4, r0, #3
 8001852:	4214      	tst	r4, r2
 8001854:	d104      	bne.n	8001860 <__aeabi_dadd+0x594>
 8001856:	4643      	mov	r3, r8
 8001858:	0021      	movs	r1, r4
 800185a:	08db      	lsrs	r3, r3, #3
 800185c:	0742      	lsls	r2, r0, #29
 800185e:	4313      	orrs	r3, r2
 8001860:	0f5a      	lsrs	r2, r3, #29
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	0752      	lsls	r2, r2, #29
 8001866:	08db      	lsrs	r3, r3, #3
 8001868:	4313      	orrs	r3, r2
 800186a:	e681      	b.n	8001570 <__aeabi_dadd+0x2a4>
 800186c:	464b      	mov	r3, r9
 800186e:	4303      	orrs	r3, r0
 8001870:	d100      	bne.n	8001874 <__aeabi_dadd+0x5a8>
 8001872:	e714      	b.n	800169e <__aeabi_dadd+0x3d2>
 8001874:	464b      	mov	r3, r9
 8001876:	464a      	mov	r2, r9
 8001878:	08c0      	lsrs	r0, r0, #3
 800187a:	075b      	lsls	r3, r3, #29
 800187c:	4665      	mov	r5, ip
 800187e:	4303      	orrs	r3, r0
 8001880:	08d1      	lsrs	r1, r2, #3
 8001882:	e655      	b.n	8001530 <__aeabi_dadd+0x264>
 8001884:	1ac4      	subs	r4, r0, r3
 8001886:	45a0      	cmp	r8, r4
 8001888:	4180      	sbcs	r0, r0
 800188a:	464b      	mov	r3, r9
 800188c:	4240      	negs	r0, r0
 800188e:	1a59      	subs	r1, r3, r1
 8001890:	1a0b      	subs	r3, r1, r0
 8001892:	469a      	mov	sl, r3
 8001894:	4665      	mov	r5, ip
 8001896:	2601      	movs	r6, #1
 8001898:	e564      	b.n	8001364 <__aeabi_dadd+0x98>
 800189a:	1a1c      	subs	r4, r3, r0
 800189c:	464a      	mov	r2, r9
 800189e:	42a3      	cmp	r3, r4
 80018a0:	4180      	sbcs	r0, r0
 80018a2:	1a8a      	subs	r2, r1, r2
 80018a4:	4240      	negs	r0, r0
 80018a6:	1a12      	subs	r2, r2, r0
 80018a8:	4692      	mov	sl, r2
 80018aa:	0212      	lsls	r2, r2, #8
 80018ac:	d549      	bpl.n	8001942 <__aeabi_dadd+0x676>
 80018ae:	4642      	mov	r2, r8
 80018b0:	1ad4      	subs	r4, r2, r3
 80018b2:	45a0      	cmp	r8, r4
 80018b4:	4180      	sbcs	r0, r0
 80018b6:	464b      	mov	r3, r9
 80018b8:	4240      	negs	r0, r0
 80018ba:	1a59      	subs	r1, r3, r1
 80018bc:	1a0b      	subs	r3, r1, r0
 80018be:	469a      	mov	sl, r3
 80018c0:	4665      	mov	r5, ip
 80018c2:	e57f      	b.n	80013c4 <__aeabi_dadd+0xf8>
 80018c4:	464b      	mov	r3, r9
 80018c6:	464a      	mov	r2, r9
 80018c8:	08c0      	lsrs	r0, r0, #3
 80018ca:	075b      	lsls	r3, r3, #29
 80018cc:	4303      	orrs	r3, r0
 80018ce:	08d1      	lsrs	r1, r2, #3
 80018d0:	e62b      	b.n	800152a <__aeabi_dadd+0x25e>
 80018d2:	464a      	mov	r2, r9
 80018d4:	08db      	lsrs	r3, r3, #3
 80018d6:	4302      	orrs	r2, r0
 80018d8:	d138      	bne.n	800194c <__aeabi_dadd+0x680>
 80018da:	074a      	lsls	r2, r1, #29
 80018dc:	4313      	orrs	r3, r2
 80018de:	08c9      	lsrs	r1, r1, #3
 80018e0:	e646      	b.n	8001570 <__aeabi_dadd+0x2a4>
 80018e2:	464b      	mov	r3, r9
 80018e4:	464a      	mov	r2, r9
 80018e6:	08c0      	lsrs	r0, r0, #3
 80018e8:	075b      	lsls	r3, r3, #29
 80018ea:	4303      	orrs	r3, r0
 80018ec:	08d1      	lsrs	r1, r2, #3
 80018ee:	e61f      	b.n	8001530 <__aeabi_dadd+0x264>
 80018f0:	181c      	adds	r4, r3, r0
 80018f2:	429c      	cmp	r4, r3
 80018f4:	419b      	sbcs	r3, r3
 80018f6:	4449      	add	r1, r9
 80018f8:	468a      	mov	sl, r1
 80018fa:	425b      	negs	r3, r3
 80018fc:	449a      	add	sl, r3
 80018fe:	4653      	mov	r3, sl
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	d400      	bmi.n	8001906 <__aeabi_dadd+0x63a>
 8001904:	e607      	b.n	8001516 <__aeabi_dadd+0x24a>
 8001906:	4652      	mov	r2, sl
 8001908:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <__aeabi_dadd+0x6bc>)
 800190a:	2601      	movs	r6, #1
 800190c:	401a      	ands	r2, r3
 800190e:	4692      	mov	sl, r2
 8001910:	e601      	b.n	8001516 <__aeabi_dadd+0x24a>
 8001912:	003c      	movs	r4, r7
 8001914:	000e      	movs	r6, r1
 8001916:	3c20      	subs	r4, #32
 8001918:	40e6      	lsrs	r6, r4
 800191a:	2f20      	cmp	r7, #32
 800191c:	d003      	beq.n	8001926 <__aeabi_dadd+0x65a>
 800191e:	2440      	movs	r4, #64	; 0x40
 8001920:	1be4      	subs	r4, r4, r7
 8001922:	40a1      	lsls	r1, r4
 8001924:	430b      	orrs	r3, r1
 8001926:	001c      	movs	r4, r3
 8001928:	1e63      	subs	r3, r4, #1
 800192a:	419c      	sbcs	r4, r3
 800192c:	4334      	orrs	r4, r6
 800192e:	e65e      	b.n	80015ee <__aeabi_dadd+0x322>
 8001930:	4443      	add	r3, r8
 8001932:	4283      	cmp	r3, r0
 8001934:	4180      	sbcs	r0, r0
 8001936:	4449      	add	r1, r9
 8001938:	468a      	mov	sl, r1
 800193a:	4240      	negs	r0, r0
 800193c:	001c      	movs	r4, r3
 800193e:	4482      	add	sl, r0
 8001940:	e6bc      	b.n	80016bc <__aeabi_dadd+0x3f0>
 8001942:	4653      	mov	r3, sl
 8001944:	4323      	orrs	r3, r4
 8001946:	d100      	bne.n	800194a <__aeabi_dadd+0x67e>
 8001948:	e6a9      	b.n	800169e <__aeabi_dadd+0x3d2>
 800194a:	e5e4      	b.n	8001516 <__aeabi_dadd+0x24a>
 800194c:	074a      	lsls	r2, r1, #29
 800194e:	4313      	orrs	r3, r2
 8001950:	2280      	movs	r2, #128	; 0x80
 8001952:	08c9      	lsrs	r1, r1, #3
 8001954:	0312      	lsls	r2, r2, #12
 8001956:	4211      	tst	r1, r2
 8001958:	d009      	beq.n	800196e <__aeabi_dadd+0x6a2>
 800195a:	4648      	mov	r0, r9
 800195c:	08c4      	lsrs	r4, r0, #3
 800195e:	4214      	tst	r4, r2
 8001960:	d105      	bne.n	800196e <__aeabi_dadd+0x6a2>
 8001962:	4643      	mov	r3, r8
 8001964:	4665      	mov	r5, ip
 8001966:	0021      	movs	r1, r4
 8001968:	08db      	lsrs	r3, r3, #3
 800196a:	0742      	lsls	r2, r0, #29
 800196c:	4313      	orrs	r3, r2
 800196e:	0f5a      	lsrs	r2, r3, #29
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	08db      	lsrs	r3, r3, #3
 8001974:	0752      	lsls	r2, r2, #29
 8001976:	4313      	orrs	r3, r2
 8001978:	e5fa      	b.n	8001570 <__aeabi_dadd+0x2a4>
 800197a:	2300      	movs	r3, #0
 800197c:	4a01      	ldr	r2, [pc, #4]	; (8001984 <__aeabi_dadd+0x6b8>)
 800197e:	001c      	movs	r4, r3
 8001980:	e540      	b.n	8001404 <__aeabi_dadd+0x138>
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	000007ff 	.word	0x000007ff
 8001988:	ff7fffff 	.word	0xff7fffff

0800198c <__aeabi_ddiv>:
 800198c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198e:	4657      	mov	r7, sl
 8001990:	464e      	mov	r6, r9
 8001992:	4645      	mov	r5, r8
 8001994:	46de      	mov	lr, fp
 8001996:	b5e0      	push	{r5, r6, r7, lr}
 8001998:	030c      	lsls	r4, r1, #12
 800199a:	001f      	movs	r7, r3
 800199c:	004b      	lsls	r3, r1, #1
 800199e:	4681      	mov	r9, r0
 80019a0:	4692      	mov	sl, r2
 80019a2:	0005      	movs	r5, r0
 80019a4:	b085      	sub	sp, #20
 80019a6:	0b24      	lsrs	r4, r4, #12
 80019a8:	0d5b      	lsrs	r3, r3, #21
 80019aa:	0fce      	lsrs	r6, r1, #31
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d100      	bne.n	80019b2 <__aeabi_ddiv+0x26>
 80019b0:	e152      	b.n	8001c58 <__aeabi_ddiv+0x2cc>
 80019b2:	4ad2      	ldr	r2, [pc, #840]	; (8001cfc <__aeabi_ddiv+0x370>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d100      	bne.n	80019ba <__aeabi_ddiv+0x2e>
 80019b8:	e16e      	b.n	8001c98 <__aeabi_ddiv+0x30c>
 80019ba:	0f42      	lsrs	r2, r0, #29
 80019bc:	00e4      	lsls	r4, r4, #3
 80019be:	4314      	orrs	r4, r2
 80019c0:	2280      	movs	r2, #128	; 0x80
 80019c2:	0412      	lsls	r2, r2, #16
 80019c4:	4322      	orrs	r2, r4
 80019c6:	4690      	mov	r8, r2
 80019c8:	4acd      	ldr	r2, [pc, #820]	; (8001d00 <__aeabi_ddiv+0x374>)
 80019ca:	00c5      	lsls	r5, r0, #3
 80019cc:	4693      	mov	fp, r2
 80019ce:	449b      	add	fp, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	4699      	mov	r9, r3
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	033c      	lsls	r4, r7, #12
 80019d8:	007b      	lsls	r3, r7, #1
 80019da:	4650      	mov	r0, sl
 80019dc:	0b24      	lsrs	r4, r4, #12
 80019de:	0d5b      	lsrs	r3, r3, #21
 80019e0:	0fff      	lsrs	r7, r7, #31
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d100      	bne.n	80019e8 <__aeabi_ddiv+0x5c>
 80019e6:	e11a      	b.n	8001c1e <__aeabi_ddiv+0x292>
 80019e8:	4ac4      	ldr	r2, [pc, #784]	; (8001cfc <__aeabi_ddiv+0x370>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d100      	bne.n	80019f0 <__aeabi_ddiv+0x64>
 80019ee:	e15e      	b.n	8001cae <__aeabi_ddiv+0x322>
 80019f0:	0f42      	lsrs	r2, r0, #29
 80019f2:	00e4      	lsls	r4, r4, #3
 80019f4:	4322      	orrs	r2, r4
 80019f6:	2480      	movs	r4, #128	; 0x80
 80019f8:	0424      	lsls	r4, r4, #16
 80019fa:	4314      	orrs	r4, r2
 80019fc:	4ac0      	ldr	r2, [pc, #768]	; (8001d00 <__aeabi_ddiv+0x374>)
 80019fe:	00c1      	lsls	r1, r0, #3
 8001a00:	4694      	mov	ip, r2
 8001a02:	465a      	mov	r2, fp
 8001a04:	4463      	add	r3, ip
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	469b      	mov	fp, r3
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	0033      	movs	r3, r6
 8001a0e:	407b      	eors	r3, r7
 8001a10:	469a      	mov	sl, r3
 8001a12:	464b      	mov	r3, r9
 8001a14:	2b0f      	cmp	r3, #15
 8001a16:	d827      	bhi.n	8001a68 <__aeabi_ddiv+0xdc>
 8001a18:	4aba      	ldr	r2, [pc, #744]	; (8001d04 <__aeabi_ddiv+0x378>)
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	58d3      	ldr	r3, [r2, r3]
 8001a1e:	469f      	mov	pc, r3
 8001a20:	46b2      	mov	sl, r6
 8001a22:	9b00      	ldr	r3, [sp, #0]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d016      	beq.n	8001a56 <__aeabi_ddiv+0xca>
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d100      	bne.n	8001a2e <__aeabi_ddiv+0xa2>
 8001a2c:	e287      	b.n	8001f3e <__aeabi_ddiv+0x5b2>
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d000      	beq.n	8001a34 <__aeabi_ddiv+0xa8>
 8001a32:	e0d5      	b.n	8001be0 <__aeabi_ddiv+0x254>
 8001a34:	2300      	movs	r3, #0
 8001a36:	2200      	movs	r2, #0
 8001a38:	2500      	movs	r5, #0
 8001a3a:	051b      	lsls	r3, r3, #20
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	4652      	mov	r2, sl
 8001a40:	07d2      	lsls	r2, r2, #31
 8001a42:	4313      	orrs	r3, r2
 8001a44:	0028      	movs	r0, r5
 8001a46:	0019      	movs	r1, r3
 8001a48:	b005      	add	sp, #20
 8001a4a:	bcf0      	pop	{r4, r5, r6, r7}
 8001a4c:	46bb      	mov	fp, r7
 8001a4e:	46b2      	mov	sl, r6
 8001a50:	46a9      	mov	r9, r5
 8001a52:	46a0      	mov	r8, r4
 8001a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a56:	2200      	movs	r2, #0
 8001a58:	2500      	movs	r5, #0
 8001a5a:	4ba8      	ldr	r3, [pc, #672]	; (8001cfc <__aeabi_ddiv+0x370>)
 8001a5c:	e7ed      	b.n	8001a3a <__aeabi_ddiv+0xae>
 8001a5e:	46ba      	mov	sl, r7
 8001a60:	46a0      	mov	r8, r4
 8001a62:	000d      	movs	r5, r1
 8001a64:	9000      	str	r0, [sp, #0]
 8001a66:	e7dc      	b.n	8001a22 <__aeabi_ddiv+0x96>
 8001a68:	4544      	cmp	r4, r8
 8001a6a:	d200      	bcs.n	8001a6e <__aeabi_ddiv+0xe2>
 8001a6c:	e1c4      	b.n	8001df8 <__aeabi_ddiv+0x46c>
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_ddiv+0xe6>
 8001a70:	e1bf      	b.n	8001df2 <__aeabi_ddiv+0x466>
 8001a72:	2301      	movs	r3, #1
 8001a74:	425b      	negs	r3, r3
 8001a76:	469c      	mov	ip, r3
 8001a78:	002e      	movs	r6, r5
 8001a7a:	4640      	mov	r0, r8
 8001a7c:	2500      	movs	r5, #0
 8001a7e:	44e3      	add	fp, ip
 8001a80:	0223      	lsls	r3, r4, #8
 8001a82:	0e0c      	lsrs	r4, r1, #24
 8001a84:	431c      	orrs	r4, r3
 8001a86:	0c1b      	lsrs	r3, r3, #16
 8001a88:	4699      	mov	r9, r3
 8001a8a:	0423      	lsls	r3, r4, #16
 8001a8c:	020a      	lsls	r2, r1, #8
 8001a8e:	0c1f      	lsrs	r7, r3, #16
 8001a90:	4649      	mov	r1, r9
 8001a92:	9200      	str	r2, [sp, #0]
 8001a94:	9701      	str	r7, [sp, #4]
 8001a96:	f7fe fbcf 	bl	8000238 <__aeabi_uidivmod>
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	437a      	muls	r2, r7
 8001a9e:	040b      	lsls	r3, r1, #16
 8001aa0:	0c31      	lsrs	r1, r6, #16
 8001aa2:	4680      	mov	r8, r0
 8001aa4:	4319      	orrs	r1, r3
 8001aa6:	428a      	cmp	r2, r1
 8001aa8:	d907      	bls.n	8001aba <__aeabi_ddiv+0x12e>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	425b      	negs	r3, r3
 8001aae:	469c      	mov	ip, r3
 8001ab0:	1909      	adds	r1, r1, r4
 8001ab2:	44e0      	add	r8, ip
 8001ab4:	428c      	cmp	r4, r1
 8001ab6:	d800      	bhi.n	8001aba <__aeabi_ddiv+0x12e>
 8001ab8:	e201      	b.n	8001ebe <__aeabi_ddiv+0x532>
 8001aba:	1a88      	subs	r0, r1, r2
 8001abc:	4649      	mov	r1, r9
 8001abe:	f7fe fbbb 	bl	8000238 <__aeabi_uidivmod>
 8001ac2:	9a01      	ldr	r2, [sp, #4]
 8001ac4:	0436      	lsls	r6, r6, #16
 8001ac6:	4342      	muls	r2, r0
 8001ac8:	0409      	lsls	r1, r1, #16
 8001aca:	0c36      	lsrs	r6, r6, #16
 8001acc:	0003      	movs	r3, r0
 8001ace:	430e      	orrs	r6, r1
 8001ad0:	42b2      	cmp	r2, r6
 8001ad2:	d904      	bls.n	8001ade <__aeabi_ddiv+0x152>
 8001ad4:	1936      	adds	r6, r6, r4
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	42b4      	cmp	r4, r6
 8001ada:	d800      	bhi.n	8001ade <__aeabi_ddiv+0x152>
 8001adc:	e1e9      	b.n	8001eb2 <__aeabi_ddiv+0x526>
 8001ade:	1ab0      	subs	r0, r6, r2
 8001ae0:	4642      	mov	r2, r8
 8001ae2:	9e00      	ldr	r6, [sp, #0]
 8001ae4:	0412      	lsls	r2, r2, #16
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	0c33      	lsrs	r3, r6, #16
 8001aea:	001f      	movs	r7, r3
 8001aec:	0c11      	lsrs	r1, r2, #16
 8001aee:	4690      	mov	r8, r2
 8001af0:	9302      	str	r3, [sp, #8]
 8001af2:	0413      	lsls	r3, r2, #16
 8001af4:	0432      	lsls	r2, r6, #16
 8001af6:	0c16      	lsrs	r6, r2, #16
 8001af8:	0032      	movs	r2, r6
 8001afa:	0c1b      	lsrs	r3, r3, #16
 8001afc:	435a      	muls	r2, r3
 8001afe:	9603      	str	r6, [sp, #12]
 8001b00:	437b      	muls	r3, r7
 8001b02:	434e      	muls	r6, r1
 8001b04:	4379      	muls	r1, r7
 8001b06:	0c17      	lsrs	r7, r2, #16
 8001b08:	46bc      	mov	ip, r7
 8001b0a:	199b      	adds	r3, r3, r6
 8001b0c:	4463      	add	r3, ip
 8001b0e:	429e      	cmp	r6, r3
 8001b10:	d903      	bls.n	8001b1a <__aeabi_ddiv+0x18e>
 8001b12:	2680      	movs	r6, #128	; 0x80
 8001b14:	0276      	lsls	r6, r6, #9
 8001b16:	46b4      	mov	ip, r6
 8001b18:	4461      	add	r1, ip
 8001b1a:	0c1e      	lsrs	r6, r3, #16
 8001b1c:	1871      	adds	r1, r6, r1
 8001b1e:	0416      	lsls	r6, r2, #16
 8001b20:	041b      	lsls	r3, r3, #16
 8001b22:	0c36      	lsrs	r6, r6, #16
 8001b24:	199e      	adds	r6, r3, r6
 8001b26:	4288      	cmp	r0, r1
 8001b28:	d302      	bcc.n	8001b30 <__aeabi_ddiv+0x1a4>
 8001b2a:	d112      	bne.n	8001b52 <__aeabi_ddiv+0x1c6>
 8001b2c:	42b5      	cmp	r5, r6
 8001b2e:	d210      	bcs.n	8001b52 <__aeabi_ddiv+0x1c6>
 8001b30:	4643      	mov	r3, r8
 8001b32:	1e5a      	subs	r2, r3, #1
 8001b34:	9b00      	ldr	r3, [sp, #0]
 8001b36:	469c      	mov	ip, r3
 8001b38:	4465      	add	r5, ip
 8001b3a:	001f      	movs	r7, r3
 8001b3c:	429d      	cmp	r5, r3
 8001b3e:	419b      	sbcs	r3, r3
 8001b40:	425b      	negs	r3, r3
 8001b42:	191b      	adds	r3, r3, r4
 8001b44:	18c0      	adds	r0, r0, r3
 8001b46:	4284      	cmp	r4, r0
 8001b48:	d200      	bcs.n	8001b4c <__aeabi_ddiv+0x1c0>
 8001b4a:	e19e      	b.n	8001e8a <__aeabi_ddiv+0x4fe>
 8001b4c:	d100      	bne.n	8001b50 <__aeabi_ddiv+0x1c4>
 8001b4e:	e199      	b.n	8001e84 <__aeabi_ddiv+0x4f8>
 8001b50:	4690      	mov	r8, r2
 8001b52:	1bae      	subs	r6, r5, r6
 8001b54:	42b5      	cmp	r5, r6
 8001b56:	41ad      	sbcs	r5, r5
 8001b58:	1a40      	subs	r0, r0, r1
 8001b5a:	426d      	negs	r5, r5
 8001b5c:	1b40      	subs	r0, r0, r5
 8001b5e:	4284      	cmp	r4, r0
 8001b60:	d100      	bne.n	8001b64 <__aeabi_ddiv+0x1d8>
 8001b62:	e1d2      	b.n	8001f0a <__aeabi_ddiv+0x57e>
 8001b64:	4649      	mov	r1, r9
 8001b66:	f7fe fb67 	bl	8000238 <__aeabi_uidivmod>
 8001b6a:	9a01      	ldr	r2, [sp, #4]
 8001b6c:	040b      	lsls	r3, r1, #16
 8001b6e:	4342      	muls	r2, r0
 8001b70:	0c31      	lsrs	r1, r6, #16
 8001b72:	0005      	movs	r5, r0
 8001b74:	4319      	orrs	r1, r3
 8001b76:	428a      	cmp	r2, r1
 8001b78:	d900      	bls.n	8001b7c <__aeabi_ddiv+0x1f0>
 8001b7a:	e16c      	b.n	8001e56 <__aeabi_ddiv+0x4ca>
 8001b7c:	1a88      	subs	r0, r1, r2
 8001b7e:	4649      	mov	r1, r9
 8001b80:	f7fe fb5a 	bl	8000238 <__aeabi_uidivmod>
 8001b84:	9a01      	ldr	r2, [sp, #4]
 8001b86:	0436      	lsls	r6, r6, #16
 8001b88:	4342      	muls	r2, r0
 8001b8a:	0409      	lsls	r1, r1, #16
 8001b8c:	0c36      	lsrs	r6, r6, #16
 8001b8e:	0003      	movs	r3, r0
 8001b90:	430e      	orrs	r6, r1
 8001b92:	42b2      	cmp	r2, r6
 8001b94:	d900      	bls.n	8001b98 <__aeabi_ddiv+0x20c>
 8001b96:	e153      	b.n	8001e40 <__aeabi_ddiv+0x4b4>
 8001b98:	9803      	ldr	r0, [sp, #12]
 8001b9a:	1ab6      	subs	r6, r6, r2
 8001b9c:	0002      	movs	r2, r0
 8001b9e:	042d      	lsls	r5, r5, #16
 8001ba0:	431d      	orrs	r5, r3
 8001ba2:	9f02      	ldr	r7, [sp, #8]
 8001ba4:	042b      	lsls	r3, r5, #16
 8001ba6:	0c1b      	lsrs	r3, r3, #16
 8001ba8:	435a      	muls	r2, r3
 8001baa:	437b      	muls	r3, r7
 8001bac:	469c      	mov	ip, r3
 8001bae:	0c29      	lsrs	r1, r5, #16
 8001bb0:	4348      	muls	r0, r1
 8001bb2:	0c13      	lsrs	r3, r2, #16
 8001bb4:	4484      	add	ip, r0
 8001bb6:	4463      	add	r3, ip
 8001bb8:	4379      	muls	r1, r7
 8001bba:	4298      	cmp	r0, r3
 8001bbc:	d903      	bls.n	8001bc6 <__aeabi_ddiv+0x23a>
 8001bbe:	2080      	movs	r0, #128	; 0x80
 8001bc0:	0240      	lsls	r0, r0, #9
 8001bc2:	4684      	mov	ip, r0
 8001bc4:	4461      	add	r1, ip
 8001bc6:	0c18      	lsrs	r0, r3, #16
 8001bc8:	0412      	lsls	r2, r2, #16
 8001bca:	041b      	lsls	r3, r3, #16
 8001bcc:	0c12      	lsrs	r2, r2, #16
 8001bce:	1840      	adds	r0, r0, r1
 8001bd0:	189b      	adds	r3, r3, r2
 8001bd2:	4286      	cmp	r6, r0
 8001bd4:	d200      	bcs.n	8001bd8 <__aeabi_ddiv+0x24c>
 8001bd6:	e100      	b.n	8001dda <__aeabi_ddiv+0x44e>
 8001bd8:	d100      	bne.n	8001bdc <__aeabi_ddiv+0x250>
 8001bda:	e0fb      	b.n	8001dd4 <__aeabi_ddiv+0x448>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	431d      	orrs	r5, r3
 8001be0:	4b49      	ldr	r3, [pc, #292]	; (8001d08 <__aeabi_ddiv+0x37c>)
 8001be2:	445b      	add	r3, fp
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	dc00      	bgt.n	8001bea <__aeabi_ddiv+0x25e>
 8001be8:	e0aa      	b.n	8001d40 <__aeabi_ddiv+0x3b4>
 8001bea:	076a      	lsls	r2, r5, #29
 8001bec:	d000      	beq.n	8001bf0 <__aeabi_ddiv+0x264>
 8001bee:	e13d      	b.n	8001e6c <__aeabi_ddiv+0x4e0>
 8001bf0:	08e9      	lsrs	r1, r5, #3
 8001bf2:	4642      	mov	r2, r8
 8001bf4:	01d2      	lsls	r2, r2, #7
 8001bf6:	d506      	bpl.n	8001c06 <__aeabi_ddiv+0x27a>
 8001bf8:	4642      	mov	r2, r8
 8001bfa:	4b44      	ldr	r3, [pc, #272]	; (8001d0c <__aeabi_ddiv+0x380>)
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	4690      	mov	r8, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	445b      	add	r3, fp
 8001c06:	4a42      	ldr	r2, [pc, #264]	; (8001d10 <__aeabi_ddiv+0x384>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	dd00      	ble.n	8001c0e <__aeabi_ddiv+0x282>
 8001c0c:	e723      	b.n	8001a56 <__aeabi_ddiv+0xca>
 8001c0e:	4642      	mov	r2, r8
 8001c10:	055b      	lsls	r3, r3, #21
 8001c12:	0755      	lsls	r5, r2, #29
 8001c14:	0252      	lsls	r2, r2, #9
 8001c16:	430d      	orrs	r5, r1
 8001c18:	0b12      	lsrs	r2, r2, #12
 8001c1a:	0d5b      	lsrs	r3, r3, #21
 8001c1c:	e70d      	b.n	8001a3a <__aeabi_ddiv+0xae>
 8001c1e:	4651      	mov	r1, sl
 8001c20:	4321      	orrs	r1, r4
 8001c22:	d100      	bne.n	8001c26 <__aeabi_ddiv+0x29a>
 8001c24:	e07c      	b.n	8001d20 <__aeabi_ddiv+0x394>
 8001c26:	2c00      	cmp	r4, #0
 8001c28:	d100      	bne.n	8001c2c <__aeabi_ddiv+0x2a0>
 8001c2a:	e0fb      	b.n	8001e24 <__aeabi_ddiv+0x498>
 8001c2c:	0020      	movs	r0, r4
 8001c2e:	f001 fa63 	bl	80030f8 <__clzsi2>
 8001c32:	0002      	movs	r2, r0
 8001c34:	3a0b      	subs	r2, #11
 8001c36:	231d      	movs	r3, #29
 8001c38:	1a9b      	subs	r3, r3, r2
 8001c3a:	4652      	mov	r2, sl
 8001c3c:	0001      	movs	r1, r0
 8001c3e:	40da      	lsrs	r2, r3
 8001c40:	4653      	mov	r3, sl
 8001c42:	3908      	subs	r1, #8
 8001c44:	408b      	lsls	r3, r1
 8001c46:	408c      	lsls	r4, r1
 8001c48:	0019      	movs	r1, r3
 8001c4a:	4314      	orrs	r4, r2
 8001c4c:	4b31      	ldr	r3, [pc, #196]	; (8001d14 <__aeabi_ddiv+0x388>)
 8001c4e:	4458      	add	r0, fp
 8001c50:	469b      	mov	fp, r3
 8001c52:	4483      	add	fp, r0
 8001c54:	2000      	movs	r0, #0
 8001c56:	e6d9      	b.n	8001a0c <__aeabi_ddiv+0x80>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	4323      	orrs	r3, r4
 8001c5c:	4698      	mov	r8, r3
 8001c5e:	d044      	beq.n	8001cea <__aeabi_ddiv+0x35e>
 8001c60:	2c00      	cmp	r4, #0
 8001c62:	d100      	bne.n	8001c66 <__aeabi_ddiv+0x2da>
 8001c64:	e0cf      	b.n	8001e06 <__aeabi_ddiv+0x47a>
 8001c66:	0020      	movs	r0, r4
 8001c68:	f001 fa46 	bl	80030f8 <__clzsi2>
 8001c6c:	0001      	movs	r1, r0
 8001c6e:	0002      	movs	r2, r0
 8001c70:	390b      	subs	r1, #11
 8001c72:	231d      	movs	r3, #29
 8001c74:	1a5b      	subs	r3, r3, r1
 8001c76:	4649      	mov	r1, r9
 8001c78:	0010      	movs	r0, r2
 8001c7a:	40d9      	lsrs	r1, r3
 8001c7c:	3808      	subs	r0, #8
 8001c7e:	4084      	lsls	r4, r0
 8001c80:	000b      	movs	r3, r1
 8001c82:	464d      	mov	r5, r9
 8001c84:	4323      	orrs	r3, r4
 8001c86:	4698      	mov	r8, r3
 8001c88:	4085      	lsls	r5, r0
 8001c8a:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <__aeabi_ddiv+0x38c>)
 8001c8c:	1a9b      	subs	r3, r3, r2
 8001c8e:	469b      	mov	fp, r3
 8001c90:	2300      	movs	r3, #0
 8001c92:	4699      	mov	r9, r3
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	e69e      	b.n	80019d6 <__aeabi_ddiv+0x4a>
 8001c98:	0002      	movs	r2, r0
 8001c9a:	4322      	orrs	r2, r4
 8001c9c:	4690      	mov	r8, r2
 8001c9e:	d11d      	bne.n	8001cdc <__aeabi_ddiv+0x350>
 8001ca0:	2208      	movs	r2, #8
 8001ca2:	469b      	mov	fp, r3
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	2500      	movs	r5, #0
 8001ca8:	4691      	mov	r9, r2
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	e693      	b.n	80019d6 <__aeabi_ddiv+0x4a>
 8001cae:	4651      	mov	r1, sl
 8001cb0:	4321      	orrs	r1, r4
 8001cb2:	d109      	bne.n	8001cc8 <__aeabi_ddiv+0x33c>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	464a      	mov	r2, r9
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <__aeabi_ddiv+0x390>)
 8001cbc:	4691      	mov	r9, r2
 8001cbe:	469c      	mov	ip, r3
 8001cc0:	2400      	movs	r4, #0
 8001cc2:	2002      	movs	r0, #2
 8001cc4:	44e3      	add	fp, ip
 8001cc6:	e6a1      	b.n	8001a0c <__aeabi_ddiv+0x80>
 8001cc8:	2303      	movs	r3, #3
 8001cca:	464a      	mov	r2, r9
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <__aeabi_ddiv+0x390>)
 8001cd0:	4691      	mov	r9, r2
 8001cd2:	469c      	mov	ip, r3
 8001cd4:	4651      	mov	r1, sl
 8001cd6:	2003      	movs	r0, #3
 8001cd8:	44e3      	add	fp, ip
 8001cda:	e697      	b.n	8001a0c <__aeabi_ddiv+0x80>
 8001cdc:	220c      	movs	r2, #12
 8001cde:	469b      	mov	fp, r3
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	46a0      	mov	r8, r4
 8001ce4:	4691      	mov	r9, r2
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	e675      	b.n	80019d6 <__aeabi_ddiv+0x4a>
 8001cea:	2304      	movs	r3, #4
 8001cec:	4699      	mov	r9, r3
 8001cee:	2300      	movs	r3, #0
 8001cf0:	469b      	mov	fp, r3
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	2500      	movs	r5, #0
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	e66d      	b.n	80019d6 <__aeabi_ddiv+0x4a>
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	000007ff 	.word	0x000007ff
 8001d00:	fffffc01 	.word	0xfffffc01
 8001d04:	08010e9c 	.word	0x08010e9c
 8001d08:	000003ff 	.word	0x000003ff
 8001d0c:	feffffff 	.word	0xfeffffff
 8001d10:	000007fe 	.word	0x000007fe
 8001d14:	000003f3 	.word	0x000003f3
 8001d18:	fffffc0d 	.word	0xfffffc0d
 8001d1c:	fffff801 	.word	0xfffff801
 8001d20:	464a      	mov	r2, r9
 8001d22:	2301      	movs	r3, #1
 8001d24:	431a      	orrs	r2, r3
 8001d26:	4691      	mov	r9, r2
 8001d28:	2400      	movs	r4, #0
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	e66e      	b.n	8001a0c <__aeabi_ddiv+0x80>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	2280      	movs	r2, #128	; 0x80
 8001d32:	469a      	mov	sl, r3
 8001d34:	2500      	movs	r5, #0
 8001d36:	4b88      	ldr	r3, [pc, #544]	; (8001f58 <__aeabi_ddiv+0x5cc>)
 8001d38:	0312      	lsls	r2, r2, #12
 8001d3a:	e67e      	b.n	8001a3a <__aeabi_ddiv+0xae>
 8001d3c:	2501      	movs	r5, #1
 8001d3e:	426d      	negs	r5, r5
 8001d40:	2201      	movs	r2, #1
 8001d42:	1ad2      	subs	r2, r2, r3
 8001d44:	2a38      	cmp	r2, #56	; 0x38
 8001d46:	dd00      	ble.n	8001d4a <__aeabi_ddiv+0x3be>
 8001d48:	e674      	b.n	8001a34 <__aeabi_ddiv+0xa8>
 8001d4a:	2a1f      	cmp	r2, #31
 8001d4c:	dc00      	bgt.n	8001d50 <__aeabi_ddiv+0x3c4>
 8001d4e:	e0bd      	b.n	8001ecc <__aeabi_ddiv+0x540>
 8001d50:	211f      	movs	r1, #31
 8001d52:	4249      	negs	r1, r1
 8001d54:	1acb      	subs	r3, r1, r3
 8001d56:	4641      	mov	r1, r8
 8001d58:	40d9      	lsrs	r1, r3
 8001d5a:	000b      	movs	r3, r1
 8001d5c:	2a20      	cmp	r2, #32
 8001d5e:	d004      	beq.n	8001d6a <__aeabi_ddiv+0x3de>
 8001d60:	4641      	mov	r1, r8
 8001d62:	4a7e      	ldr	r2, [pc, #504]	; (8001f5c <__aeabi_ddiv+0x5d0>)
 8001d64:	445a      	add	r2, fp
 8001d66:	4091      	lsls	r1, r2
 8001d68:	430d      	orrs	r5, r1
 8001d6a:	0029      	movs	r1, r5
 8001d6c:	1e4a      	subs	r2, r1, #1
 8001d6e:	4191      	sbcs	r1, r2
 8001d70:	4319      	orrs	r1, r3
 8001d72:	2307      	movs	r3, #7
 8001d74:	001d      	movs	r5, r3
 8001d76:	2200      	movs	r2, #0
 8001d78:	400d      	ands	r5, r1
 8001d7a:	420b      	tst	r3, r1
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_ddiv+0x3f4>
 8001d7e:	e0d0      	b.n	8001f22 <__aeabi_ddiv+0x596>
 8001d80:	220f      	movs	r2, #15
 8001d82:	2300      	movs	r3, #0
 8001d84:	400a      	ands	r2, r1
 8001d86:	2a04      	cmp	r2, #4
 8001d88:	d100      	bne.n	8001d8c <__aeabi_ddiv+0x400>
 8001d8a:	e0c7      	b.n	8001f1c <__aeabi_ddiv+0x590>
 8001d8c:	1d0a      	adds	r2, r1, #4
 8001d8e:	428a      	cmp	r2, r1
 8001d90:	4189      	sbcs	r1, r1
 8001d92:	4249      	negs	r1, r1
 8001d94:	185b      	adds	r3, r3, r1
 8001d96:	0011      	movs	r1, r2
 8001d98:	021a      	lsls	r2, r3, #8
 8001d9a:	d400      	bmi.n	8001d9e <__aeabi_ddiv+0x412>
 8001d9c:	e0be      	b.n	8001f1c <__aeabi_ddiv+0x590>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	2200      	movs	r2, #0
 8001da2:	2500      	movs	r5, #0
 8001da4:	e649      	b.n	8001a3a <__aeabi_ddiv+0xae>
 8001da6:	2280      	movs	r2, #128	; 0x80
 8001da8:	4643      	mov	r3, r8
 8001daa:	0312      	lsls	r2, r2, #12
 8001dac:	4213      	tst	r3, r2
 8001dae:	d008      	beq.n	8001dc2 <__aeabi_ddiv+0x436>
 8001db0:	4214      	tst	r4, r2
 8001db2:	d106      	bne.n	8001dc2 <__aeabi_ddiv+0x436>
 8001db4:	4322      	orrs	r2, r4
 8001db6:	0312      	lsls	r2, r2, #12
 8001db8:	46ba      	mov	sl, r7
 8001dba:	000d      	movs	r5, r1
 8001dbc:	4b66      	ldr	r3, [pc, #408]	; (8001f58 <__aeabi_ddiv+0x5cc>)
 8001dbe:	0b12      	lsrs	r2, r2, #12
 8001dc0:	e63b      	b.n	8001a3a <__aeabi_ddiv+0xae>
 8001dc2:	2280      	movs	r2, #128	; 0x80
 8001dc4:	4643      	mov	r3, r8
 8001dc6:	0312      	lsls	r2, r2, #12
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	0312      	lsls	r2, r2, #12
 8001dcc:	46b2      	mov	sl, r6
 8001dce:	4b62      	ldr	r3, [pc, #392]	; (8001f58 <__aeabi_ddiv+0x5cc>)
 8001dd0:	0b12      	lsrs	r2, r2, #12
 8001dd2:	e632      	b.n	8001a3a <__aeabi_ddiv+0xae>
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d100      	bne.n	8001dda <__aeabi_ddiv+0x44e>
 8001dd8:	e702      	b.n	8001be0 <__aeabi_ddiv+0x254>
 8001dda:	19a6      	adds	r6, r4, r6
 8001ddc:	1e6a      	subs	r2, r5, #1
 8001dde:	42a6      	cmp	r6, r4
 8001de0:	d200      	bcs.n	8001de4 <__aeabi_ddiv+0x458>
 8001de2:	e089      	b.n	8001ef8 <__aeabi_ddiv+0x56c>
 8001de4:	4286      	cmp	r6, r0
 8001de6:	d200      	bcs.n	8001dea <__aeabi_ddiv+0x45e>
 8001de8:	e09f      	b.n	8001f2a <__aeabi_ddiv+0x59e>
 8001dea:	d100      	bne.n	8001dee <__aeabi_ddiv+0x462>
 8001dec:	e0af      	b.n	8001f4e <__aeabi_ddiv+0x5c2>
 8001dee:	0015      	movs	r5, r2
 8001df0:	e6f4      	b.n	8001bdc <__aeabi_ddiv+0x250>
 8001df2:	42a9      	cmp	r1, r5
 8001df4:	d900      	bls.n	8001df8 <__aeabi_ddiv+0x46c>
 8001df6:	e63c      	b.n	8001a72 <__aeabi_ddiv+0xe6>
 8001df8:	4643      	mov	r3, r8
 8001dfa:	07de      	lsls	r6, r3, #31
 8001dfc:	0858      	lsrs	r0, r3, #1
 8001dfe:	086b      	lsrs	r3, r5, #1
 8001e00:	431e      	orrs	r6, r3
 8001e02:	07ed      	lsls	r5, r5, #31
 8001e04:	e63c      	b.n	8001a80 <__aeabi_ddiv+0xf4>
 8001e06:	f001 f977 	bl	80030f8 <__clzsi2>
 8001e0a:	0001      	movs	r1, r0
 8001e0c:	0002      	movs	r2, r0
 8001e0e:	3115      	adds	r1, #21
 8001e10:	3220      	adds	r2, #32
 8001e12:	291c      	cmp	r1, #28
 8001e14:	dc00      	bgt.n	8001e18 <__aeabi_ddiv+0x48c>
 8001e16:	e72c      	b.n	8001c72 <__aeabi_ddiv+0x2e6>
 8001e18:	464b      	mov	r3, r9
 8001e1a:	3808      	subs	r0, #8
 8001e1c:	4083      	lsls	r3, r0
 8001e1e:	2500      	movs	r5, #0
 8001e20:	4698      	mov	r8, r3
 8001e22:	e732      	b.n	8001c8a <__aeabi_ddiv+0x2fe>
 8001e24:	f001 f968 	bl	80030f8 <__clzsi2>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	001a      	movs	r2, r3
 8001e2c:	3215      	adds	r2, #21
 8001e2e:	3020      	adds	r0, #32
 8001e30:	2a1c      	cmp	r2, #28
 8001e32:	dc00      	bgt.n	8001e36 <__aeabi_ddiv+0x4aa>
 8001e34:	e6ff      	b.n	8001c36 <__aeabi_ddiv+0x2aa>
 8001e36:	4654      	mov	r4, sl
 8001e38:	3b08      	subs	r3, #8
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	409c      	lsls	r4, r3
 8001e3e:	e705      	b.n	8001c4c <__aeabi_ddiv+0x2c0>
 8001e40:	1936      	adds	r6, r6, r4
 8001e42:	3b01      	subs	r3, #1
 8001e44:	42b4      	cmp	r4, r6
 8001e46:	d900      	bls.n	8001e4a <__aeabi_ddiv+0x4be>
 8001e48:	e6a6      	b.n	8001b98 <__aeabi_ddiv+0x20c>
 8001e4a:	42b2      	cmp	r2, r6
 8001e4c:	d800      	bhi.n	8001e50 <__aeabi_ddiv+0x4c4>
 8001e4e:	e6a3      	b.n	8001b98 <__aeabi_ddiv+0x20c>
 8001e50:	1e83      	subs	r3, r0, #2
 8001e52:	1936      	adds	r6, r6, r4
 8001e54:	e6a0      	b.n	8001b98 <__aeabi_ddiv+0x20c>
 8001e56:	1909      	adds	r1, r1, r4
 8001e58:	3d01      	subs	r5, #1
 8001e5a:	428c      	cmp	r4, r1
 8001e5c:	d900      	bls.n	8001e60 <__aeabi_ddiv+0x4d4>
 8001e5e:	e68d      	b.n	8001b7c <__aeabi_ddiv+0x1f0>
 8001e60:	428a      	cmp	r2, r1
 8001e62:	d800      	bhi.n	8001e66 <__aeabi_ddiv+0x4da>
 8001e64:	e68a      	b.n	8001b7c <__aeabi_ddiv+0x1f0>
 8001e66:	1e85      	subs	r5, r0, #2
 8001e68:	1909      	adds	r1, r1, r4
 8001e6a:	e687      	b.n	8001b7c <__aeabi_ddiv+0x1f0>
 8001e6c:	220f      	movs	r2, #15
 8001e6e:	402a      	ands	r2, r5
 8001e70:	2a04      	cmp	r2, #4
 8001e72:	d100      	bne.n	8001e76 <__aeabi_ddiv+0x4ea>
 8001e74:	e6bc      	b.n	8001bf0 <__aeabi_ddiv+0x264>
 8001e76:	1d29      	adds	r1, r5, #4
 8001e78:	42a9      	cmp	r1, r5
 8001e7a:	41ad      	sbcs	r5, r5
 8001e7c:	426d      	negs	r5, r5
 8001e7e:	08c9      	lsrs	r1, r1, #3
 8001e80:	44a8      	add	r8, r5
 8001e82:	e6b6      	b.n	8001bf2 <__aeabi_ddiv+0x266>
 8001e84:	42af      	cmp	r7, r5
 8001e86:	d900      	bls.n	8001e8a <__aeabi_ddiv+0x4fe>
 8001e88:	e662      	b.n	8001b50 <__aeabi_ddiv+0x1c4>
 8001e8a:	4281      	cmp	r1, r0
 8001e8c:	d804      	bhi.n	8001e98 <__aeabi_ddiv+0x50c>
 8001e8e:	d000      	beq.n	8001e92 <__aeabi_ddiv+0x506>
 8001e90:	e65e      	b.n	8001b50 <__aeabi_ddiv+0x1c4>
 8001e92:	42ae      	cmp	r6, r5
 8001e94:	d800      	bhi.n	8001e98 <__aeabi_ddiv+0x50c>
 8001e96:	e65b      	b.n	8001b50 <__aeabi_ddiv+0x1c4>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	425b      	negs	r3, r3
 8001e9c:	469c      	mov	ip, r3
 8001e9e:	9b00      	ldr	r3, [sp, #0]
 8001ea0:	44e0      	add	r8, ip
 8001ea2:	469c      	mov	ip, r3
 8001ea4:	4465      	add	r5, ip
 8001ea6:	429d      	cmp	r5, r3
 8001ea8:	419b      	sbcs	r3, r3
 8001eaa:	425b      	negs	r3, r3
 8001eac:	191b      	adds	r3, r3, r4
 8001eae:	18c0      	adds	r0, r0, r3
 8001eb0:	e64f      	b.n	8001b52 <__aeabi_ddiv+0x1c6>
 8001eb2:	42b2      	cmp	r2, r6
 8001eb4:	d800      	bhi.n	8001eb8 <__aeabi_ddiv+0x52c>
 8001eb6:	e612      	b.n	8001ade <__aeabi_ddiv+0x152>
 8001eb8:	1e83      	subs	r3, r0, #2
 8001eba:	1936      	adds	r6, r6, r4
 8001ebc:	e60f      	b.n	8001ade <__aeabi_ddiv+0x152>
 8001ebe:	428a      	cmp	r2, r1
 8001ec0:	d800      	bhi.n	8001ec4 <__aeabi_ddiv+0x538>
 8001ec2:	e5fa      	b.n	8001aba <__aeabi_ddiv+0x12e>
 8001ec4:	1e83      	subs	r3, r0, #2
 8001ec6:	4698      	mov	r8, r3
 8001ec8:	1909      	adds	r1, r1, r4
 8001eca:	e5f6      	b.n	8001aba <__aeabi_ddiv+0x12e>
 8001ecc:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <__aeabi_ddiv+0x5d4>)
 8001ece:	0028      	movs	r0, r5
 8001ed0:	445b      	add	r3, fp
 8001ed2:	4641      	mov	r1, r8
 8001ed4:	409d      	lsls	r5, r3
 8001ed6:	4099      	lsls	r1, r3
 8001ed8:	40d0      	lsrs	r0, r2
 8001eda:	1e6b      	subs	r3, r5, #1
 8001edc:	419d      	sbcs	r5, r3
 8001ede:	4643      	mov	r3, r8
 8001ee0:	4301      	orrs	r1, r0
 8001ee2:	4329      	orrs	r1, r5
 8001ee4:	40d3      	lsrs	r3, r2
 8001ee6:	074a      	lsls	r2, r1, #29
 8001ee8:	d100      	bne.n	8001eec <__aeabi_ddiv+0x560>
 8001eea:	e755      	b.n	8001d98 <__aeabi_ddiv+0x40c>
 8001eec:	220f      	movs	r2, #15
 8001eee:	400a      	ands	r2, r1
 8001ef0:	2a04      	cmp	r2, #4
 8001ef2:	d000      	beq.n	8001ef6 <__aeabi_ddiv+0x56a>
 8001ef4:	e74a      	b.n	8001d8c <__aeabi_ddiv+0x400>
 8001ef6:	e74f      	b.n	8001d98 <__aeabi_ddiv+0x40c>
 8001ef8:	0015      	movs	r5, r2
 8001efa:	4286      	cmp	r6, r0
 8001efc:	d000      	beq.n	8001f00 <__aeabi_ddiv+0x574>
 8001efe:	e66d      	b.n	8001bdc <__aeabi_ddiv+0x250>
 8001f00:	9a00      	ldr	r2, [sp, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d000      	beq.n	8001f08 <__aeabi_ddiv+0x57c>
 8001f06:	e669      	b.n	8001bdc <__aeabi_ddiv+0x250>
 8001f08:	e66a      	b.n	8001be0 <__aeabi_ddiv+0x254>
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <__aeabi_ddiv+0x5d8>)
 8001f0c:	445b      	add	r3, fp
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	dc00      	bgt.n	8001f14 <__aeabi_ddiv+0x588>
 8001f12:	e713      	b.n	8001d3c <__aeabi_ddiv+0x3b0>
 8001f14:	2501      	movs	r5, #1
 8001f16:	2100      	movs	r1, #0
 8001f18:	44a8      	add	r8, r5
 8001f1a:	e66a      	b.n	8001bf2 <__aeabi_ddiv+0x266>
 8001f1c:	075d      	lsls	r5, r3, #29
 8001f1e:	025b      	lsls	r3, r3, #9
 8001f20:	0b1a      	lsrs	r2, r3, #12
 8001f22:	08c9      	lsrs	r1, r1, #3
 8001f24:	2300      	movs	r3, #0
 8001f26:	430d      	orrs	r5, r1
 8001f28:	e587      	b.n	8001a3a <__aeabi_ddiv+0xae>
 8001f2a:	9900      	ldr	r1, [sp, #0]
 8001f2c:	3d02      	subs	r5, #2
 8001f2e:	004a      	lsls	r2, r1, #1
 8001f30:	428a      	cmp	r2, r1
 8001f32:	41bf      	sbcs	r7, r7
 8001f34:	427f      	negs	r7, r7
 8001f36:	193f      	adds	r7, r7, r4
 8001f38:	19f6      	adds	r6, r6, r7
 8001f3a:	9200      	str	r2, [sp, #0]
 8001f3c:	e7dd      	b.n	8001efa <__aeabi_ddiv+0x56e>
 8001f3e:	2280      	movs	r2, #128	; 0x80
 8001f40:	4643      	mov	r3, r8
 8001f42:	0312      	lsls	r2, r2, #12
 8001f44:	431a      	orrs	r2, r3
 8001f46:	0312      	lsls	r2, r2, #12
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <__aeabi_ddiv+0x5cc>)
 8001f4a:	0b12      	lsrs	r2, r2, #12
 8001f4c:	e575      	b.n	8001a3a <__aeabi_ddiv+0xae>
 8001f4e:	9900      	ldr	r1, [sp, #0]
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d3ea      	bcc.n	8001f2a <__aeabi_ddiv+0x59e>
 8001f54:	0015      	movs	r5, r2
 8001f56:	e7d3      	b.n	8001f00 <__aeabi_ddiv+0x574>
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	0000043e 	.word	0x0000043e
 8001f60:	0000041e 	.word	0x0000041e
 8001f64:	000003ff 	.word	0x000003ff

08001f68 <__eqdf2>:
 8001f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6a:	464e      	mov	r6, r9
 8001f6c:	4645      	mov	r5, r8
 8001f6e:	46de      	mov	lr, fp
 8001f70:	4657      	mov	r7, sl
 8001f72:	4690      	mov	r8, r2
 8001f74:	b5e0      	push	{r5, r6, r7, lr}
 8001f76:	0017      	movs	r7, r2
 8001f78:	031a      	lsls	r2, r3, #12
 8001f7a:	0b12      	lsrs	r2, r2, #12
 8001f7c:	0005      	movs	r5, r0
 8001f7e:	4684      	mov	ip, r0
 8001f80:	4819      	ldr	r0, [pc, #100]	; (8001fe8 <__eqdf2+0x80>)
 8001f82:	030e      	lsls	r6, r1, #12
 8001f84:	004c      	lsls	r4, r1, #1
 8001f86:	4691      	mov	r9, r2
 8001f88:	005a      	lsls	r2, r3, #1
 8001f8a:	0fdb      	lsrs	r3, r3, #31
 8001f8c:	469b      	mov	fp, r3
 8001f8e:	0b36      	lsrs	r6, r6, #12
 8001f90:	0d64      	lsrs	r4, r4, #21
 8001f92:	0fc9      	lsrs	r1, r1, #31
 8001f94:	0d52      	lsrs	r2, r2, #21
 8001f96:	4284      	cmp	r4, r0
 8001f98:	d019      	beq.n	8001fce <__eqdf2+0x66>
 8001f9a:	4282      	cmp	r2, r0
 8001f9c:	d010      	beq.n	8001fc0 <__eqdf2+0x58>
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	4294      	cmp	r4, r2
 8001fa2:	d10e      	bne.n	8001fc2 <__eqdf2+0x5a>
 8001fa4:	454e      	cmp	r6, r9
 8001fa6:	d10c      	bne.n	8001fc2 <__eqdf2+0x5a>
 8001fa8:	2001      	movs	r0, #1
 8001faa:	45c4      	cmp	ip, r8
 8001fac:	d109      	bne.n	8001fc2 <__eqdf2+0x5a>
 8001fae:	4559      	cmp	r1, fp
 8001fb0:	d017      	beq.n	8001fe2 <__eqdf2+0x7a>
 8001fb2:	2c00      	cmp	r4, #0
 8001fb4:	d105      	bne.n	8001fc2 <__eqdf2+0x5a>
 8001fb6:	0030      	movs	r0, r6
 8001fb8:	4328      	orrs	r0, r5
 8001fba:	1e43      	subs	r3, r0, #1
 8001fbc:	4198      	sbcs	r0, r3
 8001fbe:	e000      	b.n	8001fc2 <__eqdf2+0x5a>
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	bcf0      	pop	{r4, r5, r6, r7}
 8001fc4:	46bb      	mov	fp, r7
 8001fc6:	46b2      	mov	sl, r6
 8001fc8:	46a9      	mov	r9, r5
 8001fca:	46a0      	mov	r8, r4
 8001fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fce:	0033      	movs	r3, r6
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	432b      	orrs	r3, r5
 8001fd4:	d1f5      	bne.n	8001fc2 <__eqdf2+0x5a>
 8001fd6:	42a2      	cmp	r2, r4
 8001fd8:	d1f3      	bne.n	8001fc2 <__eqdf2+0x5a>
 8001fda:	464b      	mov	r3, r9
 8001fdc:	433b      	orrs	r3, r7
 8001fde:	d1f0      	bne.n	8001fc2 <__eqdf2+0x5a>
 8001fe0:	e7e2      	b.n	8001fa8 <__eqdf2+0x40>
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	e7ed      	b.n	8001fc2 <__eqdf2+0x5a>
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	000007ff 	.word	0x000007ff

08001fec <__gedf2>:
 8001fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fee:	4647      	mov	r7, r8
 8001ff0:	46ce      	mov	lr, r9
 8001ff2:	0004      	movs	r4, r0
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	0016      	movs	r6, r2
 8001ff8:	031b      	lsls	r3, r3, #12
 8001ffa:	0b1b      	lsrs	r3, r3, #12
 8001ffc:	4d2d      	ldr	r5, [pc, #180]	; (80020b4 <__gedf2+0xc8>)
 8001ffe:	004a      	lsls	r2, r1, #1
 8002000:	4699      	mov	r9, r3
 8002002:	b580      	push	{r7, lr}
 8002004:	0043      	lsls	r3, r0, #1
 8002006:	030f      	lsls	r7, r1, #12
 8002008:	46a4      	mov	ip, r4
 800200a:	46b0      	mov	r8, r6
 800200c:	0b3f      	lsrs	r7, r7, #12
 800200e:	0d52      	lsrs	r2, r2, #21
 8002010:	0fc9      	lsrs	r1, r1, #31
 8002012:	0d5b      	lsrs	r3, r3, #21
 8002014:	0fc0      	lsrs	r0, r0, #31
 8002016:	42aa      	cmp	r2, r5
 8002018:	d021      	beq.n	800205e <__gedf2+0x72>
 800201a:	42ab      	cmp	r3, r5
 800201c:	d013      	beq.n	8002046 <__gedf2+0x5a>
 800201e:	2a00      	cmp	r2, #0
 8002020:	d122      	bne.n	8002068 <__gedf2+0x7c>
 8002022:	433c      	orrs	r4, r7
 8002024:	2b00      	cmp	r3, #0
 8002026:	d102      	bne.n	800202e <__gedf2+0x42>
 8002028:	464d      	mov	r5, r9
 800202a:	432e      	orrs	r6, r5
 800202c:	d022      	beq.n	8002074 <__gedf2+0x88>
 800202e:	2c00      	cmp	r4, #0
 8002030:	d010      	beq.n	8002054 <__gedf2+0x68>
 8002032:	4281      	cmp	r1, r0
 8002034:	d022      	beq.n	800207c <__gedf2+0x90>
 8002036:	2002      	movs	r0, #2
 8002038:	3901      	subs	r1, #1
 800203a:	4008      	ands	r0, r1
 800203c:	3801      	subs	r0, #1
 800203e:	bcc0      	pop	{r6, r7}
 8002040:	46b9      	mov	r9, r7
 8002042:	46b0      	mov	r8, r6
 8002044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002046:	464d      	mov	r5, r9
 8002048:	432e      	orrs	r6, r5
 800204a:	d129      	bne.n	80020a0 <__gedf2+0xb4>
 800204c:	2a00      	cmp	r2, #0
 800204e:	d1f0      	bne.n	8002032 <__gedf2+0x46>
 8002050:	433c      	orrs	r4, r7
 8002052:	d1ee      	bne.n	8002032 <__gedf2+0x46>
 8002054:	2800      	cmp	r0, #0
 8002056:	d1f2      	bne.n	800203e <__gedf2+0x52>
 8002058:	2001      	movs	r0, #1
 800205a:	4240      	negs	r0, r0
 800205c:	e7ef      	b.n	800203e <__gedf2+0x52>
 800205e:	003d      	movs	r5, r7
 8002060:	4325      	orrs	r5, r4
 8002062:	d11d      	bne.n	80020a0 <__gedf2+0xb4>
 8002064:	4293      	cmp	r3, r2
 8002066:	d0ee      	beq.n	8002046 <__gedf2+0x5a>
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1e2      	bne.n	8002032 <__gedf2+0x46>
 800206c:	464c      	mov	r4, r9
 800206e:	4326      	orrs	r6, r4
 8002070:	d1df      	bne.n	8002032 <__gedf2+0x46>
 8002072:	e7e0      	b.n	8002036 <__gedf2+0x4a>
 8002074:	2000      	movs	r0, #0
 8002076:	2c00      	cmp	r4, #0
 8002078:	d0e1      	beq.n	800203e <__gedf2+0x52>
 800207a:	e7dc      	b.n	8002036 <__gedf2+0x4a>
 800207c:	429a      	cmp	r2, r3
 800207e:	dc0a      	bgt.n	8002096 <__gedf2+0xaa>
 8002080:	dbe8      	blt.n	8002054 <__gedf2+0x68>
 8002082:	454f      	cmp	r7, r9
 8002084:	d8d7      	bhi.n	8002036 <__gedf2+0x4a>
 8002086:	d00e      	beq.n	80020a6 <__gedf2+0xba>
 8002088:	2000      	movs	r0, #0
 800208a:	454f      	cmp	r7, r9
 800208c:	d2d7      	bcs.n	800203e <__gedf2+0x52>
 800208e:	2900      	cmp	r1, #0
 8002090:	d0e2      	beq.n	8002058 <__gedf2+0x6c>
 8002092:	0008      	movs	r0, r1
 8002094:	e7d3      	b.n	800203e <__gedf2+0x52>
 8002096:	4243      	negs	r3, r0
 8002098:	4158      	adcs	r0, r3
 800209a:	0040      	lsls	r0, r0, #1
 800209c:	3801      	subs	r0, #1
 800209e:	e7ce      	b.n	800203e <__gedf2+0x52>
 80020a0:	2002      	movs	r0, #2
 80020a2:	4240      	negs	r0, r0
 80020a4:	e7cb      	b.n	800203e <__gedf2+0x52>
 80020a6:	45c4      	cmp	ip, r8
 80020a8:	d8c5      	bhi.n	8002036 <__gedf2+0x4a>
 80020aa:	2000      	movs	r0, #0
 80020ac:	45c4      	cmp	ip, r8
 80020ae:	d2c6      	bcs.n	800203e <__gedf2+0x52>
 80020b0:	e7ed      	b.n	800208e <__gedf2+0xa2>
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	000007ff 	.word	0x000007ff

080020b8 <__ledf2>:
 80020b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ba:	4647      	mov	r7, r8
 80020bc:	46ce      	mov	lr, r9
 80020be:	0004      	movs	r4, r0
 80020c0:	0018      	movs	r0, r3
 80020c2:	0016      	movs	r6, r2
 80020c4:	031b      	lsls	r3, r3, #12
 80020c6:	0b1b      	lsrs	r3, r3, #12
 80020c8:	4d2c      	ldr	r5, [pc, #176]	; (800217c <__ledf2+0xc4>)
 80020ca:	004a      	lsls	r2, r1, #1
 80020cc:	4699      	mov	r9, r3
 80020ce:	b580      	push	{r7, lr}
 80020d0:	0043      	lsls	r3, r0, #1
 80020d2:	030f      	lsls	r7, r1, #12
 80020d4:	46a4      	mov	ip, r4
 80020d6:	46b0      	mov	r8, r6
 80020d8:	0b3f      	lsrs	r7, r7, #12
 80020da:	0d52      	lsrs	r2, r2, #21
 80020dc:	0fc9      	lsrs	r1, r1, #31
 80020de:	0d5b      	lsrs	r3, r3, #21
 80020e0:	0fc0      	lsrs	r0, r0, #31
 80020e2:	42aa      	cmp	r2, r5
 80020e4:	d00d      	beq.n	8002102 <__ledf2+0x4a>
 80020e6:	42ab      	cmp	r3, r5
 80020e8:	d010      	beq.n	800210c <__ledf2+0x54>
 80020ea:	2a00      	cmp	r2, #0
 80020ec:	d127      	bne.n	800213e <__ledf2+0x86>
 80020ee:	433c      	orrs	r4, r7
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d111      	bne.n	8002118 <__ledf2+0x60>
 80020f4:	464d      	mov	r5, r9
 80020f6:	432e      	orrs	r6, r5
 80020f8:	d10e      	bne.n	8002118 <__ledf2+0x60>
 80020fa:	2000      	movs	r0, #0
 80020fc:	2c00      	cmp	r4, #0
 80020fe:	d015      	beq.n	800212c <__ledf2+0x74>
 8002100:	e00e      	b.n	8002120 <__ledf2+0x68>
 8002102:	003d      	movs	r5, r7
 8002104:	4325      	orrs	r5, r4
 8002106:	d110      	bne.n	800212a <__ledf2+0x72>
 8002108:	4293      	cmp	r3, r2
 800210a:	d118      	bne.n	800213e <__ledf2+0x86>
 800210c:	464d      	mov	r5, r9
 800210e:	432e      	orrs	r6, r5
 8002110:	d10b      	bne.n	800212a <__ledf2+0x72>
 8002112:	2a00      	cmp	r2, #0
 8002114:	d102      	bne.n	800211c <__ledf2+0x64>
 8002116:	433c      	orrs	r4, r7
 8002118:	2c00      	cmp	r4, #0
 800211a:	d00b      	beq.n	8002134 <__ledf2+0x7c>
 800211c:	4281      	cmp	r1, r0
 800211e:	d014      	beq.n	800214a <__ledf2+0x92>
 8002120:	2002      	movs	r0, #2
 8002122:	3901      	subs	r1, #1
 8002124:	4008      	ands	r0, r1
 8002126:	3801      	subs	r0, #1
 8002128:	e000      	b.n	800212c <__ledf2+0x74>
 800212a:	2002      	movs	r0, #2
 800212c:	bcc0      	pop	{r6, r7}
 800212e:	46b9      	mov	r9, r7
 8002130:	46b0      	mov	r8, r6
 8002132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002134:	2800      	cmp	r0, #0
 8002136:	d1f9      	bne.n	800212c <__ledf2+0x74>
 8002138:	2001      	movs	r0, #1
 800213a:	4240      	negs	r0, r0
 800213c:	e7f6      	b.n	800212c <__ledf2+0x74>
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1ec      	bne.n	800211c <__ledf2+0x64>
 8002142:	464c      	mov	r4, r9
 8002144:	4326      	orrs	r6, r4
 8002146:	d1e9      	bne.n	800211c <__ledf2+0x64>
 8002148:	e7ea      	b.n	8002120 <__ledf2+0x68>
 800214a:	429a      	cmp	r2, r3
 800214c:	dd04      	ble.n	8002158 <__ledf2+0xa0>
 800214e:	4243      	negs	r3, r0
 8002150:	4158      	adcs	r0, r3
 8002152:	0040      	lsls	r0, r0, #1
 8002154:	3801      	subs	r0, #1
 8002156:	e7e9      	b.n	800212c <__ledf2+0x74>
 8002158:	429a      	cmp	r2, r3
 800215a:	dbeb      	blt.n	8002134 <__ledf2+0x7c>
 800215c:	454f      	cmp	r7, r9
 800215e:	d8df      	bhi.n	8002120 <__ledf2+0x68>
 8002160:	d006      	beq.n	8002170 <__ledf2+0xb8>
 8002162:	2000      	movs	r0, #0
 8002164:	454f      	cmp	r7, r9
 8002166:	d2e1      	bcs.n	800212c <__ledf2+0x74>
 8002168:	2900      	cmp	r1, #0
 800216a:	d0e5      	beq.n	8002138 <__ledf2+0x80>
 800216c:	0008      	movs	r0, r1
 800216e:	e7dd      	b.n	800212c <__ledf2+0x74>
 8002170:	45c4      	cmp	ip, r8
 8002172:	d8d5      	bhi.n	8002120 <__ledf2+0x68>
 8002174:	2000      	movs	r0, #0
 8002176:	45c4      	cmp	ip, r8
 8002178:	d2d8      	bcs.n	800212c <__ledf2+0x74>
 800217a:	e7f5      	b.n	8002168 <__ledf2+0xb0>
 800217c:	000007ff 	.word	0x000007ff

08002180 <__aeabi_dmul>:
 8002180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002182:	4645      	mov	r5, r8
 8002184:	46de      	mov	lr, fp
 8002186:	4657      	mov	r7, sl
 8002188:	464e      	mov	r6, r9
 800218a:	b5e0      	push	{r5, r6, r7, lr}
 800218c:	001f      	movs	r7, r3
 800218e:	030b      	lsls	r3, r1, #12
 8002190:	0b1b      	lsrs	r3, r3, #12
 8002192:	469b      	mov	fp, r3
 8002194:	004d      	lsls	r5, r1, #1
 8002196:	0fcb      	lsrs	r3, r1, #31
 8002198:	0004      	movs	r4, r0
 800219a:	4691      	mov	r9, r2
 800219c:	4698      	mov	r8, r3
 800219e:	b087      	sub	sp, #28
 80021a0:	0d6d      	lsrs	r5, r5, #21
 80021a2:	d100      	bne.n	80021a6 <__aeabi_dmul+0x26>
 80021a4:	e1cd      	b.n	8002542 <__aeabi_dmul+0x3c2>
 80021a6:	4bce      	ldr	r3, [pc, #824]	; (80024e0 <__aeabi_dmul+0x360>)
 80021a8:	429d      	cmp	r5, r3
 80021aa:	d100      	bne.n	80021ae <__aeabi_dmul+0x2e>
 80021ac:	e1e9      	b.n	8002582 <__aeabi_dmul+0x402>
 80021ae:	465a      	mov	r2, fp
 80021b0:	0f43      	lsrs	r3, r0, #29
 80021b2:	00d2      	lsls	r2, r2, #3
 80021b4:	4313      	orrs	r3, r2
 80021b6:	2280      	movs	r2, #128	; 0x80
 80021b8:	0412      	lsls	r2, r2, #16
 80021ba:	431a      	orrs	r2, r3
 80021bc:	00c3      	lsls	r3, r0, #3
 80021be:	469a      	mov	sl, r3
 80021c0:	4bc8      	ldr	r3, [pc, #800]	; (80024e4 <__aeabi_dmul+0x364>)
 80021c2:	4693      	mov	fp, r2
 80021c4:	469c      	mov	ip, r3
 80021c6:	2300      	movs	r3, #0
 80021c8:	2600      	movs	r6, #0
 80021ca:	4465      	add	r5, ip
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	033c      	lsls	r4, r7, #12
 80021d0:	007b      	lsls	r3, r7, #1
 80021d2:	4648      	mov	r0, r9
 80021d4:	0b24      	lsrs	r4, r4, #12
 80021d6:	0d5b      	lsrs	r3, r3, #21
 80021d8:	0fff      	lsrs	r7, r7, #31
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d100      	bne.n	80021e0 <__aeabi_dmul+0x60>
 80021de:	e189      	b.n	80024f4 <__aeabi_dmul+0x374>
 80021e0:	4abf      	ldr	r2, [pc, #764]	; (80024e0 <__aeabi_dmul+0x360>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d019      	beq.n	800221a <__aeabi_dmul+0x9a>
 80021e6:	0f42      	lsrs	r2, r0, #29
 80021e8:	00e4      	lsls	r4, r4, #3
 80021ea:	4322      	orrs	r2, r4
 80021ec:	2480      	movs	r4, #128	; 0x80
 80021ee:	0424      	lsls	r4, r4, #16
 80021f0:	4314      	orrs	r4, r2
 80021f2:	4abc      	ldr	r2, [pc, #752]	; (80024e4 <__aeabi_dmul+0x364>)
 80021f4:	2100      	movs	r1, #0
 80021f6:	4694      	mov	ip, r2
 80021f8:	4642      	mov	r2, r8
 80021fa:	4463      	add	r3, ip
 80021fc:	195b      	adds	r3, r3, r5
 80021fe:	9301      	str	r3, [sp, #4]
 8002200:	9b01      	ldr	r3, [sp, #4]
 8002202:	407a      	eors	r2, r7
 8002204:	3301      	adds	r3, #1
 8002206:	00c0      	lsls	r0, r0, #3
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	9302      	str	r3, [sp, #8]
 800220c:	2e0a      	cmp	r6, #10
 800220e:	dd1c      	ble.n	800224a <__aeabi_dmul+0xca>
 8002210:	003a      	movs	r2, r7
 8002212:	2e0b      	cmp	r6, #11
 8002214:	d05e      	beq.n	80022d4 <__aeabi_dmul+0x154>
 8002216:	4647      	mov	r7, r8
 8002218:	e056      	b.n	80022c8 <__aeabi_dmul+0x148>
 800221a:	4649      	mov	r1, r9
 800221c:	4bb0      	ldr	r3, [pc, #704]	; (80024e0 <__aeabi_dmul+0x360>)
 800221e:	4321      	orrs	r1, r4
 8002220:	18eb      	adds	r3, r5, r3
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	2900      	cmp	r1, #0
 8002226:	d12a      	bne.n	800227e <__aeabi_dmul+0xfe>
 8002228:	2080      	movs	r0, #128	; 0x80
 800222a:	2202      	movs	r2, #2
 800222c:	0100      	lsls	r0, r0, #4
 800222e:	002b      	movs	r3, r5
 8002230:	4684      	mov	ip, r0
 8002232:	4316      	orrs	r6, r2
 8002234:	4642      	mov	r2, r8
 8002236:	4463      	add	r3, ip
 8002238:	407a      	eors	r2, r7
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	9302      	str	r3, [sp, #8]
 800223e:	2e0a      	cmp	r6, #10
 8002240:	dd00      	ble.n	8002244 <__aeabi_dmul+0xc4>
 8002242:	e231      	b.n	80026a8 <__aeabi_dmul+0x528>
 8002244:	2000      	movs	r0, #0
 8002246:	2400      	movs	r4, #0
 8002248:	2102      	movs	r1, #2
 800224a:	2e02      	cmp	r6, #2
 800224c:	dc26      	bgt.n	800229c <__aeabi_dmul+0x11c>
 800224e:	3e01      	subs	r6, #1
 8002250:	2e01      	cmp	r6, #1
 8002252:	d852      	bhi.n	80022fa <__aeabi_dmul+0x17a>
 8002254:	2902      	cmp	r1, #2
 8002256:	d04c      	beq.n	80022f2 <__aeabi_dmul+0x172>
 8002258:	2901      	cmp	r1, #1
 800225a:	d000      	beq.n	800225e <__aeabi_dmul+0xde>
 800225c:	e118      	b.n	8002490 <__aeabi_dmul+0x310>
 800225e:	2300      	movs	r3, #0
 8002260:	2400      	movs	r4, #0
 8002262:	2500      	movs	r5, #0
 8002264:	051b      	lsls	r3, r3, #20
 8002266:	4323      	orrs	r3, r4
 8002268:	07d2      	lsls	r2, r2, #31
 800226a:	4313      	orrs	r3, r2
 800226c:	0028      	movs	r0, r5
 800226e:	0019      	movs	r1, r3
 8002270:	b007      	add	sp, #28
 8002272:	bcf0      	pop	{r4, r5, r6, r7}
 8002274:	46bb      	mov	fp, r7
 8002276:	46b2      	mov	sl, r6
 8002278:	46a9      	mov	r9, r5
 800227a:	46a0      	mov	r8, r4
 800227c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800227e:	2180      	movs	r1, #128	; 0x80
 8002280:	2203      	movs	r2, #3
 8002282:	0109      	lsls	r1, r1, #4
 8002284:	002b      	movs	r3, r5
 8002286:	468c      	mov	ip, r1
 8002288:	4316      	orrs	r6, r2
 800228a:	4642      	mov	r2, r8
 800228c:	4463      	add	r3, ip
 800228e:	407a      	eors	r2, r7
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	9302      	str	r3, [sp, #8]
 8002294:	2e0a      	cmp	r6, #10
 8002296:	dd00      	ble.n	800229a <__aeabi_dmul+0x11a>
 8002298:	e228      	b.n	80026ec <__aeabi_dmul+0x56c>
 800229a:	2103      	movs	r1, #3
 800229c:	2501      	movs	r5, #1
 800229e:	40b5      	lsls	r5, r6
 80022a0:	46ac      	mov	ip, r5
 80022a2:	26a6      	movs	r6, #166	; 0xa6
 80022a4:	4663      	mov	r3, ip
 80022a6:	00f6      	lsls	r6, r6, #3
 80022a8:	4035      	ands	r5, r6
 80022aa:	4233      	tst	r3, r6
 80022ac:	d10b      	bne.n	80022c6 <__aeabi_dmul+0x146>
 80022ae:	2690      	movs	r6, #144	; 0x90
 80022b0:	00b6      	lsls	r6, r6, #2
 80022b2:	4233      	tst	r3, r6
 80022b4:	d118      	bne.n	80022e8 <__aeabi_dmul+0x168>
 80022b6:	3eb9      	subs	r6, #185	; 0xb9
 80022b8:	3eff      	subs	r6, #255	; 0xff
 80022ba:	421e      	tst	r6, r3
 80022bc:	d01d      	beq.n	80022fa <__aeabi_dmul+0x17a>
 80022be:	46a3      	mov	fp, r4
 80022c0:	4682      	mov	sl, r0
 80022c2:	9100      	str	r1, [sp, #0]
 80022c4:	e000      	b.n	80022c8 <__aeabi_dmul+0x148>
 80022c6:	0017      	movs	r7, r2
 80022c8:	9900      	ldr	r1, [sp, #0]
 80022ca:	003a      	movs	r2, r7
 80022cc:	2902      	cmp	r1, #2
 80022ce:	d010      	beq.n	80022f2 <__aeabi_dmul+0x172>
 80022d0:	465c      	mov	r4, fp
 80022d2:	4650      	mov	r0, sl
 80022d4:	2903      	cmp	r1, #3
 80022d6:	d1bf      	bne.n	8002258 <__aeabi_dmul+0xd8>
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	031b      	lsls	r3, r3, #12
 80022dc:	431c      	orrs	r4, r3
 80022de:	0324      	lsls	r4, r4, #12
 80022e0:	0005      	movs	r5, r0
 80022e2:	4b7f      	ldr	r3, [pc, #508]	; (80024e0 <__aeabi_dmul+0x360>)
 80022e4:	0b24      	lsrs	r4, r4, #12
 80022e6:	e7bd      	b.n	8002264 <__aeabi_dmul+0xe4>
 80022e8:	2480      	movs	r4, #128	; 0x80
 80022ea:	2200      	movs	r2, #0
 80022ec:	4b7c      	ldr	r3, [pc, #496]	; (80024e0 <__aeabi_dmul+0x360>)
 80022ee:	0324      	lsls	r4, r4, #12
 80022f0:	e7b8      	b.n	8002264 <__aeabi_dmul+0xe4>
 80022f2:	2400      	movs	r4, #0
 80022f4:	2500      	movs	r5, #0
 80022f6:	4b7a      	ldr	r3, [pc, #488]	; (80024e0 <__aeabi_dmul+0x360>)
 80022f8:	e7b4      	b.n	8002264 <__aeabi_dmul+0xe4>
 80022fa:	4653      	mov	r3, sl
 80022fc:	041e      	lsls	r6, r3, #16
 80022fe:	0c36      	lsrs	r6, r6, #16
 8002300:	0c1f      	lsrs	r7, r3, #16
 8002302:	0033      	movs	r3, r6
 8002304:	0c01      	lsrs	r1, r0, #16
 8002306:	0400      	lsls	r0, r0, #16
 8002308:	0c00      	lsrs	r0, r0, #16
 800230a:	4343      	muls	r3, r0
 800230c:	4698      	mov	r8, r3
 800230e:	0003      	movs	r3, r0
 8002310:	437b      	muls	r3, r7
 8002312:	4699      	mov	r9, r3
 8002314:	0033      	movs	r3, r6
 8002316:	434b      	muls	r3, r1
 8002318:	469c      	mov	ip, r3
 800231a:	4643      	mov	r3, r8
 800231c:	000d      	movs	r5, r1
 800231e:	0c1b      	lsrs	r3, r3, #16
 8002320:	469a      	mov	sl, r3
 8002322:	437d      	muls	r5, r7
 8002324:	44cc      	add	ip, r9
 8002326:	44d4      	add	ip, sl
 8002328:	9500      	str	r5, [sp, #0]
 800232a:	45e1      	cmp	r9, ip
 800232c:	d904      	bls.n	8002338 <__aeabi_dmul+0x1b8>
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	025b      	lsls	r3, r3, #9
 8002332:	4699      	mov	r9, r3
 8002334:	444d      	add	r5, r9
 8002336:	9500      	str	r5, [sp, #0]
 8002338:	4663      	mov	r3, ip
 800233a:	0c1b      	lsrs	r3, r3, #16
 800233c:	001d      	movs	r5, r3
 800233e:	4663      	mov	r3, ip
 8002340:	041b      	lsls	r3, r3, #16
 8002342:	469c      	mov	ip, r3
 8002344:	4643      	mov	r3, r8
 8002346:	041b      	lsls	r3, r3, #16
 8002348:	0c1b      	lsrs	r3, r3, #16
 800234a:	4698      	mov	r8, r3
 800234c:	4663      	mov	r3, ip
 800234e:	4443      	add	r3, r8
 8002350:	9303      	str	r3, [sp, #12]
 8002352:	0c23      	lsrs	r3, r4, #16
 8002354:	4698      	mov	r8, r3
 8002356:	0033      	movs	r3, r6
 8002358:	0424      	lsls	r4, r4, #16
 800235a:	0c24      	lsrs	r4, r4, #16
 800235c:	4363      	muls	r3, r4
 800235e:	469c      	mov	ip, r3
 8002360:	0023      	movs	r3, r4
 8002362:	437b      	muls	r3, r7
 8002364:	4699      	mov	r9, r3
 8002366:	4643      	mov	r3, r8
 8002368:	435e      	muls	r6, r3
 800236a:	435f      	muls	r7, r3
 800236c:	444e      	add	r6, r9
 800236e:	4663      	mov	r3, ip
 8002370:	46b2      	mov	sl, r6
 8002372:	0c1e      	lsrs	r6, r3, #16
 8002374:	4456      	add	r6, sl
 8002376:	45b1      	cmp	r9, r6
 8002378:	d903      	bls.n	8002382 <__aeabi_dmul+0x202>
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	025b      	lsls	r3, r3, #9
 800237e:	4699      	mov	r9, r3
 8002380:	444f      	add	r7, r9
 8002382:	0c33      	lsrs	r3, r6, #16
 8002384:	4699      	mov	r9, r3
 8002386:	003b      	movs	r3, r7
 8002388:	444b      	add	r3, r9
 800238a:	9305      	str	r3, [sp, #20]
 800238c:	4663      	mov	r3, ip
 800238e:	46ac      	mov	ip, r5
 8002390:	041f      	lsls	r7, r3, #16
 8002392:	0c3f      	lsrs	r7, r7, #16
 8002394:	0436      	lsls	r6, r6, #16
 8002396:	19f6      	adds	r6, r6, r7
 8002398:	44b4      	add	ip, r6
 800239a:	4663      	mov	r3, ip
 800239c:	9304      	str	r3, [sp, #16]
 800239e:	465b      	mov	r3, fp
 80023a0:	0c1b      	lsrs	r3, r3, #16
 80023a2:	469c      	mov	ip, r3
 80023a4:	465b      	mov	r3, fp
 80023a6:	041f      	lsls	r7, r3, #16
 80023a8:	0c3f      	lsrs	r7, r7, #16
 80023aa:	003b      	movs	r3, r7
 80023ac:	4343      	muls	r3, r0
 80023ae:	4699      	mov	r9, r3
 80023b0:	4663      	mov	r3, ip
 80023b2:	4343      	muls	r3, r0
 80023b4:	469a      	mov	sl, r3
 80023b6:	464b      	mov	r3, r9
 80023b8:	4660      	mov	r0, ip
 80023ba:	0c1b      	lsrs	r3, r3, #16
 80023bc:	469b      	mov	fp, r3
 80023be:	4348      	muls	r0, r1
 80023c0:	4379      	muls	r1, r7
 80023c2:	4451      	add	r1, sl
 80023c4:	4459      	add	r1, fp
 80023c6:	458a      	cmp	sl, r1
 80023c8:	d903      	bls.n	80023d2 <__aeabi_dmul+0x252>
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	025b      	lsls	r3, r3, #9
 80023ce:	469a      	mov	sl, r3
 80023d0:	4450      	add	r0, sl
 80023d2:	0c0b      	lsrs	r3, r1, #16
 80023d4:	469a      	mov	sl, r3
 80023d6:	464b      	mov	r3, r9
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	0c1b      	lsrs	r3, r3, #16
 80023dc:	4699      	mov	r9, r3
 80023de:	003b      	movs	r3, r7
 80023e0:	4363      	muls	r3, r4
 80023e2:	0409      	lsls	r1, r1, #16
 80023e4:	4645      	mov	r5, r8
 80023e6:	4449      	add	r1, r9
 80023e8:	4699      	mov	r9, r3
 80023ea:	4663      	mov	r3, ip
 80023ec:	435c      	muls	r4, r3
 80023ee:	436b      	muls	r3, r5
 80023f0:	469c      	mov	ip, r3
 80023f2:	464b      	mov	r3, r9
 80023f4:	0c1b      	lsrs	r3, r3, #16
 80023f6:	4698      	mov	r8, r3
 80023f8:	436f      	muls	r7, r5
 80023fa:	193f      	adds	r7, r7, r4
 80023fc:	4447      	add	r7, r8
 80023fe:	4450      	add	r0, sl
 8002400:	42bc      	cmp	r4, r7
 8002402:	d903      	bls.n	800240c <__aeabi_dmul+0x28c>
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	025b      	lsls	r3, r3, #9
 8002408:	4698      	mov	r8, r3
 800240a:	44c4      	add	ip, r8
 800240c:	9b04      	ldr	r3, [sp, #16]
 800240e:	9d00      	ldr	r5, [sp, #0]
 8002410:	4698      	mov	r8, r3
 8002412:	4445      	add	r5, r8
 8002414:	42b5      	cmp	r5, r6
 8002416:	41b6      	sbcs	r6, r6
 8002418:	4273      	negs	r3, r6
 800241a:	4698      	mov	r8, r3
 800241c:	464b      	mov	r3, r9
 800241e:	041e      	lsls	r6, r3, #16
 8002420:	9b05      	ldr	r3, [sp, #20]
 8002422:	043c      	lsls	r4, r7, #16
 8002424:	4699      	mov	r9, r3
 8002426:	0c36      	lsrs	r6, r6, #16
 8002428:	19a4      	adds	r4, r4, r6
 800242a:	444c      	add	r4, r9
 800242c:	46a1      	mov	r9, r4
 800242e:	4683      	mov	fp, r0
 8002430:	186e      	adds	r6, r5, r1
 8002432:	44c1      	add	r9, r8
 8002434:	428e      	cmp	r6, r1
 8002436:	4189      	sbcs	r1, r1
 8002438:	44cb      	add	fp, r9
 800243a:	465d      	mov	r5, fp
 800243c:	4249      	negs	r1, r1
 800243e:	186d      	adds	r5, r5, r1
 8002440:	429c      	cmp	r4, r3
 8002442:	41a4      	sbcs	r4, r4
 8002444:	45c1      	cmp	r9, r8
 8002446:	419b      	sbcs	r3, r3
 8002448:	4583      	cmp	fp, r0
 800244a:	4180      	sbcs	r0, r0
 800244c:	428d      	cmp	r5, r1
 800244e:	4189      	sbcs	r1, r1
 8002450:	425b      	negs	r3, r3
 8002452:	4264      	negs	r4, r4
 8002454:	431c      	orrs	r4, r3
 8002456:	4240      	negs	r0, r0
 8002458:	9b03      	ldr	r3, [sp, #12]
 800245a:	4249      	negs	r1, r1
 800245c:	4301      	orrs	r1, r0
 800245e:	0270      	lsls	r0, r6, #9
 8002460:	0c3f      	lsrs	r7, r7, #16
 8002462:	4318      	orrs	r0, r3
 8002464:	19e4      	adds	r4, r4, r7
 8002466:	1e47      	subs	r7, r0, #1
 8002468:	41b8      	sbcs	r0, r7
 800246a:	1864      	adds	r4, r4, r1
 800246c:	4464      	add	r4, ip
 800246e:	0df6      	lsrs	r6, r6, #23
 8002470:	0261      	lsls	r1, r4, #9
 8002472:	4330      	orrs	r0, r6
 8002474:	0dec      	lsrs	r4, r5, #23
 8002476:	026e      	lsls	r6, r5, #9
 8002478:	430c      	orrs	r4, r1
 800247a:	4330      	orrs	r0, r6
 800247c:	01c9      	lsls	r1, r1, #7
 800247e:	d400      	bmi.n	8002482 <__aeabi_dmul+0x302>
 8002480:	e0f1      	b.n	8002666 <__aeabi_dmul+0x4e6>
 8002482:	2101      	movs	r1, #1
 8002484:	0843      	lsrs	r3, r0, #1
 8002486:	4001      	ands	r1, r0
 8002488:	430b      	orrs	r3, r1
 800248a:	07e0      	lsls	r0, r4, #31
 800248c:	4318      	orrs	r0, r3
 800248e:	0864      	lsrs	r4, r4, #1
 8002490:	4915      	ldr	r1, [pc, #84]	; (80024e8 <__aeabi_dmul+0x368>)
 8002492:	9b02      	ldr	r3, [sp, #8]
 8002494:	468c      	mov	ip, r1
 8002496:	4463      	add	r3, ip
 8002498:	2b00      	cmp	r3, #0
 800249a:	dc00      	bgt.n	800249e <__aeabi_dmul+0x31e>
 800249c:	e097      	b.n	80025ce <__aeabi_dmul+0x44e>
 800249e:	0741      	lsls	r1, r0, #29
 80024a0:	d009      	beq.n	80024b6 <__aeabi_dmul+0x336>
 80024a2:	210f      	movs	r1, #15
 80024a4:	4001      	ands	r1, r0
 80024a6:	2904      	cmp	r1, #4
 80024a8:	d005      	beq.n	80024b6 <__aeabi_dmul+0x336>
 80024aa:	1d01      	adds	r1, r0, #4
 80024ac:	4281      	cmp	r1, r0
 80024ae:	4180      	sbcs	r0, r0
 80024b0:	4240      	negs	r0, r0
 80024b2:	1824      	adds	r4, r4, r0
 80024b4:	0008      	movs	r0, r1
 80024b6:	01e1      	lsls	r1, r4, #7
 80024b8:	d506      	bpl.n	80024c8 <__aeabi_dmul+0x348>
 80024ba:	2180      	movs	r1, #128	; 0x80
 80024bc:	00c9      	lsls	r1, r1, #3
 80024be:	468c      	mov	ip, r1
 80024c0:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <__aeabi_dmul+0x36c>)
 80024c2:	401c      	ands	r4, r3
 80024c4:	9b02      	ldr	r3, [sp, #8]
 80024c6:	4463      	add	r3, ip
 80024c8:	4909      	ldr	r1, [pc, #36]	; (80024f0 <__aeabi_dmul+0x370>)
 80024ca:	428b      	cmp	r3, r1
 80024cc:	dd00      	ble.n	80024d0 <__aeabi_dmul+0x350>
 80024ce:	e710      	b.n	80022f2 <__aeabi_dmul+0x172>
 80024d0:	0761      	lsls	r1, r4, #29
 80024d2:	08c5      	lsrs	r5, r0, #3
 80024d4:	0264      	lsls	r4, r4, #9
 80024d6:	055b      	lsls	r3, r3, #21
 80024d8:	430d      	orrs	r5, r1
 80024da:	0b24      	lsrs	r4, r4, #12
 80024dc:	0d5b      	lsrs	r3, r3, #21
 80024de:	e6c1      	b.n	8002264 <__aeabi_dmul+0xe4>
 80024e0:	000007ff 	.word	0x000007ff
 80024e4:	fffffc01 	.word	0xfffffc01
 80024e8:	000003ff 	.word	0x000003ff
 80024ec:	feffffff 	.word	0xfeffffff
 80024f0:	000007fe 	.word	0x000007fe
 80024f4:	464b      	mov	r3, r9
 80024f6:	4323      	orrs	r3, r4
 80024f8:	d059      	beq.n	80025ae <__aeabi_dmul+0x42e>
 80024fa:	2c00      	cmp	r4, #0
 80024fc:	d100      	bne.n	8002500 <__aeabi_dmul+0x380>
 80024fe:	e0a3      	b.n	8002648 <__aeabi_dmul+0x4c8>
 8002500:	0020      	movs	r0, r4
 8002502:	f000 fdf9 	bl	80030f8 <__clzsi2>
 8002506:	0001      	movs	r1, r0
 8002508:	0003      	movs	r3, r0
 800250a:	390b      	subs	r1, #11
 800250c:	221d      	movs	r2, #29
 800250e:	1a52      	subs	r2, r2, r1
 8002510:	4649      	mov	r1, r9
 8002512:	0018      	movs	r0, r3
 8002514:	40d1      	lsrs	r1, r2
 8002516:	464a      	mov	r2, r9
 8002518:	3808      	subs	r0, #8
 800251a:	4082      	lsls	r2, r0
 800251c:	4084      	lsls	r4, r0
 800251e:	0010      	movs	r0, r2
 8002520:	430c      	orrs	r4, r1
 8002522:	4a74      	ldr	r2, [pc, #464]	; (80026f4 <__aeabi_dmul+0x574>)
 8002524:	1aeb      	subs	r3, r5, r3
 8002526:	4694      	mov	ip, r2
 8002528:	4642      	mov	r2, r8
 800252a:	4463      	add	r3, ip
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	9b01      	ldr	r3, [sp, #4]
 8002530:	407a      	eors	r2, r7
 8002532:	3301      	adds	r3, #1
 8002534:	2100      	movs	r1, #0
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	9302      	str	r3, [sp, #8]
 800253a:	2e0a      	cmp	r6, #10
 800253c:	dd00      	ble.n	8002540 <__aeabi_dmul+0x3c0>
 800253e:	e667      	b.n	8002210 <__aeabi_dmul+0x90>
 8002540:	e683      	b.n	800224a <__aeabi_dmul+0xca>
 8002542:	465b      	mov	r3, fp
 8002544:	4303      	orrs	r3, r0
 8002546:	469a      	mov	sl, r3
 8002548:	d02a      	beq.n	80025a0 <__aeabi_dmul+0x420>
 800254a:	465b      	mov	r3, fp
 800254c:	2b00      	cmp	r3, #0
 800254e:	d06d      	beq.n	800262c <__aeabi_dmul+0x4ac>
 8002550:	4658      	mov	r0, fp
 8002552:	f000 fdd1 	bl	80030f8 <__clzsi2>
 8002556:	0001      	movs	r1, r0
 8002558:	0003      	movs	r3, r0
 800255a:	390b      	subs	r1, #11
 800255c:	221d      	movs	r2, #29
 800255e:	1a52      	subs	r2, r2, r1
 8002560:	0021      	movs	r1, r4
 8002562:	0018      	movs	r0, r3
 8002564:	465d      	mov	r5, fp
 8002566:	40d1      	lsrs	r1, r2
 8002568:	3808      	subs	r0, #8
 800256a:	4085      	lsls	r5, r0
 800256c:	000a      	movs	r2, r1
 800256e:	4084      	lsls	r4, r0
 8002570:	432a      	orrs	r2, r5
 8002572:	4693      	mov	fp, r2
 8002574:	46a2      	mov	sl, r4
 8002576:	4d5f      	ldr	r5, [pc, #380]	; (80026f4 <__aeabi_dmul+0x574>)
 8002578:	2600      	movs	r6, #0
 800257a:	1aed      	subs	r5, r5, r3
 800257c:	2300      	movs	r3, #0
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	e625      	b.n	80021ce <__aeabi_dmul+0x4e>
 8002582:	465b      	mov	r3, fp
 8002584:	4303      	orrs	r3, r0
 8002586:	469a      	mov	sl, r3
 8002588:	d105      	bne.n	8002596 <__aeabi_dmul+0x416>
 800258a:	2300      	movs	r3, #0
 800258c:	469b      	mov	fp, r3
 800258e:	3302      	adds	r3, #2
 8002590:	2608      	movs	r6, #8
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	e61b      	b.n	80021ce <__aeabi_dmul+0x4e>
 8002596:	2303      	movs	r3, #3
 8002598:	4682      	mov	sl, r0
 800259a:	260c      	movs	r6, #12
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	e616      	b.n	80021ce <__aeabi_dmul+0x4e>
 80025a0:	2300      	movs	r3, #0
 80025a2:	469b      	mov	fp, r3
 80025a4:	3301      	adds	r3, #1
 80025a6:	2604      	movs	r6, #4
 80025a8:	2500      	movs	r5, #0
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	e60f      	b.n	80021ce <__aeabi_dmul+0x4e>
 80025ae:	4642      	mov	r2, r8
 80025b0:	3301      	adds	r3, #1
 80025b2:	9501      	str	r5, [sp, #4]
 80025b4:	431e      	orrs	r6, r3
 80025b6:	9b01      	ldr	r3, [sp, #4]
 80025b8:	407a      	eors	r2, r7
 80025ba:	3301      	adds	r3, #1
 80025bc:	2400      	movs	r4, #0
 80025be:	2000      	movs	r0, #0
 80025c0:	2101      	movs	r1, #1
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	9302      	str	r3, [sp, #8]
 80025c6:	2e0a      	cmp	r6, #10
 80025c8:	dd00      	ble.n	80025cc <__aeabi_dmul+0x44c>
 80025ca:	e621      	b.n	8002210 <__aeabi_dmul+0x90>
 80025cc:	e63d      	b.n	800224a <__aeabi_dmul+0xca>
 80025ce:	2101      	movs	r1, #1
 80025d0:	1ac9      	subs	r1, r1, r3
 80025d2:	2938      	cmp	r1, #56	; 0x38
 80025d4:	dd00      	ble.n	80025d8 <__aeabi_dmul+0x458>
 80025d6:	e642      	b.n	800225e <__aeabi_dmul+0xde>
 80025d8:	291f      	cmp	r1, #31
 80025da:	dd47      	ble.n	800266c <__aeabi_dmul+0x4ec>
 80025dc:	261f      	movs	r6, #31
 80025de:	0025      	movs	r5, r4
 80025e0:	4276      	negs	r6, r6
 80025e2:	1af3      	subs	r3, r6, r3
 80025e4:	40dd      	lsrs	r5, r3
 80025e6:	002b      	movs	r3, r5
 80025e8:	2920      	cmp	r1, #32
 80025ea:	d005      	beq.n	80025f8 <__aeabi_dmul+0x478>
 80025ec:	4942      	ldr	r1, [pc, #264]	; (80026f8 <__aeabi_dmul+0x578>)
 80025ee:	9d02      	ldr	r5, [sp, #8]
 80025f0:	468c      	mov	ip, r1
 80025f2:	4465      	add	r5, ip
 80025f4:	40ac      	lsls	r4, r5
 80025f6:	4320      	orrs	r0, r4
 80025f8:	1e41      	subs	r1, r0, #1
 80025fa:	4188      	sbcs	r0, r1
 80025fc:	4318      	orrs	r0, r3
 80025fe:	2307      	movs	r3, #7
 8002600:	001d      	movs	r5, r3
 8002602:	2400      	movs	r4, #0
 8002604:	4005      	ands	r5, r0
 8002606:	4203      	tst	r3, r0
 8002608:	d04a      	beq.n	80026a0 <__aeabi_dmul+0x520>
 800260a:	230f      	movs	r3, #15
 800260c:	2400      	movs	r4, #0
 800260e:	4003      	ands	r3, r0
 8002610:	2b04      	cmp	r3, #4
 8002612:	d042      	beq.n	800269a <__aeabi_dmul+0x51a>
 8002614:	1d03      	adds	r3, r0, #4
 8002616:	4283      	cmp	r3, r0
 8002618:	4180      	sbcs	r0, r0
 800261a:	4240      	negs	r0, r0
 800261c:	1824      	adds	r4, r4, r0
 800261e:	0018      	movs	r0, r3
 8002620:	0223      	lsls	r3, r4, #8
 8002622:	d53a      	bpl.n	800269a <__aeabi_dmul+0x51a>
 8002624:	2301      	movs	r3, #1
 8002626:	2400      	movs	r4, #0
 8002628:	2500      	movs	r5, #0
 800262a:	e61b      	b.n	8002264 <__aeabi_dmul+0xe4>
 800262c:	f000 fd64 	bl	80030f8 <__clzsi2>
 8002630:	0001      	movs	r1, r0
 8002632:	0003      	movs	r3, r0
 8002634:	3115      	adds	r1, #21
 8002636:	3320      	adds	r3, #32
 8002638:	291c      	cmp	r1, #28
 800263a:	dd8f      	ble.n	800255c <__aeabi_dmul+0x3dc>
 800263c:	3808      	subs	r0, #8
 800263e:	2200      	movs	r2, #0
 8002640:	4084      	lsls	r4, r0
 8002642:	4692      	mov	sl, r2
 8002644:	46a3      	mov	fp, r4
 8002646:	e796      	b.n	8002576 <__aeabi_dmul+0x3f6>
 8002648:	f000 fd56 	bl	80030f8 <__clzsi2>
 800264c:	0001      	movs	r1, r0
 800264e:	0003      	movs	r3, r0
 8002650:	3115      	adds	r1, #21
 8002652:	3320      	adds	r3, #32
 8002654:	291c      	cmp	r1, #28
 8002656:	dc00      	bgt.n	800265a <__aeabi_dmul+0x4da>
 8002658:	e758      	b.n	800250c <__aeabi_dmul+0x38c>
 800265a:	0002      	movs	r2, r0
 800265c:	464c      	mov	r4, r9
 800265e:	3a08      	subs	r2, #8
 8002660:	2000      	movs	r0, #0
 8002662:	4094      	lsls	r4, r2
 8002664:	e75d      	b.n	8002522 <__aeabi_dmul+0x3a2>
 8002666:	9b01      	ldr	r3, [sp, #4]
 8002668:	9302      	str	r3, [sp, #8]
 800266a:	e711      	b.n	8002490 <__aeabi_dmul+0x310>
 800266c:	4b23      	ldr	r3, [pc, #140]	; (80026fc <__aeabi_dmul+0x57c>)
 800266e:	0026      	movs	r6, r4
 8002670:	469c      	mov	ip, r3
 8002672:	0003      	movs	r3, r0
 8002674:	9d02      	ldr	r5, [sp, #8]
 8002676:	40cb      	lsrs	r3, r1
 8002678:	4465      	add	r5, ip
 800267a:	40ae      	lsls	r6, r5
 800267c:	431e      	orrs	r6, r3
 800267e:	0003      	movs	r3, r0
 8002680:	40ab      	lsls	r3, r5
 8002682:	1e58      	subs	r0, r3, #1
 8002684:	4183      	sbcs	r3, r0
 8002686:	0030      	movs	r0, r6
 8002688:	4318      	orrs	r0, r3
 800268a:	40cc      	lsrs	r4, r1
 800268c:	0743      	lsls	r3, r0, #29
 800268e:	d0c7      	beq.n	8002620 <__aeabi_dmul+0x4a0>
 8002690:	230f      	movs	r3, #15
 8002692:	4003      	ands	r3, r0
 8002694:	2b04      	cmp	r3, #4
 8002696:	d1bd      	bne.n	8002614 <__aeabi_dmul+0x494>
 8002698:	e7c2      	b.n	8002620 <__aeabi_dmul+0x4a0>
 800269a:	0765      	lsls	r5, r4, #29
 800269c:	0264      	lsls	r4, r4, #9
 800269e:	0b24      	lsrs	r4, r4, #12
 80026a0:	08c0      	lsrs	r0, r0, #3
 80026a2:	2300      	movs	r3, #0
 80026a4:	4305      	orrs	r5, r0
 80026a6:	e5dd      	b.n	8002264 <__aeabi_dmul+0xe4>
 80026a8:	2500      	movs	r5, #0
 80026aa:	2302      	movs	r3, #2
 80026ac:	2e0f      	cmp	r6, #15
 80026ae:	d10c      	bne.n	80026ca <__aeabi_dmul+0x54a>
 80026b0:	2480      	movs	r4, #128	; 0x80
 80026b2:	465b      	mov	r3, fp
 80026b4:	0324      	lsls	r4, r4, #12
 80026b6:	4223      	tst	r3, r4
 80026b8:	d00e      	beq.n	80026d8 <__aeabi_dmul+0x558>
 80026ba:	4221      	tst	r1, r4
 80026bc:	d10c      	bne.n	80026d8 <__aeabi_dmul+0x558>
 80026be:	430c      	orrs	r4, r1
 80026c0:	0324      	lsls	r4, r4, #12
 80026c2:	003a      	movs	r2, r7
 80026c4:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <__aeabi_dmul+0x580>)
 80026c6:	0b24      	lsrs	r4, r4, #12
 80026c8:	e5cc      	b.n	8002264 <__aeabi_dmul+0xe4>
 80026ca:	2e0b      	cmp	r6, #11
 80026cc:	d000      	beq.n	80026d0 <__aeabi_dmul+0x550>
 80026ce:	e5a2      	b.n	8002216 <__aeabi_dmul+0x96>
 80026d0:	468b      	mov	fp, r1
 80026d2:	46aa      	mov	sl, r5
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	e5f7      	b.n	80022c8 <__aeabi_dmul+0x148>
 80026d8:	2480      	movs	r4, #128	; 0x80
 80026da:	465b      	mov	r3, fp
 80026dc:	0324      	lsls	r4, r4, #12
 80026de:	431c      	orrs	r4, r3
 80026e0:	0324      	lsls	r4, r4, #12
 80026e2:	4642      	mov	r2, r8
 80026e4:	4655      	mov	r5, sl
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <__aeabi_dmul+0x580>)
 80026e8:	0b24      	lsrs	r4, r4, #12
 80026ea:	e5bb      	b.n	8002264 <__aeabi_dmul+0xe4>
 80026ec:	464d      	mov	r5, r9
 80026ee:	0021      	movs	r1, r4
 80026f0:	2303      	movs	r3, #3
 80026f2:	e7db      	b.n	80026ac <__aeabi_dmul+0x52c>
 80026f4:	fffffc0d 	.word	0xfffffc0d
 80026f8:	0000043e 	.word	0x0000043e
 80026fc:	0000041e 	.word	0x0000041e
 8002700:	000007ff 	.word	0x000007ff

08002704 <__aeabi_dsub>:
 8002704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002706:	4657      	mov	r7, sl
 8002708:	464e      	mov	r6, r9
 800270a:	4645      	mov	r5, r8
 800270c:	46de      	mov	lr, fp
 800270e:	b5e0      	push	{r5, r6, r7, lr}
 8002710:	000d      	movs	r5, r1
 8002712:	0004      	movs	r4, r0
 8002714:	0019      	movs	r1, r3
 8002716:	0010      	movs	r0, r2
 8002718:	032b      	lsls	r3, r5, #12
 800271a:	0a5b      	lsrs	r3, r3, #9
 800271c:	0f62      	lsrs	r2, r4, #29
 800271e:	431a      	orrs	r2, r3
 8002720:	00e3      	lsls	r3, r4, #3
 8002722:	030c      	lsls	r4, r1, #12
 8002724:	0a64      	lsrs	r4, r4, #9
 8002726:	0f47      	lsrs	r7, r0, #29
 8002728:	4327      	orrs	r7, r4
 800272a:	4cd0      	ldr	r4, [pc, #832]	; (8002a6c <__aeabi_dsub+0x368>)
 800272c:	006e      	lsls	r6, r5, #1
 800272e:	4691      	mov	r9, r2
 8002730:	b083      	sub	sp, #12
 8002732:	004a      	lsls	r2, r1, #1
 8002734:	00c0      	lsls	r0, r0, #3
 8002736:	4698      	mov	r8, r3
 8002738:	46a2      	mov	sl, r4
 800273a:	0d76      	lsrs	r6, r6, #21
 800273c:	0fed      	lsrs	r5, r5, #31
 800273e:	0d52      	lsrs	r2, r2, #21
 8002740:	0fc9      	lsrs	r1, r1, #31
 8002742:	9001      	str	r0, [sp, #4]
 8002744:	42a2      	cmp	r2, r4
 8002746:	d100      	bne.n	800274a <__aeabi_dsub+0x46>
 8002748:	e0b9      	b.n	80028be <__aeabi_dsub+0x1ba>
 800274a:	2401      	movs	r4, #1
 800274c:	4061      	eors	r1, r4
 800274e:	468b      	mov	fp, r1
 8002750:	428d      	cmp	r5, r1
 8002752:	d100      	bne.n	8002756 <__aeabi_dsub+0x52>
 8002754:	e08d      	b.n	8002872 <__aeabi_dsub+0x16e>
 8002756:	1ab4      	subs	r4, r6, r2
 8002758:	46a4      	mov	ip, r4
 800275a:	2c00      	cmp	r4, #0
 800275c:	dc00      	bgt.n	8002760 <__aeabi_dsub+0x5c>
 800275e:	e0b7      	b.n	80028d0 <__aeabi_dsub+0x1cc>
 8002760:	2a00      	cmp	r2, #0
 8002762:	d100      	bne.n	8002766 <__aeabi_dsub+0x62>
 8002764:	e0cb      	b.n	80028fe <__aeabi_dsub+0x1fa>
 8002766:	4ac1      	ldr	r2, [pc, #772]	; (8002a6c <__aeabi_dsub+0x368>)
 8002768:	4296      	cmp	r6, r2
 800276a:	d100      	bne.n	800276e <__aeabi_dsub+0x6a>
 800276c:	e186      	b.n	8002a7c <__aeabi_dsub+0x378>
 800276e:	2280      	movs	r2, #128	; 0x80
 8002770:	0412      	lsls	r2, r2, #16
 8002772:	4317      	orrs	r7, r2
 8002774:	4662      	mov	r2, ip
 8002776:	2a38      	cmp	r2, #56	; 0x38
 8002778:	dd00      	ble.n	800277c <__aeabi_dsub+0x78>
 800277a:	e1a4      	b.n	8002ac6 <__aeabi_dsub+0x3c2>
 800277c:	2a1f      	cmp	r2, #31
 800277e:	dd00      	ble.n	8002782 <__aeabi_dsub+0x7e>
 8002780:	e21d      	b.n	8002bbe <__aeabi_dsub+0x4ba>
 8002782:	4661      	mov	r1, ip
 8002784:	2220      	movs	r2, #32
 8002786:	003c      	movs	r4, r7
 8002788:	1a52      	subs	r2, r2, r1
 800278a:	0001      	movs	r1, r0
 800278c:	4090      	lsls	r0, r2
 800278e:	4094      	lsls	r4, r2
 8002790:	1e42      	subs	r2, r0, #1
 8002792:	4190      	sbcs	r0, r2
 8002794:	4662      	mov	r2, ip
 8002796:	46a0      	mov	r8, r4
 8002798:	4664      	mov	r4, ip
 800279a:	40d7      	lsrs	r7, r2
 800279c:	464a      	mov	r2, r9
 800279e:	40e1      	lsrs	r1, r4
 80027a0:	4644      	mov	r4, r8
 80027a2:	1bd2      	subs	r2, r2, r7
 80027a4:	4691      	mov	r9, r2
 80027a6:	430c      	orrs	r4, r1
 80027a8:	4304      	orrs	r4, r0
 80027aa:	1b1c      	subs	r4, r3, r4
 80027ac:	42a3      	cmp	r3, r4
 80027ae:	4192      	sbcs	r2, r2
 80027b0:	464b      	mov	r3, r9
 80027b2:	4252      	negs	r2, r2
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	469a      	mov	sl, r3
 80027b8:	4653      	mov	r3, sl
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	d400      	bmi.n	80027c0 <__aeabi_dsub+0xbc>
 80027be:	e12b      	b.n	8002a18 <__aeabi_dsub+0x314>
 80027c0:	4653      	mov	r3, sl
 80027c2:	025a      	lsls	r2, r3, #9
 80027c4:	0a53      	lsrs	r3, r2, #9
 80027c6:	469a      	mov	sl, r3
 80027c8:	4653      	mov	r3, sl
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dsub+0xcc>
 80027ce:	e166      	b.n	8002a9e <__aeabi_dsub+0x39a>
 80027d0:	4650      	mov	r0, sl
 80027d2:	f000 fc91 	bl	80030f8 <__clzsi2>
 80027d6:	0003      	movs	r3, r0
 80027d8:	3b08      	subs	r3, #8
 80027da:	2220      	movs	r2, #32
 80027dc:	0020      	movs	r0, r4
 80027de:	1ad2      	subs	r2, r2, r3
 80027e0:	4651      	mov	r1, sl
 80027e2:	40d0      	lsrs	r0, r2
 80027e4:	4099      	lsls	r1, r3
 80027e6:	0002      	movs	r2, r0
 80027e8:	409c      	lsls	r4, r3
 80027ea:	430a      	orrs	r2, r1
 80027ec:	429e      	cmp	r6, r3
 80027ee:	dd00      	ble.n	80027f2 <__aeabi_dsub+0xee>
 80027f0:	e164      	b.n	8002abc <__aeabi_dsub+0x3b8>
 80027f2:	1b9b      	subs	r3, r3, r6
 80027f4:	1c59      	adds	r1, r3, #1
 80027f6:	291f      	cmp	r1, #31
 80027f8:	dd00      	ble.n	80027fc <__aeabi_dsub+0xf8>
 80027fa:	e0fe      	b.n	80029fa <__aeabi_dsub+0x2f6>
 80027fc:	2320      	movs	r3, #32
 80027fe:	0010      	movs	r0, r2
 8002800:	0026      	movs	r6, r4
 8002802:	1a5b      	subs	r3, r3, r1
 8002804:	409c      	lsls	r4, r3
 8002806:	4098      	lsls	r0, r3
 8002808:	40ce      	lsrs	r6, r1
 800280a:	40ca      	lsrs	r2, r1
 800280c:	1e63      	subs	r3, r4, #1
 800280e:	419c      	sbcs	r4, r3
 8002810:	4330      	orrs	r0, r6
 8002812:	4692      	mov	sl, r2
 8002814:	2600      	movs	r6, #0
 8002816:	4304      	orrs	r4, r0
 8002818:	0763      	lsls	r3, r4, #29
 800281a:	d009      	beq.n	8002830 <__aeabi_dsub+0x12c>
 800281c:	230f      	movs	r3, #15
 800281e:	4023      	ands	r3, r4
 8002820:	2b04      	cmp	r3, #4
 8002822:	d005      	beq.n	8002830 <__aeabi_dsub+0x12c>
 8002824:	1d23      	adds	r3, r4, #4
 8002826:	42a3      	cmp	r3, r4
 8002828:	41a4      	sbcs	r4, r4
 800282a:	4264      	negs	r4, r4
 800282c:	44a2      	add	sl, r4
 800282e:	001c      	movs	r4, r3
 8002830:	4653      	mov	r3, sl
 8002832:	021b      	lsls	r3, r3, #8
 8002834:	d400      	bmi.n	8002838 <__aeabi_dsub+0x134>
 8002836:	e0f2      	b.n	8002a1e <__aeabi_dsub+0x31a>
 8002838:	4b8c      	ldr	r3, [pc, #560]	; (8002a6c <__aeabi_dsub+0x368>)
 800283a:	3601      	adds	r6, #1
 800283c:	429e      	cmp	r6, r3
 800283e:	d100      	bne.n	8002842 <__aeabi_dsub+0x13e>
 8002840:	e10f      	b.n	8002a62 <__aeabi_dsub+0x35e>
 8002842:	4653      	mov	r3, sl
 8002844:	498a      	ldr	r1, [pc, #552]	; (8002a70 <__aeabi_dsub+0x36c>)
 8002846:	08e4      	lsrs	r4, r4, #3
 8002848:	400b      	ands	r3, r1
 800284a:	0019      	movs	r1, r3
 800284c:	075b      	lsls	r3, r3, #29
 800284e:	4323      	orrs	r3, r4
 8002850:	0572      	lsls	r2, r6, #21
 8002852:	024c      	lsls	r4, r1, #9
 8002854:	0b24      	lsrs	r4, r4, #12
 8002856:	0d52      	lsrs	r2, r2, #21
 8002858:	0512      	lsls	r2, r2, #20
 800285a:	4322      	orrs	r2, r4
 800285c:	07ed      	lsls	r5, r5, #31
 800285e:	432a      	orrs	r2, r5
 8002860:	0018      	movs	r0, r3
 8002862:	0011      	movs	r1, r2
 8002864:	b003      	add	sp, #12
 8002866:	bcf0      	pop	{r4, r5, r6, r7}
 8002868:	46bb      	mov	fp, r7
 800286a:	46b2      	mov	sl, r6
 800286c:	46a9      	mov	r9, r5
 800286e:	46a0      	mov	r8, r4
 8002870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002872:	1ab4      	subs	r4, r6, r2
 8002874:	46a4      	mov	ip, r4
 8002876:	2c00      	cmp	r4, #0
 8002878:	dd59      	ble.n	800292e <__aeabi_dsub+0x22a>
 800287a:	2a00      	cmp	r2, #0
 800287c:	d100      	bne.n	8002880 <__aeabi_dsub+0x17c>
 800287e:	e0b0      	b.n	80029e2 <__aeabi_dsub+0x2de>
 8002880:	4556      	cmp	r6, sl
 8002882:	d100      	bne.n	8002886 <__aeabi_dsub+0x182>
 8002884:	e0fa      	b.n	8002a7c <__aeabi_dsub+0x378>
 8002886:	2280      	movs	r2, #128	; 0x80
 8002888:	0412      	lsls	r2, r2, #16
 800288a:	4317      	orrs	r7, r2
 800288c:	4662      	mov	r2, ip
 800288e:	2a38      	cmp	r2, #56	; 0x38
 8002890:	dd00      	ble.n	8002894 <__aeabi_dsub+0x190>
 8002892:	e0d4      	b.n	8002a3e <__aeabi_dsub+0x33a>
 8002894:	2a1f      	cmp	r2, #31
 8002896:	dc00      	bgt.n	800289a <__aeabi_dsub+0x196>
 8002898:	e1c0      	b.n	8002c1c <__aeabi_dsub+0x518>
 800289a:	0039      	movs	r1, r7
 800289c:	3a20      	subs	r2, #32
 800289e:	40d1      	lsrs	r1, r2
 80028a0:	4662      	mov	r2, ip
 80028a2:	2a20      	cmp	r2, #32
 80028a4:	d006      	beq.n	80028b4 <__aeabi_dsub+0x1b0>
 80028a6:	4664      	mov	r4, ip
 80028a8:	2240      	movs	r2, #64	; 0x40
 80028aa:	1b12      	subs	r2, r2, r4
 80028ac:	003c      	movs	r4, r7
 80028ae:	4094      	lsls	r4, r2
 80028b0:	4304      	orrs	r4, r0
 80028b2:	9401      	str	r4, [sp, #4]
 80028b4:	9c01      	ldr	r4, [sp, #4]
 80028b6:	1e62      	subs	r2, r4, #1
 80028b8:	4194      	sbcs	r4, r2
 80028ba:	430c      	orrs	r4, r1
 80028bc:	e0c3      	b.n	8002a46 <__aeabi_dsub+0x342>
 80028be:	003c      	movs	r4, r7
 80028c0:	4304      	orrs	r4, r0
 80028c2:	d02b      	beq.n	800291c <__aeabi_dsub+0x218>
 80028c4:	468b      	mov	fp, r1
 80028c6:	428d      	cmp	r5, r1
 80028c8:	d02e      	beq.n	8002928 <__aeabi_dsub+0x224>
 80028ca:	4c6a      	ldr	r4, [pc, #424]	; (8002a74 <__aeabi_dsub+0x370>)
 80028cc:	46a4      	mov	ip, r4
 80028ce:	44b4      	add	ip, r6
 80028d0:	4664      	mov	r4, ip
 80028d2:	2c00      	cmp	r4, #0
 80028d4:	d05f      	beq.n	8002996 <__aeabi_dsub+0x292>
 80028d6:	1b94      	subs	r4, r2, r6
 80028d8:	46a4      	mov	ip, r4
 80028da:	2e00      	cmp	r6, #0
 80028dc:	d000      	beq.n	80028e0 <__aeabi_dsub+0x1dc>
 80028de:	e120      	b.n	8002b22 <__aeabi_dsub+0x41e>
 80028e0:	464c      	mov	r4, r9
 80028e2:	431c      	orrs	r4, r3
 80028e4:	d100      	bne.n	80028e8 <__aeabi_dsub+0x1e4>
 80028e6:	e1c7      	b.n	8002c78 <__aeabi_dsub+0x574>
 80028e8:	4661      	mov	r1, ip
 80028ea:	1e4c      	subs	r4, r1, #1
 80028ec:	2901      	cmp	r1, #1
 80028ee:	d100      	bne.n	80028f2 <__aeabi_dsub+0x1ee>
 80028f0:	e223      	b.n	8002d3a <__aeabi_dsub+0x636>
 80028f2:	4d5e      	ldr	r5, [pc, #376]	; (8002a6c <__aeabi_dsub+0x368>)
 80028f4:	45ac      	cmp	ip, r5
 80028f6:	d100      	bne.n	80028fa <__aeabi_dsub+0x1f6>
 80028f8:	e1d8      	b.n	8002cac <__aeabi_dsub+0x5a8>
 80028fa:	46a4      	mov	ip, r4
 80028fc:	e11a      	b.n	8002b34 <__aeabi_dsub+0x430>
 80028fe:	003a      	movs	r2, r7
 8002900:	4302      	orrs	r2, r0
 8002902:	d100      	bne.n	8002906 <__aeabi_dsub+0x202>
 8002904:	e0e4      	b.n	8002ad0 <__aeabi_dsub+0x3cc>
 8002906:	0022      	movs	r2, r4
 8002908:	3a01      	subs	r2, #1
 800290a:	2c01      	cmp	r4, #1
 800290c:	d100      	bne.n	8002910 <__aeabi_dsub+0x20c>
 800290e:	e1c3      	b.n	8002c98 <__aeabi_dsub+0x594>
 8002910:	4956      	ldr	r1, [pc, #344]	; (8002a6c <__aeabi_dsub+0x368>)
 8002912:	428c      	cmp	r4, r1
 8002914:	d100      	bne.n	8002918 <__aeabi_dsub+0x214>
 8002916:	e0b1      	b.n	8002a7c <__aeabi_dsub+0x378>
 8002918:	4694      	mov	ip, r2
 800291a:	e72b      	b.n	8002774 <__aeabi_dsub+0x70>
 800291c:	2401      	movs	r4, #1
 800291e:	4061      	eors	r1, r4
 8002920:	468b      	mov	fp, r1
 8002922:	428d      	cmp	r5, r1
 8002924:	d000      	beq.n	8002928 <__aeabi_dsub+0x224>
 8002926:	e716      	b.n	8002756 <__aeabi_dsub+0x52>
 8002928:	4952      	ldr	r1, [pc, #328]	; (8002a74 <__aeabi_dsub+0x370>)
 800292a:	468c      	mov	ip, r1
 800292c:	44b4      	add	ip, r6
 800292e:	4664      	mov	r4, ip
 8002930:	2c00      	cmp	r4, #0
 8002932:	d100      	bne.n	8002936 <__aeabi_dsub+0x232>
 8002934:	e0d3      	b.n	8002ade <__aeabi_dsub+0x3da>
 8002936:	1b91      	subs	r1, r2, r6
 8002938:	468c      	mov	ip, r1
 800293a:	2e00      	cmp	r6, #0
 800293c:	d100      	bne.n	8002940 <__aeabi_dsub+0x23c>
 800293e:	e15e      	b.n	8002bfe <__aeabi_dsub+0x4fa>
 8002940:	494a      	ldr	r1, [pc, #296]	; (8002a6c <__aeabi_dsub+0x368>)
 8002942:	428a      	cmp	r2, r1
 8002944:	d100      	bne.n	8002948 <__aeabi_dsub+0x244>
 8002946:	e1be      	b.n	8002cc6 <__aeabi_dsub+0x5c2>
 8002948:	2180      	movs	r1, #128	; 0x80
 800294a:	464c      	mov	r4, r9
 800294c:	0409      	lsls	r1, r1, #16
 800294e:	430c      	orrs	r4, r1
 8002950:	46a1      	mov	r9, r4
 8002952:	4661      	mov	r1, ip
 8002954:	2938      	cmp	r1, #56	; 0x38
 8002956:	dd00      	ble.n	800295a <__aeabi_dsub+0x256>
 8002958:	e1ba      	b.n	8002cd0 <__aeabi_dsub+0x5cc>
 800295a:	291f      	cmp	r1, #31
 800295c:	dd00      	ble.n	8002960 <__aeabi_dsub+0x25c>
 800295e:	e227      	b.n	8002db0 <__aeabi_dsub+0x6ac>
 8002960:	2420      	movs	r4, #32
 8002962:	1a64      	subs	r4, r4, r1
 8002964:	4649      	mov	r1, r9
 8002966:	40a1      	lsls	r1, r4
 8002968:	001e      	movs	r6, r3
 800296a:	4688      	mov	r8, r1
 800296c:	4661      	mov	r1, ip
 800296e:	40a3      	lsls	r3, r4
 8002970:	40ce      	lsrs	r6, r1
 8002972:	4641      	mov	r1, r8
 8002974:	1e5c      	subs	r4, r3, #1
 8002976:	41a3      	sbcs	r3, r4
 8002978:	4331      	orrs	r1, r6
 800297a:	4319      	orrs	r1, r3
 800297c:	000c      	movs	r4, r1
 800297e:	4663      	mov	r3, ip
 8002980:	4649      	mov	r1, r9
 8002982:	40d9      	lsrs	r1, r3
 8002984:	187f      	adds	r7, r7, r1
 8002986:	1824      	adds	r4, r4, r0
 8002988:	4284      	cmp	r4, r0
 800298a:	419b      	sbcs	r3, r3
 800298c:	425b      	negs	r3, r3
 800298e:	469a      	mov	sl, r3
 8002990:	0016      	movs	r6, r2
 8002992:	44ba      	add	sl, r7
 8002994:	e05d      	b.n	8002a52 <__aeabi_dsub+0x34e>
 8002996:	4c38      	ldr	r4, [pc, #224]	; (8002a78 <__aeabi_dsub+0x374>)
 8002998:	1c72      	adds	r2, r6, #1
 800299a:	4222      	tst	r2, r4
 800299c:	d000      	beq.n	80029a0 <__aeabi_dsub+0x29c>
 800299e:	e0df      	b.n	8002b60 <__aeabi_dsub+0x45c>
 80029a0:	464a      	mov	r2, r9
 80029a2:	431a      	orrs	r2, r3
 80029a4:	2e00      	cmp	r6, #0
 80029a6:	d000      	beq.n	80029aa <__aeabi_dsub+0x2a6>
 80029a8:	e15c      	b.n	8002c64 <__aeabi_dsub+0x560>
 80029aa:	2a00      	cmp	r2, #0
 80029ac:	d100      	bne.n	80029b0 <__aeabi_dsub+0x2ac>
 80029ae:	e1cf      	b.n	8002d50 <__aeabi_dsub+0x64c>
 80029b0:	003a      	movs	r2, r7
 80029b2:	4302      	orrs	r2, r0
 80029b4:	d100      	bne.n	80029b8 <__aeabi_dsub+0x2b4>
 80029b6:	e17f      	b.n	8002cb8 <__aeabi_dsub+0x5b4>
 80029b8:	1a1c      	subs	r4, r3, r0
 80029ba:	464a      	mov	r2, r9
 80029bc:	42a3      	cmp	r3, r4
 80029be:	4189      	sbcs	r1, r1
 80029c0:	1bd2      	subs	r2, r2, r7
 80029c2:	4249      	negs	r1, r1
 80029c4:	1a52      	subs	r2, r2, r1
 80029c6:	4692      	mov	sl, r2
 80029c8:	0212      	lsls	r2, r2, #8
 80029ca:	d400      	bmi.n	80029ce <__aeabi_dsub+0x2ca>
 80029cc:	e20a      	b.n	8002de4 <__aeabi_dsub+0x6e0>
 80029ce:	1ac4      	subs	r4, r0, r3
 80029d0:	42a0      	cmp	r0, r4
 80029d2:	4180      	sbcs	r0, r0
 80029d4:	464b      	mov	r3, r9
 80029d6:	4240      	negs	r0, r0
 80029d8:	1aff      	subs	r7, r7, r3
 80029da:	1a3b      	subs	r3, r7, r0
 80029dc:	469a      	mov	sl, r3
 80029de:	465d      	mov	r5, fp
 80029e0:	e71a      	b.n	8002818 <__aeabi_dsub+0x114>
 80029e2:	003a      	movs	r2, r7
 80029e4:	4302      	orrs	r2, r0
 80029e6:	d073      	beq.n	8002ad0 <__aeabi_dsub+0x3cc>
 80029e8:	0022      	movs	r2, r4
 80029ea:	3a01      	subs	r2, #1
 80029ec:	2c01      	cmp	r4, #1
 80029ee:	d100      	bne.n	80029f2 <__aeabi_dsub+0x2ee>
 80029f0:	e0cb      	b.n	8002b8a <__aeabi_dsub+0x486>
 80029f2:	4554      	cmp	r4, sl
 80029f4:	d042      	beq.n	8002a7c <__aeabi_dsub+0x378>
 80029f6:	4694      	mov	ip, r2
 80029f8:	e748      	b.n	800288c <__aeabi_dsub+0x188>
 80029fa:	0010      	movs	r0, r2
 80029fc:	3b1f      	subs	r3, #31
 80029fe:	40d8      	lsrs	r0, r3
 8002a00:	2920      	cmp	r1, #32
 8002a02:	d003      	beq.n	8002a0c <__aeabi_dsub+0x308>
 8002a04:	2340      	movs	r3, #64	; 0x40
 8002a06:	1a5b      	subs	r3, r3, r1
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	4314      	orrs	r4, r2
 8002a0c:	1e63      	subs	r3, r4, #1
 8002a0e:	419c      	sbcs	r4, r3
 8002a10:	2300      	movs	r3, #0
 8002a12:	2600      	movs	r6, #0
 8002a14:	469a      	mov	sl, r3
 8002a16:	4304      	orrs	r4, r0
 8002a18:	0763      	lsls	r3, r4, #29
 8002a1a:	d000      	beq.n	8002a1e <__aeabi_dsub+0x31a>
 8002a1c:	e6fe      	b.n	800281c <__aeabi_dsub+0x118>
 8002a1e:	4652      	mov	r2, sl
 8002a20:	08e3      	lsrs	r3, r4, #3
 8002a22:	0752      	lsls	r2, r2, #29
 8002a24:	4313      	orrs	r3, r2
 8002a26:	4652      	mov	r2, sl
 8002a28:	46b4      	mov	ip, r6
 8002a2a:	08d2      	lsrs	r2, r2, #3
 8002a2c:	490f      	ldr	r1, [pc, #60]	; (8002a6c <__aeabi_dsub+0x368>)
 8002a2e:	458c      	cmp	ip, r1
 8002a30:	d02a      	beq.n	8002a88 <__aeabi_dsub+0x384>
 8002a32:	0312      	lsls	r2, r2, #12
 8002a34:	0b14      	lsrs	r4, r2, #12
 8002a36:	4662      	mov	r2, ip
 8002a38:	0552      	lsls	r2, r2, #21
 8002a3a:	0d52      	lsrs	r2, r2, #21
 8002a3c:	e70c      	b.n	8002858 <__aeabi_dsub+0x154>
 8002a3e:	003c      	movs	r4, r7
 8002a40:	4304      	orrs	r4, r0
 8002a42:	1e62      	subs	r2, r4, #1
 8002a44:	4194      	sbcs	r4, r2
 8002a46:	18e4      	adds	r4, r4, r3
 8002a48:	429c      	cmp	r4, r3
 8002a4a:	4192      	sbcs	r2, r2
 8002a4c:	4252      	negs	r2, r2
 8002a4e:	444a      	add	r2, r9
 8002a50:	4692      	mov	sl, r2
 8002a52:	4653      	mov	r3, sl
 8002a54:	021b      	lsls	r3, r3, #8
 8002a56:	d5df      	bpl.n	8002a18 <__aeabi_dsub+0x314>
 8002a58:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <__aeabi_dsub+0x368>)
 8002a5a:	3601      	adds	r6, #1
 8002a5c:	429e      	cmp	r6, r3
 8002a5e:	d000      	beq.n	8002a62 <__aeabi_dsub+0x35e>
 8002a60:	e0a0      	b.n	8002ba4 <__aeabi_dsub+0x4a0>
 8002a62:	0032      	movs	r2, r6
 8002a64:	2400      	movs	r4, #0
 8002a66:	2300      	movs	r3, #0
 8002a68:	e6f6      	b.n	8002858 <__aeabi_dsub+0x154>
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	000007ff 	.word	0x000007ff
 8002a70:	ff7fffff 	.word	0xff7fffff
 8002a74:	fffff801 	.word	0xfffff801
 8002a78:	000007fe 	.word	0x000007fe
 8002a7c:	08db      	lsrs	r3, r3, #3
 8002a7e:	464a      	mov	r2, r9
 8002a80:	0752      	lsls	r2, r2, #29
 8002a82:	4313      	orrs	r3, r2
 8002a84:	464a      	mov	r2, r9
 8002a86:	08d2      	lsrs	r2, r2, #3
 8002a88:	0019      	movs	r1, r3
 8002a8a:	4311      	orrs	r1, r2
 8002a8c:	d100      	bne.n	8002a90 <__aeabi_dsub+0x38c>
 8002a8e:	e1b5      	b.n	8002dfc <__aeabi_dsub+0x6f8>
 8002a90:	2480      	movs	r4, #128	; 0x80
 8002a92:	0324      	lsls	r4, r4, #12
 8002a94:	4314      	orrs	r4, r2
 8002a96:	0324      	lsls	r4, r4, #12
 8002a98:	4ad5      	ldr	r2, [pc, #852]	; (8002df0 <__aeabi_dsub+0x6ec>)
 8002a9a:	0b24      	lsrs	r4, r4, #12
 8002a9c:	e6dc      	b.n	8002858 <__aeabi_dsub+0x154>
 8002a9e:	0020      	movs	r0, r4
 8002aa0:	f000 fb2a 	bl	80030f8 <__clzsi2>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	3318      	adds	r3, #24
 8002aa8:	2b1f      	cmp	r3, #31
 8002aaa:	dc00      	bgt.n	8002aae <__aeabi_dsub+0x3aa>
 8002aac:	e695      	b.n	80027da <__aeabi_dsub+0xd6>
 8002aae:	0022      	movs	r2, r4
 8002ab0:	3808      	subs	r0, #8
 8002ab2:	4082      	lsls	r2, r0
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	429e      	cmp	r6, r3
 8002ab8:	dc00      	bgt.n	8002abc <__aeabi_dsub+0x3b8>
 8002aba:	e69a      	b.n	80027f2 <__aeabi_dsub+0xee>
 8002abc:	1af6      	subs	r6, r6, r3
 8002abe:	4bcd      	ldr	r3, [pc, #820]	; (8002df4 <__aeabi_dsub+0x6f0>)
 8002ac0:	401a      	ands	r2, r3
 8002ac2:	4692      	mov	sl, r2
 8002ac4:	e6a8      	b.n	8002818 <__aeabi_dsub+0x114>
 8002ac6:	003c      	movs	r4, r7
 8002ac8:	4304      	orrs	r4, r0
 8002aca:	1e62      	subs	r2, r4, #1
 8002acc:	4194      	sbcs	r4, r2
 8002ace:	e66c      	b.n	80027aa <__aeabi_dsub+0xa6>
 8002ad0:	464a      	mov	r2, r9
 8002ad2:	08db      	lsrs	r3, r3, #3
 8002ad4:	0752      	lsls	r2, r2, #29
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	464a      	mov	r2, r9
 8002ada:	08d2      	lsrs	r2, r2, #3
 8002adc:	e7a6      	b.n	8002a2c <__aeabi_dsub+0x328>
 8002ade:	4cc6      	ldr	r4, [pc, #792]	; (8002df8 <__aeabi_dsub+0x6f4>)
 8002ae0:	1c72      	adds	r2, r6, #1
 8002ae2:	4222      	tst	r2, r4
 8002ae4:	d000      	beq.n	8002ae8 <__aeabi_dsub+0x3e4>
 8002ae6:	e0ac      	b.n	8002c42 <__aeabi_dsub+0x53e>
 8002ae8:	464a      	mov	r2, r9
 8002aea:	431a      	orrs	r2, r3
 8002aec:	2e00      	cmp	r6, #0
 8002aee:	d000      	beq.n	8002af2 <__aeabi_dsub+0x3ee>
 8002af0:	e105      	b.n	8002cfe <__aeabi_dsub+0x5fa>
 8002af2:	2a00      	cmp	r2, #0
 8002af4:	d100      	bne.n	8002af8 <__aeabi_dsub+0x3f4>
 8002af6:	e156      	b.n	8002da6 <__aeabi_dsub+0x6a2>
 8002af8:	003a      	movs	r2, r7
 8002afa:	4302      	orrs	r2, r0
 8002afc:	d100      	bne.n	8002b00 <__aeabi_dsub+0x3fc>
 8002afe:	e0db      	b.n	8002cb8 <__aeabi_dsub+0x5b4>
 8002b00:	181c      	adds	r4, r3, r0
 8002b02:	429c      	cmp	r4, r3
 8002b04:	419b      	sbcs	r3, r3
 8002b06:	444f      	add	r7, r9
 8002b08:	46ba      	mov	sl, r7
 8002b0a:	425b      	negs	r3, r3
 8002b0c:	449a      	add	sl, r3
 8002b0e:	4653      	mov	r3, sl
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	d400      	bmi.n	8002b16 <__aeabi_dsub+0x412>
 8002b14:	e780      	b.n	8002a18 <__aeabi_dsub+0x314>
 8002b16:	4652      	mov	r2, sl
 8002b18:	4bb6      	ldr	r3, [pc, #728]	; (8002df4 <__aeabi_dsub+0x6f0>)
 8002b1a:	2601      	movs	r6, #1
 8002b1c:	401a      	ands	r2, r3
 8002b1e:	4692      	mov	sl, r2
 8002b20:	e77a      	b.n	8002a18 <__aeabi_dsub+0x314>
 8002b22:	4cb3      	ldr	r4, [pc, #716]	; (8002df0 <__aeabi_dsub+0x6ec>)
 8002b24:	42a2      	cmp	r2, r4
 8002b26:	d100      	bne.n	8002b2a <__aeabi_dsub+0x426>
 8002b28:	e0c0      	b.n	8002cac <__aeabi_dsub+0x5a8>
 8002b2a:	2480      	movs	r4, #128	; 0x80
 8002b2c:	464d      	mov	r5, r9
 8002b2e:	0424      	lsls	r4, r4, #16
 8002b30:	4325      	orrs	r5, r4
 8002b32:	46a9      	mov	r9, r5
 8002b34:	4664      	mov	r4, ip
 8002b36:	2c38      	cmp	r4, #56	; 0x38
 8002b38:	dc53      	bgt.n	8002be2 <__aeabi_dsub+0x4de>
 8002b3a:	4661      	mov	r1, ip
 8002b3c:	2c1f      	cmp	r4, #31
 8002b3e:	dd00      	ble.n	8002b42 <__aeabi_dsub+0x43e>
 8002b40:	e0cd      	b.n	8002cde <__aeabi_dsub+0x5da>
 8002b42:	2520      	movs	r5, #32
 8002b44:	001e      	movs	r6, r3
 8002b46:	1b2d      	subs	r5, r5, r4
 8002b48:	464c      	mov	r4, r9
 8002b4a:	40ab      	lsls	r3, r5
 8002b4c:	40ac      	lsls	r4, r5
 8002b4e:	40ce      	lsrs	r6, r1
 8002b50:	1e5d      	subs	r5, r3, #1
 8002b52:	41ab      	sbcs	r3, r5
 8002b54:	4334      	orrs	r4, r6
 8002b56:	4323      	orrs	r3, r4
 8002b58:	464c      	mov	r4, r9
 8002b5a:	40cc      	lsrs	r4, r1
 8002b5c:	1b3f      	subs	r7, r7, r4
 8002b5e:	e045      	b.n	8002bec <__aeabi_dsub+0x4e8>
 8002b60:	464a      	mov	r2, r9
 8002b62:	1a1c      	subs	r4, r3, r0
 8002b64:	1bd1      	subs	r1, r2, r7
 8002b66:	42a3      	cmp	r3, r4
 8002b68:	4192      	sbcs	r2, r2
 8002b6a:	4252      	negs	r2, r2
 8002b6c:	4692      	mov	sl, r2
 8002b6e:	000a      	movs	r2, r1
 8002b70:	4651      	mov	r1, sl
 8002b72:	1a52      	subs	r2, r2, r1
 8002b74:	4692      	mov	sl, r2
 8002b76:	0212      	lsls	r2, r2, #8
 8002b78:	d500      	bpl.n	8002b7c <__aeabi_dsub+0x478>
 8002b7a:	e083      	b.n	8002c84 <__aeabi_dsub+0x580>
 8002b7c:	4653      	mov	r3, sl
 8002b7e:	4323      	orrs	r3, r4
 8002b80:	d000      	beq.n	8002b84 <__aeabi_dsub+0x480>
 8002b82:	e621      	b.n	80027c8 <__aeabi_dsub+0xc4>
 8002b84:	2200      	movs	r2, #0
 8002b86:	2500      	movs	r5, #0
 8002b88:	e753      	b.n	8002a32 <__aeabi_dsub+0x32e>
 8002b8a:	181c      	adds	r4, r3, r0
 8002b8c:	429c      	cmp	r4, r3
 8002b8e:	419b      	sbcs	r3, r3
 8002b90:	444f      	add	r7, r9
 8002b92:	46ba      	mov	sl, r7
 8002b94:	425b      	negs	r3, r3
 8002b96:	449a      	add	sl, r3
 8002b98:	4653      	mov	r3, sl
 8002b9a:	2601      	movs	r6, #1
 8002b9c:	021b      	lsls	r3, r3, #8
 8002b9e:	d400      	bmi.n	8002ba2 <__aeabi_dsub+0x49e>
 8002ba0:	e73a      	b.n	8002a18 <__aeabi_dsub+0x314>
 8002ba2:	2602      	movs	r6, #2
 8002ba4:	4652      	mov	r2, sl
 8002ba6:	4b93      	ldr	r3, [pc, #588]	; (8002df4 <__aeabi_dsub+0x6f0>)
 8002ba8:	2101      	movs	r1, #1
 8002baa:	401a      	ands	r2, r3
 8002bac:	0013      	movs	r3, r2
 8002bae:	4021      	ands	r1, r4
 8002bb0:	0862      	lsrs	r2, r4, #1
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	07dc      	lsls	r4, r3, #31
 8002bb6:	085b      	lsrs	r3, r3, #1
 8002bb8:	469a      	mov	sl, r3
 8002bba:	4314      	orrs	r4, r2
 8002bbc:	e62c      	b.n	8002818 <__aeabi_dsub+0x114>
 8002bbe:	0039      	movs	r1, r7
 8002bc0:	3a20      	subs	r2, #32
 8002bc2:	40d1      	lsrs	r1, r2
 8002bc4:	4662      	mov	r2, ip
 8002bc6:	2a20      	cmp	r2, #32
 8002bc8:	d006      	beq.n	8002bd8 <__aeabi_dsub+0x4d4>
 8002bca:	4664      	mov	r4, ip
 8002bcc:	2240      	movs	r2, #64	; 0x40
 8002bce:	1b12      	subs	r2, r2, r4
 8002bd0:	003c      	movs	r4, r7
 8002bd2:	4094      	lsls	r4, r2
 8002bd4:	4304      	orrs	r4, r0
 8002bd6:	9401      	str	r4, [sp, #4]
 8002bd8:	9c01      	ldr	r4, [sp, #4]
 8002bda:	1e62      	subs	r2, r4, #1
 8002bdc:	4194      	sbcs	r4, r2
 8002bde:	430c      	orrs	r4, r1
 8002be0:	e5e3      	b.n	80027aa <__aeabi_dsub+0xa6>
 8002be2:	4649      	mov	r1, r9
 8002be4:	4319      	orrs	r1, r3
 8002be6:	000b      	movs	r3, r1
 8002be8:	1e5c      	subs	r4, r3, #1
 8002bea:	41a3      	sbcs	r3, r4
 8002bec:	1ac4      	subs	r4, r0, r3
 8002bee:	42a0      	cmp	r0, r4
 8002bf0:	419b      	sbcs	r3, r3
 8002bf2:	425b      	negs	r3, r3
 8002bf4:	1afb      	subs	r3, r7, r3
 8002bf6:	469a      	mov	sl, r3
 8002bf8:	465d      	mov	r5, fp
 8002bfa:	0016      	movs	r6, r2
 8002bfc:	e5dc      	b.n	80027b8 <__aeabi_dsub+0xb4>
 8002bfe:	4649      	mov	r1, r9
 8002c00:	4319      	orrs	r1, r3
 8002c02:	d100      	bne.n	8002c06 <__aeabi_dsub+0x502>
 8002c04:	e0ae      	b.n	8002d64 <__aeabi_dsub+0x660>
 8002c06:	4661      	mov	r1, ip
 8002c08:	4664      	mov	r4, ip
 8002c0a:	3901      	subs	r1, #1
 8002c0c:	2c01      	cmp	r4, #1
 8002c0e:	d100      	bne.n	8002c12 <__aeabi_dsub+0x50e>
 8002c10:	e0e0      	b.n	8002dd4 <__aeabi_dsub+0x6d0>
 8002c12:	4c77      	ldr	r4, [pc, #476]	; (8002df0 <__aeabi_dsub+0x6ec>)
 8002c14:	45a4      	cmp	ip, r4
 8002c16:	d056      	beq.n	8002cc6 <__aeabi_dsub+0x5c2>
 8002c18:	468c      	mov	ip, r1
 8002c1a:	e69a      	b.n	8002952 <__aeabi_dsub+0x24e>
 8002c1c:	4661      	mov	r1, ip
 8002c1e:	2220      	movs	r2, #32
 8002c20:	003c      	movs	r4, r7
 8002c22:	1a52      	subs	r2, r2, r1
 8002c24:	4094      	lsls	r4, r2
 8002c26:	0001      	movs	r1, r0
 8002c28:	4090      	lsls	r0, r2
 8002c2a:	46a0      	mov	r8, r4
 8002c2c:	4664      	mov	r4, ip
 8002c2e:	1e42      	subs	r2, r0, #1
 8002c30:	4190      	sbcs	r0, r2
 8002c32:	4662      	mov	r2, ip
 8002c34:	40e1      	lsrs	r1, r4
 8002c36:	4644      	mov	r4, r8
 8002c38:	40d7      	lsrs	r7, r2
 8002c3a:	430c      	orrs	r4, r1
 8002c3c:	4304      	orrs	r4, r0
 8002c3e:	44b9      	add	r9, r7
 8002c40:	e701      	b.n	8002a46 <__aeabi_dsub+0x342>
 8002c42:	496b      	ldr	r1, [pc, #428]	; (8002df0 <__aeabi_dsub+0x6ec>)
 8002c44:	428a      	cmp	r2, r1
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x546>
 8002c48:	e70c      	b.n	8002a64 <__aeabi_dsub+0x360>
 8002c4a:	1818      	adds	r0, r3, r0
 8002c4c:	4298      	cmp	r0, r3
 8002c4e:	419b      	sbcs	r3, r3
 8002c50:	444f      	add	r7, r9
 8002c52:	425b      	negs	r3, r3
 8002c54:	18fb      	adds	r3, r7, r3
 8002c56:	07dc      	lsls	r4, r3, #31
 8002c58:	0840      	lsrs	r0, r0, #1
 8002c5a:	085b      	lsrs	r3, r3, #1
 8002c5c:	469a      	mov	sl, r3
 8002c5e:	0016      	movs	r6, r2
 8002c60:	4304      	orrs	r4, r0
 8002c62:	e6d9      	b.n	8002a18 <__aeabi_dsub+0x314>
 8002c64:	2a00      	cmp	r2, #0
 8002c66:	d000      	beq.n	8002c6a <__aeabi_dsub+0x566>
 8002c68:	e081      	b.n	8002d6e <__aeabi_dsub+0x66a>
 8002c6a:	003b      	movs	r3, r7
 8002c6c:	4303      	orrs	r3, r0
 8002c6e:	d11d      	bne.n	8002cac <__aeabi_dsub+0x5a8>
 8002c70:	2280      	movs	r2, #128	; 0x80
 8002c72:	2500      	movs	r5, #0
 8002c74:	0312      	lsls	r2, r2, #12
 8002c76:	e70b      	b.n	8002a90 <__aeabi_dsub+0x38c>
 8002c78:	08c0      	lsrs	r0, r0, #3
 8002c7a:	077b      	lsls	r3, r7, #29
 8002c7c:	465d      	mov	r5, fp
 8002c7e:	4303      	orrs	r3, r0
 8002c80:	08fa      	lsrs	r2, r7, #3
 8002c82:	e6d3      	b.n	8002a2c <__aeabi_dsub+0x328>
 8002c84:	1ac4      	subs	r4, r0, r3
 8002c86:	42a0      	cmp	r0, r4
 8002c88:	4180      	sbcs	r0, r0
 8002c8a:	464b      	mov	r3, r9
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1aff      	subs	r7, r7, r3
 8002c90:	1a3b      	subs	r3, r7, r0
 8002c92:	469a      	mov	sl, r3
 8002c94:	465d      	mov	r5, fp
 8002c96:	e597      	b.n	80027c8 <__aeabi_dsub+0xc4>
 8002c98:	1a1c      	subs	r4, r3, r0
 8002c9a:	464a      	mov	r2, r9
 8002c9c:	42a3      	cmp	r3, r4
 8002c9e:	419b      	sbcs	r3, r3
 8002ca0:	1bd7      	subs	r7, r2, r7
 8002ca2:	425b      	negs	r3, r3
 8002ca4:	1afb      	subs	r3, r7, r3
 8002ca6:	469a      	mov	sl, r3
 8002ca8:	2601      	movs	r6, #1
 8002caa:	e585      	b.n	80027b8 <__aeabi_dsub+0xb4>
 8002cac:	08c0      	lsrs	r0, r0, #3
 8002cae:	077b      	lsls	r3, r7, #29
 8002cb0:	465d      	mov	r5, fp
 8002cb2:	4303      	orrs	r3, r0
 8002cb4:	08fa      	lsrs	r2, r7, #3
 8002cb6:	e6e7      	b.n	8002a88 <__aeabi_dsub+0x384>
 8002cb8:	464a      	mov	r2, r9
 8002cba:	08db      	lsrs	r3, r3, #3
 8002cbc:	0752      	lsls	r2, r2, #29
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	464a      	mov	r2, r9
 8002cc2:	08d2      	lsrs	r2, r2, #3
 8002cc4:	e6b5      	b.n	8002a32 <__aeabi_dsub+0x32e>
 8002cc6:	08c0      	lsrs	r0, r0, #3
 8002cc8:	077b      	lsls	r3, r7, #29
 8002cca:	4303      	orrs	r3, r0
 8002ccc:	08fa      	lsrs	r2, r7, #3
 8002cce:	e6db      	b.n	8002a88 <__aeabi_dsub+0x384>
 8002cd0:	4649      	mov	r1, r9
 8002cd2:	4319      	orrs	r1, r3
 8002cd4:	000b      	movs	r3, r1
 8002cd6:	1e59      	subs	r1, r3, #1
 8002cd8:	418b      	sbcs	r3, r1
 8002cda:	001c      	movs	r4, r3
 8002cdc:	e653      	b.n	8002986 <__aeabi_dsub+0x282>
 8002cde:	464d      	mov	r5, r9
 8002ce0:	3c20      	subs	r4, #32
 8002ce2:	40e5      	lsrs	r5, r4
 8002ce4:	2920      	cmp	r1, #32
 8002ce6:	d005      	beq.n	8002cf4 <__aeabi_dsub+0x5f0>
 8002ce8:	2440      	movs	r4, #64	; 0x40
 8002cea:	1a64      	subs	r4, r4, r1
 8002cec:	4649      	mov	r1, r9
 8002cee:	40a1      	lsls	r1, r4
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	4698      	mov	r8, r3
 8002cf4:	4643      	mov	r3, r8
 8002cf6:	1e5c      	subs	r4, r3, #1
 8002cf8:	41a3      	sbcs	r3, r4
 8002cfa:	432b      	orrs	r3, r5
 8002cfc:	e776      	b.n	8002bec <__aeabi_dsub+0x4e8>
 8002cfe:	2a00      	cmp	r2, #0
 8002d00:	d0e1      	beq.n	8002cc6 <__aeabi_dsub+0x5c2>
 8002d02:	003a      	movs	r2, r7
 8002d04:	08db      	lsrs	r3, r3, #3
 8002d06:	4302      	orrs	r2, r0
 8002d08:	d100      	bne.n	8002d0c <__aeabi_dsub+0x608>
 8002d0a:	e6b8      	b.n	8002a7e <__aeabi_dsub+0x37a>
 8002d0c:	464a      	mov	r2, r9
 8002d0e:	0752      	lsls	r2, r2, #29
 8002d10:	2480      	movs	r4, #128	; 0x80
 8002d12:	4313      	orrs	r3, r2
 8002d14:	464a      	mov	r2, r9
 8002d16:	0324      	lsls	r4, r4, #12
 8002d18:	08d2      	lsrs	r2, r2, #3
 8002d1a:	4222      	tst	r2, r4
 8002d1c:	d007      	beq.n	8002d2e <__aeabi_dsub+0x62a>
 8002d1e:	08fe      	lsrs	r6, r7, #3
 8002d20:	4226      	tst	r6, r4
 8002d22:	d104      	bne.n	8002d2e <__aeabi_dsub+0x62a>
 8002d24:	465d      	mov	r5, fp
 8002d26:	0032      	movs	r2, r6
 8002d28:	08c3      	lsrs	r3, r0, #3
 8002d2a:	077f      	lsls	r7, r7, #29
 8002d2c:	433b      	orrs	r3, r7
 8002d2e:	0f59      	lsrs	r1, r3, #29
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	0749      	lsls	r1, r1, #29
 8002d34:	08db      	lsrs	r3, r3, #3
 8002d36:	430b      	orrs	r3, r1
 8002d38:	e6a6      	b.n	8002a88 <__aeabi_dsub+0x384>
 8002d3a:	1ac4      	subs	r4, r0, r3
 8002d3c:	42a0      	cmp	r0, r4
 8002d3e:	4180      	sbcs	r0, r0
 8002d40:	464b      	mov	r3, r9
 8002d42:	4240      	negs	r0, r0
 8002d44:	1aff      	subs	r7, r7, r3
 8002d46:	1a3b      	subs	r3, r7, r0
 8002d48:	469a      	mov	sl, r3
 8002d4a:	465d      	mov	r5, fp
 8002d4c:	2601      	movs	r6, #1
 8002d4e:	e533      	b.n	80027b8 <__aeabi_dsub+0xb4>
 8002d50:	003b      	movs	r3, r7
 8002d52:	4303      	orrs	r3, r0
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x654>
 8002d56:	e715      	b.n	8002b84 <__aeabi_dsub+0x480>
 8002d58:	08c0      	lsrs	r0, r0, #3
 8002d5a:	077b      	lsls	r3, r7, #29
 8002d5c:	465d      	mov	r5, fp
 8002d5e:	4303      	orrs	r3, r0
 8002d60:	08fa      	lsrs	r2, r7, #3
 8002d62:	e666      	b.n	8002a32 <__aeabi_dsub+0x32e>
 8002d64:	08c0      	lsrs	r0, r0, #3
 8002d66:	077b      	lsls	r3, r7, #29
 8002d68:	4303      	orrs	r3, r0
 8002d6a:	08fa      	lsrs	r2, r7, #3
 8002d6c:	e65e      	b.n	8002a2c <__aeabi_dsub+0x328>
 8002d6e:	003a      	movs	r2, r7
 8002d70:	08db      	lsrs	r3, r3, #3
 8002d72:	4302      	orrs	r2, r0
 8002d74:	d100      	bne.n	8002d78 <__aeabi_dsub+0x674>
 8002d76:	e682      	b.n	8002a7e <__aeabi_dsub+0x37a>
 8002d78:	464a      	mov	r2, r9
 8002d7a:	0752      	lsls	r2, r2, #29
 8002d7c:	2480      	movs	r4, #128	; 0x80
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	464a      	mov	r2, r9
 8002d82:	0324      	lsls	r4, r4, #12
 8002d84:	08d2      	lsrs	r2, r2, #3
 8002d86:	4222      	tst	r2, r4
 8002d88:	d007      	beq.n	8002d9a <__aeabi_dsub+0x696>
 8002d8a:	08fe      	lsrs	r6, r7, #3
 8002d8c:	4226      	tst	r6, r4
 8002d8e:	d104      	bne.n	8002d9a <__aeabi_dsub+0x696>
 8002d90:	465d      	mov	r5, fp
 8002d92:	0032      	movs	r2, r6
 8002d94:	08c3      	lsrs	r3, r0, #3
 8002d96:	077f      	lsls	r7, r7, #29
 8002d98:	433b      	orrs	r3, r7
 8002d9a:	0f59      	lsrs	r1, r3, #29
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	08db      	lsrs	r3, r3, #3
 8002da0:	0749      	lsls	r1, r1, #29
 8002da2:	430b      	orrs	r3, r1
 8002da4:	e670      	b.n	8002a88 <__aeabi_dsub+0x384>
 8002da6:	08c0      	lsrs	r0, r0, #3
 8002da8:	077b      	lsls	r3, r7, #29
 8002daa:	4303      	orrs	r3, r0
 8002dac:	08fa      	lsrs	r2, r7, #3
 8002dae:	e640      	b.n	8002a32 <__aeabi_dsub+0x32e>
 8002db0:	464c      	mov	r4, r9
 8002db2:	3920      	subs	r1, #32
 8002db4:	40cc      	lsrs	r4, r1
 8002db6:	4661      	mov	r1, ip
 8002db8:	2920      	cmp	r1, #32
 8002dba:	d006      	beq.n	8002dca <__aeabi_dsub+0x6c6>
 8002dbc:	4666      	mov	r6, ip
 8002dbe:	2140      	movs	r1, #64	; 0x40
 8002dc0:	1b89      	subs	r1, r1, r6
 8002dc2:	464e      	mov	r6, r9
 8002dc4:	408e      	lsls	r6, r1
 8002dc6:	4333      	orrs	r3, r6
 8002dc8:	4698      	mov	r8, r3
 8002dca:	4643      	mov	r3, r8
 8002dcc:	1e59      	subs	r1, r3, #1
 8002dce:	418b      	sbcs	r3, r1
 8002dd0:	431c      	orrs	r4, r3
 8002dd2:	e5d8      	b.n	8002986 <__aeabi_dsub+0x282>
 8002dd4:	181c      	adds	r4, r3, r0
 8002dd6:	4284      	cmp	r4, r0
 8002dd8:	4180      	sbcs	r0, r0
 8002dda:	444f      	add	r7, r9
 8002ddc:	46ba      	mov	sl, r7
 8002dde:	4240      	negs	r0, r0
 8002de0:	4482      	add	sl, r0
 8002de2:	e6d9      	b.n	8002b98 <__aeabi_dsub+0x494>
 8002de4:	4653      	mov	r3, sl
 8002de6:	4323      	orrs	r3, r4
 8002de8:	d100      	bne.n	8002dec <__aeabi_dsub+0x6e8>
 8002dea:	e6cb      	b.n	8002b84 <__aeabi_dsub+0x480>
 8002dec:	e614      	b.n	8002a18 <__aeabi_dsub+0x314>
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	000007ff 	.word	0x000007ff
 8002df4:	ff7fffff 	.word	0xff7fffff
 8002df8:	000007fe 	.word	0x000007fe
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	4a01      	ldr	r2, [pc, #4]	; (8002e04 <__aeabi_dsub+0x700>)
 8002e00:	001c      	movs	r4, r3
 8002e02:	e529      	b.n	8002858 <__aeabi_dsub+0x154>
 8002e04:	000007ff 	.word	0x000007ff

08002e08 <__aeabi_dcmpun>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	0005      	movs	r5, r0
 8002e0c:	480c      	ldr	r0, [pc, #48]	; (8002e40 <__aeabi_dcmpun+0x38>)
 8002e0e:	031c      	lsls	r4, r3, #12
 8002e10:	0016      	movs	r6, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	030a      	lsls	r2, r1, #12
 8002e16:	0049      	lsls	r1, r1, #1
 8002e18:	0b12      	lsrs	r2, r2, #12
 8002e1a:	0d49      	lsrs	r1, r1, #21
 8002e1c:	0b24      	lsrs	r4, r4, #12
 8002e1e:	0d5b      	lsrs	r3, r3, #21
 8002e20:	4281      	cmp	r1, r0
 8002e22:	d008      	beq.n	8002e36 <__aeabi_dcmpun+0x2e>
 8002e24:	4a06      	ldr	r2, [pc, #24]	; (8002e40 <__aeabi_dcmpun+0x38>)
 8002e26:	2000      	movs	r0, #0
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d103      	bne.n	8002e34 <__aeabi_dcmpun+0x2c>
 8002e2c:	0020      	movs	r0, r4
 8002e2e:	4330      	orrs	r0, r6
 8002e30:	1e43      	subs	r3, r0, #1
 8002e32:	4198      	sbcs	r0, r3
 8002e34:	bd70      	pop	{r4, r5, r6, pc}
 8002e36:	2001      	movs	r0, #1
 8002e38:	432a      	orrs	r2, r5
 8002e3a:	d1fb      	bne.n	8002e34 <__aeabi_dcmpun+0x2c>
 8002e3c:	e7f2      	b.n	8002e24 <__aeabi_dcmpun+0x1c>
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	000007ff 	.word	0x000007ff

08002e44 <__aeabi_d2iz>:
 8002e44:	000a      	movs	r2, r1
 8002e46:	b530      	push	{r4, r5, lr}
 8002e48:	4c13      	ldr	r4, [pc, #76]	; (8002e98 <__aeabi_d2iz+0x54>)
 8002e4a:	0053      	lsls	r3, r2, #1
 8002e4c:	0309      	lsls	r1, r1, #12
 8002e4e:	0005      	movs	r5, r0
 8002e50:	0b09      	lsrs	r1, r1, #12
 8002e52:	2000      	movs	r0, #0
 8002e54:	0d5b      	lsrs	r3, r3, #21
 8002e56:	0fd2      	lsrs	r2, r2, #31
 8002e58:	42a3      	cmp	r3, r4
 8002e5a:	dd04      	ble.n	8002e66 <__aeabi_d2iz+0x22>
 8002e5c:	480f      	ldr	r0, [pc, #60]	; (8002e9c <__aeabi_d2iz+0x58>)
 8002e5e:	4283      	cmp	r3, r0
 8002e60:	dd02      	ble.n	8002e68 <__aeabi_d2iz+0x24>
 8002e62:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <__aeabi_d2iz+0x5c>)
 8002e64:	18d0      	adds	r0, r2, r3
 8002e66:	bd30      	pop	{r4, r5, pc}
 8002e68:	2080      	movs	r0, #128	; 0x80
 8002e6a:	0340      	lsls	r0, r0, #13
 8002e6c:	4301      	orrs	r1, r0
 8002e6e:	480d      	ldr	r0, [pc, #52]	; (8002ea4 <__aeabi_d2iz+0x60>)
 8002e70:	1ac0      	subs	r0, r0, r3
 8002e72:	281f      	cmp	r0, #31
 8002e74:	dd08      	ble.n	8002e88 <__aeabi_d2iz+0x44>
 8002e76:	480c      	ldr	r0, [pc, #48]	; (8002ea8 <__aeabi_d2iz+0x64>)
 8002e78:	1ac3      	subs	r3, r0, r3
 8002e7a:	40d9      	lsrs	r1, r3
 8002e7c:	000b      	movs	r3, r1
 8002e7e:	4258      	negs	r0, r3
 8002e80:	2a00      	cmp	r2, #0
 8002e82:	d1f0      	bne.n	8002e66 <__aeabi_d2iz+0x22>
 8002e84:	0018      	movs	r0, r3
 8002e86:	e7ee      	b.n	8002e66 <__aeabi_d2iz+0x22>
 8002e88:	4c08      	ldr	r4, [pc, #32]	; (8002eac <__aeabi_d2iz+0x68>)
 8002e8a:	40c5      	lsrs	r5, r0
 8002e8c:	46a4      	mov	ip, r4
 8002e8e:	4463      	add	r3, ip
 8002e90:	4099      	lsls	r1, r3
 8002e92:	000b      	movs	r3, r1
 8002e94:	432b      	orrs	r3, r5
 8002e96:	e7f2      	b.n	8002e7e <__aeabi_d2iz+0x3a>
 8002e98:	000003fe 	.word	0x000003fe
 8002e9c:	0000041d 	.word	0x0000041d
 8002ea0:	7fffffff 	.word	0x7fffffff
 8002ea4:	00000433 	.word	0x00000433
 8002ea8:	00000413 	.word	0x00000413
 8002eac:	fffffbed 	.word	0xfffffbed

08002eb0 <__aeabi_i2d>:
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d016      	beq.n	8002ee4 <__aeabi_i2d+0x34>
 8002eb6:	17c3      	asrs	r3, r0, #31
 8002eb8:	18c5      	adds	r5, r0, r3
 8002eba:	405d      	eors	r5, r3
 8002ebc:	0fc4      	lsrs	r4, r0, #31
 8002ebe:	0028      	movs	r0, r5
 8002ec0:	f000 f91a 	bl	80030f8 <__clzsi2>
 8002ec4:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <__aeabi_i2d+0x5c>)
 8002ec6:	1a1b      	subs	r3, r3, r0
 8002ec8:	280a      	cmp	r0, #10
 8002eca:	dc16      	bgt.n	8002efa <__aeabi_i2d+0x4a>
 8002ecc:	0002      	movs	r2, r0
 8002ece:	002e      	movs	r6, r5
 8002ed0:	3215      	adds	r2, #21
 8002ed2:	4096      	lsls	r6, r2
 8002ed4:	220b      	movs	r2, #11
 8002ed6:	1a12      	subs	r2, r2, r0
 8002ed8:	40d5      	lsrs	r5, r2
 8002eda:	055b      	lsls	r3, r3, #21
 8002edc:	032d      	lsls	r5, r5, #12
 8002ede:	0b2d      	lsrs	r5, r5, #12
 8002ee0:	0d5b      	lsrs	r3, r3, #21
 8002ee2:	e003      	b.n	8002eec <__aeabi_i2d+0x3c>
 8002ee4:	2400      	movs	r4, #0
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	2500      	movs	r5, #0
 8002eea:	2600      	movs	r6, #0
 8002eec:	051b      	lsls	r3, r3, #20
 8002eee:	432b      	orrs	r3, r5
 8002ef0:	07e4      	lsls	r4, r4, #31
 8002ef2:	4323      	orrs	r3, r4
 8002ef4:	0030      	movs	r0, r6
 8002ef6:	0019      	movs	r1, r3
 8002ef8:	bd70      	pop	{r4, r5, r6, pc}
 8002efa:	380b      	subs	r0, #11
 8002efc:	4085      	lsls	r5, r0
 8002efe:	055b      	lsls	r3, r3, #21
 8002f00:	032d      	lsls	r5, r5, #12
 8002f02:	2600      	movs	r6, #0
 8002f04:	0b2d      	lsrs	r5, r5, #12
 8002f06:	0d5b      	lsrs	r3, r3, #21
 8002f08:	e7f0      	b.n	8002eec <__aeabi_i2d+0x3c>
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	0000041e 	.word	0x0000041e

08002f10 <__aeabi_ui2d>:
 8002f10:	b510      	push	{r4, lr}
 8002f12:	1e04      	subs	r4, r0, #0
 8002f14:	d010      	beq.n	8002f38 <__aeabi_ui2d+0x28>
 8002f16:	f000 f8ef 	bl	80030f8 <__clzsi2>
 8002f1a:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <__aeabi_ui2d+0x48>)
 8002f1c:	1a1b      	subs	r3, r3, r0
 8002f1e:	280a      	cmp	r0, #10
 8002f20:	dc11      	bgt.n	8002f46 <__aeabi_ui2d+0x36>
 8002f22:	220b      	movs	r2, #11
 8002f24:	0021      	movs	r1, r4
 8002f26:	1a12      	subs	r2, r2, r0
 8002f28:	40d1      	lsrs	r1, r2
 8002f2a:	3015      	adds	r0, #21
 8002f2c:	030a      	lsls	r2, r1, #12
 8002f2e:	055b      	lsls	r3, r3, #21
 8002f30:	4084      	lsls	r4, r0
 8002f32:	0b12      	lsrs	r2, r2, #12
 8002f34:	0d5b      	lsrs	r3, r3, #21
 8002f36:	e001      	b.n	8002f3c <__aeabi_ui2d+0x2c>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	051b      	lsls	r3, r3, #20
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	0020      	movs	r0, r4
 8002f42:	0019      	movs	r1, r3
 8002f44:	bd10      	pop	{r4, pc}
 8002f46:	0022      	movs	r2, r4
 8002f48:	380b      	subs	r0, #11
 8002f4a:	4082      	lsls	r2, r0
 8002f4c:	055b      	lsls	r3, r3, #21
 8002f4e:	0312      	lsls	r2, r2, #12
 8002f50:	2400      	movs	r4, #0
 8002f52:	0b12      	lsrs	r2, r2, #12
 8002f54:	0d5b      	lsrs	r3, r3, #21
 8002f56:	e7f1      	b.n	8002f3c <__aeabi_ui2d+0x2c>
 8002f58:	0000041e 	.word	0x0000041e

08002f5c <__aeabi_f2d>:
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	0242      	lsls	r2, r0, #9
 8002f60:	0043      	lsls	r3, r0, #1
 8002f62:	0fc4      	lsrs	r4, r0, #31
 8002f64:	20fe      	movs	r0, #254	; 0xfe
 8002f66:	0e1b      	lsrs	r3, r3, #24
 8002f68:	1c59      	adds	r1, r3, #1
 8002f6a:	0a55      	lsrs	r5, r2, #9
 8002f6c:	4208      	tst	r0, r1
 8002f6e:	d00c      	beq.n	8002f8a <__aeabi_f2d+0x2e>
 8002f70:	21e0      	movs	r1, #224	; 0xe0
 8002f72:	0089      	lsls	r1, r1, #2
 8002f74:	468c      	mov	ip, r1
 8002f76:	076d      	lsls	r5, r5, #29
 8002f78:	0b12      	lsrs	r2, r2, #12
 8002f7a:	4463      	add	r3, ip
 8002f7c:	051b      	lsls	r3, r3, #20
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	07e4      	lsls	r4, r4, #31
 8002f82:	4323      	orrs	r3, r4
 8002f84:	0028      	movs	r0, r5
 8002f86:	0019      	movs	r1, r3
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d114      	bne.n	8002fb8 <__aeabi_f2d+0x5c>
 8002f8e:	2d00      	cmp	r5, #0
 8002f90:	d01b      	beq.n	8002fca <__aeabi_f2d+0x6e>
 8002f92:	0028      	movs	r0, r5
 8002f94:	f000 f8b0 	bl	80030f8 <__clzsi2>
 8002f98:	280a      	cmp	r0, #10
 8002f9a:	dc1c      	bgt.n	8002fd6 <__aeabi_f2d+0x7a>
 8002f9c:	230b      	movs	r3, #11
 8002f9e:	002a      	movs	r2, r5
 8002fa0:	1a1b      	subs	r3, r3, r0
 8002fa2:	40da      	lsrs	r2, r3
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	3315      	adds	r3, #21
 8002fa8:	409d      	lsls	r5, r3
 8002faa:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <__aeabi_f2d+0x88>)
 8002fac:	0312      	lsls	r2, r2, #12
 8002fae:	1a1b      	subs	r3, r3, r0
 8002fb0:	055b      	lsls	r3, r3, #21
 8002fb2:	0b12      	lsrs	r2, r2, #12
 8002fb4:	0d5b      	lsrs	r3, r3, #21
 8002fb6:	e7e1      	b.n	8002f7c <__aeabi_f2d+0x20>
 8002fb8:	2d00      	cmp	r5, #0
 8002fba:	d009      	beq.n	8002fd0 <__aeabi_f2d+0x74>
 8002fbc:	0b13      	lsrs	r3, r2, #12
 8002fbe:	2280      	movs	r2, #128	; 0x80
 8002fc0:	0312      	lsls	r2, r2, #12
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	076d      	lsls	r5, r5, #29
 8002fc6:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <__aeabi_f2d+0x8c>)
 8002fc8:	e7d8      	b.n	8002f7c <__aeabi_f2d+0x20>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	2200      	movs	r2, #0
 8002fce:	e7d5      	b.n	8002f7c <__aeabi_f2d+0x20>
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <__aeabi_f2d+0x8c>)
 8002fd4:	e7d2      	b.n	8002f7c <__aeabi_f2d+0x20>
 8002fd6:	0003      	movs	r3, r0
 8002fd8:	002a      	movs	r2, r5
 8002fda:	3b0b      	subs	r3, #11
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	2500      	movs	r5, #0
 8002fe0:	e7e3      	b.n	8002faa <__aeabi_f2d+0x4e>
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	00000389 	.word	0x00000389
 8002fe8:	000007ff 	.word	0x000007ff

08002fec <__aeabi_d2f>:
 8002fec:	0002      	movs	r2, r0
 8002fee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff0:	004b      	lsls	r3, r1, #1
 8002ff2:	030d      	lsls	r5, r1, #12
 8002ff4:	0f40      	lsrs	r0, r0, #29
 8002ff6:	0d5b      	lsrs	r3, r3, #21
 8002ff8:	0fcc      	lsrs	r4, r1, #31
 8002ffa:	0a6d      	lsrs	r5, r5, #9
 8002ffc:	493a      	ldr	r1, [pc, #232]	; (80030e8 <__aeabi_d2f+0xfc>)
 8002ffe:	4305      	orrs	r5, r0
 8003000:	1c58      	adds	r0, r3, #1
 8003002:	00d7      	lsls	r7, r2, #3
 8003004:	4208      	tst	r0, r1
 8003006:	d00a      	beq.n	800301e <__aeabi_d2f+0x32>
 8003008:	4938      	ldr	r1, [pc, #224]	; (80030ec <__aeabi_d2f+0x100>)
 800300a:	1859      	adds	r1, r3, r1
 800300c:	29fe      	cmp	r1, #254	; 0xfe
 800300e:	dd16      	ble.n	800303e <__aeabi_d2f+0x52>
 8003010:	20ff      	movs	r0, #255	; 0xff
 8003012:	2200      	movs	r2, #0
 8003014:	05c0      	lsls	r0, r0, #23
 8003016:	4310      	orrs	r0, r2
 8003018:	07e4      	lsls	r4, r4, #31
 800301a:	4320      	orrs	r0, r4
 800301c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <__aeabi_d2f+0x44>
 8003022:	433d      	orrs	r5, r7
 8003024:	d026      	beq.n	8003074 <__aeabi_d2f+0x88>
 8003026:	2205      	movs	r2, #5
 8003028:	0192      	lsls	r2, r2, #6
 800302a:	0a52      	lsrs	r2, r2, #9
 800302c:	b2d8      	uxtb	r0, r3
 800302e:	e7f1      	b.n	8003014 <__aeabi_d2f+0x28>
 8003030:	432f      	orrs	r7, r5
 8003032:	d0ed      	beq.n	8003010 <__aeabi_d2f+0x24>
 8003034:	2280      	movs	r2, #128	; 0x80
 8003036:	03d2      	lsls	r2, r2, #15
 8003038:	20ff      	movs	r0, #255	; 0xff
 800303a:	432a      	orrs	r2, r5
 800303c:	e7ea      	b.n	8003014 <__aeabi_d2f+0x28>
 800303e:	2900      	cmp	r1, #0
 8003040:	dd1b      	ble.n	800307a <__aeabi_d2f+0x8e>
 8003042:	0192      	lsls	r2, r2, #6
 8003044:	1e50      	subs	r0, r2, #1
 8003046:	4182      	sbcs	r2, r0
 8003048:	00ed      	lsls	r5, r5, #3
 800304a:	0f7f      	lsrs	r7, r7, #29
 800304c:	432a      	orrs	r2, r5
 800304e:	433a      	orrs	r2, r7
 8003050:	0753      	lsls	r3, r2, #29
 8003052:	d047      	beq.n	80030e4 <__aeabi_d2f+0xf8>
 8003054:	230f      	movs	r3, #15
 8003056:	4013      	ands	r3, r2
 8003058:	2b04      	cmp	r3, #4
 800305a:	d000      	beq.n	800305e <__aeabi_d2f+0x72>
 800305c:	3204      	adds	r2, #4
 800305e:	2380      	movs	r3, #128	; 0x80
 8003060:	04db      	lsls	r3, r3, #19
 8003062:	4013      	ands	r3, r2
 8003064:	d03e      	beq.n	80030e4 <__aeabi_d2f+0xf8>
 8003066:	1c48      	adds	r0, r1, #1
 8003068:	29fe      	cmp	r1, #254	; 0xfe
 800306a:	d0d1      	beq.n	8003010 <__aeabi_d2f+0x24>
 800306c:	0192      	lsls	r2, r2, #6
 800306e:	0a52      	lsrs	r2, r2, #9
 8003070:	b2c0      	uxtb	r0, r0
 8003072:	e7cf      	b.n	8003014 <__aeabi_d2f+0x28>
 8003074:	2000      	movs	r0, #0
 8003076:	2200      	movs	r2, #0
 8003078:	e7cc      	b.n	8003014 <__aeabi_d2f+0x28>
 800307a:	000a      	movs	r2, r1
 800307c:	3217      	adds	r2, #23
 800307e:	db2f      	blt.n	80030e0 <__aeabi_d2f+0xf4>
 8003080:	2680      	movs	r6, #128	; 0x80
 8003082:	0436      	lsls	r6, r6, #16
 8003084:	432e      	orrs	r6, r5
 8003086:	251e      	movs	r5, #30
 8003088:	1a6d      	subs	r5, r5, r1
 800308a:	2d1f      	cmp	r5, #31
 800308c:	dd11      	ble.n	80030b2 <__aeabi_d2f+0xc6>
 800308e:	2202      	movs	r2, #2
 8003090:	4252      	negs	r2, r2
 8003092:	1a52      	subs	r2, r2, r1
 8003094:	0031      	movs	r1, r6
 8003096:	40d1      	lsrs	r1, r2
 8003098:	2d20      	cmp	r5, #32
 800309a:	d004      	beq.n	80030a6 <__aeabi_d2f+0xba>
 800309c:	4a14      	ldr	r2, [pc, #80]	; (80030f0 <__aeabi_d2f+0x104>)
 800309e:	4694      	mov	ip, r2
 80030a0:	4463      	add	r3, ip
 80030a2:	409e      	lsls	r6, r3
 80030a4:	4337      	orrs	r7, r6
 80030a6:	003a      	movs	r2, r7
 80030a8:	1e53      	subs	r3, r2, #1
 80030aa:	419a      	sbcs	r2, r3
 80030ac:	430a      	orrs	r2, r1
 80030ae:	2100      	movs	r1, #0
 80030b0:	e7ce      	b.n	8003050 <__aeabi_d2f+0x64>
 80030b2:	4a10      	ldr	r2, [pc, #64]	; (80030f4 <__aeabi_d2f+0x108>)
 80030b4:	0038      	movs	r0, r7
 80030b6:	4694      	mov	ip, r2
 80030b8:	4463      	add	r3, ip
 80030ba:	4098      	lsls	r0, r3
 80030bc:	003a      	movs	r2, r7
 80030be:	1e41      	subs	r1, r0, #1
 80030c0:	4188      	sbcs	r0, r1
 80030c2:	409e      	lsls	r6, r3
 80030c4:	40ea      	lsrs	r2, r5
 80030c6:	4330      	orrs	r0, r6
 80030c8:	4302      	orrs	r2, r0
 80030ca:	2100      	movs	r1, #0
 80030cc:	0753      	lsls	r3, r2, #29
 80030ce:	d1c1      	bne.n	8003054 <__aeabi_d2f+0x68>
 80030d0:	2180      	movs	r1, #128	; 0x80
 80030d2:	0013      	movs	r3, r2
 80030d4:	04c9      	lsls	r1, r1, #19
 80030d6:	2001      	movs	r0, #1
 80030d8:	400b      	ands	r3, r1
 80030da:	420a      	tst	r2, r1
 80030dc:	d1c6      	bne.n	800306c <__aeabi_d2f+0x80>
 80030de:	e7a3      	b.n	8003028 <__aeabi_d2f+0x3c>
 80030e0:	2300      	movs	r3, #0
 80030e2:	e7a0      	b.n	8003026 <__aeabi_d2f+0x3a>
 80030e4:	000b      	movs	r3, r1
 80030e6:	e79f      	b.n	8003028 <__aeabi_d2f+0x3c>
 80030e8:	000007fe 	.word	0x000007fe
 80030ec:	fffffc80 	.word	0xfffffc80
 80030f0:	fffffca2 	.word	0xfffffca2
 80030f4:	fffffc82 	.word	0xfffffc82

080030f8 <__clzsi2>:
 80030f8:	211c      	movs	r1, #28
 80030fa:	2301      	movs	r3, #1
 80030fc:	041b      	lsls	r3, r3, #16
 80030fe:	4298      	cmp	r0, r3
 8003100:	d301      	bcc.n	8003106 <__clzsi2+0xe>
 8003102:	0c00      	lsrs	r0, r0, #16
 8003104:	3910      	subs	r1, #16
 8003106:	0a1b      	lsrs	r3, r3, #8
 8003108:	4298      	cmp	r0, r3
 800310a:	d301      	bcc.n	8003110 <__clzsi2+0x18>
 800310c:	0a00      	lsrs	r0, r0, #8
 800310e:	3908      	subs	r1, #8
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	4298      	cmp	r0, r3
 8003114:	d301      	bcc.n	800311a <__clzsi2+0x22>
 8003116:	0900      	lsrs	r0, r0, #4
 8003118:	3904      	subs	r1, #4
 800311a:	a202      	add	r2, pc, #8	; (adr r2, 8003124 <__clzsi2+0x2c>)
 800311c:	5c10      	ldrb	r0, [r2, r0]
 800311e:	1840      	adds	r0, r0, r1
 8003120:	4770      	bx	lr
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	02020304 	.word	0x02020304
 8003128:	01010101 	.word	0x01010101
	...

08003134 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0

}
 8003138:	46c0      	nop			; (mov r8, r8)
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	af00      	add	r7, sp, #0
return 0;
 8003142:	2300      	movs	r3, #0
}
 8003144:	0018      	movs	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800314c:	b590      	push	{r4, r7, lr}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8003152:	1d3b      	adds	r3, r7, #4
 8003154:	4a08      	ldr	r2, [pc, #32]	; (8003178 <MX_FREERTOS_Init+0x2c>)
 8003156:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003158:	c313      	stmia	r3!, {r0, r1, r4}
 800315a:	ca03      	ldmia	r2!, {r0, r1}
 800315c:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800315e:	1d3b      	adds	r3, r7, #4
 8003160:	2100      	movs	r1, #0
 8003162:	0018      	movs	r0, r3
 8003164:	f006 fdcb 	bl	8009cfe <osThreadCreate>
 8003168:	0002      	movs	r2, r0
 800316a:	4b04      	ldr	r3, [pc, #16]	; (800317c <MX_FREERTOS_Init+0x30>)
 800316c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	46bd      	mov	sp, r7
 8003172:	b007      	add	sp, #28
 8003174:	bd90      	pop	{r4, r7, pc}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	08010814 	.word	0x08010814
 800317c:	200000c4 	.word	0x200000c4

08003180 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003188:	2001      	movs	r0, #1
 800318a:	f006 fde0 	bl	8009d4e <osDelay>
 800318e:	e7fb      	b.n	8003188 <StartDefaultTask+0x8>

08003190 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <MX_DMA_Init+0x48>)
 8003198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800319a:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <MX_DMA_Init+0x48>)
 800319c:	2101      	movs	r1, #1
 800319e:	430a      	orrs	r2, r1
 80031a0:	639a      	str	r2, [r3, #56]	; 0x38
 80031a2:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <MX_DMA_Init+0x48>)
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	2201      	movs	r2, #1
 80031a8:	4013      	ands	r3, r2
 80031aa:	607b      	str	r3, [r7, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80031ae:	2200      	movs	r2, #0
 80031b0:	2103      	movs	r1, #3
 80031b2:	2009      	movs	r0, #9
 80031b4:	f002 f910 	bl	80053d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80031b8:	2009      	movs	r0, #9
 80031ba:	f002 f922 	bl	8005402 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 80031be:	2200      	movs	r2, #0
 80031c0:	2103      	movs	r1, #3
 80031c2:	200a      	movs	r0, #10
 80031c4:	f002 f908 	bl	80053d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80031c8:	200a      	movs	r0, #10
 80031ca:	f002 f91a 	bl	8005402 <HAL_NVIC_EnableIRQ>

}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b002      	add	sp, #8
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	40021000 	.word	0x40021000

080031dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80031dc:	b590      	push	{r4, r7, lr}
 80031de:	b08b      	sub	sp, #44	; 0x2c
 80031e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e2:	2414      	movs	r4, #20
 80031e4:	193b      	adds	r3, r7, r4
 80031e6:	0018      	movs	r0, r3
 80031e8:	2314      	movs	r3, #20
 80031ea:	001a      	movs	r2, r3
 80031ec:	2100      	movs	r1, #0
 80031ee:	f00a fcf9 	bl	800dbe4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80031f2:	4b58      	ldr	r3, [pc, #352]	; (8003354 <MX_GPIO_Init+0x178>)
 80031f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031f6:	4b57      	ldr	r3, [pc, #348]	; (8003354 <MX_GPIO_Init+0x178>)
 80031f8:	2120      	movs	r1, #32
 80031fa:	430a      	orrs	r2, r1
 80031fc:	635a      	str	r2, [r3, #52]	; 0x34
 80031fe:	4b55      	ldr	r3, [pc, #340]	; (8003354 <MX_GPIO_Init+0x178>)
 8003200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003202:	2220      	movs	r2, #32
 8003204:	4013      	ands	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
 8003208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800320a:	4b52      	ldr	r3, [pc, #328]	; (8003354 <MX_GPIO_Init+0x178>)
 800320c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800320e:	4b51      	ldr	r3, [pc, #324]	; (8003354 <MX_GPIO_Init+0x178>)
 8003210:	2101      	movs	r1, #1
 8003212:	430a      	orrs	r2, r1
 8003214:	635a      	str	r2, [r3, #52]	; 0x34
 8003216:	4b4f      	ldr	r3, [pc, #316]	; (8003354 <MX_GPIO_Init+0x178>)
 8003218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321a:	2201      	movs	r2, #1
 800321c:	4013      	ands	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003222:	4b4c      	ldr	r3, [pc, #304]	; (8003354 <MX_GPIO_Init+0x178>)
 8003224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003226:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <MX_GPIO_Init+0x178>)
 8003228:	2104      	movs	r1, #4
 800322a:	430a      	orrs	r2, r1
 800322c:	635a      	str	r2, [r3, #52]	; 0x34
 800322e:	4b49      	ldr	r3, [pc, #292]	; (8003354 <MX_GPIO_Init+0x178>)
 8003230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003232:	2204      	movs	r2, #4
 8003234:	4013      	ands	r3, r2
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800323a:	4b46      	ldr	r3, [pc, #280]	; (8003354 <MX_GPIO_Init+0x178>)
 800323c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800323e:	4b45      	ldr	r3, [pc, #276]	; (8003354 <MX_GPIO_Init+0x178>)
 8003240:	2102      	movs	r1, #2
 8003242:	430a      	orrs	r2, r1
 8003244:	635a      	str	r2, [r3, #52]	; 0x34
 8003246:	4b43      	ldr	r3, [pc, #268]	; (8003354 <MX_GPIO_Init+0x178>)
 8003248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324a:	2202      	movs	r2, #2
 800324c:	4013      	ands	r3, r2
 800324e:	607b      	str	r3, [r7, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003252:	4b40      	ldr	r3, [pc, #256]	; (8003354 <MX_GPIO_Init+0x178>)
 8003254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003256:	4b3f      	ldr	r3, [pc, #252]	; (8003354 <MX_GPIO_Init+0x178>)
 8003258:	2108      	movs	r1, #8
 800325a:	430a      	orrs	r2, r1
 800325c:	635a      	str	r2, [r3, #52]	; 0x34
 800325e:	4b3d      	ldr	r3, [pc, #244]	; (8003354 <MX_GPIO_Init+0x178>)
 8003260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003262:	2208      	movs	r2, #8
 8003264:	4013      	ands	r3, r2
 8003266:	603b      	str	r3, [r7, #0]
 8003268:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LIDAR_M_EN_Pin|LIDAR_DEV_EN_Pin, GPIO_PIN_RESET);
 800326a:	4b3b      	ldr	r3, [pc, #236]	; (8003358 <MX_GPIO_Init+0x17c>)
 800326c:	2200      	movs	r2, #0
 800326e:	2130      	movs	r1, #48	; 0x30
 8003270:	0018      	movs	r0, r3
 8003272:	f002 fd59 	bl	8005d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_ORANGE_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8003276:	23e0      	movs	r3, #224	; 0xe0
 8003278:	019b      	lsls	r3, r3, #6
 800327a:	4838      	ldr	r0, [pc, #224]	; (800335c <MX_GPIO_Init+0x180>)
 800327c:	2200      	movs	r2, #0
 800327e:	0019      	movs	r1, r3
 8003280:	f002 fd52 	bl	8005d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LIDAR_M_EN_Pin|LIDAR_DEV_EN_Pin;
 8003284:	193b      	adds	r3, r7, r4
 8003286:	2230      	movs	r2, #48	; 0x30
 8003288:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800328a:	193b      	adds	r3, r7, r4
 800328c:	2201      	movs	r2, #1
 800328e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003290:	193b      	adds	r3, r7, r4
 8003292:	2201      	movs	r2, #1
 8003294:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003296:	193b      	adds	r3, r7, r4
 8003298:	2200      	movs	r2, #0
 800329a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800329c:	193b      	adds	r3, r7, r4
 800329e:	4a2e      	ldr	r2, [pc, #184]	; (8003358 <MX_GPIO_Init+0x17c>)
 80032a0:	0019      	movs	r1, r3
 80032a2:	0010      	movs	r0, r2
 80032a4:	f002 fbdc 	bl	8005a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_ORANGE_Pin|LED_GREEN_Pin;
 80032a8:	0021      	movs	r1, r4
 80032aa:	187b      	adds	r3, r7, r1
 80032ac:	22e0      	movs	r2, #224	; 0xe0
 80032ae:	0192      	lsls	r2, r2, #6
 80032b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032b2:	000c      	movs	r4, r1
 80032b4:	193b      	adds	r3, r7, r4
 80032b6:	2201      	movs	r2, #1
 80032b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ba:	193b      	adds	r3, r7, r4
 80032bc:	2200      	movs	r2, #0
 80032be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c0:	193b      	adds	r3, r7, r4
 80032c2:	2200      	movs	r2, #0
 80032c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c6:	193b      	adds	r3, r7, r4
 80032c8:	4a24      	ldr	r2, [pc, #144]	; (800335c <MX_GPIO_Init+0x180>)
 80032ca:	0019      	movs	r1, r3
 80032cc:	0010      	movs	r0, r2
 80032ce:	f002 fbc7 	bl	8005a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BORDER_BACK_Pin;
 80032d2:	0021      	movs	r1, r4
 80032d4:	187b      	adds	r3, r7, r1
 80032d6:	2204      	movs	r2, #4
 80032d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032da:	187b      	adds	r3, r7, r1
 80032dc:	2288      	movs	r2, #136	; 0x88
 80032de:	0352      	lsls	r2, r2, #13
 80032e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032e2:	187b      	adds	r3, r7, r1
 80032e4:	2201      	movs	r2, #1
 80032e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BORDER_BACK_GPIO_Port, &GPIO_InitStruct);
 80032e8:	000c      	movs	r4, r1
 80032ea:	187b      	adds	r3, r7, r1
 80032ec:	4a1c      	ldr	r2, [pc, #112]	; (8003360 <MX_GPIO_Init+0x184>)
 80032ee:	0019      	movs	r1, r3
 80032f0:	0010      	movs	r0, r2
 80032f2:	f002 fbb5 	bl	8005a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BORDER_FRONT_Pin;
 80032f6:	0021      	movs	r1, r4
 80032f8:	187b      	adds	r3, r7, r1
 80032fa:	2208      	movs	r2, #8
 80032fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032fe:	187b      	adds	r3, r7, r1
 8003300:	2288      	movs	r2, #136	; 0x88
 8003302:	0352      	lsls	r2, r2, #13
 8003304:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003306:	187b      	adds	r3, r7, r1
 8003308:	2202      	movs	r2, #2
 800330a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BORDER_FRONT_GPIO_Port, &GPIO_InitStruct);
 800330c:	000c      	movs	r4, r1
 800330e:	187b      	adds	r3, r7, r1
 8003310:	4a13      	ldr	r2, [pc, #76]	; (8003360 <MX_GPIO_Init+0x184>)
 8003312:	0019      	movs	r1, r3
 8003314:	0010      	movs	r0, r2
 8003316:	f002 fba3 	bl	8005a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BUMPER_L_Pin|BUMPER_R_Pin|BUMPER_B_Pin|BUMPER_F_Pin;
 800331a:	0021      	movs	r1, r4
 800331c:	187b      	adds	r3, r7, r1
 800331e:	22f0      	movs	r2, #240	; 0xf0
 8003320:	0092      	lsls	r2, r2, #2
 8003322:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003324:	187b      	adds	r3, r7, r1
 8003326:	2200      	movs	r2, #0
 8003328:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800332a:	187b      	adds	r3, r7, r1
 800332c:	2202      	movs	r2, #2
 800332e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003330:	187b      	adds	r3, r7, r1
 8003332:	4a0a      	ldr	r2, [pc, #40]	; (800335c <MX_GPIO_Init+0x180>)
 8003334:	0019      	movs	r1, r3
 8003336:	0010      	movs	r0, r2
 8003338:	f002 fb92 	bl	8005a60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 800333c:	2200      	movs	r2, #0
 800333e:	2103      	movs	r1, #3
 8003340:	2006      	movs	r0, #6
 8003342:	f002 f849 	bl	80053d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003346:	2006      	movs	r0, #6
 8003348:	f002 f85b 	bl	8005402 <HAL_NVIC_EnableIRQ>

}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	b00b      	add	sp, #44	; 0x2c
 8003352:	bd90      	pop	{r4, r7, pc}
 8003354:	40021000 	.word	0x40021000
 8003358:	50000800 	.word	0x50000800
 800335c:	50000400 	.word	0x50000400
 8003360:	50000c00 	.word	0x50000c00

08003364 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 800336c:	2301      	movs	r3, #1
 800336e:	425b      	negs	r3, r3
 8003370:	1d39      	adds	r1, r7, #4
 8003372:	4804      	ldr	r0, [pc, #16]	; (8003384 <__io_putchar+0x20>)
 8003374:	2201      	movs	r2, #1
 8003376:	f005 f841 	bl	80083fc <HAL_UART_Transmit>
	return chr;
 800337a:	687b      	ldr	r3, [r7, #4]
}
 800337c:	0018      	movs	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	b002      	add	sp, #8
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20000370 	.word	0x20000370

08003388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003388:	b590      	push	{r4, r7, lr}
 800338a:	b085      	sub	sp, #20
 800338c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800338e:	f001 ff5f 	bl	8005250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003392:	f000 f8b5 	bl	8003500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003396:	f7ff ff21 	bl	80031dc <MX_GPIO_Init>
  MX_DMA_Init();
 800339a:	f7ff fef9 	bl	8003190 <MX_DMA_Init>
  MX_TIM1_Init();
 800339e:	f001 f911 	bl	80045c4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80033a2:	f001 f979 	bl	8004698 <MX_TIM3_Init>
  MX_TIM14_Init();
 80033a6:	f001 f9db 	bl	8004760 <MX_TIM14_Init>
  MX_TIM15_Init();
 80033aa:	f001 fa27 	bl	80047fc <MX_TIM15_Init>
  MX_TIM16_Init();
 80033ae:	f001 fae9 	bl	8004984 <MX_TIM16_Init>
  MX_TIM17_Init();
 80033b2:	f001 fb6f 	bl	8004a94 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 80033b6:	f001 fd99 	bl	8004eec <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 80033ba:	f001 fde9 	bl	8004f90 <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */
	printf("================== boot ================\n");
 80033be:	4b40      	ldr	r3, [pc, #256]	; (80034c0 <main+0x138>)
 80033c0:	0018      	movs	r0, r3
 80033c2:	f00a fb13 	bl	800d9ec <puts>

	// TIMER PWM LIDAR
	if(START_PWM(pwm_lidar) != HAL_OK)
 80033c6:	4b3f      	ldr	r3, [pc, #252]	; (80034c4 <main+0x13c>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4b3e      	ldr	r3, [pc, #248]	; (80034c4 <main+0x13c>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	0019      	movs	r1, r3
 80033d0:	0010      	movs	r0, r2
 80033d2:	f003 fce5 	bl	8006da0 <HAL_TIM_PWM_Start>
 80033d6:	1e03      	subs	r3, r0, #0
 80033d8:	d005      	beq.n	80033e6 <main+0x5e>
	{
		printf("ERROR: PWM Start LIDAR\r\n");
 80033da:	4b3b      	ldr	r3, [pc, #236]	; (80034c8 <main+0x140>)
 80033dc:	0018      	movs	r0, r3
 80033de:	f00a fb05 	bl	800d9ec <puts>
		Error_Handler();
 80033e2:	f000 f8f9 	bl	80035d8 <Error_Handler>
	}

	// TIMER PWM MOTORS
	if((START_PWM(pwm_rev_left) != HAL_OK) || (START_PWM(pwm_fwd_left) != HAL_OK) ||
 80033e6:	4b39      	ldr	r3, [pc, #228]	; (80034cc <main+0x144>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	4b38      	ldr	r3, [pc, #224]	; (80034cc <main+0x144>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	0019      	movs	r1, r3
 80033f0:	0010      	movs	r0, r2
 80033f2:	f003 fcd5 	bl	8006da0 <HAL_TIM_PWM_Start>
 80033f6:	1e03      	subs	r3, r0, #0
 80033f8:	d11d      	bne.n	8003436 <main+0xae>
 80033fa:	4b35      	ldr	r3, [pc, #212]	; (80034d0 <main+0x148>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4b34      	ldr	r3, [pc, #208]	; (80034d0 <main+0x148>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	0019      	movs	r1, r3
 8003404:	0010      	movs	r0, r2
 8003406:	f003 fccb 	bl	8006da0 <HAL_TIM_PWM_Start>
 800340a:	1e03      	subs	r3, r0, #0
 800340c:	d113      	bne.n	8003436 <main+0xae>
			(START_PWM(pwm_rev_right) != HAL_OK) || (START_PWM(pwm_fwd_right) != HAL_OK))
 800340e:	4b31      	ldr	r3, [pc, #196]	; (80034d4 <main+0x14c>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	4b30      	ldr	r3, [pc, #192]	; (80034d4 <main+0x14c>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	0019      	movs	r1, r3
 8003418:	0010      	movs	r0, r2
 800341a:	f003 fcc1 	bl	8006da0 <HAL_TIM_PWM_Start>
 800341e:	1e03      	subs	r3, r0, #0
	if((START_PWM(pwm_rev_left) != HAL_OK) || (START_PWM(pwm_fwd_left) != HAL_OK) ||
 8003420:	d109      	bne.n	8003436 <main+0xae>
			(START_PWM(pwm_rev_right) != HAL_OK) || (START_PWM(pwm_fwd_right) != HAL_OK))
 8003422:	4b2d      	ldr	r3, [pc, #180]	; (80034d8 <main+0x150>)
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	4b2c      	ldr	r3, [pc, #176]	; (80034d8 <main+0x150>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	0019      	movs	r1, r3
 800342c:	0010      	movs	r0, r2
 800342e:	f003 fcb7 	bl	8006da0 <HAL_TIM_PWM_Start>
 8003432:	1e03      	subs	r3, r0, #0
 8003434:	d005      	beq.n	8003442 <main+0xba>
	{
		printf("ERROR: PWM Start MOTORS\r\n");
 8003436:	4b29      	ldr	r3, [pc, #164]	; (80034dc <main+0x154>)
 8003438:	0018      	movs	r0, r3
 800343a:	f00a fad7 	bl	800d9ec <puts>
		Error_Handler();
 800343e:	f000 f8cb 	bl	80035d8 <Error_Handler>
	}

	// TIMER ENCODEUR MOTORS
	if((HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL) != HAL_OK) ||
 8003442:	4b27      	ldr	r3, [pc, #156]	; (80034e0 <main+0x158>)
 8003444:	213c      	movs	r1, #60	; 0x3c
 8003446:	0018      	movs	r0, r3
 8003448:	f003 fe36 	bl	80070b8 <HAL_TIM_Encoder_Start>
 800344c:	1e03      	subs	r3, r0, #0
 800344e:	d106      	bne.n	800345e <main+0xd6>
			(HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL) != HAL_OK))
 8003450:	4b24      	ldr	r3, [pc, #144]	; (80034e4 <main+0x15c>)
 8003452:	213c      	movs	r1, #60	; 0x3c
 8003454:	0018      	movs	r0, r3
 8003456:	f003 fe2f 	bl	80070b8 <HAL_TIM_Encoder_Start>
 800345a:	1e03      	subs	r3, r0, #0
	if((HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL) != HAL_OK) ||
 800345c:	d005      	beq.n	800346a <main+0xe2>
	{
		printf("ERROR: ENCODEUR Start MOTORS\r\n");
 800345e:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <main+0x160>)
 8003460:	0018      	movs	r0, r3
 8003462:	f00a fac3 	bl	800d9ec <puts>
		Error_Handler();
 8003466:	f000 f8b7 	bl	80035d8 <Error_Handler>
	}

	// PID struct init
	initPID(&pid_motor_left, 0.5, 0, 0, TE);
 800346a:	2400      	movs	r4, #0
 800346c:	2200      	movs	r2, #0
 800346e:	21fc      	movs	r1, #252	; 0xfc
 8003470:	0589      	lsls	r1, r1, #22
 8003472:	481e      	ldr	r0, [pc, #120]	; (80034ec <main+0x164>)
 8003474:	4b1e      	ldr	r3, [pc, #120]	; (80034f0 <main+0x168>)
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	1c23      	adds	r3, r4, #0
 800347a:	f000 fb77 	bl	8003b6c <initPID>
	initPID(&pid_motor_right, 0.5, 0, 0, TE);
 800347e:	2400      	movs	r4, #0
 8003480:	2200      	movs	r2, #0
 8003482:	21fc      	movs	r1, #252	; 0xfc
 8003484:	0589      	lsls	r1, r1, #22
 8003486:	481b      	ldr	r0, [pc, #108]	; (80034f4 <main+0x16c>)
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <main+0x168>)
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	1c23      	adds	r3, r4, #0
 800348e:	f000 fb6d 	bl	8003b6c <initPID>

	// Motor struct init
	initMotor(&motor_left, &pwm_fwd_left, &pwm_rev_left, &htim3);
 8003492:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <main+0x15c>)
 8003494:	4a0d      	ldr	r2, [pc, #52]	; (80034cc <main+0x144>)
 8003496:	490e      	ldr	r1, [pc, #56]	; (80034d0 <main+0x148>)
 8003498:	4817      	ldr	r0, [pc, #92]	; (80034f8 <main+0x170>)
 800349a:	f000 fa4b 	bl	8003934 <initMotor>
	initMotor(&motor_right, &pwm_fwd_right, &pwm_rev_right, &htim1);
 800349e:	4b10      	ldr	r3, [pc, #64]	; (80034e0 <main+0x158>)
 80034a0:	4a0c      	ldr	r2, [pc, #48]	; (80034d4 <main+0x14c>)
 80034a2:	490d      	ldr	r1, [pc, #52]	; (80034d8 <main+0x150>)
 80034a4:	4815      	ldr	r0, [pc, #84]	; (80034fc <main+0x174>)
 80034a6:	f000 fa45 	bl	8003934 <initMotor>

	//__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1 ,85);

	bool ret = createMainTask();
 80034aa:	1dfc      	adds	r4, r7, #7
 80034ac:	f000 fa12 	bl	80038d4 <createMainTask>
 80034b0:	0003      	movs	r3, r0
 80034b2:	7023      	strb	r3, [r4, #0]

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80034b4:	f7ff fe4a 	bl	800314c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80034b8:	f006 fc19 	bl	8009cee <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  

  while (1)
 80034bc:	e7fe      	b.n	80034bc <main+0x134>
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	08010828 	.word	0x08010828
 80034c4:	20000020 	.word	0x20000020
 80034c8:	08010854 	.word	0x08010854
 80034cc:	20000000 	.word	0x20000000
 80034d0:	20000008 	.word	0x20000008
 80034d4:	20000010 	.word	0x20000010
 80034d8:	20000018 	.word	0x20000018
 80034dc:	0801086c 	.word	0x0801086c
 80034e0:	200001a8 	.word	0x200001a8
 80034e4:	200001f4 	.word	0x200001f4
 80034e8:	08010888 	.word	0x08010888
 80034ec:	200000f4 	.word	0x200000f4
 80034f0:	43fa0000 	.word	0x43fa0000
 80034f4:	2000011c 	.word	0x2000011c
 80034f8:	200000d4 	.word	0x200000d4
 80034fc:	200000e4 	.word	0x200000e4

08003500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003500:	b590      	push	{r4, r7, lr}
 8003502:	b093      	sub	sp, #76	; 0x4c
 8003504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003506:	2414      	movs	r4, #20
 8003508:	193b      	adds	r3, r7, r4
 800350a:	0018      	movs	r0, r3
 800350c:	2334      	movs	r3, #52	; 0x34
 800350e:	001a      	movs	r2, r3
 8003510:	2100      	movs	r1, #0
 8003512:	f00a fb67 	bl	800dbe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003516:	1d3b      	adds	r3, r7, #4
 8003518:	0018      	movs	r0, r3
 800351a:	2310      	movs	r3, #16
 800351c:	001a      	movs	r2, r3
 800351e:	2100      	movs	r1, #0
 8003520:	f00a fb60 	bl	800dbe4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003524:	2380      	movs	r3, #128	; 0x80
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	0018      	movs	r0, r3
 800352a:	f002 fc69 	bl	8005e00 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800352e:	193b      	adds	r3, r7, r4
 8003530:	2202      	movs	r2, #2
 8003532:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003534:	193b      	adds	r3, r7, r4
 8003536:	2280      	movs	r2, #128	; 0x80
 8003538:	0052      	lsls	r2, r2, #1
 800353a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800353c:	0021      	movs	r1, r4
 800353e:	187b      	adds	r3, r7, r1
 8003540:	2200      	movs	r2, #0
 8003542:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003544:	187b      	adds	r3, r7, r1
 8003546:	2240      	movs	r2, #64	; 0x40
 8003548:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800354a:	187b      	adds	r3, r7, r1
 800354c:	2202      	movs	r2, #2
 800354e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003550:	187b      	adds	r3, r7, r1
 8003552:	2202      	movs	r2, #2
 8003554:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003556:	187b      	adds	r3, r7, r1
 8003558:	2200      	movs	r2, #0
 800355a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800355c:	187b      	adds	r3, r7, r1
 800355e:	2208      	movs	r2, #8
 8003560:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003562:	187b      	adds	r3, r7, r1
 8003564:	2280      	movs	r2, #128	; 0x80
 8003566:	0292      	lsls	r2, r2, #10
 8003568:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800356a:	187b      	adds	r3, r7, r1
 800356c:	2280      	movs	r2, #128	; 0x80
 800356e:	0592      	lsls	r2, r2, #22
 8003570:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003572:	187b      	adds	r3, r7, r1
 8003574:	0018      	movs	r0, r3
 8003576:	f002 fc8f 	bl	8005e98 <HAL_RCC_OscConfig>
 800357a:	1e03      	subs	r3, r0, #0
 800357c:	d001      	beq.n	8003582 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800357e:	f000 f82b 	bl	80035d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003582:	1d3b      	adds	r3, r7, #4
 8003584:	2207      	movs	r2, #7
 8003586:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003588:	1d3b      	adds	r3, r7, #4
 800358a:	2202      	movs	r2, #2
 800358c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800358e:	1d3b      	adds	r3, r7, #4
 8003590:	2200      	movs	r2, #0
 8003592:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003594:	1d3b      	adds	r3, r7, #4
 8003596:	2200      	movs	r2, #0
 8003598:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800359a:	1d3b      	adds	r3, r7, #4
 800359c:	2102      	movs	r1, #2
 800359e:	0018      	movs	r0, r3
 80035a0:	f002 ff8a 	bl	80064b8 <HAL_RCC_ClockConfig>
 80035a4:	1e03      	subs	r3, r0, #0
 80035a6:	d001      	beq.n	80035ac <SystemClock_Config+0xac>
  {
    Error_Handler();
 80035a8:	f000 f816 	bl	80035d8 <Error_Handler>
  }
}
 80035ac:	46c0      	nop			; (mov r8, r8)
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b013      	add	sp, #76	; 0x4c
 80035b2:	bd90      	pop	{r4, r7, pc}

080035b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a04      	ldr	r2, [pc, #16]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d101      	bne.n	80035ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80035c6:	f001 fe63 	bl	8005290 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b002      	add	sp, #8
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	40001000 	.word	0x40001000

080035d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035dc:	b672      	cpsid	i
}
 80035de:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035e0:	e7fe      	b.n	80035e0 <Error_Handler+0x8>
	...

080035e4 <HAL_GPIO_EXTI_Rising_Callback>:
}mainHandle_t;

TaskHandle_t h_task_main;
mainHandle_t mainHandle;

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	0002      	movs	r2, r0
 80035ec:	1dbb      	adds	r3, r7, #6
 80035ee:	801a      	strh	r2, [r3, #0]
	LOG_MAIN_ENTER();
 80035f0:	4a3e      	ldr	r2, [pc, #248]	; (80036ec <HAL_GPIO_EXTI_Rising_Callback+0x108>)
 80035f2:	4b3f      	ldr	r3, [pc, #252]	; (80036f0 <HAL_GPIO_EXTI_Rising_Callback+0x10c>)
 80035f4:	0011      	movs	r1, r2
 80035f6:	0018      	movs	r0, r3
 80035f8:	f00a f992 	bl	800d920 <iprintf>
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]
	if(GPIO_Pin == BUMPER_F_Pin) {
 8003600:	1dbb      	adds	r3, r7, #6
 8003602:	881a      	ldrh	r2, [r3, #0]
 8003604:	2380      	movs	r3, #128	; 0x80
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	429a      	cmp	r2, r3
 800360a:	d10a      	bne.n	8003622 <HAL_GPIO_EXTI_Rising_Callback+0x3e>
		xTaskNotifyFromISR(h_task_main, BUMPER_F_NOTIFY, eSetBits, &xHigherPriorityTaskWoken);
 800360c:	4b39      	ldr	r3, [pc, #228]	; (80036f4 <HAL_GPIO_EXTI_Rising_Callback+0x110>)
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	230c      	movs	r3, #12
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	2300      	movs	r3, #0
 8003618:	2201      	movs	r2, #1
 800361a:	2100      	movs	r1, #0
 800361c:	f008 f892 	bl	800b744 <xTaskGenericNotifyFromISR>
 8003620:	e059      	b.n	80036d6 <HAL_GPIO_EXTI_Rising_Callback+0xf2>
	} else if(GPIO_Pin == BUMPER_B_Pin) {
 8003622:	1dbb      	adds	r3, r7, #6
 8003624:	881a      	ldrh	r2, [r3, #0]
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	429a      	cmp	r2, r3
 800362c:	d10a      	bne.n	8003644 <HAL_GPIO_EXTI_Rising_Callback+0x60>
		xTaskNotifyFromISR(h_task_main, BUMPER_B_NOTIFY, eSetBits, &xHigherPriorityTaskWoken );
 800362e:	4b31      	ldr	r3, [pc, #196]	; (80036f4 <HAL_GPIO_EXTI_Rising_Callback+0x110>)
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	230c      	movs	r3, #12
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	2300      	movs	r3, #0
 800363a:	2201      	movs	r2, #1
 800363c:	2101      	movs	r1, #1
 800363e:	f008 f881 	bl	800b744 <xTaskGenericNotifyFromISR>
 8003642:	e048      	b.n	80036d6 <HAL_GPIO_EXTI_Rising_Callback+0xf2>
	} else if(GPIO_Pin == BUMPER_R_Pin) {
 8003644:	1dbb      	adds	r3, r7, #6
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	2b80      	cmp	r3, #128	; 0x80
 800364a:	d10a      	bne.n	8003662 <HAL_GPIO_EXTI_Rising_Callback+0x7e>
		xTaskNotifyFromISR(h_task_main, BUMPER_R_NOTIFY, eSetBits, &xHigherPriorityTaskWoken );
 800364c:	4b29      	ldr	r3, [pc, #164]	; (80036f4 <HAL_GPIO_EXTI_Rising_Callback+0x110>)
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	230c      	movs	r3, #12
 8003652:	18fb      	adds	r3, r7, r3
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	2300      	movs	r3, #0
 8003658:	2201      	movs	r2, #1
 800365a:	2102      	movs	r1, #2
 800365c:	f008 f872 	bl	800b744 <xTaskGenericNotifyFromISR>
 8003660:	e039      	b.n	80036d6 <HAL_GPIO_EXTI_Rising_Callback+0xf2>
	} else if(GPIO_Pin == BUMPER_L_Pin) {
 8003662:	1dbb      	adds	r3, r7, #6
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	2b40      	cmp	r3, #64	; 0x40
 8003668:	d10a      	bne.n	8003680 <HAL_GPIO_EXTI_Rising_Callback+0x9c>
		xTaskNotifyFromISR(h_task_main, BUMPER_L_NOTIFY, eSetBits, &xHigherPriorityTaskWoken );
 800366a:	4b22      	ldr	r3, [pc, #136]	; (80036f4 <HAL_GPIO_EXTI_Rising_Callback+0x110>)
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	230c      	movs	r3, #12
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	2300      	movs	r3, #0
 8003676:	2201      	movs	r2, #1
 8003678:	2103      	movs	r1, #3
 800367a:	f008 f863 	bl	800b744 <xTaskGenericNotifyFromISR>
 800367e:	e02a      	b.n	80036d6 <HAL_GPIO_EXTI_Rising_Callback+0xf2>
	} else if(GPIO_Pin == BORDER_FRONT_Pin) {
 8003680:	1dbb      	adds	r3, r7, #6
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	2b08      	cmp	r3, #8
 8003686:	d111      	bne.n	80036ac <HAL_GPIO_EXTI_Rising_Callback+0xc8>
		HAL_GPIO_TogglePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8003688:	2380      	movs	r3, #128	; 0x80
 800368a:	015b      	lsls	r3, r3, #5
 800368c:	4a1a      	ldr	r2, [pc, #104]	; (80036f8 <HAL_GPIO_EXTI_Rising_Callback+0x114>)
 800368e:	0019      	movs	r1, r3
 8003690:	0010      	movs	r0, r2
 8003692:	f002 fb66 	bl	8005d62 <HAL_GPIO_TogglePin>
		xTaskNotifyFromISR(getPositionMotorTaskHandle(), BORDER_F_NOTIFY, eSetBits, &xHigherPriorityTaskWoken );
 8003696:	f000 fe95 	bl	80043c4 <getPositionMotorTaskHandle>
 800369a:	230c      	movs	r3, #12
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	2300      	movs	r3, #0
 80036a2:	2201      	movs	r2, #1
 80036a4:	2104      	movs	r1, #4
 80036a6:	f008 f84d 	bl	800b744 <xTaskGenericNotifyFromISR>
 80036aa:	e014      	b.n	80036d6 <HAL_GPIO_EXTI_Rising_Callback+0xf2>
	} else if(GPIO_Pin == BORDER_BACK_Pin) {
 80036ac:	1dbb      	adds	r3, r7, #6
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d110      	bne.n	80036d6 <HAL_GPIO_EXTI_Rising_Callback+0xf2>
		HAL_GPIO_TogglePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 80036b4:	2380      	movs	r3, #128	; 0x80
 80036b6:	015b      	lsls	r3, r3, #5
 80036b8:	4a0f      	ldr	r2, [pc, #60]	; (80036f8 <HAL_GPIO_EXTI_Rising_Callback+0x114>)
 80036ba:	0019      	movs	r1, r3
 80036bc:	0010      	movs	r0, r2
 80036be:	f002 fb50 	bl	8005d62 <HAL_GPIO_TogglePin>
		xTaskNotifyFromISR(getPositionMotorTaskHandle(), BORDER_B_NOTIFY, eSetBits, &xHigherPriorityTaskWoken );
 80036c2:	f000 fe7f 	bl	80043c4 <getPositionMotorTaskHandle>
 80036c6:	230c      	movs	r3, #12
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	2300      	movs	r3, #0
 80036ce:	2201      	movs	r2, #1
 80036d0:	2105      	movs	r1, #5
 80036d2:	f008 f837 	bl	800b744 <xTaskGenericNotifyFromISR>
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_GPIO_EXTI_Rising_Callback+0x100>
 80036dc:	4b07      	ldr	r3, [pc, #28]	; (80036fc <HAL_GPIO_EXTI_Rising_Callback+0x118>)
 80036de:	2280      	movs	r2, #128	; 0x80
 80036e0:	0552      	lsls	r2, r2, #21
 80036e2:	601a      	str	r2, [r3, #0]
}
 80036e4:	46c0      	nop			; (mov r8, r8)
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b004      	add	sp, #16
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	08010edc 	.word	0x08010edc
 80036f0:	080108a8 	.word	0x080108a8
 80036f4:	200000c8 	.word	0x200000c8
 80036f8:	50000400 	.word	0x50000400
 80036fc:	e000ed04 	.word	0xe000ed04

08003700 <getMainState>:
 *
 * This function retrieves and returns the current state of the main system.
 *
 * @return The current state of the main system.
 */
mainState_t getMainState(void) {
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
	return mainHandle.state;
 8003704:	4b02      	ldr	r3, [pc, #8]	; (8003710 <getMainState+0x10>)
 8003706:	781b      	ldrb	r3, [r3, #0]
}
 8003708:	0018      	movs	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	200000cc 	.word	0x200000cc

08003714 <setMainState>:
 * @brief Toggles the main system state between CAT and MOUSE.
 *
 * This function toggles the main system state between CAT and MOUSE. If the
 * current state is CAT, it switches to MOUSE, and vice versa.
 */
void setMainState(void) {
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
	if(mainHandle.state == MAIN_CAT) {
 8003718:	4b08      	ldr	r3, [pc, #32]	; (800373c <setMainState+0x28>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d103      	bne.n	8003728 <setMainState+0x14>
		mainHandle.state = MAIN_MOUSE;
 8003720:	4b06      	ldr	r3, [pc, #24]	; (800373c <setMainState+0x28>)
 8003722:	2202      	movs	r2, #2
 8003724:	701a      	strb	r2, [r3, #0]
	} else if(mainHandle.state == MAIN_MOUSE) {
		mainHandle.state = MAIN_CAT;
	}
}
 8003726:	e006      	b.n	8003736 <setMainState+0x22>
	} else if(mainHandle.state == MAIN_MOUSE) {
 8003728:	4b04      	ldr	r3, [pc, #16]	; (800373c <setMainState+0x28>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d102      	bne.n	8003736 <setMainState+0x22>
		mainHandle.state = MAIN_CAT;
 8003730:	4b02      	ldr	r3, [pc, #8]	; (800373c <setMainState+0x28>)
 8003732:	2201      	movs	r2, #1
 8003734:	701a      	strb	r2, [r3, #0]
}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	200000cc 	.word	0x200000cc

08003740 <mainTask>:
 * This task is responsible for managing the overall behavior of the system.
 * It transitions between different states and performs actions based on the
 * current state. Additionally, it toggles LEDs, processes notifications, and
 * handles timeouts using a timer.
 */
void mainTask(void *param) {
 8003740:	b590      	push	{r4, r7, lr}
 8003742:	b087      	sub	sp, #28
 8003744:	af02      	add	r7, sp, #8
 8003746:	6078      	str	r0, [r7, #4]
	returncode_t status;
	uint32_t ulNotifiedValue;

	mainHandle.state = MAIN_INIT;
 8003748:	4b5e      	ldr	r3, [pc, #376]	; (80038c4 <mainTask+0x184>)
 800374a:	2200      	movs	r2, #0
 800374c:	701a      	strb	r2, [r3, #0]
	mainHandle.lastState = mainHandle.state;
 800374e:	4b5d      	ldr	r3, [pc, #372]	; (80038c4 <mainTask+0x184>)
 8003750:	781a      	ldrb	r2, [r3, #0]
 8003752:	4b5c      	ldr	r3, [pc, #368]	; (80038c4 <mainTask+0x184>)
 8003754:	705a      	strb	r2, [r3, #1]
	mainHandle.timer = xTimerCreate("Main Timer", 100, pdTRUE, NULL, NULL);
 8003756:	485c      	ldr	r0, [pc, #368]	; (80038c8 <mainTask+0x188>)
 8003758:	2300      	movs	r3, #0
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	2300      	movs	r3, #0
 800375e:	2201      	movs	r2, #1
 8003760:	2164      	movs	r1, #100	; 0x64
 8003762:	f008 f91f 	bl	800b9a4 <xTimerCreate>
 8003766:	0002      	movs	r2, r0
 8003768:	4b56      	ldr	r3, [pc, #344]	; (80038c4 <mainTask+0x184>)
 800376a:	605a      	str	r2, [r3, #4]

	while(1) {
		switch (mainHandle.state) {
 800376c:	4b55      	ldr	r3, [pc, #340]	; (80038c4 <mainTask+0x184>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b03      	cmp	r3, #3
 8003772:	d05d      	beq.n	8003830 <mainTask+0xf0>
 8003774:	dd00      	ble.n	8003778 <mainTask+0x38>
 8003776:	e06f      	b.n	8003858 <mainTask+0x118>
 8003778:	2b02      	cmp	r3, #2
 800377a:	d03e      	beq.n	80037fa <mainTask+0xba>
 800377c:	dd00      	ble.n	8003780 <mainTask+0x40>
 800377e:	e06b      	b.n	8003858 <mainTask+0x118>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <mainTask+0x4a>
 8003784:	2b01      	cmp	r3, #1
 8003786:	d01d      	beq.n	80037c4 <mainTask+0x84>
 8003788:	e066      	b.n	8003858 <mainTask+0x118>
			case MAIN_INIT: {
				if(xTimerIsTimerActive(mainHandle.timer) == pdFALSE) {
 800378a:	4b4e      	ldr	r3, [pc, #312]	; (80038c4 <mainTask+0x184>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	0018      	movs	r0, r3
 8003790:	f008 fc14 	bl	800bfbc <xTimerIsTimerActive>
 8003794:	1e03      	subs	r3, r0, #0
 8003796:	d111      	bne.n	80037bc <mainTask+0x7c>
					xTimerStart(mainHandle.timer, 0);
 8003798:	4b4a      	ldr	r3, [pc, #296]	; (80038c4 <mainTask+0x184>)
 800379a:	685c      	ldr	r4, [r3, #4]
 800379c:	f007 fb30 	bl	800ae00 <xTaskGetTickCount>
 80037a0:	0002      	movs	r2, r0
 80037a2:	2300      	movs	r3, #0
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	2300      	movs	r3, #0
 80037a8:	2101      	movs	r1, #1
 80037aa:	0020      	movs	r0, r4
 80037ac:	f008 f950 	bl	800ba50 <xTimerGenericCommand>
					positionMotorTaskCreate();
 80037b0:	f000 fde6 	bl	8004380 <positionMotorTaskCreate>
					asservMotorTaskCreate();
 80037b4:	f000 fd02 	bl	80041bc <asservMotorTaskCreate>
					createLidarTask();
 80037b8:	f009 ffd2 	bl	800d760 <createLidarTask>
				}
				mainHandle.state = MAIN_MOUSE;
 80037bc:	4b41      	ldr	r3, [pc, #260]	; (80038c4 <mainTask+0x184>)
 80037be:	2202      	movs	r2, #2
 80037c0:	701a      	strb	r2, [r3, #0]
				break;
 80037c2:	e052      	b.n	800386a <mainTask+0x12a>
			}
			case MAIN_CAT: {
				if(xTimerIsTimerActive(mainHandle.timer) == pdFALSE) {
 80037c4:	4b3f      	ldr	r3, [pc, #252]	; (80038c4 <mainTask+0x184>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	0018      	movs	r0, r3
 80037ca:	f008 fbf7 	bl	800bfbc <xTimerIsTimerActive>
 80037ce:	1e03      	subs	r3, r0, #0
 80037d0:	d146      	bne.n	8003860 <mainTask+0x120>
					xTimerStart(mainHandle.timer, 0);
 80037d2:	4b3c      	ldr	r3, [pc, #240]	; (80038c4 <mainTask+0x184>)
 80037d4:	685c      	ldr	r4, [r3, #4]
 80037d6:	f007 fb13 	bl	800ae00 <xTaskGetTickCount>
 80037da:	0002      	movs	r2, r0
 80037dc:	2300      	movs	r3, #0
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	2300      	movs	r3, #0
 80037e2:	2101      	movs	r1, #1
 80037e4:	0020      	movs	r0, r4
 80037e6:	f008 f933 	bl	800ba50 <xTimerGenericCommand>
					HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80037ea:	2380      	movs	r3, #128	; 0x80
 80037ec:	019b      	lsls	r3, r3, #6
 80037ee:	4837      	ldr	r0, [pc, #220]	; (80038cc <mainTask+0x18c>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	0019      	movs	r1, r3
 80037f4:	f002 fa98 	bl	8005d28 <HAL_GPIO_WritePin>
				}
				break;
 80037f8:	e032      	b.n	8003860 <mainTask+0x120>
			}
			case MAIN_MOUSE: {
				if(xTimerIsTimerActive(mainHandle.timer) == pdFALSE) {
 80037fa:	4b32      	ldr	r3, [pc, #200]	; (80038c4 <mainTask+0x184>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	0018      	movs	r0, r3
 8003800:	f008 fbdc 	bl	800bfbc <xTimerIsTimerActive>
 8003804:	1e03      	subs	r3, r0, #0
 8003806:	d12d      	bne.n	8003864 <mainTask+0x124>
					xTimerStart(mainHandle.timer, 0);
 8003808:	4b2e      	ldr	r3, [pc, #184]	; (80038c4 <mainTask+0x184>)
 800380a:	685c      	ldr	r4, [r3, #4]
 800380c:	f007 faf8 	bl	800ae00 <xTaskGetTickCount>
 8003810:	0002      	movs	r2, r0
 8003812:	2300      	movs	r3, #0
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	2300      	movs	r3, #0
 8003818:	2101      	movs	r1, #1
 800381a:	0020      	movs	r0, r4
 800381c:	f008 f918 	bl	800ba50 <xTimerGenericCommand>
					HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003820:	2380      	movs	r3, #128	; 0x80
 8003822:	019b      	lsls	r3, r3, #6
 8003824:	4829      	ldr	r0, [pc, #164]	; (80038cc <mainTask+0x18c>)
 8003826:	2200      	movs	r2, #0
 8003828:	0019      	movs	r1, r3
 800382a:	f002 fa7d 	bl	8005d28 <HAL_GPIO_WritePin>
				}
				break;
 800382e:	e019      	b.n	8003864 <mainTask+0x124>
			}
			case MAIN_ERROR : {
				if(xTimerIsTimerActive(mainHandle.timer) == pdFALSE) {
 8003830:	4b24      	ldr	r3, [pc, #144]	; (80038c4 <mainTask+0x184>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	0018      	movs	r0, r3
 8003836:	f008 fbc1 	bl	800bfbc <xTimerIsTimerActive>
 800383a:	1e03      	subs	r3, r0, #0
 800383c:	d114      	bne.n	8003868 <mainTask+0x128>
					xTimerStart(mainHandle.timer, 0);
 800383e:	4b21      	ldr	r3, [pc, #132]	; (80038c4 <mainTask+0x184>)
 8003840:	685c      	ldr	r4, [r3, #4]
 8003842:	f007 fadd 	bl	800ae00 <xTaskGetTickCount>
 8003846:	0002      	movs	r2, r0
 8003848:	2300      	movs	r3, #0
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	2300      	movs	r3, #0
 800384e:	2101      	movs	r1, #1
 8003850:	0020      	movs	r0, r4
 8003852:	f008 f8fd 	bl	800ba50 <xTimerGenericCommand>
					
				}
				break;
 8003856:	e007      	b.n	8003868 <mainTask+0x128>
			}
			default:
				mainHandle.state = MAIN_INIT;
 8003858:	4b1a      	ldr	r3, [pc, #104]	; (80038c4 <mainTask+0x184>)
 800385a:	2200      	movs	r2, #0
 800385c:	701a      	strb	r2, [r3, #0]
				break;
 800385e:	e004      	b.n	800386a <mainTask+0x12a>
				break;
 8003860:	46c0      	nop			; (mov r8, r8)
 8003862:	e002      	b.n	800386a <mainTask+0x12a>
				break;
 8003864:	46c0      	nop			; (mov r8, r8)
 8003866:	e000      	b.n	800386a <mainTask+0x12a>
				break;
 8003868:	46c0      	nop			; (mov r8, r8)
		}
		if(mainHandle.lastState != mainHandle.state) {
 800386a:	4b16      	ldr	r3, [pc, #88]	; (80038c4 <mainTask+0x184>)
 800386c:	785a      	ldrb	r2, [r3, #1]
 800386e:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <mainTask+0x184>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d00c      	beq.n	8003890 <mainTask+0x150>
			xTimerStop(mainHandle.timer, 0);
 8003876:	4b13      	ldr	r3, [pc, #76]	; (80038c4 <mainTask+0x184>)
 8003878:	6858      	ldr	r0, [r3, #4]
 800387a:	2300      	movs	r3, #0
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	2300      	movs	r3, #0
 8003880:	2200      	movs	r2, #0
 8003882:	2103      	movs	r1, #3
 8003884:	f008 f8e4 	bl	800ba50 <xTimerGenericCommand>
			mainHandle.lastState = mainHandle.state;
 8003888:	4b0e      	ldr	r3, [pc, #56]	; (80038c4 <mainTask+0x184>)
 800388a:	781a      	ldrb	r2, [r3, #0]
 800388c:	4b0d      	ldr	r3, [pc, #52]	; (80038c4 <mainTask+0x184>)
 800388e:	705a      	strb	r2, [r3, #1]
		}
		if(xTaskNotifyWait(0, ULONG_MAX, &ulNotifiedValue, 5000) == pdTRUE) {
 8003890:	480f      	ldr	r0, [pc, #60]	; (80038d0 <mainTask+0x190>)
 8003892:	230c      	movs	r3, #12
 8003894:	18fa      	adds	r2, r7, r3
 8003896:	2301      	movs	r3, #1
 8003898:	4259      	negs	r1, r3
 800389a:	0003      	movs	r3, r0
 800389c:	2000      	movs	r0, #0
 800389e:	f007 fefd 	bl	800b69c <xTaskNotifyWait>
 80038a2:	0003      	movs	r3, r0
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d000      	beq.n	80038aa <mainTask+0x16a>
 80038a8:	e760      	b.n	800376c <mainTask+0x2c>
			setMainState();
 80038aa:	f7ff ff33 	bl	8003714 <setMainState>
//			HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
//			HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
			//xTaskNotify(lidarHandle, &ulNotifiedValue, eSetBits); //TODO notify side that has beed affected
			taskENTER_CRITICAL();
 80038ae:	f008 fc3f 	bl	800c130 <vPortEnterCritical>
			vTaskDelay(2000);
 80038b2:	23fa      	movs	r3, #250	; 0xfa
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	0018      	movs	r0, r3
 80038b8:	f007 f9a6 	bl	800ac08 <vTaskDelay>
			taskEXIT_CRITICAL();
 80038bc:	f008 fc4a 	bl	800c154 <vPortExitCritical>
		switch (mainHandle.state) {
 80038c0:	e754      	b.n	800376c <mainTask+0x2c>
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	200000cc 	.word	0x200000cc
 80038c8:	080108c4 	.word	0x080108c4
 80038cc:	50000400 	.word	0x50000400
 80038d0:	00001388 	.word	0x00001388

080038d4 <createMainTask>:
 * This function creates and initializes the main task, which is responsible
 * for managing the overall behavior of the system.
 *
 * @return Returns true if the task creation is successful; otherwise, returns false.
 */
uint8_t createMainTask(void) {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af02      	add	r7, sp, #8
	if (xTaskCreate(mainTask, "Main", TASK_MAIN_STACK_DEPTH, NULL, TASK_MAIN_PRIORITY, &h_task_main) != pdPASS) {
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	009a      	lsls	r2, r3, #2
 80038de:	490f      	ldr	r1, [pc, #60]	; (800391c <createMainTask+0x48>)
 80038e0:	480f      	ldr	r0, [pc, #60]	; (8003920 <createMainTask+0x4c>)
 80038e2:	4b10      	ldr	r3, [pc, #64]	; (8003924 <createMainTask+0x50>)
 80038e4:	9301      	str	r3, [sp, #4]
 80038e6:	2363      	movs	r3, #99	; 0x63
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	2300      	movs	r3, #0
 80038ec:	f007 f84f 	bl	800a98e <xTaskCreate>
 80038f0:	0003      	movs	r3, r0
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d007      	beq.n	8003906 <createMainTask+0x32>
		LOG_RTOS_ERROR("Error creating task Main");
 80038f6:	4a0c      	ldr	r2, [pc, #48]	; (8003928 <createMainTask+0x54>)
 80038f8:	4b0c      	ldr	r3, [pc, #48]	; (800392c <createMainTask+0x58>)
 80038fa:	0011      	movs	r1, r2
 80038fc:	0018      	movs	r0, r3
 80038fe:	f00a f80f 	bl	800d920 <iprintf>
		return false;
 8003902:	2300      	movs	r3, #0
 8003904:	e006      	b.n	8003914 <createMainTask+0x40>
	}
	else {
		LOG_RTOS_INFO(COLOR_GREEN"Main task create");
 8003906:	4a08      	ldr	r2, [pc, #32]	; (8003928 <createMainTask+0x54>)
 8003908:	4b09      	ldr	r3, [pc, #36]	; (8003930 <createMainTask+0x5c>)
 800390a:	0011      	movs	r1, r2
 800390c:	0018      	movs	r0, r3
 800390e:	f00a f807 	bl	800d920 <iprintf>
		return true;
 8003912:	2301      	movs	r3, #1
	}
}
 8003914:	0018      	movs	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	080108d0 	.word	0x080108d0
 8003920:	08003741 	.word	0x08003741
 8003924:	200000c8 	.word	0x200000c8
 8003928:	08010efc 	.word	0x08010efc
 800392c:	080108d8 	.word	0x080108d8
 8003930:	08010914 	.word	0x08010914

08003934 <initMotor>:

h_motor_t motor_left;
h_motor_t motor_right;

void initMotor(h_motor_t *motor, PWM *fwd, PWM *rev, TIM_HandleTypeDef *htim_enc)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
	motor->state = STOP;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2202      	movs	r2, #2
 8003946:	701a      	strb	r2, [r3, #0]
	motor->fwd = fwd;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	605a      	str	r2, [r3, #4]
	motor->rev = rev;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	609a      	str	r2, [r3, #8]
	motor->htim_enc = htim_enc;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	60da      	str	r2, [r3, #12]
}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	46bd      	mov	sp, r7
 800395e:	b004      	add	sp, #16
 8003960:	bd80      	pop	{r7, pc}

08003962 <setMotorSpeedFwd>:
 *
 * @param motor Pointeur vers la structure représentant le moteur.
 * @param speed Vitesse du moteur en marche avant.
 */
void setMotorSpeedFwd(h_motor_t *motor, uint8_t speed)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	000a      	movs	r2, r1
 800396c:	1cfb      	adds	r3, r7, #3
 800396e:	701a      	strb	r2, [r3, #0]
    if (motor->state == REV)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d107      	bne.n	8003988 <setMotorSpeedFwd+0x26>
    {
        setPwmDutyCycle(motor->rev, 0, MAX_DUTY_CYCLE_MOTOR);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	22a0      	movs	r2, #160	; 0xa0
 800397e:	0112      	lsls	r2, r2, #4
 8003980:	2100      	movs	r1, #0
 8003982:	0018      	movs	r0, r3
 8003984:	f000 fa12 	bl	8003dac <setPwmDutyCycle>
    }

    motor->state = FWD;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	701a      	strb	r2, [r3, #0]
    setPwmDutyCycle(motor->fwd, speed, MAX_DUTY_CYCLE_MOTOR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6858      	ldr	r0, [r3, #4]
 8003992:	23a0      	movs	r3, #160	; 0xa0
 8003994:	011a      	lsls	r2, r3, #4
 8003996:	1cfb      	adds	r3, r7, #3
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	0019      	movs	r1, r3
 800399c:	f000 fa06 	bl	8003dac <setPwmDutyCycle>
}
 80039a0:	46c0      	nop			; (mov r8, r8)
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b002      	add	sp, #8
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <setMotorSpeedRev>:
 *
 * @param motor Pointeur vers la structure représentant le moteur.
 * @param speed Vitesse du moteur en marche arrière.
 */
void setMotorSpeedRev(h_motor_t *motor, uint8_t speed)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	000a      	movs	r2, r1
 80039b2:	1cfb      	adds	r3, r7, #3
 80039b4:	701a      	strb	r2, [r3, #0]
    if (motor->state == FWD)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d107      	bne.n	80039ce <setMotorSpeedRev+0x26>
    {
        setPwmDutyCycle(motor->fwd, 0, MAX_DUTY_CYCLE_MOTOR);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	22a0      	movs	r2, #160	; 0xa0
 80039c4:	0112      	lsls	r2, r2, #4
 80039c6:	2100      	movs	r1, #0
 80039c8:	0018      	movs	r0, r3
 80039ca:	f000 f9ef 	bl	8003dac <setPwmDutyCycle>
    }

    motor->state = REV;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
    setPwmDutyCycle(motor->rev, speed, MAX_DUTY_CYCLE_MOTOR);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6898      	ldr	r0, [r3, #8]
 80039d8:	23a0      	movs	r3, #160	; 0xa0
 80039da:	011a      	lsls	r2, r3, #4
 80039dc:	1cfb      	adds	r3, r7, #3
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	0019      	movs	r1, r3
 80039e2:	f000 f9e3 	bl	8003dac <setPwmDutyCycle>
}
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b002      	add	sp, #8
 80039ec:	bd80      	pop	{r7, pc}

080039ee <stopMotor>:
 * La direction du moteur est mise à l'arrêt, indiquée par l'état "STOP".
 *
 * @param motor Pointeur vers la structure représentant le moteur.
 */
void stopMotor(h_motor_t *motor)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
    if (motor->state == REV)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d108      	bne.n	8003a10 <stopMotor+0x22>
    {
        setPwmDutyCycle(motor->rev, 0, MAX_DUTY_CYCLE_MOTOR);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	22a0      	movs	r2, #160	; 0xa0
 8003a04:	0112      	lsls	r2, r2, #4
 8003a06:	2100      	movs	r1, #0
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f000 f9cf 	bl	8003dac <setPwmDutyCycle>
 8003a0e:	e00b      	b.n	8003a28 <stopMotor+0x3a>
    }
    else if (motor->state == FWD)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d107      	bne.n	8003a28 <stopMotor+0x3a>
    {
        setPwmDutyCycle(motor->fwd, 0, MAX_DUTY_CYCLE_MOTOR);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	22a0      	movs	r2, #160	; 0xa0
 8003a1e:	0112      	lsls	r2, r2, #4
 8003a20:	2100      	movs	r1, #0
 8003a22:	0018      	movs	r0, r3
 8003a24:	f000 f9c2 	bl	8003dac <setPwmDutyCycle>
    }
    motor->state = STOP;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	701a      	strb	r2, [r3, #0]
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b002      	add	sp, #8
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <setMotorSpeed>:
 * @param motor Pointeur vers la structure représentant le moteur.
 * @param speed Vitesse du moteur.
 * @param dir   Direction du moteur (REV, FWD, STOP).
 */
void setMotorSpeed(h_motor_t *motor, uint8_t speed, h_motor_state dir)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	0008      	movs	r0, r1
 8003a40:	0011      	movs	r1, r2
 8003a42:	1cfb      	adds	r3, r7, #3
 8003a44:	1c02      	adds	r2, r0, #0
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	1cbb      	adds	r3, r7, #2
 8003a4a:	1c0a      	adds	r2, r1, #0
 8003a4c:	701a      	strb	r2, [r3, #0]
    if (dir == REV)
 8003a4e:	1cbb      	adds	r3, r7, #2
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d107      	bne.n	8003a66 <setMotorSpeed+0x30>
    {
        setMotorSpeedRev(motor, speed);
 8003a56:	1cfb      	adds	r3, r7, #3
 8003a58:	781a      	ldrb	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	0011      	movs	r1, r2
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f7ff ffa2 	bl	80039a8 <setMotorSpeedRev>
    }
    else if (dir == STOP)
    {
        stopMotor(motor);
    }
}
 8003a64:	e013      	b.n	8003a8e <setMotorSpeed+0x58>
    else if (dir == FWD)
 8003a66:	1cbb      	adds	r3, r7, #2
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d107      	bne.n	8003a7e <setMotorSpeed+0x48>
        setMotorSpeedFwd(motor, speed);
 8003a6e:	1cfb      	adds	r3, r7, #3
 8003a70:	781a      	ldrb	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	0011      	movs	r1, r2
 8003a76:	0018      	movs	r0, r3
 8003a78:	f7ff ff73 	bl	8003962 <setMotorSpeedFwd>
}
 8003a7c:	e007      	b.n	8003a8e <setMotorSpeed+0x58>
    else if (dir == STOP)
 8003a7e:	1cbb      	adds	r3, r7, #2
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d103      	bne.n	8003a8e <setMotorSpeed+0x58>
        stopMotor(motor);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f7ff ffb0 	bl	80039ee <stopMotor>
}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b002      	add	sp, #8
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <getSpeed>:
 * @param time_ms  Temps écoulé en millisecondes.
 *
 * @return Vitesse du moteur normalisée entre 0 et 100.
 */
uint8_t getSpeed(h_motor_t *motor, uint32_t enc_prev, uint32_t enc_curr, uint16_t time_ms)
{
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b089      	sub	sp, #36	; 0x24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	001a      	movs	r2, r3
 8003aa6:	1cbb      	adds	r3, r7, #2
 8003aa8:	801a      	strh	r2, [r3, #0]
    uint16_t time_s = time_ms / 1000;
 8003aaa:	231a      	movs	r3, #26
 8003aac:	18fc      	adds	r4, r7, r3
 8003aae:	1cbb      	adds	r3, r7, #2
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	22fa      	movs	r2, #250	; 0xfa
 8003ab4:	0091      	lsls	r1, r2, #2
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f7fc fb38 	bl	800012c <__udivsi3>
 8003abc:	0003      	movs	r3, r0
 8003abe:	8023      	strh	r3, [r4, #0]
    uint32_t distance = 0;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61fb      	str	r3, [r7, #28]

    if (motor->state == REV)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d111      	bne.n	8003af0 <getSpeed+0x58>
    {
        if (enc_prev < enc_curr) // Si dépassement de la valeur max du compteur
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d208      	bcs.n	8003ae6 <getSpeed+0x4e>
        {
            enc_prev = MAX_ENCODER_VALUE - enc_prev;
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4a24      	ldr	r2, [pc, #144]	; (8003b68 <getSpeed+0xd0>)
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	60bb      	str	r3, [r7, #8]
            distance = enc_prev + enc_curr;
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	18d3      	adds	r3, r2, r3
 8003ae2:	61fb      	str	r3, [r7, #28]
 8003ae4:	e019      	b.n	8003b1a <getSpeed+0x82>
        }
        else
        {
            distance = enc_curr - enc_prev;
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	61fb      	str	r3, [r7, #28]
 8003aee:	e014      	b.n	8003b1a <getSpeed+0x82>
        }
    }
    else if (motor->state == FWD)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d110      	bne.n	8003b1a <getSpeed+0x82>
    {
        if (enc_prev < enc_curr) // Si dépassement de la valeur max du compteur
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d208      	bcs.n	8003b12 <getSpeed+0x7a>
        {
            enc_curr = MAX_ENCODER_VALUE - enc_curr;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a19      	ldr	r2, [pc, #100]	; (8003b68 <getSpeed+0xd0>)
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	607b      	str	r3, [r7, #4]
            distance = enc_prev + enc_curr;
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	18d3      	adds	r3, r2, r3
 8003b0e:	61fb      	str	r3, [r7, #28]
 8003b10:	e003      	b.n	8003b1a <getSpeed+0x82>
        }
        else
        {
            distance = enc_prev - enc_curr;
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	61fb      	str	r3, [r7, #28]
        }
    }

    distance /= 4;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	089b      	lsrs	r3, r3, #2
 8003b1e:	61fb      	str	r3, [r7, #28]
    distance = distance * 60 / time_s;
 8003b20:	69fa      	ldr	r2, [r7, #28]
 8003b22:	0013      	movs	r3, r2
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	001a      	movs	r2, r3
 8003b2c:	231a      	movs	r3, #26
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	0019      	movs	r1, r3
 8003b34:	0010      	movs	r0, r2
 8003b36:	f7fc faf9 	bl	800012c <__udivsi3>
 8003b3a:	0003      	movs	r3, r0
 8003b3c:	61fb      	str	r3, [r7, #28]
    uint32_t speed = distance / (int)RES_ENCODER; // RPM
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	21e0      	movs	r1, #224	; 0xe0
 8003b42:	0018      	movs	r0, r3
 8003b44:	f7fc faf2 	bl	800012c <__udivsi3>
 8003b48:	0003      	movs	r3, r0
 8003b4a:	617b      	str	r3, [r7, #20]
    return (uint8_t)(100 * speed / MAX_RPM); // Vitesse entre 0 et 100
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	2264      	movs	r2, #100	; 0x64
 8003b50:	4353      	muls	r3, r2
 8003b52:	2296      	movs	r2, #150	; 0x96
 8003b54:	0051      	lsls	r1, r2, #1
 8003b56:	0018      	movs	r0, r3
 8003b58:	f7fc fae8 	bl	800012c <__udivsi3>
 8003b5c:	0003      	movs	r3, r0
 8003b5e:	b2db      	uxtb	r3, r3
}
 8003b60:	0018      	movs	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b009      	add	sp, #36	; 0x24
 8003b66:	bd90      	pop	{r4, r7, pc}
 8003b68:	0000ffff 	.word	0x0000ffff

08003b6c <initPID>:
 * @param ki      Gain intégral.
 * @param kd      Gain dérivatif.
 * @param Te_ms   Période d'échantillonnage en millisecondes.
 */
void initPID(PID *pid, float kp, float ki, float kd, float Te_ms)
{
 8003b6c:	b590      	push	{r4, r7, lr}
 8003b6e:	b089      	sub	sp, #36	; 0x24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
    float Te = Te_ms / 1000;
 8003b7a:	4938      	ldr	r1, [pc, #224]	; (8003c5c <initPID+0xf0>)
 8003b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b7e:	f7fc fe7b 	bl	8000878 <__aeabi_fdiv>
 8003b82:	1c03      	adds	r3, r0, #0
 8003b84:	61bb      	str	r3, [r7, #24]
    float a = Te / 2;
 8003b86:	2180      	movs	r1, #128	; 0x80
 8003b88:	05c9      	lsls	r1, r1, #23
 8003b8a:	69b8      	ldr	r0, [r7, #24]
 8003b8c:	f7fc fe74 	bl	8000878 <__aeabi_fdiv>
 8003b90:	1c03      	adds	r3, r0, #0
 8003b92:	617b      	str	r3, [r7, #20]

    pid->b0 = kp + ki * a + kd * a;
 8003b94:	6979      	ldr	r1, [r7, #20]
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fd f838 	bl	8000c0c <__aeabi_fmul>
 8003b9c:	1c03      	adds	r3, r0, #0
 8003b9e:	68b9      	ldr	r1, [r7, #8]
 8003ba0:	1c18      	adds	r0, r3, #0
 8003ba2:	f7fc fcc9 	bl	8000538 <__aeabi_fadd>
 8003ba6:	1c03      	adds	r3, r0, #0
 8003ba8:	1c1c      	adds	r4, r3, #0
 8003baa:	6979      	ldr	r1, [r7, #20]
 8003bac:	6838      	ldr	r0, [r7, #0]
 8003bae:	f7fd f82d 	bl	8000c0c <__aeabi_fmul>
 8003bb2:	1c03      	adds	r3, r0, #0
 8003bb4:	1c19      	adds	r1, r3, #0
 8003bb6:	1c20      	adds	r0, r4, #0
 8003bb8:	f7fc fcbe 	bl	8000538 <__aeabi_fadd>
 8003bbc:	1c03      	adds	r3, r0, #0
 8003bbe:	1c1a      	adds	r2, r3, #0
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	601a      	str	r2, [r3, #0]
    pid->b1 = ki * Te + kd * Te;
 8003bc4:	69b9      	ldr	r1, [r7, #24]
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7fd f820 	bl	8000c0c <__aeabi_fmul>
 8003bcc:	1c03      	adds	r3, r0, #0
 8003bce:	1c1c      	adds	r4, r3, #0
 8003bd0:	69b9      	ldr	r1, [r7, #24]
 8003bd2:	6838      	ldr	r0, [r7, #0]
 8003bd4:	f7fd f81a 	bl	8000c0c <__aeabi_fmul>
 8003bd8:	1c03      	adds	r3, r0, #0
 8003bda:	1c19      	adds	r1, r3, #0
 8003bdc:	1c20      	adds	r0, r4, #0
 8003bde:	f7fc fcab 	bl	8000538 <__aeabi_fadd>
 8003be2:	1c03      	adds	r3, r0, #0
 8003be4:	1c1a      	adds	r2, r3, #0
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	605a      	str	r2, [r3, #4]
    pid->b2 = kp + ki * a + kd * a;
 8003bea:	6979      	ldr	r1, [r7, #20]
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7fd f80d 	bl	8000c0c <__aeabi_fmul>
 8003bf2:	1c03      	adds	r3, r0, #0
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	1c18      	adds	r0, r3, #0
 8003bf8:	f7fc fc9e 	bl	8000538 <__aeabi_fadd>
 8003bfc:	1c03      	adds	r3, r0, #0
 8003bfe:	1c1c      	adds	r4, r3, #0
 8003c00:	6979      	ldr	r1, [r7, #20]
 8003c02:	6838      	ldr	r0, [r7, #0]
 8003c04:	f7fd f802 	bl	8000c0c <__aeabi_fmul>
 8003c08:	1c03      	adds	r3, r0, #0
 8003c0a:	1c19      	adds	r1, r3, #0
 8003c0c:	1c20      	adds	r0, r4, #0
 8003c0e:	f7fc fc93 	bl	8000538 <__aeabi_fadd>
 8003c12:	1c03      	adds	r3, r0, #0
 8003c14:	1c1a      	adds	r2, r3, #0
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	609a      	str	r2, [r3, #8]
    pid->index = 0;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2224      	movs	r2, #36	; 0x24
 8003c1e:	2100      	movs	r1, #0
 8003c20:	5499      	strb	r1, [r3, r2]

    for (int i = 0; i < PID_ORDRE; i++)
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
 8003c26:	e010      	b.n	8003c4a <initPID+0xde>
    {
        pid->inputs[i]  = 0.0;
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	18d3      	adds	r3, r2, r3
 8003c32:	3304      	adds	r3, #4
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
        pid->outputs[i] = 0.0;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	69fa      	ldr	r2, [r7, #28]
 8003c3c:	3206      	adds	r2, #6
 8003c3e:	0092      	lsls	r2, r2, #2
 8003c40:	2100      	movs	r1, #0
 8003c42:	50d1      	str	r1, [r2, r3]
    for (int i = 0; i < PID_ORDRE; i++)
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	3301      	adds	r3, #1
 8003c48:	61fb      	str	r3, [r7, #28]
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	ddeb      	ble.n	8003c28 <initPID+0xbc>
    }
}
 8003c50:	46c0      	nop			; (mov r8, r8)
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b009      	add	sp, #36	; 0x24
 8003c58:	bd90      	pop	{r4, r7, pc}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	447a0000 	.word	0x447a0000

08003c60 <error>:
 * @param pid        Pointeur vers la structure PID.
 * @param speed_cmd  Consigne de vitesse.
 * @param speed_mes  Vitesse mesurée.
 */
void error(PID *pid, uint8_t speed_cmd, uint8_t speed_mes)
{
 8003c60:	b590      	push	{r4, r7, lr}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	0008      	movs	r0, r1
 8003c6a:	0011      	movs	r1, r2
 8003c6c:	1cfb      	adds	r3, r7, #3
 8003c6e:	1c02      	adds	r2, r0, #0
 8003c70:	701a      	strb	r2, [r3, #0]
 8003c72:	1cbb      	adds	r3, r7, #2
 8003c74:	1c0a      	adds	r2, r1, #0
 8003c76:	701a      	strb	r2, [r3, #0]
    pid->inputs[pid->index] = speed_mes - speed_cmd;
 8003c78:	1cbb      	adds	r3, r7, #2
 8003c7a:	781a      	ldrb	r2, [r3, #0]
 8003c7c:	1cfb      	adds	r3, r7, #3
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	1ad2      	subs	r2, r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2124      	movs	r1, #36	; 0x24
 8003c86:	5c5b      	ldrb	r3, [r3, r1]
 8003c88:	001c      	movs	r4, r3
 8003c8a:	0010      	movs	r0, r2
 8003c8c:	f7fd facc 	bl	8001228 <__aeabi_i2f>
 8003c90:	1c01      	adds	r1, r0, #0
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	1ca3      	adds	r3, r4, #2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	18d3      	adds	r3, r2, r3
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	6019      	str	r1, [r3, #0]
}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	b003      	add	sp, #12
 8003ca4:	bd90      	pop	{r4, r7, pc}

08003ca6 <correcteur>:
 * @param pid Pointeur vers la structure PID.
 *
 * @return La sortie corrigée du contrôleur PID.
 */
uint8_t correcteur(PID *pid)
{
 8003ca6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ca8:	b085      	sub	sp, #20
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
    uint8_t idx = pid->index;
 8003cae:	260f      	movs	r6, #15
 8003cb0:	19bb      	adds	r3, r7, r6
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	2124      	movs	r1, #36	; 0x24
 8003cb6:	5c52      	ldrb	r2, [r2, r1]
 8003cb8:	701a      	strb	r2, [r3, #0]

    pid->outputs[idx] = pid->outputs[(idx + 2) % PID_ORDRE]
 8003cba:	19bb      	adds	r3, r7, r6
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	3302      	adds	r3, #2
 8003cc0:	2103      	movs	r1, #3
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f7fc fba2 	bl	800040c <__aeabi_idivmod>
 8003cc8:	000b      	movs	r3, r1
 8003cca:	001a      	movs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3206      	adds	r2, #6
 8003cd0:	0092      	lsls	r2, r2, #2
 8003cd2:	58d4      	ldr	r4, [r2, r3]
                       + pid->b0 * pid->inputs[idx]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	19bb      	adds	r3, r7, r6
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	3302      	adds	r3, #2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	18d3      	adds	r3, r2, r3
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	1c19      	adds	r1, r3, #0
 8003cea:	f7fc ff8f 	bl	8000c0c <__aeabi_fmul>
 8003cee:	1c03      	adds	r3, r0, #0
 8003cf0:	1c19      	adds	r1, r3, #0
 8003cf2:	1c20      	adds	r0, r4, #0
 8003cf4:	f7fc fc20 	bl	8000538 <__aeabi_fadd>
 8003cf8:	1c03      	adds	r3, r0, #0
 8003cfa:	1c1d      	adds	r5, r3, #0
                       + pid->b1 * pid->inputs[(idx + 1) % PID_ORDRE]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685c      	ldr	r4, [r3, #4]
 8003d00:	19bb      	adds	r3, r7, r6
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	3301      	adds	r3, #1
 8003d06:	2103      	movs	r1, #3
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f7fc fb7f 	bl	800040c <__aeabi_idivmod>
 8003d0e:	000b      	movs	r3, r1
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	3302      	adds	r3, #2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	18d3      	adds	r3, r2, r3
 8003d18:	3304      	adds	r3, #4
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	1c19      	adds	r1, r3, #0
 8003d1e:	1c20      	adds	r0, r4, #0
 8003d20:	f7fc ff74 	bl	8000c0c <__aeabi_fmul>
 8003d24:	1c03      	adds	r3, r0, #0
 8003d26:	1c19      	adds	r1, r3, #0
 8003d28:	1c28      	adds	r0, r5, #0
 8003d2a:	f7fc fc05 	bl	8000538 <__aeabi_fadd>
 8003d2e:	1c03      	adds	r3, r0, #0
 8003d30:	1c1d      	adds	r5, r3, #0
                       + pid->b2 * pid->inputs[(idx + 2) % PID_ORDRE];
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689c      	ldr	r4, [r3, #8]
 8003d36:	19bb      	adds	r3, r7, r6
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	3302      	adds	r3, #2
 8003d3c:	2103      	movs	r1, #3
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f7fc fb64 	bl	800040c <__aeabi_idivmod>
 8003d44:	000b      	movs	r3, r1
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	3302      	adds	r3, #2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	18d3      	adds	r3, r2, r3
 8003d4e:	3304      	adds	r3, #4
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	1c19      	adds	r1, r3, #0
 8003d54:	1c20      	adds	r0, r4, #0
 8003d56:	f7fc ff59 	bl	8000c0c <__aeabi_fmul>
 8003d5a:	1c03      	adds	r3, r0, #0
 8003d5c:	1c1a      	adds	r2, r3, #0
    pid->outputs[idx] = pid->outputs[(idx + 2) % PID_ORDRE]
 8003d5e:	19bb      	adds	r3, r7, r6
 8003d60:	781c      	ldrb	r4, [r3, #0]
                       + pid->b2 * pid->inputs[(idx + 2) % PID_ORDRE];
 8003d62:	1c11      	adds	r1, r2, #0
 8003d64:	1c28      	adds	r0, r5, #0
 8003d66:	f7fc fbe7 	bl	8000538 <__aeabi_fadd>
 8003d6a:	1c03      	adds	r3, r0, #0
 8003d6c:	1c19      	adds	r1, r3, #0
    pid->outputs[idx] = pid->outputs[(idx + 2) % PID_ORDRE]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	1da2      	adds	r2, r4, #6
 8003d72:	0092      	lsls	r2, r2, #2
 8003d74:	50d1      	str	r1, [r2, r3]

    //printf("Sortie pid = %f\r\n", outputs[idx]);
    pid->index = (idx + 1) % PID_ORDRE;
 8003d76:	19bb      	adds	r3, r7, r6
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	2103      	movs	r1, #3
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f7fc fb44 	bl	800040c <__aeabi_idivmod>
 8003d84:	000b      	movs	r3, r1
 8003d86:	b2d9      	uxtb	r1, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2224      	movs	r2, #36	; 0x24
 8003d8c:	5499      	strb	r1, [r3, r2]

    return pid->outputs[idx];
 8003d8e:	19bb      	adds	r3, r7, r6
 8003d90:	781a      	ldrb	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3206      	adds	r2, #6
 8003d96:	0092      	lsls	r2, r2, #2
 8003d98:	58d3      	ldr	r3, [r2, r3]
 8003d9a:	1c18      	adds	r0, r3, #0
 8003d9c:	f7fc fbb4 	bl	8000508 <__aeabi_f2uiz>
 8003da0:	0003      	movs	r3, r0
 8003da2:	b2db      	uxtb	r3, r3
}
 8003da4:	0018      	movs	r0, r3
 8003da6:	46bd      	mov	sp, r7
 8003da8:	b005      	add	sp, #20
 8003daa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003dac <setPwmDutyCycle>:
 * @param pwm          Pointeur vers la structure représentant le signal PWM.
 * @param duty_cycle   Pourcentage du cycle PWM (0 à 100).
 * @param max_duty_cycle Valeur maximale autorisée du rapport cyclique.
 */
void setPwmDutyCycle(PWM *pwm, uint8_t duty_cycle, uint16_t max_duty_cycle)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	0008      	movs	r0, r1
 8003db6:	0011      	movs	r1, r2
 8003db8:	1cfb      	adds	r3, r7, #3
 8003dba:	1c02      	adds	r2, r0, #0
 8003dbc:	701a      	strb	r2, [r3, #0]
 8003dbe:	003b      	movs	r3, r7
 8003dc0:	1c0a      	adds	r2, r1, #0
 8003dc2:	801a      	strh	r2, [r3, #0]
    uint16_t duty_cycle16 = duty_cycle * MAX_DUTY_CYCLE_MOTOR / 100;
 8003dc4:	1cfb      	adds	r3, r7, #3
 8003dc6:	781a      	ldrb	r2, [r3, #0]
 8003dc8:	0013      	movs	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	189b      	adds	r3, r3, r2
 8003dce:	025b      	lsls	r3, r3, #9
 8003dd0:	2164      	movs	r1, #100	; 0x64
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f7fc fa34 	bl	8000240 <__divsi3>
 8003dd8:	0003      	movs	r3, r0
 8003dda:	001a      	movs	r2, r3
 8003ddc:	210e      	movs	r1, #14
 8003dde:	187b      	adds	r3, r7, r1
 8003de0:	801a      	strh	r2, [r3, #0]

    if (duty_cycle16 < 0)
    {
        duty_cycle16 = 0;
    }
    else if (duty_cycle16 > max_duty_cycle)
 8003de2:	187a      	adds	r2, r7, r1
 8003de4:	003b      	movs	r3, r7
 8003de6:	8812      	ldrh	r2, [r2, #0]
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d903      	bls.n	8003df6 <setPwmDutyCycle+0x4a>
    {
        duty_cycle16 = max_duty_cycle;
 8003dee:	187b      	adds	r3, r7, r1
 8003df0:	003a      	movs	r2, r7
 8003df2:	8812      	ldrh	r2, [r2, #0]
 8003df4:	801a      	strh	r2, [r3, #0]
    }

    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, duty_cycle16);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d107      	bne.n	8003e0e <setPwmDutyCycle+0x62>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	220e      	movs	r2, #14
 8003e06:	18ba      	adds	r2, r7, r2
 8003e08:	8812      	ldrh	r2, [r2, #0]
 8003e0a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003e0c:	e036      	b.n	8003e7c <setPwmDutyCycle+0xd0>
    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, duty_cycle16);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d107      	bne.n	8003e26 <setPwmDutyCycle+0x7a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	230e      	movs	r3, #14
 8003e1e:	18fb      	adds	r3, r7, r3
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003e24:	e02a      	b.n	8003e7c <setPwmDutyCycle+0xd0>
    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, duty_cycle16);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d107      	bne.n	8003e3e <setPwmDutyCycle+0x92>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	230e      	movs	r3, #14
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8003e3c:	e01e      	b.n	8003e7c <setPwmDutyCycle+0xd0>
    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, duty_cycle16);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b0c      	cmp	r3, #12
 8003e44:	d107      	bne.n	8003e56 <setPwmDutyCycle+0xaa>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	230e      	movs	r3, #14
 8003e4e:	18fb      	adds	r3, r7, r3
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003e54:	e012      	b.n	8003e7c <setPwmDutyCycle+0xd0>
    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, duty_cycle16);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b10      	cmp	r3, #16
 8003e5c:	d107      	bne.n	8003e6e <setPwmDutyCycle+0xc2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	230e      	movs	r3, #14
 8003e66:	18fb      	adds	r3, r7, r3
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	6593      	str	r3, [r2, #88]	; 0x58
}
 8003e6c:	e006      	b.n	8003e7c <setPwmDutyCycle+0xd0>
    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, duty_cycle16);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	230e      	movs	r3, #14
 8003e76:	18fb      	adds	r3, r7, r3
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8003e7c:	46c0      	nop			; (mov r8, r8)
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b004      	add	sp, #16
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e8a:	4b12      	ldr	r3, [pc, #72]	; (8003ed4 <HAL_MspInit+0x50>)
 8003e8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e8e:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <HAL_MspInit+0x50>)
 8003e90:	2101      	movs	r1, #1
 8003e92:	430a      	orrs	r2, r1
 8003e94:	641a      	str	r2, [r3, #64]	; 0x40
 8003e96:	4b0f      	ldr	r3, [pc, #60]	; (8003ed4 <HAL_MspInit+0x50>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	607b      	str	r3, [r7, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ea2:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <HAL_MspInit+0x50>)
 8003ea4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <HAL_MspInit+0x50>)
 8003ea8:	2180      	movs	r1, #128	; 0x80
 8003eaa:	0549      	lsls	r1, r1, #21
 8003eac:	430a      	orrs	r2, r1
 8003eae:	63da      	str	r2, [r3, #60]	; 0x3c
 8003eb0:	4b08      	ldr	r3, [pc, #32]	; (8003ed4 <HAL_MspInit+0x50>)
 8003eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eb4:	2380      	movs	r3, #128	; 0x80
 8003eb6:	055b      	lsls	r3, r3, #21
 8003eb8:	4013      	ands	r3, r2
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	425b      	negs	r3, r3
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	2103      	movs	r1, #3
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f001 fa86 	bl	80053d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ecc:	46c0      	nop			; (mov r8, r8)
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b002      	add	sp, #8
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40021000 	.word	0x40021000

08003ed8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ed8:	b5b0      	push	{r4, r5, r7, lr}
 8003eda:	b08c      	sub	sp, #48	; 0x30
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003ee0:	232b      	movs	r3, #43	; 0x2b
 8003ee2:	18fb      	adds	r3, r7, r3
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003ee8:	4b37      	ldr	r3, [pc, #220]	; (8003fc8 <HAL_InitTick+0xf0>)
 8003eea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eec:	4b36      	ldr	r3, [pc, #216]	; (8003fc8 <HAL_InitTick+0xf0>)
 8003eee:	2110      	movs	r1, #16
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ef4:	4b34      	ldr	r3, [pc, #208]	; (8003fc8 <HAL_InitTick+0xf0>)
 8003ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef8:	2210      	movs	r2, #16
 8003efa:	4013      	ands	r3, r2
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f00:	230c      	movs	r3, #12
 8003f02:	18fa      	adds	r2, r7, r3
 8003f04:	2410      	movs	r4, #16
 8003f06:	193b      	adds	r3, r7, r4
 8003f08:	0011      	movs	r1, r2
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f002 fc7c 	bl	8006808 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003f10:	193b      	adds	r3, r7, r4
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d104      	bne.n	8003f26 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003f1c:	f002 fc5e 	bl	80067dc <HAL_RCC_GetPCLK1Freq>
 8003f20:	0003      	movs	r3, r0
 8003f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f24:	e004      	b.n	8003f30 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003f26:	f002 fc59 	bl	80067dc <HAL_RCC_GetPCLK1Freq>
 8003f2a:	0003      	movs	r3, r0
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f32:	4926      	ldr	r1, [pc, #152]	; (8003fcc <HAL_InitTick+0xf4>)
 8003f34:	0018      	movs	r0, r3
 8003f36:	f7fc f8f9 	bl	800012c <__udivsi3>
 8003f3a:	0003      	movs	r3, r0
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003f40:	4b23      	ldr	r3, [pc, #140]	; (8003fd0 <HAL_InitTick+0xf8>)
 8003f42:	4a24      	ldr	r2, [pc, #144]	; (8003fd4 <HAL_InitTick+0xfc>)
 8003f44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003f46:	4b22      	ldr	r3, [pc, #136]	; (8003fd0 <HAL_InitTick+0xf8>)
 8003f48:	4a23      	ldr	r2, [pc, #140]	; (8003fd8 <HAL_InitTick+0x100>)
 8003f4a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003f4c:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <HAL_InitTick+0xf8>)
 8003f4e:	6a3a      	ldr	r2, [r7, #32]
 8003f50:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8003f52:	4b1f      	ldr	r3, [pc, #124]	; (8003fd0 <HAL_InitTick+0xf8>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f58:	4b1d      	ldr	r3, [pc, #116]	; (8003fd0 <HAL_InitTick+0xf8>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f5e:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <HAL_InitTick+0xf8>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003f64:	252b      	movs	r5, #43	; 0x2b
 8003f66:	197c      	adds	r4, r7, r5
 8003f68:	4b19      	ldr	r3, [pc, #100]	; (8003fd0 <HAL_InitTick+0xf8>)
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f002 fdaa 	bl	8006ac4 <HAL_TIM_Base_Init>
 8003f70:	0003      	movs	r3, r0
 8003f72:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8003f74:	197b      	adds	r3, r7, r5
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d11e      	bne.n	8003fba <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003f7c:	197c      	adds	r4, r7, r5
 8003f7e:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <HAL_InitTick+0xf8>)
 8003f80:	0018      	movs	r0, r3
 8003f82:	f002 fdf7 	bl	8006b74 <HAL_TIM_Base_Start_IT>
 8003f86:	0003      	movs	r3, r0
 8003f88:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8003f8a:	197b      	adds	r3, r7, r5
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d113      	bne.n	8003fba <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003f92:	2011      	movs	r0, #17
 8003f94:	f001 fa35 	bl	8005402 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d809      	bhi.n	8003fb2 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	0019      	movs	r1, r3
 8003fa4:	2011      	movs	r0, #17
 8003fa6:	f001 fa17 	bl	80053d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003faa:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <HAL_InitTick+0x104>)
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	e003      	b.n	8003fba <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8003fb2:	232b      	movs	r3, #43	; 0x2b
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8003fba:	232b      	movs	r3, #43	; 0x2b
 8003fbc:	18fb      	adds	r3, r7, r3
 8003fbe:	781b      	ldrb	r3, [r3, #0]
}
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	b00c      	add	sp, #48	; 0x30
 8003fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	000f4240 	.word	0x000f4240
 8003fd0:	20000144 	.word	0x20000144
 8003fd4:	40001000 	.word	0x40001000
 8003fd8:	000003e7 	.word	0x000003e7
 8003fdc:	2000002c 	.word	0x2000002c

08003fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fe4:	e7fe      	b.n	8003fe4 <NMI_Handler+0x4>
	...

08003fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8003fec:	2380      	movs	r3, #128	; 0x80
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	4802      	ldr	r0, [pc, #8]	; (8003ffc <HardFault_Handler+0x14>)
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	0019      	movs	r1, r3
 8003ff6:	f001 fe97 	bl	8005d28 <HAL_GPIO_WritePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ffa:	e7fe      	b.n	8003ffa <HardFault_Handler+0x12>
 8003ffc:	50000400 	.word	0x50000400

08004000 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BORDER_BACK_Pin);
 8004004:	2004      	movs	r0, #4
 8004006:	f001 fec7 	bl	8005d98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BORDER_FRONT_Pin);
 800400a:	2008      	movs	r0, #8
 800400c:	f001 fec4 	bl	8005d98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8004010:	46c0      	nop			; (mov r8, r8)
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800401c:	4b03      	ldr	r3, [pc, #12]	; (800402c <DMA1_Channel1_IRQHandler+0x14>)
 800401e:	0018      	movs	r0, r3
 8004020:	f001 fbdc 	bl	80057dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004024:	46c0      	nop			; (mov r8, r8)
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	20000498 	.word	0x20000498

08004030 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8004034:	4b03      	ldr	r3, [pc, #12]	; (8004044 <DMA1_Channel2_3_IRQHandler+0x14>)
 8004036:	0018      	movs	r0, r3
 8004038:	f001 fbd0 	bl	80057dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800403c:	46c0      	nop			; (mov r8, r8)
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	200004f4 	.word	0x200004f4

08004048 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800404c:	4b03      	ldr	r3, [pc, #12]	; (800405c <TIM6_IRQHandler+0x14>)
 800404e:	0018      	movs	r0, r3
 8004050:	f003 f8d6 	bl	8007200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8004054:	46c0      	nop			; (mov r8, r8)
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	20000144 	.word	0x20000144

08004060 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004064:	4b03      	ldr	r3, [pc, #12]	; (8004074 <USART3_4_IRQHandler+0x14>)
 8004066:	0018      	movs	r0, r3
 8004068:	f004 fb4e 	bl	8008708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 800406c:	46c0      	nop			; (mov r8, r8)
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	20000404 	.word	0x20000404

08004078 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	e00a      	b.n	80040a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800408a:	e000      	b.n	800408e <_read+0x16>
 800408c:	bf00      	nop
 800408e:	0001      	movs	r1, r0
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	60ba      	str	r2, [r7, #8]
 8004096:	b2ca      	uxtb	r2, r1
 8004098:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	3301      	adds	r3, #1
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	dbf0      	blt.n	800408a <_read+0x12>
  }

  return len;
 80040a8:	687b      	ldr	r3, [r7, #4]
}
 80040aa:	0018      	movs	r0, r3
 80040ac:	46bd      	mov	sp, r7
 80040ae:	b006      	add	sp, #24
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b086      	sub	sp, #24
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	e009      	b.n	80040d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	60ba      	str	r2, [r7, #8]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f7ff f949 	bl	8003364 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	3301      	adds	r3, #1
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	429a      	cmp	r2, r3
 80040de:	dbf1      	blt.n	80040c4 <_write+0x12>
  }
  return len;
 80040e0:	687b      	ldr	r3, [r7, #4]
}
 80040e2:	0018      	movs	r0, r3
 80040e4:	46bd      	mov	sp, r7
 80040e6:	b006      	add	sp, #24
 80040e8:	bd80      	pop	{r7, pc}

080040ea <_close>:

int _close(int file)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b082      	sub	sp, #8
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80040f2:	2301      	movs	r3, #1
 80040f4:	425b      	negs	r3, r3
}
 80040f6:	0018      	movs	r0, r3
 80040f8:	46bd      	mov	sp, r7
 80040fa:	b002      	add	sp, #8
 80040fc:	bd80      	pop	{r7, pc}

080040fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b082      	sub	sp, #8
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	2280      	movs	r2, #128	; 0x80
 800410c:	0192      	lsls	r2, r2, #6
 800410e:	605a      	str	r2, [r3, #4]
  return 0;
 8004110:	2300      	movs	r3, #0
}
 8004112:	0018      	movs	r0, r3
 8004114:	46bd      	mov	sp, r7
 8004116:	b002      	add	sp, #8
 8004118:	bd80      	pop	{r7, pc}

0800411a <_isatty>:

int _isatty(int file)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b082      	sub	sp, #8
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004122:	2301      	movs	r3, #1
}
 8004124:	0018      	movs	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	b002      	add	sp, #8
 800412a:	bd80      	pop	{r7, pc}

0800412c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004138:	2300      	movs	r3, #0
}
 800413a:	0018      	movs	r0, r3
 800413c:	46bd      	mov	sp, r7
 800413e:	b004      	add	sp, #16
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800414c:	4a14      	ldr	r2, [pc, #80]	; (80041a0 <_sbrk+0x5c>)
 800414e:	4b15      	ldr	r3, [pc, #84]	; (80041a4 <_sbrk+0x60>)
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004158:	4b13      	ldr	r3, [pc, #76]	; (80041a8 <_sbrk+0x64>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d102      	bne.n	8004166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004160:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <_sbrk+0x64>)
 8004162:	4a12      	ldr	r2, [pc, #72]	; (80041ac <_sbrk+0x68>)
 8004164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004166:	4b10      	ldr	r3, [pc, #64]	; (80041a8 <_sbrk+0x64>)
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	18d3      	adds	r3, r2, r3
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	429a      	cmp	r2, r3
 8004172:	d207      	bcs.n	8004184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004174:	f009 fd9e 	bl	800dcb4 <__errno>
 8004178:	0003      	movs	r3, r0
 800417a:	220c      	movs	r2, #12
 800417c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800417e:	2301      	movs	r3, #1
 8004180:	425b      	negs	r3, r3
 8004182:	e009      	b.n	8004198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004184:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <_sbrk+0x64>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800418a:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <_sbrk+0x64>)
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	18d2      	adds	r2, r2, r3
 8004192:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <_sbrk+0x64>)
 8004194:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004196:	68fb      	ldr	r3, [r7, #12]
}
 8004198:	0018      	movs	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	b006      	add	sp, #24
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20009000 	.word	0x20009000
 80041a4:	00000400 	.word	0x00000400
 80041a8:	20000190 	.word	0x20000190
 80041ac:	20004d90 	.word	0x20004d90

080041b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041b4:	46c0      	nop			; (mov r8, r8)
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <asservMotorTaskCreate>:
 *       et TE sont définies avec les valeurs appropriées avant d'appeler cette fonction.
 *
 * @see vTaskAsservMotor, STACK_SIZE_ASSERV_MOTOR, TASK_PRIORITY_ASSERV_MOTOR, TE
 */
void asservMotorTaskCreate(void)
{
 80041bc:	b590      	push	{r4, r7, lr}
 80041be:	b083      	sub	sp, #12
 80041c0:	af02      	add	r7, sp, #8
    // Crée la tâche d'asservissement moteur
    if (xTaskCreate(vTaskAsservMotor, "Motor Asserv Task", STACK_SIZE_ASSERV_MOTOR, NULL, TASK_PRIORITY_ASSERV_MOTOR, &asserv_motor_task_h) != pdPASS)
 80041c2:	23fa      	movs	r3, #250	; 0xfa
 80041c4:	009a      	lsls	r2, r3, #2
 80041c6:	4920      	ldr	r1, [pc, #128]	; (8004248 <asservMotorTaskCreate+0x8c>)
 80041c8:	4820      	ldr	r0, [pc, #128]	; (800424c <asservMotorTaskCreate+0x90>)
 80041ca:	4b21      	ldr	r3, [pc, #132]	; (8004250 <asservMotorTaskCreate+0x94>)
 80041cc:	9301      	str	r3, [sp, #4]
 80041ce:	233c      	movs	r3, #60	; 0x3c
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	2300      	movs	r3, #0
 80041d4:	f006 fbdb 	bl	800a98e <xTaskCreate>
 80041d8:	0003      	movs	r3, r0
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d005      	beq.n	80041ea <asservMotorTaskCreate+0x2e>
    {
        printf("ERROR: Asserv Motor Task Creation\r\n");
 80041de:	4b1d      	ldr	r3, [pc, #116]	; (8004254 <asservMotorTaskCreate+0x98>)
 80041e0:	0018      	movs	r0, r3
 80041e2:	f009 fc03 	bl	800d9ec <puts>
        Error_Handler();
 80041e6:	f7ff f9f7 	bl	80035d8 <Error_Handler>
    }

    // Crée le timer d'asservissement
    timer_asserv_h = xTimerCreate("Asserv Timer", pdMS_TO_TICKS(TE), pdTRUE, NULL, vTaskAsservMotor);
 80041ea:	23fa      	movs	r3, #250	; 0xfa
 80041ec:	0059      	lsls	r1, r3, #1
 80041ee:	481a      	ldr	r0, [pc, #104]	; (8004258 <asservMotorTaskCreate+0x9c>)
 80041f0:	4b16      	ldr	r3, [pc, #88]	; (800424c <asservMotorTaskCreate+0x90>)
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	2300      	movs	r3, #0
 80041f6:	2201      	movs	r2, #1
 80041f8:	f007 fbd4 	bl	800b9a4 <xTimerCreate>
 80041fc:	0002      	movs	r2, r0
 80041fe:	4b17      	ldr	r3, [pc, #92]	; (800425c <asservMotorTaskCreate+0xa0>)
 8004200:	601a      	str	r2, [r3, #0]
    if (timer_asserv_h == NULL)
 8004202:	4b16      	ldr	r3, [pc, #88]	; (800425c <asservMotorTaskCreate+0xa0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d105      	bne.n	8004216 <asservMotorTaskCreate+0x5a>
    {
        printf("ERROR: Asserv Timer Creation\r\n");
 800420a:	4b15      	ldr	r3, [pc, #84]	; (8004260 <asservMotorTaskCreate+0xa4>)
 800420c:	0018      	movs	r0, r3
 800420e:	f009 fbed 	bl	800d9ec <puts>
        Error_Handler();
 8004212:	f7ff f9e1 	bl	80035d8 <Error_Handler>
    }

    // Démarre le timer d'asservissement
    if (xTimerStart(timer_asserv_h, 0) != pdPASS)
 8004216:	4b11      	ldr	r3, [pc, #68]	; (800425c <asservMotorTaskCreate+0xa0>)
 8004218:	681c      	ldr	r4, [r3, #0]
 800421a:	f006 fdf1 	bl	800ae00 <xTaskGetTickCount>
 800421e:	0002      	movs	r2, r0
 8004220:	2300      	movs	r3, #0
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	2300      	movs	r3, #0
 8004226:	2101      	movs	r1, #1
 8004228:	0020      	movs	r0, r4
 800422a:	f007 fc11 	bl	800ba50 <xTimerGenericCommand>
 800422e:	0003      	movs	r3, r0
 8004230:	2b01      	cmp	r3, #1
 8004232:	d005      	beq.n	8004240 <asservMotorTaskCreate+0x84>
    {
        printf("Error Asserv Timer Start\r\n");
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <asservMotorTaskCreate+0xa8>)
 8004236:	0018      	movs	r0, r3
 8004238:	f009 fbd8 	bl	800d9ec <puts>
        Error_Handler();
 800423c:	f7ff f9cc 	bl	80035d8 <Error_Handler>
    }
}
 8004240:	46c0      	nop			; (mov r8, r8)
 8004242:	46bd      	mov	sp, r7
 8004244:	b001      	add	sp, #4
 8004246:	bd90      	pop	{r4, r7, pc}
 8004248:	0801094c 	.word	0x0801094c
 800424c:	08004269 	.word	0x08004269
 8004250:	20000194 	.word	0x20000194
 8004254:	08010960 	.word	0x08010960
 8004258:	08010984 	.word	0x08010984
 800425c:	20000198 	.word	0x20000198
 8004260:	08010994 	.word	0x08010994
 8004264:	080109b4 	.word	0x080109b4

08004268 <vTaskAsservMotor>:
 * le correcteur PID, et envoie les commandes de vitesse aux moteurs.
 *
 * @param param Pointeur vers les paramètres de la tâche (non utilisé ici).
 */
void vTaskAsservMotor(void *param)
{
 8004268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800426a:	b089      	sub	sp, #36	; 0x24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
    uint32_t current_pos_motor_left  = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
    uint32_t current_pos_motor_right = 0;
 8004274:	2300      	movs	r3, #0
 8004276:	613b      	str	r3, [r7, #16]
    uint32_t last_pos_motor_left  = READ_MOTOR_ENCODER(motor_left);
 8004278:	4b3b      	ldr	r3, [pc, #236]	; (8004368 <vTaskAsservMotor+0x100>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	61fb      	str	r3, [r7, #28]
    uint32_t last_pos_motor_right = READ_MOTOR_ENCODER(motor_right);
 8004282:	4b3a      	ldr	r3, [pc, #232]	; (800436c <vTaskAsservMotor+0x104>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	61bb      	str	r3, [r7, #24]

    for (;;)
    {
        // Commande pour les moteurs
        uint8_t speed_cmd_motor_left  = command_motor_left.speed;
 800428c:	250f      	movs	r5, #15
 800428e:	197b      	adds	r3, r7, r5
 8004290:	4a37      	ldr	r2, [pc, #220]	; (8004370 <vTaskAsservMotor+0x108>)
 8004292:	7852      	ldrb	r2, [r2, #1]
 8004294:	701a      	strb	r2, [r3, #0]
        uint8_t speed_cmd_motor_right = command_motor_right.speed;
 8004296:	260e      	movs	r6, #14
 8004298:	19bb      	adds	r3, r7, r6
 800429a:	4a36      	ldr	r2, [pc, #216]	; (8004374 <vTaskAsservMotor+0x10c>)
 800429c:	7852      	ldrb	r2, [r2, #1]
 800429e:	701a      	strb	r2, [r3, #0]
        h_motor_state dir_cmd_motor_left = command_motor_left.dir;
 80042a0:	230d      	movs	r3, #13
 80042a2:	18fb      	adds	r3, r7, r3
 80042a4:	4a32      	ldr	r2, [pc, #200]	; (8004370 <vTaskAsservMotor+0x108>)
 80042a6:	7812      	ldrb	r2, [r2, #0]
 80042a8:	701a      	strb	r2, [r3, #0]
        h_motor_state dir_cmd_motor_right = command_motor_right.dir;
 80042aa:	220c      	movs	r2, #12
 80042ac:	18bb      	adds	r3, r7, r2
 80042ae:	4a31      	ldr	r2, [pc, #196]	; (8004374 <vTaskAsservMotor+0x10c>)
 80042b0:	7812      	ldrb	r2, [r2, #0]
 80042b2:	701a      	strb	r2, [r3, #0]

        // Lire valeur des encodeurs des deux moteurs
        current_pos_motor_left  = READ_MOTOR_ENCODER(motor_left);
 80042b4:	4b2c      	ldr	r3, [pc, #176]	; (8004368 <vTaskAsservMotor+0x100>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	617b      	str	r3, [r7, #20]
        current_pos_motor_right = READ_MOTOR_ENCODER(motor_right);
 80042be:	4b2b      	ldr	r3, [pc, #172]	; (800436c <vTaskAsservMotor+0x104>)
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	613b      	str	r3, [r7, #16]

        // Lire vitesse des moteurs
        uint8_t speed_mes_motor_left  = getSpeed(&motor_left, last_pos_motor_left, current_pos_motor_left, TE);
 80042c8:	210b      	movs	r1, #11
 80042ca:	187c      	adds	r4, r7, r1
 80042cc:	23fa      	movs	r3, #250	; 0xfa
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	69f9      	ldr	r1, [r7, #28]
 80042d4:	4824      	ldr	r0, [pc, #144]	; (8004368 <vTaskAsservMotor+0x100>)
 80042d6:	f7ff fbdf 	bl	8003a98 <getSpeed>
 80042da:	0003      	movs	r3, r0
 80042dc:	7023      	strb	r3, [r4, #0]
        uint8_t speed_mes_motor_right = getSpeed(&motor_right, last_pos_motor_right, current_pos_motor_right, TE);
 80042de:	200a      	movs	r0, #10
 80042e0:	183c      	adds	r4, r7, r0
 80042e2:	23fa      	movs	r3, #250	; 0xfa
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	69b9      	ldr	r1, [r7, #24]
 80042ea:	4820      	ldr	r0, [pc, #128]	; (800436c <vTaskAsservMotor+0x104>)
 80042ec:	f7ff fbd4 	bl	8003a98 <getSpeed>
 80042f0:	0003      	movs	r3, r0
 80042f2:	7023      	strb	r3, [r4, #0]

        // Erreur de vitesse entre commande et mesure pour les deux PID
        error(&pid_motor_left, speed_cmd_motor_left, speed_mes_motor_left);
 80042f4:	210b      	movs	r1, #11
 80042f6:	187b      	adds	r3, r7, r1
 80042f8:	781a      	ldrb	r2, [r3, #0]
 80042fa:	197b      	adds	r3, r7, r5
 80042fc:	7819      	ldrb	r1, [r3, #0]
 80042fe:	4b1e      	ldr	r3, [pc, #120]	; (8004378 <vTaskAsservMotor+0x110>)
 8004300:	0018      	movs	r0, r3
 8004302:	f7ff fcad 	bl	8003c60 <error>
        error(&pid_motor_right, speed_cmd_motor_right, speed_mes_motor_right);
 8004306:	200a      	movs	r0, #10
 8004308:	183b      	adds	r3, r7, r0
 800430a:	781a      	ldrb	r2, [r3, #0]
 800430c:	19bb      	adds	r3, r7, r6
 800430e:	7819      	ldrb	r1, [r3, #0]
 8004310:	4b1a      	ldr	r3, [pc, #104]	; (800437c <vTaskAsservMotor+0x114>)
 8004312:	0018      	movs	r0, r3
 8004314:	f7ff fca4 	bl	8003c60 <error>

        // Appliquer correcteur PID et récupérer la sortie
        uint8_t new_speed_motor_left  = correcteur(&pid_motor_left);
 8004318:	2509      	movs	r5, #9
 800431a:	197c      	adds	r4, r7, r5
 800431c:	4b16      	ldr	r3, [pc, #88]	; (8004378 <vTaskAsservMotor+0x110>)
 800431e:	0018      	movs	r0, r3
 8004320:	f7ff fcc1 	bl	8003ca6 <correcteur>
 8004324:	0003      	movs	r3, r0
 8004326:	7023      	strb	r3, [r4, #0]
        uint8_t new_speed_motor_right = correcteur(&pid_motor_right);
 8004328:	2608      	movs	r6, #8
 800432a:	19bc      	adds	r4, r7, r6
 800432c:	4b13      	ldr	r3, [pc, #76]	; (800437c <vTaskAsservMotor+0x114>)
 800432e:	0018      	movs	r0, r3
 8004330:	f7ff fcb9 	bl	8003ca6 <correcteur>
 8004334:	0003      	movs	r3, r0
 8004336:	7023      	strb	r3, [r4, #0]

        // Envoyer la commande au driver de moteur pour la génération des PWM
        setMotorSpeed(&motor_left, new_speed_motor_left, dir_cmd_motor_left);
 8004338:	230d      	movs	r3, #13
 800433a:	18fb      	adds	r3, r7, r3
 800433c:	781a      	ldrb	r2, [r3, #0]
 800433e:	197b      	adds	r3, r7, r5
 8004340:	7819      	ldrb	r1, [r3, #0]
 8004342:	4b09      	ldr	r3, [pc, #36]	; (8004368 <vTaskAsservMotor+0x100>)
 8004344:	0018      	movs	r0, r3
 8004346:	f7ff fb76 	bl	8003a36 <setMotorSpeed>
        setMotorSpeed(&motor_right, new_speed_motor_right, dir_cmd_motor_right);
 800434a:	220c      	movs	r2, #12
 800434c:	18bb      	adds	r3, r7, r2
 800434e:	781a      	ldrb	r2, [r3, #0]
 8004350:	19bb      	adds	r3, r7, r6
 8004352:	7819      	ldrb	r1, [r3, #0]
 8004354:	4b05      	ldr	r3, [pc, #20]	; (800436c <vTaskAsservMotor+0x104>)
 8004356:	0018      	movs	r0, r3
 8004358:	f7ff fb6d 	bl	8003a36 <setMotorSpeed>

        // Mettre à jour la dernière position des encodeurs
        last_pos_motor_left  = current_pos_motor_left;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	61fb      	str	r3, [r7, #28]
        last_pos_motor_right = current_pos_motor_right;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	61bb      	str	r3, [r7, #24]
    {
 8004364:	e792      	b.n	800428c <vTaskAsservMotor+0x24>
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	200000d4 	.word	0x200000d4
 800436c:	200000e4 	.word	0x200000e4
 8004370:	2000019c 	.word	0x2000019c
 8004374:	200001a0 	.word	0x200001a0
 8004378:	200000f4 	.word	0x200000f4
 800437c:	2000011c 	.word	0x2000011c

08004380 <positionMotorTaskCreate>:
command_t command_motor_right;

TaskHandle_t position_motor_task_h = NULL;

void positionMotorTaskCreate(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af02      	add	r7, sp, #8
	if(xTaskCreate(vTaskPositionMotor, "Position Motor Task", STACK_SIZE_POSITION_MOTOR, NULL, TASK_PRIORITY_POSITION_MOTOR, &position_motor_task_h) != pdPASS)
 8004386:	23fa      	movs	r3, #250	; 0xfa
 8004388:	009a      	lsls	r2, r3, #2
 800438a:	490a      	ldr	r1, [pc, #40]	; (80043b4 <positionMotorTaskCreate+0x34>)
 800438c:	480a      	ldr	r0, [pc, #40]	; (80043b8 <positionMotorTaskCreate+0x38>)
 800438e:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <positionMotorTaskCreate+0x3c>)
 8004390:	9301      	str	r3, [sp, #4]
 8004392:	235a      	movs	r3, #90	; 0x5a
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	2300      	movs	r3, #0
 8004398:	f006 faf9 	bl	800a98e <xTaskCreate>
 800439c:	0003      	movs	r3, r0
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d005      	beq.n	80043ae <positionMotorTaskCreate+0x2e>
	{
		printf("Error position motor task create\r\n");
 80043a2:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <positionMotorTaskCreate+0x40>)
 80043a4:	0018      	movs	r0, r3
 80043a6:	f009 fb21 	bl	800d9ec <puts>
		Error_Handler();
 80043aa:	f7ff f915 	bl	80035d8 <Error_Handler>
	}
}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	080109d0 	.word	0x080109d0
 80043b8:	080043d9 	.word	0x080043d9
 80043bc:	200001a4 	.word	0x200001a4
 80043c0:	080109e4 	.word	0x080109e4

080043c4 <getPositionMotorTaskHandle>:


TaskHandle_t getPositionMotorTaskHandle(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
	return position_motor_task_h;
 80043c8:	4b02      	ldr	r3, [pc, #8]	; (80043d4 <getPositionMotorTaskHandle+0x10>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	0018      	movs	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	200001a4 	.word	0x200001a4

080043d8 <vTaskPositionMotor>:


void vTaskPositionMotor(void *param)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
	uint32_t notify_value;
	position_t position_to_go = {19.0, 10};
 80043e0:	230c      	movs	r3, #12
 80043e2:	18fb      	adds	r3, r7, r3
 80043e4:	4a22      	ldr	r2, [pc, #136]	; (8004470 <vTaskPositionMotor+0x98>)
 80043e6:	ca03      	ldmia	r2!, {r0, r1}
 80043e8:	c303      	stmia	r3!, {r0, r1}


	for(;;)
	{
		if(xTaskNotifyWait(0, ULONG_MAX, &notify_value, portMAX_DELAY) == pdTRUE)
 80043ea:	2301      	movs	r3, #1
 80043ec:	425b      	negs	r3, r3
 80043ee:	2214      	movs	r2, #20
 80043f0:	18ba      	adds	r2, r7, r2
 80043f2:	2101      	movs	r1, #1
 80043f4:	4249      	negs	r1, r1
 80043f6:	2000      	movs	r0, #0
 80043f8:	f007 f950 	bl	800b69c <xTaskNotifyWait>
 80043fc:	0003      	movs	r3, r0
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d1f3      	bne.n	80043ea <vTaskPositionMotor+0x12>
		{
			if(notify_value == BORDER_F_NOTIFY) // Notification ISR capteurs bordure
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2b04      	cmp	r3, #4
 8004406:	d10c      	bne.n	8004422 <vTaskPositionMotor+0x4a>
			{
				// Gauche stop, Droit stop
				command_motor_left.speed  = 0;
 8004408:	4b1a      	ldr	r3, [pc, #104]	; (8004474 <vTaskPositionMotor+0x9c>)
 800440a:	2200      	movs	r2, #0
 800440c:	705a      	strb	r2, [r3, #1]
				command_motor_left.dir  = STOP;
 800440e:	4b19      	ldr	r3, [pc, #100]	; (8004474 <vTaskPositionMotor+0x9c>)
 8004410:	2202      	movs	r2, #2
 8004412:	701a      	strb	r2, [r3, #0]
				command_motor_right.speed = 0;
 8004414:	4b18      	ldr	r3, [pc, #96]	; (8004478 <vTaskPositionMotor+0xa0>)
 8004416:	2200      	movs	r2, #0
 8004418:	705a      	strb	r2, [r3, #1]
				command_motor_right.dir = STOP;
 800441a:	4b17      	ldr	r3, [pc, #92]	; (8004478 <vTaskPositionMotor+0xa0>)
 800441c:	2202      	movs	r2, #2
 800441e:	701a      	strb	r2, [r3, #0]
 8004420:	e7e3      	b.n	80043ea <vTaskPositionMotor+0x12>
			else // Nouvelle notification de position
			{
				// TODO : Choper la structure position_t du lidar
					// position_to_go = getPositionLidar();

				float angle = position_to_go.angle;
 8004422:	220c      	movs	r2, #12
 8004424:	18bb      	adds	r3, r7, r2
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	61fb      	str	r3, [r7, #28]
				uint16_t distance = position_to_go.distance;
 800442a:	231a      	movs	r3, #26
 800442c:	18fb      	adds	r3, r7, r3
 800442e:	18ba      	adds	r2, r7, r2
 8004430:	8892      	ldrh	r2, [r2, #4]
 8004432:	801a      	strh	r2, [r3, #0]

				// Gestion du positionnement en angle en priorité
				if(angle != 0 || angle != 180)
 8004434:	2100      	movs	r1, #0
 8004436:	69f8      	ldr	r0, [r7, #28]
 8004438:	f7fc f838 	bl	80004ac <__aeabi_fcmpeq>
 800443c:	1e03      	subs	r3, r0, #0
 800443e:	d005      	beq.n	800444c <vTaskPositionMotor+0x74>
 8004440:	490e      	ldr	r1, [pc, #56]	; (800447c <vTaskPositionMotor+0xa4>)
 8004442:	69f8      	ldr	r0, [r7, #28]
 8004444:	f7fc f832 	bl	80004ac <__aeabi_fcmpeq>
 8004448:	1e03      	subs	r3, r0, #0
 800444a:	d104      	bne.n	8004456 <vTaskPositionMotor+0x7e>
				{
					// Met à jour les état et la vitesse de chaque moteur
					angleToCommand(angle);
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	1c18      	adds	r0, r3, #0
 8004450:	f000 f816 	bl	8004480 <angleToCommand>
 8004454:	e00b      	b.n	800446e <vTaskPositionMotor+0x96>
				}
				// Vers la direction en ligne droite une fois que le robot est orienté correctement
				else if(distance > 0)
 8004456:	211a      	movs	r1, #26
 8004458:	187b      	adds	r3, r7, r1
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0c4      	beq.n	80043ea <vTaskPositionMotor+0x12>
				{
					// Met à jour les état et la vitesse de chaque moteur
					distanceToCommand(distance, angle);
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	187b      	adds	r3, r7, r1
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	1c11      	adds	r1, r2, #0
 8004468:	0018      	movs	r0, r3
 800446a:	f000 f873 	bl	8004554 <distanceToCommand>
		if(xTaskNotifyWait(0, ULONG_MAX, &notify_value, portMAX_DELAY) == pdTRUE)
 800446e:	e7bc      	b.n	80043ea <vTaskPositionMotor+0x12>
 8004470:	08010a08 	.word	0x08010a08
 8004474:	2000019c 	.word	0x2000019c
 8004478:	200001a0 	.word	0x200001a0
 800447c:	43340000 	.word	0x43340000

08004480 <angleToCommand>:
	}
}

// Gère les virage du robot
void angleToCommand(float angle)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
	if(angle > 0 && angle <= 90)
 8004488:	2100      	movs	r1, #0
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fc f828 	bl	80004e0 <__aeabi_fcmpgt>
 8004490:	1e03      	subs	r3, r0, #0
 8004492:	d012      	beq.n	80044ba <angleToCommand+0x3a>
 8004494:	492a      	ldr	r1, [pc, #168]	; (8004540 <angleToCommand+0xc0>)
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7fc f818 	bl	80004cc <__aeabi_fcmple>
 800449c:	1e03      	subs	r3, r0, #0
 800449e:	d00c      	beq.n	80044ba <angleToCommand+0x3a>
	{
		// Gauche en avant, Droit moins vite
		command_motor_left.speed  = 100;
 80044a0:	4b28      	ldr	r3, [pc, #160]	; (8004544 <angleToCommand+0xc4>)
 80044a2:	2264      	movs	r2, #100	; 0x64
 80044a4:	705a      	strb	r2, [r3, #1]
		command_motor_left.dir  = FWD;
 80044a6:	4b27      	ldr	r3, [pc, #156]	; (8004544 <angleToCommand+0xc4>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
		command_motor_right.speed = 20;
 80044ac:	4b26      	ldr	r3, [pc, #152]	; (8004548 <angleToCommand+0xc8>)
 80044ae:	2214      	movs	r2, #20
 80044b0:	705a      	strb	r2, [r3, #1]
		command_motor_right.dir = FWD;
 80044b2:	4b25      	ldr	r3, [pc, #148]	; (8004548 <angleToCommand+0xc8>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]
 80044b8:	e03e      	b.n	8004538 <angleToCommand+0xb8>
	}
	else if(angle > 90 && angle <= 180)
 80044ba:	4921      	ldr	r1, [pc, #132]	; (8004540 <angleToCommand+0xc0>)
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7fc f80f 	bl	80004e0 <__aeabi_fcmpgt>
 80044c2:	1e03      	subs	r3, r0, #0
 80044c4:	d012      	beq.n	80044ec <angleToCommand+0x6c>
 80044c6:	4921      	ldr	r1, [pc, #132]	; (800454c <angleToCommand+0xcc>)
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7fb ffff 	bl	80004cc <__aeabi_fcmple>
 80044ce:	1e03      	subs	r3, r0, #0
 80044d0:	d00c      	beq.n	80044ec <angleToCommand+0x6c>
	{
		// Gauche en arrière, Droit moins vite
		command_motor_left.speed  = 100;
 80044d2:	4b1c      	ldr	r3, [pc, #112]	; (8004544 <angleToCommand+0xc4>)
 80044d4:	2264      	movs	r2, #100	; 0x64
 80044d6:	705a      	strb	r2, [r3, #1]
		command_motor_left.dir  = REV;
 80044d8:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <angleToCommand+0xc4>)
 80044da:	2201      	movs	r2, #1
 80044dc:	701a      	strb	r2, [r3, #0]
		command_motor_right.speed = 20;
 80044de:	4b1a      	ldr	r3, [pc, #104]	; (8004548 <angleToCommand+0xc8>)
 80044e0:	2214      	movs	r2, #20
 80044e2:	705a      	strb	r2, [r3, #1]
		command_motor_right.dir = REV;
 80044e4:	4b18      	ldr	r3, [pc, #96]	; (8004548 <angleToCommand+0xc8>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	701a      	strb	r2, [r3, #0]
 80044ea:	e025      	b.n	8004538 <angleToCommand+0xb8>
	}
	else if(angle > 180 && angle <= 270)
 80044ec:	4917      	ldr	r1, [pc, #92]	; (800454c <angleToCommand+0xcc>)
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fb fff6 	bl	80004e0 <__aeabi_fcmpgt>
 80044f4:	1e03      	subs	r3, r0, #0
 80044f6:	d012      	beq.n	800451e <angleToCommand+0x9e>
 80044f8:	4915      	ldr	r1, [pc, #84]	; (8004550 <angleToCommand+0xd0>)
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7fb ffe6 	bl	80004cc <__aeabi_fcmple>
 8004500:	1e03      	subs	r3, r0, #0
 8004502:	d00c      	beq.n	800451e <angleToCommand+0x9e>
	{
		// Gauche moins vite, Droit en arrière
		command_motor_left.speed  = 20;
 8004504:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <angleToCommand+0xc4>)
 8004506:	2214      	movs	r2, #20
 8004508:	705a      	strb	r2, [r3, #1]
		command_motor_left.dir  = REV;
 800450a:	4b0e      	ldr	r3, [pc, #56]	; (8004544 <angleToCommand+0xc4>)
 800450c:	2201      	movs	r2, #1
 800450e:	701a      	strb	r2, [r3, #0]
		command_motor_right.speed = 100;
 8004510:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <angleToCommand+0xc8>)
 8004512:	2264      	movs	r2, #100	; 0x64
 8004514:	705a      	strb	r2, [r3, #1]
		command_motor_right.dir = REV;
 8004516:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <angleToCommand+0xc8>)
 8004518:	2201      	movs	r2, #1
 800451a:	701a      	strb	r2, [r3, #0]
 800451c:	e00c      	b.n	8004538 <angleToCommand+0xb8>
	}
	else
	{
		// Gauche moins vite, Droit en avant
		command_motor_left.speed  = 20;
 800451e:	4b09      	ldr	r3, [pc, #36]	; (8004544 <angleToCommand+0xc4>)
 8004520:	2214      	movs	r2, #20
 8004522:	705a      	strb	r2, [r3, #1]
		command_motor_left.dir  = FWD;
 8004524:	4b07      	ldr	r3, [pc, #28]	; (8004544 <angleToCommand+0xc4>)
 8004526:	2200      	movs	r2, #0
 8004528:	701a      	strb	r2, [r3, #0]
		command_motor_right.speed = 100;
 800452a:	4b07      	ldr	r3, [pc, #28]	; (8004548 <angleToCommand+0xc8>)
 800452c:	2264      	movs	r2, #100	; 0x64
 800452e:	705a      	strb	r2, [r3, #1]
		command_motor_right.dir = FWD;
 8004530:	4b05      	ldr	r3, [pc, #20]	; (8004548 <angleToCommand+0xc8>)
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]
	}
}
 8004536:	46c0      	nop			; (mov r8, r8)
 8004538:	46c0      	nop			; (mov r8, r8)
 800453a:	46bd      	mov	sp, r7
 800453c:	b002      	add	sp, #8
 800453e:	bd80      	pop	{r7, pc}
 8004540:	42b40000 	.word	0x42b40000
 8004544:	2000019c 	.word	0x2000019c
 8004548:	200001a0 	.word	0x200001a0
 800454c:	43340000 	.word	0x43340000
 8004550:	43870000 	.word	0x43870000

08004554 <distanceToCommand>:

// Déplacement en ligne droite
void distanceToCommand(uint16_t distance, float angle)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	0002      	movs	r2, r0
 800455c:	6039      	str	r1, [r7, #0]
 800455e:	1dbb      	adds	r3, r7, #6
 8004560:	801a      	strh	r2, [r3, #0]
	if(angle == 180)
 8004562:	4915      	ldr	r1, [pc, #84]	; (80045b8 <distanceToCommand+0x64>)
 8004564:	6838      	ldr	r0, [r7, #0]
 8004566:	f7fb ffa1 	bl	80004ac <__aeabi_fcmpeq>
 800456a:	1e03      	subs	r3, r0, #0
 800456c:	d00c      	beq.n	8004588 <distanceToCommand+0x34>
	{
		// Gauche en arrière, Droit en arrière
		command_motor_left.speed  = 100;
 800456e:	4b13      	ldr	r3, [pc, #76]	; (80045bc <distanceToCommand+0x68>)
 8004570:	2264      	movs	r2, #100	; 0x64
 8004572:	705a      	strb	r2, [r3, #1]
		command_motor_left.dir  = REV;
 8004574:	4b11      	ldr	r3, [pc, #68]	; (80045bc <distanceToCommand+0x68>)
 8004576:	2201      	movs	r2, #1
 8004578:	701a      	strb	r2, [r3, #0]
		command_motor_right.speed = 100;
 800457a:	4b11      	ldr	r3, [pc, #68]	; (80045c0 <distanceToCommand+0x6c>)
 800457c:	2264      	movs	r2, #100	; 0x64
 800457e:	705a      	strb	r2, [r3, #1]
		command_motor_right.dir = REV;
 8004580:	4b0f      	ldr	r3, [pc, #60]	; (80045c0 <distanceToCommand+0x6c>)
 8004582:	2201      	movs	r2, #1
 8004584:	701a      	strb	r2, [r3, #0]
		command_motor_left.speed  = 100;
		command_motor_left.dir  = FWD;
		command_motor_right.speed = 100;
		command_motor_right.dir = FWD;
	}
}
 8004586:	e012      	b.n	80045ae <distanceToCommand+0x5a>
	else if (angle == 0)
 8004588:	2100      	movs	r1, #0
 800458a:	6838      	ldr	r0, [r7, #0]
 800458c:	f7fb ff8e 	bl	80004ac <__aeabi_fcmpeq>
 8004590:	1e03      	subs	r3, r0, #0
 8004592:	d100      	bne.n	8004596 <distanceToCommand+0x42>
}
 8004594:	e00b      	b.n	80045ae <distanceToCommand+0x5a>
		command_motor_left.speed  = 100;
 8004596:	4b09      	ldr	r3, [pc, #36]	; (80045bc <distanceToCommand+0x68>)
 8004598:	2264      	movs	r2, #100	; 0x64
 800459a:	705a      	strb	r2, [r3, #1]
		command_motor_left.dir  = FWD;
 800459c:	4b07      	ldr	r3, [pc, #28]	; (80045bc <distanceToCommand+0x68>)
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
		command_motor_right.speed = 100;
 80045a2:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <distanceToCommand+0x6c>)
 80045a4:	2264      	movs	r2, #100	; 0x64
 80045a6:	705a      	strb	r2, [r3, #1]
		command_motor_right.dir = FWD;
 80045a8:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <distanceToCommand+0x6c>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	701a      	strb	r2, [r3, #0]
}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b002      	add	sp, #8
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	43340000 	.word	0x43340000
 80045bc:	2000019c 	.word	0x2000019c
 80045c0:	200001a0 	.word	0x200001a0

080045c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80045c4:	b590      	push	{r4, r7, lr}
 80045c6:	b08d      	sub	sp, #52	; 0x34
 80045c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80045ca:	240c      	movs	r4, #12
 80045cc:	193b      	adds	r3, r7, r4
 80045ce:	0018      	movs	r0, r3
 80045d0:	2324      	movs	r3, #36	; 0x24
 80045d2:	001a      	movs	r2, r3
 80045d4:	2100      	movs	r1, #0
 80045d6:	f009 fb05 	bl	800dbe4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045da:	003b      	movs	r3, r7
 80045dc:	0018      	movs	r0, r3
 80045de:	230c      	movs	r3, #12
 80045e0:	001a      	movs	r2, r3
 80045e2:	2100      	movs	r1, #0
 80045e4:	f009 fafe 	bl	800dbe4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80045e8:	4b28      	ldr	r3, [pc, #160]	; (800468c <MX_TIM1_Init+0xc8>)
 80045ea:	4a29      	ldr	r2, [pc, #164]	; (8004690 <MX_TIM1_Init+0xcc>)
 80045ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80045ee:	4b27      	ldr	r3, [pc, #156]	; (800468c <MX_TIM1_Init+0xc8>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045f4:	4b25      	ldr	r3, [pc, #148]	; (800468c <MX_TIM1_Init+0xc8>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80045fa:	4b24      	ldr	r3, [pc, #144]	; (800468c <MX_TIM1_Init+0xc8>)
 80045fc:	4a25      	ldr	r2, [pc, #148]	; (8004694 <MX_TIM1_Init+0xd0>)
 80045fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004600:	4b22      	ldr	r3, [pc, #136]	; (800468c <MX_TIM1_Init+0xc8>)
 8004602:	2200      	movs	r2, #0
 8004604:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004606:	4b21      	ldr	r3, [pc, #132]	; (800468c <MX_TIM1_Init+0xc8>)
 8004608:	2200      	movs	r2, #0
 800460a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800460c:	4b1f      	ldr	r3, [pc, #124]	; (800468c <MX_TIM1_Init+0xc8>)
 800460e:	2200      	movs	r2, #0
 8004610:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004612:	0021      	movs	r1, r4
 8004614:	187b      	adds	r3, r7, r1
 8004616:	2201      	movs	r2, #1
 8004618:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800461a:	187b      	adds	r3, r7, r1
 800461c:	2200      	movs	r2, #0
 800461e:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004620:	187b      	adds	r3, r7, r1
 8004622:	2201      	movs	r2, #1
 8004624:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004626:	187b      	adds	r3, r7, r1
 8004628:	2200      	movs	r2, #0
 800462a:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 800462c:	187b      	adds	r3, r7, r1
 800462e:	2200      	movs	r2, #0
 8004630:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004632:	187b      	adds	r3, r7, r1
 8004634:	2200      	movs	r2, #0
 8004636:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004638:	187b      	adds	r3, r7, r1
 800463a:	2201      	movs	r2, #1
 800463c:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800463e:	187b      	adds	r3, r7, r1
 8004640:	2200      	movs	r2, #0
 8004642:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8004644:	187b      	adds	r3, r7, r1
 8004646:	2200      	movs	r2, #0
 8004648:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800464a:	187a      	adds	r2, r7, r1
 800464c:	4b0f      	ldr	r3, [pc, #60]	; (800468c <MX_TIM1_Init+0xc8>)
 800464e:	0011      	movs	r1, r2
 8004650:	0018      	movs	r0, r3
 8004652:	f002 fc89 	bl	8006f68 <HAL_TIM_Encoder_Init>
 8004656:	1e03      	subs	r3, r0, #0
 8004658:	d001      	beq.n	800465e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800465a:	f7fe ffbd 	bl	80035d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800465e:	003b      	movs	r3, r7
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004664:	003b      	movs	r3, r7
 8004666:	2200      	movs	r2, #0
 8004668:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800466a:	003b      	movs	r3, r7
 800466c:	2200      	movs	r2, #0
 800466e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004670:	003a      	movs	r2, r7
 8004672:	4b06      	ldr	r3, [pc, #24]	; (800468c <MX_TIM1_Init+0xc8>)
 8004674:	0011      	movs	r1, r2
 8004676:	0018      	movs	r0, r3
 8004678:	f003 fd44 	bl	8008104 <HAL_TIMEx_MasterConfigSynchronization>
 800467c:	1e03      	subs	r3, r0, #0
 800467e:	d001      	beq.n	8004684 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8004680:	f7fe ffaa 	bl	80035d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004684:	46c0      	nop			; (mov r8, r8)
 8004686:	46bd      	mov	sp, r7
 8004688:	b00d      	add	sp, #52	; 0x34
 800468a:	bd90      	pop	{r4, r7, pc}
 800468c:	200001a8 	.word	0x200001a8
 8004690:	40012c00 	.word	0x40012c00
 8004694:	0000ffff 	.word	0x0000ffff

08004698 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004698:	b590      	push	{r4, r7, lr}
 800469a:	b08d      	sub	sp, #52	; 0x34
 800469c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800469e:	240c      	movs	r4, #12
 80046a0:	193b      	adds	r3, r7, r4
 80046a2:	0018      	movs	r0, r3
 80046a4:	2324      	movs	r3, #36	; 0x24
 80046a6:	001a      	movs	r2, r3
 80046a8:	2100      	movs	r1, #0
 80046aa:	f009 fa9b 	bl	800dbe4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046ae:	003b      	movs	r3, r7
 80046b0:	0018      	movs	r0, r3
 80046b2:	230c      	movs	r3, #12
 80046b4:	001a      	movs	r2, r3
 80046b6:	2100      	movs	r1, #0
 80046b8:	f009 fa94 	bl	800dbe4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80046bc:	4b25      	ldr	r3, [pc, #148]	; (8004754 <MX_TIM3_Init+0xbc>)
 80046be:	4a26      	ldr	r2, [pc, #152]	; (8004758 <MX_TIM3_Init+0xc0>)
 80046c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80046c2:	4b24      	ldr	r3, [pc, #144]	; (8004754 <MX_TIM3_Init+0xbc>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046c8:	4b22      	ldr	r3, [pc, #136]	; (8004754 <MX_TIM3_Init+0xbc>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80046ce:	4b21      	ldr	r3, [pc, #132]	; (8004754 <MX_TIM3_Init+0xbc>)
 80046d0:	4a22      	ldr	r2, [pc, #136]	; (800475c <MX_TIM3_Init+0xc4>)
 80046d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046d4:	4b1f      	ldr	r3, [pc, #124]	; (8004754 <MX_TIM3_Init+0xbc>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046da:	4b1e      	ldr	r3, [pc, #120]	; (8004754 <MX_TIM3_Init+0xbc>)
 80046dc:	2200      	movs	r2, #0
 80046de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80046e0:	0021      	movs	r1, r4
 80046e2:	187b      	adds	r3, r7, r1
 80046e4:	2201      	movs	r2, #1
 80046e6:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80046e8:	187b      	adds	r3, r7, r1
 80046ea:	2200      	movs	r2, #0
 80046ec:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80046ee:	187b      	adds	r3, r7, r1
 80046f0:	2201      	movs	r2, #1
 80046f2:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80046f4:	187b      	adds	r3, r7, r1
 80046f6:	2200      	movs	r2, #0
 80046f8:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80046fa:	187b      	adds	r3, r7, r1
 80046fc:	2200      	movs	r2, #0
 80046fe:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004700:	187b      	adds	r3, r7, r1
 8004702:	2200      	movs	r2, #0
 8004704:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004706:	187b      	adds	r3, r7, r1
 8004708:	2201      	movs	r2, #1
 800470a:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800470c:	187b      	adds	r3, r7, r1
 800470e:	2200      	movs	r2, #0
 8004710:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8004712:	187b      	adds	r3, r7, r1
 8004714:	2200      	movs	r2, #0
 8004716:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004718:	187a      	adds	r2, r7, r1
 800471a:	4b0e      	ldr	r3, [pc, #56]	; (8004754 <MX_TIM3_Init+0xbc>)
 800471c:	0011      	movs	r1, r2
 800471e:	0018      	movs	r0, r3
 8004720:	f002 fc22 	bl	8006f68 <HAL_TIM_Encoder_Init>
 8004724:	1e03      	subs	r3, r0, #0
 8004726:	d001      	beq.n	800472c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004728:	f7fe ff56 	bl	80035d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800472c:	003b      	movs	r3, r7
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004732:	003b      	movs	r3, r7
 8004734:	2200      	movs	r2, #0
 8004736:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004738:	003a      	movs	r2, r7
 800473a:	4b06      	ldr	r3, [pc, #24]	; (8004754 <MX_TIM3_Init+0xbc>)
 800473c:	0011      	movs	r1, r2
 800473e:	0018      	movs	r0, r3
 8004740:	f003 fce0 	bl	8008104 <HAL_TIMEx_MasterConfigSynchronization>
 8004744:	1e03      	subs	r3, r0, #0
 8004746:	d001      	beq.n	800474c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8004748:	f7fe ff46 	bl	80035d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800474c:	46c0      	nop			; (mov r8, r8)
 800474e:	46bd      	mov	sp, r7
 8004750:	b00d      	add	sp, #52	; 0x34
 8004752:	bd90      	pop	{r4, r7, pc}
 8004754:	200001f4 	.word	0x200001f4
 8004758:	40000400 	.word	0x40000400
 800475c:	0000ffff 	.word	0x0000ffff

08004760 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b088      	sub	sp, #32
 8004764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004766:	1d3b      	adds	r3, r7, #4
 8004768:	0018      	movs	r0, r3
 800476a:	231c      	movs	r3, #28
 800476c:	001a      	movs	r2, r3
 800476e:	2100      	movs	r1, #0
 8004770:	f009 fa38 	bl	800dbe4 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004774:	4b1f      	ldr	r3, [pc, #124]	; (80047f4 <MX_TIM14_Init+0x94>)
 8004776:	4a20      	ldr	r2, [pc, #128]	; (80047f8 <MX_TIM14_Init+0x98>)
 8004778:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 63;
 800477a:	4b1e      	ldr	r3, [pc, #120]	; (80047f4 <MX_TIM14_Init+0x94>)
 800477c:	223f      	movs	r2, #63	; 0x3f
 800477e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004780:	4b1c      	ldr	r3, [pc, #112]	; (80047f4 <MX_TIM14_Init+0x94>)
 8004782:	2200      	movs	r2, #0
 8004784:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8004786:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <MX_TIM14_Init+0x94>)
 8004788:	2263      	movs	r2, #99	; 0x63
 800478a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800478c:	4b19      	ldr	r3, [pc, #100]	; (80047f4 <MX_TIM14_Init+0x94>)
 800478e:	2200      	movs	r2, #0
 8004790:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004792:	4b18      	ldr	r3, [pc, #96]	; (80047f4 <MX_TIM14_Init+0x94>)
 8004794:	2200      	movs	r2, #0
 8004796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004798:	4b16      	ldr	r3, [pc, #88]	; (80047f4 <MX_TIM14_Init+0x94>)
 800479a:	0018      	movs	r0, r3
 800479c:	f002 f992 	bl	8006ac4 <HAL_TIM_Base_Init>
 80047a0:	1e03      	subs	r3, r0, #0
 80047a2:	d001      	beq.n	80047a8 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 80047a4:	f7fe ff18 	bl	80035d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80047a8:	4b12      	ldr	r3, [pc, #72]	; (80047f4 <MX_TIM14_Init+0x94>)
 80047aa:	0018      	movs	r0, r3
 80047ac:	f002 fa98 	bl	8006ce0 <HAL_TIM_PWM_Init>
 80047b0:	1e03      	subs	r3, r0, #0
 80047b2:	d001      	beq.n	80047b8 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 80047b4:	f7fe ff10 	bl	80035d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047b8:	1d3b      	adds	r3, r7, #4
 80047ba:	2260      	movs	r2, #96	; 0x60
 80047bc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80047be:	1d3b      	adds	r3, r7, #4
 80047c0:	2200      	movs	r2, #0
 80047c2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047c4:	1d3b      	adds	r3, r7, #4
 80047c6:	2200      	movs	r2, #0
 80047c8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047ca:	1d3b      	adds	r3, r7, #4
 80047cc:	2200      	movs	r2, #0
 80047ce:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047d0:	1d39      	adds	r1, r7, #4
 80047d2:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <MX_TIM14_Init+0x94>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	0018      	movs	r0, r3
 80047d8:	f002 fea4 	bl	8007524 <HAL_TIM_PWM_ConfigChannel>
 80047dc:	1e03      	subs	r3, r0, #0
 80047de:	d001      	beq.n	80047e4 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80047e0:	f7fe fefa 	bl	80035d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80047e4:	4b03      	ldr	r3, [pc, #12]	; (80047f4 <MX_TIM14_Init+0x94>)
 80047e6:	0018      	movs	r0, r3
 80047e8:	f000 fac2 	bl	8004d70 <HAL_TIM_MspPostInit>

}
 80047ec:	46c0      	nop			; (mov r8, r8)
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b008      	add	sp, #32
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	20000240 	.word	0x20000240
 80047f8:	40002000 	.word	0x40002000

080047fc <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b09c      	sub	sp, #112	; 0x70
 8004800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004802:	2360      	movs	r3, #96	; 0x60
 8004804:	18fb      	adds	r3, r7, r3
 8004806:	0018      	movs	r0, r3
 8004808:	2310      	movs	r3, #16
 800480a:	001a      	movs	r2, r3
 800480c:	2100      	movs	r1, #0
 800480e:	f009 f9e9 	bl	800dbe4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004812:	2354      	movs	r3, #84	; 0x54
 8004814:	18fb      	adds	r3, r7, r3
 8004816:	0018      	movs	r0, r3
 8004818:	230c      	movs	r3, #12
 800481a:	001a      	movs	r2, r3
 800481c:	2100      	movs	r1, #0
 800481e:	f009 f9e1 	bl	800dbe4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004822:	2338      	movs	r3, #56	; 0x38
 8004824:	18fb      	adds	r3, r7, r3
 8004826:	0018      	movs	r0, r3
 8004828:	231c      	movs	r3, #28
 800482a:	001a      	movs	r2, r3
 800482c:	2100      	movs	r1, #0
 800482e:	f009 f9d9 	bl	800dbe4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004832:	1d3b      	adds	r3, r7, #4
 8004834:	0018      	movs	r0, r3
 8004836:	2334      	movs	r3, #52	; 0x34
 8004838:	001a      	movs	r2, r3
 800483a:	2100      	movs	r1, #0
 800483c:	f009 f9d2 	bl	800dbe4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004840:	4b4d      	ldr	r3, [pc, #308]	; (8004978 <MX_TIM15_Init+0x17c>)
 8004842:	4a4e      	ldr	r2, [pc, #312]	; (800497c <MX_TIM15_Init+0x180>)
 8004844:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8004846:	4b4c      	ldr	r3, [pc, #304]	; (8004978 <MX_TIM15_Init+0x17c>)
 8004848:	2200      	movs	r2, #0
 800484a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800484c:	4b4a      	ldr	r3, [pc, #296]	; (8004978 <MX_TIM15_Init+0x17c>)
 800484e:	2200      	movs	r2, #0
 8004850:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2559;
 8004852:	4b49      	ldr	r3, [pc, #292]	; (8004978 <MX_TIM15_Init+0x17c>)
 8004854:	4a4a      	ldr	r2, [pc, #296]	; (8004980 <MX_TIM15_Init+0x184>)
 8004856:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004858:	4b47      	ldr	r3, [pc, #284]	; (8004978 <MX_TIM15_Init+0x17c>)
 800485a:	2200      	movs	r2, #0
 800485c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800485e:	4b46      	ldr	r3, [pc, #280]	; (8004978 <MX_TIM15_Init+0x17c>)
 8004860:	2200      	movs	r2, #0
 8004862:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004864:	4b44      	ldr	r3, [pc, #272]	; (8004978 <MX_TIM15_Init+0x17c>)
 8004866:	2200      	movs	r2, #0
 8004868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800486a:	4b43      	ldr	r3, [pc, #268]	; (8004978 <MX_TIM15_Init+0x17c>)
 800486c:	0018      	movs	r0, r3
 800486e:	f002 f929 	bl	8006ac4 <HAL_TIM_Base_Init>
 8004872:	1e03      	subs	r3, r0, #0
 8004874:	d001      	beq.n	800487a <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8004876:	f7fe feaf 	bl	80035d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800487a:	2160      	movs	r1, #96	; 0x60
 800487c:	187b      	adds	r3, r7, r1
 800487e:	2280      	movs	r2, #128	; 0x80
 8004880:	0152      	lsls	r2, r2, #5
 8004882:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004884:	187a      	adds	r2, r7, r1
 8004886:	4b3c      	ldr	r3, [pc, #240]	; (8004978 <MX_TIM15_Init+0x17c>)
 8004888:	0011      	movs	r1, r2
 800488a:	0018      	movs	r0, r3
 800488c:	f002 ff4a 	bl	8007724 <HAL_TIM_ConfigClockSource>
 8004890:	1e03      	subs	r3, r0, #0
 8004892:	d001      	beq.n	8004898 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8004894:	f7fe fea0 	bl	80035d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8004898:	4b37      	ldr	r3, [pc, #220]	; (8004978 <MX_TIM15_Init+0x17c>)
 800489a:	0018      	movs	r0, r3
 800489c:	f002 fa20 	bl	8006ce0 <HAL_TIM_PWM_Init>
 80048a0:	1e03      	subs	r3, r0, #0
 80048a2:	d001      	beq.n	80048a8 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 80048a4:	f7fe fe98 	bl	80035d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048a8:	2154      	movs	r1, #84	; 0x54
 80048aa:	187b      	adds	r3, r7, r1
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048b0:	187b      	adds	r3, r7, r1
 80048b2:	2200      	movs	r2, #0
 80048b4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80048b6:	187a      	adds	r2, r7, r1
 80048b8:	4b2f      	ldr	r3, [pc, #188]	; (8004978 <MX_TIM15_Init+0x17c>)
 80048ba:	0011      	movs	r1, r2
 80048bc:	0018      	movs	r0, r3
 80048be:	f003 fc21 	bl	8008104 <HAL_TIMEx_MasterConfigSynchronization>
 80048c2:	1e03      	subs	r3, r0, #0
 80048c4:	d001      	beq.n	80048ca <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 80048c6:	f7fe fe87 	bl	80035d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048ca:	2138      	movs	r1, #56	; 0x38
 80048cc:	187b      	adds	r3, r7, r1
 80048ce:	2260      	movs	r2, #96	; 0x60
 80048d0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80048d2:	187b      	adds	r3, r7, r1
 80048d4:	2200      	movs	r2, #0
 80048d6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048d8:	187b      	adds	r3, r7, r1
 80048da:	2200      	movs	r2, #0
 80048dc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80048de:	187b      	adds	r3, r7, r1
 80048e0:	2200      	movs	r2, #0
 80048e2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80048e4:	187b      	adds	r3, r7, r1
 80048e6:	2200      	movs	r2, #0
 80048e8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80048ea:	187b      	adds	r3, r7, r1
 80048ec:	2200      	movs	r2, #0
 80048ee:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80048f0:	187b      	adds	r3, r7, r1
 80048f2:	2200      	movs	r2, #0
 80048f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80048f6:	1879      	adds	r1, r7, r1
 80048f8:	4b1f      	ldr	r3, [pc, #124]	; (8004978 <MX_TIM15_Init+0x17c>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	0018      	movs	r0, r3
 80048fe:	f002 fe11 	bl	8007524 <HAL_TIM_PWM_ConfigChannel>
 8004902:	1e03      	subs	r3, r0, #0
 8004904:	d001      	beq.n	800490a <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8004906:	f7fe fe67 	bl	80035d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800490a:	2338      	movs	r3, #56	; 0x38
 800490c:	18f9      	adds	r1, r7, r3
 800490e:	4b1a      	ldr	r3, [pc, #104]	; (8004978 <MX_TIM15_Init+0x17c>)
 8004910:	2204      	movs	r2, #4
 8004912:	0018      	movs	r0, r3
 8004914:	f002 fe06 	bl	8007524 <HAL_TIM_PWM_ConfigChannel>
 8004918:	1e03      	subs	r3, r0, #0
 800491a:	d001      	beq.n	8004920 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 800491c:	f7fe fe5c 	bl	80035d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004920:	1d3b      	adds	r3, r7, #4
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004926:	1d3b      	adds	r3, r7, #4
 8004928:	2200      	movs	r2, #0
 800492a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800492c:	1d3b      	adds	r3, r7, #4
 800492e:	2200      	movs	r2, #0
 8004930:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004932:	1d3b      	adds	r3, r7, #4
 8004934:	2200      	movs	r2, #0
 8004936:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004938:	1d3b      	adds	r3, r7, #4
 800493a:	2200      	movs	r2, #0
 800493c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800493e:	1d3b      	adds	r3, r7, #4
 8004940:	2280      	movs	r2, #128	; 0x80
 8004942:	0192      	lsls	r2, r2, #6
 8004944:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004946:	1d3b      	adds	r3, r7, #4
 8004948:	2200      	movs	r2, #0
 800494a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800494c:	1d3b      	adds	r3, r7, #4
 800494e:	2200      	movs	r2, #0
 8004950:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004952:	1d3a      	adds	r2, r7, #4
 8004954:	4b08      	ldr	r3, [pc, #32]	; (8004978 <MX_TIM15_Init+0x17c>)
 8004956:	0011      	movs	r1, r2
 8004958:	0018      	movs	r0, r3
 800495a:	f003 fc3b 	bl	80081d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800495e:	1e03      	subs	r3, r0, #0
 8004960:	d001      	beq.n	8004966 <MX_TIM15_Init+0x16a>
  {
    Error_Handler();
 8004962:	f7fe fe39 	bl	80035d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8004966:	4b04      	ldr	r3, [pc, #16]	; (8004978 <MX_TIM15_Init+0x17c>)
 8004968:	0018      	movs	r0, r3
 800496a:	f000 fa01 	bl	8004d70 <HAL_TIM_MspPostInit>

}
 800496e:	46c0      	nop			; (mov r8, r8)
 8004970:	46bd      	mov	sp, r7
 8004972:	b01c      	add	sp, #112	; 0x70
 8004974:	bd80      	pop	{r7, pc}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	2000028c 	.word	0x2000028c
 800497c:	40014000 	.word	0x40014000
 8004980:	000009ff 	.word	0x000009ff

08004984 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b094      	sub	sp, #80	; 0x50
 8004988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800498a:	2334      	movs	r3, #52	; 0x34
 800498c:	18fb      	adds	r3, r7, r3
 800498e:	0018      	movs	r0, r3
 8004990:	231c      	movs	r3, #28
 8004992:	001a      	movs	r2, r3
 8004994:	2100      	movs	r1, #0
 8004996:	f009 f925 	bl	800dbe4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800499a:	003b      	movs	r3, r7
 800499c:	0018      	movs	r0, r3
 800499e:	2334      	movs	r3, #52	; 0x34
 80049a0:	001a      	movs	r2, r3
 80049a2:	2100      	movs	r1, #0
 80049a4:	f009 f91e 	bl	800dbe4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80049a8:	4b37      	ldr	r3, [pc, #220]	; (8004a88 <MX_TIM16_Init+0x104>)
 80049aa:	4a38      	ldr	r2, [pc, #224]	; (8004a8c <MX_TIM16_Init+0x108>)
 80049ac:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80049ae:	4b36      	ldr	r3, [pc, #216]	; (8004a88 <MX_TIM16_Init+0x104>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049b4:	4b34      	ldr	r3, [pc, #208]	; (8004a88 <MX_TIM16_Init+0x104>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2559;
 80049ba:	4b33      	ldr	r3, [pc, #204]	; (8004a88 <MX_TIM16_Init+0x104>)
 80049bc:	4a34      	ldr	r2, [pc, #208]	; (8004a90 <MX_TIM16_Init+0x10c>)
 80049be:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049c0:	4b31      	ldr	r3, [pc, #196]	; (8004a88 <MX_TIM16_Init+0x104>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80049c6:	4b30      	ldr	r3, [pc, #192]	; (8004a88 <MX_TIM16_Init+0x104>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049cc:	4b2e      	ldr	r3, [pc, #184]	; (8004a88 <MX_TIM16_Init+0x104>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80049d2:	4b2d      	ldr	r3, [pc, #180]	; (8004a88 <MX_TIM16_Init+0x104>)
 80049d4:	0018      	movs	r0, r3
 80049d6:	f002 f875 	bl	8006ac4 <HAL_TIM_Base_Init>
 80049da:	1e03      	subs	r3, r0, #0
 80049dc:	d001      	beq.n	80049e2 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80049de:	f7fe fdfb 	bl	80035d8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 80049e2:	4b29      	ldr	r3, [pc, #164]	; (8004a88 <MX_TIM16_Init+0x104>)
 80049e4:	0018      	movs	r0, r3
 80049e6:	f002 f91b 	bl	8006c20 <HAL_TIM_OC_Init>
 80049ea:	1e03      	subs	r3, r0, #0
 80049ec:	d001      	beq.n	80049f2 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 80049ee:	f7fe fdf3 	bl	80035d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80049f2:	2134      	movs	r1, #52	; 0x34
 80049f4:	187b      	adds	r3, r7, r1
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80049fa:	187b      	adds	r3, r7, r1
 80049fc:	2200      	movs	r2, #0
 80049fe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a00:	187b      	adds	r3, r7, r1
 8004a02:	2200      	movs	r2, #0
 8004a04:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004a06:	187b      	adds	r3, r7, r1
 8004a08:	2200      	movs	r2, #0
 8004a0a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a0c:	187b      	adds	r3, r7, r1
 8004a0e:	2200      	movs	r2, #0
 8004a10:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a12:	187b      	adds	r3, r7, r1
 8004a14:	2200      	movs	r2, #0
 8004a16:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a18:	187b      	adds	r3, r7, r1
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a1e:	1879      	adds	r1, r7, r1
 8004a20:	4b19      	ldr	r3, [pc, #100]	; (8004a88 <MX_TIM16_Init+0x104>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	0018      	movs	r0, r3
 8004a26:	f002 fd1d 	bl	8007464 <HAL_TIM_OC_ConfigChannel>
 8004a2a:	1e03      	subs	r3, r0, #0
 8004a2c:	d001      	beq.n	8004a32 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8004a2e:	f7fe fdd3 	bl	80035d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004a32:	003b      	movs	r3, r7
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004a38:	003b      	movs	r3, r7
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004a3e:	003b      	movs	r3, r7
 8004a40:	2200      	movs	r2, #0
 8004a42:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004a44:	003b      	movs	r3, r7
 8004a46:	2200      	movs	r2, #0
 8004a48:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004a4a:	003b      	movs	r3, r7
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004a50:	003b      	movs	r3, r7
 8004a52:	2280      	movs	r2, #128	; 0x80
 8004a54:	0192      	lsls	r2, r2, #6
 8004a56:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004a58:	003b      	movs	r3, r7
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004a5e:	003b      	movs	r3, r7
 8004a60:	2200      	movs	r2, #0
 8004a62:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8004a64:	003a      	movs	r2, r7
 8004a66:	4b08      	ldr	r3, [pc, #32]	; (8004a88 <MX_TIM16_Init+0x104>)
 8004a68:	0011      	movs	r1, r2
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f003 fbb2 	bl	80081d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8004a70:	1e03      	subs	r3, r0, #0
 8004a72:	d001      	beq.n	8004a78 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8004a74:	f7fe fdb0 	bl	80035d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8004a78:	4b03      	ldr	r3, [pc, #12]	; (8004a88 <MX_TIM16_Init+0x104>)
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f000 f978 	bl	8004d70 <HAL_TIM_MspPostInit>

}
 8004a80:	46c0      	nop			; (mov r8, r8)
 8004a82:	46bd      	mov	sp, r7
 8004a84:	b014      	add	sp, #80	; 0x50
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	200002d8 	.word	0x200002d8
 8004a8c:	40014400 	.word	0x40014400
 8004a90:	000009ff 	.word	0x000009ff

08004a94 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b094      	sub	sp, #80	; 0x50
 8004a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a9a:	2334      	movs	r3, #52	; 0x34
 8004a9c:	18fb      	adds	r3, r7, r3
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	231c      	movs	r3, #28
 8004aa2:	001a      	movs	r2, r3
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	f009 f89d 	bl	800dbe4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004aaa:	003b      	movs	r3, r7
 8004aac:	0018      	movs	r0, r3
 8004aae:	2334      	movs	r3, #52	; 0x34
 8004ab0:	001a      	movs	r2, r3
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	f009 f896 	bl	800dbe4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8004ab8:	4b37      	ldr	r3, [pc, #220]	; (8004b98 <MX_TIM17_Init+0x104>)
 8004aba:	4a38      	ldr	r2, [pc, #224]	; (8004b9c <MX_TIM17_Init+0x108>)
 8004abc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8004abe:	4b36      	ldr	r3, [pc, #216]	; (8004b98 <MX_TIM17_Init+0x104>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ac4:	4b34      	ldr	r3, [pc, #208]	; (8004b98 <MX_TIM17_Init+0x104>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2559;
 8004aca:	4b33      	ldr	r3, [pc, #204]	; (8004b98 <MX_TIM17_Init+0x104>)
 8004acc:	4a34      	ldr	r2, [pc, #208]	; (8004ba0 <MX_TIM17_Init+0x10c>)
 8004ace:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ad0:	4b31      	ldr	r3, [pc, #196]	; (8004b98 <MX_TIM17_Init+0x104>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8004ad6:	4b30      	ldr	r3, [pc, #192]	; (8004b98 <MX_TIM17_Init+0x104>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004adc:	4b2e      	ldr	r3, [pc, #184]	; (8004b98 <MX_TIM17_Init+0x104>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004ae2:	4b2d      	ldr	r3, [pc, #180]	; (8004b98 <MX_TIM17_Init+0x104>)
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f001 ffed 	bl	8006ac4 <HAL_TIM_Base_Init>
 8004aea:	1e03      	subs	r3, r0, #0
 8004aec:	d001      	beq.n	8004af2 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8004aee:	f7fe fd73 	bl	80035d8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8004af2:	4b29      	ldr	r3, [pc, #164]	; (8004b98 <MX_TIM17_Init+0x104>)
 8004af4:	0018      	movs	r0, r3
 8004af6:	f002 f893 	bl	8006c20 <HAL_TIM_OC_Init>
 8004afa:	1e03      	subs	r3, r0, #0
 8004afc:	d001      	beq.n	8004b02 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8004afe:	f7fe fd6b 	bl	80035d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004b02:	2134      	movs	r1, #52	; 0x34
 8004b04:	187b      	adds	r3, r7, r1
 8004b06:	2200      	movs	r2, #0
 8004b08:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004b0a:	187b      	adds	r3, r7, r1
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b10:	187b      	adds	r3, r7, r1
 8004b12:	2200      	movs	r2, #0
 8004b14:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004b16:	187b      	adds	r3, r7, r1
 8004b18:	2200      	movs	r2, #0
 8004b1a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b1c:	187b      	adds	r3, r7, r1
 8004b1e:	2200      	movs	r2, #0
 8004b20:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004b22:	187b      	adds	r3, r7, r1
 8004b24:	2200      	movs	r2, #0
 8004b26:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004b28:	187b      	adds	r3, r7, r1
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b2e:	1879      	adds	r1, r7, r1
 8004b30:	4b19      	ldr	r3, [pc, #100]	; (8004b98 <MX_TIM17_Init+0x104>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	0018      	movs	r0, r3
 8004b36:	f002 fc95 	bl	8007464 <HAL_TIM_OC_ConfigChannel>
 8004b3a:	1e03      	subs	r3, r0, #0
 8004b3c:	d001      	beq.n	8004b42 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8004b3e:	f7fe fd4b 	bl	80035d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004b42:	003b      	movs	r3, r7
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004b48:	003b      	movs	r3, r7
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004b4e:	003b      	movs	r3, r7
 8004b50:	2200      	movs	r2, #0
 8004b52:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004b54:	003b      	movs	r3, r7
 8004b56:	2200      	movs	r2, #0
 8004b58:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004b5a:	003b      	movs	r3, r7
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004b60:	003b      	movs	r3, r7
 8004b62:	2280      	movs	r2, #128	; 0x80
 8004b64:	0192      	lsls	r2, r2, #6
 8004b66:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004b68:	003b      	movs	r3, r7
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004b6e:	003b      	movs	r3, r7
 8004b70:	2200      	movs	r2, #0
 8004b72:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8004b74:	003a      	movs	r2, r7
 8004b76:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <MX_TIM17_Init+0x104>)
 8004b78:	0011      	movs	r1, r2
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	f003 fb2a 	bl	80081d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8004b80:	1e03      	subs	r3, r0, #0
 8004b82:	d001      	beq.n	8004b88 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8004b84:	f7fe fd28 	bl	80035d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8004b88:	4b03      	ldr	r3, [pc, #12]	; (8004b98 <MX_TIM17_Init+0x104>)
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f000 f8f0 	bl	8004d70 <HAL_TIM_MspPostInit>

}
 8004b90:	46c0      	nop			; (mov r8, r8)
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b014      	add	sp, #80	; 0x50
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	20000324 	.word	0x20000324
 8004b9c:	40014800 	.word	0x40014800
 8004ba0:	000009ff 	.word	0x000009ff

08004ba4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004ba4:	b590      	push	{r4, r7, lr}
 8004ba6:	b08d      	sub	sp, #52	; 0x34
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bac:	241c      	movs	r4, #28
 8004bae:	193b      	adds	r3, r7, r4
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	2314      	movs	r3, #20
 8004bb4:	001a      	movs	r2, r3
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	f009 f814 	bl	800dbe4 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a36      	ldr	r2, [pc, #216]	; (8004c9c <HAL_TIM_Encoder_MspInit+0xf8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d132      	bne.n	8004c2c <HAL_TIM_Encoder_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004bc6:	4b36      	ldr	r3, [pc, #216]	; (8004ca0 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bca:	4b35      	ldr	r3, [pc, #212]	; (8004ca0 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004bcc:	2180      	movs	r1, #128	; 0x80
 8004bce:	0109      	lsls	r1, r1, #4
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	641a      	str	r2, [r3, #64]	; 0x40
 8004bd4:	4b32      	ldr	r3, [pc, #200]	; (8004ca0 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004bd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bd8:	2380      	movs	r3, #128	; 0x80
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	4013      	ands	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
 8004be0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004be2:	4b2f      	ldr	r3, [pc, #188]	; (8004ca0 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004be6:	4b2e      	ldr	r3, [pc, #184]	; (8004ca0 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004be8:	2101      	movs	r1, #1
 8004bea:	430a      	orrs	r2, r1
 8004bec:	635a      	str	r2, [r3, #52]	; 0x34
 8004bee:	4b2c      	ldr	r3, [pc, #176]	; (8004ca0 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MR_ENC_B_Pin|MR_ENC_A_Pin;
 8004bfa:	193b      	adds	r3, r7, r4
 8004bfc:	22c0      	movs	r2, #192	; 0xc0
 8004bfe:	0092      	lsls	r2, r2, #2
 8004c00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c02:	0021      	movs	r1, r4
 8004c04:	187b      	adds	r3, r7, r1
 8004c06:	2202      	movs	r2, #2
 8004c08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0a:	187b      	adds	r3, r7, r1
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c10:	187b      	adds	r3, r7, r1
 8004c12:	2200      	movs	r2, #0
 8004c14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004c16:	187b      	adds	r3, r7, r1
 8004c18:	2202      	movs	r2, #2
 8004c1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c1c:	187a      	adds	r2, r7, r1
 8004c1e:	23a0      	movs	r3, #160	; 0xa0
 8004c20:	05db      	lsls	r3, r3, #23
 8004c22:	0011      	movs	r1, r2
 8004c24:	0018      	movs	r0, r3
 8004c26:	f000 ff1b 	bl	8005a60 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004c2a:	e032      	b.n	8004c92 <HAL_TIM_Encoder_MspInit+0xee>
  else if(tim_encoderHandle->Instance==TIM3)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a1c      	ldr	r2, [pc, #112]	; (8004ca4 <HAL_TIM_Encoder_MspInit+0x100>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d12d      	bne.n	8004c92 <HAL_TIM_Encoder_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c36:	4b1a      	ldr	r3, [pc, #104]	; (8004ca0 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004c38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c3a:	4b19      	ldr	r3, [pc, #100]	; (8004ca0 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004c3c:	2102      	movs	r1, #2
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c42:	4b17      	ldr	r3, [pc, #92]	; (8004ca0 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c46:	2202      	movs	r2, #2
 8004c48:	4013      	ands	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]
 8004c4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c4e:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c52:	4b13      	ldr	r3, [pc, #76]	; (8004ca0 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004c54:	2104      	movs	r1, #4
 8004c56:	430a      	orrs	r2, r1
 8004c58:	635a      	str	r2, [r3, #52]	; 0x34
 8004c5a:	4b11      	ldr	r3, [pc, #68]	; (8004ca0 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5e:	2204      	movs	r2, #4
 8004c60:	4013      	ands	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ML_ENC_B_Pin|ML_ENC_A_Pin;
 8004c66:	211c      	movs	r1, #28
 8004c68:	187b      	adds	r3, r7, r1
 8004c6a:	22c0      	movs	r2, #192	; 0xc0
 8004c6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c6e:	187b      	adds	r3, r7, r1
 8004c70:	2202      	movs	r2, #2
 8004c72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c74:	187b      	adds	r3, r7, r1
 8004c76:	2200      	movs	r2, #0
 8004c78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c7a:	187b      	adds	r3, r7, r1
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004c80:	187b      	adds	r3, r7, r1
 8004c82:	2201      	movs	r2, #1
 8004c84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c86:	187b      	adds	r3, r7, r1
 8004c88:	4a07      	ldr	r2, [pc, #28]	; (8004ca8 <HAL_TIM_Encoder_MspInit+0x104>)
 8004c8a:	0019      	movs	r1, r3
 8004c8c:	0010      	movs	r0, r2
 8004c8e:	f000 fee7 	bl	8005a60 <HAL_GPIO_Init>
}
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b00d      	add	sp, #52	; 0x34
 8004c98:	bd90      	pop	{r4, r7, pc}
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	40012c00 	.word	0x40012c00
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	40000400 	.word	0x40000400
 8004ca8:	50000800 	.word	0x50000800

08004cac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a28      	ldr	r2, [pc, #160]	; (8004d5c <HAL_TIM_Base_MspInit+0xb0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d10e      	bne.n	8004cdc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004cbe:	4b28      	ldr	r3, [pc, #160]	; (8004d60 <HAL_TIM_Base_MspInit+0xb4>)
 8004cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cc2:	4b27      	ldr	r3, [pc, #156]	; (8004d60 <HAL_TIM_Base_MspInit+0xb4>)
 8004cc4:	2180      	movs	r1, #128	; 0x80
 8004cc6:	0209      	lsls	r1, r1, #8
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	641a      	str	r2, [r3, #64]	; 0x40
 8004ccc:	4b24      	ldr	r3, [pc, #144]	; (8004d60 <HAL_TIM_Base_MspInit+0xb4>)
 8004cce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cd0:	2380      	movs	r3, #128	; 0x80
 8004cd2:	021b      	lsls	r3, r3, #8
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8004cda:	e03a      	b.n	8004d52 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM15)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a20      	ldr	r2, [pc, #128]	; (8004d64 <HAL_TIM_Base_MspInit+0xb8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d10e      	bne.n	8004d04 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004ce6:	4b1e      	ldr	r3, [pc, #120]	; (8004d60 <HAL_TIM_Base_MspInit+0xb4>)
 8004ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cea:	4b1d      	ldr	r3, [pc, #116]	; (8004d60 <HAL_TIM_Base_MspInit+0xb4>)
 8004cec:	2180      	movs	r1, #128	; 0x80
 8004cee:	0249      	lsls	r1, r1, #9
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	641a      	str	r2, [r3, #64]	; 0x40
 8004cf4:	4b1a      	ldr	r3, [pc, #104]	; (8004d60 <HAL_TIM_Base_MspInit+0xb4>)
 8004cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cf8:	2380      	movs	r3, #128	; 0x80
 8004cfa:	025b      	lsls	r3, r3, #9
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
 8004d00:	693b      	ldr	r3, [r7, #16]
}
 8004d02:	e026      	b.n	8004d52 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM16)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a17      	ldr	r2, [pc, #92]	; (8004d68 <HAL_TIM_Base_MspInit+0xbc>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d10e      	bne.n	8004d2c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004d0e:	4b14      	ldr	r3, [pc, #80]	; (8004d60 <HAL_TIM_Base_MspInit+0xb4>)
 8004d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d12:	4b13      	ldr	r3, [pc, #76]	; (8004d60 <HAL_TIM_Base_MspInit+0xb4>)
 8004d14:	2180      	movs	r1, #128	; 0x80
 8004d16:	0289      	lsls	r1, r1, #10
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	641a      	str	r2, [r3, #64]	; 0x40
 8004d1c:	4b10      	ldr	r3, [pc, #64]	; (8004d60 <HAL_TIM_Base_MspInit+0xb4>)
 8004d1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d20:	2380      	movs	r3, #128	; 0x80
 8004d22:	029b      	lsls	r3, r3, #10
 8004d24:	4013      	ands	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
}
 8004d2a:	e012      	b.n	8004d52 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM17)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a0e      	ldr	r2, [pc, #56]	; (8004d6c <HAL_TIM_Base_MspInit+0xc0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d10d      	bne.n	8004d52 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004d36:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <HAL_TIM_Base_MspInit+0xb4>)
 8004d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d3a:	4b09      	ldr	r3, [pc, #36]	; (8004d60 <HAL_TIM_Base_MspInit+0xb4>)
 8004d3c:	2180      	movs	r1, #128	; 0x80
 8004d3e:	02c9      	lsls	r1, r1, #11
 8004d40:	430a      	orrs	r2, r1
 8004d42:	641a      	str	r2, [r3, #64]	; 0x40
 8004d44:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <HAL_TIM_Base_MspInit+0xb4>)
 8004d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d48:	2380      	movs	r3, #128	; 0x80
 8004d4a:	02db      	lsls	r3, r3, #11
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	60bb      	str	r3, [r7, #8]
 8004d50:	68bb      	ldr	r3, [r7, #8]
}
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b006      	add	sp, #24
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	46c0      	nop			; (mov r8, r8)
 8004d5c:	40002000 	.word	0x40002000
 8004d60:	40021000 	.word	0x40021000
 8004d64:	40014000 	.word	0x40014000
 8004d68:	40014400 	.word	0x40014400
 8004d6c:	40014800 	.word	0x40014800

08004d70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004d70:	b590      	push	{r4, r7, lr}
 8004d72:	b08d      	sub	sp, #52	; 0x34
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d78:	241c      	movs	r4, #28
 8004d7a:	193b      	adds	r3, r7, r4
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	2314      	movs	r3, #20
 8004d80:	001a      	movs	r2, r3
 8004d82:	2100      	movs	r1, #0
 8004d84:	f008 ff2e 	bl	800dbe4 <memset>
  if(timHandle->Instance==TIM14)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a50      	ldr	r2, [pc, #320]	; (8004ed0 <HAL_TIM_MspPostInit+0x160>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d122      	bne.n	8004dd8 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d92:	4b50      	ldr	r3, [pc, #320]	; (8004ed4 <HAL_TIM_MspPostInit+0x164>)
 8004d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d96:	4b4f      	ldr	r3, [pc, #316]	; (8004ed4 <HAL_TIM_MspPostInit+0x164>)
 8004d98:	2102      	movs	r1, #2
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	635a      	str	r2, [r3, #52]	; 0x34
 8004d9e:	4b4d      	ldr	r3, [pc, #308]	; (8004ed4 <HAL_TIM_MspPostInit+0x164>)
 8004da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da2:	2202      	movs	r2, #2
 8004da4:	4013      	ands	r3, r2
 8004da6:	61bb      	str	r3, [r7, #24]
 8004da8:	69bb      	ldr	r3, [r7, #24]
    /**TIM14 GPIO Configuration
    PB1     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = LIDAR_M_SCTR_Pin;
 8004daa:	0021      	movs	r1, r4
 8004dac:	187b      	adds	r3, r7, r1
 8004dae:	2202      	movs	r2, #2
 8004db0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004db2:	187b      	adds	r3, r7, r1
 8004db4:	2202      	movs	r2, #2
 8004db6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db8:	187b      	adds	r3, r7, r1
 8004dba:	2200      	movs	r2, #0
 8004dbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dbe:	187b      	adds	r3, r7, r1
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM14;
 8004dc4:	187b      	adds	r3, r7, r1
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LIDAR_M_SCTR_GPIO_Port, &GPIO_InitStruct);
 8004dca:	187b      	adds	r3, r7, r1
 8004dcc:	4a42      	ldr	r2, [pc, #264]	; (8004ed8 <HAL_TIM_MspPostInit+0x168>)
 8004dce:	0019      	movs	r1, r3
 8004dd0:	0010      	movs	r0, r2
 8004dd2:	f000 fe45 	bl	8005a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8004dd6:	e077      	b.n	8004ec8 <HAL_TIM_MspPostInit+0x158>
  else if(timHandle->Instance==TIM15)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a3f      	ldr	r2, [pc, #252]	; (8004edc <HAL_TIM_MspPostInit+0x16c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d123      	bne.n	8004e2a <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004de2:	4b3c      	ldr	r3, [pc, #240]	; (8004ed4 <HAL_TIM_MspPostInit+0x164>)
 8004de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004de6:	4b3b      	ldr	r3, [pc, #236]	; (8004ed4 <HAL_TIM_MspPostInit+0x164>)
 8004de8:	2102      	movs	r1, #2
 8004dea:	430a      	orrs	r2, r1
 8004dec:	635a      	str	r2, [r3, #52]	; 0x34
 8004dee:	4b39      	ldr	r3, [pc, #228]	; (8004ed4 <HAL_TIM_MspPostInit+0x164>)
 8004df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df2:	2202      	movs	r2, #2
 8004df4:	4013      	ands	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MR_REV_Pin|MR_FWD_Pin;
 8004dfa:	211c      	movs	r1, #28
 8004dfc:	187b      	adds	r3, r7, r1
 8004dfe:	22c0      	movs	r2, #192	; 0xc0
 8004e00:	0212      	lsls	r2, r2, #8
 8004e02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e04:	187b      	adds	r3, r7, r1
 8004e06:	2202      	movs	r2, #2
 8004e08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e0a:	187b      	adds	r3, r7, r1
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e10:	187b      	adds	r3, r7, r1
 8004e12:	2200      	movs	r2, #0
 8004e14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 8004e16:	187b      	adds	r3, r7, r1
 8004e18:	2205      	movs	r2, #5
 8004e1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e1c:	187b      	adds	r3, r7, r1
 8004e1e:	4a2e      	ldr	r2, [pc, #184]	; (8004ed8 <HAL_TIM_MspPostInit+0x168>)
 8004e20:	0019      	movs	r1, r3
 8004e22:	0010      	movs	r0, r2
 8004e24:	f000 fe1c 	bl	8005a60 <HAL_GPIO_Init>
}
 8004e28:	e04e      	b.n	8004ec8 <HAL_TIM_MspPostInit+0x158>
  else if(timHandle->Instance==TIM16)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a2c      	ldr	r2, [pc, #176]	; (8004ee0 <HAL_TIM_MspPostInit+0x170>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d122      	bne.n	8004e7a <HAL_TIM_MspPostInit+0x10a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e34:	4b27      	ldr	r3, [pc, #156]	; (8004ed4 <HAL_TIM_MspPostInit+0x164>)
 8004e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e38:	4b26      	ldr	r3, [pc, #152]	; (8004ed4 <HAL_TIM_MspPostInit+0x164>)
 8004e3a:	2108      	movs	r1, #8
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	635a      	str	r2, [r3, #52]	; 0x34
 8004e40:	4b24      	ldr	r3, [pc, #144]	; (8004ed4 <HAL_TIM_MspPostInit+0x164>)
 8004e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e44:	2208      	movs	r2, #8
 8004e46:	4013      	ands	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
 8004e4a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ML_REV_Pin;
 8004e4c:	211c      	movs	r1, #28
 8004e4e:	187b      	adds	r3, r7, r1
 8004e50:	2201      	movs	r2, #1
 8004e52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e54:	187b      	adds	r3, r7, r1
 8004e56:	2202      	movs	r2, #2
 8004e58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e5a:	187b      	adds	r3, r7, r1
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e60:	187b      	adds	r3, r7, r1
 8004e62:	2200      	movs	r2, #0
 8004e64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8004e66:	187b      	adds	r3, r7, r1
 8004e68:	2202      	movs	r2, #2
 8004e6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ML_REV_GPIO_Port, &GPIO_InitStruct);
 8004e6c:	187b      	adds	r3, r7, r1
 8004e6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ee4 <HAL_TIM_MspPostInit+0x174>)
 8004e70:	0019      	movs	r1, r3
 8004e72:	0010      	movs	r0, r2
 8004e74:	f000 fdf4 	bl	8005a60 <HAL_GPIO_Init>
}
 8004e78:	e026      	b.n	8004ec8 <HAL_TIM_MspPostInit+0x158>
  else if(timHandle->Instance==TIM17)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ee8 <HAL_TIM_MspPostInit+0x178>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d121      	bne.n	8004ec8 <HAL_TIM_MspPostInit+0x158>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e84:	4b13      	ldr	r3, [pc, #76]	; (8004ed4 <HAL_TIM_MspPostInit+0x164>)
 8004e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e88:	4b12      	ldr	r3, [pc, #72]	; (8004ed4 <HAL_TIM_MspPostInit+0x164>)
 8004e8a:	2108      	movs	r1, #8
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	635a      	str	r2, [r3, #52]	; 0x34
 8004e90:	4b10      	ldr	r3, [pc, #64]	; (8004ed4 <HAL_TIM_MspPostInit+0x164>)
 8004e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e94:	2208      	movs	r2, #8
 8004e96:	4013      	ands	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ML_FWD_Pin;
 8004e9c:	211c      	movs	r1, #28
 8004e9e:	187b      	adds	r3, r7, r1
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ea4:	187b      	adds	r3, r7, r1
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eaa:	187b      	adds	r3, r7, r1
 8004eac:	2200      	movs	r2, #0
 8004eae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eb0:	187b      	adds	r3, r7, r1
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8004eb6:	187b      	adds	r3, r7, r1
 8004eb8:	2202      	movs	r2, #2
 8004eba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ML_FWD_GPIO_Port, &GPIO_InitStruct);
 8004ebc:	187b      	adds	r3, r7, r1
 8004ebe:	4a09      	ldr	r2, [pc, #36]	; (8004ee4 <HAL_TIM_MspPostInit+0x174>)
 8004ec0:	0019      	movs	r1, r3
 8004ec2:	0010      	movs	r0, r2
 8004ec4:	f000 fdcc 	bl	8005a60 <HAL_GPIO_Init>
}
 8004ec8:	46c0      	nop			; (mov r8, r8)
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	b00d      	add	sp, #52	; 0x34
 8004ece:	bd90      	pop	{r4, r7, pc}
 8004ed0:	40002000 	.word	0x40002000
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	50000400 	.word	0x50000400
 8004edc:	40014000 	.word	0x40014000
 8004ee0:	40014400 	.word	0x40014400
 8004ee4:	50000c00 	.word	0x50000c00
 8004ee8:	40014800 	.word	0x40014800

08004eec <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart4_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004ef0:	4b25      	ldr	r3, [pc, #148]	; (8004f88 <MX_USART2_UART_Init+0x9c>)
 8004ef2:	4a26      	ldr	r2, [pc, #152]	; (8004f8c <MX_USART2_UART_Init+0xa0>)
 8004ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004ef6:	4b24      	ldr	r3, [pc, #144]	; (8004f88 <MX_USART2_UART_Init+0x9c>)
 8004ef8:	22e1      	movs	r2, #225	; 0xe1
 8004efa:	0252      	lsls	r2, r2, #9
 8004efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004efe:	4b22      	ldr	r3, [pc, #136]	; (8004f88 <MX_USART2_UART_Init+0x9c>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004f04:	4b20      	ldr	r3, [pc, #128]	; (8004f88 <MX_USART2_UART_Init+0x9c>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004f0a:	4b1f      	ldr	r3, [pc, #124]	; (8004f88 <MX_USART2_UART_Init+0x9c>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004f10:	4b1d      	ldr	r3, [pc, #116]	; (8004f88 <MX_USART2_UART_Init+0x9c>)
 8004f12:	220c      	movs	r2, #12
 8004f14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f16:	4b1c      	ldr	r3, [pc, #112]	; (8004f88 <MX_USART2_UART_Init+0x9c>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f1c:	4b1a      	ldr	r3, [pc, #104]	; (8004f88 <MX_USART2_UART_Init+0x9c>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f22:	4b19      	ldr	r3, [pc, #100]	; (8004f88 <MX_USART2_UART_Init+0x9c>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004f28:	4b17      	ldr	r3, [pc, #92]	; (8004f88 <MX_USART2_UART_Init+0x9c>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8004f2e:	4b16      	ldr	r3, [pc, #88]	; (8004f88 <MX_USART2_UART_Init+0x9c>)
 8004f30:	2208      	movs	r2, #8
 8004f32:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8004f34:	4b14      	ldr	r3, [pc, #80]	; (8004f88 <MX_USART2_UART_Init+0x9c>)
 8004f36:	2280      	movs	r2, #128	; 0x80
 8004f38:	0212      	lsls	r2, r2, #8
 8004f3a:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004f3c:	4b12      	ldr	r3, [pc, #72]	; (8004f88 <MX_USART2_UART_Init+0x9c>)
 8004f3e:	0018      	movs	r0, r3
 8004f40:	f003 fa06 	bl	8008350 <HAL_UART_Init>
 8004f44:	1e03      	subs	r3, r0, #0
 8004f46:	d001      	beq.n	8004f4c <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8004f48:	f7fe fb46 	bl	80035d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f4c:	4b0e      	ldr	r3, [pc, #56]	; (8004f88 <MX_USART2_UART_Init+0x9c>)
 8004f4e:	2100      	movs	r1, #0
 8004f50:	0018      	movs	r0, r3
 8004f52:	f004 fdd3 	bl	8009afc <HAL_UARTEx_SetTxFifoThreshold>
 8004f56:	1e03      	subs	r3, r0, #0
 8004f58:	d001      	beq.n	8004f5e <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 8004f5a:	f7fe fb3d 	bl	80035d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f5e:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <MX_USART2_UART_Init+0x9c>)
 8004f60:	2100      	movs	r1, #0
 8004f62:	0018      	movs	r0, r3
 8004f64:	f004 fe0a 	bl	8009b7c <HAL_UARTEx_SetRxFifoThreshold>
 8004f68:	1e03      	subs	r3, r0, #0
 8004f6a:	d001      	beq.n	8004f70 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 8004f6c:	f7fe fb34 	bl	80035d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004f70:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <MX_USART2_UART_Init+0x9c>)
 8004f72:	0018      	movs	r0, r3
 8004f74:	f004 fd88 	bl	8009a88 <HAL_UARTEx_DisableFifoMode>
 8004f78:	1e03      	subs	r3, r0, #0
 8004f7a:	d001      	beq.n	8004f80 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 8004f7c:	f7fe fb2c 	bl	80035d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004f80:	46c0      	nop			; (mov r8, r8)
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	20000370 	.word	0x20000370
 8004f8c:	40004400 	.word	0x40004400

08004f90 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8004f94:	4b18      	ldr	r3, [pc, #96]	; (8004ff8 <MX_USART4_UART_Init+0x68>)
 8004f96:	4a19      	ldr	r2, [pc, #100]	; (8004ffc <MX_USART4_UART_Init+0x6c>)
 8004f98:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 128000;
 8004f9a:	4b17      	ldr	r3, [pc, #92]	; (8004ff8 <MX_USART4_UART_Init+0x68>)
 8004f9c:	22fa      	movs	r2, #250	; 0xfa
 8004f9e:	0252      	lsls	r2, r2, #9
 8004fa0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004fa2:	4b15      	ldr	r3, [pc, #84]	; (8004ff8 <MX_USART4_UART_Init+0x68>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004fa8:	4b13      	ldr	r3, [pc, #76]	; (8004ff8 <MX_USART4_UART_Init+0x68>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004fae:	4b12      	ldr	r3, [pc, #72]	; (8004ff8 <MX_USART4_UART_Init+0x68>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004fb4:	4b10      	ldr	r3, [pc, #64]	; (8004ff8 <MX_USART4_UART_Init+0x68>)
 8004fb6:	220c      	movs	r2, #12
 8004fb8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fba:	4b0f      	ldr	r3, [pc, #60]	; (8004ff8 <MX_USART4_UART_Init+0x68>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fc0:	4b0d      	ldr	r3, [pc, #52]	; (8004ff8 <MX_USART4_UART_Init+0x68>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fc6:	4b0c      	ldr	r3, [pc, #48]	; (8004ff8 <MX_USART4_UART_Init+0x68>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004fcc:	4b0a      	ldr	r3, [pc, #40]	; (8004ff8 <MX_USART4_UART_Init+0x68>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8004fd2:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <MX_USART4_UART_Init+0x68>)
 8004fd4:	2208      	movs	r2, #8
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8004fd8:	4b07      	ldr	r3, [pc, #28]	; (8004ff8 <MX_USART4_UART_Init+0x68>)
 8004fda:	2280      	movs	r2, #128	; 0x80
 8004fdc:	0212      	lsls	r2, r2, #8
 8004fde:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004fe0:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <MX_USART4_UART_Init+0x68>)
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f003 f9b4 	bl	8008350 <HAL_UART_Init>
 8004fe8:	1e03      	subs	r3, r0, #0
 8004fea:	d001      	beq.n	8004ff0 <MX_USART4_UART_Init+0x60>
  {
    Error_Handler();
 8004fec:	f7fe faf4 	bl	80035d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8004ff0:	46c0      	nop			; (mov r8, r8)
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	20000404 	.word	0x20000404
 8004ffc:	40004c00 	.word	0x40004c00

08005000 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005000:	b590      	push	{r4, r7, lr}
 8005002:	b093      	sub	sp, #76	; 0x4c
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005008:	2334      	movs	r3, #52	; 0x34
 800500a:	18fb      	adds	r3, r7, r3
 800500c:	0018      	movs	r0, r3
 800500e:	2314      	movs	r3, #20
 8005010:	001a      	movs	r2, r3
 8005012:	2100      	movs	r1, #0
 8005014:	f008 fde6 	bl	800dbe4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005018:	2418      	movs	r4, #24
 800501a:	193b      	adds	r3, r7, r4
 800501c:	0018      	movs	r0, r3
 800501e:	231c      	movs	r3, #28
 8005020:	001a      	movs	r2, r3
 8005022:	2100      	movs	r1, #0
 8005024:	f008 fdde 	bl	800dbe4 <memset>
  if(uartHandle->Instance==USART2)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a6b      	ldr	r2, [pc, #428]	; (80051dc <HAL_UART_MspInit+0x1dc>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d13e      	bne.n	80050b0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005032:	193b      	adds	r3, r7, r4
 8005034:	2202      	movs	r2, #2
 8005036:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005038:	193b      	adds	r3, r7, r4
 800503a:	2200      	movs	r2, #0
 800503c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800503e:	193b      	adds	r3, r7, r4
 8005040:	0018      	movs	r0, r3
 8005042:	f001 fc0b 	bl	800685c <HAL_RCCEx_PeriphCLKConfig>
 8005046:	1e03      	subs	r3, r0, #0
 8005048:	d001      	beq.n	800504e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800504a:	f7fe fac5 	bl	80035d8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800504e:	4b64      	ldr	r3, [pc, #400]	; (80051e0 <HAL_UART_MspInit+0x1e0>)
 8005050:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005052:	4b63      	ldr	r3, [pc, #396]	; (80051e0 <HAL_UART_MspInit+0x1e0>)
 8005054:	2180      	movs	r1, #128	; 0x80
 8005056:	0289      	lsls	r1, r1, #10
 8005058:	430a      	orrs	r2, r1
 800505a:	63da      	str	r2, [r3, #60]	; 0x3c
 800505c:	4b60      	ldr	r3, [pc, #384]	; (80051e0 <HAL_UART_MspInit+0x1e0>)
 800505e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005060:	2380      	movs	r3, #128	; 0x80
 8005062:	029b      	lsls	r3, r3, #10
 8005064:	4013      	ands	r3, r2
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800506a:	4b5d      	ldr	r3, [pc, #372]	; (80051e0 <HAL_UART_MspInit+0x1e0>)
 800506c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800506e:	4b5c      	ldr	r3, [pc, #368]	; (80051e0 <HAL_UART_MspInit+0x1e0>)
 8005070:	2108      	movs	r1, #8
 8005072:	430a      	orrs	r2, r1
 8005074:	635a      	str	r2, [r3, #52]	; 0x34
 8005076:	4b5a      	ldr	r3, [pc, #360]	; (80051e0 <HAL_UART_MspInit+0x1e0>)
 8005078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507a:	2208      	movs	r2, #8
 800507c:	4013      	ands	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
 8005080:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
 8005082:	2134      	movs	r1, #52	; 0x34
 8005084:	187b      	adds	r3, r7, r1
 8005086:	2260      	movs	r2, #96	; 0x60
 8005088:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800508a:	187b      	adds	r3, r7, r1
 800508c:	2202      	movs	r2, #2
 800508e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005090:	187b      	adds	r3, r7, r1
 8005092:	2200      	movs	r2, #0
 8005094:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005096:	187b      	adds	r3, r7, r1
 8005098:	2200      	movs	r2, #0
 800509a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 800509c:	187b      	adds	r3, r7, r1
 800509e:	2200      	movs	r2, #0
 80050a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050a2:	187b      	adds	r3, r7, r1
 80050a4:	4a4f      	ldr	r2, [pc, #316]	; (80051e4 <HAL_UART_MspInit+0x1e4>)
 80050a6:	0019      	movs	r1, r3
 80050a8:	0010      	movs	r0, r2
 80050aa:	f000 fcd9 	bl	8005a60 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 80050ae:	e091      	b.n	80051d4 <HAL_UART_MspInit+0x1d4>
  else if(uartHandle->Instance==USART4)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a4c      	ldr	r2, [pc, #304]	; (80051e8 <HAL_UART_MspInit+0x1e8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d000      	beq.n	80050bc <HAL_UART_MspInit+0xbc>
 80050ba:	e08b      	b.n	80051d4 <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART4_CLK_ENABLE();
 80050bc:	4b48      	ldr	r3, [pc, #288]	; (80051e0 <HAL_UART_MspInit+0x1e0>)
 80050be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050c0:	4b47      	ldr	r3, [pc, #284]	; (80051e0 <HAL_UART_MspInit+0x1e0>)
 80050c2:	2180      	movs	r1, #128	; 0x80
 80050c4:	0309      	lsls	r1, r1, #12
 80050c6:	430a      	orrs	r2, r1
 80050c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80050ca:	4b45      	ldr	r3, [pc, #276]	; (80051e0 <HAL_UART_MspInit+0x1e0>)
 80050cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050ce:	2380      	movs	r3, #128	; 0x80
 80050d0:	031b      	lsls	r3, r3, #12
 80050d2:	4013      	ands	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050d8:	4b41      	ldr	r3, [pc, #260]	; (80051e0 <HAL_UART_MspInit+0x1e0>)
 80050da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050dc:	4b40      	ldr	r3, [pc, #256]	; (80051e0 <HAL_UART_MspInit+0x1e0>)
 80050de:	2101      	movs	r1, #1
 80050e0:	430a      	orrs	r2, r1
 80050e2:	635a      	str	r2, [r3, #52]	; 0x34
 80050e4:	4b3e      	ldr	r3, [pc, #248]	; (80051e0 <HAL_UART_MspInit+0x1e0>)
 80050e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e8:	2201      	movs	r2, #1
 80050ea:	4013      	ands	r3, r2
 80050ec:	60bb      	str	r3, [r7, #8]
 80050ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80050f0:	2134      	movs	r1, #52	; 0x34
 80050f2:	187b      	adds	r3, r7, r1
 80050f4:	2203      	movs	r2, #3
 80050f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050f8:	187b      	adds	r3, r7, r1
 80050fa:	2202      	movs	r2, #2
 80050fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050fe:	187b      	adds	r3, r7, r1
 8005100:	2200      	movs	r2, #0
 8005102:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005104:	187b      	adds	r3, r7, r1
 8005106:	2200      	movs	r2, #0
 8005108:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 800510a:	187b      	adds	r3, r7, r1
 800510c:	2204      	movs	r2, #4
 800510e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005110:	187a      	adds	r2, r7, r1
 8005112:	23a0      	movs	r3, #160	; 0xa0
 8005114:	05db      	lsls	r3, r3, #23
 8005116:	0011      	movs	r1, r2
 8005118:	0018      	movs	r0, r3
 800511a:	f000 fca1 	bl	8005a60 <HAL_GPIO_Init>
    hdma_usart4_tx.Instance = DMA1_Channel1;
 800511e:	4b33      	ldr	r3, [pc, #204]	; (80051ec <HAL_UART_MspInit+0x1ec>)
 8005120:	4a33      	ldr	r2, [pc, #204]	; (80051f0 <HAL_UART_MspInit+0x1f0>)
 8005122:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_USART4_TX;
 8005124:	4b31      	ldr	r3, [pc, #196]	; (80051ec <HAL_UART_MspInit+0x1ec>)
 8005126:	2239      	movs	r2, #57	; 0x39
 8005128:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800512a:	4b30      	ldr	r3, [pc, #192]	; (80051ec <HAL_UART_MspInit+0x1ec>)
 800512c:	2210      	movs	r2, #16
 800512e:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005130:	4b2e      	ldr	r3, [pc, #184]	; (80051ec <HAL_UART_MspInit+0x1ec>)
 8005132:	2200      	movs	r2, #0
 8005134:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005136:	4b2d      	ldr	r3, [pc, #180]	; (80051ec <HAL_UART_MspInit+0x1ec>)
 8005138:	2280      	movs	r2, #128	; 0x80
 800513a:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800513c:	4b2b      	ldr	r3, [pc, #172]	; (80051ec <HAL_UART_MspInit+0x1ec>)
 800513e:	2200      	movs	r2, #0
 8005140:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005142:	4b2a      	ldr	r3, [pc, #168]	; (80051ec <HAL_UART_MspInit+0x1ec>)
 8005144:	2200      	movs	r2, #0
 8005146:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8005148:	4b28      	ldr	r3, [pc, #160]	; (80051ec <HAL_UART_MspInit+0x1ec>)
 800514a:	2200      	movs	r2, #0
 800514c:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800514e:	4b27      	ldr	r3, [pc, #156]	; (80051ec <HAL_UART_MspInit+0x1ec>)
 8005150:	2200      	movs	r2, #0
 8005152:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8005154:	4b25      	ldr	r3, [pc, #148]	; (80051ec <HAL_UART_MspInit+0x1ec>)
 8005156:	0018      	movs	r0, r3
 8005158:	f000 f964 	bl	8005424 <HAL_DMA_Init>
 800515c:	1e03      	subs	r3, r0, #0
 800515e:	d001      	beq.n	8005164 <HAL_UART_MspInit+0x164>
      Error_Handler();
 8005160:	f7fe fa3a 	bl	80035d8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a21      	ldr	r2, [pc, #132]	; (80051ec <HAL_UART_MspInit+0x1ec>)
 8005168:	67da      	str	r2, [r3, #124]	; 0x7c
 800516a:	4b20      	ldr	r3, [pc, #128]	; (80051ec <HAL_UART_MspInit+0x1ec>)
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart4_rx.Instance = DMA1_Channel2;
 8005170:	4b20      	ldr	r3, [pc, #128]	; (80051f4 <HAL_UART_MspInit+0x1f4>)
 8005172:	4a21      	ldr	r2, [pc, #132]	; (80051f8 <HAL_UART_MspInit+0x1f8>)
 8005174:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_USART4_RX;
 8005176:	4b1f      	ldr	r3, [pc, #124]	; (80051f4 <HAL_UART_MspInit+0x1f4>)
 8005178:	2238      	movs	r2, #56	; 0x38
 800517a:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800517c:	4b1d      	ldr	r3, [pc, #116]	; (80051f4 <HAL_UART_MspInit+0x1f4>)
 800517e:	2200      	movs	r2, #0
 8005180:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005182:	4b1c      	ldr	r3, [pc, #112]	; (80051f4 <HAL_UART_MspInit+0x1f4>)
 8005184:	2200      	movs	r2, #0
 8005186:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005188:	4b1a      	ldr	r3, [pc, #104]	; (80051f4 <HAL_UART_MspInit+0x1f4>)
 800518a:	2280      	movs	r2, #128	; 0x80
 800518c:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800518e:	4b19      	ldr	r3, [pc, #100]	; (80051f4 <HAL_UART_MspInit+0x1f4>)
 8005190:	2200      	movs	r2, #0
 8005192:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005194:	4b17      	ldr	r3, [pc, #92]	; (80051f4 <HAL_UART_MspInit+0x1f4>)
 8005196:	2200      	movs	r2, #0
 8005198:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 800519a:	4b16      	ldr	r3, [pc, #88]	; (80051f4 <HAL_UART_MspInit+0x1f4>)
 800519c:	2200      	movs	r2, #0
 800519e:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80051a0:	4b14      	ldr	r3, [pc, #80]	; (80051f4 <HAL_UART_MspInit+0x1f4>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 80051a6:	4b13      	ldr	r3, [pc, #76]	; (80051f4 <HAL_UART_MspInit+0x1f4>)
 80051a8:	0018      	movs	r0, r3
 80051aa:	f000 f93b 	bl	8005424 <HAL_DMA_Init>
 80051ae:	1e03      	subs	r3, r0, #0
 80051b0:	d001      	beq.n	80051b6 <HAL_UART_MspInit+0x1b6>
      Error_Handler();
 80051b2:	f7fe fa11 	bl	80035d8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2180      	movs	r1, #128	; 0x80
 80051ba:	4a0e      	ldr	r2, [pc, #56]	; (80051f4 <HAL_UART_MspInit+0x1f4>)
 80051bc:	505a      	str	r2, [r3, r1]
 80051be:	4b0d      	ldr	r3, [pc, #52]	; (80051f4 <HAL_UART_MspInit+0x1f4>)
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 80051c4:	2200      	movs	r2, #0
 80051c6:	2103      	movs	r1, #3
 80051c8:	201d      	movs	r0, #29
 80051ca:	f000 f905 	bl	80053d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80051ce:	201d      	movs	r0, #29
 80051d0:	f000 f917 	bl	8005402 <HAL_NVIC_EnableIRQ>
}
 80051d4:	46c0      	nop			; (mov r8, r8)
 80051d6:	46bd      	mov	sp, r7
 80051d8:	b013      	add	sp, #76	; 0x4c
 80051da:	bd90      	pop	{r4, r7, pc}
 80051dc:	40004400 	.word	0x40004400
 80051e0:	40021000 	.word	0x40021000
 80051e4:	50000c00 	.word	0x50000c00
 80051e8:	40004c00 	.word	0x40004c00
 80051ec:	20000498 	.word	0x20000498
 80051f0:	40020008 	.word	0x40020008
 80051f4:	200004f4 	.word	0x200004f4
 80051f8:	4002001c 	.word	0x4002001c

080051fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80051fc:	480d      	ldr	r0, [pc, #52]	; (8005234 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80051fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005200:	f7fe ffd6 	bl	80041b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005204:	480c      	ldr	r0, [pc, #48]	; (8005238 <LoopForever+0x6>)
  ldr r1, =_edata
 8005206:	490d      	ldr	r1, [pc, #52]	; (800523c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005208:	4a0d      	ldr	r2, [pc, #52]	; (8005240 <LoopForever+0xe>)
  movs r3, #0
 800520a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800520c:	e002      	b.n	8005214 <LoopCopyDataInit>

0800520e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800520e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005212:	3304      	adds	r3, #4

08005214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005218:	d3f9      	bcc.n	800520e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800521a:	4a0a      	ldr	r2, [pc, #40]	; (8005244 <LoopForever+0x12>)
  ldr r4, =_ebss
 800521c:	4c0a      	ldr	r4, [pc, #40]	; (8005248 <LoopForever+0x16>)
  movs r3, #0
 800521e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005220:	e001      	b.n	8005226 <LoopFillZerobss>

08005222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005224:	3204      	adds	r2, #4

08005226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005228:	d3fb      	bcc.n	8005222 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800522a:	f008 fd49 	bl	800dcc0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800522e:	f7fe f8ab 	bl	8003388 <main>

08005232 <LoopForever>:

LoopForever:
  b LoopForever
 8005232:	e7fe      	b.n	8005232 <LoopForever>
  ldr   r0, =_estack
 8005234:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8005238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800523c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8005240:	08011388 	.word	0x08011388
  ldr r2, =_sbss
 8005244:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8005248:	20004d8c 	.word	0x20004d8c

0800524c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800524c:	e7fe      	b.n	800524c <ADC1_IRQHandler>
	...

08005250 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005256:	1dfb      	adds	r3, r7, #7
 8005258:	2200      	movs	r2, #0
 800525a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800525c:	4b0b      	ldr	r3, [pc, #44]	; (800528c <HAL_Init+0x3c>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	4b0a      	ldr	r3, [pc, #40]	; (800528c <HAL_Init+0x3c>)
 8005262:	2180      	movs	r1, #128	; 0x80
 8005264:	0049      	lsls	r1, r1, #1
 8005266:	430a      	orrs	r2, r1
 8005268:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800526a:	2003      	movs	r0, #3
 800526c:	f7fe fe34 	bl	8003ed8 <HAL_InitTick>
 8005270:	1e03      	subs	r3, r0, #0
 8005272:	d003      	beq.n	800527c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005274:	1dfb      	adds	r3, r7, #7
 8005276:	2201      	movs	r2, #1
 8005278:	701a      	strb	r2, [r3, #0]
 800527a:	e001      	b.n	8005280 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800527c:	f7fe fe02 	bl	8003e84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005280:	1dfb      	adds	r3, r7, #7
 8005282:	781b      	ldrb	r3, [r3, #0]
}
 8005284:	0018      	movs	r0, r3
 8005286:	46bd      	mov	sp, r7
 8005288:	b002      	add	sp, #8
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40022000 	.word	0x40022000

08005290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005294:	4b05      	ldr	r3, [pc, #20]	; (80052ac <HAL_IncTick+0x1c>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	001a      	movs	r2, r3
 800529a:	4b05      	ldr	r3, [pc, #20]	; (80052b0 <HAL_IncTick+0x20>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	18d2      	adds	r2, r2, r3
 80052a0:	4b03      	ldr	r3, [pc, #12]	; (80052b0 <HAL_IncTick+0x20>)
 80052a2:	601a      	str	r2, [r3, #0]
}
 80052a4:	46c0      	nop			; (mov r8, r8)
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	20000030 	.word	0x20000030
 80052b0:	20000550 	.word	0x20000550

080052b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  return uwTick;
 80052b8:	4b02      	ldr	r3, [pc, #8]	; (80052c4 <HAL_GetTick+0x10>)
 80052ba:	681b      	ldr	r3, [r3, #0]
}
 80052bc:	0018      	movs	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	46c0      	nop			; (mov r8, r8)
 80052c4:	20000550 	.word	0x20000550

080052c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	0002      	movs	r2, r0
 80052d0:	1dfb      	adds	r3, r7, #7
 80052d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80052d4:	1dfb      	adds	r3, r7, #7
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	2b7f      	cmp	r3, #127	; 0x7f
 80052da:	d809      	bhi.n	80052f0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052dc:	1dfb      	adds	r3, r7, #7
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	001a      	movs	r2, r3
 80052e2:	231f      	movs	r3, #31
 80052e4:	401a      	ands	r2, r3
 80052e6:	4b04      	ldr	r3, [pc, #16]	; (80052f8 <__NVIC_EnableIRQ+0x30>)
 80052e8:	2101      	movs	r1, #1
 80052ea:	4091      	lsls	r1, r2
 80052ec:	000a      	movs	r2, r1
 80052ee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80052f0:	46c0      	nop			; (mov r8, r8)
 80052f2:	46bd      	mov	sp, r7
 80052f4:	b002      	add	sp, #8
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	e000e100 	.word	0xe000e100

080052fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052fc:	b590      	push	{r4, r7, lr}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	0002      	movs	r2, r0
 8005304:	6039      	str	r1, [r7, #0]
 8005306:	1dfb      	adds	r3, r7, #7
 8005308:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800530a:	1dfb      	adds	r3, r7, #7
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b7f      	cmp	r3, #127	; 0x7f
 8005310:	d828      	bhi.n	8005364 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005312:	4a2f      	ldr	r2, [pc, #188]	; (80053d0 <__NVIC_SetPriority+0xd4>)
 8005314:	1dfb      	adds	r3, r7, #7
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	b25b      	sxtb	r3, r3
 800531a:	089b      	lsrs	r3, r3, #2
 800531c:	33c0      	adds	r3, #192	; 0xc0
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	589b      	ldr	r3, [r3, r2]
 8005322:	1dfa      	adds	r2, r7, #7
 8005324:	7812      	ldrb	r2, [r2, #0]
 8005326:	0011      	movs	r1, r2
 8005328:	2203      	movs	r2, #3
 800532a:	400a      	ands	r2, r1
 800532c:	00d2      	lsls	r2, r2, #3
 800532e:	21ff      	movs	r1, #255	; 0xff
 8005330:	4091      	lsls	r1, r2
 8005332:	000a      	movs	r2, r1
 8005334:	43d2      	mvns	r2, r2
 8005336:	401a      	ands	r2, r3
 8005338:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	019b      	lsls	r3, r3, #6
 800533e:	22ff      	movs	r2, #255	; 0xff
 8005340:	401a      	ands	r2, r3
 8005342:	1dfb      	adds	r3, r7, #7
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	0018      	movs	r0, r3
 8005348:	2303      	movs	r3, #3
 800534a:	4003      	ands	r3, r0
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005350:	481f      	ldr	r0, [pc, #124]	; (80053d0 <__NVIC_SetPriority+0xd4>)
 8005352:	1dfb      	adds	r3, r7, #7
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	b25b      	sxtb	r3, r3
 8005358:	089b      	lsrs	r3, r3, #2
 800535a:	430a      	orrs	r2, r1
 800535c:	33c0      	adds	r3, #192	; 0xc0
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005362:	e031      	b.n	80053c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005364:	4a1b      	ldr	r2, [pc, #108]	; (80053d4 <__NVIC_SetPriority+0xd8>)
 8005366:	1dfb      	adds	r3, r7, #7
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	0019      	movs	r1, r3
 800536c:	230f      	movs	r3, #15
 800536e:	400b      	ands	r3, r1
 8005370:	3b08      	subs	r3, #8
 8005372:	089b      	lsrs	r3, r3, #2
 8005374:	3306      	adds	r3, #6
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	18d3      	adds	r3, r2, r3
 800537a:	3304      	adds	r3, #4
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	1dfa      	adds	r2, r7, #7
 8005380:	7812      	ldrb	r2, [r2, #0]
 8005382:	0011      	movs	r1, r2
 8005384:	2203      	movs	r2, #3
 8005386:	400a      	ands	r2, r1
 8005388:	00d2      	lsls	r2, r2, #3
 800538a:	21ff      	movs	r1, #255	; 0xff
 800538c:	4091      	lsls	r1, r2
 800538e:	000a      	movs	r2, r1
 8005390:	43d2      	mvns	r2, r2
 8005392:	401a      	ands	r2, r3
 8005394:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	019b      	lsls	r3, r3, #6
 800539a:	22ff      	movs	r2, #255	; 0xff
 800539c:	401a      	ands	r2, r3
 800539e:	1dfb      	adds	r3, r7, #7
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	0018      	movs	r0, r3
 80053a4:	2303      	movs	r3, #3
 80053a6:	4003      	ands	r3, r0
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80053ac:	4809      	ldr	r0, [pc, #36]	; (80053d4 <__NVIC_SetPriority+0xd8>)
 80053ae:	1dfb      	adds	r3, r7, #7
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	001c      	movs	r4, r3
 80053b4:	230f      	movs	r3, #15
 80053b6:	4023      	ands	r3, r4
 80053b8:	3b08      	subs	r3, #8
 80053ba:	089b      	lsrs	r3, r3, #2
 80053bc:	430a      	orrs	r2, r1
 80053be:	3306      	adds	r3, #6
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	18c3      	adds	r3, r0, r3
 80053c4:	3304      	adds	r3, #4
 80053c6:	601a      	str	r2, [r3, #0]
}
 80053c8:	46c0      	nop			; (mov r8, r8)
 80053ca:	46bd      	mov	sp, r7
 80053cc:	b003      	add	sp, #12
 80053ce:	bd90      	pop	{r4, r7, pc}
 80053d0:	e000e100 	.word	0xe000e100
 80053d4:	e000ed00 	.word	0xe000ed00

080053d8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	607a      	str	r2, [r7, #4]
 80053e2:	210f      	movs	r1, #15
 80053e4:	187b      	adds	r3, r7, r1
 80053e6:	1c02      	adds	r2, r0, #0
 80053e8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	187b      	adds	r3, r7, r1
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	b25b      	sxtb	r3, r3
 80053f2:	0011      	movs	r1, r2
 80053f4:	0018      	movs	r0, r3
 80053f6:	f7ff ff81 	bl	80052fc <__NVIC_SetPriority>
}
 80053fa:	46c0      	nop			; (mov r8, r8)
 80053fc:	46bd      	mov	sp, r7
 80053fe:	b004      	add	sp, #16
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b082      	sub	sp, #8
 8005406:	af00      	add	r7, sp, #0
 8005408:	0002      	movs	r2, r0
 800540a:	1dfb      	adds	r3, r7, #7
 800540c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800540e:	1dfb      	adds	r3, r7, #7
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	b25b      	sxtb	r3, r3
 8005414:	0018      	movs	r0, r3
 8005416:	f7ff ff57 	bl	80052c8 <__NVIC_EnableIRQ>
}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	46bd      	mov	sp, r7
 800541e:	b002      	add	sp, #8
 8005420:	bd80      	pop	{r7, pc}
	...

08005424 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e077      	b.n	8005526 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a3d      	ldr	r2, [pc, #244]	; (8005530 <HAL_DMA_Init+0x10c>)
 800543c:	4694      	mov	ip, r2
 800543e:	4463      	add	r3, ip
 8005440:	2114      	movs	r1, #20
 8005442:	0018      	movs	r0, r3
 8005444:	f7fa fe72 	bl	800012c <__udivsi3>
 8005448:	0003      	movs	r3, r0
 800544a:	009a      	lsls	r2, r3, #2
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2225      	movs	r2, #37	; 0x25
 8005454:	2102      	movs	r1, #2
 8005456:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4934      	ldr	r1, [pc, #208]	; (8005534 <HAL_DMA_Init+0x110>)
 8005464:	400a      	ands	r2, r1
 8005466:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6819      	ldr	r1, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689a      	ldr	r2, [r3, #8]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	0018      	movs	r0, r3
 80054a2:	f000 fa8d 	bl	80059c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	2380      	movs	r3, #128	; 0x80
 80054ac:	01db      	lsls	r3, r3, #7
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d102      	bne.n	80054b8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c0:	213f      	movs	r1, #63	; 0x3f
 80054c2:	400a      	ands	r2, r1
 80054c4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80054ce:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d011      	beq.n	80054fc <HAL_DMA_Init+0xd8>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d80d      	bhi.n	80054fc <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	0018      	movs	r0, r3
 80054e4:	f000 fa98 	bl	8005a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80054f8:	605a      	str	r2, [r3, #4]
 80054fa:	e008      	b.n	800550e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2225      	movs	r2, #37	; 0x25
 8005518:	2101      	movs	r1, #1
 800551a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2224      	movs	r2, #36	; 0x24
 8005520:	2100      	movs	r1, #0
 8005522:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	0018      	movs	r0, r3
 8005528:	46bd      	mov	sp, r7
 800552a:	b002      	add	sp, #8
 800552c:	bd80      	pop	{r7, pc}
 800552e:	46c0      	nop			; (mov r8, r8)
 8005530:	bffdfff8 	.word	0xbffdfff8
 8005534:	ffff800f 	.word	0xffff800f

08005538 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
 8005544:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005546:	2317      	movs	r3, #23
 8005548:	18fb      	adds	r3, r7, r3
 800554a:	2200      	movs	r2, #0
 800554c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2224      	movs	r2, #36	; 0x24
 8005552:	5c9b      	ldrb	r3, [r3, r2]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d101      	bne.n	800555c <HAL_DMA_Start_IT+0x24>
 8005558:	2302      	movs	r3, #2
 800555a:	e06f      	b.n	800563c <HAL_DMA_Start_IT+0x104>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2224      	movs	r2, #36	; 0x24
 8005560:	2101      	movs	r1, #1
 8005562:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2225      	movs	r2, #37	; 0x25
 8005568:	5c9b      	ldrb	r3, [r3, r2]
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b01      	cmp	r3, #1
 800556e:	d157      	bne.n	8005620 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2225      	movs	r2, #37	; 0x25
 8005574:	2102      	movs	r1, #2
 8005576:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2101      	movs	r1, #1
 800558a:	438a      	bics	r2, r1
 800558c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	68b9      	ldr	r1, [r7, #8]
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 f9d3 	bl	8005940 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d008      	beq.n	80055b4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	210e      	movs	r1, #14
 80055ae:	430a      	orrs	r2, r1
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	e00f      	b.n	80055d4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2104      	movs	r1, #4
 80055c0:	438a      	bics	r2, r1
 80055c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	210a      	movs	r1, #10
 80055d0:	430a      	orrs	r2, r1
 80055d2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	2380      	movs	r3, #128	; 0x80
 80055dc:	025b      	lsls	r3, r3, #9
 80055de:	4013      	ands	r3, r2
 80055e0:	d008      	beq.n	80055f4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ec:	2180      	movs	r1, #128	; 0x80
 80055ee:	0049      	lsls	r1, r1, #1
 80055f0:	430a      	orrs	r2, r1
 80055f2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d008      	beq.n	800560e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005606:	2180      	movs	r1, #128	; 0x80
 8005608:	0049      	lsls	r1, r1, #1
 800560a:	430a      	orrs	r2, r1
 800560c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2101      	movs	r1, #1
 800561a:	430a      	orrs	r2, r1
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	e00a      	b.n	8005636 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2280      	movs	r2, #128	; 0x80
 8005624:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2224      	movs	r2, #36	; 0x24
 800562a:	2100      	movs	r1, #0
 800562c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800562e:	2317      	movs	r3, #23
 8005630:	18fb      	adds	r3, r7, r3
 8005632:	2201      	movs	r2, #1
 8005634:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005636:	2317      	movs	r3, #23
 8005638:	18fb      	adds	r3, r7, r3
 800563a:	781b      	ldrb	r3, [r3, #0]
}
 800563c:	0018      	movs	r0, r3
 800563e:	46bd      	mov	sp, r7
 8005640:	b006      	add	sp, #24
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e050      	b.n	80056f8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2225      	movs	r2, #37	; 0x25
 800565a:	5c9b      	ldrb	r3, [r3, r2]
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d008      	beq.n	8005674 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2204      	movs	r2, #4
 8005666:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2224      	movs	r2, #36	; 0x24
 800566c:	2100      	movs	r1, #0
 800566e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e041      	b.n	80056f8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	210e      	movs	r1, #14
 8005680:	438a      	bics	r2, r1
 8005682:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568e:	491c      	ldr	r1, [pc, #112]	; (8005700 <HAL_DMA_Abort+0xbc>)
 8005690:	400a      	ands	r2, r1
 8005692:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2101      	movs	r1, #1
 80056a0:	438a      	bics	r2, r1
 80056a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80056a4:	4b17      	ldr	r3, [pc, #92]	; (8005704 <HAL_DMA_Abort+0xc0>)
 80056a6:	6859      	ldr	r1, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ac:	221c      	movs	r2, #28
 80056ae:	4013      	ands	r3, r2
 80056b0:	2201      	movs	r2, #1
 80056b2:	409a      	lsls	r2, r3
 80056b4:	4b13      	ldr	r3, [pc, #76]	; (8005704 <HAL_DMA_Abort+0xc0>)
 80056b6:	430a      	orrs	r2, r1
 80056b8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80056c2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00c      	beq.n	80056e6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d6:	490a      	ldr	r1, [pc, #40]	; (8005700 <HAL_DMA_Abort+0xbc>)
 80056d8:	400a      	ands	r2, r1
 80056da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80056e4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2225      	movs	r2, #37	; 0x25
 80056ea:	2101      	movs	r1, #1
 80056ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2224      	movs	r2, #36	; 0x24
 80056f2:	2100      	movs	r1, #0
 80056f4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	0018      	movs	r0, r3
 80056fa:	46bd      	mov	sp, r7
 80056fc:	b002      	add	sp, #8
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	fffffeff 	.word	0xfffffeff
 8005704:	40020000 	.word	0x40020000

08005708 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005710:	210f      	movs	r1, #15
 8005712:	187b      	adds	r3, r7, r1
 8005714:	2200      	movs	r2, #0
 8005716:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2225      	movs	r2, #37	; 0x25
 800571c:	5c9b      	ldrb	r3, [r3, r2]
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d006      	beq.n	8005732 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2204      	movs	r2, #4
 8005728:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800572a:	187b      	adds	r3, r7, r1
 800572c:	2201      	movs	r2, #1
 800572e:	701a      	strb	r2, [r3, #0]
 8005730:	e049      	b.n	80057c6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	210e      	movs	r1, #14
 800573e:	438a      	bics	r2, r1
 8005740:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2101      	movs	r1, #1
 800574e:	438a      	bics	r2, r1
 8005750:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575c:	491d      	ldr	r1, [pc, #116]	; (80057d4 <HAL_DMA_Abort_IT+0xcc>)
 800575e:	400a      	ands	r2, r1
 8005760:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005762:	4b1d      	ldr	r3, [pc, #116]	; (80057d8 <HAL_DMA_Abort_IT+0xd0>)
 8005764:	6859      	ldr	r1, [r3, #4]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	221c      	movs	r2, #28
 800576c:	4013      	ands	r3, r2
 800576e:	2201      	movs	r2, #1
 8005770:	409a      	lsls	r2, r3
 8005772:	4b19      	ldr	r3, [pc, #100]	; (80057d8 <HAL_DMA_Abort_IT+0xd0>)
 8005774:	430a      	orrs	r2, r1
 8005776:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005780:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00c      	beq.n	80057a4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005794:	490f      	ldr	r1, [pc, #60]	; (80057d4 <HAL_DMA_Abort_IT+0xcc>)
 8005796:	400a      	ands	r2, r1
 8005798:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80057a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2225      	movs	r2, #37	; 0x25
 80057a8:	2101      	movs	r1, #1
 80057aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2224      	movs	r2, #36	; 0x24
 80057b0:	2100      	movs	r1, #0
 80057b2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d004      	beq.n	80057c6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	0010      	movs	r0, r2
 80057c4:	4798      	blx	r3
    }
  }
  return status;
 80057c6:	230f      	movs	r3, #15
 80057c8:	18fb      	adds	r3, r7, r3
 80057ca:	781b      	ldrb	r3, [r3, #0]
}
 80057cc:	0018      	movs	r0, r3
 80057ce:	46bd      	mov	sp, r7
 80057d0:	b004      	add	sp, #16
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	fffffeff 	.word	0xfffffeff
 80057d8:	40020000 	.word	0x40020000

080057dc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80057e4:	4b55      	ldr	r3, [pc, #340]	; (800593c <HAL_DMA_IRQHandler+0x160>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	221c      	movs	r2, #28
 80057f8:	4013      	ands	r3, r2
 80057fa:	2204      	movs	r2, #4
 80057fc:	409a      	lsls	r2, r3
 80057fe:	0013      	movs	r3, r2
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4013      	ands	r3, r2
 8005804:	d027      	beq.n	8005856 <HAL_DMA_IRQHandler+0x7a>
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2204      	movs	r2, #4
 800580a:	4013      	ands	r3, r2
 800580c:	d023      	beq.n	8005856 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2220      	movs	r2, #32
 8005816:	4013      	ands	r3, r2
 8005818:	d107      	bne.n	800582a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2104      	movs	r1, #4
 8005826:	438a      	bics	r2, r1
 8005828:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800582a:	4b44      	ldr	r3, [pc, #272]	; (800593c <HAL_DMA_IRQHandler+0x160>)
 800582c:	6859      	ldr	r1, [r3, #4]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	221c      	movs	r2, #28
 8005834:	4013      	ands	r3, r2
 8005836:	2204      	movs	r2, #4
 8005838:	409a      	lsls	r2, r3
 800583a:	4b40      	ldr	r3, [pc, #256]	; (800593c <HAL_DMA_IRQHandler+0x160>)
 800583c:	430a      	orrs	r2, r1
 800583e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005844:	2b00      	cmp	r3, #0
 8005846:	d100      	bne.n	800584a <HAL_DMA_IRQHandler+0x6e>
 8005848:	e073      	b.n	8005932 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	0010      	movs	r0, r2
 8005852:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005854:	e06d      	b.n	8005932 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	221c      	movs	r2, #28
 800585c:	4013      	ands	r3, r2
 800585e:	2202      	movs	r2, #2
 8005860:	409a      	lsls	r2, r3
 8005862:	0013      	movs	r3, r2
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4013      	ands	r3, r2
 8005868:	d02e      	beq.n	80058c8 <HAL_DMA_IRQHandler+0xec>
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2202      	movs	r2, #2
 800586e:	4013      	ands	r3, r2
 8005870:	d02a      	beq.n	80058c8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2220      	movs	r2, #32
 800587a:	4013      	ands	r3, r2
 800587c:	d10b      	bne.n	8005896 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	210a      	movs	r1, #10
 800588a:	438a      	bics	r2, r1
 800588c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2225      	movs	r2, #37	; 0x25
 8005892:	2101      	movs	r1, #1
 8005894:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005896:	4b29      	ldr	r3, [pc, #164]	; (800593c <HAL_DMA_IRQHandler+0x160>)
 8005898:	6859      	ldr	r1, [r3, #4]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	221c      	movs	r2, #28
 80058a0:	4013      	ands	r3, r2
 80058a2:	2202      	movs	r2, #2
 80058a4:	409a      	lsls	r2, r3
 80058a6:	4b25      	ldr	r3, [pc, #148]	; (800593c <HAL_DMA_IRQHandler+0x160>)
 80058a8:	430a      	orrs	r2, r1
 80058aa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2224      	movs	r2, #36	; 0x24
 80058b0:	2100      	movs	r1, #0
 80058b2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d03a      	beq.n	8005932 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	0010      	movs	r0, r2
 80058c4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80058c6:	e034      	b.n	8005932 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058cc:	221c      	movs	r2, #28
 80058ce:	4013      	ands	r3, r2
 80058d0:	2208      	movs	r2, #8
 80058d2:	409a      	lsls	r2, r3
 80058d4:	0013      	movs	r3, r2
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4013      	ands	r3, r2
 80058da:	d02b      	beq.n	8005934 <HAL_DMA_IRQHandler+0x158>
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2208      	movs	r2, #8
 80058e0:	4013      	ands	r3, r2
 80058e2:	d027      	beq.n	8005934 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	210e      	movs	r1, #14
 80058f0:	438a      	bics	r2, r1
 80058f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80058f4:	4b11      	ldr	r3, [pc, #68]	; (800593c <HAL_DMA_IRQHandler+0x160>)
 80058f6:	6859      	ldr	r1, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fc:	221c      	movs	r2, #28
 80058fe:	4013      	ands	r3, r2
 8005900:	2201      	movs	r2, #1
 8005902:	409a      	lsls	r2, r3
 8005904:	4b0d      	ldr	r3, [pc, #52]	; (800593c <HAL_DMA_IRQHandler+0x160>)
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2225      	movs	r2, #37	; 0x25
 8005914:	2101      	movs	r1, #1
 8005916:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2224      	movs	r2, #36	; 0x24
 800591c:	2100      	movs	r1, #0
 800591e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	0010      	movs	r0, r2
 8005930:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005932:	46c0      	nop			; (mov r8, r8)
 8005934:	46c0      	nop			; (mov r8, r8)
}
 8005936:	46bd      	mov	sp, r7
 8005938:	b004      	add	sp, #16
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40020000 	.word	0x40020000

08005940 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005956:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595c:	2b00      	cmp	r3, #0
 800595e:	d004      	beq.n	800596a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005968:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800596a:	4b14      	ldr	r3, [pc, #80]	; (80059bc <DMA_SetConfig+0x7c>)
 800596c:	6859      	ldr	r1, [r3, #4]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	221c      	movs	r2, #28
 8005974:	4013      	ands	r3, r2
 8005976:	2201      	movs	r2, #1
 8005978:	409a      	lsls	r2, r3
 800597a:	4b10      	ldr	r3, [pc, #64]	; (80059bc <DMA_SetConfig+0x7c>)
 800597c:	430a      	orrs	r2, r1
 800597e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	2b10      	cmp	r3, #16
 800598e:	d108      	bne.n	80059a2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80059a0:	e007      	b.n	80059b2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	60da      	str	r2, [r3, #12]
}
 80059b2:	46c0      	nop			; (mov r8, r8)
 80059b4:	46bd      	mov	sp, r7
 80059b6:	b004      	add	sp, #16
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	46c0      	nop			; (mov r8, r8)
 80059bc:	40020000 	.word	0x40020000

080059c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059cc:	089b      	lsrs	r3, r3, #2
 80059ce:	4a10      	ldr	r2, [pc, #64]	; (8005a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80059d0:	4694      	mov	ip, r2
 80059d2:	4463      	add	r3, ip
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	001a      	movs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	001a      	movs	r2, r3
 80059e2:	23ff      	movs	r3, #255	; 0xff
 80059e4:	4013      	ands	r3, r2
 80059e6:	3b08      	subs	r3, #8
 80059e8:	2114      	movs	r1, #20
 80059ea:	0018      	movs	r0, r3
 80059ec:	f7fa fb9e 	bl	800012c <__udivsi3>
 80059f0:	0003      	movs	r3, r0
 80059f2:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a07      	ldr	r2, [pc, #28]	; (8005a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80059f8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	221f      	movs	r2, #31
 80059fe:	4013      	ands	r3, r2
 8005a00:	2201      	movs	r2, #1
 8005a02:	409a      	lsls	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8005a08:	46c0      	nop			; (mov r8, r8)
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	b004      	add	sp, #16
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	10008200 	.word	0x10008200
 8005a14:	40020880 	.word	0x40020880

08005a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	223f      	movs	r2, #63	; 0x3f
 8005a26:	4013      	ands	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4a0a      	ldr	r2, [pc, #40]	; (8005a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005a2e:	4694      	mov	ip, r2
 8005a30:	4463      	add	r3, ip
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	001a      	movs	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a07      	ldr	r2, [pc, #28]	; (8005a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005a3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	2203      	movs	r2, #3
 8005a46:	4013      	ands	r3, r2
 8005a48:	2201      	movs	r2, #1
 8005a4a:	409a      	lsls	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8005a50:	46c0      	nop			; (mov r8, r8)
 8005a52:	46bd      	mov	sp, r7
 8005a54:	b004      	add	sp, #16
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	1000823f 	.word	0x1000823f
 8005a5c:	40020940 	.word	0x40020940

08005a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a6e:	e147      	b.n	8005d00 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2101      	movs	r1, #1
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	4091      	lsls	r1, r2
 8005a7a:	000a      	movs	r2, r1
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d100      	bne.n	8005a88 <HAL_GPIO_Init+0x28>
 8005a86:	e138      	b.n	8005cfa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2203      	movs	r2, #3
 8005a8e:	4013      	ands	r3, r2
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d005      	beq.n	8005aa0 <HAL_GPIO_Init+0x40>
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	2203      	movs	r2, #3
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d130      	bne.n	8005b02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	2203      	movs	r2, #3
 8005aac:	409a      	lsls	r2, r3
 8005aae:	0013      	movs	r3, r2
 8005ab0:	43da      	mvns	r2, r3
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	409a      	lsls	r2, r3
 8005ac2:	0013      	movs	r3, r2
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	409a      	lsls	r2, r3
 8005adc:	0013      	movs	r3, r2
 8005ade:	43da      	mvns	r2, r3
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	091b      	lsrs	r3, r3, #4
 8005aec:	2201      	movs	r2, #1
 8005aee:	401a      	ands	r2, r3
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	409a      	lsls	r2, r3
 8005af4:	0013      	movs	r3, r2
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	2203      	movs	r2, #3
 8005b08:	4013      	ands	r3, r2
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	d017      	beq.n	8005b3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	2203      	movs	r2, #3
 8005b1a:	409a      	lsls	r2, r3
 8005b1c:	0013      	movs	r3, r2
 8005b1e:	43da      	mvns	r2, r3
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	4013      	ands	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	409a      	lsls	r2, r3
 8005b30:	0013      	movs	r3, r2
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2203      	movs	r2, #3
 8005b44:	4013      	ands	r3, r2
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d123      	bne.n	8005b92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	08da      	lsrs	r2, r3, #3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	3208      	adds	r2, #8
 8005b52:	0092      	lsls	r2, r2, #2
 8005b54:	58d3      	ldr	r3, [r2, r3]
 8005b56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2207      	movs	r2, #7
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	220f      	movs	r2, #15
 8005b62:	409a      	lsls	r2, r3
 8005b64:	0013      	movs	r3, r2
 8005b66:	43da      	mvns	r2, r3
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	691a      	ldr	r2, [r3, #16]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2107      	movs	r1, #7
 8005b76:	400b      	ands	r3, r1
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	409a      	lsls	r2, r3
 8005b7c:	0013      	movs	r3, r2
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	08da      	lsrs	r2, r3, #3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3208      	adds	r2, #8
 8005b8c:	0092      	lsls	r2, r2, #2
 8005b8e:	6939      	ldr	r1, [r7, #16]
 8005b90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	2203      	movs	r2, #3
 8005b9e:	409a      	lsls	r2, r3
 8005ba0:	0013      	movs	r3, r2
 8005ba2:	43da      	mvns	r2, r3
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	2203      	movs	r2, #3
 8005bb0:	401a      	ands	r2, r3
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	409a      	lsls	r2, r3
 8005bb8:	0013      	movs	r3, r2
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	23c0      	movs	r3, #192	; 0xc0
 8005bcc:	029b      	lsls	r3, r3, #10
 8005bce:	4013      	ands	r3, r2
 8005bd0:	d100      	bne.n	8005bd4 <HAL_GPIO_Init+0x174>
 8005bd2:	e092      	b.n	8005cfa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005bd4:	4a50      	ldr	r2, [pc, #320]	; (8005d18 <HAL_GPIO_Init+0x2b8>)
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	089b      	lsrs	r3, r3, #2
 8005bda:	3318      	adds	r3, #24
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	589b      	ldr	r3, [r3, r2]
 8005be0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2203      	movs	r2, #3
 8005be6:	4013      	ands	r3, r2
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	220f      	movs	r2, #15
 8005bec:	409a      	lsls	r2, r3
 8005bee:	0013      	movs	r3, r2
 8005bf0:	43da      	mvns	r2, r3
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	23a0      	movs	r3, #160	; 0xa0
 8005bfc:	05db      	lsls	r3, r3, #23
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d013      	beq.n	8005c2a <HAL_GPIO_Init+0x1ca>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a45      	ldr	r2, [pc, #276]	; (8005d1c <HAL_GPIO_Init+0x2bc>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d00d      	beq.n	8005c26 <HAL_GPIO_Init+0x1c6>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a44      	ldr	r2, [pc, #272]	; (8005d20 <HAL_GPIO_Init+0x2c0>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d007      	beq.n	8005c22 <HAL_GPIO_Init+0x1c2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a43      	ldr	r2, [pc, #268]	; (8005d24 <HAL_GPIO_Init+0x2c4>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d101      	bne.n	8005c1e <HAL_GPIO_Init+0x1be>
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e006      	b.n	8005c2c <HAL_GPIO_Init+0x1cc>
 8005c1e:	2305      	movs	r3, #5
 8005c20:	e004      	b.n	8005c2c <HAL_GPIO_Init+0x1cc>
 8005c22:	2302      	movs	r3, #2
 8005c24:	e002      	b.n	8005c2c <HAL_GPIO_Init+0x1cc>
 8005c26:	2301      	movs	r3, #1
 8005c28:	e000      	b.n	8005c2c <HAL_GPIO_Init+0x1cc>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	2103      	movs	r1, #3
 8005c30:	400a      	ands	r2, r1
 8005c32:	00d2      	lsls	r2, r2, #3
 8005c34:	4093      	lsls	r3, r2
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005c3c:	4936      	ldr	r1, [pc, #216]	; (8005d18 <HAL_GPIO_Init+0x2b8>)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	089b      	lsrs	r3, r3, #2
 8005c42:	3318      	adds	r3, #24
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c4a:	4b33      	ldr	r3, [pc, #204]	; (8005d18 <HAL_GPIO_Init+0x2b8>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	43da      	mvns	r2, r3
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	4013      	ands	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	2380      	movs	r3, #128	; 0x80
 8005c60:	035b      	lsls	r3, r3, #13
 8005c62:	4013      	ands	r3, r2
 8005c64:	d003      	beq.n	8005c6e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005c6e:	4b2a      	ldr	r3, [pc, #168]	; (8005d18 <HAL_GPIO_Init+0x2b8>)
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005c74:	4b28      	ldr	r3, [pc, #160]	; (8005d18 <HAL_GPIO_Init+0x2b8>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	43da      	mvns	r2, r3
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	4013      	ands	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	2380      	movs	r3, #128	; 0x80
 8005c8a:	039b      	lsls	r3, r3, #14
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	d003      	beq.n	8005c98 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005c98:	4b1f      	ldr	r3, [pc, #124]	; (8005d18 <HAL_GPIO_Init+0x2b8>)
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005c9e:	4a1e      	ldr	r2, [pc, #120]	; (8005d18 <HAL_GPIO_Init+0x2b8>)
 8005ca0:	2384      	movs	r3, #132	; 0x84
 8005ca2:	58d3      	ldr	r3, [r2, r3]
 8005ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	43da      	mvns	r2, r3
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	4013      	ands	r3, r2
 8005cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	2380      	movs	r3, #128	; 0x80
 8005cb6:	029b      	lsls	r3, r3, #10
 8005cb8:	4013      	ands	r3, r2
 8005cba:	d003      	beq.n	8005cc4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005cc4:	4914      	ldr	r1, [pc, #80]	; (8005d18 <HAL_GPIO_Init+0x2b8>)
 8005cc6:	2284      	movs	r2, #132	; 0x84
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005ccc:	4a12      	ldr	r2, [pc, #72]	; (8005d18 <HAL_GPIO_Init+0x2b8>)
 8005cce:	2380      	movs	r3, #128	; 0x80
 8005cd0:	58d3      	ldr	r3, [r2, r3]
 8005cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	43da      	mvns	r2, r3
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	2380      	movs	r3, #128	; 0x80
 8005ce4:	025b      	lsls	r3, r3, #9
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d003      	beq.n	8005cf2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005cf2:	4909      	ldr	r1, [pc, #36]	; (8005d18 <HAL_GPIO_Init+0x2b8>)
 8005cf4:	2280      	movs	r2, #128	; 0x80
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	40da      	lsrs	r2, r3
 8005d08:	1e13      	subs	r3, r2, #0
 8005d0a:	d000      	beq.n	8005d0e <HAL_GPIO_Init+0x2ae>
 8005d0c:	e6b0      	b.n	8005a70 <HAL_GPIO_Init+0x10>
  }
}
 8005d0e:	46c0      	nop			; (mov r8, r8)
 8005d10:	46c0      	nop			; (mov r8, r8)
 8005d12:	46bd      	mov	sp, r7
 8005d14:	b006      	add	sp, #24
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40021800 	.word	0x40021800
 8005d1c:	50000400 	.word	0x50000400
 8005d20:	50000800 	.word	0x50000800
 8005d24:	50000c00 	.word	0x50000c00

08005d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	0008      	movs	r0, r1
 8005d32:	0011      	movs	r1, r2
 8005d34:	1cbb      	adds	r3, r7, #2
 8005d36:	1c02      	adds	r2, r0, #0
 8005d38:	801a      	strh	r2, [r3, #0]
 8005d3a:	1c7b      	adds	r3, r7, #1
 8005d3c:	1c0a      	adds	r2, r1, #0
 8005d3e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d40:	1c7b      	adds	r3, r7, #1
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d004      	beq.n	8005d52 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005d48:	1cbb      	adds	r3, r7, #2
 8005d4a:	881a      	ldrh	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005d50:	e003      	b.n	8005d5a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005d52:	1cbb      	adds	r3, r7, #2
 8005d54:	881a      	ldrh	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005d5a:	46c0      	nop			; (mov r8, r8)
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	b002      	add	sp, #8
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b084      	sub	sp, #16
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	000a      	movs	r2, r1
 8005d6c:	1cbb      	adds	r3, r7, #2
 8005d6e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d76:	1cbb      	adds	r3, r7, #2
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	041a      	lsls	r2, r3, #16
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	43db      	mvns	r3, r3
 8005d84:	1cb9      	adds	r1, r7, #2
 8005d86:	8809      	ldrh	r1, [r1, #0]
 8005d88:	400b      	ands	r3, r1
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	619a      	str	r2, [r3, #24]
}
 8005d90:	46c0      	nop			; (mov r8, r8)
 8005d92:	46bd      	mov	sp, r7
 8005d94:	b004      	add	sp, #16
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	0002      	movs	r2, r0
 8005da0:	1dbb      	adds	r3, r7, #6
 8005da2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8005da4:	4b10      	ldr	r3, [pc, #64]	; (8005de8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	1dba      	adds	r2, r7, #6
 8005daa:	8812      	ldrh	r2, [r2, #0]
 8005dac:	4013      	ands	r3, r2
 8005dae:	d008      	beq.n	8005dc2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005db0:	4b0d      	ldr	r3, [pc, #52]	; (8005de8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005db2:	1dba      	adds	r2, r7, #6
 8005db4:	8812      	ldrh	r2, [r2, #0]
 8005db6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005db8:	1dbb      	adds	r3, r7, #6
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	f7fd fc11 	bl	80035e4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8005dc2:	4b09      	ldr	r3, [pc, #36]	; (8005de8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	1dba      	adds	r2, r7, #6
 8005dc8:	8812      	ldrh	r2, [r2, #0]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	d008      	beq.n	8005de0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8005dce:	4b06      	ldr	r3, [pc, #24]	; (8005de8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005dd0:	1dba      	adds	r2, r7, #6
 8005dd2:	8812      	ldrh	r2, [r2, #0]
 8005dd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005dd6:	1dbb      	adds	r3, r7, #6
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	0018      	movs	r0, r3
 8005ddc:	f000 f806 	bl	8005dec <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8005de0:	46c0      	nop			; (mov r8, r8)
 8005de2:	46bd      	mov	sp, r7
 8005de4:	b002      	add	sp, #8
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	40021800 	.word	0x40021800

08005dec <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	0002      	movs	r2, r0
 8005df4:	1dbb      	adds	r3, r7, #6
 8005df6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8005df8:	46c0      	nop			; (mov r8, r8)
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	b002      	add	sp, #8
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005e08:	4b19      	ldr	r3, [pc, #100]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a19      	ldr	r2, [pc, #100]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005e0e:	4013      	ands	r3, r2
 8005e10:	0019      	movs	r1, r3
 8005e12:	4b17      	ldr	r3, [pc, #92]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	2380      	movs	r3, #128	; 0x80
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d11f      	bne.n	8005e64 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005e24:	4b14      	ldr	r3, [pc, #80]	; (8005e78 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	0013      	movs	r3, r2
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	189b      	adds	r3, r3, r2
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	4912      	ldr	r1, [pc, #72]	; (8005e7c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005e32:	0018      	movs	r0, r3
 8005e34:	f7fa f97a 	bl	800012c <__udivsi3>
 8005e38:	0003      	movs	r3, r0
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e3e:	e008      	b.n	8005e52 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	e001      	b.n	8005e52 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e009      	b.n	8005e66 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e52:	4b07      	ldr	r3, [pc, #28]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005e54:	695a      	ldr	r2, [r3, #20]
 8005e56:	2380      	movs	r3, #128	; 0x80
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	401a      	ands	r2, r3
 8005e5c:	2380      	movs	r3, #128	; 0x80
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d0ed      	beq.n	8005e40 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	0018      	movs	r0, r3
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	b004      	add	sp, #16
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	40007000 	.word	0x40007000
 8005e74:	fffff9ff 	.word	0xfffff9ff
 8005e78:	20000028 	.word	0x20000028
 8005e7c:	000f4240 	.word	0x000f4240

08005e80 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005e84:	4b03      	ldr	r3, [pc, #12]	; (8005e94 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	23e0      	movs	r3, #224	; 0xe0
 8005e8a:	01db      	lsls	r3, r3, #7
 8005e8c:	4013      	ands	r3, r2
}
 8005e8e:	0018      	movs	r0, r3
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	40021000 	.word	0x40021000

08005e98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b088      	sub	sp, #32
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e2f3      	b.n	8006492 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	d100      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x1e>
 8005eb4:	e07c      	b.n	8005fb0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eb6:	4bc3      	ldr	r3, [pc, #780]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	2238      	movs	r2, #56	; 0x38
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ec0:	4bc0      	ldr	r3, [pc, #768]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	2203      	movs	r2, #3
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	2b10      	cmp	r3, #16
 8005ece:	d102      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x3e>
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d002      	beq.n	8005edc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d10b      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005edc:	4bb9      	ldr	r3, [pc, #740]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	2380      	movs	r3, #128	; 0x80
 8005ee2:	029b      	lsls	r3, r3, #10
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	d062      	beq.n	8005fae <HAL_RCC_OscConfig+0x116>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d15e      	bne.n	8005fae <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e2ce      	b.n	8006492 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	2380      	movs	r3, #128	; 0x80
 8005efa:	025b      	lsls	r3, r3, #9
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d107      	bne.n	8005f10 <HAL_RCC_OscConfig+0x78>
 8005f00:	4bb0      	ldr	r3, [pc, #704]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	4baf      	ldr	r3, [pc, #700]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8005f06:	2180      	movs	r1, #128	; 0x80
 8005f08:	0249      	lsls	r1, r1, #9
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	e020      	b.n	8005f52 <HAL_RCC_OscConfig+0xba>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	23a0      	movs	r3, #160	; 0xa0
 8005f16:	02db      	lsls	r3, r3, #11
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d10e      	bne.n	8005f3a <HAL_RCC_OscConfig+0xa2>
 8005f1c:	4ba9      	ldr	r3, [pc, #676]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	4ba8      	ldr	r3, [pc, #672]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8005f22:	2180      	movs	r1, #128	; 0x80
 8005f24:	02c9      	lsls	r1, r1, #11
 8005f26:	430a      	orrs	r2, r1
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	4ba6      	ldr	r3, [pc, #664]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	4ba5      	ldr	r3, [pc, #660]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8005f30:	2180      	movs	r1, #128	; 0x80
 8005f32:	0249      	lsls	r1, r1, #9
 8005f34:	430a      	orrs	r2, r1
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	e00b      	b.n	8005f52 <HAL_RCC_OscConfig+0xba>
 8005f3a:	4ba2      	ldr	r3, [pc, #648]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	4ba1      	ldr	r3, [pc, #644]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8005f40:	49a1      	ldr	r1, [pc, #644]	; (80061c8 <HAL_RCC_OscConfig+0x330>)
 8005f42:	400a      	ands	r2, r1
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	4b9f      	ldr	r3, [pc, #636]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	4b9e      	ldr	r3, [pc, #632]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8005f4c:	499f      	ldr	r1, [pc, #636]	; (80061cc <HAL_RCC_OscConfig+0x334>)
 8005f4e:	400a      	ands	r2, r1
 8005f50:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d014      	beq.n	8005f84 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5a:	f7ff f9ab 	bl	80052b4 <HAL_GetTick>
 8005f5e:	0003      	movs	r3, r0
 8005f60:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f64:	f7ff f9a6 	bl	80052b4 <HAL_GetTick>
 8005f68:	0002      	movs	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b64      	cmp	r3, #100	; 0x64
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e28d      	b.n	8006492 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f76:	4b93      	ldr	r3, [pc, #588]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	2380      	movs	r3, #128	; 0x80
 8005f7c:	029b      	lsls	r3, r3, #10
 8005f7e:	4013      	ands	r3, r2
 8005f80:	d0f0      	beq.n	8005f64 <HAL_RCC_OscConfig+0xcc>
 8005f82:	e015      	b.n	8005fb0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f84:	f7ff f996 	bl	80052b4 <HAL_GetTick>
 8005f88:	0003      	movs	r3, r0
 8005f8a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f8c:	e008      	b.n	8005fa0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f8e:	f7ff f991 	bl	80052b4 <HAL_GetTick>
 8005f92:	0002      	movs	r2, r0
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	2b64      	cmp	r3, #100	; 0x64
 8005f9a:	d901      	bls.n	8005fa0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e278      	b.n	8006492 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005fa0:	4b88      	ldr	r3, [pc, #544]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	2380      	movs	r3, #128	; 0x80
 8005fa6:	029b      	lsls	r3, r3, #10
 8005fa8:	4013      	ands	r3, r2
 8005faa:	d1f0      	bne.n	8005f8e <HAL_RCC_OscConfig+0xf6>
 8005fac:	e000      	b.n	8005fb0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	d100      	bne.n	8005fbc <HAL_RCC_OscConfig+0x124>
 8005fba:	e099      	b.n	80060f0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fbc:	4b81      	ldr	r3, [pc, #516]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	2238      	movs	r2, #56	; 0x38
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fc6:	4b7f      	ldr	r3, [pc, #508]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	2203      	movs	r2, #3
 8005fcc:	4013      	ands	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	2b10      	cmp	r3, #16
 8005fd4:	d102      	bne.n	8005fdc <HAL_RCC_OscConfig+0x144>
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d002      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d135      	bne.n	800604e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fe2:	4b78      	ldr	r3, [pc, #480]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	2380      	movs	r3, #128	; 0x80
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	4013      	ands	r3, r2
 8005fec:	d005      	beq.n	8005ffa <HAL_RCC_OscConfig+0x162>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e24b      	b.n	8006492 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ffa:	4b72      	ldr	r3, [pc, #456]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	4a74      	ldr	r2, [pc, #464]	; (80061d0 <HAL_RCC_OscConfig+0x338>)
 8006000:	4013      	ands	r3, r2
 8006002:	0019      	movs	r1, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	021a      	lsls	r2, r3, #8
 800600a:	4b6e      	ldr	r3, [pc, #440]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 800600c:	430a      	orrs	r2, r1
 800600e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d112      	bne.n	800603c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006016:	4b6b      	ldr	r3, [pc, #428]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a6e      	ldr	r2, [pc, #440]	; (80061d4 <HAL_RCC_OscConfig+0x33c>)
 800601c:	4013      	ands	r3, r2
 800601e:	0019      	movs	r1, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691a      	ldr	r2, [r3, #16]
 8006024:	4b67      	ldr	r3, [pc, #412]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8006026:	430a      	orrs	r2, r1
 8006028:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800602a:	4b66      	ldr	r3, [pc, #408]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	0adb      	lsrs	r3, r3, #11
 8006030:	2207      	movs	r2, #7
 8006032:	4013      	ands	r3, r2
 8006034:	4a68      	ldr	r2, [pc, #416]	; (80061d8 <HAL_RCC_OscConfig+0x340>)
 8006036:	40da      	lsrs	r2, r3
 8006038:	4b68      	ldr	r3, [pc, #416]	; (80061dc <HAL_RCC_OscConfig+0x344>)
 800603a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800603c:	4b68      	ldr	r3, [pc, #416]	; (80061e0 <HAL_RCC_OscConfig+0x348>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	0018      	movs	r0, r3
 8006042:	f7fd ff49 	bl	8003ed8 <HAL_InitTick>
 8006046:	1e03      	subs	r3, r0, #0
 8006048:	d051      	beq.n	80060ee <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e221      	b.n	8006492 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d030      	beq.n	80060b8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006056:	4b5b      	ldr	r3, [pc, #364]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a5e      	ldr	r2, [pc, #376]	; (80061d4 <HAL_RCC_OscConfig+0x33c>)
 800605c:	4013      	ands	r3, r2
 800605e:	0019      	movs	r1, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691a      	ldr	r2, [r3, #16]
 8006064:	4b57      	ldr	r3, [pc, #348]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8006066:	430a      	orrs	r2, r1
 8006068:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800606a:	4b56      	ldr	r3, [pc, #344]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	4b55      	ldr	r3, [pc, #340]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8006070:	2180      	movs	r1, #128	; 0x80
 8006072:	0049      	lsls	r1, r1, #1
 8006074:	430a      	orrs	r2, r1
 8006076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006078:	f7ff f91c 	bl	80052b4 <HAL_GetTick>
 800607c:	0003      	movs	r3, r0
 800607e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006080:	e008      	b.n	8006094 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006082:	f7ff f917 	bl	80052b4 <HAL_GetTick>
 8006086:	0002      	movs	r2, r0
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d901      	bls.n	8006094 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e1fe      	b.n	8006492 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006094:	4b4b      	ldr	r3, [pc, #300]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	2380      	movs	r3, #128	; 0x80
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	4013      	ands	r3, r2
 800609e:	d0f0      	beq.n	8006082 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060a0:	4b48      	ldr	r3, [pc, #288]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	4a4a      	ldr	r2, [pc, #296]	; (80061d0 <HAL_RCC_OscConfig+0x338>)
 80060a6:	4013      	ands	r3, r2
 80060a8:	0019      	movs	r1, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	021a      	lsls	r2, r3, #8
 80060b0:	4b44      	ldr	r3, [pc, #272]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 80060b2:	430a      	orrs	r2, r1
 80060b4:	605a      	str	r2, [r3, #4]
 80060b6:	e01b      	b.n	80060f0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80060b8:	4b42      	ldr	r3, [pc, #264]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	4b41      	ldr	r3, [pc, #260]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 80060be:	4949      	ldr	r1, [pc, #292]	; (80061e4 <HAL_RCC_OscConfig+0x34c>)
 80060c0:	400a      	ands	r2, r1
 80060c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c4:	f7ff f8f6 	bl	80052b4 <HAL_GetTick>
 80060c8:	0003      	movs	r3, r0
 80060ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060cc:	e008      	b.n	80060e0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060ce:	f7ff f8f1 	bl	80052b4 <HAL_GetTick>
 80060d2:	0002      	movs	r2, r0
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d901      	bls.n	80060e0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e1d8      	b.n	8006492 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060e0:	4b38      	ldr	r3, [pc, #224]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	2380      	movs	r3, #128	; 0x80
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	4013      	ands	r3, r2
 80060ea:	d1f0      	bne.n	80060ce <HAL_RCC_OscConfig+0x236>
 80060ec:	e000      	b.n	80060f0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2208      	movs	r2, #8
 80060f6:	4013      	ands	r3, r2
 80060f8:	d047      	beq.n	800618a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80060fa:	4b32      	ldr	r3, [pc, #200]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	2238      	movs	r2, #56	; 0x38
 8006100:	4013      	ands	r3, r2
 8006102:	2b18      	cmp	r3, #24
 8006104:	d10a      	bne.n	800611c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006106:	4b2f      	ldr	r3, [pc, #188]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8006108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800610a:	2202      	movs	r2, #2
 800610c:	4013      	ands	r3, r2
 800610e:	d03c      	beq.n	800618a <HAL_RCC_OscConfig+0x2f2>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d138      	bne.n	800618a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e1ba      	b.n	8006492 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d019      	beq.n	8006158 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006124:	4b27      	ldr	r3, [pc, #156]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8006126:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006128:	4b26      	ldr	r3, [pc, #152]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 800612a:	2101      	movs	r1, #1
 800612c:	430a      	orrs	r2, r1
 800612e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006130:	f7ff f8c0 	bl	80052b4 <HAL_GetTick>
 8006134:	0003      	movs	r3, r0
 8006136:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006138:	e008      	b.n	800614c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800613a:	f7ff f8bb 	bl	80052b4 <HAL_GetTick>
 800613e:	0002      	movs	r2, r0
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	2b02      	cmp	r3, #2
 8006146:	d901      	bls.n	800614c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e1a2      	b.n	8006492 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800614c:	4b1d      	ldr	r3, [pc, #116]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 800614e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006150:	2202      	movs	r2, #2
 8006152:	4013      	ands	r3, r2
 8006154:	d0f1      	beq.n	800613a <HAL_RCC_OscConfig+0x2a2>
 8006156:	e018      	b.n	800618a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006158:	4b1a      	ldr	r3, [pc, #104]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 800615a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800615c:	4b19      	ldr	r3, [pc, #100]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 800615e:	2101      	movs	r1, #1
 8006160:	438a      	bics	r2, r1
 8006162:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006164:	f7ff f8a6 	bl	80052b4 <HAL_GetTick>
 8006168:	0003      	movs	r3, r0
 800616a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800616c:	e008      	b.n	8006180 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800616e:	f7ff f8a1 	bl	80052b4 <HAL_GetTick>
 8006172:	0002      	movs	r2, r0
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d901      	bls.n	8006180 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e188      	b.n	8006492 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006180:	4b10      	ldr	r3, [pc, #64]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 8006182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006184:	2202      	movs	r2, #2
 8006186:	4013      	ands	r3, r2
 8006188:	d1f1      	bne.n	800616e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2204      	movs	r2, #4
 8006190:	4013      	ands	r3, r2
 8006192:	d100      	bne.n	8006196 <HAL_RCC_OscConfig+0x2fe>
 8006194:	e0c6      	b.n	8006324 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006196:	231f      	movs	r3, #31
 8006198:	18fb      	adds	r3, r7, r3
 800619a:	2200      	movs	r2, #0
 800619c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800619e:	4b09      	ldr	r3, [pc, #36]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	2238      	movs	r2, #56	; 0x38
 80061a4:	4013      	ands	r3, r2
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	d11e      	bne.n	80061e8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80061aa:	4b06      	ldr	r3, [pc, #24]	; (80061c4 <HAL_RCC_OscConfig+0x32c>)
 80061ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ae:	2202      	movs	r2, #2
 80061b0:	4013      	ands	r3, r2
 80061b2:	d100      	bne.n	80061b6 <HAL_RCC_OscConfig+0x31e>
 80061b4:	e0b6      	b.n	8006324 <HAL_RCC_OscConfig+0x48c>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d000      	beq.n	80061c0 <HAL_RCC_OscConfig+0x328>
 80061be:	e0b1      	b.n	8006324 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e166      	b.n	8006492 <HAL_RCC_OscConfig+0x5fa>
 80061c4:	40021000 	.word	0x40021000
 80061c8:	fffeffff 	.word	0xfffeffff
 80061cc:	fffbffff 	.word	0xfffbffff
 80061d0:	ffff80ff 	.word	0xffff80ff
 80061d4:	ffffc7ff 	.word	0xffffc7ff
 80061d8:	00f42400 	.word	0x00f42400
 80061dc:	20000028 	.word	0x20000028
 80061e0:	2000002c 	.word	0x2000002c
 80061e4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80061e8:	4bac      	ldr	r3, [pc, #688]	; (800649c <HAL_RCC_OscConfig+0x604>)
 80061ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061ec:	2380      	movs	r3, #128	; 0x80
 80061ee:	055b      	lsls	r3, r3, #21
 80061f0:	4013      	ands	r3, r2
 80061f2:	d101      	bne.n	80061f8 <HAL_RCC_OscConfig+0x360>
 80061f4:	2301      	movs	r3, #1
 80061f6:	e000      	b.n	80061fa <HAL_RCC_OscConfig+0x362>
 80061f8:	2300      	movs	r3, #0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d011      	beq.n	8006222 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80061fe:	4ba7      	ldr	r3, [pc, #668]	; (800649c <HAL_RCC_OscConfig+0x604>)
 8006200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006202:	4ba6      	ldr	r3, [pc, #664]	; (800649c <HAL_RCC_OscConfig+0x604>)
 8006204:	2180      	movs	r1, #128	; 0x80
 8006206:	0549      	lsls	r1, r1, #21
 8006208:	430a      	orrs	r2, r1
 800620a:	63da      	str	r2, [r3, #60]	; 0x3c
 800620c:	4ba3      	ldr	r3, [pc, #652]	; (800649c <HAL_RCC_OscConfig+0x604>)
 800620e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006210:	2380      	movs	r3, #128	; 0x80
 8006212:	055b      	lsls	r3, r3, #21
 8006214:	4013      	ands	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
 8006218:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800621a:	231f      	movs	r3, #31
 800621c:	18fb      	adds	r3, r7, r3
 800621e:	2201      	movs	r2, #1
 8006220:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006222:	4b9f      	ldr	r3, [pc, #636]	; (80064a0 <HAL_RCC_OscConfig+0x608>)
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	2380      	movs	r3, #128	; 0x80
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	4013      	ands	r3, r2
 800622c:	d11a      	bne.n	8006264 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800622e:	4b9c      	ldr	r3, [pc, #624]	; (80064a0 <HAL_RCC_OscConfig+0x608>)
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	4b9b      	ldr	r3, [pc, #620]	; (80064a0 <HAL_RCC_OscConfig+0x608>)
 8006234:	2180      	movs	r1, #128	; 0x80
 8006236:	0049      	lsls	r1, r1, #1
 8006238:	430a      	orrs	r2, r1
 800623a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800623c:	f7ff f83a 	bl	80052b4 <HAL_GetTick>
 8006240:	0003      	movs	r3, r0
 8006242:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006244:	e008      	b.n	8006258 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006246:	f7ff f835 	bl	80052b4 <HAL_GetTick>
 800624a:	0002      	movs	r2, r0
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d901      	bls.n	8006258 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e11c      	b.n	8006492 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006258:	4b91      	ldr	r3, [pc, #580]	; (80064a0 <HAL_RCC_OscConfig+0x608>)
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	2380      	movs	r3, #128	; 0x80
 800625e:	005b      	lsls	r3, r3, #1
 8006260:	4013      	ands	r3, r2
 8006262:	d0f0      	beq.n	8006246 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d106      	bne.n	800627a <HAL_RCC_OscConfig+0x3e2>
 800626c:	4b8b      	ldr	r3, [pc, #556]	; (800649c <HAL_RCC_OscConfig+0x604>)
 800626e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006270:	4b8a      	ldr	r3, [pc, #552]	; (800649c <HAL_RCC_OscConfig+0x604>)
 8006272:	2101      	movs	r1, #1
 8006274:	430a      	orrs	r2, r1
 8006276:	65da      	str	r2, [r3, #92]	; 0x5c
 8006278:	e01c      	b.n	80062b4 <HAL_RCC_OscConfig+0x41c>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	2b05      	cmp	r3, #5
 8006280:	d10c      	bne.n	800629c <HAL_RCC_OscConfig+0x404>
 8006282:	4b86      	ldr	r3, [pc, #536]	; (800649c <HAL_RCC_OscConfig+0x604>)
 8006284:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006286:	4b85      	ldr	r3, [pc, #532]	; (800649c <HAL_RCC_OscConfig+0x604>)
 8006288:	2104      	movs	r1, #4
 800628a:	430a      	orrs	r2, r1
 800628c:	65da      	str	r2, [r3, #92]	; 0x5c
 800628e:	4b83      	ldr	r3, [pc, #524]	; (800649c <HAL_RCC_OscConfig+0x604>)
 8006290:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006292:	4b82      	ldr	r3, [pc, #520]	; (800649c <HAL_RCC_OscConfig+0x604>)
 8006294:	2101      	movs	r1, #1
 8006296:	430a      	orrs	r2, r1
 8006298:	65da      	str	r2, [r3, #92]	; 0x5c
 800629a:	e00b      	b.n	80062b4 <HAL_RCC_OscConfig+0x41c>
 800629c:	4b7f      	ldr	r3, [pc, #508]	; (800649c <HAL_RCC_OscConfig+0x604>)
 800629e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80062a0:	4b7e      	ldr	r3, [pc, #504]	; (800649c <HAL_RCC_OscConfig+0x604>)
 80062a2:	2101      	movs	r1, #1
 80062a4:	438a      	bics	r2, r1
 80062a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80062a8:	4b7c      	ldr	r3, [pc, #496]	; (800649c <HAL_RCC_OscConfig+0x604>)
 80062aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80062ac:	4b7b      	ldr	r3, [pc, #492]	; (800649c <HAL_RCC_OscConfig+0x604>)
 80062ae:	2104      	movs	r1, #4
 80062b0:	438a      	bics	r2, r1
 80062b2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d014      	beq.n	80062e6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062bc:	f7fe fffa 	bl	80052b4 <HAL_GetTick>
 80062c0:	0003      	movs	r3, r0
 80062c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062c4:	e009      	b.n	80062da <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062c6:	f7fe fff5 	bl	80052b4 <HAL_GetTick>
 80062ca:	0002      	movs	r2, r0
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	4a74      	ldr	r2, [pc, #464]	; (80064a4 <HAL_RCC_OscConfig+0x60c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e0db      	b.n	8006492 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062da:	4b70      	ldr	r3, [pc, #448]	; (800649c <HAL_RCC_OscConfig+0x604>)
 80062dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062de:	2202      	movs	r2, #2
 80062e0:	4013      	ands	r3, r2
 80062e2:	d0f0      	beq.n	80062c6 <HAL_RCC_OscConfig+0x42e>
 80062e4:	e013      	b.n	800630e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e6:	f7fe ffe5 	bl	80052b4 <HAL_GetTick>
 80062ea:	0003      	movs	r3, r0
 80062ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062ee:	e009      	b.n	8006304 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062f0:	f7fe ffe0 	bl	80052b4 <HAL_GetTick>
 80062f4:	0002      	movs	r2, r0
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	4a6a      	ldr	r2, [pc, #424]	; (80064a4 <HAL_RCC_OscConfig+0x60c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e0c6      	b.n	8006492 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006304:	4b65      	ldr	r3, [pc, #404]	; (800649c <HAL_RCC_OscConfig+0x604>)
 8006306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006308:	2202      	movs	r2, #2
 800630a:	4013      	ands	r3, r2
 800630c:	d1f0      	bne.n	80062f0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800630e:	231f      	movs	r3, #31
 8006310:	18fb      	adds	r3, r7, r3
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d105      	bne.n	8006324 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006318:	4b60      	ldr	r3, [pc, #384]	; (800649c <HAL_RCC_OscConfig+0x604>)
 800631a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800631c:	4b5f      	ldr	r3, [pc, #380]	; (800649c <HAL_RCC_OscConfig+0x604>)
 800631e:	4962      	ldr	r1, [pc, #392]	; (80064a8 <HAL_RCC_OscConfig+0x610>)
 8006320:	400a      	ands	r2, r1
 8006322:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d100      	bne.n	800632e <HAL_RCC_OscConfig+0x496>
 800632c:	e0b0      	b.n	8006490 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800632e:	4b5b      	ldr	r3, [pc, #364]	; (800649c <HAL_RCC_OscConfig+0x604>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	2238      	movs	r2, #56	; 0x38
 8006334:	4013      	ands	r3, r2
 8006336:	2b10      	cmp	r3, #16
 8006338:	d100      	bne.n	800633c <HAL_RCC_OscConfig+0x4a4>
 800633a:	e078      	b.n	800642e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	2b02      	cmp	r3, #2
 8006342:	d153      	bne.n	80063ec <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006344:	4b55      	ldr	r3, [pc, #340]	; (800649c <HAL_RCC_OscConfig+0x604>)
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	4b54      	ldr	r3, [pc, #336]	; (800649c <HAL_RCC_OscConfig+0x604>)
 800634a:	4958      	ldr	r1, [pc, #352]	; (80064ac <HAL_RCC_OscConfig+0x614>)
 800634c:	400a      	ands	r2, r1
 800634e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006350:	f7fe ffb0 	bl	80052b4 <HAL_GetTick>
 8006354:	0003      	movs	r3, r0
 8006356:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006358:	e008      	b.n	800636c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800635a:	f7fe ffab 	bl	80052b4 <HAL_GetTick>
 800635e:	0002      	movs	r2, r0
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	2b02      	cmp	r3, #2
 8006366:	d901      	bls.n	800636c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e092      	b.n	8006492 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800636c:	4b4b      	ldr	r3, [pc, #300]	; (800649c <HAL_RCC_OscConfig+0x604>)
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	2380      	movs	r3, #128	; 0x80
 8006372:	049b      	lsls	r3, r3, #18
 8006374:	4013      	ands	r3, r2
 8006376:	d1f0      	bne.n	800635a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006378:	4b48      	ldr	r3, [pc, #288]	; (800649c <HAL_RCC_OscConfig+0x604>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	4a4c      	ldr	r2, [pc, #304]	; (80064b0 <HAL_RCC_OscConfig+0x618>)
 800637e:	4013      	ands	r3, r2
 8006380:	0019      	movs	r1, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1a      	ldr	r2, [r3, #32]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	431a      	orrs	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639e:	431a      	orrs	r2, r3
 80063a0:	4b3e      	ldr	r3, [pc, #248]	; (800649c <HAL_RCC_OscConfig+0x604>)
 80063a2:	430a      	orrs	r2, r1
 80063a4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063a6:	4b3d      	ldr	r3, [pc, #244]	; (800649c <HAL_RCC_OscConfig+0x604>)
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	4b3c      	ldr	r3, [pc, #240]	; (800649c <HAL_RCC_OscConfig+0x604>)
 80063ac:	2180      	movs	r1, #128	; 0x80
 80063ae:	0449      	lsls	r1, r1, #17
 80063b0:	430a      	orrs	r2, r1
 80063b2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80063b4:	4b39      	ldr	r3, [pc, #228]	; (800649c <HAL_RCC_OscConfig+0x604>)
 80063b6:	68da      	ldr	r2, [r3, #12]
 80063b8:	4b38      	ldr	r3, [pc, #224]	; (800649c <HAL_RCC_OscConfig+0x604>)
 80063ba:	2180      	movs	r1, #128	; 0x80
 80063bc:	0549      	lsls	r1, r1, #21
 80063be:	430a      	orrs	r2, r1
 80063c0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c2:	f7fe ff77 	bl	80052b4 <HAL_GetTick>
 80063c6:	0003      	movs	r3, r0
 80063c8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063cc:	f7fe ff72 	bl	80052b4 <HAL_GetTick>
 80063d0:	0002      	movs	r2, r0
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e059      	b.n	8006492 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063de:	4b2f      	ldr	r3, [pc, #188]	; (800649c <HAL_RCC_OscConfig+0x604>)
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	2380      	movs	r3, #128	; 0x80
 80063e4:	049b      	lsls	r3, r3, #18
 80063e6:	4013      	ands	r3, r2
 80063e8:	d0f0      	beq.n	80063cc <HAL_RCC_OscConfig+0x534>
 80063ea:	e051      	b.n	8006490 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ec:	4b2b      	ldr	r3, [pc, #172]	; (800649c <HAL_RCC_OscConfig+0x604>)
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	4b2a      	ldr	r3, [pc, #168]	; (800649c <HAL_RCC_OscConfig+0x604>)
 80063f2:	492e      	ldr	r1, [pc, #184]	; (80064ac <HAL_RCC_OscConfig+0x614>)
 80063f4:	400a      	ands	r2, r1
 80063f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f8:	f7fe ff5c 	bl	80052b4 <HAL_GetTick>
 80063fc:	0003      	movs	r3, r0
 80063fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006400:	e008      	b.n	8006414 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006402:	f7fe ff57 	bl	80052b4 <HAL_GetTick>
 8006406:	0002      	movs	r2, r0
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b02      	cmp	r3, #2
 800640e:	d901      	bls.n	8006414 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e03e      	b.n	8006492 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006414:	4b21      	ldr	r3, [pc, #132]	; (800649c <HAL_RCC_OscConfig+0x604>)
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	2380      	movs	r3, #128	; 0x80
 800641a:	049b      	lsls	r3, r3, #18
 800641c:	4013      	ands	r3, r2
 800641e:	d1f0      	bne.n	8006402 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8006420:	4b1e      	ldr	r3, [pc, #120]	; (800649c <HAL_RCC_OscConfig+0x604>)
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	4b1d      	ldr	r3, [pc, #116]	; (800649c <HAL_RCC_OscConfig+0x604>)
 8006426:	4923      	ldr	r1, [pc, #140]	; (80064b4 <HAL_RCC_OscConfig+0x61c>)
 8006428:	400a      	ands	r2, r1
 800642a:	60da      	str	r2, [r3, #12]
 800642c:	e030      	b.n	8006490 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d101      	bne.n	800643a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e02b      	b.n	8006492 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800643a:	4b18      	ldr	r3, [pc, #96]	; (800649c <HAL_RCC_OscConfig+0x604>)
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2203      	movs	r2, #3
 8006444:	401a      	ands	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	429a      	cmp	r2, r3
 800644c:	d11e      	bne.n	800648c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2270      	movs	r2, #112	; 0x70
 8006452:	401a      	ands	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006458:	429a      	cmp	r2, r3
 800645a:	d117      	bne.n	800648c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	23fe      	movs	r3, #254	; 0xfe
 8006460:	01db      	lsls	r3, r3, #7
 8006462:	401a      	ands	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006468:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800646a:	429a      	cmp	r2, r3
 800646c:	d10e      	bne.n	800648c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	23f8      	movs	r3, #248	; 0xf8
 8006472:	039b      	lsls	r3, r3, #14
 8006474:	401a      	ands	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800647a:	429a      	cmp	r2, r3
 800647c:	d106      	bne.n	800648c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	0f5b      	lsrs	r3, r3, #29
 8006482:	075a      	lsls	r2, r3, #29
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006488:	429a      	cmp	r2, r3
 800648a:	d001      	beq.n	8006490 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e000      	b.n	8006492 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	0018      	movs	r0, r3
 8006494:	46bd      	mov	sp, r7
 8006496:	b008      	add	sp, #32
 8006498:	bd80      	pop	{r7, pc}
 800649a:	46c0      	nop			; (mov r8, r8)
 800649c:	40021000 	.word	0x40021000
 80064a0:	40007000 	.word	0x40007000
 80064a4:	00001388 	.word	0x00001388
 80064a8:	efffffff 	.word	0xefffffff
 80064ac:	feffffff 	.word	0xfeffffff
 80064b0:	1fc1808c 	.word	0x1fc1808c
 80064b4:	effefffc 	.word	0xeffefffc

080064b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e0e9      	b.n	80066a0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064cc:	4b76      	ldr	r3, [pc, #472]	; (80066a8 <HAL_RCC_ClockConfig+0x1f0>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2207      	movs	r2, #7
 80064d2:	4013      	ands	r3, r2
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d91e      	bls.n	8006518 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064da:	4b73      	ldr	r3, [pc, #460]	; (80066a8 <HAL_RCC_ClockConfig+0x1f0>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2207      	movs	r2, #7
 80064e0:	4393      	bics	r3, r2
 80064e2:	0019      	movs	r1, r3
 80064e4:	4b70      	ldr	r3, [pc, #448]	; (80066a8 <HAL_RCC_ClockConfig+0x1f0>)
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80064ec:	f7fe fee2 	bl	80052b4 <HAL_GetTick>
 80064f0:	0003      	movs	r3, r0
 80064f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80064f4:	e009      	b.n	800650a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064f6:	f7fe fedd 	bl	80052b4 <HAL_GetTick>
 80064fa:	0002      	movs	r2, r0
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	4a6a      	ldr	r2, [pc, #424]	; (80066ac <HAL_RCC_ClockConfig+0x1f4>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d901      	bls.n	800650a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e0ca      	b.n	80066a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800650a:	4b67      	ldr	r3, [pc, #412]	; (80066a8 <HAL_RCC_ClockConfig+0x1f0>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2207      	movs	r2, #7
 8006510:	4013      	ands	r3, r2
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	429a      	cmp	r2, r3
 8006516:	d1ee      	bne.n	80064f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2202      	movs	r2, #2
 800651e:	4013      	ands	r3, r2
 8006520:	d015      	beq.n	800654e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2204      	movs	r2, #4
 8006528:	4013      	ands	r3, r2
 800652a:	d006      	beq.n	800653a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800652c:	4b60      	ldr	r3, [pc, #384]	; (80066b0 <HAL_RCC_ClockConfig+0x1f8>)
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	4b5f      	ldr	r3, [pc, #380]	; (80066b0 <HAL_RCC_ClockConfig+0x1f8>)
 8006532:	21e0      	movs	r1, #224	; 0xe0
 8006534:	01c9      	lsls	r1, r1, #7
 8006536:	430a      	orrs	r2, r1
 8006538:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800653a:	4b5d      	ldr	r3, [pc, #372]	; (80066b0 <HAL_RCC_ClockConfig+0x1f8>)
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	4a5d      	ldr	r2, [pc, #372]	; (80066b4 <HAL_RCC_ClockConfig+0x1fc>)
 8006540:	4013      	ands	r3, r2
 8006542:	0019      	movs	r1, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	4b59      	ldr	r3, [pc, #356]	; (80066b0 <HAL_RCC_ClockConfig+0x1f8>)
 800654a:	430a      	orrs	r2, r1
 800654c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2201      	movs	r2, #1
 8006554:	4013      	ands	r3, r2
 8006556:	d057      	beq.n	8006608 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d107      	bne.n	8006570 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006560:	4b53      	ldr	r3, [pc, #332]	; (80066b0 <HAL_RCC_ClockConfig+0x1f8>)
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	2380      	movs	r3, #128	; 0x80
 8006566:	029b      	lsls	r3, r3, #10
 8006568:	4013      	ands	r3, r2
 800656a:	d12b      	bne.n	80065c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e097      	b.n	80066a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	2b02      	cmp	r3, #2
 8006576:	d107      	bne.n	8006588 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006578:	4b4d      	ldr	r3, [pc, #308]	; (80066b0 <HAL_RCC_ClockConfig+0x1f8>)
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	2380      	movs	r3, #128	; 0x80
 800657e:	049b      	lsls	r3, r3, #18
 8006580:	4013      	ands	r3, r2
 8006582:	d11f      	bne.n	80065c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e08b      	b.n	80066a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d107      	bne.n	80065a0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006590:	4b47      	ldr	r3, [pc, #284]	; (80066b0 <HAL_RCC_ClockConfig+0x1f8>)
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	2380      	movs	r3, #128	; 0x80
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	4013      	ands	r3, r2
 800659a:	d113      	bne.n	80065c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e07f      	b.n	80066a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	2b03      	cmp	r3, #3
 80065a6:	d106      	bne.n	80065b6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80065a8:	4b41      	ldr	r3, [pc, #260]	; (80066b0 <HAL_RCC_ClockConfig+0x1f8>)
 80065aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ac:	2202      	movs	r2, #2
 80065ae:	4013      	ands	r3, r2
 80065b0:	d108      	bne.n	80065c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e074      	b.n	80066a0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065b6:	4b3e      	ldr	r3, [pc, #248]	; (80066b0 <HAL_RCC_ClockConfig+0x1f8>)
 80065b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ba:	2202      	movs	r2, #2
 80065bc:	4013      	ands	r3, r2
 80065be:	d101      	bne.n	80065c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e06d      	b.n	80066a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065c4:	4b3a      	ldr	r3, [pc, #232]	; (80066b0 <HAL_RCC_ClockConfig+0x1f8>)
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	2207      	movs	r2, #7
 80065ca:	4393      	bics	r3, r2
 80065cc:	0019      	movs	r1, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	4b37      	ldr	r3, [pc, #220]	; (80066b0 <HAL_RCC_ClockConfig+0x1f8>)
 80065d4:	430a      	orrs	r2, r1
 80065d6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065d8:	f7fe fe6c 	bl	80052b4 <HAL_GetTick>
 80065dc:	0003      	movs	r3, r0
 80065de:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065e0:	e009      	b.n	80065f6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065e2:	f7fe fe67 	bl	80052b4 <HAL_GetTick>
 80065e6:	0002      	movs	r2, r0
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	4a2f      	ldr	r2, [pc, #188]	; (80066ac <HAL_RCC_ClockConfig+0x1f4>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e054      	b.n	80066a0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065f6:	4b2e      	ldr	r3, [pc, #184]	; (80066b0 <HAL_RCC_ClockConfig+0x1f8>)
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	2238      	movs	r2, #56	; 0x38
 80065fc:	401a      	ands	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	00db      	lsls	r3, r3, #3
 8006604:	429a      	cmp	r2, r3
 8006606:	d1ec      	bne.n	80065e2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006608:	4b27      	ldr	r3, [pc, #156]	; (80066a8 <HAL_RCC_ClockConfig+0x1f0>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2207      	movs	r2, #7
 800660e:	4013      	ands	r3, r2
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	d21e      	bcs.n	8006654 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006616:	4b24      	ldr	r3, [pc, #144]	; (80066a8 <HAL_RCC_ClockConfig+0x1f0>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2207      	movs	r2, #7
 800661c:	4393      	bics	r3, r2
 800661e:	0019      	movs	r1, r3
 8006620:	4b21      	ldr	r3, [pc, #132]	; (80066a8 <HAL_RCC_ClockConfig+0x1f0>)
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006628:	f7fe fe44 	bl	80052b4 <HAL_GetTick>
 800662c:	0003      	movs	r3, r0
 800662e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006630:	e009      	b.n	8006646 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006632:	f7fe fe3f 	bl	80052b4 <HAL_GetTick>
 8006636:	0002      	movs	r2, r0
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	4a1b      	ldr	r2, [pc, #108]	; (80066ac <HAL_RCC_ClockConfig+0x1f4>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d901      	bls.n	8006646 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e02c      	b.n	80066a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006646:	4b18      	ldr	r3, [pc, #96]	; (80066a8 <HAL_RCC_ClockConfig+0x1f0>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2207      	movs	r2, #7
 800664c:	4013      	ands	r3, r2
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	429a      	cmp	r2, r3
 8006652:	d1ee      	bne.n	8006632 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2204      	movs	r2, #4
 800665a:	4013      	ands	r3, r2
 800665c:	d009      	beq.n	8006672 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800665e:	4b14      	ldr	r3, [pc, #80]	; (80066b0 <HAL_RCC_ClockConfig+0x1f8>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	4a15      	ldr	r2, [pc, #84]	; (80066b8 <HAL_RCC_ClockConfig+0x200>)
 8006664:	4013      	ands	r3, r2
 8006666:	0019      	movs	r1, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68da      	ldr	r2, [r3, #12]
 800666c:	4b10      	ldr	r3, [pc, #64]	; (80066b0 <HAL_RCC_ClockConfig+0x1f8>)
 800666e:	430a      	orrs	r2, r1
 8006670:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006672:	f000 f829 	bl	80066c8 <HAL_RCC_GetSysClockFreq>
 8006676:	0001      	movs	r1, r0
 8006678:	4b0d      	ldr	r3, [pc, #52]	; (80066b0 <HAL_RCC_ClockConfig+0x1f8>)
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	0a1b      	lsrs	r3, r3, #8
 800667e:	220f      	movs	r2, #15
 8006680:	401a      	ands	r2, r3
 8006682:	4b0e      	ldr	r3, [pc, #56]	; (80066bc <HAL_RCC_ClockConfig+0x204>)
 8006684:	0092      	lsls	r2, r2, #2
 8006686:	58d3      	ldr	r3, [r2, r3]
 8006688:	221f      	movs	r2, #31
 800668a:	4013      	ands	r3, r2
 800668c:	000a      	movs	r2, r1
 800668e:	40da      	lsrs	r2, r3
 8006690:	4b0b      	ldr	r3, [pc, #44]	; (80066c0 <HAL_RCC_ClockConfig+0x208>)
 8006692:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006694:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <HAL_RCC_ClockConfig+0x20c>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	0018      	movs	r0, r3
 800669a:	f7fd fc1d 	bl	8003ed8 <HAL_InitTick>
 800669e:	0003      	movs	r3, r0
}
 80066a0:	0018      	movs	r0, r3
 80066a2:	46bd      	mov	sp, r7
 80066a4:	b004      	add	sp, #16
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	40022000 	.word	0x40022000
 80066ac:	00001388 	.word	0x00001388
 80066b0:	40021000 	.word	0x40021000
 80066b4:	fffff0ff 	.word	0xfffff0ff
 80066b8:	ffff8fff 	.word	0xffff8fff
 80066bc:	08010f0c 	.word	0x08010f0c
 80066c0:	20000028 	.word	0x20000028
 80066c4:	2000002c 	.word	0x2000002c

080066c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066ce:	4b3c      	ldr	r3, [pc, #240]	; (80067c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	2238      	movs	r2, #56	; 0x38
 80066d4:	4013      	ands	r3, r2
 80066d6:	d10f      	bne.n	80066f8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80066d8:	4b39      	ldr	r3, [pc, #228]	; (80067c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	0adb      	lsrs	r3, r3, #11
 80066de:	2207      	movs	r2, #7
 80066e0:	4013      	ands	r3, r2
 80066e2:	2201      	movs	r2, #1
 80066e4:	409a      	lsls	r2, r3
 80066e6:	0013      	movs	r3, r2
 80066e8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	4835      	ldr	r0, [pc, #212]	; (80067c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80066ee:	f7f9 fd1d 	bl	800012c <__udivsi3>
 80066f2:	0003      	movs	r3, r0
 80066f4:	613b      	str	r3, [r7, #16]
 80066f6:	e05d      	b.n	80067b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80066f8:	4b31      	ldr	r3, [pc, #196]	; (80067c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	2238      	movs	r2, #56	; 0x38
 80066fe:	4013      	ands	r3, r2
 8006700:	2b08      	cmp	r3, #8
 8006702:	d102      	bne.n	800670a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006704:	4b2f      	ldr	r3, [pc, #188]	; (80067c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006706:	613b      	str	r3, [r7, #16]
 8006708:	e054      	b.n	80067b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800670a:	4b2d      	ldr	r3, [pc, #180]	; (80067c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	2238      	movs	r2, #56	; 0x38
 8006710:	4013      	ands	r3, r2
 8006712:	2b10      	cmp	r3, #16
 8006714:	d138      	bne.n	8006788 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006716:	4b2a      	ldr	r3, [pc, #168]	; (80067c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	2203      	movs	r2, #3
 800671c:	4013      	ands	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006720:	4b27      	ldr	r3, [pc, #156]	; (80067c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	091b      	lsrs	r3, r3, #4
 8006726:	2207      	movs	r2, #7
 8006728:	4013      	ands	r3, r2
 800672a:	3301      	adds	r3, #1
 800672c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b03      	cmp	r3, #3
 8006732:	d10d      	bne.n	8006750 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006734:	68b9      	ldr	r1, [r7, #8]
 8006736:	4823      	ldr	r0, [pc, #140]	; (80067c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006738:	f7f9 fcf8 	bl	800012c <__udivsi3>
 800673c:	0003      	movs	r3, r0
 800673e:	0019      	movs	r1, r3
 8006740:	4b1f      	ldr	r3, [pc, #124]	; (80067c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	0a1b      	lsrs	r3, r3, #8
 8006746:	227f      	movs	r2, #127	; 0x7f
 8006748:	4013      	ands	r3, r2
 800674a:	434b      	muls	r3, r1
 800674c:	617b      	str	r3, [r7, #20]
        break;
 800674e:	e00d      	b.n	800676c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	481c      	ldr	r0, [pc, #112]	; (80067c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006754:	f7f9 fcea 	bl	800012c <__udivsi3>
 8006758:	0003      	movs	r3, r0
 800675a:	0019      	movs	r1, r3
 800675c:	4b18      	ldr	r3, [pc, #96]	; (80067c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	0a1b      	lsrs	r3, r3, #8
 8006762:	227f      	movs	r2, #127	; 0x7f
 8006764:	4013      	ands	r3, r2
 8006766:	434b      	muls	r3, r1
 8006768:	617b      	str	r3, [r7, #20]
        break;
 800676a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800676c:	4b14      	ldr	r3, [pc, #80]	; (80067c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	0f5b      	lsrs	r3, r3, #29
 8006772:	2207      	movs	r2, #7
 8006774:	4013      	ands	r3, r2
 8006776:	3301      	adds	r3, #1
 8006778:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800677a:	6879      	ldr	r1, [r7, #4]
 800677c:	6978      	ldr	r0, [r7, #20]
 800677e:	f7f9 fcd5 	bl	800012c <__udivsi3>
 8006782:	0003      	movs	r3, r0
 8006784:	613b      	str	r3, [r7, #16]
 8006786:	e015      	b.n	80067b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006788:	4b0d      	ldr	r3, [pc, #52]	; (80067c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	2238      	movs	r2, #56	; 0x38
 800678e:	4013      	ands	r3, r2
 8006790:	2b20      	cmp	r3, #32
 8006792:	d103      	bne.n	800679c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006794:	2380      	movs	r3, #128	; 0x80
 8006796:	021b      	lsls	r3, r3, #8
 8006798:	613b      	str	r3, [r7, #16]
 800679a:	e00b      	b.n	80067b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800679c:	4b08      	ldr	r3, [pc, #32]	; (80067c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	2238      	movs	r2, #56	; 0x38
 80067a2:	4013      	ands	r3, r2
 80067a4:	2b18      	cmp	r3, #24
 80067a6:	d103      	bne.n	80067b0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80067a8:	23fa      	movs	r3, #250	; 0xfa
 80067aa:	01db      	lsls	r3, r3, #7
 80067ac:	613b      	str	r3, [r7, #16]
 80067ae:	e001      	b.n	80067b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80067b4:	693b      	ldr	r3, [r7, #16]
}
 80067b6:	0018      	movs	r0, r3
 80067b8:	46bd      	mov	sp, r7
 80067ba:	b006      	add	sp, #24
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	46c0      	nop			; (mov r8, r8)
 80067c0:	40021000 	.word	0x40021000
 80067c4:	00f42400 	.word	0x00f42400

080067c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067cc:	4b02      	ldr	r3, [pc, #8]	; (80067d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80067ce:	681b      	ldr	r3, [r3, #0]
}
 80067d0:	0018      	movs	r0, r3
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	46c0      	nop			; (mov r8, r8)
 80067d8:	20000028 	.word	0x20000028

080067dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067dc:	b5b0      	push	{r4, r5, r7, lr}
 80067de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80067e0:	f7ff fff2 	bl	80067c8 <HAL_RCC_GetHCLKFreq>
 80067e4:	0004      	movs	r4, r0
 80067e6:	f7ff fb4b 	bl	8005e80 <LL_RCC_GetAPB1Prescaler>
 80067ea:	0003      	movs	r3, r0
 80067ec:	0b1a      	lsrs	r2, r3, #12
 80067ee:	4b05      	ldr	r3, [pc, #20]	; (8006804 <HAL_RCC_GetPCLK1Freq+0x28>)
 80067f0:	0092      	lsls	r2, r2, #2
 80067f2:	58d3      	ldr	r3, [r2, r3]
 80067f4:	221f      	movs	r2, #31
 80067f6:	4013      	ands	r3, r2
 80067f8:	40dc      	lsrs	r4, r3
 80067fa:	0023      	movs	r3, r4
}
 80067fc:	0018      	movs	r0, r3
 80067fe:	46bd      	mov	sp, r7
 8006800:	bdb0      	pop	{r4, r5, r7, pc}
 8006802:	46c0      	nop			; (mov r8, r8)
 8006804:	08010f4c 	.word	0x08010f4c

08006808 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2207      	movs	r2, #7
 8006816:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006818:	4b0e      	ldr	r3, [pc, #56]	; (8006854 <HAL_RCC_GetClockConfig+0x4c>)
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	2207      	movs	r2, #7
 800681e:	401a      	ands	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006824:	4b0b      	ldr	r3, [pc, #44]	; (8006854 <HAL_RCC_GetClockConfig+0x4c>)
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	23f0      	movs	r3, #240	; 0xf0
 800682a:	011b      	lsls	r3, r3, #4
 800682c:	401a      	ands	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8006832:	4b08      	ldr	r3, [pc, #32]	; (8006854 <HAL_RCC_GetClockConfig+0x4c>)
 8006834:	689a      	ldr	r2, [r3, #8]
 8006836:	23e0      	movs	r3, #224	; 0xe0
 8006838:	01db      	lsls	r3, r3, #7
 800683a:	401a      	ands	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006840:	4b05      	ldr	r3, [pc, #20]	; (8006858 <HAL_RCC_GetClockConfig+0x50>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2207      	movs	r2, #7
 8006846:	401a      	ands	r2, r3
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	601a      	str	r2, [r3, #0]
}
 800684c:	46c0      	nop			; (mov r8, r8)
 800684e:	46bd      	mov	sp, r7
 8006850:	b002      	add	sp, #8
 8006852:	bd80      	pop	{r7, pc}
 8006854:	40021000 	.word	0x40021000
 8006858:	40022000 	.word	0x40022000

0800685c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006864:	2313      	movs	r3, #19
 8006866:	18fb      	adds	r3, r7, r3
 8006868:	2200      	movs	r2, #0
 800686a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800686c:	2312      	movs	r3, #18
 800686e:	18fb      	adds	r3, r7, r3
 8006870:	2200      	movs	r2, #0
 8006872:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	2380      	movs	r3, #128	; 0x80
 800687a:	029b      	lsls	r3, r3, #10
 800687c:	4013      	ands	r3, r2
 800687e:	d100      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006880:	e0a3      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006882:	2011      	movs	r0, #17
 8006884:	183b      	adds	r3, r7, r0
 8006886:	2200      	movs	r2, #0
 8006888:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800688a:	4b86      	ldr	r3, [pc, #536]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800688c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800688e:	2380      	movs	r3, #128	; 0x80
 8006890:	055b      	lsls	r3, r3, #21
 8006892:	4013      	ands	r3, r2
 8006894:	d110      	bne.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006896:	4b83      	ldr	r3, [pc, #524]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006898:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800689a:	4b82      	ldr	r3, [pc, #520]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800689c:	2180      	movs	r1, #128	; 0x80
 800689e:	0549      	lsls	r1, r1, #21
 80068a0:	430a      	orrs	r2, r1
 80068a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80068a4:	4b7f      	ldr	r3, [pc, #508]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80068a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068a8:	2380      	movs	r3, #128	; 0x80
 80068aa:	055b      	lsls	r3, r3, #21
 80068ac:	4013      	ands	r3, r2
 80068ae:	60bb      	str	r3, [r7, #8]
 80068b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068b2:	183b      	adds	r3, r7, r0
 80068b4:	2201      	movs	r2, #1
 80068b6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068b8:	4b7b      	ldr	r3, [pc, #492]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	4b7a      	ldr	r3, [pc, #488]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80068be:	2180      	movs	r1, #128	; 0x80
 80068c0:	0049      	lsls	r1, r1, #1
 80068c2:	430a      	orrs	r2, r1
 80068c4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068c6:	f7fe fcf5 	bl	80052b4 <HAL_GetTick>
 80068ca:	0003      	movs	r3, r0
 80068cc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068ce:	e00b      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068d0:	f7fe fcf0 	bl	80052b4 <HAL_GetTick>
 80068d4:	0002      	movs	r2, r0
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d904      	bls.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80068de:	2313      	movs	r3, #19
 80068e0:	18fb      	adds	r3, r7, r3
 80068e2:	2203      	movs	r2, #3
 80068e4:	701a      	strb	r2, [r3, #0]
        break;
 80068e6:	e005      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068e8:	4b6f      	ldr	r3, [pc, #444]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	2380      	movs	r3, #128	; 0x80
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	4013      	ands	r3, r2
 80068f2:	d0ed      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80068f4:	2313      	movs	r3, #19
 80068f6:	18fb      	adds	r3, r7, r3
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d154      	bne.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80068fe:	4b69      	ldr	r3, [pc, #420]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006900:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006902:	23c0      	movs	r3, #192	; 0xc0
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4013      	ands	r3, r2
 8006908:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d019      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	429a      	cmp	r2, r3
 8006918:	d014      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800691a:	4b62      	ldr	r3, [pc, #392]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800691c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800691e:	4a63      	ldr	r2, [pc, #396]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006920:	4013      	ands	r3, r2
 8006922:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006924:	4b5f      	ldr	r3, [pc, #380]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006926:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006928:	4b5e      	ldr	r3, [pc, #376]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800692a:	2180      	movs	r1, #128	; 0x80
 800692c:	0249      	lsls	r1, r1, #9
 800692e:	430a      	orrs	r2, r1
 8006930:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006932:	4b5c      	ldr	r3, [pc, #368]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006934:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006936:	4b5b      	ldr	r3, [pc, #364]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006938:	495d      	ldr	r1, [pc, #372]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800693a:	400a      	ands	r2, r1
 800693c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800693e:	4b59      	ldr	r3, [pc, #356]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006940:	697a      	ldr	r2, [r7, #20]
 8006942:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	2201      	movs	r2, #1
 8006948:	4013      	ands	r3, r2
 800694a:	d016      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694c:	f7fe fcb2 	bl	80052b4 <HAL_GetTick>
 8006950:	0003      	movs	r3, r0
 8006952:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006954:	e00c      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006956:	f7fe fcad 	bl	80052b4 <HAL_GetTick>
 800695a:	0002      	movs	r2, r0
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	4a54      	ldr	r2, [pc, #336]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d904      	bls.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006966:	2313      	movs	r3, #19
 8006968:	18fb      	adds	r3, r7, r3
 800696a:	2203      	movs	r2, #3
 800696c:	701a      	strb	r2, [r3, #0]
            break;
 800696e:	e004      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006970:	4b4c      	ldr	r3, [pc, #304]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006974:	2202      	movs	r2, #2
 8006976:	4013      	ands	r3, r2
 8006978:	d0ed      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800697a:	2313      	movs	r3, #19
 800697c:	18fb      	adds	r3, r7, r3
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10a      	bne.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006984:	4b47      	ldr	r3, [pc, #284]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006988:	4a48      	ldr	r2, [pc, #288]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800698a:	4013      	ands	r3, r2
 800698c:	0019      	movs	r1, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	699a      	ldr	r2, [r3, #24]
 8006992:	4b44      	ldr	r3, [pc, #272]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006994:	430a      	orrs	r2, r1
 8006996:	65da      	str	r2, [r3, #92]	; 0x5c
 8006998:	e00c      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800699a:	2312      	movs	r3, #18
 800699c:	18fb      	adds	r3, r7, r3
 800699e:	2213      	movs	r2, #19
 80069a0:	18ba      	adds	r2, r7, r2
 80069a2:	7812      	ldrb	r2, [r2, #0]
 80069a4:	701a      	strb	r2, [r3, #0]
 80069a6:	e005      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a8:	2312      	movs	r3, #18
 80069aa:	18fb      	adds	r3, r7, r3
 80069ac:	2213      	movs	r2, #19
 80069ae:	18ba      	adds	r2, r7, r2
 80069b0:	7812      	ldrb	r2, [r2, #0]
 80069b2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069b4:	2311      	movs	r3, #17
 80069b6:	18fb      	adds	r3, r7, r3
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d105      	bne.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069be:	4b39      	ldr	r3, [pc, #228]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80069c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069c2:	4b38      	ldr	r3, [pc, #224]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80069c4:	493c      	ldr	r1, [pc, #240]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80069c6:	400a      	ands	r2, r1
 80069c8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2201      	movs	r2, #1
 80069d0:	4013      	ands	r3, r2
 80069d2:	d009      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069d4:	4b33      	ldr	r3, [pc, #204]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80069d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d8:	2203      	movs	r2, #3
 80069da:	4393      	bics	r3, r2
 80069dc:	0019      	movs	r1, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	4b30      	ldr	r3, [pc, #192]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80069e4:	430a      	orrs	r2, r1
 80069e6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2202      	movs	r2, #2
 80069ee:	4013      	ands	r3, r2
 80069f0:	d009      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069f2:	4b2c      	ldr	r3, [pc, #176]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80069f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f6:	220c      	movs	r2, #12
 80069f8:	4393      	bics	r3, r2
 80069fa:	0019      	movs	r1, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689a      	ldr	r2, [r3, #8]
 8006a00:	4b28      	ldr	r3, [pc, #160]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006a02:	430a      	orrs	r2, r1
 8006a04:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	d009      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a10:	4b24      	ldr	r3, [pc, #144]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a14:	4a29      	ldr	r2, [pc, #164]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a16:	4013      	ands	r3, r2
 8006a18:	0019      	movs	r1, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	4b21      	ldr	r3, [pc, #132]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006a20:	430a      	orrs	r2, r1
 8006a22:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	2380      	movs	r3, #128	; 0x80
 8006a2a:	01db      	lsls	r3, r3, #7
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	d015      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a30:	4b1c      	ldr	r3, [pc, #112]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	0899      	lsrs	r1, r3, #2
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	695a      	ldr	r2, [r3, #20]
 8006a3c:	4b19      	ldr	r3, [pc, #100]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	695a      	ldr	r2, [r3, #20]
 8006a46:	2380      	movs	r3, #128	; 0x80
 8006a48:	05db      	lsls	r3, r3, #23
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d106      	bne.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006a4e:	4b15      	ldr	r3, [pc, #84]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006a50:	68da      	ldr	r2, [r3, #12]
 8006a52:	4b14      	ldr	r3, [pc, #80]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006a54:	2180      	movs	r1, #128	; 0x80
 8006a56:	0249      	lsls	r1, r1, #9
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	2380      	movs	r3, #128	; 0x80
 8006a62:	011b      	lsls	r3, r3, #4
 8006a64:	4013      	ands	r3, r2
 8006a66:	d016      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006a68:	4b0e      	ldr	r3, [pc, #56]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6c:	4a14      	ldr	r2, [pc, #80]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006a6e:	4013      	ands	r3, r2
 8006a70:	0019      	movs	r1, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	691a      	ldr	r2, [r3, #16]
 8006a76:	4b0b      	ldr	r3, [pc, #44]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	691a      	ldr	r2, [r3, #16]
 8006a80:	2380      	movs	r3, #128	; 0x80
 8006a82:	01db      	lsls	r3, r3, #7
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d106      	bne.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006a88:	4b06      	ldr	r3, [pc, #24]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006a8a:	68da      	ldr	r2, [r3, #12]
 8006a8c:	4b05      	ldr	r3, [pc, #20]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006a8e:	2180      	movs	r1, #128	; 0x80
 8006a90:	0249      	lsls	r1, r1, #9
 8006a92:	430a      	orrs	r2, r1
 8006a94:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006a96:	2312      	movs	r3, #18
 8006a98:	18fb      	adds	r3, r7, r3
 8006a9a:	781b      	ldrb	r3, [r3, #0]
}
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	b006      	add	sp, #24
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	40021000 	.word	0x40021000
 8006aa8:	40007000 	.word	0x40007000
 8006aac:	fffffcff 	.word	0xfffffcff
 8006ab0:	fffeffff 	.word	0xfffeffff
 8006ab4:	00001388 	.word	0x00001388
 8006ab8:	efffffff 	.word	0xefffffff
 8006abc:	ffffcfff 	.word	0xffffcfff
 8006ac0:	ffff3fff 	.word	0xffff3fff

08006ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e04a      	b.n	8006b6c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	223d      	movs	r2, #61	; 0x3d
 8006ada:	5c9b      	ldrb	r3, [r3, r2]
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d107      	bne.n	8006af2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	223c      	movs	r2, #60	; 0x3c
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	0018      	movs	r0, r3
 8006aee:	f7fe f8dd 	bl	8004cac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	223d      	movs	r2, #61	; 0x3d
 8006af6:	2102      	movs	r1, #2
 8006af8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	3304      	adds	r3, #4
 8006b02:	0019      	movs	r1, r3
 8006b04:	0010      	movs	r0, r2
 8006b06:	f000 ff03 	bl	8007910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2248      	movs	r2, #72	; 0x48
 8006b0e:	2101      	movs	r1, #1
 8006b10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	223e      	movs	r2, #62	; 0x3e
 8006b16:	2101      	movs	r1, #1
 8006b18:	5499      	strb	r1, [r3, r2]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	223f      	movs	r2, #63	; 0x3f
 8006b1e:	2101      	movs	r1, #1
 8006b20:	5499      	strb	r1, [r3, r2]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2240      	movs	r2, #64	; 0x40
 8006b26:	2101      	movs	r1, #1
 8006b28:	5499      	strb	r1, [r3, r2]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2241      	movs	r2, #65	; 0x41
 8006b2e:	2101      	movs	r1, #1
 8006b30:	5499      	strb	r1, [r3, r2]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2242      	movs	r2, #66	; 0x42
 8006b36:	2101      	movs	r1, #1
 8006b38:	5499      	strb	r1, [r3, r2]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2243      	movs	r2, #67	; 0x43
 8006b3e:	2101      	movs	r1, #1
 8006b40:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2244      	movs	r2, #68	; 0x44
 8006b46:	2101      	movs	r1, #1
 8006b48:	5499      	strb	r1, [r3, r2]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2245      	movs	r2, #69	; 0x45
 8006b4e:	2101      	movs	r1, #1
 8006b50:	5499      	strb	r1, [r3, r2]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2246      	movs	r2, #70	; 0x46
 8006b56:	2101      	movs	r1, #1
 8006b58:	5499      	strb	r1, [r3, r2]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2247      	movs	r2, #71	; 0x47
 8006b5e:	2101      	movs	r1, #1
 8006b60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	223d      	movs	r2, #61	; 0x3d
 8006b66:	2101      	movs	r1, #1
 8006b68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	b002      	add	sp, #8
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	223d      	movs	r2, #61	; 0x3d
 8006b80:	5c9b      	ldrb	r3, [r3, r2]
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d001      	beq.n	8006b8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e03c      	b.n	8006c06 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	223d      	movs	r2, #61	; 0x3d
 8006b90:	2102      	movs	r1, #2
 8006b92:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68da      	ldr	r2, [r3, #12]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2101      	movs	r1, #1
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a19      	ldr	r2, [pc, #100]	; (8006c10 <HAL_TIM_Base_Start_IT+0x9c>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d009      	beq.n	8006bc2 <HAL_TIM_Base_Start_IT+0x4e>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a18      	ldr	r2, [pc, #96]	; (8006c14 <HAL_TIM_Base_Start_IT+0xa0>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d004      	beq.n	8006bc2 <HAL_TIM_Base_Start_IT+0x4e>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a16      	ldr	r2, [pc, #88]	; (8006c18 <HAL_TIM_Base_Start_IT+0xa4>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d116      	bne.n	8006bf0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	4a14      	ldr	r2, [pc, #80]	; (8006c1c <HAL_TIM_Base_Start_IT+0xa8>)
 8006bca:	4013      	ands	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2b06      	cmp	r3, #6
 8006bd2:	d016      	beq.n	8006c02 <HAL_TIM_Base_Start_IT+0x8e>
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	2380      	movs	r3, #128	; 0x80
 8006bd8:	025b      	lsls	r3, r3, #9
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d011      	beq.n	8006c02 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2101      	movs	r1, #1
 8006bea:	430a      	orrs	r2, r1
 8006bec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bee:	e008      	b.n	8006c02 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	601a      	str	r2, [r3, #0]
 8006c00:	e000      	b.n	8006c04 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c02:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	0018      	movs	r0, r3
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	b004      	add	sp, #16
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	46c0      	nop			; (mov r8, r8)
 8006c10:	40012c00 	.word	0x40012c00
 8006c14:	40000400 	.word	0x40000400
 8006c18:	40014000 	.word	0x40014000
 8006c1c:	00010007 	.word	0x00010007

08006c20 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e04a      	b.n	8006cc8 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	223d      	movs	r2, #61	; 0x3d
 8006c36:	5c9b      	ldrb	r3, [r3, r2]
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d107      	bne.n	8006c4e <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	223c      	movs	r2, #60	; 0x3c
 8006c42:	2100      	movs	r1, #0
 8006c44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	0018      	movs	r0, r3
 8006c4a:	f000 f841 	bl	8006cd0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	223d      	movs	r2, #61	; 0x3d
 8006c52:	2102      	movs	r1, #2
 8006c54:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	0019      	movs	r1, r3
 8006c60:	0010      	movs	r0, r2
 8006c62:	f000 fe55 	bl	8007910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2248      	movs	r2, #72	; 0x48
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	223e      	movs	r2, #62	; 0x3e
 8006c72:	2101      	movs	r1, #1
 8006c74:	5499      	strb	r1, [r3, r2]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	223f      	movs	r2, #63	; 0x3f
 8006c7a:	2101      	movs	r1, #1
 8006c7c:	5499      	strb	r1, [r3, r2]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2240      	movs	r2, #64	; 0x40
 8006c82:	2101      	movs	r1, #1
 8006c84:	5499      	strb	r1, [r3, r2]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2241      	movs	r2, #65	; 0x41
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	5499      	strb	r1, [r3, r2]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2242      	movs	r2, #66	; 0x42
 8006c92:	2101      	movs	r1, #1
 8006c94:	5499      	strb	r1, [r3, r2]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2243      	movs	r2, #67	; 0x43
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2244      	movs	r2, #68	; 0x44
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	5499      	strb	r1, [r3, r2]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2245      	movs	r2, #69	; 0x45
 8006caa:	2101      	movs	r1, #1
 8006cac:	5499      	strb	r1, [r3, r2]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2246      	movs	r2, #70	; 0x46
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	5499      	strb	r1, [r3, r2]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2247      	movs	r2, #71	; 0x47
 8006cba:	2101      	movs	r1, #1
 8006cbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	223d      	movs	r2, #61	; 0x3d
 8006cc2:	2101      	movs	r1, #1
 8006cc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	0018      	movs	r0, r3
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	b002      	add	sp, #8
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006cd8:	46c0      	nop			; (mov r8, r8)
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	b002      	add	sp, #8
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e04a      	b.n	8006d88 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	223d      	movs	r2, #61	; 0x3d
 8006cf6:	5c9b      	ldrb	r3, [r3, r2]
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d107      	bne.n	8006d0e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	223c      	movs	r2, #60	; 0x3c
 8006d02:	2100      	movs	r1, #0
 8006d04:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	0018      	movs	r0, r3
 8006d0a:	f000 f841 	bl	8006d90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	223d      	movs	r2, #61	; 0x3d
 8006d12:	2102      	movs	r1, #2
 8006d14:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	0019      	movs	r1, r3
 8006d20:	0010      	movs	r0, r2
 8006d22:	f000 fdf5 	bl	8007910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2248      	movs	r2, #72	; 0x48
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	223e      	movs	r2, #62	; 0x3e
 8006d32:	2101      	movs	r1, #1
 8006d34:	5499      	strb	r1, [r3, r2]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	223f      	movs	r2, #63	; 0x3f
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	5499      	strb	r1, [r3, r2]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2240      	movs	r2, #64	; 0x40
 8006d42:	2101      	movs	r1, #1
 8006d44:	5499      	strb	r1, [r3, r2]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2241      	movs	r2, #65	; 0x41
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	5499      	strb	r1, [r3, r2]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2242      	movs	r2, #66	; 0x42
 8006d52:	2101      	movs	r1, #1
 8006d54:	5499      	strb	r1, [r3, r2]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2243      	movs	r2, #67	; 0x43
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2244      	movs	r2, #68	; 0x44
 8006d62:	2101      	movs	r1, #1
 8006d64:	5499      	strb	r1, [r3, r2]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2245      	movs	r2, #69	; 0x45
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	5499      	strb	r1, [r3, r2]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2246      	movs	r2, #70	; 0x46
 8006d72:	2101      	movs	r1, #1
 8006d74:	5499      	strb	r1, [r3, r2]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2247      	movs	r2, #71	; 0x47
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	223d      	movs	r2, #61	; 0x3d
 8006d82:	2101      	movs	r1, #1
 8006d84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	0018      	movs	r0, r3
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	b002      	add	sp, #8
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d98:	46c0      	nop			; (mov r8, r8)
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	b002      	add	sp, #8
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d108      	bne.n	8006dc2 <HAL_TIM_PWM_Start+0x22>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	223e      	movs	r2, #62	; 0x3e
 8006db4:	5c9b      	ldrb	r3, [r3, r2]
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	1e5a      	subs	r2, r3, #1
 8006dbc:	4193      	sbcs	r3, r2
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	e037      	b.n	8006e32 <HAL_TIM_PWM_Start+0x92>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b04      	cmp	r3, #4
 8006dc6:	d108      	bne.n	8006dda <HAL_TIM_PWM_Start+0x3a>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	223f      	movs	r2, #63	; 0x3f
 8006dcc:	5c9b      	ldrb	r3, [r3, r2]
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	1e5a      	subs	r2, r3, #1
 8006dd4:	4193      	sbcs	r3, r2
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	e02b      	b.n	8006e32 <HAL_TIM_PWM_Start+0x92>
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b08      	cmp	r3, #8
 8006dde:	d108      	bne.n	8006df2 <HAL_TIM_PWM_Start+0x52>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2240      	movs	r2, #64	; 0x40
 8006de4:	5c9b      	ldrb	r3, [r3, r2]
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	3b01      	subs	r3, #1
 8006dea:	1e5a      	subs	r2, r3, #1
 8006dec:	4193      	sbcs	r3, r2
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	e01f      	b.n	8006e32 <HAL_TIM_PWM_Start+0x92>
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b0c      	cmp	r3, #12
 8006df6:	d108      	bne.n	8006e0a <HAL_TIM_PWM_Start+0x6a>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2241      	movs	r2, #65	; 0x41
 8006dfc:	5c9b      	ldrb	r3, [r3, r2]
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	3b01      	subs	r3, #1
 8006e02:	1e5a      	subs	r2, r3, #1
 8006e04:	4193      	sbcs	r3, r2
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	e013      	b.n	8006e32 <HAL_TIM_PWM_Start+0x92>
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	2b10      	cmp	r3, #16
 8006e0e:	d108      	bne.n	8006e22 <HAL_TIM_PWM_Start+0x82>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2242      	movs	r2, #66	; 0x42
 8006e14:	5c9b      	ldrb	r3, [r3, r2]
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	1e5a      	subs	r2, r3, #1
 8006e1c:	4193      	sbcs	r3, r2
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	e007      	b.n	8006e32 <HAL_TIM_PWM_Start+0x92>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2243      	movs	r2, #67	; 0x43
 8006e26:	5c9b      	ldrb	r3, [r3, r2]
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	1e5a      	subs	r2, r3, #1
 8006e2e:	4193      	sbcs	r3, r2
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e085      	b.n	8006f46 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d104      	bne.n	8006e4a <HAL_TIM_PWM_Start+0xaa>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	223e      	movs	r2, #62	; 0x3e
 8006e44:	2102      	movs	r1, #2
 8006e46:	5499      	strb	r1, [r3, r2]
 8006e48:	e023      	b.n	8006e92 <HAL_TIM_PWM_Start+0xf2>
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b04      	cmp	r3, #4
 8006e4e:	d104      	bne.n	8006e5a <HAL_TIM_PWM_Start+0xba>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	223f      	movs	r2, #63	; 0x3f
 8006e54:	2102      	movs	r1, #2
 8006e56:	5499      	strb	r1, [r3, r2]
 8006e58:	e01b      	b.n	8006e92 <HAL_TIM_PWM_Start+0xf2>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b08      	cmp	r3, #8
 8006e5e:	d104      	bne.n	8006e6a <HAL_TIM_PWM_Start+0xca>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2240      	movs	r2, #64	; 0x40
 8006e64:	2102      	movs	r1, #2
 8006e66:	5499      	strb	r1, [r3, r2]
 8006e68:	e013      	b.n	8006e92 <HAL_TIM_PWM_Start+0xf2>
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2b0c      	cmp	r3, #12
 8006e6e:	d104      	bne.n	8006e7a <HAL_TIM_PWM_Start+0xda>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2241      	movs	r2, #65	; 0x41
 8006e74:	2102      	movs	r1, #2
 8006e76:	5499      	strb	r1, [r3, r2]
 8006e78:	e00b      	b.n	8006e92 <HAL_TIM_PWM_Start+0xf2>
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b10      	cmp	r3, #16
 8006e7e:	d104      	bne.n	8006e8a <HAL_TIM_PWM_Start+0xea>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2242      	movs	r2, #66	; 0x42
 8006e84:	2102      	movs	r1, #2
 8006e86:	5499      	strb	r1, [r3, r2]
 8006e88:	e003      	b.n	8006e92 <HAL_TIM_PWM_Start+0xf2>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2243      	movs	r2, #67	; 0x43
 8006e8e:	2102      	movs	r1, #2
 8006e90:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	0018      	movs	r0, r3
 8006e9c:	f001 f90e 	bl	80080bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a2a      	ldr	r2, [pc, #168]	; (8006f50 <HAL_TIM_PWM_Start+0x1b0>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d00e      	beq.n	8006ec8 <HAL_TIM_PWM_Start+0x128>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a29      	ldr	r2, [pc, #164]	; (8006f54 <HAL_TIM_PWM_Start+0x1b4>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d009      	beq.n	8006ec8 <HAL_TIM_PWM_Start+0x128>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a27      	ldr	r2, [pc, #156]	; (8006f58 <HAL_TIM_PWM_Start+0x1b8>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d004      	beq.n	8006ec8 <HAL_TIM_PWM_Start+0x128>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a26      	ldr	r2, [pc, #152]	; (8006f5c <HAL_TIM_PWM_Start+0x1bc>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d101      	bne.n	8006ecc <HAL_TIM_PWM_Start+0x12c>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e000      	b.n	8006ece <HAL_TIM_PWM_Start+0x12e>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d008      	beq.n	8006ee4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2180      	movs	r1, #128	; 0x80
 8006ede:	0209      	lsls	r1, r1, #8
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a19      	ldr	r2, [pc, #100]	; (8006f50 <HAL_TIM_PWM_Start+0x1b0>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d009      	beq.n	8006f02 <HAL_TIM_PWM_Start+0x162>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a1b      	ldr	r2, [pc, #108]	; (8006f60 <HAL_TIM_PWM_Start+0x1c0>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d004      	beq.n	8006f02 <HAL_TIM_PWM_Start+0x162>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a15      	ldr	r2, [pc, #84]	; (8006f54 <HAL_TIM_PWM_Start+0x1b4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d116      	bne.n	8006f30 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	4a16      	ldr	r2, [pc, #88]	; (8006f64 <HAL_TIM_PWM_Start+0x1c4>)
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2b06      	cmp	r3, #6
 8006f12:	d016      	beq.n	8006f42 <HAL_TIM_PWM_Start+0x1a2>
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	2380      	movs	r3, #128	; 0x80
 8006f18:	025b      	lsls	r3, r3, #9
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d011      	beq.n	8006f42 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2101      	movs	r1, #1
 8006f2a:	430a      	orrs	r2, r1
 8006f2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f2e:	e008      	b.n	8006f42 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	e000      	b.n	8006f44 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f42:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	0018      	movs	r0, r3
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	b004      	add	sp, #16
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	46c0      	nop			; (mov r8, r8)
 8006f50:	40012c00 	.word	0x40012c00
 8006f54:	40014000 	.word	0x40014000
 8006f58:	40014400 	.word	0x40014400
 8006f5c:	40014800 	.word	0x40014800
 8006f60:	40000400 	.word	0x40000400
 8006f64:	00010007 	.word	0x00010007

08006f68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e090      	b.n	800709e <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	223d      	movs	r2, #61	; 0x3d
 8006f80:	5c9b      	ldrb	r3, [r3, r2]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d107      	bne.n	8006f98 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	223c      	movs	r2, #60	; 0x3c
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	0018      	movs	r0, r3
 8006f94:	f7fd fe06 	bl	8004ba4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	223d      	movs	r2, #61	; 0x3d
 8006f9c:	2102      	movs	r1, #2
 8006f9e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689a      	ldr	r2, [r3, #8]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	493f      	ldr	r1, [pc, #252]	; (80070a8 <HAL_TIM_Encoder_Init+0x140>)
 8006fac:	400a      	ands	r2, r1
 8006fae:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	0019      	movs	r1, r3
 8006fba:	0010      	movs	r0, r2
 8006fbc:	f000 fca8 	bl	8007910 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	4a31      	ldr	r2, [pc, #196]	; (80070ac <HAL_TIM_Encoder_Init+0x144>)
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	689a      	ldr	r2, [r3, #8]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	021b      	lsls	r3, r3, #8
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	4a2c      	ldr	r2, [pc, #176]	; (80070b0 <HAL_TIM_Encoder_Init+0x148>)
 8007000:	4013      	ands	r3, r2
 8007002:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	4a2b      	ldr	r2, [pc, #172]	; (80070b4 <HAL_TIM_Encoder_Init+0x14c>)
 8007008:	4013      	ands	r3, r2
 800700a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	68da      	ldr	r2, [r3, #12]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	69db      	ldr	r3, [r3, #28]
 8007014:	021b      	lsls	r3, r3, #8
 8007016:	4313      	orrs	r3, r2
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	4313      	orrs	r3, r2
 800701c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	011a      	lsls	r2, r3, #4
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	031b      	lsls	r3, r3, #12
 800702a:	4313      	orrs	r3, r2
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	4313      	orrs	r3, r2
 8007030:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2222      	movs	r2, #34	; 0x22
 8007036:	4393      	bics	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2288      	movs	r2, #136	; 0x88
 800703e:	4393      	bics	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	011b      	lsls	r3, r3, #4
 800704c:	4313      	orrs	r3, r2
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	4313      	orrs	r3, r2
 8007052:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2248      	movs	r2, #72	; 0x48
 8007070:	2101      	movs	r1, #1
 8007072:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	223e      	movs	r2, #62	; 0x3e
 8007078:	2101      	movs	r1, #1
 800707a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	223f      	movs	r2, #63	; 0x3f
 8007080:	2101      	movs	r1, #1
 8007082:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2244      	movs	r2, #68	; 0x44
 8007088:	2101      	movs	r1, #1
 800708a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2245      	movs	r2, #69	; 0x45
 8007090:	2101      	movs	r1, #1
 8007092:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	223d      	movs	r2, #61	; 0x3d
 8007098:	2101      	movs	r1, #1
 800709a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	0018      	movs	r0, r3
 80070a0:	46bd      	mov	sp, r7
 80070a2:	b006      	add	sp, #24
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	46c0      	nop			; (mov r8, r8)
 80070a8:	fffebff8 	.word	0xfffebff8
 80070ac:	fffffcfc 	.word	0xfffffcfc
 80070b0:	fffff3f3 	.word	0xfffff3f3
 80070b4:	ffff0f0f 	.word	0xffff0f0f

080070b8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070b8:	b590      	push	{r4, r7, lr}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80070c2:	200f      	movs	r0, #15
 80070c4:	183b      	adds	r3, r7, r0
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	213e      	movs	r1, #62	; 0x3e
 80070ca:	5c52      	ldrb	r2, [r2, r1]
 80070cc:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80070ce:	230e      	movs	r3, #14
 80070d0:	18fb      	adds	r3, r7, r3
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	213f      	movs	r1, #63	; 0x3f
 80070d6:	5c52      	ldrb	r2, [r2, r1]
 80070d8:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80070da:	240d      	movs	r4, #13
 80070dc:	193b      	adds	r3, r7, r4
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	2144      	movs	r1, #68	; 0x44
 80070e2:	5c52      	ldrb	r2, [r2, r1]
 80070e4:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80070e6:	230c      	movs	r3, #12
 80070e8:	18fb      	adds	r3, r7, r3
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	2145      	movs	r1, #69	; 0x45
 80070ee:	5c52      	ldrb	r2, [r2, r1]
 80070f0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d112      	bne.n	800711e <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80070f8:	183b      	adds	r3, r7, r0
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d103      	bne.n	8007108 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007100:	193b      	adds	r3, r7, r4
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d001      	beq.n	800710c <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e075      	b.n	80071f8 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	223e      	movs	r2, #62	; 0x3e
 8007110:	2102      	movs	r1, #2
 8007112:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2244      	movs	r2, #68	; 0x44
 8007118:	2102      	movs	r1, #2
 800711a:	5499      	strb	r1, [r3, r2]
 800711c:	e03d      	b.n	800719a <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b04      	cmp	r3, #4
 8007122:	d114      	bne.n	800714e <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007124:	230e      	movs	r3, #14
 8007126:	18fb      	adds	r3, r7, r3
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d104      	bne.n	8007138 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800712e:	230c      	movs	r3, #12
 8007130:	18fb      	adds	r3, r7, r3
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d001      	beq.n	800713c <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e05d      	b.n	80071f8 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	223f      	movs	r2, #63	; 0x3f
 8007140:	2102      	movs	r1, #2
 8007142:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2245      	movs	r2, #69	; 0x45
 8007148:	2102      	movs	r1, #2
 800714a:	5499      	strb	r1, [r3, r2]
 800714c:	e025      	b.n	800719a <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800714e:	230f      	movs	r3, #15
 8007150:	18fb      	adds	r3, r7, r3
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d10e      	bne.n	8007176 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007158:	230e      	movs	r3, #14
 800715a:	18fb      	adds	r3, r7, r3
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d109      	bne.n	8007176 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007162:	230d      	movs	r3, #13
 8007164:	18fb      	adds	r3, r7, r3
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d104      	bne.n	8007176 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800716c:	230c      	movs	r3, #12
 800716e:	18fb      	adds	r3, r7, r3
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d001      	beq.n	800717a <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e03e      	b.n	80071f8 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	223e      	movs	r2, #62	; 0x3e
 800717e:	2102      	movs	r1, #2
 8007180:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	223f      	movs	r2, #63	; 0x3f
 8007186:	2102      	movs	r1, #2
 8007188:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2244      	movs	r2, #68	; 0x44
 800718e:	2102      	movs	r1, #2
 8007190:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2245      	movs	r2, #69	; 0x45
 8007196:	2102      	movs	r1, #2
 8007198:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d003      	beq.n	80071a8 <HAL_TIM_Encoder_Start+0xf0>
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	d008      	beq.n	80071b8 <HAL_TIM_Encoder_Start+0x100>
 80071a6:	e00f      	b.n	80071c8 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2201      	movs	r2, #1
 80071ae:	2100      	movs	r1, #0
 80071b0:	0018      	movs	r0, r3
 80071b2:	f000 ff83 	bl	80080bc <TIM_CCxChannelCmd>
      break;
 80071b6:	e016      	b.n	80071e6 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2201      	movs	r2, #1
 80071be:	2104      	movs	r1, #4
 80071c0:	0018      	movs	r0, r3
 80071c2:	f000 ff7b 	bl	80080bc <TIM_CCxChannelCmd>
      break;
 80071c6:	e00e      	b.n	80071e6 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2201      	movs	r2, #1
 80071ce:	2100      	movs	r1, #0
 80071d0:	0018      	movs	r0, r3
 80071d2:	f000 ff73 	bl	80080bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2201      	movs	r2, #1
 80071dc:	2104      	movs	r1, #4
 80071de:	0018      	movs	r0, r3
 80071e0:	f000 ff6c 	bl	80080bc <TIM_CCxChannelCmd>
      break;
 80071e4:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2101      	movs	r1, #1
 80071f2:	430a      	orrs	r2, r1
 80071f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	0018      	movs	r0, r3
 80071fa:	46bd      	mov	sp, r7
 80071fc:	b005      	add	sp, #20
 80071fe:	bd90      	pop	{r4, r7, pc}

08007200 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	2202      	movs	r2, #2
 8007210:	4013      	ands	r3, r2
 8007212:	2b02      	cmp	r3, #2
 8007214:	d124      	bne.n	8007260 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	2202      	movs	r2, #2
 800721e:	4013      	ands	r3, r2
 8007220:	2b02      	cmp	r3, #2
 8007222:	d11d      	bne.n	8007260 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2203      	movs	r2, #3
 800722a:	4252      	negs	r2, r2
 800722c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	2203      	movs	r2, #3
 800723c:	4013      	ands	r3, r2
 800723e:	d004      	beq.n	800724a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	0018      	movs	r0, r3
 8007244:	f000 fb4c 	bl	80078e0 <HAL_TIM_IC_CaptureCallback>
 8007248:	e007      	b.n	800725a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	0018      	movs	r0, r3
 800724e:	f000 fb3f 	bl	80078d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	0018      	movs	r0, r3
 8007256:	f000 fb4b 	bl	80078f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	2204      	movs	r2, #4
 8007268:	4013      	ands	r3, r2
 800726a:	2b04      	cmp	r3, #4
 800726c:	d125      	bne.n	80072ba <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	2204      	movs	r2, #4
 8007276:	4013      	ands	r3, r2
 8007278:	2b04      	cmp	r3, #4
 800727a:	d11e      	bne.n	80072ba <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2205      	movs	r2, #5
 8007282:	4252      	negs	r2, r2
 8007284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2202      	movs	r2, #2
 800728a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	699a      	ldr	r2, [r3, #24]
 8007292:	23c0      	movs	r3, #192	; 0xc0
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4013      	ands	r3, r2
 8007298:	d004      	beq.n	80072a4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	0018      	movs	r0, r3
 800729e:	f000 fb1f 	bl	80078e0 <HAL_TIM_IC_CaptureCallback>
 80072a2:	e007      	b.n	80072b4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	0018      	movs	r0, r3
 80072a8:	f000 fb12 	bl	80078d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	0018      	movs	r0, r3
 80072b0:	f000 fb1e 	bl	80078f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	2208      	movs	r2, #8
 80072c2:	4013      	ands	r3, r2
 80072c4:	2b08      	cmp	r3, #8
 80072c6:	d124      	bne.n	8007312 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	2208      	movs	r2, #8
 80072d0:	4013      	ands	r3, r2
 80072d2:	2b08      	cmp	r3, #8
 80072d4:	d11d      	bne.n	8007312 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2209      	movs	r2, #9
 80072dc:	4252      	negs	r2, r2
 80072de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2204      	movs	r2, #4
 80072e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69db      	ldr	r3, [r3, #28]
 80072ec:	2203      	movs	r2, #3
 80072ee:	4013      	ands	r3, r2
 80072f0:	d004      	beq.n	80072fc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	0018      	movs	r0, r3
 80072f6:	f000 faf3 	bl	80078e0 <HAL_TIM_IC_CaptureCallback>
 80072fa:	e007      	b.n	800730c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	0018      	movs	r0, r3
 8007300:	f000 fae6 	bl	80078d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	0018      	movs	r0, r3
 8007308:	f000 faf2 	bl	80078f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	2210      	movs	r2, #16
 800731a:	4013      	ands	r3, r2
 800731c:	2b10      	cmp	r3, #16
 800731e:	d125      	bne.n	800736c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	2210      	movs	r2, #16
 8007328:	4013      	ands	r3, r2
 800732a:	2b10      	cmp	r3, #16
 800732c:	d11e      	bne.n	800736c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2211      	movs	r2, #17
 8007334:	4252      	negs	r2, r2
 8007336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2208      	movs	r2, #8
 800733c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	69da      	ldr	r2, [r3, #28]
 8007344:	23c0      	movs	r3, #192	; 0xc0
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4013      	ands	r3, r2
 800734a:	d004      	beq.n	8007356 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	0018      	movs	r0, r3
 8007350:	f000 fac6 	bl	80078e0 <HAL_TIM_IC_CaptureCallback>
 8007354:	e007      	b.n	8007366 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	0018      	movs	r0, r3
 800735a:	f000 fab9 	bl	80078d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	0018      	movs	r0, r3
 8007362:	f000 fac5 	bl	80078f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	2201      	movs	r2, #1
 8007374:	4013      	ands	r3, r2
 8007376:	2b01      	cmp	r3, #1
 8007378:	d10f      	bne.n	800739a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	2201      	movs	r2, #1
 8007382:	4013      	ands	r3, r2
 8007384:	2b01      	cmp	r3, #1
 8007386:	d108      	bne.n	800739a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2202      	movs	r2, #2
 800738e:	4252      	negs	r2, r2
 8007390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	0018      	movs	r0, r3
 8007396:	f7fc f90d 	bl	80035b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	2280      	movs	r2, #128	; 0x80
 80073a2:	4013      	ands	r3, r2
 80073a4:	2b80      	cmp	r3, #128	; 0x80
 80073a6:	d10f      	bne.n	80073c8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	2280      	movs	r2, #128	; 0x80
 80073b0:	4013      	ands	r3, r2
 80073b2:	2b80      	cmp	r3, #128	; 0x80
 80073b4:	d108      	bne.n	80073c8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2281      	movs	r2, #129	; 0x81
 80073bc:	4252      	negs	r2, r2
 80073be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	0018      	movs	r0, r3
 80073c4:	f000 ffb4 	bl	8008330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	691a      	ldr	r2, [r3, #16]
 80073ce:	2380      	movs	r3, #128	; 0x80
 80073d0:	005b      	lsls	r3, r3, #1
 80073d2:	401a      	ands	r2, r3
 80073d4:	2380      	movs	r3, #128	; 0x80
 80073d6:	005b      	lsls	r3, r3, #1
 80073d8:	429a      	cmp	r2, r3
 80073da:	d10e      	bne.n	80073fa <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	2280      	movs	r2, #128	; 0x80
 80073e4:	4013      	ands	r3, r2
 80073e6:	2b80      	cmp	r3, #128	; 0x80
 80073e8:	d107      	bne.n	80073fa <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a1c      	ldr	r2, [pc, #112]	; (8007460 <HAL_TIM_IRQHandler+0x260>)
 80073f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	0018      	movs	r0, r3
 80073f6:	f000 ffa3 	bl	8008340 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	2240      	movs	r2, #64	; 0x40
 8007402:	4013      	ands	r3, r2
 8007404:	2b40      	cmp	r3, #64	; 0x40
 8007406:	d10f      	bne.n	8007428 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	2240      	movs	r2, #64	; 0x40
 8007410:	4013      	ands	r3, r2
 8007412:	2b40      	cmp	r3, #64	; 0x40
 8007414:	d108      	bne.n	8007428 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2241      	movs	r2, #65	; 0x41
 800741c:	4252      	negs	r2, r2
 800741e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	0018      	movs	r0, r3
 8007424:	f000 fa6c 	bl	8007900 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	2220      	movs	r2, #32
 8007430:	4013      	ands	r3, r2
 8007432:	2b20      	cmp	r3, #32
 8007434:	d10f      	bne.n	8007456 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	2220      	movs	r2, #32
 800743e:	4013      	ands	r3, r2
 8007440:	2b20      	cmp	r3, #32
 8007442:	d108      	bne.n	8007456 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2221      	movs	r2, #33	; 0x21
 800744a:	4252      	negs	r2, r2
 800744c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	0018      	movs	r0, r3
 8007452:	f000 ff65 	bl	8008320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007456:	46c0      	nop			; (mov r8, r8)
 8007458:	46bd      	mov	sp, r7
 800745a:	b002      	add	sp, #8
 800745c:	bd80      	pop	{r7, pc}
 800745e:	46c0      	nop			; (mov r8, r8)
 8007460:	fffffeff 	.word	0xfffffeff

08007464 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007470:	2317      	movs	r3, #23
 8007472:	18fb      	adds	r3, r7, r3
 8007474:	2200      	movs	r2, #0
 8007476:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	223c      	movs	r2, #60	; 0x3c
 800747c:	5c9b      	ldrb	r3, [r3, r2]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d101      	bne.n	8007486 <HAL_TIM_OC_ConfigChannel+0x22>
 8007482:	2302      	movs	r3, #2
 8007484:	e048      	b.n	8007518 <HAL_TIM_OC_ConfigChannel+0xb4>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	223c      	movs	r2, #60	; 0x3c
 800748a:	2101      	movs	r1, #1
 800748c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b14      	cmp	r3, #20
 8007492:	d835      	bhi.n	8007500 <HAL_TIM_OC_ConfigChannel+0x9c>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	009a      	lsls	r2, r3, #2
 8007498:	4b21      	ldr	r3, [pc, #132]	; (8007520 <HAL_TIM_OC_ConfigChannel+0xbc>)
 800749a:	18d3      	adds	r3, r2, r3
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	0011      	movs	r1, r2
 80074a8:	0018      	movs	r0, r3
 80074aa:	f000 faa7 	bl	80079fc <TIM_OC1_SetConfig>
      break;
 80074ae:	e02c      	b.n	800750a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	0011      	movs	r1, r2
 80074b8:	0018      	movs	r0, r3
 80074ba:	f000 fb29 	bl	8007b10 <TIM_OC2_SetConfig>
      break;
 80074be:	e024      	b.n	800750a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	0011      	movs	r1, r2
 80074c8:	0018      	movs	r0, r3
 80074ca:	f000 fba5 	bl	8007c18 <TIM_OC3_SetConfig>
      break;
 80074ce:	e01c      	b.n	800750a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	0011      	movs	r1, r2
 80074d8:	0018      	movs	r0, r3
 80074da:	f000 fc25 	bl	8007d28 <TIM_OC4_SetConfig>
      break;
 80074de:	e014      	b.n	800750a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	0011      	movs	r1, r2
 80074e8:	0018      	movs	r0, r3
 80074ea:	f000 fc87 	bl	8007dfc <TIM_OC5_SetConfig>
      break;
 80074ee:	e00c      	b.n	800750a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	0011      	movs	r1, r2
 80074f8:	0018      	movs	r0, r3
 80074fa:	f000 fcdf 	bl	8007ebc <TIM_OC6_SetConfig>
      break;
 80074fe:	e004      	b.n	800750a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007500:	2317      	movs	r3, #23
 8007502:	18fb      	adds	r3, r7, r3
 8007504:	2201      	movs	r2, #1
 8007506:	701a      	strb	r2, [r3, #0]
      break;
 8007508:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	223c      	movs	r2, #60	; 0x3c
 800750e:	2100      	movs	r1, #0
 8007510:	5499      	strb	r1, [r3, r2]

  return status;
 8007512:	2317      	movs	r3, #23
 8007514:	18fb      	adds	r3, r7, r3
 8007516:	781b      	ldrb	r3, [r3, #0]
}
 8007518:	0018      	movs	r0, r3
 800751a:	46bd      	mov	sp, r7
 800751c:	b006      	add	sp, #24
 800751e:	bd80      	pop	{r7, pc}
 8007520:	08010f6c 	.word	0x08010f6c

08007524 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007530:	2317      	movs	r3, #23
 8007532:	18fb      	adds	r3, r7, r3
 8007534:	2200      	movs	r2, #0
 8007536:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	223c      	movs	r2, #60	; 0x3c
 800753c:	5c9b      	ldrb	r3, [r3, r2]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d101      	bne.n	8007546 <HAL_TIM_PWM_ConfigChannel+0x22>
 8007542:	2302      	movs	r3, #2
 8007544:	e0e5      	b.n	8007712 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	223c      	movs	r2, #60	; 0x3c
 800754a:	2101      	movs	r1, #1
 800754c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2b14      	cmp	r3, #20
 8007552:	d900      	bls.n	8007556 <HAL_TIM_PWM_ConfigChannel+0x32>
 8007554:	e0d1      	b.n	80076fa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	009a      	lsls	r2, r3, #2
 800755a:	4b70      	ldr	r3, [pc, #448]	; (800771c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800755c:	18d3      	adds	r3, r2, r3
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	0011      	movs	r1, r2
 800756a:	0018      	movs	r0, r3
 800756c:	f000 fa46 	bl	80079fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	699a      	ldr	r2, [r3, #24]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2108      	movs	r1, #8
 800757c:	430a      	orrs	r2, r1
 800757e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	699a      	ldr	r2, [r3, #24]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2104      	movs	r1, #4
 800758c:	438a      	bics	r2, r1
 800758e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6999      	ldr	r1, [r3, #24]
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	691a      	ldr	r2, [r3, #16]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	430a      	orrs	r2, r1
 80075a0:	619a      	str	r2, [r3, #24]
      break;
 80075a2:	e0af      	b.n	8007704 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	0011      	movs	r1, r2
 80075ac:	0018      	movs	r0, r3
 80075ae:	f000 faaf 	bl	8007b10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	699a      	ldr	r2, [r3, #24]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2180      	movs	r1, #128	; 0x80
 80075be:	0109      	lsls	r1, r1, #4
 80075c0:	430a      	orrs	r2, r1
 80075c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	699a      	ldr	r2, [r3, #24]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4954      	ldr	r1, [pc, #336]	; (8007720 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80075d0:	400a      	ands	r2, r1
 80075d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6999      	ldr	r1, [r3, #24]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	021a      	lsls	r2, r3, #8
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	430a      	orrs	r2, r1
 80075e6:	619a      	str	r2, [r3, #24]
      break;
 80075e8:	e08c      	b.n	8007704 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	0011      	movs	r1, r2
 80075f2:	0018      	movs	r0, r3
 80075f4:	f000 fb10 	bl	8007c18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	69da      	ldr	r2, [r3, #28]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2108      	movs	r1, #8
 8007604:	430a      	orrs	r2, r1
 8007606:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	69da      	ldr	r2, [r3, #28]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2104      	movs	r1, #4
 8007614:	438a      	bics	r2, r1
 8007616:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	69d9      	ldr	r1, [r3, #28]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	691a      	ldr	r2, [r3, #16]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	61da      	str	r2, [r3, #28]
      break;
 800762a:	e06b      	b.n	8007704 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	0011      	movs	r1, r2
 8007634:	0018      	movs	r0, r3
 8007636:	f000 fb77 	bl	8007d28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	69da      	ldr	r2, [r3, #28]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2180      	movs	r1, #128	; 0x80
 8007646:	0109      	lsls	r1, r1, #4
 8007648:	430a      	orrs	r2, r1
 800764a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	69da      	ldr	r2, [r3, #28]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4932      	ldr	r1, [pc, #200]	; (8007720 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007658:	400a      	ands	r2, r1
 800765a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	69d9      	ldr	r1, [r3, #28]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	021a      	lsls	r2, r3, #8
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	430a      	orrs	r2, r1
 800766e:	61da      	str	r2, [r3, #28]
      break;
 8007670:	e048      	b.n	8007704 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	0011      	movs	r1, r2
 800767a:	0018      	movs	r0, r3
 800767c:	f000 fbbe 	bl	8007dfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2108      	movs	r1, #8
 800768c:	430a      	orrs	r2, r1
 800768e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2104      	movs	r1, #4
 800769c:	438a      	bics	r2, r1
 800769e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	691a      	ldr	r2, [r3, #16]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	430a      	orrs	r2, r1
 80076b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80076b2:	e027      	b.n	8007704 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	0011      	movs	r1, r2
 80076bc:	0018      	movs	r0, r3
 80076be:	f000 fbfd 	bl	8007ebc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2180      	movs	r1, #128	; 0x80
 80076ce:	0109      	lsls	r1, r1, #4
 80076d0:	430a      	orrs	r2, r1
 80076d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4910      	ldr	r1, [pc, #64]	; (8007720 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80076e0:	400a      	ands	r2, r1
 80076e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	021a      	lsls	r2, r3, #8
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	430a      	orrs	r2, r1
 80076f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80076f8:	e004      	b.n	8007704 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80076fa:	2317      	movs	r3, #23
 80076fc:	18fb      	adds	r3, r7, r3
 80076fe:	2201      	movs	r2, #1
 8007700:	701a      	strb	r2, [r3, #0]
      break;
 8007702:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	223c      	movs	r2, #60	; 0x3c
 8007708:	2100      	movs	r1, #0
 800770a:	5499      	strb	r1, [r3, r2]

  return status;
 800770c:	2317      	movs	r3, #23
 800770e:	18fb      	adds	r3, r7, r3
 8007710:	781b      	ldrb	r3, [r3, #0]
}
 8007712:	0018      	movs	r0, r3
 8007714:	46bd      	mov	sp, r7
 8007716:	b006      	add	sp, #24
 8007718:	bd80      	pop	{r7, pc}
 800771a:	46c0      	nop			; (mov r8, r8)
 800771c:	08010fc0 	.word	0x08010fc0
 8007720:	fffffbff 	.word	0xfffffbff

08007724 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800772e:	230f      	movs	r3, #15
 8007730:	18fb      	adds	r3, r7, r3
 8007732:	2200      	movs	r2, #0
 8007734:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	223c      	movs	r2, #60	; 0x3c
 800773a:	5c9b      	ldrb	r3, [r3, r2]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d101      	bne.n	8007744 <HAL_TIM_ConfigClockSource+0x20>
 8007740:	2302      	movs	r3, #2
 8007742:	e0bc      	b.n	80078be <HAL_TIM_ConfigClockSource+0x19a>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	223c      	movs	r2, #60	; 0x3c
 8007748:	2101      	movs	r1, #1
 800774a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	223d      	movs	r2, #61	; 0x3d
 8007750:	2102      	movs	r1, #2
 8007752:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	4a5a      	ldr	r2, [pc, #360]	; (80078c8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007760:	4013      	ands	r3, r2
 8007762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	4a59      	ldr	r2, [pc, #356]	; (80078cc <HAL_TIM_ConfigClockSource+0x1a8>)
 8007768:	4013      	ands	r3, r2
 800776a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2280      	movs	r2, #128	; 0x80
 800777a:	0192      	lsls	r2, r2, #6
 800777c:	4293      	cmp	r3, r2
 800777e:	d040      	beq.n	8007802 <HAL_TIM_ConfigClockSource+0xde>
 8007780:	2280      	movs	r2, #128	; 0x80
 8007782:	0192      	lsls	r2, r2, #6
 8007784:	4293      	cmp	r3, r2
 8007786:	d900      	bls.n	800778a <HAL_TIM_ConfigClockSource+0x66>
 8007788:	e088      	b.n	800789c <HAL_TIM_ConfigClockSource+0x178>
 800778a:	2280      	movs	r2, #128	; 0x80
 800778c:	0152      	lsls	r2, r2, #5
 800778e:	4293      	cmp	r3, r2
 8007790:	d100      	bne.n	8007794 <HAL_TIM_ConfigClockSource+0x70>
 8007792:	e088      	b.n	80078a6 <HAL_TIM_ConfigClockSource+0x182>
 8007794:	2280      	movs	r2, #128	; 0x80
 8007796:	0152      	lsls	r2, r2, #5
 8007798:	4293      	cmp	r3, r2
 800779a:	d900      	bls.n	800779e <HAL_TIM_ConfigClockSource+0x7a>
 800779c:	e07e      	b.n	800789c <HAL_TIM_ConfigClockSource+0x178>
 800779e:	2b70      	cmp	r3, #112	; 0x70
 80077a0:	d018      	beq.n	80077d4 <HAL_TIM_ConfigClockSource+0xb0>
 80077a2:	d900      	bls.n	80077a6 <HAL_TIM_ConfigClockSource+0x82>
 80077a4:	e07a      	b.n	800789c <HAL_TIM_ConfigClockSource+0x178>
 80077a6:	2b60      	cmp	r3, #96	; 0x60
 80077a8:	d04f      	beq.n	800784a <HAL_TIM_ConfigClockSource+0x126>
 80077aa:	d900      	bls.n	80077ae <HAL_TIM_ConfigClockSource+0x8a>
 80077ac:	e076      	b.n	800789c <HAL_TIM_ConfigClockSource+0x178>
 80077ae:	2b50      	cmp	r3, #80	; 0x50
 80077b0:	d03b      	beq.n	800782a <HAL_TIM_ConfigClockSource+0x106>
 80077b2:	d900      	bls.n	80077b6 <HAL_TIM_ConfigClockSource+0x92>
 80077b4:	e072      	b.n	800789c <HAL_TIM_ConfigClockSource+0x178>
 80077b6:	2b40      	cmp	r3, #64	; 0x40
 80077b8:	d057      	beq.n	800786a <HAL_TIM_ConfigClockSource+0x146>
 80077ba:	d900      	bls.n	80077be <HAL_TIM_ConfigClockSource+0x9a>
 80077bc:	e06e      	b.n	800789c <HAL_TIM_ConfigClockSource+0x178>
 80077be:	2b30      	cmp	r3, #48	; 0x30
 80077c0:	d063      	beq.n	800788a <HAL_TIM_ConfigClockSource+0x166>
 80077c2:	d86b      	bhi.n	800789c <HAL_TIM_ConfigClockSource+0x178>
 80077c4:	2b20      	cmp	r3, #32
 80077c6:	d060      	beq.n	800788a <HAL_TIM_ConfigClockSource+0x166>
 80077c8:	d868      	bhi.n	800789c <HAL_TIM_ConfigClockSource+0x178>
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d05d      	beq.n	800788a <HAL_TIM_ConfigClockSource+0x166>
 80077ce:	2b10      	cmp	r3, #16
 80077d0:	d05b      	beq.n	800788a <HAL_TIM_ConfigClockSource+0x166>
 80077d2:	e063      	b.n	800789c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80077e4:	f000 fc4a 	bl	800807c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2277      	movs	r2, #119	; 0x77
 80077f4:	4313      	orrs	r3, r2
 80077f6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	609a      	str	r2, [r3, #8]
      break;
 8007800:	e052      	b.n	80078a8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007812:	f000 fc33 	bl	800807c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689a      	ldr	r2, [r3, #8]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2180      	movs	r1, #128	; 0x80
 8007822:	01c9      	lsls	r1, r1, #7
 8007824:	430a      	orrs	r2, r1
 8007826:	609a      	str	r2, [r3, #8]
      break;
 8007828:	e03e      	b.n	80078a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007836:	001a      	movs	r2, r3
 8007838:	f000 fba4 	bl	8007f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2150      	movs	r1, #80	; 0x50
 8007842:	0018      	movs	r0, r3
 8007844:	f000 fbfe 	bl	8008044 <TIM_ITRx_SetConfig>
      break;
 8007848:	e02e      	b.n	80078a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007856:	001a      	movs	r2, r3
 8007858:	f000 fbc2 	bl	8007fe0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2160      	movs	r1, #96	; 0x60
 8007862:	0018      	movs	r0, r3
 8007864:	f000 fbee 	bl	8008044 <TIM_ITRx_SetConfig>
      break;
 8007868:	e01e      	b.n	80078a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007876:	001a      	movs	r2, r3
 8007878:	f000 fb84 	bl	8007f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2140      	movs	r1, #64	; 0x40
 8007882:	0018      	movs	r0, r3
 8007884:	f000 fbde 	bl	8008044 <TIM_ITRx_SetConfig>
      break;
 8007888:	e00e      	b.n	80078a8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	0019      	movs	r1, r3
 8007894:	0010      	movs	r0, r2
 8007896:	f000 fbd5 	bl	8008044 <TIM_ITRx_SetConfig>
      break;
 800789a:	e005      	b.n	80078a8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800789c:	230f      	movs	r3, #15
 800789e:	18fb      	adds	r3, r7, r3
 80078a0:	2201      	movs	r2, #1
 80078a2:	701a      	strb	r2, [r3, #0]
      break;
 80078a4:	e000      	b.n	80078a8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80078a6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	223d      	movs	r2, #61	; 0x3d
 80078ac:	2101      	movs	r1, #1
 80078ae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	223c      	movs	r2, #60	; 0x3c
 80078b4:	2100      	movs	r1, #0
 80078b6:	5499      	strb	r1, [r3, r2]

  return status;
 80078b8:	230f      	movs	r3, #15
 80078ba:	18fb      	adds	r3, r7, r3
 80078bc:	781b      	ldrb	r3, [r3, #0]
}
 80078be:	0018      	movs	r0, r3
 80078c0:	46bd      	mov	sp, r7
 80078c2:	b004      	add	sp, #16
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	46c0      	nop			; (mov r8, r8)
 80078c8:	ffceff88 	.word	0xffceff88
 80078cc:	ffff00ff 	.word	0xffff00ff

080078d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078d8:	46c0      	nop			; (mov r8, r8)
 80078da:	46bd      	mov	sp, r7
 80078dc:	b002      	add	sp, #8
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078e8:	46c0      	nop			; (mov r8, r8)
 80078ea:	46bd      	mov	sp, r7
 80078ec:	b002      	add	sp, #8
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078f8:	46c0      	nop			; (mov r8, r8)
 80078fa:	46bd      	mov	sp, r7
 80078fc:	b002      	add	sp, #8
 80078fe:	bd80      	pop	{r7, pc}

08007900 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007908:	46c0      	nop			; (mov r8, r8)
 800790a:	46bd      	mov	sp, r7
 800790c:	b002      	add	sp, #8
 800790e:	bd80      	pop	{r7, pc}

08007910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a2f      	ldr	r2, [pc, #188]	; (80079e0 <TIM_Base_SetConfig+0xd0>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d003      	beq.n	8007930 <TIM_Base_SetConfig+0x20>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a2e      	ldr	r2, [pc, #184]	; (80079e4 <TIM_Base_SetConfig+0xd4>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d108      	bne.n	8007942 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2270      	movs	r2, #112	; 0x70
 8007934:	4393      	bics	r3, r2
 8007936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	4313      	orrs	r3, r2
 8007940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a26      	ldr	r2, [pc, #152]	; (80079e0 <TIM_Base_SetConfig+0xd0>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d013      	beq.n	8007972 <TIM_Base_SetConfig+0x62>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a25      	ldr	r2, [pc, #148]	; (80079e4 <TIM_Base_SetConfig+0xd4>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d00f      	beq.n	8007972 <TIM_Base_SetConfig+0x62>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a24      	ldr	r2, [pc, #144]	; (80079e8 <TIM_Base_SetConfig+0xd8>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d00b      	beq.n	8007972 <TIM_Base_SetConfig+0x62>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a23      	ldr	r2, [pc, #140]	; (80079ec <TIM_Base_SetConfig+0xdc>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d007      	beq.n	8007972 <TIM_Base_SetConfig+0x62>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a22      	ldr	r2, [pc, #136]	; (80079f0 <TIM_Base_SetConfig+0xe0>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d003      	beq.n	8007972 <TIM_Base_SetConfig+0x62>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a21      	ldr	r2, [pc, #132]	; (80079f4 <TIM_Base_SetConfig+0xe4>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d108      	bne.n	8007984 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	4a20      	ldr	r2, [pc, #128]	; (80079f8 <TIM_Base_SetConfig+0xe8>)
 8007976:	4013      	ands	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	4313      	orrs	r3, r2
 8007982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2280      	movs	r2, #128	; 0x80
 8007988:	4393      	bics	r3, r2
 800798a:	001a      	movs	r2, r3
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	4313      	orrs	r3, r2
 8007992:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	689a      	ldr	r2, [r3, #8]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a0c      	ldr	r2, [pc, #48]	; (80079e0 <TIM_Base_SetConfig+0xd0>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d00b      	beq.n	80079ca <TIM_Base_SetConfig+0xba>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a0d      	ldr	r2, [pc, #52]	; (80079ec <TIM_Base_SetConfig+0xdc>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d007      	beq.n	80079ca <TIM_Base_SetConfig+0xba>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a0c      	ldr	r2, [pc, #48]	; (80079f0 <TIM_Base_SetConfig+0xe0>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d003      	beq.n	80079ca <TIM_Base_SetConfig+0xba>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a0b      	ldr	r2, [pc, #44]	; (80079f4 <TIM_Base_SetConfig+0xe4>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d103      	bne.n	80079d2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	691a      	ldr	r2, [r3, #16]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	615a      	str	r2, [r3, #20]
}
 80079d8:	46c0      	nop			; (mov r8, r8)
 80079da:	46bd      	mov	sp, r7
 80079dc:	b004      	add	sp, #16
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	40012c00 	.word	0x40012c00
 80079e4:	40000400 	.word	0x40000400
 80079e8:	40002000 	.word	0x40002000
 80079ec:	40014000 	.word	0x40014000
 80079f0:	40014400 	.word	0x40014400
 80079f4:	40014800 	.word	0x40014800
 80079f8:	fffffcff 	.word	0xfffffcff

080079fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	4393      	bics	r3, r2
 8007a0e:	001a      	movs	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a1b      	ldr	r3, [r3, #32]
 8007a18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	4a32      	ldr	r2, [pc, #200]	; (8007af4 <TIM_OC1_SetConfig+0xf8>)
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2203      	movs	r2, #3
 8007a32:	4393      	bics	r3, r2
 8007a34:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	2202      	movs	r2, #2
 8007a44:	4393      	bics	r3, r2
 8007a46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a28      	ldr	r2, [pc, #160]	; (8007af8 <TIM_OC1_SetConfig+0xfc>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d00b      	beq.n	8007a72 <TIM_OC1_SetConfig+0x76>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a27      	ldr	r2, [pc, #156]	; (8007afc <TIM_OC1_SetConfig+0x100>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d007      	beq.n	8007a72 <TIM_OC1_SetConfig+0x76>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a26      	ldr	r2, [pc, #152]	; (8007b00 <TIM_OC1_SetConfig+0x104>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d003      	beq.n	8007a72 <TIM_OC1_SetConfig+0x76>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a25      	ldr	r2, [pc, #148]	; (8007b04 <TIM_OC1_SetConfig+0x108>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d10c      	bne.n	8007a8c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2208      	movs	r2, #8
 8007a76:	4393      	bics	r3, r2
 8007a78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	2204      	movs	r2, #4
 8007a88:	4393      	bics	r3, r2
 8007a8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a1a      	ldr	r2, [pc, #104]	; (8007af8 <TIM_OC1_SetConfig+0xfc>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d00b      	beq.n	8007aac <TIM_OC1_SetConfig+0xb0>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a19      	ldr	r2, [pc, #100]	; (8007afc <TIM_OC1_SetConfig+0x100>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d007      	beq.n	8007aac <TIM_OC1_SetConfig+0xb0>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a18      	ldr	r2, [pc, #96]	; (8007b00 <TIM_OC1_SetConfig+0x104>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d003      	beq.n	8007aac <TIM_OC1_SetConfig+0xb0>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a17      	ldr	r2, [pc, #92]	; (8007b04 <TIM_OC1_SetConfig+0x108>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d111      	bne.n	8007ad0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	4a16      	ldr	r2, [pc, #88]	; (8007b08 <TIM_OC1_SetConfig+0x10c>)
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	4a15      	ldr	r2, [pc, #84]	; (8007b0c <TIM_OC1_SetConfig+0x110>)
 8007ab8:	4013      	ands	r3, r2
 8007aba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	695b      	ldr	r3, [r3, #20]
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	621a      	str	r2, [r3, #32]
}
 8007aea:	46c0      	nop			; (mov r8, r8)
 8007aec:	46bd      	mov	sp, r7
 8007aee:	b006      	add	sp, #24
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	46c0      	nop			; (mov r8, r8)
 8007af4:	fffeff8f 	.word	0xfffeff8f
 8007af8:	40012c00 	.word	0x40012c00
 8007afc:	40014000 	.word	0x40014000
 8007b00:	40014400 	.word	0x40014400
 8007b04:	40014800 	.word	0x40014800
 8007b08:	fffffeff 	.word	0xfffffeff
 8007b0c:	fffffdff 	.word	0xfffffdff

08007b10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	2210      	movs	r2, #16
 8007b20:	4393      	bics	r3, r2
 8007b22:	001a      	movs	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	4a2e      	ldr	r2, [pc, #184]	; (8007bf8 <TIM_OC2_SetConfig+0xe8>)
 8007b3e:	4013      	ands	r3, r2
 8007b40:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	4a2d      	ldr	r2, [pc, #180]	; (8007bfc <TIM_OC2_SetConfig+0xec>)
 8007b46:	4013      	ands	r3, r2
 8007b48:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	021b      	lsls	r3, r3, #8
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2220      	movs	r2, #32
 8007b5a:	4393      	bics	r3, r2
 8007b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	011b      	lsls	r3, r3, #4
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a24      	ldr	r2, [pc, #144]	; (8007c00 <TIM_OC2_SetConfig+0xf0>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d10d      	bne.n	8007b8e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2280      	movs	r2, #128	; 0x80
 8007b76:	4393      	bics	r3, r2
 8007b78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	011b      	lsls	r3, r3, #4
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	2240      	movs	r2, #64	; 0x40
 8007b8a:	4393      	bics	r3, r2
 8007b8c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a1b      	ldr	r2, [pc, #108]	; (8007c00 <TIM_OC2_SetConfig+0xf0>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d00b      	beq.n	8007bae <TIM_OC2_SetConfig+0x9e>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a1a      	ldr	r2, [pc, #104]	; (8007c04 <TIM_OC2_SetConfig+0xf4>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d007      	beq.n	8007bae <TIM_OC2_SetConfig+0x9e>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a19      	ldr	r2, [pc, #100]	; (8007c08 <TIM_OC2_SetConfig+0xf8>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d003      	beq.n	8007bae <TIM_OC2_SetConfig+0x9e>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a18      	ldr	r2, [pc, #96]	; (8007c0c <TIM_OC2_SetConfig+0xfc>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d113      	bne.n	8007bd6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	4a17      	ldr	r2, [pc, #92]	; (8007c10 <TIM_OC2_SetConfig+0x100>)
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	4a16      	ldr	r2, [pc, #88]	; (8007c14 <TIM_OC2_SetConfig+0x104>)
 8007bba:	4013      	ands	r3, r2
 8007bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	621a      	str	r2, [r3, #32]
}
 8007bf0:	46c0      	nop			; (mov r8, r8)
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	b006      	add	sp, #24
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	feff8fff 	.word	0xfeff8fff
 8007bfc:	fffffcff 	.word	0xfffffcff
 8007c00:	40012c00 	.word	0x40012c00
 8007c04:	40014000 	.word	0x40014000
 8007c08:	40014400 	.word	0x40014400
 8007c0c:	40014800 	.word	0x40014800
 8007c10:	fffffbff 	.word	0xfffffbff
 8007c14:	fffff7ff 	.word	0xfffff7ff

08007c18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	4a35      	ldr	r2, [pc, #212]	; (8007cfc <TIM_OC3_SetConfig+0xe4>)
 8007c28:	401a      	ands	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	4a2f      	ldr	r2, [pc, #188]	; (8007d00 <TIM_OC3_SetConfig+0xe8>)
 8007c44:	4013      	ands	r3, r2
 8007c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2203      	movs	r2, #3
 8007c4c:	4393      	bics	r3, r2
 8007c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	4a29      	ldr	r2, [pc, #164]	; (8007d04 <TIM_OC3_SetConfig+0xec>)
 8007c5e:	4013      	ands	r3, r2
 8007c60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	021b      	lsls	r3, r3, #8
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a25      	ldr	r2, [pc, #148]	; (8007d08 <TIM_OC3_SetConfig+0xf0>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d10d      	bne.n	8007c92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	4a24      	ldr	r2, [pc, #144]	; (8007d0c <TIM_OC3_SetConfig+0xf4>)
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	021b      	lsls	r3, r3, #8
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	4a20      	ldr	r2, [pc, #128]	; (8007d10 <TIM_OC3_SetConfig+0xf8>)
 8007c8e:	4013      	ands	r3, r2
 8007c90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a1c      	ldr	r2, [pc, #112]	; (8007d08 <TIM_OC3_SetConfig+0xf0>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d00b      	beq.n	8007cb2 <TIM_OC3_SetConfig+0x9a>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a1d      	ldr	r2, [pc, #116]	; (8007d14 <TIM_OC3_SetConfig+0xfc>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d007      	beq.n	8007cb2 <TIM_OC3_SetConfig+0x9a>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a1c      	ldr	r2, [pc, #112]	; (8007d18 <TIM_OC3_SetConfig+0x100>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d003      	beq.n	8007cb2 <TIM_OC3_SetConfig+0x9a>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a1b      	ldr	r2, [pc, #108]	; (8007d1c <TIM_OC3_SetConfig+0x104>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d113      	bne.n	8007cda <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	4a1a      	ldr	r2, [pc, #104]	; (8007d20 <TIM_OC3_SetConfig+0x108>)
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	4a19      	ldr	r2, [pc, #100]	; (8007d24 <TIM_OC3_SetConfig+0x10c>)
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	011b      	lsls	r3, r3, #4
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	621a      	str	r2, [r3, #32]
}
 8007cf4:	46c0      	nop			; (mov r8, r8)
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	b006      	add	sp, #24
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	fffffeff 	.word	0xfffffeff
 8007d00:	fffeff8f 	.word	0xfffeff8f
 8007d04:	fffffdff 	.word	0xfffffdff
 8007d08:	40012c00 	.word	0x40012c00
 8007d0c:	fffff7ff 	.word	0xfffff7ff
 8007d10:	fffffbff 	.word	0xfffffbff
 8007d14:	40014000 	.word	0x40014000
 8007d18:	40014400 	.word	0x40014400
 8007d1c:	40014800 	.word	0x40014800
 8007d20:	ffffefff 	.word	0xffffefff
 8007d24:	ffffdfff 	.word	0xffffdfff

08007d28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	4a28      	ldr	r2, [pc, #160]	; (8007dd8 <TIM_OC4_SetConfig+0xb0>)
 8007d38:	401a      	ands	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	69db      	ldr	r3, [r3, #28]
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	4a22      	ldr	r2, [pc, #136]	; (8007ddc <TIM_OC4_SetConfig+0xb4>)
 8007d54:	4013      	ands	r3, r2
 8007d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4a21      	ldr	r2, [pc, #132]	; (8007de0 <TIM_OC4_SetConfig+0xb8>)
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	021b      	lsls	r3, r3, #8
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	4a1d      	ldr	r2, [pc, #116]	; (8007de4 <TIM_OC4_SetConfig+0xbc>)
 8007d70:	4013      	ands	r3, r2
 8007d72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	031b      	lsls	r3, r3, #12
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a19      	ldr	r2, [pc, #100]	; (8007de8 <TIM_OC4_SetConfig+0xc0>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d00b      	beq.n	8007da0 <TIM_OC4_SetConfig+0x78>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a18      	ldr	r2, [pc, #96]	; (8007dec <TIM_OC4_SetConfig+0xc4>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d007      	beq.n	8007da0 <TIM_OC4_SetConfig+0x78>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a17      	ldr	r2, [pc, #92]	; (8007df0 <TIM_OC4_SetConfig+0xc8>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d003      	beq.n	8007da0 <TIM_OC4_SetConfig+0x78>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a16      	ldr	r2, [pc, #88]	; (8007df4 <TIM_OC4_SetConfig+0xcc>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d109      	bne.n	8007db4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	4a15      	ldr	r2, [pc, #84]	; (8007df8 <TIM_OC4_SetConfig+0xd0>)
 8007da4:	4013      	ands	r3, r2
 8007da6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	695b      	ldr	r3, [r3, #20]
 8007dac:	019b      	lsls	r3, r3, #6
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	621a      	str	r2, [r3, #32]
}
 8007dce:	46c0      	nop			; (mov r8, r8)
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	b006      	add	sp, #24
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	46c0      	nop			; (mov r8, r8)
 8007dd8:	ffffefff 	.word	0xffffefff
 8007ddc:	feff8fff 	.word	0xfeff8fff
 8007de0:	fffffcff 	.word	0xfffffcff
 8007de4:	ffffdfff 	.word	0xffffdfff
 8007de8:	40012c00 	.word	0x40012c00
 8007dec:	40014000 	.word	0x40014000
 8007df0:	40014400 	.word	0x40014400
 8007df4:	40014800 	.word	0x40014800
 8007df8:	ffffbfff 	.word	0xffffbfff

08007dfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	4a25      	ldr	r2, [pc, #148]	; (8007ea0 <TIM_OC5_SetConfig+0xa4>)
 8007e0c:	401a      	ands	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4a1f      	ldr	r2, [pc, #124]	; (8007ea4 <TIM_OC5_SetConfig+0xa8>)
 8007e28:	4013      	ands	r3, r2
 8007e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	4a1b      	ldr	r2, [pc, #108]	; (8007ea8 <TIM_OC5_SetConfig+0xac>)
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	041b      	lsls	r3, r3, #16
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a17      	ldr	r2, [pc, #92]	; (8007eac <TIM_OC5_SetConfig+0xb0>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d00b      	beq.n	8007e6a <TIM_OC5_SetConfig+0x6e>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a16      	ldr	r2, [pc, #88]	; (8007eb0 <TIM_OC5_SetConfig+0xb4>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d007      	beq.n	8007e6a <TIM_OC5_SetConfig+0x6e>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a15      	ldr	r2, [pc, #84]	; (8007eb4 <TIM_OC5_SetConfig+0xb8>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d003      	beq.n	8007e6a <TIM_OC5_SetConfig+0x6e>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a14      	ldr	r2, [pc, #80]	; (8007eb8 <TIM_OC5_SetConfig+0xbc>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d109      	bne.n	8007e7e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	4a0c      	ldr	r2, [pc, #48]	; (8007ea0 <TIM_OC5_SetConfig+0xa4>)
 8007e6e:	4013      	ands	r3, r2
 8007e70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	021b      	lsls	r3, r3, #8
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	621a      	str	r2, [r3, #32]
}
 8007e98:	46c0      	nop			; (mov r8, r8)
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	b006      	add	sp, #24
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	fffeffff 	.word	0xfffeffff
 8007ea4:	fffeff8f 	.word	0xfffeff8f
 8007ea8:	fffdffff 	.word	0xfffdffff
 8007eac:	40012c00 	.word	0x40012c00
 8007eb0:	40014000 	.word	0x40014000
 8007eb4:	40014400 	.word	0x40014400
 8007eb8:	40014800 	.word	0x40014800

08007ebc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	4a26      	ldr	r2, [pc, #152]	; (8007f64 <TIM_OC6_SetConfig+0xa8>)
 8007ecc:	401a      	ands	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	4a20      	ldr	r2, [pc, #128]	; (8007f68 <TIM_OC6_SetConfig+0xac>)
 8007ee8:	4013      	ands	r3, r2
 8007eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	021b      	lsls	r3, r3, #8
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	4a1c      	ldr	r2, [pc, #112]	; (8007f6c <TIM_OC6_SetConfig+0xb0>)
 8007efc:	4013      	ands	r3, r2
 8007efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	051b      	lsls	r3, r3, #20
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a18      	ldr	r2, [pc, #96]	; (8007f70 <TIM_OC6_SetConfig+0xb4>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d00b      	beq.n	8007f2c <TIM_OC6_SetConfig+0x70>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a17      	ldr	r2, [pc, #92]	; (8007f74 <TIM_OC6_SetConfig+0xb8>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d007      	beq.n	8007f2c <TIM_OC6_SetConfig+0x70>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a16      	ldr	r2, [pc, #88]	; (8007f78 <TIM_OC6_SetConfig+0xbc>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d003      	beq.n	8007f2c <TIM_OC6_SetConfig+0x70>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a15      	ldr	r2, [pc, #84]	; (8007f7c <TIM_OC6_SetConfig+0xc0>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d109      	bne.n	8007f40 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	4a14      	ldr	r2, [pc, #80]	; (8007f80 <TIM_OC6_SetConfig+0xc4>)
 8007f30:	4013      	ands	r3, r2
 8007f32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	695b      	ldr	r3, [r3, #20]
 8007f38:	029b      	lsls	r3, r3, #10
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	621a      	str	r2, [r3, #32]
}
 8007f5a:	46c0      	nop			; (mov r8, r8)
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	b006      	add	sp, #24
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	46c0      	nop			; (mov r8, r8)
 8007f64:	ffefffff 	.word	0xffefffff
 8007f68:	feff8fff 	.word	0xfeff8fff
 8007f6c:	ffdfffff 	.word	0xffdfffff
 8007f70:	40012c00 	.word	0x40012c00
 8007f74:	40014000 	.word	0x40014000
 8007f78:	40014400 	.word	0x40014400
 8007f7c:	40014800 	.word	0x40014800
 8007f80:	fffbffff 	.word	0xfffbffff

08007f84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6a1b      	ldr	r3, [r3, #32]
 8007f94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	4393      	bics	r3, r2
 8007f9e:	001a      	movs	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	22f0      	movs	r2, #240	; 0xf0
 8007fae:	4393      	bics	r3, r2
 8007fb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	011b      	lsls	r3, r3, #4
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	220a      	movs	r2, #10
 8007fc0:	4393      	bics	r3, r2
 8007fc2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fc4:	697a      	ldr	r2, [r7, #20]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	693a      	ldr	r2, [r7, #16]
 8007fd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	621a      	str	r2, [r3, #32]
}
 8007fd8:	46c0      	nop			; (mov r8, r8)
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	b006      	add	sp, #24
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6a1b      	ldr	r3, [r3, #32]
 8007ff0:	2210      	movs	r2, #16
 8007ff2:	4393      	bics	r3, r2
 8007ff4:	001a      	movs	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6a1b      	ldr	r3, [r3, #32]
 8008004:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	4a0d      	ldr	r2, [pc, #52]	; (8008040 <TIM_TI2_ConfigInputStage+0x60>)
 800800a:	4013      	ands	r3, r2
 800800c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	031b      	lsls	r3, r3, #12
 8008012:	697a      	ldr	r2, [r7, #20]
 8008014:	4313      	orrs	r3, r2
 8008016:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	22a0      	movs	r2, #160	; 0xa0
 800801c:	4393      	bics	r3, r2
 800801e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	011b      	lsls	r3, r3, #4
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	4313      	orrs	r3, r2
 8008028:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	621a      	str	r2, [r3, #32]
}
 8008036:	46c0      	nop			; (mov r8, r8)
 8008038:	46bd      	mov	sp, r7
 800803a:	b006      	add	sp, #24
 800803c:	bd80      	pop	{r7, pc}
 800803e:	46c0      	nop			; (mov r8, r8)
 8008040:	ffff0fff 	.word	0xffff0fff

08008044 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4a08      	ldr	r2, [pc, #32]	; (8008078 <TIM_ITRx_SetConfig+0x34>)
 8008058:	4013      	ands	r3, r2
 800805a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800805c:	683a      	ldr	r2, [r7, #0]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	4313      	orrs	r3, r2
 8008062:	2207      	movs	r2, #7
 8008064:	4313      	orrs	r3, r2
 8008066:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	609a      	str	r2, [r3, #8]
}
 800806e:	46c0      	nop			; (mov r8, r8)
 8008070:	46bd      	mov	sp, r7
 8008072:	b004      	add	sp, #16
 8008074:	bd80      	pop	{r7, pc}
 8008076:	46c0      	nop			; (mov r8, r8)
 8008078:	ffcfff8f 	.word	0xffcfff8f

0800807c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
 8008088:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	4a09      	ldr	r2, [pc, #36]	; (80080b8 <TIM_ETR_SetConfig+0x3c>)
 8008094:	4013      	ands	r3, r2
 8008096:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	021a      	lsls	r2, r3, #8
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	431a      	orrs	r2, r3
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	609a      	str	r2, [r3, #8]
}
 80080b0:	46c0      	nop			; (mov r8, r8)
 80080b2:	46bd      	mov	sp, r7
 80080b4:	b006      	add	sp, #24
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	ffff00ff 	.word	0xffff00ff

080080bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	221f      	movs	r2, #31
 80080cc:	4013      	ands	r3, r2
 80080ce:	2201      	movs	r2, #1
 80080d0:	409a      	lsls	r2, r3
 80080d2:	0013      	movs	r3, r2
 80080d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6a1b      	ldr	r3, [r3, #32]
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	43d2      	mvns	r2, r2
 80080de:	401a      	ands	r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6a1a      	ldr	r2, [r3, #32]
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	211f      	movs	r1, #31
 80080ec:	400b      	ands	r3, r1
 80080ee:	6879      	ldr	r1, [r7, #4]
 80080f0:	4099      	lsls	r1, r3
 80080f2:	000b      	movs	r3, r1
 80080f4:	431a      	orrs	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	621a      	str	r2, [r3, #32]
}
 80080fa:	46c0      	nop			; (mov r8, r8)
 80080fc:	46bd      	mov	sp, r7
 80080fe:	b006      	add	sp, #24
 8008100:	bd80      	pop	{r7, pc}
	...

08008104 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	223c      	movs	r2, #60	; 0x3c
 8008112:	5c9b      	ldrb	r3, [r3, r2]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d101      	bne.n	800811c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008118:	2302      	movs	r3, #2
 800811a:	e04f      	b.n	80081bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	223c      	movs	r2, #60	; 0x3c
 8008120:	2101      	movs	r1, #1
 8008122:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	223d      	movs	r2, #61	; 0x3d
 8008128:	2102      	movs	r1, #2
 800812a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a20      	ldr	r2, [pc, #128]	; (80081c4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d108      	bne.n	8008158 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	4a1f      	ldr	r2, [pc, #124]	; (80081c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800814a:	4013      	ands	r3, r2
 800814c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	4313      	orrs	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2270      	movs	r2, #112	; 0x70
 800815c:	4393      	bics	r3, r2
 800815e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	4313      	orrs	r3, r2
 8008168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a13      	ldr	r2, [pc, #76]	; (80081c4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d009      	beq.n	8008190 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a12      	ldr	r2, [pc, #72]	; (80081cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d004      	beq.n	8008190 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a11      	ldr	r2, [pc, #68]	; (80081d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d10c      	bne.n	80081aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	2280      	movs	r2, #128	; 0x80
 8008194:	4393      	bics	r3, r2
 8008196:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	4313      	orrs	r3, r2
 80081a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	223d      	movs	r2, #61	; 0x3d
 80081ae:	2101      	movs	r1, #1
 80081b0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	223c      	movs	r2, #60	; 0x3c
 80081b6:	2100      	movs	r1, #0
 80081b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	0018      	movs	r0, r3
 80081be:	46bd      	mov	sp, r7
 80081c0:	b004      	add	sp, #16
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	40012c00 	.word	0x40012c00
 80081c8:	ff0fffff 	.word	0xff0fffff
 80081cc:	40000400 	.word	0x40000400
 80081d0:	40014000 	.word	0x40014000

080081d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80081de:	2300      	movs	r3, #0
 80081e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	223c      	movs	r2, #60	; 0x3c
 80081e6:	5c9b      	ldrb	r3, [r3, r2]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d101      	bne.n	80081f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80081ec:	2302      	movs	r3, #2
 80081ee:	e079      	b.n	80082e4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	223c      	movs	r2, #60	; 0x3c
 80081f4:	2101      	movs	r1, #1
 80081f6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	22ff      	movs	r2, #255	; 0xff
 80081fc:	4393      	bics	r3, r2
 80081fe:	001a      	movs	r2, r3
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	4313      	orrs	r3, r2
 8008206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4a38      	ldr	r2, [pc, #224]	; (80082ec <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800820c:	401a      	ands	r2, r3
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	4313      	orrs	r3, r2
 8008214:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	4a35      	ldr	r2, [pc, #212]	; (80082f0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800821a:	401a      	ands	r2, r3
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	4313      	orrs	r3, r2
 8008222:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	4a33      	ldr	r2, [pc, #204]	; (80082f4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008228:	401a      	ands	r2, r3
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4313      	orrs	r3, r2
 8008230:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	4a30      	ldr	r2, [pc, #192]	; (80082f8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008236:	401a      	ands	r2, r3
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	4313      	orrs	r3, r2
 800823e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4a2e      	ldr	r2, [pc, #184]	; (80082fc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008244:	401a      	ands	r2, r3
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	4313      	orrs	r3, r2
 800824c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	4a2b      	ldr	r2, [pc, #172]	; (8008300 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008252:	401a      	ands	r2, r3
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008258:	4313      	orrs	r3, r2
 800825a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4a29      	ldr	r2, [pc, #164]	; (8008304 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008260:	401a      	ands	r2, r3
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	041b      	lsls	r3, r3, #16
 8008268:	4313      	orrs	r3, r2
 800826a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a25      	ldr	r2, [pc, #148]	; (8008308 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d106      	bne.n	8008284 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	4a24      	ldr	r2, [pc, #144]	; (800830c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800827a:	401a      	ands	r2, r3
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	69db      	ldr	r3, [r3, #28]
 8008280:	4313      	orrs	r3, r2
 8008282:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a1f      	ldr	r2, [pc, #124]	; (8008308 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d121      	bne.n	80082d2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	4a1f      	ldr	r2, [pc, #124]	; (8008310 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008292:	401a      	ands	r2, r3
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008298:	051b      	lsls	r3, r3, #20
 800829a:	4313      	orrs	r3, r2
 800829c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	4a1c      	ldr	r2, [pc, #112]	; (8008314 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80082a2:	401a      	ands	r2, r3
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	6a1b      	ldr	r3, [r3, #32]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	4a1a      	ldr	r2, [pc, #104]	; (8008318 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80082b0:	401a      	ands	r2, r3
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a12      	ldr	r2, [pc, #72]	; (8008308 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d106      	bne.n	80082d2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	4a15      	ldr	r2, [pc, #84]	; (800831c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80082c8:	401a      	ands	r2, r3
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	223c      	movs	r2, #60	; 0x3c
 80082de:	2100      	movs	r1, #0
 80082e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	0018      	movs	r0, r3
 80082e6:	46bd      	mov	sp, r7
 80082e8:	b004      	add	sp, #16
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	fffffcff 	.word	0xfffffcff
 80082f0:	fffffbff 	.word	0xfffffbff
 80082f4:	fffff7ff 	.word	0xfffff7ff
 80082f8:	ffffefff 	.word	0xffffefff
 80082fc:	ffffdfff 	.word	0xffffdfff
 8008300:	ffffbfff 	.word	0xffffbfff
 8008304:	fff0ffff 	.word	0xfff0ffff
 8008308:	40012c00 	.word	0x40012c00
 800830c:	efffffff 	.word	0xefffffff
 8008310:	ff0fffff 	.word	0xff0fffff
 8008314:	feffffff 	.word	0xfeffffff
 8008318:	fdffffff 	.word	0xfdffffff
 800831c:	dfffffff 	.word	0xdfffffff

08008320 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008328:	46c0      	nop			; (mov r8, r8)
 800832a:	46bd      	mov	sp, r7
 800832c:	b002      	add	sp, #8
 800832e:	bd80      	pop	{r7, pc}

08008330 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008338:	46c0      	nop			; (mov r8, r8)
 800833a:	46bd      	mov	sp, r7
 800833c:	b002      	add	sp, #8
 800833e:	bd80      	pop	{r7, pc}

08008340 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008348:	46c0      	nop			; (mov r8, r8)
 800834a:	46bd      	mov	sp, r7
 800834c:	b002      	add	sp, #8
 800834e:	bd80      	pop	{r7, pc}

08008350 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e046      	b.n	80083f0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2288      	movs	r2, #136	; 0x88
 8008366:	589b      	ldr	r3, [r3, r2]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d107      	bne.n	800837c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2284      	movs	r2, #132	; 0x84
 8008370:	2100      	movs	r1, #0
 8008372:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	0018      	movs	r0, r3
 8008378:	f7fc fe42 	bl	8005000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2288      	movs	r2, #136	; 0x88
 8008380:	2124      	movs	r1, #36	; 0x24
 8008382:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2101      	movs	r1, #1
 8008390:	438a      	bics	r2, r1
 8008392:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	0018      	movs	r0, r3
 8008398:	f000 fd08 	bl	8008dac <UART_SetConfig>
 800839c:	0003      	movs	r3, r0
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d101      	bne.n	80083a6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e024      	b.n	80083f0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	0018      	movs	r0, r3
 80083b2:	f000 fe9f 	bl	80090f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	685a      	ldr	r2, [r3, #4]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	490d      	ldr	r1, [pc, #52]	; (80083f8 <HAL_UART_Init+0xa8>)
 80083c2:	400a      	ands	r2, r1
 80083c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	689a      	ldr	r2, [r3, #8]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	212a      	movs	r1, #42	; 0x2a
 80083d2:	438a      	bics	r2, r1
 80083d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2101      	movs	r1, #1
 80083e2:	430a      	orrs	r2, r1
 80083e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	0018      	movs	r0, r3
 80083ea:	f000 ff37 	bl	800925c <UART_CheckIdleState>
 80083ee:	0003      	movs	r3, r0
}
 80083f0:	0018      	movs	r0, r3
 80083f2:	46bd      	mov	sp, r7
 80083f4:	b002      	add	sp, #8
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	ffffb7ff 	.word	0xffffb7ff

080083fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b08a      	sub	sp, #40	; 0x28
 8008400:	af02      	add	r7, sp, #8
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	603b      	str	r3, [r7, #0]
 8008408:	1dbb      	adds	r3, r7, #6
 800840a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2288      	movs	r2, #136	; 0x88
 8008410:	589b      	ldr	r3, [r3, r2]
 8008412:	2b20      	cmp	r3, #32
 8008414:	d000      	beq.n	8008418 <HAL_UART_Transmit+0x1c>
 8008416:	e088      	b.n	800852a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d003      	beq.n	8008426 <HAL_UART_Transmit+0x2a>
 800841e:	1dbb      	adds	r3, r7, #6
 8008420:	881b      	ldrh	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e080      	b.n	800852c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	689a      	ldr	r2, [r3, #8]
 800842e:	2380      	movs	r3, #128	; 0x80
 8008430:	015b      	lsls	r3, r3, #5
 8008432:	429a      	cmp	r2, r3
 8008434:	d109      	bne.n	800844a <HAL_UART_Transmit+0x4e>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d105      	bne.n	800844a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	2201      	movs	r2, #1
 8008442:	4013      	ands	r3, r2
 8008444:	d001      	beq.n	800844a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	e070      	b.n	800852c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2290      	movs	r2, #144	; 0x90
 800844e:	2100      	movs	r1, #0
 8008450:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2288      	movs	r2, #136	; 0x88
 8008456:	2121      	movs	r1, #33	; 0x21
 8008458:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800845a:	f7fc ff2b 	bl	80052b4 <HAL_GetTick>
 800845e:	0003      	movs	r3, r0
 8008460:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	1dba      	adds	r2, r7, #6
 8008466:	2154      	movs	r1, #84	; 0x54
 8008468:	8812      	ldrh	r2, [r2, #0]
 800846a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	1dba      	adds	r2, r7, #6
 8008470:	2156      	movs	r1, #86	; 0x56
 8008472:	8812      	ldrh	r2, [r2, #0]
 8008474:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	689a      	ldr	r2, [r3, #8]
 800847a:	2380      	movs	r3, #128	; 0x80
 800847c:	015b      	lsls	r3, r3, #5
 800847e:	429a      	cmp	r2, r3
 8008480:	d108      	bne.n	8008494 <HAL_UART_Transmit+0x98>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d104      	bne.n	8008494 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800848a:	2300      	movs	r3, #0
 800848c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	61bb      	str	r3, [r7, #24]
 8008492:	e003      	b.n	800849c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008498:	2300      	movs	r3, #0
 800849a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800849c:	e02c      	b.n	80084f8 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	0013      	movs	r3, r2
 80084a8:	2200      	movs	r2, #0
 80084aa:	2180      	movs	r1, #128	; 0x80
 80084ac:	f000 ff24 	bl	80092f8 <UART_WaitOnFlagUntilTimeout>
 80084b0:	1e03      	subs	r3, r0, #0
 80084b2:	d001      	beq.n	80084b8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e039      	b.n	800852c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10b      	bne.n	80084d6 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	881b      	ldrh	r3, [r3, #0]
 80084c2:	001a      	movs	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	05d2      	lsls	r2, r2, #23
 80084ca:	0dd2      	lsrs	r2, r2, #23
 80084cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	3302      	adds	r3, #2
 80084d2:	61bb      	str	r3, [r7, #24]
 80084d4:	e007      	b.n	80084e6 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	781a      	ldrb	r2, [r3, #0]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	3301      	adds	r3, #1
 80084e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2256      	movs	r2, #86	; 0x56
 80084ea:	5a9b      	ldrh	r3, [r3, r2]
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	3b01      	subs	r3, #1
 80084f0:	b299      	uxth	r1, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2256      	movs	r2, #86	; 0x56
 80084f6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2256      	movs	r2, #86	; 0x56
 80084fc:	5a9b      	ldrh	r3, [r3, r2]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1cc      	bne.n	800849e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	0013      	movs	r3, r2
 800850e:	2200      	movs	r2, #0
 8008510:	2140      	movs	r1, #64	; 0x40
 8008512:	f000 fef1 	bl	80092f8 <UART_WaitOnFlagUntilTimeout>
 8008516:	1e03      	subs	r3, r0, #0
 8008518:	d001      	beq.n	800851e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e006      	b.n	800852c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2288      	movs	r2, #136	; 0x88
 8008522:	2120      	movs	r1, #32
 8008524:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	e000      	b.n	800852c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800852a:	2302      	movs	r3, #2
  }
}
 800852c:	0018      	movs	r0, r3
 800852e:	46bd      	mov	sp, r7
 8008530:	b008      	add	sp, #32
 8008532:	bd80      	pop	{r7, pc}

08008534 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b088      	sub	sp, #32
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	1dbb      	adds	r3, r7, #6
 8008540:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2288      	movs	r2, #136	; 0x88
 8008546:	589b      	ldr	r3, [r3, r2]
 8008548:	2b20      	cmp	r3, #32
 800854a:	d000      	beq.n	800854e <HAL_UART_Transmit_DMA+0x1a>
 800854c:	e079      	b.n	8008642 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d003      	beq.n	800855c <HAL_UART_Transmit_DMA+0x28>
 8008554:	1dbb      	adds	r3, r7, #6
 8008556:	881b      	ldrh	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d101      	bne.n	8008560 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e071      	b.n	8008644 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	689a      	ldr	r2, [r3, #8]
 8008564:	2380      	movs	r3, #128	; 0x80
 8008566:	015b      	lsls	r3, r3, #5
 8008568:	429a      	cmp	r2, r3
 800856a:	d109      	bne.n	8008580 <HAL_UART_Transmit_DMA+0x4c>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d105      	bne.n	8008580 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2201      	movs	r2, #1
 8008578:	4013      	ands	r3, r2
 800857a:	d001      	beq.n	8008580 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e061      	b.n	8008644 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	1dba      	adds	r2, r7, #6
 800858a:	2154      	movs	r1, #84	; 0x54
 800858c:	8812      	ldrh	r2, [r2, #0]
 800858e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	1dba      	adds	r2, r7, #6
 8008594:	2156      	movs	r1, #86	; 0x56
 8008596:	8812      	ldrh	r2, [r2, #0]
 8008598:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2290      	movs	r2, #144	; 0x90
 800859e:	2100      	movs	r1, #0
 80085a0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2288      	movs	r2, #136	; 0x88
 80085a6:	2121      	movs	r1, #33	; 0x21
 80085a8:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d028      	beq.n	8008604 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085b6:	4a25      	ldr	r2, [pc, #148]	; (800864c <HAL_UART_Transmit_DMA+0x118>)
 80085b8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085be:	4a24      	ldr	r2, [pc, #144]	; (8008650 <HAL_UART_Transmit_DMA+0x11c>)
 80085c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085c6:	4a23      	ldr	r2, [pc, #140]	; (8008654 <HAL_UART_Transmit_DMA+0x120>)
 80085c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085ce:	2200      	movs	r2, #0
 80085d0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085da:	0019      	movs	r1, r3
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3328      	adds	r3, #40	; 0x28
 80085e2:	001a      	movs	r2, r3
 80085e4:	1dbb      	adds	r3, r7, #6
 80085e6:	881b      	ldrh	r3, [r3, #0]
 80085e8:	f7fc ffa6 	bl	8005538 <HAL_DMA_Start_IT>
 80085ec:	1e03      	subs	r3, r0, #0
 80085ee:	d009      	beq.n	8008604 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2290      	movs	r2, #144	; 0x90
 80085f4:	2110      	movs	r1, #16
 80085f6:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2288      	movs	r2, #136	; 0x88
 80085fc:	2120      	movs	r1, #32
 80085fe:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e01f      	b.n	8008644 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2240      	movs	r2, #64	; 0x40
 800860a:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800860c:	f3ef 8310 	mrs	r3, PRIMASK
 8008610:	613b      	str	r3, [r7, #16]
  return(result);
 8008612:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008614:	61fb      	str	r3, [r7, #28]
 8008616:	2301      	movs	r3, #1
 8008618:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	f383 8810 	msr	PRIMASK, r3
}
 8008620:	46c0      	nop			; (mov r8, r8)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	689a      	ldr	r2, [r3, #8]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2180      	movs	r1, #128	; 0x80
 800862e:	430a      	orrs	r2, r1
 8008630:	609a      	str	r2, [r3, #8]
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	f383 8810 	msr	PRIMASK, r3
}
 800863c:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	e000      	b.n	8008644 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8008642:	2302      	movs	r3, #2
  }
}
 8008644:	0018      	movs	r0, r3
 8008646:	46bd      	mov	sp, r7
 8008648:	b008      	add	sp, #32
 800864a:	bd80      	pop	{r7, pc}
 800864c:	08009721 	.word	0x08009721
 8008650:	080097b9 	.word	0x080097b9
 8008654:	0800994b 	.word	0x0800994b

08008658 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b088      	sub	sp, #32
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	1dbb      	adds	r3, r7, #6
 8008664:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	228c      	movs	r2, #140	; 0x8c
 800866a:	589b      	ldr	r3, [r3, r2]
 800866c:	2b20      	cmp	r3, #32
 800866e:	d145      	bne.n	80086fc <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d003      	beq.n	800867e <HAL_UART_Receive_DMA+0x26>
 8008676:	1dbb      	adds	r3, r7, #6
 8008678:	881b      	ldrh	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e03d      	b.n	80086fe <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	689a      	ldr	r2, [r3, #8]
 8008686:	2380      	movs	r3, #128	; 0x80
 8008688:	015b      	lsls	r3, r3, #5
 800868a:	429a      	cmp	r2, r3
 800868c:	d109      	bne.n	80086a2 <HAL_UART_Receive_DMA+0x4a>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d105      	bne.n	80086a2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	2201      	movs	r2, #1
 800869a:	4013      	ands	r3, r2
 800869c:	d001      	beq.n	80086a2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e02d      	b.n	80086fe <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	685a      	ldr	r2, [r3, #4]
 80086ae:	2380      	movs	r3, #128	; 0x80
 80086b0:	041b      	lsls	r3, r3, #16
 80086b2:	4013      	ands	r3, r2
 80086b4:	d019      	beq.n	80086ea <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086b6:	f3ef 8310 	mrs	r3, PRIMASK
 80086ba:	613b      	str	r3, [r7, #16]
  return(result);
 80086bc:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80086be:	61fb      	str	r3, [r7, #28]
 80086c0:	2301      	movs	r3, #1
 80086c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	f383 8810 	msr	PRIMASK, r3
}
 80086ca:	46c0      	nop			; (mov r8, r8)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2180      	movs	r1, #128	; 0x80
 80086d8:	04c9      	lsls	r1, r1, #19
 80086da:	430a      	orrs	r2, r1
 80086dc:	601a      	str	r2, [r3, #0]
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	f383 8810 	msr	PRIMASK, r3
}
 80086e8:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80086ea:	1dbb      	adds	r3, r7, #6
 80086ec:	881a      	ldrh	r2, [r3, #0]
 80086ee:	68b9      	ldr	r1, [r7, #8]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	0018      	movs	r0, r3
 80086f4:	f000 fec8 	bl	8009488 <UART_Start_Receive_DMA>
 80086f8:	0003      	movs	r3, r0
 80086fa:	e000      	b.n	80086fe <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80086fc:	2302      	movs	r3, #2
  }
}
 80086fe:	0018      	movs	r0, r3
 8008700:	46bd      	mov	sp, r7
 8008702:	b008      	add	sp, #32
 8008704:	bd80      	pop	{r7, pc}
	...

08008708 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008708:	b5b0      	push	{r4, r5, r7, lr}
 800870a:	b0aa      	sub	sp, #168	; 0xa8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	69db      	ldr	r3, [r3, #28]
 8008716:	22a4      	movs	r2, #164	; 0xa4
 8008718:	18b9      	adds	r1, r7, r2
 800871a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	20a0      	movs	r0, #160	; 0xa0
 8008724:	1839      	adds	r1, r7, r0
 8008726:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	249c      	movs	r4, #156	; 0x9c
 8008730:	1939      	adds	r1, r7, r4
 8008732:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008734:	0011      	movs	r1, r2
 8008736:	18bb      	adds	r3, r7, r2
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4aa2      	ldr	r2, [pc, #648]	; (80089c4 <HAL_UART_IRQHandler+0x2bc>)
 800873c:	4013      	ands	r3, r2
 800873e:	2298      	movs	r2, #152	; 0x98
 8008740:	18bd      	adds	r5, r7, r2
 8008742:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8008744:	18bb      	adds	r3, r7, r2
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d11a      	bne.n	8008782 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800874c:	187b      	adds	r3, r7, r1
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2220      	movs	r2, #32
 8008752:	4013      	ands	r3, r2
 8008754:	d015      	beq.n	8008782 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008756:	183b      	adds	r3, r7, r0
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2220      	movs	r2, #32
 800875c:	4013      	ands	r3, r2
 800875e:	d105      	bne.n	800876c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008760:	193b      	adds	r3, r7, r4
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	2380      	movs	r3, #128	; 0x80
 8008766:	055b      	lsls	r3, r3, #21
 8008768:	4013      	ands	r3, r2
 800876a:	d00a      	beq.n	8008782 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008770:	2b00      	cmp	r3, #0
 8008772:	d100      	bne.n	8008776 <HAL_UART_IRQHandler+0x6e>
 8008774:	e2dc      	b.n	8008d30 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	0010      	movs	r0, r2
 800877e:	4798      	blx	r3
      }
      return;
 8008780:	e2d6      	b.n	8008d30 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008782:	2398      	movs	r3, #152	; 0x98
 8008784:	18fb      	adds	r3, r7, r3
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d100      	bne.n	800878e <HAL_UART_IRQHandler+0x86>
 800878c:	e122      	b.n	80089d4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800878e:	239c      	movs	r3, #156	; 0x9c
 8008790:	18fb      	adds	r3, r7, r3
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a8c      	ldr	r2, [pc, #560]	; (80089c8 <HAL_UART_IRQHandler+0x2c0>)
 8008796:	4013      	ands	r3, r2
 8008798:	d106      	bne.n	80087a8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800879a:	23a0      	movs	r3, #160	; 0xa0
 800879c:	18fb      	adds	r3, r7, r3
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a8a      	ldr	r2, [pc, #552]	; (80089cc <HAL_UART_IRQHandler+0x2c4>)
 80087a2:	4013      	ands	r3, r2
 80087a4:	d100      	bne.n	80087a8 <HAL_UART_IRQHandler+0xa0>
 80087a6:	e115      	b.n	80089d4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80087a8:	23a4      	movs	r3, #164	; 0xa4
 80087aa:	18fb      	adds	r3, r7, r3
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2201      	movs	r2, #1
 80087b0:	4013      	ands	r3, r2
 80087b2:	d012      	beq.n	80087da <HAL_UART_IRQHandler+0xd2>
 80087b4:	23a0      	movs	r3, #160	; 0xa0
 80087b6:	18fb      	adds	r3, r7, r3
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	2380      	movs	r3, #128	; 0x80
 80087bc:	005b      	lsls	r3, r3, #1
 80087be:	4013      	ands	r3, r2
 80087c0:	d00b      	beq.n	80087da <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2201      	movs	r2, #1
 80087c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2290      	movs	r2, #144	; 0x90
 80087ce:	589b      	ldr	r3, [r3, r2]
 80087d0:	2201      	movs	r2, #1
 80087d2:	431a      	orrs	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2190      	movs	r1, #144	; 0x90
 80087d8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087da:	23a4      	movs	r3, #164	; 0xa4
 80087dc:	18fb      	adds	r3, r7, r3
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2202      	movs	r2, #2
 80087e2:	4013      	ands	r3, r2
 80087e4:	d011      	beq.n	800880a <HAL_UART_IRQHandler+0x102>
 80087e6:	239c      	movs	r3, #156	; 0x9c
 80087e8:	18fb      	adds	r3, r7, r3
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2201      	movs	r2, #1
 80087ee:	4013      	ands	r3, r2
 80087f0:	d00b      	beq.n	800880a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2202      	movs	r2, #2
 80087f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2290      	movs	r2, #144	; 0x90
 80087fe:	589b      	ldr	r3, [r3, r2]
 8008800:	2204      	movs	r2, #4
 8008802:	431a      	orrs	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2190      	movs	r1, #144	; 0x90
 8008808:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800880a:	23a4      	movs	r3, #164	; 0xa4
 800880c:	18fb      	adds	r3, r7, r3
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2204      	movs	r2, #4
 8008812:	4013      	ands	r3, r2
 8008814:	d011      	beq.n	800883a <HAL_UART_IRQHandler+0x132>
 8008816:	239c      	movs	r3, #156	; 0x9c
 8008818:	18fb      	adds	r3, r7, r3
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2201      	movs	r2, #1
 800881e:	4013      	ands	r3, r2
 8008820:	d00b      	beq.n	800883a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2204      	movs	r2, #4
 8008828:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2290      	movs	r2, #144	; 0x90
 800882e:	589b      	ldr	r3, [r3, r2]
 8008830:	2202      	movs	r2, #2
 8008832:	431a      	orrs	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2190      	movs	r1, #144	; 0x90
 8008838:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800883a:	23a4      	movs	r3, #164	; 0xa4
 800883c:	18fb      	adds	r3, r7, r3
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2208      	movs	r2, #8
 8008842:	4013      	ands	r3, r2
 8008844:	d017      	beq.n	8008876 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008846:	23a0      	movs	r3, #160	; 0xa0
 8008848:	18fb      	adds	r3, r7, r3
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2220      	movs	r2, #32
 800884e:	4013      	ands	r3, r2
 8008850:	d105      	bne.n	800885e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008852:	239c      	movs	r3, #156	; 0x9c
 8008854:	18fb      	adds	r3, r7, r3
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a5b      	ldr	r2, [pc, #364]	; (80089c8 <HAL_UART_IRQHandler+0x2c0>)
 800885a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800885c:	d00b      	beq.n	8008876 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2208      	movs	r2, #8
 8008864:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2290      	movs	r2, #144	; 0x90
 800886a:	589b      	ldr	r3, [r3, r2]
 800886c:	2208      	movs	r2, #8
 800886e:	431a      	orrs	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2190      	movs	r1, #144	; 0x90
 8008874:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008876:	23a4      	movs	r3, #164	; 0xa4
 8008878:	18fb      	adds	r3, r7, r3
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	2380      	movs	r3, #128	; 0x80
 800887e:	011b      	lsls	r3, r3, #4
 8008880:	4013      	ands	r3, r2
 8008882:	d013      	beq.n	80088ac <HAL_UART_IRQHandler+0x1a4>
 8008884:	23a0      	movs	r3, #160	; 0xa0
 8008886:	18fb      	adds	r3, r7, r3
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	2380      	movs	r3, #128	; 0x80
 800888c:	04db      	lsls	r3, r3, #19
 800888e:	4013      	ands	r3, r2
 8008890:	d00c      	beq.n	80088ac <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2280      	movs	r2, #128	; 0x80
 8008898:	0112      	lsls	r2, r2, #4
 800889a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2290      	movs	r2, #144	; 0x90
 80088a0:	589b      	ldr	r3, [r3, r2]
 80088a2:	2220      	movs	r2, #32
 80088a4:	431a      	orrs	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2190      	movs	r1, #144	; 0x90
 80088aa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2290      	movs	r2, #144	; 0x90
 80088b0:	589b      	ldr	r3, [r3, r2]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d100      	bne.n	80088b8 <HAL_UART_IRQHandler+0x1b0>
 80088b6:	e23d      	b.n	8008d34 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80088b8:	23a4      	movs	r3, #164	; 0xa4
 80088ba:	18fb      	adds	r3, r7, r3
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2220      	movs	r2, #32
 80088c0:	4013      	ands	r3, r2
 80088c2:	d015      	beq.n	80088f0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80088c4:	23a0      	movs	r3, #160	; 0xa0
 80088c6:	18fb      	adds	r3, r7, r3
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2220      	movs	r2, #32
 80088cc:	4013      	ands	r3, r2
 80088ce:	d106      	bne.n	80088de <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80088d0:	239c      	movs	r3, #156	; 0x9c
 80088d2:	18fb      	adds	r3, r7, r3
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	2380      	movs	r3, #128	; 0x80
 80088d8:	055b      	lsls	r3, r3, #21
 80088da:	4013      	ands	r3, r2
 80088dc:	d008      	beq.n	80088f0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d004      	beq.n	80088f0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	0010      	movs	r0, r2
 80088ee:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2290      	movs	r2, #144	; 0x90
 80088f4:	589b      	ldr	r3, [r3, r2]
 80088f6:	2194      	movs	r1, #148	; 0x94
 80088f8:	187a      	adds	r2, r7, r1
 80088fa:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	2240      	movs	r2, #64	; 0x40
 8008904:	4013      	ands	r3, r2
 8008906:	2b40      	cmp	r3, #64	; 0x40
 8008908:	d004      	beq.n	8008914 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800890a:	187b      	adds	r3, r7, r1
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2228      	movs	r2, #40	; 0x28
 8008910:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008912:	d04c      	beq.n	80089ae <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	0018      	movs	r0, r3
 8008918:	f000 fe9c 	bl	8009654 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	2240      	movs	r2, #64	; 0x40
 8008924:	4013      	ands	r3, r2
 8008926:	2b40      	cmp	r3, #64	; 0x40
 8008928:	d13c      	bne.n	80089a4 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800892a:	f3ef 8310 	mrs	r3, PRIMASK
 800892e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8008930:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008932:	2090      	movs	r0, #144	; 0x90
 8008934:	183a      	adds	r2, r7, r0
 8008936:	6013      	str	r3, [r2, #0]
 8008938:	2301      	movs	r3, #1
 800893a:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800893c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800893e:	f383 8810 	msr	PRIMASK, r3
}
 8008942:	46c0      	nop			; (mov r8, r8)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	689a      	ldr	r2, [r3, #8]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2140      	movs	r1, #64	; 0x40
 8008950:	438a      	bics	r2, r1
 8008952:	609a      	str	r2, [r3, #8]
 8008954:	183b      	adds	r3, r7, r0
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800895a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800895c:	f383 8810 	msr	PRIMASK, r3
}
 8008960:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2280      	movs	r2, #128	; 0x80
 8008966:	589b      	ldr	r3, [r3, r2]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d016      	beq.n	800899a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2280      	movs	r2, #128	; 0x80
 8008970:	589b      	ldr	r3, [r3, r2]
 8008972:	4a17      	ldr	r2, [pc, #92]	; (80089d0 <HAL_UART_IRQHandler+0x2c8>)
 8008974:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2280      	movs	r2, #128	; 0x80
 800897a:	589b      	ldr	r3, [r3, r2]
 800897c:	0018      	movs	r0, r3
 800897e:	f7fc fec3 	bl	8005708 <HAL_DMA_Abort_IT>
 8008982:	1e03      	subs	r3, r0, #0
 8008984:	d01c      	beq.n	80089c0 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2280      	movs	r2, #128	; 0x80
 800898a:	589b      	ldr	r3, [r3, r2]
 800898c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	2180      	movs	r1, #128	; 0x80
 8008992:	5852      	ldr	r2, [r2, r1]
 8008994:	0010      	movs	r0, r2
 8008996:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008998:	e012      	b.n	80089c0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	0018      	movs	r0, r3
 800899e:	f000 f9f1 	bl	8008d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089a2:	e00d      	b.n	80089c0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	0018      	movs	r0, r3
 80089a8:	f000 f9ec 	bl	8008d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089ac:	e008      	b.n	80089c0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	0018      	movs	r0, r3
 80089b2:	f000 f9e7 	bl	8008d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2290      	movs	r2, #144	; 0x90
 80089ba:	2100      	movs	r1, #0
 80089bc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80089be:	e1b9      	b.n	8008d34 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089c0:	46c0      	nop			; (mov r8, r8)
    return;
 80089c2:	e1b7      	b.n	8008d34 <HAL_UART_IRQHandler+0x62c>
 80089c4:	0000080f 	.word	0x0000080f
 80089c8:	10000001 	.word	0x10000001
 80089cc:	04000120 	.word	0x04000120
 80089d0:	080099d1 	.word	0x080099d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d000      	beq.n	80089de <HAL_UART_IRQHandler+0x2d6>
 80089dc:	e13e      	b.n	8008c5c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80089de:	23a4      	movs	r3, #164	; 0xa4
 80089e0:	18fb      	adds	r3, r7, r3
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2210      	movs	r2, #16
 80089e6:	4013      	ands	r3, r2
 80089e8:	d100      	bne.n	80089ec <HAL_UART_IRQHandler+0x2e4>
 80089ea:	e137      	b.n	8008c5c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80089ec:	23a0      	movs	r3, #160	; 0xa0
 80089ee:	18fb      	adds	r3, r7, r3
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2210      	movs	r2, #16
 80089f4:	4013      	ands	r3, r2
 80089f6:	d100      	bne.n	80089fa <HAL_UART_IRQHandler+0x2f2>
 80089f8:	e130      	b.n	8008c5c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2210      	movs	r2, #16
 8008a00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	2240      	movs	r2, #64	; 0x40
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	2b40      	cmp	r3, #64	; 0x40
 8008a0e:	d000      	beq.n	8008a12 <HAL_UART_IRQHandler+0x30a>
 8008a10:	e0a4      	b.n	8008b5c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2280      	movs	r2, #128	; 0x80
 8008a16:	589b      	ldr	r3, [r3, r2]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	217e      	movs	r1, #126	; 0x7e
 8008a1e:	187b      	adds	r3, r7, r1
 8008a20:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008a22:	187b      	adds	r3, r7, r1
 8008a24:	881b      	ldrh	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d100      	bne.n	8008a2c <HAL_UART_IRQHandler+0x324>
 8008a2a:	e185      	b.n	8008d38 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	225c      	movs	r2, #92	; 0x5c
 8008a30:	5a9b      	ldrh	r3, [r3, r2]
 8008a32:	187a      	adds	r2, r7, r1
 8008a34:	8812      	ldrh	r2, [r2, #0]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d300      	bcc.n	8008a3c <HAL_UART_IRQHandler+0x334>
 8008a3a:	e17d      	b.n	8008d38 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	187a      	adds	r2, r7, r1
 8008a40:	215e      	movs	r1, #94	; 0x5e
 8008a42:	8812      	ldrh	r2, [r2, #0]
 8008a44:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2280      	movs	r2, #128	; 0x80
 8008a4a:	589b      	ldr	r3, [r3, r2]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2220      	movs	r2, #32
 8008a52:	4013      	ands	r3, r2
 8008a54:	d170      	bne.n	8008b38 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a56:	f3ef 8310 	mrs	r3, PRIMASK
 8008a5a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a60:	2301      	movs	r3, #1
 8008a62:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a66:	f383 8810 	msr	PRIMASK, r3
}
 8008a6a:	46c0      	nop			; (mov r8, r8)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	49b4      	ldr	r1, [pc, #720]	; (8008d48 <HAL_UART_IRQHandler+0x640>)
 8008a78:	400a      	ands	r2, r1
 8008a7a:	601a      	str	r2, [r3, #0]
 8008a7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a7e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a82:	f383 8810 	msr	PRIMASK, r3
}
 8008a86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a88:	f3ef 8310 	mrs	r3, PRIMASK
 8008a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a90:	677b      	str	r3, [r7, #116]	; 0x74
 8008a92:	2301      	movs	r3, #1
 8008a94:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a98:	f383 8810 	msr	PRIMASK, r3
}
 8008a9c:	46c0      	nop			; (mov r8, r8)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	689a      	ldr	r2, [r3, #8]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	438a      	bics	r2, r1
 8008aac:	609a      	str	r2, [r3, #8]
 8008aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ab0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ab4:	f383 8810 	msr	PRIMASK, r3
}
 8008ab8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aba:	f3ef 8310 	mrs	r3, PRIMASK
 8008abe:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8008ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ac2:	673b      	str	r3, [r7, #112]	; 0x70
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aca:	f383 8810 	msr	PRIMASK, r3
}
 8008ace:	46c0      	nop			; (mov r8, r8)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	689a      	ldr	r2, [r3, #8]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2140      	movs	r1, #64	; 0x40
 8008adc:	438a      	bics	r2, r1
 8008ade:	609a      	str	r2, [r3, #8]
 8008ae0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ae2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ae6:	f383 8810 	msr	PRIMASK, r3
}
 8008aea:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	228c      	movs	r2, #140	; 0x8c
 8008af0:	2120      	movs	r1, #32
 8008af2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008afa:	f3ef 8310 	mrs	r3, PRIMASK
 8008afe:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8008b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b04:	2301      	movs	r3, #1
 8008b06:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b0a:	f383 8810 	msr	PRIMASK, r3
}
 8008b0e:	46c0      	nop			; (mov r8, r8)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2110      	movs	r1, #16
 8008b1c:	438a      	bics	r2, r1
 8008b1e:	601a      	str	r2, [r3, #0]
 8008b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b22:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b26:	f383 8810 	msr	PRIMASK, r3
}
 8008b2a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2280      	movs	r2, #128	; 0x80
 8008b30:	589b      	ldr	r3, [r3, r2]
 8008b32:	0018      	movs	r0, r3
 8008b34:	f7fc fd86 	bl	8005644 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	225c      	movs	r2, #92	; 0x5c
 8008b42:	5a9a      	ldrh	r2, [r3, r2]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	215e      	movs	r1, #94	; 0x5e
 8008b48:	5a5b      	ldrh	r3, [r3, r1]
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	0011      	movs	r1, r2
 8008b54:	0018      	movs	r0, r3
 8008b56:	f000 f91d 	bl	8008d94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b5a:	e0ed      	b.n	8008d38 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	225c      	movs	r2, #92	; 0x5c
 8008b60:	5a99      	ldrh	r1, [r3, r2]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	225e      	movs	r2, #94	; 0x5e
 8008b66:	5a9b      	ldrh	r3, [r3, r2]
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	208e      	movs	r0, #142	; 0x8e
 8008b6c:	183b      	adds	r3, r7, r0
 8008b6e:	1a8a      	subs	r2, r1, r2
 8008b70:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	225e      	movs	r2, #94	; 0x5e
 8008b76:	5a9b      	ldrh	r3, [r3, r2]
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d100      	bne.n	8008b80 <HAL_UART_IRQHandler+0x478>
 8008b7e:	e0dd      	b.n	8008d3c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8008b80:	183b      	adds	r3, r7, r0
 8008b82:	881b      	ldrh	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d100      	bne.n	8008b8a <HAL_UART_IRQHandler+0x482>
 8008b88:	e0d8      	b.n	8008d3c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8008b8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b90:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b92:	2488      	movs	r4, #136	; 0x88
 8008b94:	193a      	adds	r2, r7, r4
 8008b96:	6013      	str	r3, [r2, #0]
 8008b98:	2301      	movs	r3, #1
 8008b9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	f383 8810 	msr	PRIMASK, r3
}
 8008ba2:	46c0      	nop			; (mov r8, r8)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4967      	ldr	r1, [pc, #412]	; (8008d4c <HAL_UART_IRQHandler+0x644>)
 8008bb0:	400a      	ands	r2, r1
 8008bb2:	601a      	str	r2, [r3, #0]
 8008bb4:	193b      	adds	r3, r7, r4
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f383 8810 	msr	PRIMASK, r3
}
 8008bc0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8008bc6:	61bb      	str	r3, [r7, #24]
  return(result);
 8008bc8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bca:	2484      	movs	r4, #132	; 0x84
 8008bcc:	193a      	adds	r2, r7, r4
 8008bce:	6013      	str	r3, [r2, #0]
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	f383 8810 	msr	PRIMASK, r3
}
 8008bda:	46c0      	nop			; (mov r8, r8)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	689a      	ldr	r2, [r3, #8]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	495a      	ldr	r1, [pc, #360]	; (8008d50 <HAL_UART_IRQHandler+0x648>)
 8008be8:	400a      	ands	r2, r1
 8008bea:	609a      	str	r2, [r3, #8]
 8008bec:	193b      	adds	r3, r7, r4
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bf2:	6a3b      	ldr	r3, [r7, #32]
 8008bf4:	f383 8810 	msr	PRIMASK, r3
}
 8008bf8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	228c      	movs	r2, #140	; 0x8c
 8008bfe:	2120      	movs	r1, #32
 8008c00:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8008c12:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c16:	2480      	movs	r4, #128	; 0x80
 8008c18:	193a      	adds	r2, r7, r4
 8008c1a:	6013      	str	r3, [r2, #0]
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c22:	f383 8810 	msr	PRIMASK, r3
}
 8008c26:	46c0      	nop			; (mov r8, r8)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2110      	movs	r1, #16
 8008c34:	438a      	bics	r2, r1
 8008c36:	601a      	str	r2, [r3, #0]
 8008c38:	193b      	adds	r3, r7, r4
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c40:	f383 8810 	msr	PRIMASK, r3
}
 8008c44:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2202      	movs	r2, #2
 8008c4a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c4c:	183b      	adds	r3, r7, r0
 8008c4e:	881a      	ldrh	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	0011      	movs	r1, r2
 8008c54:	0018      	movs	r0, r3
 8008c56:	f000 f89d 	bl	8008d94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008c5a:	e06f      	b.n	8008d3c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008c5c:	23a4      	movs	r3, #164	; 0xa4
 8008c5e:	18fb      	adds	r3, r7, r3
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	2380      	movs	r3, #128	; 0x80
 8008c64:	035b      	lsls	r3, r3, #13
 8008c66:	4013      	ands	r3, r2
 8008c68:	d010      	beq.n	8008c8c <HAL_UART_IRQHandler+0x584>
 8008c6a:	239c      	movs	r3, #156	; 0x9c
 8008c6c:	18fb      	adds	r3, r7, r3
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	2380      	movs	r3, #128	; 0x80
 8008c72:	03db      	lsls	r3, r3, #15
 8008c74:	4013      	ands	r3, r2
 8008c76:	d009      	beq.n	8008c8c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2280      	movs	r2, #128	; 0x80
 8008c7e:	0352      	lsls	r2, r2, #13
 8008c80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	0018      	movs	r0, r3
 8008c86:	f000 fee6 	bl	8009a56 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c8a:	e05a      	b.n	8008d42 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008c8c:	23a4      	movs	r3, #164	; 0xa4
 8008c8e:	18fb      	adds	r3, r7, r3
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2280      	movs	r2, #128	; 0x80
 8008c94:	4013      	ands	r3, r2
 8008c96:	d016      	beq.n	8008cc6 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008c98:	23a0      	movs	r3, #160	; 0xa0
 8008c9a:	18fb      	adds	r3, r7, r3
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2280      	movs	r2, #128	; 0x80
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	d106      	bne.n	8008cb2 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008ca4:	239c      	movs	r3, #156	; 0x9c
 8008ca6:	18fb      	adds	r3, r7, r3
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	2380      	movs	r3, #128	; 0x80
 8008cac:	041b      	lsls	r3, r3, #16
 8008cae:	4013      	ands	r3, r2
 8008cb0:	d009      	beq.n	8008cc6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d042      	beq.n	8008d40 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	0010      	movs	r0, r2
 8008cc2:	4798      	blx	r3
    }
    return;
 8008cc4:	e03c      	b.n	8008d40 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008cc6:	23a4      	movs	r3, #164	; 0xa4
 8008cc8:	18fb      	adds	r3, r7, r3
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2240      	movs	r2, #64	; 0x40
 8008cce:	4013      	ands	r3, r2
 8008cd0:	d00a      	beq.n	8008ce8 <HAL_UART_IRQHandler+0x5e0>
 8008cd2:	23a0      	movs	r3, #160	; 0xa0
 8008cd4:	18fb      	adds	r3, r7, r3
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2240      	movs	r2, #64	; 0x40
 8008cda:	4013      	ands	r3, r2
 8008cdc:	d004      	beq.n	8008ce8 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	0018      	movs	r0, r3
 8008ce2:	f000 fe8c 	bl	80099fe <UART_EndTransmit_IT>
    return;
 8008ce6:	e02c      	b.n	8008d42 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008ce8:	23a4      	movs	r3, #164	; 0xa4
 8008cea:	18fb      	adds	r3, r7, r3
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	2380      	movs	r3, #128	; 0x80
 8008cf0:	041b      	lsls	r3, r3, #16
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	d00b      	beq.n	8008d0e <HAL_UART_IRQHandler+0x606>
 8008cf6:	23a0      	movs	r3, #160	; 0xa0
 8008cf8:	18fb      	adds	r3, r7, r3
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	2380      	movs	r3, #128	; 0x80
 8008cfe:	05db      	lsls	r3, r3, #23
 8008d00:	4013      	ands	r3, r2
 8008d02:	d004      	beq.n	8008d0e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	0018      	movs	r0, r3
 8008d08:	f000 feb5 	bl	8009a76 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d0c:	e019      	b.n	8008d42 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008d0e:	23a4      	movs	r3, #164	; 0xa4
 8008d10:	18fb      	adds	r3, r7, r3
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	2380      	movs	r3, #128	; 0x80
 8008d16:	045b      	lsls	r3, r3, #17
 8008d18:	4013      	ands	r3, r2
 8008d1a:	d012      	beq.n	8008d42 <HAL_UART_IRQHandler+0x63a>
 8008d1c:	23a0      	movs	r3, #160	; 0xa0
 8008d1e:	18fb      	adds	r3, r7, r3
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	da0d      	bge.n	8008d42 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	0018      	movs	r0, r3
 8008d2a:	f000 fe9c 	bl	8009a66 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d2e:	e008      	b.n	8008d42 <HAL_UART_IRQHandler+0x63a>
      return;
 8008d30:	46c0      	nop			; (mov r8, r8)
 8008d32:	e006      	b.n	8008d42 <HAL_UART_IRQHandler+0x63a>
    return;
 8008d34:	46c0      	nop			; (mov r8, r8)
 8008d36:	e004      	b.n	8008d42 <HAL_UART_IRQHandler+0x63a>
      return;
 8008d38:	46c0      	nop			; (mov r8, r8)
 8008d3a:	e002      	b.n	8008d42 <HAL_UART_IRQHandler+0x63a>
      return;
 8008d3c:	46c0      	nop			; (mov r8, r8)
 8008d3e:	e000      	b.n	8008d42 <HAL_UART_IRQHandler+0x63a>
    return;
 8008d40:	46c0      	nop			; (mov r8, r8)
  }
}
 8008d42:	46bd      	mov	sp, r7
 8008d44:	b02a      	add	sp, #168	; 0xa8
 8008d46:	bdb0      	pop	{r4, r5, r7, pc}
 8008d48:	fffffeff 	.word	0xfffffeff
 8008d4c:	fffffedf 	.word	0xfffffedf
 8008d50:	effffffe 	.word	0xeffffffe

08008d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008d5c:	46c0      	nop			; (mov r8, r8)
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	b002      	add	sp, #8
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008d6c:	46c0      	nop			; (mov r8, r8)
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	b002      	add	sp, #8
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008d7c:	46c0      	nop			; (mov r8, r8)
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	b002      	add	sp, #8
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008d8c:	46c0      	nop			; (mov r8, r8)
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	b002      	add	sp, #8
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	000a      	movs	r2, r1
 8008d9e:	1cbb      	adds	r3, r7, #2
 8008da0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008da2:	46c0      	nop			; (mov r8, r8)
 8008da4:	46bd      	mov	sp, r7
 8008da6:	b002      	add	sp, #8
 8008da8:	bd80      	pop	{r7, pc}
	...

08008dac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b088      	sub	sp, #32
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008db4:	231a      	movs	r3, #26
 8008db6:	18fb      	adds	r3, r7, r3
 8008db8:	2200      	movs	r2, #0
 8008dba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	689a      	ldr	r2, [r3, #8]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	431a      	orrs	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	431a      	orrs	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	69db      	ldr	r3, [r3, #28]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4abc      	ldr	r2, [pc, #752]	; (80090cc <UART_SetConfig+0x320>)
 8008ddc:	4013      	ands	r3, r2
 8008dde:	0019      	movs	r1, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	69fa      	ldr	r2, [r7, #28]
 8008de6:	430a      	orrs	r2, r1
 8008de8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	4ab7      	ldr	r2, [pc, #732]	; (80090d0 <UART_SetConfig+0x324>)
 8008df2:	4013      	ands	r3, r2
 8008df4:	0019      	movs	r1, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68da      	ldr	r2, [r3, #12]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a1b      	ldr	r3, [r3, #32]
 8008e0c:	69fa      	ldr	r2, [r7, #28]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	4aae      	ldr	r2, [pc, #696]	; (80090d4 <UART_SetConfig+0x328>)
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	0019      	movs	r1, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	69fa      	ldr	r2, [r7, #28]
 8008e24:	430a      	orrs	r2, r1
 8008e26:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2e:	220f      	movs	r2, #15
 8008e30:	4393      	bics	r3, r2
 8008e32:	0019      	movs	r1, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	430a      	orrs	r2, r1
 8008e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4aa4      	ldr	r2, [pc, #656]	; (80090d8 <UART_SetConfig+0x32c>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d127      	bne.n	8008e9a <UART_SetConfig+0xee>
 8008e4a:	4ba4      	ldr	r3, [pc, #656]	; (80090dc <UART_SetConfig+0x330>)
 8008e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e4e:	2203      	movs	r2, #3
 8008e50:	4013      	ands	r3, r2
 8008e52:	2b03      	cmp	r3, #3
 8008e54:	d017      	beq.n	8008e86 <UART_SetConfig+0xda>
 8008e56:	d81b      	bhi.n	8008e90 <UART_SetConfig+0xe4>
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d00a      	beq.n	8008e72 <UART_SetConfig+0xc6>
 8008e5c:	d818      	bhi.n	8008e90 <UART_SetConfig+0xe4>
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d002      	beq.n	8008e68 <UART_SetConfig+0xbc>
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d00a      	beq.n	8008e7c <UART_SetConfig+0xd0>
 8008e66:	e013      	b.n	8008e90 <UART_SetConfig+0xe4>
 8008e68:	231b      	movs	r3, #27
 8008e6a:	18fb      	adds	r3, r7, r3
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	701a      	strb	r2, [r3, #0]
 8008e70:	e058      	b.n	8008f24 <UART_SetConfig+0x178>
 8008e72:	231b      	movs	r3, #27
 8008e74:	18fb      	adds	r3, r7, r3
 8008e76:	2202      	movs	r2, #2
 8008e78:	701a      	strb	r2, [r3, #0]
 8008e7a:	e053      	b.n	8008f24 <UART_SetConfig+0x178>
 8008e7c:	231b      	movs	r3, #27
 8008e7e:	18fb      	adds	r3, r7, r3
 8008e80:	2204      	movs	r2, #4
 8008e82:	701a      	strb	r2, [r3, #0]
 8008e84:	e04e      	b.n	8008f24 <UART_SetConfig+0x178>
 8008e86:	231b      	movs	r3, #27
 8008e88:	18fb      	adds	r3, r7, r3
 8008e8a:	2208      	movs	r2, #8
 8008e8c:	701a      	strb	r2, [r3, #0]
 8008e8e:	e049      	b.n	8008f24 <UART_SetConfig+0x178>
 8008e90:	231b      	movs	r3, #27
 8008e92:	18fb      	adds	r3, r7, r3
 8008e94:	2210      	movs	r2, #16
 8008e96:	701a      	strb	r2, [r3, #0]
 8008e98:	e044      	b.n	8008f24 <UART_SetConfig+0x178>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a90      	ldr	r2, [pc, #576]	; (80090e0 <UART_SetConfig+0x334>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d127      	bne.n	8008ef4 <UART_SetConfig+0x148>
 8008ea4:	4b8d      	ldr	r3, [pc, #564]	; (80090dc <UART_SetConfig+0x330>)
 8008ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ea8:	220c      	movs	r2, #12
 8008eaa:	4013      	ands	r3, r2
 8008eac:	2b0c      	cmp	r3, #12
 8008eae:	d017      	beq.n	8008ee0 <UART_SetConfig+0x134>
 8008eb0:	d81b      	bhi.n	8008eea <UART_SetConfig+0x13e>
 8008eb2:	2b08      	cmp	r3, #8
 8008eb4:	d00a      	beq.n	8008ecc <UART_SetConfig+0x120>
 8008eb6:	d818      	bhi.n	8008eea <UART_SetConfig+0x13e>
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d002      	beq.n	8008ec2 <UART_SetConfig+0x116>
 8008ebc:	2b04      	cmp	r3, #4
 8008ebe:	d00a      	beq.n	8008ed6 <UART_SetConfig+0x12a>
 8008ec0:	e013      	b.n	8008eea <UART_SetConfig+0x13e>
 8008ec2:	231b      	movs	r3, #27
 8008ec4:	18fb      	adds	r3, r7, r3
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	701a      	strb	r2, [r3, #0]
 8008eca:	e02b      	b.n	8008f24 <UART_SetConfig+0x178>
 8008ecc:	231b      	movs	r3, #27
 8008ece:	18fb      	adds	r3, r7, r3
 8008ed0:	2202      	movs	r2, #2
 8008ed2:	701a      	strb	r2, [r3, #0]
 8008ed4:	e026      	b.n	8008f24 <UART_SetConfig+0x178>
 8008ed6:	231b      	movs	r3, #27
 8008ed8:	18fb      	adds	r3, r7, r3
 8008eda:	2204      	movs	r2, #4
 8008edc:	701a      	strb	r2, [r3, #0]
 8008ede:	e021      	b.n	8008f24 <UART_SetConfig+0x178>
 8008ee0:	231b      	movs	r3, #27
 8008ee2:	18fb      	adds	r3, r7, r3
 8008ee4:	2208      	movs	r2, #8
 8008ee6:	701a      	strb	r2, [r3, #0]
 8008ee8:	e01c      	b.n	8008f24 <UART_SetConfig+0x178>
 8008eea:	231b      	movs	r3, #27
 8008eec:	18fb      	adds	r3, r7, r3
 8008eee:	2210      	movs	r2, #16
 8008ef0:	701a      	strb	r2, [r3, #0]
 8008ef2:	e017      	b.n	8008f24 <UART_SetConfig+0x178>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a7a      	ldr	r2, [pc, #488]	; (80090e4 <UART_SetConfig+0x338>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d104      	bne.n	8008f08 <UART_SetConfig+0x15c>
 8008efe:	231b      	movs	r3, #27
 8008f00:	18fb      	adds	r3, r7, r3
 8008f02:	2200      	movs	r2, #0
 8008f04:	701a      	strb	r2, [r3, #0]
 8008f06:	e00d      	b.n	8008f24 <UART_SetConfig+0x178>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a76      	ldr	r2, [pc, #472]	; (80090e8 <UART_SetConfig+0x33c>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d104      	bne.n	8008f1c <UART_SetConfig+0x170>
 8008f12:	231b      	movs	r3, #27
 8008f14:	18fb      	adds	r3, r7, r3
 8008f16:	2200      	movs	r2, #0
 8008f18:	701a      	strb	r2, [r3, #0]
 8008f1a:	e003      	b.n	8008f24 <UART_SetConfig+0x178>
 8008f1c:	231b      	movs	r3, #27
 8008f1e:	18fb      	adds	r3, r7, r3
 8008f20:	2210      	movs	r2, #16
 8008f22:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	69da      	ldr	r2, [r3, #28]
 8008f28:	2380      	movs	r3, #128	; 0x80
 8008f2a:	021b      	lsls	r3, r3, #8
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d000      	beq.n	8008f32 <UART_SetConfig+0x186>
 8008f30:	e065      	b.n	8008ffe <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8008f32:	231b      	movs	r3, #27
 8008f34:	18fb      	adds	r3, r7, r3
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	2b08      	cmp	r3, #8
 8008f3a:	d015      	beq.n	8008f68 <UART_SetConfig+0x1bc>
 8008f3c:	dc18      	bgt.n	8008f70 <UART_SetConfig+0x1c4>
 8008f3e:	2b04      	cmp	r3, #4
 8008f40:	d00d      	beq.n	8008f5e <UART_SetConfig+0x1b2>
 8008f42:	dc15      	bgt.n	8008f70 <UART_SetConfig+0x1c4>
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d002      	beq.n	8008f4e <UART_SetConfig+0x1a2>
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d005      	beq.n	8008f58 <UART_SetConfig+0x1ac>
 8008f4c:	e010      	b.n	8008f70 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f4e:	f7fd fc45 	bl	80067dc <HAL_RCC_GetPCLK1Freq>
 8008f52:	0003      	movs	r3, r0
 8008f54:	617b      	str	r3, [r7, #20]
        break;
 8008f56:	e012      	b.n	8008f7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f58:	4b64      	ldr	r3, [pc, #400]	; (80090ec <UART_SetConfig+0x340>)
 8008f5a:	617b      	str	r3, [r7, #20]
        break;
 8008f5c:	e00f      	b.n	8008f7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f5e:	f7fd fbb3 	bl	80066c8 <HAL_RCC_GetSysClockFreq>
 8008f62:	0003      	movs	r3, r0
 8008f64:	617b      	str	r3, [r7, #20]
        break;
 8008f66:	e00a      	b.n	8008f7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f68:	2380      	movs	r3, #128	; 0x80
 8008f6a:	021b      	lsls	r3, r3, #8
 8008f6c:	617b      	str	r3, [r7, #20]
        break;
 8008f6e:	e006      	b.n	8008f7e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8008f70:	2300      	movs	r3, #0
 8008f72:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008f74:	231a      	movs	r3, #26
 8008f76:	18fb      	adds	r3, r7, r3
 8008f78:	2201      	movs	r2, #1
 8008f7a:	701a      	strb	r2, [r3, #0]
        break;
 8008f7c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d100      	bne.n	8008f86 <UART_SetConfig+0x1da>
 8008f84:	e08d      	b.n	80090a2 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f8a:	4b59      	ldr	r3, [pc, #356]	; (80090f0 <UART_SetConfig+0x344>)
 8008f8c:	0052      	lsls	r2, r2, #1
 8008f8e:	5ad3      	ldrh	r3, [r2, r3]
 8008f90:	0019      	movs	r1, r3
 8008f92:	6978      	ldr	r0, [r7, #20]
 8008f94:	f7f7 f8ca 	bl	800012c <__udivsi3>
 8008f98:	0003      	movs	r3, r0
 8008f9a:	005a      	lsls	r2, r3, #1
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	085b      	lsrs	r3, r3, #1
 8008fa2:	18d2      	adds	r2, r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	0019      	movs	r1, r3
 8008faa:	0010      	movs	r0, r2
 8008fac:	f7f7 f8be 	bl	800012c <__udivsi3>
 8008fb0:	0003      	movs	r3, r0
 8008fb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	2b0f      	cmp	r3, #15
 8008fb8:	d91c      	bls.n	8008ff4 <UART_SetConfig+0x248>
 8008fba:	693a      	ldr	r2, [r7, #16]
 8008fbc:	2380      	movs	r3, #128	; 0x80
 8008fbe:	025b      	lsls	r3, r3, #9
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d217      	bcs.n	8008ff4 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	200e      	movs	r0, #14
 8008fca:	183b      	adds	r3, r7, r0
 8008fcc:	210f      	movs	r1, #15
 8008fce:	438a      	bics	r2, r1
 8008fd0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	085b      	lsrs	r3, r3, #1
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	2207      	movs	r2, #7
 8008fda:	4013      	ands	r3, r2
 8008fdc:	b299      	uxth	r1, r3
 8008fde:	183b      	adds	r3, r7, r0
 8008fe0:	183a      	adds	r2, r7, r0
 8008fe2:	8812      	ldrh	r2, [r2, #0]
 8008fe4:	430a      	orrs	r2, r1
 8008fe6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	183a      	adds	r2, r7, r0
 8008fee:	8812      	ldrh	r2, [r2, #0]
 8008ff0:	60da      	str	r2, [r3, #12]
 8008ff2:	e056      	b.n	80090a2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8008ff4:	231a      	movs	r3, #26
 8008ff6:	18fb      	adds	r3, r7, r3
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	701a      	strb	r2, [r3, #0]
 8008ffc:	e051      	b.n	80090a2 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ffe:	231b      	movs	r3, #27
 8009000:	18fb      	adds	r3, r7, r3
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	2b08      	cmp	r3, #8
 8009006:	d015      	beq.n	8009034 <UART_SetConfig+0x288>
 8009008:	dc18      	bgt.n	800903c <UART_SetConfig+0x290>
 800900a:	2b04      	cmp	r3, #4
 800900c:	d00d      	beq.n	800902a <UART_SetConfig+0x27e>
 800900e:	dc15      	bgt.n	800903c <UART_SetConfig+0x290>
 8009010:	2b00      	cmp	r3, #0
 8009012:	d002      	beq.n	800901a <UART_SetConfig+0x26e>
 8009014:	2b02      	cmp	r3, #2
 8009016:	d005      	beq.n	8009024 <UART_SetConfig+0x278>
 8009018:	e010      	b.n	800903c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800901a:	f7fd fbdf 	bl	80067dc <HAL_RCC_GetPCLK1Freq>
 800901e:	0003      	movs	r3, r0
 8009020:	617b      	str	r3, [r7, #20]
        break;
 8009022:	e012      	b.n	800904a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009024:	4b31      	ldr	r3, [pc, #196]	; (80090ec <UART_SetConfig+0x340>)
 8009026:	617b      	str	r3, [r7, #20]
        break;
 8009028:	e00f      	b.n	800904a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800902a:	f7fd fb4d 	bl	80066c8 <HAL_RCC_GetSysClockFreq>
 800902e:	0003      	movs	r3, r0
 8009030:	617b      	str	r3, [r7, #20]
        break;
 8009032:	e00a      	b.n	800904a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009034:	2380      	movs	r3, #128	; 0x80
 8009036:	021b      	lsls	r3, r3, #8
 8009038:	617b      	str	r3, [r7, #20]
        break;
 800903a:	e006      	b.n	800904a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800903c:	2300      	movs	r3, #0
 800903e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009040:	231a      	movs	r3, #26
 8009042:	18fb      	adds	r3, r7, r3
 8009044:	2201      	movs	r2, #1
 8009046:	701a      	strb	r2, [r3, #0]
        break;
 8009048:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d028      	beq.n	80090a2 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009054:	4b26      	ldr	r3, [pc, #152]	; (80090f0 <UART_SetConfig+0x344>)
 8009056:	0052      	lsls	r2, r2, #1
 8009058:	5ad3      	ldrh	r3, [r2, r3]
 800905a:	0019      	movs	r1, r3
 800905c:	6978      	ldr	r0, [r7, #20]
 800905e:	f7f7 f865 	bl	800012c <__udivsi3>
 8009062:	0003      	movs	r3, r0
 8009064:	001a      	movs	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	085b      	lsrs	r3, r3, #1
 800906c:	18d2      	adds	r2, r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	0019      	movs	r1, r3
 8009074:	0010      	movs	r0, r2
 8009076:	f7f7 f859 	bl	800012c <__udivsi3>
 800907a:	0003      	movs	r3, r0
 800907c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	2b0f      	cmp	r3, #15
 8009082:	d90a      	bls.n	800909a <UART_SetConfig+0x2ee>
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	2380      	movs	r3, #128	; 0x80
 8009088:	025b      	lsls	r3, r3, #9
 800908a:	429a      	cmp	r2, r3
 800908c:	d205      	bcs.n	800909a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	b29a      	uxth	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	60da      	str	r2, [r3, #12]
 8009098:	e003      	b.n	80090a2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800909a:	231a      	movs	r3, #26
 800909c:	18fb      	adds	r3, r7, r3
 800909e:	2201      	movs	r2, #1
 80090a0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	226a      	movs	r2, #106	; 0x6a
 80090a6:	2101      	movs	r1, #1
 80090a8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2268      	movs	r2, #104	; 0x68
 80090ae:	2101      	movs	r1, #1
 80090b0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80090be:	231a      	movs	r3, #26
 80090c0:	18fb      	adds	r3, r7, r3
 80090c2:	781b      	ldrb	r3, [r3, #0]
}
 80090c4:	0018      	movs	r0, r3
 80090c6:	46bd      	mov	sp, r7
 80090c8:	b008      	add	sp, #32
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	cfff69f3 	.word	0xcfff69f3
 80090d0:	ffffcfff 	.word	0xffffcfff
 80090d4:	11fff4ff 	.word	0x11fff4ff
 80090d8:	40013800 	.word	0x40013800
 80090dc:	40021000 	.word	0x40021000
 80090e0:	40004400 	.word	0x40004400
 80090e4:	40004800 	.word	0x40004800
 80090e8:	40004c00 	.word	0x40004c00
 80090ec:	00f42400 	.word	0x00f42400
 80090f0:	08011014 	.word	0x08011014

080090f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009100:	2201      	movs	r2, #1
 8009102:	4013      	ands	r3, r2
 8009104:	d00b      	beq.n	800911e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	4a4a      	ldr	r2, [pc, #296]	; (8009238 <UART_AdvFeatureConfig+0x144>)
 800910e:	4013      	ands	r3, r2
 8009110:	0019      	movs	r1, r3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	430a      	orrs	r2, r1
 800911c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009122:	2202      	movs	r2, #2
 8009124:	4013      	ands	r3, r2
 8009126:	d00b      	beq.n	8009140 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	4a43      	ldr	r2, [pc, #268]	; (800923c <UART_AdvFeatureConfig+0x148>)
 8009130:	4013      	ands	r3, r2
 8009132:	0019      	movs	r1, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	430a      	orrs	r2, r1
 800913e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009144:	2204      	movs	r2, #4
 8009146:	4013      	ands	r3, r2
 8009148:	d00b      	beq.n	8009162 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	4a3b      	ldr	r2, [pc, #236]	; (8009240 <UART_AdvFeatureConfig+0x14c>)
 8009152:	4013      	ands	r3, r2
 8009154:	0019      	movs	r1, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	430a      	orrs	r2, r1
 8009160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009166:	2208      	movs	r2, #8
 8009168:	4013      	ands	r3, r2
 800916a:	d00b      	beq.n	8009184 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	4a34      	ldr	r2, [pc, #208]	; (8009244 <UART_AdvFeatureConfig+0x150>)
 8009174:	4013      	ands	r3, r2
 8009176:	0019      	movs	r1, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	430a      	orrs	r2, r1
 8009182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009188:	2210      	movs	r2, #16
 800918a:	4013      	ands	r3, r2
 800918c:	d00b      	beq.n	80091a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	4a2c      	ldr	r2, [pc, #176]	; (8009248 <UART_AdvFeatureConfig+0x154>)
 8009196:	4013      	ands	r3, r2
 8009198:	0019      	movs	r1, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	430a      	orrs	r2, r1
 80091a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091aa:	2220      	movs	r2, #32
 80091ac:	4013      	ands	r3, r2
 80091ae:	d00b      	beq.n	80091c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	4a25      	ldr	r2, [pc, #148]	; (800924c <UART_AdvFeatureConfig+0x158>)
 80091b8:	4013      	ands	r3, r2
 80091ba:	0019      	movs	r1, r3
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	430a      	orrs	r2, r1
 80091c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091cc:	2240      	movs	r2, #64	; 0x40
 80091ce:	4013      	ands	r3, r2
 80091d0:	d01d      	beq.n	800920e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	4a1d      	ldr	r2, [pc, #116]	; (8009250 <UART_AdvFeatureConfig+0x15c>)
 80091da:	4013      	ands	r3, r2
 80091dc:	0019      	movs	r1, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	430a      	orrs	r2, r1
 80091e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091ee:	2380      	movs	r3, #128	; 0x80
 80091f0:	035b      	lsls	r3, r3, #13
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d10b      	bne.n	800920e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	4a15      	ldr	r2, [pc, #84]	; (8009254 <UART_AdvFeatureConfig+0x160>)
 80091fe:	4013      	ands	r3, r2
 8009200:	0019      	movs	r1, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	430a      	orrs	r2, r1
 800920c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009212:	2280      	movs	r2, #128	; 0x80
 8009214:	4013      	ands	r3, r2
 8009216:	d00b      	beq.n	8009230 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	4a0e      	ldr	r2, [pc, #56]	; (8009258 <UART_AdvFeatureConfig+0x164>)
 8009220:	4013      	ands	r3, r2
 8009222:	0019      	movs	r1, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	430a      	orrs	r2, r1
 800922e:	605a      	str	r2, [r3, #4]
  }
}
 8009230:	46c0      	nop			; (mov r8, r8)
 8009232:	46bd      	mov	sp, r7
 8009234:	b002      	add	sp, #8
 8009236:	bd80      	pop	{r7, pc}
 8009238:	fffdffff 	.word	0xfffdffff
 800923c:	fffeffff 	.word	0xfffeffff
 8009240:	fffbffff 	.word	0xfffbffff
 8009244:	ffff7fff 	.word	0xffff7fff
 8009248:	ffffefff 	.word	0xffffefff
 800924c:	ffffdfff 	.word	0xffffdfff
 8009250:	ffefffff 	.word	0xffefffff
 8009254:	ff9fffff 	.word	0xff9fffff
 8009258:	fff7ffff 	.word	0xfff7ffff

0800925c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af02      	add	r7, sp, #8
 8009262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2290      	movs	r2, #144	; 0x90
 8009268:	2100      	movs	r1, #0
 800926a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800926c:	f7fc f822 	bl	80052b4 <HAL_GetTick>
 8009270:	0003      	movs	r3, r0
 8009272:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2208      	movs	r2, #8
 800927c:	4013      	ands	r3, r2
 800927e:	2b08      	cmp	r3, #8
 8009280:	d10c      	bne.n	800929c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2280      	movs	r2, #128	; 0x80
 8009286:	0391      	lsls	r1, r2, #14
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	4a1a      	ldr	r2, [pc, #104]	; (80092f4 <UART_CheckIdleState+0x98>)
 800928c:	9200      	str	r2, [sp, #0]
 800928e:	2200      	movs	r2, #0
 8009290:	f000 f832 	bl	80092f8 <UART_WaitOnFlagUntilTimeout>
 8009294:	1e03      	subs	r3, r0, #0
 8009296:	d001      	beq.n	800929c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009298:	2303      	movs	r3, #3
 800929a:	e026      	b.n	80092ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2204      	movs	r2, #4
 80092a4:	4013      	ands	r3, r2
 80092a6:	2b04      	cmp	r3, #4
 80092a8:	d10c      	bne.n	80092c4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2280      	movs	r2, #128	; 0x80
 80092ae:	03d1      	lsls	r1, r2, #15
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	4a10      	ldr	r2, [pc, #64]	; (80092f4 <UART_CheckIdleState+0x98>)
 80092b4:	9200      	str	r2, [sp, #0]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f000 f81e 	bl	80092f8 <UART_WaitOnFlagUntilTimeout>
 80092bc:	1e03      	subs	r3, r0, #0
 80092be:	d001      	beq.n	80092c4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092c0:	2303      	movs	r3, #3
 80092c2:	e012      	b.n	80092ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2288      	movs	r2, #136	; 0x88
 80092c8:	2120      	movs	r1, #32
 80092ca:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	228c      	movs	r2, #140	; 0x8c
 80092d0:	2120      	movs	r1, #32
 80092d2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2284      	movs	r2, #132	; 0x84
 80092e4:	2100      	movs	r1, #0
 80092e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80092e8:	2300      	movs	r3, #0
}
 80092ea:	0018      	movs	r0, r3
 80092ec:	46bd      	mov	sp, r7
 80092ee:	b004      	add	sp, #16
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	46c0      	nop			; (mov r8, r8)
 80092f4:	01ffffff 	.word	0x01ffffff

080092f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b094      	sub	sp, #80	; 0x50
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	603b      	str	r3, [r7, #0]
 8009304:	1dfb      	adds	r3, r7, #7
 8009306:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009308:	e0a7      	b.n	800945a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800930a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800930c:	3301      	adds	r3, #1
 800930e:	d100      	bne.n	8009312 <UART_WaitOnFlagUntilTimeout+0x1a>
 8009310:	e0a3      	b.n	800945a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009312:	f7fb ffcf 	bl	80052b4 <HAL_GetTick>
 8009316:	0002      	movs	r2, r0
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800931e:	429a      	cmp	r2, r3
 8009320:	d302      	bcc.n	8009328 <UART_WaitOnFlagUntilTimeout+0x30>
 8009322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009324:	2b00      	cmp	r3, #0
 8009326:	d13f      	bne.n	80093a8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009328:	f3ef 8310 	mrs	r3, PRIMASK
 800932c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800932e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009330:	647b      	str	r3, [r7, #68]	; 0x44
 8009332:	2301      	movs	r3, #1
 8009334:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009338:	f383 8810 	msr	PRIMASK, r3
}
 800933c:	46c0      	nop			; (mov r8, r8)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	494e      	ldr	r1, [pc, #312]	; (8009484 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800934a:	400a      	ands	r2, r1
 800934c:	601a      	str	r2, [r3, #0]
 800934e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009350:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009354:	f383 8810 	msr	PRIMASK, r3
}
 8009358:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800935a:	f3ef 8310 	mrs	r3, PRIMASK
 800935e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8009360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009362:	643b      	str	r3, [r7, #64]	; 0x40
 8009364:	2301      	movs	r3, #1
 8009366:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936a:	f383 8810 	msr	PRIMASK, r3
}
 800936e:	46c0      	nop			; (mov r8, r8)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	689a      	ldr	r2, [r3, #8]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2101      	movs	r1, #1
 800937c:	438a      	bics	r2, r1
 800937e:	609a      	str	r2, [r3, #8]
 8009380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009382:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009386:	f383 8810 	msr	PRIMASK, r3
}
 800938a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2288      	movs	r2, #136	; 0x88
 8009390:	2120      	movs	r1, #32
 8009392:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	228c      	movs	r2, #140	; 0x8c
 8009398:	2120      	movs	r1, #32
 800939a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2284      	movs	r2, #132	; 0x84
 80093a0:	2100      	movs	r1, #0
 80093a2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80093a4:	2303      	movs	r3, #3
 80093a6:	e069      	b.n	800947c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2204      	movs	r2, #4
 80093b0:	4013      	ands	r3, r2
 80093b2:	d052      	beq.n	800945a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	69da      	ldr	r2, [r3, #28]
 80093ba:	2380      	movs	r3, #128	; 0x80
 80093bc:	011b      	lsls	r3, r3, #4
 80093be:	401a      	ands	r2, r3
 80093c0:	2380      	movs	r3, #128	; 0x80
 80093c2:	011b      	lsls	r3, r3, #4
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d148      	bne.n	800945a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2280      	movs	r2, #128	; 0x80
 80093ce:	0112      	lsls	r2, r2, #4
 80093d0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093d2:	f3ef 8310 	mrs	r3, PRIMASK
 80093d6:	613b      	str	r3, [r7, #16]
  return(result);
 80093d8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80093da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093dc:	2301      	movs	r3, #1
 80093de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	f383 8810 	msr	PRIMASK, r3
}
 80093e6:	46c0      	nop			; (mov r8, r8)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4924      	ldr	r1, [pc, #144]	; (8009484 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80093f4:	400a      	ands	r2, r1
 80093f6:	601a      	str	r2, [r3, #0]
 80093f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	f383 8810 	msr	PRIMASK, r3
}
 8009402:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009404:	f3ef 8310 	mrs	r3, PRIMASK
 8009408:	61fb      	str	r3, [r7, #28]
  return(result);
 800940a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800940c:	64bb      	str	r3, [r7, #72]	; 0x48
 800940e:	2301      	movs	r3, #1
 8009410:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009412:	6a3b      	ldr	r3, [r7, #32]
 8009414:	f383 8810 	msr	PRIMASK, r3
}
 8009418:	46c0      	nop			; (mov r8, r8)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	689a      	ldr	r2, [r3, #8]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2101      	movs	r1, #1
 8009426:	438a      	bics	r2, r1
 8009428:	609a      	str	r2, [r3, #8]
 800942a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800942c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800942e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009430:	f383 8810 	msr	PRIMASK, r3
}
 8009434:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2288      	movs	r2, #136	; 0x88
 800943a:	2120      	movs	r1, #32
 800943c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	228c      	movs	r2, #140	; 0x8c
 8009442:	2120      	movs	r1, #32
 8009444:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2290      	movs	r2, #144	; 0x90
 800944a:	2120      	movs	r1, #32
 800944c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2284      	movs	r2, #132	; 0x84
 8009452:	2100      	movs	r1, #0
 8009454:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009456:	2303      	movs	r3, #3
 8009458:	e010      	b.n	800947c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	69db      	ldr	r3, [r3, #28]
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	4013      	ands	r3, r2
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	425a      	negs	r2, r3
 800946a:	4153      	adcs	r3, r2
 800946c:	b2db      	uxtb	r3, r3
 800946e:	001a      	movs	r2, r3
 8009470:	1dfb      	adds	r3, r7, #7
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	429a      	cmp	r2, r3
 8009476:	d100      	bne.n	800947a <UART_WaitOnFlagUntilTimeout+0x182>
 8009478:	e747      	b.n	800930a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	0018      	movs	r0, r3
 800947e:	46bd      	mov	sp, r7
 8009480:	b014      	add	sp, #80	; 0x50
 8009482:	bd80      	pop	{r7, pc}
 8009484:	fffffe5f 	.word	0xfffffe5f

08009488 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b090      	sub	sp, #64	; 0x40
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	1dbb      	adds	r3, r7, #6
 8009494:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	1dba      	adds	r2, r7, #6
 80094a0:	215c      	movs	r1, #92	; 0x5c
 80094a2:	8812      	ldrh	r2, [r2, #0]
 80094a4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2290      	movs	r2, #144	; 0x90
 80094aa:	2100      	movs	r1, #0
 80094ac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	228c      	movs	r2, #140	; 0x8c
 80094b2:	2122      	movs	r1, #34	; 0x22
 80094b4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2280      	movs	r2, #128	; 0x80
 80094ba:	589b      	ldr	r3, [r3, r2]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d02d      	beq.n	800951c <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2280      	movs	r2, #128	; 0x80
 80094c4:	589b      	ldr	r3, [r3, r2]
 80094c6:	4a40      	ldr	r2, [pc, #256]	; (80095c8 <UART_Start_Receive_DMA+0x140>)
 80094c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2280      	movs	r2, #128	; 0x80
 80094ce:	589b      	ldr	r3, [r3, r2]
 80094d0:	4a3e      	ldr	r2, [pc, #248]	; (80095cc <UART_Start_Receive_DMA+0x144>)
 80094d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2280      	movs	r2, #128	; 0x80
 80094d8:	589b      	ldr	r3, [r3, r2]
 80094da:	4a3d      	ldr	r2, [pc, #244]	; (80095d0 <UART_Start_Receive_DMA+0x148>)
 80094dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2280      	movs	r2, #128	; 0x80
 80094e2:	589b      	ldr	r3, [r3, r2]
 80094e4:	2200      	movs	r2, #0
 80094e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2280      	movs	r2, #128	; 0x80
 80094ec:	5898      	ldr	r0, [r3, r2]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	3324      	adds	r3, #36	; 0x24
 80094f4:	0019      	movs	r1, r3
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094fa:	001a      	movs	r2, r3
 80094fc:	1dbb      	adds	r3, r7, #6
 80094fe:	881b      	ldrh	r3, [r3, #0]
 8009500:	f7fc f81a 	bl	8005538 <HAL_DMA_Start_IT>
 8009504:	1e03      	subs	r3, r0, #0
 8009506:	d009      	beq.n	800951c <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2290      	movs	r2, #144	; 0x90
 800950c:	2110      	movs	r1, #16
 800950e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	228c      	movs	r2, #140	; 0x8c
 8009514:	2120      	movs	r1, #32
 8009516:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	e050      	b.n	80095be <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d019      	beq.n	8009558 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009524:	f3ef 8310 	mrs	r3, PRIMASK
 8009528:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800952a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800952c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800952e:	2301      	movs	r3, #1
 8009530:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009534:	f383 8810 	msr	PRIMASK, r3
}
 8009538:	46c0      	nop			; (mov r8, r8)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2180      	movs	r1, #128	; 0x80
 8009546:	0049      	lsls	r1, r1, #1
 8009548:	430a      	orrs	r2, r1
 800954a:	601a      	str	r2, [r3, #0]
 800954c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800954e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009552:	f383 8810 	msr	PRIMASK, r3
}
 8009556:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009558:	f3ef 8310 	mrs	r3, PRIMASK
 800955c:	613b      	str	r3, [r7, #16]
  return(result);
 800955e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009560:	63bb      	str	r3, [r7, #56]	; 0x38
 8009562:	2301      	movs	r3, #1
 8009564:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f383 8810 	msr	PRIMASK, r3
}
 800956c:	46c0      	nop			; (mov r8, r8)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	689a      	ldr	r2, [r3, #8]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2101      	movs	r1, #1
 800957a:	430a      	orrs	r2, r1
 800957c:	609a      	str	r2, [r3, #8]
 800957e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009580:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	f383 8810 	msr	PRIMASK, r3
}
 8009588:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800958a:	f3ef 8310 	mrs	r3, PRIMASK
 800958e:	61fb      	str	r3, [r7, #28]
  return(result);
 8009590:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009592:	637b      	str	r3, [r7, #52]	; 0x34
 8009594:	2301      	movs	r3, #1
 8009596:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009598:	6a3b      	ldr	r3, [r7, #32]
 800959a:	f383 8810 	msr	PRIMASK, r3
}
 800959e:	46c0      	nop			; (mov r8, r8)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	689a      	ldr	r2, [r3, #8]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2140      	movs	r1, #64	; 0x40
 80095ac:	430a      	orrs	r2, r1
 80095ae:	609a      	str	r2, [r3, #8]
 80095b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b6:	f383 8810 	msr	PRIMASK, r3
}
 80095ba:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	0018      	movs	r0, r3
 80095c0:	46bd      	mov	sp, r7
 80095c2:	b010      	add	sp, #64	; 0x40
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	46c0      	nop			; (mov r8, r8)
 80095c8:	080097d9 	.word	0x080097d9
 80095cc:	08009909 	.word	0x08009909
 80095d0:	0800994b 	.word	0x0800994b

080095d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b08a      	sub	sp, #40	; 0x28
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095dc:	f3ef 8310 	mrs	r3, PRIMASK
 80095e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80095e2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80095e4:	627b      	str	r3, [r7, #36]	; 0x24
 80095e6:	2301      	movs	r3, #1
 80095e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f383 8810 	msr	PRIMASK, r3
}
 80095f0:	46c0      	nop			; (mov r8, r8)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	21c0      	movs	r1, #192	; 0xc0
 80095fe:	438a      	bics	r2, r1
 8009600:	601a      	str	r2, [r3, #0]
 8009602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009604:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	f383 8810 	msr	PRIMASK, r3
}
 800960c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800960e:	f3ef 8310 	mrs	r3, PRIMASK
 8009612:	617b      	str	r3, [r7, #20]
  return(result);
 8009614:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009616:	623b      	str	r3, [r7, #32]
 8009618:	2301      	movs	r3, #1
 800961a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	f383 8810 	msr	PRIMASK, r3
}
 8009622:	46c0      	nop			; (mov r8, r8)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	689a      	ldr	r2, [r3, #8]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4908      	ldr	r1, [pc, #32]	; (8009650 <UART_EndTxTransfer+0x7c>)
 8009630:	400a      	ands	r2, r1
 8009632:	609a      	str	r2, [r3, #8]
 8009634:	6a3b      	ldr	r3, [r7, #32]
 8009636:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	f383 8810 	msr	PRIMASK, r3
}
 800963e:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2288      	movs	r2, #136	; 0x88
 8009644:	2120      	movs	r1, #32
 8009646:	5099      	str	r1, [r3, r2]
}
 8009648:	46c0      	nop			; (mov r8, r8)
 800964a:	46bd      	mov	sp, r7
 800964c:	b00a      	add	sp, #40	; 0x28
 800964e:	bd80      	pop	{r7, pc}
 8009650:	ff7fffff 	.word	0xff7fffff

08009654 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b08e      	sub	sp, #56	; 0x38
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800965c:	f3ef 8310 	mrs	r3, PRIMASK
 8009660:	617b      	str	r3, [r7, #20]
  return(result);
 8009662:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009664:	637b      	str	r3, [r7, #52]	; 0x34
 8009666:	2301      	movs	r3, #1
 8009668:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	f383 8810 	msr	PRIMASK, r3
}
 8009670:	46c0      	nop			; (mov r8, r8)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4926      	ldr	r1, [pc, #152]	; (8009718 <UART_EndRxTransfer+0xc4>)
 800967e:	400a      	ands	r2, r1
 8009680:	601a      	str	r2, [r3, #0]
 8009682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009684:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	f383 8810 	msr	PRIMASK, r3
}
 800968c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800968e:	f3ef 8310 	mrs	r3, PRIMASK
 8009692:	623b      	str	r3, [r7, #32]
  return(result);
 8009694:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009696:	633b      	str	r3, [r7, #48]	; 0x30
 8009698:	2301      	movs	r3, #1
 800969a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800969c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969e:	f383 8810 	msr	PRIMASK, r3
}
 80096a2:	46c0      	nop			; (mov r8, r8)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	689a      	ldr	r2, [r3, #8]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	491b      	ldr	r1, [pc, #108]	; (800971c <UART_EndRxTransfer+0xc8>)
 80096b0:	400a      	ands	r2, r1
 80096b2:	609a      	str	r2, [r3, #8]
 80096b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ba:	f383 8810 	msr	PRIMASK, r3
}
 80096be:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d118      	bne.n	80096fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096c8:	f3ef 8310 	mrs	r3, PRIMASK
 80096cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80096ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096d2:	2301      	movs	r3, #1
 80096d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f383 8810 	msr	PRIMASK, r3
}
 80096dc:	46c0      	nop			; (mov r8, r8)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2110      	movs	r1, #16
 80096ea:	438a      	bics	r2, r1
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	f383 8810 	msr	PRIMASK, r3
}
 80096f8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	228c      	movs	r2, #140	; 0x8c
 80096fe:	2120      	movs	r1, #32
 8009700:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800970e:	46c0      	nop			; (mov r8, r8)
 8009710:	46bd      	mov	sp, r7
 8009712:	b00e      	add	sp, #56	; 0x38
 8009714:	bd80      	pop	{r7, pc}
 8009716:	46c0      	nop			; (mov r8, r8)
 8009718:	fffffedf 	.word	0xfffffedf
 800971c:	effffffe 	.word	0xeffffffe

08009720 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b08c      	sub	sp, #48	; 0x30
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800972c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2220      	movs	r2, #32
 8009736:	4013      	ands	r3, r2
 8009738:	d135      	bne.n	80097a6 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800973a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973c:	2256      	movs	r2, #86	; 0x56
 800973e:	2100      	movs	r1, #0
 8009740:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009742:	f3ef 8310 	mrs	r3, PRIMASK
 8009746:	60fb      	str	r3, [r7, #12]
  return(result);
 8009748:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800974a:	62bb      	str	r3, [r7, #40]	; 0x28
 800974c:	2301      	movs	r3, #1
 800974e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	f383 8810 	msr	PRIMASK, r3
}
 8009756:	46c0      	nop			; (mov r8, r8)
 8009758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	689a      	ldr	r2, [r3, #8]
 800975e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2180      	movs	r1, #128	; 0x80
 8009764:	438a      	bics	r2, r1
 8009766:	609a      	str	r2, [r3, #8]
 8009768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	f383 8810 	msr	PRIMASK, r3
}
 8009772:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009774:	f3ef 8310 	mrs	r3, PRIMASK
 8009778:	61bb      	str	r3, [r7, #24]
  return(result);
 800977a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800977c:	627b      	str	r3, [r7, #36]	; 0x24
 800977e:	2301      	movs	r3, #1
 8009780:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	f383 8810 	msr	PRIMASK, r3
}
 8009788:	46c0      	nop			; (mov r8, r8)
 800978a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2140      	movs	r1, #64	; 0x40
 8009796:	430a      	orrs	r2, r1
 8009798:	601a      	str	r2, [r3, #0]
 800979a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800979e:	6a3b      	ldr	r3, [r7, #32]
 80097a0:	f383 8810 	msr	PRIMASK, r3
}
 80097a4:	e004      	b.n	80097b0 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 80097a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a8:	0018      	movs	r0, r3
 80097aa:	f7ff fad3 	bl	8008d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80097ae:	46c0      	nop			; (mov r8, r8)
 80097b0:	46c0      	nop			; (mov r8, r8)
 80097b2:	46bd      	mov	sp, r7
 80097b4:	b00c      	add	sp, #48	; 0x30
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	0018      	movs	r0, r3
 80097ca:	f7ff facb 	bl	8008d64 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097ce:	46c0      	nop			; (mov r8, r8)
 80097d0:	46bd      	mov	sp, r7
 80097d2:	b004      	add	sp, #16
 80097d4:	bd80      	pop	{r7, pc}
	...

080097d8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b094      	sub	sp, #80	; 0x50
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e4:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2220      	movs	r2, #32
 80097ee:	4013      	ands	r3, r2
 80097f0:	d16f      	bne.n	80098d2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80097f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097f4:	225e      	movs	r2, #94	; 0x5e
 80097f6:	2100      	movs	r1, #0
 80097f8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097fa:	f3ef 8310 	mrs	r3, PRIMASK
 80097fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8009800:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009802:	64bb      	str	r3, [r7, #72]	; 0x48
 8009804:	2301      	movs	r3, #1
 8009806:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	f383 8810 	msr	PRIMASK, r3
}
 800980e:	46c0      	nop			; (mov r8, r8)
 8009810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	493a      	ldr	r1, [pc, #232]	; (8009904 <UART_DMAReceiveCplt+0x12c>)
 800981c:	400a      	ands	r2, r1
 800981e:	601a      	str	r2, [r3, #0]
 8009820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009822:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009824:	6a3b      	ldr	r3, [r7, #32]
 8009826:	f383 8810 	msr	PRIMASK, r3
}
 800982a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800982c:	f3ef 8310 	mrs	r3, PRIMASK
 8009830:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009834:	647b      	str	r3, [r7, #68]	; 0x44
 8009836:	2301      	movs	r3, #1
 8009838:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800983a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983c:	f383 8810 	msr	PRIMASK, r3
}
 8009840:	46c0      	nop			; (mov r8, r8)
 8009842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	689a      	ldr	r2, [r3, #8]
 8009848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2101      	movs	r1, #1
 800984e:	438a      	bics	r2, r1
 8009850:	609a      	str	r2, [r3, #8]
 8009852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009854:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009858:	f383 8810 	msr	PRIMASK, r3
}
 800985c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800985e:	f3ef 8310 	mrs	r3, PRIMASK
 8009862:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009864:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009866:	643b      	str	r3, [r7, #64]	; 0x40
 8009868:	2301      	movs	r3, #1
 800986a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800986c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800986e:	f383 8810 	msr	PRIMASK, r3
}
 8009872:	46c0      	nop			; (mov r8, r8)
 8009874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	689a      	ldr	r2, [r3, #8]
 800987a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2140      	movs	r1, #64	; 0x40
 8009880:	438a      	bics	r2, r1
 8009882:	609a      	str	r2, [r3, #8]
 8009884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009886:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988a:	f383 8810 	msr	PRIMASK, r3
}
 800988e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009892:	228c      	movs	r2, #140	; 0x8c
 8009894:	2120      	movs	r1, #32
 8009896:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800989a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800989c:	2b01      	cmp	r3, #1
 800989e:	d118      	bne.n	80098d2 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098a0:	f3ef 8310 	mrs	r3, PRIMASK
 80098a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80098a6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098aa:	2301      	movs	r3, #1
 80098ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	f383 8810 	msr	PRIMASK, r3
}
 80098b4:	46c0      	nop			; (mov r8, r8)
 80098b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2110      	movs	r1, #16
 80098c2:	438a      	bics	r2, r1
 80098c4:	601a      	str	r2, [r3, #0]
 80098c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	f383 8810 	msr	PRIMASK, r3
}
 80098d0:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098d4:	2200      	movs	r2, #0
 80098d6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d108      	bne.n	80098f2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098e2:	225c      	movs	r2, #92	; 0x5c
 80098e4:	5a9a      	ldrh	r2, [r3, r2]
 80098e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098e8:	0011      	movs	r1, r2
 80098ea:	0018      	movs	r0, r3
 80098ec:	f7ff fa52 	bl	8008d94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80098f0:	e003      	b.n	80098fa <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 80098f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098f4:	0018      	movs	r0, r3
 80098f6:	f002 fe65 	bl	800c5c4 <HAL_UART_RxCpltCallback>
}
 80098fa:	46c0      	nop			; (mov r8, r8)
 80098fc:	46bd      	mov	sp, r7
 80098fe:	b014      	add	sp, #80	; 0x50
 8009900:	bd80      	pop	{r7, pc}
 8009902:	46c0      	nop			; (mov r8, r8)
 8009904:	fffffeff 	.word	0xfffffeff

08009908 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009914:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2201      	movs	r2, #1
 800991a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009920:	2b01      	cmp	r3, #1
 8009922:	d10a      	bne.n	800993a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	225c      	movs	r2, #92	; 0x5c
 8009928:	5a9b      	ldrh	r3, [r3, r2]
 800992a:	085b      	lsrs	r3, r3, #1
 800992c:	b29a      	uxth	r2, r3
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	0011      	movs	r1, r2
 8009932:	0018      	movs	r0, r3
 8009934:	f7ff fa2e 	bl	8008d94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009938:	e003      	b.n	8009942 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	0018      	movs	r0, r3
 800993e:	f7ff fa19 	bl	8008d74 <HAL_UART_RxHalfCpltCallback>
}
 8009942:	46c0      	nop			; (mov r8, r8)
 8009944:	46bd      	mov	sp, r7
 8009946:	b004      	add	sp, #16
 8009948:	bd80      	pop	{r7, pc}

0800994a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b086      	sub	sp, #24
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009956:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	2288      	movs	r2, #136	; 0x88
 800995c:	589b      	ldr	r3, [r3, r2]
 800995e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	228c      	movs	r2, #140	; 0x8c
 8009964:	589b      	ldr	r3, [r3, r2]
 8009966:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	2280      	movs	r2, #128	; 0x80
 8009970:	4013      	ands	r3, r2
 8009972:	2b80      	cmp	r3, #128	; 0x80
 8009974:	d10a      	bne.n	800998c <UART_DMAError+0x42>
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	2b21      	cmp	r3, #33	; 0x21
 800997a:	d107      	bne.n	800998c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	2256      	movs	r2, #86	; 0x56
 8009980:	2100      	movs	r1, #0
 8009982:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	0018      	movs	r0, r3
 8009988:	f7ff fe24 	bl	80095d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	2240      	movs	r2, #64	; 0x40
 8009994:	4013      	ands	r3, r2
 8009996:	2b40      	cmp	r3, #64	; 0x40
 8009998:	d10a      	bne.n	80099b0 <UART_DMAError+0x66>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2b22      	cmp	r3, #34	; 0x22
 800999e:	d107      	bne.n	80099b0 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	225e      	movs	r2, #94	; 0x5e
 80099a4:	2100      	movs	r1, #0
 80099a6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	0018      	movs	r0, r3
 80099ac:	f7ff fe52 	bl	8009654 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	2290      	movs	r2, #144	; 0x90
 80099b4:	589b      	ldr	r3, [r3, r2]
 80099b6:	2210      	movs	r2, #16
 80099b8:	431a      	orrs	r2, r3
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	2190      	movs	r1, #144	; 0x90
 80099be:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	0018      	movs	r0, r3
 80099c4:	f7ff f9de 	bl	8008d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099c8:	46c0      	nop			; (mov r8, r8)
 80099ca:	46bd      	mov	sp, r7
 80099cc:	b006      	add	sp, #24
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	225e      	movs	r2, #94	; 0x5e
 80099e2:	2100      	movs	r1, #0
 80099e4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2256      	movs	r2, #86	; 0x56
 80099ea:	2100      	movs	r1, #0
 80099ec:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	0018      	movs	r0, r3
 80099f2:	f7ff f9c7 	bl	8008d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099f6:	46c0      	nop			; (mov r8, r8)
 80099f8:	46bd      	mov	sp, r7
 80099fa:	b004      	add	sp, #16
 80099fc:	bd80      	pop	{r7, pc}

080099fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b086      	sub	sp, #24
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a06:	f3ef 8310 	mrs	r3, PRIMASK
 8009a0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a0c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a0e:	617b      	str	r3, [r7, #20]
 8009a10:	2301      	movs	r3, #1
 8009a12:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f383 8810 	msr	PRIMASK, r3
}
 8009a1a:	46c0      	nop			; (mov r8, r8)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2140      	movs	r1, #64	; 0x40
 8009a28:	438a      	bics	r2, r1
 8009a2a:	601a      	str	r2, [r3, #0]
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	f383 8810 	msr	PRIMASK, r3
}
 8009a36:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2288      	movs	r2, #136	; 0x88
 8009a3c:	2120      	movs	r1, #32
 8009a3e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	0018      	movs	r0, r3
 8009a4a:	f7ff f983 	bl	8008d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a4e:	46c0      	nop			; (mov r8, r8)
 8009a50:	46bd      	mov	sp, r7
 8009a52:	b006      	add	sp, #24
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b082      	sub	sp, #8
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009a5e:	46c0      	nop			; (mov r8, r8)
 8009a60:	46bd      	mov	sp, r7
 8009a62:	b002      	add	sp, #8
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b082      	sub	sp, #8
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009a6e:	46c0      	nop			; (mov r8, r8)
 8009a70:	46bd      	mov	sp, r7
 8009a72:	b002      	add	sp, #8
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b082      	sub	sp, #8
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009a7e:	46c0      	nop			; (mov r8, r8)
 8009a80:	46bd      	mov	sp, r7
 8009a82:	b002      	add	sp, #8
 8009a84:	bd80      	pop	{r7, pc}
	...

08009a88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2284      	movs	r2, #132	; 0x84
 8009a94:	5c9b      	ldrb	r3, [r3, r2]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d101      	bne.n	8009a9e <HAL_UARTEx_DisableFifoMode+0x16>
 8009a9a:	2302      	movs	r3, #2
 8009a9c:	e027      	b.n	8009aee <HAL_UARTEx_DisableFifoMode+0x66>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2284      	movs	r2, #132	; 0x84
 8009aa2:	2101      	movs	r1, #1
 8009aa4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2288      	movs	r2, #136	; 0x88
 8009aaa:	2124      	movs	r1, #36	; 0x24
 8009aac:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2101      	movs	r1, #1
 8009ac2:	438a      	bics	r2, r1
 8009ac4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	4a0b      	ldr	r2, [pc, #44]	; (8009af8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8009aca:	4013      	ands	r3, r2
 8009acc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2288      	movs	r2, #136	; 0x88
 8009ae0:	2120      	movs	r1, #32
 8009ae2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2284      	movs	r2, #132	; 0x84
 8009ae8:	2100      	movs	r1, #0
 8009aea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	0018      	movs	r0, r3
 8009af0:	46bd      	mov	sp, r7
 8009af2:	b004      	add	sp, #16
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	46c0      	nop			; (mov r8, r8)
 8009af8:	dfffffff 	.word	0xdfffffff

08009afc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2284      	movs	r2, #132	; 0x84
 8009b0a:	5c9b      	ldrb	r3, [r3, r2]
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d101      	bne.n	8009b14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b10:	2302      	movs	r3, #2
 8009b12:	e02e      	b.n	8009b72 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2284      	movs	r2, #132	; 0x84
 8009b18:	2101      	movs	r1, #1
 8009b1a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2288      	movs	r2, #136	; 0x88
 8009b20:	2124      	movs	r1, #36	; 0x24
 8009b22:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2101      	movs	r1, #1
 8009b38:	438a      	bics	r2, r1
 8009b3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	00db      	lsls	r3, r3, #3
 8009b44:	08d9      	lsrs	r1, r3, #3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	683a      	ldr	r2, [r7, #0]
 8009b4c:	430a      	orrs	r2, r1
 8009b4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	0018      	movs	r0, r3
 8009b54:	f000 f854 	bl	8009c00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2288      	movs	r2, #136	; 0x88
 8009b64:	2120      	movs	r1, #32
 8009b66:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2284      	movs	r2, #132	; 0x84
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	0018      	movs	r0, r3
 8009b74:	46bd      	mov	sp, r7
 8009b76:	b004      	add	sp, #16
 8009b78:	bd80      	pop	{r7, pc}
	...

08009b7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2284      	movs	r2, #132	; 0x84
 8009b8a:	5c9b      	ldrb	r3, [r3, r2]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d101      	bne.n	8009b94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b90:	2302      	movs	r3, #2
 8009b92:	e02f      	b.n	8009bf4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2284      	movs	r2, #132	; 0x84
 8009b98:	2101      	movs	r1, #1
 8009b9a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2288      	movs	r2, #136	; 0x88
 8009ba0:	2124      	movs	r1, #36	; 0x24
 8009ba2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2101      	movs	r1, #1
 8009bb8:	438a      	bics	r2, r1
 8009bba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	4a0e      	ldr	r2, [pc, #56]	; (8009bfc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	0019      	movs	r1, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	683a      	ldr	r2, [r7, #0]
 8009bce:	430a      	orrs	r2, r1
 8009bd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	0018      	movs	r0, r3
 8009bd6:	f000 f813 	bl	8009c00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2288      	movs	r2, #136	; 0x88
 8009be6:	2120      	movs	r1, #32
 8009be8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2284      	movs	r2, #132	; 0x84
 8009bee:	2100      	movs	r1, #0
 8009bf0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009bf2:	2300      	movs	r3, #0
}
 8009bf4:	0018      	movs	r0, r3
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	b004      	add	sp, #16
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	f1ffffff 	.word	0xf1ffffff

08009c00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d108      	bne.n	8009c22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	226a      	movs	r2, #106	; 0x6a
 8009c14:	2101      	movs	r1, #1
 8009c16:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2268      	movs	r2, #104	; 0x68
 8009c1c:	2101      	movs	r1, #1
 8009c1e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c20:	e043      	b.n	8009caa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c22:	260f      	movs	r6, #15
 8009c24:	19bb      	adds	r3, r7, r6
 8009c26:	2208      	movs	r2, #8
 8009c28:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c2a:	200e      	movs	r0, #14
 8009c2c:	183b      	adds	r3, r7, r0
 8009c2e:	2208      	movs	r2, #8
 8009c30:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	0e5b      	lsrs	r3, r3, #25
 8009c3a:	b2da      	uxtb	r2, r3
 8009c3c:	240d      	movs	r4, #13
 8009c3e:	193b      	adds	r3, r7, r4
 8009c40:	2107      	movs	r1, #7
 8009c42:	400a      	ands	r2, r1
 8009c44:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	0f5b      	lsrs	r3, r3, #29
 8009c4e:	b2da      	uxtb	r2, r3
 8009c50:	250c      	movs	r5, #12
 8009c52:	197b      	adds	r3, r7, r5
 8009c54:	2107      	movs	r1, #7
 8009c56:	400a      	ands	r2, r1
 8009c58:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c5a:	183b      	adds	r3, r7, r0
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	197a      	adds	r2, r7, r5
 8009c60:	7812      	ldrb	r2, [r2, #0]
 8009c62:	4914      	ldr	r1, [pc, #80]	; (8009cb4 <UARTEx_SetNbDataToProcess+0xb4>)
 8009c64:	5c8a      	ldrb	r2, [r1, r2]
 8009c66:	435a      	muls	r2, r3
 8009c68:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c6a:	197b      	adds	r3, r7, r5
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	4a12      	ldr	r2, [pc, #72]	; (8009cb8 <UARTEx_SetNbDataToProcess+0xb8>)
 8009c70:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c72:	0019      	movs	r1, r3
 8009c74:	f7f6 fae4 	bl	8000240 <__divsi3>
 8009c78:	0003      	movs	r3, r0
 8009c7a:	b299      	uxth	r1, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	226a      	movs	r2, #106	; 0x6a
 8009c80:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c82:	19bb      	adds	r3, r7, r6
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	193a      	adds	r2, r7, r4
 8009c88:	7812      	ldrb	r2, [r2, #0]
 8009c8a:	490a      	ldr	r1, [pc, #40]	; (8009cb4 <UARTEx_SetNbDataToProcess+0xb4>)
 8009c8c:	5c8a      	ldrb	r2, [r1, r2]
 8009c8e:	435a      	muls	r2, r3
 8009c90:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c92:	193b      	adds	r3, r7, r4
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	4a08      	ldr	r2, [pc, #32]	; (8009cb8 <UARTEx_SetNbDataToProcess+0xb8>)
 8009c98:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c9a:	0019      	movs	r1, r3
 8009c9c:	f7f6 fad0 	bl	8000240 <__divsi3>
 8009ca0:	0003      	movs	r3, r0
 8009ca2:	b299      	uxth	r1, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2268      	movs	r2, #104	; 0x68
 8009ca8:	5299      	strh	r1, [r3, r2]
}
 8009caa:	46c0      	nop			; (mov r8, r8)
 8009cac:	46bd      	mov	sp, r7
 8009cae:	b005      	add	sp, #20
 8009cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cb2:	46c0      	nop			; (mov r8, r8)
 8009cb4:	0801102c 	.word	0x0801102c
 8009cb8:	08011034 	.word	0x08011034

08009cbc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	0002      	movs	r2, r0
 8009cc4:	1dbb      	adds	r3, r7, #6
 8009cc6:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009ccc:	1dbb      	adds	r3, r7, #6
 8009cce:	2200      	movs	r2, #0
 8009cd0:	5e9b      	ldrsh	r3, [r3, r2]
 8009cd2:	2b84      	cmp	r3, #132	; 0x84
 8009cd4:	d006      	beq.n	8009ce4 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8009cd6:	1dbb      	adds	r3, r7, #6
 8009cd8:	2200      	movs	r2, #0
 8009cda:	5e9a      	ldrsh	r2, [r3, r2]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	18d3      	adds	r3, r2, r3
 8009ce0:	3303      	adds	r3, #3
 8009ce2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
}
 8009ce6:	0018      	movs	r0, r3
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	b004      	add	sp, #16
 8009cec:	bd80      	pop	{r7, pc}

08009cee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009cf2:	f000 ffaf 	bl	800ac54 <vTaskStartScheduler>
  
  return osOK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	0018      	movs	r0, r3
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d00:	b087      	sub	sp, #28
 8009d02:	af02      	add	r7, sp, #8
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	685c      	ldr	r4, [r3, #4]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d14:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2208      	movs	r2, #8
 8009d1a:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d1c:	0018      	movs	r0, r3
 8009d1e:	f7ff ffcd 	bl	8009cbc <makeFreeRtosPriority>
 8009d22:	0001      	movs	r1, r0
 8009d24:	683a      	ldr	r2, [r7, #0]
 8009d26:	230c      	movs	r3, #12
 8009d28:	18fb      	adds	r3, r7, r3
 8009d2a:	9301      	str	r3, [sp, #4]
 8009d2c:	9100      	str	r1, [sp, #0]
 8009d2e:	0013      	movs	r3, r2
 8009d30:	0032      	movs	r2, r6
 8009d32:	0029      	movs	r1, r5
 8009d34:	0020      	movs	r0, r4
 8009d36:	f000 fe2a 	bl	800a98e <xTaskCreate>
 8009d3a:	0003      	movs	r3, r0
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d001      	beq.n	8009d44 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8009d40:	2300      	movs	r3, #0
 8009d42:	e000      	b.n	8009d46 <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8009d44:	68fb      	ldr	r3, [r7, #12]
}
 8009d46:	0018      	movs	r0, r3
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	b005      	add	sp, #20
 8009d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d4e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b084      	sub	sp, #16
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <osDelay+0x16>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	e000      	b.n	8009d66 <osDelay+0x18>
 8009d64:	2301      	movs	r3, #1
 8009d66:	0018      	movs	r0, r3
 8009d68:	f000 ff4e 	bl	800ac08 <vTaskDelay>
  
  return osOK;
 8009d6c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009d6e:	0018      	movs	r0, r3
 8009d70:	46bd      	mov	sp, r7
 8009d72:	b004      	add	sp, #16
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b082      	sub	sp, #8
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	3308      	adds	r3, #8
 8009d82:	001a      	movs	r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	4252      	negs	r2, r2
 8009d8e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	3308      	adds	r3, #8
 8009d94:	001a      	movs	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	3308      	adds	r3, #8
 8009d9e:	001a      	movs	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009daa:	46c0      	nop			; (mov r8, r8)
 8009dac:	46bd      	mov	sp, r7
 8009dae:	b002      	add	sp, #8
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b082      	sub	sp, #8
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009dc0:	46c0      	nop			; (mov r8, r8)
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	b002      	add	sp, #8
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	689a      	ldr	r2, [r3, #8]
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	683a      	ldr	r2, [r7, #0]
 8009dec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	683a      	ldr	r2, [r7, #0]
 8009df2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	1c5a      	adds	r2, r3, #1
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	601a      	str	r2, [r3, #0]
}
 8009e04:	46c0      	nop			; (mov r8, r8)
 8009e06:	46bd      	mov	sp, r7
 8009e08:	b004      	add	sp, #16
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	d103      	bne.n	8009e2a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	60fb      	str	r3, [r7, #12]
 8009e28:	e00c      	b.n	8009e44 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	3308      	adds	r3, #8
 8009e2e:	60fb      	str	r3, [r7, #12]
 8009e30:	e002      	b.n	8009e38 <vListInsert+0x2c>
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	60fb      	str	r3, [r7, #12]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	68ba      	ldr	r2, [r7, #8]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d2f6      	bcs.n	8009e32 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	685a      	ldr	r2, [r3, #4]
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	683a      	ldr	r2, [r7, #0]
 8009e52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	68fa      	ldr	r2, [r7, #12]
 8009e58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	683a      	ldr	r2, [r7, #0]
 8009e5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	1c5a      	adds	r2, r3, #1
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	601a      	str	r2, [r3, #0]
}
 8009e70:	46c0      	nop			; (mov r8, r8)
 8009e72:	46bd      	mov	sp, r7
 8009e74:	b004      	add	sp, #16
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	691b      	ldr	r3, [r3, #16]
 8009e84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	6892      	ldr	r2, [r2, #8]
 8009e8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	6852      	ldr	r2, [r2, #4]
 8009e98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d103      	bne.n	8009eac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	689a      	ldr	r2, [r3, #8]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	1e5a      	subs	r2, r3, #1
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
}
 8009ec0:	0018      	movs	r0, r3
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	b004      	add	sp, #16
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d101      	bne.n	8009ee0 <xQueueGenericReset+0x18>
 8009edc:	b672      	cpsid	i
 8009ede:	e7fe      	b.n	8009ede <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8009ee0:	f002 f926 	bl	800c130 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef0:	434b      	muls	r3, r1
 8009ef2:	18d2      	adds	r2, r2, r3
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2200      	movs	r2, #0
 8009efc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f0e:	1e59      	subs	r1, r3, #1
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f14:	434b      	muls	r3, r1
 8009f16:	18d2      	adds	r2, r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2244      	movs	r2, #68	; 0x44
 8009f20:	21ff      	movs	r1, #255	; 0xff
 8009f22:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2245      	movs	r2, #69	; 0x45
 8009f28:	21ff      	movs	r1, #255	; 0xff
 8009f2a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10d      	bne.n	8009f4e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d013      	beq.n	8009f62 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3310      	adds	r3, #16
 8009f3e:	0018      	movs	r0, r3
 8009f40:	f001 f8ce 	bl	800b0e0 <xTaskRemoveFromEventList>
 8009f44:	1e03      	subs	r3, r0, #0
 8009f46:	d00c      	beq.n	8009f62 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009f48:	f002 f8e2 	bl	800c110 <vPortYield>
 8009f4c:	e009      	b.n	8009f62 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	3310      	adds	r3, #16
 8009f52:	0018      	movs	r0, r3
 8009f54:	f7ff ff0f 	bl	8009d76 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	3324      	adds	r3, #36	; 0x24
 8009f5c:	0018      	movs	r0, r3
 8009f5e:	f7ff ff0a 	bl	8009d76 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f62:	f002 f8f7 	bl	800c154 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f66:	2301      	movs	r3, #1
}
 8009f68:	0018      	movs	r0, r3
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	b004      	add	sp, #16
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009f70:	b590      	push	{r4, r7, lr}
 8009f72:	b08b      	sub	sp, #44	; 0x2c
 8009f74:	af02      	add	r7, sp, #8
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	1dfb      	adds	r3, r7, #7
 8009f7c:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d101      	bne.n	8009f88 <xQueueGenericCreate+0x18>
 8009f84:	b672      	cpsid	i
 8009f86:	e7fe      	b.n	8009f86 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	4353      	muls	r3, r2
 8009f8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	3350      	adds	r3, #80	; 0x50
 8009f94:	0018      	movs	r0, r3
 8009f96:	f002 f963 	bl	800c260 <pvPortMalloc>
 8009f9a:	0003      	movs	r3, r0
 8009f9c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d00e      	beq.n	8009fc2 <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	3350      	adds	r3, #80	; 0x50
 8009fac:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009fae:	1dfb      	adds	r3, r7, #7
 8009fb0:	781c      	ldrb	r4, [r3, #0]
 8009fb2:	697a      	ldr	r2, [r7, #20]
 8009fb4:	68b9      	ldr	r1, [r7, #8]
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	9300      	str	r3, [sp, #0]
 8009fbc:	0023      	movs	r3, r4
 8009fbe:	f000 f805 	bl	8009fcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009fc2:	69bb      	ldr	r3, [r7, #24]
	}
 8009fc4:	0018      	movs	r0, r3
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	b009      	add	sp, #36	; 0x24
 8009fca:	bd90      	pop	{r4, r7, pc}

08009fcc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
 8009fd8:	001a      	movs	r2, r3
 8009fda:	1cfb      	adds	r3, r7, #3
 8009fdc:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d103      	bne.n	8009fec <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	69ba      	ldr	r2, [r7, #24]
 8009fe8:	601a      	str	r2, [r3, #0]
 8009fea:	e002      	b.n	8009ff2 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	2101      	movs	r1, #1
 800a002:	0018      	movs	r0, r3
 800a004:	f7ff ff60 	bl	8009ec8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a008:	69bb      	ldr	r3, [r7, #24]
 800a00a:	1cfa      	adds	r2, r7, #3
 800a00c:	214c      	movs	r1, #76	; 0x4c
 800a00e:	7812      	ldrb	r2, [r2, #0]
 800a010:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a012:	46c0      	nop			; (mov r8, r8)
 800a014:	46bd      	mov	sp, r7
 800a016:	b004      	add	sp, #16
 800a018:	bd80      	pop	{r7, pc}

0800a01a <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b08a      	sub	sp, #40	; 0x28
 800a01e:	af00      	add	r7, sp, #0
 800a020:	60f8      	str	r0, [r7, #12]
 800a022:	60b9      	str	r1, [r7, #8]
 800a024:	607a      	str	r2, [r7, #4]
 800a026:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a028:	2300      	movs	r3, #0
 800a02a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800a030:	6a3b      	ldr	r3, [r7, #32]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d101      	bne.n	800a03a <xQueueGenericSend+0x20>
 800a036:	b672      	cpsid	i
 800a038:	e7fe      	b.n	800a038 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d103      	bne.n	800a048 <xQueueGenericSend+0x2e>
 800a040:	6a3b      	ldr	r3, [r7, #32]
 800a042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a044:	2b00      	cmp	r3, #0
 800a046:	d101      	bne.n	800a04c <xQueueGenericSend+0x32>
 800a048:	2301      	movs	r3, #1
 800a04a:	e000      	b.n	800a04e <xQueueGenericSend+0x34>
 800a04c:	2300      	movs	r3, #0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d101      	bne.n	800a056 <xQueueGenericSend+0x3c>
 800a052:	b672      	cpsid	i
 800a054:	e7fe      	b.n	800a054 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	2b02      	cmp	r3, #2
 800a05a:	d103      	bne.n	800a064 <xQueueGenericSend+0x4a>
 800a05c:	6a3b      	ldr	r3, [r7, #32]
 800a05e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a060:	2b01      	cmp	r3, #1
 800a062:	d101      	bne.n	800a068 <xQueueGenericSend+0x4e>
 800a064:	2301      	movs	r3, #1
 800a066:	e000      	b.n	800a06a <xQueueGenericSend+0x50>
 800a068:	2300      	movs	r3, #0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d101      	bne.n	800a072 <xQueueGenericSend+0x58>
 800a06e:	b672      	cpsid	i
 800a070:	e7fe      	b.n	800a070 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a072:	f001 f9b1 	bl	800b3d8 <xTaskGetSchedulerState>
 800a076:	1e03      	subs	r3, r0, #0
 800a078:	d102      	bne.n	800a080 <xQueueGenericSend+0x66>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d101      	bne.n	800a084 <xQueueGenericSend+0x6a>
 800a080:	2301      	movs	r3, #1
 800a082:	e000      	b.n	800a086 <xQueueGenericSend+0x6c>
 800a084:	2300      	movs	r3, #0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d101      	bne.n	800a08e <xQueueGenericSend+0x74>
 800a08a:	b672      	cpsid	i
 800a08c:	e7fe      	b.n	800a08c <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a08e:	f002 f84f 	bl	800c130 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a096:	6a3b      	ldr	r3, [r7, #32]
 800a098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d302      	bcc.n	800a0a4 <xQueueGenericSend+0x8a>
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d11e      	bne.n	800a0e2 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0a4:	683a      	ldr	r2, [r7, #0]
 800a0a6:	68b9      	ldr	r1, [r7, #8]
 800a0a8:	6a3b      	ldr	r3, [r7, #32]
 800a0aa:	0018      	movs	r0, r3
 800a0ac:	f000 faf7 	bl	800a69e <prvCopyDataToQueue>
 800a0b0:	0003      	movs	r3, r0
 800a0b2:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0b4:	6a3b      	ldr	r3, [r7, #32]
 800a0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d009      	beq.n	800a0d0 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0bc:	6a3b      	ldr	r3, [r7, #32]
 800a0be:	3324      	adds	r3, #36	; 0x24
 800a0c0:	0018      	movs	r0, r3
 800a0c2:	f001 f80d 	bl	800b0e0 <xTaskRemoveFromEventList>
 800a0c6:	1e03      	subs	r3, r0, #0
 800a0c8:	d007      	beq.n	800a0da <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a0ca:	f002 f821 	bl	800c110 <vPortYield>
 800a0ce:	e004      	b.n	800a0da <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d001      	beq.n	800a0da <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a0d6:	f002 f81b 	bl	800c110 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a0da:	f002 f83b 	bl	800c154 <vPortExitCritical>
				return pdPASS;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e05b      	b.n	800a19a <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d103      	bne.n	800a0f0 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0e8:	f002 f834 	bl	800c154 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	e054      	b.n	800a19a <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d106      	bne.n	800a104 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0f6:	2314      	movs	r3, #20
 800a0f8:	18fb      	adds	r3, r7, r3
 800a0fa:	0018      	movs	r0, r3
 800a0fc:	f001 f84c 	bl	800b198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a100:	2301      	movs	r3, #1
 800a102:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a104:	f002 f826 	bl	800c154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a108:	f000 fde2 	bl	800acd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a10c:	f002 f810 	bl	800c130 <vPortEnterCritical>
 800a110:	6a3b      	ldr	r3, [r7, #32]
 800a112:	2244      	movs	r2, #68	; 0x44
 800a114:	5c9b      	ldrb	r3, [r3, r2]
 800a116:	b25b      	sxtb	r3, r3
 800a118:	3301      	adds	r3, #1
 800a11a:	d103      	bne.n	800a124 <xQueueGenericSend+0x10a>
 800a11c:	6a3b      	ldr	r3, [r7, #32]
 800a11e:	2244      	movs	r2, #68	; 0x44
 800a120:	2100      	movs	r1, #0
 800a122:	5499      	strb	r1, [r3, r2]
 800a124:	6a3b      	ldr	r3, [r7, #32]
 800a126:	2245      	movs	r2, #69	; 0x45
 800a128:	5c9b      	ldrb	r3, [r3, r2]
 800a12a:	b25b      	sxtb	r3, r3
 800a12c:	3301      	adds	r3, #1
 800a12e:	d103      	bne.n	800a138 <xQueueGenericSend+0x11e>
 800a130:	6a3b      	ldr	r3, [r7, #32]
 800a132:	2245      	movs	r2, #69	; 0x45
 800a134:	2100      	movs	r1, #0
 800a136:	5499      	strb	r1, [r3, r2]
 800a138:	f002 f80c 	bl	800c154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a13c:	1d3a      	adds	r2, r7, #4
 800a13e:	2314      	movs	r3, #20
 800a140:	18fb      	adds	r3, r7, r3
 800a142:	0011      	movs	r1, r2
 800a144:	0018      	movs	r0, r3
 800a146:	f001 f83b 	bl	800b1c0 <xTaskCheckForTimeOut>
 800a14a:	1e03      	subs	r3, r0, #0
 800a14c:	d11e      	bne.n	800a18c <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a14e:	6a3b      	ldr	r3, [r7, #32]
 800a150:	0018      	movs	r0, r3
 800a152:	f000 fba9 	bl	800a8a8 <prvIsQueueFull>
 800a156:	1e03      	subs	r3, r0, #0
 800a158:	d011      	beq.n	800a17e <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a15a:	6a3b      	ldr	r3, [r7, #32]
 800a15c:	3310      	adds	r3, #16
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	0011      	movs	r1, r2
 800a162:	0018      	movs	r0, r3
 800a164:	f000 ff78 	bl	800b058 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a168:	6a3b      	ldr	r3, [r7, #32]
 800a16a:	0018      	movs	r0, r3
 800a16c:	f000 fb28 	bl	800a7c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a170:	f000 fdba 	bl	800ace8 <xTaskResumeAll>
 800a174:	1e03      	subs	r3, r0, #0
 800a176:	d18a      	bne.n	800a08e <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800a178:	f001 ffca 	bl	800c110 <vPortYield>
 800a17c:	e787      	b.n	800a08e <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a17e:	6a3b      	ldr	r3, [r7, #32]
 800a180:	0018      	movs	r0, r3
 800a182:	f000 fb1d 	bl	800a7c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a186:	f000 fdaf 	bl	800ace8 <xTaskResumeAll>
 800a18a:	e780      	b.n	800a08e <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a18c:	6a3b      	ldr	r3, [r7, #32]
 800a18e:	0018      	movs	r0, r3
 800a190:	f000 fb16 	bl	800a7c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a194:	f000 fda8 	bl	800ace8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a198:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a19a:	0018      	movs	r0, r3
 800a19c:	46bd      	mov	sp, r7
 800a19e:	b00a      	add	sp, #40	; 0x28
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a1a2:	b590      	push	{r4, r7, lr}
 800a1a4:	b08b      	sub	sp, #44	; 0x2c
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	60f8      	str	r0, [r7, #12]
 800a1aa:	60b9      	str	r1, [r7, #8]
 800a1ac:	607a      	str	r2, [r7, #4]
 800a1ae:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800a1b4:	6a3b      	ldr	r3, [r7, #32]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d101      	bne.n	800a1be <xQueueGenericSendFromISR+0x1c>
 800a1ba:	b672      	cpsid	i
 800a1bc:	e7fe      	b.n	800a1bc <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d103      	bne.n	800a1cc <xQueueGenericSendFromISR+0x2a>
 800a1c4:	6a3b      	ldr	r3, [r7, #32]
 800a1c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d101      	bne.n	800a1d0 <xQueueGenericSendFromISR+0x2e>
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e000      	b.n	800a1d2 <xQueueGenericSendFromISR+0x30>
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d101      	bne.n	800a1da <xQueueGenericSendFromISR+0x38>
 800a1d6:	b672      	cpsid	i
 800a1d8:	e7fe      	b.n	800a1d8 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d103      	bne.n	800a1e8 <xQueueGenericSendFromISR+0x46>
 800a1e0:	6a3b      	ldr	r3, [r7, #32]
 800a1e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d101      	bne.n	800a1ec <xQueueGenericSendFromISR+0x4a>
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e000      	b.n	800a1ee <xQueueGenericSendFromISR+0x4c>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d101      	bne.n	800a1f6 <xQueueGenericSendFromISR+0x54>
 800a1f2:	b672      	cpsid	i
 800a1f4:	e7fe      	b.n	800a1f4 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1f6:	f001 ffc5 	bl	800c184 <ulSetInterruptMaskFromISR>
 800a1fa:	0003      	movs	r3, r0
 800a1fc:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1fe:	6a3b      	ldr	r3, [r7, #32]
 800a200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a202:	6a3b      	ldr	r3, [r7, #32]
 800a204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a206:	429a      	cmp	r2, r3
 800a208:	d302      	bcc.n	800a210 <xQueueGenericSendFromISR+0x6e>
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d131      	bne.n	800a274 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a210:	241b      	movs	r4, #27
 800a212:	193b      	adds	r3, r7, r4
 800a214:	6a3a      	ldr	r2, [r7, #32]
 800a216:	2145      	movs	r1, #69	; 0x45
 800a218:	5c52      	ldrb	r2, [r2, r1]
 800a21a:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a21c:	6a3b      	ldr	r3, [r7, #32]
 800a21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a220:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a222:	683a      	ldr	r2, [r7, #0]
 800a224:	68b9      	ldr	r1, [r7, #8]
 800a226:	6a3b      	ldr	r3, [r7, #32]
 800a228:	0018      	movs	r0, r3
 800a22a:	f000 fa38 	bl	800a69e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a22e:	193b      	adds	r3, r7, r4
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	b25b      	sxtb	r3, r3
 800a234:	3301      	adds	r3, #1
 800a236:	d111      	bne.n	800a25c <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a238:	6a3b      	ldr	r3, [r7, #32]
 800a23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d016      	beq.n	800a26e <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a240:	6a3b      	ldr	r3, [r7, #32]
 800a242:	3324      	adds	r3, #36	; 0x24
 800a244:	0018      	movs	r0, r3
 800a246:	f000 ff4b 	bl	800b0e0 <xTaskRemoveFromEventList>
 800a24a:	1e03      	subs	r3, r0, #0
 800a24c:	d00f      	beq.n	800a26e <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d00c      	beq.n	800a26e <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2201      	movs	r2, #1
 800a258:	601a      	str	r2, [r3, #0]
 800a25a:	e008      	b.n	800a26e <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a25c:	231b      	movs	r3, #27
 800a25e:	18fb      	adds	r3, r7, r3
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	3301      	adds	r3, #1
 800a264:	b2db      	uxtb	r3, r3
 800a266:	b259      	sxtb	r1, r3
 800a268:	6a3b      	ldr	r3, [r7, #32]
 800a26a:	2245      	movs	r2, #69	; 0x45
 800a26c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800a26e:	2301      	movs	r3, #1
 800a270:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800a272:	e001      	b.n	800a278 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a274:	2300      	movs	r3, #0
 800a276:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	0018      	movs	r0, r3
 800a27c:	f001 ff88 	bl	800c190 <vClearInterruptMaskFromISR>

	return xReturn;
 800a280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a282:	0018      	movs	r0, r3
 800a284:	46bd      	mov	sp, r7
 800a286:	b00b      	add	sp, #44	; 0x2c
 800a288:	bd90      	pop	{r4, r7, pc}

0800a28a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b088      	sub	sp, #32
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
 800a292:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d101      	bne.n	800a2a2 <xQueueGiveFromISR+0x18>
 800a29e:	b672      	cpsid	i
 800a2a0:	e7fe      	b.n	800a2a0 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <xQueueGiveFromISR+0x24>
 800a2aa:	b672      	cpsid	i
 800a2ac:	e7fe      	b.n	800a2ac <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d103      	bne.n	800a2be <xQueueGiveFromISR+0x34>
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d101      	bne.n	800a2c2 <xQueueGiveFromISR+0x38>
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e000      	b.n	800a2c4 <xQueueGiveFromISR+0x3a>
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d101      	bne.n	800a2cc <xQueueGiveFromISR+0x42>
 800a2c8:	b672      	cpsid	i
 800a2ca:	e7fe      	b.n	800a2ca <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a2cc:	f001 ff5a 	bl	800c184 <ulSetInterruptMaskFromISR>
 800a2d0:	0003      	movs	r3, r0
 800a2d2:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2d4:	69bb      	ldr	r3, [r7, #24]
 800a2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d8:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2de:	693a      	ldr	r2, [r7, #16]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d22c      	bcs.n	800a33e <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a2e4:	200f      	movs	r0, #15
 800a2e6:	183b      	adds	r3, r7, r0
 800a2e8:	69ba      	ldr	r2, [r7, #24]
 800a2ea:	2145      	movs	r1, #69	; 0x45
 800a2ec:	5c52      	ldrb	r2, [r2, r1]
 800a2ee:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	1c5a      	adds	r2, r3, #1
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a2f8:	183b      	adds	r3, r7, r0
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	b25b      	sxtb	r3, r3
 800a2fe:	3301      	adds	r3, #1
 800a300:	d111      	bne.n	800a326 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a306:	2b00      	cmp	r3, #0
 800a308:	d016      	beq.n	800a338 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	3324      	adds	r3, #36	; 0x24
 800a30e:	0018      	movs	r0, r3
 800a310:	f000 fee6 	bl	800b0e0 <xTaskRemoveFromEventList>
 800a314:	1e03      	subs	r3, r0, #0
 800a316:	d00f      	beq.n	800a338 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00c      	beq.n	800a338 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	2201      	movs	r2, #1
 800a322:	601a      	str	r2, [r3, #0]
 800a324:	e008      	b.n	800a338 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a326:	230f      	movs	r3, #15
 800a328:	18fb      	adds	r3, r7, r3
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	3301      	adds	r3, #1
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	b259      	sxtb	r1, r3
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	2245      	movs	r2, #69	; 0x45
 800a336:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800a338:	2301      	movs	r3, #1
 800a33a:	61fb      	str	r3, [r7, #28]
 800a33c:	e001      	b.n	800a342 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a33e:	2300      	movs	r3, #0
 800a340:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	0018      	movs	r0, r3
 800a346:	f001 ff23 	bl	800c190 <vClearInterruptMaskFromISR>

	return xReturn;
 800a34a:	69fb      	ldr	r3, [r7, #28]
}
 800a34c:	0018      	movs	r0, r3
 800a34e:	46bd      	mov	sp, r7
 800a350:	b008      	add	sp, #32
 800a352:	bd80      	pop	{r7, pc}

0800a354 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b08a      	sub	sp, #40	; 0x28
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a360:	2300      	movs	r3, #0
 800a362:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a368:	6a3b      	ldr	r3, [r7, #32]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d101      	bne.n	800a372 <xQueueReceive+0x1e>
 800a36e:	b672      	cpsid	i
 800a370:	e7fe      	b.n	800a370 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d103      	bne.n	800a380 <xQueueReceive+0x2c>
 800a378:	6a3b      	ldr	r3, [r7, #32]
 800a37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d101      	bne.n	800a384 <xQueueReceive+0x30>
 800a380:	2301      	movs	r3, #1
 800a382:	e000      	b.n	800a386 <xQueueReceive+0x32>
 800a384:	2300      	movs	r3, #0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d101      	bne.n	800a38e <xQueueReceive+0x3a>
 800a38a:	b672      	cpsid	i
 800a38c:	e7fe      	b.n	800a38c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a38e:	f001 f823 	bl	800b3d8 <xTaskGetSchedulerState>
 800a392:	1e03      	subs	r3, r0, #0
 800a394:	d102      	bne.n	800a39c <xQueueReceive+0x48>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d101      	bne.n	800a3a0 <xQueueReceive+0x4c>
 800a39c:	2301      	movs	r3, #1
 800a39e:	e000      	b.n	800a3a2 <xQueueReceive+0x4e>
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d101      	bne.n	800a3aa <xQueueReceive+0x56>
 800a3a6:	b672      	cpsid	i
 800a3a8:	e7fe      	b.n	800a3a8 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3aa:	f001 fec1 	bl	800c130 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3ae:	6a3b      	ldr	r3, [r7, #32]
 800a3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d01a      	beq.n	800a3f0 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	6a3b      	ldr	r3, [r7, #32]
 800a3be:	0011      	movs	r1, r2
 800a3c0:	0018      	movs	r0, r3
 800a3c2:	f000 f9d7 	bl	800a774 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a3c6:	69fb      	ldr	r3, [r7, #28]
 800a3c8:	1e5a      	subs	r2, r3, #1
 800a3ca:	6a3b      	ldr	r3, [r7, #32]
 800a3cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3ce:	6a3b      	ldr	r3, [r7, #32]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d008      	beq.n	800a3e8 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3d6:	6a3b      	ldr	r3, [r7, #32]
 800a3d8:	3310      	adds	r3, #16
 800a3da:	0018      	movs	r0, r3
 800a3dc:	f000 fe80 	bl	800b0e0 <xTaskRemoveFromEventList>
 800a3e0:	1e03      	subs	r3, r0, #0
 800a3e2:	d001      	beq.n	800a3e8 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a3e4:	f001 fe94 	bl	800c110 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a3e8:	f001 feb4 	bl	800c154 <vPortExitCritical>
				return pdPASS;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e062      	b.n	800a4b6 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d103      	bne.n	800a3fe <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3f6:	f001 fead 	bl	800c154 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	e05b      	b.n	800a4b6 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a400:	2b00      	cmp	r3, #0
 800a402:	d106      	bne.n	800a412 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a404:	2314      	movs	r3, #20
 800a406:	18fb      	adds	r3, r7, r3
 800a408:	0018      	movs	r0, r3
 800a40a:	f000 fec5 	bl	800b198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a40e:	2301      	movs	r3, #1
 800a410:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a412:	f001 fe9f 	bl	800c154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a416:	f000 fc5b 	bl	800acd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a41a:	f001 fe89 	bl	800c130 <vPortEnterCritical>
 800a41e:	6a3b      	ldr	r3, [r7, #32]
 800a420:	2244      	movs	r2, #68	; 0x44
 800a422:	5c9b      	ldrb	r3, [r3, r2]
 800a424:	b25b      	sxtb	r3, r3
 800a426:	3301      	adds	r3, #1
 800a428:	d103      	bne.n	800a432 <xQueueReceive+0xde>
 800a42a:	6a3b      	ldr	r3, [r7, #32]
 800a42c:	2244      	movs	r2, #68	; 0x44
 800a42e:	2100      	movs	r1, #0
 800a430:	5499      	strb	r1, [r3, r2]
 800a432:	6a3b      	ldr	r3, [r7, #32]
 800a434:	2245      	movs	r2, #69	; 0x45
 800a436:	5c9b      	ldrb	r3, [r3, r2]
 800a438:	b25b      	sxtb	r3, r3
 800a43a:	3301      	adds	r3, #1
 800a43c:	d103      	bne.n	800a446 <xQueueReceive+0xf2>
 800a43e:	6a3b      	ldr	r3, [r7, #32]
 800a440:	2245      	movs	r2, #69	; 0x45
 800a442:	2100      	movs	r1, #0
 800a444:	5499      	strb	r1, [r3, r2]
 800a446:	f001 fe85 	bl	800c154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a44a:	1d3a      	adds	r2, r7, #4
 800a44c:	2314      	movs	r3, #20
 800a44e:	18fb      	adds	r3, r7, r3
 800a450:	0011      	movs	r1, r2
 800a452:	0018      	movs	r0, r3
 800a454:	f000 feb4 	bl	800b1c0 <xTaskCheckForTimeOut>
 800a458:	1e03      	subs	r3, r0, #0
 800a45a:	d11e      	bne.n	800a49a <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a45c:	6a3b      	ldr	r3, [r7, #32]
 800a45e:	0018      	movs	r0, r3
 800a460:	f000 fa0c 	bl	800a87c <prvIsQueueEmpty>
 800a464:	1e03      	subs	r3, r0, #0
 800a466:	d011      	beq.n	800a48c <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a468:	6a3b      	ldr	r3, [r7, #32]
 800a46a:	3324      	adds	r3, #36	; 0x24
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	0011      	movs	r1, r2
 800a470:	0018      	movs	r0, r3
 800a472:	f000 fdf1 	bl	800b058 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a476:	6a3b      	ldr	r3, [r7, #32]
 800a478:	0018      	movs	r0, r3
 800a47a:	f000 f9a1 	bl	800a7c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a47e:	f000 fc33 	bl	800ace8 <xTaskResumeAll>
 800a482:	1e03      	subs	r3, r0, #0
 800a484:	d191      	bne.n	800a3aa <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800a486:	f001 fe43 	bl	800c110 <vPortYield>
 800a48a:	e78e      	b.n	800a3aa <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a48c:	6a3b      	ldr	r3, [r7, #32]
 800a48e:	0018      	movs	r0, r3
 800a490:	f000 f996 	bl	800a7c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a494:	f000 fc28 	bl	800ace8 <xTaskResumeAll>
 800a498:	e787      	b.n	800a3aa <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a49a:	6a3b      	ldr	r3, [r7, #32]
 800a49c:	0018      	movs	r0, r3
 800a49e:	f000 f98f 	bl	800a7c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4a2:	f000 fc21 	bl	800ace8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4a6:	6a3b      	ldr	r3, [r7, #32]
 800a4a8:	0018      	movs	r0, r3
 800a4aa:	f000 f9e7 	bl	800a87c <prvIsQueueEmpty>
 800a4ae:	1e03      	subs	r3, r0, #0
 800a4b0:	d100      	bne.n	800a4b4 <xQueueReceive+0x160>
 800a4b2:	e77a      	b.n	800a3aa <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a4b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a4b6:	0018      	movs	r0, r3
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	b00a      	add	sp, #40	; 0x28
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b08a      	sub	sp, #40	; 0x28
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
 800a4c6:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d101      	bne.n	800a4de <xQueueSemaphoreTake+0x20>
 800a4da:	b672      	cpsid	i
 800a4dc:	e7fe      	b.n	800a4dc <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d001      	beq.n	800a4ea <xQueueSemaphoreTake+0x2c>
 800a4e6:	b672      	cpsid	i
 800a4e8:	e7fe      	b.n	800a4e8 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4ea:	f000 ff75 	bl	800b3d8 <xTaskGetSchedulerState>
 800a4ee:	1e03      	subs	r3, r0, #0
 800a4f0:	d102      	bne.n	800a4f8 <xQueueSemaphoreTake+0x3a>
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <xQueueSemaphoreTake+0x3e>
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e000      	b.n	800a4fe <xQueueSemaphoreTake+0x40>
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d101      	bne.n	800a506 <xQueueSemaphoreTake+0x48>
 800a502:	b672      	cpsid	i
 800a504:	e7fe      	b.n	800a504 <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a506:	f001 fe13 	bl	800c130 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50e:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d01d      	beq.n	800a552 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	1e5a      	subs	r2, r3, #1
 800a51a:	69fb      	ldr	r3, [r7, #28]
 800a51c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d104      	bne.n	800a530 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a526:	f001 f8a7 	bl	800b678 <pvTaskIncrementMutexHeldCount>
 800a52a:	0002      	movs	r2, r0
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	691b      	ldr	r3, [r3, #16]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d008      	beq.n	800a54a <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	3310      	adds	r3, #16
 800a53c:	0018      	movs	r0, r3
 800a53e:	f000 fdcf 	bl	800b0e0 <xTaskRemoveFromEventList>
 800a542:	1e03      	subs	r3, r0, #0
 800a544:	d001      	beq.n	800a54a <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a546:	f001 fde3 	bl	800c110 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a54a:	f001 fe03 	bl	800c154 <vPortExitCritical>
				return pdPASS;
 800a54e:	2301      	movs	r3, #1
 800a550:	e08b      	b.n	800a66a <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d108      	bne.n	800a56a <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a558:	6a3b      	ldr	r3, [r7, #32]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d001      	beq.n	800a562 <xQueueSemaphoreTake+0xa4>
 800a55e:	b672      	cpsid	i
 800a560:	e7fe      	b.n	800a560 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a562:	f001 fdf7 	bl	800c154 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a566:	2300      	movs	r3, #0
 800a568:	e07f      	b.n	800a66a <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d106      	bne.n	800a57e <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a570:	230c      	movs	r3, #12
 800a572:	18fb      	adds	r3, r7, r3
 800a574:	0018      	movs	r0, r3
 800a576:	f000 fe0f 	bl	800b198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a57a:	2301      	movs	r3, #1
 800a57c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a57e:	f001 fde9 	bl	800c154 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a582:	f000 fba5 	bl	800acd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a586:	f001 fdd3 	bl	800c130 <vPortEnterCritical>
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	2244      	movs	r2, #68	; 0x44
 800a58e:	5c9b      	ldrb	r3, [r3, r2]
 800a590:	b25b      	sxtb	r3, r3
 800a592:	3301      	adds	r3, #1
 800a594:	d103      	bne.n	800a59e <xQueueSemaphoreTake+0xe0>
 800a596:	69fb      	ldr	r3, [r7, #28]
 800a598:	2244      	movs	r2, #68	; 0x44
 800a59a:	2100      	movs	r1, #0
 800a59c:	5499      	strb	r1, [r3, r2]
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	2245      	movs	r2, #69	; 0x45
 800a5a2:	5c9b      	ldrb	r3, [r3, r2]
 800a5a4:	b25b      	sxtb	r3, r3
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	d103      	bne.n	800a5b2 <xQueueSemaphoreTake+0xf4>
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	2245      	movs	r2, #69	; 0x45
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	5499      	strb	r1, [r3, r2]
 800a5b2:	f001 fdcf 	bl	800c154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5b6:	003a      	movs	r2, r7
 800a5b8:	230c      	movs	r3, #12
 800a5ba:	18fb      	adds	r3, r7, r3
 800a5bc:	0011      	movs	r1, r2
 800a5be:	0018      	movs	r0, r3
 800a5c0:	f000 fdfe 	bl	800b1c0 <xTaskCheckForTimeOut>
 800a5c4:	1e03      	subs	r3, r0, #0
 800a5c6:	d12e      	bne.n	800a626 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	0018      	movs	r0, r3
 800a5cc:	f000 f956 	bl	800a87c <prvIsQueueEmpty>
 800a5d0:	1e03      	subs	r3, r0, #0
 800a5d2:	d021      	beq.n	800a618 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d10a      	bne.n	800a5f2 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 800a5dc:	f001 fda8 	bl	800c130 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	0018      	movs	r0, r3
 800a5e6:	f000 ff13 	bl	800b410 <xTaskPriorityInherit>
 800a5ea:	0003      	movs	r3, r0
 800a5ec:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800a5ee:	f001 fdb1 	bl	800c154 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	3324      	adds	r3, #36	; 0x24
 800a5f6:	683a      	ldr	r2, [r7, #0]
 800a5f8:	0011      	movs	r1, r2
 800a5fa:	0018      	movs	r0, r3
 800a5fc:	f000 fd2c 	bl	800b058 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	0018      	movs	r0, r3
 800a604:	f000 f8dc 	bl	800a7c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a608:	f000 fb6e 	bl	800ace8 <xTaskResumeAll>
 800a60c:	1e03      	subs	r3, r0, #0
 800a60e:	d000      	beq.n	800a612 <xQueueSemaphoreTake+0x154>
 800a610:	e779      	b.n	800a506 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 800a612:	f001 fd7d 	bl	800c110 <vPortYield>
 800a616:	e776      	b.n	800a506 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a618:	69fb      	ldr	r3, [r7, #28]
 800a61a:	0018      	movs	r0, r3
 800a61c:	f000 f8d0 	bl	800a7c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a620:	f000 fb62 	bl	800ace8 <xTaskResumeAll>
 800a624:	e76f      	b.n	800a506 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	0018      	movs	r0, r3
 800a62a:	f000 f8c9 	bl	800a7c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a62e:	f000 fb5b 	bl	800ace8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	0018      	movs	r0, r3
 800a636:	f000 f921 	bl	800a87c <prvIsQueueEmpty>
 800a63a:	1e03      	subs	r3, r0, #0
 800a63c:	d100      	bne.n	800a640 <xQueueSemaphoreTake+0x182>
 800a63e:	e762      	b.n	800a506 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a640:	6a3b      	ldr	r3, [r7, #32]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d010      	beq.n	800a668 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 800a646:	f001 fd73 	bl	800c130 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	0018      	movs	r0, r3
 800a64e:	f000 f810 	bl	800a672 <prvGetDisinheritPriorityAfterTimeout>
 800a652:	0003      	movs	r3, r0
 800a654:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	697a      	ldr	r2, [r7, #20]
 800a65c:	0011      	movs	r1, r2
 800a65e:	0018      	movs	r0, r3
 800a660:	f000 ff9a 	bl	800b598 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a664:	f001 fd76 	bl	800c154 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a668:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a66a:	0018      	movs	r0, r3
 800a66c:	46bd      	mov	sp, r7
 800a66e:	b00a      	add	sp, #40	; 0x28
 800a670:	bd80      	pop	{r7, pc}

0800a672 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a672:	b580      	push	{r7, lr}
 800a674:	b084      	sub	sp, #16
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d006      	beq.n	800a690 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2264      	movs	r2, #100	; 0x64
 800a68a:	1ad3      	subs	r3, r2, r3
 800a68c:	60fb      	str	r3, [r7, #12]
 800a68e:	e001      	b.n	800a694 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a690:	2300      	movs	r3, #0
 800a692:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a694:	68fb      	ldr	r3, [r7, #12]
	}
 800a696:	0018      	movs	r0, r3
 800a698:	46bd      	mov	sp, r7
 800a69a:	b004      	add	sp, #16
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b086      	sub	sp, #24
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	60f8      	str	r0, [r7, #12]
 800a6a6:	60b9      	str	r1, [r7, #8]
 800a6a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d10e      	bne.n	800a6da <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d14e      	bne.n	800a762 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	0018      	movs	r0, r3
 800a6ca:	f000 ff09 	bl	800b4e0 <xTaskPriorityDisinherit>
 800a6ce:	0003      	movs	r3, r0
 800a6d0:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	609a      	str	r2, [r3, #8]
 800a6d8:	e043      	b.n	800a762 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d119      	bne.n	800a714 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	6858      	ldr	r0, [r3, #4]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	0019      	movs	r1, r3
 800a6ec:	f003 fb0e 	bl	800dd0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	685a      	ldr	r2, [r3, #4]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f8:	18d2      	adds	r2, r2, r3
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	685a      	ldr	r2, [r3, #4]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	429a      	cmp	r2, r3
 800a708:	d32b      	bcc.n	800a762 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	605a      	str	r2, [r3, #4]
 800a712:	e026      	b.n	800a762 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	68d8      	ldr	r0, [r3, #12]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	0019      	movs	r1, r3
 800a720:	f003 faf4 	bl	800dd0c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	68da      	ldr	r2, [r3, #12]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72c:	425b      	negs	r3, r3
 800a72e:	18d2      	adds	r2, r2, r3
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	68da      	ldr	r2, [r3, #12]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d207      	bcs.n	800a750 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	689a      	ldr	r2, [r3, #8]
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a748:	425b      	negs	r3, r3
 800a74a:	18d2      	adds	r2, r2, r3
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2b02      	cmp	r3, #2
 800a754:	d105      	bne.n	800a762 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d002      	beq.n	800a762 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	3b01      	subs	r3, #1
 800a760:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	1c5a      	adds	r2, r3, #1
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a76a:	697b      	ldr	r3, [r7, #20]
}
 800a76c:	0018      	movs	r0, r3
 800a76e:	46bd      	mov	sp, r7
 800a770:	b006      	add	sp, #24
 800a772:	bd80      	pop	{r7, pc}

0800a774 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a782:	2b00      	cmp	r3, #0
 800a784:	d018      	beq.n	800a7b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	68da      	ldr	r2, [r3, #12]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a78e:	18d2      	adds	r2, r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	68da      	ldr	r2, [r3, #12]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d303      	bcc.n	800a7a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	68d9      	ldr	r1, [r3, #12]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	0018      	movs	r0, r3
 800a7b4:	f003 faaa 	bl	800dd0c <memcpy>
	}
}
 800a7b8:	46c0      	nop			; (mov r8, r8)
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	b002      	add	sp, #8
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a7c8:	f001 fcb2 	bl	800c130 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a7cc:	230f      	movs	r3, #15
 800a7ce:	18fb      	adds	r3, r7, r3
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	2145      	movs	r1, #69	; 0x45
 800a7d4:	5c52      	ldrb	r2, [r2, r1]
 800a7d6:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7d8:	e013      	b.n	800a802 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d016      	beq.n	800a810 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	3324      	adds	r3, #36	; 0x24
 800a7e6:	0018      	movs	r0, r3
 800a7e8:	f000 fc7a 	bl	800b0e0 <xTaskRemoveFromEventList>
 800a7ec:	1e03      	subs	r3, r0, #0
 800a7ee:	d001      	beq.n	800a7f4 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a7f0:	f000 fd36 	bl	800b260 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a7f4:	210f      	movs	r1, #15
 800a7f6:	187b      	adds	r3, r7, r1
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	b2da      	uxtb	r2, r3
 800a7fe:	187b      	adds	r3, r7, r1
 800a800:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a802:	230f      	movs	r3, #15
 800a804:	18fb      	adds	r3, r7, r3
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	b25b      	sxtb	r3, r3
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	dce5      	bgt.n	800a7da <prvUnlockQueue+0x1a>
 800a80e:	e000      	b.n	800a812 <prvUnlockQueue+0x52>
					break;
 800a810:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2245      	movs	r2, #69	; 0x45
 800a816:	21ff      	movs	r1, #255	; 0xff
 800a818:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800a81a:	f001 fc9b 	bl	800c154 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a81e:	f001 fc87 	bl	800c130 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a822:	230e      	movs	r3, #14
 800a824:	18fb      	adds	r3, r7, r3
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	2144      	movs	r1, #68	; 0x44
 800a82a:	5c52      	ldrb	r2, [r2, r1]
 800a82c:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a82e:	e013      	b.n	800a858 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	691b      	ldr	r3, [r3, #16]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d016      	beq.n	800a866 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	3310      	adds	r3, #16
 800a83c:	0018      	movs	r0, r3
 800a83e:	f000 fc4f 	bl	800b0e0 <xTaskRemoveFromEventList>
 800a842:	1e03      	subs	r3, r0, #0
 800a844:	d001      	beq.n	800a84a <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800a846:	f000 fd0b 	bl	800b260 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a84a:	210e      	movs	r1, #14
 800a84c:	187b      	adds	r3, r7, r1
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	3b01      	subs	r3, #1
 800a852:	b2da      	uxtb	r2, r3
 800a854:	187b      	adds	r3, r7, r1
 800a856:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a858:	230e      	movs	r3, #14
 800a85a:	18fb      	adds	r3, r7, r3
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	b25b      	sxtb	r3, r3
 800a860:	2b00      	cmp	r3, #0
 800a862:	dce5      	bgt.n	800a830 <prvUnlockQueue+0x70>
 800a864:	e000      	b.n	800a868 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800a866:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2244      	movs	r2, #68	; 0x44
 800a86c:	21ff      	movs	r1, #255	; 0xff
 800a86e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800a870:	f001 fc70 	bl	800c154 <vPortExitCritical>
}
 800a874:	46c0      	nop			; (mov r8, r8)
 800a876:	46bd      	mov	sp, r7
 800a878:	b004      	add	sp, #16
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a884:	f001 fc54 	bl	800c130 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d102      	bne.n	800a896 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a890:	2301      	movs	r3, #1
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	e001      	b.n	800a89a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a896:	2300      	movs	r3, #0
 800a898:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a89a:	f001 fc5b 	bl	800c154 <vPortExitCritical>

	return xReturn;
 800a89e:	68fb      	ldr	r3, [r7, #12]
}
 800a8a0:	0018      	movs	r0, r3
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	b004      	add	sp, #16
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a8b0:	f001 fc3e 	bl	800c130 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d102      	bne.n	800a8c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	60fb      	str	r3, [r7, #12]
 800a8c4:	e001      	b.n	800a8ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a8ca:	f001 fc43 	bl	800c154 <vPortExitCritical>

	return xReturn;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
}
 800a8d0:	0018      	movs	r0, r3
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	b004      	add	sp, #16
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	60fb      	str	r3, [r7, #12]
 800a8e6:	e015      	b.n	800a914 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a8e8:	4b0e      	ldr	r3, [pc, #56]	; (800a924 <vQueueAddToRegistry+0x4c>)
 800a8ea:	68fa      	ldr	r2, [r7, #12]
 800a8ec:	00d2      	lsls	r2, r2, #3
 800a8ee:	58d3      	ldr	r3, [r2, r3]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d10c      	bne.n	800a90e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a8f4:	4b0b      	ldr	r3, [pc, #44]	; (800a924 <vQueueAddToRegistry+0x4c>)
 800a8f6:	68fa      	ldr	r2, [r7, #12]
 800a8f8:	00d2      	lsls	r2, r2, #3
 800a8fa:	6839      	ldr	r1, [r7, #0]
 800a8fc:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a8fe:	4a09      	ldr	r2, [pc, #36]	; (800a924 <vQueueAddToRegistry+0x4c>)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	00db      	lsls	r3, r3, #3
 800a904:	18d3      	adds	r3, r2, r3
 800a906:	3304      	adds	r3, #4
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a90c:	e006      	b.n	800a91c <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	3301      	adds	r3, #1
 800a912:	60fb      	str	r3, [r7, #12]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2b07      	cmp	r3, #7
 800a918:	d9e6      	bls.n	800a8e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a91a:	46c0      	nop			; (mov r8, r8)
 800a91c:	46c0      	nop			; (mov r8, r8)
 800a91e:	46bd      	mov	sp, r7
 800a920:	b004      	add	sp, #16
 800a922:	bd80      	pop	{r7, pc}
 800a924:	20000554 	.word	0x20000554

0800a928 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b086      	sub	sp, #24
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a938:	f001 fbfa 	bl	800c130 <vPortEnterCritical>
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	2244      	movs	r2, #68	; 0x44
 800a940:	5c9b      	ldrb	r3, [r3, r2]
 800a942:	b25b      	sxtb	r3, r3
 800a944:	3301      	adds	r3, #1
 800a946:	d103      	bne.n	800a950 <vQueueWaitForMessageRestricted+0x28>
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	2244      	movs	r2, #68	; 0x44
 800a94c:	2100      	movs	r1, #0
 800a94e:	5499      	strb	r1, [r3, r2]
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	2245      	movs	r2, #69	; 0x45
 800a954:	5c9b      	ldrb	r3, [r3, r2]
 800a956:	b25b      	sxtb	r3, r3
 800a958:	3301      	adds	r3, #1
 800a95a:	d103      	bne.n	800a964 <vQueueWaitForMessageRestricted+0x3c>
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	2245      	movs	r2, #69	; 0x45
 800a960:	2100      	movs	r1, #0
 800a962:	5499      	strb	r1, [r3, r2]
 800a964:	f001 fbf6 	bl	800c154 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d106      	bne.n	800a97e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	3324      	adds	r3, #36	; 0x24
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	68b9      	ldr	r1, [r7, #8]
 800a978:	0018      	movs	r0, r3
 800a97a:	f000 fb8b 	bl	800b094 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	0018      	movs	r0, r3
 800a982:	f7ff ff1d 	bl	800a7c0 <prvUnlockQueue>
	}
 800a986:	46c0      	nop			; (mov r8, r8)
 800a988:	46bd      	mov	sp, r7
 800a98a:	b006      	add	sp, #24
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a98e:	b590      	push	{r4, r7, lr}
 800a990:	b08d      	sub	sp, #52	; 0x34
 800a992:	af04      	add	r7, sp, #16
 800a994:	60f8      	str	r0, [r7, #12]
 800a996:	60b9      	str	r1, [r7, #8]
 800a998:	603b      	str	r3, [r7, #0]
 800a99a:	1dbb      	adds	r3, r7, #6
 800a99c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a99e:	1dbb      	adds	r3, r7, #6
 800a9a0:	881b      	ldrh	r3, [r3, #0]
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	0018      	movs	r0, r3
 800a9a6:	f001 fc5b 	bl	800c260 <pvPortMalloc>
 800a9aa:	0003      	movs	r3, r0
 800a9ac:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d010      	beq.n	800a9d6 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a9b4:	2060      	movs	r0, #96	; 0x60
 800a9b6:	f001 fc53 	bl	800c260 <pvPortMalloc>
 800a9ba:	0003      	movs	r3, r0
 800a9bc:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d003      	beq.n	800a9cc <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a9c4:	69fb      	ldr	r3, [r7, #28]
 800a9c6:	697a      	ldr	r2, [r7, #20]
 800a9c8:	631a      	str	r2, [r3, #48]	; 0x30
 800a9ca:	e006      	b.n	800a9da <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	0018      	movs	r0, r3
 800a9d0:	f001 fcf2 	bl	800c3b8 <vPortFree>
 800a9d4:	e001      	b.n	800a9da <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d016      	beq.n	800aa0e <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a9e0:	1dbb      	adds	r3, r7, #6
 800a9e2:	881a      	ldrh	r2, [r3, #0]
 800a9e4:	683c      	ldr	r4, [r7, #0]
 800a9e6:	68b9      	ldr	r1, [r7, #8]
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	9303      	str	r3, [sp, #12]
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	9302      	str	r3, [sp, #8]
 800a9f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f4:	9301      	str	r3, [sp, #4]
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f8:	9300      	str	r3, [sp, #0]
 800a9fa:	0023      	movs	r3, r4
 800a9fc:	f000 f810 	bl	800aa20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa00:	69fb      	ldr	r3, [r7, #28]
 800aa02:	0018      	movs	r0, r3
 800aa04:	f000 f898 	bl	800ab38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	61bb      	str	r3, [r7, #24]
 800aa0c:	e002      	b.n	800aa14 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	425b      	negs	r3, r3
 800aa12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aa14:	69bb      	ldr	r3, [r7, #24]
	}
 800aa16:	0018      	movs	r0, r3
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	b009      	add	sp, #36	; 0x24
 800aa1c:	bd90      	pop	{r4, r7, pc}
	...

0800aa20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b086      	sub	sp, #24
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
 800aa2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aa2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	001a      	movs	r2, r3
 800aa38:	21a5      	movs	r1, #165	; 0xa5
 800aa3a:	f003 f8d3 	bl	800dbe4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aa3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	493b      	ldr	r1, [pc, #236]	; (800ab34 <prvInitialiseNewTask+0x114>)
 800aa46:	468c      	mov	ip, r1
 800aa48:	4463      	add	r3, ip
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	18d3      	adds	r3, r2, r3
 800aa4e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	2207      	movs	r2, #7
 800aa54:	4393      	bics	r3, r2
 800aa56:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	2207      	movs	r2, #7
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	d001      	beq.n	800aa64 <prvInitialiseNewTask+0x44>
 800aa60:	b672      	cpsid	i
 800aa62:	e7fe      	b.n	800aa62 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d020      	beq.n	800aaac <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	617b      	str	r3, [r7, #20]
 800aa6e:	e013      	b.n	800aa98 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aa70:	68ba      	ldr	r2, [r7, #8]
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	18d3      	adds	r3, r2, r3
 800aa76:	7818      	ldrb	r0, [r3, #0]
 800aa78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa7a:	2134      	movs	r1, #52	; 0x34
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	18d3      	adds	r3, r2, r3
 800aa80:	185b      	adds	r3, r3, r1
 800aa82:	1c02      	adds	r2, r0, #0
 800aa84:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aa86:	68ba      	ldr	r2, [r7, #8]
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	18d3      	adds	r3, r2, r3
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d006      	beq.n	800aaa0 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	3301      	adds	r3, #1
 800aa96:	617b      	str	r3, [r7, #20]
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	2b0f      	cmp	r3, #15
 800aa9c:	d9e8      	bls.n	800aa70 <prvInitialiseNewTask+0x50>
 800aa9e:	e000      	b.n	800aaa2 <prvInitialiseNewTask+0x82>
			{
				break;
 800aaa0:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aaa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa4:	2243      	movs	r2, #67	; 0x43
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	5499      	strb	r1, [r3, r2]
 800aaaa:	e003      	b.n	800aab4 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaae:	2234      	movs	r2, #52	; 0x34
 800aab0:	2100      	movs	r1, #0
 800aab2:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aab4:	6a3b      	ldr	r3, [r7, #32]
 800aab6:	2b63      	cmp	r3, #99	; 0x63
 800aab8:	d901      	bls.n	800aabe <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aaba:	2363      	movs	r3, #99	; 0x63
 800aabc:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac0:	6a3a      	ldr	r2, [r7, #32]
 800aac2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac6:	6a3a      	ldr	r2, [r7, #32]
 800aac8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aaca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aacc:	2200      	movs	r2, #0
 800aace:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad2:	3304      	adds	r3, #4
 800aad4:	0018      	movs	r0, r3
 800aad6:	f7ff f96c 	bl	8009db2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aadc:	3318      	adds	r3, #24
 800aade:	0018      	movs	r0, r3
 800aae0:	f7ff f967 	bl	8009db2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aae8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaea:	6a3b      	ldr	r3, [r7, #32]
 800aaec:	2264      	movs	r2, #100	; 0x64
 800aaee:	1ad2      	subs	r2, r2, r3
 800aaf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aaf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaf8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800aafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafc:	2200      	movs	r2, #0
 800aafe:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ab00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab02:	2200      	movs	r2, #0
 800ab04:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab08:	225c      	movs	r2, #92	; 0x5c
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab0e:	683a      	ldr	r2, [r7, #0]
 800ab10:	68f9      	ldr	r1, [r7, #12]
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	0018      	movs	r0, r3
 800ab16:	f001 fa71 	bl	800bffc <pxPortInitialiseStack>
 800ab1a:	0002      	movs	r2, r0
 800ab1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d002      	beq.n	800ab2c <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ab26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab2c:	46c0      	nop			; (mov r8, r8)
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	b006      	add	sp, #24
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	3fffffff 	.word	0x3fffffff

0800ab38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ab40:	f001 faf6 	bl	800c130 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ab44:	4b2a      	ldr	r3, [pc, #168]	; (800abf0 <prvAddNewTaskToReadyList+0xb8>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	1c5a      	adds	r2, r3, #1
 800ab4a:	4b29      	ldr	r3, [pc, #164]	; (800abf0 <prvAddNewTaskToReadyList+0xb8>)
 800ab4c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800ab4e:	4b29      	ldr	r3, [pc, #164]	; (800abf4 <prvAddNewTaskToReadyList+0xbc>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d109      	bne.n	800ab6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ab56:	4b27      	ldr	r3, [pc, #156]	; (800abf4 <prvAddNewTaskToReadyList+0xbc>)
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ab5c:	4b24      	ldr	r3, [pc, #144]	; (800abf0 <prvAddNewTaskToReadyList+0xb8>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d110      	bne.n	800ab86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ab64:	f000 fb96 	bl	800b294 <prvInitialiseTaskLists>
 800ab68:	e00d      	b.n	800ab86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ab6a:	4b23      	ldr	r3, [pc, #140]	; (800abf8 <prvAddNewTaskToReadyList+0xc0>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d109      	bne.n	800ab86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ab72:	4b20      	ldr	r3, [pc, #128]	; (800abf4 <prvAddNewTaskToReadyList+0xbc>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d802      	bhi.n	800ab86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab80:	4b1c      	ldr	r3, [pc, #112]	; (800abf4 <prvAddNewTaskToReadyList+0xbc>)
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab86:	4b1d      	ldr	r3, [pc, #116]	; (800abfc <prvAddNewTaskToReadyList+0xc4>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	1c5a      	adds	r2, r3, #1
 800ab8c:	4b1b      	ldr	r3, [pc, #108]	; (800abfc <prvAddNewTaskToReadyList+0xc4>)
 800ab8e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ab90:	4b1a      	ldr	r3, [pc, #104]	; (800abfc <prvAddNewTaskToReadyList+0xc4>)
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab9c:	4b18      	ldr	r3, [pc, #96]	; (800ac00 <prvAddNewTaskToReadyList+0xc8>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d903      	bls.n	800abac <prvAddNewTaskToReadyList+0x74>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba8:	4b15      	ldr	r3, [pc, #84]	; (800ac00 <prvAddNewTaskToReadyList+0xc8>)
 800abaa:	601a      	str	r2, [r3, #0]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb0:	0013      	movs	r3, r2
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	189b      	adds	r3, r3, r2
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	4a12      	ldr	r2, [pc, #72]	; (800ac04 <prvAddNewTaskToReadyList+0xcc>)
 800abba:	189a      	adds	r2, r3, r2
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	3304      	adds	r3, #4
 800abc0:	0019      	movs	r1, r3
 800abc2:	0010      	movs	r0, r2
 800abc4:	f7ff f900 	bl	8009dc8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800abc8:	f001 fac4 	bl	800c154 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800abcc:	4b0a      	ldr	r3, [pc, #40]	; (800abf8 <prvAddNewTaskToReadyList+0xc0>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d008      	beq.n	800abe6 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800abd4:	4b07      	ldr	r3, [pc, #28]	; (800abf4 <prvAddNewTaskToReadyList+0xbc>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abde:	429a      	cmp	r2, r3
 800abe0:	d201      	bcs.n	800abe6 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800abe2:	f001 fa95 	bl	800c110 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abe6:	46c0      	nop			; (mov r8, r8)
 800abe8:	46bd      	mov	sp, r7
 800abea:	b002      	add	sp, #8
 800abec:	bd80      	pop	{r7, pc}
 800abee:	46c0      	nop			; (mov r8, r8)
 800abf0:	20000dd8 	.word	0x20000dd8
 800abf4:	20000594 	.word	0x20000594
 800abf8:	20000de4 	.word	0x20000de4
 800abfc:	20000df4 	.word	0x20000df4
 800ac00:	20000de0 	.word	0x20000de0
 800ac04:	20000598 	.word	0x20000598

0800ac08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ac10:	2300      	movs	r3, #0
 800ac12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d010      	beq.n	800ac3c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ac1a:	4b0d      	ldr	r3, [pc, #52]	; (800ac50 <vTaskDelay+0x48>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d001      	beq.n	800ac26 <vTaskDelay+0x1e>
 800ac22:	b672      	cpsid	i
 800ac24:	e7fe      	b.n	800ac24 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800ac26:	f000 f853 	bl	800acd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	0018      	movs	r0, r3
 800ac30:	f000 fe3a 	bl	800b8a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ac34:	f000 f858 	bl	800ace8 <xTaskResumeAll>
 800ac38:	0003      	movs	r3, r0
 800ac3a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d101      	bne.n	800ac46 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800ac42:	f001 fa65 	bl	800c110 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac46:	46c0      	nop			; (mov r8, r8)
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	b004      	add	sp, #16
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	46c0      	nop			; (mov r8, r8)
 800ac50:	20000e00 	.word	0x20000e00

0800ac54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800ac5a:	4917      	ldr	r1, [pc, #92]	; (800acb8 <vTaskStartScheduler+0x64>)
 800ac5c:	4817      	ldr	r0, [pc, #92]	; (800acbc <vTaskStartScheduler+0x68>)
 800ac5e:	4b18      	ldr	r3, [pc, #96]	; (800acc0 <vTaskStartScheduler+0x6c>)
 800ac60:	9301      	str	r3, [sp, #4]
 800ac62:	2300      	movs	r3, #0
 800ac64:	9300      	str	r3, [sp, #0]
 800ac66:	2300      	movs	r3, #0
 800ac68:	2280      	movs	r2, #128	; 0x80
 800ac6a:	f7ff fe90 	bl	800a98e <xTaskCreate>
 800ac6e:	0003      	movs	r3, r0
 800ac70:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d103      	bne.n	800ac80 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
 800ac78:	f000 fe6a 	bl	800b950 <xTimerCreateTimerTask>
 800ac7c:	0003      	movs	r3, r0
 800ac7e:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d10f      	bne.n	800aca6 <vTaskStartScheduler+0x52>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800ac86:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ac88:	4b0e      	ldr	r3, [pc, #56]	; (800acc4 <vTaskStartScheduler+0x70>)
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	4252      	negs	r2, r2
 800ac8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ac90:	4b0d      	ldr	r3, [pc, #52]	; (800acc8 <vTaskStartScheduler+0x74>)
 800ac92:	2201      	movs	r2, #1
 800ac94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ac96:	4b0d      	ldr	r3, [pc, #52]	; (800accc <vTaskStartScheduler+0x78>)
 800ac98:	2200      	movs	r2, #0
 800ac9a:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800ac9c:	f7f8 fa4a 	bl	8003134 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aca0:	f001 fa12 	bl	800c0c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aca4:	e004      	b.n	800acb0 <vTaskStartScheduler+0x5c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	3301      	adds	r3, #1
 800acaa:	d101      	bne.n	800acb0 <vTaskStartScheduler+0x5c>
 800acac:	b672      	cpsid	i
 800acae:	e7fe      	b.n	800acae <vTaskStartScheduler+0x5a>
}
 800acb0:	46c0      	nop			; (mov r8, r8)
 800acb2:	46bd      	mov	sp, r7
 800acb4:	b002      	add	sp, #8
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	08010a10 	.word	0x08010a10
 800acbc:	0800b275 	.word	0x0800b275
 800acc0:	20000dfc 	.word	0x20000dfc
 800acc4:	20000df8 	.word	0x20000df8
 800acc8:	20000de4 	.word	0x20000de4
 800accc:	20000ddc 	.word	0x20000ddc

0800acd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800acd4:	4b03      	ldr	r3, [pc, #12]	; (800ace4 <vTaskSuspendAll+0x14>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	1c5a      	adds	r2, r3, #1
 800acda:	4b02      	ldr	r3, [pc, #8]	; (800ace4 <vTaskSuspendAll+0x14>)
 800acdc:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800acde:	46c0      	nop			; (mov r8, r8)
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	20000e00 	.word	0x20000e00

0800ace8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800acee:	2300      	movs	r3, #0
 800acf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800acf2:	2300      	movs	r3, #0
 800acf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800acf6:	4b3a      	ldr	r3, [pc, #232]	; (800ade0 <xTaskResumeAll+0xf8>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d101      	bne.n	800ad02 <xTaskResumeAll+0x1a>
 800acfe:	b672      	cpsid	i
 800ad00:	e7fe      	b.n	800ad00 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ad02:	f001 fa15 	bl	800c130 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ad06:	4b36      	ldr	r3, [pc, #216]	; (800ade0 <xTaskResumeAll+0xf8>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	1e5a      	subs	r2, r3, #1
 800ad0c:	4b34      	ldr	r3, [pc, #208]	; (800ade0 <xTaskResumeAll+0xf8>)
 800ad0e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad10:	4b33      	ldr	r3, [pc, #204]	; (800ade0 <xTaskResumeAll+0xf8>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d15b      	bne.n	800add0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ad18:	4b32      	ldr	r3, [pc, #200]	; (800ade4 <xTaskResumeAll+0xfc>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d057      	beq.n	800add0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad20:	e02f      	b.n	800ad82 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad22:	4b31      	ldr	r3, [pc, #196]	; (800ade8 <xTaskResumeAll+0x100>)
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	3318      	adds	r3, #24
 800ad2e:	0018      	movs	r0, r3
 800ad30:	f7ff f8a2 	bl	8009e78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	3304      	adds	r3, #4
 800ad38:	0018      	movs	r0, r3
 800ad3a:	f7ff f89d 	bl	8009e78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad42:	4b2a      	ldr	r3, [pc, #168]	; (800adec <xTaskResumeAll+0x104>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d903      	bls.n	800ad52 <xTaskResumeAll+0x6a>
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad4e:	4b27      	ldr	r3, [pc, #156]	; (800adec <xTaskResumeAll+0x104>)
 800ad50:	601a      	str	r2, [r3, #0]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad56:	0013      	movs	r3, r2
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	189b      	adds	r3, r3, r2
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	4a24      	ldr	r2, [pc, #144]	; (800adf0 <xTaskResumeAll+0x108>)
 800ad60:	189a      	adds	r2, r3, r2
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	3304      	adds	r3, #4
 800ad66:	0019      	movs	r1, r3
 800ad68:	0010      	movs	r0, r2
 800ad6a:	f7ff f82d 	bl	8009dc8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad72:	4b20      	ldr	r3, [pc, #128]	; (800adf4 <xTaskResumeAll+0x10c>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d302      	bcc.n	800ad82 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800ad7c:	4b1e      	ldr	r3, [pc, #120]	; (800adf8 <xTaskResumeAll+0x110>)
 800ad7e:	2201      	movs	r2, #1
 800ad80:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad82:	4b19      	ldr	r3, [pc, #100]	; (800ade8 <xTaskResumeAll+0x100>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1cb      	bne.n	800ad22 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d001      	beq.n	800ad94 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ad90:	f000 fb04 	bl	800b39c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ad94:	4b19      	ldr	r3, [pc, #100]	; (800adfc <xTaskResumeAll+0x114>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d00f      	beq.n	800adc0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ada0:	f000 f83c 	bl	800ae1c <xTaskIncrementTick>
 800ada4:	1e03      	subs	r3, r0, #0
 800ada6:	d002      	beq.n	800adae <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800ada8:	4b13      	ldr	r3, [pc, #76]	; (800adf8 <xTaskResumeAll+0x110>)
 800adaa:	2201      	movs	r2, #1
 800adac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	3b01      	subs	r3, #1
 800adb2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d1f2      	bne.n	800ada0 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 800adba:	4b10      	ldr	r3, [pc, #64]	; (800adfc <xTaskResumeAll+0x114>)
 800adbc:	2200      	movs	r2, #0
 800adbe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800adc0:	4b0d      	ldr	r3, [pc, #52]	; (800adf8 <xTaskResumeAll+0x110>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d003      	beq.n	800add0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800adc8:	2301      	movs	r3, #1
 800adca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800adcc:	f001 f9a0 	bl	800c110 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800add0:	f001 f9c0 	bl	800c154 <vPortExitCritical>

	return xAlreadyYielded;
 800add4:	68bb      	ldr	r3, [r7, #8]
}
 800add6:	0018      	movs	r0, r3
 800add8:	46bd      	mov	sp, r7
 800adda:	b004      	add	sp, #16
 800addc:	bd80      	pop	{r7, pc}
 800adde:	46c0      	nop			; (mov r8, r8)
 800ade0:	20000e00 	.word	0x20000e00
 800ade4:	20000dd8 	.word	0x20000dd8
 800ade8:	20000d98 	.word	0x20000d98
 800adec:	20000de0 	.word	0x20000de0
 800adf0:	20000598 	.word	0x20000598
 800adf4:	20000594 	.word	0x20000594
 800adf8:	20000dec 	.word	0x20000dec
 800adfc:	20000de8 	.word	0x20000de8

0800ae00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ae06:	4b04      	ldr	r3, [pc, #16]	; (800ae18 <xTaskGetTickCount+0x18>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ae0c:	687b      	ldr	r3, [r7, #4]
}
 800ae0e:	0018      	movs	r0, r3
 800ae10:	46bd      	mov	sp, r7
 800ae12:	b002      	add	sp, #8
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	46c0      	nop			; (mov r8, r8)
 800ae18:	20000ddc 	.word	0x20000ddc

0800ae1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b086      	sub	sp, #24
 800ae20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ae22:	2300      	movs	r3, #0
 800ae24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae26:	4b4a      	ldr	r3, [pc, #296]	; (800af50 <xTaskIncrementTick+0x134>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d000      	beq.n	800ae30 <xTaskIncrementTick+0x14>
 800ae2e:	e084      	b.n	800af3a <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae30:	4b48      	ldr	r3, [pc, #288]	; (800af54 <xTaskIncrementTick+0x138>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	3301      	adds	r3, #1
 800ae36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ae38:	4b46      	ldr	r3, [pc, #280]	; (800af54 <xTaskIncrementTick+0x138>)
 800ae3a:	693a      	ldr	r2, [r7, #16]
 800ae3c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d117      	bne.n	800ae74 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800ae44:	4b44      	ldr	r3, [pc, #272]	; (800af58 <xTaskIncrementTick+0x13c>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d001      	beq.n	800ae52 <xTaskIncrementTick+0x36>
 800ae4e:	b672      	cpsid	i
 800ae50:	e7fe      	b.n	800ae50 <xTaskIncrementTick+0x34>
 800ae52:	4b41      	ldr	r3, [pc, #260]	; (800af58 <xTaskIncrementTick+0x13c>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	60fb      	str	r3, [r7, #12]
 800ae58:	4b40      	ldr	r3, [pc, #256]	; (800af5c <xTaskIncrementTick+0x140>)
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	4b3e      	ldr	r3, [pc, #248]	; (800af58 <xTaskIncrementTick+0x13c>)
 800ae5e:	601a      	str	r2, [r3, #0]
 800ae60:	4b3e      	ldr	r3, [pc, #248]	; (800af5c <xTaskIncrementTick+0x140>)
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	601a      	str	r2, [r3, #0]
 800ae66:	4b3e      	ldr	r3, [pc, #248]	; (800af60 <xTaskIncrementTick+0x144>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	1c5a      	adds	r2, r3, #1
 800ae6c:	4b3c      	ldr	r3, [pc, #240]	; (800af60 <xTaskIncrementTick+0x144>)
 800ae6e:	601a      	str	r2, [r3, #0]
 800ae70:	f000 fa94 	bl	800b39c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae74:	4b3b      	ldr	r3, [pc, #236]	; (800af64 <xTaskIncrementTick+0x148>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	693a      	ldr	r2, [r7, #16]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d349      	bcc.n	800af12 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae7e:	4b36      	ldr	r3, [pc, #216]	; (800af58 <xTaskIncrementTick+0x13c>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d104      	bne.n	800ae92 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae88:	4b36      	ldr	r3, [pc, #216]	; (800af64 <xTaskIncrementTick+0x148>)
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	4252      	negs	r2, r2
 800ae8e:	601a      	str	r2, [r3, #0]
					break;
 800ae90:	e03f      	b.n	800af12 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae92:	4b31      	ldr	r3, [pc, #196]	; (800af58 <xTaskIncrementTick+0x13c>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	68db      	ldr	r3, [r3, #12]
 800ae9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aea2:	693a      	ldr	r2, [r7, #16]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d203      	bcs.n	800aeb2 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aeaa:	4b2e      	ldr	r3, [pc, #184]	; (800af64 <xTaskIncrementTick+0x148>)
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aeb0:	e02f      	b.n	800af12 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	3304      	adds	r3, #4
 800aeb6:	0018      	movs	r0, r3
 800aeb8:	f7fe ffde 	bl	8009e78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d004      	beq.n	800aece <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	3318      	adds	r3, #24
 800aec8:	0018      	movs	r0, r3
 800aeca:	f7fe ffd5 	bl	8009e78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed2:	4b25      	ldr	r3, [pc, #148]	; (800af68 <xTaskIncrementTick+0x14c>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d903      	bls.n	800aee2 <xTaskIncrementTick+0xc6>
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aede:	4b22      	ldr	r3, [pc, #136]	; (800af68 <xTaskIncrementTick+0x14c>)
 800aee0:	601a      	str	r2, [r3, #0]
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee6:	0013      	movs	r3, r2
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	189b      	adds	r3, r3, r2
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	4a1f      	ldr	r2, [pc, #124]	; (800af6c <xTaskIncrementTick+0x150>)
 800aef0:	189a      	adds	r2, r3, r2
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	3304      	adds	r3, #4
 800aef6:	0019      	movs	r1, r3
 800aef8:	0010      	movs	r0, r2
 800aefa:	f7fe ff65 	bl	8009dc8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af02:	4b1b      	ldr	r3, [pc, #108]	; (800af70 <xTaskIncrementTick+0x154>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af08:	429a      	cmp	r2, r3
 800af0a:	d3b8      	bcc.n	800ae7e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800af0c:	2301      	movs	r3, #1
 800af0e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af10:	e7b5      	b.n	800ae7e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800af12:	4b17      	ldr	r3, [pc, #92]	; (800af70 <xTaskIncrementTick+0x154>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af18:	4914      	ldr	r1, [pc, #80]	; (800af6c <xTaskIncrementTick+0x150>)
 800af1a:	0013      	movs	r3, r2
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	189b      	adds	r3, r3, r2
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	585b      	ldr	r3, [r3, r1]
 800af24:	2b01      	cmp	r3, #1
 800af26:	d901      	bls.n	800af2c <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 800af28:	2301      	movs	r3, #1
 800af2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800af2c:	4b11      	ldr	r3, [pc, #68]	; (800af74 <xTaskIncrementTick+0x158>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d007      	beq.n	800af44 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 800af34:	2301      	movs	r3, #1
 800af36:	617b      	str	r3, [r7, #20]
 800af38:	e004      	b.n	800af44 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800af3a:	4b0f      	ldr	r3, [pc, #60]	; (800af78 <xTaskIncrementTick+0x15c>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	1c5a      	adds	r2, r3, #1
 800af40:	4b0d      	ldr	r3, [pc, #52]	; (800af78 <xTaskIncrementTick+0x15c>)
 800af42:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800af44:	697b      	ldr	r3, [r7, #20]
}
 800af46:	0018      	movs	r0, r3
 800af48:	46bd      	mov	sp, r7
 800af4a:	b006      	add	sp, #24
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	46c0      	nop			; (mov r8, r8)
 800af50:	20000e00 	.word	0x20000e00
 800af54:	20000ddc 	.word	0x20000ddc
 800af58:	20000d90 	.word	0x20000d90
 800af5c:	20000d94 	.word	0x20000d94
 800af60:	20000df0 	.word	0x20000df0
 800af64:	20000df8 	.word	0x20000df8
 800af68:	20000de0 	.word	0x20000de0
 800af6c:	20000598 	.word	0x20000598
 800af70:	20000594 	.word	0x20000594
 800af74:	20000dec 	.word	0x20000dec
 800af78:	20000de8 	.word	0x20000de8

0800af7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800af82:	4b2e      	ldr	r3, [pc, #184]	; (800b03c <vTaskSwitchContext+0xc0>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d003      	beq.n	800af92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800af8a:	4b2d      	ldr	r3, [pc, #180]	; (800b040 <vTaskSwitchContext+0xc4>)
 800af8c:	2201      	movs	r2, #1
 800af8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800af90:	e050      	b.n	800b034 <vTaskSwitchContext+0xb8>
		xYieldPending = pdFALSE;
 800af92:	4b2b      	ldr	r3, [pc, #172]	; (800b040 <vTaskSwitchContext+0xc4>)
 800af94:	2200      	movs	r2, #0
 800af96:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800af98:	f7f8 f8d1 	bl	800313e <getRunTimeCounterValue>
 800af9c:	0002      	movs	r2, r0
 800af9e:	4b29      	ldr	r3, [pc, #164]	; (800b044 <vTaskSwitchContext+0xc8>)
 800afa0:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800afa2:	4b28      	ldr	r3, [pc, #160]	; (800b044 <vTaskSwitchContext+0xc8>)
 800afa4:	681a      	ldr	r2, [r3, #0]
 800afa6:	4b28      	ldr	r3, [pc, #160]	; (800b048 <vTaskSwitchContext+0xcc>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	429a      	cmp	r2, r3
 800afac:	d909      	bls.n	800afc2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800afae:	4b27      	ldr	r3, [pc, #156]	; (800b04c <vTaskSwitchContext+0xd0>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800afb4:	4a23      	ldr	r2, [pc, #140]	; (800b044 <vTaskSwitchContext+0xc8>)
 800afb6:	6810      	ldr	r0, [r2, #0]
 800afb8:	4a23      	ldr	r2, [pc, #140]	; (800b048 <vTaskSwitchContext+0xcc>)
 800afba:	6812      	ldr	r2, [r2, #0]
 800afbc:	1a82      	subs	r2, r0, r2
 800afbe:	188a      	adds	r2, r1, r2
 800afc0:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800afc2:	4b20      	ldr	r3, [pc, #128]	; (800b044 <vTaskSwitchContext+0xc8>)
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	4b20      	ldr	r3, [pc, #128]	; (800b048 <vTaskSwitchContext+0xcc>)
 800afc8:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afca:	4b21      	ldr	r3, [pc, #132]	; (800b050 <vTaskSwitchContext+0xd4>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	607b      	str	r3, [r7, #4]
 800afd0:	e007      	b.n	800afe2 <vTaskSwitchContext+0x66>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d101      	bne.n	800afdc <vTaskSwitchContext+0x60>
 800afd8:	b672      	cpsid	i
 800afda:	e7fe      	b.n	800afda <vTaskSwitchContext+0x5e>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	3b01      	subs	r3, #1
 800afe0:	607b      	str	r3, [r7, #4]
 800afe2:	491c      	ldr	r1, [pc, #112]	; (800b054 <vTaskSwitchContext+0xd8>)
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	0013      	movs	r3, r2
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	189b      	adds	r3, r3, r2
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	585b      	ldr	r3, [r3, r1]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d0ee      	beq.n	800afd2 <vTaskSwitchContext+0x56>
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	0013      	movs	r3, r2
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	189b      	adds	r3, r3, r2
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	4a15      	ldr	r2, [pc, #84]	; (800b054 <vTaskSwitchContext+0xd8>)
 800b000:	189b      	adds	r3, r3, r2
 800b002:	603b      	str	r3, [r7, #0]
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	685a      	ldr	r2, [r3, #4]
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	605a      	str	r2, [r3, #4]
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	685a      	ldr	r2, [r3, #4]
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	3308      	adds	r3, #8
 800b016:	429a      	cmp	r2, r3
 800b018:	d104      	bne.n	800b024 <vTaskSwitchContext+0xa8>
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	685a      	ldr	r2, [r3, #4]
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	605a      	str	r2, [r3, #4]
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	68da      	ldr	r2, [r3, #12]
 800b02a:	4b08      	ldr	r3, [pc, #32]	; (800b04c <vTaskSwitchContext+0xd0>)
 800b02c:	601a      	str	r2, [r3, #0]
 800b02e:	4b08      	ldr	r3, [pc, #32]	; (800b050 <vTaskSwitchContext+0xd4>)
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	601a      	str	r2, [r3, #0]
}
 800b034:	46c0      	nop			; (mov r8, r8)
 800b036:	46bd      	mov	sp, r7
 800b038:	b002      	add	sp, #8
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	20000e00 	.word	0x20000e00
 800b040:	20000dec 	.word	0x20000dec
 800b044:	20000e08 	.word	0x20000e08
 800b048:	20000e04 	.word	0x20000e04
 800b04c:	20000594 	.word	0x20000594
 800b050:	20000de0 	.word	0x20000de0
 800b054:	20000598 	.word	0x20000598

0800b058 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d101      	bne.n	800b06c <vTaskPlaceOnEventList+0x14>
 800b068:	b672      	cpsid	i
 800b06a:	e7fe      	b.n	800b06a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b06c:	4b08      	ldr	r3, [pc, #32]	; (800b090 <vTaskPlaceOnEventList+0x38>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	3318      	adds	r3, #24
 800b072:	001a      	movs	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	0011      	movs	r1, r2
 800b078:	0018      	movs	r0, r3
 800b07a:	f7fe fec7 	bl	8009e0c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	2101      	movs	r1, #1
 800b082:	0018      	movs	r0, r3
 800b084:	f000 fc10 	bl	800b8a8 <prvAddCurrentTaskToDelayedList>
}
 800b088:	46c0      	nop			; (mov r8, r8)
 800b08a:	46bd      	mov	sp, r7
 800b08c:	b002      	add	sp, #8
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	20000594 	.word	0x20000594

0800b094 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d101      	bne.n	800b0aa <vTaskPlaceOnEventListRestricted+0x16>
 800b0a6:	b672      	cpsid	i
 800b0a8:	e7fe      	b.n	800b0a8 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b0aa:	4b0c      	ldr	r3, [pc, #48]	; (800b0dc <vTaskPlaceOnEventListRestricted+0x48>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	3318      	adds	r3, #24
 800b0b0:	001a      	movs	r2, r3
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	0011      	movs	r1, r2
 800b0b6:	0018      	movs	r0, r3
 800b0b8:	f7fe fe86 	bl	8009dc8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d002      	beq.n	800b0c8 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	425b      	negs	r3, r3
 800b0c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	0011      	movs	r1, r2
 800b0ce:	0018      	movs	r0, r3
 800b0d0:	f000 fbea 	bl	800b8a8 <prvAddCurrentTaskToDelayedList>
	}
 800b0d4:	46c0      	nop			; (mov r8, r8)
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	b004      	add	sp, #16
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	20000594 	.word	0x20000594

0800b0e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	68db      	ldr	r3, [r3, #12]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d101      	bne.n	800b0fa <xTaskRemoveFromEventList+0x1a>
 800b0f6:	b672      	cpsid	i
 800b0f8:	e7fe      	b.n	800b0f8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	3318      	adds	r3, #24
 800b0fe:	0018      	movs	r0, r3
 800b100:	f7fe feba 	bl	8009e78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b104:	4b1e      	ldr	r3, [pc, #120]	; (800b180 <xTaskRemoveFromEventList+0xa0>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d11d      	bne.n	800b148 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	3304      	adds	r3, #4
 800b110:	0018      	movs	r0, r3
 800b112:	f7fe feb1 	bl	8009e78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b11a:	4b1a      	ldr	r3, [pc, #104]	; (800b184 <xTaskRemoveFromEventList+0xa4>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	429a      	cmp	r2, r3
 800b120:	d903      	bls.n	800b12a <xTaskRemoveFromEventList+0x4a>
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b126:	4b17      	ldr	r3, [pc, #92]	; (800b184 <xTaskRemoveFromEventList+0xa4>)
 800b128:	601a      	str	r2, [r3, #0]
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b12e:	0013      	movs	r3, r2
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	189b      	adds	r3, r3, r2
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	4a14      	ldr	r2, [pc, #80]	; (800b188 <xTaskRemoveFromEventList+0xa8>)
 800b138:	189a      	adds	r2, r3, r2
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	3304      	adds	r3, #4
 800b13e:	0019      	movs	r1, r3
 800b140:	0010      	movs	r0, r2
 800b142:	f7fe fe41 	bl	8009dc8 <vListInsertEnd>
 800b146:	e007      	b.n	800b158 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	3318      	adds	r3, #24
 800b14c:	001a      	movs	r2, r3
 800b14e:	4b0f      	ldr	r3, [pc, #60]	; (800b18c <xTaskRemoveFromEventList+0xac>)
 800b150:	0011      	movs	r1, r2
 800b152:	0018      	movs	r0, r3
 800b154:	f7fe fe38 	bl	8009dc8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b15c:	4b0c      	ldr	r3, [pc, #48]	; (800b190 <xTaskRemoveFromEventList+0xb0>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b162:	429a      	cmp	r2, r3
 800b164:	d905      	bls.n	800b172 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b166:	2301      	movs	r3, #1
 800b168:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b16a:	4b0a      	ldr	r3, [pc, #40]	; (800b194 <xTaskRemoveFromEventList+0xb4>)
 800b16c:	2201      	movs	r2, #1
 800b16e:	601a      	str	r2, [r3, #0]
 800b170:	e001      	b.n	800b176 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800b172:	2300      	movs	r3, #0
 800b174:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800b176:	68fb      	ldr	r3, [r7, #12]
}
 800b178:	0018      	movs	r0, r3
 800b17a:	46bd      	mov	sp, r7
 800b17c:	b004      	add	sp, #16
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	20000e00 	.word	0x20000e00
 800b184:	20000de0 	.word	0x20000de0
 800b188:	20000598 	.word	0x20000598
 800b18c:	20000d98 	.word	0x20000d98
 800b190:	20000594 	.word	0x20000594
 800b194:	20000dec 	.word	0x20000dec

0800b198 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b1a0:	4b05      	ldr	r3, [pc, #20]	; (800b1b8 <vTaskInternalSetTimeOutState+0x20>)
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b1a8:	4b04      	ldr	r3, [pc, #16]	; (800b1bc <vTaskInternalSetTimeOutState+0x24>)
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	605a      	str	r2, [r3, #4]
}
 800b1b0:	46c0      	nop			; (mov r8, r8)
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	b002      	add	sp, #8
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	20000df0 	.word	0x20000df0
 800b1bc:	20000ddc 	.word	0x20000ddc

0800b1c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b086      	sub	sp, #24
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d101      	bne.n	800b1d4 <xTaskCheckForTimeOut+0x14>
 800b1d0:	b672      	cpsid	i
 800b1d2:	e7fe      	b.n	800b1d2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d101      	bne.n	800b1de <xTaskCheckForTimeOut+0x1e>
 800b1da:	b672      	cpsid	i
 800b1dc:	e7fe      	b.n	800b1dc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800b1de:	f000 ffa7 	bl	800c130 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b1e2:	4b1d      	ldr	r3, [pc, #116]	; (800b258 <xTaskCheckForTimeOut+0x98>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	693a      	ldr	r2, [r7, #16]
 800b1ee:	1ad3      	subs	r3, r2, r3
 800b1f0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	d102      	bne.n	800b200 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	617b      	str	r3, [r7, #20]
 800b1fe:	e024      	b.n	800b24a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	4b15      	ldr	r3, [pc, #84]	; (800b25c <xTaskCheckForTimeOut+0x9c>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d007      	beq.n	800b21c <xTaskCheckForTimeOut+0x5c>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	693a      	ldr	r2, [r7, #16]
 800b212:	429a      	cmp	r2, r3
 800b214:	d302      	bcc.n	800b21c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b216:	2301      	movs	r3, #1
 800b218:	617b      	str	r3, [r7, #20]
 800b21a:	e016      	b.n	800b24a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	68fa      	ldr	r2, [r7, #12]
 800b222:	429a      	cmp	r2, r3
 800b224:	d20c      	bcs.n	800b240 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	1ad2      	subs	r2, r2, r3
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	0018      	movs	r0, r3
 800b236:	f7ff ffaf 	bl	800b198 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b23a:	2300      	movs	r3, #0
 800b23c:	617b      	str	r3, [r7, #20]
 800b23e:	e004      	b.n	800b24a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	2200      	movs	r2, #0
 800b244:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b246:	2301      	movs	r3, #1
 800b248:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800b24a:	f000 ff83 	bl	800c154 <vPortExitCritical>

	return xReturn;
 800b24e:	697b      	ldr	r3, [r7, #20]
}
 800b250:	0018      	movs	r0, r3
 800b252:	46bd      	mov	sp, r7
 800b254:	b006      	add	sp, #24
 800b256:	bd80      	pop	{r7, pc}
 800b258:	20000ddc 	.word	0x20000ddc
 800b25c:	20000df0 	.word	0x20000df0

0800b260 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b260:	b580      	push	{r7, lr}
 800b262:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b264:	4b02      	ldr	r3, [pc, #8]	; (800b270 <vTaskMissedYield+0x10>)
 800b266:	2201      	movs	r2, #1
 800b268:	601a      	str	r2, [r3, #0]
}
 800b26a:	46c0      	nop			; (mov r8, r8)
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	20000dec 	.word	0x20000dec

0800b274 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b27c:	f000 f84e 	bl	800b31c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b280:	4b03      	ldr	r3, [pc, #12]	; (800b290 <prvIdleTask+0x1c>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b01      	cmp	r3, #1
 800b286:	d9f9      	bls.n	800b27c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b288:	f000 ff42 	bl	800c110 <vPortYield>
		prvCheckTasksWaitingTermination();
 800b28c:	e7f6      	b.n	800b27c <prvIdleTask+0x8>
 800b28e:	46c0      	nop			; (mov r8, r8)
 800b290:	20000598 	.word	0x20000598

0800b294 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b29a:	2300      	movs	r3, #0
 800b29c:	607b      	str	r3, [r7, #4]
 800b29e:	e00c      	b.n	800b2ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	0013      	movs	r3, r2
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	189b      	adds	r3, r3, r2
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	4a14      	ldr	r2, [pc, #80]	; (800b2fc <prvInitialiseTaskLists+0x68>)
 800b2ac:	189b      	adds	r3, r3, r2
 800b2ae:	0018      	movs	r0, r3
 800b2b0:	f7fe fd61 	bl	8009d76 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	607b      	str	r3, [r7, #4]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2b63      	cmp	r3, #99	; 0x63
 800b2be:	d9ef      	bls.n	800b2a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b2c0:	4b0f      	ldr	r3, [pc, #60]	; (800b300 <prvInitialiseTaskLists+0x6c>)
 800b2c2:	0018      	movs	r0, r3
 800b2c4:	f7fe fd57 	bl	8009d76 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b2c8:	4b0e      	ldr	r3, [pc, #56]	; (800b304 <prvInitialiseTaskLists+0x70>)
 800b2ca:	0018      	movs	r0, r3
 800b2cc:	f7fe fd53 	bl	8009d76 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b2d0:	4b0d      	ldr	r3, [pc, #52]	; (800b308 <prvInitialiseTaskLists+0x74>)
 800b2d2:	0018      	movs	r0, r3
 800b2d4:	f7fe fd4f 	bl	8009d76 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b2d8:	4b0c      	ldr	r3, [pc, #48]	; (800b30c <prvInitialiseTaskLists+0x78>)
 800b2da:	0018      	movs	r0, r3
 800b2dc:	f7fe fd4b 	bl	8009d76 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b2e0:	4b0b      	ldr	r3, [pc, #44]	; (800b310 <prvInitialiseTaskLists+0x7c>)
 800b2e2:	0018      	movs	r0, r3
 800b2e4:	f7fe fd47 	bl	8009d76 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b2e8:	4b0a      	ldr	r3, [pc, #40]	; (800b314 <prvInitialiseTaskLists+0x80>)
 800b2ea:	4a05      	ldr	r2, [pc, #20]	; (800b300 <prvInitialiseTaskLists+0x6c>)
 800b2ec:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b2ee:	4b0a      	ldr	r3, [pc, #40]	; (800b318 <prvInitialiseTaskLists+0x84>)
 800b2f0:	4a04      	ldr	r2, [pc, #16]	; (800b304 <prvInitialiseTaskLists+0x70>)
 800b2f2:	601a      	str	r2, [r3, #0]
}
 800b2f4:	46c0      	nop			; (mov r8, r8)
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	b002      	add	sp, #8
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	20000598 	.word	0x20000598
 800b300:	20000d68 	.word	0x20000d68
 800b304:	20000d7c 	.word	0x20000d7c
 800b308:	20000d98 	.word	0x20000d98
 800b30c:	20000dac 	.word	0x20000dac
 800b310:	20000dc4 	.word	0x20000dc4
 800b314:	20000d90 	.word	0x20000d90
 800b318:	20000d94 	.word	0x20000d94

0800b31c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b322:	e01a      	b.n	800b35a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800b324:	f000 ff04 	bl	800c130 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b328:	4b10      	ldr	r3, [pc, #64]	; (800b36c <prvCheckTasksWaitingTermination+0x50>)
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	3304      	adds	r3, #4
 800b334:	0018      	movs	r0, r3
 800b336:	f7fe fd9f 	bl	8009e78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b33a:	4b0d      	ldr	r3, [pc, #52]	; (800b370 <prvCheckTasksWaitingTermination+0x54>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	1e5a      	subs	r2, r3, #1
 800b340:	4b0b      	ldr	r3, [pc, #44]	; (800b370 <prvCheckTasksWaitingTermination+0x54>)
 800b342:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b344:	4b0b      	ldr	r3, [pc, #44]	; (800b374 <prvCheckTasksWaitingTermination+0x58>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	1e5a      	subs	r2, r3, #1
 800b34a:	4b0a      	ldr	r3, [pc, #40]	; (800b374 <prvCheckTasksWaitingTermination+0x58>)
 800b34c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800b34e:	f000 ff01 	bl	800c154 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	0018      	movs	r0, r3
 800b356:	f000 f80f 	bl	800b378 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b35a:	4b06      	ldr	r3, [pc, #24]	; (800b374 <prvCheckTasksWaitingTermination+0x58>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d1e0      	bne.n	800b324 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b362:	46c0      	nop			; (mov r8, r8)
 800b364:	46c0      	nop			; (mov r8, r8)
 800b366:	46bd      	mov	sp, r7
 800b368:	b002      	add	sp, #8
 800b36a:	bd80      	pop	{r7, pc}
 800b36c:	20000dac 	.word	0x20000dac
 800b370:	20000dd8 	.word	0x20000dd8
 800b374:	20000dc0 	.word	0x20000dc0

0800b378 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b384:	0018      	movs	r0, r3
 800b386:	f001 f817 	bl	800c3b8 <vPortFree>
			vPortFree( pxTCB );
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	0018      	movs	r0, r3
 800b38e:	f001 f813 	bl	800c3b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b392:	46c0      	nop			; (mov r8, r8)
 800b394:	46bd      	mov	sp, r7
 800b396:	b002      	add	sp, #8
 800b398:	bd80      	pop	{r7, pc}
	...

0800b39c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b082      	sub	sp, #8
 800b3a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3a2:	4b0b      	ldr	r3, [pc, #44]	; (800b3d0 <prvResetNextTaskUnblockTime+0x34>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d104      	bne.n	800b3b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b3ac:	4b09      	ldr	r3, [pc, #36]	; (800b3d4 <prvResetNextTaskUnblockTime+0x38>)
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	4252      	negs	r2, r2
 800b3b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b3b4:	e008      	b.n	800b3c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3b6:	4b06      	ldr	r3, [pc, #24]	; (800b3d0 <prvResetNextTaskUnblockTime+0x34>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	68db      	ldr	r3, [r3, #12]
 800b3be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	685a      	ldr	r2, [r3, #4]
 800b3c4:	4b03      	ldr	r3, [pc, #12]	; (800b3d4 <prvResetNextTaskUnblockTime+0x38>)
 800b3c6:	601a      	str	r2, [r3, #0]
}
 800b3c8:	46c0      	nop			; (mov r8, r8)
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	b002      	add	sp, #8
 800b3ce:	bd80      	pop	{r7, pc}
 800b3d0:	20000d90 	.word	0x20000d90
 800b3d4:	20000df8 	.word	0x20000df8

0800b3d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b3de:	4b0a      	ldr	r3, [pc, #40]	; (800b408 <xTaskGetSchedulerState+0x30>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d102      	bne.n	800b3ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	607b      	str	r3, [r7, #4]
 800b3ea:	e008      	b.n	800b3fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3ec:	4b07      	ldr	r3, [pc, #28]	; (800b40c <xTaskGetSchedulerState+0x34>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d102      	bne.n	800b3fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b3f4:	2302      	movs	r3, #2
 800b3f6:	607b      	str	r3, [r7, #4]
 800b3f8:	e001      	b.n	800b3fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b3fe:	687b      	ldr	r3, [r7, #4]
	}
 800b400:	0018      	movs	r0, r3
 800b402:	46bd      	mov	sp, r7
 800b404:	b002      	add	sp, #8
 800b406:	bd80      	pop	{r7, pc}
 800b408:	20000de4 	.word	0x20000de4
 800b40c:	20000e00 	.word	0x20000e00

0800b410 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b41c:	2300      	movs	r3, #0
 800b41e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d051      	beq.n	800b4ca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b42a:	4b2a      	ldr	r3, [pc, #168]	; (800b4d4 <xTaskPriorityInherit+0xc4>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b430:	429a      	cmp	r2, r3
 800b432:	d241      	bcs.n	800b4b8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	699b      	ldr	r3, [r3, #24]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	db06      	blt.n	800b44a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b43c:	4b25      	ldr	r3, [pc, #148]	; (800b4d4 <xTaskPriorityInherit+0xc4>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b442:	2264      	movs	r2, #100	; 0x64
 800b444:	1ad2      	subs	r2, r2, r3
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	6959      	ldr	r1, [r3, #20]
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b452:	0013      	movs	r3, r2
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	189b      	adds	r3, r3, r2
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	4a1f      	ldr	r2, [pc, #124]	; (800b4d8 <xTaskPriorityInherit+0xc8>)
 800b45c:	189b      	adds	r3, r3, r2
 800b45e:	4299      	cmp	r1, r3
 800b460:	d122      	bne.n	800b4a8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	3304      	adds	r3, #4
 800b466:	0018      	movs	r0, r3
 800b468:	f7fe fd06 	bl	8009e78 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b46c:	4b19      	ldr	r3, [pc, #100]	; (800b4d4 <xTaskPriorityInherit+0xc4>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b47a:	4b18      	ldr	r3, [pc, #96]	; (800b4dc <xTaskPriorityInherit+0xcc>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d903      	bls.n	800b48a <xTaskPriorityInherit+0x7a>
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b486:	4b15      	ldr	r3, [pc, #84]	; (800b4dc <xTaskPriorityInherit+0xcc>)
 800b488:	601a      	str	r2, [r3, #0]
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b48e:	0013      	movs	r3, r2
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	189b      	adds	r3, r3, r2
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	4a10      	ldr	r2, [pc, #64]	; (800b4d8 <xTaskPriorityInherit+0xc8>)
 800b498:	189a      	adds	r2, r3, r2
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	3304      	adds	r3, #4
 800b49e:	0019      	movs	r1, r3
 800b4a0:	0010      	movs	r0, r2
 800b4a2:	f7fe fc91 	bl	8009dc8 <vListInsertEnd>
 800b4a6:	e004      	b.n	800b4b2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b4a8:	4b0a      	ldr	r3, [pc, #40]	; (800b4d4 <xTaskPriorityInherit+0xc4>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	60fb      	str	r3, [r7, #12]
 800b4b6:	e008      	b.n	800b4ca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b4bc:	4b05      	ldr	r3, [pc, #20]	; (800b4d4 <xTaskPriorityInherit+0xc4>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d201      	bcs.n	800b4ca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
	}
 800b4cc:	0018      	movs	r0, r3
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	b004      	add	sp, #16
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	20000594 	.word	0x20000594
 800b4d8:	20000598 	.word	0x20000598
 800b4dc:	20000de0 	.word	0x20000de0

0800b4e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d044      	beq.n	800b580 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b4f6:	4b25      	ldr	r3, [pc, #148]	; (800b58c <xTaskPriorityDisinherit+0xac>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68ba      	ldr	r2, [r7, #8]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d001      	beq.n	800b504 <xTaskPriorityDisinherit+0x24>
 800b500:	b672      	cpsid	i
 800b502:	e7fe      	b.n	800b502 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d101      	bne.n	800b510 <xTaskPriorityDisinherit+0x30>
 800b50c:	b672      	cpsid	i
 800b50e:	e7fe      	b.n	800b50e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b514:	1e5a      	subs	r2, r3, #1
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b522:	429a      	cmp	r2, r3
 800b524:	d02c      	beq.n	800b580 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d128      	bne.n	800b580 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	3304      	adds	r3, #4
 800b532:	0018      	movs	r0, r3
 800b534:	f7fe fca0 	bl	8009e78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b544:	2264      	movs	r2, #100	; 0x64
 800b546:	1ad2      	subs	r2, r2, r3
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b550:	4b0f      	ldr	r3, [pc, #60]	; (800b590 <xTaskPriorityDisinherit+0xb0>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	429a      	cmp	r2, r3
 800b556:	d903      	bls.n	800b560 <xTaskPriorityDisinherit+0x80>
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b55c:	4b0c      	ldr	r3, [pc, #48]	; (800b590 <xTaskPriorityDisinherit+0xb0>)
 800b55e:	601a      	str	r2, [r3, #0]
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b564:	0013      	movs	r3, r2
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	189b      	adds	r3, r3, r2
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	4a09      	ldr	r2, [pc, #36]	; (800b594 <xTaskPriorityDisinherit+0xb4>)
 800b56e:	189a      	adds	r2, r3, r2
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	3304      	adds	r3, #4
 800b574:	0019      	movs	r1, r3
 800b576:	0010      	movs	r0, r2
 800b578:	f7fe fc26 	bl	8009dc8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b57c:	2301      	movs	r3, #1
 800b57e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b580:	68fb      	ldr	r3, [r7, #12]
	}
 800b582:	0018      	movs	r0, r3
 800b584:	46bd      	mov	sp, r7
 800b586:	b004      	add	sp, #16
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	46c0      	nop			; (mov r8, r8)
 800b58c:	20000594 	.word	0x20000594
 800b590:	20000de0 	.word	0x20000de0
 800b594:	20000598 	.word	0x20000598

0800b598 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b086      	sub	sp, #24
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d058      	beq.n	800b662 <vTaskPriorityDisinheritAfterTimeout+0xca>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d101      	bne.n	800b5bc <vTaskPriorityDisinheritAfterTimeout+0x24>
 800b5b8:	b672      	cpsid	i
 800b5ba:	e7fe      	b.n	800b5ba <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5c0:	683a      	ldr	r2, [r7, #0]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d902      	bls.n	800b5cc <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	617b      	str	r3, [r7, #20]
 800b5ca:	e002      	b.n	800b5d2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5d0:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d6:	697a      	ldr	r2, [r7, #20]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d042      	beq.n	800b662 <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5e0:	68fa      	ldr	r2, [r7, #12]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d13d      	bne.n	800b662 <vTaskPriorityDisinheritAfterTimeout+0xca>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b5e6:	4b21      	ldr	r3, [pc, #132]	; (800b66c <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	693a      	ldr	r2, [r7, #16]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d101      	bne.n	800b5f4 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 800b5f0:	b672      	cpsid	i
 800b5f2:	e7fe      	b.n	800b5f2 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f8:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	697a      	ldr	r2, [r7, #20]
 800b5fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	699b      	ldr	r3, [r3, #24]
 800b604:	2b00      	cmp	r3, #0
 800b606:	db04      	blt.n	800b612 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	2264      	movs	r2, #100	; 0x64
 800b60c:	1ad2      	subs	r2, r2, r3
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	6959      	ldr	r1, [r3, #20]
 800b616:	68ba      	ldr	r2, [r7, #8]
 800b618:	0013      	movs	r3, r2
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	189b      	adds	r3, r3, r2
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	4a13      	ldr	r2, [pc, #76]	; (800b670 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 800b622:	189b      	adds	r3, r3, r2
 800b624:	4299      	cmp	r1, r3
 800b626:	d11c      	bne.n	800b662 <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	3304      	adds	r3, #4
 800b62c:	0018      	movs	r0, r3
 800b62e:	f7fe fc23 	bl	8009e78 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b636:	4b0f      	ldr	r3, [pc, #60]	; (800b674 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d903      	bls.n	800b646 <vTaskPriorityDisinheritAfterTimeout+0xae>
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b642:	4b0c      	ldr	r3, [pc, #48]	; (800b674 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800b644:	601a      	str	r2, [r3, #0]
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b64a:	0013      	movs	r3, r2
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	189b      	adds	r3, r3, r2
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	4a07      	ldr	r2, [pc, #28]	; (800b670 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 800b654:	189a      	adds	r2, r3, r2
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	3304      	adds	r3, #4
 800b65a:	0019      	movs	r1, r3
 800b65c:	0010      	movs	r0, r2
 800b65e:	f7fe fbb3 	bl	8009dc8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b662:	46c0      	nop			; (mov r8, r8)
 800b664:	46bd      	mov	sp, r7
 800b666:	b006      	add	sp, #24
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	46c0      	nop			; (mov r8, r8)
 800b66c:	20000594 	.word	0x20000594
 800b670:	20000598 	.word	0x20000598
 800b674:	20000de0 	.word	0x20000de0

0800b678 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b678:	b580      	push	{r7, lr}
 800b67a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b67c:	4b06      	ldr	r3, [pc, #24]	; (800b698 <pvTaskIncrementMutexHeldCount+0x20>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d004      	beq.n	800b68e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b684:	4b04      	ldr	r3, [pc, #16]	; (800b698 <pvTaskIncrementMutexHeldCount+0x20>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b68a:	3201      	adds	r2, #1
 800b68c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b68e:	4b02      	ldr	r3, [pc, #8]	; (800b698 <pvTaskIncrementMutexHeldCount+0x20>)
 800b690:	681b      	ldr	r3, [r3, #0]
	}
 800b692:	0018      	movs	r0, r3
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	20000594 	.word	0x20000594

0800b69c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b086      	sub	sp, #24
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	60f8      	str	r0, [r7, #12]
 800b6a4:	60b9      	str	r1, [r7, #8]
 800b6a6:	607a      	str	r2, [r7, #4]
 800b6a8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b6aa:	f000 fd41 	bl	800c130 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b6ae:	4b24      	ldr	r3, [pc, #144]	; (800b740 <xTaskNotifyWait+0xa4>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	225c      	movs	r2, #92	; 0x5c
 800b6b4:	5c9b      	ldrb	r3, [r3, r2]
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	2b02      	cmp	r3, #2
 800b6ba:	d015      	beq.n	800b6e8 <xTaskNotifyWait+0x4c>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b6bc:	4b20      	ldr	r3, [pc, #128]	; (800b740 <xTaskNotifyWait+0xa4>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b6c2:	68f9      	ldr	r1, [r7, #12]
 800b6c4:	43c9      	mvns	r1, r1
 800b6c6:	400a      	ands	r2, r1
 800b6c8:	659a      	str	r2, [r3, #88]	; 0x58

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b6ca:	4b1d      	ldr	r3, [pc, #116]	; (800b740 <xTaskNotifyWait+0xa4>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	225c      	movs	r2, #92	; 0x5c
 800b6d0:	2101      	movs	r1, #1
 800b6d2:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d006      	beq.n	800b6e8 <xTaskNotifyWait+0x4c>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	2101      	movs	r1, #1
 800b6de:	0018      	movs	r0, r3
 800b6e0:	f000 f8e2 	bl	800b8a8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b6e4:	f000 fd14 	bl	800c110 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b6e8:	f000 fd34 	bl	800c154 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b6ec:	f000 fd20 	bl	800c130 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d004      	beq.n	800b700 <xTaskNotifyWait+0x64>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b6f6:	4b12      	ldr	r3, [pc, #72]	; (800b740 <xTaskNotifyWait+0xa4>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b700:	4b0f      	ldr	r3, [pc, #60]	; (800b740 <xTaskNotifyWait+0xa4>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	225c      	movs	r2, #92	; 0x5c
 800b706:	5c9b      	ldrb	r3, [r3, r2]
 800b708:	b2db      	uxtb	r3, r3
 800b70a:	2b02      	cmp	r3, #2
 800b70c:	d002      	beq.n	800b714 <xTaskNotifyWait+0x78>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b70e:	2300      	movs	r3, #0
 800b710:	617b      	str	r3, [r7, #20]
 800b712:	e008      	b.n	800b726 <xTaskNotifyWait+0x8a>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b714:	4b0a      	ldr	r3, [pc, #40]	; (800b740 <xTaskNotifyWait+0xa4>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b71a:	68b9      	ldr	r1, [r7, #8]
 800b71c:	43c9      	mvns	r1, r1
 800b71e:	400a      	ands	r2, r1
 800b720:	659a      	str	r2, [r3, #88]	; 0x58
				xReturn = pdTRUE;
 800b722:	2301      	movs	r3, #1
 800b724:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b726:	4b06      	ldr	r3, [pc, #24]	; (800b740 <xTaskNotifyWait+0xa4>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	225c      	movs	r2, #92	; 0x5c
 800b72c:	2100      	movs	r1, #0
 800b72e:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 800b730:	f000 fd10 	bl	800c154 <vPortExitCritical>

		return xReturn;
 800b734:	697b      	ldr	r3, [r7, #20]
	}
 800b736:	0018      	movs	r0, r3
 800b738:	46bd      	mov	sp, r7
 800b73a:	b006      	add	sp, #24
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	46c0      	nop			; (mov r8, r8)
 800b740:	20000594 	.word	0x20000594

0800b744 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b744:	b580      	push	{r7, lr}
 800b746:	b088      	sub	sp, #32
 800b748:	af00      	add	r7, sp, #0
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	603b      	str	r3, [r7, #0]
 800b750:	1dfb      	adds	r3, r7, #7
 800b752:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b754:	2301      	movs	r3, #1
 800b756:	61fb      	str	r3, [r7, #28]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d101      	bne.n	800b762 <xTaskGenericNotifyFromISR+0x1e>
 800b75e:	b672      	cpsid	i
 800b760:	e7fe      	b.n	800b760 <xTaskGenericNotifyFromISR+0x1c>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	61bb      	str	r3, [r7, #24]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b766:	f000 fd0d 	bl	800c184 <ulSetInterruptMaskFromISR>
 800b76a:	0003      	movs	r3, r0
 800b76c:	617b      	str	r3, [r7, #20]
		{
			if( pulPreviousNotificationValue != NULL )
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d003      	beq.n	800b77c <xTaskGenericNotifyFromISR+0x38>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b77c:	2313      	movs	r3, #19
 800b77e:	18fb      	adds	r3, r7, r3
 800b780:	69ba      	ldr	r2, [r7, #24]
 800b782:	215c      	movs	r1, #92	; 0x5c
 800b784:	5c52      	ldrb	r2, [r2, r1]
 800b786:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b788:	69bb      	ldr	r3, [r7, #24]
 800b78a:	225c      	movs	r2, #92	; 0x5c
 800b78c:	2102      	movs	r1, #2
 800b78e:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 800b790:	1dfb      	adds	r3, r7, #7
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	2b04      	cmp	r3, #4
 800b796:	d821      	bhi.n	800b7dc <xTaskGenericNotifyFromISR+0x98>
 800b798:	009a      	lsls	r2, r3, #2
 800b79a:	4b3c      	ldr	r3, [pc, #240]	; (800b88c <xTaskGenericNotifyFromISR+0x148>)
 800b79c:	18d3      	adds	r3, r2, r3
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b7a2:	69bb      	ldr	r3, [r7, #24]
 800b7a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	431a      	orrs	r2, r3
 800b7aa:	69bb      	ldr	r3, [r7, #24]
 800b7ac:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 800b7ae:	e01e      	b.n	800b7ee <xTaskGenericNotifyFromISR+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b7b0:	69bb      	ldr	r3, [r7, #24]
 800b7b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7b4:	1c5a      	adds	r2, r3, #1
 800b7b6:	69bb      	ldr	r3, [r7, #24]
 800b7b8:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 800b7ba:	e018      	b.n	800b7ee <xTaskGenericNotifyFromISR+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b7bc:	69bb      	ldr	r3, [r7, #24]
 800b7be:	68ba      	ldr	r2, [r7, #8]
 800b7c0:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 800b7c2:	e014      	b.n	800b7ee <xTaskGenericNotifyFromISR+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b7c4:	2313      	movs	r3, #19
 800b7c6:	18fb      	adds	r3, r7, r3
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	2b02      	cmp	r3, #2
 800b7cc:	d003      	beq.n	800b7d6 <xTaskGenericNotifyFromISR+0x92>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	68ba      	ldr	r2, [r7, #8]
 800b7d2:	659a      	str	r2, [r3, #88]	; 0x58
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b7d4:	e00b      	b.n	800b7ee <xTaskGenericNotifyFromISR+0xaa>
						xReturn = pdFAIL;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	61fb      	str	r3, [r7, #28]
					break;
 800b7da:	e008      	b.n	800b7ee <xTaskGenericNotifyFromISR+0xaa>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b7dc:	69bb      	ldr	r3, [r7, #24]
 800b7de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	d003      	beq.n	800b7ec <xTaskGenericNotifyFromISR+0xa8>
 800b7e4:	b672      	cpsid	i
 800b7e6:	e7fe      	b.n	800b7e6 <xTaskGenericNotifyFromISR+0xa2>
					break;
 800b7e8:	46c0      	nop			; (mov r8, r8)
 800b7ea:	e000      	b.n	800b7ee <xTaskGenericNotifyFromISR+0xaa>
					break;
 800b7ec:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b7ee:	2313      	movs	r3, #19
 800b7f0:	18fb      	adds	r3, r7, r3
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d13f      	bne.n	800b878 <xTaskGenericNotifyFromISR+0x134>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d001      	beq.n	800b804 <xTaskGenericNotifyFromISR+0xc0>
 800b800:	b672      	cpsid	i
 800b802:	e7fe      	b.n	800b802 <xTaskGenericNotifyFromISR+0xbe>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b804:	4b22      	ldr	r3, [pc, #136]	; (800b890 <xTaskGenericNotifyFromISR+0x14c>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d11d      	bne.n	800b848 <xTaskGenericNotifyFromISR+0x104>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	3304      	adds	r3, #4
 800b810:	0018      	movs	r0, r3
 800b812:	f7fe fb31 	bl	8009e78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b816:	69bb      	ldr	r3, [r7, #24]
 800b818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b81a:	4b1e      	ldr	r3, [pc, #120]	; (800b894 <xTaskGenericNotifyFromISR+0x150>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d903      	bls.n	800b82a <xTaskGenericNotifyFromISR+0xe6>
 800b822:	69bb      	ldr	r3, [r7, #24]
 800b824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b826:	4b1b      	ldr	r3, [pc, #108]	; (800b894 <xTaskGenericNotifyFromISR+0x150>)
 800b828:	601a      	str	r2, [r3, #0]
 800b82a:	69bb      	ldr	r3, [r7, #24]
 800b82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b82e:	0013      	movs	r3, r2
 800b830:	009b      	lsls	r3, r3, #2
 800b832:	189b      	adds	r3, r3, r2
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	4a18      	ldr	r2, [pc, #96]	; (800b898 <xTaskGenericNotifyFromISR+0x154>)
 800b838:	189a      	adds	r2, r3, r2
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	3304      	adds	r3, #4
 800b83e:	0019      	movs	r1, r3
 800b840:	0010      	movs	r0, r2
 800b842:	f7fe fac1 	bl	8009dc8 <vListInsertEnd>
 800b846:	e007      	b.n	800b858 <xTaskGenericNotifyFromISR+0x114>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	3318      	adds	r3, #24
 800b84c:	001a      	movs	r2, r3
 800b84e:	4b13      	ldr	r3, [pc, #76]	; (800b89c <xTaskGenericNotifyFromISR+0x158>)
 800b850:	0011      	movs	r1, r2
 800b852:	0018      	movs	r0, r3
 800b854:	f7fe fab8 	bl	8009dc8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b85c:	4b10      	ldr	r3, [pc, #64]	; (800b8a0 <xTaskGenericNotifyFromISR+0x15c>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b862:	429a      	cmp	r2, r3
 800b864:	d908      	bls.n	800b878 <xTaskGenericNotifyFromISR+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d002      	beq.n	800b872 <xTaskGenericNotifyFromISR+0x12e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86e:	2201      	movs	r2, #1
 800b870:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b872:	4b0c      	ldr	r3, [pc, #48]	; (800b8a4 <xTaskGenericNotifyFromISR+0x160>)
 800b874:	2201      	movs	r2, #1
 800b876:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	0018      	movs	r0, r3
 800b87c:	f000 fc88 	bl	800c190 <vClearInterruptMaskFromISR>

		return xReturn;
 800b880:	69fb      	ldr	r3, [r7, #28]
	}
 800b882:	0018      	movs	r0, r3
 800b884:	46bd      	mov	sp, r7
 800b886:	b008      	add	sp, #32
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	46c0      	nop			; (mov r8, r8)
 800b88c:	0801103c 	.word	0x0801103c
 800b890:	20000e00 	.word	0x20000e00
 800b894:	20000de0 	.word	0x20000de0
 800b898:	20000598 	.word	0x20000598
 800b89c:	20000d98 	.word	0x20000d98
 800b8a0:	20000594 	.word	0x20000594
 800b8a4:	20000dec 	.word	0x20000dec

0800b8a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b8b2:	4b21      	ldr	r3, [pc, #132]	; (800b938 <prvAddCurrentTaskToDelayedList+0x90>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8b8:	4b20      	ldr	r3, [pc, #128]	; (800b93c <prvAddCurrentTaskToDelayedList+0x94>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	3304      	adds	r3, #4
 800b8be:	0018      	movs	r0, r3
 800b8c0:	f7fe fada 	bl	8009e78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	d10b      	bne.n	800b8e2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d008      	beq.n	800b8e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8d0:	4b1a      	ldr	r3, [pc, #104]	; (800b93c <prvAddCurrentTaskToDelayedList+0x94>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	1d1a      	adds	r2, r3, #4
 800b8d6:	4b1a      	ldr	r3, [pc, #104]	; (800b940 <prvAddCurrentTaskToDelayedList+0x98>)
 800b8d8:	0011      	movs	r1, r2
 800b8da:	0018      	movs	r0, r3
 800b8dc:	f7fe fa74 	bl	8009dc8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b8e0:	e026      	b.n	800b930 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	18d3      	adds	r3, r2, r3
 800b8e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b8ea:	4b14      	ldr	r3, [pc, #80]	; (800b93c <prvAddCurrentTaskToDelayedList+0x94>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	68ba      	ldr	r2, [r7, #8]
 800b8f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b8f2:	68ba      	ldr	r2, [r7, #8]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d209      	bcs.n	800b90e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8fa:	4b12      	ldr	r3, [pc, #72]	; (800b944 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	4b0f      	ldr	r3, [pc, #60]	; (800b93c <prvAddCurrentTaskToDelayedList+0x94>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	3304      	adds	r3, #4
 800b904:	0019      	movs	r1, r3
 800b906:	0010      	movs	r0, r2
 800b908:	f7fe fa80 	bl	8009e0c <vListInsert>
}
 800b90c:	e010      	b.n	800b930 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b90e:	4b0e      	ldr	r3, [pc, #56]	; (800b948 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b910:	681a      	ldr	r2, [r3, #0]
 800b912:	4b0a      	ldr	r3, [pc, #40]	; (800b93c <prvAddCurrentTaskToDelayedList+0x94>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	3304      	adds	r3, #4
 800b918:	0019      	movs	r1, r3
 800b91a:	0010      	movs	r0, r2
 800b91c:	f7fe fa76 	bl	8009e0c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b920:	4b0a      	ldr	r3, [pc, #40]	; (800b94c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	68ba      	ldr	r2, [r7, #8]
 800b926:	429a      	cmp	r2, r3
 800b928:	d202      	bcs.n	800b930 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b92a:	4b08      	ldr	r3, [pc, #32]	; (800b94c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b92c:	68ba      	ldr	r2, [r7, #8]
 800b92e:	601a      	str	r2, [r3, #0]
}
 800b930:	46c0      	nop			; (mov r8, r8)
 800b932:	46bd      	mov	sp, r7
 800b934:	b004      	add	sp, #16
 800b936:	bd80      	pop	{r7, pc}
 800b938:	20000ddc 	.word	0x20000ddc
 800b93c:	20000594 	.word	0x20000594
 800b940:	20000dc4 	.word	0x20000dc4
 800b944:	20000d94 	.word	0x20000d94
 800b948:	20000d90 	.word	0x20000d90
 800b94c:	20000df8 	.word	0x20000df8

0800b950 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800b956:	2300      	movs	r3, #0
 800b958:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b95a:	f000 faf5 	bl	800bf48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b95e:	4b0d      	ldr	r3, [pc, #52]	; (800b994 <xTimerCreateTimerTask+0x44>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d00c      	beq.n	800b980 <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800b966:	2380      	movs	r3, #128	; 0x80
 800b968:	005a      	lsls	r2, r3, #1
 800b96a:	490b      	ldr	r1, [pc, #44]	; (800b998 <xTimerCreateTimerTask+0x48>)
 800b96c:	480b      	ldr	r0, [pc, #44]	; (800b99c <xTimerCreateTimerTask+0x4c>)
 800b96e:	4b0c      	ldr	r3, [pc, #48]	; (800b9a0 <xTimerCreateTimerTask+0x50>)
 800b970:	9301      	str	r3, [sp, #4]
 800b972:	2302      	movs	r3, #2
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	2300      	movs	r3, #0
 800b978:	f7ff f809 	bl	800a98e <xTaskCreate>
 800b97c:	0003      	movs	r3, r0
 800b97e:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d101      	bne.n	800b98a <xTimerCreateTimerTask+0x3a>
 800b986:	b672      	cpsid	i
 800b988:	e7fe      	b.n	800b988 <xTimerCreateTimerTask+0x38>
	return xReturn;
 800b98a:	687b      	ldr	r3, [r7, #4]
}
 800b98c:	0018      	movs	r0, r3
 800b98e:	46bd      	mov	sp, r7
 800b990:	b002      	add	sp, #8
 800b992:	bd80      	pop	{r7, pc}
 800b994:	20000e3c 	.word	0x20000e3c
 800b998:	08010a18 	.word	0x08010a18
 800b99c:	0800bb6d 	.word	0x0800bb6d
 800b9a0:	20000e40 	.word	0x20000e40

0800b9a4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b9a4:	b590      	push	{r4, r7, lr}
 800b9a6:	b089      	sub	sp, #36	; 0x24
 800b9a8:	af02      	add	r7, sp, #8
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	607a      	str	r2, [r7, #4]
 800b9b0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b9b2:	202c      	movs	r0, #44	; 0x2c
 800b9b4:	f000 fc54 	bl	800c260 <pvPortMalloc>
 800b9b8:	0003      	movs	r3, r0
 800b9ba:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d00e      	beq.n	800b9e0 <xTimerCreate+0x3c>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	2228      	movs	r2, #40	; 0x28
 800b9c6:	2100      	movs	r1, #0
 800b9c8:	5499      	strb	r1, [r3, r2]
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b9ca:	683c      	ldr	r4, [r7, #0]
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	68b9      	ldr	r1, [r7, #8]
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	9301      	str	r3, [sp, #4]
 800b9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d8:	9300      	str	r3, [sp, #0]
 800b9da:	0023      	movs	r3, r4
 800b9dc:	f000 f805 	bl	800b9ea <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b9e0:	697b      	ldr	r3, [r7, #20]
	}
 800b9e2:	0018      	movs	r0, r3
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	b007      	add	sp, #28
 800b9e8:	bd90      	pop	{r4, r7, pc}

0800b9ea <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b084      	sub	sp, #16
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	60f8      	str	r0, [r7, #12]
 800b9f2:	60b9      	str	r1, [r7, #8]
 800b9f4:	607a      	str	r2, [r7, #4]
 800b9f6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d101      	bne.n	800ba02 <prvInitialiseNewTimer+0x18>
 800b9fe:	b672      	cpsid	i
 800ba00:	e7fe      	b.n	800ba00 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 800ba02:	69fb      	ldr	r3, [r7, #28]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d01e      	beq.n	800ba46 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ba08:	f000 fa9e 	bl	800bf48 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ba0c:	69fb      	ldr	r3, [r7, #28]
 800ba0e:	68fa      	ldr	r2, [r7, #12]
 800ba10:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	68ba      	ldr	r2, [r7, #8]
 800ba16:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	683a      	ldr	r2, [r7, #0]
 800ba1c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ba1e:	69fb      	ldr	r3, [r7, #28]
 800ba20:	69ba      	ldr	r2, [r7, #24]
 800ba22:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	3304      	adds	r3, #4
 800ba28:	0018      	movs	r0, r3
 800ba2a:	f7fe f9c2 	bl	8009db2 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d008      	beq.n	800ba46 <prvInitialiseNewTimer+0x5c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ba34:	69fb      	ldr	r3, [r7, #28]
 800ba36:	2228      	movs	r2, #40	; 0x28
 800ba38:	5c9b      	ldrb	r3, [r3, r2]
 800ba3a:	2204      	movs	r2, #4
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	b2d9      	uxtb	r1, r3
 800ba40:	69fb      	ldr	r3, [r7, #28]
 800ba42:	2228      	movs	r2, #40	; 0x28
 800ba44:	5499      	strb	r1, [r3, r2]
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ba46:	46c0      	nop			; (mov r8, r8)
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	b004      	add	sp, #16
 800ba4c:	bd80      	pop	{r7, pc}
	...

0800ba50 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ba50:	b590      	push	{r4, r7, lr}
 800ba52:	b089      	sub	sp, #36	; 0x24
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	607a      	str	r2, [r7, #4]
 800ba5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d101      	bne.n	800ba6c <xTimerGenericCommand+0x1c>
 800ba68:	b672      	cpsid	i
 800ba6a:	e7fe      	b.n	800ba6a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ba6c:	4b1c      	ldr	r3, [pc, #112]	; (800bae0 <xTimerGenericCommand+0x90>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d030      	beq.n	800bad6 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ba74:	2410      	movs	r4, #16
 800ba76:	193b      	adds	r3, r7, r4
 800ba78:	68ba      	ldr	r2, [r7, #8]
 800ba7a:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ba7c:	193b      	adds	r3, r7, r4
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ba82:	193b      	adds	r3, r7, r4
 800ba84:	68fa      	ldr	r2, [r7, #12]
 800ba86:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	2b05      	cmp	r3, #5
 800ba8c:	dc19      	bgt.n	800bac2 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ba8e:	f7ff fca3 	bl	800b3d8 <xTaskGetSchedulerState>
 800ba92:	0003      	movs	r3, r0
 800ba94:	2b02      	cmp	r3, #2
 800ba96:	d109      	bne.n	800baac <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ba98:	4b11      	ldr	r3, [pc, #68]	; (800bae0 <xTimerGenericCommand+0x90>)
 800ba9a:	6818      	ldr	r0, [r3, #0]
 800ba9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba9e:	1939      	adds	r1, r7, r4
 800baa0:	2300      	movs	r3, #0
 800baa2:	f7fe faba 	bl	800a01a <xQueueGenericSend>
 800baa6:	0003      	movs	r3, r0
 800baa8:	61fb      	str	r3, [r7, #28]
 800baaa:	e014      	b.n	800bad6 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800baac:	4b0c      	ldr	r3, [pc, #48]	; (800bae0 <xTimerGenericCommand+0x90>)
 800baae:	6818      	ldr	r0, [r3, #0]
 800bab0:	2310      	movs	r3, #16
 800bab2:	18f9      	adds	r1, r7, r3
 800bab4:	2300      	movs	r3, #0
 800bab6:	2200      	movs	r2, #0
 800bab8:	f7fe faaf 	bl	800a01a <xQueueGenericSend>
 800babc:	0003      	movs	r3, r0
 800babe:	61fb      	str	r3, [r7, #28]
 800bac0:	e009      	b.n	800bad6 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bac2:	4b07      	ldr	r3, [pc, #28]	; (800bae0 <xTimerGenericCommand+0x90>)
 800bac4:	6818      	ldr	r0, [r3, #0]
 800bac6:	683a      	ldr	r2, [r7, #0]
 800bac8:	2310      	movs	r3, #16
 800baca:	18f9      	adds	r1, r7, r3
 800bacc:	2300      	movs	r3, #0
 800bace:	f7fe fb68 	bl	800a1a2 <xQueueGenericSendFromISR>
 800bad2:	0003      	movs	r3, r0
 800bad4:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bad6:	69fb      	ldr	r3, [r7, #28]
}
 800bad8:	0018      	movs	r0, r3
 800bada:	46bd      	mov	sp, r7
 800badc:	b009      	add	sp, #36	; 0x24
 800bade:	bd90      	pop	{r4, r7, pc}
 800bae0:	20000e3c 	.word	0x20000e3c

0800bae4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b086      	sub	sp, #24
 800bae8:	af02      	add	r7, sp, #8
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baee:	4b1e      	ldr	r3, [pc, #120]	; (800bb68 <prvProcessExpiredTimer+0x84>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	3304      	adds	r3, #4
 800bafc:	0018      	movs	r0, r3
 800bafe:	f7fe f9bb 	bl	8009e78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2228      	movs	r2, #40	; 0x28
 800bb06:	5c9b      	ldrb	r3, [r3, r2]
 800bb08:	001a      	movs	r2, r3
 800bb0a:	2304      	movs	r3, #4
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	d019      	beq.n	800bb44 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	699a      	ldr	r2, [r3, #24]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	18d1      	adds	r1, r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	683a      	ldr	r2, [r7, #0]
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	f000 f8c3 	bl	800bca8 <prvInsertTimerInActiveList>
 800bb22:	1e03      	subs	r3, r0, #0
 800bb24:	d017      	beq.n	800bb56 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	68f8      	ldr	r0, [r7, #12]
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	9300      	str	r3, [sp, #0]
 800bb2e:	2300      	movs	r3, #0
 800bb30:	2100      	movs	r1, #0
 800bb32:	f7ff ff8d 	bl	800ba50 <xTimerGenericCommand>
 800bb36:	0003      	movs	r3, r0
 800bb38:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d10a      	bne.n	800bb56 <prvProcessExpiredTimer+0x72>
 800bb40:	b672      	cpsid	i
 800bb42:	e7fe      	b.n	800bb42 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2228      	movs	r2, #40	; 0x28
 800bb48:	5c9b      	ldrb	r3, [r3, r2]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	4393      	bics	r3, r2
 800bb4e:	b2d9      	uxtb	r1, r3
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2228      	movs	r2, #40	; 0x28
 800bb54:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	6a1b      	ldr	r3, [r3, #32]
 800bb5a:	68fa      	ldr	r2, [r7, #12]
 800bb5c:	0010      	movs	r0, r2
 800bb5e:	4798      	blx	r3
}
 800bb60:	46c0      	nop			; (mov r8, r8)
 800bb62:	46bd      	mov	sp, r7
 800bb64:	b004      	add	sp, #16
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	20000e34 	.word	0x20000e34

0800bb6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b084      	sub	sp, #16
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb74:	2308      	movs	r3, #8
 800bb76:	18fb      	adds	r3, r7, r3
 800bb78:	0018      	movs	r0, r3
 800bb7a:	f000 f853 	bl	800bc24 <prvGetNextExpireTime>
 800bb7e:	0003      	movs	r3, r0
 800bb80:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bb82:	68ba      	ldr	r2, [r7, #8]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	0011      	movs	r1, r2
 800bb88:	0018      	movs	r0, r3
 800bb8a:	f000 f803 	bl	800bb94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bb8e:	f000 f8cd 	bl	800bd2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb92:	e7ef      	b.n	800bb74 <prvTimerTask+0x8>

0800bb94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b084      	sub	sp, #16
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bb9e:	f7ff f897 	bl	800acd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bba2:	2308      	movs	r3, #8
 800bba4:	18fb      	adds	r3, r7, r3
 800bba6:	0018      	movs	r0, r3
 800bba8:	f000 f85e 	bl	800bc68 <prvSampleTimeNow>
 800bbac:	0003      	movs	r3, r0
 800bbae:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d12b      	bne.n	800bc0e <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d10c      	bne.n	800bbd6 <prvProcessTimerOrBlockTask+0x42>
 800bbbc:	687a      	ldr	r2, [r7, #4]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d808      	bhi.n	800bbd6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800bbc4:	f7ff f890 	bl	800ace8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	0011      	movs	r1, r2
 800bbce:	0018      	movs	r0, r3
 800bbd0:	f7ff ff88 	bl	800bae4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bbd4:	e01d      	b.n	800bc12 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d008      	beq.n	800bbee <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bbdc:	4b0f      	ldr	r3, [pc, #60]	; (800bc1c <prvProcessTimerOrBlockTask+0x88>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d101      	bne.n	800bbea <prvProcessTimerOrBlockTask+0x56>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e000      	b.n	800bbec <prvProcessTimerOrBlockTask+0x58>
 800bbea:	2300      	movs	r3, #0
 800bbec:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bbee:	4b0c      	ldr	r3, [pc, #48]	; (800bc20 <prvProcessTimerOrBlockTask+0x8c>)
 800bbf0:	6818      	ldr	r0, [r3, #0]
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	1ad3      	subs	r3, r2, r3
 800bbf8:	683a      	ldr	r2, [r7, #0]
 800bbfa:	0019      	movs	r1, r3
 800bbfc:	f7fe fe94 	bl	800a928 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bc00:	f7ff f872 	bl	800ace8 <xTaskResumeAll>
 800bc04:	1e03      	subs	r3, r0, #0
 800bc06:	d104      	bne.n	800bc12 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 800bc08:	f000 fa82 	bl	800c110 <vPortYield>
}
 800bc0c:	e001      	b.n	800bc12 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800bc0e:	f7ff f86b 	bl	800ace8 <xTaskResumeAll>
}
 800bc12:	46c0      	nop			; (mov r8, r8)
 800bc14:	46bd      	mov	sp, r7
 800bc16:	b004      	add	sp, #16
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	46c0      	nop			; (mov r8, r8)
 800bc1c:	20000e38 	.word	0x20000e38
 800bc20:	20000e3c 	.word	0x20000e3c

0800bc24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bc2c:	4b0d      	ldr	r3, [pc, #52]	; (800bc64 <prvGetNextExpireTime+0x40>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d101      	bne.n	800bc3a <prvGetNextExpireTime+0x16>
 800bc36:	2201      	movs	r2, #1
 800bc38:	e000      	b.n	800bc3c <prvGetNextExpireTime+0x18>
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d105      	bne.n	800bc54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc48:	4b06      	ldr	r3, [pc, #24]	; (800bc64 <prvGetNextExpireTime+0x40>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	68db      	ldr	r3, [r3, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	60fb      	str	r3, [r7, #12]
 800bc52:	e001      	b.n	800bc58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bc54:	2300      	movs	r3, #0
 800bc56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bc58:	68fb      	ldr	r3, [r7, #12]
}
 800bc5a:	0018      	movs	r0, r3
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	b004      	add	sp, #16
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	46c0      	nop			; (mov r8, r8)
 800bc64:	20000e34 	.word	0x20000e34

0800bc68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bc70:	f7ff f8c6 	bl	800ae00 <xTaskGetTickCount>
 800bc74:	0003      	movs	r3, r0
 800bc76:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800bc78:	4b0a      	ldr	r3, [pc, #40]	; (800bca4 <prvSampleTimeNow+0x3c>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	68fa      	ldr	r2, [r7, #12]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d205      	bcs.n	800bc8e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800bc82:	f000 f903 	bl	800be8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2201      	movs	r2, #1
 800bc8a:	601a      	str	r2, [r3, #0]
 800bc8c:	e002      	b.n	800bc94 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2200      	movs	r2, #0
 800bc92:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bc94:	4b03      	ldr	r3, [pc, #12]	; (800bca4 <prvSampleTimeNow+0x3c>)
 800bc96:	68fa      	ldr	r2, [r7, #12]
 800bc98:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
}
 800bc9c:	0018      	movs	r0, r3
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	b004      	add	sp, #16
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	20000e44 	.word	0x20000e44

0800bca8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b086      	sub	sp, #24
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	60b9      	str	r1, [r7, #8]
 800bcb2:	607a      	str	r2, [r7, #4]
 800bcb4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	68ba      	ldr	r2, [r7, #8]
 800bcbe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	68fa      	ldr	r2, [r7, #12]
 800bcc4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bcc6:	68ba      	ldr	r2, [r7, #8]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d812      	bhi.n	800bcf4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	1ad2      	subs	r2, r2, r3
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	699b      	ldr	r3, [r3, #24]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d302      	bcc.n	800bce2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	617b      	str	r3, [r7, #20]
 800bce0:	e01b      	b.n	800bd1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bce2:	4b10      	ldr	r3, [pc, #64]	; (800bd24 <prvInsertTimerInActiveList+0x7c>)
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	3304      	adds	r3, #4
 800bcea:	0019      	movs	r1, r3
 800bcec:	0010      	movs	r0, r2
 800bcee:	f7fe f88d 	bl	8009e0c <vListInsert>
 800bcf2:	e012      	b.n	800bd1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d206      	bcs.n	800bd0a <prvInsertTimerInActiveList+0x62>
 800bcfc:	68ba      	ldr	r2, [r7, #8]
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d302      	bcc.n	800bd0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bd04:	2301      	movs	r3, #1
 800bd06:	617b      	str	r3, [r7, #20]
 800bd08:	e007      	b.n	800bd1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd0a:	4b07      	ldr	r3, [pc, #28]	; (800bd28 <prvInsertTimerInActiveList+0x80>)
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	3304      	adds	r3, #4
 800bd12:	0019      	movs	r1, r3
 800bd14:	0010      	movs	r0, r2
 800bd16:	f7fe f879 	bl	8009e0c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bd1a:	697b      	ldr	r3, [r7, #20]
}
 800bd1c:	0018      	movs	r0, r3
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	b006      	add	sp, #24
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	20000e38 	.word	0x20000e38
 800bd28:	20000e34 	.word	0x20000e34

0800bd2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bd2c:	b590      	push	{r4, r7, lr}
 800bd2e:	b08b      	sub	sp, #44	; 0x2c
 800bd30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd32:	e097      	b.n	800be64 <prvProcessReceivedCommands+0x138>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bd34:	2208      	movs	r2, #8
 800bd36:	18bb      	adds	r3, r7, r2
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	da00      	bge.n	800bd40 <prvProcessReceivedCommands+0x14>
 800bd3e:	e091      	b.n	800be64 <prvProcessReceivedCommands+0x138>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bd40:	18bb      	adds	r3, r7, r2
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	695b      	ldr	r3, [r3, #20]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d004      	beq.n	800bd58 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd4e:	69fb      	ldr	r3, [r7, #28]
 800bd50:	3304      	adds	r3, #4
 800bd52:	0018      	movs	r0, r3
 800bd54:	f7fe f890 	bl	8009e78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd58:	1d3b      	adds	r3, r7, #4
 800bd5a:	0018      	movs	r0, r3
 800bd5c:	f7ff ff84 	bl	800bc68 <prvSampleTimeNow>
 800bd60:	0003      	movs	r3, r0
 800bd62:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
 800bd64:	2308      	movs	r3, #8
 800bd66:	18fb      	adds	r3, r7, r3
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	2b09      	cmp	r3, #9
 800bd6c:	d900      	bls.n	800bd70 <prvProcessReceivedCommands+0x44>
 800bd6e:	e078      	b.n	800be62 <prvProcessReceivedCommands+0x136>
 800bd70:	009a      	lsls	r2, r3, #2
 800bd72:	4b44      	ldr	r3, [pc, #272]	; (800be84 <prvProcessReceivedCommands+0x158>)
 800bd74:	18d3      	adds	r3, r2, r3
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd7a:	69fb      	ldr	r3, [r7, #28]
 800bd7c:	2228      	movs	r2, #40	; 0x28
 800bd7e:	5c9b      	ldrb	r3, [r3, r2]
 800bd80:	2201      	movs	r2, #1
 800bd82:	4313      	orrs	r3, r2
 800bd84:	b2d9      	uxtb	r1, r3
 800bd86:	69fb      	ldr	r3, [r7, #28]
 800bd88:	2228      	movs	r2, #40	; 0x28
 800bd8a:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bd8c:	2408      	movs	r4, #8
 800bd8e:	193b      	adds	r3, r7, r4
 800bd90:	685a      	ldr	r2, [r3, #4]
 800bd92:	69fb      	ldr	r3, [r7, #28]
 800bd94:	699b      	ldr	r3, [r3, #24]
 800bd96:	18d1      	adds	r1, r2, r3
 800bd98:	193b      	adds	r3, r7, r4
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	69ba      	ldr	r2, [r7, #24]
 800bd9e:	69f8      	ldr	r0, [r7, #28]
 800bda0:	f7ff ff82 	bl	800bca8 <prvInsertTimerInActiveList>
 800bda4:	1e03      	subs	r3, r0, #0
 800bda6:	d05d      	beq.n	800be64 <prvProcessReceivedCommands+0x138>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	6a1b      	ldr	r3, [r3, #32]
 800bdac:	69fa      	ldr	r2, [r7, #28]
 800bdae:	0010      	movs	r0, r2
 800bdb0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdb2:	69fb      	ldr	r3, [r7, #28]
 800bdb4:	2228      	movs	r2, #40	; 0x28
 800bdb6:	5c9b      	ldrb	r3, [r3, r2]
 800bdb8:	001a      	movs	r2, r3
 800bdba:	2304      	movs	r3, #4
 800bdbc:	4013      	ands	r3, r2
 800bdbe:	d051      	beq.n	800be64 <prvProcessReceivedCommands+0x138>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bdc0:	193b      	adds	r3, r7, r4
 800bdc2:	685a      	ldr	r2, [r3, #4]
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	699b      	ldr	r3, [r3, #24]
 800bdc8:	18d2      	adds	r2, r2, r3
 800bdca:	69f8      	ldr	r0, [r7, #28]
 800bdcc:	2300      	movs	r3, #0
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	2100      	movs	r1, #0
 800bdd4:	f7ff fe3c 	bl	800ba50 <xTimerGenericCommand>
 800bdd8:	0003      	movs	r3, r0
 800bdda:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d140      	bne.n	800be64 <prvProcessReceivedCommands+0x138>
 800bde2:	b672      	cpsid	i
 800bde4:	e7fe      	b.n	800bde4 <prvProcessReceivedCommands+0xb8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bde6:	69fb      	ldr	r3, [r7, #28]
 800bde8:	2228      	movs	r2, #40	; 0x28
 800bdea:	5c9b      	ldrb	r3, [r3, r2]
 800bdec:	2201      	movs	r2, #1
 800bdee:	4393      	bics	r3, r2
 800bdf0:	b2d9      	uxtb	r1, r3
 800bdf2:	69fb      	ldr	r3, [r7, #28]
 800bdf4:	2228      	movs	r2, #40	; 0x28
 800bdf6:	5499      	strb	r1, [r3, r2]
					break;
 800bdf8:	e034      	b.n	800be64 <prvProcessReceivedCommands+0x138>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bdfa:	69fb      	ldr	r3, [r7, #28]
 800bdfc:	2228      	movs	r2, #40	; 0x28
 800bdfe:	5c9b      	ldrb	r3, [r3, r2]
 800be00:	2201      	movs	r2, #1
 800be02:	4313      	orrs	r3, r2
 800be04:	b2d9      	uxtb	r1, r3
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	2228      	movs	r2, #40	; 0x28
 800be0a:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800be0c:	2308      	movs	r3, #8
 800be0e:	18fb      	adds	r3, r7, r3
 800be10:	685a      	ldr	r2, [r3, #4]
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800be16:	69fb      	ldr	r3, [r7, #28]
 800be18:	699b      	ldr	r3, [r3, #24]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d101      	bne.n	800be22 <prvProcessReceivedCommands+0xf6>
 800be1e:	b672      	cpsid	i
 800be20:	e7fe      	b.n	800be20 <prvProcessReceivedCommands+0xf4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800be22:	69fb      	ldr	r3, [r7, #28]
 800be24:	699a      	ldr	r2, [r3, #24]
 800be26:	69bb      	ldr	r3, [r7, #24]
 800be28:	18d1      	adds	r1, r2, r3
 800be2a:	69bb      	ldr	r3, [r7, #24]
 800be2c:	69ba      	ldr	r2, [r7, #24]
 800be2e:	69f8      	ldr	r0, [r7, #28]
 800be30:	f7ff ff3a 	bl	800bca8 <prvInsertTimerInActiveList>
					break;
 800be34:	e016      	b.n	800be64 <prvProcessReceivedCommands+0x138>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800be36:	69fb      	ldr	r3, [r7, #28]
 800be38:	2228      	movs	r2, #40	; 0x28
 800be3a:	5c9b      	ldrb	r3, [r3, r2]
 800be3c:	001a      	movs	r2, r3
 800be3e:	2302      	movs	r3, #2
 800be40:	4013      	ands	r3, r2
 800be42:	d104      	bne.n	800be4e <prvProcessReceivedCommands+0x122>
						{
							vPortFree( pxTimer );
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	0018      	movs	r0, r3
 800be48:	f000 fab6 	bl	800c3b8 <vPortFree>
 800be4c:	e00a      	b.n	800be64 <prvProcessReceivedCommands+0x138>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be4e:	69fb      	ldr	r3, [r7, #28]
 800be50:	2228      	movs	r2, #40	; 0x28
 800be52:	5c9b      	ldrb	r3, [r3, r2]
 800be54:	2201      	movs	r2, #1
 800be56:	4393      	bics	r3, r2
 800be58:	b2d9      	uxtb	r1, r3
 800be5a:	69fb      	ldr	r3, [r7, #28]
 800be5c:	2228      	movs	r2, #40	; 0x28
 800be5e:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800be60:	e000      	b.n	800be64 <prvProcessReceivedCommands+0x138>

				default	:
					/* Don't expect to get here. */
					break;
 800be62:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be64:	4b08      	ldr	r3, [pc, #32]	; (800be88 <prvProcessReceivedCommands+0x15c>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2208      	movs	r2, #8
 800be6a:	18b9      	adds	r1, r7, r2
 800be6c:	2200      	movs	r2, #0
 800be6e:	0018      	movs	r0, r3
 800be70:	f7fe fa70 	bl	800a354 <xQueueReceive>
 800be74:	1e03      	subs	r3, r0, #0
 800be76:	d000      	beq.n	800be7a <prvProcessReceivedCommands+0x14e>
 800be78:	e75c      	b.n	800bd34 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800be7a:	46c0      	nop			; (mov r8, r8)
 800be7c:	46c0      	nop			; (mov r8, r8)
 800be7e:	46bd      	mov	sp, r7
 800be80:	b009      	add	sp, #36	; 0x24
 800be82:	bd90      	pop	{r4, r7, pc}
 800be84:	08011050 	.word	0x08011050
 800be88:	20000e3c 	.word	0x20000e3c

0800be8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b088      	sub	sp, #32
 800be90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be92:	e041      	b.n	800bf18 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be94:	4b2a      	ldr	r3, [pc, #168]	; (800bf40 <prvSwitchTimerLists+0xb4>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be9e:	4b28      	ldr	r3, [pc, #160]	; (800bf40 <prvSwitchTimerLists+0xb4>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	68db      	ldr	r3, [r3, #12]
 800bea4:	68db      	ldr	r3, [r3, #12]
 800bea6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	3304      	adds	r3, #4
 800beac:	0018      	movs	r0, r3
 800beae:	f7fd ffe3 	bl	8009e78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	6a1b      	ldr	r3, [r3, #32]
 800beb6:	68fa      	ldr	r2, [r7, #12]
 800beb8:	0010      	movs	r0, r2
 800beba:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2228      	movs	r2, #40	; 0x28
 800bec0:	5c9b      	ldrb	r3, [r3, r2]
 800bec2:	001a      	movs	r2, r3
 800bec4:	2304      	movs	r3, #4
 800bec6:	4013      	ands	r3, r2
 800bec8:	d026      	beq.n	800bf18 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	699b      	ldr	r3, [r3, #24]
 800bece:	693a      	ldr	r2, [r7, #16]
 800bed0:	18d3      	adds	r3, r2, r3
 800bed2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d90e      	bls.n	800befa <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	68ba      	ldr	r2, [r7, #8]
 800bee0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	68fa      	ldr	r2, [r7, #12]
 800bee6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bee8:	4b15      	ldr	r3, [pc, #84]	; (800bf40 <prvSwitchTimerLists+0xb4>)
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	3304      	adds	r3, #4
 800bef0:	0019      	movs	r1, r3
 800bef2:	0010      	movs	r0, r2
 800bef4:	f7fd ff8a 	bl	8009e0c <vListInsert>
 800bef8:	e00e      	b.n	800bf18 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800befa:	693a      	ldr	r2, [r7, #16]
 800befc:	68f8      	ldr	r0, [r7, #12]
 800befe:	2300      	movs	r3, #0
 800bf00:	9300      	str	r3, [sp, #0]
 800bf02:	2300      	movs	r3, #0
 800bf04:	2100      	movs	r1, #0
 800bf06:	f7ff fda3 	bl	800ba50 <xTimerGenericCommand>
 800bf0a:	0003      	movs	r3, r0
 800bf0c:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d101      	bne.n	800bf18 <prvSwitchTimerLists+0x8c>
 800bf14:	b672      	cpsid	i
 800bf16:	e7fe      	b.n	800bf16 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf18:	4b09      	ldr	r3, [pc, #36]	; (800bf40 <prvSwitchTimerLists+0xb4>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d1b8      	bne.n	800be94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bf22:	4b07      	ldr	r3, [pc, #28]	; (800bf40 <prvSwitchTimerLists+0xb4>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bf28:	4b06      	ldr	r3, [pc, #24]	; (800bf44 <prvSwitchTimerLists+0xb8>)
 800bf2a:	681a      	ldr	r2, [r3, #0]
 800bf2c:	4b04      	ldr	r3, [pc, #16]	; (800bf40 <prvSwitchTimerLists+0xb4>)
 800bf2e:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800bf30:	4b04      	ldr	r3, [pc, #16]	; (800bf44 <prvSwitchTimerLists+0xb8>)
 800bf32:	697a      	ldr	r2, [r7, #20]
 800bf34:	601a      	str	r2, [r3, #0]
}
 800bf36:	46c0      	nop			; (mov r8, r8)
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	b006      	add	sp, #24
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	46c0      	nop			; (mov r8, r8)
 800bf40:	20000e34 	.word	0x20000e34
 800bf44:	20000e38 	.word	0x20000e38

0800bf48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bf4c:	f000 f8f0 	bl	800c130 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bf50:	4b14      	ldr	r3, [pc, #80]	; (800bfa4 <prvCheckForValidListAndQueue+0x5c>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d120      	bne.n	800bf9a <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
 800bf58:	4b13      	ldr	r3, [pc, #76]	; (800bfa8 <prvCheckForValidListAndQueue+0x60>)
 800bf5a:	0018      	movs	r0, r3
 800bf5c:	f7fd ff0b 	bl	8009d76 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bf60:	4b12      	ldr	r3, [pc, #72]	; (800bfac <prvCheckForValidListAndQueue+0x64>)
 800bf62:	0018      	movs	r0, r3
 800bf64:	f7fd ff07 	bl	8009d76 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bf68:	4b11      	ldr	r3, [pc, #68]	; (800bfb0 <prvCheckForValidListAndQueue+0x68>)
 800bf6a:	4a0f      	ldr	r2, [pc, #60]	; (800bfa8 <prvCheckForValidListAndQueue+0x60>)
 800bf6c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bf6e:	4b11      	ldr	r3, [pc, #68]	; (800bfb4 <prvCheckForValidListAndQueue+0x6c>)
 800bf70:	4a0e      	ldr	r2, [pc, #56]	; (800bfac <prvCheckForValidListAndQueue+0x64>)
 800bf72:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800bf74:	2200      	movs	r2, #0
 800bf76:	210c      	movs	r1, #12
 800bf78:	200a      	movs	r0, #10
 800bf7a:	f7fd fff9 	bl	8009f70 <xQueueGenericCreate>
 800bf7e:	0002      	movs	r2, r0
 800bf80:	4b08      	ldr	r3, [pc, #32]	; (800bfa4 <prvCheckForValidListAndQueue+0x5c>)
 800bf82:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bf84:	4b07      	ldr	r3, [pc, #28]	; (800bfa4 <prvCheckForValidListAndQueue+0x5c>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d006      	beq.n	800bf9a <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bf8c:	4b05      	ldr	r3, [pc, #20]	; (800bfa4 <prvCheckForValidListAndQueue+0x5c>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a09      	ldr	r2, [pc, #36]	; (800bfb8 <prvCheckForValidListAndQueue+0x70>)
 800bf92:	0011      	movs	r1, r2
 800bf94:	0018      	movs	r0, r3
 800bf96:	f7fe fc9f 	bl	800a8d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf9a:	f000 f8db 	bl	800c154 <vPortExitCritical>
}
 800bf9e:	46c0      	nop			; (mov r8, r8)
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	20000e3c 	.word	0x20000e3c
 800bfa8:	20000e0c 	.word	0x20000e0c
 800bfac:	20000e20 	.word	0x20000e20
 800bfb0:	20000e34 	.word	0x20000e34
 800bfb4:	20000e38 	.word	0x20000e38
 800bfb8:	08010a20 	.word	0x08010a20

0800bfbc <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	60bb      	str	r3, [r7, #8]

	configASSERT( xTimer );
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d101      	bne.n	800bfd2 <xTimerIsTimerActive+0x16>
 800bfce:	b672      	cpsid	i
 800bfd0:	e7fe      	b.n	800bfd0 <xTimerIsTimerActive+0x14>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800bfd2:	f000 f8ad 	bl	800c130 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	2228      	movs	r2, #40	; 0x28
 800bfda:	5c9b      	ldrb	r3, [r3, r2]
 800bfdc:	001a      	movs	r2, r3
 800bfde:	2301      	movs	r3, #1
 800bfe0:	4013      	ands	r3, r2
 800bfe2:	d102      	bne.n	800bfea <xTimerIsTimerActive+0x2e>
		{
			xReturn = pdFALSE;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	60fb      	str	r3, [r7, #12]
 800bfe8:	e001      	b.n	800bfee <xTimerIsTimerActive+0x32>
		}
		else
		{
			xReturn = pdTRUE;
 800bfea:	2301      	movs	r3, #1
 800bfec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bfee:	f000 f8b1 	bl	800c154 <vPortExitCritical>

	return xReturn;
 800bff2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800bff4:	0018      	movs	r0, r3
 800bff6:	46bd      	mov	sp, r7
 800bff8:	b004      	add	sp, #16
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	60b9      	str	r1, [r7, #8]
 800c006:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	3b04      	subs	r3, #4
 800c00c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2280      	movs	r2, #128	; 0x80
 800c012:	0452      	lsls	r2, r2, #17
 800c014:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	3b04      	subs	r3, #4
 800c01a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800c01c:	68ba      	ldr	r2, [r7, #8]
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	3b04      	subs	r3, #4
 800c026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c028:	4a08      	ldr	r2, [pc, #32]	; (800c04c <pxPortInitialiseStack+0x50>)
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	3b14      	subs	r3, #20
 800c032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	3b20      	subs	r3, #32
 800c03e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c040:	68fb      	ldr	r3, [r7, #12]
}
 800c042:	0018      	movs	r0, r3
 800c044:	46bd      	mov	sp, r7
 800c046:	b004      	add	sp, #16
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	46c0      	nop			; (mov r8, r8)
 800c04c:	0800c051 	.word	0x0800c051

0800c050 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c056:	2300      	movs	r3, #0
 800c058:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c05a:	4b08      	ldr	r3, [pc, #32]	; (800c07c <prvTaskExitError+0x2c>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	3301      	adds	r3, #1
 800c060:	d001      	beq.n	800c066 <prvTaskExitError+0x16>
 800c062:	b672      	cpsid	i
 800c064:	e7fe      	b.n	800c064 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800c066:	b672      	cpsid	i
	while( ulDummy == 0 )
 800c068:	46c0      	nop			; (mov r8, r8)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d0fc      	beq.n	800c06a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c070:	46c0      	nop			; (mov r8, r8)
 800c072:	46c0      	nop			; (mov r8, r8)
 800c074:	46bd      	mov	sp, r7
 800c076:	b002      	add	sp, #8
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	46c0      	nop			; (mov r8, r8)
 800c07c:	20000034 	.word	0x20000034

0800c080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800c080:	b580      	push	{r7, lr}
 800c082:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800c084:	46c0      	nop			; (mov r8, r8)
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
 800c08a:	0000      	movs	r0, r0
 800c08c:	0000      	movs	r0, r0
	...

0800c090 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800c090:	4a0b      	ldr	r2, [pc, #44]	; (800c0c0 <pxCurrentTCBConst2>)
 800c092:	6813      	ldr	r3, [r2, #0]
 800c094:	6818      	ldr	r0, [r3, #0]
 800c096:	3020      	adds	r0, #32
 800c098:	f380 8809 	msr	PSP, r0
 800c09c:	2002      	movs	r0, #2
 800c09e:	f380 8814 	msr	CONTROL, r0
 800c0a2:	f3bf 8f6f 	isb	sy
 800c0a6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800c0a8:	46ae      	mov	lr, r5
 800c0aa:	bc08      	pop	{r3}
 800c0ac:	bc04      	pop	{r2}
 800c0ae:	b662      	cpsie	i
 800c0b0:	4718      	bx	r3
 800c0b2:	46c0      	nop			; (mov r8, r8)
 800c0b4:	46c0      	nop			; (mov r8, r8)
 800c0b6:	46c0      	nop			; (mov r8, r8)
 800c0b8:	46c0      	nop			; (mov r8, r8)
 800c0ba:	46c0      	nop			; (mov r8, r8)
 800c0bc:	46c0      	nop			; (mov r8, r8)
 800c0be:	46c0      	nop			; (mov r8, r8)

0800c0c0 <pxCurrentTCBConst2>:
 800c0c0:	20000594 	.word	0x20000594
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800c0c4:	46c0      	nop			; (mov r8, r8)
 800c0c6:	46c0      	nop			; (mov r8, r8)

0800c0c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c0cc:	4b0e      	ldr	r3, [pc, #56]	; (800c108 <xPortStartScheduler+0x40>)
 800c0ce:	681a      	ldr	r2, [r3, #0]
 800c0d0:	4b0d      	ldr	r3, [pc, #52]	; (800c108 <xPortStartScheduler+0x40>)
 800c0d2:	21ff      	movs	r1, #255	; 0xff
 800c0d4:	0409      	lsls	r1, r1, #16
 800c0d6:	430a      	orrs	r2, r1
 800c0d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c0da:	4b0b      	ldr	r3, [pc, #44]	; (800c108 <xPortStartScheduler+0x40>)
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	4b0a      	ldr	r3, [pc, #40]	; (800c108 <xPortStartScheduler+0x40>)
 800c0e0:	21ff      	movs	r1, #255	; 0xff
 800c0e2:	0609      	lsls	r1, r1, #24
 800c0e4:	430a      	orrs	r2, r1
 800c0e6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c0e8:	f000 f898 	bl	800c21c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c0ec:	4b07      	ldr	r3, [pc, #28]	; (800c10c <xPortStartScheduler+0x44>)
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800c0f2:	f7ff ffcd 	bl	800c090 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c0f6:	f7fe ff41 	bl	800af7c <vTaskSwitchContext>
	prvTaskExitError();
 800c0fa:	f7ff ffa9 	bl	800c050 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c0fe:	2300      	movs	r3, #0
}
 800c100:	0018      	movs	r0, r3
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	46c0      	nop			; (mov r8, r8)
 800c108:	e000ed20 	.word	0xe000ed20
 800c10c:	20000034 	.word	0x20000034

0800c110 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800c110:	b580      	push	{r7, lr}
 800c112:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c114:	4b05      	ldr	r3, [pc, #20]	; (800c12c <vPortYield+0x1c>)
 800c116:	2280      	movs	r2, #128	; 0x80
 800c118:	0552      	lsls	r2, r2, #21
 800c11a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800c11c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c120:	f3bf 8f6f 	isb	sy
}
 800c124:	46c0      	nop			; (mov r8, r8)
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	46c0      	nop			; (mov r8, r8)
 800c12c:	e000ed04 	.word	0xe000ed04

0800c130 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c130:	b580      	push	{r7, lr}
 800c132:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800c134:	b672      	cpsid	i
	uxCriticalNesting++;
 800c136:	4b06      	ldr	r3, [pc, #24]	; (800c150 <vPortEnterCritical+0x20>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	1c5a      	adds	r2, r3, #1
 800c13c:	4b04      	ldr	r3, [pc, #16]	; (800c150 <vPortEnterCritical+0x20>)
 800c13e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800c140:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c144:	f3bf 8f6f 	isb	sy
}
 800c148:	46c0      	nop			; (mov r8, r8)
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	46c0      	nop			; (mov r8, r8)
 800c150:	20000034 	.word	0x20000034

0800c154 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c154:	b580      	push	{r7, lr}
 800c156:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c158:	4b09      	ldr	r3, [pc, #36]	; (800c180 <vPortExitCritical+0x2c>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d101      	bne.n	800c164 <vPortExitCritical+0x10>
 800c160:	b672      	cpsid	i
 800c162:	e7fe      	b.n	800c162 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 800c164:	4b06      	ldr	r3, [pc, #24]	; (800c180 <vPortExitCritical+0x2c>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	1e5a      	subs	r2, r3, #1
 800c16a:	4b05      	ldr	r3, [pc, #20]	; (800c180 <vPortExitCritical+0x2c>)
 800c16c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800c16e:	4b04      	ldr	r3, [pc, #16]	; (800c180 <vPortExitCritical+0x2c>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d100      	bne.n	800c178 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 800c176:	b662      	cpsie	i
	}
}
 800c178:	46c0      	nop			; (mov r8, r8)
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	46c0      	nop			; (mov r8, r8)
 800c180:	20000034 	.word	0x20000034

0800c184 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800c184:	f3ef 8010 	mrs	r0, PRIMASK
 800c188:	b672      	cpsid	i
 800c18a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800c18c:	46c0      	nop			; (mov r8, r8)
 800c18e:	0018      	movs	r0, r3

0800c190 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800c190:	f380 8810 	msr	PRIMASK, r0
 800c194:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800c196:	46c0      	nop			; (mov r8, r8)
	...

0800c1a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c1a0:	f3ef 8009 	mrs	r0, PSP
 800c1a4:	4b0e      	ldr	r3, [pc, #56]	; (800c1e0 <pxCurrentTCBConst>)
 800c1a6:	681a      	ldr	r2, [r3, #0]
 800c1a8:	3820      	subs	r0, #32
 800c1aa:	6010      	str	r0, [r2, #0]
 800c1ac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800c1ae:	4644      	mov	r4, r8
 800c1b0:	464d      	mov	r5, r9
 800c1b2:	4656      	mov	r6, sl
 800c1b4:	465f      	mov	r7, fp
 800c1b6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800c1b8:	b508      	push	{r3, lr}
 800c1ba:	b672      	cpsid	i
 800c1bc:	f7fe fede 	bl	800af7c <vTaskSwitchContext>
 800c1c0:	b662      	cpsie	i
 800c1c2:	bc0c      	pop	{r2, r3}
 800c1c4:	6811      	ldr	r1, [r2, #0]
 800c1c6:	6808      	ldr	r0, [r1, #0]
 800c1c8:	3010      	adds	r0, #16
 800c1ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800c1cc:	46a0      	mov	r8, r4
 800c1ce:	46a9      	mov	r9, r5
 800c1d0:	46b2      	mov	sl, r6
 800c1d2:	46bb      	mov	fp, r7
 800c1d4:	f380 8809 	msr	PSP, r0
 800c1d8:	3820      	subs	r0, #32
 800c1da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800c1dc:	4718      	bx	r3
 800c1de:	46c0      	nop			; (mov r8, r8)

0800c1e0 <pxCurrentTCBConst>:
 800c1e0:	20000594 	.word	0x20000594
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800c1e4:	46c0      	nop			; (mov r8, r8)
 800c1e6:	46c0      	nop			; (mov r8, r8)

0800c1e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800c1ee:	f7ff ffc9 	bl	800c184 <ulSetInterruptMaskFromISR>
 800c1f2:	0003      	movs	r3, r0
 800c1f4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c1f6:	f7fe fe11 	bl	800ae1c <xTaskIncrementTick>
 800c1fa:	1e03      	subs	r3, r0, #0
 800c1fc:	d003      	beq.n	800c206 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c1fe:	4b06      	ldr	r3, [pc, #24]	; (800c218 <SysTick_Handler+0x30>)
 800c200:	2280      	movs	r2, #128	; 0x80
 800c202:	0552      	lsls	r2, r2, #21
 800c204:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	0018      	movs	r0, r3
 800c20a:	f7ff ffc1 	bl	800c190 <vClearInterruptMaskFromISR>
}
 800c20e:	46c0      	nop			; (mov r8, r8)
 800c210:	46bd      	mov	sp, r7
 800c212:	b002      	add	sp, #8
 800c214:	bd80      	pop	{r7, pc}
 800c216:	46c0      	nop			; (mov r8, r8)
 800c218:	e000ed04 	.word	0xe000ed04

0800c21c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c220:	4b0b      	ldr	r3, [pc, #44]	; (800c250 <vPortSetupTimerInterrupt+0x34>)
 800c222:	2200      	movs	r2, #0
 800c224:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c226:	4b0b      	ldr	r3, [pc, #44]	; (800c254 <vPortSetupTimerInterrupt+0x38>)
 800c228:	2200      	movs	r2, #0
 800c22a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c22c:	4b0a      	ldr	r3, [pc, #40]	; (800c258 <vPortSetupTimerInterrupt+0x3c>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	22fa      	movs	r2, #250	; 0xfa
 800c232:	0091      	lsls	r1, r2, #2
 800c234:	0018      	movs	r0, r3
 800c236:	f7f3 ff79 	bl	800012c <__udivsi3>
 800c23a:	0003      	movs	r3, r0
 800c23c:	001a      	movs	r2, r3
 800c23e:	4b07      	ldr	r3, [pc, #28]	; (800c25c <vPortSetupTimerInterrupt+0x40>)
 800c240:	3a01      	subs	r2, #1
 800c242:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800c244:	4b02      	ldr	r3, [pc, #8]	; (800c250 <vPortSetupTimerInterrupt+0x34>)
 800c246:	2207      	movs	r2, #7
 800c248:	601a      	str	r2, [r3, #0]
}
 800c24a:	46c0      	nop			; (mov r8, r8)
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	e000e010 	.word	0xe000e010
 800c254:	e000e018 	.word	0xe000e018
 800c258:	20000028 	.word	0x20000028
 800c25c:	e000e014 	.word	0xe000e014

0800c260 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b086      	sub	sp, #24
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c268:	2300      	movs	r3, #0
 800c26a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800c26c:	f7fe fd30 	bl	800acd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c270:	4b4b      	ldr	r3, [pc, #300]	; (800c3a0 <pvPortMalloc+0x140>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d101      	bne.n	800c27c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c278:	f000 f8ec 	bl	800c454 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c27c:	4b49      	ldr	r3, [pc, #292]	; (800c3a4 <pvPortMalloc+0x144>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	4013      	ands	r3, r2
 800c284:	d000      	beq.n	800c288 <pvPortMalloc+0x28>
 800c286:	e07e      	b.n	800c386 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d012      	beq.n	800c2b4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800c28e:	2208      	movs	r2, #8
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	189b      	adds	r3, r3, r2
 800c294:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2207      	movs	r2, #7
 800c29a:	4013      	ands	r3, r2
 800c29c:	d00a      	beq.n	800c2b4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2207      	movs	r2, #7
 800c2a2:	4393      	bics	r3, r2
 800c2a4:	3308      	adds	r3, #8
 800c2a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2207      	movs	r2, #7
 800c2ac:	4013      	ands	r3, r2
 800c2ae:	d001      	beq.n	800c2b4 <pvPortMalloc+0x54>
 800c2b0:	b672      	cpsid	i
 800c2b2:	e7fe      	b.n	800c2b2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d065      	beq.n	800c386 <pvPortMalloc+0x126>
 800c2ba:	4b3b      	ldr	r3, [pc, #236]	; (800c3a8 <pvPortMalloc+0x148>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d860      	bhi.n	800c386 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c2c4:	4b39      	ldr	r3, [pc, #228]	; (800c3ac <pvPortMalloc+0x14c>)
 800c2c6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800c2c8:	4b38      	ldr	r3, [pc, #224]	; (800c3ac <pvPortMalloc+0x14c>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2ce:	e004      	b.n	800c2da <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d903      	bls.n	800c2ec <pvPortMalloc+0x8c>
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d1f1      	bne.n	800c2d0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c2ec:	4b2c      	ldr	r3, [pc, #176]	; (800c3a0 <pvPortMalloc+0x140>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	697a      	ldr	r2, [r7, #20]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d047      	beq.n	800c386 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2208      	movs	r2, #8
 800c2fc:	189b      	adds	r3, r3, r2
 800c2fe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	685a      	ldr	r2, [r3, #4]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	1ad2      	subs	r2, r2, r3
 800c310:	2308      	movs	r3, #8
 800c312:	005b      	lsls	r3, r3, #1
 800c314:	429a      	cmp	r2, r3
 800c316:	d916      	bls.n	800c346 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c318:	697a      	ldr	r2, [r7, #20]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	18d3      	adds	r3, r2, r3
 800c31e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	2207      	movs	r2, #7
 800c324:	4013      	ands	r3, r2
 800c326:	d001      	beq.n	800c32c <pvPortMalloc+0xcc>
 800c328:	b672      	cpsid	i
 800c32a:	e7fe      	b.n	800c32a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	685a      	ldr	r2, [r3, #4]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	1ad2      	subs	r2, r2, r3
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	0018      	movs	r0, r3
 800c342:	f000 f8e7 	bl	800c514 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c346:	4b18      	ldr	r3, [pc, #96]	; (800c3a8 <pvPortMalloc+0x148>)
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	1ad2      	subs	r2, r2, r3
 800c350:	4b15      	ldr	r3, [pc, #84]	; (800c3a8 <pvPortMalloc+0x148>)
 800c352:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c354:	4b14      	ldr	r3, [pc, #80]	; (800c3a8 <pvPortMalloc+0x148>)
 800c356:	681a      	ldr	r2, [r3, #0]
 800c358:	4b15      	ldr	r3, [pc, #84]	; (800c3b0 <pvPortMalloc+0x150>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d203      	bcs.n	800c368 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c360:	4b11      	ldr	r3, [pc, #68]	; (800c3a8 <pvPortMalloc+0x148>)
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	4b12      	ldr	r3, [pc, #72]	; (800c3b0 <pvPortMalloc+0x150>)
 800c366:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	685a      	ldr	r2, [r3, #4]
 800c36c:	4b0d      	ldr	r3, [pc, #52]	; (800c3a4 <pvPortMalloc+0x144>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	431a      	orrs	r2, r3
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	2200      	movs	r2, #0
 800c37a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c37c:	4b0d      	ldr	r3, [pc, #52]	; (800c3b4 <pvPortMalloc+0x154>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	1c5a      	adds	r2, r3, #1
 800c382:	4b0c      	ldr	r3, [pc, #48]	; (800c3b4 <pvPortMalloc+0x154>)
 800c384:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c386:	f7fe fcaf 	bl	800ace8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2207      	movs	r2, #7
 800c38e:	4013      	ands	r3, r2
 800c390:	d001      	beq.n	800c396 <pvPortMalloc+0x136>
 800c392:	b672      	cpsid	i
 800c394:	e7fe      	b.n	800c394 <pvPortMalloc+0x134>
	return pvReturn;
 800c396:	68fb      	ldr	r3, [r7, #12]
}
 800c398:	0018      	movs	r0, r3
 800c39a:	46bd      	mov	sp, r7
 800c39c:	b006      	add	sp, #24
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	200048e8 	.word	0x200048e8
 800c3a4:	200048fc 	.word	0x200048fc
 800c3a8:	200048ec 	.word	0x200048ec
 800c3ac:	200048e0 	.word	0x200048e0
 800c3b0:	200048f0 	.word	0x200048f0
 800c3b4:	200048f4 	.word	0x200048f4

0800c3b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d03a      	beq.n	800c440 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c3ca:	2308      	movs	r3, #8
 800c3cc:	425b      	negs	r3, r3
 800c3ce:	68fa      	ldr	r2, [r7, #12]
 800c3d0:	18d3      	adds	r3, r2, r3
 800c3d2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	685a      	ldr	r2, [r3, #4]
 800c3dc:	4b1a      	ldr	r3, [pc, #104]	; (800c448 <vPortFree+0x90>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4013      	ands	r3, r2
 800c3e2:	d101      	bne.n	800c3e8 <vPortFree+0x30>
 800c3e4:	b672      	cpsid	i
 800c3e6:	e7fe      	b.n	800c3e6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d001      	beq.n	800c3f4 <vPortFree+0x3c>
 800c3f0:	b672      	cpsid	i
 800c3f2:	e7fe      	b.n	800c3f2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	685a      	ldr	r2, [r3, #4]
 800c3f8:	4b13      	ldr	r3, [pc, #76]	; (800c448 <vPortFree+0x90>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4013      	ands	r3, r2
 800c3fe:	d01f      	beq.n	800c440 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d11b      	bne.n	800c440 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	685a      	ldr	r2, [r3, #4]
 800c40c:	4b0e      	ldr	r3, [pc, #56]	; (800c448 <vPortFree+0x90>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	43db      	mvns	r3, r3
 800c412:	401a      	ands	r2, r3
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c418:	f7fe fc5a 	bl	800acd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	685a      	ldr	r2, [r3, #4]
 800c420:	4b0a      	ldr	r3, [pc, #40]	; (800c44c <vPortFree+0x94>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	18d2      	adds	r2, r2, r3
 800c426:	4b09      	ldr	r3, [pc, #36]	; (800c44c <vPortFree+0x94>)
 800c428:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	0018      	movs	r0, r3
 800c42e:	f000 f871 	bl	800c514 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c432:	4b07      	ldr	r3, [pc, #28]	; (800c450 <vPortFree+0x98>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	1c5a      	adds	r2, r3, #1
 800c438:	4b05      	ldr	r3, [pc, #20]	; (800c450 <vPortFree+0x98>)
 800c43a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800c43c:	f7fe fc54 	bl	800ace8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c440:	46c0      	nop			; (mov r8, r8)
 800c442:	46bd      	mov	sp, r7
 800c444:	b004      	add	sp, #16
 800c446:	bd80      	pop	{r7, pc}
 800c448:	200048fc 	.word	0x200048fc
 800c44c:	200048ec 	.word	0x200048ec
 800c450:	200048f8 	.word	0x200048f8

0800c454 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b084      	sub	sp, #16
 800c458:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c45a:	4b27      	ldr	r3, [pc, #156]	; (800c4f8 <prvHeapInit+0xa4>)
 800c45c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c45e:	4b27      	ldr	r3, [pc, #156]	; (800c4fc <prvHeapInit+0xa8>)
 800c460:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	2207      	movs	r2, #7
 800c466:	4013      	ands	r3, r2
 800c468:	d00c      	beq.n	800c484 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	3307      	adds	r3, #7
 800c46e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2207      	movs	r2, #7
 800c474:	4393      	bics	r3, r2
 800c476:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c478:	68ba      	ldr	r2, [r7, #8]
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	1ad2      	subs	r2, r2, r3
 800c47e:	4b1f      	ldr	r3, [pc, #124]	; (800c4fc <prvHeapInit+0xa8>)
 800c480:	18d3      	adds	r3, r2, r3
 800c482:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c488:	4b1d      	ldr	r3, [pc, #116]	; (800c500 <prvHeapInit+0xac>)
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c48e:	4b1c      	ldr	r3, [pc, #112]	; (800c500 <prvHeapInit+0xac>)
 800c490:	2200      	movs	r2, #0
 800c492:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	68ba      	ldr	r2, [r7, #8]
 800c498:	18d3      	adds	r3, r2, r3
 800c49a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c49c:	2208      	movs	r2, #8
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	1a9b      	subs	r3, r3, r2
 800c4a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2207      	movs	r2, #7
 800c4a8:	4393      	bics	r3, r2
 800c4aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c4ac:	68fa      	ldr	r2, [r7, #12]
 800c4ae:	4b15      	ldr	r3, [pc, #84]	; (800c504 <prvHeapInit+0xb0>)
 800c4b0:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800c4b2:	4b14      	ldr	r3, [pc, #80]	; (800c504 <prvHeapInit+0xb0>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c4ba:	4b12      	ldr	r3, [pc, #72]	; (800c504 <prvHeapInit+0xb0>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	68fa      	ldr	r2, [r7, #12]
 800c4ca:	1ad2      	subs	r2, r2, r3
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c4d0:	4b0c      	ldr	r3, [pc, #48]	; (800c504 <prvHeapInit+0xb0>)
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	685a      	ldr	r2, [r3, #4]
 800c4dc:	4b0a      	ldr	r3, [pc, #40]	; (800c508 <prvHeapInit+0xb4>)
 800c4de:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	685a      	ldr	r2, [r3, #4]
 800c4e4:	4b09      	ldr	r3, [pc, #36]	; (800c50c <prvHeapInit+0xb8>)
 800c4e6:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c4e8:	4b09      	ldr	r3, [pc, #36]	; (800c510 <prvHeapInit+0xbc>)
 800c4ea:	2280      	movs	r2, #128	; 0x80
 800c4ec:	0612      	lsls	r2, r2, #24
 800c4ee:	601a      	str	r2, [r3, #0]
}
 800c4f0:	46c0      	nop			; (mov r8, r8)
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	b004      	add	sp, #16
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	00003a98 	.word	0x00003a98
 800c4fc:	20000e48 	.word	0x20000e48
 800c500:	200048e0 	.word	0x200048e0
 800c504:	200048e8 	.word	0x200048e8
 800c508:	200048f0 	.word	0x200048f0
 800c50c:	200048ec 	.word	0x200048ec
 800c510:	200048fc 	.word	0x200048fc

0800c514 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c51c:	4b27      	ldr	r3, [pc, #156]	; (800c5bc <prvInsertBlockIntoFreeList+0xa8>)
 800c51e:	60fb      	str	r3, [r7, #12]
 800c520:	e002      	b.n	800c528 <prvInsertBlockIntoFreeList+0x14>
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	60fb      	str	r3, [r7, #12]
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	429a      	cmp	r2, r3
 800c530:	d8f7      	bhi.n	800c522 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	685b      	ldr	r3, [r3, #4]
 800c53a:	68ba      	ldr	r2, [r7, #8]
 800c53c:	18d3      	adds	r3, r2, r3
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	429a      	cmp	r2, r3
 800c542:	d108      	bne.n	800c556 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	685a      	ldr	r2, [r3, #4]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	18d2      	adds	r2, r2, r3
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	68ba      	ldr	r2, [r7, #8]
 800c560:	18d2      	adds	r2, r2, r3
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	429a      	cmp	r2, r3
 800c568:	d118      	bne.n	800c59c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	4b14      	ldr	r3, [pc, #80]	; (800c5c0 <prvInsertBlockIntoFreeList+0xac>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	429a      	cmp	r2, r3
 800c574:	d00d      	beq.n	800c592 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	685a      	ldr	r2, [r3, #4]
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	18d2      	adds	r2, r2, r3
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	601a      	str	r2, [r3, #0]
 800c590:	e008      	b.n	800c5a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c592:	4b0b      	ldr	r3, [pc, #44]	; (800c5c0 <prvInsertBlockIntoFreeList+0xac>)
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	601a      	str	r2, [r3, #0]
 800c59a:	e003      	b.n	800c5a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c5a4:	68fa      	ldr	r2, [r7, #12]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d002      	beq.n	800c5b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5b2:	46c0      	nop			; (mov r8, r8)
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	b004      	add	sp, #16
 800c5b8:	bd80      	pop	{r7, pc}
 800c5ba:	46c0      	nop			; (mov r8, r8)
 800c5bc:	200048e0 	.word	0x200048e0
 800c5c0:	200048e8 	.word	0x200048e8

0800c5c4 <HAL_UART_RxCpltCallback>:

static lidar_t lidar;
static SemaphoreHandle_t sem_uart_read = NULL;
static position_t robotPosition = {0, 0};

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART4)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a0b      	ldr	r2, [pc, #44]	; (800c600 <HAL_UART_RxCpltCallback+0x3c>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d110      	bne.n	800c5f8 <HAL_UART_RxCpltCallback+0x34>
	{
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 800c5da:	4b0a      	ldr	r3, [pc, #40]	; (800c604 <HAL_UART_RxCpltCallback+0x40>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	220c      	movs	r2, #12
 800c5e0:	18ba      	adds	r2, r7, r2
 800c5e2:	0011      	movs	r1, r2
 800c5e4:	0018      	movs	r0, r3
 800c5e6:	f7fd fe50 	bl	800a28a <xQueueGiveFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d003      	beq.n	800c5f8 <HAL_UART_RxCpltCallback+0x34>
 800c5f0:	4b05      	ldr	r3, [pc, #20]	; (800c608 <HAL_UART_RxCpltCallback+0x44>)
 800c5f2:	2280      	movs	r2, #128	; 0x80
 800c5f4:	0552      	lsls	r2, r2, #21
 800c5f6:	601a      	str	r2, [r3, #0]
	}
}
 800c5f8:	46c0      	nop			; (mov r8, r8)
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	b004      	add	sp, #16
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	40004c00 	.word	0x40004c00
 800c604:	20004c28 	.word	0x20004c28
 800c608:	e000ed04 	.word	0xe000ed04

0800c60c <LidarUarTx>:
 *   - #HAL_ERROR: An error occurred during transmission.
 *
 * @note This function is specific to the UART communication for Lidar devices.
 * It uses DMA for efficient and non-blocking data transmission.
 */
static inline HAL_StatusTypeDef LidarUarTx(uint8_t *address, uint8_t *p_data, uint16_t size) {
 800c60c:	b5b0      	push	{r4, r5, r7, lr}
 800c60e:	b086      	sub	sp, #24
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	1dbb      	adds	r3, r7, #6
 800c618:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status;
	status = HAL_UART_Transmit_DMA(&huart4, address, 2);
 800c61a:	2517      	movs	r5, #23
 800c61c:	197c      	adds	r4, r7, r5
 800c61e:	68f9      	ldr	r1, [r7, #12]
 800c620:	4b06      	ldr	r3, [pc, #24]	; (800c63c <LidarUarTx+0x30>)
 800c622:	2202      	movs	r2, #2
 800c624:	0018      	movs	r0, r3
 800c626:	f7fb ff85 	bl	8008534 <HAL_UART_Transmit_DMA>
 800c62a:	0003      	movs	r3, r0
 800c62c:	7023      	strb	r3, [r4, #0]
	return status;
 800c62e:	197b      	adds	r3, r7, r5
 800c630:	781b      	ldrb	r3, [r3, #0]
}
 800c632:	0018      	movs	r0, r3
 800c634:	46bd      	mov	sp, r7
 800c636:	b006      	add	sp, #24
 800c638:	bdb0      	pop	{r4, r5, r7, pc}
 800c63a:	46c0      	nop			; (mov r8, r8)
 800c63c:	20000404 	.word	0x20000404

0800c640 <LidarUartRx>:
 *   - #HAL_ERROR: An error occurred during reception.
 *
 * @note This function is specific to the UART communication for Lidar devices.
 * It uses DMA for efficient and non-blocking data reception.
 */
static inline HAL_StatusTypeDef LidarUartRx(uint8_t *p_data, uint16_t size) {
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	000a      	movs	r2, r1
 800c64a:	1cbb      	adds	r3, r7, #2
 800c64c:	801a      	strh	r2, [r3, #0]
	return HAL_UART_Receive_DMA(&huart4, p_data, size);
 800c64e:	1cbb      	adds	r3, r7, #2
 800c650:	881a      	ldrh	r2, [r3, #0]
 800c652:	6879      	ldr	r1, [r7, #4]
 800c654:	4b04      	ldr	r3, [pc, #16]	; (800c668 <LidarUartRx+0x28>)
 800c656:	0018      	movs	r0, r3
 800c658:	f7fb fffe 	bl	8008658 <HAL_UART_Receive_DMA>
 800c65c:	0003      	movs	r3, r0
}
 800c65e:	0018      	movs	r0, r3
 800c660:	46bd      	mov	sp, r7
 800c662:	b002      	add	sp, #8
 800c664:	bd80      	pop	{r7, pc}
 800c666:	46c0      	nop			; (mov r8, r8)
 800c668:	20000404 	.word	0x20000404

0800c66c <clearNearestRobotPosition>:
 *
 * This function resets the angle and distance of the nearest robot position.
 * After calling this function, the robot's angle will be set to 0, and the
 * distance will be set to 0.
 */
static void clearNearestRobotPosition(void) {
 800c66c:	b580      	push	{r7, lr}
 800c66e:	af00      	add	r7, sp, #0
	robotPosition.angle = 0;
 800c670:	4b04      	ldr	r3, [pc, #16]	; (800c684 <clearNearestRobotPosition+0x18>)
 800c672:	2200      	movs	r2, #0
 800c674:	601a      	str	r2, [r3, #0]
	robotPosition.distance = 0;
 800c676:	4b03      	ldr	r3, [pc, #12]	; (800c684 <clearNearestRobotPosition+0x18>)
 800c678:	2200      	movs	r2, #0
 800c67a:	809a      	strh	r2, [r3, #4]
}
 800c67c:	46c0      	nop			; (mov r8, r8)
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	46c0      	nop			; (mov r8, r8)
 800c684:	20004c2c 	.word	0x20004c2c

0800c688 <LidarInit>:
 *
 * @note This function sets up the necessary configurations for the Lidar device to operate.
 * It also creates a semaphore for synchronization during UART reads and enables the Lidar device and motor.
 * The Lidar speed is set to 0 during initialization.
 */
returncode_t LidarInit(void) {
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
	returncode_t ret = success;
 800c68e:	1dfb      	adds	r3, r7, #7
 800c690:	2200      	movs	r2, #0
 800c692:	701a      	strb	r2, [r3, #0]
	lidar.uart.tx = LidarUarTx;
 800c694:	4b14      	ldr	r3, [pc, #80]	; (800c6e8 <LidarInit+0x60>)
 800c696:	4a15      	ldr	r2, [pc, #84]	; (800c6ec <LidarInit+0x64>)
 800c698:	601a      	str	r2, [r3, #0]
	lidar.uart.rx = LidarUartRx;
 800c69a:	4b13      	ldr	r3, [pc, #76]	; (800c6e8 <LidarInit+0x60>)
 800c69c:	4a14      	ldr	r2, [pc, #80]	; (800c6f0 <LidarInit+0x68>)
 800c69e:	605a      	str	r2, [r3, #4]
	
	sem_uart_read = xSemaphoreCreateBinary();
 800c6a0:	2203      	movs	r2, #3
 800c6a2:	2100      	movs	r1, #0
 800c6a4:	2001      	movs	r0, #1
 800c6a6:	f7fd fc63 	bl	8009f70 <xQueueGenericCreate>
 800c6aa:	0002      	movs	r2, r0
 800c6ac:	4b11      	ldr	r3, [pc, #68]	; (800c6f4 <LidarInit+0x6c>)
 800c6ae:	601a      	str	r2, [r3, #0]
	if(sem_uart_read == NULL) {
 800c6b0:	4b10      	ldr	r3, [pc, #64]	; (800c6f4 <LidarInit+0x6c>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d101      	bne.n	800c6bc <LidarInit+0x34>
		return memoryfail;
 800c6b8:	2304      	movs	r3, #4
 800c6ba:	e010      	b.n	800c6de <LidarInit+0x56>
	}
	LIDAR_DEV_ENABLE();
 800c6bc:	4b0e      	ldr	r3, [pc, #56]	; (800c6f8 <LidarInit+0x70>)
 800c6be:	2201      	movs	r2, #1
 800c6c0:	2120      	movs	r1, #32
 800c6c2:	0018      	movs	r0, r3
 800c6c4:	f7f9 fb30 	bl	8005d28 <HAL_GPIO_WritePin>
	LIDAR_MOTOR_DISABLE();
 800c6c8:	4b0b      	ldr	r3, [pc, #44]	; (800c6f8 <LidarInit+0x70>)
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	2110      	movs	r1, #16
 800c6ce:	0018      	movs	r0, r3
 800c6d0:	f7f9 fb2a 	bl	8005d28 <HAL_GPIO_WritePin>
	LidarSetSpeed(0);
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	f000 f811 	bl	800c6fc <LidarSetSpeed>
	//ret = LidarScanStop();
	return ret;
 800c6da:	1dfb      	adds	r3, r7, #7
 800c6dc:	781b      	ldrb	r3, [r3, #0]
}
 800c6de:	0018      	movs	r0, r3
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	b002      	add	sp, #8
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	46c0      	nop			; (mov r8, r8)
 800c6e8:	20004900 	.word	0x20004900
 800c6ec:	0800c60d 	.word	0x0800c60d
 800c6f0:	0800c641 	.word	0x0800c641
 800c6f4:	20004c28 	.word	0x20004c28
 800c6f8:	50000800 	.word	0x50000800

0800c6fc <LidarSetSpeed>:
 * @param speed La nouvelle valeur de vitesse à définir.
 *
 * @note 0: vitesse minimale
 * @note 50: vitesse maximale.
 */
void LidarSetSpeed(uint8_t speed) {
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	0002      	movs	r2, r0
 800c704:	1dfb      	adds	r3, r7, #7
 800c706:	701a      	strb	r2, [r3, #0]
	speed += 49;
 800c708:	1dfb      	adds	r3, r7, #7
 800c70a:	1dfa      	adds	r2, r7, #7
 800c70c:	7812      	ldrb	r2, [r2, #0]
 800c70e:	3231      	adds	r2, #49	; 0x31
 800c710:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1 ,speed);
 800c712:	4b04      	ldr	r3, [pc, #16]	; (800c724 <LidarSetSpeed+0x28>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	1dfa      	adds	r2, r7, #7
 800c718:	7812      	ldrb	r2, [r2, #0]
 800c71a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800c71c:	46c0      	nop			; (mov r8, r8)
 800c71e:	46bd      	mov	sp, r7
 800c720:	b002      	add	sp, #8
 800c722:	bd80      	pop	{r7, pc}
 800c724:	200001a8 	.word	0x200001a8

0800c728 <LidarGetInformation>:
 *   - #wrongparameter: Received data has an unexpected header or format.
 *
 * @note This function uses UART communication with DMA for efficient data transmission and reception.
 * It checks the header of the received data to ensure it matches the expected format before extracting device information.
 */
returncode_t LidarGetInformation(lidar_devEUI_t *devEUI) {
 800c728:	b590      	push	{r4, r7, lr}
 800c72a:	b08d      	sub	sp, #52	; 0x34
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
	LOG_LIDAR_ENTER();
 800c730:	4a3d      	ldr	r2, [pc, #244]	; (800c828 <LidarGetInformation+0x100>)
 800c732:	4b3e      	ldr	r3, [pc, #248]	; (800c82c <LidarGetInformation+0x104>)
 800c734:	0011      	movs	r1, r2
 800c736:	0018      	movs	r0, r3
 800c738:	f001 f8f2 	bl	800d920 <iprintf>
	HAL_StatusTypeDef status;
	uint8_t command[COMMAND_SIZE] = {(LIDAR_GET_DEV_ID & 0xFF00) >> 8, (LIDAR_GET_DEV_ID & 0x00FF)};
 800c73c:	212c      	movs	r1, #44	; 0x2c
 800c73e:	187b      	adds	r3, r7, r1
 800c740:	4a3b      	ldr	r2, [pc, #236]	; (800c830 <LidarGetInformation+0x108>)
 800c742:	801a      	strh	r2, [r3, #0]
	status = lidar.uart.tx(command, NULL, 0);
 800c744:	4b3b      	ldr	r3, [pc, #236]	; (800c834 <LidarGetInformation+0x10c>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	1878      	adds	r0, r7, r1
 800c74a:	2200      	movs	r2, #0
 800c74c:	2100      	movs	r1, #0
 800c74e:	4798      	blx	r3
 800c750:	0002      	movs	r2, r0
 800c752:	212f      	movs	r1, #47	; 0x2f
 800c754:	187b      	adds	r3, r7, r1
 800c756:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK) {
 800c758:	000a      	movs	r2, r1
 800c75a:	18bb      	adds	r3, r7, r2
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d008      	beq.n	800c774 <LidarGetInformation+0x4c>
		LOG_LIDAR_ERROR("transmit error: %d", status);
 800c762:	18bb      	adds	r3, r7, r2
 800c764:	781a      	ldrb	r2, [r3, #0]
 800c766:	4930      	ldr	r1, [pc, #192]	; (800c828 <LidarGetInformation+0x100>)
 800c768:	4b33      	ldr	r3, [pc, #204]	; (800c838 <LidarGetInformation+0x110>)
 800c76a:	0018      	movs	r0, r3
 800c76c:	f001 f8d8 	bl	800d920 <iprintf>
		return transmission_failed;
 800c770:	2309      	movs	r3, #9
 800c772:	e054      	b.n	800c81e <LidarGetInformation+0xf6>
	}

	uint8_t version[DEVEUI_SIZE + HEADER_SIZE];

	status = lidar.uart.rx(version, (DEVEUI_SIZE + HEADER_SIZE));
 800c774:	4b2f      	ldr	r3, [pc, #188]	; (800c834 <LidarGetInformation+0x10c>)
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	2410      	movs	r4, #16
 800c77a:	193a      	adds	r2, r7, r4
 800c77c:	211b      	movs	r1, #27
 800c77e:	0010      	movs	r0, r2
 800c780:	4798      	blx	r3
 800c782:	0002      	movs	r2, r0
 800c784:	212f      	movs	r1, #47	; 0x2f
 800c786:	187b      	adds	r3, r7, r1
 800c788:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK) {
 800c78a:	187b      	adds	r3, r7, r1
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d13e      	bne.n	800c810 <LidarGetInformation+0xe8>
		xSemaphoreTake(sem_uart_read, portMAX_DELAY);	// Wait for DMA Notification
 800c792:	4b2a      	ldr	r3, [pc, #168]	; (800c83c <LidarGetInformation+0x114>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2201      	movs	r2, #1
 800c798:	4252      	negs	r2, r2
 800c79a:	0011      	movs	r1, r2
 800c79c:	0018      	movs	r0, r3
 800c79e:	f7fd fe8e 	bl	800a4be <xQueueSemaphoreTake>
		if(strncmp(version, (uint8_t[]){0xA5, 0x5A}, 2) == 0) {
 800c7a2:	210c      	movs	r1, #12
 800c7a4:	187b      	adds	r3, r7, r1
 800c7a6:	4a26      	ldr	r2, [pc, #152]	; (800c840 <LidarGetInformation+0x118>)
 800c7a8:	8812      	ldrh	r2, [r2, #0]
 800c7aa:	801a      	strh	r2, [r3, #0]
 800c7ac:	1879      	adds	r1, r7, r1
 800c7ae:	193b      	adds	r3, r7, r4
 800c7b0:	2202      	movs	r2, #2
 800c7b2:	0018      	movs	r0, r3
 800c7b4:	f001 fa1e 	bl	800dbf4 <strncmp>
 800c7b8:	1e03      	subs	r3, r0, #0
 800c7ba:	d11d      	bne.n	800c7f8 <LidarGetInformation+0xd0>
			//LOG_LIDAR_DEBUG(COLOR_GREEN"header OK");
			memcpy(&(devEUI->ModelNumber), &(version[HEADER_SIZE]), MODEL_NUMBER_SIZE);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	0021      	movs	r1, r4
 800c7c0:	193a      	adds	r2, r7, r4
 800c7c2:	79d2      	ldrb	r2, [r2, #7]
 800c7c4:	701a      	strb	r2, [r3, #0]
			memcpy(&(devEUI->FirmWareVersion), &(version[HEADER_SIZE+1]), FIRMWARE_VERSION_SIZE);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	1c98      	adds	r0, r3, #2
 800c7ca:	000c      	movs	r4, r1
 800c7cc:	187b      	adds	r3, r7, r1
 800c7ce:	3308      	adds	r3, #8
 800c7d0:	2202      	movs	r2, #2
 800c7d2:	0019      	movs	r1, r3
 800c7d4:	f001 fa9a 	bl	800dd0c <memcpy>
			memcpy(&(devEUI->HardWareVersion), &(version[HEADER_SIZE+3]), HARDWARE_VERSION_SIZE);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	3304      	adds	r3, #4
 800c7dc:	0021      	movs	r1, r4
 800c7de:	187a      	adds	r2, r7, r1
 800c7e0:	7a92      	ldrb	r2, [r2, #10]
 800c7e2:	701a      	strb	r2, [r3, #0]
			memcpy(&(devEUI->SerialNumber), &(version[HEADER_SIZE+4]), SERIAL_NUMBER_SIZE);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	1d58      	adds	r0, r3, #5
 800c7e8:	187b      	adds	r3, r7, r1
 800c7ea:	330b      	adds	r3, #11
 800c7ec:	2210      	movs	r2, #16
 800c7ee:	0019      	movs	r1, r3
 800c7f0:	f001 fa8c 	bl	800dd0c <memcpy>
	}
	else {
		LOG_LIDAR_ERROR("received error");
		return transmission_failed;
	}
	return success;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	e012      	b.n	800c81e <LidarGetInformation+0xf6>
			LOG_LIDAR_ERROR("Header error 0x%02X %02X", version[0], version[1]);
 800c7f8:	2110      	movs	r1, #16
 800c7fa:	187b      	adds	r3, r7, r1
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	001a      	movs	r2, r3
 800c800:	187b      	adds	r3, r7, r1
 800c802:	785b      	ldrb	r3, [r3, #1]
 800c804:	4908      	ldr	r1, [pc, #32]	; (800c828 <LidarGetInformation+0x100>)
 800c806:	480f      	ldr	r0, [pc, #60]	; (800c844 <LidarGetInformation+0x11c>)
 800c808:	f001 f88a 	bl	800d920 <iprintf>
			return wrongparameter;
 800c80c:	2305      	movs	r3, #5
 800c80e:	e006      	b.n	800c81e <LidarGetInformation+0xf6>
		LOG_LIDAR_ERROR("received error");
 800c810:	4a05      	ldr	r2, [pc, #20]	; (800c828 <LidarGetInformation+0x100>)
 800c812:	4b0d      	ldr	r3, [pc, #52]	; (800c848 <LidarGetInformation+0x120>)
 800c814:	0011      	movs	r1, r2
 800c816:	0018      	movs	r0, r3
 800c818:	f001 f882 	bl	800d920 <iprintf>
		return transmission_failed;
 800c81c:	2309      	movs	r3, #9
}
 800c81e:	0018      	movs	r0, r3
 800c820:	46bd      	mov	sp, r7
 800c822:	b00d      	add	sp, #52	; 0x34
 800c824:	bd90      	pop	{r4, r7, pc}
 800c826:	46c0      	nop			; (mov r8, r8)
 800c828:	08011078 	.word	0x08011078
 800c82c:	08010a28 	.word	0x08010a28
 800c830:	ffff90a5 	.word	0xffff90a5
 800c834:	20004900 	.word	0x20004900
 800c838:	08010a44 	.word	0x08010a44
 800c83c:	20004c28 	.word	0x20004c28
 800c840:	08010ae4 	.word	0x08010ae4
 800c844:	08010a78 	.word	0x08010a78
 800c848:	08010ab4 	.word	0x08010ab4

0800c84c <LidarScanStart>:
 *   - #success: Lidar scanning process was successfully initiated.
 *   - #transmission_failed: Failed to transmit the scanning command.
 *
 * @note This function uses UART communication with DMA for efficient data transmission.
 */
returncode_t LidarScanStart(void){
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
	LOG_LIDAR_ENTER();
 800c852:	4a18      	ldr	r2, [pc, #96]	; (800c8b4 <LidarScanStart+0x68>)
 800c854:	4b18      	ldr	r3, [pc, #96]	; (800c8b8 <LidarScanStart+0x6c>)
 800c856:	0011      	movs	r1, r2
 800c858:	0018      	movs	r0, r3
 800c85a:	f001 f861 	bl	800d920 <iprintf>
	HAL_StatusTypeDef status;

	LIDAR_DEV_ENABLE();
 800c85e:	4b17      	ldr	r3, [pc, #92]	; (800c8bc <LidarScanStart+0x70>)
 800c860:	2201      	movs	r2, #1
 800c862:	2120      	movs	r1, #32
 800c864:	0018      	movs	r0, r3
 800c866:	f7f9 fa5f 	bl	8005d28 <HAL_GPIO_WritePin>
	LIDAR_MOTOR_ENABLE();
 800c86a:	4b14      	ldr	r3, [pc, #80]	; (800c8bc <LidarScanStart+0x70>)
 800c86c:	2201      	movs	r2, #1
 800c86e:	2110      	movs	r1, #16
 800c870:	0018      	movs	r0, r3
 800c872:	f7f9 fa59 	bl	8005d28 <HAL_GPIO_WritePin>

	uint8_t command[COMMAND_SIZE] = {(LIDAR_SCAN_START & 0xFF00) >> 8, (LIDAR_SCAN_START & 0x00FF)};
 800c876:	1d3b      	adds	r3, r7, #4
 800c878:	4a11      	ldr	r2, [pc, #68]	; (800c8c0 <LidarScanStart+0x74>)
 800c87a:	801a      	strh	r2, [r3, #0]
	//uint8_t command[COMMAND_SIZE] = {0x60, 0xA5};
	status = lidar.uart.tx(command, NULL, 0);
 800c87c:	4b11      	ldr	r3, [pc, #68]	; (800c8c4 <LidarScanStart+0x78>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	1d38      	adds	r0, r7, #4
 800c882:	2200      	movs	r2, #0
 800c884:	2100      	movs	r1, #0
 800c886:	4798      	blx	r3
 800c888:	0002      	movs	r2, r0
 800c88a:	1dfb      	adds	r3, r7, #7
 800c88c:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK) {
 800c88e:	1dfb      	adds	r3, r7, #7
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d008      	beq.n	800c8a8 <LidarScanStart+0x5c>
		LOG_LIDAR_ERROR("transmit error: %d", status);
 800c896:	1dfb      	adds	r3, r7, #7
 800c898:	781a      	ldrb	r2, [r3, #0]
 800c89a:	4906      	ldr	r1, [pc, #24]	; (800c8b4 <LidarScanStart+0x68>)
 800c89c:	4b0a      	ldr	r3, [pc, #40]	; (800c8c8 <LidarScanStart+0x7c>)
 800c89e:	0018      	movs	r0, r3
 800c8a0:	f001 f83e 	bl	800d920 <iprintf>
		return transmission_failed;
 800c8a4:	2309      	movs	r3, #9
 800c8a6:	e000      	b.n	800c8aa <LidarScanStart+0x5e>
	}
	return success;
 800c8a8:	2300      	movs	r3, #0
}
 800c8aa:	0018      	movs	r0, r3
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	b002      	add	sp, #8
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	46c0      	nop			; (mov r8, r8)
 800c8b4:	0801108c 	.word	0x0801108c
 800c8b8:	08010a28 	.word	0x08010a28
 800c8bc:	50000800 	.word	0x50000800
 800c8c0:	000060a5 	.word	0x000060a5
 800c8c4:	20004900 	.word	0x20004900
 800c8c8:	08010a44 	.word	0x08010a44

0800c8cc <LidarScanStop>:
 *   - #success: Lidar scanning process was successfully stopped.
 *   - #transmission_failed: Failed to transmit the command to stop scanning.
 *
 * @note This function uses UART communication with DMA for efficient data transmission.
 */
returncode_t LidarScanStop(void) {
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
	//LOG_LIDAR_ENTER();
	LIDAR_MOTOR_DISABLE();
 800c8d2:	4b12      	ldr	r3, [pc, #72]	; (800c91c <LidarScanStop+0x50>)
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	2110      	movs	r1, #16
 800c8d8:	0018      	movs	r0, r3
 800c8da:	f7f9 fa25 	bl	8005d28 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status;
	uint8_t command[COMMAND_SIZE] = {(LIDAR_SCAN_STOP & 0xFF00) >> 8, (LIDAR_SCAN_STOP & 0x00FF)};
 800c8de:	1d3b      	adds	r3, r7, #4
 800c8e0:	4a0f      	ldr	r2, [pc, #60]	; (800c920 <LidarScanStop+0x54>)
 800c8e2:	801a      	strh	r2, [r3, #0]
	status = lidar.uart.tx(command, NULL, 0);
 800c8e4:	4b0f      	ldr	r3, [pc, #60]	; (800c924 <LidarScanStop+0x58>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	1d38      	adds	r0, r7, #4
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	2100      	movs	r1, #0
 800c8ee:	4798      	blx	r3
 800c8f0:	0002      	movs	r2, r0
 800c8f2:	1dfb      	adds	r3, r7, #7
 800c8f4:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK) {
 800c8f6:	1dfb      	adds	r3, r7, #7
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d008      	beq.n	800c910 <LidarScanStop+0x44>
		LOG_LIDAR_ERROR("transmit error: %d", status);
 800c8fe:	1dfb      	adds	r3, r7, #7
 800c900:	781a      	ldrb	r2, [r3, #0]
 800c902:	4909      	ldr	r1, [pc, #36]	; (800c928 <LidarScanStop+0x5c>)
 800c904:	4b09      	ldr	r3, [pc, #36]	; (800c92c <LidarScanStop+0x60>)
 800c906:	0018      	movs	r0, r3
 800c908:	f001 f80a 	bl	800d920 <iprintf>
		return transmission_failed;
 800c90c:	2309      	movs	r3, #9
 800c90e:	e000      	b.n	800c912 <LidarScanStop+0x46>
	}
	return success;
 800c910:	2300      	movs	r3, #0
}
 800c912:	0018      	movs	r0, r3
 800c914:	46bd      	mov	sp, r7
 800c916:	b002      	add	sp, #8
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	46c0      	nop			; (mov r8, r8)
 800c91c:	50000800 	.word	0x50000800
 800c920:	000065a5 	.word	0x000065a5
 800c924:	20004900 	.word	0x20004900
 800c928:	0801109c 	.word	0x0801109c
 800c92c:	08010a44 	.word	0x08010a44

0800c930 <LidarHealthStatus>:
 *   - #wrongparameter: Received data has an unexpected header or format.
 *
 * @note This function uses UART communication with DMA for efficient data transmission and reception.
 * It checks the header of the received data to ensure it matches the expected format before extracting health status information.
 */
returncode_t LidarHealthStatus(lidar_healthStatus_t *healthStatus) {
 800c930:	b590      	push	{r4, r7, lr}
 800c932:	b08b      	sub	sp, #44	; 0x2c
 800c934:	af02      	add	r7, sp, #8
 800c936:	6078      	str	r0, [r7, #4]
	LOG_LIDAR_ENTER();
 800c938:	4a40      	ldr	r2, [pc, #256]	; (800ca3c <LidarHealthStatus+0x10c>)
 800c93a:	4b41      	ldr	r3, [pc, #260]	; (800ca40 <LidarHealthStatus+0x110>)
 800c93c:	0011      	movs	r1, r2
 800c93e:	0018      	movs	r0, r3
 800c940:	f000 ffee 	bl	800d920 <iprintf>
	HAL_StatusTypeDef status;
	uint8_t command[COMMAND_SIZE] = {(LIDAR_GET_HEALTH_STATUS & 0xFF00) >> 8, (LIDAR_GET_HEALTH_STATUS & 0x00FF)};
 800c944:	211c      	movs	r1, #28
 800c946:	187b      	adds	r3, r7, r1
 800c948:	4a3e      	ldr	r2, [pc, #248]	; (800ca44 <LidarHealthStatus+0x114>)
 800c94a:	801a      	strh	r2, [r3, #0]
	status = lidar.uart.tx(command, NULL, 0);
 800c94c:	4b3e      	ldr	r3, [pc, #248]	; (800ca48 <LidarHealthStatus+0x118>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	1878      	adds	r0, r7, r1
 800c952:	2200      	movs	r2, #0
 800c954:	2100      	movs	r1, #0
 800c956:	4798      	blx	r3
 800c958:	0002      	movs	r2, r0
 800c95a:	211f      	movs	r1, #31
 800c95c:	187b      	adds	r3, r7, r1
 800c95e:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK) {
 800c960:	000a      	movs	r2, r1
 800c962:	18bb      	adds	r3, r7, r2
 800c964:	781b      	ldrb	r3, [r3, #0]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d006      	beq.n	800c978 <LidarHealthStatus+0x48>
		LOG_LIDAR_ERROR("transmit error: %d", status);
 800c96a:	18bb      	adds	r3, r7, r2
 800c96c:	781a      	ldrb	r2, [r3, #0]
 800c96e:	4933      	ldr	r1, [pc, #204]	; (800ca3c <LidarHealthStatus+0x10c>)
 800c970:	4b36      	ldr	r3, [pc, #216]	; (800ca4c <LidarHealthStatus+0x11c>)
 800c972:	0018      	movs	r0, r3
 800c974:	f000 ffd4 	bl	800d920 <iprintf>
	}
	uint8_t buf[HEADER_SIZE + HEALTH_STATUS_SIZE];

	status = lidar.uart.rx(buf,  (HEADER_SIZE + HEALTH_STATUS_SIZE));
 800c978:	4b33      	ldr	r3, [pc, #204]	; (800ca48 <LidarHealthStatus+0x118>)
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	2410      	movs	r4, #16
 800c97e:	193a      	adds	r2, r7, r4
 800c980:	210a      	movs	r1, #10
 800c982:	0010      	movs	r0, r2
 800c984:	4798      	blx	r3
 800c986:	0002      	movs	r2, r0
 800c988:	211f      	movs	r1, #31
 800c98a:	187b      	adds	r3, r7, r1
 800c98c:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK) {
 800c98e:	187b      	adds	r3, r7, r1
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d131      	bne.n	800c9fa <LidarHealthStatus+0xca>
		xSemaphoreTake(sem_uart_read, portMAX_DELAY);	// Wait for DMA Notification
 800c996:	4b2e      	ldr	r3, [pc, #184]	; (800ca50 <LidarHealthStatus+0x120>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	2201      	movs	r2, #1
 800c99c:	4252      	negs	r2, r2
 800c99e:	0011      	movs	r1, r2
 800c9a0:	0018      	movs	r0, r3
 800c9a2:	f7fd fd8c 	bl	800a4be <xQueueSemaphoreTake>
		if(strncmp(buf, (uint8_t[]){0xA5, 0x5A}, 2) == 0) {
 800c9a6:	210c      	movs	r1, #12
 800c9a8:	187b      	adds	r3, r7, r1
 800c9aa:	4a2a      	ldr	r2, [pc, #168]	; (800ca54 <LidarHealthStatus+0x124>)
 800c9ac:	8812      	ldrh	r2, [r2, #0]
 800c9ae:	801a      	strh	r2, [r3, #0]
 800c9b0:	1879      	adds	r1, r7, r1
 800c9b2:	193b      	adds	r3, r7, r4
 800c9b4:	2202      	movs	r2, #2
 800c9b6:	0018      	movs	r0, r3
 800c9b8:	f001 f91c 	bl	800dbf4 <strncmp>
 800c9bc:	1e03      	subs	r3, r0, #0
 800c9be:	d110      	bne.n	800c9e2 <LidarHealthStatus+0xb2>
			memcpy(&(healthStatus->StatusCode), &(buf[HEADER_SIZE]), STATUS_CODE_SIZE);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	193a      	adds	r2, r7, r4
 800c9c4:	79d2      	ldrb	r2, [r2, #7]
 800c9c6:	701a      	strb	r2, [r3, #0]
			memcpy(&(healthStatus->ErrorCode), &(buf[HEADER_SIZE + 1]), ERROR_CODE_SIZE);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	1c58      	adds	r0, r3, #1
 800c9cc:	193b      	adds	r3, r7, r4
 800c9ce:	3308      	adds	r3, #8
 800c9d0:	2202      	movs	r2, #2
 800c9d2:	0019      	movs	r1, r3
 800c9d4:	f001 f99a 	bl	800dd0c <memcpy>
	}
	else {
		LOG_LIDAR_ERROR("reception error");
		return transmission_failed;
	}
	LOG_LIDAR_DEBUG("healthStatus: -status = %s, -error: 0x[%02X %02X]", 
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d114      	bne.n	800ca0a <LidarHealthStatus+0xda>
 800c9e0:	e01b      	b.n	800ca1a <LidarHealthStatus+0xea>
			LOG_LIDAR_ERROR("Header error 0x%02X %02X", buf[0], buf[1]);
 800c9e2:	2110      	movs	r1, #16
 800c9e4:	187b      	adds	r3, r7, r1
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	001a      	movs	r2, r3
 800c9ea:	187b      	adds	r3, r7, r1
 800c9ec:	785b      	ldrb	r3, [r3, #1]
 800c9ee:	4913      	ldr	r1, [pc, #76]	; (800ca3c <LidarHealthStatus+0x10c>)
 800c9f0:	4819      	ldr	r0, [pc, #100]	; (800ca58 <LidarHealthStatus+0x128>)
 800c9f2:	f000 ff95 	bl	800d920 <iprintf>
			return wrongparameter;
 800c9f6:	2305      	movs	r3, #5
 800c9f8:	e01c      	b.n	800ca34 <LidarHealthStatus+0x104>
		LOG_LIDAR_ERROR("reception error");
 800c9fa:	4a10      	ldr	r2, [pc, #64]	; (800ca3c <LidarHealthStatus+0x10c>)
 800c9fc:	4b17      	ldr	r3, [pc, #92]	; (800ca5c <LidarHealthStatus+0x12c>)
 800c9fe:	0011      	movs	r1, r2
 800ca00:	0018      	movs	r0, r3
 800ca02:	f000 ff8d 	bl	800d920 <iprintf>
		return transmission_failed;
 800ca06:	2309      	movs	r3, #9
 800ca08:	e014      	b.n	800ca34 <LidarHealthStatus+0x104>
	LOG_LIDAR_DEBUG("healthStatus: -status = %s, -error: 0x[%02X %02X]", 
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	d101      	bne.n	800ca16 <LidarHealthStatus+0xe6>
 800ca12:	4a13      	ldr	r2, [pc, #76]	; (800ca60 <LidarHealthStatus+0x130>)
 800ca14:	e002      	b.n	800ca1c <LidarHealthStatus+0xec>
 800ca16:	4a13      	ldr	r2, [pc, #76]	; (800ca64 <LidarHealthStatus+0x134>)
 800ca18:	e000      	b.n	800ca1c <LidarHealthStatus+0xec>
 800ca1a:	4a13      	ldr	r2, [pc, #76]	; (800ca68 <LidarHealthStatus+0x138>)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	785b      	ldrb	r3, [r3, #1]
 800ca20:	001c      	movs	r4, r3
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	789b      	ldrb	r3, [r3, #2]
 800ca26:	4905      	ldr	r1, [pc, #20]	; (800ca3c <LidarHealthStatus+0x10c>)
 800ca28:	4810      	ldr	r0, [pc, #64]	; (800ca6c <LidarHealthStatus+0x13c>)
 800ca2a:	9300      	str	r3, [sp, #0]
 800ca2c:	0023      	movs	r3, r4
 800ca2e:	f000 ff77 	bl	800d920 <iprintf>
					(healthStatus->StatusCode == 0) ? "running normaly" : (healthStatus->StatusCode == 1) ? "running warning" : "running incorrectly",
					healthStatus->ErrorCode[0], healthStatus->ErrorCode[1]);
	return success;
 800ca32:	2300      	movs	r3, #0
}
 800ca34:	0018      	movs	r0, r3
 800ca36:	46bd      	mov	sp, r7
 800ca38:	b009      	add	sp, #36	; 0x24
 800ca3a:	bd90      	pop	{r4, r7, pc}
 800ca3c:	080110ac 	.word	0x080110ac
 800ca40:	08010a28 	.word	0x08010a28
 800ca44:	ffff91a5 	.word	0xffff91a5
 800ca48:	20004900 	.word	0x20004900
 800ca4c:	08010a44 	.word	0x08010a44
 800ca50:	20004c28 	.word	0x20004c28
 800ca54:	08010ae4 	.word	0x08010ae4
 800ca58:	08010a78 	.word	0x08010a78
 800ca5c:	08010ae8 	.word	0x08010ae8
 800ca60:	08010b1c 	.word	0x08010b1c
 800ca64:	08010b2c 	.word	0x08010b2c
 800ca68:	08010b40 	.word	0x08010b40
 800ca6c:	08010b50 	.word	0x08010b50

0800ca70 <lidarRestart>:
 *
 * @return Return code indicating the success or failure of the LIDAR restart.
 *         - success: The LIDAR restart command was successfully transmitted.
 *         - transmission_failed: An error occurred during the transmission.
 */
returncode_t lidarRestart(void) {
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b082      	sub	sp, #8
 800ca74:	af00      	add	r7, sp, #0
	LOG_LIDAR_ENTER();
 800ca76:	4a12      	ldr	r2, [pc, #72]	; (800cac0 <lidarRestart+0x50>)
 800ca78:	4b12      	ldr	r3, [pc, #72]	; (800cac4 <lidarRestart+0x54>)
 800ca7a:	0011      	movs	r1, r2
 800ca7c:	0018      	movs	r0, r3
 800ca7e:	f000 ff4f 	bl	800d920 <iprintf>
	HAL_StatusTypeDef status;
	uint8_t command[COMMAND_SIZE] = {(LIDAR_RESTART & 0xFF00) >> 8, (LIDAR_RESTART & 0x00FF)};
 800ca82:	1d3b      	adds	r3, r7, #4
 800ca84:	4a10      	ldr	r2, [pc, #64]	; (800cac8 <lidarRestart+0x58>)
 800ca86:	801a      	strh	r2, [r3, #0]
	status = lidar.uart.tx(command, NULL, 0);
 800ca88:	4b10      	ldr	r3, [pc, #64]	; (800cacc <lidarRestart+0x5c>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	1d38      	adds	r0, r7, #4
 800ca8e:	2200      	movs	r2, #0
 800ca90:	2100      	movs	r1, #0
 800ca92:	4798      	blx	r3
 800ca94:	0002      	movs	r2, r0
 800ca96:	1dfb      	adds	r3, r7, #7
 800ca98:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK) {
 800ca9a:	1dfb      	adds	r3, r7, #7
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d008      	beq.n	800cab4 <lidarRestart+0x44>
		LOG_LIDAR_ERROR("transmit error: %d", status);
 800caa2:	1dfb      	adds	r3, r7, #7
 800caa4:	781a      	ldrb	r2, [r3, #0]
 800caa6:	4906      	ldr	r1, [pc, #24]	; (800cac0 <lidarRestart+0x50>)
 800caa8:	4b09      	ldr	r3, [pc, #36]	; (800cad0 <lidarRestart+0x60>)
 800caaa:	0018      	movs	r0, r3
 800caac:	f000 ff38 	bl	800d920 <iprintf>
		return transmission_failed;
 800cab0:	2309      	movs	r3, #9
 800cab2:	e000      	b.n	800cab6 <lidarRestart+0x46>
	}
	return success;
 800cab4:	2300      	movs	r3, #0
}
 800cab6:	0018      	movs	r0, r3
 800cab8:	46bd      	mov	sp, r7
 800caba:	b002      	add	sp, #8
 800cabc:	bd80      	pop	{r7, pc}
 800cabe:	46c0      	nop			; (mov r8, r8)
 800cac0:	080110c0 	.word	0x080110c0
 800cac4:	08010a28 	.word	0x08010a28
 800cac8:	ffff80a5 	.word	0xffff80a5
 800cacc:	20004900 	.word	0x20004900
 800cad0:	08010a44 	.word	0x08010a44

0800cad4 <checkCS>:
 * it returns false.
 *
 * @param lidarData Pointer to the lidar scan data structure.
 * @return Returns true if the checksum is valid, false otherwise.
 */
bool checkCS(lidar_scan_t *lidarData) {
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b084      	sub	sp, #16
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
	uint16_t calculatedCS = ((lidarData->PH[0] << 8) + lidarData->PH[1])^((lidarData->FSA[0] << 8) + lidarData->FSA[1]);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	021b      	lsls	r3, r3, #8
 800cae4:	b29a      	uxth	r2, r3
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	785b      	ldrb	r3, [r3, #1]
 800caea:	b29b      	uxth	r3, r3
 800caec:	18d3      	adds	r3, r2, r3
 800caee:	b29b      	uxth	r3, r3
 800caf0:	b21a      	sxth	r2, r3
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	791b      	ldrb	r3, [r3, #4]
 800caf6:	b29b      	uxth	r3, r3
 800caf8:	021b      	lsls	r3, r3, #8
 800cafa:	b299      	uxth	r1, r3
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	795b      	ldrb	r3, [r3, #5]
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	18cb      	adds	r3, r1, r3
 800cb04:	b29b      	uxth	r3, r3
 800cb06:	b21b      	sxth	r3, r3
 800cb08:	4053      	eors	r3, r2
 800cb0a:	b21a      	sxth	r2, r3
 800cb0c:	230e      	movs	r3, #14
 800cb0e:	18fb      	adds	r3, r7, r3
 800cb10:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < lidarData->LSN; i += 2) {
 800cb12:	2300      	movs	r3, #0
 800cb14:	60bb      	str	r3, [r7, #8]
 800cb16:	e01b      	b.n	800cb50 <checkCS+0x7c>
		calculatedCS ^= ((lidarData->SI[i] << 8) + lidarData->SI[i+1]);
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	18d3      	adds	r3, r2, r3
 800cb1e:	330a      	adds	r3, #10
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	b29b      	uxth	r3, r3
 800cb24:	021b      	lsls	r3, r3, #8
 800cb26:	b29a      	uxth	r2, r3
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	6879      	ldr	r1, [r7, #4]
 800cb2e:	18cb      	adds	r3, r1, r3
 800cb30:	7a9b      	ldrb	r3, [r3, #10]
 800cb32:	b29b      	uxth	r3, r3
 800cb34:	18d3      	adds	r3, r2, r3
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	b21a      	sxth	r2, r3
 800cb3a:	210e      	movs	r1, #14
 800cb3c:	187b      	adds	r3, r7, r1
 800cb3e:	2000      	movs	r0, #0
 800cb40:	5e1b      	ldrsh	r3, [r3, r0]
 800cb42:	4053      	eors	r3, r2
 800cb44:	b21a      	sxth	r2, r3
 800cb46:	187b      	adds	r3, r7, r1
 800cb48:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < lidarData->LSN; i += 2) {
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	3302      	adds	r3, #2
 800cb4e:	60bb      	str	r3, [r7, #8]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	78db      	ldrb	r3, [r3, #3]
 800cb54:	001a      	movs	r2, r3
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	dbdd      	blt.n	800cb18 <checkCS+0x44>
	}
	calculatedCS ^= ((lidarData->CT << 8) + lidarData->LSN)^((lidarData->LSA[0] << 8) + lidarData->LSA[1]);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	789b      	ldrb	r3, [r3, #2]
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	021b      	lsls	r3, r3, #8
 800cb64:	b29a      	uxth	r2, r3
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	78db      	ldrb	r3, [r3, #3]
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	18d3      	adds	r3, r2, r3
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	b21a      	sxth	r2, r3
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	799b      	ldrb	r3, [r3, #6]
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	021b      	lsls	r3, r3, #8
 800cb7a:	b299      	uxth	r1, r3
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	79db      	ldrb	r3, [r3, #7]
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	18cb      	adds	r3, r1, r3
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	b21b      	sxth	r3, r3
 800cb88:	4053      	eors	r3, r2
 800cb8a:	b21a      	sxth	r2, r3
 800cb8c:	210e      	movs	r1, #14
 800cb8e:	187b      	adds	r3, r7, r1
 800cb90:	2000      	movs	r0, #0
 800cb92:	5e1b      	ldrsh	r3, [r3, r0]
 800cb94:	4053      	eors	r3, r2
 800cb96:	b21a      	sxth	r2, r3
 800cb98:	187b      	adds	r3, r7, r1
 800cb9a:	801a      	strh	r2, [r3, #0]
	if(((lidarData->CS[0] << 8) + lidarData->CS[1]) == calculatedCS) {
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	7a1b      	ldrb	r3, [r3, #8]
 800cba0:	021b      	lsls	r3, r3, #8
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	7a52      	ldrb	r2, [r2, #9]
 800cba6:	189a      	adds	r2, r3, r2
 800cba8:	187b      	adds	r3, r7, r1
 800cbaa:	881b      	ldrh	r3, [r3, #0]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d101      	bne.n	800cbb4 <checkCS+0xe0>
		return true;
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	e000      	b.n	800cbb6 <checkCS+0xe2>
	}
	else {
		return false;
 800cbb4:	2300      	movs	r3, #0
	}
}
 800cbb6:	0018      	movs	r0, r3
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	b004      	add	sp, #16
 800cbbc:	bd80      	pop	{r7, pc}
	...

0800cbc0 <convertSample>:
 * of the lidar structure.
 *
 * @param lidarData Pointer to the lidar scan data structure.
 * @return Returns success if the conversion is successful.
 */
returncode_t convertSample(lidar_scan_t *lidarData) {
 800cbc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbc2:	b091      	sub	sp, #68	; 0x44
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	61f8      	str	r0, [r7, #28]
 800cbc8:	4669      	mov	r1, sp
 800cbca:	000e      	movs	r6, r1
	/******************** convert distance ***********************/
	uint16_t sampleSize = lidarData->LSN/Si_SIZE;
 800cbcc:	69f9      	ldr	r1, [r7, #28]
 800cbce:	78c9      	ldrb	r1, [r1, #3]
 800cbd0:	0849      	lsrs	r1, r1, #1
 800cbd2:	b2c8      	uxtb	r0, r1
 800cbd4:	211e      	movs	r1, #30
 800cbd6:	000b      	movs	r3, r1
 800cbd8:	2218      	movs	r2, #24
 800cbda:	188a      	adds	r2, r1, r2
 800cbdc:	19d1      	adds	r1, r2, r7
 800cbde:	8008      	strh	r0, [r1, #0]
	//uint16_t distance[sampleSize];
	position_t position[sampleSize];
 800cbe0:	0019      	movs	r1, r3
 800cbe2:	2318      	movs	r3, #24
 800cbe4:	18cb      	adds	r3, r1, r3
 800cbe6:	19d9      	adds	r1, r3, r7
 800cbe8:	8809      	ldrh	r1, [r1, #0]
 800cbea:	0008      	movs	r0, r1
 800cbec:	3801      	subs	r0, #1
 800cbee:	6338      	str	r0, [r7, #48]	; 0x30
 800cbf0:	6139      	str	r1, [r7, #16]
 800cbf2:	2000      	movs	r0, #0
 800cbf4:	6178      	str	r0, [r7, #20]
 800cbf6:	693a      	ldr	r2, [r7, #16]
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	0010      	movs	r0, r2
 800cbfc:	0e80      	lsrs	r0, r0, #26
 800cbfe:	613a      	str	r2, [r7, #16]
 800cc00:	617b      	str	r3, [r7, #20]
 800cc02:	019d      	lsls	r5, r3, #6
 800cc04:	4305      	orrs	r5, r0
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	019c      	lsls	r4, r3, #6
 800cc0a:	6039      	str	r1, [r7, #0]
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	683c      	ldr	r4, [r7, #0]
 800cc12:	687d      	ldr	r5, [r7, #4]
 800cc14:	0023      	movs	r3, r4
 800cc16:	0e98      	lsrs	r0, r3, #26
 800cc18:	002b      	movs	r3, r5
 800cc1a:	019b      	lsls	r3, r3, #6
 800cc1c:	60fb      	str	r3, [r7, #12]
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	4303      	orrs	r3, r0
 800cc22:	60fb      	str	r3, [r7, #12]
 800cc24:	0023      	movs	r3, r4
 800cc26:	019b      	lsls	r3, r3, #6
 800cc28:	60bb      	str	r3, [r7, #8]
 800cc2a:	000b      	movs	r3, r1
 800cc2c:	00db      	lsls	r3, r3, #3
 800cc2e:	3307      	adds	r3, #7
 800cc30:	08db      	lsrs	r3, r3, #3
 800cc32:	00db      	lsls	r3, r3, #3
 800cc34:	466a      	mov	r2, sp
 800cc36:	1ad3      	subs	r3, r2, r3
 800cc38:	469d      	mov	sp, r3
 800cc3a:	466b      	mov	r3, sp
 800cc3c:	3303      	adds	r3, #3
 800cc3e:	089b      	lsrs	r3, r3, #2
 800cc40:	009b      	lsls	r3, r3, #2
 800cc42:	62fb      	str	r3, [r7, #44]	; 0x2c
	int i = 0;
 800cc44:	2300      	movs	r3, #0
 800cc46:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i = 0; i < sampleSize; i++) {
 800cc48:	2300      	movs	r3, #0
 800cc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc4c:	e01a      	b.n	800cc84 <convertSample+0xc4>
		//distance[i] = ((lidarData->SI[0] << 8) + lidarData->SI[1])/4;
		position[i].distance = ((lidarData->SI[i] << 8) + lidarData->SI[i+1])/4; // distance in mm
 800cc4e:	69fa      	ldr	r2, [r7, #28]
 800cc50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc52:	18d3      	adds	r3, r2, r3
 800cc54:	330a      	adds	r3, #10
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	021b      	lsls	r3, r3, #8
 800cc5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc5c:	3201      	adds	r2, #1
 800cc5e:	69f9      	ldr	r1, [r7, #28]
 800cc60:	188a      	adds	r2, r1, r2
 800cc62:	7a92      	ldrb	r2, [r2, #10]
 800cc64:	189b      	adds	r3, r3, r2
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	da00      	bge.n	800cc6c <convertSample+0xac>
 800cc6a:	3303      	adds	r3, #3
 800cc6c:	109b      	asrs	r3, r3, #2
 800cc6e:	b299      	uxth	r1, r3
 800cc70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc74:	00db      	lsls	r3, r3, #3
 800cc76:	18d3      	adds	r3, r2, r3
 800cc78:	3304      	adds	r3, #4
 800cc7a:	1c0a      	adds	r2, r1, #0
 800cc7c:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < sampleSize; i++) {
 800cc7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc80:	3301      	adds	r3, #1
 800cc82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc84:	231e      	movs	r3, #30
 800cc86:	2218      	movs	r2, #24
 800cc88:	189b      	adds	r3, r3, r2
 800cc8a:	19db      	adds	r3, r3, r7
 800cc8c:	881b      	ldrh	r3, [r3, #0]
 800cc8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc90:	429a      	cmp	r2, r3
 800cc92:	dbdc      	blt.n	800cc4e <convertSample+0x8e>
	}

	/******************** angle ***********************/
	float angleFSA, angleLSA, deltaAngle;
	angleFSA = ((((lidarData->FSA[1]) << 8) + lidarData->FSA[0]) >> 1)/64;
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	795b      	ldrb	r3, [r3, #5]
 800cc98:	021b      	lsls	r3, r3, #8
 800cc9a:	69fa      	ldr	r2, [r7, #28]
 800cc9c:	7912      	ldrb	r2, [r2, #4]
 800cc9e:	189b      	adds	r3, r3, r2
 800cca0:	105b      	asrs	r3, r3, #1
 800cca2:	d500      	bpl.n	800cca6 <convertSample+0xe6>
 800cca4:	333f      	adds	r3, #63	; 0x3f
 800cca6:	119b      	asrs	r3, r3, #6
 800cca8:	0018      	movs	r0, r3
 800ccaa:	f7f4 fabd 	bl	8001228 <__aeabi_i2f>
 800ccae:	1c03      	adds	r3, r0, #0
 800ccb0:	62bb      	str	r3, [r7, #40]	; 0x28
	angleLSA = ((((lidarData->LSA[1]) << 8) + lidarData->LSA[0]) >> 1)/64;
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	79db      	ldrb	r3, [r3, #7]
 800ccb6:	021b      	lsls	r3, r3, #8
 800ccb8:	69fa      	ldr	r2, [r7, #28]
 800ccba:	7992      	ldrb	r2, [r2, #6]
 800ccbc:	189b      	adds	r3, r3, r2
 800ccbe:	105b      	asrs	r3, r3, #1
 800ccc0:	d500      	bpl.n	800ccc4 <convertSample+0x104>
 800ccc2:	333f      	adds	r3, #63	; 0x3f
 800ccc4:	119b      	asrs	r3, r3, #6
 800ccc6:	0018      	movs	r0, r3
 800ccc8:	f7f4 faae 	bl	8001228 <__aeabi_i2f>
 800cccc:	1c03      	adds	r3, r0, #0
 800ccce:	63bb      	str	r3, [r7, #56]	; 0x38
	if(angleLSA < angleFSA) {
 800ccd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccd2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ccd4:	f7f3 fbf0 	bl	80004b8 <__aeabi_fcmplt>
 800ccd8:	1e03      	subs	r3, r0, #0
 800ccda:	d005      	beq.n	800cce8 <convertSample+0x128>
		angleLSA += 360;
 800ccdc:	4961      	ldr	r1, [pc, #388]	; (800ce64 <convertSample+0x2a4>)
 800ccde:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cce0:	f7f3 fc2a 	bl	8000538 <__aeabi_fadd>
 800cce4:	1c03      	adds	r3, r0, #0
 800cce6:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	deltaAngle = angleLSA - angleFSA;
 800cce8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ccec:	f7f4 f8dc 	bl	8000ea8 <__aeabi_fsub>
 800ccf0:	1c03      	adds	r3, r0, #0
 800ccf2:	627b      	str	r3, [r7, #36]	; 0x24

	/******************** angle correction & convertion ***********************/
	//float correctAngle[sampleSize];
	for(i = 0; i < sampleSize; i++) {
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccf8:	e096      	b.n	800ce28 <convertSample+0x268>
		if(position[i].distance>0) {
 800ccfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccfe:	00db      	lsls	r3, r3, #3
 800cd00:	18d3      	adds	r3, r2, r3
 800cd02:	3304      	adds	r3, #4
 800cd04:	881b      	ldrh	r3, [r3, #0]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d100      	bne.n	800cd0c <convertSample+0x14c>
 800cd0a:	e08a      	b.n	800ce22 <convertSample+0x262>
			//correctAngle[i] = deltaAngle/sampleSize * i + angleFSA + (atan(21.8 * (155.3 - distance[i]) / (155.3 * distance[i])) * 180/3.14);
			position[i].angle = deltaAngle/sampleSize * i + angleFSA + (atan(21.8 * (155.3 - position[i].distance) / (155.3 * position[i].distance)) * 180/3.14);
 800cd0c:	231e      	movs	r3, #30
 800cd0e:	2218      	movs	r2, #24
 800cd10:	189b      	adds	r3, r3, r2
 800cd12:	19db      	adds	r3, r3, r7
 800cd14:	881b      	ldrh	r3, [r3, #0]
 800cd16:	0018      	movs	r0, r3
 800cd18:	f7f4 fa86 	bl	8001228 <__aeabi_i2f>
 800cd1c:	1c03      	adds	r3, r0, #0
 800cd1e:	1c19      	adds	r1, r3, #0
 800cd20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd22:	f7f3 fda9 	bl	8000878 <__aeabi_fdiv>
 800cd26:	1c03      	adds	r3, r0, #0
 800cd28:	1c1c      	adds	r4, r3, #0
 800cd2a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cd2c:	f7f4 fa7c 	bl	8001228 <__aeabi_i2f>
 800cd30:	1c03      	adds	r3, r0, #0
 800cd32:	1c19      	adds	r1, r3, #0
 800cd34:	1c20      	adds	r0, r4, #0
 800cd36:	f7f3 ff69 	bl	8000c0c <__aeabi_fmul>
 800cd3a:	1c03      	adds	r3, r0, #0
 800cd3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd3e:	1c18      	adds	r0, r3, #0
 800cd40:	f7f3 fbfa 	bl	8000538 <__aeabi_fadd>
 800cd44:	1c03      	adds	r3, r0, #0
 800cd46:	1c18      	adds	r0, r3, #0
 800cd48:	f7f6 f908 	bl	8002f5c <__aeabi_f2d>
 800cd4c:	0004      	movs	r4, r0
 800cd4e:	000d      	movs	r5, r1
 800cd50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd54:	00db      	lsls	r3, r3, #3
 800cd56:	18d3      	adds	r3, r2, r3
 800cd58:	3304      	adds	r3, #4
 800cd5a:	881b      	ldrh	r3, [r3, #0]
 800cd5c:	0018      	movs	r0, r3
 800cd5e:	f7f6 f8a7 	bl	8002eb0 <__aeabi_i2d>
 800cd62:	0002      	movs	r2, r0
 800cd64:	000b      	movs	r3, r1
 800cd66:	4840      	ldr	r0, [pc, #256]	; (800ce68 <convertSample+0x2a8>)
 800cd68:	4940      	ldr	r1, [pc, #256]	; (800ce6c <convertSample+0x2ac>)
 800cd6a:	f7f5 fccb 	bl	8002704 <__aeabi_dsub>
 800cd6e:	0002      	movs	r2, r0
 800cd70:	000b      	movs	r3, r1
 800cd72:	0010      	movs	r0, r2
 800cd74:	0019      	movs	r1, r3
 800cd76:	4a3e      	ldr	r2, [pc, #248]	; (800ce70 <convertSample+0x2b0>)
 800cd78:	4b3e      	ldr	r3, [pc, #248]	; (800ce74 <convertSample+0x2b4>)
 800cd7a:	f7f5 fa01 	bl	8002180 <__aeabi_dmul>
 800cd7e:	0002      	movs	r2, r0
 800cd80:	000b      	movs	r3, r1
 800cd82:	613a      	str	r2, [r7, #16]
 800cd84:	617b      	str	r3, [r7, #20]
 800cd86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd8a:	00db      	lsls	r3, r3, #3
 800cd8c:	18d3      	adds	r3, r2, r3
 800cd8e:	3304      	adds	r3, #4
 800cd90:	881b      	ldrh	r3, [r3, #0]
 800cd92:	0018      	movs	r0, r3
 800cd94:	f7f6 f88c 	bl	8002eb0 <__aeabi_i2d>
 800cd98:	4a33      	ldr	r2, [pc, #204]	; (800ce68 <convertSample+0x2a8>)
 800cd9a:	4b34      	ldr	r3, [pc, #208]	; (800ce6c <convertSample+0x2ac>)
 800cd9c:	f7f5 f9f0 	bl	8002180 <__aeabi_dmul>
 800cda0:	0002      	movs	r2, r0
 800cda2:	000b      	movs	r3, r1
 800cda4:	6938      	ldr	r0, [r7, #16]
 800cda6:	6979      	ldr	r1, [r7, #20]
 800cda8:	f7f4 fdf0 	bl	800198c <__aeabi_ddiv>
 800cdac:	0002      	movs	r2, r0
 800cdae:	000b      	movs	r3, r1
 800cdb0:	0010      	movs	r0, r2
 800cdb2:	0019      	movs	r1, r3
 800cdb4:	f001 fd68 	bl	800e888 <atan>
 800cdb8:	2200      	movs	r2, #0
 800cdba:	4b2f      	ldr	r3, [pc, #188]	; (800ce78 <convertSample+0x2b8>)
 800cdbc:	f7f5 f9e0 	bl	8002180 <__aeabi_dmul>
 800cdc0:	0002      	movs	r2, r0
 800cdc2:	000b      	movs	r3, r1
 800cdc4:	0010      	movs	r0, r2
 800cdc6:	0019      	movs	r1, r3
 800cdc8:	4a2c      	ldr	r2, [pc, #176]	; (800ce7c <convertSample+0x2bc>)
 800cdca:	4b2d      	ldr	r3, [pc, #180]	; (800ce80 <convertSample+0x2c0>)
 800cdcc:	f7f4 fdde 	bl	800198c <__aeabi_ddiv>
 800cdd0:	0002      	movs	r2, r0
 800cdd2:	000b      	movs	r3, r1
 800cdd4:	0020      	movs	r0, r4
 800cdd6:	0029      	movs	r1, r5
 800cdd8:	f7f4 fa78 	bl	80012cc <__aeabi_dadd>
 800cddc:	0002      	movs	r2, r0
 800cdde:	000b      	movs	r3, r1
 800cde0:	0010      	movs	r0, r2
 800cde2:	0019      	movs	r1, r3
 800cde4:	f7f6 f902 	bl	8002fec <__aeabi_d2f>
 800cde8:	1c01      	adds	r1, r0, #0
 800cdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cdee:	00d2      	lsls	r2, r2, #3
 800cdf0:	50d1      	str	r1, [r2, r3]
			if(position[i].angle >= 360.0f) {
 800cdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cdf6:	00d2      	lsls	r2, r2, #3
 800cdf8:	58d3      	ldr	r3, [r2, r3]
 800cdfa:	491a      	ldr	r1, [pc, #104]	; (800ce64 <convertSample+0x2a4>)
 800cdfc:	1c18      	adds	r0, r3, #0
 800cdfe:	f7f3 fb79 	bl	80004f4 <__aeabi_fcmpge>
 800ce02:	1e03      	subs	r3, r0, #0
 800ce04:	d00d      	beq.n	800ce22 <convertSample+0x262>
				position[i].angle -= 360.0f;
 800ce06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce0a:	00d2      	lsls	r2, r2, #3
 800ce0c:	58d3      	ldr	r3, [r2, r3]
 800ce0e:	4915      	ldr	r1, [pc, #84]	; (800ce64 <convertSample+0x2a4>)
 800ce10:	1c18      	adds	r0, r3, #0
 800ce12:	f7f4 f849 	bl	8000ea8 <__aeabi_fsub>
 800ce16:	1c03      	adds	r3, r0, #0
 800ce18:	1c19      	adds	r1, r3, #0
 800ce1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce1e:	00d2      	lsls	r2, r2, #3
 800ce20:	50d1      	str	r1, [r2, r3]
	for(i = 0; i < sampleSize; i++) {
 800ce22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce24:	3301      	adds	r3, #1
 800ce26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce28:	241e      	movs	r4, #30
 800ce2a:	2318      	movs	r3, #24
 800ce2c:	18e3      	adds	r3, r4, r3
 800ce2e:	19db      	adds	r3, r3, r7
 800ce30:	881b      	ldrh	r3, [r3, #0]
 800ce32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce34:	429a      	cmp	r2, r3
 800ce36:	da00      	bge.n	800ce3a <convertSample+0x27a>
 800ce38:	e75f      	b.n	800ccfa <convertSample+0x13a>
			}
		}
	}
	memset(lidar.position, 0, 100);
 800ce3a:	4b12      	ldr	r3, [pc, #72]	; (800ce84 <convertSample+0x2c4>)
 800ce3c:	2264      	movs	r2, #100	; 0x64
 800ce3e:	2100      	movs	r1, #0
 800ce40:	0018      	movs	r0, r3
 800ce42:	f000 fecf 	bl	800dbe4 <memset>
	memcpy(lidar.position, position, sampleSize);
 800ce46:	2318      	movs	r3, #24
 800ce48:	18e3      	adds	r3, r4, r3
 800ce4a:	19db      	adds	r3, r3, r7
 800ce4c:	881a      	ldrh	r2, [r3, #0]
 800ce4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce50:	4b0c      	ldr	r3, [pc, #48]	; (800ce84 <convertSample+0x2c4>)
 800ce52:	0018      	movs	r0, r3
 800ce54:	f000 ff5a 	bl	800dd0c <memcpy>
	return success;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	46b5      	mov	sp, r6
}
 800ce5c:	0018      	movs	r0, r3
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	b011      	add	sp, #68	; 0x44
 800ce62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce64:	43b40000 	.word	0x43b40000
 800ce68:	9999999a 	.word	0x9999999a
 800ce6c:	40636999 	.word	0x40636999
 800ce70:	cccccccd 	.word	0xcccccccd
 800ce74:	4035cccc 	.word	0x4035cccc
 800ce78:	40668000 	.word	0x40668000
 800ce7c:	51eb851f 	.word	0x51eb851f
 800ce80:	40091eb8 	.word	0x40091eb8
 800ce84:	20004908 	.word	0x20004908

0800ce88 <whereIsNearestRobot>:
 * the global robot position accordingly. Additionally, it resets the robot
 * position if no update is received after 20 seconds.
 *
 * @return Pointer to the structure representing the position of the nearest robot.
 */
position_t *whereIsNearestRobot(void) {
 800ce88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce8a:	b089      	sub	sp, #36	; 0x24
 800ce8c:	af02      	add	r7, sp, #8
	/* reset nearest robot position if no update after 20s */ 
	TimerHandle_t robotTimer = xTimerCreate("Other Robot Timer", pdMS_TO_TICKS(20000), pdFALSE, NULL, clearNearestRobotPosition);
 800ce8e:	49c3      	ldr	r1, [pc, #780]	; (800d19c <whereIsNearestRobot+0x314>)
 800ce90:	48c3      	ldr	r0, [pc, #780]	; (800d1a0 <whereIsNearestRobot+0x318>)
 800ce92:	4bc4      	ldr	r3, [pc, #784]	; (800d1a4 <whereIsNearestRobot+0x31c>)
 800ce94:	9300      	str	r3, [sp, #0]
 800ce96:	2300      	movs	r3, #0
 800ce98:	2200      	movs	r2, #0
 800ce9a:	f7fe fd83 	bl	800b9a4 <xTimerCreate>
 800ce9e:	0003      	movs	r3, r0
 800cea0:	613b      	str	r3, [r7, #16]
	uint8_t offsetAngle = lidar.position[1].angle - lidar.position[0].angle;
 800cea2:	4bc1      	ldr	r3, [pc, #772]	; (800d1a8 <whereIsNearestRobot+0x320>)
 800cea4:	691a      	ldr	r2, [r3, #16]
 800cea6:	4bc0      	ldr	r3, [pc, #768]	; (800d1a8 <whereIsNearestRobot+0x320>)
 800cea8:	689b      	ldr	r3, [r3, #8]
 800ceaa:	1c19      	adds	r1, r3, #0
 800ceac:	1c10      	adds	r0, r2, #0
 800ceae:	f7f3 fffb 	bl	8000ea8 <__aeabi_fsub>
 800ceb2:	1c03      	adds	r3, r0, #0
 800ceb4:	220f      	movs	r2, #15
 800ceb6:	18bc      	adds	r4, r7, r2
 800ceb8:	1c18      	adds	r0, r3, #0
 800ceba:	f7f3 fb25 	bl	8000508 <__aeabi_f2uiz>
 800cebe:	0003      	movs	r3, r0
 800cec0:	7023      	strb	r3, [r4, #0]
	for(int n = 0; n < strlen(lidar.position); n++)
 800cec2:	2300      	movs	r3, #0
 800cec4:	617b      	str	r3, [r7, #20]
 800cec6:	e15a      	b.n	800d17e <whereIsNearestRobot+0x2f6>
	{
		/*check if 5 samples form an arc of a circle*/
		double expectedDistance = calculateExpectedDistance(lidar.position[n].distance, offsetAngle);
 800cec8:	4ab7      	ldr	r2, [pc, #732]	; (800d1a8 <whereIsNearestRobot+0x320>)
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	3301      	adds	r3, #1
 800cece:	00db      	lsls	r3, r3, #3
 800ced0:	18d3      	adds	r3, r2, r3
 800ced2:	3304      	adds	r3, #4
 800ced4:	881b      	ldrh	r3, [r3, #0]
 800ced6:	0018      	movs	r0, r3
 800ced8:	f7f6 f81a 	bl	8002f10 <__aeabi_ui2d>
 800cedc:	0004      	movs	r4, r0
 800cede:	000d      	movs	r5, r1
 800cee0:	260f      	movs	r6, #15
 800cee2:	19bb      	adds	r3, r7, r6
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	0018      	movs	r0, r3
 800cee8:	f7f6 f812 	bl	8002f10 <__aeabi_ui2d>
 800ceec:	0002      	movs	r2, r0
 800ceee:	000b      	movs	r3, r1
 800cef0:	0020      	movs	r0, r4
 800cef2:	0029      	movs	r1, r5
 800cef4:	f000 f962 	bl	800d1bc <calculateExpectedDistance>
 800cef8:	0002      	movs	r2, r0
 800cefa:	000b      	movs	r3, r1
 800cefc:	603a      	str	r2, [r7, #0]
 800cefe:	607b      	str	r3, [r7, #4]
		if((lidar.position[n+1].distance < expectedDistance + 0.3) && (lidar.position[n+1].distance > expectedDistance - 0.3) && (lidar.position[n-1].distance < expectedDistance + 0.3) && (lidar.position[n-1].distance > expectedDistance - 0.3)) {
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	3301      	adds	r3, #1
 800cf04:	4aa8      	ldr	r2, [pc, #672]	; (800d1a8 <whereIsNearestRobot+0x320>)
 800cf06:	3301      	adds	r3, #1
 800cf08:	00db      	lsls	r3, r3, #3
 800cf0a:	18d3      	adds	r3, r2, r3
 800cf0c:	3304      	adds	r3, #4
 800cf0e:	881b      	ldrh	r3, [r3, #0]
 800cf10:	0018      	movs	r0, r3
 800cf12:	f7f5 ffcd 	bl	8002eb0 <__aeabi_i2d>
 800cf16:	0004      	movs	r4, r0
 800cf18:	000d      	movs	r5, r1
 800cf1a:	4aa4      	ldr	r2, [pc, #656]	; (800d1ac <whereIsNearestRobot+0x324>)
 800cf1c:	4ba4      	ldr	r3, [pc, #656]	; (800d1b0 <whereIsNearestRobot+0x328>)
 800cf1e:	6838      	ldr	r0, [r7, #0]
 800cf20:	6879      	ldr	r1, [r7, #4]
 800cf22:	f7f4 f9d3 	bl	80012cc <__aeabi_dadd>
 800cf26:	0002      	movs	r2, r0
 800cf28:	000b      	movs	r3, r1
 800cf2a:	0020      	movs	r0, r4
 800cf2c:	0029      	movs	r1, r5
 800cf2e:	f7f3 fa89 	bl	8000444 <__aeabi_dcmplt>
 800cf32:	1e03      	subs	r3, r0, #0
 800cf34:	d100      	bne.n	800cf38 <whereIsNearestRobot+0xb0>
 800cf36:	e11f      	b.n	800d178 <whereIsNearestRobot+0x2f0>
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	4a9a      	ldr	r2, [pc, #616]	; (800d1a8 <whereIsNearestRobot+0x320>)
 800cf3e:	3301      	adds	r3, #1
 800cf40:	00db      	lsls	r3, r3, #3
 800cf42:	18d3      	adds	r3, r2, r3
 800cf44:	3304      	adds	r3, #4
 800cf46:	881b      	ldrh	r3, [r3, #0]
 800cf48:	0018      	movs	r0, r3
 800cf4a:	f7f5 ffb1 	bl	8002eb0 <__aeabi_i2d>
 800cf4e:	0004      	movs	r4, r0
 800cf50:	000d      	movs	r5, r1
 800cf52:	4a96      	ldr	r2, [pc, #600]	; (800d1ac <whereIsNearestRobot+0x324>)
 800cf54:	4b96      	ldr	r3, [pc, #600]	; (800d1b0 <whereIsNearestRobot+0x328>)
 800cf56:	6838      	ldr	r0, [r7, #0]
 800cf58:	6879      	ldr	r1, [r7, #4]
 800cf5a:	f7f5 fbd3 	bl	8002704 <__aeabi_dsub>
 800cf5e:	0002      	movs	r2, r0
 800cf60:	000b      	movs	r3, r1
 800cf62:	0020      	movs	r0, r4
 800cf64:	0029      	movs	r1, r5
 800cf66:	f7f3 fa81 	bl	800046c <__aeabi_dcmpgt>
 800cf6a:	1e03      	subs	r3, r0, #0
 800cf6c:	d100      	bne.n	800cf70 <whereIsNearestRobot+0xe8>
 800cf6e:	e103      	b.n	800d178 <whereIsNearestRobot+0x2f0>
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	3b01      	subs	r3, #1
 800cf74:	4a8c      	ldr	r2, [pc, #560]	; (800d1a8 <whereIsNearestRobot+0x320>)
 800cf76:	3301      	adds	r3, #1
 800cf78:	00db      	lsls	r3, r3, #3
 800cf7a:	18d3      	adds	r3, r2, r3
 800cf7c:	3304      	adds	r3, #4
 800cf7e:	881b      	ldrh	r3, [r3, #0]
 800cf80:	0018      	movs	r0, r3
 800cf82:	f7f5 ff95 	bl	8002eb0 <__aeabi_i2d>
 800cf86:	0004      	movs	r4, r0
 800cf88:	000d      	movs	r5, r1
 800cf8a:	4a88      	ldr	r2, [pc, #544]	; (800d1ac <whereIsNearestRobot+0x324>)
 800cf8c:	4b88      	ldr	r3, [pc, #544]	; (800d1b0 <whereIsNearestRobot+0x328>)
 800cf8e:	6838      	ldr	r0, [r7, #0]
 800cf90:	6879      	ldr	r1, [r7, #4]
 800cf92:	f7f4 f99b 	bl	80012cc <__aeabi_dadd>
 800cf96:	0002      	movs	r2, r0
 800cf98:	000b      	movs	r3, r1
 800cf9a:	0020      	movs	r0, r4
 800cf9c:	0029      	movs	r1, r5
 800cf9e:	f7f3 fa51 	bl	8000444 <__aeabi_dcmplt>
 800cfa2:	1e03      	subs	r3, r0, #0
 800cfa4:	d100      	bne.n	800cfa8 <whereIsNearestRobot+0x120>
 800cfa6:	e0e7      	b.n	800d178 <whereIsNearestRobot+0x2f0>
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	3b01      	subs	r3, #1
 800cfac:	4a7e      	ldr	r2, [pc, #504]	; (800d1a8 <whereIsNearestRobot+0x320>)
 800cfae:	3301      	adds	r3, #1
 800cfb0:	00db      	lsls	r3, r3, #3
 800cfb2:	18d3      	adds	r3, r2, r3
 800cfb4:	3304      	adds	r3, #4
 800cfb6:	881b      	ldrh	r3, [r3, #0]
 800cfb8:	0018      	movs	r0, r3
 800cfba:	f7f5 ff79 	bl	8002eb0 <__aeabi_i2d>
 800cfbe:	0004      	movs	r4, r0
 800cfc0:	000d      	movs	r5, r1
 800cfc2:	4a7a      	ldr	r2, [pc, #488]	; (800d1ac <whereIsNearestRobot+0x324>)
 800cfc4:	4b7a      	ldr	r3, [pc, #488]	; (800d1b0 <whereIsNearestRobot+0x328>)
 800cfc6:	6838      	ldr	r0, [r7, #0]
 800cfc8:	6879      	ldr	r1, [r7, #4]
 800cfca:	f7f5 fb9b 	bl	8002704 <__aeabi_dsub>
 800cfce:	0002      	movs	r2, r0
 800cfd0:	000b      	movs	r3, r1
 800cfd2:	0020      	movs	r0, r4
 800cfd4:	0029      	movs	r1, r5
 800cfd6:	f7f3 fa49 	bl	800046c <__aeabi_dcmpgt>
 800cfda:	1e03      	subs	r3, r0, #0
 800cfdc:	d100      	bne.n	800cfe0 <whereIsNearestRobot+0x158>
 800cfde:	e0cb      	b.n	800d178 <whereIsNearestRobot+0x2f0>
			expectedDistance = calculateExpectedDistance(lidar.position[n].distance, 2*offsetAngle);
 800cfe0:	4a71      	ldr	r2, [pc, #452]	; (800d1a8 <whereIsNearestRobot+0x320>)
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	00db      	lsls	r3, r3, #3
 800cfe8:	18d3      	adds	r3, r2, r3
 800cfea:	3304      	adds	r3, #4
 800cfec:	881b      	ldrh	r3, [r3, #0]
 800cfee:	0018      	movs	r0, r3
 800cff0:	f7f5 ff8e 	bl	8002f10 <__aeabi_ui2d>
 800cff4:	0004      	movs	r4, r0
 800cff6:	000d      	movs	r5, r1
 800cff8:	19bb      	adds	r3, r7, r6
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	005b      	lsls	r3, r3, #1
 800cffe:	0018      	movs	r0, r3
 800d000:	f7f5 ff56 	bl	8002eb0 <__aeabi_i2d>
 800d004:	0002      	movs	r2, r0
 800d006:	000b      	movs	r3, r1
 800d008:	0020      	movs	r0, r4
 800d00a:	0029      	movs	r1, r5
 800d00c:	f000 f8d6 	bl	800d1bc <calculateExpectedDistance>
 800d010:	0002      	movs	r2, r0
 800d012:	000b      	movs	r3, r1
 800d014:	603a      	str	r2, [r7, #0]
 800d016:	607b      	str	r3, [r7, #4]
			if((lidar.position[n+2].distance < expectedDistance + 0.3) && (lidar.position[n+2].distance > expectedDistance - 0.3) && (lidar.position[n-2].distance < expectedDistance + 0.3) && (lidar.position[n-2].distance > expectedDistance - 0.3)) {
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	3302      	adds	r3, #2
 800d01c:	4a62      	ldr	r2, [pc, #392]	; (800d1a8 <whereIsNearestRobot+0x320>)
 800d01e:	3301      	adds	r3, #1
 800d020:	00db      	lsls	r3, r3, #3
 800d022:	18d3      	adds	r3, r2, r3
 800d024:	3304      	adds	r3, #4
 800d026:	881b      	ldrh	r3, [r3, #0]
 800d028:	0018      	movs	r0, r3
 800d02a:	f7f5 ff41 	bl	8002eb0 <__aeabi_i2d>
 800d02e:	0004      	movs	r4, r0
 800d030:	000d      	movs	r5, r1
 800d032:	4a5e      	ldr	r2, [pc, #376]	; (800d1ac <whereIsNearestRobot+0x324>)
 800d034:	4b5e      	ldr	r3, [pc, #376]	; (800d1b0 <whereIsNearestRobot+0x328>)
 800d036:	6838      	ldr	r0, [r7, #0]
 800d038:	6879      	ldr	r1, [r7, #4]
 800d03a:	f7f4 f947 	bl	80012cc <__aeabi_dadd>
 800d03e:	0002      	movs	r2, r0
 800d040:	000b      	movs	r3, r1
 800d042:	0020      	movs	r0, r4
 800d044:	0029      	movs	r1, r5
 800d046:	f7f3 f9fd 	bl	8000444 <__aeabi_dcmplt>
 800d04a:	1e03      	subs	r3, r0, #0
 800d04c:	d100      	bne.n	800d050 <whereIsNearestRobot+0x1c8>
 800d04e:	e093      	b.n	800d178 <whereIsNearestRobot+0x2f0>
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	3302      	adds	r3, #2
 800d054:	4a54      	ldr	r2, [pc, #336]	; (800d1a8 <whereIsNearestRobot+0x320>)
 800d056:	3301      	adds	r3, #1
 800d058:	00db      	lsls	r3, r3, #3
 800d05a:	18d3      	adds	r3, r2, r3
 800d05c:	3304      	adds	r3, #4
 800d05e:	881b      	ldrh	r3, [r3, #0]
 800d060:	0018      	movs	r0, r3
 800d062:	f7f5 ff25 	bl	8002eb0 <__aeabi_i2d>
 800d066:	0004      	movs	r4, r0
 800d068:	000d      	movs	r5, r1
 800d06a:	4a50      	ldr	r2, [pc, #320]	; (800d1ac <whereIsNearestRobot+0x324>)
 800d06c:	4b50      	ldr	r3, [pc, #320]	; (800d1b0 <whereIsNearestRobot+0x328>)
 800d06e:	6838      	ldr	r0, [r7, #0]
 800d070:	6879      	ldr	r1, [r7, #4]
 800d072:	f7f5 fb47 	bl	8002704 <__aeabi_dsub>
 800d076:	0002      	movs	r2, r0
 800d078:	000b      	movs	r3, r1
 800d07a:	0020      	movs	r0, r4
 800d07c:	0029      	movs	r1, r5
 800d07e:	f7f3 f9f5 	bl	800046c <__aeabi_dcmpgt>
 800d082:	1e03      	subs	r3, r0, #0
 800d084:	d100      	bne.n	800d088 <whereIsNearestRobot+0x200>
 800d086:	e077      	b.n	800d178 <whereIsNearestRobot+0x2f0>
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	3b02      	subs	r3, #2
 800d08c:	4a46      	ldr	r2, [pc, #280]	; (800d1a8 <whereIsNearestRobot+0x320>)
 800d08e:	3301      	adds	r3, #1
 800d090:	00db      	lsls	r3, r3, #3
 800d092:	18d3      	adds	r3, r2, r3
 800d094:	3304      	adds	r3, #4
 800d096:	881b      	ldrh	r3, [r3, #0]
 800d098:	0018      	movs	r0, r3
 800d09a:	f7f5 ff09 	bl	8002eb0 <__aeabi_i2d>
 800d09e:	0004      	movs	r4, r0
 800d0a0:	000d      	movs	r5, r1
 800d0a2:	4a42      	ldr	r2, [pc, #264]	; (800d1ac <whereIsNearestRobot+0x324>)
 800d0a4:	4b42      	ldr	r3, [pc, #264]	; (800d1b0 <whereIsNearestRobot+0x328>)
 800d0a6:	6838      	ldr	r0, [r7, #0]
 800d0a8:	6879      	ldr	r1, [r7, #4]
 800d0aa:	f7f4 f90f 	bl	80012cc <__aeabi_dadd>
 800d0ae:	0002      	movs	r2, r0
 800d0b0:	000b      	movs	r3, r1
 800d0b2:	0020      	movs	r0, r4
 800d0b4:	0029      	movs	r1, r5
 800d0b6:	f7f3 f9c5 	bl	8000444 <__aeabi_dcmplt>
 800d0ba:	1e03      	subs	r3, r0, #0
 800d0bc:	d05c      	beq.n	800d178 <whereIsNearestRobot+0x2f0>
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	3b02      	subs	r3, #2
 800d0c2:	4a39      	ldr	r2, [pc, #228]	; (800d1a8 <whereIsNearestRobot+0x320>)
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	00db      	lsls	r3, r3, #3
 800d0c8:	18d3      	adds	r3, r2, r3
 800d0ca:	3304      	adds	r3, #4
 800d0cc:	881b      	ldrh	r3, [r3, #0]
 800d0ce:	0018      	movs	r0, r3
 800d0d0:	f7f5 feee 	bl	8002eb0 <__aeabi_i2d>
 800d0d4:	0004      	movs	r4, r0
 800d0d6:	000d      	movs	r5, r1
 800d0d8:	4a34      	ldr	r2, [pc, #208]	; (800d1ac <whereIsNearestRobot+0x324>)
 800d0da:	4b35      	ldr	r3, [pc, #212]	; (800d1b0 <whereIsNearestRobot+0x328>)
 800d0dc:	6838      	ldr	r0, [r7, #0]
 800d0de:	6879      	ldr	r1, [r7, #4]
 800d0e0:	f7f5 fb10 	bl	8002704 <__aeabi_dsub>
 800d0e4:	0002      	movs	r2, r0
 800d0e6:	000b      	movs	r3, r1
 800d0e8:	0020      	movs	r0, r4
 800d0ea:	0029      	movs	r1, r5
 800d0ec:	f7f3 f9be 	bl	800046c <__aeabi_dcmpgt>
 800d0f0:	1e03      	subs	r3, r0, #0
 800d0f2:	d041      	beq.n	800d178 <whereIsNearestRobot+0x2f0>
				if(!robotPosition.distance) { // first robot detected
 800d0f4:	4b2f      	ldr	r3, [pc, #188]	; (800d1b4 <whereIsNearestRobot+0x32c>)
 800d0f6:	889b      	ldrh	r3, [r3, #4]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d119      	bne.n	800d130 <whereIsNearestRobot+0x2a8>
					xTimerStart(robotTimer, 0);
 800d0fc:	f7fd fe80 	bl	800ae00 <xTaskGetTickCount>
 800d100:	0002      	movs	r2, r0
 800d102:	6938      	ldr	r0, [r7, #16]
 800d104:	2300      	movs	r3, #0
 800d106:	9300      	str	r3, [sp, #0]
 800d108:	2300      	movs	r3, #0
 800d10a:	2101      	movs	r1, #1
 800d10c:	f7fe fca0 	bl	800ba50 <xTimerGenericCommand>
					robotPosition.distance = lidar.position[n].distance;
 800d110:	4a25      	ldr	r2, [pc, #148]	; (800d1a8 <whereIsNearestRobot+0x320>)
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	3301      	adds	r3, #1
 800d116:	00db      	lsls	r3, r3, #3
 800d118:	18d3      	adds	r3, r2, r3
 800d11a:	3304      	adds	r3, #4
 800d11c:	881a      	ldrh	r2, [r3, #0]
 800d11e:	4b25      	ldr	r3, [pc, #148]	; (800d1b4 <whereIsNearestRobot+0x32c>)
 800d120:	809a      	strh	r2, [r3, #4]
					robotPosition.angle = n;
 800d122:	6978      	ldr	r0, [r7, #20]
 800d124:	f7f4 f880 	bl	8001228 <__aeabi_i2f>
 800d128:	1c02      	adds	r2, r0, #0
 800d12a:	4b22      	ldr	r3, [pc, #136]	; (800d1b4 <whereIsNearestRobot+0x32c>)
 800d12c:	601a      	str	r2, [r3, #0]
 800d12e:	e023      	b.n	800d178 <whereIsNearestRobot+0x2f0>
				}
				else if(robotPosition.distance > lidar.position[n].distance) { // a robot is closer than previous
 800d130:	4b20      	ldr	r3, [pc, #128]	; (800d1b4 <whereIsNearestRobot+0x32c>)
 800d132:	889a      	ldrh	r2, [r3, #4]
 800d134:	491c      	ldr	r1, [pc, #112]	; (800d1a8 <whereIsNearestRobot+0x320>)
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	3301      	adds	r3, #1
 800d13a:	00db      	lsls	r3, r3, #3
 800d13c:	18cb      	adds	r3, r1, r3
 800d13e:	3304      	adds	r3, #4
 800d140:	881b      	ldrh	r3, [r3, #0]
 800d142:	429a      	cmp	r2, r3
 800d144:	d918      	bls.n	800d178 <whereIsNearestRobot+0x2f0>
					xTimerReset(robotTimer, 0);
 800d146:	f7fd fe5b 	bl	800ae00 <xTaskGetTickCount>
 800d14a:	0002      	movs	r2, r0
 800d14c:	6938      	ldr	r0, [r7, #16]
 800d14e:	2300      	movs	r3, #0
 800d150:	9300      	str	r3, [sp, #0]
 800d152:	2300      	movs	r3, #0
 800d154:	2102      	movs	r1, #2
 800d156:	f7fe fc7b 	bl	800ba50 <xTimerGenericCommand>
					robotPosition.distance = lidar.position[n].distance;
 800d15a:	4a13      	ldr	r2, [pc, #76]	; (800d1a8 <whereIsNearestRobot+0x320>)
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	3301      	adds	r3, #1
 800d160:	00db      	lsls	r3, r3, #3
 800d162:	18d3      	adds	r3, r2, r3
 800d164:	3304      	adds	r3, #4
 800d166:	881a      	ldrh	r2, [r3, #0]
 800d168:	4b12      	ldr	r3, [pc, #72]	; (800d1b4 <whereIsNearestRobot+0x32c>)
 800d16a:	809a      	strh	r2, [r3, #4]
					robotPosition.angle = n;
 800d16c:	6978      	ldr	r0, [r7, #20]
 800d16e:	f7f4 f85b 	bl	8001228 <__aeabi_i2f>
 800d172:	1c02      	adds	r2, r0, #0
 800d174:	4b0f      	ldr	r3, [pc, #60]	; (800d1b4 <whereIsNearestRobot+0x32c>)
 800d176:	601a      	str	r2, [r3, #0]
	for(int n = 0; n < strlen(lidar.position); n++)
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	3301      	adds	r3, #1
 800d17c:	617b      	str	r3, [r7, #20]
 800d17e:	4b0e      	ldr	r3, [pc, #56]	; (800d1b8 <whereIsNearestRobot+0x330>)
 800d180:	0018      	movs	r0, r3
 800d182:	f7f2 ffc1 	bl	8000108 <strlen>
 800d186:	0002      	movs	r2, r0
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d900      	bls.n	800d190 <whereIsNearestRobot+0x308>
 800d18e:	e69b      	b.n	800cec8 <whereIsNearestRobot+0x40>
				}
			}
		}
	}
	return &robotPosition;
 800d190:	4b08      	ldr	r3, [pc, #32]	; (800d1b4 <whereIsNearestRobot+0x32c>)
}
 800d192:	0018      	movs	r0, r3
 800d194:	46bd      	mov	sp, r7
 800d196:	b007      	add	sp, #28
 800d198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d19a:	46c0      	nop			; (mov r8, r8)
 800d19c:	00004e20 	.word	0x00004e20
 800d1a0:	08010ba4 	.word	0x08010ba4
 800d1a4:	0800c66d 	.word	0x0800c66d
 800d1a8:	20004900 	.word	0x20004900
 800d1ac:	33333333 	.word	0x33333333
 800d1b0:	3fd33333 	.word	0x3fd33333
 800d1b4:	20004c2c 	.word	0x20004c2c
 800d1b8:	20004908 	.word	0x20004908

0800d1bc <calculateExpectedDistance>:
 *
 * @param distanceInitiale Initial distance to the point.
 * @param angleDecalage Angular displacement in degrees.
 * @return The calculated distance after applying the angular displacement.
 */
double calculateExpectedDistance(double distanceInitiale, double angleDecalage) {
 800d1bc:	b5b0      	push	{r4, r5, r7, lr}
 800d1be:	b08a      	sub	sp, #40	; 0x28
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6138      	str	r0, [r7, #16]
 800d1c4:	6179      	str	r1, [r7, #20]
 800d1c6:	60ba      	str	r2, [r7, #8]
 800d1c8:	60fb      	str	r3, [r7, #12]
    double angleEnRadians = angleDecalage * 3.14 / 180.0; // Conversion de l'angle en radians, car les fonctions trigonométriques en C utilisent des radians
 800d1ca:	4a2b      	ldr	r2, [pc, #172]	; (800d278 <calculateExpectedDistance+0xbc>)
 800d1cc:	4b2b      	ldr	r3, [pc, #172]	; (800d27c <calculateExpectedDistance+0xc0>)
 800d1ce:	68b8      	ldr	r0, [r7, #8]
 800d1d0:	68f9      	ldr	r1, [r7, #12]
 800d1d2:	f7f4 ffd5 	bl	8002180 <__aeabi_dmul>
 800d1d6:	0002      	movs	r2, r0
 800d1d8:	000b      	movs	r3, r1
 800d1da:	0010      	movs	r0, r2
 800d1dc:	0019      	movs	r1, r3
 800d1de:	2200      	movs	r2, #0
 800d1e0:	4b27      	ldr	r3, [pc, #156]	; (800d280 <calculateExpectedDistance+0xc4>)
 800d1e2:	f7f4 fbd3 	bl	800198c <__aeabi_ddiv>
 800d1e6:	0002      	movs	r2, r0
 800d1e8:	000b      	movs	r3, r1
 800d1ea:	623a      	str	r2, [r7, #32]
 800d1ec:	627b      	str	r3, [r7, #36]	; 0x24
    double nouvelleDistance = sqrt(pow(distanceInitiale, 2) + pow(RAYON, 2) - 
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	2380      	movs	r3, #128	; 0x80
 800d1f2:	05db      	lsls	r3, r3, #23
 800d1f4:	6938      	ldr	r0, [r7, #16]
 800d1f6:	6979      	ldr	r1, [r7, #20]
 800d1f8:	f001 fab2 	bl	800e760 <pow>
 800d1fc:	4a21      	ldr	r2, [pc, #132]	; (800d284 <calculateExpectedDistance+0xc8>)
 800d1fe:	4b22      	ldr	r3, [pc, #136]	; (800d288 <calculateExpectedDistance+0xcc>)
 800d200:	f7f4 f864 	bl	80012cc <__aeabi_dadd>
 800d204:	0002      	movs	r2, r0
 800d206:	000b      	movs	r3, r1
 800d208:	0014      	movs	r4, r2
 800d20a:	001d      	movs	r5, r3
								2 * distanceInitiale * RAYON * cos(angleEnRadians));// Calcul de la distance à laquelle devrait etre le prochain point pour etre un robot
 800d20c:	6938      	ldr	r0, [r7, #16]
 800d20e:	6979      	ldr	r1, [r7, #20]
 800d210:	0002      	movs	r2, r0
 800d212:	000b      	movs	r3, r1
 800d214:	f7f4 f85a 	bl	80012cc <__aeabi_dadd>
 800d218:	0002      	movs	r2, r0
 800d21a:	000b      	movs	r3, r1
 800d21c:	0010      	movs	r0, r2
 800d21e:	0019      	movs	r1, r3
 800d220:	4a1a      	ldr	r2, [pc, #104]	; (800d28c <calculateExpectedDistance+0xd0>)
 800d222:	4b1b      	ldr	r3, [pc, #108]	; (800d290 <calculateExpectedDistance+0xd4>)
 800d224:	f7f4 ffac 	bl	8002180 <__aeabi_dmul>
 800d228:	0002      	movs	r2, r0
 800d22a:	000b      	movs	r3, r1
 800d22c:	603a      	str	r2, [r7, #0]
 800d22e:	607b      	str	r3, [r7, #4]
 800d230:	6a3a      	ldr	r2, [r7, #32]
 800d232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d234:	0010      	movs	r0, r2
 800d236:	0019      	movs	r1, r3
 800d238:	f001 fca6 	bl	800eb88 <cos>
 800d23c:	0002      	movs	r2, r0
 800d23e:	000b      	movs	r3, r1
 800d240:	6838      	ldr	r0, [r7, #0]
 800d242:	6879      	ldr	r1, [r7, #4]
 800d244:	f7f4 ff9c 	bl	8002180 <__aeabi_dmul>
 800d248:	0002      	movs	r2, r0
 800d24a:	000b      	movs	r3, r1
    double nouvelleDistance = sqrt(pow(distanceInitiale, 2) + pow(RAYON, 2) - 
 800d24c:	0020      	movs	r0, r4
 800d24e:	0029      	movs	r1, r5
 800d250:	f7f5 fa58 	bl	8002704 <__aeabi_dsub>
 800d254:	0002      	movs	r2, r0
 800d256:	000b      	movs	r3, r1
 800d258:	0010      	movs	r0, r2
 800d25a:	0019      	movs	r1, r3
 800d25c:	f001 faee 	bl	800e83c <sqrt>
 800d260:	0002      	movs	r2, r0
 800d262:	000b      	movs	r3, r1
 800d264:	61ba      	str	r2, [r7, #24]
 800d266:	61fb      	str	r3, [r7, #28]
																					// en utilisant le théorème des cosinus
	return nouvelleDistance;
 800d268:	69ba      	ldr	r2, [r7, #24]
 800d26a:	69fb      	ldr	r3, [r7, #28]
}
 800d26c:	0010      	movs	r0, r2
 800d26e:	0019      	movs	r1, r3
 800d270:	46bd      	mov	sp, r7
 800d272:	b00a      	add	sp, #40	; 0x28
 800d274:	bdb0      	pop	{r4, r5, r7, pc}
 800d276:	46c0      	nop			; (mov r8, r8)
 800d278:	51eb851f 	.word	0x51eb851f
 800d27c:	40091eb8 	.word	0x40091eb8
 800d280:	40668000 	.word	0x40668000
 800d284:	dd8e90fe 	.word	0xdd8e90fe
 800d288:	3f709ecb 	.word	0x3f709ecb
 800d28c:	a8c154ca 	.word	0xa8c154ca
 800d290:	3fb04ea4 	.word	0x3fb04ea4

0800d294 <getLidarScanData>:
 * lidar scan data structure.
 *
 * @param lidarScanData Pointer to the lidar scan data structure where the data will be stored.
 * @return Returns success if the operation is successful; otherwise, returns an error code.
 */
returncode_t getLidarScanData(lidar_scan_t *lidarScanData) {
 800d294:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d296:	b0cb      	sub	sp, #300	; 0x12c
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = 0;
 800d29c:	241c      	movs	r4, #28
 800d29e:	34ff      	adds	r4, #255	; 0xff
 800d2a0:	193b      	adds	r3, r7, r4
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	701a      	strb	r2, [r3, #0]
	int size = 0;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	228a      	movs	r2, #138	; 0x8a
 800d2aa:	0052      	lsls	r2, r2, #1
 800d2ac:	18ba      	adds	r2, r7, r2
 800d2ae:	6013      	str	r3, [r2, #0]
	uint8_t lidarScanRawData[256];
	status = lidar.uart.rx(lidarScanRawData, 256);
 800d2b0:	4ba2      	ldr	r3, [pc, #648]	; (800d53c <getLidarScanData+0x2a8>)
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	2280      	movs	r2, #128	; 0x80
 800d2b6:	0051      	lsls	r1, r2, #1
 800d2b8:	2214      	movs	r2, #20
 800d2ba:	18ba      	adds	r2, r7, r2
 800d2bc:	0010      	movs	r0, r2
 800d2be:	4798      	blx	r3
 800d2c0:	0002      	movs	r2, r0
 800d2c2:	193b      	adds	r3, r7, r4
 800d2c4:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK) {
 800d2c6:	193b      	adds	r3, r7, r4
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d000      	beq.n	800d2d0 <getLidarScanData+0x3c>
 800d2ce:	e125      	b.n	800d51c <getLidarScanData+0x288>
		if (xSemaphoreTake(sem_uart_read, 100) == pdTRUE) {	// Wait for DMA Notification
 800d2d0:	4b9b      	ldr	r3, [pc, #620]	; (800d540 <getLidarScanData+0x2ac>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	2164      	movs	r1, #100	; 0x64
 800d2d6:	0018      	movs	r0, r3
 800d2d8:	f7fd f8f1 	bl	800a4be <xQueueSemaphoreTake>
 800d2dc:	0003      	movs	r3, r0
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	d000      	beq.n	800d2e4 <getLidarScanData+0x50>
 800d2e2:	e113      	b.n	800d50c <getLidarScanData+0x278>
			//LidarScanStop();
			//printf(COLOR_MAGENTA"*** %s\n", CONVERT_TO_STRING(lidarScanRawData, 256));
			
			int j = 0;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	2292      	movs	r2, #146	; 0x92
 800d2e8:	0052      	lsls	r2, r2, #1
 800d2ea:	18b9      	adds	r1, r7, r2
 800d2ec:	600b      	str	r3, [r1, #0]
			for(j = 0; j < 256; j++) {
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	18ba      	adds	r2, r7, r2
 800d2f2:	6013      	str	r3, [r2, #0]
 800d2f4:	e0f5      	b.n	800d4e2 <getLidarScanData+0x24e>
				if(strncmp(&(lidarScanRawData[j]), (uint8_t[]){0xA5, 0x5A}, 2) == 0) {
 800d2f6:	2414      	movs	r4, #20
 800d2f8:	193a      	adds	r2, r7, r4
 800d2fa:	2692      	movs	r6, #146	; 0x92
 800d2fc:	0076      	lsls	r6, r6, #1
 800d2fe:	19bb      	adds	r3, r7, r6
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	18d0      	adds	r0, r2, r3
 800d304:	4b8f      	ldr	r3, [pc, #572]	; (800d544 <getLidarScanData+0x2b0>)
 800d306:	2594      	movs	r5, #148	; 0x94
 800d308:	006d      	lsls	r5, r5, #1
 800d30a:	195b      	adds	r3, r3, r5
 800d30c:	19db      	adds	r3, r3, r7
 800d30e:	4a8e      	ldr	r2, [pc, #568]	; (800d548 <getLidarScanData+0x2b4>)
 800d310:	8812      	ldrh	r2, [r2, #0]
 800d312:	801a      	strh	r2, [r3, #0]
 800d314:	2310      	movs	r3, #16
 800d316:	18fb      	adds	r3, r7, r3
 800d318:	2202      	movs	r2, #2
 800d31a:	0019      	movs	r1, r3
 800d31c:	f000 fc6a 	bl	800dbf4 <strncmp>
 800d320:	1e03      	subs	r3, r0, #0
 800d322:	d15b      	bne.n	800d3dc <getLidarScanData+0x148>
					printf("main header detected @ %d\n", j);
 800d324:	19bb      	adds	r3, r7, r6
 800d326:	681a      	ldr	r2, [r3, #0]
 800d328:	4b88      	ldr	r3, [pc, #544]	; (800d54c <getLidarScanData+0x2b8>)
 800d32a:	0011      	movs	r1, r2
 800d32c:	0018      	movs	r0, r3
 800d32e:	f000 faf7 	bl	800d920 <iprintf>
					//LOG_LIDAR_DEBUG("main header detected @ %d", j);
					memcpy(lidarScanData->PH, &(lidarScanRawData[HEADER_SIZE]), PH_SIZE);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	193b      	adds	r3, r7, r4
 800d336:	3307      	adds	r3, #7
 800d338:	2202      	movs	r2, #2
 800d33a:	0019      	movs	r1, r3
 800d33c:	f000 fce6 	bl	800dd0c <memcpy>
					memcpy(&(lidarScanData->CT), &(lidarScanRawData[HEADER_SIZE + 2]), CT_SIZE);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	3302      	adds	r3, #2
 800d344:	4a82      	ldr	r2, [pc, #520]	; (800d550 <getLidarScanData+0x2bc>)
 800d346:	1952      	adds	r2, r2, r5
 800d348:	19d2      	adds	r2, r2, r7
 800d34a:	7a52      	ldrb	r2, [r2, #9]
 800d34c:	701a      	strb	r2, [r3, #0]
					memcpy(&(lidarScanData->LSN), &(lidarScanRawData[HEADER_SIZE + 3]), LSN_SIZE);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	3303      	adds	r3, #3
 800d352:	4a7f      	ldr	r2, [pc, #508]	; (800d550 <getLidarScanData+0x2bc>)
 800d354:	1952      	adds	r2, r2, r5
 800d356:	19d2      	adds	r2, r2, r7
 800d358:	7a92      	ldrb	r2, [r2, #10]
 800d35a:	701a      	strb	r2, [r3, #0]
					memcpy(lidarScanData->FSA, &(lidarScanRawData[HEADER_SIZE + 4]), FSA_SIZE);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	1d18      	adds	r0, r3, #4
 800d360:	193b      	adds	r3, r7, r4
 800d362:	330b      	adds	r3, #11
 800d364:	2202      	movs	r2, #2
 800d366:	0019      	movs	r1, r3
 800d368:	f000 fcd0 	bl	800dd0c <memcpy>
					memcpy(lidarScanData->LSA, &(lidarScanRawData[HEADER_SIZE + 6]), LSA_SIZE);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	1d98      	adds	r0, r3, #6
 800d370:	193b      	adds	r3, r7, r4
 800d372:	330d      	adds	r3, #13
 800d374:	2202      	movs	r2, #2
 800d376:	0019      	movs	r1, r3
 800d378:	f000 fcc8 	bl	800dd0c <memcpy>
					memcpy(lidarScanData->CS, &(lidarScanRawData[HEADER_SIZE + 8]), CS_SIZE);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	3308      	adds	r3, #8
 800d380:	0018      	movs	r0, r3
 800d382:	193b      	adds	r3, r7, r4
 800d384:	330f      	adds	r3, #15
 800d386:	2202      	movs	r2, #2
 800d388:	0019      	movs	r1, r3
 800d38a:	f000 fcbf 	bl	800dd0c <memcpy>
					//memcpy(lidarScanData->SI, &(lidarScanRawData[HEADER_SIZE + j + 10]), lidarScanData->LSN);
					for(int k = 0; k < lidarScanData->LSN; k++) {
 800d38e:	2300      	movs	r3, #0
 800d390:	2290      	movs	r2, #144	; 0x90
 800d392:	0052      	lsls	r2, r2, #1
 800d394:	18ba      	adds	r2, r7, r2
 800d396:	6013      	str	r3, [r2, #0]
 800d398:	e016      	b.n	800d3c8 <getLidarScanData+0x134>
						lidarScanData->SI[k] = lidarScanRawData[HEADER_SIZE + k + 10];
 800d39a:	2090      	movs	r0, #144	; 0x90
 800d39c:	0040      	lsls	r0, r0, #1
 800d39e:	183b      	adds	r3, r7, r0
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	3311      	adds	r3, #17
 800d3a4:	4a6a      	ldr	r2, [pc, #424]	; (800d550 <getLidarScanData+0x2bc>)
 800d3a6:	2194      	movs	r1, #148	; 0x94
 800d3a8:	0049      	lsls	r1, r1, #1
 800d3aa:	1852      	adds	r2, r2, r1
 800d3ac:	19d2      	adds	r2, r2, r7
 800d3ae:	5cd1      	ldrb	r1, [r2, r3]
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	183b      	adds	r3, r7, r0
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	18d3      	adds	r3, r2, r3
 800d3b8:	330a      	adds	r3, #10
 800d3ba:	1c0a      	adds	r2, r1, #0
 800d3bc:	701a      	strb	r2, [r3, #0]
					for(int k = 0; k < lidarScanData->LSN; k++) {
 800d3be:	183b      	adds	r3, r7, r0
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	183a      	adds	r2, r7, r0
 800d3c6:	6013      	str	r3, [r2, #0]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	78db      	ldrb	r3, [r3, #3]
 800d3cc:	001a      	movs	r2, r3
 800d3ce:	2390      	movs	r3, #144	; 0x90
 800d3d0:	005b      	lsls	r3, r3, #1
 800d3d2:	18fb      	adds	r3, r7, r3
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	dbdf      	blt.n	800d39a <getLidarScanData+0x106>
					}
					break;
 800d3da:	e089      	b.n	800d4f0 <getLidarScanData+0x25c>
				}
				else if(strncmp(&(lidarScanRawData[j]), (uint8_t[]){0xAA, 0x55}, 2) == 0) {
 800d3dc:	2414      	movs	r4, #20
 800d3de:	193a      	adds	r2, r7, r4
 800d3e0:	2592      	movs	r5, #146	; 0x92
 800d3e2:	006d      	lsls	r5, r5, #1
 800d3e4:	197b      	adds	r3, r7, r5
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	18d0      	adds	r0, r2, r3
 800d3ea:	4b5a      	ldr	r3, [pc, #360]	; (800d554 <getLidarScanData+0x2c0>)
 800d3ec:	2294      	movs	r2, #148	; 0x94
 800d3ee:	0052      	lsls	r2, r2, #1
 800d3f0:	189b      	adds	r3, r3, r2
 800d3f2:	19db      	adds	r3, r3, r7
 800d3f4:	4a58      	ldr	r2, [pc, #352]	; (800d558 <getLidarScanData+0x2c4>)
 800d3f6:	8812      	ldrh	r2, [r2, #0]
 800d3f8:	801a      	strh	r2, [r3, #0]
 800d3fa:	230c      	movs	r3, #12
 800d3fc:	18fb      	adds	r3, r7, r3
 800d3fe:	2202      	movs	r2, #2
 800d400:	0019      	movs	r1, r3
 800d402:	f000 fbf7 	bl	800dbf4 <strncmp>
 800d406:	1e03      	subs	r3, r0, #0
 800d408:	d164      	bne.n	800d4d4 <getLidarScanData+0x240>
					//LOG_LIDAR_DEBUG("header detected @ %d", j);
					memcpy(lidarScanData->PH, &(lidarScanRawData[j]), PH_SIZE);
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	193a      	adds	r2, r7, r4
 800d40e:	197b      	adds	r3, r7, r5
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	18d3      	adds	r3, r2, r3
 800d414:	2202      	movs	r2, #2
 800d416:	0019      	movs	r1, r3
 800d418:	f000 fc78 	bl	800dd0c <memcpy>
					memcpy(&(lidarScanData->CT), &(lidarScanRawData[j + 2]), CT_SIZE);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	3302      	adds	r3, #2
 800d420:	197a      	adds	r2, r7, r5
 800d422:	6812      	ldr	r2, [r2, #0]
 800d424:	3202      	adds	r2, #2
 800d426:	1939      	adds	r1, r7, r4
 800d428:	188a      	adds	r2, r1, r2
 800d42a:	7812      	ldrb	r2, [r2, #0]
 800d42c:	701a      	strb	r2, [r3, #0]
					memcpy(&(lidarScanData->LSN), &(lidarScanRawData[j + 3]), LSN_SIZE);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	3303      	adds	r3, #3
 800d432:	197a      	adds	r2, r7, r5
 800d434:	6812      	ldr	r2, [r2, #0]
 800d436:	3203      	adds	r2, #3
 800d438:	1939      	adds	r1, r7, r4
 800d43a:	188a      	adds	r2, r1, r2
 800d43c:	7812      	ldrb	r2, [r2, #0]
 800d43e:	701a      	strb	r2, [r3, #0]
					memcpy(lidarScanData->FSA, &(lidarScanRawData[j + 4]), FSA_SIZE);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	1d18      	adds	r0, r3, #4
 800d444:	197b      	adds	r3, r7, r5
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	3304      	adds	r3, #4
 800d44a:	193a      	adds	r2, r7, r4
 800d44c:	18d3      	adds	r3, r2, r3
 800d44e:	2202      	movs	r2, #2
 800d450:	0019      	movs	r1, r3
 800d452:	f000 fc5b 	bl	800dd0c <memcpy>
					memcpy(lidarScanData->LSA, &(lidarScanRawData[j + 6]), LSA_SIZE);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	1d98      	adds	r0, r3, #6
 800d45a:	197b      	adds	r3, r7, r5
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	3306      	adds	r3, #6
 800d460:	193a      	adds	r2, r7, r4
 800d462:	18d3      	adds	r3, r2, r3
 800d464:	2202      	movs	r2, #2
 800d466:	0019      	movs	r1, r3
 800d468:	f000 fc50 	bl	800dd0c <memcpy>
					memcpy(lidarScanData->CS, &(lidarScanRawData[j  + 8]), CS_SIZE);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	3308      	adds	r3, #8
 800d470:	0018      	movs	r0, r3
 800d472:	197b      	adds	r3, r7, r5
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	3308      	adds	r3, #8
 800d478:	193a      	adds	r2, r7, r4
 800d47a:	18d3      	adds	r3, r2, r3
 800d47c:	2202      	movs	r2, #2
 800d47e:	0019      	movs	r1, r3
 800d480:	f000 fc44 	bl	800dd0c <memcpy>
					//memcpy(lidarScanData->SI, &(lidarScanRawData[j + 10]), lidarScanData->LSN);
					for(int k = 0; k < lidarScanData->LSN; k++) {
 800d484:	2300      	movs	r3, #0
 800d486:	228e      	movs	r2, #142	; 0x8e
 800d488:	0052      	lsls	r2, r2, #1
 800d48a:	18ba      	adds	r2, r7, r2
 800d48c:	6013      	str	r3, [r2, #0]
 800d48e:	e016      	b.n	800d4be <getLidarScanData+0x22a>
						lidarScanData->SI[k] = lidarScanRawData[k + 10];
 800d490:	208e      	movs	r0, #142	; 0x8e
 800d492:	0040      	lsls	r0, r0, #1
 800d494:	183b      	adds	r3, r7, r0
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	330a      	adds	r3, #10
 800d49a:	4a2d      	ldr	r2, [pc, #180]	; (800d550 <getLidarScanData+0x2bc>)
 800d49c:	2194      	movs	r1, #148	; 0x94
 800d49e:	0049      	lsls	r1, r1, #1
 800d4a0:	1852      	adds	r2, r2, r1
 800d4a2:	19d2      	adds	r2, r2, r7
 800d4a4:	5cd1      	ldrb	r1, [r2, r3]
 800d4a6:	687a      	ldr	r2, [r7, #4]
 800d4a8:	183b      	adds	r3, r7, r0
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	18d3      	adds	r3, r2, r3
 800d4ae:	330a      	adds	r3, #10
 800d4b0:	1c0a      	adds	r2, r1, #0
 800d4b2:	701a      	strb	r2, [r3, #0]
					for(int k = 0; k < lidarScanData->LSN; k++) {
 800d4b4:	183b      	adds	r3, r7, r0
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	183a      	adds	r2, r7, r0
 800d4bc:	6013      	str	r3, [r2, #0]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	78db      	ldrb	r3, [r3, #3]
 800d4c2:	001a      	movs	r2, r3
 800d4c4:	238e      	movs	r3, #142	; 0x8e
 800d4c6:	005b      	lsls	r3, r3, #1
 800d4c8:	18fb      	adds	r3, r7, r3
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	dbdf      	blt.n	800d490 <getLidarScanData+0x1fc>
					}
					break;
 800d4d0:	46c0      	nop			; (mov r8, r8)
					break;
 800d4d2:	e00d      	b.n	800d4f0 <getLidarScanData+0x25c>
			for(j = 0; j < 256; j++) {
 800d4d4:	2292      	movs	r2, #146	; 0x92
 800d4d6:	0052      	lsls	r2, r2, #1
 800d4d8:	18bb      	adds	r3, r7, r2
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	18ba      	adds	r2, r7, r2
 800d4e0:	6013      	str	r3, [r2, #0]
 800d4e2:	2392      	movs	r3, #146	; 0x92
 800d4e4:	005b      	lsls	r3, r3, #1
 800d4e6:	18fb      	adds	r3, r7, r3
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	2bff      	cmp	r3, #255	; 0xff
 800d4ec:	dc00      	bgt.n	800d4f0 <getLidarScanData+0x25c>
 800d4ee:	e702      	b.n	800d2f6 <getLidarScanData+0x62>
				}
			}
			if(j > 255) {
 800d4f0:	2392      	movs	r3, #146	; 0x92
 800d4f2:	005b      	lsls	r3, r3, #1
 800d4f4:	18fb      	adds	r3, r7, r3
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	2bff      	cmp	r3, #255	; 0xff
 800d4fa:	dd1a      	ble.n	800d532 <getLidarScanData+0x29e>
				LOG_LIDAR_WARN("no header detected");
 800d4fc:	4a17      	ldr	r2, [pc, #92]	; (800d55c <getLidarScanData+0x2c8>)
 800d4fe:	4b18      	ldr	r3, [pc, #96]	; (800d560 <getLidarScanData+0x2cc>)
 800d500:	0011      	movs	r1, r2
 800d502:	0018      	movs	r0, r3
 800d504:	f000 fa0c 	bl	800d920 <iprintf>
				return wrongparameter;
 800d508:	2305      	movs	r3, #5
 800d50a:	e013      	b.n	800d534 <getLidarScanData+0x2a0>
			}
		}
		else {
			LOG_LIDAR_WARN("semaphore timeout");
 800d50c:	4a13      	ldr	r2, [pc, #76]	; (800d55c <getLidarScanData+0x2c8>)
 800d50e:	4b15      	ldr	r3, [pc, #84]	; (800d564 <getLidarScanData+0x2d0>)
 800d510:	0011      	movs	r1, r2
 800d512:	0018      	movs	r0, r3
 800d514:	f000 fa04 	bl	800d920 <iprintf>
			return transmission_no_response;
 800d518:	230a      	movs	r3, #10
 800d51a:	e00b      	b.n	800d534 <getLidarScanData+0x2a0>
		}
	}
	else {
		LOG_LIDAR_ERROR("uart Rx error: %d", status);
 800d51c:	231c      	movs	r3, #28
 800d51e:	33ff      	adds	r3, #255	; 0xff
 800d520:	18fb      	adds	r3, r7, r3
 800d522:	781a      	ldrb	r2, [r3, #0]
 800d524:	490d      	ldr	r1, [pc, #52]	; (800d55c <getLidarScanData+0x2c8>)
 800d526:	4b10      	ldr	r3, [pc, #64]	; (800d568 <getLidarScanData+0x2d4>)
 800d528:	0018      	movs	r0, r3
 800d52a:	f000 f9f9 	bl	800d920 <iprintf>
		return transmission_no_response;
 800d52e:	230a      	movs	r3, #10
 800d530:	e000      	b.n	800d534 <getLidarScanData+0x2a0>
	}
	return success;
 800d532:	2300      	movs	r3, #0
}
 800d534:	0018      	movs	r0, r3
 800d536:	46bd      	mov	sp, r7
 800d538:	b04b      	add	sp, #300	; 0x12c
 800d53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d53c:	20004900 	.word	0x20004900
 800d540:	20004c28 	.word	0x20004c28
 800d544:	fffffee8 	.word	0xfffffee8
 800d548:	08010ae4 	.word	0x08010ae4
 800d54c:	08010bb8 	.word	0x08010bb8
 800d550:	fffffeec 	.word	0xfffffeec
 800d554:	fffffee4 	.word	0xfffffee4
 800d558:	08010c70 	.word	0x08010c70
 800d55c:	080110d0 	.word	0x080110d0
 800d560:	08010bd4 	.word	0x08010bd4
 800d564:	08010c08 	.word	0x08010c08
 800d568:	08010c3c 	.word	0x08010c3c

0800d56c <lidarTask>:
 *
 * @note The task runs indefinitely in a loop, continuously monitoring and managing the Lidar device state.
 *
 * @return None.
 */
TaskFunction_t lidarTask(void) {
 800d56c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d56e:	b0a9      	sub	sp, #164	; 0xa4
 800d570:	af02      	add	r7, sp, #8
	lidar_devEUI_t devEUI;
	lidar_scan_t lidarScanData;
	lidar_healthStatus_t healthStatus;


	lidarHandle.state = LIDAR_INIT;
 800d572:	4b73      	ldr	r3, [pc, #460]	; (800d740 <lidarTask+0x1d4>)
 800d574:	2200      	movs	r2, #0
 800d576:	701a      	strb	r2, [r3, #0]
	lidarHandle.lastState = lidarHandle.state;
 800d578:	4b71      	ldr	r3, [pc, #452]	; (800d740 <lidarTask+0x1d4>)
 800d57a:	781a      	ldrb	r2, [r3, #0]
 800d57c:	4b70      	ldr	r3, [pc, #448]	; (800d740 <lidarTask+0x1d4>)
 800d57e:	705a      	strb	r2, [r3, #1]
	lidarHandle.timer = xTimerCreate("Lidar Timer", 100, pdTRUE, NULL, NULL);
 800d580:	4870      	ldr	r0, [pc, #448]	; (800d744 <lidarTask+0x1d8>)
 800d582:	2300      	movs	r3, #0
 800d584:	9300      	str	r3, [sp, #0]
 800d586:	2300      	movs	r3, #0
 800d588:	2201      	movs	r2, #1
 800d58a:	2164      	movs	r1, #100	; 0x64
 800d58c:	f7fe fa0a 	bl	800b9a4 <xTimerCreate>
 800d590:	0002      	movs	r2, r0
 800d592:	4b6b      	ldr	r3, [pc, #428]	; (800d740 <lidarTask+0x1d4>)
 800d594:	605a      	str	r2, [r3, #4]

	while(1) {
		switch (lidarHandle.state) {
 800d596:	4b6a      	ldr	r3, [pc, #424]	; (800d740 <lidarTask+0x1d4>)
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	2b03      	cmp	r3, #3
 800d59c:	d100      	bne.n	800d5a0 <lidarTask+0x34>
 800d59e:	e09b      	b.n	800d6d8 <lidarTask+0x16c>
 800d5a0:	dd00      	ble.n	800d5a4 <lidarTask+0x38>
 800d5a2:	e0b3      	b.n	800d70c <lidarTask+0x1a0>
 800d5a4:	2b02      	cmp	r3, #2
 800d5a6:	d100      	bne.n	800d5aa <lidarTask+0x3e>
 800d5a8:	e0b4      	b.n	800d714 <lidarTask+0x1a8>
 800d5aa:	dd00      	ble.n	800d5ae <lidarTask+0x42>
 800d5ac:	e0ae      	b.n	800d70c <lidarTask+0x1a0>
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d002      	beq.n	800d5b8 <lidarTask+0x4c>
 800d5b2:	2b01      	cmp	r3, #1
 800d5b4:	d02f      	beq.n	800d616 <lidarTask+0xaa>
 800d5b6:	e0a9      	b.n	800d70c <lidarTask+0x1a0>
			
			case LIDAR_INIT: {
				if(xTimerIsTimerActive(lidarHandle.timer) == pdFALSE) {
 800d5b8:	4b61      	ldr	r3, [pc, #388]	; (800d740 <lidarTask+0x1d4>)
 800d5ba:	685b      	ldr	r3, [r3, #4]
 800d5bc:	0018      	movs	r0, r3
 800d5be:	f7fe fcfd 	bl	800bfbc <xTimerIsTimerActive>
 800d5c2:	1e03      	subs	r3, r0, #0
 800d5c4:	d10f      	bne.n	800d5e6 <lidarTask+0x7a>
					xTimerStart(lidarHandle.timer, 0);
 800d5c6:	4b5e      	ldr	r3, [pc, #376]	; (800d740 <lidarTask+0x1d4>)
 800d5c8:	685c      	ldr	r4, [r3, #4]
 800d5ca:	f7fd fc19 	bl	800ae00 <xTaskGetTickCount>
 800d5ce:	0002      	movs	r2, r0
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	9300      	str	r3, [sp, #0]
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	2101      	movs	r1, #1
 800d5d8:	0020      	movs	r0, r4
 800d5da:	f7fe fa39 	bl	800ba50 <xTimerGenericCommand>
					LidarInit();
 800d5de:	f7ff f853 	bl	800c688 <LidarInit>
					lidarRestart();
 800d5e2:	f7ff fa45 	bl	800ca70 <lidarRestart>
				}
				if(LidarGetInformation(&devEUI) == success) {
 800d5e6:	2378      	movs	r3, #120	; 0x78
 800d5e8:	18fb      	adds	r3, r7, r3
 800d5ea:	0018      	movs	r0, r3
 800d5ec:	f7ff f89c 	bl	800c728 <LidarGetInformation>
 800d5f0:	1e03      	subs	r3, r0, #0
 800d5f2:	d109      	bne.n	800d608 <lidarTask+0x9c>
					LOG_LIDAR_INFO(COLOR_GREEN"init lidar successful");
 800d5f4:	4a54      	ldr	r2, [pc, #336]	; (800d748 <lidarTask+0x1dc>)
 800d5f6:	4b55      	ldr	r3, [pc, #340]	; (800d74c <lidarTask+0x1e0>)
 800d5f8:	0011      	movs	r1, r2
 800d5fa:	0018      	movs	r0, r3
 800d5fc:	f000 f990 	bl	800d920 <iprintf>
					//LOG_LIDAR_INFO("model: %02X, firmware: %04X, hardware: %02X, serial: %d", devEUI.ModelNumber, devEUI.FirmWareVersion, devEUI.HardWareVersion, devEUI.SerialNumber);
					lidarHandle.state = LIDAR_SCANNING;
 800d600:	4b4f      	ldr	r3, [pc, #316]	; (800d740 <lidarTask+0x1d4>)
 800d602:	2201      	movs	r2, #1
 800d604:	701a      	strb	r2, [r3, #0]
				}
				else {
					LOG_LIDAR_ERROR("lidar bad information");
				}
				break;
 800d606:	e086      	b.n	800d716 <lidarTask+0x1aa>
					LOG_LIDAR_ERROR("lidar bad information");
 800d608:	4a4f      	ldr	r2, [pc, #316]	; (800d748 <lidarTask+0x1dc>)
 800d60a:	4b51      	ldr	r3, [pc, #324]	; (800d750 <lidarTask+0x1e4>)
 800d60c:	0011      	movs	r1, r2
 800d60e:	0018      	movs	r0, r3
 800d610:	f000 f986 	bl	800d920 <iprintf>
				break;
 800d614:	e07f      	b.n	800d716 <lidarTask+0x1aa>
			}

			case LIDAR_SCANNING: {
				if(xTimerIsTimerActive(lidarHandle.timer) == pdFALSE) {
 800d616:	4b4a      	ldr	r3, [pc, #296]	; (800d740 <lidarTask+0x1d4>)
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	0018      	movs	r0, r3
 800d61c:	f7fe fcce 	bl	800bfbc <xTimerIsTimerActive>
 800d620:	1e03      	subs	r3, r0, #0
 800d622:	d11c      	bne.n	800d65e <lidarTask+0xf2>
					xTimerStart(lidarHandle.timer, 0);
 800d624:	4b46      	ldr	r3, [pc, #280]	; (800d740 <lidarTask+0x1d4>)
 800d626:	685c      	ldr	r4, [r3, #4]
 800d628:	f7fd fbea 	bl	800ae00 <xTaskGetTickCount>
 800d62c:	0002      	movs	r2, r0
 800d62e:	2300      	movs	r3, #0
 800d630:	9300      	str	r3, [sp, #0]
 800d632:	2300      	movs	r3, #0
 800d634:	2101      	movs	r1, #1
 800d636:	0020      	movs	r0, r4
 800d638:	f7fe fa0a 	bl	800ba50 <xTimerGenericCommand>
					while(LidarScanStart() != success) {
 800d63c:	e005      	b.n	800d64a <lidarTask+0xde>
						LOG_LIDAR_ERROR("cannot start scan");
 800d63e:	4a42      	ldr	r2, [pc, #264]	; (800d748 <lidarTask+0x1dc>)
 800d640:	4b44      	ldr	r3, [pc, #272]	; (800d754 <lidarTask+0x1e8>)
 800d642:	0011      	movs	r1, r2
 800d644:	0018      	movs	r0, r3
 800d646:	f000 f96b 	bl	800d920 <iprintf>
					while(LidarScanStart() != success) {
 800d64a:	f7ff f8ff 	bl	800c84c <LidarScanStart>
 800d64e:	1e03      	subs	r3, r0, #0
 800d650:	d1f5      	bne.n	800d63e <lidarTask+0xd2>
					}
					LOG_LIDAR_INFO("scan started");
 800d652:	4a3d      	ldr	r2, [pc, #244]	; (800d748 <lidarTask+0x1dc>)
 800d654:	4b40      	ldr	r3, [pc, #256]	; (800d758 <lidarTask+0x1ec>)
 800d656:	0011      	movs	r1, r2
 800d658:	0018      	movs	r0, r3
 800d65a:	f000 f961 	bl	800d920 <iprintf>
				}
				status = getLidarScanData(&lidarScanData);
 800d65e:	2597      	movs	r5, #151	; 0x97
 800d660:	197c      	adds	r4, r7, r5
 800d662:	2308      	movs	r3, #8
 800d664:	18fb      	adds	r3, r7, r3
 800d666:	0018      	movs	r0, r3
 800d668:	f7ff fe14 	bl	800d294 <getLidarScanData>
 800d66c:	0003      	movs	r3, r0
 800d66e:	7023      	strb	r3, [r4, #0]
				if(status != success) {
 800d670:	197b      	adds	r3, r7, r5
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d003      	beq.n	800d680 <lidarTask+0x114>
					lidarHandle.state = LIDAR_ERROR;
 800d678:	4b31      	ldr	r3, [pc, #196]	; (800d740 <lidarTask+0x1d4>)
 800d67a:	2203      	movs	r2, #3
 800d67c:	701a      	strb	r2, [r3, #0]
					break;
 800d67e:	e04a      	b.n	800d716 <lidarTask+0x1aa>
				}
				if(checkCS(&lidarScanData)){
 800d680:	2608      	movs	r6, #8
 800d682:	19bb      	adds	r3, r7, r6
 800d684:	0018      	movs	r0, r3
 800d686:	f7ff fa25 	bl	800cad4 <checkCS>
 800d68a:	1e03      	subs	r3, r0, #0
 800d68c:	d012      	beq.n	800d6b4 <lidarTask+0x148>
					status = convertSample(&lidarScanData);
 800d68e:	2597      	movs	r5, #151	; 0x97
 800d690:	197c      	adds	r4, r7, r5
 800d692:	19bb      	adds	r3, r7, r6
 800d694:	0018      	movs	r0, r3
 800d696:	f7ff fa93 	bl	800cbc0 <convertSample>
 800d69a:	0003      	movs	r3, r0
 800d69c:	7023      	strb	r3, [r4, #0]
					if(status != success) {
 800d69e:	197b      	adds	r3, r7, r5
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d006      	beq.n	800d6b4 <lidarTask+0x148>
						LOG_LIDAR_WARN("convert sample failed: %d", status);
 800d6a6:	197b      	adds	r3, r7, r5
 800d6a8:	781a      	ldrb	r2, [r3, #0]
 800d6aa:	4927      	ldr	r1, [pc, #156]	; (800d748 <lidarTask+0x1dc>)
 800d6ac:	4b2b      	ldr	r3, [pc, #172]	; (800d75c <lidarTask+0x1f0>)
 800d6ae:	0018      	movs	r0, r3
 800d6b0:	f000 f936 	bl	800d920 <iprintf>
					}
				}
				
				if(getMainState() == MAIN_CAT) {
 800d6b4:	f7f6 f824 	bl	8003700 <getMainState>
 800d6b8:	0003      	movs	r3, r0
 800d6ba:	2b01      	cmp	r3, #1
 800d6bc:	d106      	bne.n	800d6cc <lidarTask+0x160>
					position_t *position = whereIsNearestRobot(); 
 800d6be:	f7ff fbe3 	bl	800ce88 <whereIsNearestRobot>
 800d6c2:	0003      	movs	r3, r0
 800d6c4:	2290      	movs	r2, #144	; 0x90
 800d6c6:	18ba      	adds	r2, r7, r2
 800d6c8:	6013      	str	r3, [r2, #0]
				else if (getMainState() == MAIN_MOUSE){
					//calculateOptimalDirection(); // TODO
				}
			}
			case LIDAR_STANDBY: {
				break;
 800d6ca:	e023      	b.n	800d714 <lidarTask+0x1a8>
				else if (getMainState() == MAIN_MOUSE){
 800d6cc:	f7f6 f818 	bl	8003700 <getMainState>
				break;
 800d6d0:	e020      	b.n	800d714 <lidarTask+0x1a8>
			}
			case LIDAR_ERROR : {
				while(LidarScanStop() != success) {
					osDelay(1);
 800d6d2:	2001      	movs	r0, #1
 800d6d4:	f7fc fb3b 	bl	8009d4e <osDelay>
				while(LidarScanStop() != success) {
 800d6d8:	f7ff f8f8 	bl	800c8cc <LidarScanStop>
 800d6dc:	1e03      	subs	r3, r0, #0
 800d6de:	d1f8      	bne.n	800d6d2 <lidarTask+0x166>
				}
				status = LidarHealthStatus(&healthStatus);
 800d6e0:	2397      	movs	r3, #151	; 0x97
 800d6e2:	18fc      	adds	r4, r7, r3
 800d6e4:	1d3b      	adds	r3, r7, #4
 800d6e6:	0018      	movs	r0, r3
 800d6e8:	f7ff f922 	bl	800c930 <LidarHealthStatus>
 800d6ec:	0003      	movs	r3, r0
 800d6ee:	7023      	strb	r3, [r4, #0]
				if(healthStatus.StatusCode == 2) {
 800d6f0:	1d3b      	adds	r3, r7, #4
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	2b02      	cmp	r3, #2
 800d6f6:	d105      	bne.n	800d704 <lidarTask+0x198>
					lidarRestart();
 800d6f8:	f7ff f9ba 	bl	800ca70 <lidarRestart>
					lidarHandle.state = LIDAR_INIT;
 800d6fc:	4b10      	ldr	r3, [pc, #64]	; (800d740 <lidarTask+0x1d4>)
 800d6fe:	2200      	movs	r2, #0
 800d700:	701a      	strb	r2, [r3, #0]
				}
				else {
					lidarHandle.state = LIDAR_SCANNING;
				}
				break;
 800d702:	e008      	b.n	800d716 <lidarTask+0x1aa>
					lidarHandle.state = LIDAR_SCANNING;
 800d704:	4b0e      	ldr	r3, [pc, #56]	; (800d740 <lidarTask+0x1d4>)
 800d706:	2201      	movs	r2, #1
 800d708:	701a      	strb	r2, [r3, #0]
				break;
 800d70a:	e004      	b.n	800d716 <lidarTask+0x1aa>
			}
			default:
				lidarHandle.state = LIDAR_INIT;
 800d70c:	4b0c      	ldr	r3, [pc, #48]	; (800d740 <lidarTask+0x1d4>)
 800d70e:	2200      	movs	r2, #0
 800d710:	701a      	strb	r2, [r3, #0]
				break;
 800d712:	e000      	b.n	800d716 <lidarTask+0x1aa>
				break;
 800d714:	46c0      	nop			; (mov r8, r8)
		}
		if(lidarHandle.lastState != lidarHandle.state) {
 800d716:	4b0a      	ldr	r3, [pc, #40]	; (800d740 <lidarTask+0x1d4>)
 800d718:	785a      	ldrb	r2, [r3, #1]
 800d71a:	4b09      	ldr	r3, [pc, #36]	; (800d740 <lidarTask+0x1d4>)
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	429a      	cmp	r2, r3
 800d720:	d100      	bne.n	800d724 <lidarTask+0x1b8>
 800d722:	e738      	b.n	800d596 <lidarTask+0x2a>
			xTimerStop(lidarHandle.timer, 0);
 800d724:	4b06      	ldr	r3, [pc, #24]	; (800d740 <lidarTask+0x1d4>)
 800d726:	6858      	ldr	r0, [r3, #4]
 800d728:	2300      	movs	r3, #0
 800d72a:	9300      	str	r3, [sp, #0]
 800d72c:	2300      	movs	r3, #0
 800d72e:	2200      	movs	r2, #0
 800d730:	2103      	movs	r1, #3
 800d732:	f7fe f98d 	bl	800ba50 <xTimerGenericCommand>
			lidarHandle.lastState = lidarHandle.state;
 800d736:	4b02      	ldr	r3, [pc, #8]	; (800d740 <lidarTask+0x1d4>)
 800d738:	781a      	ldrb	r2, [r3, #0]
 800d73a:	4b01      	ldr	r3, [pc, #4]	; (800d740 <lidarTask+0x1d4>)
 800d73c:	705a      	strb	r2, [r3, #1]
		switch (lidarHandle.state) {
 800d73e:	e72a      	b.n	800d596 <lidarTask+0x2a>
 800d740:	20004c38 	.word	0x20004c38
 800d744:	08010c74 	.word	0x08010c74
 800d748:	080110e4 	.word	0x080110e4
 800d74c:	08010c80 	.word	0x08010c80
 800d750:	08010cc0 	.word	0x08010cc0
 800d754:	08010cf8 	.word	0x08010cf8
 800d758:	08010d2c 	.word	0x08010d2c
 800d75c:	08010d5c 	.word	0x08010d5c

0800d760 <createLidarTask>:
 *
 * @see lidarTask
 *
 * @return None.
 */
void createLidarTask(void) {
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af02      	add	r7, sp, #8
	if (xTaskCreate(lidarTask, "Lidar", TASK_LIDAR_STACK_DEPTH, NULL, TASK_LIDAR_PRIORITY, &h_task_lidar) != pdPASS) {
 800d766:	2380      	movs	r3, #128	; 0x80
 800d768:	009a      	lsls	r2, r3, #2
 800d76a:	490e      	ldr	r1, [pc, #56]	; (800d7a4 <createLidarTask+0x44>)
 800d76c:	480e      	ldr	r0, [pc, #56]	; (800d7a8 <createLidarTask+0x48>)
 800d76e:	4b0f      	ldr	r3, [pc, #60]	; (800d7ac <createLidarTask+0x4c>)
 800d770:	9301      	str	r3, [sp, #4]
 800d772:	2301      	movs	r3, #1
 800d774:	9300      	str	r3, [sp, #0]
 800d776:	2300      	movs	r3, #0
 800d778:	f7fd f909 	bl	800a98e <xTaskCreate>
 800d77c:	0003      	movs	r3, r0
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d006      	beq.n	800d790 <createLidarTask+0x30>
		LOG_LIDAR_ERROR("Error creating task lidar\r\n");
 800d782:	4a0b      	ldr	r2, [pc, #44]	; (800d7b0 <createLidarTask+0x50>)
 800d784:	4b0b      	ldr	r3, [pc, #44]	; (800d7b4 <createLidarTask+0x54>)
 800d786:	0011      	movs	r1, r2
 800d788:	0018      	movs	r0, r3
 800d78a:	f000 f8c9 	bl	800d920 <iprintf>
	}
	else {
		LOG_LIDAR_DEBUG(COLOR_GREEN"Lidar task create");
	}
}
 800d78e:	e005      	b.n	800d79c <createLidarTask+0x3c>
		LOG_LIDAR_DEBUG(COLOR_GREEN"Lidar task create");
 800d790:	4a07      	ldr	r2, [pc, #28]	; (800d7b0 <createLidarTask+0x50>)
 800d792:	4b09      	ldr	r3, [pc, #36]	; (800d7b8 <createLidarTask+0x58>)
 800d794:	0011      	movs	r1, r2
 800d796:	0018      	movs	r0, r3
 800d798:	f000 f8c2 	bl	800d920 <iprintf>
}
 800d79c:	46c0      	nop			; (mov r8, r8)
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}
 800d7a2:	46c0      	nop			; (mov r8, r8)
 800d7a4:	08010d98 	.word	0x08010d98
 800d7a8:	0800d56d 	.word	0x0800d56d
 800d7ac:	20004c34 	.word	0x20004c34
 800d7b0:	080110f0 	.word	0x080110f0
 800d7b4:	08010da0 	.word	0x08010da0
 800d7b8:	08010de0 	.word	0x08010de0

0800d7bc <std>:
 800d7bc:	2300      	movs	r3, #0
 800d7be:	b510      	push	{r4, lr}
 800d7c0:	0004      	movs	r4, r0
 800d7c2:	6003      	str	r3, [r0, #0]
 800d7c4:	6043      	str	r3, [r0, #4]
 800d7c6:	6083      	str	r3, [r0, #8]
 800d7c8:	8181      	strh	r1, [r0, #12]
 800d7ca:	6643      	str	r3, [r0, #100]	; 0x64
 800d7cc:	0019      	movs	r1, r3
 800d7ce:	81c2      	strh	r2, [r0, #14]
 800d7d0:	6103      	str	r3, [r0, #16]
 800d7d2:	6143      	str	r3, [r0, #20]
 800d7d4:	6183      	str	r3, [r0, #24]
 800d7d6:	2208      	movs	r2, #8
 800d7d8:	305c      	adds	r0, #92	; 0x5c
 800d7da:	f000 fa03 	bl	800dbe4 <memset>
 800d7de:	4b05      	ldr	r3, [pc, #20]	; (800d7f4 <std+0x38>)
 800d7e0:	6224      	str	r4, [r4, #32]
 800d7e2:	6263      	str	r3, [r4, #36]	; 0x24
 800d7e4:	4b04      	ldr	r3, [pc, #16]	; (800d7f8 <std+0x3c>)
 800d7e6:	62a3      	str	r3, [r4, #40]	; 0x28
 800d7e8:	4b04      	ldr	r3, [pc, #16]	; (800d7fc <std+0x40>)
 800d7ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d7ec:	4b04      	ldr	r3, [pc, #16]	; (800d800 <std+0x44>)
 800d7ee:	6323      	str	r3, [r4, #48]	; 0x30
 800d7f0:	bd10      	pop	{r4, pc}
 800d7f2:	46c0      	nop			; (mov r8, r8)
 800d7f4:	0800da01 	.word	0x0800da01
 800d7f8:	0800da29 	.word	0x0800da29
 800d7fc:	0800da61 	.word	0x0800da61
 800d800:	0800da8d 	.word	0x0800da8d

0800d804 <stdio_exit_handler>:
 800d804:	b510      	push	{r4, lr}
 800d806:	4a03      	ldr	r2, [pc, #12]	; (800d814 <stdio_exit_handler+0x10>)
 800d808:	4903      	ldr	r1, [pc, #12]	; (800d818 <stdio_exit_handler+0x14>)
 800d80a:	4804      	ldr	r0, [pc, #16]	; (800d81c <stdio_exit_handler+0x18>)
 800d80c:	f000 f86c 	bl	800d8e8 <_fwalk_sglue>
 800d810:	bd10      	pop	{r4, pc}
 800d812:	46c0      	nop			; (mov r8, r8)
 800d814:	20000038 	.word	0x20000038
 800d818:	0800e5b9 	.word	0x0800e5b9
 800d81c:	20000044 	.word	0x20000044

0800d820 <cleanup_stdio>:
 800d820:	6841      	ldr	r1, [r0, #4]
 800d822:	4b0b      	ldr	r3, [pc, #44]	; (800d850 <cleanup_stdio+0x30>)
 800d824:	b510      	push	{r4, lr}
 800d826:	0004      	movs	r4, r0
 800d828:	4299      	cmp	r1, r3
 800d82a:	d001      	beq.n	800d830 <cleanup_stdio+0x10>
 800d82c:	f000 fec4 	bl	800e5b8 <_fflush_r>
 800d830:	68a1      	ldr	r1, [r4, #8]
 800d832:	4b08      	ldr	r3, [pc, #32]	; (800d854 <cleanup_stdio+0x34>)
 800d834:	4299      	cmp	r1, r3
 800d836:	d002      	beq.n	800d83e <cleanup_stdio+0x1e>
 800d838:	0020      	movs	r0, r4
 800d83a:	f000 febd 	bl	800e5b8 <_fflush_r>
 800d83e:	68e1      	ldr	r1, [r4, #12]
 800d840:	4b05      	ldr	r3, [pc, #20]	; (800d858 <cleanup_stdio+0x38>)
 800d842:	4299      	cmp	r1, r3
 800d844:	d002      	beq.n	800d84c <cleanup_stdio+0x2c>
 800d846:	0020      	movs	r0, r4
 800d848:	f000 feb6 	bl	800e5b8 <_fflush_r>
 800d84c:	bd10      	pop	{r4, pc}
 800d84e:	46c0      	nop			; (mov r8, r8)
 800d850:	20004c40 	.word	0x20004c40
 800d854:	20004ca8 	.word	0x20004ca8
 800d858:	20004d10 	.word	0x20004d10

0800d85c <global_stdio_init.part.0>:
 800d85c:	b510      	push	{r4, lr}
 800d85e:	4b09      	ldr	r3, [pc, #36]	; (800d884 <global_stdio_init.part.0+0x28>)
 800d860:	4a09      	ldr	r2, [pc, #36]	; (800d888 <global_stdio_init.part.0+0x2c>)
 800d862:	2104      	movs	r1, #4
 800d864:	601a      	str	r2, [r3, #0]
 800d866:	4809      	ldr	r0, [pc, #36]	; (800d88c <global_stdio_init.part.0+0x30>)
 800d868:	2200      	movs	r2, #0
 800d86a:	f7ff ffa7 	bl	800d7bc <std>
 800d86e:	2201      	movs	r2, #1
 800d870:	2109      	movs	r1, #9
 800d872:	4807      	ldr	r0, [pc, #28]	; (800d890 <global_stdio_init.part.0+0x34>)
 800d874:	f7ff ffa2 	bl	800d7bc <std>
 800d878:	2202      	movs	r2, #2
 800d87a:	2112      	movs	r1, #18
 800d87c:	4805      	ldr	r0, [pc, #20]	; (800d894 <global_stdio_init.part.0+0x38>)
 800d87e:	f7ff ff9d 	bl	800d7bc <std>
 800d882:	bd10      	pop	{r4, pc}
 800d884:	20004d78 	.word	0x20004d78
 800d888:	0800d805 	.word	0x0800d805
 800d88c:	20004c40 	.word	0x20004c40
 800d890:	20004ca8 	.word	0x20004ca8
 800d894:	20004d10 	.word	0x20004d10

0800d898 <__sfp_lock_acquire>:
 800d898:	b510      	push	{r4, lr}
 800d89a:	4802      	ldr	r0, [pc, #8]	; (800d8a4 <__sfp_lock_acquire+0xc>)
 800d89c:	f000 fa34 	bl	800dd08 <__retarget_lock_acquire_recursive>
 800d8a0:	bd10      	pop	{r4, pc}
 800d8a2:	46c0      	nop			; (mov r8, r8)
 800d8a4:	20004d81 	.word	0x20004d81

0800d8a8 <__sfp_lock_release>:
 800d8a8:	b510      	push	{r4, lr}
 800d8aa:	4802      	ldr	r0, [pc, #8]	; (800d8b4 <__sfp_lock_release+0xc>)
 800d8ac:	f000 fa2d 	bl	800dd0a <__retarget_lock_release_recursive>
 800d8b0:	bd10      	pop	{r4, pc}
 800d8b2:	46c0      	nop			; (mov r8, r8)
 800d8b4:	20004d81 	.word	0x20004d81

0800d8b8 <__sinit>:
 800d8b8:	b510      	push	{r4, lr}
 800d8ba:	0004      	movs	r4, r0
 800d8bc:	f7ff ffec 	bl	800d898 <__sfp_lock_acquire>
 800d8c0:	6a23      	ldr	r3, [r4, #32]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d002      	beq.n	800d8cc <__sinit+0x14>
 800d8c6:	f7ff ffef 	bl	800d8a8 <__sfp_lock_release>
 800d8ca:	bd10      	pop	{r4, pc}
 800d8cc:	4b04      	ldr	r3, [pc, #16]	; (800d8e0 <__sinit+0x28>)
 800d8ce:	6223      	str	r3, [r4, #32]
 800d8d0:	4b04      	ldr	r3, [pc, #16]	; (800d8e4 <__sinit+0x2c>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d1f6      	bne.n	800d8c6 <__sinit+0xe>
 800d8d8:	f7ff ffc0 	bl	800d85c <global_stdio_init.part.0>
 800d8dc:	e7f3      	b.n	800d8c6 <__sinit+0xe>
 800d8de:	46c0      	nop			; (mov r8, r8)
 800d8e0:	0800d821 	.word	0x0800d821
 800d8e4:	20004d78 	.word	0x20004d78

0800d8e8 <_fwalk_sglue>:
 800d8e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8ea:	0014      	movs	r4, r2
 800d8ec:	2600      	movs	r6, #0
 800d8ee:	9000      	str	r0, [sp, #0]
 800d8f0:	9101      	str	r1, [sp, #4]
 800d8f2:	68a5      	ldr	r5, [r4, #8]
 800d8f4:	6867      	ldr	r7, [r4, #4]
 800d8f6:	3f01      	subs	r7, #1
 800d8f8:	d504      	bpl.n	800d904 <_fwalk_sglue+0x1c>
 800d8fa:	6824      	ldr	r4, [r4, #0]
 800d8fc:	2c00      	cmp	r4, #0
 800d8fe:	d1f8      	bne.n	800d8f2 <_fwalk_sglue+0xa>
 800d900:	0030      	movs	r0, r6
 800d902:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d904:	89ab      	ldrh	r3, [r5, #12]
 800d906:	2b01      	cmp	r3, #1
 800d908:	d908      	bls.n	800d91c <_fwalk_sglue+0x34>
 800d90a:	220e      	movs	r2, #14
 800d90c:	5eab      	ldrsh	r3, [r5, r2]
 800d90e:	3301      	adds	r3, #1
 800d910:	d004      	beq.n	800d91c <_fwalk_sglue+0x34>
 800d912:	0029      	movs	r1, r5
 800d914:	9800      	ldr	r0, [sp, #0]
 800d916:	9b01      	ldr	r3, [sp, #4]
 800d918:	4798      	blx	r3
 800d91a:	4306      	orrs	r6, r0
 800d91c:	3568      	adds	r5, #104	; 0x68
 800d91e:	e7ea      	b.n	800d8f6 <_fwalk_sglue+0xe>

0800d920 <iprintf>:
 800d920:	b40f      	push	{r0, r1, r2, r3}
 800d922:	b507      	push	{r0, r1, r2, lr}
 800d924:	4905      	ldr	r1, [pc, #20]	; (800d93c <iprintf+0x1c>)
 800d926:	ab04      	add	r3, sp, #16
 800d928:	6808      	ldr	r0, [r1, #0]
 800d92a:	cb04      	ldmia	r3!, {r2}
 800d92c:	6881      	ldr	r1, [r0, #8]
 800d92e:	9301      	str	r3, [sp, #4]
 800d930:	f000 fb1c 	bl	800df6c <_vfiprintf_r>
 800d934:	b003      	add	sp, #12
 800d936:	bc08      	pop	{r3}
 800d938:	b004      	add	sp, #16
 800d93a:	4718      	bx	r3
 800d93c:	20000090 	.word	0x20000090

0800d940 <_puts_r>:
 800d940:	6a03      	ldr	r3, [r0, #32]
 800d942:	b570      	push	{r4, r5, r6, lr}
 800d944:	0005      	movs	r5, r0
 800d946:	000e      	movs	r6, r1
 800d948:	6884      	ldr	r4, [r0, #8]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d101      	bne.n	800d952 <_puts_r+0x12>
 800d94e:	f7ff ffb3 	bl	800d8b8 <__sinit>
 800d952:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d954:	07db      	lsls	r3, r3, #31
 800d956:	d405      	bmi.n	800d964 <_puts_r+0x24>
 800d958:	89a3      	ldrh	r3, [r4, #12]
 800d95a:	059b      	lsls	r3, r3, #22
 800d95c:	d402      	bmi.n	800d964 <_puts_r+0x24>
 800d95e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d960:	f000 f9d2 	bl	800dd08 <__retarget_lock_acquire_recursive>
 800d964:	89a3      	ldrh	r3, [r4, #12]
 800d966:	071b      	lsls	r3, r3, #28
 800d968:	d502      	bpl.n	800d970 <_puts_r+0x30>
 800d96a:	6923      	ldr	r3, [r4, #16]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d11f      	bne.n	800d9b0 <_puts_r+0x70>
 800d970:	0021      	movs	r1, r4
 800d972:	0028      	movs	r0, r5
 800d974:	f000 f8d2 	bl	800db1c <__swsetup_r>
 800d978:	2800      	cmp	r0, #0
 800d97a:	d019      	beq.n	800d9b0 <_puts_r+0x70>
 800d97c:	2501      	movs	r5, #1
 800d97e:	426d      	negs	r5, r5
 800d980:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d982:	07db      	lsls	r3, r3, #31
 800d984:	d405      	bmi.n	800d992 <_puts_r+0x52>
 800d986:	89a3      	ldrh	r3, [r4, #12]
 800d988:	059b      	lsls	r3, r3, #22
 800d98a:	d402      	bmi.n	800d992 <_puts_r+0x52>
 800d98c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d98e:	f000 f9bc 	bl	800dd0a <__retarget_lock_release_recursive>
 800d992:	0028      	movs	r0, r5
 800d994:	bd70      	pop	{r4, r5, r6, pc}
 800d996:	3601      	adds	r6, #1
 800d998:	60a3      	str	r3, [r4, #8]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	da04      	bge.n	800d9a8 <_puts_r+0x68>
 800d99e:	69a2      	ldr	r2, [r4, #24]
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	dc16      	bgt.n	800d9d2 <_puts_r+0x92>
 800d9a4:	290a      	cmp	r1, #10
 800d9a6:	d014      	beq.n	800d9d2 <_puts_r+0x92>
 800d9a8:	6823      	ldr	r3, [r4, #0]
 800d9aa:	1c5a      	adds	r2, r3, #1
 800d9ac:	6022      	str	r2, [r4, #0]
 800d9ae:	7019      	strb	r1, [r3, #0]
 800d9b0:	68a3      	ldr	r3, [r4, #8]
 800d9b2:	7831      	ldrb	r1, [r6, #0]
 800d9b4:	3b01      	subs	r3, #1
 800d9b6:	2900      	cmp	r1, #0
 800d9b8:	d1ed      	bne.n	800d996 <_puts_r+0x56>
 800d9ba:	60a3      	str	r3, [r4, #8]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	da0f      	bge.n	800d9e0 <_puts_r+0xa0>
 800d9c0:	0028      	movs	r0, r5
 800d9c2:	0022      	movs	r2, r4
 800d9c4:	310a      	adds	r1, #10
 800d9c6:	f000 f867 	bl	800da98 <__swbuf_r>
 800d9ca:	250a      	movs	r5, #10
 800d9cc:	3001      	adds	r0, #1
 800d9ce:	d1d7      	bne.n	800d980 <_puts_r+0x40>
 800d9d0:	e7d4      	b.n	800d97c <_puts_r+0x3c>
 800d9d2:	0022      	movs	r2, r4
 800d9d4:	0028      	movs	r0, r5
 800d9d6:	f000 f85f 	bl	800da98 <__swbuf_r>
 800d9da:	3001      	adds	r0, #1
 800d9dc:	d1e8      	bne.n	800d9b0 <_puts_r+0x70>
 800d9de:	e7cd      	b.n	800d97c <_puts_r+0x3c>
 800d9e0:	250a      	movs	r5, #10
 800d9e2:	6823      	ldr	r3, [r4, #0]
 800d9e4:	1c5a      	adds	r2, r3, #1
 800d9e6:	6022      	str	r2, [r4, #0]
 800d9e8:	701d      	strb	r5, [r3, #0]
 800d9ea:	e7c9      	b.n	800d980 <_puts_r+0x40>

0800d9ec <puts>:
 800d9ec:	b510      	push	{r4, lr}
 800d9ee:	4b03      	ldr	r3, [pc, #12]	; (800d9fc <puts+0x10>)
 800d9f0:	0001      	movs	r1, r0
 800d9f2:	6818      	ldr	r0, [r3, #0]
 800d9f4:	f7ff ffa4 	bl	800d940 <_puts_r>
 800d9f8:	bd10      	pop	{r4, pc}
 800d9fa:	46c0      	nop			; (mov r8, r8)
 800d9fc:	20000090 	.word	0x20000090

0800da00 <__sread>:
 800da00:	b570      	push	{r4, r5, r6, lr}
 800da02:	000c      	movs	r4, r1
 800da04:	250e      	movs	r5, #14
 800da06:	5f49      	ldrsh	r1, [r1, r5]
 800da08:	f000 f92c 	bl	800dc64 <_read_r>
 800da0c:	2800      	cmp	r0, #0
 800da0e:	db03      	blt.n	800da18 <__sread+0x18>
 800da10:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800da12:	181b      	adds	r3, r3, r0
 800da14:	6563      	str	r3, [r4, #84]	; 0x54
 800da16:	bd70      	pop	{r4, r5, r6, pc}
 800da18:	89a3      	ldrh	r3, [r4, #12]
 800da1a:	4a02      	ldr	r2, [pc, #8]	; (800da24 <__sread+0x24>)
 800da1c:	4013      	ands	r3, r2
 800da1e:	81a3      	strh	r3, [r4, #12]
 800da20:	e7f9      	b.n	800da16 <__sread+0x16>
 800da22:	46c0      	nop			; (mov r8, r8)
 800da24:	ffffefff 	.word	0xffffefff

0800da28 <__swrite>:
 800da28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da2a:	001f      	movs	r7, r3
 800da2c:	898b      	ldrh	r3, [r1, #12]
 800da2e:	0005      	movs	r5, r0
 800da30:	000c      	movs	r4, r1
 800da32:	0016      	movs	r6, r2
 800da34:	05db      	lsls	r3, r3, #23
 800da36:	d505      	bpl.n	800da44 <__swrite+0x1c>
 800da38:	230e      	movs	r3, #14
 800da3a:	5ec9      	ldrsh	r1, [r1, r3]
 800da3c:	2200      	movs	r2, #0
 800da3e:	2302      	movs	r3, #2
 800da40:	f000 f8fc 	bl	800dc3c <_lseek_r>
 800da44:	89a3      	ldrh	r3, [r4, #12]
 800da46:	4a05      	ldr	r2, [pc, #20]	; (800da5c <__swrite+0x34>)
 800da48:	0028      	movs	r0, r5
 800da4a:	4013      	ands	r3, r2
 800da4c:	81a3      	strh	r3, [r4, #12]
 800da4e:	0032      	movs	r2, r6
 800da50:	230e      	movs	r3, #14
 800da52:	5ee1      	ldrsh	r1, [r4, r3]
 800da54:	003b      	movs	r3, r7
 800da56:	f000 f919 	bl	800dc8c <_write_r>
 800da5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da5c:	ffffefff 	.word	0xffffefff

0800da60 <__sseek>:
 800da60:	b570      	push	{r4, r5, r6, lr}
 800da62:	000c      	movs	r4, r1
 800da64:	250e      	movs	r5, #14
 800da66:	5f49      	ldrsh	r1, [r1, r5]
 800da68:	f000 f8e8 	bl	800dc3c <_lseek_r>
 800da6c:	89a3      	ldrh	r3, [r4, #12]
 800da6e:	1c42      	adds	r2, r0, #1
 800da70:	d103      	bne.n	800da7a <__sseek+0x1a>
 800da72:	4a05      	ldr	r2, [pc, #20]	; (800da88 <__sseek+0x28>)
 800da74:	4013      	ands	r3, r2
 800da76:	81a3      	strh	r3, [r4, #12]
 800da78:	bd70      	pop	{r4, r5, r6, pc}
 800da7a:	2280      	movs	r2, #128	; 0x80
 800da7c:	0152      	lsls	r2, r2, #5
 800da7e:	4313      	orrs	r3, r2
 800da80:	81a3      	strh	r3, [r4, #12]
 800da82:	6560      	str	r0, [r4, #84]	; 0x54
 800da84:	e7f8      	b.n	800da78 <__sseek+0x18>
 800da86:	46c0      	nop			; (mov r8, r8)
 800da88:	ffffefff 	.word	0xffffefff

0800da8c <__sclose>:
 800da8c:	b510      	push	{r4, lr}
 800da8e:	230e      	movs	r3, #14
 800da90:	5ec9      	ldrsh	r1, [r1, r3]
 800da92:	f000 f8c1 	bl	800dc18 <_close_r>
 800da96:	bd10      	pop	{r4, pc}

0800da98 <__swbuf_r>:
 800da98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da9a:	0006      	movs	r6, r0
 800da9c:	000d      	movs	r5, r1
 800da9e:	0014      	movs	r4, r2
 800daa0:	2800      	cmp	r0, #0
 800daa2:	d004      	beq.n	800daae <__swbuf_r+0x16>
 800daa4:	6a03      	ldr	r3, [r0, #32]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d101      	bne.n	800daae <__swbuf_r+0x16>
 800daaa:	f7ff ff05 	bl	800d8b8 <__sinit>
 800daae:	69a3      	ldr	r3, [r4, #24]
 800dab0:	60a3      	str	r3, [r4, #8]
 800dab2:	89a3      	ldrh	r3, [r4, #12]
 800dab4:	071b      	lsls	r3, r3, #28
 800dab6:	d528      	bpl.n	800db0a <__swbuf_r+0x72>
 800dab8:	6923      	ldr	r3, [r4, #16]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d025      	beq.n	800db0a <__swbuf_r+0x72>
 800dabe:	6923      	ldr	r3, [r4, #16]
 800dac0:	6820      	ldr	r0, [r4, #0]
 800dac2:	b2ef      	uxtb	r7, r5
 800dac4:	1ac0      	subs	r0, r0, r3
 800dac6:	6963      	ldr	r3, [r4, #20]
 800dac8:	b2ed      	uxtb	r5, r5
 800daca:	4283      	cmp	r3, r0
 800dacc:	dc05      	bgt.n	800dada <__swbuf_r+0x42>
 800dace:	0021      	movs	r1, r4
 800dad0:	0030      	movs	r0, r6
 800dad2:	f000 fd71 	bl	800e5b8 <_fflush_r>
 800dad6:	2800      	cmp	r0, #0
 800dad8:	d11d      	bne.n	800db16 <__swbuf_r+0x7e>
 800dada:	68a3      	ldr	r3, [r4, #8]
 800dadc:	3001      	adds	r0, #1
 800dade:	3b01      	subs	r3, #1
 800dae0:	60a3      	str	r3, [r4, #8]
 800dae2:	6823      	ldr	r3, [r4, #0]
 800dae4:	1c5a      	adds	r2, r3, #1
 800dae6:	6022      	str	r2, [r4, #0]
 800dae8:	701f      	strb	r7, [r3, #0]
 800daea:	6963      	ldr	r3, [r4, #20]
 800daec:	4283      	cmp	r3, r0
 800daee:	d004      	beq.n	800dafa <__swbuf_r+0x62>
 800daf0:	89a3      	ldrh	r3, [r4, #12]
 800daf2:	07db      	lsls	r3, r3, #31
 800daf4:	d507      	bpl.n	800db06 <__swbuf_r+0x6e>
 800daf6:	2d0a      	cmp	r5, #10
 800daf8:	d105      	bne.n	800db06 <__swbuf_r+0x6e>
 800dafa:	0021      	movs	r1, r4
 800dafc:	0030      	movs	r0, r6
 800dafe:	f000 fd5b 	bl	800e5b8 <_fflush_r>
 800db02:	2800      	cmp	r0, #0
 800db04:	d107      	bne.n	800db16 <__swbuf_r+0x7e>
 800db06:	0028      	movs	r0, r5
 800db08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db0a:	0021      	movs	r1, r4
 800db0c:	0030      	movs	r0, r6
 800db0e:	f000 f805 	bl	800db1c <__swsetup_r>
 800db12:	2800      	cmp	r0, #0
 800db14:	d0d3      	beq.n	800dabe <__swbuf_r+0x26>
 800db16:	2501      	movs	r5, #1
 800db18:	426d      	negs	r5, r5
 800db1a:	e7f4      	b.n	800db06 <__swbuf_r+0x6e>

0800db1c <__swsetup_r>:
 800db1c:	4b30      	ldr	r3, [pc, #192]	; (800dbe0 <__swsetup_r+0xc4>)
 800db1e:	b570      	push	{r4, r5, r6, lr}
 800db20:	0005      	movs	r5, r0
 800db22:	6818      	ldr	r0, [r3, #0]
 800db24:	000c      	movs	r4, r1
 800db26:	2800      	cmp	r0, #0
 800db28:	d004      	beq.n	800db34 <__swsetup_r+0x18>
 800db2a:	6a03      	ldr	r3, [r0, #32]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d101      	bne.n	800db34 <__swsetup_r+0x18>
 800db30:	f7ff fec2 	bl	800d8b8 <__sinit>
 800db34:	230c      	movs	r3, #12
 800db36:	5ee2      	ldrsh	r2, [r4, r3]
 800db38:	b293      	uxth	r3, r2
 800db3a:	0711      	lsls	r1, r2, #28
 800db3c:	d423      	bmi.n	800db86 <__swsetup_r+0x6a>
 800db3e:	06d9      	lsls	r1, r3, #27
 800db40:	d407      	bmi.n	800db52 <__swsetup_r+0x36>
 800db42:	2309      	movs	r3, #9
 800db44:	2001      	movs	r0, #1
 800db46:	602b      	str	r3, [r5, #0]
 800db48:	3337      	adds	r3, #55	; 0x37
 800db4a:	4313      	orrs	r3, r2
 800db4c:	81a3      	strh	r3, [r4, #12]
 800db4e:	4240      	negs	r0, r0
 800db50:	bd70      	pop	{r4, r5, r6, pc}
 800db52:	075b      	lsls	r3, r3, #29
 800db54:	d513      	bpl.n	800db7e <__swsetup_r+0x62>
 800db56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db58:	2900      	cmp	r1, #0
 800db5a:	d008      	beq.n	800db6e <__swsetup_r+0x52>
 800db5c:	0023      	movs	r3, r4
 800db5e:	3344      	adds	r3, #68	; 0x44
 800db60:	4299      	cmp	r1, r3
 800db62:	d002      	beq.n	800db6a <__swsetup_r+0x4e>
 800db64:	0028      	movs	r0, r5
 800db66:	f000 f8db 	bl	800dd20 <_free_r>
 800db6a:	2300      	movs	r3, #0
 800db6c:	6363      	str	r3, [r4, #52]	; 0x34
 800db6e:	2224      	movs	r2, #36	; 0x24
 800db70:	89a3      	ldrh	r3, [r4, #12]
 800db72:	4393      	bics	r3, r2
 800db74:	81a3      	strh	r3, [r4, #12]
 800db76:	2300      	movs	r3, #0
 800db78:	6063      	str	r3, [r4, #4]
 800db7a:	6923      	ldr	r3, [r4, #16]
 800db7c:	6023      	str	r3, [r4, #0]
 800db7e:	2308      	movs	r3, #8
 800db80:	89a2      	ldrh	r2, [r4, #12]
 800db82:	4313      	orrs	r3, r2
 800db84:	81a3      	strh	r3, [r4, #12]
 800db86:	6923      	ldr	r3, [r4, #16]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d10b      	bne.n	800dba4 <__swsetup_r+0x88>
 800db8c:	21a0      	movs	r1, #160	; 0xa0
 800db8e:	2280      	movs	r2, #128	; 0x80
 800db90:	89a3      	ldrh	r3, [r4, #12]
 800db92:	0089      	lsls	r1, r1, #2
 800db94:	0092      	lsls	r2, r2, #2
 800db96:	400b      	ands	r3, r1
 800db98:	4293      	cmp	r3, r2
 800db9a:	d003      	beq.n	800dba4 <__swsetup_r+0x88>
 800db9c:	0021      	movs	r1, r4
 800db9e:	0028      	movs	r0, r5
 800dba0:	f000 fd5e 	bl	800e660 <__smakebuf_r>
 800dba4:	220c      	movs	r2, #12
 800dba6:	5ea3      	ldrsh	r3, [r4, r2]
 800dba8:	2001      	movs	r0, #1
 800dbaa:	001a      	movs	r2, r3
 800dbac:	b299      	uxth	r1, r3
 800dbae:	4002      	ands	r2, r0
 800dbb0:	4203      	tst	r3, r0
 800dbb2:	d00f      	beq.n	800dbd4 <__swsetup_r+0xb8>
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	60a2      	str	r2, [r4, #8]
 800dbb8:	6962      	ldr	r2, [r4, #20]
 800dbba:	4252      	negs	r2, r2
 800dbbc:	61a2      	str	r2, [r4, #24]
 800dbbe:	2000      	movs	r0, #0
 800dbc0:	6922      	ldr	r2, [r4, #16]
 800dbc2:	4282      	cmp	r2, r0
 800dbc4:	d1c4      	bne.n	800db50 <__swsetup_r+0x34>
 800dbc6:	0609      	lsls	r1, r1, #24
 800dbc8:	d5c2      	bpl.n	800db50 <__swsetup_r+0x34>
 800dbca:	2240      	movs	r2, #64	; 0x40
 800dbcc:	4313      	orrs	r3, r2
 800dbce:	81a3      	strh	r3, [r4, #12]
 800dbd0:	3801      	subs	r0, #1
 800dbd2:	e7bd      	b.n	800db50 <__swsetup_r+0x34>
 800dbd4:	0788      	lsls	r0, r1, #30
 800dbd6:	d400      	bmi.n	800dbda <__swsetup_r+0xbe>
 800dbd8:	6962      	ldr	r2, [r4, #20]
 800dbda:	60a2      	str	r2, [r4, #8]
 800dbdc:	e7ef      	b.n	800dbbe <__swsetup_r+0xa2>
 800dbde:	46c0      	nop			; (mov r8, r8)
 800dbe0:	20000090 	.word	0x20000090

0800dbe4 <memset>:
 800dbe4:	0003      	movs	r3, r0
 800dbe6:	1882      	adds	r2, r0, r2
 800dbe8:	4293      	cmp	r3, r2
 800dbea:	d100      	bne.n	800dbee <memset+0xa>
 800dbec:	4770      	bx	lr
 800dbee:	7019      	strb	r1, [r3, #0]
 800dbf0:	3301      	adds	r3, #1
 800dbf2:	e7f9      	b.n	800dbe8 <memset+0x4>

0800dbf4 <strncmp>:
 800dbf4:	b530      	push	{r4, r5, lr}
 800dbf6:	0005      	movs	r5, r0
 800dbf8:	1e10      	subs	r0, r2, #0
 800dbfa:	d00b      	beq.n	800dc14 <strncmp+0x20>
 800dbfc:	2400      	movs	r4, #0
 800dbfe:	3a01      	subs	r2, #1
 800dc00:	5d2b      	ldrb	r3, [r5, r4]
 800dc02:	5d08      	ldrb	r0, [r1, r4]
 800dc04:	4283      	cmp	r3, r0
 800dc06:	d104      	bne.n	800dc12 <strncmp+0x1e>
 800dc08:	42a2      	cmp	r2, r4
 800dc0a:	d002      	beq.n	800dc12 <strncmp+0x1e>
 800dc0c:	3401      	adds	r4, #1
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d1f6      	bne.n	800dc00 <strncmp+0xc>
 800dc12:	1a18      	subs	r0, r3, r0
 800dc14:	bd30      	pop	{r4, r5, pc}
	...

0800dc18 <_close_r>:
 800dc18:	2300      	movs	r3, #0
 800dc1a:	b570      	push	{r4, r5, r6, lr}
 800dc1c:	4d06      	ldr	r5, [pc, #24]	; (800dc38 <_close_r+0x20>)
 800dc1e:	0004      	movs	r4, r0
 800dc20:	0008      	movs	r0, r1
 800dc22:	602b      	str	r3, [r5, #0]
 800dc24:	f7f6 fa61 	bl	80040ea <_close>
 800dc28:	1c43      	adds	r3, r0, #1
 800dc2a:	d103      	bne.n	800dc34 <_close_r+0x1c>
 800dc2c:	682b      	ldr	r3, [r5, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d000      	beq.n	800dc34 <_close_r+0x1c>
 800dc32:	6023      	str	r3, [r4, #0]
 800dc34:	bd70      	pop	{r4, r5, r6, pc}
 800dc36:	46c0      	nop			; (mov r8, r8)
 800dc38:	20004d7c 	.word	0x20004d7c

0800dc3c <_lseek_r>:
 800dc3c:	b570      	push	{r4, r5, r6, lr}
 800dc3e:	0004      	movs	r4, r0
 800dc40:	0008      	movs	r0, r1
 800dc42:	0011      	movs	r1, r2
 800dc44:	001a      	movs	r2, r3
 800dc46:	2300      	movs	r3, #0
 800dc48:	4d05      	ldr	r5, [pc, #20]	; (800dc60 <_lseek_r+0x24>)
 800dc4a:	602b      	str	r3, [r5, #0]
 800dc4c:	f7f6 fa6e 	bl	800412c <_lseek>
 800dc50:	1c43      	adds	r3, r0, #1
 800dc52:	d103      	bne.n	800dc5c <_lseek_r+0x20>
 800dc54:	682b      	ldr	r3, [r5, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d000      	beq.n	800dc5c <_lseek_r+0x20>
 800dc5a:	6023      	str	r3, [r4, #0]
 800dc5c:	bd70      	pop	{r4, r5, r6, pc}
 800dc5e:	46c0      	nop			; (mov r8, r8)
 800dc60:	20004d7c 	.word	0x20004d7c

0800dc64 <_read_r>:
 800dc64:	b570      	push	{r4, r5, r6, lr}
 800dc66:	0004      	movs	r4, r0
 800dc68:	0008      	movs	r0, r1
 800dc6a:	0011      	movs	r1, r2
 800dc6c:	001a      	movs	r2, r3
 800dc6e:	2300      	movs	r3, #0
 800dc70:	4d05      	ldr	r5, [pc, #20]	; (800dc88 <_read_r+0x24>)
 800dc72:	602b      	str	r3, [r5, #0]
 800dc74:	f7f6 fa00 	bl	8004078 <_read>
 800dc78:	1c43      	adds	r3, r0, #1
 800dc7a:	d103      	bne.n	800dc84 <_read_r+0x20>
 800dc7c:	682b      	ldr	r3, [r5, #0]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d000      	beq.n	800dc84 <_read_r+0x20>
 800dc82:	6023      	str	r3, [r4, #0]
 800dc84:	bd70      	pop	{r4, r5, r6, pc}
 800dc86:	46c0      	nop			; (mov r8, r8)
 800dc88:	20004d7c 	.word	0x20004d7c

0800dc8c <_write_r>:
 800dc8c:	b570      	push	{r4, r5, r6, lr}
 800dc8e:	0004      	movs	r4, r0
 800dc90:	0008      	movs	r0, r1
 800dc92:	0011      	movs	r1, r2
 800dc94:	001a      	movs	r2, r3
 800dc96:	2300      	movs	r3, #0
 800dc98:	4d05      	ldr	r5, [pc, #20]	; (800dcb0 <_write_r+0x24>)
 800dc9a:	602b      	str	r3, [r5, #0]
 800dc9c:	f7f6 fa09 	bl	80040b2 <_write>
 800dca0:	1c43      	adds	r3, r0, #1
 800dca2:	d103      	bne.n	800dcac <_write_r+0x20>
 800dca4:	682b      	ldr	r3, [r5, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d000      	beq.n	800dcac <_write_r+0x20>
 800dcaa:	6023      	str	r3, [r4, #0]
 800dcac:	bd70      	pop	{r4, r5, r6, pc}
 800dcae:	46c0      	nop			; (mov r8, r8)
 800dcb0:	20004d7c 	.word	0x20004d7c

0800dcb4 <__errno>:
 800dcb4:	4b01      	ldr	r3, [pc, #4]	; (800dcbc <__errno+0x8>)
 800dcb6:	6818      	ldr	r0, [r3, #0]
 800dcb8:	4770      	bx	lr
 800dcba:	46c0      	nop			; (mov r8, r8)
 800dcbc:	20000090 	.word	0x20000090

0800dcc0 <__libc_init_array>:
 800dcc0:	b570      	push	{r4, r5, r6, lr}
 800dcc2:	2600      	movs	r6, #0
 800dcc4:	4c0c      	ldr	r4, [pc, #48]	; (800dcf8 <__libc_init_array+0x38>)
 800dcc6:	4d0d      	ldr	r5, [pc, #52]	; (800dcfc <__libc_init_array+0x3c>)
 800dcc8:	1b64      	subs	r4, r4, r5
 800dcca:	10a4      	asrs	r4, r4, #2
 800dccc:	42a6      	cmp	r6, r4
 800dcce:	d109      	bne.n	800dce4 <__libc_init_array+0x24>
 800dcd0:	2600      	movs	r6, #0
 800dcd2:	f002 fd8b 	bl	80107ec <_init>
 800dcd6:	4c0a      	ldr	r4, [pc, #40]	; (800dd00 <__libc_init_array+0x40>)
 800dcd8:	4d0a      	ldr	r5, [pc, #40]	; (800dd04 <__libc_init_array+0x44>)
 800dcda:	1b64      	subs	r4, r4, r5
 800dcdc:	10a4      	asrs	r4, r4, #2
 800dcde:	42a6      	cmp	r6, r4
 800dce0:	d105      	bne.n	800dcee <__libc_init_array+0x2e>
 800dce2:	bd70      	pop	{r4, r5, r6, pc}
 800dce4:	00b3      	lsls	r3, r6, #2
 800dce6:	58eb      	ldr	r3, [r5, r3]
 800dce8:	4798      	blx	r3
 800dcea:	3601      	adds	r6, #1
 800dcec:	e7ee      	b.n	800dccc <__libc_init_array+0xc>
 800dcee:	00b3      	lsls	r3, r6, #2
 800dcf0:	58eb      	ldr	r3, [r5, r3]
 800dcf2:	4798      	blx	r3
 800dcf4:	3601      	adds	r6, #1
 800dcf6:	e7f2      	b.n	800dcde <__libc_init_array+0x1e>
 800dcf8:	08011380 	.word	0x08011380
 800dcfc:	08011380 	.word	0x08011380
 800dd00:	08011384 	.word	0x08011384
 800dd04:	08011380 	.word	0x08011380

0800dd08 <__retarget_lock_acquire_recursive>:
 800dd08:	4770      	bx	lr

0800dd0a <__retarget_lock_release_recursive>:
 800dd0a:	4770      	bx	lr

0800dd0c <memcpy>:
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	b510      	push	{r4, lr}
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d100      	bne.n	800dd16 <memcpy+0xa>
 800dd14:	bd10      	pop	{r4, pc}
 800dd16:	5ccc      	ldrb	r4, [r1, r3]
 800dd18:	54c4      	strb	r4, [r0, r3]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	e7f8      	b.n	800dd10 <memcpy+0x4>
	...

0800dd20 <_free_r>:
 800dd20:	b570      	push	{r4, r5, r6, lr}
 800dd22:	0005      	movs	r5, r0
 800dd24:	2900      	cmp	r1, #0
 800dd26:	d010      	beq.n	800dd4a <_free_r+0x2a>
 800dd28:	1f0c      	subs	r4, r1, #4
 800dd2a:	6823      	ldr	r3, [r4, #0]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	da00      	bge.n	800dd32 <_free_r+0x12>
 800dd30:	18e4      	adds	r4, r4, r3
 800dd32:	0028      	movs	r0, r5
 800dd34:	f000 f8e2 	bl	800defc <__malloc_lock>
 800dd38:	4a1d      	ldr	r2, [pc, #116]	; (800ddb0 <_free_r+0x90>)
 800dd3a:	6813      	ldr	r3, [r2, #0]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d105      	bne.n	800dd4c <_free_r+0x2c>
 800dd40:	6063      	str	r3, [r4, #4]
 800dd42:	6014      	str	r4, [r2, #0]
 800dd44:	0028      	movs	r0, r5
 800dd46:	f000 f8e1 	bl	800df0c <__malloc_unlock>
 800dd4a:	bd70      	pop	{r4, r5, r6, pc}
 800dd4c:	42a3      	cmp	r3, r4
 800dd4e:	d908      	bls.n	800dd62 <_free_r+0x42>
 800dd50:	6820      	ldr	r0, [r4, #0]
 800dd52:	1821      	adds	r1, r4, r0
 800dd54:	428b      	cmp	r3, r1
 800dd56:	d1f3      	bne.n	800dd40 <_free_r+0x20>
 800dd58:	6819      	ldr	r1, [r3, #0]
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	1809      	adds	r1, r1, r0
 800dd5e:	6021      	str	r1, [r4, #0]
 800dd60:	e7ee      	b.n	800dd40 <_free_r+0x20>
 800dd62:	001a      	movs	r2, r3
 800dd64:	685b      	ldr	r3, [r3, #4]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d001      	beq.n	800dd6e <_free_r+0x4e>
 800dd6a:	42a3      	cmp	r3, r4
 800dd6c:	d9f9      	bls.n	800dd62 <_free_r+0x42>
 800dd6e:	6811      	ldr	r1, [r2, #0]
 800dd70:	1850      	adds	r0, r2, r1
 800dd72:	42a0      	cmp	r0, r4
 800dd74:	d10b      	bne.n	800dd8e <_free_r+0x6e>
 800dd76:	6820      	ldr	r0, [r4, #0]
 800dd78:	1809      	adds	r1, r1, r0
 800dd7a:	1850      	adds	r0, r2, r1
 800dd7c:	6011      	str	r1, [r2, #0]
 800dd7e:	4283      	cmp	r3, r0
 800dd80:	d1e0      	bne.n	800dd44 <_free_r+0x24>
 800dd82:	6818      	ldr	r0, [r3, #0]
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	1841      	adds	r1, r0, r1
 800dd88:	6011      	str	r1, [r2, #0]
 800dd8a:	6053      	str	r3, [r2, #4]
 800dd8c:	e7da      	b.n	800dd44 <_free_r+0x24>
 800dd8e:	42a0      	cmp	r0, r4
 800dd90:	d902      	bls.n	800dd98 <_free_r+0x78>
 800dd92:	230c      	movs	r3, #12
 800dd94:	602b      	str	r3, [r5, #0]
 800dd96:	e7d5      	b.n	800dd44 <_free_r+0x24>
 800dd98:	6820      	ldr	r0, [r4, #0]
 800dd9a:	1821      	adds	r1, r4, r0
 800dd9c:	428b      	cmp	r3, r1
 800dd9e:	d103      	bne.n	800dda8 <_free_r+0x88>
 800dda0:	6819      	ldr	r1, [r3, #0]
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	1809      	adds	r1, r1, r0
 800dda6:	6021      	str	r1, [r4, #0]
 800dda8:	6063      	str	r3, [r4, #4]
 800ddaa:	6054      	str	r4, [r2, #4]
 800ddac:	e7ca      	b.n	800dd44 <_free_r+0x24>
 800ddae:	46c0      	nop			; (mov r8, r8)
 800ddb0:	20004d84 	.word	0x20004d84

0800ddb4 <sbrk_aligned>:
 800ddb4:	b570      	push	{r4, r5, r6, lr}
 800ddb6:	4e0f      	ldr	r6, [pc, #60]	; (800ddf4 <sbrk_aligned+0x40>)
 800ddb8:	000d      	movs	r5, r1
 800ddba:	6831      	ldr	r1, [r6, #0]
 800ddbc:	0004      	movs	r4, r0
 800ddbe:	2900      	cmp	r1, #0
 800ddc0:	d102      	bne.n	800ddc8 <sbrk_aligned+0x14>
 800ddc2:	f000 fcaf 	bl	800e724 <_sbrk_r>
 800ddc6:	6030      	str	r0, [r6, #0]
 800ddc8:	0029      	movs	r1, r5
 800ddca:	0020      	movs	r0, r4
 800ddcc:	f000 fcaa 	bl	800e724 <_sbrk_r>
 800ddd0:	1c43      	adds	r3, r0, #1
 800ddd2:	d00a      	beq.n	800ddea <sbrk_aligned+0x36>
 800ddd4:	2303      	movs	r3, #3
 800ddd6:	1cc5      	adds	r5, r0, #3
 800ddd8:	439d      	bics	r5, r3
 800ddda:	42a8      	cmp	r0, r5
 800dddc:	d007      	beq.n	800ddee <sbrk_aligned+0x3a>
 800ddde:	1a29      	subs	r1, r5, r0
 800dde0:	0020      	movs	r0, r4
 800dde2:	f000 fc9f 	bl	800e724 <_sbrk_r>
 800dde6:	3001      	adds	r0, #1
 800dde8:	d101      	bne.n	800ddee <sbrk_aligned+0x3a>
 800ddea:	2501      	movs	r5, #1
 800ddec:	426d      	negs	r5, r5
 800ddee:	0028      	movs	r0, r5
 800ddf0:	bd70      	pop	{r4, r5, r6, pc}
 800ddf2:	46c0      	nop			; (mov r8, r8)
 800ddf4:	20004d88 	.word	0x20004d88

0800ddf8 <_malloc_r>:
 800ddf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddfa:	2203      	movs	r2, #3
 800ddfc:	1ccb      	adds	r3, r1, #3
 800ddfe:	4393      	bics	r3, r2
 800de00:	3308      	adds	r3, #8
 800de02:	0006      	movs	r6, r0
 800de04:	001f      	movs	r7, r3
 800de06:	2b0c      	cmp	r3, #12
 800de08:	d238      	bcs.n	800de7c <_malloc_r+0x84>
 800de0a:	270c      	movs	r7, #12
 800de0c:	42b9      	cmp	r1, r7
 800de0e:	d837      	bhi.n	800de80 <_malloc_r+0x88>
 800de10:	0030      	movs	r0, r6
 800de12:	f000 f873 	bl	800defc <__malloc_lock>
 800de16:	4b38      	ldr	r3, [pc, #224]	; (800def8 <_malloc_r+0x100>)
 800de18:	9300      	str	r3, [sp, #0]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	001c      	movs	r4, r3
 800de1e:	2c00      	cmp	r4, #0
 800de20:	d133      	bne.n	800de8a <_malloc_r+0x92>
 800de22:	0039      	movs	r1, r7
 800de24:	0030      	movs	r0, r6
 800de26:	f7ff ffc5 	bl	800ddb4 <sbrk_aligned>
 800de2a:	0004      	movs	r4, r0
 800de2c:	1c43      	adds	r3, r0, #1
 800de2e:	d15e      	bne.n	800deee <_malloc_r+0xf6>
 800de30:	9b00      	ldr	r3, [sp, #0]
 800de32:	681c      	ldr	r4, [r3, #0]
 800de34:	0025      	movs	r5, r4
 800de36:	2d00      	cmp	r5, #0
 800de38:	d14e      	bne.n	800ded8 <_malloc_r+0xe0>
 800de3a:	2c00      	cmp	r4, #0
 800de3c:	d051      	beq.n	800dee2 <_malloc_r+0xea>
 800de3e:	6823      	ldr	r3, [r4, #0]
 800de40:	0029      	movs	r1, r5
 800de42:	18e3      	adds	r3, r4, r3
 800de44:	0030      	movs	r0, r6
 800de46:	9301      	str	r3, [sp, #4]
 800de48:	f000 fc6c 	bl	800e724 <_sbrk_r>
 800de4c:	9b01      	ldr	r3, [sp, #4]
 800de4e:	4283      	cmp	r3, r0
 800de50:	d147      	bne.n	800dee2 <_malloc_r+0xea>
 800de52:	6823      	ldr	r3, [r4, #0]
 800de54:	0030      	movs	r0, r6
 800de56:	1aff      	subs	r7, r7, r3
 800de58:	0039      	movs	r1, r7
 800de5a:	f7ff ffab 	bl	800ddb4 <sbrk_aligned>
 800de5e:	3001      	adds	r0, #1
 800de60:	d03f      	beq.n	800dee2 <_malloc_r+0xea>
 800de62:	6823      	ldr	r3, [r4, #0]
 800de64:	19db      	adds	r3, r3, r7
 800de66:	6023      	str	r3, [r4, #0]
 800de68:	9b00      	ldr	r3, [sp, #0]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d040      	beq.n	800def2 <_malloc_r+0xfa>
 800de70:	685a      	ldr	r2, [r3, #4]
 800de72:	42a2      	cmp	r2, r4
 800de74:	d133      	bne.n	800dede <_malloc_r+0xe6>
 800de76:	2200      	movs	r2, #0
 800de78:	605a      	str	r2, [r3, #4]
 800de7a:	e014      	b.n	800dea6 <_malloc_r+0xae>
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	dac5      	bge.n	800de0c <_malloc_r+0x14>
 800de80:	230c      	movs	r3, #12
 800de82:	2500      	movs	r5, #0
 800de84:	6033      	str	r3, [r6, #0]
 800de86:	0028      	movs	r0, r5
 800de88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800de8a:	6821      	ldr	r1, [r4, #0]
 800de8c:	1bc9      	subs	r1, r1, r7
 800de8e:	d420      	bmi.n	800ded2 <_malloc_r+0xda>
 800de90:	290b      	cmp	r1, #11
 800de92:	d918      	bls.n	800dec6 <_malloc_r+0xce>
 800de94:	19e2      	adds	r2, r4, r7
 800de96:	6027      	str	r7, [r4, #0]
 800de98:	42a3      	cmp	r3, r4
 800de9a:	d112      	bne.n	800dec2 <_malloc_r+0xca>
 800de9c:	9b00      	ldr	r3, [sp, #0]
 800de9e:	601a      	str	r2, [r3, #0]
 800dea0:	6863      	ldr	r3, [r4, #4]
 800dea2:	6011      	str	r1, [r2, #0]
 800dea4:	6053      	str	r3, [r2, #4]
 800dea6:	0030      	movs	r0, r6
 800dea8:	0025      	movs	r5, r4
 800deaa:	f000 f82f 	bl	800df0c <__malloc_unlock>
 800deae:	2207      	movs	r2, #7
 800deb0:	350b      	adds	r5, #11
 800deb2:	1d23      	adds	r3, r4, #4
 800deb4:	4395      	bics	r5, r2
 800deb6:	1aea      	subs	r2, r5, r3
 800deb8:	429d      	cmp	r5, r3
 800deba:	d0e4      	beq.n	800de86 <_malloc_r+0x8e>
 800debc:	1b5b      	subs	r3, r3, r5
 800debe:	50a3      	str	r3, [r4, r2]
 800dec0:	e7e1      	b.n	800de86 <_malloc_r+0x8e>
 800dec2:	605a      	str	r2, [r3, #4]
 800dec4:	e7ec      	b.n	800dea0 <_malloc_r+0xa8>
 800dec6:	6862      	ldr	r2, [r4, #4]
 800dec8:	42a3      	cmp	r3, r4
 800deca:	d1d5      	bne.n	800de78 <_malloc_r+0x80>
 800decc:	9b00      	ldr	r3, [sp, #0]
 800dece:	601a      	str	r2, [r3, #0]
 800ded0:	e7e9      	b.n	800dea6 <_malloc_r+0xae>
 800ded2:	0023      	movs	r3, r4
 800ded4:	6864      	ldr	r4, [r4, #4]
 800ded6:	e7a2      	b.n	800de1e <_malloc_r+0x26>
 800ded8:	002c      	movs	r4, r5
 800deda:	686d      	ldr	r5, [r5, #4]
 800dedc:	e7ab      	b.n	800de36 <_malloc_r+0x3e>
 800dede:	0013      	movs	r3, r2
 800dee0:	e7c4      	b.n	800de6c <_malloc_r+0x74>
 800dee2:	230c      	movs	r3, #12
 800dee4:	0030      	movs	r0, r6
 800dee6:	6033      	str	r3, [r6, #0]
 800dee8:	f000 f810 	bl	800df0c <__malloc_unlock>
 800deec:	e7cb      	b.n	800de86 <_malloc_r+0x8e>
 800deee:	6027      	str	r7, [r4, #0]
 800def0:	e7d9      	b.n	800dea6 <_malloc_r+0xae>
 800def2:	605b      	str	r3, [r3, #4]
 800def4:	deff      	udf	#255	; 0xff
 800def6:	46c0      	nop			; (mov r8, r8)
 800def8:	20004d84 	.word	0x20004d84

0800defc <__malloc_lock>:
 800defc:	b510      	push	{r4, lr}
 800defe:	4802      	ldr	r0, [pc, #8]	; (800df08 <__malloc_lock+0xc>)
 800df00:	f7ff ff02 	bl	800dd08 <__retarget_lock_acquire_recursive>
 800df04:	bd10      	pop	{r4, pc}
 800df06:	46c0      	nop			; (mov r8, r8)
 800df08:	20004d80 	.word	0x20004d80

0800df0c <__malloc_unlock>:
 800df0c:	b510      	push	{r4, lr}
 800df0e:	4802      	ldr	r0, [pc, #8]	; (800df18 <__malloc_unlock+0xc>)
 800df10:	f7ff fefb 	bl	800dd0a <__retarget_lock_release_recursive>
 800df14:	bd10      	pop	{r4, pc}
 800df16:	46c0      	nop			; (mov r8, r8)
 800df18:	20004d80 	.word	0x20004d80

0800df1c <__sfputc_r>:
 800df1c:	6893      	ldr	r3, [r2, #8]
 800df1e:	b510      	push	{r4, lr}
 800df20:	3b01      	subs	r3, #1
 800df22:	6093      	str	r3, [r2, #8]
 800df24:	2b00      	cmp	r3, #0
 800df26:	da04      	bge.n	800df32 <__sfputc_r+0x16>
 800df28:	6994      	ldr	r4, [r2, #24]
 800df2a:	42a3      	cmp	r3, r4
 800df2c:	db07      	blt.n	800df3e <__sfputc_r+0x22>
 800df2e:	290a      	cmp	r1, #10
 800df30:	d005      	beq.n	800df3e <__sfputc_r+0x22>
 800df32:	6813      	ldr	r3, [r2, #0]
 800df34:	1c58      	adds	r0, r3, #1
 800df36:	6010      	str	r0, [r2, #0]
 800df38:	7019      	strb	r1, [r3, #0]
 800df3a:	0008      	movs	r0, r1
 800df3c:	bd10      	pop	{r4, pc}
 800df3e:	f7ff fdab 	bl	800da98 <__swbuf_r>
 800df42:	0001      	movs	r1, r0
 800df44:	e7f9      	b.n	800df3a <__sfputc_r+0x1e>

0800df46 <__sfputs_r>:
 800df46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df48:	0006      	movs	r6, r0
 800df4a:	000f      	movs	r7, r1
 800df4c:	0014      	movs	r4, r2
 800df4e:	18d5      	adds	r5, r2, r3
 800df50:	42ac      	cmp	r4, r5
 800df52:	d101      	bne.n	800df58 <__sfputs_r+0x12>
 800df54:	2000      	movs	r0, #0
 800df56:	e007      	b.n	800df68 <__sfputs_r+0x22>
 800df58:	7821      	ldrb	r1, [r4, #0]
 800df5a:	003a      	movs	r2, r7
 800df5c:	0030      	movs	r0, r6
 800df5e:	f7ff ffdd 	bl	800df1c <__sfputc_r>
 800df62:	3401      	adds	r4, #1
 800df64:	1c43      	adds	r3, r0, #1
 800df66:	d1f3      	bne.n	800df50 <__sfputs_r+0xa>
 800df68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df6c <_vfiprintf_r>:
 800df6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df6e:	b0a1      	sub	sp, #132	; 0x84
 800df70:	000f      	movs	r7, r1
 800df72:	0015      	movs	r5, r2
 800df74:	001e      	movs	r6, r3
 800df76:	9003      	str	r0, [sp, #12]
 800df78:	2800      	cmp	r0, #0
 800df7a:	d004      	beq.n	800df86 <_vfiprintf_r+0x1a>
 800df7c:	6a03      	ldr	r3, [r0, #32]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d101      	bne.n	800df86 <_vfiprintf_r+0x1a>
 800df82:	f7ff fc99 	bl	800d8b8 <__sinit>
 800df86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df88:	07db      	lsls	r3, r3, #31
 800df8a:	d405      	bmi.n	800df98 <_vfiprintf_r+0x2c>
 800df8c:	89bb      	ldrh	r3, [r7, #12]
 800df8e:	059b      	lsls	r3, r3, #22
 800df90:	d402      	bmi.n	800df98 <_vfiprintf_r+0x2c>
 800df92:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800df94:	f7ff feb8 	bl	800dd08 <__retarget_lock_acquire_recursive>
 800df98:	89bb      	ldrh	r3, [r7, #12]
 800df9a:	071b      	lsls	r3, r3, #28
 800df9c:	d502      	bpl.n	800dfa4 <_vfiprintf_r+0x38>
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d113      	bne.n	800dfcc <_vfiprintf_r+0x60>
 800dfa4:	0039      	movs	r1, r7
 800dfa6:	9803      	ldr	r0, [sp, #12]
 800dfa8:	f7ff fdb8 	bl	800db1c <__swsetup_r>
 800dfac:	2800      	cmp	r0, #0
 800dfae:	d00d      	beq.n	800dfcc <_vfiprintf_r+0x60>
 800dfb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dfb2:	07db      	lsls	r3, r3, #31
 800dfb4:	d503      	bpl.n	800dfbe <_vfiprintf_r+0x52>
 800dfb6:	2001      	movs	r0, #1
 800dfb8:	4240      	negs	r0, r0
 800dfba:	b021      	add	sp, #132	; 0x84
 800dfbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfbe:	89bb      	ldrh	r3, [r7, #12]
 800dfc0:	059b      	lsls	r3, r3, #22
 800dfc2:	d4f8      	bmi.n	800dfb6 <_vfiprintf_r+0x4a>
 800dfc4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800dfc6:	f7ff fea0 	bl	800dd0a <__retarget_lock_release_recursive>
 800dfca:	e7f4      	b.n	800dfb6 <_vfiprintf_r+0x4a>
 800dfcc:	2300      	movs	r3, #0
 800dfce:	ac08      	add	r4, sp, #32
 800dfd0:	6163      	str	r3, [r4, #20]
 800dfd2:	3320      	adds	r3, #32
 800dfd4:	7663      	strb	r3, [r4, #25]
 800dfd6:	3310      	adds	r3, #16
 800dfd8:	76a3      	strb	r3, [r4, #26]
 800dfda:	9607      	str	r6, [sp, #28]
 800dfdc:	002e      	movs	r6, r5
 800dfde:	7833      	ldrb	r3, [r6, #0]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d001      	beq.n	800dfe8 <_vfiprintf_r+0x7c>
 800dfe4:	2b25      	cmp	r3, #37	; 0x25
 800dfe6:	d148      	bne.n	800e07a <_vfiprintf_r+0x10e>
 800dfe8:	1b73      	subs	r3, r6, r5
 800dfea:	9305      	str	r3, [sp, #20]
 800dfec:	42ae      	cmp	r6, r5
 800dfee:	d00b      	beq.n	800e008 <_vfiprintf_r+0x9c>
 800dff0:	002a      	movs	r2, r5
 800dff2:	0039      	movs	r1, r7
 800dff4:	9803      	ldr	r0, [sp, #12]
 800dff6:	f7ff ffa6 	bl	800df46 <__sfputs_r>
 800dffa:	3001      	adds	r0, #1
 800dffc:	d100      	bne.n	800e000 <_vfiprintf_r+0x94>
 800dffe:	e0af      	b.n	800e160 <_vfiprintf_r+0x1f4>
 800e000:	6963      	ldr	r3, [r4, #20]
 800e002:	9a05      	ldr	r2, [sp, #20]
 800e004:	189b      	adds	r3, r3, r2
 800e006:	6163      	str	r3, [r4, #20]
 800e008:	7833      	ldrb	r3, [r6, #0]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d100      	bne.n	800e010 <_vfiprintf_r+0xa4>
 800e00e:	e0a7      	b.n	800e160 <_vfiprintf_r+0x1f4>
 800e010:	2201      	movs	r2, #1
 800e012:	2300      	movs	r3, #0
 800e014:	4252      	negs	r2, r2
 800e016:	6062      	str	r2, [r4, #4]
 800e018:	a904      	add	r1, sp, #16
 800e01a:	3254      	adds	r2, #84	; 0x54
 800e01c:	1852      	adds	r2, r2, r1
 800e01e:	1c75      	adds	r5, r6, #1
 800e020:	6023      	str	r3, [r4, #0]
 800e022:	60e3      	str	r3, [r4, #12]
 800e024:	60a3      	str	r3, [r4, #8]
 800e026:	7013      	strb	r3, [r2, #0]
 800e028:	65a3      	str	r3, [r4, #88]	; 0x58
 800e02a:	4b59      	ldr	r3, [pc, #356]	; (800e190 <_vfiprintf_r+0x224>)
 800e02c:	2205      	movs	r2, #5
 800e02e:	0018      	movs	r0, r3
 800e030:	7829      	ldrb	r1, [r5, #0]
 800e032:	9305      	str	r3, [sp, #20]
 800e034:	f000 fb88 	bl	800e748 <memchr>
 800e038:	1c6e      	adds	r6, r5, #1
 800e03a:	2800      	cmp	r0, #0
 800e03c:	d11f      	bne.n	800e07e <_vfiprintf_r+0x112>
 800e03e:	6822      	ldr	r2, [r4, #0]
 800e040:	06d3      	lsls	r3, r2, #27
 800e042:	d504      	bpl.n	800e04e <_vfiprintf_r+0xe2>
 800e044:	2353      	movs	r3, #83	; 0x53
 800e046:	a904      	add	r1, sp, #16
 800e048:	185b      	adds	r3, r3, r1
 800e04a:	2120      	movs	r1, #32
 800e04c:	7019      	strb	r1, [r3, #0]
 800e04e:	0713      	lsls	r3, r2, #28
 800e050:	d504      	bpl.n	800e05c <_vfiprintf_r+0xf0>
 800e052:	2353      	movs	r3, #83	; 0x53
 800e054:	a904      	add	r1, sp, #16
 800e056:	185b      	adds	r3, r3, r1
 800e058:	212b      	movs	r1, #43	; 0x2b
 800e05a:	7019      	strb	r1, [r3, #0]
 800e05c:	782b      	ldrb	r3, [r5, #0]
 800e05e:	2b2a      	cmp	r3, #42	; 0x2a
 800e060:	d016      	beq.n	800e090 <_vfiprintf_r+0x124>
 800e062:	002e      	movs	r6, r5
 800e064:	2100      	movs	r1, #0
 800e066:	200a      	movs	r0, #10
 800e068:	68e3      	ldr	r3, [r4, #12]
 800e06a:	7832      	ldrb	r2, [r6, #0]
 800e06c:	1c75      	adds	r5, r6, #1
 800e06e:	3a30      	subs	r2, #48	; 0x30
 800e070:	2a09      	cmp	r2, #9
 800e072:	d94e      	bls.n	800e112 <_vfiprintf_r+0x1a6>
 800e074:	2900      	cmp	r1, #0
 800e076:	d111      	bne.n	800e09c <_vfiprintf_r+0x130>
 800e078:	e017      	b.n	800e0aa <_vfiprintf_r+0x13e>
 800e07a:	3601      	adds	r6, #1
 800e07c:	e7af      	b.n	800dfde <_vfiprintf_r+0x72>
 800e07e:	9b05      	ldr	r3, [sp, #20]
 800e080:	6822      	ldr	r2, [r4, #0]
 800e082:	1ac0      	subs	r0, r0, r3
 800e084:	2301      	movs	r3, #1
 800e086:	4083      	lsls	r3, r0
 800e088:	4313      	orrs	r3, r2
 800e08a:	0035      	movs	r5, r6
 800e08c:	6023      	str	r3, [r4, #0]
 800e08e:	e7cc      	b.n	800e02a <_vfiprintf_r+0xbe>
 800e090:	9b07      	ldr	r3, [sp, #28]
 800e092:	1d19      	adds	r1, r3, #4
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	9107      	str	r1, [sp, #28]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	db01      	blt.n	800e0a0 <_vfiprintf_r+0x134>
 800e09c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e09e:	e004      	b.n	800e0aa <_vfiprintf_r+0x13e>
 800e0a0:	425b      	negs	r3, r3
 800e0a2:	60e3      	str	r3, [r4, #12]
 800e0a4:	2302      	movs	r3, #2
 800e0a6:	4313      	orrs	r3, r2
 800e0a8:	6023      	str	r3, [r4, #0]
 800e0aa:	7833      	ldrb	r3, [r6, #0]
 800e0ac:	2b2e      	cmp	r3, #46	; 0x2e
 800e0ae:	d10a      	bne.n	800e0c6 <_vfiprintf_r+0x15a>
 800e0b0:	7873      	ldrb	r3, [r6, #1]
 800e0b2:	2b2a      	cmp	r3, #42	; 0x2a
 800e0b4:	d135      	bne.n	800e122 <_vfiprintf_r+0x1b6>
 800e0b6:	9b07      	ldr	r3, [sp, #28]
 800e0b8:	3602      	adds	r6, #2
 800e0ba:	1d1a      	adds	r2, r3, #4
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	9207      	str	r2, [sp, #28]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	db2b      	blt.n	800e11c <_vfiprintf_r+0x1b0>
 800e0c4:	9309      	str	r3, [sp, #36]	; 0x24
 800e0c6:	4d33      	ldr	r5, [pc, #204]	; (800e194 <_vfiprintf_r+0x228>)
 800e0c8:	2203      	movs	r2, #3
 800e0ca:	0028      	movs	r0, r5
 800e0cc:	7831      	ldrb	r1, [r6, #0]
 800e0ce:	f000 fb3b 	bl	800e748 <memchr>
 800e0d2:	2800      	cmp	r0, #0
 800e0d4:	d006      	beq.n	800e0e4 <_vfiprintf_r+0x178>
 800e0d6:	2340      	movs	r3, #64	; 0x40
 800e0d8:	1b40      	subs	r0, r0, r5
 800e0da:	4083      	lsls	r3, r0
 800e0dc:	6822      	ldr	r2, [r4, #0]
 800e0de:	3601      	adds	r6, #1
 800e0e0:	4313      	orrs	r3, r2
 800e0e2:	6023      	str	r3, [r4, #0]
 800e0e4:	7831      	ldrb	r1, [r6, #0]
 800e0e6:	2206      	movs	r2, #6
 800e0e8:	482b      	ldr	r0, [pc, #172]	; (800e198 <_vfiprintf_r+0x22c>)
 800e0ea:	1c75      	adds	r5, r6, #1
 800e0ec:	7621      	strb	r1, [r4, #24]
 800e0ee:	f000 fb2b 	bl	800e748 <memchr>
 800e0f2:	2800      	cmp	r0, #0
 800e0f4:	d043      	beq.n	800e17e <_vfiprintf_r+0x212>
 800e0f6:	4b29      	ldr	r3, [pc, #164]	; (800e19c <_vfiprintf_r+0x230>)
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d125      	bne.n	800e148 <_vfiprintf_r+0x1dc>
 800e0fc:	2207      	movs	r2, #7
 800e0fe:	9b07      	ldr	r3, [sp, #28]
 800e100:	3307      	adds	r3, #7
 800e102:	4393      	bics	r3, r2
 800e104:	3308      	adds	r3, #8
 800e106:	9307      	str	r3, [sp, #28]
 800e108:	6963      	ldr	r3, [r4, #20]
 800e10a:	9a04      	ldr	r2, [sp, #16]
 800e10c:	189b      	adds	r3, r3, r2
 800e10e:	6163      	str	r3, [r4, #20]
 800e110:	e764      	b.n	800dfdc <_vfiprintf_r+0x70>
 800e112:	4343      	muls	r3, r0
 800e114:	002e      	movs	r6, r5
 800e116:	2101      	movs	r1, #1
 800e118:	189b      	adds	r3, r3, r2
 800e11a:	e7a6      	b.n	800e06a <_vfiprintf_r+0xfe>
 800e11c:	2301      	movs	r3, #1
 800e11e:	425b      	negs	r3, r3
 800e120:	e7d0      	b.n	800e0c4 <_vfiprintf_r+0x158>
 800e122:	2300      	movs	r3, #0
 800e124:	200a      	movs	r0, #10
 800e126:	001a      	movs	r2, r3
 800e128:	3601      	adds	r6, #1
 800e12a:	6063      	str	r3, [r4, #4]
 800e12c:	7831      	ldrb	r1, [r6, #0]
 800e12e:	1c75      	adds	r5, r6, #1
 800e130:	3930      	subs	r1, #48	; 0x30
 800e132:	2909      	cmp	r1, #9
 800e134:	d903      	bls.n	800e13e <_vfiprintf_r+0x1d2>
 800e136:	2b00      	cmp	r3, #0
 800e138:	d0c5      	beq.n	800e0c6 <_vfiprintf_r+0x15a>
 800e13a:	9209      	str	r2, [sp, #36]	; 0x24
 800e13c:	e7c3      	b.n	800e0c6 <_vfiprintf_r+0x15a>
 800e13e:	4342      	muls	r2, r0
 800e140:	002e      	movs	r6, r5
 800e142:	2301      	movs	r3, #1
 800e144:	1852      	adds	r2, r2, r1
 800e146:	e7f1      	b.n	800e12c <_vfiprintf_r+0x1c0>
 800e148:	aa07      	add	r2, sp, #28
 800e14a:	9200      	str	r2, [sp, #0]
 800e14c:	0021      	movs	r1, r4
 800e14e:	003a      	movs	r2, r7
 800e150:	4b13      	ldr	r3, [pc, #76]	; (800e1a0 <_vfiprintf_r+0x234>)
 800e152:	9803      	ldr	r0, [sp, #12]
 800e154:	e000      	b.n	800e158 <_vfiprintf_r+0x1ec>
 800e156:	bf00      	nop
 800e158:	9004      	str	r0, [sp, #16]
 800e15a:	9b04      	ldr	r3, [sp, #16]
 800e15c:	3301      	adds	r3, #1
 800e15e:	d1d3      	bne.n	800e108 <_vfiprintf_r+0x19c>
 800e160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e162:	07db      	lsls	r3, r3, #31
 800e164:	d405      	bmi.n	800e172 <_vfiprintf_r+0x206>
 800e166:	89bb      	ldrh	r3, [r7, #12]
 800e168:	059b      	lsls	r3, r3, #22
 800e16a:	d402      	bmi.n	800e172 <_vfiprintf_r+0x206>
 800e16c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e16e:	f7ff fdcc 	bl	800dd0a <__retarget_lock_release_recursive>
 800e172:	89bb      	ldrh	r3, [r7, #12]
 800e174:	065b      	lsls	r3, r3, #25
 800e176:	d500      	bpl.n	800e17a <_vfiprintf_r+0x20e>
 800e178:	e71d      	b.n	800dfb6 <_vfiprintf_r+0x4a>
 800e17a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e17c:	e71d      	b.n	800dfba <_vfiprintf_r+0x4e>
 800e17e:	aa07      	add	r2, sp, #28
 800e180:	9200      	str	r2, [sp, #0]
 800e182:	0021      	movs	r1, r4
 800e184:	003a      	movs	r2, r7
 800e186:	4b06      	ldr	r3, [pc, #24]	; (800e1a0 <_vfiprintf_r+0x234>)
 800e188:	9803      	ldr	r0, [sp, #12]
 800e18a:	f000 f87b 	bl	800e284 <_printf_i>
 800e18e:	e7e3      	b.n	800e158 <_vfiprintf_r+0x1ec>
 800e190:	08011100 	.word	0x08011100
 800e194:	08011106 	.word	0x08011106
 800e198:	0801110a 	.word	0x0801110a
 800e19c:	00000000 	.word	0x00000000
 800e1a0:	0800df47 	.word	0x0800df47

0800e1a4 <_printf_common>:
 800e1a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e1a6:	0016      	movs	r6, r2
 800e1a8:	9301      	str	r3, [sp, #4]
 800e1aa:	688a      	ldr	r2, [r1, #8]
 800e1ac:	690b      	ldr	r3, [r1, #16]
 800e1ae:	000c      	movs	r4, r1
 800e1b0:	9000      	str	r0, [sp, #0]
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	da00      	bge.n	800e1b8 <_printf_common+0x14>
 800e1b6:	0013      	movs	r3, r2
 800e1b8:	0022      	movs	r2, r4
 800e1ba:	6033      	str	r3, [r6, #0]
 800e1bc:	3243      	adds	r2, #67	; 0x43
 800e1be:	7812      	ldrb	r2, [r2, #0]
 800e1c0:	2a00      	cmp	r2, #0
 800e1c2:	d001      	beq.n	800e1c8 <_printf_common+0x24>
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	6033      	str	r3, [r6, #0]
 800e1c8:	6823      	ldr	r3, [r4, #0]
 800e1ca:	069b      	lsls	r3, r3, #26
 800e1cc:	d502      	bpl.n	800e1d4 <_printf_common+0x30>
 800e1ce:	6833      	ldr	r3, [r6, #0]
 800e1d0:	3302      	adds	r3, #2
 800e1d2:	6033      	str	r3, [r6, #0]
 800e1d4:	6822      	ldr	r2, [r4, #0]
 800e1d6:	2306      	movs	r3, #6
 800e1d8:	0015      	movs	r5, r2
 800e1da:	401d      	ands	r5, r3
 800e1dc:	421a      	tst	r2, r3
 800e1de:	d027      	beq.n	800e230 <_printf_common+0x8c>
 800e1e0:	0023      	movs	r3, r4
 800e1e2:	3343      	adds	r3, #67	; 0x43
 800e1e4:	781b      	ldrb	r3, [r3, #0]
 800e1e6:	1e5a      	subs	r2, r3, #1
 800e1e8:	4193      	sbcs	r3, r2
 800e1ea:	6822      	ldr	r2, [r4, #0]
 800e1ec:	0692      	lsls	r2, r2, #26
 800e1ee:	d430      	bmi.n	800e252 <_printf_common+0xae>
 800e1f0:	0022      	movs	r2, r4
 800e1f2:	9901      	ldr	r1, [sp, #4]
 800e1f4:	9800      	ldr	r0, [sp, #0]
 800e1f6:	9d08      	ldr	r5, [sp, #32]
 800e1f8:	3243      	adds	r2, #67	; 0x43
 800e1fa:	47a8      	blx	r5
 800e1fc:	3001      	adds	r0, #1
 800e1fe:	d025      	beq.n	800e24c <_printf_common+0xa8>
 800e200:	2206      	movs	r2, #6
 800e202:	6823      	ldr	r3, [r4, #0]
 800e204:	2500      	movs	r5, #0
 800e206:	4013      	ands	r3, r2
 800e208:	2b04      	cmp	r3, #4
 800e20a:	d105      	bne.n	800e218 <_printf_common+0x74>
 800e20c:	6833      	ldr	r3, [r6, #0]
 800e20e:	68e5      	ldr	r5, [r4, #12]
 800e210:	1aed      	subs	r5, r5, r3
 800e212:	43eb      	mvns	r3, r5
 800e214:	17db      	asrs	r3, r3, #31
 800e216:	401d      	ands	r5, r3
 800e218:	68a3      	ldr	r3, [r4, #8]
 800e21a:	6922      	ldr	r2, [r4, #16]
 800e21c:	4293      	cmp	r3, r2
 800e21e:	dd01      	ble.n	800e224 <_printf_common+0x80>
 800e220:	1a9b      	subs	r3, r3, r2
 800e222:	18ed      	adds	r5, r5, r3
 800e224:	2600      	movs	r6, #0
 800e226:	42b5      	cmp	r5, r6
 800e228:	d120      	bne.n	800e26c <_printf_common+0xc8>
 800e22a:	2000      	movs	r0, #0
 800e22c:	e010      	b.n	800e250 <_printf_common+0xac>
 800e22e:	3501      	adds	r5, #1
 800e230:	68e3      	ldr	r3, [r4, #12]
 800e232:	6832      	ldr	r2, [r6, #0]
 800e234:	1a9b      	subs	r3, r3, r2
 800e236:	42ab      	cmp	r3, r5
 800e238:	ddd2      	ble.n	800e1e0 <_printf_common+0x3c>
 800e23a:	0022      	movs	r2, r4
 800e23c:	2301      	movs	r3, #1
 800e23e:	9901      	ldr	r1, [sp, #4]
 800e240:	9800      	ldr	r0, [sp, #0]
 800e242:	9f08      	ldr	r7, [sp, #32]
 800e244:	3219      	adds	r2, #25
 800e246:	47b8      	blx	r7
 800e248:	3001      	adds	r0, #1
 800e24a:	d1f0      	bne.n	800e22e <_printf_common+0x8a>
 800e24c:	2001      	movs	r0, #1
 800e24e:	4240      	negs	r0, r0
 800e250:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e252:	2030      	movs	r0, #48	; 0x30
 800e254:	18e1      	adds	r1, r4, r3
 800e256:	3143      	adds	r1, #67	; 0x43
 800e258:	7008      	strb	r0, [r1, #0]
 800e25a:	0021      	movs	r1, r4
 800e25c:	1c5a      	adds	r2, r3, #1
 800e25e:	3145      	adds	r1, #69	; 0x45
 800e260:	7809      	ldrb	r1, [r1, #0]
 800e262:	18a2      	adds	r2, r4, r2
 800e264:	3243      	adds	r2, #67	; 0x43
 800e266:	3302      	adds	r3, #2
 800e268:	7011      	strb	r1, [r2, #0]
 800e26a:	e7c1      	b.n	800e1f0 <_printf_common+0x4c>
 800e26c:	0022      	movs	r2, r4
 800e26e:	2301      	movs	r3, #1
 800e270:	9901      	ldr	r1, [sp, #4]
 800e272:	9800      	ldr	r0, [sp, #0]
 800e274:	9f08      	ldr	r7, [sp, #32]
 800e276:	321a      	adds	r2, #26
 800e278:	47b8      	blx	r7
 800e27a:	3001      	adds	r0, #1
 800e27c:	d0e6      	beq.n	800e24c <_printf_common+0xa8>
 800e27e:	3601      	adds	r6, #1
 800e280:	e7d1      	b.n	800e226 <_printf_common+0x82>
	...

0800e284 <_printf_i>:
 800e284:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e286:	b08b      	sub	sp, #44	; 0x2c
 800e288:	9206      	str	r2, [sp, #24]
 800e28a:	000a      	movs	r2, r1
 800e28c:	3243      	adds	r2, #67	; 0x43
 800e28e:	9307      	str	r3, [sp, #28]
 800e290:	9005      	str	r0, [sp, #20]
 800e292:	9204      	str	r2, [sp, #16]
 800e294:	7e0a      	ldrb	r2, [r1, #24]
 800e296:	000c      	movs	r4, r1
 800e298:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e29a:	2a78      	cmp	r2, #120	; 0x78
 800e29c:	d809      	bhi.n	800e2b2 <_printf_i+0x2e>
 800e29e:	2a62      	cmp	r2, #98	; 0x62
 800e2a0:	d80b      	bhi.n	800e2ba <_printf_i+0x36>
 800e2a2:	2a00      	cmp	r2, #0
 800e2a4:	d100      	bne.n	800e2a8 <_printf_i+0x24>
 800e2a6:	e0be      	b.n	800e426 <_printf_i+0x1a2>
 800e2a8:	497c      	ldr	r1, [pc, #496]	; (800e49c <_printf_i+0x218>)
 800e2aa:	9103      	str	r1, [sp, #12]
 800e2ac:	2a58      	cmp	r2, #88	; 0x58
 800e2ae:	d100      	bne.n	800e2b2 <_printf_i+0x2e>
 800e2b0:	e093      	b.n	800e3da <_printf_i+0x156>
 800e2b2:	0026      	movs	r6, r4
 800e2b4:	3642      	adds	r6, #66	; 0x42
 800e2b6:	7032      	strb	r2, [r6, #0]
 800e2b8:	e022      	b.n	800e300 <_printf_i+0x7c>
 800e2ba:	0010      	movs	r0, r2
 800e2bc:	3863      	subs	r0, #99	; 0x63
 800e2be:	2815      	cmp	r0, #21
 800e2c0:	d8f7      	bhi.n	800e2b2 <_printf_i+0x2e>
 800e2c2:	f7f1 ff29 	bl	8000118 <__gnu_thumb1_case_shi>
 800e2c6:	0016      	.short	0x0016
 800e2c8:	fff6001f 	.word	0xfff6001f
 800e2cc:	fff6fff6 	.word	0xfff6fff6
 800e2d0:	001ffff6 	.word	0x001ffff6
 800e2d4:	fff6fff6 	.word	0xfff6fff6
 800e2d8:	fff6fff6 	.word	0xfff6fff6
 800e2dc:	003600a3 	.word	0x003600a3
 800e2e0:	fff60083 	.word	0xfff60083
 800e2e4:	00b4fff6 	.word	0x00b4fff6
 800e2e8:	0036fff6 	.word	0x0036fff6
 800e2ec:	fff6fff6 	.word	0xfff6fff6
 800e2f0:	0087      	.short	0x0087
 800e2f2:	0026      	movs	r6, r4
 800e2f4:	681a      	ldr	r2, [r3, #0]
 800e2f6:	3642      	adds	r6, #66	; 0x42
 800e2f8:	1d11      	adds	r1, r2, #4
 800e2fa:	6019      	str	r1, [r3, #0]
 800e2fc:	6813      	ldr	r3, [r2, #0]
 800e2fe:	7033      	strb	r3, [r6, #0]
 800e300:	2301      	movs	r3, #1
 800e302:	e0a2      	b.n	800e44a <_printf_i+0x1c6>
 800e304:	6818      	ldr	r0, [r3, #0]
 800e306:	6809      	ldr	r1, [r1, #0]
 800e308:	1d02      	adds	r2, r0, #4
 800e30a:	060d      	lsls	r5, r1, #24
 800e30c:	d50b      	bpl.n	800e326 <_printf_i+0xa2>
 800e30e:	6805      	ldr	r5, [r0, #0]
 800e310:	601a      	str	r2, [r3, #0]
 800e312:	2d00      	cmp	r5, #0
 800e314:	da03      	bge.n	800e31e <_printf_i+0x9a>
 800e316:	232d      	movs	r3, #45	; 0x2d
 800e318:	9a04      	ldr	r2, [sp, #16]
 800e31a:	426d      	negs	r5, r5
 800e31c:	7013      	strb	r3, [r2, #0]
 800e31e:	4b5f      	ldr	r3, [pc, #380]	; (800e49c <_printf_i+0x218>)
 800e320:	270a      	movs	r7, #10
 800e322:	9303      	str	r3, [sp, #12]
 800e324:	e01b      	b.n	800e35e <_printf_i+0xda>
 800e326:	6805      	ldr	r5, [r0, #0]
 800e328:	601a      	str	r2, [r3, #0]
 800e32a:	0649      	lsls	r1, r1, #25
 800e32c:	d5f1      	bpl.n	800e312 <_printf_i+0x8e>
 800e32e:	b22d      	sxth	r5, r5
 800e330:	e7ef      	b.n	800e312 <_printf_i+0x8e>
 800e332:	680d      	ldr	r5, [r1, #0]
 800e334:	6819      	ldr	r1, [r3, #0]
 800e336:	1d08      	adds	r0, r1, #4
 800e338:	6018      	str	r0, [r3, #0]
 800e33a:	062e      	lsls	r6, r5, #24
 800e33c:	d501      	bpl.n	800e342 <_printf_i+0xbe>
 800e33e:	680d      	ldr	r5, [r1, #0]
 800e340:	e003      	b.n	800e34a <_printf_i+0xc6>
 800e342:	066d      	lsls	r5, r5, #25
 800e344:	d5fb      	bpl.n	800e33e <_printf_i+0xba>
 800e346:	680d      	ldr	r5, [r1, #0]
 800e348:	b2ad      	uxth	r5, r5
 800e34a:	4b54      	ldr	r3, [pc, #336]	; (800e49c <_printf_i+0x218>)
 800e34c:	2708      	movs	r7, #8
 800e34e:	9303      	str	r3, [sp, #12]
 800e350:	2a6f      	cmp	r2, #111	; 0x6f
 800e352:	d000      	beq.n	800e356 <_printf_i+0xd2>
 800e354:	3702      	adds	r7, #2
 800e356:	0023      	movs	r3, r4
 800e358:	2200      	movs	r2, #0
 800e35a:	3343      	adds	r3, #67	; 0x43
 800e35c:	701a      	strb	r2, [r3, #0]
 800e35e:	6863      	ldr	r3, [r4, #4]
 800e360:	60a3      	str	r3, [r4, #8]
 800e362:	2b00      	cmp	r3, #0
 800e364:	db03      	blt.n	800e36e <_printf_i+0xea>
 800e366:	2104      	movs	r1, #4
 800e368:	6822      	ldr	r2, [r4, #0]
 800e36a:	438a      	bics	r2, r1
 800e36c:	6022      	str	r2, [r4, #0]
 800e36e:	2d00      	cmp	r5, #0
 800e370:	d102      	bne.n	800e378 <_printf_i+0xf4>
 800e372:	9e04      	ldr	r6, [sp, #16]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d00c      	beq.n	800e392 <_printf_i+0x10e>
 800e378:	9e04      	ldr	r6, [sp, #16]
 800e37a:	0028      	movs	r0, r5
 800e37c:	0039      	movs	r1, r7
 800e37e:	f7f1 ff5b 	bl	8000238 <__aeabi_uidivmod>
 800e382:	9b03      	ldr	r3, [sp, #12]
 800e384:	3e01      	subs	r6, #1
 800e386:	5c5b      	ldrb	r3, [r3, r1]
 800e388:	7033      	strb	r3, [r6, #0]
 800e38a:	002b      	movs	r3, r5
 800e38c:	0005      	movs	r5, r0
 800e38e:	429f      	cmp	r7, r3
 800e390:	d9f3      	bls.n	800e37a <_printf_i+0xf6>
 800e392:	2f08      	cmp	r7, #8
 800e394:	d109      	bne.n	800e3aa <_printf_i+0x126>
 800e396:	6823      	ldr	r3, [r4, #0]
 800e398:	07db      	lsls	r3, r3, #31
 800e39a:	d506      	bpl.n	800e3aa <_printf_i+0x126>
 800e39c:	6862      	ldr	r2, [r4, #4]
 800e39e:	6923      	ldr	r3, [r4, #16]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	dc02      	bgt.n	800e3aa <_printf_i+0x126>
 800e3a4:	2330      	movs	r3, #48	; 0x30
 800e3a6:	3e01      	subs	r6, #1
 800e3a8:	7033      	strb	r3, [r6, #0]
 800e3aa:	9b04      	ldr	r3, [sp, #16]
 800e3ac:	1b9b      	subs	r3, r3, r6
 800e3ae:	6123      	str	r3, [r4, #16]
 800e3b0:	9b07      	ldr	r3, [sp, #28]
 800e3b2:	0021      	movs	r1, r4
 800e3b4:	9300      	str	r3, [sp, #0]
 800e3b6:	9805      	ldr	r0, [sp, #20]
 800e3b8:	9b06      	ldr	r3, [sp, #24]
 800e3ba:	aa09      	add	r2, sp, #36	; 0x24
 800e3bc:	f7ff fef2 	bl	800e1a4 <_printf_common>
 800e3c0:	3001      	adds	r0, #1
 800e3c2:	d147      	bne.n	800e454 <_printf_i+0x1d0>
 800e3c4:	2001      	movs	r0, #1
 800e3c6:	4240      	negs	r0, r0
 800e3c8:	b00b      	add	sp, #44	; 0x2c
 800e3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3cc:	2220      	movs	r2, #32
 800e3ce:	6809      	ldr	r1, [r1, #0]
 800e3d0:	430a      	orrs	r2, r1
 800e3d2:	6022      	str	r2, [r4, #0]
 800e3d4:	2278      	movs	r2, #120	; 0x78
 800e3d6:	4932      	ldr	r1, [pc, #200]	; (800e4a0 <_printf_i+0x21c>)
 800e3d8:	9103      	str	r1, [sp, #12]
 800e3da:	0021      	movs	r1, r4
 800e3dc:	3145      	adds	r1, #69	; 0x45
 800e3de:	700a      	strb	r2, [r1, #0]
 800e3e0:	6819      	ldr	r1, [r3, #0]
 800e3e2:	6822      	ldr	r2, [r4, #0]
 800e3e4:	c920      	ldmia	r1!, {r5}
 800e3e6:	0610      	lsls	r0, r2, #24
 800e3e8:	d402      	bmi.n	800e3f0 <_printf_i+0x16c>
 800e3ea:	0650      	lsls	r0, r2, #25
 800e3ec:	d500      	bpl.n	800e3f0 <_printf_i+0x16c>
 800e3ee:	b2ad      	uxth	r5, r5
 800e3f0:	6019      	str	r1, [r3, #0]
 800e3f2:	07d3      	lsls	r3, r2, #31
 800e3f4:	d502      	bpl.n	800e3fc <_printf_i+0x178>
 800e3f6:	2320      	movs	r3, #32
 800e3f8:	4313      	orrs	r3, r2
 800e3fa:	6023      	str	r3, [r4, #0]
 800e3fc:	2710      	movs	r7, #16
 800e3fe:	2d00      	cmp	r5, #0
 800e400:	d1a9      	bne.n	800e356 <_printf_i+0xd2>
 800e402:	2220      	movs	r2, #32
 800e404:	6823      	ldr	r3, [r4, #0]
 800e406:	4393      	bics	r3, r2
 800e408:	6023      	str	r3, [r4, #0]
 800e40a:	e7a4      	b.n	800e356 <_printf_i+0xd2>
 800e40c:	681a      	ldr	r2, [r3, #0]
 800e40e:	680d      	ldr	r5, [r1, #0]
 800e410:	1d10      	adds	r0, r2, #4
 800e412:	6949      	ldr	r1, [r1, #20]
 800e414:	6018      	str	r0, [r3, #0]
 800e416:	6813      	ldr	r3, [r2, #0]
 800e418:	062e      	lsls	r6, r5, #24
 800e41a:	d501      	bpl.n	800e420 <_printf_i+0x19c>
 800e41c:	6019      	str	r1, [r3, #0]
 800e41e:	e002      	b.n	800e426 <_printf_i+0x1a2>
 800e420:	066d      	lsls	r5, r5, #25
 800e422:	d5fb      	bpl.n	800e41c <_printf_i+0x198>
 800e424:	8019      	strh	r1, [r3, #0]
 800e426:	2300      	movs	r3, #0
 800e428:	9e04      	ldr	r6, [sp, #16]
 800e42a:	6123      	str	r3, [r4, #16]
 800e42c:	e7c0      	b.n	800e3b0 <_printf_i+0x12c>
 800e42e:	681a      	ldr	r2, [r3, #0]
 800e430:	1d11      	adds	r1, r2, #4
 800e432:	6019      	str	r1, [r3, #0]
 800e434:	6816      	ldr	r6, [r2, #0]
 800e436:	2100      	movs	r1, #0
 800e438:	0030      	movs	r0, r6
 800e43a:	6862      	ldr	r2, [r4, #4]
 800e43c:	f000 f984 	bl	800e748 <memchr>
 800e440:	2800      	cmp	r0, #0
 800e442:	d001      	beq.n	800e448 <_printf_i+0x1c4>
 800e444:	1b80      	subs	r0, r0, r6
 800e446:	6060      	str	r0, [r4, #4]
 800e448:	6863      	ldr	r3, [r4, #4]
 800e44a:	6123      	str	r3, [r4, #16]
 800e44c:	2300      	movs	r3, #0
 800e44e:	9a04      	ldr	r2, [sp, #16]
 800e450:	7013      	strb	r3, [r2, #0]
 800e452:	e7ad      	b.n	800e3b0 <_printf_i+0x12c>
 800e454:	0032      	movs	r2, r6
 800e456:	6923      	ldr	r3, [r4, #16]
 800e458:	9906      	ldr	r1, [sp, #24]
 800e45a:	9805      	ldr	r0, [sp, #20]
 800e45c:	9d07      	ldr	r5, [sp, #28]
 800e45e:	47a8      	blx	r5
 800e460:	3001      	adds	r0, #1
 800e462:	d0af      	beq.n	800e3c4 <_printf_i+0x140>
 800e464:	6823      	ldr	r3, [r4, #0]
 800e466:	079b      	lsls	r3, r3, #30
 800e468:	d415      	bmi.n	800e496 <_printf_i+0x212>
 800e46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e46c:	68e0      	ldr	r0, [r4, #12]
 800e46e:	4298      	cmp	r0, r3
 800e470:	daaa      	bge.n	800e3c8 <_printf_i+0x144>
 800e472:	0018      	movs	r0, r3
 800e474:	e7a8      	b.n	800e3c8 <_printf_i+0x144>
 800e476:	0022      	movs	r2, r4
 800e478:	2301      	movs	r3, #1
 800e47a:	9906      	ldr	r1, [sp, #24]
 800e47c:	9805      	ldr	r0, [sp, #20]
 800e47e:	9e07      	ldr	r6, [sp, #28]
 800e480:	3219      	adds	r2, #25
 800e482:	47b0      	blx	r6
 800e484:	3001      	adds	r0, #1
 800e486:	d09d      	beq.n	800e3c4 <_printf_i+0x140>
 800e488:	3501      	adds	r5, #1
 800e48a:	68e3      	ldr	r3, [r4, #12]
 800e48c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e48e:	1a9b      	subs	r3, r3, r2
 800e490:	42ab      	cmp	r3, r5
 800e492:	dcf0      	bgt.n	800e476 <_printf_i+0x1f2>
 800e494:	e7e9      	b.n	800e46a <_printf_i+0x1e6>
 800e496:	2500      	movs	r5, #0
 800e498:	e7f7      	b.n	800e48a <_printf_i+0x206>
 800e49a:	46c0      	nop			; (mov r8, r8)
 800e49c:	08011111 	.word	0x08011111
 800e4a0:	08011122 	.word	0x08011122

0800e4a4 <__sflush_r>:
 800e4a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4a6:	898b      	ldrh	r3, [r1, #12]
 800e4a8:	0005      	movs	r5, r0
 800e4aa:	000c      	movs	r4, r1
 800e4ac:	071a      	lsls	r2, r3, #28
 800e4ae:	d45c      	bmi.n	800e56a <__sflush_r+0xc6>
 800e4b0:	684a      	ldr	r2, [r1, #4]
 800e4b2:	2a00      	cmp	r2, #0
 800e4b4:	dc04      	bgt.n	800e4c0 <__sflush_r+0x1c>
 800e4b6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800e4b8:	2a00      	cmp	r2, #0
 800e4ba:	dc01      	bgt.n	800e4c0 <__sflush_r+0x1c>
 800e4bc:	2000      	movs	r0, #0
 800e4be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e4c0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800e4c2:	2f00      	cmp	r7, #0
 800e4c4:	d0fa      	beq.n	800e4bc <__sflush_r+0x18>
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	2080      	movs	r0, #128	; 0x80
 800e4ca:	682e      	ldr	r6, [r5, #0]
 800e4cc:	602a      	str	r2, [r5, #0]
 800e4ce:	001a      	movs	r2, r3
 800e4d0:	0140      	lsls	r0, r0, #5
 800e4d2:	6a21      	ldr	r1, [r4, #32]
 800e4d4:	4002      	ands	r2, r0
 800e4d6:	4203      	tst	r3, r0
 800e4d8:	d034      	beq.n	800e544 <__sflush_r+0xa0>
 800e4da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e4dc:	89a3      	ldrh	r3, [r4, #12]
 800e4de:	075b      	lsls	r3, r3, #29
 800e4e0:	d506      	bpl.n	800e4f0 <__sflush_r+0x4c>
 800e4e2:	6863      	ldr	r3, [r4, #4]
 800e4e4:	1ac0      	subs	r0, r0, r3
 800e4e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d001      	beq.n	800e4f0 <__sflush_r+0x4c>
 800e4ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e4ee:	1ac0      	subs	r0, r0, r3
 800e4f0:	0002      	movs	r2, r0
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	0028      	movs	r0, r5
 800e4f6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800e4f8:	6a21      	ldr	r1, [r4, #32]
 800e4fa:	47b8      	blx	r7
 800e4fc:	89a2      	ldrh	r2, [r4, #12]
 800e4fe:	1c43      	adds	r3, r0, #1
 800e500:	d106      	bne.n	800e510 <__sflush_r+0x6c>
 800e502:	6829      	ldr	r1, [r5, #0]
 800e504:	291d      	cmp	r1, #29
 800e506:	d82c      	bhi.n	800e562 <__sflush_r+0xbe>
 800e508:	4b2a      	ldr	r3, [pc, #168]	; (800e5b4 <__sflush_r+0x110>)
 800e50a:	410b      	asrs	r3, r1
 800e50c:	07db      	lsls	r3, r3, #31
 800e50e:	d428      	bmi.n	800e562 <__sflush_r+0xbe>
 800e510:	2300      	movs	r3, #0
 800e512:	6063      	str	r3, [r4, #4]
 800e514:	6923      	ldr	r3, [r4, #16]
 800e516:	6023      	str	r3, [r4, #0]
 800e518:	04d2      	lsls	r2, r2, #19
 800e51a:	d505      	bpl.n	800e528 <__sflush_r+0x84>
 800e51c:	1c43      	adds	r3, r0, #1
 800e51e:	d102      	bne.n	800e526 <__sflush_r+0x82>
 800e520:	682b      	ldr	r3, [r5, #0]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d100      	bne.n	800e528 <__sflush_r+0x84>
 800e526:	6560      	str	r0, [r4, #84]	; 0x54
 800e528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e52a:	602e      	str	r6, [r5, #0]
 800e52c:	2900      	cmp	r1, #0
 800e52e:	d0c5      	beq.n	800e4bc <__sflush_r+0x18>
 800e530:	0023      	movs	r3, r4
 800e532:	3344      	adds	r3, #68	; 0x44
 800e534:	4299      	cmp	r1, r3
 800e536:	d002      	beq.n	800e53e <__sflush_r+0x9a>
 800e538:	0028      	movs	r0, r5
 800e53a:	f7ff fbf1 	bl	800dd20 <_free_r>
 800e53e:	2000      	movs	r0, #0
 800e540:	6360      	str	r0, [r4, #52]	; 0x34
 800e542:	e7bc      	b.n	800e4be <__sflush_r+0x1a>
 800e544:	2301      	movs	r3, #1
 800e546:	0028      	movs	r0, r5
 800e548:	47b8      	blx	r7
 800e54a:	1c43      	adds	r3, r0, #1
 800e54c:	d1c6      	bne.n	800e4dc <__sflush_r+0x38>
 800e54e:	682b      	ldr	r3, [r5, #0]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d0c3      	beq.n	800e4dc <__sflush_r+0x38>
 800e554:	2b1d      	cmp	r3, #29
 800e556:	d001      	beq.n	800e55c <__sflush_r+0xb8>
 800e558:	2b16      	cmp	r3, #22
 800e55a:	d101      	bne.n	800e560 <__sflush_r+0xbc>
 800e55c:	602e      	str	r6, [r5, #0]
 800e55e:	e7ad      	b.n	800e4bc <__sflush_r+0x18>
 800e560:	89a2      	ldrh	r2, [r4, #12]
 800e562:	2340      	movs	r3, #64	; 0x40
 800e564:	4313      	orrs	r3, r2
 800e566:	81a3      	strh	r3, [r4, #12]
 800e568:	e7a9      	b.n	800e4be <__sflush_r+0x1a>
 800e56a:	690e      	ldr	r6, [r1, #16]
 800e56c:	2e00      	cmp	r6, #0
 800e56e:	d0a5      	beq.n	800e4bc <__sflush_r+0x18>
 800e570:	680f      	ldr	r7, [r1, #0]
 800e572:	600e      	str	r6, [r1, #0]
 800e574:	1bba      	subs	r2, r7, r6
 800e576:	9201      	str	r2, [sp, #4]
 800e578:	2200      	movs	r2, #0
 800e57a:	079b      	lsls	r3, r3, #30
 800e57c:	d100      	bne.n	800e580 <__sflush_r+0xdc>
 800e57e:	694a      	ldr	r2, [r1, #20]
 800e580:	60a2      	str	r2, [r4, #8]
 800e582:	9b01      	ldr	r3, [sp, #4]
 800e584:	2b00      	cmp	r3, #0
 800e586:	dd99      	ble.n	800e4bc <__sflush_r+0x18>
 800e588:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e58a:	0032      	movs	r2, r6
 800e58c:	001f      	movs	r7, r3
 800e58e:	0028      	movs	r0, r5
 800e590:	9b01      	ldr	r3, [sp, #4]
 800e592:	6a21      	ldr	r1, [r4, #32]
 800e594:	47b8      	blx	r7
 800e596:	2800      	cmp	r0, #0
 800e598:	dc06      	bgt.n	800e5a8 <__sflush_r+0x104>
 800e59a:	2340      	movs	r3, #64	; 0x40
 800e59c:	2001      	movs	r0, #1
 800e59e:	89a2      	ldrh	r2, [r4, #12]
 800e5a0:	4240      	negs	r0, r0
 800e5a2:	4313      	orrs	r3, r2
 800e5a4:	81a3      	strh	r3, [r4, #12]
 800e5a6:	e78a      	b.n	800e4be <__sflush_r+0x1a>
 800e5a8:	9b01      	ldr	r3, [sp, #4]
 800e5aa:	1836      	adds	r6, r6, r0
 800e5ac:	1a1b      	subs	r3, r3, r0
 800e5ae:	9301      	str	r3, [sp, #4]
 800e5b0:	e7e7      	b.n	800e582 <__sflush_r+0xde>
 800e5b2:	46c0      	nop			; (mov r8, r8)
 800e5b4:	dfbffffe 	.word	0xdfbffffe

0800e5b8 <_fflush_r>:
 800e5b8:	690b      	ldr	r3, [r1, #16]
 800e5ba:	b570      	push	{r4, r5, r6, lr}
 800e5bc:	0005      	movs	r5, r0
 800e5be:	000c      	movs	r4, r1
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d102      	bne.n	800e5ca <_fflush_r+0x12>
 800e5c4:	2500      	movs	r5, #0
 800e5c6:	0028      	movs	r0, r5
 800e5c8:	bd70      	pop	{r4, r5, r6, pc}
 800e5ca:	2800      	cmp	r0, #0
 800e5cc:	d004      	beq.n	800e5d8 <_fflush_r+0x20>
 800e5ce:	6a03      	ldr	r3, [r0, #32]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d101      	bne.n	800e5d8 <_fflush_r+0x20>
 800e5d4:	f7ff f970 	bl	800d8b8 <__sinit>
 800e5d8:	220c      	movs	r2, #12
 800e5da:	5ea3      	ldrsh	r3, [r4, r2]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d0f1      	beq.n	800e5c4 <_fflush_r+0xc>
 800e5e0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e5e2:	07d2      	lsls	r2, r2, #31
 800e5e4:	d404      	bmi.n	800e5f0 <_fflush_r+0x38>
 800e5e6:	059b      	lsls	r3, r3, #22
 800e5e8:	d402      	bmi.n	800e5f0 <_fflush_r+0x38>
 800e5ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5ec:	f7ff fb8c 	bl	800dd08 <__retarget_lock_acquire_recursive>
 800e5f0:	0028      	movs	r0, r5
 800e5f2:	0021      	movs	r1, r4
 800e5f4:	f7ff ff56 	bl	800e4a4 <__sflush_r>
 800e5f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5fa:	0005      	movs	r5, r0
 800e5fc:	07db      	lsls	r3, r3, #31
 800e5fe:	d4e2      	bmi.n	800e5c6 <_fflush_r+0xe>
 800e600:	89a3      	ldrh	r3, [r4, #12]
 800e602:	059b      	lsls	r3, r3, #22
 800e604:	d4df      	bmi.n	800e5c6 <_fflush_r+0xe>
 800e606:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e608:	f7ff fb7f 	bl	800dd0a <__retarget_lock_release_recursive>
 800e60c:	e7db      	b.n	800e5c6 <_fflush_r+0xe>
	...

0800e610 <__swhatbuf_r>:
 800e610:	b570      	push	{r4, r5, r6, lr}
 800e612:	000e      	movs	r6, r1
 800e614:	001d      	movs	r5, r3
 800e616:	230e      	movs	r3, #14
 800e618:	5ec9      	ldrsh	r1, [r1, r3]
 800e61a:	0014      	movs	r4, r2
 800e61c:	b096      	sub	sp, #88	; 0x58
 800e61e:	2900      	cmp	r1, #0
 800e620:	da0c      	bge.n	800e63c <__swhatbuf_r+0x2c>
 800e622:	89b2      	ldrh	r2, [r6, #12]
 800e624:	2380      	movs	r3, #128	; 0x80
 800e626:	0011      	movs	r1, r2
 800e628:	4019      	ands	r1, r3
 800e62a:	421a      	tst	r2, r3
 800e62c:	d013      	beq.n	800e656 <__swhatbuf_r+0x46>
 800e62e:	2100      	movs	r1, #0
 800e630:	3b40      	subs	r3, #64	; 0x40
 800e632:	2000      	movs	r0, #0
 800e634:	6029      	str	r1, [r5, #0]
 800e636:	6023      	str	r3, [r4, #0]
 800e638:	b016      	add	sp, #88	; 0x58
 800e63a:	bd70      	pop	{r4, r5, r6, pc}
 800e63c:	466a      	mov	r2, sp
 800e63e:	f000 f84d 	bl	800e6dc <_fstat_r>
 800e642:	2800      	cmp	r0, #0
 800e644:	dbed      	blt.n	800e622 <__swhatbuf_r+0x12>
 800e646:	23f0      	movs	r3, #240	; 0xf0
 800e648:	9901      	ldr	r1, [sp, #4]
 800e64a:	021b      	lsls	r3, r3, #8
 800e64c:	4019      	ands	r1, r3
 800e64e:	4b03      	ldr	r3, [pc, #12]	; (800e65c <__swhatbuf_r+0x4c>)
 800e650:	18c9      	adds	r1, r1, r3
 800e652:	424b      	negs	r3, r1
 800e654:	4159      	adcs	r1, r3
 800e656:	2380      	movs	r3, #128	; 0x80
 800e658:	00db      	lsls	r3, r3, #3
 800e65a:	e7ea      	b.n	800e632 <__swhatbuf_r+0x22>
 800e65c:	ffffe000 	.word	0xffffe000

0800e660 <__smakebuf_r>:
 800e660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e662:	2602      	movs	r6, #2
 800e664:	898b      	ldrh	r3, [r1, #12]
 800e666:	0005      	movs	r5, r0
 800e668:	000c      	movs	r4, r1
 800e66a:	4233      	tst	r3, r6
 800e66c:	d006      	beq.n	800e67c <__smakebuf_r+0x1c>
 800e66e:	0023      	movs	r3, r4
 800e670:	3347      	adds	r3, #71	; 0x47
 800e672:	6023      	str	r3, [r4, #0]
 800e674:	6123      	str	r3, [r4, #16]
 800e676:	2301      	movs	r3, #1
 800e678:	6163      	str	r3, [r4, #20]
 800e67a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800e67c:	466a      	mov	r2, sp
 800e67e:	ab01      	add	r3, sp, #4
 800e680:	f7ff ffc6 	bl	800e610 <__swhatbuf_r>
 800e684:	9900      	ldr	r1, [sp, #0]
 800e686:	0007      	movs	r7, r0
 800e688:	0028      	movs	r0, r5
 800e68a:	f7ff fbb5 	bl	800ddf8 <_malloc_r>
 800e68e:	2800      	cmp	r0, #0
 800e690:	d108      	bne.n	800e6a4 <__smakebuf_r+0x44>
 800e692:	220c      	movs	r2, #12
 800e694:	5ea3      	ldrsh	r3, [r4, r2]
 800e696:	059a      	lsls	r2, r3, #22
 800e698:	d4ef      	bmi.n	800e67a <__smakebuf_r+0x1a>
 800e69a:	2203      	movs	r2, #3
 800e69c:	4393      	bics	r3, r2
 800e69e:	431e      	orrs	r6, r3
 800e6a0:	81a6      	strh	r6, [r4, #12]
 800e6a2:	e7e4      	b.n	800e66e <__smakebuf_r+0xe>
 800e6a4:	2380      	movs	r3, #128	; 0x80
 800e6a6:	89a2      	ldrh	r2, [r4, #12]
 800e6a8:	6020      	str	r0, [r4, #0]
 800e6aa:	4313      	orrs	r3, r2
 800e6ac:	81a3      	strh	r3, [r4, #12]
 800e6ae:	9b00      	ldr	r3, [sp, #0]
 800e6b0:	6120      	str	r0, [r4, #16]
 800e6b2:	6163      	str	r3, [r4, #20]
 800e6b4:	9b01      	ldr	r3, [sp, #4]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d00c      	beq.n	800e6d4 <__smakebuf_r+0x74>
 800e6ba:	0028      	movs	r0, r5
 800e6bc:	230e      	movs	r3, #14
 800e6be:	5ee1      	ldrsh	r1, [r4, r3]
 800e6c0:	f000 f81e 	bl	800e700 <_isatty_r>
 800e6c4:	2800      	cmp	r0, #0
 800e6c6:	d005      	beq.n	800e6d4 <__smakebuf_r+0x74>
 800e6c8:	2303      	movs	r3, #3
 800e6ca:	89a2      	ldrh	r2, [r4, #12]
 800e6cc:	439a      	bics	r2, r3
 800e6ce:	3b02      	subs	r3, #2
 800e6d0:	4313      	orrs	r3, r2
 800e6d2:	81a3      	strh	r3, [r4, #12]
 800e6d4:	89a3      	ldrh	r3, [r4, #12]
 800e6d6:	433b      	orrs	r3, r7
 800e6d8:	81a3      	strh	r3, [r4, #12]
 800e6da:	e7ce      	b.n	800e67a <__smakebuf_r+0x1a>

0800e6dc <_fstat_r>:
 800e6dc:	2300      	movs	r3, #0
 800e6de:	b570      	push	{r4, r5, r6, lr}
 800e6e0:	4d06      	ldr	r5, [pc, #24]	; (800e6fc <_fstat_r+0x20>)
 800e6e2:	0004      	movs	r4, r0
 800e6e4:	0008      	movs	r0, r1
 800e6e6:	0011      	movs	r1, r2
 800e6e8:	602b      	str	r3, [r5, #0]
 800e6ea:	f7f5 fd08 	bl	80040fe <_fstat>
 800e6ee:	1c43      	adds	r3, r0, #1
 800e6f0:	d103      	bne.n	800e6fa <_fstat_r+0x1e>
 800e6f2:	682b      	ldr	r3, [r5, #0]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d000      	beq.n	800e6fa <_fstat_r+0x1e>
 800e6f8:	6023      	str	r3, [r4, #0]
 800e6fa:	bd70      	pop	{r4, r5, r6, pc}
 800e6fc:	20004d7c 	.word	0x20004d7c

0800e700 <_isatty_r>:
 800e700:	2300      	movs	r3, #0
 800e702:	b570      	push	{r4, r5, r6, lr}
 800e704:	4d06      	ldr	r5, [pc, #24]	; (800e720 <_isatty_r+0x20>)
 800e706:	0004      	movs	r4, r0
 800e708:	0008      	movs	r0, r1
 800e70a:	602b      	str	r3, [r5, #0]
 800e70c:	f7f5 fd05 	bl	800411a <_isatty>
 800e710:	1c43      	adds	r3, r0, #1
 800e712:	d103      	bne.n	800e71c <_isatty_r+0x1c>
 800e714:	682b      	ldr	r3, [r5, #0]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d000      	beq.n	800e71c <_isatty_r+0x1c>
 800e71a:	6023      	str	r3, [r4, #0]
 800e71c:	bd70      	pop	{r4, r5, r6, pc}
 800e71e:	46c0      	nop			; (mov r8, r8)
 800e720:	20004d7c 	.word	0x20004d7c

0800e724 <_sbrk_r>:
 800e724:	2300      	movs	r3, #0
 800e726:	b570      	push	{r4, r5, r6, lr}
 800e728:	4d06      	ldr	r5, [pc, #24]	; (800e744 <_sbrk_r+0x20>)
 800e72a:	0004      	movs	r4, r0
 800e72c:	0008      	movs	r0, r1
 800e72e:	602b      	str	r3, [r5, #0]
 800e730:	f7f5 fd08 	bl	8004144 <_sbrk>
 800e734:	1c43      	adds	r3, r0, #1
 800e736:	d103      	bne.n	800e740 <_sbrk_r+0x1c>
 800e738:	682b      	ldr	r3, [r5, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d000      	beq.n	800e740 <_sbrk_r+0x1c>
 800e73e:	6023      	str	r3, [r4, #0]
 800e740:	bd70      	pop	{r4, r5, r6, pc}
 800e742:	46c0      	nop			; (mov r8, r8)
 800e744:	20004d7c 	.word	0x20004d7c

0800e748 <memchr>:
 800e748:	b2c9      	uxtb	r1, r1
 800e74a:	1882      	adds	r2, r0, r2
 800e74c:	4290      	cmp	r0, r2
 800e74e:	d101      	bne.n	800e754 <memchr+0xc>
 800e750:	2000      	movs	r0, #0
 800e752:	4770      	bx	lr
 800e754:	7803      	ldrb	r3, [r0, #0]
 800e756:	428b      	cmp	r3, r1
 800e758:	d0fb      	beq.n	800e752 <memchr+0xa>
 800e75a:	3001      	adds	r0, #1
 800e75c:	e7f6      	b.n	800e74c <memchr+0x4>
	...

0800e760 <pow>:
 800e760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e762:	0014      	movs	r4, r2
 800e764:	001d      	movs	r5, r3
 800e766:	9000      	str	r0, [sp, #0]
 800e768:	9101      	str	r1, [sp, #4]
 800e76a:	f000 fcb1 	bl	800f0d0 <__ieee754_pow>
 800e76e:	0022      	movs	r2, r4
 800e770:	0006      	movs	r6, r0
 800e772:	000f      	movs	r7, r1
 800e774:	002b      	movs	r3, r5
 800e776:	0020      	movs	r0, r4
 800e778:	0029      	movs	r1, r5
 800e77a:	f7f4 fb45 	bl	8002e08 <__aeabi_dcmpun>
 800e77e:	2800      	cmp	r0, #0
 800e780:	d13f      	bne.n	800e802 <pow+0xa2>
 800e782:	9800      	ldr	r0, [sp, #0]
 800e784:	9901      	ldr	r1, [sp, #4]
 800e786:	2200      	movs	r2, #0
 800e788:	2300      	movs	r3, #0
 800e78a:	f7f1 fe55 	bl	8000438 <__aeabi_dcmpeq>
 800e78e:	2800      	cmp	r0, #0
 800e790:	d019      	beq.n	800e7c6 <pow+0x66>
 800e792:	2200      	movs	r2, #0
 800e794:	2300      	movs	r3, #0
 800e796:	0020      	movs	r0, r4
 800e798:	0029      	movs	r1, r5
 800e79a:	f7f1 fe4d 	bl	8000438 <__aeabi_dcmpeq>
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	d146      	bne.n	800e830 <pow+0xd0>
 800e7a2:	0020      	movs	r0, r4
 800e7a4:	0029      	movs	r1, r5
 800e7a6:	f000 fa33 	bl	800ec10 <finite>
 800e7aa:	2800      	cmp	r0, #0
 800e7ac:	d029      	beq.n	800e802 <pow+0xa2>
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	0020      	movs	r0, r4
 800e7b4:	0029      	movs	r1, r5
 800e7b6:	f7f1 fe45 	bl	8000444 <__aeabi_dcmplt>
 800e7ba:	2800      	cmp	r0, #0
 800e7bc:	d021      	beq.n	800e802 <pow+0xa2>
 800e7be:	f7ff fa79 	bl	800dcb4 <__errno>
 800e7c2:	2322      	movs	r3, #34	; 0x22
 800e7c4:	e01c      	b.n	800e800 <pow+0xa0>
 800e7c6:	0030      	movs	r0, r6
 800e7c8:	0039      	movs	r1, r7
 800e7ca:	f000 fa21 	bl	800ec10 <finite>
 800e7ce:	2800      	cmp	r0, #0
 800e7d0:	d11b      	bne.n	800e80a <pow+0xaa>
 800e7d2:	9800      	ldr	r0, [sp, #0]
 800e7d4:	9901      	ldr	r1, [sp, #4]
 800e7d6:	f000 fa1b 	bl	800ec10 <finite>
 800e7da:	2800      	cmp	r0, #0
 800e7dc:	d015      	beq.n	800e80a <pow+0xaa>
 800e7de:	0020      	movs	r0, r4
 800e7e0:	0029      	movs	r1, r5
 800e7e2:	f000 fa15 	bl	800ec10 <finite>
 800e7e6:	2800      	cmp	r0, #0
 800e7e8:	d00f      	beq.n	800e80a <pow+0xaa>
 800e7ea:	0032      	movs	r2, r6
 800e7ec:	003b      	movs	r3, r7
 800e7ee:	0030      	movs	r0, r6
 800e7f0:	0039      	movs	r1, r7
 800e7f2:	f7f4 fb09 	bl	8002e08 <__aeabi_dcmpun>
 800e7f6:	2800      	cmp	r0, #0
 800e7f8:	d0e1      	beq.n	800e7be <pow+0x5e>
 800e7fa:	f7ff fa5b 	bl	800dcb4 <__errno>
 800e7fe:	2321      	movs	r3, #33	; 0x21
 800e800:	6003      	str	r3, [r0, #0]
 800e802:	0030      	movs	r0, r6
 800e804:	0039      	movs	r1, r7
 800e806:	b003      	add	sp, #12
 800e808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e80a:	2200      	movs	r2, #0
 800e80c:	2300      	movs	r3, #0
 800e80e:	0030      	movs	r0, r6
 800e810:	0039      	movs	r1, r7
 800e812:	f7f1 fe11 	bl	8000438 <__aeabi_dcmpeq>
 800e816:	2800      	cmp	r0, #0
 800e818:	d0f3      	beq.n	800e802 <pow+0xa2>
 800e81a:	9800      	ldr	r0, [sp, #0]
 800e81c:	9901      	ldr	r1, [sp, #4]
 800e81e:	f000 f9f7 	bl	800ec10 <finite>
 800e822:	2800      	cmp	r0, #0
 800e824:	d0ed      	beq.n	800e802 <pow+0xa2>
 800e826:	0020      	movs	r0, r4
 800e828:	0029      	movs	r1, r5
 800e82a:	f000 f9f1 	bl	800ec10 <finite>
 800e82e:	e7c4      	b.n	800e7ba <pow+0x5a>
 800e830:	2600      	movs	r6, #0
 800e832:	4f01      	ldr	r7, [pc, #4]	; (800e838 <pow+0xd8>)
 800e834:	e7e5      	b.n	800e802 <pow+0xa2>
 800e836:	46c0      	nop			; (mov r8, r8)
 800e838:	3ff00000 	.word	0x3ff00000

0800e83c <sqrt>:
 800e83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e83e:	0004      	movs	r4, r0
 800e840:	000d      	movs	r5, r1
 800e842:	f000 f9ed 	bl	800ec20 <__ieee754_sqrt>
 800e846:	0022      	movs	r2, r4
 800e848:	0006      	movs	r6, r0
 800e84a:	000f      	movs	r7, r1
 800e84c:	002b      	movs	r3, r5
 800e84e:	0020      	movs	r0, r4
 800e850:	0029      	movs	r1, r5
 800e852:	f7f4 fad9 	bl	8002e08 <__aeabi_dcmpun>
 800e856:	2800      	cmp	r0, #0
 800e858:	d113      	bne.n	800e882 <sqrt+0x46>
 800e85a:	2200      	movs	r2, #0
 800e85c:	2300      	movs	r3, #0
 800e85e:	0020      	movs	r0, r4
 800e860:	0029      	movs	r1, r5
 800e862:	f7f1 fdef 	bl	8000444 <__aeabi_dcmplt>
 800e866:	2800      	cmp	r0, #0
 800e868:	d00b      	beq.n	800e882 <sqrt+0x46>
 800e86a:	f7ff fa23 	bl	800dcb4 <__errno>
 800e86e:	2321      	movs	r3, #33	; 0x21
 800e870:	2200      	movs	r2, #0
 800e872:	6003      	str	r3, [r0, #0]
 800e874:	2300      	movs	r3, #0
 800e876:	0010      	movs	r0, r2
 800e878:	0019      	movs	r1, r3
 800e87a:	f7f3 f887 	bl	800198c <__aeabi_ddiv>
 800e87e:	0006      	movs	r6, r0
 800e880:	000f      	movs	r7, r1
 800e882:	0030      	movs	r0, r6
 800e884:	0039      	movs	r1, r7
 800e886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e888 <atan>:
 800e888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e88a:	4b98      	ldr	r3, [pc, #608]	; (800eaec <atan+0x264>)
 800e88c:	b085      	sub	sp, #20
 800e88e:	004e      	lsls	r6, r1, #1
 800e890:	0004      	movs	r4, r0
 800e892:	000d      	movs	r5, r1
 800e894:	9103      	str	r1, [sp, #12]
 800e896:	0876      	lsrs	r6, r6, #1
 800e898:	429e      	cmp	r6, r3
 800e89a:	dd18      	ble.n	800e8ce <atan+0x46>
 800e89c:	4b94      	ldr	r3, [pc, #592]	; (800eaf0 <atan+0x268>)
 800e89e:	429e      	cmp	r6, r3
 800e8a0:	dc02      	bgt.n	800e8a8 <atan+0x20>
 800e8a2:	d10a      	bne.n	800e8ba <atan+0x32>
 800e8a4:	2800      	cmp	r0, #0
 800e8a6:	d008      	beq.n	800e8ba <atan+0x32>
 800e8a8:	0022      	movs	r2, r4
 800e8aa:	002b      	movs	r3, r5
 800e8ac:	0020      	movs	r0, r4
 800e8ae:	0029      	movs	r1, r5
 800e8b0:	f7f2 fd0c 	bl	80012cc <__aeabi_dadd>
 800e8b4:	0004      	movs	r4, r0
 800e8b6:	000d      	movs	r5, r1
 800e8b8:	e005      	b.n	800e8c6 <atan+0x3e>
 800e8ba:	9b03      	ldr	r3, [sp, #12]
 800e8bc:	4c8d      	ldr	r4, [pc, #564]	; (800eaf4 <atan+0x26c>)
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	dd00      	ble.n	800e8c4 <atan+0x3c>
 800e8c2:	e110      	b.n	800eae6 <atan+0x25e>
 800e8c4:	4d8c      	ldr	r5, [pc, #560]	; (800eaf8 <atan+0x270>)
 800e8c6:	0020      	movs	r0, r4
 800e8c8:	0029      	movs	r1, r5
 800e8ca:	b005      	add	sp, #20
 800e8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8ce:	4b8b      	ldr	r3, [pc, #556]	; (800eafc <atan+0x274>)
 800e8d0:	429e      	cmp	r6, r3
 800e8d2:	dc0f      	bgt.n	800e8f4 <atan+0x6c>
 800e8d4:	4b8a      	ldr	r3, [pc, #552]	; (800eb00 <atan+0x278>)
 800e8d6:	429e      	cmp	r6, r3
 800e8d8:	dc09      	bgt.n	800e8ee <atan+0x66>
 800e8da:	4a8a      	ldr	r2, [pc, #552]	; (800eb04 <atan+0x27c>)
 800e8dc:	4b8a      	ldr	r3, [pc, #552]	; (800eb08 <atan+0x280>)
 800e8de:	f7f2 fcf5 	bl	80012cc <__aeabi_dadd>
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	4b89      	ldr	r3, [pc, #548]	; (800eb0c <atan+0x284>)
 800e8e6:	f7f1 fdc1 	bl	800046c <__aeabi_dcmpgt>
 800e8ea:	2800      	cmp	r0, #0
 800e8ec:	d1eb      	bne.n	800e8c6 <atan+0x3e>
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	425b      	negs	r3, r3
 800e8f2:	e025      	b.n	800e940 <atan+0xb8>
 800e8f4:	f000 f988 	bl	800ec08 <fabs>
 800e8f8:	4b85      	ldr	r3, [pc, #532]	; (800eb10 <atan+0x288>)
 800e8fa:	0004      	movs	r4, r0
 800e8fc:	000d      	movs	r5, r1
 800e8fe:	429e      	cmp	r6, r3
 800e900:	dd00      	ble.n	800e904 <atan+0x7c>
 800e902:	e0aa      	b.n	800ea5a <atan+0x1d2>
 800e904:	4b83      	ldr	r3, [pc, #524]	; (800eb14 <atan+0x28c>)
 800e906:	429e      	cmp	r6, r3
 800e908:	dd00      	ble.n	800e90c <atan+0x84>
 800e90a:	e090      	b.n	800ea2e <atan+0x1a6>
 800e90c:	0002      	movs	r2, r0
 800e90e:	000b      	movs	r3, r1
 800e910:	f7f2 fcdc 	bl	80012cc <__aeabi_dadd>
 800e914:	2200      	movs	r2, #0
 800e916:	4b7d      	ldr	r3, [pc, #500]	; (800eb0c <atan+0x284>)
 800e918:	f7f3 fef4 	bl	8002704 <__aeabi_dsub>
 800e91c:	2380      	movs	r3, #128	; 0x80
 800e91e:	0006      	movs	r6, r0
 800e920:	000f      	movs	r7, r1
 800e922:	2200      	movs	r2, #0
 800e924:	0020      	movs	r0, r4
 800e926:	0029      	movs	r1, r5
 800e928:	05db      	lsls	r3, r3, #23
 800e92a:	f7f2 fccf 	bl	80012cc <__aeabi_dadd>
 800e92e:	000b      	movs	r3, r1
 800e930:	0002      	movs	r2, r0
 800e932:	0039      	movs	r1, r7
 800e934:	0030      	movs	r0, r6
 800e936:	f7f3 f829 	bl	800198c <__aeabi_ddiv>
 800e93a:	2300      	movs	r3, #0
 800e93c:	0004      	movs	r4, r0
 800e93e:	000d      	movs	r5, r1
 800e940:	0022      	movs	r2, r4
 800e942:	9302      	str	r3, [sp, #8]
 800e944:	0020      	movs	r0, r4
 800e946:	002b      	movs	r3, r5
 800e948:	0029      	movs	r1, r5
 800e94a:	f7f3 fc19 	bl	8002180 <__aeabi_dmul>
 800e94e:	0002      	movs	r2, r0
 800e950:	000b      	movs	r3, r1
 800e952:	9000      	str	r0, [sp, #0]
 800e954:	9101      	str	r1, [sp, #4]
 800e956:	f7f3 fc13 	bl	8002180 <__aeabi_dmul>
 800e95a:	0006      	movs	r6, r0
 800e95c:	000f      	movs	r7, r1
 800e95e:	4a6e      	ldr	r2, [pc, #440]	; (800eb18 <atan+0x290>)
 800e960:	4b6e      	ldr	r3, [pc, #440]	; (800eb1c <atan+0x294>)
 800e962:	f7f3 fc0d 	bl	8002180 <__aeabi_dmul>
 800e966:	4a6e      	ldr	r2, [pc, #440]	; (800eb20 <atan+0x298>)
 800e968:	4b6e      	ldr	r3, [pc, #440]	; (800eb24 <atan+0x29c>)
 800e96a:	f7f2 fcaf 	bl	80012cc <__aeabi_dadd>
 800e96e:	0032      	movs	r2, r6
 800e970:	003b      	movs	r3, r7
 800e972:	f7f3 fc05 	bl	8002180 <__aeabi_dmul>
 800e976:	4a6c      	ldr	r2, [pc, #432]	; (800eb28 <atan+0x2a0>)
 800e978:	4b6c      	ldr	r3, [pc, #432]	; (800eb2c <atan+0x2a4>)
 800e97a:	f7f2 fca7 	bl	80012cc <__aeabi_dadd>
 800e97e:	0032      	movs	r2, r6
 800e980:	003b      	movs	r3, r7
 800e982:	f7f3 fbfd 	bl	8002180 <__aeabi_dmul>
 800e986:	4a6a      	ldr	r2, [pc, #424]	; (800eb30 <atan+0x2a8>)
 800e988:	4b6a      	ldr	r3, [pc, #424]	; (800eb34 <atan+0x2ac>)
 800e98a:	f7f2 fc9f 	bl	80012cc <__aeabi_dadd>
 800e98e:	0032      	movs	r2, r6
 800e990:	003b      	movs	r3, r7
 800e992:	f7f3 fbf5 	bl	8002180 <__aeabi_dmul>
 800e996:	4a68      	ldr	r2, [pc, #416]	; (800eb38 <atan+0x2b0>)
 800e998:	4b68      	ldr	r3, [pc, #416]	; (800eb3c <atan+0x2b4>)
 800e99a:	f7f2 fc97 	bl	80012cc <__aeabi_dadd>
 800e99e:	0032      	movs	r2, r6
 800e9a0:	003b      	movs	r3, r7
 800e9a2:	f7f3 fbed 	bl	8002180 <__aeabi_dmul>
 800e9a6:	4a66      	ldr	r2, [pc, #408]	; (800eb40 <atan+0x2b8>)
 800e9a8:	4b66      	ldr	r3, [pc, #408]	; (800eb44 <atan+0x2bc>)
 800e9aa:	f7f2 fc8f 	bl	80012cc <__aeabi_dadd>
 800e9ae:	9a00      	ldr	r2, [sp, #0]
 800e9b0:	9b01      	ldr	r3, [sp, #4]
 800e9b2:	f7f3 fbe5 	bl	8002180 <__aeabi_dmul>
 800e9b6:	4a64      	ldr	r2, [pc, #400]	; (800eb48 <atan+0x2c0>)
 800e9b8:	9000      	str	r0, [sp, #0]
 800e9ba:	9101      	str	r1, [sp, #4]
 800e9bc:	4b63      	ldr	r3, [pc, #396]	; (800eb4c <atan+0x2c4>)
 800e9be:	0030      	movs	r0, r6
 800e9c0:	0039      	movs	r1, r7
 800e9c2:	f7f3 fbdd 	bl	8002180 <__aeabi_dmul>
 800e9c6:	4a62      	ldr	r2, [pc, #392]	; (800eb50 <atan+0x2c8>)
 800e9c8:	4b62      	ldr	r3, [pc, #392]	; (800eb54 <atan+0x2cc>)
 800e9ca:	f7f3 fe9b 	bl	8002704 <__aeabi_dsub>
 800e9ce:	0032      	movs	r2, r6
 800e9d0:	003b      	movs	r3, r7
 800e9d2:	f7f3 fbd5 	bl	8002180 <__aeabi_dmul>
 800e9d6:	4a60      	ldr	r2, [pc, #384]	; (800eb58 <atan+0x2d0>)
 800e9d8:	4b60      	ldr	r3, [pc, #384]	; (800eb5c <atan+0x2d4>)
 800e9da:	f7f3 fe93 	bl	8002704 <__aeabi_dsub>
 800e9de:	0032      	movs	r2, r6
 800e9e0:	003b      	movs	r3, r7
 800e9e2:	f7f3 fbcd 	bl	8002180 <__aeabi_dmul>
 800e9e6:	4a5e      	ldr	r2, [pc, #376]	; (800eb60 <atan+0x2d8>)
 800e9e8:	4b5e      	ldr	r3, [pc, #376]	; (800eb64 <atan+0x2dc>)
 800e9ea:	f7f3 fe8b 	bl	8002704 <__aeabi_dsub>
 800e9ee:	0032      	movs	r2, r6
 800e9f0:	003b      	movs	r3, r7
 800e9f2:	f7f3 fbc5 	bl	8002180 <__aeabi_dmul>
 800e9f6:	4a5c      	ldr	r2, [pc, #368]	; (800eb68 <atan+0x2e0>)
 800e9f8:	4b5c      	ldr	r3, [pc, #368]	; (800eb6c <atan+0x2e4>)
 800e9fa:	f7f3 fe83 	bl	8002704 <__aeabi_dsub>
 800e9fe:	0032      	movs	r2, r6
 800ea00:	003b      	movs	r3, r7
 800ea02:	f7f3 fbbd 	bl	8002180 <__aeabi_dmul>
 800ea06:	0002      	movs	r2, r0
 800ea08:	000b      	movs	r3, r1
 800ea0a:	9800      	ldr	r0, [sp, #0]
 800ea0c:	9901      	ldr	r1, [sp, #4]
 800ea0e:	f7f2 fc5d 	bl	80012cc <__aeabi_dadd>
 800ea12:	002b      	movs	r3, r5
 800ea14:	0022      	movs	r2, r4
 800ea16:	f7f3 fbb3 	bl	8002180 <__aeabi_dmul>
 800ea1a:	9b02      	ldr	r3, [sp, #8]
 800ea1c:	3301      	adds	r3, #1
 800ea1e:	d143      	bne.n	800eaa8 <atan+0x220>
 800ea20:	0002      	movs	r2, r0
 800ea22:	000b      	movs	r3, r1
 800ea24:	0020      	movs	r0, r4
 800ea26:	0029      	movs	r1, r5
 800ea28:	f7f3 fe6c 	bl	8002704 <__aeabi_dsub>
 800ea2c:	e742      	b.n	800e8b4 <atan+0x2c>
 800ea2e:	2200      	movs	r2, #0
 800ea30:	4b36      	ldr	r3, [pc, #216]	; (800eb0c <atan+0x284>)
 800ea32:	f7f3 fe67 	bl	8002704 <__aeabi_dsub>
 800ea36:	2200      	movs	r2, #0
 800ea38:	0006      	movs	r6, r0
 800ea3a:	000f      	movs	r7, r1
 800ea3c:	0020      	movs	r0, r4
 800ea3e:	0029      	movs	r1, r5
 800ea40:	4b32      	ldr	r3, [pc, #200]	; (800eb0c <atan+0x284>)
 800ea42:	f7f2 fc43 	bl	80012cc <__aeabi_dadd>
 800ea46:	000b      	movs	r3, r1
 800ea48:	0002      	movs	r2, r0
 800ea4a:	0039      	movs	r1, r7
 800ea4c:	0030      	movs	r0, r6
 800ea4e:	f7f2 ff9d 	bl	800198c <__aeabi_ddiv>
 800ea52:	2301      	movs	r3, #1
 800ea54:	0004      	movs	r4, r0
 800ea56:	000d      	movs	r5, r1
 800ea58:	e772      	b.n	800e940 <atan+0xb8>
 800ea5a:	4b45      	ldr	r3, [pc, #276]	; (800eb70 <atan+0x2e8>)
 800ea5c:	429e      	cmp	r6, r3
 800ea5e:	dc19      	bgt.n	800ea94 <atan+0x20c>
 800ea60:	2200      	movs	r2, #0
 800ea62:	4b44      	ldr	r3, [pc, #272]	; (800eb74 <atan+0x2ec>)
 800ea64:	f7f3 fe4e 	bl	8002704 <__aeabi_dsub>
 800ea68:	2200      	movs	r2, #0
 800ea6a:	0006      	movs	r6, r0
 800ea6c:	000f      	movs	r7, r1
 800ea6e:	0020      	movs	r0, r4
 800ea70:	0029      	movs	r1, r5
 800ea72:	4b40      	ldr	r3, [pc, #256]	; (800eb74 <atan+0x2ec>)
 800ea74:	f7f3 fb84 	bl	8002180 <__aeabi_dmul>
 800ea78:	2200      	movs	r2, #0
 800ea7a:	4b24      	ldr	r3, [pc, #144]	; (800eb0c <atan+0x284>)
 800ea7c:	f7f2 fc26 	bl	80012cc <__aeabi_dadd>
 800ea80:	000b      	movs	r3, r1
 800ea82:	0002      	movs	r2, r0
 800ea84:	0039      	movs	r1, r7
 800ea86:	0030      	movs	r0, r6
 800ea88:	f7f2 ff80 	bl	800198c <__aeabi_ddiv>
 800ea8c:	2302      	movs	r3, #2
 800ea8e:	0004      	movs	r4, r0
 800ea90:	000d      	movs	r5, r1
 800ea92:	e755      	b.n	800e940 <atan+0xb8>
 800ea94:	000b      	movs	r3, r1
 800ea96:	0002      	movs	r2, r0
 800ea98:	4937      	ldr	r1, [pc, #220]	; (800eb78 <atan+0x2f0>)
 800ea9a:	2000      	movs	r0, #0
 800ea9c:	f7f2 ff76 	bl	800198c <__aeabi_ddiv>
 800eaa0:	2303      	movs	r3, #3
 800eaa2:	0004      	movs	r4, r0
 800eaa4:	000d      	movs	r5, r1
 800eaa6:	e74b      	b.n	800e940 <atan+0xb8>
 800eaa8:	9b02      	ldr	r3, [sp, #8]
 800eaaa:	4e34      	ldr	r6, [pc, #208]	; (800eb7c <atan+0x2f4>)
 800eaac:	00db      	lsls	r3, r3, #3
 800eaae:	4f34      	ldr	r7, [pc, #208]	; (800eb80 <atan+0x2f8>)
 800eab0:	18f6      	adds	r6, r6, r3
 800eab2:	18ff      	adds	r7, r7, r3
 800eab4:	6832      	ldr	r2, [r6, #0]
 800eab6:	6873      	ldr	r3, [r6, #4]
 800eab8:	f7f3 fe24 	bl	8002704 <__aeabi_dsub>
 800eabc:	0022      	movs	r2, r4
 800eabe:	002b      	movs	r3, r5
 800eac0:	f7f3 fe20 	bl	8002704 <__aeabi_dsub>
 800eac4:	000b      	movs	r3, r1
 800eac6:	0002      	movs	r2, r0
 800eac8:	6838      	ldr	r0, [r7, #0]
 800eaca:	6879      	ldr	r1, [r7, #4]
 800eacc:	f7f3 fe1a 	bl	8002704 <__aeabi_dsub>
 800ead0:	9b03      	ldr	r3, [sp, #12]
 800ead2:	0004      	movs	r4, r0
 800ead4:	000d      	movs	r5, r1
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	db00      	blt.n	800eadc <atan+0x254>
 800eada:	e6f4      	b.n	800e8c6 <atan+0x3e>
 800eadc:	2180      	movs	r1, #128	; 0x80
 800eade:	0609      	lsls	r1, r1, #24
 800eae0:	186b      	adds	r3, r5, r1
 800eae2:	001d      	movs	r5, r3
 800eae4:	e6ef      	b.n	800e8c6 <atan+0x3e>
 800eae6:	4d27      	ldr	r5, [pc, #156]	; (800eb84 <atan+0x2fc>)
 800eae8:	e6ed      	b.n	800e8c6 <atan+0x3e>
 800eaea:	46c0      	nop			; (mov r8, r8)
 800eaec:	440fffff 	.word	0x440fffff
 800eaf0:	7ff00000 	.word	0x7ff00000
 800eaf4:	54442d18 	.word	0x54442d18
 800eaf8:	bff921fb 	.word	0xbff921fb
 800eafc:	3fdbffff 	.word	0x3fdbffff
 800eb00:	3e1fffff 	.word	0x3e1fffff
 800eb04:	8800759c 	.word	0x8800759c
 800eb08:	7e37e43c 	.word	0x7e37e43c
 800eb0c:	3ff00000 	.word	0x3ff00000
 800eb10:	3ff2ffff 	.word	0x3ff2ffff
 800eb14:	3fe5ffff 	.word	0x3fe5ffff
 800eb18:	e322da11 	.word	0xe322da11
 800eb1c:	3f90ad3a 	.word	0x3f90ad3a
 800eb20:	24760deb 	.word	0x24760deb
 800eb24:	3fa97b4b 	.word	0x3fa97b4b
 800eb28:	a0d03d51 	.word	0xa0d03d51
 800eb2c:	3fb10d66 	.word	0x3fb10d66
 800eb30:	c54c206e 	.word	0xc54c206e
 800eb34:	3fb745cd 	.word	0x3fb745cd
 800eb38:	920083ff 	.word	0x920083ff
 800eb3c:	3fc24924 	.word	0x3fc24924
 800eb40:	5555550d 	.word	0x5555550d
 800eb44:	3fd55555 	.word	0x3fd55555
 800eb48:	2c6a6c2f 	.word	0x2c6a6c2f
 800eb4c:	bfa2b444 	.word	0xbfa2b444
 800eb50:	52defd9a 	.word	0x52defd9a
 800eb54:	3fadde2d 	.word	0x3fadde2d
 800eb58:	af749a6d 	.word	0xaf749a6d
 800eb5c:	3fb3b0f2 	.word	0x3fb3b0f2
 800eb60:	fe231671 	.word	0xfe231671
 800eb64:	3fbc71c6 	.word	0x3fbc71c6
 800eb68:	9998ebc4 	.word	0x9998ebc4
 800eb6c:	3fc99999 	.word	0x3fc99999
 800eb70:	40037fff 	.word	0x40037fff
 800eb74:	3ff80000 	.word	0x3ff80000
 800eb78:	bff00000 	.word	0xbff00000
 800eb7c:	08011158 	.word	0x08011158
 800eb80:	08011138 	.word	0x08011138
 800eb84:	3ff921fb 	.word	0x3ff921fb

0800eb88 <cos>:
 800eb88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb8a:	4a1d      	ldr	r2, [pc, #116]	; (800ec00 <cos+0x78>)
 800eb8c:	004b      	lsls	r3, r1, #1
 800eb8e:	b087      	sub	sp, #28
 800eb90:	085b      	lsrs	r3, r3, #1
 800eb92:	4293      	cmp	r3, r2
 800eb94:	dc04      	bgt.n	800eba0 <cos+0x18>
 800eb96:	2200      	movs	r2, #0
 800eb98:	2300      	movs	r3, #0
 800eb9a:	f000 f92d 	bl	800edf8 <__kernel_cos>
 800eb9e:	e006      	b.n	800ebae <cos+0x26>
 800eba0:	4a18      	ldr	r2, [pc, #96]	; (800ec04 <cos+0x7c>)
 800eba2:	4293      	cmp	r3, r2
 800eba4:	dd05      	ble.n	800ebb2 <cos+0x2a>
 800eba6:	0002      	movs	r2, r0
 800eba8:	000b      	movs	r3, r1
 800ebaa:	f7f3 fdab 	bl	8002704 <__aeabi_dsub>
 800ebae:	b007      	add	sp, #28
 800ebb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebb2:	aa02      	add	r2, sp, #8
 800ebb4:	f000 ff96 	bl	800fae4 <__ieee754_rem_pio2>
 800ebb8:	9c04      	ldr	r4, [sp, #16]
 800ebba:	9d05      	ldr	r5, [sp, #20]
 800ebbc:	2303      	movs	r3, #3
 800ebbe:	4003      	ands	r3, r0
 800ebc0:	9802      	ldr	r0, [sp, #8]
 800ebc2:	9903      	ldr	r1, [sp, #12]
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d006      	beq.n	800ebd6 <cos+0x4e>
 800ebc8:	2b02      	cmp	r3, #2
 800ebca:	d00d      	beq.n	800ebe8 <cos+0x60>
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d110      	bne.n	800ebf2 <cos+0x6a>
 800ebd0:	0022      	movs	r2, r4
 800ebd2:	002b      	movs	r3, r5
 800ebd4:	e7e1      	b.n	800eb9a <cos+0x12>
 800ebd6:	9300      	str	r3, [sp, #0]
 800ebd8:	0022      	movs	r2, r4
 800ebda:	002b      	movs	r3, r5
 800ebdc:	f000 f9cc 	bl	800ef78 <__kernel_sin>
 800ebe0:	2380      	movs	r3, #128	; 0x80
 800ebe2:	061b      	lsls	r3, r3, #24
 800ebe4:	18c9      	adds	r1, r1, r3
 800ebe6:	e7e2      	b.n	800ebae <cos+0x26>
 800ebe8:	0022      	movs	r2, r4
 800ebea:	002b      	movs	r3, r5
 800ebec:	f000 f904 	bl	800edf8 <__kernel_cos>
 800ebf0:	e7f6      	b.n	800ebe0 <cos+0x58>
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	0022      	movs	r2, r4
 800ebf6:	9300      	str	r3, [sp, #0]
 800ebf8:	002b      	movs	r3, r5
 800ebfa:	f000 f9bd 	bl	800ef78 <__kernel_sin>
 800ebfe:	e7d6      	b.n	800ebae <cos+0x26>
 800ec00:	3fe921fb 	.word	0x3fe921fb
 800ec04:	7fefffff 	.word	0x7fefffff

0800ec08 <fabs>:
 800ec08:	0049      	lsls	r1, r1, #1
 800ec0a:	084b      	lsrs	r3, r1, #1
 800ec0c:	0019      	movs	r1, r3
 800ec0e:	4770      	bx	lr

0800ec10 <finite>:
 800ec10:	4b02      	ldr	r3, [pc, #8]	; (800ec1c <finite+0xc>)
 800ec12:	0048      	lsls	r0, r1, #1
 800ec14:	0840      	lsrs	r0, r0, #1
 800ec16:	18c0      	adds	r0, r0, r3
 800ec18:	0fc0      	lsrs	r0, r0, #31
 800ec1a:	4770      	bx	lr
 800ec1c:	80100000 	.word	0x80100000

0800ec20 <__ieee754_sqrt>:
 800ec20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec22:	000a      	movs	r2, r1
 800ec24:	000c      	movs	r4, r1
 800ec26:	496f      	ldr	r1, [pc, #444]	; (800ede4 <__ieee754_sqrt+0x1c4>)
 800ec28:	0005      	movs	r5, r0
 800ec2a:	0003      	movs	r3, r0
 800ec2c:	0008      	movs	r0, r1
 800ec2e:	b087      	sub	sp, #28
 800ec30:	4020      	ands	r0, r4
 800ec32:	4288      	cmp	r0, r1
 800ec34:	d111      	bne.n	800ec5a <__ieee754_sqrt+0x3a>
 800ec36:	002a      	movs	r2, r5
 800ec38:	0023      	movs	r3, r4
 800ec3a:	0028      	movs	r0, r5
 800ec3c:	0021      	movs	r1, r4
 800ec3e:	f7f3 fa9f 	bl	8002180 <__aeabi_dmul>
 800ec42:	0002      	movs	r2, r0
 800ec44:	000b      	movs	r3, r1
 800ec46:	0028      	movs	r0, r5
 800ec48:	0021      	movs	r1, r4
 800ec4a:	f7f2 fb3f 	bl	80012cc <__aeabi_dadd>
 800ec4e:	0005      	movs	r5, r0
 800ec50:	000c      	movs	r4, r1
 800ec52:	0028      	movs	r0, r5
 800ec54:	0021      	movs	r1, r4
 800ec56:	b007      	add	sp, #28
 800ec58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec5a:	2c00      	cmp	r4, #0
 800ec5c:	dc12      	bgt.n	800ec84 <__ieee754_sqrt+0x64>
 800ec5e:	0061      	lsls	r1, r4, #1
 800ec60:	0849      	lsrs	r1, r1, #1
 800ec62:	4329      	orrs	r1, r5
 800ec64:	d0f5      	beq.n	800ec52 <__ieee754_sqrt+0x32>
 800ec66:	2100      	movs	r1, #0
 800ec68:	428c      	cmp	r4, r1
 800ec6a:	d100      	bne.n	800ec6e <__ieee754_sqrt+0x4e>
 800ec6c:	e09f      	b.n	800edae <__ieee754_sqrt+0x18e>
 800ec6e:	002a      	movs	r2, r5
 800ec70:	0023      	movs	r3, r4
 800ec72:	0028      	movs	r0, r5
 800ec74:	0021      	movs	r1, r4
 800ec76:	f7f3 fd45 	bl	8002704 <__aeabi_dsub>
 800ec7a:	0002      	movs	r2, r0
 800ec7c:	000b      	movs	r3, r1
 800ec7e:	f7f2 fe85 	bl	800198c <__aeabi_ddiv>
 800ec82:	e7e4      	b.n	800ec4e <__ieee754_sqrt+0x2e>
 800ec84:	1521      	asrs	r1, r4, #20
 800ec86:	d100      	bne.n	800ec8a <__ieee754_sqrt+0x6a>
 800ec88:	e091      	b.n	800edae <__ieee754_sqrt+0x18e>
 800ec8a:	4857      	ldr	r0, [pc, #348]	; (800ede8 <__ieee754_sqrt+0x1c8>)
 800ec8c:	0312      	lsls	r2, r2, #12
 800ec8e:	180c      	adds	r4, r1, r0
 800ec90:	2080      	movs	r0, #128	; 0x80
 800ec92:	0b12      	lsrs	r2, r2, #12
 800ec94:	0340      	lsls	r0, r0, #13
 800ec96:	4310      	orrs	r0, r2
 800ec98:	07c9      	lsls	r1, r1, #31
 800ec9a:	d403      	bmi.n	800eca4 <__ieee754_sqrt+0x84>
 800ec9c:	0fda      	lsrs	r2, r3, #31
 800ec9e:	0040      	lsls	r0, r0, #1
 800eca0:	1810      	adds	r0, r2, r0
 800eca2:	005b      	lsls	r3, r3, #1
 800eca4:	2500      	movs	r5, #0
 800eca6:	1062      	asrs	r2, r4, #1
 800eca8:	0040      	lsls	r0, r0, #1
 800ecaa:	2480      	movs	r4, #128	; 0x80
 800ecac:	9205      	str	r2, [sp, #20]
 800ecae:	0fda      	lsrs	r2, r3, #31
 800ecb0:	1812      	adds	r2, r2, r0
 800ecb2:	0029      	movs	r1, r5
 800ecb4:	2016      	movs	r0, #22
 800ecb6:	005b      	lsls	r3, r3, #1
 800ecb8:	03a4      	lsls	r4, r4, #14
 800ecba:	190e      	adds	r6, r1, r4
 800ecbc:	4296      	cmp	r6, r2
 800ecbe:	dc02      	bgt.n	800ecc6 <__ieee754_sqrt+0xa6>
 800ecc0:	1931      	adds	r1, r6, r4
 800ecc2:	1b92      	subs	r2, r2, r6
 800ecc4:	192d      	adds	r5, r5, r4
 800ecc6:	0fde      	lsrs	r6, r3, #31
 800ecc8:	0052      	lsls	r2, r2, #1
 800ecca:	3801      	subs	r0, #1
 800eccc:	18b2      	adds	r2, r6, r2
 800ecce:	005b      	lsls	r3, r3, #1
 800ecd0:	0864      	lsrs	r4, r4, #1
 800ecd2:	2800      	cmp	r0, #0
 800ecd4:	d1f1      	bne.n	800ecba <__ieee754_sqrt+0x9a>
 800ecd6:	2620      	movs	r6, #32
 800ecd8:	2780      	movs	r7, #128	; 0x80
 800ecda:	0004      	movs	r4, r0
 800ecdc:	9604      	str	r6, [sp, #16]
 800ecde:	063f      	lsls	r7, r7, #24
 800ece0:	183e      	adds	r6, r7, r0
 800ece2:	46b4      	mov	ip, r6
 800ece4:	428a      	cmp	r2, r1
 800ece6:	dc02      	bgt.n	800ecee <__ieee754_sqrt+0xce>
 800ece8:	d114      	bne.n	800ed14 <__ieee754_sqrt+0xf4>
 800ecea:	429e      	cmp	r6, r3
 800ecec:	d812      	bhi.n	800ed14 <__ieee754_sqrt+0xf4>
 800ecee:	4660      	mov	r0, ip
 800ecf0:	4666      	mov	r6, ip
 800ecf2:	19c0      	adds	r0, r0, r7
 800ecf4:	9100      	str	r1, [sp, #0]
 800ecf6:	2e00      	cmp	r6, #0
 800ecf8:	da03      	bge.n	800ed02 <__ieee754_sqrt+0xe2>
 800ecfa:	43c6      	mvns	r6, r0
 800ecfc:	0ff6      	lsrs	r6, r6, #31
 800ecfe:	198e      	adds	r6, r1, r6
 800ed00:	9600      	str	r6, [sp, #0]
 800ed02:	1a52      	subs	r2, r2, r1
 800ed04:	4563      	cmp	r3, ip
 800ed06:	4189      	sbcs	r1, r1
 800ed08:	4249      	negs	r1, r1
 800ed0a:	1a52      	subs	r2, r2, r1
 800ed0c:	4661      	mov	r1, ip
 800ed0e:	1a5b      	subs	r3, r3, r1
 800ed10:	9900      	ldr	r1, [sp, #0]
 800ed12:	19e4      	adds	r4, r4, r7
 800ed14:	0fde      	lsrs	r6, r3, #31
 800ed16:	0052      	lsls	r2, r2, #1
 800ed18:	18b2      	adds	r2, r6, r2
 800ed1a:	9e04      	ldr	r6, [sp, #16]
 800ed1c:	005b      	lsls	r3, r3, #1
 800ed1e:	3e01      	subs	r6, #1
 800ed20:	087f      	lsrs	r7, r7, #1
 800ed22:	9604      	str	r6, [sp, #16]
 800ed24:	2e00      	cmp	r6, #0
 800ed26:	d1db      	bne.n	800ece0 <__ieee754_sqrt+0xc0>
 800ed28:	431a      	orrs	r2, r3
 800ed2a:	d01f      	beq.n	800ed6c <__ieee754_sqrt+0x14c>
 800ed2c:	4e2f      	ldr	r6, [pc, #188]	; (800edec <__ieee754_sqrt+0x1cc>)
 800ed2e:	4f30      	ldr	r7, [pc, #192]	; (800edf0 <__ieee754_sqrt+0x1d0>)
 800ed30:	6830      	ldr	r0, [r6, #0]
 800ed32:	6871      	ldr	r1, [r6, #4]
 800ed34:	683a      	ldr	r2, [r7, #0]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	9200      	str	r2, [sp, #0]
 800ed3a:	9301      	str	r3, [sp, #4]
 800ed3c:	6832      	ldr	r2, [r6, #0]
 800ed3e:	6873      	ldr	r3, [r6, #4]
 800ed40:	9202      	str	r2, [sp, #8]
 800ed42:	9303      	str	r3, [sp, #12]
 800ed44:	9a00      	ldr	r2, [sp, #0]
 800ed46:	9b01      	ldr	r3, [sp, #4]
 800ed48:	f7f3 fcdc 	bl	8002704 <__aeabi_dsub>
 800ed4c:	0002      	movs	r2, r0
 800ed4e:	000b      	movs	r3, r1
 800ed50:	9802      	ldr	r0, [sp, #8]
 800ed52:	9903      	ldr	r1, [sp, #12]
 800ed54:	f7f1 fb80 	bl	8000458 <__aeabi_dcmple>
 800ed58:	2800      	cmp	r0, #0
 800ed5a:	d007      	beq.n	800ed6c <__ieee754_sqrt+0x14c>
 800ed5c:	6830      	ldr	r0, [r6, #0]
 800ed5e:	6871      	ldr	r1, [r6, #4]
 800ed60:	683a      	ldr	r2, [r7, #0]
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	1c67      	adds	r7, r4, #1
 800ed66:	d127      	bne.n	800edb8 <__ieee754_sqrt+0x198>
 800ed68:	9c04      	ldr	r4, [sp, #16]
 800ed6a:	3501      	adds	r5, #1
 800ed6c:	4b21      	ldr	r3, [pc, #132]	; (800edf4 <__ieee754_sqrt+0x1d4>)
 800ed6e:	1069      	asrs	r1, r5, #1
 800ed70:	18c9      	adds	r1, r1, r3
 800ed72:	0864      	lsrs	r4, r4, #1
 800ed74:	07ed      	lsls	r5, r5, #31
 800ed76:	d502      	bpl.n	800ed7e <__ieee754_sqrt+0x15e>
 800ed78:	2380      	movs	r3, #128	; 0x80
 800ed7a:	061b      	lsls	r3, r3, #24
 800ed7c:	431c      	orrs	r4, r3
 800ed7e:	9b05      	ldr	r3, [sp, #20]
 800ed80:	0025      	movs	r5, r4
 800ed82:	0518      	lsls	r0, r3, #20
 800ed84:	1843      	adds	r3, r0, r1
 800ed86:	001c      	movs	r4, r3
 800ed88:	e763      	b.n	800ec52 <__ieee754_sqrt+0x32>
 800ed8a:	0ada      	lsrs	r2, r3, #11
 800ed8c:	3815      	subs	r0, #21
 800ed8e:	055b      	lsls	r3, r3, #21
 800ed90:	2a00      	cmp	r2, #0
 800ed92:	d0fa      	beq.n	800ed8a <__ieee754_sqrt+0x16a>
 800ed94:	2480      	movs	r4, #128	; 0x80
 800ed96:	0364      	lsls	r4, r4, #13
 800ed98:	4222      	tst	r2, r4
 800ed9a:	d00a      	beq.n	800edb2 <__ieee754_sqrt+0x192>
 800ed9c:	2420      	movs	r4, #32
 800ed9e:	001e      	movs	r6, r3
 800eda0:	1a64      	subs	r4, r4, r1
 800eda2:	40e6      	lsrs	r6, r4
 800eda4:	1e4d      	subs	r5, r1, #1
 800eda6:	408b      	lsls	r3, r1
 800eda8:	4332      	orrs	r2, r6
 800edaa:	1b41      	subs	r1, r0, r5
 800edac:	e76d      	b.n	800ec8a <__ieee754_sqrt+0x6a>
 800edae:	2000      	movs	r0, #0
 800edb0:	e7ee      	b.n	800ed90 <__ieee754_sqrt+0x170>
 800edb2:	0052      	lsls	r2, r2, #1
 800edb4:	3101      	adds	r1, #1
 800edb6:	e7ef      	b.n	800ed98 <__ieee754_sqrt+0x178>
 800edb8:	f7f2 fa88 	bl	80012cc <__aeabi_dadd>
 800edbc:	6877      	ldr	r7, [r6, #4]
 800edbe:	6836      	ldr	r6, [r6, #0]
 800edc0:	0002      	movs	r2, r0
 800edc2:	000b      	movs	r3, r1
 800edc4:	0030      	movs	r0, r6
 800edc6:	0039      	movs	r1, r7
 800edc8:	f7f1 fb3c 	bl	8000444 <__aeabi_dcmplt>
 800edcc:	2800      	cmp	r0, #0
 800edce:	d004      	beq.n	800edda <__ieee754_sqrt+0x1ba>
 800edd0:	3402      	adds	r4, #2
 800edd2:	4263      	negs	r3, r4
 800edd4:	4163      	adcs	r3, r4
 800edd6:	18ed      	adds	r5, r5, r3
 800edd8:	e7c8      	b.n	800ed6c <__ieee754_sqrt+0x14c>
 800edda:	2301      	movs	r3, #1
 800eddc:	3401      	adds	r4, #1
 800edde:	439c      	bics	r4, r3
 800ede0:	e7c4      	b.n	800ed6c <__ieee754_sqrt+0x14c>
 800ede2:	46c0      	nop			; (mov r8, r8)
 800ede4:	7ff00000 	.word	0x7ff00000
 800ede8:	fffffc01 	.word	0xfffffc01
 800edec:	20000098 	.word	0x20000098
 800edf0:	200000a0 	.word	0x200000a0
 800edf4:	3fe00000 	.word	0x3fe00000

0800edf8 <__kernel_cos>:
 800edf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edfa:	b087      	sub	sp, #28
 800edfc:	9204      	str	r2, [sp, #16]
 800edfe:	9305      	str	r3, [sp, #20]
 800ee00:	004b      	lsls	r3, r1, #1
 800ee02:	085b      	lsrs	r3, r3, #1
 800ee04:	9300      	str	r3, [sp, #0]
 800ee06:	23f9      	movs	r3, #249	; 0xf9
 800ee08:	9a00      	ldr	r2, [sp, #0]
 800ee0a:	0007      	movs	r7, r0
 800ee0c:	000e      	movs	r6, r1
 800ee0e:	059b      	lsls	r3, r3, #22
 800ee10:	429a      	cmp	r2, r3
 800ee12:	da04      	bge.n	800ee1e <__kernel_cos+0x26>
 800ee14:	f7f4 f816 	bl	8002e44 <__aeabi_d2iz>
 800ee18:	2800      	cmp	r0, #0
 800ee1a:	d100      	bne.n	800ee1e <__kernel_cos+0x26>
 800ee1c:	e084      	b.n	800ef28 <__kernel_cos+0x130>
 800ee1e:	003a      	movs	r2, r7
 800ee20:	0033      	movs	r3, r6
 800ee22:	0038      	movs	r0, r7
 800ee24:	0031      	movs	r1, r6
 800ee26:	f7f3 f9ab 	bl	8002180 <__aeabi_dmul>
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	4b40      	ldr	r3, [pc, #256]	; (800ef30 <__kernel_cos+0x138>)
 800ee2e:	0004      	movs	r4, r0
 800ee30:	000d      	movs	r5, r1
 800ee32:	f7f3 f9a5 	bl	8002180 <__aeabi_dmul>
 800ee36:	4a3f      	ldr	r2, [pc, #252]	; (800ef34 <__kernel_cos+0x13c>)
 800ee38:	9002      	str	r0, [sp, #8]
 800ee3a:	9103      	str	r1, [sp, #12]
 800ee3c:	4b3e      	ldr	r3, [pc, #248]	; (800ef38 <__kernel_cos+0x140>)
 800ee3e:	0020      	movs	r0, r4
 800ee40:	0029      	movs	r1, r5
 800ee42:	f7f3 f99d 	bl	8002180 <__aeabi_dmul>
 800ee46:	4a3d      	ldr	r2, [pc, #244]	; (800ef3c <__kernel_cos+0x144>)
 800ee48:	4b3d      	ldr	r3, [pc, #244]	; (800ef40 <__kernel_cos+0x148>)
 800ee4a:	f7f2 fa3f 	bl	80012cc <__aeabi_dadd>
 800ee4e:	0022      	movs	r2, r4
 800ee50:	002b      	movs	r3, r5
 800ee52:	f7f3 f995 	bl	8002180 <__aeabi_dmul>
 800ee56:	4a3b      	ldr	r2, [pc, #236]	; (800ef44 <__kernel_cos+0x14c>)
 800ee58:	4b3b      	ldr	r3, [pc, #236]	; (800ef48 <__kernel_cos+0x150>)
 800ee5a:	f7f3 fc53 	bl	8002704 <__aeabi_dsub>
 800ee5e:	0022      	movs	r2, r4
 800ee60:	002b      	movs	r3, r5
 800ee62:	f7f3 f98d 	bl	8002180 <__aeabi_dmul>
 800ee66:	4a39      	ldr	r2, [pc, #228]	; (800ef4c <__kernel_cos+0x154>)
 800ee68:	4b39      	ldr	r3, [pc, #228]	; (800ef50 <__kernel_cos+0x158>)
 800ee6a:	f7f2 fa2f 	bl	80012cc <__aeabi_dadd>
 800ee6e:	0022      	movs	r2, r4
 800ee70:	002b      	movs	r3, r5
 800ee72:	f7f3 f985 	bl	8002180 <__aeabi_dmul>
 800ee76:	4a37      	ldr	r2, [pc, #220]	; (800ef54 <__kernel_cos+0x15c>)
 800ee78:	4b37      	ldr	r3, [pc, #220]	; (800ef58 <__kernel_cos+0x160>)
 800ee7a:	f7f3 fc43 	bl	8002704 <__aeabi_dsub>
 800ee7e:	0022      	movs	r2, r4
 800ee80:	002b      	movs	r3, r5
 800ee82:	f7f3 f97d 	bl	8002180 <__aeabi_dmul>
 800ee86:	4a35      	ldr	r2, [pc, #212]	; (800ef5c <__kernel_cos+0x164>)
 800ee88:	4b35      	ldr	r3, [pc, #212]	; (800ef60 <__kernel_cos+0x168>)
 800ee8a:	f7f2 fa1f 	bl	80012cc <__aeabi_dadd>
 800ee8e:	0022      	movs	r2, r4
 800ee90:	002b      	movs	r3, r5
 800ee92:	f7f3 f975 	bl	8002180 <__aeabi_dmul>
 800ee96:	0022      	movs	r2, r4
 800ee98:	002b      	movs	r3, r5
 800ee9a:	f7f3 f971 	bl	8002180 <__aeabi_dmul>
 800ee9e:	9a04      	ldr	r2, [sp, #16]
 800eea0:	9b05      	ldr	r3, [sp, #20]
 800eea2:	0004      	movs	r4, r0
 800eea4:	000d      	movs	r5, r1
 800eea6:	0038      	movs	r0, r7
 800eea8:	0031      	movs	r1, r6
 800eeaa:	f7f3 f969 	bl	8002180 <__aeabi_dmul>
 800eeae:	0002      	movs	r2, r0
 800eeb0:	000b      	movs	r3, r1
 800eeb2:	0020      	movs	r0, r4
 800eeb4:	0029      	movs	r1, r5
 800eeb6:	f7f3 fc25 	bl	8002704 <__aeabi_dsub>
 800eeba:	4b2a      	ldr	r3, [pc, #168]	; (800ef64 <__kernel_cos+0x16c>)
 800eebc:	9a00      	ldr	r2, [sp, #0]
 800eebe:	0004      	movs	r4, r0
 800eec0:	000d      	movs	r5, r1
 800eec2:	429a      	cmp	r2, r3
 800eec4:	dc0d      	bgt.n	800eee2 <__kernel_cos+0xea>
 800eec6:	0002      	movs	r2, r0
 800eec8:	000b      	movs	r3, r1
 800eeca:	9802      	ldr	r0, [sp, #8]
 800eecc:	9903      	ldr	r1, [sp, #12]
 800eece:	f7f3 fc19 	bl	8002704 <__aeabi_dsub>
 800eed2:	0002      	movs	r2, r0
 800eed4:	2000      	movs	r0, #0
 800eed6:	000b      	movs	r3, r1
 800eed8:	4923      	ldr	r1, [pc, #140]	; (800ef68 <__kernel_cos+0x170>)
 800eeda:	f7f3 fc13 	bl	8002704 <__aeabi_dsub>
 800eede:	b007      	add	sp, #28
 800eee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eee2:	4b22      	ldr	r3, [pc, #136]	; (800ef6c <__kernel_cos+0x174>)
 800eee4:	9a00      	ldr	r2, [sp, #0]
 800eee6:	2600      	movs	r6, #0
 800eee8:	429a      	cmp	r2, r3
 800eeea:	dc1b      	bgt.n	800ef24 <__kernel_cos+0x12c>
 800eeec:	0013      	movs	r3, r2
 800eeee:	4a20      	ldr	r2, [pc, #128]	; (800ef70 <__kernel_cos+0x178>)
 800eef0:	4694      	mov	ip, r2
 800eef2:	4463      	add	r3, ip
 800eef4:	001f      	movs	r7, r3
 800eef6:	0032      	movs	r2, r6
 800eef8:	003b      	movs	r3, r7
 800eefa:	2000      	movs	r0, #0
 800eefc:	491a      	ldr	r1, [pc, #104]	; (800ef68 <__kernel_cos+0x170>)
 800eefe:	f7f3 fc01 	bl	8002704 <__aeabi_dsub>
 800ef02:	0032      	movs	r2, r6
 800ef04:	003b      	movs	r3, r7
 800ef06:	9000      	str	r0, [sp, #0]
 800ef08:	9101      	str	r1, [sp, #4]
 800ef0a:	9802      	ldr	r0, [sp, #8]
 800ef0c:	9903      	ldr	r1, [sp, #12]
 800ef0e:	f7f3 fbf9 	bl	8002704 <__aeabi_dsub>
 800ef12:	0022      	movs	r2, r4
 800ef14:	002b      	movs	r3, r5
 800ef16:	f7f3 fbf5 	bl	8002704 <__aeabi_dsub>
 800ef1a:	0002      	movs	r2, r0
 800ef1c:	000b      	movs	r3, r1
 800ef1e:	9800      	ldr	r0, [sp, #0]
 800ef20:	9901      	ldr	r1, [sp, #4]
 800ef22:	e7da      	b.n	800eeda <__kernel_cos+0xe2>
 800ef24:	4f13      	ldr	r7, [pc, #76]	; (800ef74 <__kernel_cos+0x17c>)
 800ef26:	e7e6      	b.n	800eef6 <__kernel_cos+0xfe>
 800ef28:	2000      	movs	r0, #0
 800ef2a:	490f      	ldr	r1, [pc, #60]	; (800ef68 <__kernel_cos+0x170>)
 800ef2c:	e7d7      	b.n	800eede <__kernel_cos+0xe6>
 800ef2e:	46c0      	nop			; (mov r8, r8)
 800ef30:	3fe00000 	.word	0x3fe00000
 800ef34:	be8838d4 	.word	0xbe8838d4
 800ef38:	bda8fae9 	.word	0xbda8fae9
 800ef3c:	bdb4b1c4 	.word	0xbdb4b1c4
 800ef40:	3e21ee9e 	.word	0x3e21ee9e
 800ef44:	809c52ad 	.word	0x809c52ad
 800ef48:	3e927e4f 	.word	0x3e927e4f
 800ef4c:	19cb1590 	.word	0x19cb1590
 800ef50:	3efa01a0 	.word	0x3efa01a0
 800ef54:	16c15177 	.word	0x16c15177
 800ef58:	3f56c16c 	.word	0x3f56c16c
 800ef5c:	5555554c 	.word	0x5555554c
 800ef60:	3fa55555 	.word	0x3fa55555
 800ef64:	3fd33332 	.word	0x3fd33332
 800ef68:	3ff00000 	.word	0x3ff00000
 800ef6c:	3fe90000 	.word	0x3fe90000
 800ef70:	ffe00000 	.word	0xffe00000
 800ef74:	3fd20000 	.word	0x3fd20000

0800ef78 <__kernel_sin>:
 800ef78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef7a:	b089      	sub	sp, #36	; 0x24
 800ef7c:	9202      	str	r2, [sp, #8]
 800ef7e:	9303      	str	r3, [sp, #12]
 800ef80:	22f9      	movs	r2, #249	; 0xf9
 800ef82:	004b      	lsls	r3, r1, #1
 800ef84:	0007      	movs	r7, r0
 800ef86:	000e      	movs	r6, r1
 800ef88:	085b      	lsrs	r3, r3, #1
 800ef8a:	0592      	lsls	r2, r2, #22
 800ef8c:	4293      	cmp	r3, r2
 800ef8e:	da03      	bge.n	800ef98 <__kernel_sin+0x20>
 800ef90:	f7f3 ff58 	bl	8002e44 <__aeabi_d2iz>
 800ef94:	2800      	cmp	r0, #0
 800ef96:	d04c      	beq.n	800f032 <__kernel_sin+0xba>
 800ef98:	003a      	movs	r2, r7
 800ef9a:	0033      	movs	r3, r6
 800ef9c:	0038      	movs	r0, r7
 800ef9e:	0031      	movs	r1, r6
 800efa0:	f7f3 f8ee 	bl	8002180 <__aeabi_dmul>
 800efa4:	0004      	movs	r4, r0
 800efa6:	000d      	movs	r5, r1
 800efa8:	0002      	movs	r2, r0
 800efaa:	000b      	movs	r3, r1
 800efac:	0038      	movs	r0, r7
 800efae:	0031      	movs	r1, r6
 800efb0:	f7f3 f8e6 	bl	8002180 <__aeabi_dmul>
 800efb4:	4a39      	ldr	r2, [pc, #228]	; (800f09c <__kernel_sin+0x124>)
 800efb6:	9000      	str	r0, [sp, #0]
 800efb8:	9101      	str	r1, [sp, #4]
 800efba:	4b39      	ldr	r3, [pc, #228]	; (800f0a0 <__kernel_sin+0x128>)
 800efbc:	0020      	movs	r0, r4
 800efbe:	0029      	movs	r1, r5
 800efc0:	f7f3 f8de 	bl	8002180 <__aeabi_dmul>
 800efc4:	4a37      	ldr	r2, [pc, #220]	; (800f0a4 <__kernel_sin+0x12c>)
 800efc6:	4b38      	ldr	r3, [pc, #224]	; (800f0a8 <__kernel_sin+0x130>)
 800efc8:	f7f3 fb9c 	bl	8002704 <__aeabi_dsub>
 800efcc:	0022      	movs	r2, r4
 800efce:	002b      	movs	r3, r5
 800efd0:	f7f3 f8d6 	bl	8002180 <__aeabi_dmul>
 800efd4:	4a35      	ldr	r2, [pc, #212]	; (800f0ac <__kernel_sin+0x134>)
 800efd6:	4b36      	ldr	r3, [pc, #216]	; (800f0b0 <__kernel_sin+0x138>)
 800efd8:	f7f2 f978 	bl	80012cc <__aeabi_dadd>
 800efdc:	0022      	movs	r2, r4
 800efde:	002b      	movs	r3, r5
 800efe0:	f7f3 f8ce 	bl	8002180 <__aeabi_dmul>
 800efe4:	4a33      	ldr	r2, [pc, #204]	; (800f0b4 <__kernel_sin+0x13c>)
 800efe6:	4b34      	ldr	r3, [pc, #208]	; (800f0b8 <__kernel_sin+0x140>)
 800efe8:	f7f3 fb8c 	bl	8002704 <__aeabi_dsub>
 800efec:	0022      	movs	r2, r4
 800efee:	002b      	movs	r3, r5
 800eff0:	f7f3 f8c6 	bl	8002180 <__aeabi_dmul>
 800eff4:	4b31      	ldr	r3, [pc, #196]	; (800f0bc <__kernel_sin+0x144>)
 800eff6:	4a32      	ldr	r2, [pc, #200]	; (800f0c0 <__kernel_sin+0x148>)
 800eff8:	f7f2 f968 	bl	80012cc <__aeabi_dadd>
 800effc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800effe:	9004      	str	r0, [sp, #16]
 800f000:	9105      	str	r1, [sp, #20]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d119      	bne.n	800f03a <__kernel_sin+0xc2>
 800f006:	0002      	movs	r2, r0
 800f008:	000b      	movs	r3, r1
 800f00a:	0020      	movs	r0, r4
 800f00c:	0029      	movs	r1, r5
 800f00e:	f7f3 f8b7 	bl	8002180 <__aeabi_dmul>
 800f012:	4a2c      	ldr	r2, [pc, #176]	; (800f0c4 <__kernel_sin+0x14c>)
 800f014:	4b2c      	ldr	r3, [pc, #176]	; (800f0c8 <__kernel_sin+0x150>)
 800f016:	f7f3 fb75 	bl	8002704 <__aeabi_dsub>
 800f01a:	9a00      	ldr	r2, [sp, #0]
 800f01c:	9b01      	ldr	r3, [sp, #4]
 800f01e:	f7f3 f8af 	bl	8002180 <__aeabi_dmul>
 800f022:	0002      	movs	r2, r0
 800f024:	000b      	movs	r3, r1
 800f026:	0038      	movs	r0, r7
 800f028:	0031      	movs	r1, r6
 800f02a:	f7f2 f94f 	bl	80012cc <__aeabi_dadd>
 800f02e:	0007      	movs	r7, r0
 800f030:	000e      	movs	r6, r1
 800f032:	0038      	movs	r0, r7
 800f034:	0031      	movs	r1, r6
 800f036:	b009      	add	sp, #36	; 0x24
 800f038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f03a:	2200      	movs	r2, #0
 800f03c:	9802      	ldr	r0, [sp, #8]
 800f03e:	9903      	ldr	r1, [sp, #12]
 800f040:	4b22      	ldr	r3, [pc, #136]	; (800f0cc <__kernel_sin+0x154>)
 800f042:	f7f3 f89d 	bl	8002180 <__aeabi_dmul>
 800f046:	9a04      	ldr	r2, [sp, #16]
 800f048:	9b05      	ldr	r3, [sp, #20]
 800f04a:	9006      	str	r0, [sp, #24]
 800f04c:	9107      	str	r1, [sp, #28]
 800f04e:	9800      	ldr	r0, [sp, #0]
 800f050:	9901      	ldr	r1, [sp, #4]
 800f052:	f7f3 f895 	bl	8002180 <__aeabi_dmul>
 800f056:	0002      	movs	r2, r0
 800f058:	000b      	movs	r3, r1
 800f05a:	9806      	ldr	r0, [sp, #24]
 800f05c:	9907      	ldr	r1, [sp, #28]
 800f05e:	f7f3 fb51 	bl	8002704 <__aeabi_dsub>
 800f062:	0022      	movs	r2, r4
 800f064:	002b      	movs	r3, r5
 800f066:	f7f3 f88b 	bl	8002180 <__aeabi_dmul>
 800f06a:	9a02      	ldr	r2, [sp, #8]
 800f06c:	9b03      	ldr	r3, [sp, #12]
 800f06e:	f7f3 fb49 	bl	8002704 <__aeabi_dsub>
 800f072:	4a14      	ldr	r2, [pc, #80]	; (800f0c4 <__kernel_sin+0x14c>)
 800f074:	0004      	movs	r4, r0
 800f076:	000d      	movs	r5, r1
 800f078:	9800      	ldr	r0, [sp, #0]
 800f07a:	9901      	ldr	r1, [sp, #4]
 800f07c:	4b12      	ldr	r3, [pc, #72]	; (800f0c8 <__kernel_sin+0x150>)
 800f07e:	f7f3 f87f 	bl	8002180 <__aeabi_dmul>
 800f082:	0002      	movs	r2, r0
 800f084:	000b      	movs	r3, r1
 800f086:	0020      	movs	r0, r4
 800f088:	0029      	movs	r1, r5
 800f08a:	f7f2 f91f 	bl	80012cc <__aeabi_dadd>
 800f08e:	0002      	movs	r2, r0
 800f090:	000b      	movs	r3, r1
 800f092:	0038      	movs	r0, r7
 800f094:	0031      	movs	r1, r6
 800f096:	f7f3 fb35 	bl	8002704 <__aeabi_dsub>
 800f09a:	e7c8      	b.n	800f02e <__kernel_sin+0xb6>
 800f09c:	5acfd57c 	.word	0x5acfd57c
 800f0a0:	3de5d93a 	.word	0x3de5d93a
 800f0a4:	8a2b9ceb 	.word	0x8a2b9ceb
 800f0a8:	3e5ae5e6 	.word	0x3e5ae5e6
 800f0ac:	57b1fe7d 	.word	0x57b1fe7d
 800f0b0:	3ec71de3 	.word	0x3ec71de3
 800f0b4:	19c161d5 	.word	0x19c161d5
 800f0b8:	3f2a01a0 	.word	0x3f2a01a0
 800f0bc:	3f811111 	.word	0x3f811111
 800f0c0:	1110f8a6 	.word	0x1110f8a6
 800f0c4:	55555549 	.word	0x55555549
 800f0c8:	3fc55555 	.word	0x3fc55555
 800f0cc:	3fe00000 	.word	0x3fe00000

0800f0d0 <__ieee754_pow>:
 800f0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0d2:	b095      	sub	sp, #84	; 0x54
 800f0d4:	9202      	str	r2, [sp, #8]
 800f0d6:	9303      	str	r3, [sp, #12]
 800f0d8:	9b03      	ldr	r3, [sp, #12]
 800f0da:	9a03      	ldr	r2, [sp, #12]
 800f0dc:	9304      	str	r3, [sp, #16]
 800f0de:	9b02      	ldr	r3, [sp, #8]
 800f0e0:	0056      	lsls	r6, r2, #1
 800f0e2:	001a      	movs	r2, r3
 800f0e4:	0876      	lsrs	r6, r6, #1
 800f0e6:	0007      	movs	r7, r0
 800f0e8:	000d      	movs	r5, r1
 800f0ea:	4332      	orrs	r2, r6
 800f0ec:	d119      	bne.n	800f122 <__ieee754_pow+0x52>
 800f0ee:	2180      	movs	r1, #128	; 0x80
 800f0f0:	0309      	lsls	r1, r1, #12
 800f0f2:	4069      	eors	r1, r5
 800f0f4:	0002      	movs	r2, r0
 800f0f6:	000b      	movs	r3, r1
 800f0f8:	1892      	adds	r2, r2, r2
 800f0fa:	415b      	adcs	r3, r3
 800f0fc:	4989      	ldr	r1, [pc, #548]	; (800f324 <__ieee754_pow+0x254>)
 800f0fe:	428b      	cmp	r3, r1
 800f100:	d806      	bhi.n	800f110 <__ieee754_pow+0x40>
 800f102:	d001      	beq.n	800f108 <__ieee754_pow+0x38>
 800f104:	f000 fcb6 	bl	800fa74 <__ieee754_pow+0x9a4>
 800f108:	2a00      	cmp	r2, #0
 800f10a:	d101      	bne.n	800f110 <__ieee754_pow+0x40>
 800f10c:	f000 fcb2 	bl	800fa74 <__ieee754_pow+0x9a4>
 800f110:	9a02      	ldr	r2, [sp, #8]
 800f112:	9b03      	ldr	r3, [sp, #12]
 800f114:	0038      	movs	r0, r7
 800f116:	0029      	movs	r1, r5
 800f118:	f7f2 f8d8 	bl	80012cc <__aeabi_dadd>
 800f11c:	9000      	str	r0, [sp, #0]
 800f11e:	9101      	str	r1, [sp, #4]
 800f120:	e0ad      	b.n	800f27e <__ieee754_pow+0x1ae>
 800f122:	4a81      	ldr	r2, [pc, #516]	; (800f328 <__ieee754_pow+0x258>)
 800f124:	004c      	lsls	r4, r1, #1
 800f126:	9108      	str	r1, [sp, #32]
 800f128:	9000      	str	r0, [sp, #0]
 800f12a:	0864      	lsrs	r4, r4, #1
 800f12c:	4294      	cmp	r4, r2
 800f12e:	dc08      	bgt.n	800f142 <__ieee754_pow+0x72>
 800f130:	d101      	bne.n	800f136 <__ieee754_pow+0x66>
 800f132:	2800      	cmp	r0, #0
 800f134:	d1ec      	bne.n	800f110 <__ieee754_pow+0x40>
 800f136:	4a7c      	ldr	r2, [pc, #496]	; (800f328 <__ieee754_pow+0x258>)
 800f138:	4296      	cmp	r6, r2
 800f13a:	dc02      	bgt.n	800f142 <__ieee754_pow+0x72>
 800f13c:	d10c      	bne.n	800f158 <__ieee754_pow+0x88>
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d00a      	beq.n	800f158 <__ieee754_pow+0x88>
 800f142:	4b7a      	ldr	r3, [pc, #488]	; (800f32c <__ieee754_pow+0x25c>)
 800f144:	18eb      	adds	r3, r5, r3
 800f146:	433b      	orrs	r3, r7
 800f148:	d1e2      	bne.n	800f110 <__ieee754_pow+0x40>
 800f14a:	2180      	movs	r1, #128	; 0x80
 800f14c:	9803      	ldr	r0, [sp, #12]
 800f14e:	0309      	lsls	r1, r1, #12
 800f150:	4048      	eors	r0, r1
 800f152:	0003      	movs	r3, r0
 800f154:	9a02      	ldr	r2, [sp, #8]
 800f156:	e7cf      	b.n	800f0f8 <__ieee754_pow+0x28>
 800f158:	2200      	movs	r2, #0
 800f15a:	9206      	str	r2, [sp, #24]
 800f15c:	2d00      	cmp	r5, #0
 800f15e:	da69      	bge.n	800f234 <__ieee754_pow+0x164>
 800f160:	4a73      	ldr	r2, [pc, #460]	; (800f330 <__ieee754_pow+0x260>)
 800f162:	4296      	cmp	r6, r2
 800f164:	dc64      	bgt.n	800f230 <__ieee754_pow+0x160>
 800f166:	4a73      	ldr	r2, [pc, #460]	; (800f334 <__ieee754_pow+0x264>)
 800f168:	4296      	cmp	r6, r2
 800f16a:	dd11      	ble.n	800f190 <__ieee754_pow+0xc0>
 800f16c:	4972      	ldr	r1, [pc, #456]	; (800f338 <__ieee754_pow+0x268>)
 800f16e:	1532      	asrs	r2, r6, #20
 800f170:	1852      	adds	r2, r2, r1
 800f172:	2a14      	cmp	r2, #20
 800f174:	dd3c      	ble.n	800f1f0 <__ieee754_pow+0x120>
 800f176:	2134      	movs	r1, #52	; 0x34
 800f178:	1a89      	subs	r1, r1, r2
 800f17a:	9a02      	ldr	r2, [sp, #8]
 800f17c:	40ca      	lsrs	r2, r1
 800f17e:	0010      	movs	r0, r2
 800f180:	4088      	lsls	r0, r1
 800f182:	4298      	cmp	r0, r3
 800f184:	d104      	bne.n	800f190 <__ieee754_pow+0xc0>
 800f186:	2101      	movs	r1, #1
 800f188:	400a      	ands	r2, r1
 800f18a:	1849      	adds	r1, r1, r1
 800f18c:	1a8a      	subs	r2, r1, r2
 800f18e:	9206      	str	r2, [sp, #24]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d03c      	beq.n	800f20e <__ieee754_pow+0x13e>
 800f194:	0038      	movs	r0, r7
 800f196:	0029      	movs	r1, r5
 800f198:	f7ff fd36 	bl	800ec08 <fabs>
 800f19c:	9000      	str	r0, [sp, #0]
 800f19e:	9101      	str	r1, [sp, #4]
 800f1a0:	2f00      	cmp	r7, #0
 800f1a2:	d000      	beq.n	800f1a6 <__ieee754_pow+0xd6>
 800f1a4:	e094      	b.n	800f2d0 <__ieee754_pow+0x200>
 800f1a6:	2c00      	cmp	r4, #0
 800f1a8:	d005      	beq.n	800f1b6 <__ieee754_pow+0xe6>
 800f1aa:	4a64      	ldr	r2, [pc, #400]	; (800f33c <__ieee754_pow+0x26c>)
 800f1ac:	00ab      	lsls	r3, r5, #2
 800f1ae:	089b      	lsrs	r3, r3, #2
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	d000      	beq.n	800f1b6 <__ieee754_pow+0xe6>
 800f1b4:	e08c      	b.n	800f2d0 <__ieee754_pow+0x200>
 800f1b6:	9b04      	ldr	r3, [sp, #16]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	da07      	bge.n	800f1cc <__ieee754_pow+0xfc>
 800f1bc:	9a00      	ldr	r2, [sp, #0]
 800f1be:	9b01      	ldr	r3, [sp, #4]
 800f1c0:	2000      	movs	r0, #0
 800f1c2:	495e      	ldr	r1, [pc, #376]	; (800f33c <__ieee754_pow+0x26c>)
 800f1c4:	f7f2 fbe2 	bl	800198c <__aeabi_ddiv>
 800f1c8:	9000      	str	r0, [sp, #0]
 800f1ca:	9101      	str	r1, [sp, #4]
 800f1cc:	9b08      	ldr	r3, [sp, #32]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	da55      	bge.n	800f27e <__ieee754_pow+0x1ae>
 800f1d2:	4b56      	ldr	r3, [pc, #344]	; (800f32c <__ieee754_pow+0x25c>)
 800f1d4:	18e4      	adds	r4, r4, r3
 800f1d6:	9b06      	ldr	r3, [sp, #24]
 800f1d8:	431c      	orrs	r4, r3
 800f1da:	d000      	beq.n	800f1de <__ieee754_pow+0x10e>
 800f1dc:	e06c      	b.n	800f2b8 <__ieee754_pow+0x1e8>
 800f1de:	9a00      	ldr	r2, [sp, #0]
 800f1e0:	9b01      	ldr	r3, [sp, #4]
 800f1e2:	0010      	movs	r0, r2
 800f1e4:	0019      	movs	r1, r3
 800f1e6:	f7f3 fa8d 	bl	8002704 <__aeabi_dsub>
 800f1ea:	0002      	movs	r2, r0
 800f1ec:	000b      	movs	r3, r1
 800f1ee:	e01c      	b.n	800f22a <__ieee754_pow+0x15a>
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d1cf      	bne.n	800f194 <__ieee754_pow+0xc4>
 800f1f4:	3314      	adds	r3, #20
 800f1f6:	1a9a      	subs	r2, r3, r2
 800f1f8:	0033      	movs	r3, r6
 800f1fa:	4113      	asrs	r3, r2
 800f1fc:	0019      	movs	r1, r3
 800f1fe:	4091      	lsls	r1, r2
 800f200:	42b1      	cmp	r1, r6
 800f202:	d104      	bne.n	800f20e <__ieee754_pow+0x13e>
 800f204:	2201      	movs	r2, #1
 800f206:	4013      	ands	r3, r2
 800f208:	1892      	adds	r2, r2, r2
 800f20a:	1ad3      	subs	r3, r2, r3
 800f20c:	9306      	str	r3, [sp, #24]
 800f20e:	4b4b      	ldr	r3, [pc, #300]	; (800f33c <__ieee754_pow+0x26c>)
 800f210:	429e      	cmp	r6, r3
 800f212:	d138      	bne.n	800f286 <__ieee754_pow+0x1b6>
 800f214:	0038      	movs	r0, r7
 800f216:	0029      	movs	r1, r5
 800f218:	9b04      	ldr	r3, [sp, #16]
 800f21a:	9000      	str	r0, [sp, #0]
 800f21c:	9101      	str	r1, [sp, #4]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	da2d      	bge.n	800f27e <__ieee754_pow+0x1ae>
 800f222:	003a      	movs	r2, r7
 800f224:	002b      	movs	r3, r5
 800f226:	2000      	movs	r0, #0
 800f228:	4944      	ldr	r1, [pc, #272]	; (800f33c <__ieee754_pow+0x26c>)
 800f22a:	f7f2 fbaf 	bl	800198c <__aeabi_ddiv>
 800f22e:	e775      	b.n	800f11c <__ieee754_pow+0x4c>
 800f230:	2202      	movs	r2, #2
 800f232:	9206      	str	r2, [sp, #24]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d1ad      	bne.n	800f194 <__ieee754_pow+0xc4>
 800f238:	4b3b      	ldr	r3, [pc, #236]	; (800f328 <__ieee754_pow+0x258>)
 800f23a:	429e      	cmp	r6, r3
 800f23c:	d1e7      	bne.n	800f20e <__ieee754_pow+0x13e>
 800f23e:	4b3b      	ldr	r3, [pc, #236]	; (800f32c <__ieee754_pow+0x25c>)
 800f240:	18e3      	adds	r3, r4, r3
 800f242:	433b      	orrs	r3, r7
 800f244:	d101      	bne.n	800f24a <__ieee754_pow+0x17a>
 800f246:	f000 fc15 	bl	800fa74 <__ieee754_pow+0x9a4>
 800f24a:	4b3a      	ldr	r3, [pc, #232]	; (800f334 <__ieee754_pow+0x264>)
 800f24c:	429c      	cmp	r4, r3
 800f24e:	dd09      	ble.n	800f264 <__ieee754_pow+0x194>
 800f250:	9b04      	ldr	r3, [sp, #16]
 800f252:	2b00      	cmp	r3, #0
 800f254:	da01      	bge.n	800f25a <__ieee754_pow+0x18a>
 800f256:	f000 fc11 	bl	800fa7c <__ieee754_pow+0x9ac>
 800f25a:	9b02      	ldr	r3, [sp, #8]
 800f25c:	9c03      	ldr	r4, [sp, #12]
 800f25e:	9300      	str	r3, [sp, #0]
 800f260:	9401      	str	r4, [sp, #4]
 800f262:	e00c      	b.n	800f27e <__ieee754_pow+0x1ae>
 800f264:	9b04      	ldr	r3, [sp, #16]
 800f266:	2b00      	cmp	r3, #0
 800f268:	db01      	blt.n	800f26e <__ieee754_pow+0x19e>
 800f26a:	f000 fc07 	bl	800fa7c <__ieee754_pow+0x9ac>
 800f26e:	2280      	movs	r2, #128	; 0x80
 800f270:	0612      	lsls	r2, r2, #24
 800f272:	4694      	mov	ip, r2
 800f274:	9b02      	ldr	r3, [sp, #8]
 800f276:	9300      	str	r3, [sp, #0]
 800f278:	9b03      	ldr	r3, [sp, #12]
 800f27a:	4463      	add	r3, ip
 800f27c:	9301      	str	r3, [sp, #4]
 800f27e:	9800      	ldr	r0, [sp, #0]
 800f280:	9901      	ldr	r1, [sp, #4]
 800f282:	b015      	add	sp, #84	; 0x54
 800f284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f286:	2380      	movs	r3, #128	; 0x80
 800f288:	9a04      	ldr	r2, [sp, #16]
 800f28a:	05db      	lsls	r3, r3, #23
 800f28c:	429a      	cmp	r2, r3
 800f28e:	d106      	bne.n	800f29e <__ieee754_pow+0x1ce>
 800f290:	003a      	movs	r2, r7
 800f292:	002b      	movs	r3, r5
 800f294:	0038      	movs	r0, r7
 800f296:	0029      	movs	r1, r5
 800f298:	f7f2 ff72 	bl	8002180 <__aeabi_dmul>
 800f29c:	e73e      	b.n	800f11c <__ieee754_pow+0x4c>
 800f29e:	4b28      	ldr	r3, [pc, #160]	; (800f340 <__ieee754_pow+0x270>)
 800f2a0:	9a04      	ldr	r2, [sp, #16]
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d000      	beq.n	800f2a8 <__ieee754_pow+0x1d8>
 800f2a6:	e775      	b.n	800f194 <__ieee754_pow+0xc4>
 800f2a8:	2d00      	cmp	r5, #0
 800f2aa:	da00      	bge.n	800f2ae <__ieee754_pow+0x1de>
 800f2ac:	e772      	b.n	800f194 <__ieee754_pow+0xc4>
 800f2ae:	0038      	movs	r0, r7
 800f2b0:	0029      	movs	r1, r5
 800f2b2:	f7ff fcb5 	bl	800ec20 <__ieee754_sqrt>
 800f2b6:	e731      	b.n	800f11c <__ieee754_pow+0x4c>
 800f2b8:	9b06      	ldr	r3, [sp, #24]
 800f2ba:	2b01      	cmp	r3, #1
 800f2bc:	d1df      	bne.n	800f27e <__ieee754_pow+0x1ae>
 800f2be:	9800      	ldr	r0, [sp, #0]
 800f2c0:	2180      	movs	r1, #128	; 0x80
 800f2c2:	0002      	movs	r2, r0
 800f2c4:	9801      	ldr	r0, [sp, #4]
 800f2c6:	0609      	lsls	r1, r1, #24
 800f2c8:	1843      	adds	r3, r0, r1
 800f2ca:	9200      	str	r2, [sp, #0]
 800f2cc:	9301      	str	r3, [sp, #4]
 800f2ce:	e7d6      	b.n	800f27e <__ieee754_pow+0x1ae>
 800f2d0:	0feb      	lsrs	r3, r5, #31
 800f2d2:	3b01      	subs	r3, #1
 800f2d4:	930e      	str	r3, [sp, #56]	; 0x38
 800f2d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f2d8:	9b06      	ldr	r3, [sp, #24]
 800f2da:	4313      	orrs	r3, r2
 800f2dc:	d104      	bne.n	800f2e8 <__ieee754_pow+0x218>
 800f2de:	003a      	movs	r2, r7
 800f2e0:	002b      	movs	r3, r5
 800f2e2:	0038      	movs	r0, r7
 800f2e4:	0029      	movs	r1, r5
 800f2e6:	e77e      	b.n	800f1e6 <__ieee754_pow+0x116>
 800f2e8:	4b16      	ldr	r3, [pc, #88]	; (800f344 <__ieee754_pow+0x274>)
 800f2ea:	429e      	cmp	r6, r3
 800f2ec:	dc00      	bgt.n	800f2f0 <__ieee754_pow+0x220>
 800f2ee:	e0f1      	b.n	800f4d4 <__ieee754_pow+0x404>
 800f2f0:	4b15      	ldr	r3, [pc, #84]	; (800f348 <__ieee754_pow+0x278>)
 800f2f2:	429e      	cmp	r6, r3
 800f2f4:	dd09      	ble.n	800f30a <__ieee754_pow+0x23a>
 800f2f6:	4b0f      	ldr	r3, [pc, #60]	; (800f334 <__ieee754_pow+0x264>)
 800f2f8:	429c      	cmp	r4, r3
 800f2fa:	dc0c      	bgt.n	800f316 <__ieee754_pow+0x246>
 800f2fc:	9b04      	ldr	r3, [sp, #16]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	da0c      	bge.n	800f31c <__ieee754_pow+0x24c>
 800f302:	2000      	movs	r0, #0
 800f304:	f000 fe72 	bl	800ffec <__math_oflow>
 800f308:	e708      	b.n	800f11c <__ieee754_pow+0x4c>
 800f30a:	4b10      	ldr	r3, [pc, #64]	; (800f34c <__ieee754_pow+0x27c>)
 800f30c:	429c      	cmp	r4, r3
 800f30e:	ddf5      	ble.n	800f2fc <__ieee754_pow+0x22c>
 800f310:	4b0a      	ldr	r3, [pc, #40]	; (800f33c <__ieee754_pow+0x26c>)
 800f312:	429c      	cmp	r4, r3
 800f314:	dd1c      	ble.n	800f350 <__ieee754_pow+0x280>
 800f316:	9b04      	ldr	r3, [sp, #16]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	dcf2      	bgt.n	800f302 <__ieee754_pow+0x232>
 800f31c:	2000      	movs	r0, #0
 800f31e:	f000 fe5e 	bl	800ffde <__math_uflow>
 800f322:	e6fb      	b.n	800f11c <__ieee754_pow+0x4c>
 800f324:	fff00000 	.word	0xfff00000
 800f328:	7ff00000 	.word	0x7ff00000
 800f32c:	c0100000 	.word	0xc0100000
 800f330:	433fffff 	.word	0x433fffff
 800f334:	3fefffff 	.word	0x3fefffff
 800f338:	fffffc01 	.word	0xfffffc01
 800f33c:	3ff00000 	.word	0x3ff00000
 800f340:	3fe00000 	.word	0x3fe00000
 800f344:	41e00000 	.word	0x41e00000
 800f348:	43f00000 	.word	0x43f00000
 800f34c:	3feffffe 	.word	0x3feffffe
 800f350:	2200      	movs	r2, #0
 800f352:	9800      	ldr	r0, [sp, #0]
 800f354:	9901      	ldr	r1, [sp, #4]
 800f356:	4b53      	ldr	r3, [pc, #332]	; (800f4a4 <__ieee754_pow+0x3d4>)
 800f358:	f7f3 f9d4 	bl	8002704 <__aeabi_dsub>
 800f35c:	22c0      	movs	r2, #192	; 0xc0
 800f35e:	4b52      	ldr	r3, [pc, #328]	; (800f4a8 <__ieee754_pow+0x3d8>)
 800f360:	05d2      	lsls	r2, r2, #23
 800f362:	0004      	movs	r4, r0
 800f364:	000d      	movs	r5, r1
 800f366:	f7f2 ff0b 	bl	8002180 <__aeabi_dmul>
 800f36a:	4a50      	ldr	r2, [pc, #320]	; (800f4ac <__ieee754_pow+0x3dc>)
 800f36c:	0006      	movs	r6, r0
 800f36e:	000f      	movs	r7, r1
 800f370:	0020      	movs	r0, r4
 800f372:	0029      	movs	r1, r5
 800f374:	4b4e      	ldr	r3, [pc, #312]	; (800f4b0 <__ieee754_pow+0x3e0>)
 800f376:	f7f2 ff03 	bl	8002180 <__aeabi_dmul>
 800f37a:	2200      	movs	r2, #0
 800f37c:	9000      	str	r0, [sp, #0]
 800f37e:	9101      	str	r1, [sp, #4]
 800f380:	4b4c      	ldr	r3, [pc, #304]	; (800f4b4 <__ieee754_pow+0x3e4>)
 800f382:	0020      	movs	r0, r4
 800f384:	0029      	movs	r1, r5
 800f386:	f7f2 fefb 	bl	8002180 <__aeabi_dmul>
 800f38a:	0002      	movs	r2, r0
 800f38c:	000b      	movs	r3, r1
 800f38e:	484a      	ldr	r0, [pc, #296]	; (800f4b8 <__ieee754_pow+0x3e8>)
 800f390:	494a      	ldr	r1, [pc, #296]	; (800f4bc <__ieee754_pow+0x3ec>)
 800f392:	f7f3 f9b7 	bl	8002704 <__aeabi_dsub>
 800f396:	0022      	movs	r2, r4
 800f398:	002b      	movs	r3, r5
 800f39a:	f7f2 fef1 	bl	8002180 <__aeabi_dmul>
 800f39e:	0002      	movs	r2, r0
 800f3a0:	000b      	movs	r3, r1
 800f3a2:	2000      	movs	r0, #0
 800f3a4:	4946      	ldr	r1, [pc, #280]	; (800f4c0 <__ieee754_pow+0x3f0>)
 800f3a6:	f7f3 f9ad 	bl	8002704 <__aeabi_dsub>
 800f3aa:	0022      	movs	r2, r4
 800f3ac:	002b      	movs	r3, r5
 800f3ae:	9004      	str	r0, [sp, #16]
 800f3b0:	9105      	str	r1, [sp, #20]
 800f3b2:	0020      	movs	r0, r4
 800f3b4:	0029      	movs	r1, r5
 800f3b6:	f7f2 fee3 	bl	8002180 <__aeabi_dmul>
 800f3ba:	0002      	movs	r2, r0
 800f3bc:	000b      	movs	r3, r1
 800f3be:	9804      	ldr	r0, [sp, #16]
 800f3c0:	9905      	ldr	r1, [sp, #20]
 800f3c2:	f7f2 fedd 	bl	8002180 <__aeabi_dmul>
 800f3c6:	4a3f      	ldr	r2, [pc, #252]	; (800f4c4 <__ieee754_pow+0x3f4>)
 800f3c8:	4b37      	ldr	r3, [pc, #220]	; (800f4a8 <__ieee754_pow+0x3d8>)
 800f3ca:	f7f2 fed9 	bl	8002180 <__aeabi_dmul>
 800f3ce:	0002      	movs	r2, r0
 800f3d0:	000b      	movs	r3, r1
 800f3d2:	9800      	ldr	r0, [sp, #0]
 800f3d4:	9901      	ldr	r1, [sp, #4]
 800f3d6:	f7f3 f995 	bl	8002704 <__aeabi_dsub>
 800f3da:	0002      	movs	r2, r0
 800f3dc:	000b      	movs	r3, r1
 800f3de:	0004      	movs	r4, r0
 800f3e0:	000d      	movs	r5, r1
 800f3e2:	0030      	movs	r0, r6
 800f3e4:	0039      	movs	r1, r7
 800f3e6:	f7f1 ff71 	bl	80012cc <__aeabi_dadd>
 800f3ea:	2000      	movs	r0, #0
 800f3ec:	0032      	movs	r2, r6
 800f3ee:	003b      	movs	r3, r7
 800f3f0:	9004      	str	r0, [sp, #16]
 800f3f2:	9105      	str	r1, [sp, #20]
 800f3f4:	f7f3 f986 	bl	8002704 <__aeabi_dsub>
 800f3f8:	0002      	movs	r2, r0
 800f3fa:	000b      	movs	r3, r1
 800f3fc:	0020      	movs	r0, r4
 800f3fe:	0029      	movs	r1, r5
 800f400:	f7f3 f980 	bl	8002704 <__aeabi_dsub>
 800f404:	9b06      	ldr	r3, [sp, #24]
 800f406:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f408:	3b01      	subs	r3, #1
 800f40a:	0006      	movs	r6, r0
 800f40c:	000f      	movs	r7, r1
 800f40e:	4313      	orrs	r3, r2
 800f410:	d000      	beq.n	800f414 <__ieee754_pow+0x344>
 800f412:	e1dc      	b.n	800f7ce <__ieee754_pow+0x6fe>
 800f414:	2300      	movs	r3, #0
 800f416:	4c2c      	ldr	r4, [pc, #176]	; (800f4c8 <__ieee754_pow+0x3f8>)
 800f418:	9300      	str	r3, [sp, #0]
 800f41a:	9401      	str	r4, [sp, #4]
 800f41c:	9c02      	ldr	r4, [sp, #8]
 800f41e:	9d03      	ldr	r5, [sp, #12]
 800f420:	9802      	ldr	r0, [sp, #8]
 800f422:	9903      	ldr	r1, [sp, #12]
 800f424:	2400      	movs	r4, #0
 800f426:	002b      	movs	r3, r5
 800f428:	0022      	movs	r2, r4
 800f42a:	f7f3 f96b 	bl	8002704 <__aeabi_dsub>
 800f42e:	9a04      	ldr	r2, [sp, #16]
 800f430:	9b05      	ldr	r3, [sp, #20]
 800f432:	f7f2 fea5 	bl	8002180 <__aeabi_dmul>
 800f436:	9a02      	ldr	r2, [sp, #8]
 800f438:	9b03      	ldr	r3, [sp, #12]
 800f43a:	9006      	str	r0, [sp, #24]
 800f43c:	9107      	str	r1, [sp, #28]
 800f43e:	0030      	movs	r0, r6
 800f440:	0039      	movs	r1, r7
 800f442:	f7f2 fe9d 	bl	8002180 <__aeabi_dmul>
 800f446:	0002      	movs	r2, r0
 800f448:	000b      	movs	r3, r1
 800f44a:	9806      	ldr	r0, [sp, #24]
 800f44c:	9907      	ldr	r1, [sp, #28]
 800f44e:	f7f1 ff3d 	bl	80012cc <__aeabi_dadd>
 800f452:	0022      	movs	r2, r4
 800f454:	002b      	movs	r3, r5
 800f456:	0006      	movs	r6, r0
 800f458:	000f      	movs	r7, r1
 800f45a:	9804      	ldr	r0, [sp, #16]
 800f45c:	9905      	ldr	r1, [sp, #20]
 800f45e:	f7f2 fe8f 	bl	8002180 <__aeabi_dmul>
 800f462:	0003      	movs	r3, r0
 800f464:	000c      	movs	r4, r1
 800f466:	9004      	str	r0, [sp, #16]
 800f468:	9105      	str	r1, [sp, #20]
 800f46a:	9306      	str	r3, [sp, #24]
 800f46c:	9407      	str	r4, [sp, #28]
 800f46e:	0002      	movs	r2, r0
 800f470:	000b      	movs	r3, r1
 800f472:	0030      	movs	r0, r6
 800f474:	0039      	movs	r1, r7
 800f476:	f7f1 ff29 	bl	80012cc <__aeabi_dadd>
 800f47a:	4b14      	ldr	r3, [pc, #80]	; (800f4cc <__ieee754_pow+0x3fc>)
 800f47c:	0005      	movs	r5, r0
 800f47e:	000c      	movs	r4, r1
 800f480:	9108      	str	r1, [sp, #32]
 800f482:	4299      	cmp	r1, r3
 800f484:	dc00      	bgt.n	800f488 <__ieee754_pow+0x3b8>
 800f486:	e2d4      	b.n	800fa32 <__ieee754_pow+0x962>
 800f488:	4b11      	ldr	r3, [pc, #68]	; (800f4d0 <__ieee754_pow+0x400>)
 800f48a:	18cb      	adds	r3, r1, r3
 800f48c:	4303      	orrs	r3, r0
 800f48e:	d100      	bne.n	800f492 <__ieee754_pow+0x3c2>
 800f490:	e1d6      	b.n	800f840 <__ieee754_pow+0x770>
 800f492:	9800      	ldr	r0, [sp, #0]
 800f494:	9901      	ldr	r1, [sp, #4]
 800f496:	2300      	movs	r3, #0
 800f498:	2200      	movs	r2, #0
 800f49a:	f7f0 ffd3 	bl	8000444 <__aeabi_dcmplt>
 800f49e:	1e43      	subs	r3, r0, #1
 800f4a0:	4198      	sbcs	r0, r3
 800f4a2:	e72f      	b.n	800f304 <__ieee754_pow+0x234>
 800f4a4:	3ff00000 	.word	0x3ff00000
 800f4a8:	3ff71547 	.word	0x3ff71547
 800f4ac:	f85ddf44 	.word	0xf85ddf44
 800f4b0:	3e54ae0b 	.word	0x3e54ae0b
 800f4b4:	3fd00000 	.word	0x3fd00000
 800f4b8:	55555555 	.word	0x55555555
 800f4bc:	3fd55555 	.word	0x3fd55555
 800f4c0:	3fe00000 	.word	0x3fe00000
 800f4c4:	652b82fe 	.word	0x652b82fe
 800f4c8:	bff00000 	.word	0xbff00000
 800f4cc:	408fffff 	.word	0x408fffff
 800f4d0:	bf700000 	.word	0xbf700000
 800f4d4:	4bbf      	ldr	r3, [pc, #764]	; (800f7d4 <__ieee754_pow+0x704>)
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	422b      	tst	r3, r5
 800f4da:	d10a      	bne.n	800f4f2 <__ieee754_pow+0x422>
 800f4dc:	9800      	ldr	r0, [sp, #0]
 800f4de:	9901      	ldr	r1, [sp, #4]
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	4bbd      	ldr	r3, [pc, #756]	; (800f7d8 <__ieee754_pow+0x708>)
 800f4e4:	f7f2 fe4c 	bl	8002180 <__aeabi_dmul>
 800f4e8:	2235      	movs	r2, #53	; 0x35
 800f4ea:	9000      	str	r0, [sp, #0]
 800f4ec:	9101      	str	r1, [sp, #4]
 800f4ee:	9c01      	ldr	r4, [sp, #4]
 800f4f0:	4252      	negs	r2, r2
 800f4f2:	49ba      	ldr	r1, [pc, #744]	; (800f7dc <__ieee754_pow+0x70c>)
 800f4f4:	1523      	asrs	r3, r4, #20
 800f4f6:	185b      	adds	r3, r3, r1
 800f4f8:	189b      	adds	r3, r3, r2
 800f4fa:	0324      	lsls	r4, r4, #12
 800f4fc:	4db8      	ldr	r5, [pc, #736]	; (800f7e0 <__ieee754_pow+0x710>)
 800f4fe:	930d      	str	r3, [sp, #52]	; 0x34
 800f500:	4bb8      	ldr	r3, [pc, #736]	; (800f7e4 <__ieee754_pow+0x714>)
 800f502:	0b22      	lsrs	r2, r4, #12
 800f504:	4315      	orrs	r5, r2
 800f506:	2400      	movs	r4, #0
 800f508:	429a      	cmp	r2, r3
 800f50a:	dd09      	ble.n	800f520 <__ieee754_pow+0x450>
 800f50c:	4bb6      	ldr	r3, [pc, #728]	; (800f7e8 <__ieee754_pow+0x718>)
 800f50e:	3401      	adds	r4, #1
 800f510:	429a      	cmp	r2, r3
 800f512:	dd05      	ble.n	800f520 <__ieee754_pow+0x450>
 800f514:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f516:	191b      	adds	r3, r3, r4
 800f518:	2400      	movs	r4, #0
 800f51a:	930d      	str	r3, [sp, #52]	; 0x34
 800f51c:	4bb3      	ldr	r3, [pc, #716]	; (800f7ec <__ieee754_pow+0x71c>)
 800f51e:	18ed      	adds	r5, r5, r3
 800f520:	4bb3      	ldr	r3, [pc, #716]	; (800f7f0 <__ieee754_pow+0x720>)
 800f522:	00e2      	lsls	r2, r4, #3
 800f524:	189b      	adds	r3, r3, r2
 800f526:	9800      	ldr	r0, [sp, #0]
 800f528:	9901      	ldr	r1, [sp, #4]
 800f52a:	920f      	str	r2, [sp, #60]	; 0x3c
 800f52c:	0029      	movs	r1, r5
 800f52e:	681a      	ldr	r2, [r3, #0]
 800f530:	685b      	ldr	r3, [r3, #4]
 800f532:	0006      	movs	r6, r0
 800f534:	920a      	str	r2, [sp, #40]	; 0x28
 800f536:	930b      	str	r3, [sp, #44]	; 0x2c
 800f538:	f7f3 f8e4 	bl	8002704 <__aeabi_dsub>
 800f53c:	0032      	movs	r2, r6
 800f53e:	002b      	movs	r3, r5
 800f540:	9010      	str	r0, [sp, #64]	; 0x40
 800f542:	9111      	str	r1, [sp, #68]	; 0x44
 800f544:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f546:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f548:	f7f1 fec0 	bl	80012cc <__aeabi_dadd>
 800f54c:	0002      	movs	r2, r0
 800f54e:	000b      	movs	r3, r1
 800f550:	2000      	movs	r0, #0
 800f552:	49a3      	ldr	r1, [pc, #652]	; (800f7e0 <__ieee754_pow+0x710>)
 800f554:	f7f2 fa1a 	bl	800198c <__aeabi_ddiv>
 800f558:	0002      	movs	r2, r0
 800f55a:	000b      	movs	r3, r1
 800f55c:	9012      	str	r0, [sp, #72]	; 0x48
 800f55e:	9113      	str	r1, [sp, #76]	; 0x4c
 800f560:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f562:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f564:	f7f2 fe0c 	bl	8002180 <__aeabi_dmul>
 800f568:	9008      	str	r0, [sp, #32]
 800f56a:	9109      	str	r1, [sp, #36]	; 0x24
 800f56c:	9a08      	ldr	r2, [sp, #32]
 800f56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f570:	9204      	str	r2, [sp, #16]
 800f572:	9305      	str	r3, [sp, #20]
 800f574:	2300      	movs	r3, #0
 800f576:	2180      	movs	r1, #128	; 0x80
 800f578:	2080      	movs	r0, #128	; 0x80
 800f57a:	9304      	str	r3, [sp, #16]
 800f57c:	9a04      	ldr	r2, [sp, #16]
 800f57e:	9b05      	ldr	r3, [sp, #20]
 800f580:	9200      	str	r2, [sp, #0]
 800f582:	9301      	str	r3, [sp, #4]
 800f584:	2200      	movs	r2, #0
 800f586:	002f      	movs	r7, r5
 800f588:	0589      	lsls	r1, r1, #22
 800f58a:	106d      	asrs	r5, r5, #1
 800f58c:	4329      	orrs	r1, r5
 800f58e:	0300      	lsls	r0, r0, #12
 800f590:	1809      	adds	r1, r1, r0
 800f592:	04a0      	lsls	r0, r4, #18
 800f594:	180b      	adds	r3, r1, r0
 800f596:	9800      	ldr	r0, [sp, #0]
 800f598:	9901      	ldr	r1, [sp, #4]
 800f59a:	0014      	movs	r4, r2
 800f59c:	001d      	movs	r5, r3
 800f59e:	f7f2 fdef 	bl	8002180 <__aeabi_dmul>
 800f5a2:	0002      	movs	r2, r0
 800f5a4:	000b      	movs	r3, r1
 800f5a6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f5a8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f5aa:	f7f3 f8ab 	bl	8002704 <__aeabi_dsub>
 800f5ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f5b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5b2:	9010      	str	r0, [sp, #64]	; 0x40
 800f5b4:	9111      	str	r1, [sp, #68]	; 0x44
 800f5b6:	0020      	movs	r0, r4
 800f5b8:	0029      	movs	r1, r5
 800f5ba:	f7f3 f8a3 	bl	8002704 <__aeabi_dsub>
 800f5be:	0002      	movs	r2, r0
 800f5c0:	000b      	movs	r3, r1
 800f5c2:	0030      	movs	r0, r6
 800f5c4:	0039      	movs	r1, r7
 800f5c6:	f7f3 f89d 	bl	8002704 <__aeabi_dsub>
 800f5ca:	9a00      	ldr	r2, [sp, #0]
 800f5cc:	9b01      	ldr	r3, [sp, #4]
 800f5ce:	f7f2 fdd7 	bl	8002180 <__aeabi_dmul>
 800f5d2:	0002      	movs	r2, r0
 800f5d4:	000b      	movs	r3, r1
 800f5d6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f5d8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f5da:	f7f3 f893 	bl	8002704 <__aeabi_dsub>
 800f5de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f5e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f5e2:	f7f2 fdcd 	bl	8002180 <__aeabi_dmul>
 800f5e6:	9a08      	ldr	r2, [sp, #32]
 800f5e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5ea:	900a      	str	r0, [sp, #40]	; 0x28
 800f5ec:	910b      	str	r1, [sp, #44]	; 0x2c
 800f5ee:	0010      	movs	r0, r2
 800f5f0:	0019      	movs	r1, r3
 800f5f2:	f7f2 fdc5 	bl	8002180 <__aeabi_dmul>
 800f5f6:	0006      	movs	r6, r0
 800f5f8:	000f      	movs	r7, r1
 800f5fa:	4a7e      	ldr	r2, [pc, #504]	; (800f7f4 <__ieee754_pow+0x724>)
 800f5fc:	4b7e      	ldr	r3, [pc, #504]	; (800f7f8 <__ieee754_pow+0x728>)
 800f5fe:	f7f2 fdbf 	bl	8002180 <__aeabi_dmul>
 800f602:	4a7e      	ldr	r2, [pc, #504]	; (800f7fc <__ieee754_pow+0x72c>)
 800f604:	4b7e      	ldr	r3, [pc, #504]	; (800f800 <__ieee754_pow+0x730>)
 800f606:	f7f1 fe61 	bl	80012cc <__aeabi_dadd>
 800f60a:	0032      	movs	r2, r6
 800f60c:	003b      	movs	r3, r7
 800f60e:	f7f2 fdb7 	bl	8002180 <__aeabi_dmul>
 800f612:	4a7c      	ldr	r2, [pc, #496]	; (800f804 <__ieee754_pow+0x734>)
 800f614:	4b7c      	ldr	r3, [pc, #496]	; (800f808 <__ieee754_pow+0x738>)
 800f616:	f7f1 fe59 	bl	80012cc <__aeabi_dadd>
 800f61a:	0032      	movs	r2, r6
 800f61c:	003b      	movs	r3, r7
 800f61e:	f7f2 fdaf 	bl	8002180 <__aeabi_dmul>
 800f622:	4a7a      	ldr	r2, [pc, #488]	; (800f80c <__ieee754_pow+0x73c>)
 800f624:	4b7a      	ldr	r3, [pc, #488]	; (800f810 <__ieee754_pow+0x740>)
 800f626:	f7f1 fe51 	bl	80012cc <__aeabi_dadd>
 800f62a:	0032      	movs	r2, r6
 800f62c:	003b      	movs	r3, r7
 800f62e:	f7f2 fda7 	bl	8002180 <__aeabi_dmul>
 800f632:	4a78      	ldr	r2, [pc, #480]	; (800f814 <__ieee754_pow+0x744>)
 800f634:	4b78      	ldr	r3, [pc, #480]	; (800f818 <__ieee754_pow+0x748>)
 800f636:	f7f1 fe49 	bl	80012cc <__aeabi_dadd>
 800f63a:	0032      	movs	r2, r6
 800f63c:	003b      	movs	r3, r7
 800f63e:	f7f2 fd9f 	bl	8002180 <__aeabi_dmul>
 800f642:	4a76      	ldr	r2, [pc, #472]	; (800f81c <__ieee754_pow+0x74c>)
 800f644:	4b76      	ldr	r3, [pc, #472]	; (800f820 <__ieee754_pow+0x750>)
 800f646:	f7f1 fe41 	bl	80012cc <__aeabi_dadd>
 800f64a:	0032      	movs	r2, r6
 800f64c:	0004      	movs	r4, r0
 800f64e:	000d      	movs	r5, r1
 800f650:	003b      	movs	r3, r7
 800f652:	0030      	movs	r0, r6
 800f654:	0039      	movs	r1, r7
 800f656:	f7f2 fd93 	bl	8002180 <__aeabi_dmul>
 800f65a:	0002      	movs	r2, r0
 800f65c:	000b      	movs	r3, r1
 800f65e:	0020      	movs	r0, r4
 800f660:	0029      	movs	r1, r5
 800f662:	f7f2 fd8d 	bl	8002180 <__aeabi_dmul>
 800f666:	9a00      	ldr	r2, [sp, #0]
 800f668:	9b01      	ldr	r3, [sp, #4]
 800f66a:	0004      	movs	r4, r0
 800f66c:	000d      	movs	r5, r1
 800f66e:	9808      	ldr	r0, [sp, #32]
 800f670:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f672:	f7f1 fe2b 	bl	80012cc <__aeabi_dadd>
 800f676:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f678:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f67a:	f7f2 fd81 	bl	8002180 <__aeabi_dmul>
 800f67e:	0022      	movs	r2, r4
 800f680:	002b      	movs	r3, r5
 800f682:	f7f1 fe23 	bl	80012cc <__aeabi_dadd>
 800f686:	9a00      	ldr	r2, [sp, #0]
 800f688:	9b01      	ldr	r3, [sp, #4]
 800f68a:	9010      	str	r0, [sp, #64]	; 0x40
 800f68c:	9111      	str	r1, [sp, #68]	; 0x44
 800f68e:	0010      	movs	r0, r2
 800f690:	0019      	movs	r1, r3
 800f692:	f7f2 fd75 	bl	8002180 <__aeabi_dmul>
 800f696:	2200      	movs	r2, #0
 800f698:	4b62      	ldr	r3, [pc, #392]	; (800f824 <__ieee754_pow+0x754>)
 800f69a:	0004      	movs	r4, r0
 800f69c:	000d      	movs	r5, r1
 800f69e:	f7f1 fe15 	bl	80012cc <__aeabi_dadd>
 800f6a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f6a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f6a6:	f7f1 fe11 	bl	80012cc <__aeabi_dadd>
 800f6aa:	2000      	movs	r0, #0
 800f6ac:	000f      	movs	r7, r1
 800f6ae:	0006      	movs	r6, r0
 800f6b0:	0002      	movs	r2, r0
 800f6b2:	000b      	movs	r3, r1
 800f6b4:	9800      	ldr	r0, [sp, #0]
 800f6b6:	9901      	ldr	r1, [sp, #4]
 800f6b8:	f7f2 fd62 	bl	8002180 <__aeabi_dmul>
 800f6bc:	2200      	movs	r2, #0
 800f6be:	9000      	str	r0, [sp, #0]
 800f6c0:	9101      	str	r1, [sp, #4]
 800f6c2:	4b58      	ldr	r3, [pc, #352]	; (800f824 <__ieee754_pow+0x754>)
 800f6c4:	0030      	movs	r0, r6
 800f6c6:	0039      	movs	r1, r7
 800f6c8:	f7f3 f81c 	bl	8002704 <__aeabi_dsub>
 800f6cc:	0022      	movs	r2, r4
 800f6ce:	002b      	movs	r3, r5
 800f6d0:	f7f3 f818 	bl	8002704 <__aeabi_dsub>
 800f6d4:	0002      	movs	r2, r0
 800f6d6:	000b      	movs	r3, r1
 800f6d8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f6da:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f6dc:	f7f3 f812 	bl	8002704 <__aeabi_dsub>
 800f6e0:	9a08      	ldr	r2, [sp, #32]
 800f6e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6e4:	f7f2 fd4c 	bl	8002180 <__aeabi_dmul>
 800f6e8:	0032      	movs	r2, r6
 800f6ea:	0004      	movs	r4, r0
 800f6ec:	000d      	movs	r5, r1
 800f6ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f6f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f6f2:	003b      	movs	r3, r7
 800f6f4:	f7f2 fd44 	bl	8002180 <__aeabi_dmul>
 800f6f8:	0002      	movs	r2, r0
 800f6fa:	000b      	movs	r3, r1
 800f6fc:	0020      	movs	r0, r4
 800f6fe:	0029      	movs	r1, r5
 800f700:	f7f1 fde4 	bl	80012cc <__aeabi_dadd>
 800f704:	0004      	movs	r4, r0
 800f706:	000d      	movs	r5, r1
 800f708:	0002      	movs	r2, r0
 800f70a:	000b      	movs	r3, r1
 800f70c:	9800      	ldr	r0, [sp, #0]
 800f70e:	9901      	ldr	r1, [sp, #4]
 800f710:	f7f1 fddc 	bl	80012cc <__aeabi_dadd>
 800f714:	22e0      	movs	r2, #224	; 0xe0
 800f716:	2000      	movs	r0, #0
 800f718:	4b43      	ldr	r3, [pc, #268]	; (800f828 <__ieee754_pow+0x758>)
 800f71a:	0612      	lsls	r2, r2, #24
 800f71c:	0006      	movs	r6, r0
 800f71e:	000f      	movs	r7, r1
 800f720:	f7f2 fd2e 	bl	8002180 <__aeabi_dmul>
 800f724:	9008      	str	r0, [sp, #32]
 800f726:	9109      	str	r1, [sp, #36]	; 0x24
 800f728:	9a00      	ldr	r2, [sp, #0]
 800f72a:	9b01      	ldr	r3, [sp, #4]
 800f72c:	0030      	movs	r0, r6
 800f72e:	0039      	movs	r1, r7
 800f730:	f7f2 ffe8 	bl	8002704 <__aeabi_dsub>
 800f734:	0002      	movs	r2, r0
 800f736:	000b      	movs	r3, r1
 800f738:	0020      	movs	r0, r4
 800f73a:	0029      	movs	r1, r5
 800f73c:	f7f2 ffe2 	bl	8002704 <__aeabi_dsub>
 800f740:	4a3a      	ldr	r2, [pc, #232]	; (800f82c <__ieee754_pow+0x75c>)
 800f742:	4b39      	ldr	r3, [pc, #228]	; (800f828 <__ieee754_pow+0x758>)
 800f744:	f7f2 fd1c 	bl	8002180 <__aeabi_dmul>
 800f748:	4a39      	ldr	r2, [pc, #228]	; (800f830 <__ieee754_pow+0x760>)
 800f74a:	0004      	movs	r4, r0
 800f74c:	000d      	movs	r5, r1
 800f74e:	0030      	movs	r0, r6
 800f750:	0039      	movs	r1, r7
 800f752:	4b38      	ldr	r3, [pc, #224]	; (800f834 <__ieee754_pow+0x764>)
 800f754:	f7f2 fd14 	bl	8002180 <__aeabi_dmul>
 800f758:	0002      	movs	r2, r0
 800f75a:	000b      	movs	r3, r1
 800f75c:	0020      	movs	r0, r4
 800f75e:	0029      	movs	r1, r5
 800f760:	f7f1 fdb4 	bl	80012cc <__aeabi_dadd>
 800f764:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f766:	4b34      	ldr	r3, [pc, #208]	; (800f838 <__ieee754_pow+0x768>)
 800f768:	189b      	adds	r3, r3, r2
 800f76a:	681a      	ldr	r2, [r3, #0]
 800f76c:	685b      	ldr	r3, [r3, #4]
 800f76e:	f7f1 fdad 	bl	80012cc <__aeabi_dadd>
 800f772:	9000      	str	r0, [sp, #0]
 800f774:	9101      	str	r1, [sp, #4]
 800f776:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f778:	f7f3 fb9a 	bl	8002eb0 <__aeabi_i2d>
 800f77c:	0004      	movs	r4, r0
 800f77e:	000d      	movs	r5, r1
 800f780:	9808      	ldr	r0, [sp, #32]
 800f782:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f784:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f786:	4b2d      	ldr	r3, [pc, #180]	; (800f83c <__ieee754_pow+0x76c>)
 800f788:	189b      	adds	r3, r3, r2
 800f78a:	681e      	ldr	r6, [r3, #0]
 800f78c:	685f      	ldr	r7, [r3, #4]
 800f78e:	9a00      	ldr	r2, [sp, #0]
 800f790:	9b01      	ldr	r3, [sp, #4]
 800f792:	f7f1 fd9b 	bl	80012cc <__aeabi_dadd>
 800f796:	0032      	movs	r2, r6
 800f798:	003b      	movs	r3, r7
 800f79a:	f7f1 fd97 	bl	80012cc <__aeabi_dadd>
 800f79e:	0022      	movs	r2, r4
 800f7a0:	002b      	movs	r3, r5
 800f7a2:	f7f1 fd93 	bl	80012cc <__aeabi_dadd>
 800f7a6:	2000      	movs	r0, #0
 800f7a8:	0022      	movs	r2, r4
 800f7aa:	002b      	movs	r3, r5
 800f7ac:	9004      	str	r0, [sp, #16]
 800f7ae:	9105      	str	r1, [sp, #20]
 800f7b0:	f7f2 ffa8 	bl	8002704 <__aeabi_dsub>
 800f7b4:	0032      	movs	r2, r6
 800f7b6:	003b      	movs	r3, r7
 800f7b8:	f7f2 ffa4 	bl	8002704 <__aeabi_dsub>
 800f7bc:	9a08      	ldr	r2, [sp, #32]
 800f7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7c0:	f7f2 ffa0 	bl	8002704 <__aeabi_dsub>
 800f7c4:	0002      	movs	r2, r0
 800f7c6:	000b      	movs	r3, r1
 800f7c8:	9800      	ldr	r0, [sp, #0]
 800f7ca:	9901      	ldr	r1, [sp, #4]
 800f7cc:	e618      	b.n	800f400 <__ieee754_pow+0x330>
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	4c03      	ldr	r4, [pc, #12]	; (800f7e0 <__ieee754_pow+0x710>)
 800f7d2:	e621      	b.n	800f418 <__ieee754_pow+0x348>
 800f7d4:	7ff00000 	.word	0x7ff00000
 800f7d8:	43400000 	.word	0x43400000
 800f7dc:	fffffc01 	.word	0xfffffc01
 800f7e0:	3ff00000 	.word	0x3ff00000
 800f7e4:	0003988e 	.word	0x0003988e
 800f7e8:	000bb679 	.word	0x000bb679
 800f7ec:	fff00000 	.word	0xfff00000
 800f7f0:	08011178 	.word	0x08011178
 800f7f4:	4a454eef 	.word	0x4a454eef
 800f7f8:	3fca7e28 	.word	0x3fca7e28
 800f7fc:	93c9db65 	.word	0x93c9db65
 800f800:	3fcd864a 	.word	0x3fcd864a
 800f804:	a91d4101 	.word	0xa91d4101
 800f808:	3fd17460 	.word	0x3fd17460
 800f80c:	518f264d 	.word	0x518f264d
 800f810:	3fd55555 	.word	0x3fd55555
 800f814:	db6fabff 	.word	0xdb6fabff
 800f818:	3fdb6db6 	.word	0x3fdb6db6
 800f81c:	33333303 	.word	0x33333303
 800f820:	3fe33333 	.word	0x3fe33333
 800f824:	40080000 	.word	0x40080000
 800f828:	3feec709 	.word	0x3feec709
 800f82c:	dc3a03fd 	.word	0xdc3a03fd
 800f830:	145b01f5 	.word	0x145b01f5
 800f834:	be3e2fe0 	.word	0xbe3e2fe0
 800f838:	08011198 	.word	0x08011198
 800f83c:	08011188 	.word	0x08011188
 800f840:	4a90      	ldr	r2, [pc, #576]	; (800fa84 <__ieee754_pow+0x9b4>)
 800f842:	4b91      	ldr	r3, [pc, #580]	; (800fa88 <__ieee754_pow+0x9b8>)
 800f844:	0030      	movs	r0, r6
 800f846:	0039      	movs	r1, r7
 800f848:	f7f1 fd40 	bl	80012cc <__aeabi_dadd>
 800f84c:	9a04      	ldr	r2, [sp, #16]
 800f84e:	9b05      	ldr	r3, [sp, #20]
 800f850:	9002      	str	r0, [sp, #8]
 800f852:	9103      	str	r1, [sp, #12]
 800f854:	0028      	movs	r0, r5
 800f856:	0021      	movs	r1, r4
 800f858:	f7f2 ff54 	bl	8002704 <__aeabi_dsub>
 800f85c:	0002      	movs	r2, r0
 800f85e:	000b      	movs	r3, r1
 800f860:	9802      	ldr	r0, [sp, #8]
 800f862:	9903      	ldr	r1, [sp, #12]
 800f864:	f7f0 fe02 	bl	800046c <__aeabi_dcmpgt>
 800f868:	2800      	cmp	r0, #0
 800f86a:	d000      	beq.n	800f86e <__ieee754_pow+0x79e>
 800f86c:	e611      	b.n	800f492 <__ieee754_pow+0x3c2>
 800f86e:	2100      	movs	r1, #0
 800f870:	4a86      	ldr	r2, [pc, #536]	; (800fa8c <__ieee754_pow+0x9bc>)
 800f872:	0063      	lsls	r3, r4, #1
 800f874:	085b      	lsrs	r3, r3, #1
 800f876:	9102      	str	r1, [sp, #8]
 800f878:	4293      	cmp	r3, r2
 800f87a:	dd25      	ble.n	800f8c8 <__ieee754_pow+0x7f8>
 800f87c:	4a84      	ldr	r2, [pc, #528]	; (800fa90 <__ieee754_pow+0x9c0>)
 800f87e:	151b      	asrs	r3, r3, #20
 800f880:	189b      	adds	r3, r3, r2
 800f882:	2280      	movs	r2, #128	; 0x80
 800f884:	0352      	lsls	r2, r2, #13
 800f886:	0011      	movs	r1, r2
 800f888:	4119      	asrs	r1, r3
 800f88a:	190b      	adds	r3, r1, r4
 800f88c:	005c      	lsls	r4, r3, #1
 800f88e:	4981      	ldr	r1, [pc, #516]	; (800fa94 <__ieee754_pow+0x9c4>)
 800f890:	4d81      	ldr	r5, [pc, #516]	; (800fa98 <__ieee754_pow+0x9c8>)
 800f892:	0d64      	lsrs	r4, r4, #21
 800f894:	1864      	adds	r4, r4, r1
 800f896:	4125      	asrs	r5, r4
 800f898:	401d      	ands	r5, r3
 800f89a:	031b      	lsls	r3, r3, #12
 800f89c:	0b1b      	lsrs	r3, r3, #12
 800f89e:	4313      	orrs	r3, r2
 800f8a0:	2214      	movs	r2, #20
 800f8a2:	1b12      	subs	r2, r2, r4
 800f8a4:	4113      	asrs	r3, r2
 800f8a6:	9302      	str	r3, [sp, #8]
 800f8a8:	9b08      	ldr	r3, [sp, #32]
 800f8aa:	2000      	movs	r0, #0
 800f8ac:	0029      	movs	r1, r5
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	da02      	bge.n	800f8b8 <__ieee754_pow+0x7e8>
 800f8b2:	9b02      	ldr	r3, [sp, #8]
 800f8b4:	425b      	negs	r3, r3
 800f8b6:	9302      	str	r3, [sp, #8]
 800f8b8:	0002      	movs	r2, r0
 800f8ba:	000b      	movs	r3, r1
 800f8bc:	9804      	ldr	r0, [sp, #16]
 800f8be:	9905      	ldr	r1, [sp, #20]
 800f8c0:	f7f2 ff20 	bl	8002704 <__aeabi_dsub>
 800f8c4:	9006      	str	r0, [sp, #24]
 800f8c6:	9107      	str	r1, [sp, #28]
 800f8c8:	9806      	ldr	r0, [sp, #24]
 800f8ca:	9907      	ldr	r1, [sp, #28]
 800f8cc:	0032      	movs	r2, r6
 800f8ce:	003b      	movs	r3, r7
 800f8d0:	f7f1 fcfc 	bl	80012cc <__aeabi_dadd>
 800f8d4:	2000      	movs	r0, #0
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	4b70      	ldr	r3, [pc, #448]	; (800fa9c <__ieee754_pow+0x9cc>)
 800f8da:	9004      	str	r0, [sp, #16]
 800f8dc:	9105      	str	r1, [sp, #20]
 800f8de:	f7f2 fc4f 	bl	8002180 <__aeabi_dmul>
 800f8e2:	9a06      	ldr	r2, [sp, #24]
 800f8e4:	9b07      	ldr	r3, [sp, #28]
 800f8e6:	9008      	str	r0, [sp, #32]
 800f8e8:	9109      	str	r1, [sp, #36]	; 0x24
 800f8ea:	9804      	ldr	r0, [sp, #16]
 800f8ec:	9905      	ldr	r1, [sp, #20]
 800f8ee:	f7f2 ff09 	bl	8002704 <__aeabi_dsub>
 800f8f2:	0002      	movs	r2, r0
 800f8f4:	000b      	movs	r3, r1
 800f8f6:	0030      	movs	r0, r6
 800f8f8:	0039      	movs	r1, r7
 800f8fa:	f7f2 ff03 	bl	8002704 <__aeabi_dsub>
 800f8fe:	4a68      	ldr	r2, [pc, #416]	; (800faa0 <__ieee754_pow+0x9d0>)
 800f900:	4b68      	ldr	r3, [pc, #416]	; (800faa4 <__ieee754_pow+0x9d4>)
 800f902:	f7f2 fc3d 	bl	8002180 <__aeabi_dmul>
 800f906:	4a68      	ldr	r2, [pc, #416]	; (800faa8 <__ieee754_pow+0x9d8>)
 800f908:	0004      	movs	r4, r0
 800f90a:	000d      	movs	r5, r1
 800f90c:	9804      	ldr	r0, [sp, #16]
 800f90e:	9905      	ldr	r1, [sp, #20]
 800f910:	4b66      	ldr	r3, [pc, #408]	; (800faac <__ieee754_pow+0x9dc>)
 800f912:	f7f2 fc35 	bl	8002180 <__aeabi_dmul>
 800f916:	0002      	movs	r2, r0
 800f918:	000b      	movs	r3, r1
 800f91a:	0020      	movs	r0, r4
 800f91c:	0029      	movs	r1, r5
 800f91e:	f7f1 fcd5 	bl	80012cc <__aeabi_dadd>
 800f922:	0004      	movs	r4, r0
 800f924:	000d      	movs	r5, r1
 800f926:	0002      	movs	r2, r0
 800f928:	000b      	movs	r3, r1
 800f92a:	9808      	ldr	r0, [sp, #32]
 800f92c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f92e:	f7f1 fccd 	bl	80012cc <__aeabi_dadd>
 800f932:	9a08      	ldr	r2, [sp, #32]
 800f934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f936:	0006      	movs	r6, r0
 800f938:	000f      	movs	r7, r1
 800f93a:	f7f2 fee3 	bl	8002704 <__aeabi_dsub>
 800f93e:	0002      	movs	r2, r0
 800f940:	000b      	movs	r3, r1
 800f942:	0020      	movs	r0, r4
 800f944:	0029      	movs	r1, r5
 800f946:	f7f2 fedd 	bl	8002704 <__aeabi_dsub>
 800f94a:	0032      	movs	r2, r6
 800f94c:	9004      	str	r0, [sp, #16]
 800f94e:	9105      	str	r1, [sp, #20]
 800f950:	003b      	movs	r3, r7
 800f952:	0030      	movs	r0, r6
 800f954:	0039      	movs	r1, r7
 800f956:	f7f2 fc13 	bl	8002180 <__aeabi_dmul>
 800f95a:	0004      	movs	r4, r0
 800f95c:	000d      	movs	r5, r1
 800f95e:	4a54      	ldr	r2, [pc, #336]	; (800fab0 <__ieee754_pow+0x9e0>)
 800f960:	4b54      	ldr	r3, [pc, #336]	; (800fab4 <__ieee754_pow+0x9e4>)
 800f962:	f7f2 fc0d 	bl	8002180 <__aeabi_dmul>
 800f966:	4a54      	ldr	r2, [pc, #336]	; (800fab8 <__ieee754_pow+0x9e8>)
 800f968:	4b54      	ldr	r3, [pc, #336]	; (800fabc <__ieee754_pow+0x9ec>)
 800f96a:	f7f2 fecb 	bl	8002704 <__aeabi_dsub>
 800f96e:	0022      	movs	r2, r4
 800f970:	002b      	movs	r3, r5
 800f972:	f7f2 fc05 	bl	8002180 <__aeabi_dmul>
 800f976:	4a52      	ldr	r2, [pc, #328]	; (800fac0 <__ieee754_pow+0x9f0>)
 800f978:	4b52      	ldr	r3, [pc, #328]	; (800fac4 <__ieee754_pow+0x9f4>)
 800f97a:	f7f1 fca7 	bl	80012cc <__aeabi_dadd>
 800f97e:	0022      	movs	r2, r4
 800f980:	002b      	movs	r3, r5
 800f982:	f7f2 fbfd 	bl	8002180 <__aeabi_dmul>
 800f986:	4a50      	ldr	r2, [pc, #320]	; (800fac8 <__ieee754_pow+0x9f8>)
 800f988:	4b50      	ldr	r3, [pc, #320]	; (800facc <__ieee754_pow+0x9fc>)
 800f98a:	f7f2 febb 	bl	8002704 <__aeabi_dsub>
 800f98e:	0022      	movs	r2, r4
 800f990:	002b      	movs	r3, r5
 800f992:	f7f2 fbf5 	bl	8002180 <__aeabi_dmul>
 800f996:	4a4e      	ldr	r2, [pc, #312]	; (800fad0 <__ieee754_pow+0xa00>)
 800f998:	4b4e      	ldr	r3, [pc, #312]	; (800fad4 <__ieee754_pow+0xa04>)
 800f99a:	f7f1 fc97 	bl	80012cc <__aeabi_dadd>
 800f99e:	0022      	movs	r2, r4
 800f9a0:	002b      	movs	r3, r5
 800f9a2:	f7f2 fbed 	bl	8002180 <__aeabi_dmul>
 800f9a6:	0002      	movs	r2, r0
 800f9a8:	000b      	movs	r3, r1
 800f9aa:	0030      	movs	r0, r6
 800f9ac:	0039      	movs	r1, r7
 800f9ae:	f7f2 fea9 	bl	8002704 <__aeabi_dsub>
 800f9b2:	0004      	movs	r4, r0
 800f9b4:	000d      	movs	r5, r1
 800f9b6:	0002      	movs	r2, r0
 800f9b8:	000b      	movs	r3, r1
 800f9ba:	0030      	movs	r0, r6
 800f9bc:	0039      	movs	r1, r7
 800f9be:	f7f2 fbdf 	bl	8002180 <__aeabi_dmul>
 800f9c2:	2380      	movs	r3, #128	; 0x80
 800f9c4:	9006      	str	r0, [sp, #24]
 800f9c6:	9107      	str	r1, [sp, #28]
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	0020      	movs	r0, r4
 800f9cc:	0029      	movs	r1, r5
 800f9ce:	05db      	lsls	r3, r3, #23
 800f9d0:	f7f2 fe98 	bl	8002704 <__aeabi_dsub>
 800f9d4:	0002      	movs	r2, r0
 800f9d6:	000b      	movs	r3, r1
 800f9d8:	9806      	ldr	r0, [sp, #24]
 800f9da:	9907      	ldr	r1, [sp, #28]
 800f9dc:	f7f1 ffd6 	bl	800198c <__aeabi_ddiv>
 800f9e0:	9a04      	ldr	r2, [sp, #16]
 800f9e2:	9b05      	ldr	r3, [sp, #20]
 800f9e4:	0004      	movs	r4, r0
 800f9e6:	000d      	movs	r5, r1
 800f9e8:	0030      	movs	r0, r6
 800f9ea:	0039      	movs	r1, r7
 800f9ec:	f7f2 fbc8 	bl	8002180 <__aeabi_dmul>
 800f9f0:	9a04      	ldr	r2, [sp, #16]
 800f9f2:	9b05      	ldr	r3, [sp, #20]
 800f9f4:	f7f1 fc6a 	bl	80012cc <__aeabi_dadd>
 800f9f8:	0002      	movs	r2, r0
 800f9fa:	000b      	movs	r3, r1
 800f9fc:	0020      	movs	r0, r4
 800f9fe:	0029      	movs	r1, r5
 800fa00:	f7f2 fe80 	bl	8002704 <__aeabi_dsub>
 800fa04:	0032      	movs	r2, r6
 800fa06:	003b      	movs	r3, r7
 800fa08:	f7f2 fe7c 	bl	8002704 <__aeabi_dsub>
 800fa0c:	0002      	movs	r2, r0
 800fa0e:	000b      	movs	r3, r1
 800fa10:	2000      	movs	r0, #0
 800fa12:	4931      	ldr	r1, [pc, #196]	; (800fad8 <__ieee754_pow+0xa08>)
 800fa14:	f7f2 fe76 	bl	8002704 <__aeabi_dsub>
 800fa18:	9b02      	ldr	r3, [sp, #8]
 800fa1a:	051b      	lsls	r3, r3, #20
 800fa1c:	185b      	adds	r3, r3, r1
 800fa1e:	151a      	asrs	r2, r3, #20
 800fa20:	2a00      	cmp	r2, #0
 800fa22:	dc25      	bgt.n	800fa70 <__ieee754_pow+0x9a0>
 800fa24:	9a02      	ldr	r2, [sp, #8]
 800fa26:	f000 fa4d 	bl	800fec4 <scalbn>
 800fa2a:	9a00      	ldr	r2, [sp, #0]
 800fa2c:	9b01      	ldr	r3, [sp, #4]
 800fa2e:	f7ff fc33 	bl	800f298 <__ieee754_pow+0x1c8>
 800fa32:	4a2a      	ldr	r2, [pc, #168]	; (800fadc <__ieee754_pow+0xa0c>)
 800fa34:	004b      	lsls	r3, r1, #1
 800fa36:	085b      	lsrs	r3, r3, #1
 800fa38:	4293      	cmp	r3, r2
 800fa3a:	dc00      	bgt.n	800fa3e <__ieee754_pow+0x96e>
 800fa3c:	e717      	b.n	800f86e <__ieee754_pow+0x79e>
 800fa3e:	4b28      	ldr	r3, [pc, #160]	; (800fae0 <__ieee754_pow+0xa10>)
 800fa40:	18cb      	adds	r3, r1, r3
 800fa42:	4303      	orrs	r3, r0
 800fa44:	d008      	beq.n	800fa58 <__ieee754_pow+0x988>
 800fa46:	9800      	ldr	r0, [sp, #0]
 800fa48:	9901      	ldr	r1, [sp, #4]
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	f7f0 fcf9 	bl	8000444 <__aeabi_dcmplt>
 800fa52:	1e43      	subs	r3, r0, #1
 800fa54:	4198      	sbcs	r0, r3
 800fa56:	e462      	b.n	800f31e <__ieee754_pow+0x24e>
 800fa58:	9a04      	ldr	r2, [sp, #16]
 800fa5a:	9b05      	ldr	r3, [sp, #20]
 800fa5c:	f7f2 fe52 	bl	8002704 <__aeabi_dsub>
 800fa60:	0032      	movs	r2, r6
 800fa62:	003b      	movs	r3, r7
 800fa64:	f7f0 fd0c 	bl	8000480 <__aeabi_dcmpge>
 800fa68:	2800      	cmp	r0, #0
 800fa6a:	d100      	bne.n	800fa6e <__ieee754_pow+0x99e>
 800fa6c:	e6ff      	b.n	800f86e <__ieee754_pow+0x79e>
 800fa6e:	e7ea      	b.n	800fa46 <__ieee754_pow+0x976>
 800fa70:	0019      	movs	r1, r3
 800fa72:	e7da      	b.n	800fa2a <__ieee754_pow+0x95a>
 800fa74:	2300      	movs	r3, #0
 800fa76:	4c18      	ldr	r4, [pc, #96]	; (800fad8 <__ieee754_pow+0xa08>)
 800fa78:	f7ff fbf1 	bl	800f25e <__ieee754_pow+0x18e>
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	2400      	movs	r4, #0
 800fa80:	f7ff fbed 	bl	800f25e <__ieee754_pow+0x18e>
 800fa84:	652b82fe 	.word	0x652b82fe
 800fa88:	3c971547 	.word	0x3c971547
 800fa8c:	3fe00000 	.word	0x3fe00000
 800fa90:	fffffc02 	.word	0xfffffc02
 800fa94:	fffffc01 	.word	0xfffffc01
 800fa98:	fff00000 	.word	0xfff00000
 800fa9c:	3fe62e43 	.word	0x3fe62e43
 800faa0:	fefa39ef 	.word	0xfefa39ef
 800faa4:	3fe62e42 	.word	0x3fe62e42
 800faa8:	0ca86c39 	.word	0x0ca86c39
 800faac:	be205c61 	.word	0xbe205c61
 800fab0:	72bea4d0 	.word	0x72bea4d0
 800fab4:	3e663769 	.word	0x3e663769
 800fab8:	c5d26bf1 	.word	0xc5d26bf1
 800fabc:	3ebbbd41 	.word	0x3ebbbd41
 800fac0:	af25de2c 	.word	0xaf25de2c
 800fac4:	3f11566a 	.word	0x3f11566a
 800fac8:	16bebd93 	.word	0x16bebd93
 800facc:	3f66c16c 	.word	0x3f66c16c
 800fad0:	5555553e 	.word	0x5555553e
 800fad4:	3fc55555 	.word	0x3fc55555
 800fad8:	3ff00000 	.word	0x3ff00000
 800fadc:	4090cbff 	.word	0x4090cbff
 800fae0:	3f6f3400 	.word	0x3f6f3400

0800fae4 <__ieee754_rem_pio2>:
 800fae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fae6:	004b      	lsls	r3, r1, #1
 800fae8:	b091      	sub	sp, #68	; 0x44
 800faea:	085b      	lsrs	r3, r3, #1
 800faec:	9302      	str	r3, [sp, #8]
 800faee:	0017      	movs	r7, r2
 800faf0:	4bb6      	ldr	r3, [pc, #728]	; (800fdcc <__ieee754_rem_pio2+0x2e8>)
 800faf2:	9a02      	ldr	r2, [sp, #8]
 800faf4:	0004      	movs	r4, r0
 800faf6:	000d      	movs	r5, r1
 800faf8:	9109      	str	r1, [sp, #36]	; 0x24
 800fafa:	429a      	cmp	r2, r3
 800fafc:	dc09      	bgt.n	800fb12 <__ieee754_rem_pio2+0x2e>
 800fafe:	0002      	movs	r2, r0
 800fb00:	000b      	movs	r3, r1
 800fb02:	603a      	str	r2, [r7, #0]
 800fb04:	607b      	str	r3, [r7, #4]
 800fb06:	2200      	movs	r2, #0
 800fb08:	2300      	movs	r3, #0
 800fb0a:	60ba      	str	r2, [r7, #8]
 800fb0c:	60fb      	str	r3, [r7, #12]
 800fb0e:	2600      	movs	r6, #0
 800fb10:	e025      	b.n	800fb5e <__ieee754_rem_pio2+0x7a>
 800fb12:	4baf      	ldr	r3, [pc, #700]	; (800fdd0 <__ieee754_rem_pio2+0x2ec>)
 800fb14:	9a02      	ldr	r2, [sp, #8]
 800fb16:	429a      	cmp	r2, r3
 800fb18:	dd00      	ble.n	800fb1c <__ieee754_rem_pio2+0x38>
 800fb1a:	e06e      	b.n	800fbfa <__ieee754_rem_pio2+0x116>
 800fb1c:	4ead      	ldr	r6, [pc, #692]	; (800fdd4 <__ieee754_rem_pio2+0x2f0>)
 800fb1e:	4aae      	ldr	r2, [pc, #696]	; (800fdd8 <__ieee754_rem_pio2+0x2f4>)
 800fb20:	2d00      	cmp	r5, #0
 800fb22:	dd35      	ble.n	800fb90 <__ieee754_rem_pio2+0xac>
 800fb24:	0020      	movs	r0, r4
 800fb26:	0029      	movs	r1, r5
 800fb28:	4baa      	ldr	r3, [pc, #680]	; (800fdd4 <__ieee754_rem_pio2+0x2f0>)
 800fb2a:	f7f2 fdeb 	bl	8002704 <__aeabi_dsub>
 800fb2e:	9b02      	ldr	r3, [sp, #8]
 800fb30:	0004      	movs	r4, r0
 800fb32:	000d      	movs	r5, r1
 800fb34:	42b3      	cmp	r3, r6
 800fb36:	d015      	beq.n	800fb64 <__ieee754_rem_pio2+0x80>
 800fb38:	4aa8      	ldr	r2, [pc, #672]	; (800fddc <__ieee754_rem_pio2+0x2f8>)
 800fb3a:	4ba9      	ldr	r3, [pc, #676]	; (800fde0 <__ieee754_rem_pio2+0x2fc>)
 800fb3c:	f7f2 fde2 	bl	8002704 <__aeabi_dsub>
 800fb40:	0002      	movs	r2, r0
 800fb42:	000b      	movs	r3, r1
 800fb44:	0020      	movs	r0, r4
 800fb46:	603a      	str	r2, [r7, #0]
 800fb48:	607b      	str	r3, [r7, #4]
 800fb4a:	0029      	movs	r1, r5
 800fb4c:	f7f2 fdda 	bl	8002704 <__aeabi_dsub>
 800fb50:	4aa2      	ldr	r2, [pc, #648]	; (800fddc <__ieee754_rem_pio2+0x2f8>)
 800fb52:	4ba3      	ldr	r3, [pc, #652]	; (800fde0 <__ieee754_rem_pio2+0x2fc>)
 800fb54:	f7f2 fdd6 	bl	8002704 <__aeabi_dsub>
 800fb58:	2601      	movs	r6, #1
 800fb5a:	60b8      	str	r0, [r7, #8]
 800fb5c:	60f9      	str	r1, [r7, #12]
 800fb5e:	0030      	movs	r0, r6
 800fb60:	b011      	add	sp, #68	; 0x44
 800fb62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb64:	22d3      	movs	r2, #211	; 0xd3
 800fb66:	4b9e      	ldr	r3, [pc, #632]	; (800fde0 <__ieee754_rem_pio2+0x2fc>)
 800fb68:	0552      	lsls	r2, r2, #21
 800fb6a:	f7f2 fdcb 	bl	8002704 <__aeabi_dsub>
 800fb6e:	4a9d      	ldr	r2, [pc, #628]	; (800fde4 <__ieee754_rem_pio2+0x300>)
 800fb70:	4b9d      	ldr	r3, [pc, #628]	; (800fde8 <__ieee754_rem_pio2+0x304>)
 800fb72:	0004      	movs	r4, r0
 800fb74:	000d      	movs	r5, r1
 800fb76:	f7f2 fdc5 	bl	8002704 <__aeabi_dsub>
 800fb7a:	0002      	movs	r2, r0
 800fb7c:	000b      	movs	r3, r1
 800fb7e:	0020      	movs	r0, r4
 800fb80:	603a      	str	r2, [r7, #0]
 800fb82:	607b      	str	r3, [r7, #4]
 800fb84:	0029      	movs	r1, r5
 800fb86:	f7f2 fdbd 	bl	8002704 <__aeabi_dsub>
 800fb8a:	4a96      	ldr	r2, [pc, #600]	; (800fde4 <__ieee754_rem_pio2+0x300>)
 800fb8c:	4b96      	ldr	r3, [pc, #600]	; (800fde8 <__ieee754_rem_pio2+0x304>)
 800fb8e:	e7e1      	b.n	800fb54 <__ieee754_rem_pio2+0x70>
 800fb90:	0020      	movs	r0, r4
 800fb92:	0029      	movs	r1, r5
 800fb94:	4b8f      	ldr	r3, [pc, #572]	; (800fdd4 <__ieee754_rem_pio2+0x2f0>)
 800fb96:	f7f1 fb99 	bl	80012cc <__aeabi_dadd>
 800fb9a:	9b02      	ldr	r3, [sp, #8]
 800fb9c:	0004      	movs	r4, r0
 800fb9e:	000d      	movs	r5, r1
 800fba0:	42b3      	cmp	r3, r6
 800fba2:	d014      	beq.n	800fbce <__ieee754_rem_pio2+0xea>
 800fba4:	4a8d      	ldr	r2, [pc, #564]	; (800fddc <__ieee754_rem_pio2+0x2f8>)
 800fba6:	4b8e      	ldr	r3, [pc, #568]	; (800fde0 <__ieee754_rem_pio2+0x2fc>)
 800fba8:	f7f1 fb90 	bl	80012cc <__aeabi_dadd>
 800fbac:	0002      	movs	r2, r0
 800fbae:	000b      	movs	r3, r1
 800fbb0:	0020      	movs	r0, r4
 800fbb2:	603a      	str	r2, [r7, #0]
 800fbb4:	607b      	str	r3, [r7, #4]
 800fbb6:	0029      	movs	r1, r5
 800fbb8:	f7f2 fda4 	bl	8002704 <__aeabi_dsub>
 800fbbc:	4a87      	ldr	r2, [pc, #540]	; (800fddc <__ieee754_rem_pio2+0x2f8>)
 800fbbe:	4b88      	ldr	r3, [pc, #544]	; (800fde0 <__ieee754_rem_pio2+0x2fc>)
 800fbc0:	f7f1 fb84 	bl	80012cc <__aeabi_dadd>
 800fbc4:	2601      	movs	r6, #1
 800fbc6:	60b8      	str	r0, [r7, #8]
 800fbc8:	60f9      	str	r1, [r7, #12]
 800fbca:	4276      	negs	r6, r6
 800fbcc:	e7c7      	b.n	800fb5e <__ieee754_rem_pio2+0x7a>
 800fbce:	22d3      	movs	r2, #211	; 0xd3
 800fbd0:	4b83      	ldr	r3, [pc, #524]	; (800fde0 <__ieee754_rem_pio2+0x2fc>)
 800fbd2:	0552      	lsls	r2, r2, #21
 800fbd4:	f7f1 fb7a 	bl	80012cc <__aeabi_dadd>
 800fbd8:	4a82      	ldr	r2, [pc, #520]	; (800fde4 <__ieee754_rem_pio2+0x300>)
 800fbda:	4b83      	ldr	r3, [pc, #524]	; (800fde8 <__ieee754_rem_pio2+0x304>)
 800fbdc:	0004      	movs	r4, r0
 800fbde:	000d      	movs	r5, r1
 800fbe0:	f7f1 fb74 	bl	80012cc <__aeabi_dadd>
 800fbe4:	0002      	movs	r2, r0
 800fbe6:	000b      	movs	r3, r1
 800fbe8:	0020      	movs	r0, r4
 800fbea:	603a      	str	r2, [r7, #0]
 800fbec:	607b      	str	r3, [r7, #4]
 800fbee:	0029      	movs	r1, r5
 800fbf0:	f7f2 fd88 	bl	8002704 <__aeabi_dsub>
 800fbf4:	4a7b      	ldr	r2, [pc, #492]	; (800fde4 <__ieee754_rem_pio2+0x300>)
 800fbf6:	4b7c      	ldr	r3, [pc, #496]	; (800fde8 <__ieee754_rem_pio2+0x304>)
 800fbf8:	e7e2      	b.n	800fbc0 <__ieee754_rem_pio2+0xdc>
 800fbfa:	4b7c      	ldr	r3, [pc, #496]	; (800fdec <__ieee754_rem_pio2+0x308>)
 800fbfc:	9a02      	ldr	r2, [sp, #8]
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	dd00      	ble.n	800fc04 <__ieee754_rem_pio2+0x120>
 800fc02:	e0d3      	b.n	800fdac <__ieee754_rem_pio2+0x2c8>
 800fc04:	0020      	movs	r0, r4
 800fc06:	0029      	movs	r1, r5
 800fc08:	f7fe fffe 	bl	800ec08 <fabs>
 800fc0c:	4a78      	ldr	r2, [pc, #480]	; (800fdf0 <__ieee754_rem_pio2+0x30c>)
 800fc0e:	4b79      	ldr	r3, [pc, #484]	; (800fdf4 <__ieee754_rem_pio2+0x310>)
 800fc10:	0004      	movs	r4, r0
 800fc12:	000d      	movs	r5, r1
 800fc14:	f7f2 fab4 	bl	8002180 <__aeabi_dmul>
 800fc18:	2200      	movs	r2, #0
 800fc1a:	4b77      	ldr	r3, [pc, #476]	; (800fdf8 <__ieee754_rem_pio2+0x314>)
 800fc1c:	f7f1 fb56 	bl	80012cc <__aeabi_dadd>
 800fc20:	f7f3 f910 	bl	8002e44 <__aeabi_d2iz>
 800fc24:	0006      	movs	r6, r0
 800fc26:	f7f3 f943 	bl	8002eb0 <__aeabi_i2d>
 800fc2a:	4a6b      	ldr	r2, [pc, #428]	; (800fdd8 <__ieee754_rem_pio2+0x2f4>)
 800fc2c:	4b69      	ldr	r3, [pc, #420]	; (800fdd4 <__ieee754_rem_pio2+0x2f0>)
 800fc2e:	9006      	str	r0, [sp, #24]
 800fc30:	9107      	str	r1, [sp, #28]
 800fc32:	f7f2 faa5 	bl	8002180 <__aeabi_dmul>
 800fc36:	0002      	movs	r2, r0
 800fc38:	000b      	movs	r3, r1
 800fc3a:	0020      	movs	r0, r4
 800fc3c:	0029      	movs	r1, r5
 800fc3e:	f7f2 fd61 	bl	8002704 <__aeabi_dsub>
 800fc42:	4a66      	ldr	r2, [pc, #408]	; (800fddc <__ieee754_rem_pio2+0x2f8>)
 800fc44:	9004      	str	r0, [sp, #16]
 800fc46:	9105      	str	r1, [sp, #20]
 800fc48:	9806      	ldr	r0, [sp, #24]
 800fc4a:	9907      	ldr	r1, [sp, #28]
 800fc4c:	4b64      	ldr	r3, [pc, #400]	; (800fde0 <__ieee754_rem_pio2+0x2fc>)
 800fc4e:	f7f2 fa97 	bl	8002180 <__aeabi_dmul>
 800fc52:	0004      	movs	r4, r0
 800fc54:	000d      	movs	r5, r1
 800fc56:	2e1f      	cmp	r6, #31
 800fc58:	dc0f      	bgt.n	800fc7a <__ieee754_rem_pio2+0x196>
 800fc5a:	4b68      	ldr	r3, [pc, #416]	; (800fdfc <__ieee754_rem_pio2+0x318>)
 800fc5c:	1e72      	subs	r2, r6, #1
 800fc5e:	0092      	lsls	r2, r2, #2
 800fc60:	58d3      	ldr	r3, [r2, r3]
 800fc62:	9a02      	ldr	r2, [sp, #8]
 800fc64:	4293      	cmp	r3, r2
 800fc66:	d008      	beq.n	800fc7a <__ieee754_rem_pio2+0x196>
 800fc68:	9804      	ldr	r0, [sp, #16]
 800fc6a:	9905      	ldr	r1, [sp, #20]
 800fc6c:	0022      	movs	r2, r4
 800fc6e:	002b      	movs	r3, r5
 800fc70:	f7f2 fd48 	bl	8002704 <__aeabi_dsub>
 800fc74:	6038      	str	r0, [r7, #0]
 800fc76:	6079      	str	r1, [r7, #4]
 800fc78:	e012      	b.n	800fca0 <__ieee754_rem_pio2+0x1bc>
 800fc7a:	0022      	movs	r2, r4
 800fc7c:	9804      	ldr	r0, [sp, #16]
 800fc7e:	9905      	ldr	r1, [sp, #20]
 800fc80:	002b      	movs	r3, r5
 800fc82:	f7f2 fd3f 	bl	8002704 <__aeabi_dsub>
 800fc86:	9b02      	ldr	r3, [sp, #8]
 800fc88:	151b      	asrs	r3, r3, #20
 800fc8a:	9308      	str	r3, [sp, #32]
 800fc8c:	9a08      	ldr	r2, [sp, #32]
 800fc8e:	004b      	lsls	r3, r1, #1
 800fc90:	0d5b      	lsrs	r3, r3, #21
 800fc92:	1ad3      	subs	r3, r2, r3
 800fc94:	2b10      	cmp	r3, #16
 800fc96:	dc21      	bgt.n	800fcdc <__ieee754_rem_pio2+0x1f8>
 800fc98:	0002      	movs	r2, r0
 800fc9a:	000b      	movs	r3, r1
 800fc9c:	603a      	str	r2, [r7, #0]
 800fc9e:	607b      	str	r3, [r7, #4]
 800fca0:	9804      	ldr	r0, [sp, #16]
 800fca2:	9905      	ldr	r1, [sp, #20]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	683a      	ldr	r2, [r7, #0]
 800fca8:	9302      	str	r3, [sp, #8]
 800fcaa:	9b02      	ldr	r3, [sp, #8]
 800fcac:	f7f2 fd2a 	bl	8002704 <__aeabi_dsub>
 800fcb0:	0022      	movs	r2, r4
 800fcb2:	002b      	movs	r3, r5
 800fcb4:	f7f2 fd26 	bl	8002704 <__aeabi_dsub>
 800fcb8:	000b      	movs	r3, r1
 800fcba:	0002      	movs	r2, r0
 800fcbc:	60ba      	str	r2, [r7, #8]
 800fcbe:	60fb      	str	r3, [r7, #12]
 800fcc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	db00      	blt.n	800fcc8 <__ieee754_rem_pio2+0x1e4>
 800fcc6:	e74a      	b.n	800fb5e <__ieee754_rem_pio2+0x7a>
 800fcc8:	2380      	movs	r3, #128	; 0x80
 800fcca:	061b      	lsls	r3, r3, #24
 800fccc:	469c      	mov	ip, r3
 800fcce:	9c02      	ldr	r4, [sp, #8]
 800fcd0:	18c9      	adds	r1, r1, r3
 800fcd2:	4464      	add	r4, ip
 800fcd4:	607c      	str	r4, [r7, #4]
 800fcd6:	60b8      	str	r0, [r7, #8]
 800fcd8:	60f9      	str	r1, [r7, #12]
 800fcda:	e776      	b.n	800fbca <__ieee754_rem_pio2+0xe6>
 800fcdc:	22d3      	movs	r2, #211	; 0xd3
 800fcde:	9806      	ldr	r0, [sp, #24]
 800fce0:	9907      	ldr	r1, [sp, #28]
 800fce2:	4b3f      	ldr	r3, [pc, #252]	; (800fde0 <__ieee754_rem_pio2+0x2fc>)
 800fce4:	0552      	lsls	r2, r2, #21
 800fce6:	f7f2 fa4b 	bl	8002180 <__aeabi_dmul>
 800fcea:	0004      	movs	r4, r0
 800fcec:	000d      	movs	r5, r1
 800fcee:	0002      	movs	r2, r0
 800fcf0:	000b      	movs	r3, r1
 800fcf2:	9804      	ldr	r0, [sp, #16]
 800fcf4:	9905      	ldr	r1, [sp, #20]
 800fcf6:	f7f2 fd05 	bl	8002704 <__aeabi_dsub>
 800fcfa:	0002      	movs	r2, r0
 800fcfc:	000b      	movs	r3, r1
 800fcfe:	9002      	str	r0, [sp, #8]
 800fd00:	9103      	str	r1, [sp, #12]
 800fd02:	9804      	ldr	r0, [sp, #16]
 800fd04:	9905      	ldr	r1, [sp, #20]
 800fd06:	f7f2 fcfd 	bl	8002704 <__aeabi_dsub>
 800fd0a:	0022      	movs	r2, r4
 800fd0c:	002b      	movs	r3, r5
 800fd0e:	f7f2 fcf9 	bl	8002704 <__aeabi_dsub>
 800fd12:	0004      	movs	r4, r0
 800fd14:	000d      	movs	r5, r1
 800fd16:	9806      	ldr	r0, [sp, #24]
 800fd18:	9907      	ldr	r1, [sp, #28]
 800fd1a:	4a32      	ldr	r2, [pc, #200]	; (800fde4 <__ieee754_rem_pio2+0x300>)
 800fd1c:	4b32      	ldr	r3, [pc, #200]	; (800fde8 <__ieee754_rem_pio2+0x304>)
 800fd1e:	f7f2 fa2f 	bl	8002180 <__aeabi_dmul>
 800fd22:	0022      	movs	r2, r4
 800fd24:	002b      	movs	r3, r5
 800fd26:	f7f2 fced 	bl	8002704 <__aeabi_dsub>
 800fd2a:	0002      	movs	r2, r0
 800fd2c:	000b      	movs	r3, r1
 800fd2e:	0004      	movs	r4, r0
 800fd30:	000d      	movs	r5, r1
 800fd32:	9802      	ldr	r0, [sp, #8]
 800fd34:	9903      	ldr	r1, [sp, #12]
 800fd36:	f7f2 fce5 	bl	8002704 <__aeabi_dsub>
 800fd3a:	9a08      	ldr	r2, [sp, #32]
 800fd3c:	004b      	lsls	r3, r1, #1
 800fd3e:	0d5b      	lsrs	r3, r3, #21
 800fd40:	1ad3      	subs	r3, r2, r3
 800fd42:	2b31      	cmp	r3, #49	; 0x31
 800fd44:	dc08      	bgt.n	800fd58 <__ieee754_rem_pio2+0x274>
 800fd46:	0002      	movs	r2, r0
 800fd48:	000b      	movs	r3, r1
 800fd4a:	603a      	str	r2, [r7, #0]
 800fd4c:	607b      	str	r3, [r7, #4]
 800fd4e:	9a02      	ldr	r2, [sp, #8]
 800fd50:	9b03      	ldr	r3, [sp, #12]
 800fd52:	9204      	str	r2, [sp, #16]
 800fd54:	9305      	str	r3, [sp, #20]
 800fd56:	e7a3      	b.n	800fca0 <__ieee754_rem_pio2+0x1bc>
 800fd58:	22b8      	movs	r2, #184	; 0xb8
 800fd5a:	9806      	ldr	r0, [sp, #24]
 800fd5c:	9907      	ldr	r1, [sp, #28]
 800fd5e:	4b22      	ldr	r3, [pc, #136]	; (800fde8 <__ieee754_rem_pio2+0x304>)
 800fd60:	0592      	lsls	r2, r2, #22
 800fd62:	f7f2 fa0d 	bl	8002180 <__aeabi_dmul>
 800fd66:	0004      	movs	r4, r0
 800fd68:	000d      	movs	r5, r1
 800fd6a:	0002      	movs	r2, r0
 800fd6c:	000b      	movs	r3, r1
 800fd6e:	9802      	ldr	r0, [sp, #8]
 800fd70:	9903      	ldr	r1, [sp, #12]
 800fd72:	f7f2 fcc7 	bl	8002704 <__aeabi_dsub>
 800fd76:	0002      	movs	r2, r0
 800fd78:	000b      	movs	r3, r1
 800fd7a:	9004      	str	r0, [sp, #16]
 800fd7c:	9105      	str	r1, [sp, #20]
 800fd7e:	9802      	ldr	r0, [sp, #8]
 800fd80:	9903      	ldr	r1, [sp, #12]
 800fd82:	f7f2 fcbf 	bl	8002704 <__aeabi_dsub>
 800fd86:	0022      	movs	r2, r4
 800fd88:	002b      	movs	r3, r5
 800fd8a:	f7f2 fcbb 	bl	8002704 <__aeabi_dsub>
 800fd8e:	0004      	movs	r4, r0
 800fd90:	000d      	movs	r5, r1
 800fd92:	9806      	ldr	r0, [sp, #24]
 800fd94:	9907      	ldr	r1, [sp, #28]
 800fd96:	4a1a      	ldr	r2, [pc, #104]	; (800fe00 <__ieee754_rem_pio2+0x31c>)
 800fd98:	4b1a      	ldr	r3, [pc, #104]	; (800fe04 <__ieee754_rem_pio2+0x320>)
 800fd9a:	f7f2 f9f1 	bl	8002180 <__aeabi_dmul>
 800fd9e:	0022      	movs	r2, r4
 800fda0:	002b      	movs	r3, r5
 800fda2:	f7f2 fcaf 	bl	8002704 <__aeabi_dsub>
 800fda6:	0004      	movs	r4, r0
 800fda8:	000d      	movs	r5, r1
 800fdaa:	e75d      	b.n	800fc68 <__ieee754_rem_pio2+0x184>
 800fdac:	4b16      	ldr	r3, [pc, #88]	; (800fe08 <__ieee754_rem_pio2+0x324>)
 800fdae:	9a02      	ldr	r2, [sp, #8]
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	dd2b      	ble.n	800fe0c <__ieee754_rem_pio2+0x328>
 800fdb4:	0022      	movs	r2, r4
 800fdb6:	002b      	movs	r3, r5
 800fdb8:	0020      	movs	r0, r4
 800fdba:	0029      	movs	r1, r5
 800fdbc:	f7f2 fca2 	bl	8002704 <__aeabi_dsub>
 800fdc0:	60b8      	str	r0, [r7, #8]
 800fdc2:	60f9      	str	r1, [r7, #12]
 800fdc4:	6038      	str	r0, [r7, #0]
 800fdc6:	6079      	str	r1, [r7, #4]
 800fdc8:	e6a1      	b.n	800fb0e <__ieee754_rem_pio2+0x2a>
 800fdca:	46c0      	nop			; (mov r8, r8)
 800fdcc:	3fe921fb 	.word	0x3fe921fb
 800fdd0:	4002d97b 	.word	0x4002d97b
 800fdd4:	3ff921fb 	.word	0x3ff921fb
 800fdd8:	54400000 	.word	0x54400000
 800fddc:	1a626331 	.word	0x1a626331
 800fde0:	3dd0b461 	.word	0x3dd0b461
 800fde4:	2e037073 	.word	0x2e037073
 800fde8:	3ba3198a 	.word	0x3ba3198a
 800fdec:	413921fb 	.word	0x413921fb
 800fdf0:	6dc9c883 	.word	0x6dc9c883
 800fdf4:	3fe45f30 	.word	0x3fe45f30
 800fdf8:	3fe00000 	.word	0x3fe00000
 800fdfc:	080111a8 	.word	0x080111a8
 800fe00:	252049c1 	.word	0x252049c1
 800fe04:	397b839a 	.word	0x397b839a
 800fe08:	7fefffff 	.word	0x7fefffff
 800fe0c:	9a02      	ldr	r2, [sp, #8]
 800fe0e:	0020      	movs	r0, r4
 800fe10:	1516      	asrs	r6, r2, #20
 800fe12:	4a29      	ldr	r2, [pc, #164]	; (800feb8 <__ieee754_rem_pio2+0x3d4>)
 800fe14:	18b6      	adds	r6, r6, r2
 800fe16:	9a02      	ldr	r2, [sp, #8]
 800fe18:	0533      	lsls	r3, r6, #20
 800fe1a:	1ad5      	subs	r5, r2, r3
 800fe1c:	0029      	movs	r1, r5
 800fe1e:	f7f3 f811 	bl	8002e44 <__aeabi_d2iz>
 800fe22:	f7f3 f845 	bl	8002eb0 <__aeabi_i2d>
 800fe26:	0002      	movs	r2, r0
 800fe28:	000b      	movs	r3, r1
 800fe2a:	0020      	movs	r0, r4
 800fe2c:	0029      	movs	r1, r5
 800fe2e:	920a      	str	r2, [sp, #40]	; 0x28
 800fe30:	930b      	str	r3, [sp, #44]	; 0x2c
 800fe32:	f7f2 fc67 	bl	8002704 <__aeabi_dsub>
 800fe36:	2200      	movs	r2, #0
 800fe38:	4b20      	ldr	r3, [pc, #128]	; (800febc <__ieee754_rem_pio2+0x3d8>)
 800fe3a:	f7f2 f9a1 	bl	8002180 <__aeabi_dmul>
 800fe3e:	000d      	movs	r5, r1
 800fe40:	0004      	movs	r4, r0
 800fe42:	f7f2 ffff 	bl	8002e44 <__aeabi_d2iz>
 800fe46:	f7f3 f833 	bl	8002eb0 <__aeabi_i2d>
 800fe4a:	0002      	movs	r2, r0
 800fe4c:	000b      	movs	r3, r1
 800fe4e:	0020      	movs	r0, r4
 800fe50:	0029      	movs	r1, r5
 800fe52:	920c      	str	r2, [sp, #48]	; 0x30
 800fe54:	930d      	str	r3, [sp, #52]	; 0x34
 800fe56:	f7f2 fc55 	bl	8002704 <__aeabi_dsub>
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	4b17      	ldr	r3, [pc, #92]	; (800febc <__ieee754_rem_pio2+0x3d8>)
 800fe5e:	f7f2 f98f 	bl	8002180 <__aeabi_dmul>
 800fe62:	2503      	movs	r5, #3
 800fe64:	900e      	str	r0, [sp, #56]	; 0x38
 800fe66:	910f      	str	r1, [sp, #60]	; 0x3c
 800fe68:	ac0a      	add	r4, sp, #40	; 0x28
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	6920      	ldr	r0, [r4, #16]
 800fe6e:	6961      	ldr	r1, [r4, #20]
 800fe70:	2300      	movs	r3, #0
 800fe72:	9502      	str	r5, [sp, #8]
 800fe74:	3c08      	subs	r4, #8
 800fe76:	3d01      	subs	r5, #1
 800fe78:	f7f0 fade 	bl	8000438 <__aeabi_dcmpeq>
 800fe7c:	2800      	cmp	r0, #0
 800fe7e:	d1f4      	bne.n	800fe6a <__ieee754_rem_pio2+0x386>
 800fe80:	4b0f      	ldr	r3, [pc, #60]	; (800fec0 <__ieee754_rem_pio2+0x3dc>)
 800fe82:	0032      	movs	r2, r6
 800fe84:	9301      	str	r3, [sp, #4]
 800fe86:	2302      	movs	r3, #2
 800fe88:	0039      	movs	r1, r7
 800fe8a:	9300      	str	r3, [sp, #0]
 800fe8c:	a80a      	add	r0, sp, #40	; 0x28
 800fe8e:	9b02      	ldr	r3, [sp, #8]
 800fe90:	f000 f8b4 	bl	800fffc <__kernel_rem_pio2>
 800fe94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe96:	0006      	movs	r6, r0
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	db00      	blt.n	800fe9e <__ieee754_rem_pio2+0x3ba>
 800fe9c:	e65f      	b.n	800fb5e <__ieee754_rem_pio2+0x7a>
 800fe9e:	2080      	movs	r0, #128	; 0x80
 800fea0:	6879      	ldr	r1, [r7, #4]
 800fea2:	683a      	ldr	r2, [r7, #0]
 800fea4:	0600      	lsls	r0, r0, #24
 800fea6:	180b      	adds	r3, r1, r0
 800fea8:	68f9      	ldr	r1, [r7, #12]
 800feaa:	603a      	str	r2, [r7, #0]
 800feac:	607b      	str	r3, [r7, #4]
 800feae:	68ba      	ldr	r2, [r7, #8]
 800feb0:	180b      	adds	r3, r1, r0
 800feb2:	60ba      	str	r2, [r7, #8]
 800feb4:	60fb      	str	r3, [r7, #12]
 800feb6:	e688      	b.n	800fbca <__ieee754_rem_pio2+0xe6>
 800feb8:	fffffbea 	.word	0xfffffbea
 800febc:	41700000 	.word	0x41700000
 800fec0:	08011228 	.word	0x08011228

0800fec4 <scalbn>:
 800fec4:	b570      	push	{r4, r5, r6, lr}
 800fec6:	0014      	movs	r4, r2
 800fec8:	004a      	lsls	r2, r1, #1
 800feca:	000b      	movs	r3, r1
 800fecc:	0d52      	lsrs	r2, r2, #21
 800fece:	d10f      	bne.n	800fef0 <scalbn+0x2c>
 800fed0:	004b      	lsls	r3, r1, #1
 800fed2:	085b      	lsrs	r3, r3, #1
 800fed4:	4303      	orrs	r3, r0
 800fed6:	d011      	beq.n	800fefc <scalbn+0x38>
 800fed8:	4b22      	ldr	r3, [pc, #136]	; (800ff64 <scalbn+0xa0>)
 800feda:	2200      	movs	r2, #0
 800fedc:	f7f2 f950 	bl	8002180 <__aeabi_dmul>
 800fee0:	4b21      	ldr	r3, [pc, #132]	; (800ff68 <scalbn+0xa4>)
 800fee2:	429c      	cmp	r4, r3
 800fee4:	da0b      	bge.n	800fefe <scalbn+0x3a>
 800fee6:	4a21      	ldr	r2, [pc, #132]	; (800ff6c <scalbn+0xa8>)
 800fee8:	4b21      	ldr	r3, [pc, #132]	; (800ff70 <scalbn+0xac>)
 800feea:	f7f2 f949 	bl	8002180 <__aeabi_dmul>
 800feee:	e005      	b.n	800fefc <scalbn+0x38>
 800fef0:	4d20      	ldr	r5, [pc, #128]	; (800ff74 <scalbn+0xb0>)
 800fef2:	42aa      	cmp	r2, r5
 800fef4:	d107      	bne.n	800ff06 <scalbn+0x42>
 800fef6:	0002      	movs	r2, r0
 800fef8:	f7f1 f9e8 	bl	80012cc <__aeabi_dadd>
 800fefc:	bd70      	pop	{r4, r5, r6, pc}
 800fefe:	000b      	movs	r3, r1
 800ff00:	004a      	lsls	r2, r1, #1
 800ff02:	0d52      	lsrs	r2, r2, #21
 800ff04:	3a36      	subs	r2, #54	; 0x36
 800ff06:	4d1c      	ldr	r5, [pc, #112]	; (800ff78 <scalbn+0xb4>)
 800ff08:	42ac      	cmp	r4, r5
 800ff0a:	dd0a      	ble.n	800ff22 <scalbn+0x5e>
 800ff0c:	4c1b      	ldr	r4, [pc, #108]	; (800ff7c <scalbn+0xb8>)
 800ff0e:	4d1c      	ldr	r5, [pc, #112]	; (800ff80 <scalbn+0xbc>)
 800ff10:	2900      	cmp	r1, #0
 800ff12:	da01      	bge.n	800ff18 <scalbn+0x54>
 800ff14:	4c19      	ldr	r4, [pc, #100]	; (800ff7c <scalbn+0xb8>)
 800ff16:	4d1b      	ldr	r5, [pc, #108]	; (800ff84 <scalbn+0xc0>)
 800ff18:	4a18      	ldr	r2, [pc, #96]	; (800ff7c <scalbn+0xb8>)
 800ff1a:	4b19      	ldr	r3, [pc, #100]	; (800ff80 <scalbn+0xbc>)
 800ff1c:	0020      	movs	r0, r4
 800ff1e:	0029      	movs	r1, r5
 800ff20:	e7e3      	b.n	800feea <scalbn+0x26>
 800ff22:	18a2      	adds	r2, r4, r2
 800ff24:	4c18      	ldr	r4, [pc, #96]	; (800ff88 <scalbn+0xc4>)
 800ff26:	42a2      	cmp	r2, r4
 800ff28:	dcf0      	bgt.n	800ff0c <scalbn+0x48>
 800ff2a:	2a00      	cmp	r2, #0
 800ff2c:	dd05      	ble.n	800ff3a <scalbn+0x76>
 800ff2e:	4c17      	ldr	r4, [pc, #92]	; (800ff8c <scalbn+0xc8>)
 800ff30:	0512      	lsls	r2, r2, #20
 800ff32:	4023      	ands	r3, r4
 800ff34:	4313      	orrs	r3, r2
 800ff36:	0019      	movs	r1, r3
 800ff38:	e7e0      	b.n	800fefc <scalbn+0x38>
 800ff3a:	0014      	movs	r4, r2
 800ff3c:	3435      	adds	r4, #53	; 0x35
 800ff3e:	da08      	bge.n	800ff52 <scalbn+0x8e>
 800ff40:	4c0a      	ldr	r4, [pc, #40]	; (800ff6c <scalbn+0xa8>)
 800ff42:	4d0b      	ldr	r5, [pc, #44]	; (800ff70 <scalbn+0xac>)
 800ff44:	2900      	cmp	r1, #0
 800ff46:	da01      	bge.n	800ff4c <scalbn+0x88>
 800ff48:	4c08      	ldr	r4, [pc, #32]	; (800ff6c <scalbn+0xa8>)
 800ff4a:	4d11      	ldr	r5, [pc, #68]	; (800ff90 <scalbn+0xcc>)
 800ff4c:	4a07      	ldr	r2, [pc, #28]	; (800ff6c <scalbn+0xa8>)
 800ff4e:	4b08      	ldr	r3, [pc, #32]	; (800ff70 <scalbn+0xac>)
 800ff50:	e7e4      	b.n	800ff1c <scalbn+0x58>
 800ff52:	4c0e      	ldr	r4, [pc, #56]	; (800ff8c <scalbn+0xc8>)
 800ff54:	3236      	adds	r2, #54	; 0x36
 800ff56:	4023      	ands	r3, r4
 800ff58:	0512      	lsls	r2, r2, #20
 800ff5a:	431a      	orrs	r2, r3
 800ff5c:	0011      	movs	r1, r2
 800ff5e:	4b0d      	ldr	r3, [pc, #52]	; (800ff94 <scalbn+0xd0>)
 800ff60:	2200      	movs	r2, #0
 800ff62:	e7c2      	b.n	800feea <scalbn+0x26>
 800ff64:	43500000 	.word	0x43500000
 800ff68:	ffff3cb0 	.word	0xffff3cb0
 800ff6c:	c2f8f359 	.word	0xc2f8f359
 800ff70:	01a56e1f 	.word	0x01a56e1f
 800ff74:	000007ff 	.word	0x000007ff
 800ff78:	0000c350 	.word	0x0000c350
 800ff7c:	8800759c 	.word	0x8800759c
 800ff80:	7e37e43c 	.word	0x7e37e43c
 800ff84:	fe37e43c 	.word	0xfe37e43c
 800ff88:	000007fe 	.word	0x000007fe
 800ff8c:	800fffff 	.word	0x800fffff
 800ff90:	81a56e1f 	.word	0x81a56e1f
 800ff94:	3c900000 	.word	0x3c900000

0800ff98 <with_errno>:
 800ff98:	b570      	push	{r4, r5, r6, lr}
 800ff9a:	000d      	movs	r5, r1
 800ff9c:	0016      	movs	r6, r2
 800ff9e:	0004      	movs	r4, r0
 800ffa0:	f7fd fe88 	bl	800dcb4 <__errno>
 800ffa4:	0029      	movs	r1, r5
 800ffa6:	6006      	str	r6, [r0, #0]
 800ffa8:	0020      	movs	r0, r4
 800ffaa:	bd70      	pop	{r4, r5, r6, pc}

0800ffac <xflow>:
 800ffac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffae:	0015      	movs	r5, r2
 800ffb0:	001c      	movs	r4, r3
 800ffb2:	2800      	cmp	r0, #0
 800ffb4:	d010      	beq.n	800ffd8 <xflow+0x2c>
 800ffb6:	2380      	movs	r3, #128	; 0x80
 800ffb8:	0010      	movs	r0, r2
 800ffba:	061b      	lsls	r3, r3, #24
 800ffbc:	18e1      	adds	r1, r4, r3
 800ffbe:	9000      	str	r0, [sp, #0]
 800ffc0:	9101      	str	r1, [sp, #4]
 800ffc2:	9a00      	ldr	r2, [sp, #0]
 800ffc4:	9b01      	ldr	r3, [sp, #4]
 800ffc6:	0028      	movs	r0, r5
 800ffc8:	0021      	movs	r1, r4
 800ffca:	f7f2 f8d9 	bl	8002180 <__aeabi_dmul>
 800ffce:	2222      	movs	r2, #34	; 0x22
 800ffd0:	f7ff ffe2 	bl	800ff98 <with_errno>
 800ffd4:	b003      	add	sp, #12
 800ffd6:	bd30      	pop	{r4, r5, pc}
 800ffd8:	0010      	movs	r0, r2
 800ffda:	0019      	movs	r1, r3
 800ffdc:	e7ef      	b.n	800ffbe <xflow+0x12>

0800ffde <__math_uflow>:
 800ffde:	2380      	movs	r3, #128	; 0x80
 800ffe0:	b510      	push	{r4, lr}
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	055b      	lsls	r3, r3, #21
 800ffe6:	f7ff ffe1 	bl	800ffac <xflow>
 800ffea:	bd10      	pop	{r4, pc}

0800ffec <__math_oflow>:
 800ffec:	23e0      	movs	r3, #224	; 0xe0
 800ffee:	b510      	push	{r4, lr}
 800fff0:	2200      	movs	r2, #0
 800fff2:	05db      	lsls	r3, r3, #23
 800fff4:	f7ff ffda 	bl	800ffac <xflow>
 800fff8:	bd10      	pop	{r4, pc}
	...

0800fffc <__kernel_rem_pio2>:
 800fffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fffe:	4ccb      	ldr	r4, [pc, #812]	; (801032c <__kernel_rem_pio2+0x330>)
 8010000:	44a5      	add	sp, r4
 8010002:	0014      	movs	r4, r2
 8010004:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8010006:	930c      	str	r3, [sp, #48]	; 0x30
 8010008:	4bc9      	ldr	r3, [pc, #804]	; (8010330 <__kernel_rem_pio2+0x334>)
 801000a:	0092      	lsls	r2, r2, #2
 801000c:	58d3      	ldr	r3, [r2, r3]
 801000e:	900d      	str	r0, [sp, #52]	; 0x34
 8010010:	9308      	str	r3, [sp, #32]
 8010012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010014:	9106      	str	r1, [sp, #24]
 8010016:	3b01      	subs	r3, #1
 8010018:	930b      	str	r3, [sp, #44]	; 0x2c
 801001a:	2300      	movs	r3, #0
 801001c:	9300      	str	r3, [sp, #0]
 801001e:	0023      	movs	r3, r4
 8010020:	3314      	adds	r3, #20
 8010022:	db04      	blt.n	801002e <__kernel_rem_pio2+0x32>
 8010024:	2118      	movs	r1, #24
 8010026:	1ee0      	subs	r0, r4, #3
 8010028:	f7f0 f90a 	bl	8000240 <__divsi3>
 801002c:	9000      	str	r0, [sp, #0]
 801002e:	9b00      	ldr	r3, [sp, #0]
 8010030:	ae24      	add	r6, sp, #144	; 0x90
 8010032:	1c5a      	adds	r2, r3, #1
 8010034:	2318      	movs	r3, #24
 8010036:	425b      	negs	r3, r3
 8010038:	4353      	muls	r3, r2
 801003a:	191b      	adds	r3, r3, r4
 801003c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801003e:	9302      	str	r3, [sp, #8]
 8010040:	9b00      	ldr	r3, [sp, #0]
 8010042:	1a9d      	subs	r5, r3, r2
 8010044:	002c      	movs	r4, r5
 8010046:	9b08      	ldr	r3, [sp, #32]
 8010048:	189f      	adds	r7, r3, r2
 801004a:	1b63      	subs	r3, r4, r5
 801004c:	429f      	cmp	r7, r3
 801004e:	da0f      	bge.n	8010070 <__kernel_rem_pio2+0x74>
 8010050:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010052:	af74      	add	r7, sp, #464	; 0x1d0
 8010054:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010056:	9a08      	ldr	r2, [sp, #32]
 8010058:	1af3      	subs	r3, r6, r3
 801005a:	429a      	cmp	r2, r3
 801005c:	db30      	blt.n	80100c0 <__kernel_rem_pio2+0xc4>
 801005e:	ab24      	add	r3, sp, #144	; 0x90
 8010060:	00f4      	lsls	r4, r6, #3
 8010062:	2200      	movs	r2, #0
 8010064:	18e4      	adds	r4, r4, r3
 8010066:	2300      	movs	r3, #0
 8010068:	2500      	movs	r5, #0
 801006a:	9204      	str	r2, [sp, #16]
 801006c:	9305      	str	r3, [sp, #20]
 801006e:	e01e      	b.n	80100ae <__kernel_rem_pio2+0xb2>
 8010070:	2c00      	cmp	r4, #0
 8010072:	db07      	blt.n	8010084 <__kernel_rem_pio2+0x88>
 8010074:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 8010076:	00a3      	lsls	r3, r4, #2
 8010078:	58d0      	ldr	r0, [r2, r3]
 801007a:	f7f2 ff19 	bl	8002eb0 <__aeabi_i2d>
 801007e:	c603      	stmia	r6!, {r0, r1}
 8010080:	3401      	adds	r4, #1
 8010082:	e7e2      	b.n	801004a <__kernel_rem_pio2+0x4e>
 8010084:	2000      	movs	r0, #0
 8010086:	2100      	movs	r1, #0
 8010088:	e7f9      	b.n	801007e <__kernel_rem_pio2+0x82>
 801008a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801008c:	00e9      	lsls	r1, r5, #3
 801008e:	1859      	adds	r1, r3, r1
 8010090:	6808      	ldr	r0, [r1, #0]
 8010092:	6849      	ldr	r1, [r1, #4]
 8010094:	6822      	ldr	r2, [r4, #0]
 8010096:	6863      	ldr	r3, [r4, #4]
 8010098:	f7f2 f872 	bl	8002180 <__aeabi_dmul>
 801009c:	0002      	movs	r2, r0
 801009e:	000b      	movs	r3, r1
 80100a0:	9804      	ldr	r0, [sp, #16]
 80100a2:	9905      	ldr	r1, [sp, #20]
 80100a4:	f7f1 f912 	bl	80012cc <__aeabi_dadd>
 80100a8:	9004      	str	r0, [sp, #16]
 80100aa:	9105      	str	r1, [sp, #20]
 80100ac:	3501      	adds	r5, #1
 80100ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100b0:	3c08      	subs	r4, #8
 80100b2:	429d      	cmp	r5, r3
 80100b4:	dde9      	ble.n	801008a <__kernel_rem_pio2+0x8e>
 80100b6:	9b04      	ldr	r3, [sp, #16]
 80100b8:	9c05      	ldr	r4, [sp, #20]
 80100ba:	3601      	adds	r6, #1
 80100bc:	c718      	stmia	r7!, {r3, r4}
 80100be:	e7c9      	b.n	8010054 <__kernel_rem_pio2+0x58>
 80100c0:	9b08      	ldr	r3, [sp, #32]
 80100c2:	aa10      	add	r2, sp, #64	; 0x40
 80100c4:	009b      	lsls	r3, r3, #2
 80100c6:	189b      	adds	r3, r3, r2
 80100c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80100ca:	9b00      	ldr	r3, [sp, #0]
 80100cc:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 80100ce:	009b      	lsls	r3, r3, #2
 80100d0:	18d3      	adds	r3, r2, r3
 80100d2:	930e      	str	r3, [sp, #56]	; 0x38
 80100d4:	9b08      	ldr	r3, [sp, #32]
 80100d6:	9304      	str	r3, [sp, #16]
 80100d8:	9b04      	ldr	r3, [sp, #16]
 80100da:	aa74      	add	r2, sp, #464	; 0x1d0
 80100dc:	00db      	lsls	r3, r3, #3
 80100de:	18d3      	adds	r3, r2, r3
 80100e0:	681c      	ldr	r4, [r3, #0]
 80100e2:	685d      	ldr	r5, [r3, #4]
 80100e4:	ab10      	add	r3, sp, #64	; 0x40
 80100e6:	9300      	str	r3, [sp, #0]
 80100e8:	930a      	str	r3, [sp, #40]	; 0x28
 80100ea:	9b04      	ldr	r3, [sp, #16]
 80100ec:	9307      	str	r3, [sp, #28]
 80100ee:	9b07      	ldr	r3, [sp, #28]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	dc74      	bgt.n	80101de <__kernel_rem_pio2+0x1e2>
 80100f4:	0020      	movs	r0, r4
 80100f6:	0029      	movs	r1, r5
 80100f8:	9a02      	ldr	r2, [sp, #8]
 80100fa:	f7ff fee3 	bl	800fec4 <scalbn>
 80100fe:	23ff      	movs	r3, #255	; 0xff
 8010100:	2200      	movs	r2, #0
 8010102:	059b      	lsls	r3, r3, #22
 8010104:	0004      	movs	r4, r0
 8010106:	000d      	movs	r5, r1
 8010108:	f7f2 f83a 	bl	8002180 <__aeabi_dmul>
 801010c:	f000 fae2 	bl	80106d4 <floor>
 8010110:	2200      	movs	r2, #0
 8010112:	4b88      	ldr	r3, [pc, #544]	; (8010334 <__kernel_rem_pio2+0x338>)
 8010114:	f7f2 f834 	bl	8002180 <__aeabi_dmul>
 8010118:	0002      	movs	r2, r0
 801011a:	000b      	movs	r3, r1
 801011c:	0020      	movs	r0, r4
 801011e:	0029      	movs	r1, r5
 8010120:	f7f2 faf0 	bl	8002704 <__aeabi_dsub>
 8010124:	000d      	movs	r5, r1
 8010126:	0004      	movs	r4, r0
 8010128:	f7f2 fe8c 	bl	8002e44 <__aeabi_d2iz>
 801012c:	900a      	str	r0, [sp, #40]	; 0x28
 801012e:	f7f2 febf 	bl	8002eb0 <__aeabi_i2d>
 8010132:	000b      	movs	r3, r1
 8010134:	0002      	movs	r2, r0
 8010136:	0029      	movs	r1, r5
 8010138:	0020      	movs	r0, r4
 801013a:	f7f2 fae3 	bl	8002704 <__aeabi_dsub>
 801013e:	9b02      	ldr	r3, [sp, #8]
 8010140:	0006      	movs	r6, r0
 8010142:	000f      	movs	r7, r1
 8010144:	2b00      	cmp	r3, #0
 8010146:	dd74      	ble.n	8010232 <__kernel_rem_pio2+0x236>
 8010148:	2018      	movs	r0, #24
 801014a:	9b04      	ldr	r3, [sp, #16]
 801014c:	aa10      	add	r2, sp, #64	; 0x40
 801014e:	3b01      	subs	r3, #1
 8010150:	009b      	lsls	r3, r3, #2
 8010152:	589a      	ldr	r2, [r3, r2]
 8010154:	9902      	ldr	r1, [sp, #8]
 8010156:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010158:	1a40      	subs	r0, r0, r1
 801015a:	0011      	movs	r1, r2
 801015c:	4101      	asrs	r1, r0
 801015e:	1864      	adds	r4, r4, r1
 8010160:	4081      	lsls	r1, r0
 8010162:	1a52      	subs	r2, r2, r1
 8010164:	a910      	add	r1, sp, #64	; 0x40
 8010166:	505a      	str	r2, [r3, r1]
 8010168:	2317      	movs	r3, #23
 801016a:	9902      	ldr	r1, [sp, #8]
 801016c:	940a      	str	r4, [sp, #40]	; 0x28
 801016e:	1a5b      	subs	r3, r3, r1
 8010170:	411a      	asrs	r2, r3
 8010172:	9207      	str	r2, [sp, #28]
 8010174:	9b07      	ldr	r3, [sp, #28]
 8010176:	2b00      	cmp	r3, #0
 8010178:	dd6d      	ble.n	8010256 <__kernel_rem_pio2+0x25a>
 801017a:	2200      	movs	r2, #0
 801017c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801017e:	2080      	movs	r0, #128	; 0x80
 8010180:	3301      	adds	r3, #1
 8010182:	930a      	str	r3, [sp, #40]	; 0x28
 8010184:	4b6c      	ldr	r3, [pc, #432]	; (8010338 <__kernel_rem_pio2+0x33c>)
 8010186:	0014      	movs	r4, r2
 8010188:	469c      	mov	ip, r3
 801018a:	2501      	movs	r5, #1
 801018c:	0440      	lsls	r0, r0, #17
 801018e:	9b04      	ldr	r3, [sp, #16]
 8010190:	4293      	cmp	r3, r2
 8010192:	dd00      	ble.n	8010196 <__kernel_rem_pio2+0x19a>
 8010194:	e09b      	b.n	80102ce <__kernel_rem_pio2+0x2d2>
 8010196:	9b02      	ldr	r3, [sp, #8]
 8010198:	2b00      	cmp	r3, #0
 801019a:	dd05      	ble.n	80101a8 <__kernel_rem_pio2+0x1ac>
 801019c:	2b01      	cmp	r3, #1
 801019e:	d100      	bne.n	80101a2 <__kernel_rem_pio2+0x1a6>
 80101a0:	e0ab      	b.n	80102fa <__kernel_rem_pio2+0x2fe>
 80101a2:	2b02      	cmp	r3, #2
 80101a4:	d100      	bne.n	80101a8 <__kernel_rem_pio2+0x1ac>
 80101a6:	e0b2      	b.n	801030e <__kernel_rem_pio2+0x312>
 80101a8:	9b07      	ldr	r3, [sp, #28]
 80101aa:	2b02      	cmp	r3, #2
 80101ac:	d153      	bne.n	8010256 <__kernel_rem_pio2+0x25a>
 80101ae:	0032      	movs	r2, r6
 80101b0:	003b      	movs	r3, r7
 80101b2:	2000      	movs	r0, #0
 80101b4:	4961      	ldr	r1, [pc, #388]	; (801033c <__kernel_rem_pio2+0x340>)
 80101b6:	f7f2 faa5 	bl	8002704 <__aeabi_dsub>
 80101ba:	0006      	movs	r6, r0
 80101bc:	000f      	movs	r7, r1
 80101be:	2c00      	cmp	r4, #0
 80101c0:	d049      	beq.n	8010256 <__kernel_rem_pio2+0x25a>
 80101c2:	9a02      	ldr	r2, [sp, #8]
 80101c4:	2000      	movs	r0, #0
 80101c6:	495d      	ldr	r1, [pc, #372]	; (801033c <__kernel_rem_pio2+0x340>)
 80101c8:	f7ff fe7c 	bl	800fec4 <scalbn>
 80101cc:	0002      	movs	r2, r0
 80101ce:	000b      	movs	r3, r1
 80101d0:	0030      	movs	r0, r6
 80101d2:	0039      	movs	r1, r7
 80101d4:	f7f2 fa96 	bl	8002704 <__aeabi_dsub>
 80101d8:	0006      	movs	r6, r0
 80101da:	000f      	movs	r7, r1
 80101dc:	e03b      	b.n	8010256 <__kernel_rem_pio2+0x25a>
 80101de:	2200      	movs	r2, #0
 80101e0:	4b57      	ldr	r3, [pc, #348]	; (8010340 <__kernel_rem_pio2+0x344>)
 80101e2:	0020      	movs	r0, r4
 80101e4:	0029      	movs	r1, r5
 80101e6:	f7f1 ffcb 	bl	8002180 <__aeabi_dmul>
 80101ea:	f7f2 fe2b 	bl	8002e44 <__aeabi_d2iz>
 80101ee:	f7f2 fe5f 	bl	8002eb0 <__aeabi_i2d>
 80101f2:	2200      	movs	r2, #0
 80101f4:	4b53      	ldr	r3, [pc, #332]	; (8010344 <__kernel_rem_pio2+0x348>)
 80101f6:	0006      	movs	r6, r0
 80101f8:	000f      	movs	r7, r1
 80101fa:	f7f1 ffc1 	bl	8002180 <__aeabi_dmul>
 80101fe:	0002      	movs	r2, r0
 8010200:	000b      	movs	r3, r1
 8010202:	0020      	movs	r0, r4
 8010204:	0029      	movs	r1, r5
 8010206:	f7f2 fa7d 	bl	8002704 <__aeabi_dsub>
 801020a:	f7f2 fe1b 	bl	8002e44 <__aeabi_d2iz>
 801020e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010210:	aa74      	add	r2, sp, #464	; 0x1d0
 8010212:	c301      	stmia	r3!, {r0}
 8010214:	930a      	str	r3, [sp, #40]	; 0x28
 8010216:	9b07      	ldr	r3, [sp, #28]
 8010218:	0030      	movs	r0, r6
 801021a:	3b01      	subs	r3, #1
 801021c:	9307      	str	r3, [sp, #28]
 801021e:	00db      	lsls	r3, r3, #3
 8010220:	18d3      	adds	r3, r2, r3
 8010222:	0039      	movs	r1, r7
 8010224:	681a      	ldr	r2, [r3, #0]
 8010226:	685b      	ldr	r3, [r3, #4]
 8010228:	f7f1 f850 	bl	80012cc <__aeabi_dadd>
 801022c:	0004      	movs	r4, r0
 801022e:	000d      	movs	r5, r1
 8010230:	e75d      	b.n	80100ee <__kernel_rem_pio2+0xf2>
 8010232:	9b02      	ldr	r3, [sp, #8]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d107      	bne.n	8010248 <__kernel_rem_pio2+0x24c>
 8010238:	9b04      	ldr	r3, [sp, #16]
 801023a:	aa10      	add	r2, sp, #64	; 0x40
 801023c:	3b01      	subs	r3, #1
 801023e:	009b      	lsls	r3, r3, #2
 8010240:	589b      	ldr	r3, [r3, r2]
 8010242:	15db      	asrs	r3, r3, #23
 8010244:	9307      	str	r3, [sp, #28]
 8010246:	e795      	b.n	8010174 <__kernel_rem_pio2+0x178>
 8010248:	2200      	movs	r2, #0
 801024a:	4b3f      	ldr	r3, [pc, #252]	; (8010348 <__kernel_rem_pio2+0x34c>)
 801024c:	f7f0 f918 	bl	8000480 <__aeabi_dcmpge>
 8010250:	2800      	cmp	r0, #0
 8010252:	d139      	bne.n	80102c8 <__kernel_rem_pio2+0x2cc>
 8010254:	9007      	str	r0, [sp, #28]
 8010256:	2200      	movs	r2, #0
 8010258:	2300      	movs	r3, #0
 801025a:	0030      	movs	r0, r6
 801025c:	0039      	movs	r1, r7
 801025e:	f7f0 f8eb 	bl	8000438 <__aeabi_dcmpeq>
 8010262:	2800      	cmp	r0, #0
 8010264:	d100      	bne.n	8010268 <__kernel_rem_pio2+0x26c>
 8010266:	e0bc      	b.n	80103e2 <__kernel_rem_pio2+0x3e6>
 8010268:	2200      	movs	r2, #0
 801026a:	9b04      	ldr	r3, [sp, #16]
 801026c:	3b01      	subs	r3, #1
 801026e:	9300      	str	r3, [sp, #0]
 8010270:	9908      	ldr	r1, [sp, #32]
 8010272:	428b      	cmp	r3, r1
 8010274:	da53      	bge.n	801031e <__kernel_rem_pio2+0x322>
 8010276:	2a00      	cmp	r2, #0
 8010278:	d100      	bne.n	801027c <__kernel_rem_pio2+0x280>
 801027a:	e098      	b.n	80103ae <__kernel_rem_pio2+0x3b2>
 801027c:	9b02      	ldr	r3, [sp, #8]
 801027e:	aa10      	add	r2, sp, #64	; 0x40
 8010280:	3b18      	subs	r3, #24
 8010282:	9302      	str	r3, [sp, #8]
 8010284:	9b00      	ldr	r3, [sp, #0]
 8010286:	009b      	lsls	r3, r3, #2
 8010288:	589b      	ldr	r3, [r3, r2]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d100      	bne.n	8010290 <__kernel_rem_pio2+0x294>
 801028e:	e0a4      	b.n	80103da <__kernel_rem_pio2+0x3de>
 8010290:	2000      	movs	r0, #0
 8010292:	9a02      	ldr	r2, [sp, #8]
 8010294:	4929      	ldr	r1, [pc, #164]	; (801033c <__kernel_rem_pio2+0x340>)
 8010296:	f7ff fe15 	bl	800fec4 <scalbn>
 801029a:	0006      	movs	r6, r0
 801029c:	000f      	movs	r7, r1
 801029e:	9c00      	ldr	r4, [sp, #0]
 80102a0:	2c00      	cmp	r4, #0
 80102a2:	db00      	blt.n	80102a6 <__kernel_rem_pio2+0x2aa>
 80102a4:	e0dc      	b.n	8010460 <__kernel_rem_pio2+0x464>
 80102a6:	4b29      	ldr	r3, [pc, #164]	; (801034c <__kernel_rem_pio2+0x350>)
 80102a8:	9c00      	ldr	r4, [sp, #0]
 80102aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80102ac:	2c00      	cmp	r4, #0
 80102ae:	da00      	bge.n	80102b2 <__kernel_rem_pio2+0x2b6>
 80102b0:	e10f      	b.n	80104d2 <__kernel_rem_pio2+0x4d6>
 80102b2:	00e6      	lsls	r6, r4, #3
 80102b4:	ab74      	add	r3, sp, #464	; 0x1d0
 80102b6:	18f3      	adds	r3, r6, r3
 80102b8:	9302      	str	r3, [sp, #8]
 80102ba:	9b00      	ldr	r3, [sp, #0]
 80102bc:	2600      	movs	r6, #0
 80102be:	1b1b      	subs	r3, r3, r4
 80102c0:	2700      	movs	r7, #0
 80102c2:	2500      	movs	r5, #0
 80102c4:	9304      	str	r3, [sp, #16]
 80102c6:	e0f6      	b.n	80104b6 <__kernel_rem_pio2+0x4ba>
 80102c8:	2302      	movs	r3, #2
 80102ca:	9307      	str	r3, [sp, #28]
 80102cc:	e755      	b.n	801017a <__kernel_rem_pio2+0x17e>
 80102ce:	9b00      	ldr	r3, [sp, #0]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	2c00      	cmp	r4, #0
 80102d4:	d10b      	bne.n	80102ee <__kernel_rem_pio2+0x2f2>
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d003      	beq.n	80102e2 <__kernel_rem_pio2+0x2e6>
 80102da:	9c00      	ldr	r4, [sp, #0]
 80102dc:	1ac3      	subs	r3, r0, r3
 80102de:	6023      	str	r3, [r4, #0]
 80102e0:	002b      	movs	r3, r5
 80102e2:	9c00      	ldr	r4, [sp, #0]
 80102e4:	3201      	adds	r2, #1
 80102e6:	3404      	adds	r4, #4
 80102e8:	9400      	str	r4, [sp, #0]
 80102ea:	001c      	movs	r4, r3
 80102ec:	e74f      	b.n	801018e <__kernel_rem_pio2+0x192>
 80102ee:	4661      	mov	r1, ip
 80102f0:	1acb      	subs	r3, r1, r3
 80102f2:	9900      	ldr	r1, [sp, #0]
 80102f4:	600b      	str	r3, [r1, #0]
 80102f6:	0023      	movs	r3, r4
 80102f8:	e7f3      	b.n	80102e2 <__kernel_rem_pio2+0x2e6>
 80102fa:	9b04      	ldr	r3, [sp, #16]
 80102fc:	aa10      	add	r2, sp, #64	; 0x40
 80102fe:	3b01      	subs	r3, #1
 8010300:	009b      	lsls	r3, r3, #2
 8010302:	589a      	ldr	r2, [r3, r2]
 8010304:	0252      	lsls	r2, r2, #9
 8010306:	0a52      	lsrs	r2, r2, #9
 8010308:	a910      	add	r1, sp, #64	; 0x40
 801030a:	505a      	str	r2, [r3, r1]
 801030c:	e74c      	b.n	80101a8 <__kernel_rem_pio2+0x1ac>
 801030e:	9b04      	ldr	r3, [sp, #16]
 8010310:	aa10      	add	r2, sp, #64	; 0x40
 8010312:	3b01      	subs	r3, #1
 8010314:	009b      	lsls	r3, r3, #2
 8010316:	589a      	ldr	r2, [r3, r2]
 8010318:	0292      	lsls	r2, r2, #10
 801031a:	0a92      	lsrs	r2, r2, #10
 801031c:	e7f4      	b.n	8010308 <__kernel_rem_pio2+0x30c>
 801031e:	0099      	lsls	r1, r3, #2
 8010320:	a810      	add	r0, sp, #64	; 0x40
 8010322:	5809      	ldr	r1, [r1, r0]
 8010324:	3b01      	subs	r3, #1
 8010326:	430a      	orrs	r2, r1
 8010328:	e7a2      	b.n	8010270 <__kernel_rem_pio2+0x274>
 801032a:	46c0      	nop			; (mov r8, r8)
 801032c:	fffffd8c 	.word	0xfffffd8c
 8010330:	08011370 	.word	0x08011370
 8010334:	40200000 	.word	0x40200000
 8010338:	00ffffff 	.word	0x00ffffff
 801033c:	3ff00000 	.word	0x3ff00000
 8010340:	3e700000 	.word	0x3e700000
 8010344:	41700000 	.word	0x41700000
 8010348:	3fe00000 	.word	0x3fe00000
 801034c:	08011330 	.word	0x08011330
 8010350:	3301      	adds	r3, #1
 8010352:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010354:	009a      	lsls	r2, r3, #2
 8010356:	4252      	negs	r2, r2
 8010358:	588a      	ldr	r2, [r1, r2]
 801035a:	2a00      	cmp	r2, #0
 801035c:	d0f8      	beq.n	8010350 <__kernel_rem_pio2+0x354>
 801035e:	9a04      	ldr	r2, [sp, #16]
 8010360:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010362:	1c57      	adds	r7, r2, #1
 8010364:	1854      	adds	r4, r2, r1
 8010366:	00e4      	lsls	r4, r4, #3
 8010368:	aa24      	add	r2, sp, #144	; 0x90
 801036a:	1914      	adds	r4, r2, r4
 801036c:	9a04      	ldr	r2, [sp, #16]
 801036e:	18d3      	adds	r3, r2, r3
 8010370:	9304      	str	r3, [sp, #16]
 8010372:	9b04      	ldr	r3, [sp, #16]
 8010374:	42bb      	cmp	r3, r7
 8010376:	da00      	bge.n	801037a <__kernel_rem_pio2+0x37e>
 8010378:	e6ae      	b.n	80100d8 <__kernel_rem_pio2+0xdc>
 801037a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801037c:	00bb      	lsls	r3, r7, #2
 801037e:	58d0      	ldr	r0, [r2, r3]
 8010380:	f7f2 fd96 	bl	8002eb0 <__aeabi_i2d>
 8010384:	2200      	movs	r2, #0
 8010386:	2300      	movs	r3, #0
 8010388:	0026      	movs	r6, r4
 801038a:	2500      	movs	r5, #0
 801038c:	6020      	str	r0, [r4, #0]
 801038e:	6061      	str	r1, [r4, #4]
 8010390:	9200      	str	r2, [sp, #0]
 8010392:	9301      	str	r3, [sp, #4]
 8010394:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010396:	429d      	cmp	r5, r3
 8010398:	dd0b      	ble.n	80103b2 <__kernel_rem_pio2+0x3b6>
 801039a:	00fb      	lsls	r3, r7, #3
 801039c:	aa74      	add	r2, sp, #464	; 0x1d0
 801039e:	18d3      	adds	r3, r2, r3
 80103a0:	3701      	adds	r7, #1
 80103a2:	9900      	ldr	r1, [sp, #0]
 80103a4:	9a01      	ldr	r2, [sp, #4]
 80103a6:	3408      	adds	r4, #8
 80103a8:	6019      	str	r1, [r3, #0]
 80103aa:	605a      	str	r2, [r3, #4]
 80103ac:	e7e1      	b.n	8010372 <__kernel_rem_pio2+0x376>
 80103ae:	2301      	movs	r3, #1
 80103b0:	e7cf      	b.n	8010352 <__kernel_rem_pio2+0x356>
 80103b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103b4:	00e9      	lsls	r1, r5, #3
 80103b6:	1859      	adds	r1, r3, r1
 80103b8:	6808      	ldr	r0, [r1, #0]
 80103ba:	6849      	ldr	r1, [r1, #4]
 80103bc:	6832      	ldr	r2, [r6, #0]
 80103be:	6873      	ldr	r3, [r6, #4]
 80103c0:	f7f1 fede 	bl	8002180 <__aeabi_dmul>
 80103c4:	0002      	movs	r2, r0
 80103c6:	000b      	movs	r3, r1
 80103c8:	9800      	ldr	r0, [sp, #0]
 80103ca:	9901      	ldr	r1, [sp, #4]
 80103cc:	f7f0 ff7e 	bl	80012cc <__aeabi_dadd>
 80103d0:	3501      	adds	r5, #1
 80103d2:	9000      	str	r0, [sp, #0]
 80103d4:	9101      	str	r1, [sp, #4]
 80103d6:	3e08      	subs	r6, #8
 80103d8:	e7dc      	b.n	8010394 <__kernel_rem_pio2+0x398>
 80103da:	9b00      	ldr	r3, [sp, #0]
 80103dc:	3b01      	subs	r3, #1
 80103de:	9300      	str	r3, [sp, #0]
 80103e0:	e74c      	b.n	801027c <__kernel_rem_pio2+0x280>
 80103e2:	9b02      	ldr	r3, [sp, #8]
 80103e4:	0030      	movs	r0, r6
 80103e6:	425a      	negs	r2, r3
 80103e8:	0039      	movs	r1, r7
 80103ea:	f7ff fd6b 	bl	800fec4 <scalbn>
 80103ee:	2200      	movs	r2, #0
 80103f0:	4bb6      	ldr	r3, [pc, #728]	; (80106cc <__kernel_rem_pio2+0x6d0>)
 80103f2:	0004      	movs	r4, r0
 80103f4:	000d      	movs	r5, r1
 80103f6:	f7f0 f843 	bl	8000480 <__aeabi_dcmpge>
 80103fa:	2800      	cmp	r0, #0
 80103fc:	d025      	beq.n	801044a <__kernel_rem_pio2+0x44e>
 80103fe:	2200      	movs	r2, #0
 8010400:	4bb3      	ldr	r3, [pc, #716]	; (80106d0 <__kernel_rem_pio2+0x6d4>)
 8010402:	0020      	movs	r0, r4
 8010404:	0029      	movs	r1, r5
 8010406:	f7f1 febb 	bl	8002180 <__aeabi_dmul>
 801040a:	f7f2 fd1b 	bl	8002e44 <__aeabi_d2iz>
 801040e:	9b04      	ldr	r3, [sp, #16]
 8010410:	0006      	movs	r6, r0
 8010412:	009f      	lsls	r7, r3, #2
 8010414:	f7f2 fd4c 	bl	8002eb0 <__aeabi_i2d>
 8010418:	2200      	movs	r2, #0
 801041a:	4bac      	ldr	r3, [pc, #688]	; (80106cc <__kernel_rem_pio2+0x6d0>)
 801041c:	f7f1 feb0 	bl	8002180 <__aeabi_dmul>
 8010420:	0002      	movs	r2, r0
 8010422:	000b      	movs	r3, r1
 8010424:	0020      	movs	r0, r4
 8010426:	0029      	movs	r1, r5
 8010428:	f7f2 f96c 	bl	8002704 <__aeabi_dsub>
 801042c:	f7f2 fd0a 	bl	8002e44 <__aeabi_d2iz>
 8010430:	ab10      	add	r3, sp, #64	; 0x40
 8010432:	51d8      	str	r0, [r3, r7]
 8010434:	9b04      	ldr	r3, [sp, #16]
 8010436:	aa10      	add	r2, sp, #64	; 0x40
 8010438:	3301      	adds	r3, #1
 801043a:	9300      	str	r3, [sp, #0]
 801043c:	9b02      	ldr	r3, [sp, #8]
 801043e:	3318      	adds	r3, #24
 8010440:	9302      	str	r3, [sp, #8]
 8010442:	9b00      	ldr	r3, [sp, #0]
 8010444:	009b      	lsls	r3, r3, #2
 8010446:	509e      	str	r6, [r3, r2]
 8010448:	e722      	b.n	8010290 <__kernel_rem_pio2+0x294>
 801044a:	9b04      	ldr	r3, [sp, #16]
 801044c:	0020      	movs	r0, r4
 801044e:	0029      	movs	r1, r5
 8010450:	009e      	lsls	r6, r3, #2
 8010452:	f7f2 fcf7 	bl	8002e44 <__aeabi_d2iz>
 8010456:	ab10      	add	r3, sp, #64	; 0x40
 8010458:	5198      	str	r0, [r3, r6]
 801045a:	9b04      	ldr	r3, [sp, #16]
 801045c:	9300      	str	r3, [sp, #0]
 801045e:	e717      	b.n	8010290 <__kernel_rem_pio2+0x294>
 8010460:	00e5      	lsls	r5, r4, #3
 8010462:	ab74      	add	r3, sp, #464	; 0x1d0
 8010464:	aa10      	add	r2, sp, #64	; 0x40
 8010466:	195d      	adds	r5, r3, r5
 8010468:	00a3      	lsls	r3, r4, #2
 801046a:	5898      	ldr	r0, [r3, r2]
 801046c:	f7f2 fd20 	bl	8002eb0 <__aeabi_i2d>
 8010470:	0032      	movs	r2, r6
 8010472:	003b      	movs	r3, r7
 8010474:	f7f1 fe84 	bl	8002180 <__aeabi_dmul>
 8010478:	2200      	movs	r2, #0
 801047a:	6028      	str	r0, [r5, #0]
 801047c:	6069      	str	r1, [r5, #4]
 801047e:	4b94      	ldr	r3, [pc, #592]	; (80106d0 <__kernel_rem_pio2+0x6d4>)
 8010480:	0030      	movs	r0, r6
 8010482:	0039      	movs	r1, r7
 8010484:	f7f1 fe7c 	bl	8002180 <__aeabi_dmul>
 8010488:	3c01      	subs	r4, #1
 801048a:	0006      	movs	r6, r0
 801048c:	000f      	movs	r7, r1
 801048e:	e707      	b.n	80102a0 <__kernel_rem_pio2+0x2a4>
 8010490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010492:	9802      	ldr	r0, [sp, #8]
 8010494:	00e9      	lsls	r1, r5, #3
 8010496:	1859      	adds	r1, r3, r1
 8010498:	c80c      	ldmia	r0!, {r2, r3}
 801049a:	9002      	str	r0, [sp, #8]
 801049c:	6808      	ldr	r0, [r1, #0]
 801049e:	6849      	ldr	r1, [r1, #4]
 80104a0:	f7f1 fe6e 	bl	8002180 <__aeabi_dmul>
 80104a4:	0002      	movs	r2, r0
 80104a6:	000b      	movs	r3, r1
 80104a8:	0030      	movs	r0, r6
 80104aa:	0039      	movs	r1, r7
 80104ac:	f7f0 ff0e 	bl	80012cc <__aeabi_dadd>
 80104b0:	0006      	movs	r6, r0
 80104b2:	000f      	movs	r7, r1
 80104b4:	3501      	adds	r5, #1
 80104b6:	9b08      	ldr	r3, [sp, #32]
 80104b8:	429d      	cmp	r5, r3
 80104ba:	dc02      	bgt.n	80104c2 <__kernel_rem_pio2+0x4c6>
 80104bc:	9b04      	ldr	r3, [sp, #16]
 80104be:	429d      	cmp	r5, r3
 80104c0:	dde6      	ble.n	8010490 <__kernel_rem_pio2+0x494>
 80104c2:	9b04      	ldr	r3, [sp, #16]
 80104c4:	aa4c      	add	r2, sp, #304	; 0x130
 80104c6:	00db      	lsls	r3, r3, #3
 80104c8:	18d3      	adds	r3, r2, r3
 80104ca:	601e      	str	r6, [r3, #0]
 80104cc:	605f      	str	r7, [r3, #4]
 80104ce:	3c01      	subs	r4, #1
 80104d0:	e6ec      	b.n	80102ac <__kernel_rem_pio2+0x2b0>
 80104d2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80104d4:	2b02      	cmp	r3, #2
 80104d6:	dc0e      	bgt.n	80104f6 <__kernel_rem_pio2+0x4fa>
 80104d8:	2b00      	cmp	r3, #0
 80104da:	dd00      	ble.n	80104de <__kernel_rem_pio2+0x4e2>
 80104dc:	e08c      	b.n	80105f8 <__kernel_rem_pio2+0x5fc>
 80104de:	2500      	movs	r5, #0
 80104e0:	002c      	movs	r4, r5
 80104e2:	42ab      	cmp	r3, r5
 80104e4:	d046      	beq.n	8010574 <__kernel_rem_pio2+0x578>
 80104e6:	2007      	movs	r0, #7
 80104e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104ea:	4003      	ands	r3, r0
 80104ec:	0018      	movs	r0, r3
 80104ee:	239d      	movs	r3, #157	; 0x9d
 80104f0:	009b      	lsls	r3, r3, #2
 80104f2:	449d      	add	sp, r3
 80104f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104f6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80104f8:	2b03      	cmp	r3, #3
 80104fa:	d1f4      	bne.n	80104e6 <__kernel_rem_pio2+0x4ea>
 80104fc:	9b00      	ldr	r3, [sp, #0]
 80104fe:	aa4c      	add	r2, sp, #304	; 0x130
 8010500:	00db      	lsls	r3, r3, #3
 8010502:	18d4      	adds	r4, r2, r3
 8010504:	0025      	movs	r5, r4
 8010506:	9b00      	ldr	r3, [sp, #0]
 8010508:	9302      	str	r3, [sp, #8]
 801050a:	9b02      	ldr	r3, [sp, #8]
 801050c:	3d08      	subs	r5, #8
 801050e:	2b00      	cmp	r3, #0
 8010510:	dd00      	ble.n	8010514 <__kernel_rem_pio2+0x518>
 8010512:	e07f      	b.n	8010614 <__kernel_rem_pio2+0x618>
 8010514:	9d00      	ldr	r5, [sp, #0]
 8010516:	3c08      	subs	r4, #8
 8010518:	2d01      	cmp	r5, #1
 801051a:	dd00      	ble.n	801051e <__kernel_rem_pio2+0x522>
 801051c:	e09c      	b.n	8010658 <__kernel_rem_pio2+0x65c>
 801051e:	2400      	movs	r4, #0
 8010520:	0021      	movs	r1, r4
 8010522:	9b00      	ldr	r3, [sp, #0]
 8010524:	2b01      	cmp	r3, #1
 8010526:	dd00      	ble.n	801052a <__kernel_rem_pio2+0x52e>
 8010528:	e0b4      	b.n	8010694 <__kernel_rem_pio2+0x698>
 801052a:	9b07      	ldr	r3, [sp, #28]
 801052c:	9f4c      	ldr	r7, [sp, #304]	; 0x130
 801052e:	9e4d      	ldr	r6, [sp, #308]	; 0x134
 8010530:	9d4e      	ldr	r5, [sp, #312]	; 0x138
 8010532:	984f      	ldr	r0, [sp, #316]	; 0x13c
 8010534:	2b00      	cmp	r3, #0
 8010536:	d000      	beq.n	801053a <__kernel_rem_pio2+0x53e>
 8010538:	e0ba      	b.n	80106b0 <__kernel_rem_pio2+0x6b4>
 801053a:	0033      	movs	r3, r6
 801053c:	003a      	movs	r2, r7
 801053e:	9e06      	ldr	r6, [sp, #24]
 8010540:	6032      	str	r2, [r6, #0]
 8010542:	6073      	str	r3, [r6, #4]
 8010544:	002a      	movs	r2, r5
 8010546:	0003      	movs	r3, r0
 8010548:	60b2      	str	r2, [r6, #8]
 801054a:	60f3      	str	r3, [r6, #12]
 801054c:	0022      	movs	r2, r4
 801054e:	000b      	movs	r3, r1
 8010550:	6132      	str	r2, [r6, #16]
 8010552:	6173      	str	r3, [r6, #20]
 8010554:	e7c7      	b.n	80104e6 <__kernel_rem_pio2+0x4ea>
 8010556:	9b00      	ldr	r3, [sp, #0]
 8010558:	aa4c      	add	r2, sp, #304	; 0x130
 801055a:	00db      	lsls	r3, r3, #3
 801055c:	18d3      	adds	r3, r2, r3
 801055e:	0028      	movs	r0, r5
 8010560:	681a      	ldr	r2, [r3, #0]
 8010562:	685b      	ldr	r3, [r3, #4]
 8010564:	0021      	movs	r1, r4
 8010566:	f7f0 feb1 	bl	80012cc <__aeabi_dadd>
 801056a:	0005      	movs	r5, r0
 801056c:	000c      	movs	r4, r1
 801056e:	9b00      	ldr	r3, [sp, #0]
 8010570:	3b01      	subs	r3, #1
 8010572:	9300      	str	r3, [sp, #0]
 8010574:	9b00      	ldr	r3, [sp, #0]
 8010576:	2b00      	cmp	r3, #0
 8010578:	daed      	bge.n	8010556 <__kernel_rem_pio2+0x55a>
 801057a:	9b07      	ldr	r3, [sp, #28]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d002      	beq.n	8010586 <__kernel_rem_pio2+0x58a>
 8010580:	2380      	movs	r3, #128	; 0x80
 8010582:	061b      	lsls	r3, r3, #24
 8010584:	18e4      	adds	r4, r4, r3
 8010586:	002a      	movs	r2, r5
 8010588:	0023      	movs	r3, r4
 801058a:	9906      	ldr	r1, [sp, #24]
 801058c:	600a      	str	r2, [r1, #0]
 801058e:	604b      	str	r3, [r1, #4]
 8010590:	e7a9      	b.n	80104e6 <__kernel_rem_pio2+0x4ea>
 8010592:	00e3      	lsls	r3, r4, #3
 8010594:	aa4c      	add	r2, sp, #304	; 0x130
 8010596:	18d3      	adds	r3, r2, r3
 8010598:	0030      	movs	r0, r6
 801059a:	681a      	ldr	r2, [r3, #0]
 801059c:	685b      	ldr	r3, [r3, #4]
 801059e:	0029      	movs	r1, r5
 80105a0:	f7f0 fe94 	bl	80012cc <__aeabi_dadd>
 80105a4:	0006      	movs	r6, r0
 80105a6:	000d      	movs	r5, r1
 80105a8:	3c01      	subs	r4, #1
 80105aa:	2c00      	cmp	r4, #0
 80105ac:	daf1      	bge.n	8010592 <__kernel_rem_pio2+0x596>
 80105ae:	9b07      	ldr	r3, [sp, #28]
 80105b0:	0029      	movs	r1, r5
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d002      	beq.n	80105bc <__kernel_rem_pio2+0x5c0>
 80105b6:	2380      	movs	r3, #128	; 0x80
 80105b8:	061b      	lsls	r3, r3, #24
 80105ba:	18e9      	adds	r1, r5, r3
 80105bc:	0032      	movs	r2, r6
 80105be:	000b      	movs	r3, r1
 80105c0:	9906      	ldr	r1, [sp, #24]
 80105c2:	2401      	movs	r4, #1
 80105c4:	600a      	str	r2, [r1, #0]
 80105c6:	604b      	str	r3, [r1, #4]
 80105c8:	984c      	ldr	r0, [sp, #304]	; 0x130
 80105ca:	994d      	ldr	r1, [sp, #308]	; 0x134
 80105cc:	002b      	movs	r3, r5
 80105ce:	f7f2 f899 	bl	8002704 <__aeabi_dsub>
 80105d2:	0007      	movs	r7, r0
 80105d4:	000e      	movs	r6, r1
 80105d6:	ad4c      	add	r5, sp, #304	; 0x130
 80105d8:	9b00      	ldr	r3, [sp, #0]
 80105da:	3508      	adds	r5, #8
 80105dc:	42a3      	cmp	r3, r4
 80105de:	da0f      	bge.n	8010600 <__kernel_rem_pio2+0x604>
 80105e0:	9b07      	ldr	r3, [sp, #28]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d002      	beq.n	80105ec <__kernel_rem_pio2+0x5f0>
 80105e6:	2380      	movs	r3, #128	; 0x80
 80105e8:	061b      	lsls	r3, r3, #24
 80105ea:	18f6      	adds	r6, r6, r3
 80105ec:	003a      	movs	r2, r7
 80105ee:	0033      	movs	r3, r6
 80105f0:	9906      	ldr	r1, [sp, #24]
 80105f2:	608a      	str	r2, [r1, #8]
 80105f4:	60cb      	str	r3, [r1, #12]
 80105f6:	e776      	b.n	80104e6 <__kernel_rem_pio2+0x4ea>
 80105f8:	2600      	movs	r6, #0
 80105fa:	9c00      	ldr	r4, [sp, #0]
 80105fc:	0035      	movs	r5, r6
 80105fe:	e7d4      	b.n	80105aa <__kernel_rem_pio2+0x5ae>
 8010600:	0038      	movs	r0, r7
 8010602:	682a      	ldr	r2, [r5, #0]
 8010604:	686b      	ldr	r3, [r5, #4]
 8010606:	0031      	movs	r1, r6
 8010608:	f7f0 fe60 	bl	80012cc <__aeabi_dadd>
 801060c:	3401      	adds	r4, #1
 801060e:	0007      	movs	r7, r0
 8010610:	000e      	movs	r6, r1
 8010612:	e7e1      	b.n	80105d8 <__kernel_rem_pio2+0x5dc>
 8010614:	9b02      	ldr	r3, [sp, #8]
 8010616:	68ae      	ldr	r6, [r5, #8]
 8010618:	68ef      	ldr	r7, [r5, #12]
 801061a:	3b01      	subs	r3, #1
 801061c:	9302      	str	r3, [sp, #8]
 801061e:	682a      	ldr	r2, [r5, #0]
 8010620:	686b      	ldr	r3, [r5, #4]
 8010622:	9204      	str	r2, [sp, #16]
 8010624:	9305      	str	r3, [sp, #20]
 8010626:	9804      	ldr	r0, [sp, #16]
 8010628:	9905      	ldr	r1, [sp, #20]
 801062a:	0032      	movs	r2, r6
 801062c:	003b      	movs	r3, r7
 801062e:	f7f0 fe4d 	bl	80012cc <__aeabi_dadd>
 8010632:	0002      	movs	r2, r0
 8010634:	000b      	movs	r3, r1
 8010636:	9008      	str	r0, [sp, #32]
 8010638:	9109      	str	r1, [sp, #36]	; 0x24
 801063a:	9804      	ldr	r0, [sp, #16]
 801063c:	9905      	ldr	r1, [sp, #20]
 801063e:	f7f2 f861 	bl	8002704 <__aeabi_dsub>
 8010642:	0032      	movs	r2, r6
 8010644:	003b      	movs	r3, r7
 8010646:	f7f0 fe41 	bl	80012cc <__aeabi_dadd>
 801064a:	9a08      	ldr	r2, [sp, #32]
 801064c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801064e:	60a8      	str	r0, [r5, #8]
 8010650:	60e9      	str	r1, [r5, #12]
 8010652:	602a      	str	r2, [r5, #0]
 8010654:	606b      	str	r3, [r5, #4]
 8010656:	e758      	b.n	801050a <__kernel_rem_pio2+0x50e>
 8010658:	6826      	ldr	r6, [r4, #0]
 801065a:	6867      	ldr	r7, [r4, #4]
 801065c:	68a2      	ldr	r2, [r4, #8]
 801065e:	68e3      	ldr	r3, [r4, #12]
 8010660:	0030      	movs	r0, r6
 8010662:	0039      	movs	r1, r7
 8010664:	9202      	str	r2, [sp, #8]
 8010666:	9303      	str	r3, [sp, #12]
 8010668:	f7f0 fe30 	bl	80012cc <__aeabi_dadd>
 801066c:	0002      	movs	r2, r0
 801066e:	000b      	movs	r3, r1
 8010670:	9004      	str	r0, [sp, #16]
 8010672:	9105      	str	r1, [sp, #20]
 8010674:	0030      	movs	r0, r6
 8010676:	0039      	movs	r1, r7
 8010678:	f7f2 f844 	bl	8002704 <__aeabi_dsub>
 801067c:	9a02      	ldr	r2, [sp, #8]
 801067e:	9b03      	ldr	r3, [sp, #12]
 8010680:	f7f0 fe24 	bl	80012cc <__aeabi_dadd>
 8010684:	9a04      	ldr	r2, [sp, #16]
 8010686:	9b05      	ldr	r3, [sp, #20]
 8010688:	60a0      	str	r0, [r4, #8]
 801068a:	60e1      	str	r1, [r4, #12]
 801068c:	6022      	str	r2, [r4, #0]
 801068e:	6063      	str	r3, [r4, #4]
 8010690:	3d01      	subs	r5, #1
 8010692:	e740      	b.n	8010516 <__kernel_rem_pio2+0x51a>
 8010694:	9b00      	ldr	r3, [sp, #0]
 8010696:	aa4c      	add	r2, sp, #304	; 0x130
 8010698:	00db      	lsls	r3, r3, #3
 801069a:	18d3      	adds	r3, r2, r3
 801069c:	0020      	movs	r0, r4
 801069e:	681a      	ldr	r2, [r3, #0]
 80106a0:	685b      	ldr	r3, [r3, #4]
 80106a2:	f7f0 fe13 	bl	80012cc <__aeabi_dadd>
 80106a6:	9b00      	ldr	r3, [sp, #0]
 80106a8:	0004      	movs	r4, r0
 80106aa:	3b01      	subs	r3, #1
 80106ac:	9300      	str	r3, [sp, #0]
 80106ae:	e738      	b.n	8010522 <__kernel_rem_pio2+0x526>
 80106b0:	9b06      	ldr	r3, [sp, #24]
 80106b2:	9a06      	ldr	r2, [sp, #24]
 80106b4:	601f      	str	r7, [r3, #0]
 80106b6:	2380      	movs	r3, #128	; 0x80
 80106b8:	061b      	lsls	r3, r3, #24
 80106ba:	18f6      	adds	r6, r6, r3
 80106bc:	18c0      	adds	r0, r0, r3
 80106be:	18c9      	adds	r1, r1, r3
 80106c0:	6056      	str	r6, [r2, #4]
 80106c2:	6095      	str	r5, [r2, #8]
 80106c4:	60d0      	str	r0, [r2, #12]
 80106c6:	6114      	str	r4, [r2, #16]
 80106c8:	6151      	str	r1, [r2, #20]
 80106ca:	e70c      	b.n	80104e6 <__kernel_rem_pio2+0x4ea>
 80106cc:	41700000 	.word	0x41700000
 80106d0:	3e700000 	.word	0x3e700000

080106d4 <floor>:
 80106d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80106d6:	004b      	lsls	r3, r1, #1
 80106d8:	4a3e      	ldr	r2, [pc, #248]	; (80107d4 <floor+0x100>)
 80106da:	0d5b      	lsrs	r3, r3, #21
 80106dc:	189f      	adds	r7, r3, r2
 80106de:	4684      	mov	ip, r0
 80106e0:	000e      	movs	r6, r1
 80106e2:	000c      	movs	r4, r1
 80106e4:	0005      	movs	r5, r0
 80106e6:	9001      	str	r0, [sp, #4]
 80106e8:	2f13      	cmp	r7, #19
 80106ea:	dc34      	bgt.n	8010756 <floor+0x82>
 80106ec:	2f00      	cmp	r7, #0
 80106ee:	da16      	bge.n	801071e <floor+0x4a>
 80106f0:	4a39      	ldr	r2, [pc, #228]	; (80107d8 <floor+0x104>)
 80106f2:	4b3a      	ldr	r3, [pc, #232]	; (80107dc <floor+0x108>)
 80106f4:	4660      	mov	r0, ip
 80106f6:	0031      	movs	r1, r6
 80106f8:	f7f0 fde8 	bl	80012cc <__aeabi_dadd>
 80106fc:	2200      	movs	r2, #0
 80106fe:	2300      	movs	r3, #0
 8010700:	f7ef feb4 	bl	800046c <__aeabi_dcmpgt>
 8010704:	2800      	cmp	r0, #0
 8010706:	d007      	beq.n	8010718 <floor+0x44>
 8010708:	2e00      	cmp	r6, #0
 801070a:	da5d      	bge.n	80107c8 <floor+0xf4>
 801070c:	0074      	lsls	r4, r6, #1
 801070e:	0864      	lsrs	r4, r4, #1
 8010710:	4325      	orrs	r5, r4
 8010712:	d05c      	beq.n	80107ce <floor+0xfa>
 8010714:	2500      	movs	r5, #0
 8010716:	4c32      	ldr	r4, [pc, #200]	; (80107e0 <floor+0x10c>)
 8010718:	46ac      	mov	ip, r5
 801071a:	0026      	movs	r6, r4
 801071c:	e029      	b.n	8010772 <floor+0x9e>
 801071e:	4b31      	ldr	r3, [pc, #196]	; (80107e4 <floor+0x110>)
 8010720:	413b      	asrs	r3, r7
 8010722:	9300      	str	r3, [sp, #0]
 8010724:	400b      	ands	r3, r1
 8010726:	4303      	orrs	r3, r0
 8010728:	d023      	beq.n	8010772 <floor+0x9e>
 801072a:	4a2b      	ldr	r2, [pc, #172]	; (80107d8 <floor+0x104>)
 801072c:	4b2b      	ldr	r3, [pc, #172]	; (80107dc <floor+0x108>)
 801072e:	4660      	mov	r0, ip
 8010730:	0031      	movs	r1, r6
 8010732:	f7f0 fdcb 	bl	80012cc <__aeabi_dadd>
 8010736:	2200      	movs	r2, #0
 8010738:	2300      	movs	r3, #0
 801073a:	f7ef fe97 	bl	800046c <__aeabi_dcmpgt>
 801073e:	2800      	cmp	r0, #0
 8010740:	d0ea      	beq.n	8010718 <floor+0x44>
 8010742:	2e00      	cmp	r6, #0
 8010744:	da03      	bge.n	801074e <floor+0x7a>
 8010746:	2380      	movs	r3, #128	; 0x80
 8010748:	035b      	lsls	r3, r3, #13
 801074a:	413b      	asrs	r3, r7
 801074c:	18f4      	adds	r4, r6, r3
 801074e:	9b00      	ldr	r3, [sp, #0]
 8010750:	2500      	movs	r5, #0
 8010752:	439c      	bics	r4, r3
 8010754:	e7e0      	b.n	8010718 <floor+0x44>
 8010756:	2f33      	cmp	r7, #51	; 0x33
 8010758:	dd0f      	ble.n	801077a <floor+0xa6>
 801075a:	2380      	movs	r3, #128	; 0x80
 801075c:	00db      	lsls	r3, r3, #3
 801075e:	429f      	cmp	r7, r3
 8010760:	d107      	bne.n	8010772 <floor+0x9e>
 8010762:	0002      	movs	r2, r0
 8010764:	000b      	movs	r3, r1
 8010766:	4660      	mov	r0, ip
 8010768:	0031      	movs	r1, r6
 801076a:	f7f0 fdaf 	bl	80012cc <__aeabi_dadd>
 801076e:	4684      	mov	ip, r0
 8010770:	000e      	movs	r6, r1
 8010772:	4660      	mov	r0, ip
 8010774:	0031      	movs	r1, r6
 8010776:	b003      	add	sp, #12
 8010778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801077a:	4a1b      	ldr	r2, [pc, #108]	; (80107e8 <floor+0x114>)
 801077c:	189b      	adds	r3, r3, r2
 801077e:	2201      	movs	r2, #1
 8010780:	4252      	negs	r2, r2
 8010782:	40da      	lsrs	r2, r3
 8010784:	9200      	str	r2, [sp, #0]
 8010786:	4202      	tst	r2, r0
 8010788:	d0f3      	beq.n	8010772 <floor+0x9e>
 801078a:	4a13      	ldr	r2, [pc, #76]	; (80107d8 <floor+0x104>)
 801078c:	4b13      	ldr	r3, [pc, #76]	; (80107dc <floor+0x108>)
 801078e:	4660      	mov	r0, ip
 8010790:	0031      	movs	r1, r6
 8010792:	f7f0 fd9b 	bl	80012cc <__aeabi_dadd>
 8010796:	2200      	movs	r2, #0
 8010798:	2300      	movs	r3, #0
 801079a:	f7ef fe67 	bl	800046c <__aeabi_dcmpgt>
 801079e:	2800      	cmp	r0, #0
 80107a0:	d0ba      	beq.n	8010718 <floor+0x44>
 80107a2:	2e00      	cmp	r6, #0
 80107a4:	da02      	bge.n	80107ac <floor+0xd8>
 80107a6:	2f14      	cmp	r7, #20
 80107a8:	d103      	bne.n	80107b2 <floor+0xde>
 80107aa:	3401      	adds	r4, #1
 80107ac:	9b00      	ldr	r3, [sp, #0]
 80107ae:	439d      	bics	r5, r3
 80107b0:	e7b2      	b.n	8010718 <floor+0x44>
 80107b2:	2234      	movs	r2, #52	; 0x34
 80107b4:	2301      	movs	r3, #1
 80107b6:	1bd2      	subs	r2, r2, r7
 80107b8:	4093      	lsls	r3, r2
 80107ba:	18ed      	adds	r5, r5, r3
 80107bc:	9b01      	ldr	r3, [sp, #4]
 80107be:	429d      	cmp	r5, r3
 80107c0:	419b      	sbcs	r3, r3
 80107c2:	425b      	negs	r3, r3
 80107c4:	18f4      	adds	r4, r6, r3
 80107c6:	e7f1      	b.n	80107ac <floor+0xd8>
 80107c8:	2500      	movs	r5, #0
 80107ca:	002c      	movs	r4, r5
 80107cc:	e7a4      	b.n	8010718 <floor+0x44>
 80107ce:	2480      	movs	r4, #128	; 0x80
 80107d0:	0624      	lsls	r4, r4, #24
 80107d2:	e7a1      	b.n	8010718 <floor+0x44>
 80107d4:	fffffc01 	.word	0xfffffc01
 80107d8:	8800759c 	.word	0x8800759c
 80107dc:	7e37e43c 	.word	0x7e37e43c
 80107e0:	bff00000 	.word	0xbff00000
 80107e4:	000fffff 	.word	0x000fffff
 80107e8:	fffffbed 	.word	0xfffffbed

080107ec <_init>:
 80107ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ee:	46c0      	nop			; (mov r8, r8)
 80107f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107f2:	bc08      	pop	{r3}
 80107f4:	469e      	mov	lr, r3
 80107f6:	4770      	bx	lr

080107f8 <_fini>:
 80107f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107fa:	46c0      	nop			; (mov r8, r8)
 80107fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107fe:	bc08      	pop	{r3}
 8010800:	469e      	mov	lr, r3
 8010802:	4770      	bx	lr
