
PROJET_ESE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000867c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  0800873c  0800873c  0001873c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089a8  080089a8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080089a8  080089a8  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080089a8  080089a8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089a8  080089a8  000189a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089ac  080089ac  000189ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080089b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041c4  2000006c  08008a1c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004230  08008a1c  00024230  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019c99  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042ae  00000000  00000000  00039d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001830  00000000  00000000  0003e020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012b3  00000000  00000000  0003f850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b359  00000000  00000000  00040b03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d788  00000000  00000000  0005be5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a417c  00000000  00000000  000795e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d60  00000000  00000000  0011d760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001234c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008724 	.word	0x08008724

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08008724 	.word	0x08008724

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	0018      	movs	r0, r3
 8000412:	230c      	movs	r3, #12
 8000414:	001a      	movs	r2, r3
 8000416:	2100      	movs	r1, #0
 8000418:	f007 fb32 	bl	8007a80 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800041c:	4b2d      	ldr	r3, [pc, #180]	; (80004d4 <MX_ADC1_Init+0xcc>)
 800041e:	4a2e      	ldr	r2, [pc, #184]	; (80004d8 <MX_ADC1_Init+0xd0>)
 8000420:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000422:	4b2c      	ldr	r3, [pc, #176]	; (80004d4 <MX_ADC1_Init+0xcc>)
 8000424:	2280      	movs	r2, #128	; 0x80
 8000426:	05d2      	lsls	r2, r2, #23
 8000428:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800042a:	4b2a      	ldr	r3, [pc, #168]	; (80004d4 <MX_ADC1_Init+0xcc>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000430:	4b28      	ldr	r3, [pc, #160]	; (80004d4 <MX_ADC1_Init+0xcc>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000436:	4b27      	ldr	r3, [pc, #156]	; (80004d4 <MX_ADC1_Init+0xcc>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800043c:	4b25      	ldr	r3, [pc, #148]	; (80004d4 <MX_ADC1_Init+0xcc>)
 800043e:	2204      	movs	r2, #4
 8000440:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000442:	4b24      	ldr	r3, [pc, #144]	; (80004d4 <MX_ADC1_Init+0xcc>)
 8000444:	2200      	movs	r2, #0
 8000446:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000448:	4b22      	ldr	r3, [pc, #136]	; (80004d4 <MX_ADC1_Init+0xcc>)
 800044a:	2200      	movs	r2, #0
 800044c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800044e:	4b21      	ldr	r3, [pc, #132]	; (80004d4 <MX_ADC1_Init+0xcc>)
 8000450:	2200      	movs	r2, #0
 8000452:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000454:	4b1f      	ldr	r3, [pc, #124]	; (80004d4 <MX_ADC1_Init+0xcc>)
 8000456:	2201      	movs	r2, #1
 8000458:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800045a:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <MX_ADC1_Init+0xcc>)
 800045c:	2220      	movs	r2, #32
 800045e:	2100      	movs	r1, #0
 8000460:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000462:	4b1c      	ldr	r3, [pc, #112]	; (80004d4 <MX_ADC1_Init+0xcc>)
 8000464:	2200      	movs	r2, #0
 8000466:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000468:	4b1a      	ldr	r3, [pc, #104]	; (80004d4 <MX_ADC1_Init+0xcc>)
 800046a:	2200      	movs	r2, #0
 800046c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800046e:	4b19      	ldr	r3, [pc, #100]	; (80004d4 <MX_ADC1_Init+0xcc>)
 8000470:	222c      	movs	r2, #44	; 0x2c
 8000472:	2100      	movs	r1, #0
 8000474:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000476:	4b17      	ldr	r3, [pc, #92]	; (80004d4 <MX_ADC1_Init+0xcc>)
 8000478:	2200      	movs	r2, #0
 800047a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <MX_ADC1_Init+0xcc>)
 800047e:	2200      	movs	r2, #0
 8000480:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000482:	4b14      	ldr	r3, [pc, #80]	; (80004d4 <MX_ADC1_Init+0xcc>)
 8000484:	2200      	movs	r2, #0
 8000486:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000488:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <MX_ADC1_Init+0xcc>)
 800048a:	223c      	movs	r2, #60	; 0x3c
 800048c:	2100      	movs	r1, #0
 800048e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000490:	4b10      	ldr	r3, [pc, #64]	; (80004d4 <MX_ADC1_Init+0xcc>)
 8000492:	2200      	movs	r2, #0
 8000494:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000496:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <MX_ADC1_Init+0xcc>)
 8000498:	0018      	movs	r0, r3
 800049a:	f001 fbe5 	bl	8001c68 <HAL_ADC_Init>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80004a2:	f000 f9b5 	bl	8000810 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2201      	movs	r2, #1
 80004aa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2200      	movs	r2, #0
 80004b0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004b8:	1d3a      	adds	r2, r7, #4
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <MX_ADC1_Init+0xcc>)
 80004bc:	0011      	movs	r1, r2
 80004be:	0018      	movs	r0, r3
 80004c0:	f001 fd7a 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 80004c4:	1e03      	subs	r3, r0, #0
 80004c6:	d001      	beq.n	80004cc <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80004c8:	f000 f9a2 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004cc:	46c0      	nop			; (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b004      	add	sp, #16
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000088 	.word	0x20000088
 80004d8:	40012400 	.word	0x40012400

080004dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b08b      	sub	sp, #44	; 0x2c
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e4:	2414      	movs	r4, #20
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	0018      	movs	r0, r3
 80004ea:	2314      	movs	r3, #20
 80004ec:	001a      	movs	r2, r3
 80004ee:	2100      	movs	r1, #0
 80004f0:	f007 fac6 	bl	8007a80 <memset>
  if(adcHandle->Instance==ADC1)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a18      	ldr	r2, [pc, #96]	; (800055c <HAL_ADC_MspInit+0x80>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d129      	bne.n	8000552 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80004fe:	4b18      	ldr	r3, [pc, #96]	; (8000560 <HAL_ADC_MspInit+0x84>)
 8000500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <HAL_ADC_MspInit+0x84>)
 8000504:	2180      	movs	r1, #128	; 0x80
 8000506:	0349      	lsls	r1, r1, #13
 8000508:	430a      	orrs	r2, r1
 800050a:	641a      	str	r2, [r3, #64]	; 0x40
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <HAL_ADC_MspInit+0x84>)
 800050e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	035b      	lsls	r3, r3, #13
 8000514:	4013      	ands	r3, r2
 8000516:	613b      	str	r3, [r7, #16]
 8000518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <HAL_ADC_MspInit+0x84>)
 800051c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800051e:	4b10      	ldr	r3, [pc, #64]	; (8000560 <HAL_ADC_MspInit+0x84>)
 8000520:	2101      	movs	r1, #1
 8000522:	430a      	orrs	r2, r1
 8000524:	635a      	str	r2, [r3, #52]	; 0x34
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <HAL_ADC_MspInit+0x84>)
 8000528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800052a:	2201      	movs	r2, #1
 800052c:	4013      	ands	r3, r2
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_IN0_BAT_LVL_Pin;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2201      	movs	r2, #1
 8000536:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2203      	movs	r2, #3
 800053c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC1_IN0_BAT_LVL_GPIO_Port, &GPIO_InitStruct);
 8000544:	193a      	adds	r2, r7, r4
 8000546:	23a0      	movs	r3, #160	; 0xa0
 8000548:	05db      	lsls	r3, r3, #23
 800054a:	0011      	movs	r1, r2
 800054c:	0018      	movs	r0, r3
 800054e:	f001 ffb9 	bl	80024c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	b00b      	add	sp, #44	; 0x2c
 8000558:	bd90      	pop	{r4, r7, pc}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	40012400 	.word	0x40012400
 8000560:	40021000 	.word	0x40021000

08000564 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0

}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	af00      	add	r7, sp, #0
return 0;
 8000572:	2300      	movs	r3, #0
}
 8000574:	0018      	movs	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b087      	sub	sp, #28
 8000580:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	4a08      	ldr	r2, [pc, #32]	; (80005a8 <MX_FREERTOS_Init+0x2c>)
 8000586:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000588:	c313      	stmia	r3!, {r0, r1, r4}
 800058a:	ca03      	ldmia	r2!, {r0, r1}
 800058c:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2100      	movs	r1, #0
 8000592:	0018      	movs	r0, r3
 8000594:	f004 ff3f 	bl	8005416 <osThreadCreate>
 8000598:	0002      	movs	r2, r0
 800059a:	4b04      	ldr	r3, [pc, #16]	; (80005ac <MX_FREERTOS_Init+0x30>)
 800059c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b007      	add	sp, #28
 80005a4:	bd90      	pop	{r4, r7, pc}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	08008748 	.word	0x08008748
 80005ac:	200000ec 	.word	0x200000ec

080005b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005b8:	2001      	movs	r0, #1
 80005ba:	f004 ff54 	bl	8005466 <osDelay>
 80005be:	e7fb      	b.n	80005b8 <StartDefaultTask+0x8>

080005c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b08b      	sub	sp, #44	; 0x2c
 80005c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	2414      	movs	r4, #20
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	0018      	movs	r0, r3
 80005cc:	2314      	movs	r3, #20
 80005ce:	001a      	movs	r2, r3
 80005d0:	2100      	movs	r1, #0
 80005d2:	f007 fa55 	bl	8007a80 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005d6:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <MX_GPIO_Init+0x114>)
 80005d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005da:	4b3e      	ldr	r3, [pc, #248]	; (80006d4 <MX_GPIO_Init+0x114>)
 80005dc:	2120      	movs	r1, #32
 80005de:	430a      	orrs	r2, r1
 80005e0:	635a      	str	r2, [r3, #52]	; 0x34
 80005e2:	4b3c      	ldr	r3, [pc, #240]	; (80006d4 <MX_GPIO_Init+0x114>)
 80005e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005e6:	2220      	movs	r2, #32
 80005e8:	4013      	ands	r3, r2
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	4b39      	ldr	r3, [pc, #228]	; (80006d4 <MX_GPIO_Init+0x114>)
 80005f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005f2:	4b38      	ldr	r3, [pc, #224]	; (80006d4 <MX_GPIO_Init+0x114>)
 80005f4:	2104      	movs	r1, #4
 80005f6:	430a      	orrs	r2, r1
 80005f8:	635a      	str	r2, [r3, #52]	; 0x34
 80005fa:	4b36      	ldr	r3, [pc, #216]	; (80006d4 <MX_GPIO_Init+0x114>)
 80005fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005fe:	2204      	movs	r2, #4
 8000600:	4013      	ands	r3, r2
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b33      	ldr	r3, [pc, #204]	; (80006d4 <MX_GPIO_Init+0x114>)
 8000608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800060a:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <MX_GPIO_Init+0x114>)
 800060c:	2101      	movs	r1, #1
 800060e:	430a      	orrs	r2, r1
 8000610:	635a      	str	r2, [r3, #52]	; 0x34
 8000612:	4b30      	ldr	r3, [pc, #192]	; (80006d4 <MX_GPIO_Init+0x114>)
 8000614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000616:	2201      	movs	r2, #1
 8000618:	4013      	ands	r3, r2
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b2d      	ldr	r3, [pc, #180]	; (80006d4 <MX_GPIO_Init+0x114>)
 8000620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000622:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <MX_GPIO_Init+0x114>)
 8000624:	2102      	movs	r1, #2
 8000626:	430a      	orrs	r2, r1
 8000628:	635a      	str	r2, [r3, #52]	; 0x34
 800062a:	4b2a      	ldr	r3, [pc, #168]	; (80006d4 <MX_GPIO_Init+0x114>)
 800062c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800062e:	2202      	movs	r2, #2
 8000630:	4013      	ands	r3, r2
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000636:	4b27      	ldr	r3, [pc, #156]	; (80006d4 <MX_GPIO_Init+0x114>)
 8000638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <MX_GPIO_Init+0x114>)
 800063c:	2108      	movs	r1, #8
 800063e:	430a      	orrs	r2, r1
 8000640:	635a      	str	r2, [r3, #52]	; 0x34
 8000642:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <MX_GPIO_Init+0x114>)
 8000644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000646:	2208      	movs	r2, #8
 8000648:	4013      	ands	r3, r2
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEV_EN_Pin|M_EN_Pin, GPIO_PIN_RESET);
 800064e:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <MX_GPIO_Init+0x118>)
 8000650:	2200      	movs	r2, #0
 8000652:	2106      	movs	r1, #6
 8000654:	0018      	movs	r0, r3
 8000656:	f002 f899 	bl	800278c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_B_Pin, GPIO_PIN_SET);
 800065a:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_GPIO_Init+0x118>)
 800065c:	2201      	movs	r2, #1
 800065e:	2118      	movs	r1, #24
 8000660:	0018      	movs	r0, r3
 8000662:	f002 f893 	bl	800278c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = V_BORDURE_R_Pin|BUMPER_F_Pin|BUMPER_B_Pin|BUMPER_R_Pin
 8000666:	193b      	adds	r3, r7, r4
 8000668:	4a1c      	ldr	r2, [pc, #112]	; (80006dc <MX_GPIO_Init+0x11c>)
 800066a:	601a      	str	r2, [r3, #0]
                          |BUMPER_L_Pin|V_BORDURE_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066c:	193b      	adds	r3, r7, r4
 800066e:	2288      	movs	r2, #136	; 0x88
 8000670:	0352      	lsls	r2, r2, #13
 8000672:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	193b      	adds	r3, r7, r4
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067a:	193b      	adds	r3, r7, r4
 800067c:	4a16      	ldr	r2, [pc, #88]	; (80006d8 <MX_GPIO_Init+0x118>)
 800067e:	0019      	movs	r1, r3
 8000680:	0010      	movs	r0, r2
 8000682:	f001 ff1f 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DEV_EN_Pin|M_EN_Pin|LED_R_Pin|LED_B_Pin;
 8000686:	0021      	movs	r1, r4
 8000688:	187b      	adds	r3, r7, r1
 800068a:	221e      	movs	r2, #30
 800068c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2201      	movs	r2, #1
 8000692:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	4a0d      	ldr	r2, [pc, #52]	; (80006d8 <MX_GPIO_Init+0x118>)
 80006a4:	0019      	movs	r1, r3
 80006a6:	0010      	movs	r0, r2
 80006a8:	f001 ff0c 	bl	80024c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2103      	movs	r1, #3
 80006b0:	2005      	movs	r0, #5
 80006b2:	f001 fee1 	bl	8002478 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80006b6:	2005      	movs	r0, #5
 80006b8:	f001 fef3 	bl	80024a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 80006bc:	2200      	movs	r2, #0
 80006be:	2103      	movs	r1, #3
 80006c0:	2007      	movs	r0, #7
 80006c2:	f001 fed9 	bl	8002478 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80006c6:	2007      	movs	r0, #7
 80006c8:	f001 feeb 	bl	80024a2 <HAL_NVIC_EnableIRQ>

}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b00b      	add	sp, #44	; 0x2c
 80006d2:	bd90      	pop	{r4, r7, pc}
 80006d4:	40021000 	.word	0x40021000
 80006d8:	50000400 	.word	0x50000400
 80006dc:	000003e1 	.word	0x000003e1

080006e0 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,&ch,1,10);
 80006e8:	1d39      	adds	r1, r7, #4
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <__io_putchar+0x20>)
 80006ec:	230a      	movs	r3, #10
 80006ee:	2201      	movs	r2, #1
 80006f0:	f004 f94c 	bl	800498c <HAL_UART_Transmit>
}
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	0018      	movs	r0, r3
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b002      	add	sp, #8
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	20000314 	.word	0x20000314

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000708:	f001 f974 	bl	80019f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070c:	f000 f826 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000710:	f7ff ff56 	bl	80005c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000714:	f7ff fe78 	bl	8000408 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000718:	f000 fb42 	bl	8000da0 <MX_TIM1_Init>
  MX_TIM3_Init();
 800071c:	f000 fbaa 	bl	8000e74 <MX_TIM3_Init>
  MX_TIM14_Init();
 8000720:	f000 fc0c 	bl	8000f3c <MX_TIM14_Init>
  MX_TIM15_Init();
 8000724:	f000 fc5a 	bl	8000fdc <MX_TIM15_Init>
  MX_TIM16_Init();
 8000728:	f000 fd1c 	bl	8001164 <MX_TIM16_Init>
  MX_TIM17_Init();
 800072c:	f000 fda2 	bl	8001274 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8000730:	f000 fff0 	bl	8001714 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000734:	f001 f83c 	bl	80017b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	LOG_MAIN_INFO("================== boot ================");
 8000738:	4a06      	ldr	r2, [pc, #24]	; (8000754 <main+0x50>)
 800073a:	4b07      	ldr	r3, [pc, #28]	; (8000758 <main+0x54>)
 800073c:	0011      	movs	r1, r2
 800073e:	0018      	movs	r0, r3
 8000740:	f007 f942 	bl	80079c8 <iprintf>
	createMainTask();
 8000744:	f000 f97c 	bl	8000a40 <createMainTask>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000748:	f7ff ff18 	bl	800057c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800074c:	f004 fe5b 	bl	8005406 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  

  while (1)
 8000750:	e7fe      	b.n	8000750 <main+0x4c>
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	08008844 	.word	0x08008844
 8000758:	0800875c 	.word	0x0800875c

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b093      	sub	sp, #76	; 0x4c
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	2414      	movs	r4, #20
 8000764:	193b      	adds	r3, r7, r4
 8000766:	0018      	movs	r0, r3
 8000768:	2334      	movs	r3, #52	; 0x34
 800076a:	001a      	movs	r2, r3
 800076c:	2100      	movs	r1, #0
 800076e:	f007 f987 	bl	8007a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	0018      	movs	r0, r3
 8000776:	2310      	movs	r3, #16
 8000778:	001a      	movs	r2, r3
 800077a:	2100      	movs	r1, #0
 800077c:	f007 f980 	bl	8007a80 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	0018      	movs	r0, r3
 8000786:	f002 f86d 	bl	8002864 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078a:	193b      	adds	r3, r7, r4
 800078c:	2202      	movs	r2, #2
 800078e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000790:	193b      	adds	r3, r7, r4
 8000792:	2280      	movs	r2, #128	; 0x80
 8000794:	0052      	lsls	r2, r2, #1
 8000796:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	2240      	movs	r2, #64	; 0x40
 80007a2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	0018      	movs	r0, r3
 80007ae:	f002 f8a5 	bl	80028fc <HAL_RCC_OscConfig>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007b6:	f000 f82b 	bl	8000810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2207      	movs	r2, #7
 80007be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2100      	movs	r1, #0
 80007d6:	0018      	movs	r0, r3
 80007d8:	f002 fba0 	bl	8002f1c <HAL_RCC_ClockConfig>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007e0:	f000 f816 	bl	8000810 <Error_Handler>
  }
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b013      	add	sp, #76	; 0x4c
 80007ea:	bd90      	pop	{r4, r7, pc}

080007ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a04      	ldr	r2, [pc, #16]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d101      	bne.n	8000802 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007fe:	f001 f919 	bl	8001a34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b002      	add	sp, #8
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	40001000 	.word	0x40001000

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>
	...

0800081c <HAL_GPIO_EXTI_Rising_Callback>:
}mainHandle_t;

TaskHandle_t h_task_main;
mainHandle_t mainHandle;

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af02      	add	r7, sp, #8
 8000822:	0002      	movs	r2, r0
 8000824:	1dbb      	adds	r3, r7, #6
 8000826:	801a      	strh	r2, [r3, #0]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]

	if(GPIO_Pin == BUMPER_F_Pin) {
 800082c:	1dbb      	adds	r3, r7, #6
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	2b20      	cmp	r3, #32
 8000832:	d10a      	bne.n	800084a <HAL_GPIO_EXTI_Rising_Callback+0x2e>
		xTaskNotifyFromISR(h_task_main, BUMPER_F_NOTIFY, eSetBits, &xHigherPriorityTaskWoken);
 8000834:	4b21      	ldr	r3, [pc, #132]	; (80008bc <HAL_GPIO_EXTI_Rising_Callback+0xa0>)
 8000836:	6818      	ldr	r0, [r3, #0]
 8000838:	230c      	movs	r3, #12
 800083a:	18fb      	adds	r3, r7, r3
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	2300      	movs	r3, #0
 8000840:	2201      	movs	r2, #1
 8000842:	2100      	movs	r1, #0
 8000844:	f006 f8cc 	bl	80069e0 <xTaskGenericNotifyFromISR>
 8000848:	e02d      	b.n	80008a6 <HAL_GPIO_EXTI_Rising_Callback+0x8a>
	} else if(GPIO_Pin == BUMPER_B_Pin) {
 800084a:	1dbb      	adds	r3, r7, #6
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	2b40      	cmp	r3, #64	; 0x40
 8000850:	d10a      	bne.n	8000868 <HAL_GPIO_EXTI_Rising_Callback+0x4c>
		xTaskNotifyFromISR(h_task_main, BUMPER_B_NOTIFY, eSetBits, &xHigherPriorityTaskWoken );
 8000852:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <HAL_GPIO_EXTI_Rising_Callback+0xa0>)
 8000854:	6818      	ldr	r0, [r3, #0]
 8000856:	230c      	movs	r3, #12
 8000858:	18fb      	adds	r3, r7, r3
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	2300      	movs	r3, #0
 800085e:	2201      	movs	r2, #1
 8000860:	2101      	movs	r1, #1
 8000862:	f006 f8bd 	bl	80069e0 <xTaskGenericNotifyFromISR>
 8000866:	e01e      	b.n	80008a6 <HAL_GPIO_EXTI_Rising_Callback+0x8a>
	} else if(GPIO_Pin == BUMPER_R_Pin) {
 8000868:	1dbb      	adds	r3, r7, #6
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	2b80      	cmp	r3, #128	; 0x80
 800086e:	d10a      	bne.n	8000886 <HAL_GPIO_EXTI_Rising_Callback+0x6a>
		xTaskNotifyFromISR(h_task_main, BUMPER_R_NOTIFY, eSetBits, &xHigherPriorityTaskWoken );
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_GPIO_EXTI_Rising_Callback+0xa0>)
 8000872:	6818      	ldr	r0, [r3, #0]
 8000874:	230c      	movs	r3, #12
 8000876:	18fb      	adds	r3, r7, r3
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2300      	movs	r3, #0
 800087c:	2201      	movs	r2, #1
 800087e:	2102      	movs	r1, #2
 8000880:	f006 f8ae 	bl	80069e0 <xTaskGenericNotifyFromISR>
 8000884:	e00f      	b.n	80008a6 <HAL_GPIO_EXTI_Rising_Callback+0x8a>
	} else if(GPIO_Pin == BUMPER_L_Pin) {
 8000886:	1dbb      	adds	r3, r7, #6
 8000888:	881a      	ldrh	r2, [r3, #0]
 800088a:	2380      	movs	r3, #128	; 0x80
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	429a      	cmp	r2, r3
 8000890:	d109      	bne.n	80008a6 <HAL_GPIO_EXTI_Rising_Callback+0x8a>
		xTaskNotifyFromISR(h_task_main, BUMPER_L_NOTIFY, eSetBits, &xHigherPriorityTaskWoken );
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <HAL_GPIO_EXTI_Rising_Callback+0xa0>)
 8000894:	6818      	ldr	r0, [r3, #0]
 8000896:	230c      	movs	r3, #12
 8000898:	18fb      	adds	r3, r7, r3
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2300      	movs	r3, #0
 800089e:	2201      	movs	r2, #1
 80008a0:	2103      	movs	r1, #3
 80008a2:	f006 f89d 	bl	80069e0 <xTaskGenericNotifyFromISR>
	/*} else if(GPIO_Pin == V_BORDURE_F_Pin) {
		xTaskNotifyFromISR(motorTaskHandle, BORDER_F_NOTIFY, eSetBits, &xHigherPriorityTaskWoken );
	} else if(GPIO_Pin == V_BORDURE_B_Pin) {
		xTaskNotifyFromISR(motorTaskHandle, BORDER_B_NOTIFY, eSetBits, &xHigherPriorityTaskWoken );*/
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d003      	beq.n	80008b4 <HAL_GPIO_EXTI_Rising_Callback+0x98>
 80008ac:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 80008ae:	2280      	movs	r2, #128	; 0x80
 80008b0:	0552      	lsls	r2, r2, #21
 80008b2:	601a      	str	r2, [r3, #0]
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b004      	add	sp, #16
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200000f0 	.word	0x200000f0
 80008c0:	e000ed04 	.word	0xe000ed04

080008c4 <setMainState>:

mainState_t getMainState(void) {
	return mainHandle.state;
}

void setMainState(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	if(mainHandle.state == MAIN_CAT) {
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <setMainState+0x28>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d103      	bne.n	80008d8 <setMainState+0x14>
		mainHandle.state = MAIN_MOUSE;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <setMainState+0x28>)
 80008d2:	2202      	movs	r2, #2
 80008d4:	701a      	strb	r2, [r3, #0]
	} else if(mainHandle.state == MAIN_MOUSE) {
		mainHandle.state = MAIN_CAT;
	}
}
 80008d6:	e006      	b.n	80008e6 <setMainState+0x22>
	} else if(mainHandle.state == MAIN_MOUSE) {
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <setMainState+0x28>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d102      	bne.n	80008e6 <setMainState+0x22>
		mainHandle.state = MAIN_CAT;
 80008e0:	4b02      	ldr	r3, [pc, #8]	; (80008ec <setMainState+0x28>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	701a      	strb	r2, [r3, #0]
}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200000f4 	.word	0x200000f4

080008f0 <mainTask>:

void mainTask(void) {
 80008f0:	b590      	push	{r4, r7, lr}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af02      	add	r7, sp, #8
	returncode_t status;
	uint32_t ulNotifiedValue;

	mainHandle.state = MAIN_INIT;
 80008f6:	4b4f      	ldr	r3, [pc, #316]	; (8000a34 <mainTask+0x144>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
	mainHandle.lastState = mainHandle.state;
 80008fc:	4b4d      	ldr	r3, [pc, #308]	; (8000a34 <mainTask+0x144>)
 80008fe:	781a      	ldrb	r2, [r3, #0]
 8000900:	4b4c      	ldr	r3, [pc, #304]	; (8000a34 <mainTask+0x144>)
 8000902:	705a      	strb	r2, [r3, #1]
	mainHandle.timer = xTimerCreate("Main Timer", 100, pdTRUE, NULL, NULL);
 8000904:	484c      	ldr	r0, [pc, #304]	; (8000a38 <mainTask+0x148>)
 8000906:	2300      	movs	r3, #0
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	2300      	movs	r3, #0
 800090c:	2201      	movs	r2, #1
 800090e:	2164      	movs	r1, #100	; 0x64
 8000910:	f006 f996 	bl	8006c40 <xTimerCreate>
 8000914:	0002      	movs	r2, r0
 8000916:	4b47      	ldr	r3, [pc, #284]	; (8000a34 <mainTask+0x144>)
 8000918:	605a      	str	r2, [r3, #4]

	while(1) {
		switch (mainHandle.state) {
 800091a:	4b46      	ldr	r3, [pc, #280]	; (8000a34 <mainTask+0x144>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b03      	cmp	r3, #3
 8000920:	d046      	beq.n	80009b0 <mainTask+0xc0>
 8000922:	dc59      	bgt.n	80009d8 <mainTask+0xe8>
 8000924:	2b02      	cmp	r3, #2
 8000926:	d02f      	beq.n	8000988 <mainTask+0x98>
 8000928:	dc56      	bgt.n	80009d8 <mainTask+0xe8>
 800092a:	2b00      	cmp	r3, #0
 800092c:	d002      	beq.n	8000934 <mainTask+0x44>
 800092e:	2b01      	cmp	r3, #1
 8000930:	d017      	beq.n	8000962 <mainTask+0x72>
 8000932:	e051      	b.n	80009d8 <mainTask+0xe8>
			case MAIN_INIT: {
				if(xTimerIsTimerActive(mainHandle.timer) == pdFALSE) {
 8000934:	4b3f      	ldr	r3, [pc, #252]	; (8000a34 <mainTask+0x144>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	0018      	movs	r0, r3
 800093a:	f006 fc8d 	bl	8007258 <xTimerIsTimerActive>
 800093e:	1e03      	subs	r3, r0, #0
 8000940:	d10b      	bne.n	800095a <mainTask+0x6a>
					xTimerStart(mainHandle.timer, 0);
 8000942:	4b3c      	ldr	r3, [pc, #240]	; (8000a34 <mainTask+0x144>)
 8000944:	685c      	ldr	r4, [r3, #4]
 8000946:	f005 fc93 	bl	8006270 <xTaskGetTickCount>
 800094a:	0002      	movs	r2, r0
 800094c:	2300      	movs	r3, #0
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	2300      	movs	r3, #0
 8000952:	2101      	movs	r1, #1
 8000954:	0020      	movs	r0, r4
 8000956:	f006 f9c9 	bl	8006cec <xTimerGenericCommand>
					//TODO create task
				}
				mainHandle.state = MAIN_MOUSE;
 800095a:	4b36      	ldr	r3, [pc, #216]	; (8000a34 <mainTask+0x144>)
 800095c:	2202      	movs	r2, #2
 800095e:	701a      	strb	r2, [r3, #0]
				break;
 8000960:	e041      	b.n	80009e6 <mainTask+0xf6>
			}
			case MAIN_CAT: {
				if(xTimerIsTimerActive(mainHandle.timer) == pdFALSE) {
 8000962:	4b34      	ldr	r3, [pc, #208]	; (8000a34 <mainTask+0x144>)
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	0018      	movs	r0, r3
 8000968:	f006 fc76 	bl	8007258 <xTimerIsTimerActive>
 800096c:	1e03      	subs	r3, r0, #0
 800096e:	d10b      	bne.n	8000988 <mainTask+0x98>
					xTimerStart(mainHandle.timer, 0);
 8000970:	4b30      	ldr	r3, [pc, #192]	; (8000a34 <mainTask+0x144>)
 8000972:	685c      	ldr	r4, [r3, #4]
 8000974:	f005 fc7c 	bl	8006270 <xTaskGetTickCount>
 8000978:	0002      	movs	r2, r0
 800097a:	2300      	movs	r3, #0
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2300      	movs	r3, #0
 8000980:	2101      	movs	r1, #1
 8000982:	0020      	movs	r0, r4
 8000984:	f006 f9b2 	bl	8006cec <xTimerGenericCommand>
					
				}
				
			}
			case MAIN_MOUSE: {
				if(xTimerIsTimerActive(mainHandle.timer) == pdFALSE) {
 8000988:	4b2a      	ldr	r3, [pc, #168]	; (8000a34 <mainTask+0x144>)
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	0018      	movs	r0, r3
 800098e:	f006 fc63 	bl	8007258 <xTimerIsTimerActive>
 8000992:	1e03      	subs	r3, r0, #0
 8000994:	d124      	bne.n	80009e0 <mainTask+0xf0>
					xTimerStart(mainHandle.timer, 0);
 8000996:	4b27      	ldr	r3, [pc, #156]	; (8000a34 <mainTask+0x144>)
 8000998:	685c      	ldr	r4, [r3, #4]
 800099a:	f005 fc69 	bl	8006270 <xTaskGetTickCount>
 800099e:	0002      	movs	r2, r0
 80009a0:	2300      	movs	r3, #0
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	2300      	movs	r3, #0
 80009a6:	2101      	movs	r1, #1
 80009a8:	0020      	movs	r0, r4
 80009aa:	f006 f99f 	bl	8006cec <xTimerGenericCommand>
					
				}
				break;
 80009ae:	e017      	b.n	80009e0 <mainTask+0xf0>
			}
			case MAIN_ERROR : {
				if(xTimerIsTimerActive(mainHandle.timer) == pdFALSE) {
 80009b0:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <mainTask+0x144>)
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	0018      	movs	r0, r3
 80009b6:	f006 fc4f 	bl	8007258 <xTimerIsTimerActive>
 80009ba:	1e03      	subs	r3, r0, #0
 80009bc:	d112      	bne.n	80009e4 <mainTask+0xf4>
					xTimerStart(mainHandle.timer, 0);
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <mainTask+0x144>)
 80009c0:	685c      	ldr	r4, [r3, #4]
 80009c2:	f005 fc55 	bl	8006270 <xTaskGetTickCount>
 80009c6:	0002      	movs	r2, r0
 80009c8:	2300      	movs	r3, #0
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	2300      	movs	r3, #0
 80009ce:	2101      	movs	r1, #1
 80009d0:	0020      	movs	r0, r4
 80009d2:	f006 f98b 	bl	8006cec <xTimerGenericCommand>
					
				}
				break;
 80009d6:	e005      	b.n	80009e4 <mainTask+0xf4>
			}
			default:
				mainHandle.state = MAIN_INIT;
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <mainTask+0x144>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
				break;
 80009de:	e002      	b.n	80009e6 <mainTask+0xf6>
				break;
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	e000      	b.n	80009e6 <mainTask+0xf6>
				break;
 80009e4:	46c0      	nop			; (mov r8, r8)
		}
		if(mainHandle.lastState != mainHandle.state) {
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <mainTask+0x144>)
 80009e8:	785a      	ldrb	r2, [r3, #1]
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <mainTask+0x144>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d00c      	beq.n	8000a0c <mainTask+0x11c>
			xTimerStop(mainHandle.timer, 0);
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <mainTask+0x144>)
 80009f4:	6858      	ldr	r0, [r3, #4]
 80009f6:	2300      	movs	r3, #0
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	2300      	movs	r3, #0
 80009fc:	2200      	movs	r2, #0
 80009fe:	2103      	movs	r1, #3
 8000a00:	f006 f974 	bl	8006cec <xTimerGenericCommand>
			mainHandle.lastState = mainHandle.state;
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <mainTask+0x144>)
 8000a06:	781a      	ldrb	r2, [r3, #0]
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <mainTask+0x144>)
 8000a0a:	705a      	strb	r2, [r3, #1]
		}
		if(xTaskNotifyWait(0, ULONG_MAX, &ulNotifiedValue, 100) == pdTRUE) {
 8000a0c:	1d3a      	adds	r2, r7, #4
 8000a0e:	2301      	movs	r3, #1
 8000a10:	4259      	negs	r1, r3
 8000a12:	2364      	movs	r3, #100	; 0x64
 8000a14:	2000      	movs	r0, #0
 8000a16:	f005 ff8f 	bl	8006938 <xTaskNotifyWait>
 8000a1a:	0003      	movs	r3, r0
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d000      	beq.n	8000a22 <mainTask+0x132>
 8000a20:	e77b      	b.n	800091a <mainTask+0x2a>
			setMainState();
 8000a22:	f7ff ff4f 	bl	80008c4 <setMainState>
			HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <mainTask+0x14c>)
 8000a28:	2110      	movs	r1, #16
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f001 fecb 	bl	80027c6 <HAL_GPIO_TogglePin>
		switch (mainHandle.state) {
 8000a30:	e773      	b.n	800091a <mainTask+0x2a>
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	200000f4 	.word	0x200000f4
 8000a38:	080087a4 	.word	0x080087a4
 8000a3c:	50000400 	.word	0x50000400

08000a40 <createMainTask>:
		}
		//vTaskDelay(1);
	}
}

void createMainTask(void) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af02      	add	r7, sp, #8
	if (xTaskCreate(mainTask, "Main", TASK_MAIN_STACK_DEPTH, NULL, TASK_MAIN_PRIORITY, &h_task_main) != pdPASS) {
 8000a46:	2380      	movs	r3, #128	; 0x80
 8000a48:	009a      	lsls	r2, r3, #2
 8000a4a:	490e      	ldr	r1, [pc, #56]	; (8000a84 <createMainTask+0x44>)
 8000a4c:	480e      	ldr	r0, [pc, #56]	; (8000a88 <createMainTask+0x48>)
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <createMainTask+0x4c>)
 8000a50:	9301      	str	r3, [sp, #4]
 8000a52:	2363      	movs	r3, #99	; 0x63
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	2300      	movs	r3, #0
 8000a58:	f005 f9d1 	bl	8005dfe <xTaskCreate>
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d006      	beq.n	8000a70 <createMainTask+0x30>
		LOG_RTOS_ERROR("Error creating task Main");
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <createMainTask+0x50>)
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <createMainTask+0x54>)
 8000a66:	0011      	movs	r1, r2
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f006 ffad 	bl	80079c8 <iprintf>
	}
	else {
		LOG_RTOS_INFO(COLOR_GREEN"Main task create");
	}
}
 8000a6e:	e005      	b.n	8000a7c <createMainTask+0x3c>
		LOG_RTOS_INFO(COLOR_GREEN"Main task create");
 8000a70:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <createMainTask+0x50>)
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <createMainTask+0x58>)
 8000a74:	0011      	movs	r1, r2
 8000a76:	0018      	movs	r0, r3
 8000a78:	f006 ffa6 	bl	80079c8 <iprintf>
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	080087b0 	.word	0x080087b0
 8000a88:	080008f1 	.word	0x080008f1
 8000a8c:	200000f0 	.word	0x200000f0
 8000a90:	0800884c 	.word	0x0800884c
 8000a94:	080087b8 	.word	0x080087b8
 8000a98:	080087f4 	.word	0x080087f4

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_MspInit+0x50>)
 8000aa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <HAL_MspInit+0x50>)
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	641a      	str	r2, [r3, #64]	; 0x40
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <HAL_MspInit+0x50>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <HAL_MspInit+0x50>)
 8000abc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_MspInit+0x50>)
 8000ac0:	2180      	movs	r1, #128	; 0x80
 8000ac2:	0549      	lsls	r1, r1, #21
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_MspInit+0x50>)
 8000aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	055b      	lsls	r3, r3, #21
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	425b      	negs	r3, r3
 8000ada:	2200      	movs	r2, #0
 8000adc:	2103      	movs	r1, #3
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f001 fcca 	bl	8002478 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b002      	add	sp, #8
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b5b0      	push	{r4, r5, r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000af8:	232b      	movs	r3, #43	; 0x2b
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b00:	4b37      	ldr	r3, [pc, #220]	; (8000be0 <HAL_InitTick+0xf0>)
 8000b02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b04:	4b36      	ldr	r3, [pc, #216]	; (8000be0 <HAL_InitTick+0xf0>)
 8000b06:	2110      	movs	r1, #16
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b0c:	4b34      	ldr	r3, [pc, #208]	; (8000be0 <HAL_InitTick+0xf0>)
 8000b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b10:	2210      	movs	r2, #16
 8000b12:	4013      	ands	r3, r2
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b18:	230c      	movs	r3, #12
 8000b1a:	18fa      	adds	r2, r7, r3
 8000b1c:	2410      	movs	r4, #16
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	0011      	movs	r1, r2
 8000b22:	0018      	movs	r0, r3
 8000b24:	f002 fba4 	bl	8003270 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b28:	193b      	adds	r3, r7, r4
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d104      	bne.n	8000b3e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b34:	f002 fb86 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b3c:	e004      	b.n	8000b48 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b3e:	f002 fb81 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8000b42:	0003      	movs	r3, r0
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4a:	4926      	ldr	r1, [pc, #152]	; (8000be4 <HAL_InitTick+0xf4>)
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f7ff fae5 	bl	800011c <__udivsi3>
 8000b52:	0003      	movs	r3, r0
 8000b54:	3b01      	subs	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b58:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <HAL_InitTick+0xf8>)
 8000b5a:	4a24      	ldr	r2, [pc, #144]	; (8000bec <HAL_InitTick+0xfc>)
 8000b5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b5e:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <HAL_InitTick+0xf8>)
 8000b60:	4a23      	ldr	r2, [pc, #140]	; (8000bf0 <HAL_InitTick+0x100>)
 8000b62:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b64:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <HAL_InitTick+0xf8>)
 8000b66:	6a3a      	ldr	r2, [r7, #32]
 8000b68:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <HAL_InitTick+0xf8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <HAL_InitTick+0xf8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <HAL_InitTick+0xf8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b7c:	252b      	movs	r5, #43	; 0x2b
 8000b7e:	197c      	adds	r4, r7, r5
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <HAL_InitTick+0xf8>)
 8000b82:	0018      	movs	r0, r3
 8000b84:	f002 fcd2 	bl	800352c <HAL_TIM_Base_Init>
 8000b88:	0003      	movs	r3, r0
 8000b8a:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000b8c:	197b      	adds	r3, r7, r5
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d11e      	bne.n	8000bd2 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b94:	197c      	adds	r4, r7, r5
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <HAL_InitTick+0xf8>)
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f002 fd1f 	bl	80035dc <HAL_TIM_Base_Start_IT>
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000ba2:	197b      	adds	r3, r7, r5
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d113      	bne.n	8000bd2 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000baa:	2011      	movs	r0, #17
 8000bac:	f001 fc79 	bl	80024a2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d809      	bhi.n	8000bca <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	0019      	movs	r1, r3
 8000bbc:	2011      	movs	r0, #17
 8000bbe:	f001 fc5b 	bl	8002478 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_InitTick+0x104>)
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	e003      	b.n	8000bd2 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8000bca:	232b      	movs	r3, #43	; 0x2b
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	2201      	movs	r2, #1
 8000bd0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000bd2:	232b      	movs	r3, #43	; 0x2b
 8000bd4:	18fb      	adds	r3, r7, r3
 8000bd6:	781b      	ldrb	r3, [r3, #0]
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b00c      	add	sp, #48	; 0x30
 8000bde:	bdb0      	pop	{r4, r5, r7, pc}
 8000be0:	40021000 	.word	0x40021000
 8000be4:	000f4240 	.word	0x000f4240
 8000be8:	200000fc 	.word	0x200000fc
 8000bec:	40001000 	.word	0x40001000
 8000bf0:	000003e7 	.word	0x000003e7
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler+0x4>

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(V_BORDURE_R_Pin);
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f001 fdf7 	bl	80027fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUMPER_F_Pin);
 8000c18:	2020      	movs	r0, #32
 8000c1a:	f001 fdef 	bl	80027fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUMPER_B_Pin);
 8000c1e:	2040      	movs	r0, #64	; 0x40
 8000c20:	f001 fdec 	bl	80027fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUMPER_R_Pin);
 8000c24:	2080      	movs	r0, #128	; 0x80
 8000c26:	f001 fde9 	bl	80027fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUMPER_L_Pin);
 8000c2a:	2380      	movs	r3, #128	; 0x80
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f001 fde4 	bl	80027fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(V_BORDURE_F_Pin);
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f001 fddf 	bl	80027fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <TIM6_IRQHandler+0x14>)
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f002 fe24 	bl	8003898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	200000fc 	.word	0x200000fc

08000c5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	e00a      	b.n	8000c84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c6e:	e000      	b.n	8000c72 <_read+0x16>
 8000c70:	bf00      	nop
 8000c72:	0001      	movs	r1, r0
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	60ba      	str	r2, [r7, #8]
 8000c7a:	b2ca      	uxtb	r2, r1
 8000c7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	3301      	adds	r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	dbf0      	blt.n	8000c6e <_read+0x12>
  }

  return len;
 8000c8c:	687b      	ldr	r3, [r7, #4]
}
 8000c8e:	0018      	movs	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b006      	add	sp, #24
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	60f8      	str	r0, [r7, #12]
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	e009      	b.n	8000cbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	60ba      	str	r2, [r7, #8]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f7ff fd15 	bl	80006e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	dbf1      	blt.n	8000ca8 <_write+0x12>
  }
  return len;
 8000cc4:	687b      	ldr	r3, [r7, #4]
}
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b006      	add	sp, #24
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_close>:

int _close(int file)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	425b      	negs	r3, r3
}
 8000cda:	0018      	movs	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b002      	add	sp, #8
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	2280      	movs	r2, #128	; 0x80
 8000cf0:	0192      	lsls	r2, r2, #6
 8000cf2:	605a      	str	r2, [r3, #4]
  return 0;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b002      	add	sp, #8
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_isatty>:

int _isatty(int file)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b002      	add	sp, #8
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	0018      	movs	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b004      	add	sp, #16
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	18d3      	adds	r3, r2, r3
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f006 fee8 	bl	8007b2c <__errno>
 8000d5c:	0003      	movs	r3, r0
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	2301      	movs	r3, #1
 8000d64:	425b      	negs	r3, r3
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	18d2      	adds	r2, r2, r3
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <_sbrk+0x64>)
 8000d78:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b006      	add	sp, #24
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20009000 	.word	0x20009000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	20000148 	.word	0x20000148
 8000d90:	20004230 	.word	0x20004230

08000d94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b08d      	sub	sp, #52	; 0x34
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000da6:	240c      	movs	r4, #12
 8000da8:	193b      	adds	r3, r7, r4
 8000daa:	0018      	movs	r0, r3
 8000dac:	2324      	movs	r3, #36	; 0x24
 8000dae:	001a      	movs	r2, r3
 8000db0:	2100      	movs	r1, #0
 8000db2:	f006 fe65 	bl	8007a80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db6:	003b      	movs	r3, r7
 8000db8:	0018      	movs	r0, r3
 8000dba:	230c      	movs	r3, #12
 8000dbc:	001a      	movs	r2, r3
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	f006 fe5e 	bl	8007a80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dc4:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <MX_TIM1_Init+0xc8>)
 8000dc6:	4a29      	ldr	r2, [pc, #164]	; (8000e6c <MX_TIM1_Init+0xcc>)
 8000dc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dca:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <MX_TIM1_Init+0xc8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd0:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <MX_TIM1_Init+0xc8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000dd6:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <MX_TIM1_Init+0xc8>)
 8000dd8:	4a25      	ldr	r2, [pc, #148]	; (8000e70 <MX_TIM1_Init+0xd0>)
 8000dda:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <MX_TIM1_Init+0xc8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000de2:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <MX_TIM1_Init+0xc8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de8:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <MX_TIM1_Init+0xc8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000dee:	0021      	movs	r1, r4
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	2201      	movs	r2, #1
 8000df4:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	2201      	movs	r2, #1
 8000e00:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2200      	movs	r2, #0
 8000e12:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2201      	movs	r2, #1
 8000e18:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2200      	movs	r2, #0
 8000e24:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000e26:	187a      	adds	r2, r7, r1
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <MX_TIM1_Init+0xc8>)
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f002 fc8b 	bl	8003748 <HAL_TIM_Encoder_Init>
 8000e32:	1e03      	subs	r3, r0, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000e36:	f7ff fceb 	bl	8000810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3a:	003b      	movs	r3, r7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e40:	003b      	movs	r3, r7
 8000e42:	2200      	movs	r2, #0
 8000e44:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e46:	003b      	movs	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e4c:	003a      	movs	r2, r7
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <MX_TIM1_Init+0xc8>)
 8000e50:	0011      	movs	r1, r2
 8000e52:	0018      	movs	r0, r3
 8000e54:	f003 fc1e 	bl	8004694 <HAL_TIMEx_MasterConfigSynchronization>
 8000e58:	1e03      	subs	r3, r0, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000e5c:	f7ff fcd8 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e60:	46c0      	nop			; (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b00d      	add	sp, #52	; 0x34
 8000e66:	bd90      	pop	{r4, r7, pc}
 8000e68:	2000014c 	.word	0x2000014c
 8000e6c:	40012c00 	.word	0x40012c00
 8000e70:	0000ffff 	.word	0x0000ffff

08000e74 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b08d      	sub	sp, #52	; 0x34
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e7a:	240c      	movs	r4, #12
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	0018      	movs	r0, r3
 8000e80:	2324      	movs	r3, #36	; 0x24
 8000e82:	001a      	movs	r2, r3
 8000e84:	2100      	movs	r1, #0
 8000e86:	f006 fdfb 	bl	8007a80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8a:	003b      	movs	r3, r7
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	230c      	movs	r3, #12
 8000e90:	001a      	movs	r2, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	f006 fdf4 	bl	8007a80 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e98:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <MX_TIM3_Init+0xbc>)
 8000e9a:	4a26      	ldr	r2, [pc, #152]	; (8000f34 <MX_TIM3_Init+0xc0>)
 8000e9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e9e:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <MX_TIM3_Init+0xbc>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea4:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <MX_TIM3_Init+0xbc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000eaa:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <MX_TIM3_Init+0xbc>)
 8000eac:	4a22      	ldr	r2, [pc, #136]	; (8000f38 <MX_TIM3_Init+0xc4>)
 8000eae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <MX_TIM3_Init+0xbc>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <MX_TIM3_Init+0xbc>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ebc:	0021      	movs	r1, r4
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	2201      	movs	r2, #1
 8000ece:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	2200      	movs	r2, #0
 8000ee0:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ee2:	187b      	adds	r3, r7, r1
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000eee:	187b      	adds	r3, r7, r1
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000ef4:	187a      	adds	r2, r7, r1
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_TIM3_Init+0xbc>)
 8000ef8:	0011      	movs	r1, r2
 8000efa:	0018      	movs	r0, r3
 8000efc:	f002 fc24 	bl	8003748 <HAL_TIM_Encoder_Init>
 8000f00:	1e03      	subs	r3, r0, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000f04:	f7ff fc84 	bl	8000810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f08:	003b      	movs	r3, r7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0e:	003b      	movs	r3, r7
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f14:	003a      	movs	r2, r7
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_TIM3_Init+0xbc>)
 8000f18:	0011      	movs	r1, r2
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f003 fbba 	bl	8004694 <HAL_TIMEx_MasterConfigSynchronization>
 8000f20:	1e03      	subs	r3, r0, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000f24:	f7ff fc74 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b00d      	add	sp, #52	; 0x34
 8000f2e:	bd90      	pop	{r4, r7, pc}
 8000f30:	20000198 	.word	0x20000198
 8000f34:	40000400 	.word	0x40000400
 8000f38:	0000ffff 	.word	0x0000ffff

08000f3c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	0018      	movs	r0, r3
 8000f46:	231c      	movs	r3, #28
 8000f48:	001a      	movs	r2, r3
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	f006 fd98 	bl	8007a80 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f50:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <MX_TIM14_Init+0x94>)
 8000f52:	4a20      	ldr	r2, [pc, #128]	; (8000fd4 <MX_TIM14_Init+0x98>)
 8000f54:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000f56:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <MX_TIM14_Init+0x94>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <MX_TIM14_Init+0x94>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000f62:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <MX_TIM14_Init+0x94>)
 8000f64:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <MX_TIM14_Init+0x9c>)
 8000f66:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f68:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <MX_TIM14_Init+0x94>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <MX_TIM14_Init+0x94>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <MX_TIM14_Init+0x94>)
 8000f76:	0018      	movs	r0, r3
 8000f78:	f002 fad8 	bl	800352c <HAL_TIM_Base_Init>
 8000f7c:	1e03      	subs	r3, r0, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000f80:	f7ff fc46 	bl	8000810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <MX_TIM14_Init+0x94>)
 8000f86:	0018      	movs	r0, r3
 8000f88:	f002 fb7e 	bl	8003688 <HAL_TIM_PWM_Init>
 8000f8c:	1e03      	subs	r3, r0, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000f90:	f7ff fc3e 	bl	8000810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2260      	movs	r2, #96	; 0x60
 8000f98:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fac:	1d39      	adds	r1, r7, #4
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <MX_TIM14_Init+0x94>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f002 fda2 	bl	8003afc <HAL_TIM_PWM_ConfigChannel>
 8000fb8:	1e03      	subs	r3, r0, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000fbc:	f7ff fc28 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <MX_TIM14_Init+0x94>)
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f000 fac4 	bl	8001550 <HAL_TIM_MspPostInit>

}
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b008      	add	sp, #32
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200001e4 	.word	0x200001e4
 8000fd4:	40002000 	.word	0x40002000
 8000fd8:	0000ffff 	.word	0x0000ffff

08000fdc <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b09c      	sub	sp, #112	; 0x70
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe2:	2360      	movs	r3, #96	; 0x60
 8000fe4:	18fb      	adds	r3, r7, r3
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	2310      	movs	r3, #16
 8000fea:	001a      	movs	r2, r3
 8000fec:	2100      	movs	r1, #0
 8000fee:	f006 fd47 	bl	8007a80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff2:	2354      	movs	r3, #84	; 0x54
 8000ff4:	18fb      	adds	r3, r7, r3
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	230c      	movs	r3, #12
 8000ffa:	001a      	movs	r2, r3
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	f006 fd3f 	bl	8007a80 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001002:	2338      	movs	r3, #56	; 0x38
 8001004:	18fb      	adds	r3, r7, r3
 8001006:	0018      	movs	r0, r3
 8001008:	231c      	movs	r3, #28
 800100a:	001a      	movs	r2, r3
 800100c:	2100      	movs	r1, #0
 800100e:	f006 fd37 	bl	8007a80 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	0018      	movs	r0, r3
 8001016:	2334      	movs	r3, #52	; 0x34
 8001018:	001a      	movs	r2, r3
 800101a:	2100      	movs	r1, #0
 800101c:	f006 fd30 	bl	8007a80 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001020:	4b4d      	ldr	r3, [pc, #308]	; (8001158 <MX_TIM15_Init+0x17c>)
 8001022:	4a4e      	ldr	r2, [pc, #312]	; (800115c <MX_TIM15_Init+0x180>)
 8001024:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001026:	4b4c      	ldr	r3, [pc, #304]	; (8001158 <MX_TIM15_Init+0x17c>)
 8001028:	2200      	movs	r2, #0
 800102a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102c:	4b4a      	ldr	r3, [pc, #296]	; (8001158 <MX_TIM15_Init+0x17c>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001032:	4b49      	ldr	r3, [pc, #292]	; (8001158 <MX_TIM15_Init+0x17c>)
 8001034:	4a4a      	ldr	r2, [pc, #296]	; (8001160 <MX_TIM15_Init+0x184>)
 8001036:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001038:	4b47      	ldr	r3, [pc, #284]	; (8001158 <MX_TIM15_Init+0x17c>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800103e:	4b46      	ldr	r3, [pc, #280]	; (8001158 <MX_TIM15_Init+0x17c>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001044:	4b44      	ldr	r3, [pc, #272]	; (8001158 <MX_TIM15_Init+0x17c>)
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800104a:	4b43      	ldr	r3, [pc, #268]	; (8001158 <MX_TIM15_Init+0x17c>)
 800104c:	0018      	movs	r0, r3
 800104e:	f002 fa6d 	bl	800352c <HAL_TIM_Base_Init>
 8001052:	1e03      	subs	r3, r0, #0
 8001054:	d001      	beq.n	800105a <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8001056:	f7ff fbdb 	bl	8000810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800105a:	2160      	movs	r1, #96	; 0x60
 800105c:	187b      	adds	r3, r7, r1
 800105e:	2280      	movs	r2, #128	; 0x80
 8001060:	0152      	lsls	r2, r2, #5
 8001062:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001064:	187a      	adds	r2, r7, r1
 8001066:	4b3c      	ldr	r3, [pc, #240]	; (8001158 <MX_TIM15_Init+0x17c>)
 8001068:	0011      	movs	r1, r2
 800106a:	0018      	movs	r0, r3
 800106c:	f002 fe46 	bl	8003cfc <HAL_TIM_ConfigClockSource>
 8001070:	1e03      	subs	r3, r0, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8001074:	f7ff fbcc 	bl	8000810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001078:	4b37      	ldr	r3, [pc, #220]	; (8001158 <MX_TIM15_Init+0x17c>)
 800107a:	0018      	movs	r0, r3
 800107c:	f002 fb04 	bl	8003688 <HAL_TIM_PWM_Init>
 8001080:	1e03      	subs	r3, r0, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8001084:	f7ff fbc4 	bl	8000810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001088:	2154      	movs	r1, #84	; 0x54
 800108a:	187b      	adds	r3, r7, r1
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001090:	187b      	adds	r3, r7, r1
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001096:	187a      	adds	r2, r7, r1
 8001098:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <MX_TIM15_Init+0x17c>)
 800109a:	0011      	movs	r1, r2
 800109c:	0018      	movs	r0, r3
 800109e:	f003 faf9 	bl	8004694 <HAL_TIMEx_MasterConfigSynchronization>
 80010a2:	1e03      	subs	r3, r0, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 80010a6:	f7ff fbb3 	bl	8000810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010aa:	2138      	movs	r1, #56	; 0x38
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	2260      	movs	r2, #96	; 0x60
 80010b0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80010b2:	187b      	adds	r3, r7, r1
 80010b4:	2200      	movs	r2, #0
 80010b6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010be:	187b      	adds	r3, r7, r1
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010ca:	187b      	adds	r3, r7, r1
 80010cc:	2200      	movs	r2, #0
 80010ce:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d6:	1879      	adds	r1, r7, r1
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <MX_TIM15_Init+0x17c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	0018      	movs	r0, r3
 80010de:	f002 fd0d 	bl	8003afc <HAL_TIM_PWM_ConfigChannel>
 80010e2:	1e03      	subs	r3, r0, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80010e6:	f7ff fb93 	bl	8000810 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010ea:	2338      	movs	r3, #56	; 0x38
 80010ec:	18f9      	adds	r1, r7, r3
 80010ee:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <MX_TIM15_Init+0x17c>)
 80010f0:	2204      	movs	r2, #4
 80010f2:	0018      	movs	r0, r3
 80010f4:	f002 fd02 	bl	8003afc <HAL_TIM_PWM_ConfigChannel>
 80010f8:	1e03      	subs	r3, r0, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 80010fc:	f7ff fb88 	bl	8000810 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2200      	movs	r2, #0
 800110a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2280      	movs	r2, #128	; 0x80
 8001122:	0192      	lsls	r2, r2, #6
 8001124:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001132:	1d3a      	adds	r2, r7, #4
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <MX_TIM15_Init+0x17c>)
 8001136:	0011      	movs	r1, r2
 8001138:	0018      	movs	r0, r3
 800113a:	f003 fb13 	bl	8004764 <HAL_TIMEx_ConfigBreakDeadTime>
 800113e:	1e03      	subs	r3, r0, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM15_Init+0x16a>
  {
    Error_Handler();
 8001142:	f7ff fb65 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <MX_TIM15_Init+0x17c>)
 8001148:	0018      	movs	r0, r3
 800114a:	f000 fa01 	bl	8001550 <HAL_TIM_MspPostInit>

}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	b01c      	add	sp, #112	; 0x70
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	20000230 	.word	0x20000230
 800115c:	40014000 	.word	0x40014000
 8001160:	0000ffff 	.word	0x0000ffff

08001164 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b094      	sub	sp, #80	; 0x50
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800116a:	2334      	movs	r3, #52	; 0x34
 800116c:	18fb      	adds	r3, r7, r3
 800116e:	0018      	movs	r0, r3
 8001170:	231c      	movs	r3, #28
 8001172:	001a      	movs	r2, r3
 8001174:	2100      	movs	r1, #0
 8001176:	f006 fc83 	bl	8007a80 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800117a:	003b      	movs	r3, r7
 800117c:	0018      	movs	r0, r3
 800117e:	2334      	movs	r3, #52	; 0x34
 8001180:	001a      	movs	r2, r3
 8001182:	2100      	movs	r1, #0
 8001184:	f006 fc7c 	bl	8007a80 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001188:	4b37      	ldr	r3, [pc, #220]	; (8001268 <MX_TIM16_Init+0x104>)
 800118a:	4a38      	ldr	r2, [pc, #224]	; (800126c <MX_TIM16_Init+0x108>)
 800118c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800118e:	4b36      	ldr	r3, [pc, #216]	; (8001268 <MX_TIM16_Init+0x104>)
 8001190:	2200      	movs	r2, #0
 8001192:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001194:	4b34      	ldr	r3, [pc, #208]	; (8001268 <MX_TIM16_Init+0x104>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800119a:	4b33      	ldr	r3, [pc, #204]	; (8001268 <MX_TIM16_Init+0x104>)
 800119c:	4a34      	ldr	r2, [pc, #208]	; (8001270 <MX_TIM16_Init+0x10c>)
 800119e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b31      	ldr	r3, [pc, #196]	; (8001268 <MX_TIM16_Init+0x104>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80011a6:	4b30      	ldr	r3, [pc, #192]	; (8001268 <MX_TIM16_Init+0x104>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ac:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <MX_TIM16_Init+0x104>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80011b2:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <MX_TIM16_Init+0x104>)
 80011b4:	0018      	movs	r0, r3
 80011b6:	f002 f9b9 	bl	800352c <HAL_TIM_Base_Init>
 80011ba:	1e03      	subs	r3, r0, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80011be:	f7ff fb27 	bl	8000810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80011c2:	4b29      	ldr	r3, [pc, #164]	; (8001268 <MX_TIM16_Init+0x104>)
 80011c4:	0018      	movs	r0, r3
 80011c6:	f002 fa5f 	bl	8003688 <HAL_TIM_PWM_Init>
 80011ca:	1e03      	subs	r3, r0, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 80011ce:	f7ff fb1f 	bl	8000810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d2:	2134      	movs	r1, #52	; 0x34
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	2260      	movs	r2, #96	; 0x60
 80011d8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80011da:	187b      	adds	r3, r7, r1
 80011dc:	2200      	movs	r2, #0
 80011de:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011e6:	187b      	adds	r3, r7, r1
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011fe:	1879      	adds	r1, r7, r1
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <MX_TIM16_Init+0x104>)
 8001202:	2200      	movs	r2, #0
 8001204:	0018      	movs	r0, r3
 8001206:	f002 fc79 	bl	8003afc <HAL_TIM_PWM_ConfigChannel>
 800120a:	1e03      	subs	r3, r0, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 800120e:	f7ff faff 	bl	8000810 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001212:	003b      	movs	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001218:	003b      	movs	r3, r7
 800121a:	2200      	movs	r2, #0
 800121c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800121e:	003b      	movs	r3, r7
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001224:	003b      	movs	r3, r7
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800122a:	003b      	movs	r3, r7
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001230:	003b      	movs	r3, r7
 8001232:	2280      	movs	r2, #128	; 0x80
 8001234:	0192      	lsls	r2, r2, #6
 8001236:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001238:	003b      	movs	r3, r7
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800123e:	003b      	movs	r3, r7
 8001240:	2200      	movs	r2, #0
 8001242:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001244:	003a      	movs	r2, r7
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_TIM16_Init+0x104>)
 8001248:	0011      	movs	r1, r2
 800124a:	0018      	movs	r0, r3
 800124c:	f003 fa8a 	bl	8004764 <HAL_TIMEx_ConfigBreakDeadTime>
 8001250:	1e03      	subs	r3, r0, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8001254:	f7ff fadc 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <MX_TIM16_Init+0x104>)
 800125a:	0018      	movs	r0, r3
 800125c:	f000 f978 	bl	8001550 <HAL_TIM_MspPostInit>

}
 8001260:	46c0      	nop			; (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	b014      	add	sp, #80	; 0x50
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2000027c 	.word	0x2000027c
 800126c:	40014400 	.word	0x40014400
 8001270:	0000ffff 	.word	0x0000ffff

08001274 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b094      	sub	sp, #80	; 0x50
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800127a:	2334      	movs	r3, #52	; 0x34
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	0018      	movs	r0, r3
 8001280:	231c      	movs	r3, #28
 8001282:	001a      	movs	r2, r3
 8001284:	2100      	movs	r1, #0
 8001286:	f006 fbfb 	bl	8007a80 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800128a:	003b      	movs	r3, r7
 800128c:	0018      	movs	r0, r3
 800128e:	2334      	movs	r3, #52	; 0x34
 8001290:	001a      	movs	r2, r3
 8001292:	2100      	movs	r1, #0
 8001294:	f006 fbf4 	bl	8007a80 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001298:	4b37      	ldr	r3, [pc, #220]	; (8001378 <MX_TIM17_Init+0x104>)
 800129a:	4a38      	ldr	r2, [pc, #224]	; (800137c <MX_TIM17_Init+0x108>)
 800129c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800129e:	4b36      	ldr	r3, [pc, #216]	; (8001378 <MX_TIM17_Init+0x104>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a4:	4b34      	ldr	r3, [pc, #208]	; (8001378 <MX_TIM17_Init+0x104>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80012aa:	4b33      	ldr	r3, [pc, #204]	; (8001378 <MX_TIM17_Init+0x104>)
 80012ac:	4a34      	ldr	r2, [pc, #208]	; (8001380 <MX_TIM17_Init+0x10c>)
 80012ae:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b0:	4b31      	ldr	r3, [pc, #196]	; (8001378 <MX_TIM17_Init+0x104>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80012b6:	4b30      	ldr	r3, [pc, #192]	; (8001378 <MX_TIM17_Init+0x104>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012bc:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <MX_TIM17_Init+0x104>)
 80012be:	2200      	movs	r2, #0
 80012c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80012c2:	4b2d      	ldr	r3, [pc, #180]	; (8001378 <MX_TIM17_Init+0x104>)
 80012c4:	0018      	movs	r0, r3
 80012c6:	f002 f931 	bl	800352c <HAL_TIM_Base_Init>
 80012ca:	1e03      	subs	r3, r0, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80012ce:	f7ff fa9f 	bl	8000810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80012d2:	4b29      	ldr	r3, [pc, #164]	; (8001378 <MX_TIM17_Init+0x104>)
 80012d4:	0018      	movs	r0, r3
 80012d6:	f002 f9d7 	bl	8003688 <HAL_TIM_PWM_Init>
 80012da:	1e03      	subs	r3, r0, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80012de:	f7ff fa97 	bl	8000810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e2:	2134      	movs	r1, #52	; 0x34
 80012e4:	187b      	adds	r3, r7, r1
 80012e6:	2260      	movs	r2, #96	; 0x60
 80012e8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80012ea:	187b      	adds	r3, r7, r1
 80012ec:	2200      	movs	r2, #0
 80012ee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f0:	187b      	adds	r3, r7, r1
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012f6:	187b      	adds	r3, r7, r1
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fc:	187b      	adds	r3, r7, r1
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001302:	187b      	adds	r3, r7, r1
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001308:	187b      	adds	r3, r7, r1
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800130e:	1879      	adds	r1, r7, r1
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <MX_TIM17_Init+0x104>)
 8001312:	2200      	movs	r2, #0
 8001314:	0018      	movs	r0, r3
 8001316:	f002 fbf1 	bl	8003afc <HAL_TIM_PWM_ConfigChannel>
 800131a:	1e03      	subs	r3, r0, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 800131e:	f7ff fa77 	bl	8000810 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001322:	003b      	movs	r3, r7
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001328:	003b      	movs	r3, r7
 800132a:	2200      	movs	r2, #0
 800132c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800132e:	003b      	movs	r3, r7
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001334:	003b      	movs	r3, r7
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800133a:	003b      	movs	r3, r7
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001340:	003b      	movs	r3, r7
 8001342:	2280      	movs	r2, #128	; 0x80
 8001344:	0192      	lsls	r2, r2, #6
 8001346:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001348:	003b      	movs	r3, r7
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800134e:	003b      	movs	r3, r7
 8001350:	2200      	movs	r2, #0
 8001352:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001354:	003a      	movs	r2, r7
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MX_TIM17_Init+0x104>)
 8001358:	0011      	movs	r1, r2
 800135a:	0018      	movs	r0, r3
 800135c:	f003 fa02 	bl	8004764 <HAL_TIMEx_ConfigBreakDeadTime>
 8001360:	1e03      	subs	r3, r0, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8001364:	f7ff fa54 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <MX_TIM17_Init+0x104>)
 800136a:	0018      	movs	r0, r3
 800136c:	f000 f8f0 	bl	8001550 <HAL_TIM_MspPostInit>

}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b014      	add	sp, #80	; 0x50
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200002c8 	.word	0x200002c8
 800137c:	40014800 	.word	0x40014800
 8001380:	0000ffff 	.word	0x0000ffff

08001384 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001384:	b590      	push	{r4, r7, lr}
 8001386:	b08d      	sub	sp, #52	; 0x34
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	241c      	movs	r4, #28
 800138e:	193b      	adds	r3, r7, r4
 8001390:	0018      	movs	r0, r3
 8001392:	2314      	movs	r3, #20
 8001394:	001a      	movs	r2, r3
 8001396:	2100      	movs	r1, #0
 8001398:	f006 fb72 	bl	8007a80 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a36      	ldr	r2, [pc, #216]	; (800147c <HAL_TIM_Encoder_MspInit+0xf8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d131      	bne.n	800140a <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013a6:	4b36      	ldr	r3, [pc, #216]	; (8001480 <HAL_TIM_Encoder_MspInit+0xfc>)
 80013a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013aa:	4b35      	ldr	r3, [pc, #212]	; (8001480 <HAL_TIM_Encoder_MspInit+0xfc>)
 80013ac:	2180      	movs	r1, #128	; 0x80
 80013ae:	0109      	lsls	r1, r1, #4
 80013b0:	430a      	orrs	r2, r1
 80013b2:	641a      	str	r2, [r3, #64]	; 0x40
 80013b4:	4b32      	ldr	r3, [pc, #200]	; (8001480 <HAL_TIM_Encoder_MspInit+0xfc>)
 80013b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
 80013c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c2:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <HAL_TIM_Encoder_MspInit+0xfc>)
 80013c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013c6:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <HAL_TIM_Encoder_MspInit+0xfc>)
 80013c8:	2104      	movs	r1, #4
 80013ca:	430a      	orrs	r2, r1
 80013cc:	635a      	str	r2, [r3, #52]	; 0x34
 80013ce:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <HAL_TIM_Encoder_MspInit+0xfc>)
 80013d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d2:	2204      	movs	r2, #4
 80013d4:	4013      	ands	r3, r2
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC8     ------> TIM1_CH1
    PC9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH1_ENCODER_RB_Pin|TIM1_CH2_ENCODER_RA_Pin;
 80013da:	193b      	adds	r3, r7, r4
 80013dc:	22c0      	movs	r2, #192	; 0xc0
 80013de:	0092      	lsls	r2, r2, #2
 80013e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	0021      	movs	r1, r4
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	2202      	movs	r2, #2
 80013e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80013f6:	187b      	adds	r3, r7, r1
 80013f8:	2202      	movs	r2, #2
 80013fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	4a21      	ldr	r2, [pc, #132]	; (8001484 <HAL_TIM_Encoder_MspInit+0x100>)
 8001400:	0019      	movs	r1, r3
 8001402:	0010      	movs	r0, r2
 8001404:	f001 f85e 	bl	80024c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001408:	e033      	b.n	8001472 <HAL_TIM_Encoder_MspInit+0xee>
  else if(tim_encoderHandle->Instance==TIM3)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a1e      	ldr	r2, [pc, #120]	; (8001488 <HAL_TIM_Encoder_MspInit+0x104>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d12e      	bne.n	8001472 <HAL_TIM_Encoder_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_TIM_Encoder_MspInit+0xfc>)
 800141a:	2102      	movs	r1, #2
 800141c:	430a      	orrs	r2, r1
 800141e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001424:	2202      	movs	r2, #2
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <HAL_TIM_Encoder_MspInit+0xfc>)
 800142e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001432:	2101      	movs	r1, #1
 8001434:	430a      	orrs	r2, r1
 8001436:	635a      	str	r2, [r3, #52]	; 0x34
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_TIM_Encoder_MspInit+0xfc>)
 800143a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143c:	2201      	movs	r2, #1
 800143e:	4013      	ands	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_ENCODER_LA_Pin|TIM3_CH2_ENCODER_LB_Pin;
 8001444:	211c      	movs	r1, #28
 8001446:	187b      	adds	r3, r7, r1
 8001448:	22c0      	movs	r2, #192	; 0xc0
 800144a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	187b      	adds	r3, r7, r1
 800144e:	2202      	movs	r2, #2
 8001450:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	187b      	adds	r3, r7, r1
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	187b      	adds	r3, r7, r1
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800145e:	187b      	adds	r3, r7, r1
 8001460:	2201      	movs	r2, #1
 8001462:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	187a      	adds	r2, r7, r1
 8001466:	23a0      	movs	r3, #160	; 0xa0
 8001468:	05db      	lsls	r3, r3, #23
 800146a:	0011      	movs	r1, r2
 800146c:	0018      	movs	r0, r3
 800146e:	f001 f829 	bl	80024c4 <HAL_GPIO_Init>
}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	46bd      	mov	sp, r7
 8001476:	b00d      	add	sp, #52	; 0x34
 8001478:	bd90      	pop	{r4, r7, pc}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	40012c00 	.word	0x40012c00
 8001480:	40021000 	.word	0x40021000
 8001484:	50000800 	.word	0x50000800
 8001488:	40000400 	.word	0x40000400

0800148c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a28      	ldr	r2, [pc, #160]	; (800153c <HAL_TIM_Base_MspInit+0xb0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d10e      	bne.n	80014bc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800149e:	4b28      	ldr	r3, [pc, #160]	; (8001540 <HAL_TIM_Base_MspInit+0xb4>)
 80014a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014a2:	4b27      	ldr	r3, [pc, #156]	; (8001540 <HAL_TIM_Base_MspInit+0xb4>)
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	0209      	lsls	r1, r1, #8
 80014a8:	430a      	orrs	r2, r1
 80014aa:	641a      	str	r2, [r3, #64]	; 0x40
 80014ac:	4b24      	ldr	r3, [pc, #144]	; (8001540 <HAL_TIM_Base_MspInit+0xb4>)
 80014ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	4013      	ands	r3, r2
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80014ba:	e03a      	b.n	8001532 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM15)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a20      	ldr	r2, [pc, #128]	; (8001544 <HAL_TIM_Base_MspInit+0xb8>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d10e      	bne.n	80014e4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80014c6:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <HAL_TIM_Base_MspInit+0xb4>)
 80014c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ca:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <HAL_TIM_Base_MspInit+0xb4>)
 80014cc:	2180      	movs	r1, #128	; 0x80
 80014ce:	0249      	lsls	r1, r1, #9
 80014d0:	430a      	orrs	r2, r1
 80014d2:	641a      	str	r2, [r3, #64]	; 0x40
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <HAL_TIM_Base_MspInit+0xb4>)
 80014d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	025b      	lsls	r3, r3, #9
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
}
 80014e2:	e026      	b.n	8001532 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM16)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a17      	ldr	r2, [pc, #92]	; (8001548 <HAL_TIM_Base_MspInit+0xbc>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d10e      	bne.n	800150c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <HAL_TIM_Base_MspInit+0xb4>)
 80014f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <HAL_TIM_Base_MspInit+0xb4>)
 80014f4:	2180      	movs	r1, #128	; 0x80
 80014f6:	0289      	lsls	r1, r1, #10
 80014f8:	430a      	orrs	r2, r1
 80014fa:	641a      	str	r2, [r3, #64]	; 0x40
 80014fc:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_TIM_Base_MspInit+0xb4>)
 80014fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	029b      	lsls	r3, r3, #10
 8001504:	4013      	ands	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
}
 800150a:	e012      	b.n	8001532 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM17)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0e      	ldr	r2, [pc, #56]	; (800154c <HAL_TIM_Base_MspInit+0xc0>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d10d      	bne.n	8001532 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <HAL_TIM_Base_MspInit+0xb4>)
 8001518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_TIM_Base_MspInit+0xb4>)
 800151c:	2180      	movs	r1, #128	; 0x80
 800151e:	02c9      	lsls	r1, r1, #11
 8001520:	430a      	orrs	r2, r1
 8001522:	641a      	str	r2, [r3, #64]	; 0x40
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_TIM_Base_MspInit+0xb4>)
 8001526:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	02db      	lsls	r3, r3, #11
 800152c:	4013      	ands	r3, r2
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	b006      	add	sp, #24
 8001538:	bd80      	pop	{r7, pc}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	40002000 	.word	0x40002000
 8001540:	40021000 	.word	0x40021000
 8001544:	40014000 	.word	0x40014000
 8001548:	40014400 	.word	0x40014400
 800154c:	40014800 	.word	0x40014800

08001550 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b08d      	sub	sp, #52	; 0x34
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	241c      	movs	r4, #28
 800155a:	193b      	adds	r3, r7, r4
 800155c:	0018      	movs	r0, r3
 800155e:	2314      	movs	r3, #20
 8001560:	001a      	movs	r2, r3
 8001562:	2100      	movs	r1, #0
 8001564:	f006 fa8c 	bl	8007a80 <memset>
  if(timHandle->Instance==TIM14)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a62      	ldr	r2, [pc, #392]	; (80016f8 <HAL_TIM_MspPostInit+0x1a8>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d123      	bne.n	80015ba <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	4b62      	ldr	r3, [pc, #392]	; (80016fc <HAL_TIM_MspPostInit+0x1ac>)
 8001574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001576:	4b61      	ldr	r3, [pc, #388]	; (80016fc <HAL_TIM_MspPostInit+0x1ac>)
 8001578:	2101      	movs	r1, #1
 800157a:	430a      	orrs	r2, r1
 800157c:	635a      	str	r2, [r3, #52]	; 0x34
 800157e:	4b5f      	ldr	r3, [pc, #380]	; (80016fc <HAL_TIM_MspPostInit+0x1ac>)
 8001580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001582:	2201      	movs	r2, #1
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
 8001588:	69bb      	ldr	r3, [r7, #24]
    /**TIM14 GPIO Configuration
    PA4     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = TIM14_CH1_M_SCTR_Pin;
 800158a:	0021      	movs	r1, r4
 800158c:	187b      	adds	r3, r7, r1
 800158e:	2210      	movs	r2, #16
 8001590:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	187b      	adds	r3, r7, r1
 8001594:	2202      	movs	r2, #2
 8001596:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	187b      	adds	r3, r7, r1
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	2200      	movs	r2, #0
 80015a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	2204      	movs	r2, #4
 80015a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM14_CH1_M_SCTR_GPIO_Port, &GPIO_InitStruct);
 80015aa:	187a      	adds	r2, r7, r1
 80015ac:	23a0      	movs	r3, #160	; 0xa0
 80015ae:	05db      	lsls	r3, r3, #23
 80015b0:	0011      	movs	r1, r2
 80015b2:	0018      	movs	r0, r3
 80015b4:	f000 ff86 	bl	80024c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80015b8:	e099      	b.n	80016ee <HAL_TIM_MspPostInit+0x19e>
  else if(timHandle->Instance==TIM15)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a50      	ldr	r2, [pc, #320]	; (8001700 <HAL_TIM_MspPostInit+0x1b0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d145      	bne.n	8001650 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c4:	4b4d      	ldr	r3, [pc, #308]	; (80016fc <HAL_TIM_MspPostInit+0x1ac>)
 80015c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015c8:	4b4c      	ldr	r3, [pc, #304]	; (80016fc <HAL_TIM_MspPostInit+0x1ac>)
 80015ca:	2104      	movs	r1, #4
 80015cc:	430a      	orrs	r2, r1
 80015ce:	635a      	str	r2, [r3, #52]	; 0x34
 80015d0:	4b4a      	ldr	r3, [pc, #296]	; (80016fc <HAL_TIM_MspPostInit+0x1ac>)
 80015d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d4:	2204      	movs	r2, #4
 80015d6:	4013      	ands	r3, r2
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015dc:	4b47      	ldr	r3, [pc, #284]	; (80016fc <HAL_TIM_MspPostInit+0x1ac>)
 80015de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015e0:	4b46      	ldr	r3, [pc, #280]	; (80016fc <HAL_TIM_MspPostInit+0x1ac>)
 80015e2:	2101      	movs	r1, #1
 80015e4:	430a      	orrs	r2, r1
 80015e6:	635a      	str	r2, [r3, #52]	; 0x34
 80015e8:	4b44      	ldr	r3, [pc, #272]	; (80016fc <HAL_TIM_MspPostInit+0x1ac>)
 80015ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ec:	2201      	movs	r2, #1
 80015ee:	4013      	ands	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM15_CH2_REV_MR_Pin;
 80015f4:	241c      	movs	r4, #28
 80015f6:	193b      	adds	r3, r7, r4
 80015f8:	2204      	movs	r2, #4
 80015fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	193b      	adds	r3, r7, r4
 80015fe:	2202      	movs	r2, #2
 8001600:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	193b      	adds	r3, r7, r4
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	193b      	adds	r3, r7, r4
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 800160e:	193b      	adds	r3, r7, r4
 8001610:	2202      	movs	r2, #2
 8001612:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM15_CH2_REV_MR_GPIO_Port, &GPIO_InitStruct);
 8001614:	193b      	adds	r3, r7, r4
 8001616:	4a3b      	ldr	r2, [pc, #236]	; (8001704 <HAL_TIM_MspPostInit+0x1b4>)
 8001618:	0019      	movs	r1, r3
 800161a:	0010      	movs	r0, r2
 800161c:	f000 ff52 	bl	80024c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM15_CH1_REV_ML_Pin;
 8001620:	0021      	movs	r1, r4
 8001622:	187b      	adds	r3, r7, r1
 8001624:	2204      	movs	r2, #4
 8001626:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	187b      	adds	r3, r7, r1
 800162a:	2202      	movs	r2, #2
 800162c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	187b      	adds	r3, r7, r1
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	187b      	adds	r3, r7, r1
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 800163a:	187b      	adds	r3, r7, r1
 800163c:	2205      	movs	r2, #5
 800163e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM15_CH1_REV_ML_GPIO_Port, &GPIO_InitStruct);
 8001640:	187a      	adds	r2, r7, r1
 8001642:	23a0      	movs	r3, #160	; 0xa0
 8001644:	05db      	lsls	r3, r3, #23
 8001646:	0011      	movs	r1, r2
 8001648:	0018      	movs	r0, r3
 800164a:	f000 ff3b 	bl	80024c4 <HAL_GPIO_Init>
}
 800164e:	e04e      	b.n	80016ee <HAL_TIM_MspPostInit+0x19e>
  else if(timHandle->Instance==TIM16)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a2c      	ldr	r2, [pc, #176]	; (8001708 <HAL_TIM_MspPostInit+0x1b8>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d122      	bne.n	80016a0 <HAL_TIM_MspPostInit+0x150>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800165a:	4b28      	ldr	r3, [pc, #160]	; (80016fc <HAL_TIM_MspPostInit+0x1ac>)
 800165c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800165e:	4b27      	ldr	r3, [pc, #156]	; (80016fc <HAL_TIM_MspPostInit+0x1ac>)
 8001660:	2108      	movs	r1, #8
 8001662:	430a      	orrs	r2, r1
 8001664:	635a      	str	r2, [r3, #52]	; 0x34
 8001666:	4b25      	ldr	r3, [pc, #148]	; (80016fc <HAL_TIM_MspPostInit+0x1ac>)
 8001668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800166a:	2208      	movs	r2, #8
 800166c:	4013      	ands	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM16_CH1_FWD_ML_Pin;
 8001672:	211c      	movs	r1, #28
 8001674:	187b      	adds	r3, r7, r1
 8001676:	2201      	movs	r2, #1
 8001678:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	187b      	adds	r3, r7, r1
 800167c:	2202      	movs	r2, #2
 800167e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	187b      	adds	r3, r7, r1
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	187b      	adds	r3, r7, r1
 8001688:	2200      	movs	r2, #0
 800168a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 800168c:	187b      	adds	r3, r7, r1
 800168e:	2202      	movs	r2, #2
 8001690:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM16_CH1_FWD_ML_GPIO_Port, &GPIO_InitStruct);
 8001692:	187b      	adds	r3, r7, r1
 8001694:	4a1d      	ldr	r2, [pc, #116]	; (800170c <HAL_TIM_MspPostInit+0x1bc>)
 8001696:	0019      	movs	r1, r3
 8001698:	0010      	movs	r0, r2
 800169a:	f000 ff13 	bl	80024c4 <HAL_GPIO_Init>
}
 800169e:	e026      	b.n	80016ee <HAL_TIM_MspPostInit+0x19e>
  else if(timHandle->Instance==TIM17)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a1a      	ldr	r2, [pc, #104]	; (8001710 <HAL_TIM_MspPostInit+0x1c0>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d121      	bne.n	80016ee <HAL_TIM_MspPostInit+0x19e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <HAL_TIM_MspPostInit+0x1ac>)
 80016ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ae:	4b13      	ldr	r3, [pc, #76]	; (80016fc <HAL_TIM_MspPostInit+0x1ac>)
 80016b0:	2108      	movs	r1, #8
 80016b2:	430a      	orrs	r2, r1
 80016b4:	635a      	str	r2, [r3, #52]	; 0x34
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_TIM_MspPostInit+0x1ac>)
 80016b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ba:	2208      	movs	r2, #8
 80016bc:	4013      	ands	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM17_CH1_FWD_MR_Pin;
 80016c2:	211c      	movs	r1, #28
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	2202      	movs	r2, #2
 80016c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	187b      	adds	r3, r7, r1
 80016cc:	2202      	movs	r2, #2
 80016ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	187b      	adds	r3, r7, r1
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	187b      	adds	r3, r7, r1
 80016d8:	2200      	movs	r2, #0
 80016da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 80016dc:	187b      	adds	r3, r7, r1
 80016de:	2202      	movs	r2, #2
 80016e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM17_CH1_FWD_MR_GPIO_Port, &GPIO_InitStruct);
 80016e2:	187b      	adds	r3, r7, r1
 80016e4:	4a09      	ldr	r2, [pc, #36]	; (800170c <HAL_TIM_MspPostInit+0x1bc>)
 80016e6:	0019      	movs	r1, r3
 80016e8:	0010      	movs	r0, r2
 80016ea:	f000 feeb 	bl	80024c4 <HAL_GPIO_Init>
}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b00d      	add	sp, #52	; 0x34
 80016f4:	bd90      	pop	{r4, r7, pc}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	40002000 	.word	0x40002000
 80016fc:	40021000 	.word	0x40021000
 8001700:	40014000 	.word	0x40014000
 8001704:	50000800 	.word	0x50000800
 8001708:	40014400 	.word	0x40014400
 800170c:	50000c00 	.word	0x50000c00
 8001710:	40014800 	.word	0x40014800

08001714 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001718:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <MX_USART1_UART_Init+0x94>)
 800171a:	4a24      	ldr	r2, [pc, #144]	; (80017ac <MX_USART1_UART_Init+0x98>)
 800171c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <MX_USART1_UART_Init+0x94>)
 8001720:	22e1      	movs	r2, #225	; 0xe1
 8001722:	0252      	lsls	r2, r2, #9
 8001724:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <MX_USART1_UART_Init+0x94>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <MX_USART1_UART_Init+0x94>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001732:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <MX_USART1_UART_Init+0x94>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001738:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <MX_USART1_UART_Init+0x94>)
 800173a:	220c      	movs	r2, #12
 800173c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173e:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_USART1_UART_Init+0x94>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <MX_USART1_UART_Init+0x94>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_USART1_UART_Init+0x94>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <MX_USART1_UART_Init+0x94>)
 8001752:	2200      	movs	r2, #0
 8001754:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <MX_USART1_UART_Init+0x94>)
 8001758:	2200      	movs	r2, #0
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <MX_USART1_UART_Init+0x94>)
 800175e:	0018      	movs	r0, r3
 8001760:	f003 f8be 	bl	80048e0 <HAL_UART_Init>
 8001764:	1e03      	subs	r3, r0, #0
 8001766:	d001      	beq.n	800176c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001768:	f7ff f852 	bl	8000810 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <MX_USART1_UART_Init+0x94>)
 800176e:	2100      	movs	r1, #0
 8001770:	0018      	movs	r0, r3
 8001772:	f003 fd4f 	bl	8005214 <HAL_UARTEx_SetTxFifoThreshold>
 8001776:	1e03      	subs	r3, r0, #0
 8001778:	d001      	beq.n	800177e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800177a:	f7ff f849 	bl	8000810 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <MX_USART1_UART_Init+0x94>)
 8001780:	2100      	movs	r1, #0
 8001782:	0018      	movs	r0, r3
 8001784:	f003 fd86 	bl	8005294 <HAL_UARTEx_SetRxFifoThreshold>
 8001788:	1e03      	subs	r3, r0, #0
 800178a:	d001      	beq.n	8001790 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800178c:	f7ff f840 	bl	8000810 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <MX_USART1_UART_Init+0x94>)
 8001792:	0018      	movs	r0, r3
 8001794:	f003 fd04 	bl	80051a0 <HAL_UARTEx_DisableFifoMode>
 8001798:	1e03      	subs	r3, r0, #0
 800179a:	d001      	beq.n	80017a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800179c:	f7ff f838 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017a0:	46c0      	nop			; (mov r8, r8)
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	20000314 	.word	0x20000314
 80017ac:	40013800 	.word	0x40013800

080017b0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017b4:	4b23      	ldr	r3, [pc, #140]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017b6:	4a24      	ldr	r2, [pc, #144]	; (8001848 <MX_USART2_UART_Init+0x98>)
 80017b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017ba:	4b22      	ldr	r3, [pc, #136]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017bc:	22e1      	movs	r2, #225	; 0xe1
 80017be:	0252      	lsls	r2, r2, #9
 80017c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017c8:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ce:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017d6:	220c      	movs	r2, #12
 80017d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017ec:	4b15      	ldr	r3, [pc, #84]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017fa:	0018      	movs	r0, r3
 80017fc:	f003 f870 	bl	80048e0 <HAL_UART_Init>
 8001800:	1e03      	subs	r3, r0, #0
 8001802:	d001      	beq.n	8001808 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001804:	f7ff f804 	bl	8000810 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001808:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <MX_USART2_UART_Init+0x94>)
 800180a:	2100      	movs	r1, #0
 800180c:	0018      	movs	r0, r3
 800180e:	f003 fd01 	bl	8005214 <HAL_UARTEx_SetTxFifoThreshold>
 8001812:	1e03      	subs	r3, r0, #0
 8001814:	d001      	beq.n	800181a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001816:	f7fe fffb 	bl	8000810 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <MX_USART2_UART_Init+0x94>)
 800181c:	2100      	movs	r1, #0
 800181e:	0018      	movs	r0, r3
 8001820:	f003 fd38 	bl	8005294 <HAL_UARTEx_SetRxFifoThreshold>
 8001824:	1e03      	subs	r3, r0, #0
 8001826:	d001      	beq.n	800182c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001828:	f7fe fff2 	bl	8000810 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <MX_USART2_UART_Init+0x94>)
 800182e:	0018      	movs	r0, r3
 8001830:	f003 fcb6 	bl	80051a0 <HAL_UARTEx_DisableFifoMode>
 8001834:	1e03      	subs	r3, r0, #0
 8001836:	d001      	beq.n	800183c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001838:	f7fe ffea 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800183c:	46c0      	nop			; (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	200003a8 	.word	0x200003a8
 8001848:	40004400 	.word	0x40004400

0800184c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b093      	sub	sp, #76	; 0x4c
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	2334      	movs	r3, #52	; 0x34
 8001856:	18fb      	adds	r3, r7, r3
 8001858:	0018      	movs	r0, r3
 800185a:	2314      	movs	r3, #20
 800185c:	001a      	movs	r2, r3
 800185e:	2100      	movs	r1, #0
 8001860:	f006 f90e 	bl	8007a80 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001864:	2418      	movs	r4, #24
 8001866:	193b      	adds	r3, r7, r4
 8001868:	0018      	movs	r0, r3
 800186a:	231c      	movs	r3, #28
 800186c:	001a      	movs	r2, r3
 800186e:	2100      	movs	r1, #0
 8001870:	f006 f906 	bl	8007a80 <memset>
  if(uartHandle->Instance==USART1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a44      	ldr	r2, [pc, #272]	; (800198c <HAL_UART_MspInit+0x140>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d13e      	bne.n	80018fc <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800187e:	193b      	adds	r3, r7, r4
 8001880:	2201      	movs	r2, #1
 8001882:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001884:	193b      	adds	r3, r7, r4
 8001886:	2200      	movs	r2, #0
 8001888:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800188a:	193b      	adds	r3, r7, r4
 800188c:	0018      	movs	r0, r3
 800188e:	f001 fd19 	bl	80032c4 <HAL_RCCEx_PeriphCLKConfig>
 8001892:	1e03      	subs	r3, r0, #0
 8001894:	d001      	beq.n	800189a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001896:	f7fe ffbb 	bl	8000810 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800189a:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <HAL_UART_MspInit+0x144>)
 800189c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800189e:	4b3c      	ldr	r3, [pc, #240]	; (8001990 <HAL_UART_MspInit+0x144>)
 80018a0:	2180      	movs	r1, #128	; 0x80
 80018a2:	01c9      	lsls	r1, r1, #7
 80018a4:	430a      	orrs	r2, r1
 80018a6:	641a      	str	r2, [r3, #64]	; 0x40
 80018a8:	4b39      	ldr	r3, [pc, #228]	; (8001990 <HAL_UART_MspInit+0x144>)
 80018aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	01db      	lsls	r3, r3, #7
 80018b0:	4013      	ands	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b6:	4b36      	ldr	r3, [pc, #216]	; (8001990 <HAL_UART_MspInit+0x144>)
 80018b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ba:	4b35      	ldr	r3, [pc, #212]	; (8001990 <HAL_UART_MspInit+0x144>)
 80018bc:	2104      	movs	r1, #4
 80018be:	430a      	orrs	r2, r1
 80018c0:	635a      	str	r2, [r3, #52]	; 0x34
 80018c2:	4b33      	ldr	r3, [pc, #204]	; (8001990 <HAL_UART_MspInit+0x144>)
 80018c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c6:	2204      	movs	r2, #4
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_VCP_TX_Pin|USART1_RX_VCP_RX_Pin;
 80018ce:	2134      	movs	r1, #52	; 0x34
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	2230      	movs	r2, #48	; 0x30
 80018d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	187b      	adds	r3, r7, r1
 80018d8:	2202      	movs	r2, #2
 80018da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	187b      	adds	r3, r7, r1
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	187b      	adds	r3, r7, r1
 80018e4:	2200      	movs	r2, #0
 80018e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80018e8:	187b      	adds	r3, r7, r1
 80018ea:	2201      	movs	r2, #1
 80018ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ee:	187b      	adds	r3, r7, r1
 80018f0:	4a28      	ldr	r2, [pc, #160]	; (8001994 <HAL_UART_MspInit+0x148>)
 80018f2:	0019      	movs	r1, r3
 80018f4:	0010      	movs	r0, r2
 80018f6:	f000 fde5 	bl	80024c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018fa:	e043      	b.n	8001984 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a25      	ldr	r2, [pc, #148]	; (8001998 <HAL_UART_MspInit+0x14c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d13e      	bne.n	8001984 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001906:	2118      	movs	r1, #24
 8001908:	187b      	adds	r3, r7, r1
 800190a:	2202      	movs	r2, #2
 800190c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800190e:	187b      	adds	r3, r7, r1
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001914:	187b      	adds	r3, r7, r1
 8001916:	0018      	movs	r0, r3
 8001918:	f001 fcd4 	bl	80032c4 <HAL_RCCEx_PeriphCLKConfig>
 800191c:	1e03      	subs	r3, r0, #0
 800191e:	d001      	beq.n	8001924 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001920:	f7fe ff76 	bl	8000810 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <HAL_UART_MspInit+0x144>)
 8001926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001928:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_UART_MspInit+0x144>)
 800192a:	2180      	movs	r1, #128	; 0x80
 800192c:	0289      	lsls	r1, r1, #10
 800192e:	430a      	orrs	r2, r1
 8001930:	63da      	str	r2, [r3, #60]	; 0x3c
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <HAL_UART_MspInit+0x144>)
 8001934:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	029b      	lsls	r3, r3, #10
 800193a:	4013      	ands	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001940:	4b13      	ldr	r3, [pc, #76]	; (8001990 <HAL_UART_MspInit+0x144>)
 8001942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_UART_MspInit+0x144>)
 8001946:	2108      	movs	r1, #8
 8001948:	430a      	orrs	r2, r1
 800194a:	635a      	str	r2, [r3, #52]	; 0x34
 800194c:	4b10      	ldr	r3, [pc, #64]	; (8001990 <HAL_UART_MspInit+0x144>)
 800194e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001950:	2208      	movs	r2, #8
 8001952:	4013      	ands	r3, r2
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_LIDAR_TX_Pin|USART2_RX_LIDAR_RX_Pin;
 8001958:	2134      	movs	r1, #52	; 0x34
 800195a:	187b      	adds	r3, r7, r1
 800195c:	2260      	movs	r2, #96	; 0x60
 800195e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	187b      	adds	r3, r7, r1
 8001962:	2202      	movs	r2, #2
 8001964:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	187b      	adds	r3, r7, r1
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	187b      	adds	r3, r7, r1
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8001972:	187b      	adds	r3, r7, r1
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001978:	187b      	adds	r3, r7, r1
 800197a:	4a08      	ldr	r2, [pc, #32]	; (800199c <HAL_UART_MspInit+0x150>)
 800197c:	0019      	movs	r1, r3
 800197e:	0010      	movs	r0, r2
 8001980:	f000 fda0 	bl	80024c4 <HAL_GPIO_Init>
}
 8001984:	46c0      	nop			; (mov r8, r8)
 8001986:	46bd      	mov	sp, r7
 8001988:	b013      	add	sp, #76	; 0x4c
 800198a:	bd90      	pop	{r4, r7, pc}
 800198c:	40013800 	.word	0x40013800
 8001990:	40021000 	.word	0x40021000
 8001994:	50000800 	.word	0x50000800
 8001998:	40004400 	.word	0x40004400
 800199c:	50000c00 	.word	0x50000c00

080019a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019a0:	480d      	ldr	r0, [pc, #52]	; (80019d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019a4:	f7ff f9f6 	bl	8000d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a8:	480c      	ldr	r0, [pc, #48]	; (80019dc <LoopForever+0x6>)
  ldr r1, =_edata
 80019aa:	490d      	ldr	r1, [pc, #52]	; (80019e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <LoopForever+0xe>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019c0:	4c0a      	ldr	r4, [pc, #40]	; (80019ec <LoopForever+0x16>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019ce:	f006 f8b3 	bl	8007b38 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80019d2:	f7fe fe97 	bl	8000704 <main>

080019d6 <LoopForever>:

LoopForever:
  b LoopForever
 80019d6:	e7fe      	b.n	80019d6 <LoopForever>
  ldr   r0, =_estack
 80019d8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80019e4:	080089b0 	.word	0x080089b0
  ldr r2, =_sbss
 80019e8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80019ec:	20004230 	.word	0x20004230

080019f0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC1_IRQHandler>
	...

080019f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019fa:	1dfb      	adds	r3, r7, #7
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_Init+0x3c>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <HAL_Init+0x3c>)
 8001a06:	2180      	movs	r1, #128	; 0x80
 8001a08:	0049      	lsls	r1, r1, #1
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a0e:	2003      	movs	r0, #3
 8001a10:	f7ff f86e 	bl	8000af0 <HAL_InitTick>
 8001a14:	1e03      	subs	r3, r0, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001a18:	1dfb      	adds	r3, r7, #7
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	701a      	strb	r2, [r3, #0]
 8001a1e:	e001      	b.n	8001a24 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001a20:	f7ff f83c 	bl	8000a9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a24:	1dfb      	adds	r3, r7, #7
 8001a26:	781b      	ldrb	r3, [r3, #0]
}
 8001a28:	0018      	movs	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b002      	add	sp, #8
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40022000 	.word	0x40022000

08001a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_IncTick+0x1c>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	001a      	movs	r2, r3
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_IncTick+0x20>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	18d2      	adds	r2, r2, r3
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <HAL_IncTick+0x20>)
 8001a46:	601a      	str	r2, [r3, #0]
}
 8001a48:	46c0      	nop			; (mov r8, r8)
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	20000008 	.word	0x20000008
 8001a54:	2000043c 	.word	0x2000043c

08001a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a5c:	4b02      	ldr	r3, [pc, #8]	; (8001a68 <HAL_GetTick+0x10>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
}
 8001a60:	0018      	movs	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	2000043c 	.word	0x2000043c

08001a6c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001a7c:	401a      	ands	r2, r3
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	601a      	str	r2, [r3, #0]
}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b002      	add	sp, #8
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	fe3fffff 	.word	0xfe3fffff

08001a94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	23e0      	movs	r3, #224	; 0xe0
 8001aa2:	045b      	lsls	r3, r3, #17
 8001aa4:	4013      	ands	r3, r2
}
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	b002      	add	sp, #8
 8001aac:	bd80      	pop	{r7, pc}

08001aae <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b084      	sub	sp, #16
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	2104      	movs	r1, #4
 8001ac2:	400a      	ands	r2, r1
 8001ac4:	2107      	movs	r1, #7
 8001ac6:	4091      	lsls	r1, r2
 8001ac8:	000a      	movs	r2, r1
 8001aca:	43d2      	mvns	r2, r2
 8001acc:	401a      	ands	r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2104      	movs	r1, #4
 8001ad2:	400b      	ands	r3, r1
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	4099      	lsls	r1, r3
 8001ad8:	000b      	movs	r3, r1
 8001ada:	431a      	orrs	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001ae0:	46c0      	nop			; (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b004      	add	sp, #16
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	2104      	movs	r1, #4
 8001afa:	400a      	ands	r2, r1
 8001afc:	2107      	movs	r1, #7
 8001afe:	4091      	lsls	r1, r2
 8001b00:	000a      	movs	r2, r1
 8001b02:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	2104      	movs	r1, #4
 8001b08:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001b0a:	40da      	lsrs	r2, r3
 8001b0c:	0013      	movs	r3, r2
}
 8001b0e:	0018      	movs	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b002      	add	sp, #8
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b084      	sub	sp, #16
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	211f      	movs	r1, #31
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	210f      	movs	r1, #15
 8001b2e:	4091      	lsls	r1, r2
 8001b30:	000a      	movs	r2, r1
 8001b32:	43d2      	mvns	r2, r2
 8001b34:	401a      	ands	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	0e9b      	lsrs	r3, r3, #26
 8001b3a:	210f      	movs	r1, #15
 8001b3c:	4019      	ands	r1, r3
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	201f      	movs	r0, #31
 8001b42:	4003      	ands	r3, r0
 8001b44:	4099      	lsls	r1, r3
 8001b46:	000b      	movs	r3, r1
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b004      	add	sp, #16
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	035b      	lsls	r3, r3, #13
 8001b68:	0b5b      	lsrs	r3, r3, #13
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b70:	46c0      	nop			; (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b002      	add	sp, #8
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	0352      	lsls	r2, r2, #13
 8001b8a:	0b52      	lsrs	r2, r2, #13
 8001b8c:	43d2      	mvns	r2, r2
 8001b8e:	401a      	ands	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b94:	46c0      	nop			; (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b002      	add	sp, #8
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	0212      	lsls	r2, r2, #8
 8001bb0:	43d2      	mvns	r2, r2
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	400b      	ands	r3, r1
 8001bbc:	4904      	ldr	r1, [pc, #16]	; (8001bd0 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001bbe:	400b      	ands	r3, r1
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b004      	add	sp, #16
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	07ffff00 	.word	0x07ffff00

08001bd4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <LL_ADC_EnableInternalRegulator+0x24>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	2280      	movs	r2, #128	; 0x80
 8001be6:	0552      	lsls	r2, r2, #21
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	6fffffe8 	.word	0x6fffffe8

08001bfc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	055b      	lsls	r3, r3, #21
 8001c0c:	401a      	ands	r2, r3
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	055b      	lsls	r3, r3, #21
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d101      	bne.n	8001c1a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b002      	add	sp, #8
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2201      	movs	r2, #1
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <LL_ADC_IsEnabled+0x18>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <LL_ADC_IsEnabled+0x1a>
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	0018      	movs	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b002      	add	sp, #8
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2204      	movs	r2, #4
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d101      	bne.n	8001c5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	0018      	movs	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b002      	add	sp, #8
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c70:	231f      	movs	r3, #31
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e17f      	b.n	8001f8e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10a      	bne.n	8001cac <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f7fe fc1f 	bl	80004dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2254      	movs	r2, #84	; 0x54
 8001ca8:	2100      	movs	r1, #0
 8001caa:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f7ff ffa3 	bl	8001bfc <LL_ADC_IsInternalRegulatorEnabled>
 8001cb6:	1e03      	subs	r3, r0, #0
 8001cb8:	d115      	bne.n	8001ce6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f7ff ff88 	bl	8001bd4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cc4:	4bb4      	ldr	r3, [pc, #720]	; (8001f98 <HAL_ADC_Init+0x330>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	49b4      	ldr	r1, [pc, #720]	; (8001f9c <HAL_ADC_Init+0x334>)
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f7fe fa26 	bl	800011c <__udivsi3>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cd8:	e002      	b.n	8001ce0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f9      	bne.n	8001cda <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	0018      	movs	r0, r3
 8001cec:	f7ff ff86 	bl	8001bfc <LL_ADC_IsInternalRegulatorEnabled>
 8001cf0:	1e03      	subs	r3, r0, #0
 8001cf2:	d10f      	bne.n	8001d14 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf8:	2210      	movs	r2, #16
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d04:	2201      	movs	r2, #1
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d0c:	231f      	movs	r3, #31
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	2201      	movs	r2, #1
 8001d12:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f7ff ff94 	bl	8001c46 <LL_ADC_REG_IsConversionOngoing>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d26:	2210      	movs	r2, #16
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d000      	beq.n	8001d2e <HAL_ADC_Init+0xc6>
 8001d2c:	e122      	b.n	8001f74 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d000      	beq.n	8001d36 <HAL_ADC_Init+0xce>
 8001d34:	e11e      	b.n	8001f74 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3a:	4a99      	ldr	r2, [pc, #612]	; (8001fa0 <HAL_ADC_Init+0x338>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2202      	movs	r2, #2
 8001d40:	431a      	orrs	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f7ff ff6a 	bl	8001c24 <LL_ADC_IsEnabled>
 8001d50:	1e03      	subs	r3, r0, #0
 8001d52:	d000      	beq.n	8001d56 <HAL_ADC_Init+0xee>
 8001d54:	e0ad      	b.n	8001eb2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	7e1b      	ldrb	r3, [r3, #24]
 8001d5e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001d60:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	7e5b      	ldrb	r3, [r3, #25]
 8001d66:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001d68:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7e9b      	ldrb	r3, [r3, #26]
 8001d6e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001d70:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <HAL_ADC_Init+0x118>
 8001d7a:	2380      	movs	r3, #128	; 0x80
 8001d7c:	015b      	lsls	r3, r3, #5
 8001d7e:	e000      	b.n	8001d82 <HAL_ADC_Init+0x11a>
 8001d80:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001d82:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001d88:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	da04      	bge.n	8001d9c <HAL_ADC_Init+0x134>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	085b      	lsrs	r3, r3, #1
 8001d9a:	e001      	b.n	8001da0 <HAL_ADC_Init+0x138>
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001da0:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	212c      	movs	r1, #44	; 0x2c
 8001da6:	5c5b      	ldrb	r3, [r3, r1]
 8001da8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001daa:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2220      	movs	r2, #32
 8001db6:	5c9b      	ldrb	r3, [r3, r2]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d115      	bne.n	8001de8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7e9b      	ldrb	r3, [r3, #26]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d105      	bne.n	8001dd0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2280      	movs	r2, #128	; 0x80
 8001dc8:	0252      	lsls	r2, r2, #9
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
 8001dce:	e00b      	b.n	8001de8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de0:	2201      	movs	r2, #1
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00a      	beq.n	8001e06 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001df4:	23e0      	movs	r3, #224	; 0xe0
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4a65      	ldr	r2, [pc, #404]	; (8001fa4 <HAL_ADC_Init+0x33c>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	0019      	movs	r1, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	0f9b      	lsrs	r3, r3, #30
 8001e22:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	223c      	movs	r2, #60	; 0x3c
 8001e34:	5c9b      	ldrb	r3, [r3, r2]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d111      	bne.n	8001e5e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	0f9b      	lsrs	r3, r3, #30
 8001e40:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e46:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001e4c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001e52:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	2201      	movs	r2, #1
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	4a50      	ldr	r2, [pc, #320]	; (8001fa8 <HAL_ADC_Init+0x340>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	0019      	movs	r1, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	23c0      	movs	r3, #192	; 0xc0
 8001e7a:	061b      	lsls	r3, r3, #24
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d018      	beq.n	8001eb2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	05db      	lsls	r3, r3, #23
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d012      	beq.n	8001eb2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	061b      	lsls	r3, r3, #24
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d00c      	beq.n	8001eb2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001e98:	4b44      	ldr	r3, [pc, #272]	; (8001fac <HAL_ADC_Init+0x344>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a44      	ldr	r2, [pc, #272]	; (8001fb0 <HAL_ADC_Init+0x348>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	23f0      	movs	r3, #240	; 0xf0
 8001ea8:	039b      	lsls	r3, r3, #14
 8001eaa:	401a      	ands	r2, r3
 8001eac:	4b3f      	ldr	r3, [pc, #252]	; (8001fac <HAL_ADC_Init+0x344>)
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eba:	001a      	movs	r2, r3
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	f7ff fdf6 	bl	8001aae <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eca:	493a      	ldr	r1, [pc, #232]	; (8001fb4 <HAL_ADC_Init+0x34c>)
 8001ecc:	001a      	movs	r2, r3
 8001ece:	f7ff fdee 	bl	8001aae <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2110      	movs	r1, #16
 8001ee6:	4249      	negs	r1, r1
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	629a      	str	r2, [r3, #40]	; 0x28
 8001eec:	e018      	b.n	8001f20 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691a      	ldr	r2, [r3, #16]
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	039b      	lsls	r3, r3, #14
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d112      	bne.n	8001f20 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	221c      	movs	r2, #28
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2210      	movs	r2, #16
 8001f0e:	4252      	negs	r2, r2
 8001f10:	409a      	lsls	r2, r3
 8001f12:	0011      	movs	r1, r2
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2100      	movs	r1, #0
 8001f26:	0018      	movs	r0, r3
 8001f28:	f7ff fdde 	bl	8001ae8 <LL_ADC_GetSamplingTimeCommonChannels>
 8001f2c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d10b      	bne.n	8001f4e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f40:	2203      	movs	r2, #3
 8001f42:	4393      	bics	r3, r2
 8001f44:	2201      	movs	r2, #1
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f4c:	e01c      	b.n	8001f88 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	2212      	movs	r2, #18
 8001f54:	4393      	bics	r3, r2
 8001f56:	2210      	movs	r2, #16
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f62:	2201      	movs	r2, #1
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001f6a:	231f      	movs	r3, #31
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	2201      	movs	r2, #1
 8001f70:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f72:	e009      	b.n	8001f88 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	2210      	movs	r2, #16
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f80:	231f      	movs	r3, #31
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001f88:	231f      	movs	r3, #31
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	781b      	ldrb	r3, [r3, #0]
}
 8001f8e:	0018      	movs	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b008      	add	sp, #32
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	00030d40 	.word	0x00030d40
 8001fa0:	fffffefd 	.word	0xfffffefd
 8001fa4:	fffe0201 	.word	0xfffe0201
 8001fa8:	1ffffc02 	.word	0x1ffffc02
 8001fac:	40012708 	.word	0x40012708
 8001fb0:	ffc3ffff 	.word	0xffc3ffff
 8001fb4:	07ffff04 	.word	0x07ffff04

08001fb8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc2:	2317      	movs	r3, #23
 8001fc4:	18fb      	adds	r3, r7, r3
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2254      	movs	r2, #84	; 0x54
 8001fd2:	5c9b      	ldrb	r3, [r3, r2]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x24>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e1c0      	b.n	800235e <HAL_ADC_ConfigChannel+0x3a6>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2254      	movs	r2, #84	; 0x54
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f7ff fe2c 	bl	8001c46 <LL_ADC_REG_IsConversionOngoing>
 8001fee:	1e03      	subs	r3, r0, #0
 8001ff0:	d000      	beq.n	8001ff4 <HAL_ADC_ConfigChannel+0x3c>
 8001ff2:	e1a3      	b.n	800233c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d100      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x46>
 8001ffc:	e143      	b.n	8002286 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691a      	ldr	r2, [r3, #16]
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	061b      	lsls	r3, r3, #24
 8002006:	429a      	cmp	r2, r3
 8002008:	d004      	beq.n	8002014 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800200e:	4ac1      	ldr	r2, [pc, #772]	; (8002314 <HAL_ADC_ConfigChannel+0x35c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d108      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	0019      	movs	r1, r3
 800201e:	0010      	movs	r0, r2
 8002020:	f7ff fd99 	bl	8001b56 <LL_ADC_REG_SetSequencerChAdd>
 8002024:	e0c9      	b.n	80021ba <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	211f      	movs	r1, #31
 8002030:	400b      	ands	r3, r1
 8002032:	210f      	movs	r1, #15
 8002034:	4099      	lsls	r1, r3
 8002036:	000b      	movs	r3, r1
 8002038:	43db      	mvns	r3, r3
 800203a:	4013      	ands	r3, r2
 800203c:	0019      	movs	r1, r3
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	035b      	lsls	r3, r3, #13
 8002044:	0b5b      	lsrs	r3, r3, #13
 8002046:	d105      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x9c>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	0e9b      	lsrs	r3, r3, #26
 800204e:	221f      	movs	r2, #31
 8002050:	4013      	ands	r3, r2
 8002052:	e098      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2201      	movs	r2, #1
 800205a:	4013      	ands	r3, r2
 800205c:	d000      	beq.n	8002060 <HAL_ADC_ConfigChannel+0xa8>
 800205e:	e091      	b.n	8002184 <HAL_ADC_ConfigChannel+0x1cc>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2202      	movs	r2, #2
 8002066:	4013      	ands	r3, r2
 8002068:	d000      	beq.n	800206c <HAL_ADC_ConfigChannel+0xb4>
 800206a:	e089      	b.n	8002180 <HAL_ADC_ConfigChannel+0x1c8>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2204      	movs	r2, #4
 8002072:	4013      	ands	r3, r2
 8002074:	d000      	beq.n	8002078 <HAL_ADC_ConfigChannel+0xc0>
 8002076:	e081      	b.n	800217c <HAL_ADC_ConfigChannel+0x1c4>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2208      	movs	r2, #8
 800207e:	4013      	ands	r3, r2
 8002080:	d000      	beq.n	8002084 <HAL_ADC_ConfigChannel+0xcc>
 8002082:	e079      	b.n	8002178 <HAL_ADC_ConfigChannel+0x1c0>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2210      	movs	r2, #16
 800208a:	4013      	ands	r3, r2
 800208c:	d000      	beq.n	8002090 <HAL_ADC_ConfigChannel+0xd8>
 800208e:	e071      	b.n	8002174 <HAL_ADC_ConfigChannel+0x1bc>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2220      	movs	r2, #32
 8002096:	4013      	ands	r3, r2
 8002098:	d000      	beq.n	800209c <HAL_ADC_ConfigChannel+0xe4>
 800209a:	e069      	b.n	8002170 <HAL_ADC_ConfigChannel+0x1b8>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2240      	movs	r2, #64	; 0x40
 80020a2:	4013      	ands	r3, r2
 80020a4:	d000      	beq.n	80020a8 <HAL_ADC_ConfigChannel+0xf0>
 80020a6:	e061      	b.n	800216c <HAL_ADC_ConfigChannel+0x1b4>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2280      	movs	r2, #128	; 0x80
 80020ae:	4013      	ands	r3, r2
 80020b0:	d000      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0xfc>
 80020b2:	e059      	b.n	8002168 <HAL_ADC_ConfigChannel+0x1b0>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4013      	ands	r3, r2
 80020be:	d151      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x1ac>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	2380      	movs	r3, #128	; 0x80
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4013      	ands	r3, r2
 80020ca:	d149      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x1a8>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4013      	ands	r3, r2
 80020d6:	d141      	bne.n	800215c <HAL_ADC_ConfigChannel+0x1a4>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	4013      	ands	r3, r2
 80020e2:	d139      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x1a0>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	015b      	lsls	r3, r3, #5
 80020ec:	4013      	ands	r3, r2
 80020ee:	d131      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x19c>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	019b      	lsls	r3, r3, #6
 80020f8:	4013      	ands	r3, r2
 80020fa:	d129      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x198>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	01db      	lsls	r3, r3, #7
 8002104:	4013      	ands	r3, r2
 8002106:	d121      	bne.n	800214c <HAL_ADC_ConfigChannel+0x194>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	4013      	ands	r3, r2
 8002112:	d119      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x190>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	025b      	lsls	r3, r3, #9
 800211c:	4013      	ands	r3, r2
 800211e:	d111      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x18c>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	029b      	lsls	r3, r3, #10
 8002128:	4013      	ands	r3, r2
 800212a:	d109      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x188>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	02db      	lsls	r3, r3, #11
 8002134:	4013      	ands	r3, r2
 8002136:	d001      	beq.n	800213c <HAL_ADC_ConfigChannel+0x184>
 8002138:	2312      	movs	r3, #18
 800213a:	e024      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 800213c:	2300      	movs	r3, #0
 800213e:	e022      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002140:	2311      	movs	r3, #17
 8002142:	e020      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002144:	2310      	movs	r3, #16
 8002146:	e01e      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002148:	230f      	movs	r3, #15
 800214a:	e01c      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 800214c:	230e      	movs	r3, #14
 800214e:	e01a      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002150:	230d      	movs	r3, #13
 8002152:	e018      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002154:	230c      	movs	r3, #12
 8002156:	e016      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002158:	230b      	movs	r3, #11
 800215a:	e014      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 800215c:	230a      	movs	r3, #10
 800215e:	e012      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002160:	2309      	movs	r3, #9
 8002162:	e010      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002164:	2308      	movs	r3, #8
 8002166:	e00e      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002168:	2307      	movs	r3, #7
 800216a:	e00c      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 800216c:	2306      	movs	r3, #6
 800216e:	e00a      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002170:	2305      	movs	r3, #5
 8002172:	e008      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002174:	2304      	movs	r3, #4
 8002176:	e006      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002178:	2303      	movs	r3, #3
 800217a:	e004      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 800217c:	2302      	movs	r3, #2
 800217e:	e002      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1ce>
 8002184:	2300      	movs	r3, #0
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	6852      	ldr	r2, [r2, #4]
 800218a:	201f      	movs	r0, #31
 800218c:	4002      	ands	r2, r0
 800218e:	4093      	lsls	r3, r2
 8002190:	000a      	movs	r2, r1
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d808      	bhi.n	80021ba <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	6859      	ldr	r1, [r3, #4]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	001a      	movs	r2, r3
 80021b6:	f7ff fcae 	bl	8001b16 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	6819      	ldr	r1, [r3, #0]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	001a      	movs	r2, r3
 80021c8:	f7ff fce8 	bl	8001b9c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	db00      	blt.n	80021d6 <HAL_ADC_ConfigChannel+0x21e>
 80021d4:	e0bc      	b.n	8002350 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021d6:	4b50      	ldr	r3, [pc, #320]	; (8002318 <HAL_ADC_ConfigChannel+0x360>)
 80021d8:	0018      	movs	r0, r3
 80021da:	f7ff fc5b 	bl	8001a94 <LL_ADC_GetCommonPathInternalCh>
 80021de:	0003      	movs	r3, r0
 80021e0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a4d      	ldr	r2, [pc, #308]	; (800231c <HAL_ADC_ConfigChannel+0x364>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d122      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	041b      	lsls	r3, r3, #16
 80021f2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021f4:	d11d      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2280      	movs	r2, #128	; 0x80
 80021fa:	0412      	lsls	r2, r2, #16
 80021fc:	4313      	orrs	r3, r2
 80021fe:	4a46      	ldr	r2, [pc, #280]	; (8002318 <HAL_ADC_ConfigChannel+0x360>)
 8002200:	0019      	movs	r1, r3
 8002202:	0010      	movs	r0, r2
 8002204:	f7ff fc32 	bl	8001a6c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002208:	4b45      	ldr	r3, [pc, #276]	; (8002320 <HAL_ADC_ConfigChannel+0x368>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4945      	ldr	r1, [pc, #276]	; (8002324 <HAL_ADC_ConfigChannel+0x36c>)
 800220e:	0018      	movs	r0, r3
 8002210:	f7fd ff84 	bl	800011c <__udivsi3>
 8002214:	0003      	movs	r3, r0
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	0013      	movs	r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	189b      	adds	r3, r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002222:	e002      	b.n	800222a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	3b01      	subs	r3, #1
 8002228:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f9      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002230:	e08e      	b.n	8002350 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a3c      	ldr	r2, [pc, #240]	; (8002328 <HAL_ADC_ConfigChannel+0x370>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d10e      	bne.n	800225a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	2380      	movs	r3, #128	; 0x80
 8002240:	045b      	lsls	r3, r3, #17
 8002242:	4013      	ands	r3, r2
 8002244:	d109      	bne.n	800225a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2280      	movs	r2, #128	; 0x80
 800224a:	0452      	lsls	r2, r2, #17
 800224c:	4313      	orrs	r3, r2
 800224e:	4a32      	ldr	r2, [pc, #200]	; (8002318 <HAL_ADC_ConfigChannel+0x360>)
 8002250:	0019      	movs	r1, r3
 8002252:	0010      	movs	r0, r2
 8002254:	f7ff fc0a 	bl	8001a6c <LL_ADC_SetCommonPathInternalCh>
 8002258:	e07a      	b.n	8002350 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a33      	ldr	r2, [pc, #204]	; (800232c <HAL_ADC_ConfigChannel+0x374>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d000      	beq.n	8002266 <HAL_ADC_ConfigChannel+0x2ae>
 8002264:	e074      	b.n	8002350 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	03db      	lsls	r3, r3, #15
 800226c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800226e:	d000      	beq.n	8002272 <HAL_ADC_ConfigChannel+0x2ba>
 8002270:	e06e      	b.n	8002350 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2280      	movs	r2, #128	; 0x80
 8002276:	03d2      	lsls	r2, r2, #15
 8002278:	4313      	orrs	r3, r2
 800227a:	4a27      	ldr	r2, [pc, #156]	; (8002318 <HAL_ADC_ConfigChannel+0x360>)
 800227c:	0019      	movs	r1, r3
 800227e:	0010      	movs	r0, r2
 8002280:	f7ff fbf4 	bl	8001a6c <LL_ADC_SetCommonPathInternalCh>
 8002284:	e064      	b.n	8002350 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	061b      	lsls	r3, r3, #24
 800228e:	429a      	cmp	r2, r3
 8002290:	d004      	beq.n	800229c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002296:	4a1f      	ldr	r2, [pc, #124]	; (8002314 <HAL_ADC_ConfigChannel+0x35c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d107      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	0019      	movs	r1, r3
 80022a6:	0010      	movs	r0, r2
 80022a8:	f7ff fc66 	bl	8001b78 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	da4d      	bge.n	8002350 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <HAL_ADC_ConfigChannel+0x360>)
 80022b6:	0018      	movs	r0, r3
 80022b8:	f7ff fbec 	bl	8001a94 <LL_ADC_GetCommonPathInternalCh>
 80022bc:	0003      	movs	r3, r0
 80022be:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a15      	ldr	r2, [pc, #84]	; (800231c <HAL_ADC_ConfigChannel+0x364>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d108      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4a18      	ldr	r2, [pc, #96]	; (8002330 <HAL_ADC_ConfigChannel+0x378>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	4a11      	ldr	r2, [pc, #68]	; (8002318 <HAL_ADC_ConfigChannel+0x360>)
 80022d2:	0019      	movs	r1, r3
 80022d4:	0010      	movs	r0, r2
 80022d6:	f7ff fbc9 	bl	8001a6c <LL_ADC_SetCommonPathInternalCh>
 80022da:	e039      	b.n	8002350 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a11      	ldr	r2, [pc, #68]	; (8002328 <HAL_ADC_ConfigChannel+0x370>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d108      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4a12      	ldr	r2, [pc, #72]	; (8002334 <HAL_ADC_ConfigChannel+0x37c>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <HAL_ADC_ConfigChannel+0x360>)
 80022ee:	0019      	movs	r1, r3
 80022f0:	0010      	movs	r0, r2
 80022f2:	f7ff fbbb 	bl	8001a6c <LL_ADC_SetCommonPathInternalCh>
 80022f6:	e02b      	b.n	8002350 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a0b      	ldr	r2, [pc, #44]	; (800232c <HAL_ADC_ConfigChannel+0x374>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d126      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4a0c      	ldr	r2, [pc, #48]	; (8002338 <HAL_ADC_ConfigChannel+0x380>)
 8002306:	4013      	ands	r3, r2
 8002308:	4a03      	ldr	r2, [pc, #12]	; (8002318 <HAL_ADC_ConfigChannel+0x360>)
 800230a:	0019      	movs	r1, r3
 800230c:	0010      	movs	r0, r2
 800230e:	f7ff fbad 	bl	8001a6c <LL_ADC_SetCommonPathInternalCh>
 8002312:	e01d      	b.n	8002350 <HAL_ADC_ConfigChannel+0x398>
 8002314:	80000004 	.word	0x80000004
 8002318:	40012708 	.word	0x40012708
 800231c:	b0001000 	.word	0xb0001000
 8002320:	20000000 	.word	0x20000000
 8002324:	00030d40 	.word	0x00030d40
 8002328:	b8004000 	.word	0xb8004000
 800232c:	b4002000 	.word	0xb4002000
 8002330:	ff7fffff 	.word	0xff7fffff
 8002334:	feffffff 	.word	0xfeffffff
 8002338:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002340:	2220      	movs	r2, #32
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002348:	2317      	movs	r3, #23
 800234a:	18fb      	adds	r3, r7, r3
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2254      	movs	r2, #84	; 0x54
 8002354:	2100      	movs	r1, #0
 8002356:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002358:	2317      	movs	r3, #23
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	781b      	ldrb	r3, [r3, #0]
}
 800235e:	0018      	movs	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	b006      	add	sp, #24
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			; (mov r8, r8)

08002368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	0002      	movs	r2, r0
 8002370:	1dfb      	adds	r3, r7, #7
 8002372:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002374:	1dfb      	adds	r3, r7, #7
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b7f      	cmp	r3, #127	; 0x7f
 800237a:	d809      	bhi.n	8002390 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237c:	1dfb      	adds	r3, r7, #7
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	001a      	movs	r2, r3
 8002382:	231f      	movs	r3, #31
 8002384:	401a      	ands	r2, r3
 8002386:	4b04      	ldr	r3, [pc, #16]	; (8002398 <__NVIC_EnableIRQ+0x30>)
 8002388:	2101      	movs	r1, #1
 800238a:	4091      	lsls	r1, r2
 800238c:	000a      	movs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002390:	46c0      	nop			; (mov r8, r8)
 8002392:	46bd      	mov	sp, r7
 8002394:	b002      	add	sp, #8
 8002396:	bd80      	pop	{r7, pc}
 8002398:	e000e100 	.word	0xe000e100

0800239c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	0002      	movs	r2, r0
 80023a4:	6039      	str	r1, [r7, #0]
 80023a6:	1dfb      	adds	r3, r7, #7
 80023a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023aa:	1dfb      	adds	r3, r7, #7
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b7f      	cmp	r3, #127	; 0x7f
 80023b0:	d828      	bhi.n	8002404 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023b2:	4a2f      	ldr	r2, [pc, #188]	; (8002470 <__NVIC_SetPriority+0xd4>)
 80023b4:	1dfb      	adds	r3, r7, #7
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	b25b      	sxtb	r3, r3
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	33c0      	adds	r3, #192	; 0xc0
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	589b      	ldr	r3, [r3, r2]
 80023c2:	1dfa      	adds	r2, r7, #7
 80023c4:	7812      	ldrb	r2, [r2, #0]
 80023c6:	0011      	movs	r1, r2
 80023c8:	2203      	movs	r2, #3
 80023ca:	400a      	ands	r2, r1
 80023cc:	00d2      	lsls	r2, r2, #3
 80023ce:	21ff      	movs	r1, #255	; 0xff
 80023d0:	4091      	lsls	r1, r2
 80023d2:	000a      	movs	r2, r1
 80023d4:	43d2      	mvns	r2, r2
 80023d6:	401a      	ands	r2, r3
 80023d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	019b      	lsls	r3, r3, #6
 80023de:	22ff      	movs	r2, #255	; 0xff
 80023e0:	401a      	ands	r2, r3
 80023e2:	1dfb      	adds	r3, r7, #7
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	0018      	movs	r0, r3
 80023e8:	2303      	movs	r3, #3
 80023ea:	4003      	ands	r3, r0
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023f0:	481f      	ldr	r0, [pc, #124]	; (8002470 <__NVIC_SetPriority+0xd4>)
 80023f2:	1dfb      	adds	r3, r7, #7
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	b25b      	sxtb	r3, r3
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	430a      	orrs	r2, r1
 80023fc:	33c0      	adds	r3, #192	; 0xc0
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002402:	e031      	b.n	8002468 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002404:	4a1b      	ldr	r2, [pc, #108]	; (8002474 <__NVIC_SetPriority+0xd8>)
 8002406:	1dfb      	adds	r3, r7, #7
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	0019      	movs	r1, r3
 800240c:	230f      	movs	r3, #15
 800240e:	400b      	ands	r3, r1
 8002410:	3b08      	subs	r3, #8
 8002412:	089b      	lsrs	r3, r3, #2
 8002414:	3306      	adds	r3, #6
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	18d3      	adds	r3, r2, r3
 800241a:	3304      	adds	r3, #4
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	1dfa      	adds	r2, r7, #7
 8002420:	7812      	ldrb	r2, [r2, #0]
 8002422:	0011      	movs	r1, r2
 8002424:	2203      	movs	r2, #3
 8002426:	400a      	ands	r2, r1
 8002428:	00d2      	lsls	r2, r2, #3
 800242a:	21ff      	movs	r1, #255	; 0xff
 800242c:	4091      	lsls	r1, r2
 800242e:	000a      	movs	r2, r1
 8002430:	43d2      	mvns	r2, r2
 8002432:	401a      	ands	r2, r3
 8002434:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	019b      	lsls	r3, r3, #6
 800243a:	22ff      	movs	r2, #255	; 0xff
 800243c:	401a      	ands	r2, r3
 800243e:	1dfb      	adds	r3, r7, #7
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	0018      	movs	r0, r3
 8002444:	2303      	movs	r3, #3
 8002446:	4003      	ands	r3, r0
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800244c:	4809      	ldr	r0, [pc, #36]	; (8002474 <__NVIC_SetPriority+0xd8>)
 800244e:	1dfb      	adds	r3, r7, #7
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	001c      	movs	r4, r3
 8002454:	230f      	movs	r3, #15
 8002456:	4023      	ands	r3, r4
 8002458:	3b08      	subs	r3, #8
 800245a:	089b      	lsrs	r3, r3, #2
 800245c:	430a      	orrs	r2, r1
 800245e:	3306      	adds	r3, #6
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	18c3      	adds	r3, r0, r3
 8002464:	3304      	adds	r3, #4
 8002466:	601a      	str	r2, [r3, #0]
}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	b003      	add	sp, #12
 800246e:	bd90      	pop	{r4, r7, pc}
 8002470:	e000e100 	.word	0xe000e100
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	210f      	movs	r1, #15
 8002484:	187b      	adds	r3, r7, r1
 8002486:	1c02      	adds	r2, r0, #0
 8002488:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	187b      	adds	r3, r7, r1
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	b25b      	sxtb	r3, r3
 8002492:	0011      	movs	r1, r2
 8002494:	0018      	movs	r0, r3
 8002496:	f7ff ff81 	bl	800239c <__NVIC_SetPriority>
}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b004      	add	sp, #16
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	0002      	movs	r2, r0
 80024aa:	1dfb      	adds	r3, r7, #7
 80024ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ae:	1dfb      	adds	r3, r7, #7
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	b25b      	sxtb	r3, r3
 80024b4:	0018      	movs	r0, r3
 80024b6:	f7ff ff57 	bl	8002368 <__NVIC_EnableIRQ>
}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	46bd      	mov	sp, r7
 80024be:	b002      	add	sp, #8
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d2:	e147      	b.n	8002764 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2101      	movs	r1, #1
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4091      	lsls	r1, r2
 80024de:	000a      	movs	r2, r1
 80024e0:	4013      	ands	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d100      	bne.n	80024ec <HAL_GPIO_Init+0x28>
 80024ea:	e138      	b.n	800275e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2203      	movs	r2, #3
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d005      	beq.n	8002504 <HAL_GPIO_Init+0x40>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2203      	movs	r2, #3
 80024fe:	4013      	ands	r3, r2
 8002500:	2b02      	cmp	r3, #2
 8002502:	d130      	bne.n	8002566 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	2203      	movs	r2, #3
 8002510:	409a      	lsls	r2, r3
 8002512:	0013      	movs	r3, r2
 8002514:	43da      	mvns	r2, r3
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	409a      	lsls	r2, r3
 8002526:	0013      	movs	r3, r2
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800253a:	2201      	movs	r2, #1
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	409a      	lsls	r2, r3
 8002540:	0013      	movs	r3, r2
 8002542:	43da      	mvns	r2, r3
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	091b      	lsrs	r3, r3, #4
 8002550:	2201      	movs	r2, #1
 8002552:	401a      	ands	r2, r3
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	409a      	lsls	r2, r3
 8002558:	0013      	movs	r3, r2
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2203      	movs	r2, #3
 800256c:	4013      	ands	r3, r2
 800256e:	2b03      	cmp	r3, #3
 8002570:	d017      	beq.n	80025a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	2203      	movs	r2, #3
 800257e:	409a      	lsls	r2, r3
 8002580:	0013      	movs	r3, r2
 8002582:	43da      	mvns	r2, r3
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	409a      	lsls	r2, r3
 8002594:	0013      	movs	r3, r2
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2203      	movs	r2, #3
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d123      	bne.n	80025f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	08da      	lsrs	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3208      	adds	r2, #8
 80025b6:	0092      	lsls	r2, r2, #2
 80025b8:	58d3      	ldr	r3, [r2, r3]
 80025ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	2207      	movs	r2, #7
 80025c0:	4013      	ands	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	220f      	movs	r2, #15
 80025c6:	409a      	lsls	r2, r3
 80025c8:	0013      	movs	r3, r2
 80025ca:	43da      	mvns	r2, r3
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4013      	ands	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2107      	movs	r1, #7
 80025da:	400b      	ands	r3, r1
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	409a      	lsls	r2, r3
 80025e0:	0013      	movs	r3, r2
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	08da      	lsrs	r2, r3, #3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3208      	adds	r2, #8
 80025f0:	0092      	lsls	r2, r2, #2
 80025f2:	6939      	ldr	r1, [r7, #16]
 80025f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	2203      	movs	r2, #3
 8002602:	409a      	lsls	r2, r3
 8002604:	0013      	movs	r3, r2
 8002606:	43da      	mvns	r2, r3
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4013      	ands	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2203      	movs	r2, #3
 8002614:	401a      	ands	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	409a      	lsls	r2, r3
 800261c:	0013      	movs	r3, r2
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	23c0      	movs	r3, #192	; 0xc0
 8002630:	029b      	lsls	r3, r3, #10
 8002632:	4013      	ands	r3, r2
 8002634:	d100      	bne.n	8002638 <HAL_GPIO_Init+0x174>
 8002636:	e092      	b.n	800275e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002638:	4a50      	ldr	r2, [pc, #320]	; (800277c <HAL_GPIO_Init+0x2b8>)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	089b      	lsrs	r3, r3, #2
 800263e:	3318      	adds	r3, #24
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	589b      	ldr	r3, [r3, r2]
 8002644:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2203      	movs	r2, #3
 800264a:	4013      	ands	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	220f      	movs	r2, #15
 8002650:	409a      	lsls	r2, r3
 8002652:	0013      	movs	r3, r2
 8002654:	43da      	mvns	r2, r3
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	23a0      	movs	r3, #160	; 0xa0
 8002660:	05db      	lsls	r3, r3, #23
 8002662:	429a      	cmp	r2, r3
 8002664:	d013      	beq.n	800268e <HAL_GPIO_Init+0x1ca>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a45      	ldr	r2, [pc, #276]	; (8002780 <HAL_GPIO_Init+0x2bc>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d00d      	beq.n	800268a <HAL_GPIO_Init+0x1c6>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a44      	ldr	r2, [pc, #272]	; (8002784 <HAL_GPIO_Init+0x2c0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d007      	beq.n	8002686 <HAL_GPIO_Init+0x1c2>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a43      	ldr	r2, [pc, #268]	; (8002788 <HAL_GPIO_Init+0x2c4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d101      	bne.n	8002682 <HAL_GPIO_Init+0x1be>
 800267e:	2303      	movs	r3, #3
 8002680:	e006      	b.n	8002690 <HAL_GPIO_Init+0x1cc>
 8002682:	2305      	movs	r3, #5
 8002684:	e004      	b.n	8002690 <HAL_GPIO_Init+0x1cc>
 8002686:	2302      	movs	r3, #2
 8002688:	e002      	b.n	8002690 <HAL_GPIO_Init+0x1cc>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <HAL_GPIO_Init+0x1cc>
 800268e:	2300      	movs	r3, #0
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	2103      	movs	r1, #3
 8002694:	400a      	ands	r2, r1
 8002696:	00d2      	lsls	r2, r2, #3
 8002698:	4093      	lsls	r3, r2
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80026a0:	4936      	ldr	r1, [pc, #216]	; (800277c <HAL_GPIO_Init+0x2b8>)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	089b      	lsrs	r3, r3, #2
 80026a6:	3318      	adds	r3, #24
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026ae:	4b33      	ldr	r3, [pc, #204]	; (800277c <HAL_GPIO_Init+0x2b8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	43da      	mvns	r2, r3
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4013      	ands	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	2380      	movs	r3, #128	; 0x80
 80026c4:	035b      	lsls	r3, r3, #13
 80026c6:	4013      	ands	r3, r2
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026d2:	4b2a      	ldr	r3, [pc, #168]	; (800277c <HAL_GPIO_Init+0x2b8>)
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80026d8:	4b28      	ldr	r3, [pc, #160]	; (800277c <HAL_GPIO_Init+0x2b8>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	43da      	mvns	r2, r3
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4013      	ands	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	2380      	movs	r3, #128	; 0x80
 80026ee:	039b      	lsls	r3, r3, #14
 80026f0:	4013      	ands	r3, r2
 80026f2:	d003      	beq.n	80026fc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026fc:	4b1f      	ldr	r3, [pc, #124]	; (800277c <HAL_GPIO_Init+0x2b8>)
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002702:	4a1e      	ldr	r2, [pc, #120]	; (800277c <HAL_GPIO_Init+0x2b8>)
 8002704:	2384      	movs	r3, #132	; 0x84
 8002706:	58d3      	ldr	r3, [r2, r3]
 8002708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	43da      	mvns	r2, r3
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	2380      	movs	r3, #128	; 0x80
 800271a:	029b      	lsls	r3, r3, #10
 800271c:	4013      	ands	r3, r2
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002728:	4914      	ldr	r1, [pc, #80]	; (800277c <HAL_GPIO_Init+0x2b8>)
 800272a:	2284      	movs	r2, #132	; 0x84
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002730:	4a12      	ldr	r2, [pc, #72]	; (800277c <HAL_GPIO_Init+0x2b8>)
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	58d3      	ldr	r3, [r2, r3]
 8002736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	43da      	mvns	r2, r3
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4013      	ands	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	2380      	movs	r3, #128	; 0x80
 8002748:	025b      	lsls	r3, r3, #9
 800274a:	4013      	ands	r3, r2
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4313      	orrs	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002756:	4909      	ldr	r1, [pc, #36]	; (800277c <HAL_GPIO_Init+0x2b8>)
 8002758:	2280      	movs	r2, #128	; 0x80
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	3301      	adds	r3, #1
 8002762:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	40da      	lsrs	r2, r3
 800276c:	1e13      	subs	r3, r2, #0
 800276e:	d000      	beq.n	8002772 <HAL_GPIO_Init+0x2ae>
 8002770:	e6b0      	b.n	80024d4 <HAL_GPIO_Init+0x10>
  }
}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	46c0      	nop			; (mov r8, r8)
 8002776:	46bd      	mov	sp, r7
 8002778:	b006      	add	sp, #24
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021800 	.word	0x40021800
 8002780:	50000400 	.word	0x50000400
 8002784:	50000800 	.word	0x50000800
 8002788:	50000c00 	.word	0x50000c00

0800278c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	0008      	movs	r0, r1
 8002796:	0011      	movs	r1, r2
 8002798:	1cbb      	adds	r3, r7, #2
 800279a:	1c02      	adds	r2, r0, #0
 800279c:	801a      	strh	r2, [r3, #0]
 800279e:	1c7b      	adds	r3, r7, #1
 80027a0:	1c0a      	adds	r2, r1, #0
 80027a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027a4:	1c7b      	adds	r3, r7, #1
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d004      	beq.n	80027b6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027ac:	1cbb      	adds	r3, r7, #2
 80027ae:	881a      	ldrh	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027b4:	e003      	b.n	80027be <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027b6:	1cbb      	adds	r3, r7, #2
 80027b8:	881a      	ldrh	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b002      	add	sp, #8
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b084      	sub	sp, #16
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	000a      	movs	r2, r1
 80027d0:	1cbb      	adds	r3, r7, #2
 80027d2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027da:	1cbb      	adds	r3, r7, #2
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4013      	ands	r3, r2
 80027e2:	041a      	lsls	r2, r3, #16
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	1cb9      	adds	r1, r7, #2
 80027ea:	8809      	ldrh	r1, [r1, #0]
 80027ec:	400b      	ands	r3, r1
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	619a      	str	r2, [r3, #24]
}
 80027f4:	46c0      	nop			; (mov r8, r8)
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b004      	add	sp, #16
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	0002      	movs	r2, r0
 8002804:	1dbb      	adds	r3, r7, #6
 8002806:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002808:	4b10      	ldr	r3, [pc, #64]	; (800284c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	1dba      	adds	r2, r7, #6
 800280e:	8812      	ldrh	r2, [r2, #0]
 8002810:	4013      	ands	r3, r2
 8002812:	d008      	beq.n	8002826 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002814:	4b0d      	ldr	r3, [pc, #52]	; (800284c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002816:	1dba      	adds	r2, r7, #6
 8002818:	8812      	ldrh	r2, [r2, #0]
 800281a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800281c:	1dbb      	adds	r3, r7, #6
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	0018      	movs	r0, r3
 8002822:	f7fd fffb 	bl	800081c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	1dba      	adds	r2, r7, #6
 800282c:	8812      	ldrh	r2, [r2, #0]
 800282e:	4013      	ands	r3, r2
 8002830:	d008      	beq.n	8002844 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002834:	1dba      	adds	r2, r7, #6
 8002836:	8812      	ldrh	r2, [r2, #0]
 8002838:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800283a:	1dbb      	adds	r3, r7, #6
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	0018      	movs	r0, r3
 8002840:	f000 f806 	bl	8002850 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002844:	46c0      	nop			; (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	b002      	add	sp, #8
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40021800 	.word	0x40021800

08002850 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	0002      	movs	r2, r0
 8002858:	1dbb      	adds	r3, r7, #6
 800285a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800285c:	46c0      	nop			; (mov r8, r8)
 800285e:	46bd      	mov	sp, r7
 8002860:	b002      	add	sp, #8
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800286c:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a19      	ldr	r2, [pc, #100]	; (80028d8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002872:	4013      	ands	r3, r2
 8002874:	0019      	movs	r1, r3
 8002876:	4b17      	ldr	r3, [pc, #92]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	430a      	orrs	r2, r1
 800287c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	429a      	cmp	r2, r3
 8002886:	d11f      	bne.n	80028c8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002888:	4b14      	ldr	r3, [pc, #80]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	0013      	movs	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	189b      	adds	r3, r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4912      	ldr	r1, [pc, #72]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002896:	0018      	movs	r0, r3
 8002898:	f7fd fc40 	bl	800011c <__udivsi3>
 800289c:	0003      	movs	r3, r0
 800289e:	3301      	adds	r3, #1
 80028a0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028a2:	e008      	b.n	80028b6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	e001      	b.n	80028b6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e009      	b.n	80028ca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80028b8:	695a      	ldr	r2, [r3, #20]
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	401a      	ands	r2, r3
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d0ed      	beq.n	80028a4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	0018      	movs	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b004      	add	sp, #16
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	40007000 	.word	0x40007000
 80028d8:	fffff9ff 	.word	0xfffff9ff
 80028dc:	20000000 	.word	0x20000000
 80028e0:	000f4240 	.word	0x000f4240

080028e4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	23e0      	movs	r3, #224	; 0xe0
 80028ee:	01db      	lsls	r3, r3, #7
 80028f0:	4013      	ands	r3, r2
}
 80028f2:	0018      	movs	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40021000 	.word	0x40021000

080028fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e2f3      	b.n	8002ef6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2201      	movs	r2, #1
 8002914:	4013      	ands	r3, r2
 8002916:	d100      	bne.n	800291a <HAL_RCC_OscConfig+0x1e>
 8002918:	e07c      	b.n	8002a14 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800291a:	4bc3      	ldr	r3, [pc, #780]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2238      	movs	r2, #56	; 0x38
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002924:	4bc0      	ldr	r3, [pc, #768]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	2203      	movs	r2, #3
 800292a:	4013      	ands	r3, r2
 800292c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	2b10      	cmp	r3, #16
 8002932:	d102      	bne.n	800293a <HAL_RCC_OscConfig+0x3e>
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2b03      	cmp	r3, #3
 8002938:	d002      	beq.n	8002940 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	2b08      	cmp	r3, #8
 800293e:	d10b      	bne.n	8002958 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002940:	4bb9      	ldr	r3, [pc, #740]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	029b      	lsls	r3, r3, #10
 8002948:	4013      	ands	r3, r2
 800294a:	d062      	beq.n	8002a12 <HAL_RCC_OscConfig+0x116>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d15e      	bne.n	8002a12 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e2ce      	b.n	8002ef6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	025b      	lsls	r3, r3, #9
 8002960:	429a      	cmp	r2, r3
 8002962:	d107      	bne.n	8002974 <HAL_RCC_OscConfig+0x78>
 8002964:	4bb0      	ldr	r3, [pc, #704]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4baf      	ldr	r3, [pc, #700]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 800296a:	2180      	movs	r1, #128	; 0x80
 800296c:	0249      	lsls	r1, r1, #9
 800296e:	430a      	orrs	r2, r1
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	e020      	b.n	80029b6 <HAL_RCC_OscConfig+0xba>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	23a0      	movs	r3, #160	; 0xa0
 800297a:	02db      	lsls	r3, r3, #11
 800297c:	429a      	cmp	r2, r3
 800297e:	d10e      	bne.n	800299e <HAL_RCC_OscConfig+0xa2>
 8002980:	4ba9      	ldr	r3, [pc, #676]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4ba8      	ldr	r3, [pc, #672]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002986:	2180      	movs	r1, #128	; 0x80
 8002988:	02c9      	lsls	r1, r1, #11
 800298a:	430a      	orrs	r2, r1
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	4ba6      	ldr	r3, [pc, #664]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	4ba5      	ldr	r3, [pc, #660]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002994:	2180      	movs	r1, #128	; 0x80
 8002996:	0249      	lsls	r1, r1, #9
 8002998:	430a      	orrs	r2, r1
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	e00b      	b.n	80029b6 <HAL_RCC_OscConfig+0xba>
 800299e:	4ba2      	ldr	r3, [pc, #648]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	4ba1      	ldr	r3, [pc, #644]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 80029a4:	49a1      	ldr	r1, [pc, #644]	; (8002c2c <HAL_RCC_OscConfig+0x330>)
 80029a6:	400a      	ands	r2, r1
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	4b9f      	ldr	r3, [pc, #636]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4b9e      	ldr	r3, [pc, #632]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 80029b0:	499f      	ldr	r1, [pc, #636]	; (8002c30 <HAL_RCC_OscConfig+0x334>)
 80029b2:	400a      	ands	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d014      	beq.n	80029e8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029be:	f7ff f84b 	bl	8001a58 <HAL_GetTick>
 80029c2:	0003      	movs	r3, r0
 80029c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c8:	f7ff f846 	bl	8001a58 <HAL_GetTick>
 80029cc:	0002      	movs	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	; 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e28d      	b.n	8002ef6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029da:	4b93      	ldr	r3, [pc, #588]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	029b      	lsls	r3, r3, #10
 80029e2:	4013      	ands	r3, r2
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0xcc>
 80029e6:	e015      	b.n	8002a14 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7ff f836 	bl	8001a58 <HAL_GetTick>
 80029ec:	0003      	movs	r3, r0
 80029ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f2:	f7ff f831 	bl	8001a58 <HAL_GetTick>
 80029f6:	0002      	movs	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b64      	cmp	r3, #100	; 0x64
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e278      	b.n	8002ef6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a04:	4b88      	ldr	r3, [pc, #544]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	029b      	lsls	r3, r3, #10
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d1f0      	bne.n	80029f2 <HAL_RCC_OscConfig+0xf6>
 8002a10:	e000      	b.n	8002a14 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a12:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d100      	bne.n	8002a20 <HAL_RCC_OscConfig+0x124>
 8002a1e:	e099      	b.n	8002b54 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a20:	4b81      	ldr	r3, [pc, #516]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	2238      	movs	r2, #56	; 0x38
 8002a26:	4013      	ands	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a2a:	4b7f      	ldr	r3, [pc, #508]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	2203      	movs	r2, #3
 8002a30:	4013      	ands	r3, r2
 8002a32:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	2b10      	cmp	r3, #16
 8002a38:	d102      	bne.n	8002a40 <HAL_RCC_OscConfig+0x144>
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d002      	beq.n	8002a46 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d135      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a46:	4b78      	ldr	r3, [pc, #480]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	2380      	movs	r3, #128	; 0x80
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d005      	beq.n	8002a5e <HAL_RCC_OscConfig+0x162>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e24b      	b.n	8002ef6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5e:	4b72      	ldr	r3, [pc, #456]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	4a74      	ldr	r2, [pc, #464]	; (8002c34 <HAL_RCC_OscConfig+0x338>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	0019      	movs	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	021a      	lsls	r2, r3, #8
 8002a6e:	4b6e      	ldr	r3, [pc, #440]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002a70:	430a      	orrs	r2, r1
 8002a72:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d112      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002a7a:	4b6b      	ldr	r3, [pc, #428]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a6e      	ldr	r2, [pc, #440]	; (8002c38 <HAL_RCC_OscConfig+0x33c>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	0019      	movs	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	4b67      	ldr	r3, [pc, #412]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002a8e:	4b66      	ldr	r3, [pc, #408]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	0adb      	lsrs	r3, r3, #11
 8002a94:	2207      	movs	r2, #7
 8002a96:	4013      	ands	r3, r2
 8002a98:	4a68      	ldr	r2, [pc, #416]	; (8002c3c <HAL_RCC_OscConfig+0x340>)
 8002a9a:	40da      	lsrs	r2, r3
 8002a9c:	4b68      	ldr	r3, [pc, #416]	; (8002c40 <HAL_RCC_OscConfig+0x344>)
 8002a9e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002aa0:	4b68      	ldr	r3, [pc, #416]	; (8002c44 <HAL_RCC_OscConfig+0x348>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f7fe f823 	bl	8000af0 <HAL_InitTick>
 8002aaa:	1e03      	subs	r3, r0, #0
 8002aac:	d051      	beq.n	8002b52 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e221      	b.n	8002ef6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d030      	beq.n	8002b1c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002aba:	4b5b      	ldr	r3, [pc, #364]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a5e      	ldr	r2, [pc, #376]	; (8002c38 <HAL_RCC_OscConfig+0x33c>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	4b57      	ldr	r3, [pc, #348]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002aca:	430a      	orrs	r2, r1
 8002acc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002ace:	4b56      	ldr	r3, [pc, #344]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	4b55      	ldr	r3, [pc, #340]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002ad4:	2180      	movs	r1, #128	; 0x80
 8002ad6:	0049      	lsls	r1, r1, #1
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe ffbc 	bl	8001a58 <HAL_GetTick>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae6:	f7fe ffb7 	bl	8001a58 <HAL_GetTick>
 8002aea:	0002      	movs	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e1fe      	b.n	8002ef6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002af8:	4b4b      	ldr	r3, [pc, #300]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4013      	ands	r3, r2
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b04:	4b48      	ldr	r3, [pc, #288]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4a4a      	ldr	r2, [pc, #296]	; (8002c34 <HAL_RCC_OscConfig+0x338>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	021a      	lsls	r2, r3, #8
 8002b14:	4b44      	ldr	r3, [pc, #272]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002b16:	430a      	orrs	r2, r1
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	e01b      	b.n	8002b54 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002b1c:	4b42      	ldr	r3, [pc, #264]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b41      	ldr	r3, [pc, #260]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002b22:	4949      	ldr	r1, [pc, #292]	; (8002c48 <HAL_RCC_OscConfig+0x34c>)
 8002b24:	400a      	ands	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b28:	f7fe ff96 	bl	8001a58 <HAL_GetTick>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b32:	f7fe ff91 	bl	8001a58 <HAL_GetTick>
 8002b36:	0002      	movs	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e1d8      	b.n	8002ef6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b44:	4b38      	ldr	r3, [pc, #224]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d1f0      	bne.n	8002b32 <HAL_RCC_OscConfig+0x236>
 8002b50:	e000      	b.n	8002b54 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b52:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2208      	movs	r2, #8
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d047      	beq.n	8002bee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b5e:	4b32      	ldr	r3, [pc, #200]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2238      	movs	r2, #56	; 0x38
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b18      	cmp	r3, #24
 8002b68:	d10a      	bne.n	8002b80 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002b6a:	4b2f      	ldr	r3, [pc, #188]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6e:	2202      	movs	r2, #2
 8002b70:	4013      	ands	r3, r2
 8002b72:	d03c      	beq.n	8002bee <HAL_RCC_OscConfig+0x2f2>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d138      	bne.n	8002bee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e1ba      	b.n	8002ef6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d019      	beq.n	8002bbc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002b88:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002b8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b8c:	4b26      	ldr	r3, [pc, #152]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002b8e:	2101      	movs	r1, #1
 8002b90:	430a      	orrs	r2, r1
 8002b92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7fe ff60 	bl	8001a58 <HAL_GetTick>
 8002b98:	0003      	movs	r3, r0
 8002b9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b9e:	f7fe ff5b 	bl	8001a58 <HAL_GetTick>
 8002ba2:	0002      	movs	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e1a2      	b.n	8002ef6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bb0:	4b1d      	ldr	r3, [pc, #116]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d0f1      	beq.n	8002b9e <HAL_RCC_OscConfig+0x2a2>
 8002bba:	e018      	b.n	8002bee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002bbc:	4b1a      	ldr	r3, [pc, #104]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002bbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bc0:	4b19      	ldr	r3, [pc, #100]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	438a      	bics	r2, r1
 8002bc6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fe ff46 	bl	8001a58 <HAL_GetTick>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd2:	f7fe ff41 	bl	8001a58 <HAL_GetTick>
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e188      	b.n	8002ef6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002be4:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be8:	2202      	movs	r2, #2
 8002bea:	4013      	ands	r3, r2
 8002bec:	d1f1      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d100      	bne.n	8002bfa <HAL_RCC_OscConfig+0x2fe>
 8002bf8:	e0c6      	b.n	8002d88 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bfa:	231f      	movs	r3, #31
 8002bfc:	18fb      	adds	r3, r7, r3
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002c02:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2238      	movs	r2, #56	; 0x38
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d11e      	bne.n	8002c4c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_RCC_OscConfig+0x32c>)
 8002c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c12:	2202      	movs	r2, #2
 8002c14:	4013      	ands	r3, r2
 8002c16:	d100      	bne.n	8002c1a <HAL_RCC_OscConfig+0x31e>
 8002c18:	e0b6      	b.n	8002d88 <HAL_RCC_OscConfig+0x48c>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d000      	beq.n	8002c24 <HAL_RCC_OscConfig+0x328>
 8002c22:	e0b1      	b.n	8002d88 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e166      	b.n	8002ef6 <HAL_RCC_OscConfig+0x5fa>
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	fffeffff 	.word	0xfffeffff
 8002c30:	fffbffff 	.word	0xfffbffff
 8002c34:	ffff80ff 	.word	0xffff80ff
 8002c38:	ffffc7ff 	.word	0xffffc7ff
 8002c3c:	00f42400 	.word	0x00f42400
 8002c40:	20000000 	.word	0x20000000
 8002c44:	20000004 	.word	0x20000004
 8002c48:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c4c:	4bac      	ldr	r3, [pc, #688]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	055b      	lsls	r3, r3, #21
 8002c54:	4013      	ands	r3, r2
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_OscConfig+0x360>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x362>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d011      	beq.n	8002c86 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002c62:	4ba7      	ldr	r3, [pc, #668]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002c64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c66:	4ba6      	ldr	r3, [pc, #664]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002c68:	2180      	movs	r1, #128	; 0x80
 8002c6a:	0549      	lsls	r1, r1, #21
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c70:	4ba3      	ldr	r3, [pc, #652]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	055b      	lsls	r3, r3, #21
 8002c78:	4013      	ands	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002c7e:	231f      	movs	r3, #31
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c86:	4b9f      	ldr	r3, [pc, #636]	; (8002f04 <HAL_RCC_OscConfig+0x608>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d11a      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c92:	4b9c      	ldr	r3, [pc, #624]	; (8002f04 <HAL_RCC_OscConfig+0x608>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	4b9b      	ldr	r3, [pc, #620]	; (8002f04 <HAL_RCC_OscConfig+0x608>)
 8002c98:	2180      	movs	r1, #128	; 0x80
 8002c9a:	0049      	lsls	r1, r1, #1
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002ca0:	f7fe feda 	bl	8001a58 <HAL_GetTick>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002caa:	f7fe fed5 	bl	8001a58 <HAL_GetTick>
 8002cae:	0002      	movs	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e11c      	b.n	8002ef6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cbc:	4b91      	ldr	r3, [pc, #580]	; (8002f04 <HAL_RCC_OscConfig+0x608>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d106      	bne.n	8002cde <HAL_RCC_OscConfig+0x3e2>
 8002cd0:	4b8b      	ldr	r3, [pc, #556]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002cd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cd4:	4b8a      	ldr	r3, [pc, #552]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cdc:	e01c      	b.n	8002d18 <HAL_RCC_OscConfig+0x41c>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b05      	cmp	r3, #5
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x404>
 8002ce6:	4b86      	ldr	r3, [pc, #536]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002ce8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cea:	4b85      	ldr	r3, [pc, #532]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002cec:	2104      	movs	r1, #4
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cf2:	4b83      	ldr	r3, [pc, #524]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002cf4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cf6:	4b82      	ldr	r3, [pc, #520]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cfe:	e00b      	b.n	8002d18 <HAL_RCC_OscConfig+0x41c>
 8002d00:	4b7f      	ldr	r3, [pc, #508]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002d02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d04:	4b7e      	ldr	r3, [pc, #504]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002d06:	2101      	movs	r1, #1
 8002d08:	438a      	bics	r2, r1
 8002d0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d0c:	4b7c      	ldr	r3, [pc, #496]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002d0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d10:	4b7b      	ldr	r3, [pc, #492]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002d12:	2104      	movs	r1, #4
 8002d14:	438a      	bics	r2, r1
 8002d16:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d014      	beq.n	8002d4a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe fe9a 	bl	8001a58 <HAL_GetTick>
 8002d24:	0003      	movs	r3, r0
 8002d26:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d28:	e009      	b.n	8002d3e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7fe fe95 	bl	8001a58 <HAL_GetTick>
 8002d2e:	0002      	movs	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	4a74      	ldr	r2, [pc, #464]	; (8002f08 <HAL_RCC_OscConfig+0x60c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e0db      	b.n	8002ef6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d3e:	4b70      	ldr	r3, [pc, #448]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d42:	2202      	movs	r2, #2
 8002d44:	4013      	ands	r3, r2
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x42e>
 8002d48:	e013      	b.n	8002d72 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4a:	f7fe fe85 	bl	8001a58 <HAL_GetTick>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d52:	e009      	b.n	8002d68 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d54:	f7fe fe80 	bl	8001a58 <HAL_GetTick>
 8002d58:	0002      	movs	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	4a6a      	ldr	r2, [pc, #424]	; (8002f08 <HAL_RCC_OscConfig+0x60c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e0c6      	b.n	8002ef6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d68:	4b65      	ldr	r3, [pc, #404]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002d72:	231f      	movs	r3, #31
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d105      	bne.n	8002d88 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002d7c:	4b60      	ldr	r3, [pc, #384]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002d7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d80:	4b5f      	ldr	r3, [pc, #380]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002d82:	4962      	ldr	r1, [pc, #392]	; (8002f0c <HAL_RCC_OscConfig+0x610>)
 8002d84:	400a      	ands	r2, r1
 8002d86:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d100      	bne.n	8002d92 <HAL_RCC_OscConfig+0x496>
 8002d90:	e0b0      	b.n	8002ef4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d92:	4b5b      	ldr	r3, [pc, #364]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2238      	movs	r2, #56	; 0x38
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b10      	cmp	r3, #16
 8002d9c:	d100      	bne.n	8002da0 <HAL_RCC_OscConfig+0x4a4>
 8002d9e:	e078      	b.n	8002e92 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d153      	bne.n	8002e50 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da8:	4b55      	ldr	r3, [pc, #340]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4b54      	ldr	r3, [pc, #336]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002dae:	4958      	ldr	r1, [pc, #352]	; (8002f10 <HAL_RCC_OscConfig+0x614>)
 8002db0:	400a      	ands	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7fe fe50 	bl	8001a58 <HAL_GetTick>
 8002db8:	0003      	movs	r3, r0
 8002dba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbe:	f7fe fe4b 	bl	8001a58 <HAL_GetTick>
 8002dc2:	0002      	movs	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e092      	b.n	8002ef6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd0:	4b4b      	ldr	r3, [pc, #300]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	2380      	movs	r3, #128	; 0x80
 8002dd6:	049b      	lsls	r3, r3, #18
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d1f0      	bne.n	8002dbe <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ddc:	4b48      	ldr	r3, [pc, #288]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	4a4c      	ldr	r2, [pc, #304]	; (8002f14 <HAL_RCC_OscConfig+0x618>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	0019      	movs	r1, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1a      	ldr	r2, [r3, #32]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	021b      	lsls	r3, r3, #8
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	431a      	orrs	r2, r3
 8002e04:	4b3e      	ldr	r3, [pc, #248]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002e06:	430a      	orrs	r2, r1
 8002e08:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e0a:	4b3d      	ldr	r3, [pc, #244]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	4b3c      	ldr	r3, [pc, #240]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002e10:	2180      	movs	r1, #128	; 0x80
 8002e12:	0449      	lsls	r1, r1, #17
 8002e14:	430a      	orrs	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002e18:	4b39      	ldr	r3, [pc, #228]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	4b38      	ldr	r3, [pc, #224]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002e1e:	2180      	movs	r1, #128	; 0x80
 8002e20:	0549      	lsls	r1, r1, #21
 8002e22:	430a      	orrs	r2, r1
 8002e24:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e26:	f7fe fe17 	bl	8001a58 <HAL_GetTick>
 8002e2a:	0003      	movs	r3, r0
 8002e2c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e30:	f7fe fe12 	bl	8001a58 <HAL_GetTick>
 8002e34:	0002      	movs	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e059      	b.n	8002ef6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e42:	4b2f      	ldr	r3, [pc, #188]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	2380      	movs	r3, #128	; 0x80
 8002e48:	049b      	lsls	r3, r3, #18
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0x534>
 8002e4e:	e051      	b.n	8002ef4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e50:	4b2b      	ldr	r3, [pc, #172]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4b2a      	ldr	r3, [pc, #168]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002e56:	492e      	ldr	r1, [pc, #184]	; (8002f10 <HAL_RCC_OscConfig+0x614>)
 8002e58:	400a      	ands	r2, r1
 8002e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fdfc 	bl	8001a58 <HAL_GetTick>
 8002e60:	0003      	movs	r3, r0
 8002e62:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e66:	f7fe fdf7 	bl	8001a58 <HAL_GetTick>
 8002e6a:	0002      	movs	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e03e      	b.n	8002ef6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e78:	4b21      	ldr	r3, [pc, #132]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	049b      	lsls	r3, r3, #18
 8002e80:	4013      	ands	r3, r2
 8002e82:	d1f0      	bne.n	8002e66 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002e84:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002e8a:	4923      	ldr	r1, [pc, #140]	; (8002f18 <HAL_RCC_OscConfig+0x61c>)
 8002e8c:	400a      	ands	r2, r1
 8002e8e:	60da      	str	r2, [r3, #12]
 8002e90:	e030      	b.n	8002ef4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e02b      	b.n	8002ef6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002e9e:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <HAL_RCC_OscConfig+0x604>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	401a      	ands	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d11e      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2270      	movs	r2, #112	; 0x70
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d117      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	23fe      	movs	r3, #254	; 0xfe
 8002ec4:	01db      	lsls	r3, r3, #7
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	23f8      	movs	r3, #248	; 0xf8
 8002ed6:	039b      	lsls	r3, r3, #14
 8002ed8:	401a      	ands	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d106      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	0f5b      	lsrs	r3, r3, #29
 8002ee6:	075a      	lsls	r2, r3, #29
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	b008      	add	sp, #32
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40007000 	.word	0x40007000
 8002f08:	00001388 	.word	0x00001388
 8002f0c:	efffffff 	.word	0xefffffff
 8002f10:	feffffff 	.word	0xfeffffff
 8002f14:	1fc1808c 	.word	0x1fc1808c
 8002f18:	effefffc 	.word	0xeffefffc

08002f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0e9      	b.n	8003104 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f30:	4b76      	ldr	r3, [pc, #472]	; (800310c <HAL_RCC_ClockConfig+0x1f0>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2207      	movs	r2, #7
 8002f36:	4013      	ands	r3, r2
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d91e      	bls.n	8002f7c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3e:	4b73      	ldr	r3, [pc, #460]	; (800310c <HAL_RCC_ClockConfig+0x1f0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2207      	movs	r2, #7
 8002f44:	4393      	bics	r3, r2
 8002f46:	0019      	movs	r1, r3
 8002f48:	4b70      	ldr	r3, [pc, #448]	; (800310c <HAL_RCC_ClockConfig+0x1f0>)
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f50:	f7fe fd82 	bl	8001a58 <HAL_GetTick>
 8002f54:	0003      	movs	r3, r0
 8002f56:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f58:	e009      	b.n	8002f6e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f5a:	f7fe fd7d 	bl	8001a58 <HAL_GetTick>
 8002f5e:	0002      	movs	r2, r0
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	4a6a      	ldr	r2, [pc, #424]	; (8003110 <HAL_RCC_ClockConfig+0x1f4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e0ca      	b.n	8003104 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f6e:	4b67      	ldr	r3, [pc, #412]	; (800310c <HAL_RCC_ClockConfig+0x1f0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2207      	movs	r2, #7
 8002f74:	4013      	ands	r3, r2
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d1ee      	bne.n	8002f5a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2202      	movs	r2, #2
 8002f82:	4013      	ands	r3, r2
 8002f84:	d015      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d006      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f90:	4b60      	ldr	r3, [pc, #384]	; (8003114 <HAL_RCC_ClockConfig+0x1f8>)
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	4b5f      	ldr	r3, [pc, #380]	; (8003114 <HAL_RCC_ClockConfig+0x1f8>)
 8002f96:	21e0      	movs	r1, #224	; 0xe0
 8002f98:	01c9      	lsls	r1, r1, #7
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f9e:	4b5d      	ldr	r3, [pc, #372]	; (8003114 <HAL_RCC_ClockConfig+0x1f8>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	4a5d      	ldr	r2, [pc, #372]	; (8003118 <HAL_RCC_ClockConfig+0x1fc>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	0019      	movs	r1, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	4b59      	ldr	r3, [pc, #356]	; (8003114 <HAL_RCC_ClockConfig+0x1f8>)
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d057      	beq.n	800306c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d107      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fc4:	4b53      	ldr	r3, [pc, #332]	; (8003114 <HAL_RCC_ClockConfig+0x1f8>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	029b      	lsls	r3, r3, #10
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d12b      	bne.n	8003028 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e097      	b.n	8003104 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d107      	bne.n	8002fec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fdc:	4b4d      	ldr	r3, [pc, #308]	; (8003114 <HAL_RCC_ClockConfig+0x1f8>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	2380      	movs	r3, #128	; 0x80
 8002fe2:	049b      	lsls	r3, r3, #18
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d11f      	bne.n	8003028 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e08b      	b.n	8003104 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d107      	bne.n	8003004 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ff4:	4b47      	ldr	r3, [pc, #284]	; (8003114 <HAL_RCC_ClockConfig+0x1f8>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d113      	bne.n	8003028 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e07f      	b.n	8003104 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b03      	cmp	r3, #3
 800300a:	d106      	bne.n	800301a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800300c:	4b41      	ldr	r3, [pc, #260]	; (8003114 <HAL_RCC_ClockConfig+0x1f8>)
 800300e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003010:	2202      	movs	r2, #2
 8003012:	4013      	ands	r3, r2
 8003014:	d108      	bne.n	8003028 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e074      	b.n	8003104 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800301a:	4b3e      	ldr	r3, [pc, #248]	; (8003114 <HAL_RCC_ClockConfig+0x1f8>)
 800301c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301e:	2202      	movs	r2, #2
 8003020:	4013      	ands	r3, r2
 8003022:	d101      	bne.n	8003028 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e06d      	b.n	8003104 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003028:	4b3a      	ldr	r3, [pc, #232]	; (8003114 <HAL_RCC_ClockConfig+0x1f8>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2207      	movs	r2, #7
 800302e:	4393      	bics	r3, r2
 8003030:	0019      	movs	r1, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	4b37      	ldr	r3, [pc, #220]	; (8003114 <HAL_RCC_ClockConfig+0x1f8>)
 8003038:	430a      	orrs	r2, r1
 800303a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800303c:	f7fe fd0c 	bl	8001a58 <HAL_GetTick>
 8003040:	0003      	movs	r3, r0
 8003042:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003044:	e009      	b.n	800305a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003046:	f7fe fd07 	bl	8001a58 <HAL_GetTick>
 800304a:	0002      	movs	r2, r0
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	4a2f      	ldr	r2, [pc, #188]	; (8003110 <HAL_RCC_ClockConfig+0x1f4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e054      	b.n	8003104 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305a:	4b2e      	ldr	r3, [pc, #184]	; (8003114 <HAL_RCC_ClockConfig+0x1f8>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2238      	movs	r2, #56	; 0x38
 8003060:	401a      	ands	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	429a      	cmp	r2, r3
 800306a:	d1ec      	bne.n	8003046 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800306c:	4b27      	ldr	r3, [pc, #156]	; (800310c <HAL_RCC_ClockConfig+0x1f0>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2207      	movs	r2, #7
 8003072:	4013      	ands	r3, r2
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d21e      	bcs.n	80030b8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307a:	4b24      	ldr	r3, [pc, #144]	; (800310c <HAL_RCC_ClockConfig+0x1f0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2207      	movs	r2, #7
 8003080:	4393      	bics	r3, r2
 8003082:	0019      	movs	r1, r3
 8003084:	4b21      	ldr	r3, [pc, #132]	; (800310c <HAL_RCC_ClockConfig+0x1f0>)
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800308c:	f7fe fce4 	bl	8001a58 <HAL_GetTick>
 8003090:	0003      	movs	r3, r0
 8003092:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003094:	e009      	b.n	80030aa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003096:	f7fe fcdf 	bl	8001a58 <HAL_GetTick>
 800309a:	0002      	movs	r2, r0
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	4a1b      	ldr	r2, [pc, #108]	; (8003110 <HAL_RCC_ClockConfig+0x1f4>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e02c      	b.n	8003104 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030aa:	4b18      	ldr	r3, [pc, #96]	; (800310c <HAL_RCC_ClockConfig+0x1f0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2207      	movs	r2, #7
 80030b0:	4013      	ands	r3, r2
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d1ee      	bne.n	8003096 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2204      	movs	r2, #4
 80030be:	4013      	ands	r3, r2
 80030c0:	d009      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80030c2:	4b14      	ldr	r3, [pc, #80]	; (8003114 <HAL_RCC_ClockConfig+0x1f8>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	4a15      	ldr	r2, [pc, #84]	; (800311c <HAL_RCC_ClockConfig+0x200>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	0019      	movs	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	4b10      	ldr	r3, [pc, #64]	; (8003114 <HAL_RCC_ClockConfig+0x1f8>)
 80030d2:	430a      	orrs	r2, r1
 80030d4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80030d6:	f000 f829 	bl	800312c <HAL_RCC_GetSysClockFreq>
 80030da:	0001      	movs	r1, r0
 80030dc:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <HAL_RCC_ClockConfig+0x1f8>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	0a1b      	lsrs	r3, r3, #8
 80030e2:	220f      	movs	r2, #15
 80030e4:	401a      	ands	r2, r3
 80030e6:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <HAL_RCC_ClockConfig+0x204>)
 80030e8:	0092      	lsls	r2, r2, #2
 80030ea:	58d3      	ldr	r3, [r2, r3]
 80030ec:	221f      	movs	r2, #31
 80030ee:	4013      	ands	r3, r2
 80030f0:	000a      	movs	r2, r1
 80030f2:	40da      	lsrs	r2, r3
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_RCC_ClockConfig+0x208>)
 80030f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80030f8:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_RCC_ClockConfig+0x20c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	0018      	movs	r0, r3
 80030fe:	f7fd fcf7 	bl	8000af0 <HAL_InitTick>
 8003102:	0003      	movs	r3, r0
}
 8003104:	0018      	movs	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	b004      	add	sp, #16
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40022000 	.word	0x40022000
 8003110:	00001388 	.word	0x00001388
 8003114:	40021000 	.word	0x40021000
 8003118:	fffff0ff 	.word	0xfffff0ff
 800311c:	ffff8fff 	.word	0xffff8fff
 8003120:	0800885c 	.word	0x0800885c
 8003124:	20000000 	.word	0x20000000
 8003128:	20000004 	.word	0x20000004

0800312c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003132:	4b3c      	ldr	r3, [pc, #240]	; (8003224 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2238      	movs	r2, #56	; 0x38
 8003138:	4013      	ands	r3, r2
 800313a:	d10f      	bne.n	800315c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800313c:	4b39      	ldr	r3, [pc, #228]	; (8003224 <HAL_RCC_GetSysClockFreq+0xf8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	0adb      	lsrs	r3, r3, #11
 8003142:	2207      	movs	r2, #7
 8003144:	4013      	ands	r3, r2
 8003146:	2201      	movs	r2, #1
 8003148:	409a      	lsls	r2, r3
 800314a:	0013      	movs	r3, r2
 800314c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800314e:	6839      	ldr	r1, [r7, #0]
 8003150:	4835      	ldr	r0, [pc, #212]	; (8003228 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003152:	f7fc ffe3 	bl	800011c <__udivsi3>
 8003156:	0003      	movs	r3, r0
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	e05d      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800315c:	4b31      	ldr	r3, [pc, #196]	; (8003224 <HAL_RCC_GetSysClockFreq+0xf8>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2238      	movs	r2, #56	; 0x38
 8003162:	4013      	ands	r3, r2
 8003164:	2b08      	cmp	r3, #8
 8003166:	d102      	bne.n	800316e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003168:	4b30      	ldr	r3, [pc, #192]	; (800322c <HAL_RCC_GetSysClockFreq+0x100>)
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	e054      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800316e:	4b2d      	ldr	r3, [pc, #180]	; (8003224 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2238      	movs	r2, #56	; 0x38
 8003174:	4013      	ands	r3, r2
 8003176:	2b10      	cmp	r3, #16
 8003178:	d138      	bne.n	80031ec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800317a:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <HAL_RCC_GetSysClockFreq+0xf8>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	2203      	movs	r2, #3
 8003180:	4013      	ands	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003184:	4b27      	ldr	r3, [pc, #156]	; (8003224 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	2207      	movs	r2, #7
 800318c:	4013      	ands	r3, r2
 800318e:	3301      	adds	r3, #1
 8003190:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2b03      	cmp	r3, #3
 8003196:	d10d      	bne.n	80031b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	4824      	ldr	r0, [pc, #144]	; (800322c <HAL_RCC_GetSysClockFreq+0x100>)
 800319c:	f7fc ffbe 	bl	800011c <__udivsi3>
 80031a0:	0003      	movs	r3, r0
 80031a2:	0019      	movs	r1, r3
 80031a4:	4b1f      	ldr	r3, [pc, #124]	; (8003224 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	0a1b      	lsrs	r3, r3, #8
 80031aa:	227f      	movs	r2, #127	; 0x7f
 80031ac:	4013      	ands	r3, r2
 80031ae:	434b      	muls	r3, r1
 80031b0:	617b      	str	r3, [r7, #20]
        break;
 80031b2:	e00d      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	481c      	ldr	r0, [pc, #112]	; (8003228 <HAL_RCC_GetSysClockFreq+0xfc>)
 80031b8:	f7fc ffb0 	bl	800011c <__udivsi3>
 80031bc:	0003      	movs	r3, r0
 80031be:	0019      	movs	r1, r3
 80031c0:	4b18      	ldr	r3, [pc, #96]	; (8003224 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	0a1b      	lsrs	r3, r3, #8
 80031c6:	227f      	movs	r2, #127	; 0x7f
 80031c8:	4013      	ands	r3, r2
 80031ca:	434b      	muls	r3, r1
 80031cc:	617b      	str	r3, [r7, #20]
        break;
 80031ce:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80031d0:	4b14      	ldr	r3, [pc, #80]	; (8003224 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	0f5b      	lsrs	r3, r3, #29
 80031d6:	2207      	movs	r2, #7
 80031d8:	4013      	ands	r3, r2
 80031da:	3301      	adds	r3, #1
 80031dc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	6978      	ldr	r0, [r7, #20]
 80031e2:	f7fc ff9b 	bl	800011c <__udivsi3>
 80031e6:	0003      	movs	r3, r0
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	e015      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80031ec:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2238      	movs	r2, #56	; 0x38
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b20      	cmp	r3, #32
 80031f6:	d103      	bne.n	8003200 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	021b      	lsls	r3, r3, #8
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	e00b      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003200:	4b08      	ldr	r3, [pc, #32]	; (8003224 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2238      	movs	r2, #56	; 0x38
 8003206:	4013      	ands	r3, r2
 8003208:	2b18      	cmp	r3, #24
 800320a:	d103      	bne.n	8003214 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800320c:	23fa      	movs	r3, #250	; 0xfa
 800320e:	01db      	lsls	r3, r3, #7
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	e001      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003218:	693b      	ldr	r3, [r7, #16]
}
 800321a:	0018      	movs	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	b006      	add	sp, #24
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	40021000 	.word	0x40021000
 8003228:	00f42400 	.word	0x00f42400
 800322c:	007a1200 	.word	0x007a1200

08003230 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003234:	4b02      	ldr	r3, [pc, #8]	; (8003240 <HAL_RCC_GetHCLKFreq+0x10>)
 8003236:	681b      	ldr	r3, [r3, #0]
}
 8003238:	0018      	movs	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	20000000 	.word	0x20000000

08003244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003244:	b5b0      	push	{r4, r5, r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003248:	f7ff fff2 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 800324c:	0004      	movs	r4, r0
 800324e:	f7ff fb49 	bl	80028e4 <LL_RCC_GetAPB1Prescaler>
 8003252:	0003      	movs	r3, r0
 8003254:	0b1a      	lsrs	r2, r3, #12
 8003256:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003258:	0092      	lsls	r2, r2, #2
 800325a:	58d3      	ldr	r3, [r2, r3]
 800325c:	221f      	movs	r2, #31
 800325e:	4013      	ands	r3, r2
 8003260:	40dc      	lsrs	r4, r3
 8003262:	0023      	movs	r3, r4
}
 8003264:	0018      	movs	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	bdb0      	pop	{r4, r5, r7, pc}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	0800889c 	.word	0x0800889c

08003270 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2207      	movs	r2, #7
 800327e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003280:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <HAL_RCC_GetClockConfig+0x4c>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2207      	movs	r2, #7
 8003286:	401a      	ands	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800328c:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <HAL_RCC_GetClockConfig+0x4c>)
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	23f0      	movs	r3, #240	; 0xf0
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	401a      	ands	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800329a:	4b08      	ldr	r3, [pc, #32]	; (80032bc <HAL_RCC_GetClockConfig+0x4c>)
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	23e0      	movs	r3, #224	; 0xe0
 80032a0:	01db      	lsls	r3, r3, #7
 80032a2:	401a      	ands	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032a8:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_RCC_GetClockConfig+0x50>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2207      	movs	r2, #7
 80032ae:	401a      	ands	r2, r3
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	601a      	str	r2, [r3, #0]
}
 80032b4:	46c0      	nop			; (mov r8, r8)
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b002      	add	sp, #8
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40022000 	.word	0x40022000

080032c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80032cc:	2313      	movs	r3, #19
 80032ce:	18fb      	adds	r3, r7, r3
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032d4:	2312      	movs	r3, #18
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	029b      	lsls	r3, r3, #10
 80032e4:	4013      	ands	r3, r2
 80032e6:	d100      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x26>
 80032e8:	e0a3      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ea:	2011      	movs	r0, #17
 80032ec:	183b      	adds	r3, r7, r0
 80032ee:	2200      	movs	r2, #0
 80032f0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032f2:	4b86      	ldr	r3, [pc, #536]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032f6:	2380      	movs	r3, #128	; 0x80
 80032f8:	055b      	lsls	r3, r3, #21
 80032fa:	4013      	ands	r3, r2
 80032fc:	d110      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fe:	4b83      	ldr	r3, [pc, #524]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003300:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003302:	4b82      	ldr	r3, [pc, #520]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003304:	2180      	movs	r1, #128	; 0x80
 8003306:	0549      	lsls	r1, r1, #21
 8003308:	430a      	orrs	r2, r1
 800330a:	63da      	str	r2, [r3, #60]	; 0x3c
 800330c:	4b7f      	ldr	r3, [pc, #508]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800330e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003310:	2380      	movs	r3, #128	; 0x80
 8003312:	055b      	lsls	r3, r3, #21
 8003314:	4013      	ands	r3, r2
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800331a:	183b      	adds	r3, r7, r0
 800331c:	2201      	movs	r2, #1
 800331e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003320:	4b7b      	ldr	r3, [pc, #492]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4b7a      	ldr	r3, [pc, #488]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003326:	2180      	movs	r1, #128	; 0x80
 8003328:	0049      	lsls	r1, r1, #1
 800332a:	430a      	orrs	r2, r1
 800332c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800332e:	f7fe fb93 	bl	8001a58 <HAL_GetTick>
 8003332:	0003      	movs	r3, r0
 8003334:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003336:	e00b      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003338:	f7fe fb8e 	bl	8001a58 <HAL_GetTick>
 800333c:	0002      	movs	r2, r0
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d904      	bls.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003346:	2313      	movs	r3, #19
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	2203      	movs	r2, #3
 800334c:	701a      	strb	r2, [r3, #0]
        break;
 800334e:	e005      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003350:	4b6f      	ldr	r3, [pc, #444]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	2380      	movs	r3, #128	; 0x80
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	4013      	ands	r3, r2
 800335a:	d0ed      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800335c:	2313      	movs	r3, #19
 800335e:	18fb      	adds	r3, r7, r3
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d154      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003366:	4b69      	ldr	r3, [pc, #420]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003368:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800336a:	23c0      	movs	r3, #192	; 0xc0
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4013      	ands	r3, r2
 8003370:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d019      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	429a      	cmp	r2, r3
 8003380:	d014      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003382:	4b62      	ldr	r3, [pc, #392]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003386:	4a63      	ldr	r2, [pc, #396]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003388:	4013      	ands	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800338c:	4b5f      	ldr	r3, [pc, #380]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800338e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003390:	4b5e      	ldr	r3, [pc, #376]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003392:	2180      	movs	r1, #128	; 0x80
 8003394:	0249      	lsls	r1, r1, #9
 8003396:	430a      	orrs	r2, r1
 8003398:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800339a:	4b5c      	ldr	r3, [pc, #368]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800339c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800339e:	4b5b      	ldr	r3, [pc, #364]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033a0:	495d      	ldr	r1, [pc, #372]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80033a2:	400a      	ands	r2, r1
 80033a4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033a6:	4b59      	ldr	r3, [pc, #356]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2201      	movs	r2, #1
 80033b0:	4013      	ands	r3, r2
 80033b2:	d016      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fe fb50 	bl	8001a58 <HAL_GetTick>
 80033b8:	0003      	movs	r3, r0
 80033ba:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033bc:	e00c      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033be:	f7fe fb4b 	bl	8001a58 <HAL_GetTick>
 80033c2:	0002      	movs	r2, r0
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	4a54      	ldr	r2, [pc, #336]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d904      	bls.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80033ce:	2313      	movs	r3, #19
 80033d0:	18fb      	adds	r3, r7, r3
 80033d2:	2203      	movs	r2, #3
 80033d4:	701a      	strb	r2, [r3, #0]
            break;
 80033d6:	e004      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d8:	4b4c      	ldr	r3, [pc, #304]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033dc:	2202      	movs	r2, #2
 80033de:	4013      	ands	r3, r2
 80033e0:	d0ed      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80033e2:	2313      	movs	r3, #19
 80033e4:	18fb      	adds	r3, r7, r3
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10a      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ec:	4b47      	ldr	r3, [pc, #284]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f0:	4a48      	ldr	r2, [pc, #288]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	0019      	movs	r1, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	4b44      	ldr	r3, [pc, #272]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033fc:	430a      	orrs	r2, r1
 80033fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8003400:	e00c      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003402:	2312      	movs	r3, #18
 8003404:	18fb      	adds	r3, r7, r3
 8003406:	2213      	movs	r2, #19
 8003408:	18ba      	adds	r2, r7, r2
 800340a:	7812      	ldrb	r2, [r2, #0]
 800340c:	701a      	strb	r2, [r3, #0]
 800340e:	e005      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003410:	2312      	movs	r3, #18
 8003412:	18fb      	adds	r3, r7, r3
 8003414:	2213      	movs	r2, #19
 8003416:	18ba      	adds	r2, r7, r2
 8003418:	7812      	ldrb	r2, [r2, #0]
 800341a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800341c:	2311      	movs	r3, #17
 800341e:	18fb      	adds	r3, r7, r3
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d105      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003426:	4b39      	ldr	r3, [pc, #228]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003428:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800342a:	4b38      	ldr	r3, [pc, #224]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800342c:	493c      	ldr	r1, [pc, #240]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800342e:	400a      	ands	r2, r1
 8003430:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2201      	movs	r2, #1
 8003438:	4013      	ands	r3, r2
 800343a:	d009      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800343c:	4b33      	ldr	r3, [pc, #204]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800343e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003440:	2203      	movs	r2, #3
 8003442:	4393      	bics	r3, r2
 8003444:	0019      	movs	r1, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	4b30      	ldr	r3, [pc, #192]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800344c:	430a      	orrs	r2, r1
 800344e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2202      	movs	r2, #2
 8003456:	4013      	ands	r3, r2
 8003458:	d009      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800345a:	4b2c      	ldr	r3, [pc, #176]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800345c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345e:	220c      	movs	r2, #12
 8003460:	4393      	bics	r3, r2
 8003462:	0019      	movs	r1, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	4b28      	ldr	r3, [pc, #160]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800346a:	430a      	orrs	r2, r1
 800346c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2220      	movs	r2, #32
 8003474:	4013      	ands	r3, r2
 8003476:	d009      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003478:	4b24      	ldr	r3, [pc, #144]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800347a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347c:	4a29      	ldr	r2, [pc, #164]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347e:	4013      	ands	r3, r2
 8003480:	0019      	movs	r1, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	4b21      	ldr	r3, [pc, #132]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003488:	430a      	orrs	r2, r1
 800348a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	2380      	movs	r3, #128	; 0x80
 8003492:	01db      	lsls	r3, r3, #7
 8003494:	4013      	ands	r3, r2
 8003496:	d015      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003498:	4b1c      	ldr	r3, [pc, #112]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800349a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	0899      	lsrs	r1, r3, #2
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	4b19      	ldr	r3, [pc, #100]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034a6:	430a      	orrs	r2, r1
 80034a8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695a      	ldr	r2, [r3, #20]
 80034ae:	2380      	movs	r3, #128	; 0x80
 80034b0:	05db      	lsls	r3, r3, #23
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d106      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80034b6:	4b15      	ldr	r3, [pc, #84]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	4b14      	ldr	r3, [pc, #80]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034bc:	2180      	movs	r1, #128	; 0x80
 80034be:	0249      	lsls	r1, r1, #9
 80034c0:	430a      	orrs	r2, r1
 80034c2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	2380      	movs	r3, #128	; 0x80
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	4013      	ands	r3, r2
 80034ce:	d016      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80034d0:	4b0e      	ldr	r3, [pc, #56]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d4:	4a14      	ldr	r2, [pc, #80]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	0019      	movs	r1, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691a      	ldr	r2, [r3, #16]
 80034de:	4b0b      	ldr	r3, [pc, #44]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034e0:	430a      	orrs	r2, r1
 80034e2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	2380      	movs	r3, #128	; 0x80
 80034ea:	01db      	lsls	r3, r3, #7
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d106      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80034f0:	4b06      	ldr	r3, [pc, #24]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034f6:	2180      	movs	r1, #128	; 0x80
 80034f8:	0249      	lsls	r1, r1, #9
 80034fa:	430a      	orrs	r2, r1
 80034fc:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80034fe:	2312      	movs	r3, #18
 8003500:	18fb      	adds	r3, r7, r3
 8003502:	781b      	ldrb	r3, [r3, #0]
}
 8003504:	0018      	movs	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	b006      	add	sp, #24
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40021000 	.word	0x40021000
 8003510:	40007000 	.word	0x40007000
 8003514:	fffffcff 	.word	0xfffffcff
 8003518:	fffeffff 	.word	0xfffeffff
 800351c:	00001388 	.word	0x00001388
 8003520:	efffffff 	.word	0xefffffff
 8003524:	ffffcfff 	.word	0xffffcfff
 8003528:	ffff3fff 	.word	0xffff3fff

0800352c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e04a      	b.n	80035d4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	223d      	movs	r2, #61	; 0x3d
 8003542:	5c9b      	ldrb	r3, [r3, r2]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d107      	bne.n	800355a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	223c      	movs	r2, #60	; 0x3c
 800354e:	2100      	movs	r1, #0
 8003550:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	0018      	movs	r0, r3
 8003556:	f7fd ff99 	bl	800148c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	223d      	movs	r2, #61	; 0x3d
 800355e:	2102      	movs	r1, #2
 8003560:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3304      	adds	r3, #4
 800356a:	0019      	movs	r1, r3
 800356c:	0010      	movs	r0, r2
 800356e:	f000 fcbb 	bl	8003ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2248      	movs	r2, #72	; 0x48
 8003576:	2101      	movs	r1, #1
 8003578:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	223e      	movs	r2, #62	; 0x3e
 800357e:	2101      	movs	r1, #1
 8003580:	5499      	strb	r1, [r3, r2]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	223f      	movs	r2, #63	; 0x3f
 8003586:	2101      	movs	r1, #1
 8003588:	5499      	strb	r1, [r3, r2]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2240      	movs	r2, #64	; 0x40
 800358e:	2101      	movs	r1, #1
 8003590:	5499      	strb	r1, [r3, r2]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2241      	movs	r2, #65	; 0x41
 8003596:	2101      	movs	r1, #1
 8003598:	5499      	strb	r1, [r3, r2]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2242      	movs	r2, #66	; 0x42
 800359e:	2101      	movs	r1, #1
 80035a0:	5499      	strb	r1, [r3, r2]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2243      	movs	r2, #67	; 0x43
 80035a6:	2101      	movs	r1, #1
 80035a8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2244      	movs	r2, #68	; 0x44
 80035ae:	2101      	movs	r1, #1
 80035b0:	5499      	strb	r1, [r3, r2]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2245      	movs	r2, #69	; 0x45
 80035b6:	2101      	movs	r1, #1
 80035b8:	5499      	strb	r1, [r3, r2]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2246      	movs	r2, #70	; 0x46
 80035be:	2101      	movs	r1, #1
 80035c0:	5499      	strb	r1, [r3, r2]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2247      	movs	r2, #71	; 0x47
 80035c6:	2101      	movs	r1, #1
 80035c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	223d      	movs	r2, #61	; 0x3d
 80035ce:	2101      	movs	r1, #1
 80035d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	0018      	movs	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b002      	add	sp, #8
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	223d      	movs	r2, #61	; 0x3d
 80035e8:	5c9b      	ldrb	r3, [r3, r2]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d001      	beq.n	80035f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e03c      	b.n	800366e <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	223d      	movs	r2, #61	; 0x3d
 80035f8:	2102      	movs	r1, #2
 80035fa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2101      	movs	r1, #1
 8003608:	430a      	orrs	r2, r1
 800360a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a19      	ldr	r2, [pc, #100]	; (8003678 <HAL_TIM_Base_Start_IT+0x9c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d009      	beq.n	800362a <HAL_TIM_Base_Start_IT+0x4e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a18      	ldr	r2, [pc, #96]	; (800367c <HAL_TIM_Base_Start_IT+0xa0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d004      	beq.n	800362a <HAL_TIM_Base_Start_IT+0x4e>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a16      	ldr	r2, [pc, #88]	; (8003680 <HAL_TIM_Base_Start_IT+0xa4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d116      	bne.n	8003658 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	4a14      	ldr	r2, [pc, #80]	; (8003684 <HAL_TIM_Base_Start_IT+0xa8>)
 8003632:	4013      	ands	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b06      	cmp	r3, #6
 800363a:	d016      	beq.n	800366a <HAL_TIM_Base_Start_IT+0x8e>
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	2380      	movs	r3, #128	; 0x80
 8003640:	025b      	lsls	r3, r3, #9
 8003642:	429a      	cmp	r2, r3
 8003644:	d011      	beq.n	800366a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2101      	movs	r1, #1
 8003652:	430a      	orrs	r2, r1
 8003654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003656:	e008      	b.n	800366a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2101      	movs	r1, #1
 8003664:	430a      	orrs	r2, r1
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	e000      	b.n	800366c <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	0018      	movs	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	b004      	add	sp, #16
 8003674:	bd80      	pop	{r7, pc}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	40012c00 	.word	0x40012c00
 800367c:	40000400 	.word	0x40000400
 8003680:	40014000 	.word	0x40014000
 8003684:	00010007 	.word	0x00010007

08003688 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e04a      	b.n	8003730 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	223d      	movs	r2, #61	; 0x3d
 800369e:	5c9b      	ldrb	r3, [r3, r2]
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d107      	bne.n	80036b6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	223c      	movs	r2, #60	; 0x3c
 80036aa:	2100      	movs	r1, #0
 80036ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	0018      	movs	r0, r3
 80036b2:	f000 f841 	bl	8003738 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	223d      	movs	r2, #61	; 0x3d
 80036ba:	2102      	movs	r1, #2
 80036bc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3304      	adds	r3, #4
 80036c6:	0019      	movs	r1, r3
 80036c8:	0010      	movs	r0, r2
 80036ca:	f000 fc0d 	bl	8003ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2248      	movs	r2, #72	; 0x48
 80036d2:	2101      	movs	r1, #1
 80036d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	223e      	movs	r2, #62	; 0x3e
 80036da:	2101      	movs	r1, #1
 80036dc:	5499      	strb	r1, [r3, r2]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	223f      	movs	r2, #63	; 0x3f
 80036e2:	2101      	movs	r1, #1
 80036e4:	5499      	strb	r1, [r3, r2]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2240      	movs	r2, #64	; 0x40
 80036ea:	2101      	movs	r1, #1
 80036ec:	5499      	strb	r1, [r3, r2]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2241      	movs	r2, #65	; 0x41
 80036f2:	2101      	movs	r1, #1
 80036f4:	5499      	strb	r1, [r3, r2]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2242      	movs	r2, #66	; 0x42
 80036fa:	2101      	movs	r1, #1
 80036fc:	5499      	strb	r1, [r3, r2]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2243      	movs	r2, #67	; 0x43
 8003702:	2101      	movs	r1, #1
 8003704:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2244      	movs	r2, #68	; 0x44
 800370a:	2101      	movs	r1, #1
 800370c:	5499      	strb	r1, [r3, r2]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2245      	movs	r2, #69	; 0x45
 8003712:	2101      	movs	r1, #1
 8003714:	5499      	strb	r1, [r3, r2]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2246      	movs	r2, #70	; 0x46
 800371a:	2101      	movs	r1, #1
 800371c:	5499      	strb	r1, [r3, r2]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2247      	movs	r2, #71	; 0x47
 8003722:	2101      	movs	r1, #1
 8003724:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	223d      	movs	r2, #61	; 0x3d
 800372a:	2101      	movs	r1, #1
 800372c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	0018      	movs	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	b002      	add	sp, #8
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003740:	46c0      	nop			; (mov r8, r8)
 8003742:	46bd      	mov	sp, r7
 8003744:	b002      	add	sp, #8
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e090      	b.n	800387e <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	223d      	movs	r2, #61	; 0x3d
 8003760:	5c9b      	ldrb	r3, [r3, r2]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d107      	bne.n	8003778 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	223c      	movs	r2, #60	; 0x3c
 800376c:	2100      	movs	r1, #0
 800376e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	0018      	movs	r0, r3
 8003774:	f7fd fe06 	bl	8001384 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	223d      	movs	r2, #61	; 0x3d
 800377c:	2102      	movs	r1, #2
 800377e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	493f      	ldr	r1, [pc, #252]	; (8003888 <HAL_TIM_Encoder_Init+0x140>)
 800378c:	400a      	ands	r2, r1
 800378e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3304      	adds	r3, #4
 8003798:	0019      	movs	r1, r3
 800379a:	0010      	movs	r0, r2
 800379c:	f000 fba4 	bl	8003ee8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	4313      	orrs	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4a31      	ldr	r2, [pc, #196]	; (800388c <HAL_TIM_Encoder_Init+0x144>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	021b      	lsls	r3, r3, #8
 80037d4:	4313      	orrs	r3, r2
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4a2c      	ldr	r2, [pc, #176]	; (8003890 <HAL_TIM_Encoder_Init+0x148>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4a2b      	ldr	r2, [pc, #172]	; (8003894 <HAL_TIM_Encoder_Init+0x14c>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	021b      	lsls	r3, r3, #8
 80037f6:	4313      	orrs	r3, r2
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	011a      	lsls	r2, r3, #4
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	031b      	lsls	r3, r3, #12
 800380a:	4313      	orrs	r3, r2
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2222      	movs	r2, #34	; 0x22
 8003816:	4393      	bics	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2288      	movs	r2, #136	; 0x88
 800381e:	4393      	bics	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	4313      	orrs	r3, r2
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4313      	orrs	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2248      	movs	r2, #72	; 0x48
 8003850:	2101      	movs	r1, #1
 8003852:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	223e      	movs	r2, #62	; 0x3e
 8003858:	2101      	movs	r1, #1
 800385a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	223f      	movs	r2, #63	; 0x3f
 8003860:	2101      	movs	r1, #1
 8003862:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2244      	movs	r2, #68	; 0x44
 8003868:	2101      	movs	r1, #1
 800386a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2245      	movs	r2, #69	; 0x45
 8003870:	2101      	movs	r1, #1
 8003872:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	223d      	movs	r2, #61	; 0x3d
 8003878:	2101      	movs	r1, #1
 800387a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	0018      	movs	r0, r3
 8003880:	46bd      	mov	sp, r7
 8003882:	b006      	add	sp, #24
 8003884:	bd80      	pop	{r7, pc}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	fffebff8 	.word	0xfffebff8
 800388c:	fffffcfc 	.word	0xfffffcfc
 8003890:	fffff3f3 	.word	0xfffff3f3
 8003894:	ffff0f0f 	.word	0xffff0f0f

08003898 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2202      	movs	r2, #2
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d124      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	2202      	movs	r2, #2
 80038b6:	4013      	ands	r3, r2
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d11d      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2203      	movs	r2, #3
 80038c2:	4252      	negs	r2, r2
 80038c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	2203      	movs	r2, #3
 80038d4:	4013      	ands	r3, r2
 80038d6:	d004      	beq.n	80038e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	0018      	movs	r0, r3
 80038dc:	f000 faec 	bl	8003eb8 <HAL_TIM_IC_CaptureCallback>
 80038e0:	e007      	b.n	80038f2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	0018      	movs	r0, r3
 80038e6:	f000 fadf 	bl	8003ea8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	0018      	movs	r0, r3
 80038ee:	f000 faeb 	bl	8003ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	2204      	movs	r2, #4
 8003900:	4013      	ands	r3, r2
 8003902:	2b04      	cmp	r3, #4
 8003904:	d125      	bne.n	8003952 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	2204      	movs	r2, #4
 800390e:	4013      	ands	r3, r2
 8003910:	2b04      	cmp	r3, #4
 8003912:	d11e      	bne.n	8003952 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2205      	movs	r2, #5
 800391a:	4252      	negs	r2, r2
 800391c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2202      	movs	r2, #2
 8003922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	23c0      	movs	r3, #192	; 0xc0
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4013      	ands	r3, r2
 8003930:	d004      	beq.n	800393c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	0018      	movs	r0, r3
 8003936:	f000 fabf 	bl	8003eb8 <HAL_TIM_IC_CaptureCallback>
 800393a:	e007      	b.n	800394c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	0018      	movs	r0, r3
 8003940:	f000 fab2 	bl	8003ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	0018      	movs	r0, r3
 8003948:	f000 fabe 	bl	8003ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	2208      	movs	r2, #8
 800395a:	4013      	ands	r3, r2
 800395c:	2b08      	cmp	r3, #8
 800395e:	d124      	bne.n	80039aa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	2208      	movs	r2, #8
 8003968:	4013      	ands	r3, r2
 800396a:	2b08      	cmp	r3, #8
 800396c:	d11d      	bne.n	80039aa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2209      	movs	r2, #9
 8003974:	4252      	negs	r2, r2
 8003976:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2204      	movs	r2, #4
 800397c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	2203      	movs	r2, #3
 8003986:	4013      	ands	r3, r2
 8003988:	d004      	beq.n	8003994 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	0018      	movs	r0, r3
 800398e:	f000 fa93 	bl	8003eb8 <HAL_TIM_IC_CaptureCallback>
 8003992:	e007      	b.n	80039a4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	0018      	movs	r0, r3
 8003998:	f000 fa86 	bl	8003ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	0018      	movs	r0, r3
 80039a0:	f000 fa92 	bl	8003ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	2210      	movs	r2, #16
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b10      	cmp	r3, #16
 80039b6:	d125      	bne.n	8003a04 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	2210      	movs	r2, #16
 80039c0:	4013      	ands	r3, r2
 80039c2:	2b10      	cmp	r3, #16
 80039c4:	d11e      	bne.n	8003a04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2211      	movs	r2, #17
 80039cc:	4252      	negs	r2, r2
 80039ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2208      	movs	r2, #8
 80039d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	23c0      	movs	r3, #192	; 0xc0
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4013      	ands	r3, r2
 80039e2:	d004      	beq.n	80039ee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	0018      	movs	r0, r3
 80039e8:	f000 fa66 	bl	8003eb8 <HAL_TIM_IC_CaptureCallback>
 80039ec:	e007      	b.n	80039fe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	0018      	movs	r0, r3
 80039f2:	f000 fa59 	bl	8003ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	0018      	movs	r0, r3
 80039fa:	f000 fa65 	bl	8003ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d10f      	bne.n	8003a32 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d108      	bne.n	8003a32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2202      	movs	r2, #2
 8003a26:	4252      	negs	r2, r2
 8003a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f7fc fedd 	bl	80007ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2280      	movs	r2, #128	; 0x80
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b80      	cmp	r3, #128	; 0x80
 8003a3e:	d10f      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	2280      	movs	r2, #128	; 0x80
 8003a48:	4013      	ands	r3, r2
 8003a4a:	2b80      	cmp	r3, #128	; 0x80
 8003a4c:	d108      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2281      	movs	r2, #129	; 0x81
 8003a54:	4252      	negs	r2, r2
 8003a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f000 ff30 	bl	80048c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	2380      	movs	r3, #128	; 0x80
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	401a      	ands	r2, r3
 8003a6c:	2380      	movs	r3, #128	; 0x80
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d10e      	bne.n	8003a92 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	2280      	movs	r2, #128	; 0x80
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b80      	cmp	r3, #128	; 0x80
 8003a80:	d107      	bne.n	8003a92 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a1c      	ldr	r2, [pc, #112]	; (8003af8 <HAL_TIM_IRQHandler+0x260>)
 8003a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f000 ff1f 	bl	80048d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	2240      	movs	r2, #64	; 0x40
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b40      	cmp	r3, #64	; 0x40
 8003a9e:	d10f      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	2240      	movs	r2, #64	; 0x40
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b40      	cmp	r3, #64	; 0x40
 8003aac:	d108      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2241      	movs	r2, #65	; 0x41
 8003ab4:	4252      	negs	r2, r2
 8003ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	0018      	movs	r0, r3
 8003abc:	f000 fa0c 	bl	8003ed8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	4013      	ands	r3, r2
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d10f      	bne.n	8003aee <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d108      	bne.n	8003aee <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2221      	movs	r2, #33	; 0x21
 8003ae2:	4252      	negs	r2, r2
 8003ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f000 fee1 	bl	80048b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	46bd      	mov	sp, r7
 8003af2:	b002      	add	sp, #8
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	46c0      	nop			; (mov r8, r8)
 8003af8:	fffffeff 	.word	0xfffffeff

08003afc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b08:	2317      	movs	r3, #23
 8003b0a:	18fb      	adds	r3, r7, r3
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	223c      	movs	r2, #60	; 0x3c
 8003b14:	5c9b      	ldrb	r3, [r3, r2]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_TIM_PWM_ConfigChannel+0x22>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e0e5      	b.n	8003cea <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	223c      	movs	r2, #60	; 0x3c
 8003b22:	2101      	movs	r1, #1
 8003b24:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b14      	cmp	r3, #20
 8003b2a:	d900      	bls.n	8003b2e <HAL_TIM_PWM_ConfigChannel+0x32>
 8003b2c:	e0d1      	b.n	8003cd2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	009a      	lsls	r2, r3, #2
 8003b32:	4b70      	ldr	r3, [pc, #448]	; (8003cf4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003b34:	18d3      	adds	r3, r2, r3
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	0011      	movs	r1, r2
 8003b42:	0018      	movs	r0, r3
 8003b44:	f000 fa46 	bl	8003fd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699a      	ldr	r2, [r3, #24]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2108      	movs	r1, #8
 8003b54:	430a      	orrs	r2, r1
 8003b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699a      	ldr	r2, [r3, #24]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2104      	movs	r1, #4
 8003b64:	438a      	bics	r2, r1
 8003b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6999      	ldr	r1, [r3, #24]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	691a      	ldr	r2, [r3, #16]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	619a      	str	r2, [r3, #24]
      break;
 8003b7a:	e0af      	b.n	8003cdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	0011      	movs	r1, r2
 8003b84:	0018      	movs	r0, r3
 8003b86:	f000 faaf 	bl	80040e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699a      	ldr	r2, [r3, #24]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2180      	movs	r1, #128	; 0x80
 8003b96:	0109      	lsls	r1, r1, #4
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4954      	ldr	r1, [pc, #336]	; (8003cf8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003ba8:	400a      	ands	r2, r1
 8003baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6999      	ldr	r1, [r3, #24]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	021a      	lsls	r2, r3, #8
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	619a      	str	r2, [r3, #24]
      break;
 8003bc0:	e08c      	b.n	8003cdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	0011      	movs	r1, r2
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f000 fb10 	bl	80041f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	69da      	ldr	r2, [r3, #28]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2108      	movs	r1, #8
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2104      	movs	r1, #4
 8003bec:	438a      	bics	r2, r1
 8003bee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	69d9      	ldr	r1, [r3, #28]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	61da      	str	r2, [r3, #28]
      break;
 8003c02:	e06b      	b.n	8003cdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	0011      	movs	r1, r2
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f000 fb77 	bl	8004300 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69da      	ldr	r2, [r3, #28]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2180      	movs	r1, #128	; 0x80
 8003c1e:	0109      	lsls	r1, r1, #4
 8003c20:	430a      	orrs	r2, r1
 8003c22:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	69da      	ldr	r2, [r3, #28]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4932      	ldr	r1, [pc, #200]	; (8003cf8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003c30:	400a      	ands	r2, r1
 8003c32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	69d9      	ldr	r1, [r3, #28]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	021a      	lsls	r2, r3, #8
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	61da      	str	r2, [r3, #28]
      break;
 8003c48:	e048      	b.n	8003cdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	0011      	movs	r1, r2
 8003c52:	0018      	movs	r0, r3
 8003c54:	f000 fbbe 	bl	80043d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2108      	movs	r1, #8
 8003c64:	430a      	orrs	r2, r1
 8003c66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2104      	movs	r1, #4
 8003c74:	438a      	bics	r2, r1
 8003c76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c8a:	e027      	b.n	8003cdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	0011      	movs	r1, r2
 8003c94:	0018      	movs	r0, r3
 8003c96:	f000 fbfd 	bl	8004494 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2180      	movs	r1, #128	; 0x80
 8003ca6:	0109      	lsls	r1, r1, #4
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4910      	ldr	r1, [pc, #64]	; (8003cf8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003cb8:	400a      	ands	r2, r1
 8003cba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	021a      	lsls	r2, r3, #8
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003cd0:	e004      	b.n	8003cdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003cd2:	2317      	movs	r3, #23
 8003cd4:	18fb      	adds	r3, r7, r3
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	701a      	strb	r2, [r3, #0]
      break;
 8003cda:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	223c      	movs	r2, #60	; 0x3c
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	5499      	strb	r1, [r3, r2]

  return status;
 8003ce4:	2317      	movs	r3, #23
 8003ce6:	18fb      	adds	r3, r7, r3
 8003ce8:	781b      	ldrb	r3, [r3, #0]
}
 8003cea:	0018      	movs	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	b006      	add	sp, #24
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	080088bc 	.word	0x080088bc
 8003cf8:	fffffbff 	.word	0xfffffbff

08003cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d06:	230f      	movs	r3, #15
 8003d08:	18fb      	adds	r3, r7, r3
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	223c      	movs	r2, #60	; 0x3c
 8003d12:	5c9b      	ldrb	r3, [r3, r2]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_TIM_ConfigClockSource+0x20>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e0bc      	b.n	8003e96 <HAL_TIM_ConfigClockSource+0x19a>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	223c      	movs	r2, #60	; 0x3c
 8003d20:	2101      	movs	r1, #1
 8003d22:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	223d      	movs	r2, #61	; 0x3d
 8003d28:	2102      	movs	r1, #2
 8003d2a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4a5a      	ldr	r2, [pc, #360]	; (8003ea0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4a59      	ldr	r2, [pc, #356]	; (8003ea4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2280      	movs	r2, #128	; 0x80
 8003d52:	0192      	lsls	r2, r2, #6
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d040      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0xde>
 8003d58:	2280      	movs	r2, #128	; 0x80
 8003d5a:	0192      	lsls	r2, r2, #6
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d900      	bls.n	8003d62 <HAL_TIM_ConfigClockSource+0x66>
 8003d60:	e088      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x178>
 8003d62:	2280      	movs	r2, #128	; 0x80
 8003d64:	0152      	lsls	r2, r2, #5
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d100      	bne.n	8003d6c <HAL_TIM_ConfigClockSource+0x70>
 8003d6a:	e088      	b.n	8003e7e <HAL_TIM_ConfigClockSource+0x182>
 8003d6c:	2280      	movs	r2, #128	; 0x80
 8003d6e:	0152      	lsls	r2, r2, #5
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d900      	bls.n	8003d76 <HAL_TIM_ConfigClockSource+0x7a>
 8003d74:	e07e      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x178>
 8003d76:	2b70      	cmp	r3, #112	; 0x70
 8003d78:	d018      	beq.n	8003dac <HAL_TIM_ConfigClockSource+0xb0>
 8003d7a:	d900      	bls.n	8003d7e <HAL_TIM_ConfigClockSource+0x82>
 8003d7c:	e07a      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x178>
 8003d7e:	2b60      	cmp	r3, #96	; 0x60
 8003d80:	d04f      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x126>
 8003d82:	d900      	bls.n	8003d86 <HAL_TIM_ConfigClockSource+0x8a>
 8003d84:	e076      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x178>
 8003d86:	2b50      	cmp	r3, #80	; 0x50
 8003d88:	d03b      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x106>
 8003d8a:	d900      	bls.n	8003d8e <HAL_TIM_ConfigClockSource+0x92>
 8003d8c:	e072      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x178>
 8003d8e:	2b40      	cmp	r3, #64	; 0x40
 8003d90:	d057      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x146>
 8003d92:	d900      	bls.n	8003d96 <HAL_TIM_ConfigClockSource+0x9a>
 8003d94:	e06e      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x178>
 8003d96:	2b30      	cmp	r3, #48	; 0x30
 8003d98:	d063      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x166>
 8003d9a:	d86b      	bhi.n	8003e74 <HAL_TIM_ConfigClockSource+0x178>
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d060      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x166>
 8003da0:	d868      	bhi.n	8003e74 <HAL_TIM_ConfigClockSource+0x178>
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d05d      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x166>
 8003da6:	2b10      	cmp	r3, #16
 8003da8:	d05b      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x166>
 8003daa:	e063      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dbc:	f000 fc4a 	bl	8004654 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2277      	movs	r2, #119	; 0x77
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	609a      	str	r2, [r3, #8]
      break;
 8003dd8:	e052      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dea:	f000 fc33 	bl	8004654 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2180      	movs	r1, #128	; 0x80
 8003dfa:	01c9      	lsls	r1, r1, #7
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	609a      	str	r2, [r3, #8]
      break;
 8003e00:	e03e      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e0e:	001a      	movs	r2, r3
 8003e10:	f000 fba4 	bl	800455c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2150      	movs	r1, #80	; 0x50
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f000 fbfe 	bl	800461c <TIM_ITRx_SetConfig>
      break;
 8003e20:	e02e      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e2e:	001a      	movs	r2, r3
 8003e30:	f000 fbc2 	bl	80045b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2160      	movs	r1, #96	; 0x60
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f000 fbee 	bl	800461c <TIM_ITRx_SetConfig>
      break;
 8003e40:	e01e      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e4e:	001a      	movs	r2, r3
 8003e50:	f000 fb84 	bl	800455c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2140      	movs	r1, #64	; 0x40
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f000 fbde 	bl	800461c <TIM_ITRx_SetConfig>
      break;
 8003e60:	e00e      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	0019      	movs	r1, r3
 8003e6c:	0010      	movs	r0, r2
 8003e6e:	f000 fbd5 	bl	800461c <TIM_ITRx_SetConfig>
      break;
 8003e72:	e005      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003e74:	230f      	movs	r3, #15
 8003e76:	18fb      	adds	r3, r7, r3
 8003e78:	2201      	movs	r2, #1
 8003e7a:	701a      	strb	r2, [r3, #0]
      break;
 8003e7c:	e000      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003e7e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	223d      	movs	r2, #61	; 0x3d
 8003e84:	2101      	movs	r1, #1
 8003e86:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	223c      	movs	r2, #60	; 0x3c
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	5499      	strb	r1, [r3, r2]

  return status;
 8003e90:	230f      	movs	r3, #15
 8003e92:	18fb      	adds	r3, r7, r3
 8003e94:	781b      	ldrb	r3, [r3, #0]
}
 8003e96:	0018      	movs	r0, r3
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	b004      	add	sp, #16
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	ffceff88 	.word	0xffceff88
 8003ea4:	ffff00ff 	.word	0xffff00ff

08003ea8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003eb0:	46c0      	nop			; (mov r8, r8)
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b002      	add	sp, #8
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b002      	add	sp, #8
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ed0:	46c0      	nop			; (mov r8, r8)
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b002      	add	sp, #8
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ee0:	46c0      	nop			; (mov r8, r8)
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b002      	add	sp, #8
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a2f      	ldr	r2, [pc, #188]	; (8003fb8 <TIM_Base_SetConfig+0xd0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <TIM_Base_SetConfig+0x20>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a2e      	ldr	r2, [pc, #184]	; (8003fbc <TIM_Base_SetConfig+0xd4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d108      	bne.n	8003f1a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2270      	movs	r2, #112	; 0x70
 8003f0c:	4393      	bics	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a26      	ldr	r2, [pc, #152]	; (8003fb8 <TIM_Base_SetConfig+0xd0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d013      	beq.n	8003f4a <TIM_Base_SetConfig+0x62>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a25      	ldr	r2, [pc, #148]	; (8003fbc <TIM_Base_SetConfig+0xd4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00f      	beq.n	8003f4a <TIM_Base_SetConfig+0x62>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a24      	ldr	r2, [pc, #144]	; (8003fc0 <TIM_Base_SetConfig+0xd8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00b      	beq.n	8003f4a <TIM_Base_SetConfig+0x62>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a23      	ldr	r2, [pc, #140]	; (8003fc4 <TIM_Base_SetConfig+0xdc>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d007      	beq.n	8003f4a <TIM_Base_SetConfig+0x62>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a22      	ldr	r2, [pc, #136]	; (8003fc8 <TIM_Base_SetConfig+0xe0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d003      	beq.n	8003f4a <TIM_Base_SetConfig+0x62>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a21      	ldr	r2, [pc, #132]	; (8003fcc <TIM_Base_SetConfig+0xe4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d108      	bne.n	8003f5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4a20      	ldr	r2, [pc, #128]	; (8003fd0 <TIM_Base_SetConfig+0xe8>)
 8003f4e:	4013      	ands	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2280      	movs	r2, #128	; 0x80
 8003f60:	4393      	bics	r3, r2
 8003f62:	001a      	movs	r2, r3
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	689a      	ldr	r2, [r3, #8]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a0c      	ldr	r2, [pc, #48]	; (8003fb8 <TIM_Base_SetConfig+0xd0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00b      	beq.n	8003fa2 <TIM_Base_SetConfig+0xba>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a0d      	ldr	r2, [pc, #52]	; (8003fc4 <TIM_Base_SetConfig+0xdc>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d007      	beq.n	8003fa2 <TIM_Base_SetConfig+0xba>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a0c      	ldr	r2, [pc, #48]	; (8003fc8 <TIM_Base_SetConfig+0xe0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d003      	beq.n	8003fa2 <TIM_Base_SetConfig+0xba>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a0b      	ldr	r2, [pc, #44]	; (8003fcc <TIM_Base_SetConfig+0xe4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d103      	bne.n	8003faa <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	615a      	str	r2, [r3, #20]
}
 8003fb0:	46c0      	nop			; (mov r8, r8)
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b004      	add	sp, #16
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40012c00 	.word	0x40012c00
 8003fbc:	40000400 	.word	0x40000400
 8003fc0:	40002000 	.word	0x40002000
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	40014400 	.word	0x40014400
 8003fcc:	40014800 	.word	0x40014800
 8003fd0:	fffffcff 	.word	0xfffffcff

08003fd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	4393      	bics	r3, r2
 8003fe6:	001a      	movs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4a32      	ldr	r2, [pc, #200]	; (80040cc <TIM_OC1_SetConfig+0xf8>)
 8004002:	4013      	ands	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2203      	movs	r2, #3
 800400a:	4393      	bics	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4313      	orrs	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2202      	movs	r2, #2
 800401c:	4393      	bics	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a28      	ldr	r2, [pc, #160]	; (80040d0 <TIM_OC1_SetConfig+0xfc>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00b      	beq.n	800404a <TIM_OC1_SetConfig+0x76>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a27      	ldr	r2, [pc, #156]	; (80040d4 <TIM_OC1_SetConfig+0x100>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d007      	beq.n	800404a <TIM_OC1_SetConfig+0x76>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a26      	ldr	r2, [pc, #152]	; (80040d8 <TIM_OC1_SetConfig+0x104>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d003      	beq.n	800404a <TIM_OC1_SetConfig+0x76>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a25      	ldr	r2, [pc, #148]	; (80040dc <TIM_OC1_SetConfig+0x108>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d10c      	bne.n	8004064 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2208      	movs	r2, #8
 800404e:	4393      	bics	r3, r2
 8004050:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	2204      	movs	r2, #4
 8004060:	4393      	bics	r3, r2
 8004062:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a1a      	ldr	r2, [pc, #104]	; (80040d0 <TIM_OC1_SetConfig+0xfc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d00b      	beq.n	8004084 <TIM_OC1_SetConfig+0xb0>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a19      	ldr	r2, [pc, #100]	; (80040d4 <TIM_OC1_SetConfig+0x100>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d007      	beq.n	8004084 <TIM_OC1_SetConfig+0xb0>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a18      	ldr	r2, [pc, #96]	; (80040d8 <TIM_OC1_SetConfig+0x104>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d003      	beq.n	8004084 <TIM_OC1_SetConfig+0xb0>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a17      	ldr	r2, [pc, #92]	; (80040dc <TIM_OC1_SetConfig+0x108>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d111      	bne.n	80040a8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4a16      	ldr	r2, [pc, #88]	; (80040e0 <TIM_OC1_SetConfig+0x10c>)
 8004088:	4013      	ands	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4a15      	ldr	r2, [pc, #84]	; (80040e4 <TIM_OC1_SetConfig+0x110>)
 8004090:	4013      	ands	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	621a      	str	r2, [r3, #32]
}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	46bd      	mov	sp, r7
 80040c6:	b006      	add	sp, #24
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	fffeff8f 	.word	0xfffeff8f
 80040d0:	40012c00 	.word	0x40012c00
 80040d4:	40014000 	.word	0x40014000
 80040d8:	40014400 	.word	0x40014400
 80040dc:	40014800 	.word	0x40014800
 80040e0:	fffffeff 	.word	0xfffffeff
 80040e4:	fffffdff 	.word	0xfffffdff

080040e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	2210      	movs	r2, #16
 80040f8:	4393      	bics	r3, r2
 80040fa:	001a      	movs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	4a2e      	ldr	r2, [pc, #184]	; (80041d0 <TIM_OC2_SetConfig+0xe8>)
 8004116:	4013      	ands	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4a2d      	ldr	r2, [pc, #180]	; (80041d4 <TIM_OC2_SetConfig+0xec>)
 800411e:	4013      	ands	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	021b      	lsls	r3, r3, #8
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2220      	movs	r2, #32
 8004132:	4393      	bics	r3, r2
 8004134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4313      	orrs	r3, r2
 8004140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a24      	ldr	r2, [pc, #144]	; (80041d8 <TIM_OC2_SetConfig+0xf0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d10d      	bne.n	8004166 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2280      	movs	r2, #128	; 0x80
 800414e:	4393      	bics	r3, r2
 8004150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	4313      	orrs	r3, r2
 800415c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2240      	movs	r2, #64	; 0x40
 8004162:	4393      	bics	r3, r2
 8004164:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a1b      	ldr	r2, [pc, #108]	; (80041d8 <TIM_OC2_SetConfig+0xf0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00b      	beq.n	8004186 <TIM_OC2_SetConfig+0x9e>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a1a      	ldr	r2, [pc, #104]	; (80041dc <TIM_OC2_SetConfig+0xf4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d007      	beq.n	8004186 <TIM_OC2_SetConfig+0x9e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a19      	ldr	r2, [pc, #100]	; (80041e0 <TIM_OC2_SetConfig+0xf8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d003      	beq.n	8004186 <TIM_OC2_SetConfig+0x9e>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a18      	ldr	r2, [pc, #96]	; (80041e4 <TIM_OC2_SetConfig+0xfc>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d113      	bne.n	80041ae <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	4a17      	ldr	r2, [pc, #92]	; (80041e8 <TIM_OC2_SetConfig+0x100>)
 800418a:	4013      	ands	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4a16      	ldr	r2, [pc, #88]	; (80041ec <TIM_OC2_SetConfig+0x104>)
 8004192:	4013      	ands	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	621a      	str	r2, [r3, #32]
}
 80041c8:	46c0      	nop			; (mov r8, r8)
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b006      	add	sp, #24
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	feff8fff 	.word	0xfeff8fff
 80041d4:	fffffcff 	.word	0xfffffcff
 80041d8:	40012c00 	.word	0x40012c00
 80041dc:	40014000 	.word	0x40014000
 80041e0:	40014400 	.word	0x40014400
 80041e4:	40014800 	.word	0x40014800
 80041e8:	fffffbff 	.word	0xfffffbff
 80041ec:	fffff7ff 	.word	0xfffff7ff

080041f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	4a35      	ldr	r2, [pc, #212]	; (80042d4 <TIM_OC3_SetConfig+0xe4>)
 8004200:	401a      	ands	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4a2f      	ldr	r2, [pc, #188]	; (80042d8 <TIM_OC3_SetConfig+0xe8>)
 800421c:	4013      	ands	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2203      	movs	r2, #3
 8004224:	4393      	bics	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	4a29      	ldr	r2, [pc, #164]	; (80042dc <TIM_OC3_SetConfig+0xec>)
 8004236:	4013      	ands	r3, r2
 8004238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	021b      	lsls	r3, r3, #8
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	4313      	orrs	r3, r2
 8004244:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a25      	ldr	r2, [pc, #148]	; (80042e0 <TIM_OC3_SetConfig+0xf0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d10d      	bne.n	800426a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	4a24      	ldr	r2, [pc, #144]	; (80042e4 <TIM_OC3_SetConfig+0xf4>)
 8004252:	4013      	ands	r3, r2
 8004254:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	021b      	lsls	r3, r3, #8
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	4313      	orrs	r3, r2
 8004260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	4a20      	ldr	r2, [pc, #128]	; (80042e8 <TIM_OC3_SetConfig+0xf8>)
 8004266:	4013      	ands	r3, r2
 8004268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a1c      	ldr	r2, [pc, #112]	; (80042e0 <TIM_OC3_SetConfig+0xf0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00b      	beq.n	800428a <TIM_OC3_SetConfig+0x9a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a1d      	ldr	r2, [pc, #116]	; (80042ec <TIM_OC3_SetConfig+0xfc>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d007      	beq.n	800428a <TIM_OC3_SetConfig+0x9a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a1c      	ldr	r2, [pc, #112]	; (80042f0 <TIM_OC3_SetConfig+0x100>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_OC3_SetConfig+0x9a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a1b      	ldr	r2, [pc, #108]	; (80042f4 <TIM_OC3_SetConfig+0x104>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d113      	bne.n	80042b2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	4a1a      	ldr	r2, [pc, #104]	; (80042f8 <TIM_OC3_SetConfig+0x108>)
 800428e:	4013      	ands	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	4a19      	ldr	r2, [pc, #100]	; (80042fc <TIM_OC3_SetConfig+0x10c>)
 8004296:	4013      	ands	r3, r2
 8004298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	621a      	str	r2, [r3, #32]
}
 80042cc:	46c0      	nop			; (mov r8, r8)
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b006      	add	sp, #24
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	fffffeff 	.word	0xfffffeff
 80042d8:	fffeff8f 	.word	0xfffeff8f
 80042dc:	fffffdff 	.word	0xfffffdff
 80042e0:	40012c00 	.word	0x40012c00
 80042e4:	fffff7ff 	.word	0xfffff7ff
 80042e8:	fffffbff 	.word	0xfffffbff
 80042ec:	40014000 	.word	0x40014000
 80042f0:	40014400 	.word	0x40014400
 80042f4:	40014800 	.word	0x40014800
 80042f8:	ffffefff 	.word	0xffffefff
 80042fc:	ffffdfff 	.word	0xffffdfff

08004300 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	4a28      	ldr	r2, [pc, #160]	; (80043b0 <TIM_OC4_SetConfig+0xb0>)
 8004310:	401a      	ands	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4a22      	ldr	r2, [pc, #136]	; (80043b4 <TIM_OC4_SetConfig+0xb4>)
 800432c:	4013      	ands	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4a21      	ldr	r2, [pc, #132]	; (80043b8 <TIM_OC4_SetConfig+0xb8>)
 8004334:	4013      	ands	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	021b      	lsls	r3, r3, #8
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	4313      	orrs	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	4a1d      	ldr	r2, [pc, #116]	; (80043bc <TIM_OC4_SetConfig+0xbc>)
 8004348:	4013      	ands	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	031b      	lsls	r3, r3, #12
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a19      	ldr	r2, [pc, #100]	; (80043c0 <TIM_OC4_SetConfig+0xc0>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d00b      	beq.n	8004378 <TIM_OC4_SetConfig+0x78>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a18      	ldr	r2, [pc, #96]	; (80043c4 <TIM_OC4_SetConfig+0xc4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d007      	beq.n	8004378 <TIM_OC4_SetConfig+0x78>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a17      	ldr	r2, [pc, #92]	; (80043c8 <TIM_OC4_SetConfig+0xc8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d003      	beq.n	8004378 <TIM_OC4_SetConfig+0x78>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a16      	ldr	r2, [pc, #88]	; (80043cc <TIM_OC4_SetConfig+0xcc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d109      	bne.n	800438c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	4a15      	ldr	r2, [pc, #84]	; (80043d0 <TIM_OC4_SetConfig+0xd0>)
 800437c:	4013      	ands	r3, r2
 800437e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	019b      	lsls	r3, r3, #6
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	621a      	str	r2, [r3, #32]
}
 80043a6:	46c0      	nop			; (mov r8, r8)
 80043a8:	46bd      	mov	sp, r7
 80043aa:	b006      	add	sp, #24
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	ffffefff 	.word	0xffffefff
 80043b4:	feff8fff 	.word	0xfeff8fff
 80043b8:	fffffcff 	.word	0xfffffcff
 80043bc:	ffffdfff 	.word	0xffffdfff
 80043c0:	40012c00 	.word	0x40012c00
 80043c4:	40014000 	.word	0x40014000
 80043c8:	40014400 	.word	0x40014400
 80043cc:	40014800 	.word	0x40014800
 80043d0:	ffffbfff 	.word	0xffffbfff

080043d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	4a25      	ldr	r2, [pc, #148]	; (8004478 <TIM_OC5_SetConfig+0xa4>)
 80043e4:	401a      	ands	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4a1f      	ldr	r2, [pc, #124]	; (800447c <TIM_OC5_SetConfig+0xa8>)
 8004400:	4013      	ands	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	4a1b      	ldr	r2, [pc, #108]	; (8004480 <TIM_OC5_SetConfig+0xac>)
 8004412:	4013      	ands	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	041b      	lsls	r3, r3, #16
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a17      	ldr	r2, [pc, #92]	; (8004484 <TIM_OC5_SetConfig+0xb0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00b      	beq.n	8004442 <TIM_OC5_SetConfig+0x6e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a16      	ldr	r2, [pc, #88]	; (8004488 <TIM_OC5_SetConfig+0xb4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d007      	beq.n	8004442 <TIM_OC5_SetConfig+0x6e>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a15      	ldr	r2, [pc, #84]	; (800448c <TIM_OC5_SetConfig+0xb8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d003      	beq.n	8004442 <TIM_OC5_SetConfig+0x6e>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a14      	ldr	r2, [pc, #80]	; (8004490 <TIM_OC5_SetConfig+0xbc>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d109      	bne.n	8004456 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	4a0c      	ldr	r2, [pc, #48]	; (8004478 <TIM_OC5_SetConfig+0xa4>)
 8004446:	4013      	ands	r3, r2
 8004448:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	021b      	lsls	r3, r3, #8
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	4313      	orrs	r3, r2
 8004454:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	621a      	str	r2, [r3, #32]
}
 8004470:	46c0      	nop			; (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	b006      	add	sp, #24
 8004476:	bd80      	pop	{r7, pc}
 8004478:	fffeffff 	.word	0xfffeffff
 800447c:	fffeff8f 	.word	0xfffeff8f
 8004480:	fffdffff 	.word	0xfffdffff
 8004484:	40012c00 	.word	0x40012c00
 8004488:	40014000 	.word	0x40014000
 800448c:	40014400 	.word	0x40014400
 8004490:	40014800 	.word	0x40014800

08004494 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	4a26      	ldr	r2, [pc, #152]	; (800453c <TIM_OC6_SetConfig+0xa8>)
 80044a4:	401a      	ands	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4a20      	ldr	r2, [pc, #128]	; (8004540 <TIM_OC6_SetConfig+0xac>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	021b      	lsls	r3, r3, #8
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4a1c      	ldr	r2, [pc, #112]	; (8004544 <TIM_OC6_SetConfig+0xb0>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	051b      	lsls	r3, r3, #20
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a18      	ldr	r2, [pc, #96]	; (8004548 <TIM_OC6_SetConfig+0xb4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00b      	beq.n	8004504 <TIM_OC6_SetConfig+0x70>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a17      	ldr	r2, [pc, #92]	; (800454c <TIM_OC6_SetConfig+0xb8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d007      	beq.n	8004504 <TIM_OC6_SetConfig+0x70>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a16      	ldr	r2, [pc, #88]	; (8004550 <TIM_OC6_SetConfig+0xbc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d003      	beq.n	8004504 <TIM_OC6_SetConfig+0x70>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a15      	ldr	r2, [pc, #84]	; (8004554 <TIM_OC6_SetConfig+0xc0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d109      	bne.n	8004518 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	4a14      	ldr	r2, [pc, #80]	; (8004558 <TIM_OC6_SetConfig+0xc4>)
 8004508:	4013      	ands	r3, r2
 800450a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	029b      	lsls	r3, r3, #10
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	4313      	orrs	r3, r2
 8004516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	621a      	str	r2, [r3, #32]
}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	46bd      	mov	sp, r7
 8004536:	b006      	add	sp, #24
 8004538:	bd80      	pop	{r7, pc}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	ffefffff 	.word	0xffefffff
 8004540:	feff8fff 	.word	0xfeff8fff
 8004544:	ffdfffff 	.word	0xffdfffff
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40014000 	.word	0x40014000
 8004550:	40014400 	.word	0x40014400
 8004554:	40014800 	.word	0x40014800
 8004558:	fffbffff 	.word	0xfffbffff

0800455c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	2201      	movs	r2, #1
 8004574:	4393      	bics	r3, r2
 8004576:	001a      	movs	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	22f0      	movs	r2, #240	; 0xf0
 8004586:	4393      	bics	r3, r2
 8004588:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	220a      	movs	r2, #10
 8004598:	4393      	bics	r3, r2
 800459a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	621a      	str	r2, [r3, #32]
}
 80045b0:	46c0      	nop			; (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b006      	add	sp, #24
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	2210      	movs	r2, #16
 80045ca:	4393      	bics	r3, r2
 80045cc:	001a      	movs	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	4a0d      	ldr	r2, [pc, #52]	; (8004618 <TIM_TI2_ConfigInputStage+0x60>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	031b      	lsls	r3, r3, #12
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	22a0      	movs	r2, #160	; 0xa0
 80045f4:	4393      	bics	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	621a      	str	r2, [r3, #32]
}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	46bd      	mov	sp, r7
 8004612:	b006      	add	sp, #24
 8004614:	bd80      	pop	{r7, pc}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	ffff0fff 	.word	0xffff0fff

0800461c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4a08      	ldr	r2, [pc, #32]	; (8004650 <TIM_ITRx_SetConfig+0x34>)
 8004630:	4013      	ands	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4313      	orrs	r3, r2
 800463a:	2207      	movs	r2, #7
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	609a      	str	r2, [r3, #8]
}
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	46bd      	mov	sp, r7
 800464a:	b004      	add	sp, #16
 800464c:	bd80      	pop	{r7, pc}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	ffcfff8f 	.word	0xffcfff8f

08004654 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
 8004660:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	4a09      	ldr	r2, [pc, #36]	; (8004690 <TIM_ETR_SetConfig+0x3c>)
 800466c:	4013      	ands	r3, r2
 800466e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	021a      	lsls	r2, r3, #8
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	431a      	orrs	r2, r3
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4313      	orrs	r3, r2
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	4313      	orrs	r3, r2
 8004680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	609a      	str	r2, [r3, #8]
}
 8004688:	46c0      	nop			; (mov r8, r8)
 800468a:	46bd      	mov	sp, r7
 800468c:	b006      	add	sp, #24
 800468e:	bd80      	pop	{r7, pc}
 8004690:	ffff00ff 	.word	0xffff00ff

08004694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	223c      	movs	r2, #60	; 0x3c
 80046a2:	5c9b      	ldrb	r3, [r3, r2]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e04f      	b.n	800474c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	223c      	movs	r2, #60	; 0x3c
 80046b0:	2101      	movs	r1, #1
 80046b2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	223d      	movs	r2, #61	; 0x3d
 80046b8:	2102      	movs	r1, #2
 80046ba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a20      	ldr	r2, [pc, #128]	; (8004754 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d108      	bne.n	80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4a1f      	ldr	r2, [pc, #124]	; (8004758 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80046da:	4013      	ands	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2270      	movs	r2, #112	; 0x70
 80046ec:	4393      	bics	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a13      	ldr	r2, [pc, #76]	; (8004754 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d009      	beq.n	8004720 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a12      	ldr	r2, [pc, #72]	; (800475c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d004      	beq.n	8004720 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a11      	ldr	r2, [pc, #68]	; (8004760 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d10c      	bne.n	800473a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2280      	movs	r2, #128	; 0x80
 8004724:	4393      	bics	r3, r2
 8004726:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	4313      	orrs	r3, r2
 8004730:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	223d      	movs	r2, #61	; 0x3d
 800473e:	2101      	movs	r1, #1
 8004740:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	223c      	movs	r2, #60	; 0x3c
 8004746:	2100      	movs	r1, #0
 8004748:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	0018      	movs	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	b004      	add	sp, #16
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40012c00 	.word	0x40012c00
 8004758:	ff0fffff 	.word	0xff0fffff
 800475c:	40000400 	.word	0x40000400
 8004760:	40014000 	.word	0x40014000

08004764 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	223c      	movs	r2, #60	; 0x3c
 8004776:	5c9b      	ldrb	r3, [r3, r2]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800477c:	2302      	movs	r3, #2
 800477e:	e079      	b.n	8004874 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	223c      	movs	r2, #60	; 0x3c
 8004784:	2101      	movs	r1, #1
 8004786:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	22ff      	movs	r2, #255	; 0xff
 800478c:	4393      	bics	r3, r2
 800478e:	001a      	movs	r2, r3
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4a38      	ldr	r2, [pc, #224]	; (800487c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800479c:	401a      	ands	r2, r3
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4a35      	ldr	r2, [pc, #212]	; (8004880 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80047aa:	401a      	ands	r2, r3
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4a33      	ldr	r2, [pc, #204]	; (8004884 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80047b8:	401a      	ands	r2, r3
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4a30      	ldr	r2, [pc, #192]	; (8004888 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80047c6:	401a      	ands	r2, r3
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4a2e      	ldr	r2, [pc, #184]	; (800488c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80047d4:	401a      	ands	r2, r3
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4a2b      	ldr	r2, [pc, #172]	; (8004890 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80047e2:	401a      	ands	r2, r3
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4a29      	ldr	r2, [pc, #164]	; (8004894 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80047f0:	401a      	ands	r2, r3
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	041b      	lsls	r3, r3, #16
 80047f8:	4313      	orrs	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a25      	ldr	r2, [pc, #148]	; (8004898 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d106      	bne.n	8004814 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4a24      	ldr	r2, [pc, #144]	; (800489c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800480a:	401a      	ands	r2, r3
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a1f      	ldr	r2, [pc, #124]	; (8004898 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d121      	bne.n	8004862 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4a1f      	ldr	r2, [pc, #124]	; (80048a0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004822:	401a      	ands	r2, r3
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	051b      	lsls	r3, r3, #20
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4a1c      	ldr	r2, [pc, #112]	; (80048a4 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8004832:	401a      	ands	r2, r3
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	4313      	orrs	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4a1a      	ldr	r2, [pc, #104]	; (80048a8 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004840:	401a      	ands	r2, r3
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a12      	ldr	r2, [pc, #72]	; (8004898 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d106      	bne.n	8004862 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4a15      	ldr	r2, [pc, #84]	; (80048ac <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004858:	401a      	ands	r2, r3
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485e:	4313      	orrs	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	223c      	movs	r2, #60	; 0x3c
 800486e:	2100      	movs	r1, #0
 8004870:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	0018      	movs	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	b004      	add	sp, #16
 800487a:	bd80      	pop	{r7, pc}
 800487c:	fffffcff 	.word	0xfffffcff
 8004880:	fffffbff 	.word	0xfffffbff
 8004884:	fffff7ff 	.word	0xfffff7ff
 8004888:	ffffefff 	.word	0xffffefff
 800488c:	ffffdfff 	.word	0xffffdfff
 8004890:	ffffbfff 	.word	0xffffbfff
 8004894:	fff0ffff 	.word	0xfff0ffff
 8004898:	40012c00 	.word	0x40012c00
 800489c:	efffffff 	.word	0xefffffff
 80048a0:	ff0fffff 	.word	0xff0fffff
 80048a4:	feffffff 	.word	0xfeffffff
 80048a8:	fdffffff 	.word	0xfdffffff
 80048ac:	dfffffff 	.word	0xdfffffff

080048b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048b8:	46c0      	nop			; (mov r8, r8)
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b002      	add	sp, #8
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048c8:	46c0      	nop			; (mov r8, r8)
 80048ca:	46bd      	mov	sp, r7
 80048cc:	b002      	add	sp, #8
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048d8:	46c0      	nop			; (mov r8, r8)
 80048da:	46bd      	mov	sp, r7
 80048dc:	b002      	add	sp, #8
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e046      	b.n	8004980 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2288      	movs	r2, #136	; 0x88
 80048f6:	589b      	ldr	r3, [r3, r2]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d107      	bne.n	800490c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2284      	movs	r2, #132	; 0x84
 8004900:	2100      	movs	r1, #0
 8004902:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	0018      	movs	r0, r3
 8004908:	f7fc ffa0 	bl	800184c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2288      	movs	r2, #136	; 0x88
 8004910:	2124      	movs	r1, #36	; 0x24
 8004912:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2101      	movs	r1, #1
 8004920:	438a      	bics	r2, r1
 8004922:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	0018      	movs	r0, r3
 8004928:	f000 f8cc 	bl	8004ac4 <UART_SetConfig>
 800492c:	0003      	movs	r3, r0
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e024      	b.n	8004980 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	0018      	movs	r0, r3
 8004942:	f000 fa63 	bl	8004e0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	490d      	ldr	r1, [pc, #52]	; (8004988 <HAL_UART_Init+0xa8>)
 8004952:	400a      	ands	r2, r1
 8004954:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	212a      	movs	r1, #42	; 0x2a
 8004962:	438a      	bics	r2, r1
 8004964:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2101      	movs	r1, #1
 8004972:	430a      	orrs	r2, r1
 8004974:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	0018      	movs	r0, r3
 800497a:	f000 fafb 	bl	8004f74 <UART_CheckIdleState>
 800497e:	0003      	movs	r3, r0
}
 8004980:	0018      	movs	r0, r3
 8004982:	46bd      	mov	sp, r7
 8004984:	b002      	add	sp, #8
 8004986:	bd80      	pop	{r7, pc}
 8004988:	ffffb7ff 	.word	0xffffb7ff

0800498c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08a      	sub	sp, #40	; 0x28
 8004990:	af02      	add	r7, sp, #8
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	603b      	str	r3, [r7, #0]
 8004998:	1dbb      	adds	r3, r7, #6
 800499a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2288      	movs	r2, #136	; 0x88
 80049a0:	589b      	ldr	r3, [r3, r2]
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d000      	beq.n	80049a8 <HAL_UART_Transmit+0x1c>
 80049a6:	e088      	b.n	8004aba <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_UART_Transmit+0x2a>
 80049ae:	1dbb      	adds	r3, r7, #6
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e080      	b.n	8004abc <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	2380      	movs	r3, #128	; 0x80
 80049c0:	015b      	lsls	r3, r3, #5
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d109      	bne.n	80049da <HAL_UART_Transmit+0x4e>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d105      	bne.n	80049da <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2201      	movs	r2, #1
 80049d2:	4013      	ands	r3, r2
 80049d4:	d001      	beq.n	80049da <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e070      	b.n	8004abc <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2290      	movs	r2, #144	; 0x90
 80049de:	2100      	movs	r1, #0
 80049e0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2288      	movs	r2, #136	; 0x88
 80049e6:	2121      	movs	r1, #33	; 0x21
 80049e8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049ea:	f7fd f835 	bl	8001a58 <HAL_GetTick>
 80049ee:	0003      	movs	r3, r0
 80049f0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	1dba      	adds	r2, r7, #6
 80049f6:	2154      	movs	r1, #84	; 0x54
 80049f8:	8812      	ldrh	r2, [r2, #0]
 80049fa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	1dba      	adds	r2, r7, #6
 8004a00:	2156      	movs	r1, #86	; 0x56
 8004a02:	8812      	ldrh	r2, [r2, #0]
 8004a04:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	2380      	movs	r3, #128	; 0x80
 8004a0c:	015b      	lsls	r3, r3, #5
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d108      	bne.n	8004a24 <HAL_UART_Transmit+0x98>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d104      	bne.n	8004a24 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	61bb      	str	r3, [r7, #24]
 8004a22:	e003      	b.n	8004a2c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a2c:	e02c      	b.n	8004a88 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	0013      	movs	r3, r2
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2180      	movs	r1, #128	; 0x80
 8004a3c:	f000 fae8 	bl	8005010 <UART_WaitOnFlagUntilTimeout>
 8004a40:	1e03      	subs	r3, r0, #0
 8004a42:	d001      	beq.n	8004a48 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e039      	b.n	8004abc <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10b      	bne.n	8004a66 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	001a      	movs	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	05d2      	lsls	r2, r2, #23
 8004a5a:	0dd2      	lsrs	r2, r2, #23
 8004a5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	3302      	adds	r3, #2
 8004a62:	61bb      	str	r3, [r7, #24]
 8004a64:	e007      	b.n	8004a76 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	781a      	ldrb	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	3301      	adds	r3, #1
 8004a74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2256      	movs	r2, #86	; 0x56
 8004a7a:	5a9b      	ldrh	r3, [r3, r2]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b299      	uxth	r1, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2256      	movs	r2, #86	; 0x56
 8004a86:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2256      	movs	r2, #86	; 0x56
 8004a8c:	5a9b      	ldrh	r3, [r3, r2]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1cc      	bne.n	8004a2e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	0013      	movs	r3, r2
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2140      	movs	r1, #64	; 0x40
 8004aa2:	f000 fab5 	bl	8005010 <UART_WaitOnFlagUntilTimeout>
 8004aa6:	1e03      	subs	r3, r0, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e006      	b.n	8004abc <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2288      	movs	r2, #136	; 0x88
 8004ab2:	2120      	movs	r1, #32
 8004ab4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e000      	b.n	8004abc <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8004aba:	2302      	movs	r3, #2
  }
}
 8004abc:	0018      	movs	r0, r3
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	b008      	add	sp, #32
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004acc:	231a      	movs	r3, #26
 8004ace:	18fb      	adds	r3, r7, r3
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4abc      	ldr	r2, [pc, #752]	; (8004de4 <UART_SetConfig+0x320>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	0019      	movs	r1, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	69fa      	ldr	r2, [r7, #28]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	4ab7      	ldr	r2, [pc, #732]	; (8004de8 <UART_SetConfig+0x324>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	0019      	movs	r1, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	69fa      	ldr	r2, [r7, #28]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	4aae      	ldr	r2, [pc, #696]	; (8004dec <UART_SetConfig+0x328>)
 8004b32:	4013      	ands	r3, r2
 8004b34:	0019      	movs	r1, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b46:	220f      	movs	r2, #15
 8004b48:	4393      	bics	r3, r2
 8004b4a:	0019      	movs	r1, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4aa4      	ldr	r2, [pc, #656]	; (8004df0 <UART_SetConfig+0x32c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d127      	bne.n	8004bb2 <UART_SetConfig+0xee>
 8004b62:	4ba4      	ldr	r3, [pc, #656]	; (8004df4 <UART_SetConfig+0x330>)
 8004b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b66:	2203      	movs	r2, #3
 8004b68:	4013      	ands	r3, r2
 8004b6a:	2b03      	cmp	r3, #3
 8004b6c:	d017      	beq.n	8004b9e <UART_SetConfig+0xda>
 8004b6e:	d81b      	bhi.n	8004ba8 <UART_SetConfig+0xe4>
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d00a      	beq.n	8004b8a <UART_SetConfig+0xc6>
 8004b74:	d818      	bhi.n	8004ba8 <UART_SetConfig+0xe4>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <UART_SetConfig+0xbc>
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d00a      	beq.n	8004b94 <UART_SetConfig+0xd0>
 8004b7e:	e013      	b.n	8004ba8 <UART_SetConfig+0xe4>
 8004b80:	231b      	movs	r3, #27
 8004b82:	18fb      	adds	r3, r7, r3
 8004b84:	2200      	movs	r2, #0
 8004b86:	701a      	strb	r2, [r3, #0]
 8004b88:	e058      	b.n	8004c3c <UART_SetConfig+0x178>
 8004b8a:	231b      	movs	r3, #27
 8004b8c:	18fb      	adds	r3, r7, r3
 8004b8e:	2202      	movs	r2, #2
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	e053      	b.n	8004c3c <UART_SetConfig+0x178>
 8004b94:	231b      	movs	r3, #27
 8004b96:	18fb      	adds	r3, r7, r3
 8004b98:	2204      	movs	r2, #4
 8004b9a:	701a      	strb	r2, [r3, #0]
 8004b9c:	e04e      	b.n	8004c3c <UART_SetConfig+0x178>
 8004b9e:	231b      	movs	r3, #27
 8004ba0:	18fb      	adds	r3, r7, r3
 8004ba2:	2208      	movs	r2, #8
 8004ba4:	701a      	strb	r2, [r3, #0]
 8004ba6:	e049      	b.n	8004c3c <UART_SetConfig+0x178>
 8004ba8:	231b      	movs	r3, #27
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	2210      	movs	r2, #16
 8004bae:	701a      	strb	r2, [r3, #0]
 8004bb0:	e044      	b.n	8004c3c <UART_SetConfig+0x178>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a90      	ldr	r2, [pc, #576]	; (8004df8 <UART_SetConfig+0x334>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d127      	bne.n	8004c0c <UART_SetConfig+0x148>
 8004bbc:	4b8d      	ldr	r3, [pc, #564]	; (8004df4 <UART_SetConfig+0x330>)
 8004bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc0:	220c      	movs	r2, #12
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	2b0c      	cmp	r3, #12
 8004bc6:	d017      	beq.n	8004bf8 <UART_SetConfig+0x134>
 8004bc8:	d81b      	bhi.n	8004c02 <UART_SetConfig+0x13e>
 8004bca:	2b08      	cmp	r3, #8
 8004bcc:	d00a      	beq.n	8004be4 <UART_SetConfig+0x120>
 8004bce:	d818      	bhi.n	8004c02 <UART_SetConfig+0x13e>
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <UART_SetConfig+0x116>
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d00a      	beq.n	8004bee <UART_SetConfig+0x12a>
 8004bd8:	e013      	b.n	8004c02 <UART_SetConfig+0x13e>
 8004bda:	231b      	movs	r3, #27
 8004bdc:	18fb      	adds	r3, r7, r3
 8004bde:	2200      	movs	r2, #0
 8004be0:	701a      	strb	r2, [r3, #0]
 8004be2:	e02b      	b.n	8004c3c <UART_SetConfig+0x178>
 8004be4:	231b      	movs	r3, #27
 8004be6:	18fb      	adds	r3, r7, r3
 8004be8:	2202      	movs	r2, #2
 8004bea:	701a      	strb	r2, [r3, #0]
 8004bec:	e026      	b.n	8004c3c <UART_SetConfig+0x178>
 8004bee:	231b      	movs	r3, #27
 8004bf0:	18fb      	adds	r3, r7, r3
 8004bf2:	2204      	movs	r2, #4
 8004bf4:	701a      	strb	r2, [r3, #0]
 8004bf6:	e021      	b.n	8004c3c <UART_SetConfig+0x178>
 8004bf8:	231b      	movs	r3, #27
 8004bfa:	18fb      	adds	r3, r7, r3
 8004bfc:	2208      	movs	r2, #8
 8004bfe:	701a      	strb	r2, [r3, #0]
 8004c00:	e01c      	b.n	8004c3c <UART_SetConfig+0x178>
 8004c02:	231b      	movs	r3, #27
 8004c04:	18fb      	adds	r3, r7, r3
 8004c06:	2210      	movs	r2, #16
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	e017      	b.n	8004c3c <UART_SetConfig+0x178>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a7a      	ldr	r2, [pc, #488]	; (8004dfc <UART_SetConfig+0x338>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d104      	bne.n	8004c20 <UART_SetConfig+0x15c>
 8004c16:	231b      	movs	r3, #27
 8004c18:	18fb      	adds	r3, r7, r3
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	e00d      	b.n	8004c3c <UART_SetConfig+0x178>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a76      	ldr	r2, [pc, #472]	; (8004e00 <UART_SetConfig+0x33c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d104      	bne.n	8004c34 <UART_SetConfig+0x170>
 8004c2a:	231b      	movs	r3, #27
 8004c2c:	18fb      	adds	r3, r7, r3
 8004c2e:	2200      	movs	r2, #0
 8004c30:	701a      	strb	r2, [r3, #0]
 8004c32:	e003      	b.n	8004c3c <UART_SetConfig+0x178>
 8004c34:	231b      	movs	r3, #27
 8004c36:	18fb      	adds	r3, r7, r3
 8004c38:	2210      	movs	r2, #16
 8004c3a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	69da      	ldr	r2, [r3, #28]
 8004c40:	2380      	movs	r3, #128	; 0x80
 8004c42:	021b      	lsls	r3, r3, #8
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d000      	beq.n	8004c4a <UART_SetConfig+0x186>
 8004c48:	e065      	b.n	8004d16 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8004c4a:	231b      	movs	r3, #27
 8004c4c:	18fb      	adds	r3, r7, r3
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d015      	beq.n	8004c80 <UART_SetConfig+0x1bc>
 8004c54:	dc18      	bgt.n	8004c88 <UART_SetConfig+0x1c4>
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d00d      	beq.n	8004c76 <UART_SetConfig+0x1b2>
 8004c5a:	dc15      	bgt.n	8004c88 <UART_SetConfig+0x1c4>
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d002      	beq.n	8004c66 <UART_SetConfig+0x1a2>
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d005      	beq.n	8004c70 <UART_SetConfig+0x1ac>
 8004c64:	e010      	b.n	8004c88 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c66:	f7fe faed 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8004c6a:	0003      	movs	r3, r0
 8004c6c:	617b      	str	r3, [r7, #20]
        break;
 8004c6e:	e012      	b.n	8004c96 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c70:	4b64      	ldr	r3, [pc, #400]	; (8004e04 <UART_SetConfig+0x340>)
 8004c72:	617b      	str	r3, [r7, #20]
        break;
 8004c74:	e00f      	b.n	8004c96 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c76:	f7fe fa59 	bl	800312c <HAL_RCC_GetSysClockFreq>
 8004c7a:	0003      	movs	r3, r0
 8004c7c:	617b      	str	r3, [r7, #20]
        break;
 8004c7e:	e00a      	b.n	8004c96 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c80:	2380      	movs	r3, #128	; 0x80
 8004c82:	021b      	lsls	r3, r3, #8
 8004c84:	617b      	str	r3, [r7, #20]
        break;
 8004c86:	e006      	b.n	8004c96 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c8c:	231a      	movs	r3, #26
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	2201      	movs	r2, #1
 8004c92:	701a      	strb	r2, [r3, #0]
        break;
 8004c94:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d100      	bne.n	8004c9e <UART_SetConfig+0x1da>
 8004c9c:	e08d      	b.n	8004dba <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ca2:	4b59      	ldr	r3, [pc, #356]	; (8004e08 <UART_SetConfig+0x344>)
 8004ca4:	0052      	lsls	r2, r2, #1
 8004ca6:	5ad3      	ldrh	r3, [r2, r3]
 8004ca8:	0019      	movs	r1, r3
 8004caa:	6978      	ldr	r0, [r7, #20]
 8004cac:	f7fb fa36 	bl	800011c <__udivsi3>
 8004cb0:	0003      	movs	r3, r0
 8004cb2:	005a      	lsls	r2, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	085b      	lsrs	r3, r3, #1
 8004cba:	18d2      	adds	r2, r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	0019      	movs	r1, r3
 8004cc2:	0010      	movs	r0, r2
 8004cc4:	f7fb fa2a 	bl	800011c <__udivsi3>
 8004cc8:	0003      	movs	r3, r0
 8004cca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	2b0f      	cmp	r3, #15
 8004cd0:	d91c      	bls.n	8004d0c <UART_SetConfig+0x248>
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	2380      	movs	r3, #128	; 0x80
 8004cd6:	025b      	lsls	r3, r3, #9
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d217      	bcs.n	8004d0c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	200e      	movs	r0, #14
 8004ce2:	183b      	adds	r3, r7, r0
 8004ce4:	210f      	movs	r1, #15
 8004ce6:	438a      	bics	r2, r1
 8004ce8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	085b      	lsrs	r3, r3, #1
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	2207      	movs	r2, #7
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	b299      	uxth	r1, r3
 8004cf6:	183b      	adds	r3, r7, r0
 8004cf8:	183a      	adds	r2, r7, r0
 8004cfa:	8812      	ldrh	r2, [r2, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	183a      	adds	r2, r7, r0
 8004d06:	8812      	ldrh	r2, [r2, #0]
 8004d08:	60da      	str	r2, [r3, #12]
 8004d0a:	e056      	b.n	8004dba <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8004d0c:	231a      	movs	r3, #26
 8004d0e:	18fb      	adds	r3, r7, r3
 8004d10:	2201      	movs	r2, #1
 8004d12:	701a      	strb	r2, [r3, #0]
 8004d14:	e051      	b.n	8004dba <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d16:	231b      	movs	r3, #27
 8004d18:	18fb      	adds	r3, r7, r3
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d015      	beq.n	8004d4c <UART_SetConfig+0x288>
 8004d20:	dc18      	bgt.n	8004d54 <UART_SetConfig+0x290>
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d00d      	beq.n	8004d42 <UART_SetConfig+0x27e>
 8004d26:	dc15      	bgt.n	8004d54 <UART_SetConfig+0x290>
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <UART_SetConfig+0x26e>
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d005      	beq.n	8004d3c <UART_SetConfig+0x278>
 8004d30:	e010      	b.n	8004d54 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d32:	f7fe fa87 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8004d36:	0003      	movs	r3, r0
 8004d38:	617b      	str	r3, [r7, #20]
        break;
 8004d3a:	e012      	b.n	8004d62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d3c:	4b31      	ldr	r3, [pc, #196]	; (8004e04 <UART_SetConfig+0x340>)
 8004d3e:	617b      	str	r3, [r7, #20]
        break;
 8004d40:	e00f      	b.n	8004d62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d42:	f7fe f9f3 	bl	800312c <HAL_RCC_GetSysClockFreq>
 8004d46:	0003      	movs	r3, r0
 8004d48:	617b      	str	r3, [r7, #20]
        break;
 8004d4a:	e00a      	b.n	8004d62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d4c:	2380      	movs	r3, #128	; 0x80
 8004d4e:	021b      	lsls	r3, r3, #8
 8004d50:	617b      	str	r3, [r7, #20]
        break;
 8004d52:	e006      	b.n	8004d62 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d58:	231a      	movs	r3, #26
 8004d5a:	18fb      	adds	r3, r7, r3
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	701a      	strb	r2, [r3, #0]
        break;
 8004d60:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d028      	beq.n	8004dba <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d6c:	4b26      	ldr	r3, [pc, #152]	; (8004e08 <UART_SetConfig+0x344>)
 8004d6e:	0052      	lsls	r2, r2, #1
 8004d70:	5ad3      	ldrh	r3, [r2, r3]
 8004d72:	0019      	movs	r1, r3
 8004d74:	6978      	ldr	r0, [r7, #20]
 8004d76:	f7fb f9d1 	bl	800011c <__udivsi3>
 8004d7a:	0003      	movs	r3, r0
 8004d7c:	001a      	movs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	085b      	lsrs	r3, r3, #1
 8004d84:	18d2      	adds	r2, r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	0019      	movs	r1, r3
 8004d8c:	0010      	movs	r0, r2
 8004d8e:	f7fb f9c5 	bl	800011c <__udivsi3>
 8004d92:	0003      	movs	r3, r0
 8004d94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b0f      	cmp	r3, #15
 8004d9a:	d90a      	bls.n	8004db2 <UART_SetConfig+0x2ee>
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	2380      	movs	r3, #128	; 0x80
 8004da0:	025b      	lsls	r3, r3, #9
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d205      	bcs.n	8004db2 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	60da      	str	r2, [r3, #12]
 8004db0:	e003      	b.n	8004dba <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8004db2:	231a      	movs	r3, #26
 8004db4:	18fb      	adds	r3, r7, r3
 8004db6:	2201      	movs	r2, #1
 8004db8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	226a      	movs	r2, #106	; 0x6a
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2268      	movs	r2, #104	; 0x68
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004dd6:	231a      	movs	r3, #26
 8004dd8:	18fb      	adds	r3, r7, r3
 8004dda:	781b      	ldrb	r3, [r3, #0]
}
 8004ddc:	0018      	movs	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b008      	add	sp, #32
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	cfff69f3 	.word	0xcfff69f3
 8004de8:	ffffcfff 	.word	0xffffcfff
 8004dec:	11fff4ff 	.word	0x11fff4ff
 8004df0:	40013800 	.word	0x40013800
 8004df4:	40021000 	.word	0x40021000
 8004df8:	40004400 	.word	0x40004400
 8004dfc:	40004800 	.word	0x40004800
 8004e00:	40004c00 	.word	0x40004c00
 8004e04:	00f42400 	.word	0x00f42400
 8004e08:	08008910 	.word	0x08008910

08004e0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	2201      	movs	r2, #1
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	d00b      	beq.n	8004e36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	4a4a      	ldr	r2, [pc, #296]	; (8004f50 <UART_AdvFeatureConfig+0x144>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	0019      	movs	r1, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d00b      	beq.n	8004e58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	4a43      	ldr	r2, [pc, #268]	; (8004f54 <UART_AdvFeatureConfig+0x148>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	0019      	movs	r1, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	2204      	movs	r2, #4
 8004e5e:	4013      	ands	r3, r2
 8004e60:	d00b      	beq.n	8004e7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	4a3b      	ldr	r2, [pc, #236]	; (8004f58 <UART_AdvFeatureConfig+0x14c>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	0019      	movs	r1, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7e:	2208      	movs	r2, #8
 8004e80:	4013      	ands	r3, r2
 8004e82:	d00b      	beq.n	8004e9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	4a34      	ldr	r2, [pc, #208]	; (8004f5c <UART_AdvFeatureConfig+0x150>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	0019      	movs	r1, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea0:	2210      	movs	r2, #16
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d00b      	beq.n	8004ebe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	4a2c      	ldr	r2, [pc, #176]	; (8004f60 <UART_AdvFeatureConfig+0x154>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	0019      	movs	r1, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	d00b      	beq.n	8004ee0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	4a25      	ldr	r2, [pc, #148]	; (8004f64 <UART_AdvFeatureConfig+0x158>)
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	0019      	movs	r1, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee4:	2240      	movs	r2, #64	; 0x40
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	d01d      	beq.n	8004f26 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	4a1d      	ldr	r2, [pc, #116]	; (8004f68 <UART_AdvFeatureConfig+0x15c>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	0019      	movs	r1, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f06:	2380      	movs	r3, #128	; 0x80
 8004f08:	035b      	lsls	r3, r3, #13
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d10b      	bne.n	8004f26 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	4a15      	ldr	r2, [pc, #84]	; (8004f6c <UART_AdvFeatureConfig+0x160>)
 8004f16:	4013      	ands	r3, r2
 8004f18:	0019      	movs	r1, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2a:	2280      	movs	r2, #128	; 0x80
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	d00b      	beq.n	8004f48 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	4a0e      	ldr	r2, [pc, #56]	; (8004f70 <UART_AdvFeatureConfig+0x164>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	0019      	movs	r1, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	605a      	str	r2, [r3, #4]
  }
}
 8004f48:	46c0      	nop			; (mov r8, r8)
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b002      	add	sp, #8
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	fffdffff 	.word	0xfffdffff
 8004f54:	fffeffff 	.word	0xfffeffff
 8004f58:	fffbffff 	.word	0xfffbffff
 8004f5c:	ffff7fff 	.word	0xffff7fff
 8004f60:	ffffefff 	.word	0xffffefff
 8004f64:	ffffdfff 	.word	0xffffdfff
 8004f68:	ffefffff 	.word	0xffefffff
 8004f6c:	ff9fffff 	.word	0xff9fffff
 8004f70:	fff7ffff 	.word	0xfff7ffff

08004f74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af02      	add	r7, sp, #8
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2290      	movs	r2, #144	; 0x90
 8004f80:	2100      	movs	r1, #0
 8004f82:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f84:	f7fc fd68 	bl	8001a58 <HAL_GetTick>
 8004f88:	0003      	movs	r3, r0
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2208      	movs	r2, #8
 8004f94:	4013      	ands	r3, r2
 8004f96:	2b08      	cmp	r3, #8
 8004f98:	d10c      	bne.n	8004fb4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2280      	movs	r2, #128	; 0x80
 8004f9e:	0391      	lsls	r1, r2, #14
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	4a1a      	ldr	r2, [pc, #104]	; (800500c <UART_CheckIdleState+0x98>)
 8004fa4:	9200      	str	r2, [sp, #0]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f000 f832 	bl	8005010 <UART_WaitOnFlagUntilTimeout>
 8004fac:	1e03      	subs	r3, r0, #0
 8004fae:	d001      	beq.n	8004fb4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e026      	b.n	8005002 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2204      	movs	r2, #4
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d10c      	bne.n	8004fdc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2280      	movs	r2, #128	; 0x80
 8004fc6:	03d1      	lsls	r1, r2, #15
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	4a10      	ldr	r2, [pc, #64]	; (800500c <UART_CheckIdleState+0x98>)
 8004fcc:	9200      	str	r2, [sp, #0]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f000 f81e 	bl	8005010 <UART_WaitOnFlagUntilTimeout>
 8004fd4:	1e03      	subs	r3, r0, #0
 8004fd6:	d001      	beq.n	8004fdc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e012      	b.n	8005002 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2288      	movs	r2, #136	; 0x88
 8004fe0:	2120      	movs	r1, #32
 8004fe2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	228c      	movs	r2, #140	; 0x8c
 8004fe8:	2120      	movs	r1, #32
 8004fea:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2284      	movs	r2, #132	; 0x84
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	0018      	movs	r0, r3
 8005004:	46bd      	mov	sp, r7
 8005006:	b004      	add	sp, #16
 8005008:	bd80      	pop	{r7, pc}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	01ffffff 	.word	0x01ffffff

08005010 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b094      	sub	sp, #80	; 0x50
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	1dfb      	adds	r3, r7, #7
 800501e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005020:	e0a7      	b.n	8005172 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005024:	3301      	adds	r3, #1
 8005026:	d100      	bne.n	800502a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005028:	e0a3      	b.n	8005172 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800502a:	f7fc fd15 	bl	8001a58 <HAL_GetTick>
 800502e:	0002      	movs	r2, r0
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005036:	429a      	cmp	r2, r3
 8005038:	d302      	bcc.n	8005040 <UART_WaitOnFlagUntilTimeout+0x30>
 800503a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800503c:	2b00      	cmp	r3, #0
 800503e:	d13f      	bne.n	80050c0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005040:	f3ef 8310 	mrs	r3, PRIMASK
 8005044:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005048:	647b      	str	r3, [r7, #68]	; 0x44
 800504a:	2301      	movs	r3, #1
 800504c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	f383 8810 	msr	PRIMASK, r3
}
 8005054:	46c0      	nop			; (mov r8, r8)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	494e      	ldr	r1, [pc, #312]	; (800519c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005062:	400a      	ands	r2, r1
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005068:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	f383 8810 	msr	PRIMASK, r3
}
 8005070:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005072:	f3ef 8310 	mrs	r3, PRIMASK
 8005076:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800507a:	643b      	str	r3, [r7, #64]	; 0x40
 800507c:	2301      	movs	r3, #1
 800507e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005082:	f383 8810 	msr	PRIMASK, r3
}
 8005086:	46c0      	nop			; (mov r8, r8)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2101      	movs	r1, #1
 8005094:	438a      	bics	r2, r1
 8005096:	609a      	str	r2, [r3, #8]
 8005098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800509a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800509e:	f383 8810 	msr	PRIMASK, r3
}
 80050a2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2288      	movs	r2, #136	; 0x88
 80050a8:	2120      	movs	r1, #32
 80050aa:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	228c      	movs	r2, #140	; 0x8c
 80050b0:	2120      	movs	r1, #32
 80050b2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2284      	movs	r2, #132	; 0x84
 80050b8:	2100      	movs	r1, #0
 80050ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e069      	b.n	8005194 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2204      	movs	r2, #4
 80050c8:	4013      	ands	r3, r2
 80050ca:	d052      	beq.n	8005172 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	69da      	ldr	r2, [r3, #28]
 80050d2:	2380      	movs	r3, #128	; 0x80
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	401a      	ands	r2, r3
 80050d8:	2380      	movs	r3, #128	; 0x80
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	429a      	cmp	r2, r3
 80050de:	d148      	bne.n	8005172 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2280      	movs	r2, #128	; 0x80
 80050e6:	0112      	lsls	r2, r2, #4
 80050e8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ea:	f3ef 8310 	mrs	r3, PRIMASK
 80050ee:	613b      	str	r3, [r7, #16]
  return(result);
 80050f0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80050f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050f4:	2301      	movs	r3, #1
 80050f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f383 8810 	msr	PRIMASK, r3
}
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4924      	ldr	r1, [pc, #144]	; (800519c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800510c:	400a      	ands	r2, r1
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005112:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	f383 8810 	msr	PRIMASK, r3
}
 800511a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800511c:	f3ef 8310 	mrs	r3, PRIMASK
 8005120:	61fb      	str	r3, [r7, #28]
  return(result);
 8005122:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005124:	64bb      	str	r3, [r7, #72]	; 0x48
 8005126:	2301      	movs	r3, #1
 8005128:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	f383 8810 	msr	PRIMASK, r3
}
 8005130:	46c0      	nop			; (mov r8, r8)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2101      	movs	r1, #1
 800513e:	438a      	bics	r2, r1
 8005140:	609a      	str	r2, [r3, #8]
 8005142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	f383 8810 	msr	PRIMASK, r3
}
 800514c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2288      	movs	r2, #136	; 0x88
 8005152:	2120      	movs	r1, #32
 8005154:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	228c      	movs	r2, #140	; 0x8c
 800515a:	2120      	movs	r1, #32
 800515c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2290      	movs	r2, #144	; 0x90
 8005162:	2120      	movs	r1, #32
 8005164:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2284      	movs	r2, #132	; 0x84
 800516a:	2100      	movs	r1, #0
 800516c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e010      	b.n	8005194 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	4013      	ands	r3, r2
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	425a      	negs	r2, r3
 8005182:	4153      	adcs	r3, r2
 8005184:	b2db      	uxtb	r3, r3
 8005186:	001a      	movs	r2, r3
 8005188:	1dfb      	adds	r3, r7, #7
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d100      	bne.n	8005192 <UART_WaitOnFlagUntilTimeout+0x182>
 8005190:	e747      	b.n	8005022 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	0018      	movs	r0, r3
 8005196:	46bd      	mov	sp, r7
 8005198:	b014      	add	sp, #80	; 0x50
 800519a:	bd80      	pop	{r7, pc}
 800519c:	fffffe5f 	.word	0xfffffe5f

080051a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2284      	movs	r2, #132	; 0x84
 80051ac:	5c9b      	ldrb	r3, [r3, r2]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d101      	bne.n	80051b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80051b2:	2302      	movs	r3, #2
 80051b4:	e027      	b.n	8005206 <HAL_UARTEx_DisableFifoMode+0x66>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2284      	movs	r2, #132	; 0x84
 80051ba:	2101      	movs	r1, #1
 80051bc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2288      	movs	r2, #136	; 0x88
 80051c2:	2124      	movs	r1, #36	; 0x24
 80051c4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2101      	movs	r1, #1
 80051da:	438a      	bics	r2, r1
 80051dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4a0b      	ldr	r2, [pc, #44]	; (8005210 <HAL_UARTEx_DisableFifoMode+0x70>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2288      	movs	r2, #136	; 0x88
 80051f8:	2120      	movs	r1, #32
 80051fa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2284      	movs	r2, #132	; 0x84
 8005200:	2100      	movs	r1, #0
 8005202:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	0018      	movs	r0, r3
 8005208:	46bd      	mov	sp, r7
 800520a:	b004      	add	sp, #16
 800520c:	bd80      	pop	{r7, pc}
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	dfffffff 	.word	0xdfffffff

08005214 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2284      	movs	r2, #132	; 0x84
 8005222:	5c9b      	ldrb	r3, [r3, r2]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005228:	2302      	movs	r3, #2
 800522a:	e02e      	b.n	800528a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2284      	movs	r2, #132	; 0x84
 8005230:	2101      	movs	r1, #1
 8005232:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2288      	movs	r2, #136	; 0x88
 8005238:	2124      	movs	r1, #36	; 0x24
 800523a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2101      	movs	r1, #1
 8005250:	438a      	bics	r2, r1
 8005252:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	08d9      	lsrs	r1, r3, #3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	0018      	movs	r0, r3
 800526c:	f000 f854 	bl	8005318 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2288      	movs	r2, #136	; 0x88
 800527c:	2120      	movs	r1, #32
 800527e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2284      	movs	r2, #132	; 0x84
 8005284:	2100      	movs	r1, #0
 8005286:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	0018      	movs	r0, r3
 800528c:	46bd      	mov	sp, r7
 800528e:	b004      	add	sp, #16
 8005290:	bd80      	pop	{r7, pc}
	...

08005294 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2284      	movs	r2, #132	; 0x84
 80052a2:	5c9b      	ldrb	r3, [r3, r2]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d101      	bne.n	80052ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80052a8:	2302      	movs	r3, #2
 80052aa:	e02f      	b.n	800530c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2284      	movs	r2, #132	; 0x84
 80052b0:	2101      	movs	r1, #1
 80052b2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2288      	movs	r2, #136	; 0x88
 80052b8:	2124      	movs	r1, #36	; 0x24
 80052ba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2101      	movs	r1, #1
 80052d0:	438a      	bics	r2, r1
 80052d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	4a0e      	ldr	r2, [pc, #56]	; (8005314 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80052dc:	4013      	ands	r3, r2
 80052de:	0019      	movs	r1, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	0018      	movs	r0, r3
 80052ee:	f000 f813 	bl	8005318 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2288      	movs	r2, #136	; 0x88
 80052fe:	2120      	movs	r1, #32
 8005300:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2284      	movs	r2, #132	; 0x84
 8005306:	2100      	movs	r1, #0
 8005308:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	0018      	movs	r0, r3
 800530e:	46bd      	mov	sp, r7
 8005310:	b004      	add	sp, #16
 8005312:	bd80      	pop	{r7, pc}
 8005314:	f1ffffff 	.word	0xf1ffffff

08005318 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005324:	2b00      	cmp	r3, #0
 8005326:	d108      	bne.n	800533a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	226a      	movs	r2, #106	; 0x6a
 800532c:	2101      	movs	r1, #1
 800532e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2268      	movs	r2, #104	; 0x68
 8005334:	2101      	movs	r1, #1
 8005336:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005338:	e043      	b.n	80053c2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800533a:	260f      	movs	r6, #15
 800533c:	19bb      	adds	r3, r7, r6
 800533e:	2208      	movs	r2, #8
 8005340:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005342:	200e      	movs	r0, #14
 8005344:	183b      	adds	r3, r7, r0
 8005346:	2208      	movs	r2, #8
 8005348:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	0e5b      	lsrs	r3, r3, #25
 8005352:	b2da      	uxtb	r2, r3
 8005354:	240d      	movs	r4, #13
 8005356:	193b      	adds	r3, r7, r4
 8005358:	2107      	movs	r1, #7
 800535a:	400a      	ands	r2, r1
 800535c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	0f5b      	lsrs	r3, r3, #29
 8005366:	b2da      	uxtb	r2, r3
 8005368:	250c      	movs	r5, #12
 800536a:	197b      	adds	r3, r7, r5
 800536c:	2107      	movs	r1, #7
 800536e:	400a      	ands	r2, r1
 8005370:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005372:	183b      	adds	r3, r7, r0
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	197a      	adds	r2, r7, r5
 8005378:	7812      	ldrb	r2, [r2, #0]
 800537a:	4914      	ldr	r1, [pc, #80]	; (80053cc <UARTEx_SetNbDataToProcess+0xb4>)
 800537c:	5c8a      	ldrb	r2, [r1, r2]
 800537e:	435a      	muls	r2, r3
 8005380:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005382:	197b      	adds	r3, r7, r5
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	4a12      	ldr	r2, [pc, #72]	; (80053d0 <UARTEx_SetNbDataToProcess+0xb8>)
 8005388:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800538a:	0019      	movs	r1, r3
 800538c:	f7fa ff50 	bl	8000230 <__divsi3>
 8005390:	0003      	movs	r3, r0
 8005392:	b299      	uxth	r1, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	226a      	movs	r2, #106	; 0x6a
 8005398:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800539a:	19bb      	adds	r3, r7, r6
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	193a      	adds	r2, r7, r4
 80053a0:	7812      	ldrb	r2, [r2, #0]
 80053a2:	490a      	ldr	r1, [pc, #40]	; (80053cc <UARTEx_SetNbDataToProcess+0xb4>)
 80053a4:	5c8a      	ldrb	r2, [r1, r2]
 80053a6:	435a      	muls	r2, r3
 80053a8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80053aa:	193b      	adds	r3, r7, r4
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	4a08      	ldr	r2, [pc, #32]	; (80053d0 <UARTEx_SetNbDataToProcess+0xb8>)
 80053b0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053b2:	0019      	movs	r1, r3
 80053b4:	f7fa ff3c 	bl	8000230 <__divsi3>
 80053b8:	0003      	movs	r3, r0
 80053ba:	b299      	uxth	r1, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2268      	movs	r2, #104	; 0x68
 80053c0:	5299      	strh	r1, [r3, r2]
}
 80053c2:	46c0      	nop			; (mov r8, r8)
 80053c4:	46bd      	mov	sp, r7
 80053c6:	b005      	add	sp, #20
 80053c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053ca:	46c0      	nop			; (mov r8, r8)
 80053cc:	08008928 	.word	0x08008928
 80053d0:	08008930 	.word	0x08008930

080053d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	0002      	movs	r2, r0
 80053dc:	1dbb      	adds	r3, r7, #6
 80053de:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80053e4:	1dbb      	adds	r3, r7, #6
 80053e6:	2200      	movs	r2, #0
 80053e8:	5e9b      	ldrsh	r3, [r3, r2]
 80053ea:	2b84      	cmp	r3, #132	; 0x84
 80053ec:	d006      	beq.n	80053fc <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80053ee:	1dbb      	adds	r3, r7, #6
 80053f0:	2200      	movs	r2, #0
 80053f2:	5e9a      	ldrsh	r2, [r3, r2]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	18d3      	adds	r3, r2, r3
 80053f8:	3303      	adds	r3, #3
 80053fa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80053fc:	68fb      	ldr	r3, [r7, #12]
}
 80053fe:	0018      	movs	r0, r3
 8005400:	46bd      	mov	sp, r7
 8005402:	b004      	add	sp, #16
 8005404:	bd80      	pop	{r7, pc}

08005406 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800540a:	f000 fe5b 	bl	80060c4 <vTaskStartScheduler>
  
  return osOK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	0018      	movs	r0, r3
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005416:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005418:	b087      	sub	sp, #28
 800541a:	af02      	add	r7, sp, #8
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685c      	ldr	r4, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800542c:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2208      	movs	r2, #8
 8005432:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005434:	0018      	movs	r0, r3
 8005436:	f7ff ffcd 	bl	80053d4 <makeFreeRtosPriority>
 800543a:	0001      	movs	r1, r0
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	230c      	movs	r3, #12
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	9301      	str	r3, [sp, #4]
 8005444:	9100      	str	r1, [sp, #0]
 8005446:	0013      	movs	r3, r2
 8005448:	0032      	movs	r2, r6
 800544a:	0029      	movs	r1, r5
 800544c:	0020      	movs	r0, r4
 800544e:	f000 fcd6 	bl	8005dfe <xTaskCreate>
 8005452:	0003      	movs	r3, r0
 8005454:	2b01      	cmp	r3, #1
 8005456:	d001      	beq.n	800545c <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8005458:	2300      	movs	r3, #0
 800545a:	e000      	b.n	800545e <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 800545c:	68fb      	ldr	r3, [r7, #12]
}
 800545e:	0018      	movs	r0, r3
 8005460:	46bd      	mov	sp, r7
 8005462:	b005      	add	sp, #20
 8005464:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005466 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b084      	sub	sp, #16
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <osDelay+0x16>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	e000      	b.n	800547e <osDelay+0x18>
 800547c:	2301      	movs	r3, #1
 800547e:	0018      	movs	r0, r3
 8005480:	f000 fdfa 	bl	8006078 <vTaskDelay>
  
  return osOK;
 8005484:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005486:	0018      	movs	r0, r3
 8005488:	46bd      	mov	sp, r7
 800548a:	b004      	add	sp, #16
 800548c:	bd80      	pop	{r7, pc}

0800548e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b082      	sub	sp, #8
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	3308      	adds	r3, #8
 800549a:	001a      	movs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	4252      	negs	r2, r2
 80054a6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	3308      	adds	r3, #8
 80054ac:	001a      	movs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3308      	adds	r3, #8
 80054b6:	001a      	movs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	46bd      	mov	sp, r7
 80054c6:	b002      	add	sp, #8
 80054c8:	bd80      	pop	{r7, pc}

080054ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b082      	sub	sp, #8
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054d8:	46c0      	nop			; (mov r8, r8)
 80054da:	46bd      	mov	sp, r7
 80054dc:	b002      	add	sp, #8
 80054de:	bd80      	pop	{r7, pc}

080054e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	1c5a      	adds	r2, r3, #1
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	601a      	str	r2, [r3, #0]
}
 800551c:	46c0      	nop			; (mov r8, r8)
 800551e:	46bd      	mov	sp, r7
 8005520:	b004      	add	sp, #16
 8005522:	bd80      	pop	{r7, pc}

08005524 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	3301      	adds	r3, #1
 8005538:	d103      	bne.n	8005542 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	e00c      	b.n	800555c <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	3308      	adds	r3, #8
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	e002      	b.n	8005550 <vListInsert+0x2c>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	429a      	cmp	r2, r3
 800555a:	d2f6      	bcs.n	800554a <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	601a      	str	r2, [r3, #0]
}
 8005588:	46c0      	nop			; (mov r8, r8)
 800558a:	46bd      	mov	sp, r7
 800558c:	b004      	add	sp, #16
 800558e:	bd80      	pop	{r7, pc}

08005590 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6892      	ldr	r2, [r2, #8]
 80055a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6852      	ldr	r2, [r2, #4]
 80055b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d103      	bne.n	80055c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	1e5a      	subs	r2, r3, #1
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
}
 80055d8:	0018      	movs	r0, r3
 80055da:	46bd      	mov	sp, r7
 80055dc:	b004      	add	sp, #16
 80055de:	bd80      	pop	{r7, pc}

080055e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <xQueueGenericReset+0x18>
 80055f4:	b672      	cpsid	i
 80055f6:	e7fe      	b.n	80055f6 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80055f8:	f001 feea 	bl	80073d0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005608:	434b      	muls	r3, r1
 800560a:	18d2      	adds	r2, r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005626:	1e59      	subs	r1, r3, #1
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	434b      	muls	r3, r1
 800562e:	18d2      	adds	r2, r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2244      	movs	r2, #68	; 0x44
 8005638:	21ff      	movs	r1, #255	; 0xff
 800563a:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2245      	movs	r2, #69	; 0x45
 8005640:	21ff      	movs	r1, #255	; 0xff
 8005642:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10d      	bne.n	8005666 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d013      	beq.n	800567a <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	3310      	adds	r3, #16
 8005656:	0018      	movs	r0, r3
 8005658:	f000 ff7a 	bl	8006550 <xTaskRemoveFromEventList>
 800565c:	1e03      	subs	r3, r0, #0
 800565e:	d00c      	beq.n	800567a <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005660:	f001 fea6 	bl	80073b0 <vPortYield>
 8005664:	e009      	b.n	800567a <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	3310      	adds	r3, #16
 800566a:	0018      	movs	r0, r3
 800566c:	f7ff ff0f 	bl	800548e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	3324      	adds	r3, #36	; 0x24
 8005674:	0018      	movs	r0, r3
 8005676:	f7ff ff0a 	bl	800548e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800567a:	f001 febb 	bl	80073f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800567e:	2301      	movs	r3, #1
}
 8005680:	0018      	movs	r0, r3
 8005682:	46bd      	mov	sp, r7
 8005684:	b004      	add	sp, #16
 8005686:	bd80      	pop	{r7, pc}

08005688 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005688:	b590      	push	{r4, r7, lr}
 800568a:	b08b      	sub	sp, #44	; 0x2c
 800568c:	af02      	add	r7, sp, #8
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	1dfb      	adds	r3, r7, #7
 8005694:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <xQueueGenericCreate+0x18>
 800569c:	b672      	cpsid	i
 800569e:	e7fe      	b.n	800569e <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	4353      	muls	r3, r2
 80056a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	3350      	adds	r3, #80	; 0x50
 80056ac:	0018      	movs	r0, r3
 80056ae:	f001 ff27 	bl	8007500 <pvPortMalloc>
 80056b2:	0003      	movs	r3, r0
 80056b4:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00e      	beq.n	80056da <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	3350      	adds	r3, #80	; 0x50
 80056c4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056c6:	1dfb      	adds	r3, r7, #7
 80056c8:	781c      	ldrb	r4, [r3, #0]
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	0023      	movs	r3, r4
 80056d6:	f000 f805 	bl	80056e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80056da:	69bb      	ldr	r3, [r7, #24]
	}
 80056dc:	0018      	movs	r0, r3
 80056de:	46bd      	mov	sp, r7
 80056e0:	b009      	add	sp, #36	; 0x24
 80056e2:	bd90      	pop	{r4, r7, pc}

080056e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	001a      	movs	r2, r3
 80056f2:	1cfb      	adds	r3, r7, #3
 80056f4:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d103      	bne.n	8005704 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	e002      	b.n	800570a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	2101      	movs	r1, #1
 800571a:	0018      	movs	r0, r3
 800571c:	f7ff ff60 	bl	80055e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	1cfa      	adds	r2, r7, #3
 8005724:	214c      	movs	r1, #76	; 0x4c
 8005726:	7812      	ldrb	r2, [r2, #0]
 8005728:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800572a:	46c0      	nop			; (mov r8, r8)
 800572c:	46bd      	mov	sp, r7
 800572e:	b004      	add	sp, #16
 8005730:	bd80      	pop	{r7, pc}

08005732 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b08a      	sub	sp, #40	; 0x28
 8005736:	af00      	add	r7, sp, #0
 8005738:	60f8      	str	r0, [r7, #12]
 800573a:	60b9      	str	r1, [r7, #8]
 800573c:	607a      	str	r2, [r7, #4]
 800573e:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005740:	2300      	movs	r3, #0
 8005742:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <xQueueGenericSend+0x20>
 800574e:	b672      	cpsid	i
 8005750:	e7fe      	b.n	8005750 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d103      	bne.n	8005760 <xQueueGenericSend+0x2e>
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <xQueueGenericSend+0x32>
 8005760:	2301      	movs	r3, #1
 8005762:	e000      	b.n	8005766 <xQueueGenericSend+0x34>
 8005764:	2300      	movs	r3, #0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <xQueueGenericSend+0x3c>
 800576a:	b672      	cpsid	i
 800576c:	e7fe      	b.n	800576c <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b02      	cmp	r3, #2
 8005772:	d103      	bne.n	800577c <xQueueGenericSend+0x4a>
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <xQueueGenericSend+0x4e>
 800577c:	2301      	movs	r3, #1
 800577e:	e000      	b.n	8005782 <xQueueGenericSend+0x50>
 8005780:	2300      	movs	r3, #0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <xQueueGenericSend+0x58>
 8005786:	b672      	cpsid	i
 8005788:	e7fe      	b.n	8005788 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800578a:	f001 f85d 	bl	8006848 <xTaskGetSchedulerState>
 800578e:	1e03      	subs	r3, r0, #0
 8005790:	d102      	bne.n	8005798 <xQueueGenericSend+0x66>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <xQueueGenericSend+0x6a>
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <xQueueGenericSend+0x6c>
 800579c:	2300      	movs	r3, #0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <xQueueGenericSend+0x74>
 80057a2:	b672      	cpsid	i
 80057a4:	e7fe      	b.n	80057a4 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057a6:	f001 fe13 	bl	80073d0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d302      	bcc.n	80057bc <xQueueGenericSend+0x8a>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d11e      	bne.n	80057fa <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	68b9      	ldr	r1, [r7, #8]
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	0018      	movs	r0, r3
 80057c4:	f000 f9a2 	bl	8005b0c <prvCopyDataToQueue>
 80057c8:	0003      	movs	r3, r0
 80057ca:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d009      	beq.n	80057e8 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	3324      	adds	r3, #36	; 0x24
 80057d8:	0018      	movs	r0, r3
 80057da:	f000 feb9 	bl	8006550 <xTaskRemoveFromEventList>
 80057de:	1e03      	subs	r3, r0, #0
 80057e0:	d007      	beq.n	80057f2 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057e2:	f001 fde5 	bl	80073b0 <vPortYield>
 80057e6:	e004      	b.n	80057f2 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057ee:	f001 fddf 	bl	80073b0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057f2:	f001 fdff 	bl	80073f4 <vPortExitCritical>
				return pdPASS;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e05b      	b.n	80058b2 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d103      	bne.n	8005808 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005800:	f001 fdf8 	bl	80073f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005804:	2300      	movs	r3, #0
 8005806:	e054      	b.n	80058b2 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	2b00      	cmp	r3, #0
 800580c:	d106      	bne.n	800581c <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800580e:	2314      	movs	r3, #20
 8005810:	18fb      	adds	r3, r7, r3
 8005812:	0018      	movs	r0, r3
 8005814:	f000 fef8 	bl	8006608 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005818:	2301      	movs	r3, #1
 800581a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800581c:	f001 fdea 	bl	80073f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005820:	f000 fc8e 	bl	8006140 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005824:	f001 fdd4 	bl	80073d0 <vPortEnterCritical>
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	2244      	movs	r2, #68	; 0x44
 800582c:	5c9b      	ldrb	r3, [r3, r2]
 800582e:	b25b      	sxtb	r3, r3
 8005830:	3301      	adds	r3, #1
 8005832:	d103      	bne.n	800583c <xQueueGenericSend+0x10a>
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	2244      	movs	r2, #68	; 0x44
 8005838:	2100      	movs	r1, #0
 800583a:	5499      	strb	r1, [r3, r2]
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	2245      	movs	r2, #69	; 0x45
 8005840:	5c9b      	ldrb	r3, [r3, r2]
 8005842:	b25b      	sxtb	r3, r3
 8005844:	3301      	adds	r3, #1
 8005846:	d103      	bne.n	8005850 <xQueueGenericSend+0x11e>
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	2245      	movs	r2, #69	; 0x45
 800584c:	2100      	movs	r1, #0
 800584e:	5499      	strb	r1, [r3, r2]
 8005850:	f001 fdd0 	bl	80073f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005854:	1d3a      	adds	r2, r7, #4
 8005856:	2314      	movs	r3, #20
 8005858:	18fb      	adds	r3, r7, r3
 800585a:	0011      	movs	r1, r2
 800585c:	0018      	movs	r0, r3
 800585e:	f000 fee7 	bl	8006630 <xTaskCheckForTimeOut>
 8005862:	1e03      	subs	r3, r0, #0
 8005864:	d11e      	bne.n	80058a4 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	0018      	movs	r0, r3
 800586a:	f000 fa54 	bl	8005d16 <prvIsQueueFull>
 800586e:	1e03      	subs	r3, r0, #0
 8005870:	d011      	beq.n	8005896 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	3310      	adds	r3, #16
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	0011      	movs	r1, r2
 800587a:	0018      	movs	r0, r3
 800587c:	f000 fe24 	bl	80064c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	0018      	movs	r0, r3
 8005884:	f000 f9d3 	bl	8005c2e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005888:	f000 fc66 	bl	8006158 <xTaskResumeAll>
 800588c:	1e03      	subs	r3, r0, #0
 800588e:	d18a      	bne.n	80057a6 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8005890:	f001 fd8e 	bl	80073b0 <vPortYield>
 8005894:	e787      	b.n	80057a6 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	0018      	movs	r0, r3
 800589a:	f000 f9c8 	bl	8005c2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800589e:	f000 fc5b 	bl	8006158 <xTaskResumeAll>
 80058a2:	e780      	b.n	80057a6 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	0018      	movs	r0, r3
 80058a8:	f000 f9c1 	bl	8005c2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058ac:	f000 fc54 	bl	8006158 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058b0:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058b2:	0018      	movs	r0, r3
 80058b4:	46bd      	mov	sp, r7
 80058b6:	b00a      	add	sp, #40	; 0x28
 80058b8:	bd80      	pop	{r7, pc}

080058ba <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058ba:	b590      	push	{r4, r7, lr}
 80058bc:	b08b      	sub	sp, #44	; 0x2c
 80058be:	af00      	add	r7, sp, #0
 80058c0:	60f8      	str	r0, [r7, #12]
 80058c2:	60b9      	str	r1, [r7, #8]
 80058c4:	607a      	str	r2, [r7, #4]
 80058c6:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <xQueueGenericSendFromISR+0x1c>
 80058d2:	b672      	cpsid	i
 80058d4:	e7fe      	b.n	80058d4 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d103      	bne.n	80058e4 <xQueueGenericSendFromISR+0x2a>
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <xQueueGenericSendFromISR+0x2e>
 80058e4:	2301      	movs	r3, #1
 80058e6:	e000      	b.n	80058ea <xQueueGenericSendFromISR+0x30>
 80058e8:	2300      	movs	r3, #0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <xQueueGenericSendFromISR+0x38>
 80058ee:	b672      	cpsid	i
 80058f0:	e7fe      	b.n	80058f0 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d103      	bne.n	8005900 <xQueueGenericSendFromISR+0x46>
 80058f8:	6a3b      	ldr	r3, [r7, #32]
 80058fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <xQueueGenericSendFromISR+0x4a>
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <xQueueGenericSendFromISR+0x4c>
 8005904:	2300      	movs	r3, #0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <xQueueGenericSendFromISR+0x54>
 800590a:	b672      	cpsid	i
 800590c:	e7fe      	b.n	800590c <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800590e:	f001 fd89 	bl	8007424 <ulSetInterruptMaskFromISR>
 8005912:	0003      	movs	r3, r0
 8005914:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591e:	429a      	cmp	r2, r3
 8005920:	d302      	bcc.n	8005928 <xQueueGenericSendFromISR+0x6e>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b02      	cmp	r3, #2
 8005926:	d131      	bne.n	800598c <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005928:	241b      	movs	r4, #27
 800592a:	193b      	adds	r3, r7, r4
 800592c:	6a3a      	ldr	r2, [r7, #32]
 800592e:	2145      	movs	r1, #69	; 0x45
 8005930:	5c52      	ldrb	r2, [r2, r1]
 8005932:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005938:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	68b9      	ldr	r1, [r7, #8]
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	0018      	movs	r0, r3
 8005942:	f000 f8e3 	bl	8005b0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005946:	193b      	adds	r3, r7, r4
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	b25b      	sxtb	r3, r3
 800594c:	3301      	adds	r3, #1
 800594e:	d111      	bne.n	8005974 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	2b00      	cmp	r3, #0
 8005956:	d016      	beq.n	8005986 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	3324      	adds	r3, #36	; 0x24
 800595c:	0018      	movs	r0, r3
 800595e:	f000 fdf7 	bl	8006550 <xTaskRemoveFromEventList>
 8005962:	1e03      	subs	r3, r0, #0
 8005964:	d00f      	beq.n	8005986 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00c      	beq.n	8005986 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	e008      	b.n	8005986 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005974:	231b      	movs	r3, #27
 8005976:	18fb      	adds	r3, r7, r3
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	3301      	adds	r3, #1
 800597c:	b2db      	uxtb	r3, r3
 800597e:	b259      	sxtb	r1, r3
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	2245      	movs	r2, #69	; 0x45
 8005984:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8005986:	2301      	movs	r3, #1
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800598a:	e001      	b.n	8005990 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800598c:	2300      	movs	r3, #0
 800598e:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	0018      	movs	r0, r3
 8005994:	f001 fd4c 	bl	8007430 <vClearInterruptMaskFromISR>

	return xReturn;
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800599a:	0018      	movs	r0, r3
 800599c:	46bd      	mov	sp, r7
 800599e:	b00b      	add	sp, #44	; 0x2c
 80059a0:	bd90      	pop	{r4, r7, pc}

080059a2 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b08a      	sub	sp, #40	; 0x28
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	60f8      	str	r0, [r7, #12]
 80059aa:	60b9      	str	r1, [r7, #8]
 80059ac:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059ae:	2300      	movs	r3, #0
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <xQueueReceive+0x1e>
 80059bc:	b672      	cpsid	i
 80059be:	e7fe      	b.n	80059be <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d103      	bne.n	80059ce <xQueueReceive+0x2c>
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <xQueueReceive+0x30>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <xQueueReceive+0x32>
 80059d2:	2300      	movs	r3, #0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <xQueueReceive+0x3a>
 80059d8:	b672      	cpsid	i
 80059da:	e7fe      	b.n	80059da <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059dc:	f000 ff34 	bl	8006848 <xTaskGetSchedulerState>
 80059e0:	1e03      	subs	r3, r0, #0
 80059e2:	d102      	bne.n	80059ea <xQueueReceive+0x48>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <xQueueReceive+0x4c>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <xQueueReceive+0x4e>
 80059ee:	2300      	movs	r3, #0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <xQueueReceive+0x56>
 80059f4:	b672      	cpsid	i
 80059f6:	e7fe      	b.n	80059f6 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059f8:	f001 fcea 	bl	80073d0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d01a      	beq.n	8005a3e <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	0011      	movs	r1, r2
 8005a0e:	0018      	movs	r0, r3
 8005a10:	f000 f8e7 	bl	8005be2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	1e5a      	subs	r2, r3, #1
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d008      	beq.n	8005a36 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	3310      	adds	r3, #16
 8005a28:	0018      	movs	r0, r3
 8005a2a:	f000 fd91 	bl	8006550 <xTaskRemoveFromEventList>
 8005a2e:	1e03      	subs	r3, r0, #0
 8005a30:	d001      	beq.n	8005a36 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a32:	f001 fcbd 	bl	80073b0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a36:	f001 fcdd 	bl	80073f4 <vPortExitCritical>
				return pdPASS;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e062      	b.n	8005b04 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d103      	bne.n	8005a4c <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a44:	f001 fcd6 	bl	80073f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	e05b      	b.n	8005b04 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a52:	2314      	movs	r3, #20
 8005a54:	18fb      	adds	r3, r7, r3
 8005a56:	0018      	movs	r0, r3
 8005a58:	f000 fdd6 	bl	8006608 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a60:	f001 fcc8 	bl	80073f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a64:	f000 fb6c 	bl	8006140 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a68:	f001 fcb2 	bl	80073d0 <vPortEnterCritical>
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	2244      	movs	r2, #68	; 0x44
 8005a70:	5c9b      	ldrb	r3, [r3, r2]
 8005a72:	b25b      	sxtb	r3, r3
 8005a74:	3301      	adds	r3, #1
 8005a76:	d103      	bne.n	8005a80 <xQueueReceive+0xde>
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	2244      	movs	r2, #68	; 0x44
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	5499      	strb	r1, [r3, r2]
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	2245      	movs	r2, #69	; 0x45
 8005a84:	5c9b      	ldrb	r3, [r3, r2]
 8005a86:	b25b      	sxtb	r3, r3
 8005a88:	3301      	adds	r3, #1
 8005a8a:	d103      	bne.n	8005a94 <xQueueReceive+0xf2>
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	2245      	movs	r2, #69	; 0x45
 8005a90:	2100      	movs	r1, #0
 8005a92:	5499      	strb	r1, [r3, r2]
 8005a94:	f001 fcae 	bl	80073f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a98:	1d3a      	adds	r2, r7, #4
 8005a9a:	2314      	movs	r3, #20
 8005a9c:	18fb      	adds	r3, r7, r3
 8005a9e:	0011      	movs	r1, r2
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	f000 fdc5 	bl	8006630 <xTaskCheckForTimeOut>
 8005aa6:	1e03      	subs	r3, r0, #0
 8005aa8:	d11e      	bne.n	8005ae8 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	0018      	movs	r0, r3
 8005aae:	f000 f91c 	bl	8005cea <prvIsQueueEmpty>
 8005ab2:	1e03      	subs	r3, r0, #0
 8005ab4:	d011      	beq.n	8005ada <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	3324      	adds	r3, #36	; 0x24
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	0011      	movs	r1, r2
 8005abe:	0018      	movs	r0, r3
 8005ac0:	f000 fd02 	bl	80064c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	0018      	movs	r0, r3
 8005ac8:	f000 f8b1 	bl	8005c2e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005acc:	f000 fb44 	bl	8006158 <xTaskResumeAll>
 8005ad0:	1e03      	subs	r3, r0, #0
 8005ad2:	d191      	bne.n	80059f8 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8005ad4:	f001 fc6c 	bl	80073b0 <vPortYield>
 8005ad8:	e78e      	b.n	80059f8 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	0018      	movs	r0, r3
 8005ade:	f000 f8a6 	bl	8005c2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ae2:	f000 fb39 	bl	8006158 <xTaskResumeAll>
 8005ae6:	e787      	b.n	80059f8 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	0018      	movs	r0, r3
 8005aec:	f000 f89f 	bl	8005c2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005af0:	f000 fb32 	bl	8006158 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	0018      	movs	r0, r3
 8005af8:	f000 f8f7 	bl	8005cea <prvIsQueueEmpty>
 8005afc:	1e03      	subs	r3, r0, #0
 8005afe:	d100      	bne.n	8005b02 <xQueueReceive+0x160>
 8005b00:	e77a      	b.n	80059f8 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b02:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b04:	0018      	movs	r0, r3
 8005b06:	46bd      	mov	sp, r7
 8005b08:	b00a      	add	sp, #40	; 0x28
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10e      	bne.n	8005b48 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d14e      	bne.n	8005bd0 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	0018      	movs	r0, r3
 8005b38:	f000 fea2 	bl	8006880 <xTaskPriorityDisinherit>
 8005b3c:	0003      	movs	r3, r0
 8005b3e:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	609a      	str	r2, [r3, #8]
 8005b46:	e043      	b.n	8005bd0 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d119      	bne.n	8005b82 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6858      	ldr	r0, [r3, #4]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	0019      	movs	r1, r3
 8005b5a:	f002 f813 	bl	8007b84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	18d2      	adds	r2, r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d32b      	bcc.n	8005bd0 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	605a      	str	r2, [r3, #4]
 8005b80:	e026      	b.n	8005bd0 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	68d8      	ldr	r0, [r3, #12]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	0019      	movs	r1, r3
 8005b8e:	f001 fff9 	bl	8007b84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	425b      	negs	r3, r3
 8005b9c:	18d2      	adds	r2, r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d207      	bcs.n	8005bbe <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	689a      	ldr	r2, [r3, #8]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	425b      	negs	r3, r3
 8005bb8:	18d2      	adds	r2, r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d105      	bne.n	8005bd0 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1c5a      	adds	r2, r3, #1
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005bd8:	697b      	ldr	r3, [r7, #20]
}
 8005bda:	0018      	movs	r0, r3
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	b006      	add	sp, #24
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b082      	sub	sp, #8
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d018      	beq.n	8005c26 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfc:	18d2      	adds	r2, r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d303      	bcc.n	8005c16 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68d9      	ldr	r1, [r3, #12]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	0018      	movs	r0, r3
 8005c22:	f001 ffaf 	bl	8007b84 <memcpy>
	}
}
 8005c26:	46c0      	nop			; (mov r8, r8)
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	b002      	add	sp, #8
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b084      	sub	sp, #16
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c36:	f001 fbcb 	bl	80073d0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c3a:	230f      	movs	r3, #15
 8005c3c:	18fb      	adds	r3, r7, r3
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	2145      	movs	r1, #69	; 0x45
 8005c42:	5c52      	ldrb	r2, [r2, r1]
 8005c44:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c46:	e013      	b.n	8005c70 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d016      	beq.n	8005c7e <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3324      	adds	r3, #36	; 0x24
 8005c54:	0018      	movs	r0, r3
 8005c56:	f000 fc7b 	bl	8006550 <xTaskRemoveFromEventList>
 8005c5a:	1e03      	subs	r3, r0, #0
 8005c5c:	d001      	beq.n	8005c62 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c5e:	f000 fd37 	bl	80066d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c62:	210f      	movs	r1, #15
 8005c64:	187b      	adds	r3, r7, r1
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	187b      	adds	r3, r7, r1
 8005c6e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c70:	230f      	movs	r3, #15
 8005c72:	18fb      	adds	r3, r7, r3
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	b25b      	sxtb	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	dce5      	bgt.n	8005c48 <prvUnlockQueue+0x1a>
 8005c7c:	e000      	b.n	8005c80 <prvUnlockQueue+0x52>
					break;
 8005c7e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2245      	movs	r2, #69	; 0x45
 8005c84:	21ff      	movs	r1, #255	; 0xff
 8005c86:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005c88:	f001 fbb4 	bl	80073f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c8c:	f001 fba0 	bl	80073d0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c90:	230e      	movs	r3, #14
 8005c92:	18fb      	adds	r3, r7, r3
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	2144      	movs	r1, #68	; 0x44
 8005c98:	5c52      	ldrb	r2, [r2, r1]
 8005c9a:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c9c:	e013      	b.n	8005cc6 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d016      	beq.n	8005cd4 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	3310      	adds	r3, #16
 8005caa:	0018      	movs	r0, r3
 8005cac:	f000 fc50 	bl	8006550 <xTaskRemoveFromEventList>
 8005cb0:	1e03      	subs	r3, r0, #0
 8005cb2:	d001      	beq.n	8005cb8 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8005cb4:	f000 fd0c 	bl	80066d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005cb8:	210e      	movs	r1, #14
 8005cba:	187b      	adds	r3, r7, r1
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	187b      	adds	r3, r7, r1
 8005cc4:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cc6:	230e      	movs	r3, #14
 8005cc8:	18fb      	adds	r3, r7, r3
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	b25b      	sxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	dce5      	bgt.n	8005c9e <prvUnlockQueue+0x70>
 8005cd2:	e000      	b.n	8005cd6 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8005cd4:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2244      	movs	r2, #68	; 0x44
 8005cda:	21ff      	movs	r1, #255	; 0xff
 8005cdc:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005cde:	f001 fb89 	bl	80073f4 <vPortExitCritical>
}
 8005ce2:	46c0      	nop			; (mov r8, r8)
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	b004      	add	sp, #16
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cf2:	f001 fb6d 	bl	80073d0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d102      	bne.n	8005d04 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	e001      	b.n	8005d08 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d08:	f001 fb74 	bl	80073f4 <vPortExitCritical>

	return xReturn;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
}
 8005d0e:	0018      	movs	r0, r3
 8005d10:	46bd      	mov	sp, r7
 8005d12:	b004      	add	sp, #16
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b084      	sub	sp, #16
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d1e:	f001 fb57 	bl	80073d0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d102      	bne.n	8005d34 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	e001      	b.n	8005d38 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d38:	f001 fb5c 	bl	80073f4 <vPortExitCritical>

	return xReturn;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
}
 8005d3e:	0018      	movs	r0, r3
 8005d40:	46bd      	mov	sp, r7
 8005d42:	b004      	add	sp, #16
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d52:	2300      	movs	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	e015      	b.n	8005d84 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d58:	4b0e      	ldr	r3, [pc, #56]	; (8005d94 <vQueueAddToRegistry+0x4c>)
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	00d2      	lsls	r2, r2, #3
 8005d5e:	58d3      	ldr	r3, [r2, r3]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10c      	bne.n	8005d7e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d64:	4b0b      	ldr	r3, [pc, #44]	; (8005d94 <vQueueAddToRegistry+0x4c>)
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	00d2      	lsls	r2, r2, #3
 8005d6a:	6839      	ldr	r1, [r7, #0]
 8005d6c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d6e:	4a09      	ldr	r2, [pc, #36]	; (8005d94 <vQueueAddToRegistry+0x4c>)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	18d3      	adds	r3, r2, r3
 8005d76:	3304      	adds	r3, #4
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d7c:	e006      	b.n	8005d8c <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3301      	adds	r3, #1
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b07      	cmp	r3, #7
 8005d88:	d9e6      	bls.n	8005d58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d8a:	46c0      	nop			; (mov r8, r8)
 8005d8c:	46c0      	nop			; (mov r8, r8)
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	b004      	add	sp, #16
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	20000440 	.word	0x20000440

08005d98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005da8:	f001 fb12 	bl	80073d0 <vPortEnterCritical>
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	2244      	movs	r2, #68	; 0x44
 8005db0:	5c9b      	ldrb	r3, [r3, r2]
 8005db2:	b25b      	sxtb	r3, r3
 8005db4:	3301      	adds	r3, #1
 8005db6:	d103      	bne.n	8005dc0 <vQueueWaitForMessageRestricted+0x28>
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	2244      	movs	r2, #68	; 0x44
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	5499      	strb	r1, [r3, r2]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2245      	movs	r2, #69	; 0x45
 8005dc4:	5c9b      	ldrb	r3, [r3, r2]
 8005dc6:	b25b      	sxtb	r3, r3
 8005dc8:	3301      	adds	r3, #1
 8005dca:	d103      	bne.n	8005dd4 <vQueueWaitForMessageRestricted+0x3c>
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2245      	movs	r2, #69	; 0x45
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	5499      	strb	r1, [r3, r2]
 8005dd4:	f001 fb0e 	bl	80073f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d106      	bne.n	8005dee <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	3324      	adds	r3, #36	; 0x24
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	68b9      	ldr	r1, [r7, #8]
 8005de8:	0018      	movs	r0, r3
 8005dea:	f000 fb8b 	bl	8006504 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	0018      	movs	r0, r3
 8005df2:	f7ff ff1c 	bl	8005c2e <prvUnlockQueue>
	}
 8005df6:	46c0      	nop			; (mov r8, r8)
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	b006      	add	sp, #24
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005dfe:	b590      	push	{r4, r7, lr}
 8005e00:	b08d      	sub	sp, #52	; 0x34
 8005e02:	af04      	add	r7, sp, #16
 8005e04:	60f8      	str	r0, [r7, #12]
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	603b      	str	r3, [r7, #0]
 8005e0a:	1dbb      	adds	r3, r7, #6
 8005e0c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e0e:	1dbb      	adds	r3, r7, #6
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	0018      	movs	r0, r3
 8005e16:	f001 fb73 	bl	8007500 <pvPortMalloc>
 8005e1a:	0003      	movs	r3, r0
 8005e1c:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d010      	beq.n	8005e46 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e24:	2060      	movs	r0, #96	; 0x60
 8005e26:	f001 fb6b 	bl	8007500 <pvPortMalloc>
 8005e2a:	0003      	movs	r3, r0
 8005e2c:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d003      	beq.n	8005e3c <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	631a      	str	r2, [r3, #48]	; 0x30
 8005e3a:	e006      	b.n	8005e4a <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	0018      	movs	r0, r3
 8005e40:	f001 fc0a 	bl	8007658 <vPortFree>
 8005e44:	e001      	b.n	8005e4a <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d016      	beq.n	8005e7e <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e50:	1dbb      	adds	r3, r7, #6
 8005e52:	881a      	ldrh	r2, [r3, #0]
 8005e54:	683c      	ldr	r4, [r7, #0]
 8005e56:	68b9      	ldr	r1, [r7, #8]
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	9303      	str	r3, [sp, #12]
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	9302      	str	r3, [sp, #8]
 8005e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e64:	9301      	str	r3, [sp, #4]
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	0023      	movs	r3, r4
 8005e6c:	f000 f810 	bl	8005e90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	0018      	movs	r0, r3
 8005e74:	f000 f898 	bl	8005fa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	61bb      	str	r3, [r7, #24]
 8005e7c:	e002      	b.n	8005e84 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	425b      	negs	r3, r3
 8005e82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e84:	69bb      	ldr	r3, [r7, #24]
	}
 8005e86:	0018      	movs	r0, r3
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	b009      	add	sp, #36	; 0x24
 8005e8c:	bd90      	pop	{r4, r7, pc}
	...

08005e90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	001a      	movs	r2, r3
 8005ea8:	21a5      	movs	r1, #165	; 0xa5
 8005eaa:	f001 fde9 	bl	8007a80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	493b      	ldr	r1, [pc, #236]	; (8005fa4 <prvInitialiseNewTask+0x114>)
 8005eb6:	468c      	mov	ip, r1
 8005eb8:	4463      	add	r3, ip
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	18d3      	adds	r3, r2, r3
 8005ebe:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	2207      	movs	r2, #7
 8005ec4:	4393      	bics	r3, r2
 8005ec6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	2207      	movs	r2, #7
 8005ecc:	4013      	ands	r3, r2
 8005ece:	d001      	beq.n	8005ed4 <prvInitialiseNewTask+0x44>
 8005ed0:	b672      	cpsid	i
 8005ed2:	e7fe      	b.n	8005ed2 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d020      	beq.n	8005f1c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005eda:	2300      	movs	r3, #0
 8005edc:	617b      	str	r3, [r7, #20]
 8005ede:	e013      	b.n	8005f08 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	18d3      	adds	r3, r2, r3
 8005ee6:	7818      	ldrb	r0, [r3, #0]
 8005ee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eea:	2134      	movs	r1, #52	; 0x34
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	18d3      	adds	r3, r2, r3
 8005ef0:	185b      	adds	r3, r3, r1
 8005ef2:	1c02      	adds	r2, r0, #0
 8005ef4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	18d3      	adds	r3, r2, r3
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d006      	beq.n	8005f10 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	3301      	adds	r3, #1
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2b0f      	cmp	r3, #15
 8005f0c:	d9e8      	bls.n	8005ee0 <prvInitialiseNewTask+0x50>
 8005f0e:	e000      	b.n	8005f12 <prvInitialiseNewTask+0x82>
			{
				break;
 8005f10:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f14:	2243      	movs	r2, #67	; 0x43
 8005f16:	2100      	movs	r1, #0
 8005f18:	5499      	strb	r1, [r3, r2]
 8005f1a:	e003      	b.n	8005f24 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1e:	2234      	movs	r2, #52	; 0x34
 8005f20:	2100      	movs	r1, #0
 8005f22:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	2b09      	cmp	r3, #9
 8005f28:	d901      	bls.n	8005f2e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f2a:	2309      	movs	r3, #9
 8005f2c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	6a3a      	ldr	r2, [r7, #32]
 8005f32:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f36:	6a3a      	ldr	r2, [r7, #32]
 8005f38:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f42:	3304      	adds	r3, #4
 8005f44:	0018      	movs	r0, r3
 8005f46:	f7ff fac0 	bl	80054ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4c:	3318      	adds	r3, #24
 8005f4e:	0018      	movs	r0, r3
 8005f50:	f7ff fabb 	bl	80054ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	220a      	movs	r2, #10
 8005f5e:	1ad2      	subs	r2, r2, r3
 8005f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f68:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f72:	2200      	movs	r2, #0
 8005f74:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f78:	225c      	movs	r2, #92	; 0x5c
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	68f9      	ldr	r1, [r7, #12]
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	0018      	movs	r0, r3
 8005f86:	f001 f987 	bl	8007298 <pxPortInitialiseStack>
 8005f8a:	0002      	movs	r2, r0
 8005f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d002      	beq.n	8005f9c <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f9c:	46c0      	nop			; (mov r8, r8)
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	b006      	add	sp, #24
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	3fffffff 	.word	0x3fffffff

08005fa8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fb0:	f001 fa0e 	bl	80073d0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fb4:	4b2a      	ldr	r3, [pc, #168]	; (8006060 <prvAddNewTaskToReadyList+0xb8>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	4b29      	ldr	r3, [pc, #164]	; (8006060 <prvAddNewTaskToReadyList+0xb8>)
 8005fbc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005fbe:	4b29      	ldr	r3, [pc, #164]	; (8006064 <prvAddNewTaskToReadyList+0xbc>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d109      	bne.n	8005fda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fc6:	4b27      	ldr	r3, [pc, #156]	; (8006064 <prvAddNewTaskToReadyList+0xbc>)
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fcc:	4b24      	ldr	r3, [pc, #144]	; (8006060 <prvAddNewTaskToReadyList+0xb8>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d110      	bne.n	8005ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005fd4:	f000 fb96 	bl	8006704 <prvInitialiseTaskLists>
 8005fd8:	e00d      	b.n	8005ff6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005fda:	4b23      	ldr	r3, [pc, #140]	; (8006068 <prvAddNewTaskToReadyList+0xc0>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d109      	bne.n	8005ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005fe2:	4b20      	ldr	r3, [pc, #128]	; (8006064 <prvAddNewTaskToReadyList+0xbc>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d802      	bhi.n	8005ff6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ff0:	4b1c      	ldr	r3, [pc, #112]	; (8006064 <prvAddNewTaskToReadyList+0xbc>)
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ff6:	4b1d      	ldr	r3, [pc, #116]	; (800606c <prvAddNewTaskToReadyList+0xc4>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	4b1b      	ldr	r3, [pc, #108]	; (800606c <prvAddNewTaskToReadyList+0xc4>)
 8005ffe:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006000:	4b1a      	ldr	r3, [pc, #104]	; (800606c <prvAddNewTaskToReadyList+0xc4>)
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600c:	4b18      	ldr	r3, [pc, #96]	; (8006070 <prvAddNewTaskToReadyList+0xc8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	d903      	bls.n	800601c <prvAddNewTaskToReadyList+0x74>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006018:	4b15      	ldr	r3, [pc, #84]	; (8006070 <prvAddNewTaskToReadyList+0xc8>)
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006020:	0013      	movs	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	189b      	adds	r3, r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4a12      	ldr	r2, [pc, #72]	; (8006074 <prvAddNewTaskToReadyList+0xcc>)
 800602a:	189a      	adds	r2, r3, r2
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3304      	adds	r3, #4
 8006030:	0019      	movs	r1, r3
 8006032:	0010      	movs	r0, r2
 8006034:	f7ff fa54 	bl	80054e0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006038:	f001 f9dc 	bl	80073f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800603c:	4b0a      	ldr	r3, [pc, #40]	; (8006068 <prvAddNewTaskToReadyList+0xc0>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d008      	beq.n	8006056 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006044:	4b07      	ldr	r3, [pc, #28]	; (8006064 <prvAddNewTaskToReadyList+0xbc>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604e:	429a      	cmp	r2, r3
 8006050:	d201      	bcs.n	8006056 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006052:	f001 f9ad 	bl	80073b0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006056:	46c0      	nop			; (mov r8, r8)
 8006058:	46bd      	mov	sp, r7
 800605a:	b002      	add	sp, #8
 800605c:	bd80      	pop	{r7, pc}
 800605e:	46c0      	nop			; (mov r8, r8)
 8006060:	200005bc 	.word	0x200005bc
 8006064:	20000480 	.word	0x20000480
 8006068:	200005c8 	.word	0x200005c8
 800606c:	200005d8 	.word	0x200005d8
 8006070:	200005c4 	.word	0x200005c4
 8006074:	20000484 	.word	0x20000484

08006078 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d010      	beq.n	80060ac <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800608a:	4b0d      	ldr	r3, [pc, #52]	; (80060c0 <vTaskDelay+0x48>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <vTaskDelay+0x1e>
 8006092:	b672      	cpsid	i
 8006094:	e7fe      	b.n	8006094 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006096:	f000 f853 	bl	8006140 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2100      	movs	r1, #0
 800609e:	0018      	movs	r0, r3
 80060a0:	f000 fd50 	bl	8006b44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060a4:	f000 f858 	bl	8006158 <xTaskResumeAll>
 80060a8:	0003      	movs	r3, r0
 80060aa:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80060b2:	f001 f97d 	bl	80073b0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060b6:	46c0      	nop			; (mov r8, r8)
 80060b8:	46bd      	mov	sp, r7
 80060ba:	b004      	add	sp, #16
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	46c0      	nop			; (mov r8, r8)
 80060c0:	200005e4 	.word	0x200005e4

080060c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80060ca:	4917      	ldr	r1, [pc, #92]	; (8006128 <vTaskStartScheduler+0x64>)
 80060cc:	4817      	ldr	r0, [pc, #92]	; (800612c <vTaskStartScheduler+0x68>)
 80060ce:	4b18      	ldr	r3, [pc, #96]	; (8006130 <vTaskStartScheduler+0x6c>)
 80060d0:	9301      	str	r3, [sp, #4]
 80060d2:	2300      	movs	r3, #0
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	2300      	movs	r3, #0
 80060d8:	2280      	movs	r2, #128	; 0x80
 80060da:	f7ff fe90 	bl	8005dfe <xTaskCreate>
 80060de:	0003      	movs	r3, r0
 80060e0:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d103      	bne.n	80060f0 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
 80060e8:	f000 fd80 	bl	8006bec <xTimerCreateTimerTask>
 80060ec:	0003      	movs	r3, r0
 80060ee:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d10f      	bne.n	8006116 <vTaskStartScheduler+0x52>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80060f6:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80060f8:	4b0e      	ldr	r3, [pc, #56]	; (8006134 <vTaskStartScheduler+0x70>)
 80060fa:	2201      	movs	r2, #1
 80060fc:	4252      	negs	r2, r2
 80060fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006100:	4b0d      	ldr	r3, [pc, #52]	; (8006138 <vTaskStartScheduler+0x74>)
 8006102:	2201      	movs	r2, #1
 8006104:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006106:	4b0d      	ldr	r3, [pc, #52]	; (800613c <vTaskStartScheduler+0x78>)
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800610c:	f7fa fa2a 	bl	8000564 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006110:	f001 f92a 	bl	8007368 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006114:	e004      	b.n	8006120 <vTaskStartScheduler+0x5c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	3301      	adds	r3, #1
 800611a:	d101      	bne.n	8006120 <vTaskStartScheduler+0x5c>
 800611c:	b672      	cpsid	i
 800611e:	e7fe      	b.n	800611e <vTaskStartScheduler+0x5a>
}
 8006120:	46c0      	nop			; (mov r8, r8)
 8006122:	46bd      	mov	sp, r7
 8006124:	b002      	add	sp, #8
 8006126:	bd80      	pop	{r7, pc}
 8006128:	0800882c 	.word	0x0800882c
 800612c:	080066e5 	.word	0x080066e5
 8006130:	200005e0 	.word	0x200005e0
 8006134:	200005dc 	.word	0x200005dc
 8006138:	200005c8 	.word	0x200005c8
 800613c:	200005c0 	.word	0x200005c0

08006140 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006144:	4b03      	ldr	r3, [pc, #12]	; (8006154 <vTaskSuspendAll+0x14>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	1c5a      	adds	r2, r3, #1
 800614a:	4b02      	ldr	r3, [pc, #8]	; (8006154 <vTaskSuspendAll+0x14>)
 800614c:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800614e:	46c0      	nop			; (mov r8, r8)
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	200005e4 	.word	0x200005e4

08006158 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800615e:	2300      	movs	r3, #0
 8006160:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006162:	2300      	movs	r3, #0
 8006164:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006166:	4b3a      	ldr	r3, [pc, #232]	; (8006250 <xTaskResumeAll+0xf8>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <xTaskResumeAll+0x1a>
 800616e:	b672      	cpsid	i
 8006170:	e7fe      	b.n	8006170 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006172:	f001 f92d 	bl	80073d0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006176:	4b36      	ldr	r3, [pc, #216]	; (8006250 <xTaskResumeAll+0xf8>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	1e5a      	subs	r2, r3, #1
 800617c:	4b34      	ldr	r3, [pc, #208]	; (8006250 <xTaskResumeAll+0xf8>)
 800617e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006180:	4b33      	ldr	r3, [pc, #204]	; (8006250 <xTaskResumeAll+0xf8>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d15b      	bne.n	8006240 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006188:	4b32      	ldr	r3, [pc, #200]	; (8006254 <xTaskResumeAll+0xfc>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d057      	beq.n	8006240 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006190:	e02f      	b.n	80061f2 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006192:	4b31      	ldr	r3, [pc, #196]	; (8006258 <xTaskResumeAll+0x100>)
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3318      	adds	r3, #24
 800619e:	0018      	movs	r0, r3
 80061a0:	f7ff f9f6 	bl	8005590 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	3304      	adds	r3, #4
 80061a8:	0018      	movs	r0, r3
 80061aa:	f7ff f9f1 	bl	8005590 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b2:	4b2a      	ldr	r3, [pc, #168]	; (800625c <xTaskResumeAll+0x104>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d903      	bls.n	80061c2 <xTaskResumeAll+0x6a>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061be:	4b27      	ldr	r3, [pc, #156]	; (800625c <xTaskResumeAll+0x104>)
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c6:	0013      	movs	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	189b      	adds	r3, r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4a24      	ldr	r2, [pc, #144]	; (8006260 <xTaskResumeAll+0x108>)
 80061d0:	189a      	adds	r2, r3, r2
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	3304      	adds	r3, #4
 80061d6:	0019      	movs	r1, r3
 80061d8:	0010      	movs	r0, r2
 80061da:	f7ff f981 	bl	80054e0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e2:	4b20      	ldr	r3, [pc, #128]	; (8006264 <xTaskResumeAll+0x10c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d302      	bcc.n	80061f2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80061ec:	4b1e      	ldr	r3, [pc, #120]	; (8006268 <xTaskResumeAll+0x110>)
 80061ee:	2201      	movs	r2, #1
 80061f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061f2:	4b19      	ldr	r3, [pc, #100]	; (8006258 <xTaskResumeAll+0x100>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1cb      	bne.n	8006192 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006200:	f000 fb04 	bl	800680c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006204:	4b19      	ldr	r3, [pc, #100]	; (800626c <xTaskResumeAll+0x114>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00f      	beq.n	8006230 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006210:	f000 f83c 	bl	800628c <xTaskIncrementTick>
 8006214:	1e03      	subs	r3, r0, #0
 8006216:	d002      	beq.n	800621e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8006218:	4b13      	ldr	r3, [pc, #76]	; (8006268 <xTaskResumeAll+0x110>)
 800621a:	2201      	movs	r2, #1
 800621c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	3b01      	subs	r3, #1
 8006222:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1f2      	bne.n	8006210 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 800622a:	4b10      	ldr	r3, [pc, #64]	; (800626c <xTaskResumeAll+0x114>)
 800622c:	2200      	movs	r2, #0
 800622e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006230:	4b0d      	ldr	r3, [pc, #52]	; (8006268 <xTaskResumeAll+0x110>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d003      	beq.n	8006240 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006238:	2301      	movs	r3, #1
 800623a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800623c:	f001 f8b8 	bl	80073b0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006240:	f001 f8d8 	bl	80073f4 <vPortExitCritical>

	return xAlreadyYielded;
 8006244:	68bb      	ldr	r3, [r7, #8]
}
 8006246:	0018      	movs	r0, r3
 8006248:	46bd      	mov	sp, r7
 800624a:	b004      	add	sp, #16
 800624c:	bd80      	pop	{r7, pc}
 800624e:	46c0      	nop			; (mov r8, r8)
 8006250:	200005e4 	.word	0x200005e4
 8006254:	200005bc 	.word	0x200005bc
 8006258:	2000057c 	.word	0x2000057c
 800625c:	200005c4 	.word	0x200005c4
 8006260:	20000484 	.word	0x20000484
 8006264:	20000480 	.word	0x20000480
 8006268:	200005d0 	.word	0x200005d0
 800626c:	200005cc 	.word	0x200005cc

08006270 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006276:	4b04      	ldr	r3, [pc, #16]	; (8006288 <xTaskGetTickCount+0x18>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800627c:	687b      	ldr	r3, [r7, #4]
}
 800627e:	0018      	movs	r0, r3
 8006280:	46bd      	mov	sp, r7
 8006282:	b002      	add	sp, #8
 8006284:	bd80      	pop	{r7, pc}
 8006286:	46c0      	nop			; (mov r8, r8)
 8006288:	200005c0 	.word	0x200005c0

0800628c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006292:	2300      	movs	r3, #0
 8006294:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006296:	4b4a      	ldr	r3, [pc, #296]	; (80063c0 <xTaskIncrementTick+0x134>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d000      	beq.n	80062a0 <xTaskIncrementTick+0x14>
 800629e:	e084      	b.n	80063aa <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062a0:	4b48      	ldr	r3, [pc, #288]	; (80063c4 <xTaskIncrementTick+0x138>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3301      	adds	r3, #1
 80062a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80062a8:	4b46      	ldr	r3, [pc, #280]	; (80063c4 <xTaskIncrementTick+0x138>)
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d117      	bne.n	80062e4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80062b4:	4b44      	ldr	r3, [pc, #272]	; (80063c8 <xTaskIncrementTick+0x13c>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <xTaskIncrementTick+0x36>
 80062be:	b672      	cpsid	i
 80062c0:	e7fe      	b.n	80062c0 <xTaskIncrementTick+0x34>
 80062c2:	4b41      	ldr	r3, [pc, #260]	; (80063c8 <xTaskIncrementTick+0x13c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	4b40      	ldr	r3, [pc, #256]	; (80063cc <xTaskIncrementTick+0x140>)
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	4b3e      	ldr	r3, [pc, #248]	; (80063c8 <xTaskIncrementTick+0x13c>)
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	4b3e      	ldr	r3, [pc, #248]	; (80063cc <xTaskIncrementTick+0x140>)
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	4b3e      	ldr	r3, [pc, #248]	; (80063d0 <xTaskIncrementTick+0x144>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	4b3c      	ldr	r3, [pc, #240]	; (80063d0 <xTaskIncrementTick+0x144>)
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	f000 fa94 	bl	800680c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062e4:	4b3b      	ldr	r3, [pc, #236]	; (80063d4 <xTaskIncrementTick+0x148>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d349      	bcc.n	8006382 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062ee:	4b36      	ldr	r3, [pc, #216]	; (80063c8 <xTaskIncrementTick+0x13c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d104      	bne.n	8006302 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062f8:	4b36      	ldr	r3, [pc, #216]	; (80063d4 <xTaskIncrementTick+0x148>)
 80062fa:	2201      	movs	r2, #1
 80062fc:	4252      	negs	r2, r2
 80062fe:	601a      	str	r2, [r3, #0]
					break;
 8006300:	e03f      	b.n	8006382 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006302:	4b31      	ldr	r3, [pc, #196]	; (80063c8 <xTaskIncrementTick+0x13c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	429a      	cmp	r2, r3
 8006318:	d203      	bcs.n	8006322 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800631a:	4b2e      	ldr	r3, [pc, #184]	; (80063d4 <xTaskIncrementTick+0x148>)
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006320:	e02f      	b.n	8006382 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	3304      	adds	r3, #4
 8006326:	0018      	movs	r0, r3
 8006328:	f7ff f932 	bl	8005590 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006330:	2b00      	cmp	r3, #0
 8006332:	d004      	beq.n	800633e <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	3318      	adds	r3, #24
 8006338:	0018      	movs	r0, r3
 800633a:	f7ff f929 	bl	8005590 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006342:	4b25      	ldr	r3, [pc, #148]	; (80063d8 <xTaskIncrementTick+0x14c>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d903      	bls.n	8006352 <xTaskIncrementTick+0xc6>
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800634e:	4b22      	ldr	r3, [pc, #136]	; (80063d8 <xTaskIncrementTick+0x14c>)
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006356:	0013      	movs	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	189b      	adds	r3, r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4a1f      	ldr	r2, [pc, #124]	; (80063dc <xTaskIncrementTick+0x150>)
 8006360:	189a      	adds	r2, r3, r2
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	3304      	adds	r3, #4
 8006366:	0019      	movs	r1, r3
 8006368:	0010      	movs	r0, r2
 800636a:	f7ff f8b9 	bl	80054e0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006372:	4b1b      	ldr	r3, [pc, #108]	; (80063e0 <xTaskIncrementTick+0x154>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006378:	429a      	cmp	r2, r3
 800637a:	d3b8      	bcc.n	80062ee <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800637c:	2301      	movs	r3, #1
 800637e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006380:	e7b5      	b.n	80062ee <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006382:	4b17      	ldr	r3, [pc, #92]	; (80063e0 <xTaskIncrementTick+0x154>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006388:	4914      	ldr	r1, [pc, #80]	; (80063dc <xTaskIncrementTick+0x150>)
 800638a:	0013      	movs	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	189b      	adds	r3, r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	585b      	ldr	r3, [r3, r1]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d901      	bls.n	800639c <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8006398:	2301      	movs	r3, #1
 800639a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800639c:	4b11      	ldr	r3, [pc, #68]	; (80063e4 <xTaskIncrementTick+0x158>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d007      	beq.n	80063b4 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 80063a4:	2301      	movs	r3, #1
 80063a6:	617b      	str	r3, [r7, #20]
 80063a8:	e004      	b.n	80063b4 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80063aa:	4b0f      	ldr	r3, [pc, #60]	; (80063e8 <xTaskIncrementTick+0x15c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	1c5a      	adds	r2, r3, #1
 80063b0:	4b0d      	ldr	r3, [pc, #52]	; (80063e8 <xTaskIncrementTick+0x15c>)
 80063b2:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80063b4:	697b      	ldr	r3, [r7, #20]
}
 80063b6:	0018      	movs	r0, r3
 80063b8:	46bd      	mov	sp, r7
 80063ba:	b006      	add	sp, #24
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	46c0      	nop			; (mov r8, r8)
 80063c0:	200005e4 	.word	0x200005e4
 80063c4:	200005c0 	.word	0x200005c0
 80063c8:	20000574 	.word	0x20000574
 80063cc:	20000578 	.word	0x20000578
 80063d0:	200005d4 	.word	0x200005d4
 80063d4:	200005dc 	.word	0x200005dc
 80063d8:	200005c4 	.word	0x200005c4
 80063dc:	20000484 	.word	0x20000484
 80063e0:	20000480 	.word	0x20000480
 80063e4:	200005d0 	.word	0x200005d0
 80063e8:	200005cc 	.word	0x200005cc

080063ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063f2:	4b2e      	ldr	r3, [pc, #184]	; (80064ac <vTaskSwitchContext+0xc0>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063fa:	4b2d      	ldr	r3, [pc, #180]	; (80064b0 <vTaskSwitchContext+0xc4>)
 80063fc:	2201      	movs	r2, #1
 80063fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006400:	e050      	b.n	80064a4 <vTaskSwitchContext+0xb8>
		xYieldPending = pdFALSE;
 8006402:	4b2b      	ldr	r3, [pc, #172]	; (80064b0 <vTaskSwitchContext+0xc4>)
 8006404:	2200      	movs	r2, #0
 8006406:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006408:	f7fa f8b1 	bl	800056e <getRunTimeCounterValue>
 800640c:	0002      	movs	r2, r0
 800640e:	4b29      	ldr	r3, [pc, #164]	; (80064b4 <vTaskSwitchContext+0xc8>)
 8006410:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006412:	4b28      	ldr	r3, [pc, #160]	; (80064b4 <vTaskSwitchContext+0xc8>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	4b28      	ldr	r3, [pc, #160]	; (80064b8 <vTaskSwitchContext+0xcc>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d909      	bls.n	8006432 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800641e:	4b27      	ldr	r3, [pc, #156]	; (80064bc <vTaskSwitchContext+0xd0>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006424:	4a23      	ldr	r2, [pc, #140]	; (80064b4 <vTaskSwitchContext+0xc8>)
 8006426:	6810      	ldr	r0, [r2, #0]
 8006428:	4a23      	ldr	r2, [pc, #140]	; (80064b8 <vTaskSwitchContext+0xcc>)
 800642a:	6812      	ldr	r2, [r2, #0]
 800642c:	1a82      	subs	r2, r0, r2
 800642e:	188a      	adds	r2, r1, r2
 8006430:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8006432:	4b20      	ldr	r3, [pc, #128]	; (80064b4 <vTaskSwitchContext+0xc8>)
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	4b20      	ldr	r3, [pc, #128]	; (80064b8 <vTaskSwitchContext+0xcc>)
 8006438:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800643a:	4b21      	ldr	r3, [pc, #132]	; (80064c0 <vTaskSwitchContext+0xd4>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	607b      	str	r3, [r7, #4]
 8006440:	e007      	b.n	8006452 <vTaskSwitchContext+0x66>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <vTaskSwitchContext+0x60>
 8006448:	b672      	cpsid	i
 800644a:	e7fe      	b.n	800644a <vTaskSwitchContext+0x5e>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	3b01      	subs	r3, #1
 8006450:	607b      	str	r3, [r7, #4]
 8006452:	491c      	ldr	r1, [pc, #112]	; (80064c4 <vTaskSwitchContext+0xd8>)
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	0013      	movs	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	189b      	adds	r3, r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	585b      	ldr	r3, [r3, r1]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0ee      	beq.n	8006442 <vTaskSwitchContext+0x56>
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	0013      	movs	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	189b      	adds	r3, r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4a15      	ldr	r2, [pc, #84]	; (80064c4 <vTaskSwitchContext+0xd8>)
 8006470:	189b      	adds	r3, r3, r2
 8006472:	603b      	str	r3, [r7, #0]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	605a      	str	r2, [r3, #4]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	3308      	adds	r3, #8
 8006486:	429a      	cmp	r2, r3
 8006488:	d104      	bne.n	8006494 <vTaskSwitchContext+0xa8>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	605a      	str	r2, [r3, #4]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	4b08      	ldr	r3, [pc, #32]	; (80064bc <vTaskSwitchContext+0xd0>)
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	4b08      	ldr	r3, [pc, #32]	; (80064c0 <vTaskSwitchContext+0xd4>)
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	601a      	str	r2, [r3, #0]
}
 80064a4:	46c0      	nop			; (mov r8, r8)
 80064a6:	46bd      	mov	sp, r7
 80064a8:	b002      	add	sp, #8
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	200005e4 	.word	0x200005e4
 80064b0:	200005d0 	.word	0x200005d0
 80064b4:	200005ec 	.word	0x200005ec
 80064b8:	200005e8 	.word	0x200005e8
 80064bc:	20000480 	.word	0x20000480
 80064c0:	200005c4 	.word	0x200005c4
 80064c4:	20000484 	.word	0x20000484

080064c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <vTaskPlaceOnEventList+0x14>
 80064d8:	b672      	cpsid	i
 80064da:	e7fe      	b.n	80064da <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064dc:	4b08      	ldr	r3, [pc, #32]	; (8006500 <vTaskPlaceOnEventList+0x38>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3318      	adds	r3, #24
 80064e2:	001a      	movs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	0011      	movs	r1, r2
 80064e8:	0018      	movs	r0, r3
 80064ea:	f7ff f81b 	bl	8005524 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2101      	movs	r1, #1
 80064f2:	0018      	movs	r0, r3
 80064f4:	f000 fb26 	bl	8006b44 <prvAddCurrentTaskToDelayedList>
}
 80064f8:	46c0      	nop			; (mov r8, r8)
 80064fa:	46bd      	mov	sp, r7
 80064fc:	b002      	add	sp, #8
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	20000480 	.word	0x20000480

08006504 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <vTaskPlaceOnEventListRestricted+0x16>
 8006516:	b672      	cpsid	i
 8006518:	e7fe      	b.n	8006518 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800651a:	4b0c      	ldr	r3, [pc, #48]	; (800654c <vTaskPlaceOnEventListRestricted+0x48>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	3318      	adds	r3, #24
 8006520:	001a      	movs	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	0011      	movs	r1, r2
 8006526:	0018      	movs	r0, r3
 8006528:	f7fe ffda 	bl	80054e0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d002      	beq.n	8006538 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8006532:	2301      	movs	r3, #1
 8006534:	425b      	negs	r3, r3
 8006536:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	0011      	movs	r1, r2
 800653e:	0018      	movs	r0, r3
 8006540:	f000 fb00 	bl	8006b44 <prvAddCurrentTaskToDelayedList>
	}
 8006544:	46c0      	nop			; (mov r8, r8)
 8006546:	46bd      	mov	sp, r7
 8006548:	b004      	add	sp, #16
 800654a:	bd80      	pop	{r7, pc}
 800654c:	20000480 	.word	0x20000480

08006550 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <xTaskRemoveFromEventList+0x1a>
 8006566:	b672      	cpsid	i
 8006568:	e7fe      	b.n	8006568 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	3318      	adds	r3, #24
 800656e:	0018      	movs	r0, r3
 8006570:	f7ff f80e 	bl	8005590 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006574:	4b1e      	ldr	r3, [pc, #120]	; (80065f0 <xTaskRemoveFromEventList+0xa0>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d11d      	bne.n	80065b8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	3304      	adds	r3, #4
 8006580:	0018      	movs	r0, r3
 8006582:	f7ff f805 	bl	8005590 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658a:	4b1a      	ldr	r3, [pc, #104]	; (80065f4 <xTaskRemoveFromEventList+0xa4>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d903      	bls.n	800659a <xTaskRemoveFromEventList+0x4a>
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006596:	4b17      	ldr	r3, [pc, #92]	; (80065f4 <xTaskRemoveFromEventList+0xa4>)
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800659e:	0013      	movs	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	189b      	adds	r3, r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4a14      	ldr	r2, [pc, #80]	; (80065f8 <xTaskRemoveFromEventList+0xa8>)
 80065a8:	189a      	adds	r2, r3, r2
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	3304      	adds	r3, #4
 80065ae:	0019      	movs	r1, r3
 80065b0:	0010      	movs	r0, r2
 80065b2:	f7fe ff95 	bl	80054e0 <vListInsertEnd>
 80065b6:	e007      	b.n	80065c8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	3318      	adds	r3, #24
 80065bc:	001a      	movs	r2, r3
 80065be:	4b0f      	ldr	r3, [pc, #60]	; (80065fc <xTaskRemoveFromEventList+0xac>)
 80065c0:	0011      	movs	r1, r2
 80065c2:	0018      	movs	r0, r3
 80065c4:	f7fe ff8c 	bl	80054e0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065cc:	4b0c      	ldr	r3, [pc, #48]	; (8006600 <xTaskRemoveFromEventList+0xb0>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d905      	bls.n	80065e2 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80065d6:	2301      	movs	r3, #1
 80065d8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80065da:	4b0a      	ldr	r3, [pc, #40]	; (8006604 <xTaskRemoveFromEventList+0xb4>)
 80065dc:	2201      	movs	r2, #1
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	e001      	b.n	80065e6 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80065e2:	2300      	movs	r3, #0
 80065e4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80065e6:	68fb      	ldr	r3, [r7, #12]
}
 80065e8:	0018      	movs	r0, r3
 80065ea:	46bd      	mov	sp, r7
 80065ec:	b004      	add	sp, #16
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	200005e4 	.word	0x200005e4
 80065f4:	200005c4 	.word	0x200005c4
 80065f8:	20000484 	.word	0x20000484
 80065fc:	2000057c 	.word	0x2000057c
 8006600:	20000480 	.word	0x20000480
 8006604:	200005d0 	.word	0x200005d0

08006608 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006610:	4b05      	ldr	r3, [pc, #20]	; (8006628 <vTaskInternalSetTimeOutState+0x20>)
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006618:	4b04      	ldr	r3, [pc, #16]	; (800662c <vTaskInternalSetTimeOutState+0x24>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	605a      	str	r2, [r3, #4]
}
 8006620:	46c0      	nop			; (mov r8, r8)
 8006622:	46bd      	mov	sp, r7
 8006624:	b002      	add	sp, #8
 8006626:	bd80      	pop	{r7, pc}
 8006628:	200005d4 	.word	0x200005d4
 800662c:	200005c0 	.word	0x200005c0

08006630 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <xTaskCheckForTimeOut+0x14>
 8006640:	b672      	cpsid	i
 8006642:	e7fe      	b.n	8006642 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <xTaskCheckForTimeOut+0x1e>
 800664a:	b672      	cpsid	i
 800664c:	e7fe      	b.n	800664c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800664e:	f000 febf 	bl	80073d0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006652:	4b1d      	ldr	r3, [pc, #116]	; (80066c8 <xTaskCheckForTimeOut+0x98>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3301      	adds	r3, #1
 8006668:	d102      	bne.n	8006670 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800666a:	2300      	movs	r3, #0
 800666c:	617b      	str	r3, [r7, #20]
 800666e:	e024      	b.n	80066ba <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	4b15      	ldr	r3, [pc, #84]	; (80066cc <xTaskCheckForTimeOut+0x9c>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	429a      	cmp	r2, r3
 800667a:	d007      	beq.n	800668c <xTaskCheckForTimeOut+0x5c>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	429a      	cmp	r2, r3
 8006684:	d302      	bcc.n	800668c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006686:	2301      	movs	r3, #1
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	e016      	b.n	80066ba <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	429a      	cmp	r2, r3
 8006694:	d20c      	bcs.n	80066b0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	1ad2      	subs	r2, r2, r3
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	0018      	movs	r0, r3
 80066a6:	f7ff ffaf 	bl	8006608 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066aa:	2300      	movs	r3, #0
 80066ac:	617b      	str	r3, [r7, #20]
 80066ae:	e004      	b.n	80066ba <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2200      	movs	r2, #0
 80066b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80066b6:	2301      	movs	r3, #1
 80066b8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80066ba:	f000 fe9b 	bl	80073f4 <vPortExitCritical>

	return xReturn;
 80066be:	697b      	ldr	r3, [r7, #20]
}
 80066c0:	0018      	movs	r0, r3
 80066c2:	46bd      	mov	sp, r7
 80066c4:	b006      	add	sp, #24
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	200005c0 	.word	0x200005c0
 80066cc:	200005d4 	.word	0x200005d4

080066d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80066d4:	4b02      	ldr	r3, [pc, #8]	; (80066e0 <vTaskMissedYield+0x10>)
 80066d6:	2201      	movs	r2, #1
 80066d8:	601a      	str	r2, [r3, #0]
}
 80066da:	46c0      	nop			; (mov r8, r8)
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	200005d0 	.word	0x200005d0

080066e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80066ec:	f000 f84e 	bl	800678c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066f0:	4b03      	ldr	r3, [pc, #12]	; (8006700 <prvIdleTask+0x1c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d9f9      	bls.n	80066ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80066f8:	f000 fe5a 	bl	80073b0 <vPortYield>
		prvCheckTasksWaitingTermination();
 80066fc:	e7f6      	b.n	80066ec <prvIdleTask+0x8>
 80066fe:	46c0      	nop			; (mov r8, r8)
 8006700:	20000484 	.word	0x20000484

08006704 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800670a:	2300      	movs	r3, #0
 800670c:	607b      	str	r3, [r7, #4]
 800670e:	e00c      	b.n	800672a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	0013      	movs	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	189b      	adds	r3, r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4a14      	ldr	r2, [pc, #80]	; (800676c <prvInitialiseTaskLists+0x68>)
 800671c:	189b      	adds	r3, r3, r2
 800671e:	0018      	movs	r0, r3
 8006720:	f7fe feb5 	bl	800548e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3301      	adds	r3, #1
 8006728:	607b      	str	r3, [r7, #4]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b09      	cmp	r3, #9
 800672e:	d9ef      	bls.n	8006710 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006730:	4b0f      	ldr	r3, [pc, #60]	; (8006770 <prvInitialiseTaskLists+0x6c>)
 8006732:	0018      	movs	r0, r3
 8006734:	f7fe feab 	bl	800548e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006738:	4b0e      	ldr	r3, [pc, #56]	; (8006774 <prvInitialiseTaskLists+0x70>)
 800673a:	0018      	movs	r0, r3
 800673c:	f7fe fea7 	bl	800548e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006740:	4b0d      	ldr	r3, [pc, #52]	; (8006778 <prvInitialiseTaskLists+0x74>)
 8006742:	0018      	movs	r0, r3
 8006744:	f7fe fea3 	bl	800548e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006748:	4b0c      	ldr	r3, [pc, #48]	; (800677c <prvInitialiseTaskLists+0x78>)
 800674a:	0018      	movs	r0, r3
 800674c:	f7fe fe9f 	bl	800548e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006750:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <prvInitialiseTaskLists+0x7c>)
 8006752:	0018      	movs	r0, r3
 8006754:	f7fe fe9b 	bl	800548e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006758:	4b0a      	ldr	r3, [pc, #40]	; (8006784 <prvInitialiseTaskLists+0x80>)
 800675a:	4a05      	ldr	r2, [pc, #20]	; (8006770 <prvInitialiseTaskLists+0x6c>)
 800675c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800675e:	4b0a      	ldr	r3, [pc, #40]	; (8006788 <prvInitialiseTaskLists+0x84>)
 8006760:	4a04      	ldr	r2, [pc, #16]	; (8006774 <prvInitialiseTaskLists+0x70>)
 8006762:	601a      	str	r2, [r3, #0]
}
 8006764:	46c0      	nop			; (mov r8, r8)
 8006766:	46bd      	mov	sp, r7
 8006768:	b002      	add	sp, #8
 800676a:	bd80      	pop	{r7, pc}
 800676c:	20000484 	.word	0x20000484
 8006770:	2000054c 	.word	0x2000054c
 8006774:	20000560 	.word	0x20000560
 8006778:	2000057c 	.word	0x2000057c
 800677c:	20000590 	.word	0x20000590
 8006780:	200005a8 	.word	0x200005a8
 8006784:	20000574 	.word	0x20000574
 8006788:	20000578 	.word	0x20000578

0800678c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006792:	e01a      	b.n	80067ca <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8006794:	f000 fe1c 	bl	80073d0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006798:	4b10      	ldr	r3, [pc, #64]	; (80067dc <prvCheckTasksWaitingTermination+0x50>)
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	3304      	adds	r3, #4
 80067a4:	0018      	movs	r0, r3
 80067a6:	f7fe fef3 	bl	8005590 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067aa:	4b0d      	ldr	r3, [pc, #52]	; (80067e0 <prvCheckTasksWaitingTermination+0x54>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	1e5a      	subs	r2, r3, #1
 80067b0:	4b0b      	ldr	r3, [pc, #44]	; (80067e0 <prvCheckTasksWaitingTermination+0x54>)
 80067b2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067b4:	4b0b      	ldr	r3, [pc, #44]	; (80067e4 <prvCheckTasksWaitingTermination+0x58>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	1e5a      	subs	r2, r3, #1
 80067ba:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <prvCheckTasksWaitingTermination+0x58>)
 80067bc:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80067be:	f000 fe19 	bl	80073f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	0018      	movs	r0, r3
 80067c6:	f000 f80f 	bl	80067e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067ca:	4b06      	ldr	r3, [pc, #24]	; (80067e4 <prvCheckTasksWaitingTermination+0x58>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1e0      	bne.n	8006794 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067d2:	46c0      	nop			; (mov r8, r8)
 80067d4:	46c0      	nop			; (mov r8, r8)
 80067d6:	46bd      	mov	sp, r7
 80067d8:	b002      	add	sp, #8
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	20000590 	.word	0x20000590
 80067e0:	200005bc 	.word	0x200005bc
 80067e4:	200005a4 	.word	0x200005a4

080067e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f4:	0018      	movs	r0, r3
 80067f6:	f000 ff2f 	bl	8007658 <vPortFree>
			vPortFree( pxTCB );
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	0018      	movs	r0, r3
 80067fe:	f000 ff2b 	bl	8007658 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006802:	46c0      	nop			; (mov r8, r8)
 8006804:	46bd      	mov	sp, r7
 8006806:	b002      	add	sp, #8
 8006808:	bd80      	pop	{r7, pc}
	...

0800680c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006812:	4b0b      	ldr	r3, [pc, #44]	; (8006840 <prvResetNextTaskUnblockTime+0x34>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d104      	bne.n	8006826 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800681c:	4b09      	ldr	r3, [pc, #36]	; (8006844 <prvResetNextTaskUnblockTime+0x38>)
 800681e:	2201      	movs	r2, #1
 8006820:	4252      	negs	r2, r2
 8006822:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006824:	e008      	b.n	8006838 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006826:	4b06      	ldr	r3, [pc, #24]	; (8006840 <prvResetNextTaskUnblockTime+0x34>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	4b03      	ldr	r3, [pc, #12]	; (8006844 <prvResetNextTaskUnblockTime+0x38>)
 8006836:	601a      	str	r2, [r3, #0]
}
 8006838:	46c0      	nop			; (mov r8, r8)
 800683a:	46bd      	mov	sp, r7
 800683c:	b002      	add	sp, #8
 800683e:	bd80      	pop	{r7, pc}
 8006840:	20000574 	.word	0x20000574
 8006844:	200005dc 	.word	0x200005dc

08006848 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800684e:	4b0a      	ldr	r3, [pc, #40]	; (8006878 <xTaskGetSchedulerState+0x30>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d102      	bne.n	800685c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006856:	2301      	movs	r3, #1
 8006858:	607b      	str	r3, [r7, #4]
 800685a:	e008      	b.n	800686e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800685c:	4b07      	ldr	r3, [pc, #28]	; (800687c <xTaskGetSchedulerState+0x34>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d102      	bne.n	800686a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006864:	2302      	movs	r3, #2
 8006866:	607b      	str	r3, [r7, #4]
 8006868:	e001      	b.n	800686e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800686a:	2300      	movs	r3, #0
 800686c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800686e:	687b      	ldr	r3, [r7, #4]
	}
 8006870:	0018      	movs	r0, r3
 8006872:	46bd      	mov	sp, r7
 8006874:	b002      	add	sp, #8
 8006876:	bd80      	pop	{r7, pc}
 8006878:	200005c8 	.word	0x200005c8
 800687c:	200005e4 	.word	0x200005e4

08006880 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800688c:	2300      	movs	r3, #0
 800688e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d044      	beq.n	8006920 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006896:	4b25      	ldr	r3, [pc, #148]	; (800692c <xTaskPriorityDisinherit+0xac>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	429a      	cmp	r2, r3
 800689e:	d001      	beq.n	80068a4 <xTaskPriorityDisinherit+0x24>
 80068a0:	b672      	cpsid	i
 80068a2:	e7fe      	b.n	80068a2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <xTaskPriorityDisinherit+0x30>
 80068ac:	b672      	cpsid	i
 80068ae:	e7fe      	b.n	80068ae <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b4:	1e5a      	subs	r2, r3, #1
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d02c      	beq.n	8006920 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d128      	bne.n	8006920 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	3304      	adds	r3, #4
 80068d2:	0018      	movs	r0, r3
 80068d4:	f7fe fe5c 	bl	8005590 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	220a      	movs	r2, #10
 80068e6:	1ad2      	subs	r2, r2, r3
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f0:	4b0f      	ldr	r3, [pc, #60]	; (8006930 <xTaskPriorityDisinherit+0xb0>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d903      	bls.n	8006900 <xTaskPriorityDisinherit+0x80>
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fc:	4b0c      	ldr	r3, [pc, #48]	; (8006930 <xTaskPriorityDisinherit+0xb0>)
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006904:	0013      	movs	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	189b      	adds	r3, r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4a09      	ldr	r2, [pc, #36]	; (8006934 <xTaskPriorityDisinherit+0xb4>)
 800690e:	189a      	adds	r2, r3, r2
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	3304      	adds	r3, #4
 8006914:	0019      	movs	r1, r3
 8006916:	0010      	movs	r0, r2
 8006918:	f7fe fde2 	bl	80054e0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800691c:	2301      	movs	r3, #1
 800691e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006920:	68fb      	ldr	r3, [r7, #12]
	}
 8006922:	0018      	movs	r0, r3
 8006924:	46bd      	mov	sp, r7
 8006926:	b004      	add	sp, #16
 8006928:	bd80      	pop	{r7, pc}
 800692a:	46c0      	nop			; (mov r8, r8)
 800692c:	20000480 	.word	0x20000480
 8006930:	200005c4 	.word	0x200005c4
 8006934:	20000484 	.word	0x20000484

08006938 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006946:	f000 fd43 	bl	80073d0 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800694a:	4b24      	ldr	r3, [pc, #144]	; (80069dc <xTaskNotifyWait+0xa4>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	225c      	movs	r2, #92	; 0x5c
 8006950:	5c9b      	ldrb	r3, [r3, r2]
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b02      	cmp	r3, #2
 8006956:	d015      	beq.n	8006984 <xTaskNotifyWait+0x4c>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006958:	4b20      	ldr	r3, [pc, #128]	; (80069dc <xTaskNotifyWait+0xa4>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800695e:	68f9      	ldr	r1, [r7, #12]
 8006960:	43c9      	mvns	r1, r1
 8006962:	400a      	ands	r2, r1
 8006964:	659a      	str	r2, [r3, #88]	; 0x58

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006966:	4b1d      	ldr	r3, [pc, #116]	; (80069dc <xTaskNotifyWait+0xa4>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	225c      	movs	r2, #92	; 0x5c
 800696c:	2101      	movs	r1, #1
 800696e:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d006      	beq.n	8006984 <xTaskNotifyWait+0x4c>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2101      	movs	r1, #1
 800697a:	0018      	movs	r0, r3
 800697c:	f000 f8e2 	bl	8006b44 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006980:	f000 fd16 	bl	80073b0 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006984:	f000 fd36 	bl	80073f4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8006988:	f000 fd22 	bl	80073d0 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d004      	beq.n	800699c <xTaskNotifyWait+0x64>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006992:	4b12      	ldr	r3, [pc, #72]	; (80069dc <xTaskNotifyWait+0xa4>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800699c:	4b0f      	ldr	r3, [pc, #60]	; (80069dc <xTaskNotifyWait+0xa4>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	225c      	movs	r2, #92	; 0x5c
 80069a2:	5c9b      	ldrb	r3, [r3, r2]
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d002      	beq.n	80069b0 <xTaskNotifyWait+0x78>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80069aa:	2300      	movs	r3, #0
 80069ac:	617b      	str	r3, [r7, #20]
 80069ae:	e008      	b.n	80069c2 <xTaskNotifyWait+0x8a>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80069b0:	4b0a      	ldr	r3, [pc, #40]	; (80069dc <xTaskNotifyWait+0xa4>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80069b6:	68b9      	ldr	r1, [r7, #8]
 80069b8:	43c9      	mvns	r1, r1
 80069ba:	400a      	ands	r2, r1
 80069bc:	659a      	str	r2, [r3, #88]	; 0x58
				xReturn = pdTRUE;
 80069be:	2301      	movs	r3, #1
 80069c0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069c2:	4b06      	ldr	r3, [pc, #24]	; (80069dc <xTaskNotifyWait+0xa4>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	225c      	movs	r2, #92	; 0x5c
 80069c8:	2100      	movs	r1, #0
 80069ca:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 80069cc:	f000 fd12 	bl	80073f4 <vPortExitCritical>

		return xReturn;
 80069d0:	697b      	ldr	r3, [r7, #20]
	}
 80069d2:	0018      	movs	r0, r3
 80069d4:	46bd      	mov	sp, r7
 80069d6:	b006      	add	sp, #24
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	46c0      	nop			; (mov r8, r8)
 80069dc:	20000480 	.word	0x20000480

080069e0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b088      	sub	sp, #32
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	603b      	str	r3, [r7, #0]
 80069ec:	1dfb      	adds	r3, r7, #7
 80069ee:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80069f0:	2301      	movs	r3, #1
 80069f2:	61fb      	str	r3, [r7, #28]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <xTaskGenericNotifyFromISR+0x1e>
 80069fa:	b672      	cpsid	i
 80069fc:	e7fe      	b.n	80069fc <xTaskGenericNotifyFromISR+0x1c>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	61bb      	str	r3, [r7, #24]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a02:	f000 fd0f 	bl	8007424 <ulSetInterruptMaskFromISR>
 8006a06:	0003      	movs	r3, r0
 8006a08:	617b      	str	r3, [r7, #20]
		{
			if( pulPreviousNotificationValue != NULL )
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d003      	beq.n	8006a18 <xTaskGenericNotifyFromISR+0x38>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006a18:	2313      	movs	r3, #19
 8006a1a:	18fb      	adds	r3, r7, r3
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	215c      	movs	r1, #92	; 0x5c
 8006a20:	5c52      	ldrb	r2, [r2, r1]
 8006a22:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	225c      	movs	r2, #92	; 0x5c
 8006a28:	2102      	movs	r1, #2
 8006a2a:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 8006a2c:	1dfb      	adds	r3, r7, #7
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	2b04      	cmp	r3, #4
 8006a32:	d821      	bhi.n	8006a78 <xTaskGenericNotifyFromISR+0x98>
 8006a34:	009a      	lsls	r2, r3, #2
 8006a36:	4b3c      	ldr	r3, [pc, #240]	; (8006b28 <xTaskGenericNotifyFromISR+0x148>)
 8006a38:	18d3      	adds	r3, r2, r3
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	431a      	orrs	r2, r3
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 8006a4a:	e01e      	b.n	8006a8a <xTaskGenericNotifyFromISR+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 8006a56:	e018      	b.n	8006a8a <xTaskGenericNotifyFromISR+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 8006a5e:	e014      	b.n	8006a8a <xTaskGenericNotifyFromISR+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006a60:	2313      	movs	r3, #19
 8006a62:	18fb      	adds	r3, r7, r3
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d003      	beq.n	8006a72 <xTaskGenericNotifyFromISR+0x92>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	659a      	str	r2, [r3, #88]	; 0x58
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006a70:	e00b      	b.n	8006a8a <xTaskGenericNotifyFromISR+0xaa>
						xReturn = pdFAIL;
 8006a72:	2300      	movs	r3, #0
 8006a74:	61fb      	str	r3, [r7, #28]
					break;
 8006a76:	e008      	b.n	8006a8a <xTaskGenericNotifyFromISR+0xaa>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	d003      	beq.n	8006a88 <xTaskGenericNotifyFromISR+0xa8>
 8006a80:	b672      	cpsid	i
 8006a82:	e7fe      	b.n	8006a82 <xTaskGenericNotifyFromISR+0xa2>
					break;
 8006a84:	46c0      	nop			; (mov r8, r8)
 8006a86:	e000      	b.n	8006a8a <xTaskGenericNotifyFromISR+0xaa>
					break;
 8006a88:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006a8a:	2313      	movs	r3, #19
 8006a8c:	18fb      	adds	r3, r7, r3
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d13f      	bne.n	8006b14 <xTaskGenericNotifyFromISR+0x134>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <xTaskGenericNotifyFromISR+0xc0>
 8006a9c:	b672      	cpsid	i
 8006a9e:	e7fe      	b.n	8006a9e <xTaskGenericNotifyFromISR+0xbe>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aa0:	4b22      	ldr	r3, [pc, #136]	; (8006b2c <xTaskGenericNotifyFromISR+0x14c>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d11d      	bne.n	8006ae4 <xTaskGenericNotifyFromISR+0x104>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	0018      	movs	r0, r3
 8006aae:	f7fe fd6f 	bl	8005590 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab6:	4b1e      	ldr	r3, [pc, #120]	; (8006b30 <xTaskGenericNotifyFromISR+0x150>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d903      	bls.n	8006ac6 <xTaskGenericNotifyFromISR+0xe6>
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac2:	4b1b      	ldr	r3, [pc, #108]	; (8006b30 <xTaskGenericNotifyFromISR+0x150>)
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aca:	0013      	movs	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	189b      	adds	r3, r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4a18      	ldr	r2, [pc, #96]	; (8006b34 <xTaskGenericNotifyFromISR+0x154>)
 8006ad4:	189a      	adds	r2, r3, r2
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	3304      	adds	r3, #4
 8006ada:	0019      	movs	r1, r3
 8006adc:	0010      	movs	r0, r2
 8006ade:	f7fe fcff 	bl	80054e0 <vListInsertEnd>
 8006ae2:	e007      	b.n	8006af4 <xTaskGenericNotifyFromISR+0x114>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	3318      	adds	r3, #24
 8006ae8:	001a      	movs	r2, r3
 8006aea:	4b13      	ldr	r3, [pc, #76]	; (8006b38 <xTaskGenericNotifyFromISR+0x158>)
 8006aec:	0011      	movs	r1, r2
 8006aee:	0018      	movs	r0, r3
 8006af0:	f7fe fcf6 	bl	80054e0 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af8:	4b10      	ldr	r3, [pc, #64]	; (8006b3c <xTaskGenericNotifyFromISR+0x15c>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d908      	bls.n	8006b14 <xTaskGenericNotifyFromISR+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <xTaskGenericNotifyFromISR+0x12e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006b0e:	4b0c      	ldr	r3, [pc, #48]	; (8006b40 <xTaskGenericNotifyFromISR+0x160>)
 8006b10:	2201      	movs	r2, #1
 8006b12:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	0018      	movs	r0, r3
 8006b18:	f000 fc8a 	bl	8007430 <vClearInterruptMaskFromISR>

		return xReturn;
 8006b1c:	69fb      	ldr	r3, [r7, #28]
	}
 8006b1e:	0018      	movs	r0, r3
 8006b20:	46bd      	mov	sp, r7
 8006b22:	b008      	add	sp, #32
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	46c0      	nop			; (mov r8, r8)
 8006b28:	08008938 	.word	0x08008938
 8006b2c:	200005e4 	.word	0x200005e4
 8006b30:	200005c4 	.word	0x200005c4
 8006b34:	20000484 	.word	0x20000484
 8006b38:	2000057c 	.word	0x2000057c
 8006b3c:	20000480 	.word	0x20000480
 8006b40:	200005d0 	.word	0x200005d0

08006b44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b4e:	4b21      	ldr	r3, [pc, #132]	; (8006bd4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b54:	4b20      	ldr	r3, [pc, #128]	; (8006bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3304      	adds	r3, #4
 8006b5a:	0018      	movs	r0, r3
 8006b5c:	f7fe fd18 	bl	8005590 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3301      	adds	r3, #1
 8006b64:	d10b      	bne.n	8006b7e <prvAddCurrentTaskToDelayedList+0x3a>
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d008      	beq.n	8006b7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b6c:	4b1a      	ldr	r3, [pc, #104]	; (8006bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	1d1a      	adds	r2, r3, #4
 8006b72:	4b1a      	ldr	r3, [pc, #104]	; (8006bdc <prvAddCurrentTaskToDelayedList+0x98>)
 8006b74:	0011      	movs	r1, r2
 8006b76:	0018      	movs	r0, r3
 8006b78:	f7fe fcb2 	bl	80054e0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b7c:	e026      	b.n	8006bcc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	18d3      	adds	r3, r2, r3
 8006b84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b86:	4b14      	ldr	r3, [pc, #80]	; (8006bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d209      	bcs.n	8006baa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b96:	4b12      	ldr	r3, [pc, #72]	; (8006be0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	4b0f      	ldr	r3, [pc, #60]	; (8006bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	0019      	movs	r1, r3
 8006ba2:	0010      	movs	r0, r2
 8006ba4:	f7fe fcbe 	bl	8005524 <vListInsert>
}
 8006ba8:	e010      	b.n	8006bcc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006baa:	4b0e      	ldr	r3, [pc, #56]	; (8006be4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	4b0a      	ldr	r3, [pc, #40]	; (8006bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	0019      	movs	r1, r3
 8006bb6:	0010      	movs	r0, r2
 8006bb8:	f7fe fcb4 	bl	8005524 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006bbc:	4b0a      	ldr	r3, [pc, #40]	; (8006be8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d202      	bcs.n	8006bcc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006bc6:	4b08      	ldr	r3, [pc, #32]	; (8006be8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	601a      	str	r2, [r3, #0]
}
 8006bcc:	46c0      	nop			; (mov r8, r8)
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	b004      	add	sp, #16
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	200005c0 	.word	0x200005c0
 8006bd8:	20000480 	.word	0x20000480
 8006bdc:	200005a8 	.word	0x200005a8
 8006be0:	20000578 	.word	0x20000578
 8006be4:	20000574 	.word	0x20000574
 8006be8:	200005dc 	.word	0x200005dc

08006bec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006bf6:	f000 faf5 	bl	80071e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006bfa:	4b0d      	ldr	r3, [pc, #52]	; (8006c30 <xTimerCreateTimerTask+0x44>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00c      	beq.n	8006c1c <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8006c02:	2380      	movs	r3, #128	; 0x80
 8006c04:	005a      	lsls	r2, r3, #1
 8006c06:	490b      	ldr	r1, [pc, #44]	; (8006c34 <xTimerCreateTimerTask+0x48>)
 8006c08:	480b      	ldr	r0, [pc, #44]	; (8006c38 <xTimerCreateTimerTask+0x4c>)
 8006c0a:	4b0c      	ldr	r3, [pc, #48]	; (8006c3c <xTimerCreateTimerTask+0x50>)
 8006c0c:	9301      	str	r3, [sp, #4]
 8006c0e:	2302      	movs	r3, #2
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	2300      	movs	r3, #0
 8006c14:	f7ff f8f3 	bl	8005dfe <xTaskCreate>
 8006c18:	0003      	movs	r3, r0
 8006c1a:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <xTimerCreateTimerTask+0x3a>
 8006c22:	b672      	cpsid	i
 8006c24:	e7fe      	b.n	8006c24 <xTimerCreateTimerTask+0x38>
	return xReturn;
 8006c26:	687b      	ldr	r3, [r7, #4]
}
 8006c28:	0018      	movs	r0, r3
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	b002      	add	sp, #8
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20000620 	.word	0x20000620
 8006c34:	08008834 	.word	0x08008834
 8006c38:	08006e09 	.word	0x08006e09
 8006c3c:	20000624 	.word	0x20000624

08006c40 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006c40:	b590      	push	{r4, r7, lr}
 8006c42:	b089      	sub	sp, #36	; 0x24
 8006c44:	af02      	add	r7, sp, #8
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006c4e:	202c      	movs	r0, #44	; 0x2c
 8006c50:	f000 fc56 	bl	8007500 <pvPortMalloc>
 8006c54:	0003      	movs	r3, r0
 8006c56:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00e      	beq.n	8006c7c <xTimerCreate+0x3c>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2228      	movs	r2, #40	; 0x28
 8006c62:	2100      	movs	r1, #0
 8006c64:	5499      	strb	r1, [r3, r2]
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006c66:	683c      	ldr	r4, [r7, #0]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	68b9      	ldr	r1, [r7, #8]
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	9301      	str	r3, [sp, #4]
 8006c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	0023      	movs	r3, r4
 8006c78:	f000 f805 	bl	8006c86 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006c7c:	697b      	ldr	r3, [r7, #20]
	}
 8006c7e:	0018      	movs	r0, r3
 8006c80:	46bd      	mov	sp, r7
 8006c82:	b007      	add	sp, #28
 8006c84:	bd90      	pop	{r4, r7, pc}

08006c86 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b084      	sub	sp, #16
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	60f8      	str	r0, [r7, #12]
 8006c8e:	60b9      	str	r1, [r7, #8]
 8006c90:	607a      	str	r2, [r7, #4]
 8006c92:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <prvInitialiseNewTimer+0x18>
 8006c9a:	b672      	cpsid	i
 8006c9c:	e7fe      	b.n	8006c9c <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d01e      	beq.n	8006ce2 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006ca4:	f000 fa9e 	bl	80071e4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	69ba      	ldr	r2, [r7, #24]
 8006cbe:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	f7fe fc00 	bl	80054ca <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d008      	beq.n	8006ce2 <prvInitialiseNewTimer+0x5c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	2228      	movs	r2, #40	; 0x28
 8006cd4:	5c9b      	ldrb	r3, [r3, r2]
 8006cd6:	2204      	movs	r2, #4
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	b2d9      	uxtb	r1, r3
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	2228      	movs	r2, #40	; 0x28
 8006ce0:	5499      	strb	r1, [r3, r2]
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006ce2:	46c0      	nop			; (mov r8, r8)
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	b004      	add	sp, #16
 8006ce8:	bd80      	pop	{r7, pc}
	...

08006cec <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006cec:	b590      	push	{r4, r7, lr}
 8006cee:	b089      	sub	sp, #36	; 0x24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
 8006cf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <xTimerGenericCommand+0x1c>
 8006d04:	b672      	cpsid	i
 8006d06:	e7fe      	b.n	8006d06 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d08:	4b1c      	ldr	r3, [pc, #112]	; (8006d7c <xTimerGenericCommand+0x90>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d030      	beq.n	8006d72 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d10:	2410      	movs	r4, #16
 8006d12:	193b      	adds	r3, r7, r4
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d18:	193b      	adds	r3, r7, r4
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d1e:	193b      	adds	r3, r7, r4
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2b05      	cmp	r3, #5
 8006d28:	dc19      	bgt.n	8006d5e <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d2a:	f7ff fd8d 	bl	8006848 <xTaskGetSchedulerState>
 8006d2e:	0003      	movs	r3, r0
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d109      	bne.n	8006d48 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d34:	4b11      	ldr	r3, [pc, #68]	; (8006d7c <xTimerGenericCommand+0x90>)
 8006d36:	6818      	ldr	r0, [r3, #0]
 8006d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d3a:	1939      	adds	r1, r7, r4
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	f7fe fcf8 	bl	8005732 <xQueueGenericSend>
 8006d42:	0003      	movs	r3, r0
 8006d44:	61fb      	str	r3, [r7, #28]
 8006d46:	e014      	b.n	8006d72 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d48:	4b0c      	ldr	r3, [pc, #48]	; (8006d7c <xTimerGenericCommand+0x90>)
 8006d4a:	6818      	ldr	r0, [r3, #0]
 8006d4c:	2310      	movs	r3, #16
 8006d4e:	18f9      	adds	r1, r7, r3
 8006d50:	2300      	movs	r3, #0
 8006d52:	2200      	movs	r2, #0
 8006d54:	f7fe fced 	bl	8005732 <xQueueGenericSend>
 8006d58:	0003      	movs	r3, r0
 8006d5a:	61fb      	str	r3, [r7, #28]
 8006d5c:	e009      	b.n	8006d72 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d5e:	4b07      	ldr	r3, [pc, #28]	; (8006d7c <xTimerGenericCommand+0x90>)
 8006d60:	6818      	ldr	r0, [r3, #0]
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	2310      	movs	r3, #16
 8006d66:	18f9      	adds	r1, r7, r3
 8006d68:	2300      	movs	r3, #0
 8006d6a:	f7fe fda6 	bl	80058ba <xQueueGenericSendFromISR>
 8006d6e:	0003      	movs	r3, r0
 8006d70:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d72:	69fb      	ldr	r3, [r7, #28]
}
 8006d74:	0018      	movs	r0, r3
 8006d76:	46bd      	mov	sp, r7
 8006d78:	b009      	add	sp, #36	; 0x24
 8006d7a:	bd90      	pop	{r4, r7, pc}
 8006d7c:	20000620 	.word	0x20000620

08006d80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af02      	add	r7, sp, #8
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d8a:	4b1e      	ldr	r3, [pc, #120]	; (8006e04 <prvProcessExpiredTimer+0x84>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	3304      	adds	r3, #4
 8006d98:	0018      	movs	r0, r3
 8006d9a:	f7fe fbf9 	bl	8005590 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2228      	movs	r2, #40	; 0x28
 8006da2:	5c9b      	ldrb	r3, [r3, r2]
 8006da4:	001a      	movs	r2, r3
 8006da6:	2304      	movs	r3, #4
 8006da8:	4013      	ands	r3, r2
 8006daa:	d019      	beq.n	8006de0 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	699a      	ldr	r2, [r3, #24]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	18d1      	adds	r1, r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f000 f8c3 	bl	8006f44 <prvInsertTimerInActiveList>
 8006dbe:	1e03      	subs	r3, r0, #0
 8006dc0:	d017      	beq.n	8006df2 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	2300      	movs	r3, #0
 8006dcc:	2100      	movs	r1, #0
 8006dce:	f7ff ff8d 	bl	8006cec <xTimerGenericCommand>
 8006dd2:	0003      	movs	r3, r0
 8006dd4:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10a      	bne.n	8006df2 <prvProcessExpiredTimer+0x72>
 8006ddc:	b672      	cpsid	i
 8006dde:	e7fe      	b.n	8006dde <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2228      	movs	r2, #40	; 0x28
 8006de4:	5c9b      	ldrb	r3, [r3, r2]
 8006de6:	2201      	movs	r2, #1
 8006de8:	4393      	bics	r3, r2
 8006dea:	b2d9      	uxtb	r1, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2228      	movs	r2, #40	; 0x28
 8006df0:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	0010      	movs	r0, r2
 8006dfa:	4798      	blx	r3
}
 8006dfc:	46c0      	nop			; (mov r8, r8)
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	b004      	add	sp, #16
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	20000618 	.word	0x20000618

08006e08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e10:	2308      	movs	r3, #8
 8006e12:	18fb      	adds	r3, r7, r3
 8006e14:	0018      	movs	r0, r3
 8006e16:	f000 f853 	bl	8006ec0 <prvGetNextExpireTime>
 8006e1a:	0003      	movs	r3, r0
 8006e1c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	0011      	movs	r1, r2
 8006e24:	0018      	movs	r0, r3
 8006e26:	f000 f803 	bl	8006e30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e2a:	f000 f8cd 	bl	8006fc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e2e:	e7ef      	b.n	8006e10 <prvTimerTask+0x8>

08006e30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e3a:	f7ff f981 	bl	8006140 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e3e:	2308      	movs	r3, #8
 8006e40:	18fb      	adds	r3, r7, r3
 8006e42:	0018      	movs	r0, r3
 8006e44:	f000 f85e 	bl	8006f04 <prvSampleTimeNow>
 8006e48:	0003      	movs	r3, r0
 8006e4a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d12b      	bne.n	8006eaa <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10c      	bne.n	8006e72 <prvProcessTimerOrBlockTask+0x42>
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d808      	bhi.n	8006e72 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8006e60:	f7ff f97a 	bl	8006158 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	0011      	movs	r1, r2
 8006e6a:	0018      	movs	r0, r3
 8006e6c:	f7ff ff88 	bl	8006d80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e70:	e01d      	b.n	8006eae <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d008      	beq.n	8006e8a <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e78:	4b0f      	ldr	r3, [pc, #60]	; (8006eb8 <prvProcessTimerOrBlockTask+0x88>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <prvProcessTimerOrBlockTask+0x56>
 8006e82:	2301      	movs	r3, #1
 8006e84:	e000      	b.n	8006e88 <prvProcessTimerOrBlockTask+0x58>
 8006e86:	2300      	movs	r3, #0
 8006e88:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e8a:	4b0c      	ldr	r3, [pc, #48]	; (8006ebc <prvProcessTimerOrBlockTask+0x8c>)
 8006e8c:	6818      	ldr	r0, [r3, #0]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	0019      	movs	r1, r3
 8006e98:	f7fe ff7e 	bl	8005d98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e9c:	f7ff f95c 	bl	8006158 <xTaskResumeAll>
 8006ea0:	1e03      	subs	r3, r0, #0
 8006ea2:	d104      	bne.n	8006eae <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8006ea4:	f000 fa84 	bl	80073b0 <vPortYield>
}
 8006ea8:	e001      	b.n	8006eae <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8006eaa:	f7ff f955 	bl	8006158 <xTaskResumeAll>
}
 8006eae:	46c0      	nop			; (mov r8, r8)
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	b004      	add	sp, #16
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	46c0      	nop			; (mov r8, r8)
 8006eb8:	2000061c 	.word	0x2000061c
 8006ebc:	20000620 	.word	0x20000620

08006ec0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ec8:	4b0d      	ldr	r3, [pc, #52]	; (8006f00 <prvGetNextExpireTime+0x40>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <prvGetNextExpireTime+0x16>
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	e000      	b.n	8006ed8 <prvGetNextExpireTime+0x18>
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d105      	bne.n	8006ef0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ee4:	4b06      	ldr	r3, [pc, #24]	; (8006f00 <prvGetNextExpireTime+0x40>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	60fb      	str	r3, [r7, #12]
 8006eee:	e001      	b.n	8006ef4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
}
 8006ef6:	0018      	movs	r0, r3
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	b004      	add	sp, #16
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	46c0      	nop			; (mov r8, r8)
 8006f00:	20000618 	.word	0x20000618

08006f04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f0c:	f7ff f9b0 	bl	8006270 <xTaskGetTickCount>
 8006f10:	0003      	movs	r3, r0
 8006f12:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f14:	4b0a      	ldr	r3, [pc, #40]	; (8006f40 <prvSampleTimeNow+0x3c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d205      	bcs.n	8006f2a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8006f1e:	f000 f903 	bl	8007128 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	e002      	b.n	8006f30 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f30:	4b03      	ldr	r3, [pc, #12]	; (8006f40 <prvSampleTimeNow+0x3c>)
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8006f36:	68fb      	ldr	r3, [r7, #12]
}
 8006f38:	0018      	movs	r0, r3
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	b004      	add	sp, #16
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	20000628 	.word	0x20000628

08006f44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
 8006f50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f52:	2300      	movs	r3, #0
 8006f54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d812      	bhi.n	8006f90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	1ad2      	subs	r2, r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d302      	bcc.n	8006f7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	e01b      	b.n	8006fb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f7e:	4b10      	ldr	r3, [pc, #64]	; (8006fc0 <prvInsertTimerInActiveList+0x7c>)
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3304      	adds	r3, #4
 8006f86:	0019      	movs	r1, r3
 8006f88:	0010      	movs	r0, r2
 8006f8a:	f7fe facb 	bl	8005524 <vListInsert>
 8006f8e:	e012      	b.n	8006fb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d206      	bcs.n	8006fa6 <prvInsertTimerInActiveList+0x62>
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d302      	bcc.n	8006fa6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	e007      	b.n	8006fb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fa6:	4b07      	ldr	r3, [pc, #28]	; (8006fc4 <prvInsertTimerInActiveList+0x80>)
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	3304      	adds	r3, #4
 8006fae:	0019      	movs	r1, r3
 8006fb0:	0010      	movs	r0, r2
 8006fb2:	f7fe fab7 	bl	8005524 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006fb6:	697b      	ldr	r3, [r7, #20]
}
 8006fb8:	0018      	movs	r0, r3
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	b006      	add	sp, #24
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	2000061c 	.word	0x2000061c
 8006fc4:	20000618 	.word	0x20000618

08006fc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006fc8:	b590      	push	{r4, r7, lr}
 8006fca:	b08b      	sub	sp, #44	; 0x2c
 8006fcc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fce:	e097      	b.n	8007100 <prvProcessReceivedCommands+0x138>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006fd0:	2208      	movs	r2, #8
 8006fd2:	18bb      	adds	r3, r7, r2
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	da00      	bge.n	8006fdc <prvProcessReceivedCommands+0x14>
 8006fda:	e091      	b.n	8007100 <prvProcessReceivedCommands+0x138>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006fdc:	18bb      	adds	r3, r7, r2
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d004      	beq.n	8006ff4 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	3304      	adds	r3, #4
 8006fee:	0018      	movs	r0, r3
 8006ff0:	f7fe face 	bl	8005590 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ff4:	1d3b      	adds	r3, r7, #4
 8006ff6:	0018      	movs	r0, r3
 8006ff8:	f7ff ff84 	bl	8006f04 <prvSampleTimeNow>
 8006ffc:	0003      	movs	r3, r0
 8006ffe:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
 8007000:	2308      	movs	r3, #8
 8007002:	18fb      	adds	r3, r7, r3
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b09      	cmp	r3, #9
 8007008:	d900      	bls.n	800700c <prvProcessReceivedCommands+0x44>
 800700a:	e078      	b.n	80070fe <prvProcessReceivedCommands+0x136>
 800700c:	009a      	lsls	r2, r3, #2
 800700e:	4b44      	ldr	r3, [pc, #272]	; (8007120 <prvProcessReceivedCommands+0x158>)
 8007010:	18d3      	adds	r3, r2, r3
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	2228      	movs	r2, #40	; 0x28
 800701a:	5c9b      	ldrb	r3, [r3, r2]
 800701c:	2201      	movs	r2, #1
 800701e:	4313      	orrs	r3, r2
 8007020:	b2d9      	uxtb	r1, r3
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	2228      	movs	r2, #40	; 0x28
 8007026:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007028:	2408      	movs	r4, #8
 800702a:	193b      	adds	r3, r7, r4
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	18d1      	adds	r1, r2, r3
 8007034:	193b      	adds	r3, r7, r4
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	69f8      	ldr	r0, [r7, #28]
 800703c:	f7ff ff82 	bl	8006f44 <prvInsertTimerInActiveList>
 8007040:	1e03      	subs	r3, r0, #0
 8007042:	d05d      	beq.n	8007100 <prvProcessReceivedCommands+0x138>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	69fa      	ldr	r2, [r7, #28]
 800704a:	0010      	movs	r0, r2
 800704c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	2228      	movs	r2, #40	; 0x28
 8007052:	5c9b      	ldrb	r3, [r3, r2]
 8007054:	001a      	movs	r2, r3
 8007056:	2304      	movs	r3, #4
 8007058:	4013      	ands	r3, r2
 800705a:	d051      	beq.n	8007100 <prvProcessReceivedCommands+0x138>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800705c:	193b      	adds	r3, r7, r4
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	18d2      	adds	r2, r2, r3
 8007066:	69f8      	ldr	r0, [r7, #28]
 8007068:	2300      	movs	r3, #0
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	2300      	movs	r3, #0
 800706e:	2100      	movs	r1, #0
 8007070:	f7ff fe3c 	bl	8006cec <xTimerGenericCommand>
 8007074:	0003      	movs	r3, r0
 8007076:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d140      	bne.n	8007100 <prvProcessReceivedCommands+0x138>
 800707e:	b672      	cpsid	i
 8007080:	e7fe      	b.n	8007080 <prvProcessReceivedCommands+0xb8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	2228      	movs	r2, #40	; 0x28
 8007086:	5c9b      	ldrb	r3, [r3, r2]
 8007088:	2201      	movs	r2, #1
 800708a:	4393      	bics	r3, r2
 800708c:	b2d9      	uxtb	r1, r3
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	2228      	movs	r2, #40	; 0x28
 8007092:	5499      	strb	r1, [r3, r2]
					break;
 8007094:	e034      	b.n	8007100 <prvProcessReceivedCommands+0x138>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	2228      	movs	r2, #40	; 0x28
 800709a:	5c9b      	ldrb	r3, [r3, r2]
 800709c:	2201      	movs	r2, #1
 800709e:	4313      	orrs	r3, r2
 80070a0:	b2d9      	uxtb	r1, r3
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	2228      	movs	r2, #40	; 0x28
 80070a6:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80070a8:	2308      	movs	r3, #8
 80070aa:	18fb      	adds	r3, r7, r3
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <prvProcessReceivedCommands+0xf6>
 80070ba:	b672      	cpsid	i
 80070bc:	e7fe      	b.n	80070bc <prvProcessReceivedCommands+0xf4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	699a      	ldr	r2, [r3, #24]
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	18d1      	adds	r1, r2, r3
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	69ba      	ldr	r2, [r7, #24]
 80070ca:	69f8      	ldr	r0, [r7, #28]
 80070cc:	f7ff ff3a 	bl	8006f44 <prvInsertTimerInActiveList>
					break;
 80070d0:	e016      	b.n	8007100 <prvProcessReceivedCommands+0x138>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	2228      	movs	r2, #40	; 0x28
 80070d6:	5c9b      	ldrb	r3, [r3, r2]
 80070d8:	001a      	movs	r2, r3
 80070da:	2302      	movs	r3, #2
 80070dc:	4013      	ands	r3, r2
 80070de:	d104      	bne.n	80070ea <prvProcessReceivedCommands+0x122>
						{
							vPortFree( pxTimer );
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	0018      	movs	r0, r3
 80070e4:	f000 fab8 	bl	8007658 <vPortFree>
 80070e8:	e00a      	b.n	8007100 <prvProcessReceivedCommands+0x138>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	2228      	movs	r2, #40	; 0x28
 80070ee:	5c9b      	ldrb	r3, [r3, r2]
 80070f0:	2201      	movs	r2, #1
 80070f2:	4393      	bics	r3, r2
 80070f4:	b2d9      	uxtb	r1, r3
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	2228      	movs	r2, #40	; 0x28
 80070fa:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80070fc:	e000      	b.n	8007100 <prvProcessReceivedCommands+0x138>

				default	:
					/* Don't expect to get here. */
					break;
 80070fe:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007100:	4b08      	ldr	r3, [pc, #32]	; (8007124 <prvProcessReceivedCommands+0x15c>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2208      	movs	r2, #8
 8007106:	18b9      	adds	r1, r7, r2
 8007108:	2200      	movs	r2, #0
 800710a:	0018      	movs	r0, r3
 800710c:	f7fe fc49 	bl	80059a2 <xQueueReceive>
 8007110:	1e03      	subs	r3, r0, #0
 8007112:	d000      	beq.n	8007116 <prvProcessReceivedCommands+0x14e>
 8007114:	e75c      	b.n	8006fd0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007116:	46c0      	nop			; (mov r8, r8)
 8007118:	46c0      	nop			; (mov r8, r8)
 800711a:	46bd      	mov	sp, r7
 800711c:	b009      	add	sp, #36	; 0x24
 800711e:	bd90      	pop	{r4, r7, pc}
 8007120:	0800894c 	.word	0x0800894c
 8007124:	20000620 	.word	0x20000620

08007128 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b088      	sub	sp, #32
 800712c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800712e:	e041      	b.n	80071b4 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007130:	4b2a      	ldr	r3, [pc, #168]	; (80071dc <prvSwitchTimerLists+0xb4>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800713a:	4b28      	ldr	r3, [pc, #160]	; (80071dc <prvSwitchTimerLists+0xb4>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3304      	adds	r3, #4
 8007148:	0018      	movs	r0, r3
 800714a:	f7fe fa21 	bl	8005590 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	0010      	movs	r0, r2
 8007156:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2228      	movs	r2, #40	; 0x28
 800715c:	5c9b      	ldrb	r3, [r3, r2]
 800715e:	001a      	movs	r2, r3
 8007160:	2304      	movs	r3, #4
 8007162:	4013      	ands	r3, r2
 8007164:	d026      	beq.n	80071b4 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	18d3      	adds	r3, r2, r3
 800716e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	429a      	cmp	r2, r3
 8007176:	d90e      	bls.n	8007196 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007184:	4b15      	ldr	r3, [pc, #84]	; (80071dc <prvSwitchTimerLists+0xb4>)
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	3304      	adds	r3, #4
 800718c:	0019      	movs	r1, r3
 800718e:	0010      	movs	r0, r2
 8007190:	f7fe f9c8 	bl	8005524 <vListInsert>
 8007194:	e00e      	b.n	80071b4 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	2300      	movs	r3, #0
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	2300      	movs	r3, #0
 80071a0:	2100      	movs	r1, #0
 80071a2:	f7ff fda3 	bl	8006cec <xTimerGenericCommand>
 80071a6:	0003      	movs	r3, r0
 80071a8:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <prvSwitchTimerLists+0x8c>
 80071b0:	b672      	cpsid	i
 80071b2:	e7fe      	b.n	80071b2 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071b4:	4b09      	ldr	r3, [pc, #36]	; (80071dc <prvSwitchTimerLists+0xb4>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1b8      	bne.n	8007130 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80071be:	4b07      	ldr	r3, [pc, #28]	; (80071dc <prvSwitchTimerLists+0xb4>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80071c4:	4b06      	ldr	r3, [pc, #24]	; (80071e0 <prvSwitchTimerLists+0xb8>)
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	4b04      	ldr	r3, [pc, #16]	; (80071dc <prvSwitchTimerLists+0xb4>)
 80071ca:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80071cc:	4b04      	ldr	r3, [pc, #16]	; (80071e0 <prvSwitchTimerLists+0xb8>)
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	601a      	str	r2, [r3, #0]
}
 80071d2:	46c0      	nop			; (mov r8, r8)
 80071d4:	46bd      	mov	sp, r7
 80071d6:	b006      	add	sp, #24
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	46c0      	nop			; (mov r8, r8)
 80071dc:	20000618 	.word	0x20000618
 80071e0:	2000061c 	.word	0x2000061c

080071e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80071e8:	f000 f8f2 	bl	80073d0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80071ec:	4b14      	ldr	r3, [pc, #80]	; (8007240 <prvCheckForValidListAndQueue+0x5c>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d120      	bne.n	8007236 <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
 80071f4:	4b13      	ldr	r3, [pc, #76]	; (8007244 <prvCheckForValidListAndQueue+0x60>)
 80071f6:	0018      	movs	r0, r3
 80071f8:	f7fe f949 	bl	800548e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80071fc:	4b12      	ldr	r3, [pc, #72]	; (8007248 <prvCheckForValidListAndQueue+0x64>)
 80071fe:	0018      	movs	r0, r3
 8007200:	f7fe f945 	bl	800548e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007204:	4b11      	ldr	r3, [pc, #68]	; (800724c <prvCheckForValidListAndQueue+0x68>)
 8007206:	4a0f      	ldr	r2, [pc, #60]	; (8007244 <prvCheckForValidListAndQueue+0x60>)
 8007208:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800720a:	4b11      	ldr	r3, [pc, #68]	; (8007250 <prvCheckForValidListAndQueue+0x6c>)
 800720c:	4a0e      	ldr	r2, [pc, #56]	; (8007248 <prvCheckForValidListAndQueue+0x64>)
 800720e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007210:	2200      	movs	r2, #0
 8007212:	210c      	movs	r1, #12
 8007214:	200a      	movs	r0, #10
 8007216:	f7fe fa37 	bl	8005688 <xQueueGenericCreate>
 800721a:	0002      	movs	r2, r0
 800721c:	4b08      	ldr	r3, [pc, #32]	; (8007240 <prvCheckForValidListAndQueue+0x5c>)
 800721e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007220:	4b07      	ldr	r3, [pc, #28]	; (8007240 <prvCheckForValidListAndQueue+0x5c>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d006      	beq.n	8007236 <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007228:	4b05      	ldr	r3, [pc, #20]	; (8007240 <prvCheckForValidListAndQueue+0x5c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a09      	ldr	r2, [pc, #36]	; (8007254 <prvCheckForValidListAndQueue+0x70>)
 800722e:	0011      	movs	r1, r2
 8007230:	0018      	movs	r0, r3
 8007232:	f7fe fd89 	bl	8005d48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007236:	f000 f8dd 	bl	80073f4 <vPortExitCritical>
}
 800723a:	46c0      	nop			; (mov r8, r8)
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	20000620 	.word	0x20000620
 8007244:	200005f0 	.word	0x200005f0
 8007248:	20000604 	.word	0x20000604
 800724c:	20000618 	.word	0x20000618
 8007250:	2000061c 	.word	0x2000061c
 8007254:	0800883c 	.word	0x0800883c

08007258 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	60bb      	str	r3, [r7, #8]

	configASSERT( xTimer );
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <xTimerIsTimerActive+0x16>
 800726a:	b672      	cpsid	i
 800726c:	e7fe      	b.n	800726c <xTimerIsTimerActive+0x14>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800726e:	f000 f8af 	bl	80073d0 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	2228      	movs	r2, #40	; 0x28
 8007276:	5c9b      	ldrb	r3, [r3, r2]
 8007278:	001a      	movs	r2, r3
 800727a:	2301      	movs	r3, #1
 800727c:	4013      	ands	r3, r2
 800727e:	d102      	bne.n	8007286 <xTimerIsTimerActive+0x2e>
		{
			xReturn = pdFALSE;
 8007280:	2300      	movs	r3, #0
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	e001      	b.n	800728a <xTimerIsTimerActive+0x32>
		}
		else
		{
			xReturn = pdTRUE;
 8007286:	2301      	movs	r3, #1
 8007288:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800728a:	f000 f8b3 	bl	80073f4 <vPortExitCritical>

	return xReturn;
 800728e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8007290:	0018      	movs	r0, r3
 8007292:	46bd      	mov	sp, r7
 8007294:	b004      	add	sp, #16
 8007296:	bd80      	pop	{r7, pc}

08007298 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	3b04      	subs	r3, #4
 80072a8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2280      	movs	r2, #128	; 0x80
 80072ae:	0452      	lsls	r2, r2, #17
 80072b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	3b04      	subs	r3, #4
 80072b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3b04      	subs	r3, #4
 80072c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072c4:	4a08      	ldr	r2, [pc, #32]	; (80072e8 <pxPortInitialiseStack+0x50>)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	3b14      	subs	r3, #20
 80072ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	3b20      	subs	r3, #32
 80072da:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072dc:	68fb      	ldr	r3, [r7, #12]
}
 80072de:	0018      	movs	r0, r3
 80072e0:	46bd      	mov	sp, r7
 80072e2:	b004      	add	sp, #16
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	46c0      	nop			; (mov r8, r8)
 80072e8:	080072ed 	.word	0x080072ed

080072ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80072f2:	2300      	movs	r3, #0
 80072f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80072f6:	4b08      	ldr	r3, [pc, #32]	; (8007318 <prvTaskExitError+0x2c>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3301      	adds	r3, #1
 80072fc:	d001      	beq.n	8007302 <prvTaskExitError+0x16>
 80072fe:	b672      	cpsid	i
 8007300:	e7fe      	b.n	8007300 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8007302:	b672      	cpsid	i
	while( ulDummy == 0 )
 8007304:	46c0      	nop			; (mov r8, r8)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d0fc      	beq.n	8007306 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800730c:	46c0      	nop			; (mov r8, r8)
 800730e:	46c0      	nop			; (mov r8, r8)
 8007310:	46bd      	mov	sp, r7
 8007312:	b002      	add	sp, #8
 8007314:	bd80      	pop	{r7, pc}
 8007316:	46c0      	nop			; (mov r8, r8)
 8007318:	2000000c 	.word	0x2000000c

0800731c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800731c:	b580      	push	{r7, lr}
 800731e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8007320:	46c0      	nop			; (mov r8, r8)
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007330 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007330:	4a0b      	ldr	r2, [pc, #44]	; (8007360 <pxCurrentTCBConst2>)
 8007332:	6813      	ldr	r3, [r2, #0]
 8007334:	6818      	ldr	r0, [r3, #0]
 8007336:	3020      	adds	r0, #32
 8007338:	f380 8809 	msr	PSP, r0
 800733c:	2002      	movs	r0, #2
 800733e:	f380 8814 	msr	CONTROL, r0
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007348:	46ae      	mov	lr, r5
 800734a:	bc08      	pop	{r3}
 800734c:	bc04      	pop	{r2}
 800734e:	b662      	cpsie	i
 8007350:	4718      	bx	r3
 8007352:	46c0      	nop			; (mov r8, r8)
 8007354:	46c0      	nop			; (mov r8, r8)
 8007356:	46c0      	nop			; (mov r8, r8)
 8007358:	46c0      	nop			; (mov r8, r8)
 800735a:	46c0      	nop			; (mov r8, r8)
 800735c:	46c0      	nop			; (mov r8, r8)
 800735e:	46c0      	nop			; (mov r8, r8)

08007360 <pxCurrentTCBConst2>:
 8007360:	20000480 	.word	0x20000480
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8007364:	46c0      	nop			; (mov r8, r8)
 8007366:	46c0      	nop			; (mov r8, r8)

08007368 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800736c:	4b0e      	ldr	r3, [pc, #56]	; (80073a8 <xPortStartScheduler+0x40>)
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	4b0d      	ldr	r3, [pc, #52]	; (80073a8 <xPortStartScheduler+0x40>)
 8007372:	21ff      	movs	r1, #255	; 0xff
 8007374:	0409      	lsls	r1, r1, #16
 8007376:	430a      	orrs	r2, r1
 8007378:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800737a:	4b0b      	ldr	r3, [pc, #44]	; (80073a8 <xPortStartScheduler+0x40>)
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <xPortStartScheduler+0x40>)
 8007380:	21ff      	movs	r1, #255	; 0xff
 8007382:	0609      	lsls	r1, r1, #24
 8007384:	430a      	orrs	r2, r1
 8007386:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007388:	f000 f898 	bl	80074bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800738c:	4b07      	ldr	r3, [pc, #28]	; (80073ac <xPortStartScheduler+0x44>)
 800738e:	2200      	movs	r2, #0
 8007390:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8007392:	f7ff ffcd 	bl	8007330 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007396:	f7ff f829 	bl	80063ec <vTaskSwitchContext>
	prvTaskExitError();
 800739a:	f7ff ffa7 	bl	80072ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	0018      	movs	r0, r3
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	46c0      	nop			; (mov r8, r8)
 80073a8:	e000ed20 	.word	0xe000ed20
 80073ac:	2000000c 	.word	0x2000000c

080073b0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80073b4:	4b05      	ldr	r3, [pc, #20]	; (80073cc <vPortYield+0x1c>)
 80073b6:	2280      	movs	r2, #128	; 0x80
 80073b8:	0552      	lsls	r2, r2, #21
 80073ba:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80073bc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80073c0:	f3bf 8f6f 	isb	sy
}
 80073c4:	46c0      	nop			; (mov r8, r8)
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	46c0      	nop			; (mov r8, r8)
 80073cc:	e000ed04 	.word	0xe000ed04

080073d0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80073d4:	b672      	cpsid	i
	uxCriticalNesting++;
 80073d6:	4b06      	ldr	r3, [pc, #24]	; (80073f0 <vPortEnterCritical+0x20>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	4b04      	ldr	r3, [pc, #16]	; (80073f0 <vPortEnterCritical+0x20>)
 80073de:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80073e0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80073e4:	f3bf 8f6f 	isb	sy
}
 80073e8:	46c0      	nop			; (mov r8, r8)
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	46c0      	nop			; (mov r8, r8)
 80073f0:	2000000c 	.word	0x2000000c

080073f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80073f8:	4b09      	ldr	r3, [pc, #36]	; (8007420 <vPortExitCritical+0x2c>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <vPortExitCritical+0x10>
 8007400:	b672      	cpsid	i
 8007402:	e7fe      	b.n	8007402 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8007404:	4b06      	ldr	r3, [pc, #24]	; (8007420 <vPortExitCritical+0x2c>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	1e5a      	subs	r2, r3, #1
 800740a:	4b05      	ldr	r3, [pc, #20]	; (8007420 <vPortExitCritical+0x2c>)
 800740c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800740e:	4b04      	ldr	r3, [pc, #16]	; (8007420 <vPortExitCritical+0x2c>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d100      	bne.n	8007418 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8007416:	b662      	cpsie	i
	}
}
 8007418:	46c0      	nop			; (mov r8, r8)
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	46c0      	nop			; (mov r8, r8)
 8007420:	2000000c 	.word	0x2000000c

08007424 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007424:	f3ef 8010 	mrs	r0, PRIMASK
 8007428:	b672      	cpsid	i
 800742a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800742c:	46c0      	nop			; (mov r8, r8)
 800742e:	0018      	movs	r0, r3

08007430 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007430:	f380 8810 	msr	PRIMASK, r0
 8007434:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8007436:	46c0      	nop			; (mov r8, r8)
	...

08007440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007440:	f3ef 8009 	mrs	r0, PSP
 8007444:	4b0e      	ldr	r3, [pc, #56]	; (8007480 <pxCurrentTCBConst>)
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	3820      	subs	r0, #32
 800744a:	6010      	str	r0, [r2, #0]
 800744c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800744e:	4644      	mov	r4, r8
 8007450:	464d      	mov	r5, r9
 8007452:	4656      	mov	r6, sl
 8007454:	465f      	mov	r7, fp
 8007456:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007458:	b508      	push	{r3, lr}
 800745a:	b672      	cpsid	i
 800745c:	f7fe ffc6 	bl	80063ec <vTaskSwitchContext>
 8007460:	b662      	cpsie	i
 8007462:	bc0c      	pop	{r2, r3}
 8007464:	6811      	ldr	r1, [r2, #0]
 8007466:	6808      	ldr	r0, [r1, #0]
 8007468:	3010      	adds	r0, #16
 800746a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800746c:	46a0      	mov	r8, r4
 800746e:	46a9      	mov	r9, r5
 8007470:	46b2      	mov	sl, r6
 8007472:	46bb      	mov	fp, r7
 8007474:	f380 8809 	msr	PSP, r0
 8007478:	3820      	subs	r0, #32
 800747a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800747c:	4718      	bx	r3
 800747e:	46c0      	nop			; (mov r8, r8)

08007480 <pxCurrentTCBConst>:
 8007480:	20000480 	.word	0x20000480
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8007484:	46c0      	nop			; (mov r8, r8)
 8007486:	46c0      	nop			; (mov r8, r8)

08007488 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800748e:	f7ff ffc9 	bl	8007424 <ulSetInterruptMaskFromISR>
 8007492:	0003      	movs	r3, r0
 8007494:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007496:	f7fe fef9 	bl	800628c <xTaskIncrementTick>
 800749a:	1e03      	subs	r3, r0, #0
 800749c:	d003      	beq.n	80074a6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800749e:	4b06      	ldr	r3, [pc, #24]	; (80074b8 <SysTick_Handler+0x30>)
 80074a0:	2280      	movs	r2, #128	; 0x80
 80074a2:	0552      	lsls	r2, r2, #21
 80074a4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	0018      	movs	r0, r3
 80074aa:	f7ff ffc1 	bl	8007430 <vClearInterruptMaskFromISR>
}
 80074ae:	46c0      	nop			; (mov r8, r8)
 80074b0:	46bd      	mov	sp, r7
 80074b2:	b002      	add	sp, #8
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	46c0      	nop			; (mov r8, r8)
 80074b8:	e000ed04 	.word	0xe000ed04

080074bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074c0:	4b0b      	ldr	r3, [pc, #44]	; (80074f0 <vPortSetupTimerInterrupt+0x34>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80074c6:	4b0b      	ldr	r3, [pc, #44]	; (80074f4 <vPortSetupTimerInterrupt+0x38>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80074cc:	4b0a      	ldr	r3, [pc, #40]	; (80074f8 <vPortSetupTimerInterrupt+0x3c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	22fa      	movs	r2, #250	; 0xfa
 80074d2:	0091      	lsls	r1, r2, #2
 80074d4:	0018      	movs	r0, r3
 80074d6:	f7f8 fe21 	bl	800011c <__udivsi3>
 80074da:	0003      	movs	r3, r0
 80074dc:	001a      	movs	r2, r3
 80074de:	4b07      	ldr	r3, [pc, #28]	; (80074fc <vPortSetupTimerInterrupt+0x40>)
 80074e0:	3a01      	subs	r2, #1
 80074e2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80074e4:	4b02      	ldr	r3, [pc, #8]	; (80074f0 <vPortSetupTimerInterrupt+0x34>)
 80074e6:	2207      	movs	r2, #7
 80074e8:	601a      	str	r2, [r3, #0]
}
 80074ea:	46c0      	nop			; (mov r8, r8)
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	e000e010 	.word	0xe000e010
 80074f4:	e000e018 	.word	0xe000e018
 80074f8:	20000000 	.word	0x20000000
 80074fc:	e000e014 	.word	0xe000e014

08007500 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007508:	2300      	movs	r3, #0
 800750a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800750c:	f7fe fe18 	bl	8006140 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007510:	4b4b      	ldr	r3, [pc, #300]	; (8007640 <pvPortMalloc+0x140>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007518:	f000 f8ec 	bl	80076f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800751c:	4b49      	ldr	r3, [pc, #292]	; (8007644 <pvPortMalloc+0x144>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	4013      	ands	r3, r2
 8007524:	d000      	beq.n	8007528 <pvPortMalloc+0x28>
 8007526:	e07e      	b.n	8007626 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d012      	beq.n	8007554 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800752e:	2208      	movs	r2, #8
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	189b      	adds	r3, r3, r2
 8007534:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2207      	movs	r2, #7
 800753a:	4013      	ands	r3, r2
 800753c:	d00a      	beq.n	8007554 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2207      	movs	r2, #7
 8007542:	4393      	bics	r3, r2
 8007544:	3308      	adds	r3, #8
 8007546:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2207      	movs	r2, #7
 800754c:	4013      	ands	r3, r2
 800754e:	d001      	beq.n	8007554 <pvPortMalloc+0x54>
 8007550:	b672      	cpsid	i
 8007552:	e7fe      	b.n	8007552 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d065      	beq.n	8007626 <pvPortMalloc+0x126>
 800755a:	4b3b      	ldr	r3, [pc, #236]	; (8007648 <pvPortMalloc+0x148>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	429a      	cmp	r2, r3
 8007562:	d860      	bhi.n	8007626 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007564:	4b39      	ldr	r3, [pc, #228]	; (800764c <pvPortMalloc+0x14c>)
 8007566:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007568:	4b38      	ldr	r3, [pc, #224]	; (800764c <pvPortMalloc+0x14c>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800756e:	e004      	b.n	800757a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	429a      	cmp	r2, r3
 8007582:	d903      	bls.n	800758c <pvPortMalloc+0x8c>
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1f1      	bne.n	8007570 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800758c:	4b2c      	ldr	r3, [pc, #176]	; (8007640 <pvPortMalloc+0x140>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	429a      	cmp	r2, r3
 8007594:	d047      	beq.n	8007626 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2208      	movs	r2, #8
 800759c:	189b      	adds	r3, r3, r2
 800759e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	1ad2      	subs	r2, r2, r3
 80075b0:	2308      	movs	r3, #8
 80075b2:	005b      	lsls	r3, r3, #1
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d916      	bls.n	80075e6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	18d3      	adds	r3, r2, r3
 80075be:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	2207      	movs	r2, #7
 80075c4:	4013      	ands	r3, r2
 80075c6:	d001      	beq.n	80075cc <pvPortMalloc+0xcc>
 80075c8:	b672      	cpsid	i
 80075ca:	e7fe      	b.n	80075ca <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	1ad2      	subs	r2, r2, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	0018      	movs	r0, r3
 80075e2:	f000 f8e7 	bl	80077b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075e6:	4b18      	ldr	r3, [pc, #96]	; (8007648 <pvPortMalloc+0x148>)
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	1ad2      	subs	r2, r2, r3
 80075f0:	4b15      	ldr	r3, [pc, #84]	; (8007648 <pvPortMalloc+0x148>)
 80075f2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075f4:	4b14      	ldr	r3, [pc, #80]	; (8007648 <pvPortMalloc+0x148>)
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	4b15      	ldr	r3, [pc, #84]	; (8007650 <pvPortMalloc+0x150>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d203      	bcs.n	8007608 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007600:	4b11      	ldr	r3, [pc, #68]	; (8007648 <pvPortMalloc+0x148>)
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	4b12      	ldr	r3, [pc, #72]	; (8007650 <pvPortMalloc+0x150>)
 8007606:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	4b0d      	ldr	r3, [pc, #52]	; (8007644 <pvPortMalloc+0x144>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	431a      	orrs	r2, r3
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800761c:	4b0d      	ldr	r3, [pc, #52]	; (8007654 <pvPortMalloc+0x154>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	1c5a      	adds	r2, r3, #1
 8007622:	4b0c      	ldr	r3, [pc, #48]	; (8007654 <pvPortMalloc+0x154>)
 8007624:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007626:	f7fe fd97 	bl	8006158 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2207      	movs	r2, #7
 800762e:	4013      	ands	r3, r2
 8007630:	d001      	beq.n	8007636 <pvPortMalloc+0x136>
 8007632:	b672      	cpsid	i
 8007634:	e7fe      	b.n	8007634 <pvPortMalloc+0x134>
	return pvReturn;
 8007636:	68fb      	ldr	r3, [r7, #12]
}
 8007638:	0018      	movs	r0, r3
 800763a:	46bd      	mov	sp, r7
 800763c:	b006      	add	sp, #24
 800763e:	bd80      	pop	{r7, pc}
 8007640:	200040cc 	.word	0x200040cc
 8007644:	200040e0 	.word	0x200040e0
 8007648:	200040d0 	.word	0x200040d0
 800764c:	200040c4 	.word	0x200040c4
 8007650:	200040d4 	.word	0x200040d4
 8007654:	200040d8 	.word	0x200040d8

08007658 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d03a      	beq.n	80076e0 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800766a:	2308      	movs	r3, #8
 800766c:	425b      	negs	r3, r3
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	18d3      	adds	r3, r2, r3
 8007672:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	4b1a      	ldr	r3, [pc, #104]	; (80076e8 <vPortFree+0x90>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4013      	ands	r3, r2
 8007682:	d101      	bne.n	8007688 <vPortFree+0x30>
 8007684:	b672      	cpsid	i
 8007686:	e7fe      	b.n	8007686 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <vPortFree+0x3c>
 8007690:	b672      	cpsid	i
 8007692:	e7fe      	b.n	8007692 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	685a      	ldr	r2, [r3, #4]
 8007698:	4b13      	ldr	r3, [pc, #76]	; (80076e8 <vPortFree+0x90>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4013      	ands	r3, r2
 800769e:	d01f      	beq.n	80076e0 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d11b      	bne.n	80076e0 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	4b0e      	ldr	r3, [pc, #56]	; (80076e8 <vPortFree+0x90>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	43db      	mvns	r3, r3
 80076b2:	401a      	ands	r2, r3
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80076b8:	f7fe fd42 	bl	8006140 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	4b0a      	ldr	r3, [pc, #40]	; (80076ec <vPortFree+0x94>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	18d2      	adds	r2, r2, r3
 80076c6:	4b09      	ldr	r3, [pc, #36]	; (80076ec <vPortFree+0x94>)
 80076c8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	0018      	movs	r0, r3
 80076ce:	f000 f871 	bl	80077b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80076d2:	4b07      	ldr	r3, [pc, #28]	; (80076f0 <vPortFree+0x98>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	4b05      	ldr	r3, [pc, #20]	; (80076f0 <vPortFree+0x98>)
 80076da:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 80076dc:	f7fe fd3c 	bl	8006158 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80076e0:	46c0      	nop			; (mov r8, r8)
 80076e2:	46bd      	mov	sp, r7
 80076e4:	b004      	add	sp, #16
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	200040e0 	.word	0x200040e0
 80076ec:	200040d0 	.word	0x200040d0
 80076f0:	200040dc 	.word	0x200040dc

080076f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80076fa:	4b27      	ldr	r3, [pc, #156]	; (8007798 <prvHeapInit+0xa4>)
 80076fc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80076fe:	4b27      	ldr	r3, [pc, #156]	; (800779c <prvHeapInit+0xa8>)
 8007700:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2207      	movs	r2, #7
 8007706:	4013      	ands	r3, r2
 8007708:	d00c      	beq.n	8007724 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	3307      	adds	r3, #7
 800770e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2207      	movs	r2, #7
 8007714:	4393      	bics	r3, r2
 8007716:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	1ad2      	subs	r2, r2, r3
 800771e:	4b1f      	ldr	r3, [pc, #124]	; (800779c <prvHeapInit+0xa8>)
 8007720:	18d3      	adds	r3, r2, r3
 8007722:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007728:	4b1d      	ldr	r3, [pc, #116]	; (80077a0 <prvHeapInit+0xac>)
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800772e:	4b1c      	ldr	r3, [pc, #112]	; (80077a0 <prvHeapInit+0xac>)
 8007730:	2200      	movs	r2, #0
 8007732:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	18d3      	adds	r3, r2, r3
 800773a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800773c:	2208      	movs	r2, #8
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	1a9b      	subs	r3, r3, r2
 8007742:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2207      	movs	r2, #7
 8007748:	4393      	bics	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	4b15      	ldr	r3, [pc, #84]	; (80077a4 <prvHeapInit+0xb0>)
 8007750:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8007752:	4b14      	ldr	r3, [pc, #80]	; (80077a4 <prvHeapInit+0xb0>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2200      	movs	r2, #0
 8007758:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800775a:	4b12      	ldr	r3, [pc, #72]	; (80077a4 <prvHeapInit+0xb0>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2200      	movs	r2, #0
 8007760:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	1ad2      	subs	r2, r2, r3
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007770:	4b0c      	ldr	r3, [pc, #48]	; (80077a4 <prvHeapInit+0xb0>)
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	4b0a      	ldr	r3, [pc, #40]	; (80077a8 <prvHeapInit+0xb4>)
 800777e:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	4b09      	ldr	r3, [pc, #36]	; (80077ac <prvHeapInit+0xb8>)
 8007786:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007788:	4b09      	ldr	r3, [pc, #36]	; (80077b0 <prvHeapInit+0xbc>)
 800778a:	2280      	movs	r2, #128	; 0x80
 800778c:	0612      	lsls	r2, r2, #24
 800778e:	601a      	str	r2, [r3, #0]
}
 8007790:	46c0      	nop			; (mov r8, r8)
 8007792:	46bd      	mov	sp, r7
 8007794:	b004      	add	sp, #16
 8007796:	bd80      	pop	{r7, pc}
 8007798:	00003a98 	.word	0x00003a98
 800779c:	2000062c 	.word	0x2000062c
 80077a0:	200040c4 	.word	0x200040c4
 80077a4:	200040cc 	.word	0x200040cc
 80077a8:	200040d4 	.word	0x200040d4
 80077ac:	200040d0 	.word	0x200040d0
 80077b0:	200040e0 	.word	0x200040e0

080077b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077bc:	4b27      	ldr	r3, [pc, #156]	; (800785c <prvInsertBlockIntoFreeList+0xa8>)
 80077be:	60fb      	str	r3, [r7, #12]
 80077c0:	e002      	b.n	80077c8 <prvInsertBlockIntoFreeList+0x14>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	60fb      	str	r3, [r7, #12]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d8f7      	bhi.n	80077c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	18d3      	adds	r3, r2, r3
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d108      	bne.n	80077f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	18d2      	adds	r2, r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	18d2      	adds	r2, r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	429a      	cmp	r2, r3
 8007808:	d118      	bne.n	800783c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	4b14      	ldr	r3, [pc, #80]	; (8007860 <prvInsertBlockIntoFreeList+0xac>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	429a      	cmp	r2, r3
 8007814:	d00d      	beq.n	8007832 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	18d2      	adds	r2, r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	e008      	b.n	8007844 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007832:	4b0b      	ldr	r3, [pc, #44]	; (8007860 <prvInsertBlockIntoFreeList+0xac>)
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	e003      	b.n	8007844 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	429a      	cmp	r2, r3
 800784a:	d002      	beq.n	8007852 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007852:	46c0      	nop			; (mov r8, r8)
 8007854:	46bd      	mov	sp, r7
 8007856:	b004      	add	sp, #16
 8007858:	bd80      	pop	{r7, pc}
 800785a:	46c0      	nop			; (mov r8, r8)
 800785c:	200040c4 	.word	0x200040c4
 8007860:	200040cc 	.word	0x200040cc

08007864 <std>:
 8007864:	2300      	movs	r3, #0
 8007866:	b510      	push	{r4, lr}
 8007868:	0004      	movs	r4, r0
 800786a:	6003      	str	r3, [r0, #0]
 800786c:	6043      	str	r3, [r0, #4]
 800786e:	6083      	str	r3, [r0, #8]
 8007870:	8181      	strh	r1, [r0, #12]
 8007872:	6643      	str	r3, [r0, #100]	; 0x64
 8007874:	0019      	movs	r1, r3
 8007876:	81c2      	strh	r2, [r0, #14]
 8007878:	6103      	str	r3, [r0, #16]
 800787a:	6143      	str	r3, [r0, #20]
 800787c:	6183      	str	r3, [r0, #24]
 800787e:	2208      	movs	r2, #8
 8007880:	305c      	adds	r0, #92	; 0x5c
 8007882:	f000 f8fd 	bl	8007a80 <memset>
 8007886:	4b05      	ldr	r3, [pc, #20]	; (800789c <std+0x38>)
 8007888:	6224      	str	r4, [r4, #32]
 800788a:	6263      	str	r3, [r4, #36]	; 0x24
 800788c:	4b04      	ldr	r3, [pc, #16]	; (80078a0 <std+0x3c>)
 800788e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007890:	4b04      	ldr	r3, [pc, #16]	; (80078a4 <std+0x40>)
 8007892:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007894:	4b04      	ldr	r3, [pc, #16]	; (80078a8 <std+0x44>)
 8007896:	6323      	str	r3, [r4, #48]	; 0x30
 8007898:	bd10      	pop	{r4, pc}
 800789a:	46c0      	nop			; (mov r8, r8)
 800789c:	080079e9 	.word	0x080079e9
 80078a0:	08007a11 	.word	0x08007a11
 80078a4:	08007a49 	.word	0x08007a49
 80078a8:	08007a75 	.word	0x08007a75

080078ac <stdio_exit_handler>:
 80078ac:	b510      	push	{r4, lr}
 80078ae:	4a03      	ldr	r2, [pc, #12]	; (80078bc <stdio_exit_handler+0x10>)
 80078b0:	4903      	ldr	r1, [pc, #12]	; (80078c0 <stdio_exit_handler+0x14>)
 80078b2:	4804      	ldr	r0, [pc, #16]	; (80078c4 <stdio_exit_handler+0x18>)
 80078b4:	f000 f86c 	bl	8007990 <_fwalk_sglue>
 80078b8:	bd10      	pop	{r4, pc}
 80078ba:	46c0      	nop			; (mov r8, r8)
 80078bc:	20000010 	.word	0x20000010
 80078c0:	08008431 	.word	0x08008431
 80078c4:	2000001c 	.word	0x2000001c

080078c8 <cleanup_stdio>:
 80078c8:	6841      	ldr	r1, [r0, #4]
 80078ca:	4b0b      	ldr	r3, [pc, #44]	; (80078f8 <cleanup_stdio+0x30>)
 80078cc:	b510      	push	{r4, lr}
 80078ce:	0004      	movs	r4, r0
 80078d0:	4299      	cmp	r1, r3
 80078d2:	d001      	beq.n	80078d8 <cleanup_stdio+0x10>
 80078d4:	f000 fdac 	bl	8008430 <_fflush_r>
 80078d8:	68a1      	ldr	r1, [r4, #8]
 80078da:	4b08      	ldr	r3, [pc, #32]	; (80078fc <cleanup_stdio+0x34>)
 80078dc:	4299      	cmp	r1, r3
 80078de:	d002      	beq.n	80078e6 <cleanup_stdio+0x1e>
 80078e0:	0020      	movs	r0, r4
 80078e2:	f000 fda5 	bl	8008430 <_fflush_r>
 80078e6:	68e1      	ldr	r1, [r4, #12]
 80078e8:	4b05      	ldr	r3, [pc, #20]	; (8007900 <cleanup_stdio+0x38>)
 80078ea:	4299      	cmp	r1, r3
 80078ec:	d002      	beq.n	80078f4 <cleanup_stdio+0x2c>
 80078ee:	0020      	movs	r0, r4
 80078f0:	f000 fd9e 	bl	8008430 <_fflush_r>
 80078f4:	bd10      	pop	{r4, pc}
 80078f6:	46c0      	nop			; (mov r8, r8)
 80078f8:	200040e4 	.word	0x200040e4
 80078fc:	2000414c 	.word	0x2000414c
 8007900:	200041b4 	.word	0x200041b4

08007904 <global_stdio_init.part.0>:
 8007904:	b510      	push	{r4, lr}
 8007906:	4b09      	ldr	r3, [pc, #36]	; (800792c <global_stdio_init.part.0+0x28>)
 8007908:	4a09      	ldr	r2, [pc, #36]	; (8007930 <global_stdio_init.part.0+0x2c>)
 800790a:	2104      	movs	r1, #4
 800790c:	601a      	str	r2, [r3, #0]
 800790e:	4809      	ldr	r0, [pc, #36]	; (8007934 <global_stdio_init.part.0+0x30>)
 8007910:	2200      	movs	r2, #0
 8007912:	f7ff ffa7 	bl	8007864 <std>
 8007916:	2201      	movs	r2, #1
 8007918:	2109      	movs	r1, #9
 800791a:	4807      	ldr	r0, [pc, #28]	; (8007938 <global_stdio_init.part.0+0x34>)
 800791c:	f7ff ffa2 	bl	8007864 <std>
 8007920:	2202      	movs	r2, #2
 8007922:	2112      	movs	r1, #18
 8007924:	4805      	ldr	r0, [pc, #20]	; (800793c <global_stdio_init.part.0+0x38>)
 8007926:	f7ff ff9d 	bl	8007864 <std>
 800792a:	bd10      	pop	{r4, pc}
 800792c:	2000421c 	.word	0x2000421c
 8007930:	080078ad 	.word	0x080078ad
 8007934:	200040e4 	.word	0x200040e4
 8007938:	2000414c 	.word	0x2000414c
 800793c:	200041b4 	.word	0x200041b4

08007940 <__sfp_lock_acquire>:
 8007940:	b510      	push	{r4, lr}
 8007942:	4802      	ldr	r0, [pc, #8]	; (800794c <__sfp_lock_acquire+0xc>)
 8007944:	f000 f91c 	bl	8007b80 <__retarget_lock_acquire_recursive>
 8007948:	bd10      	pop	{r4, pc}
 800794a:	46c0      	nop			; (mov r8, r8)
 800794c:	20004225 	.word	0x20004225

08007950 <__sfp_lock_release>:
 8007950:	b510      	push	{r4, lr}
 8007952:	4802      	ldr	r0, [pc, #8]	; (800795c <__sfp_lock_release+0xc>)
 8007954:	f000 f915 	bl	8007b82 <__retarget_lock_release_recursive>
 8007958:	bd10      	pop	{r4, pc}
 800795a:	46c0      	nop			; (mov r8, r8)
 800795c:	20004225 	.word	0x20004225

08007960 <__sinit>:
 8007960:	b510      	push	{r4, lr}
 8007962:	0004      	movs	r4, r0
 8007964:	f7ff ffec 	bl	8007940 <__sfp_lock_acquire>
 8007968:	6a23      	ldr	r3, [r4, #32]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d002      	beq.n	8007974 <__sinit+0x14>
 800796e:	f7ff ffef 	bl	8007950 <__sfp_lock_release>
 8007972:	bd10      	pop	{r4, pc}
 8007974:	4b04      	ldr	r3, [pc, #16]	; (8007988 <__sinit+0x28>)
 8007976:	6223      	str	r3, [r4, #32]
 8007978:	4b04      	ldr	r3, [pc, #16]	; (800798c <__sinit+0x2c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1f6      	bne.n	800796e <__sinit+0xe>
 8007980:	f7ff ffc0 	bl	8007904 <global_stdio_init.part.0>
 8007984:	e7f3      	b.n	800796e <__sinit+0xe>
 8007986:	46c0      	nop			; (mov r8, r8)
 8007988:	080078c9 	.word	0x080078c9
 800798c:	2000421c 	.word	0x2000421c

08007990 <_fwalk_sglue>:
 8007990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007992:	0014      	movs	r4, r2
 8007994:	2600      	movs	r6, #0
 8007996:	9000      	str	r0, [sp, #0]
 8007998:	9101      	str	r1, [sp, #4]
 800799a:	68a5      	ldr	r5, [r4, #8]
 800799c:	6867      	ldr	r7, [r4, #4]
 800799e:	3f01      	subs	r7, #1
 80079a0:	d504      	bpl.n	80079ac <_fwalk_sglue+0x1c>
 80079a2:	6824      	ldr	r4, [r4, #0]
 80079a4:	2c00      	cmp	r4, #0
 80079a6:	d1f8      	bne.n	800799a <_fwalk_sglue+0xa>
 80079a8:	0030      	movs	r0, r6
 80079aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079ac:	89ab      	ldrh	r3, [r5, #12]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d908      	bls.n	80079c4 <_fwalk_sglue+0x34>
 80079b2:	220e      	movs	r2, #14
 80079b4:	5eab      	ldrsh	r3, [r5, r2]
 80079b6:	3301      	adds	r3, #1
 80079b8:	d004      	beq.n	80079c4 <_fwalk_sglue+0x34>
 80079ba:	0029      	movs	r1, r5
 80079bc:	9800      	ldr	r0, [sp, #0]
 80079be:	9b01      	ldr	r3, [sp, #4]
 80079c0:	4798      	blx	r3
 80079c2:	4306      	orrs	r6, r0
 80079c4:	3568      	adds	r5, #104	; 0x68
 80079c6:	e7ea      	b.n	800799e <_fwalk_sglue+0xe>

080079c8 <iprintf>:
 80079c8:	b40f      	push	{r0, r1, r2, r3}
 80079ca:	b507      	push	{r0, r1, r2, lr}
 80079cc:	4905      	ldr	r1, [pc, #20]	; (80079e4 <iprintf+0x1c>)
 80079ce:	ab04      	add	r3, sp, #16
 80079d0:	6808      	ldr	r0, [r1, #0]
 80079d2:	cb04      	ldmia	r3!, {r2}
 80079d4:	6881      	ldr	r1, [r0, #8]
 80079d6:	9301      	str	r3, [sp, #4]
 80079d8:	f000 fa04 	bl	8007de4 <_vfiprintf_r>
 80079dc:	b003      	add	sp, #12
 80079de:	bc08      	pop	{r3}
 80079e0:	b004      	add	sp, #16
 80079e2:	4718      	bx	r3
 80079e4:	20000068 	.word	0x20000068

080079e8 <__sread>:
 80079e8:	b570      	push	{r4, r5, r6, lr}
 80079ea:	000c      	movs	r4, r1
 80079ec:	250e      	movs	r5, #14
 80079ee:	5f49      	ldrsh	r1, [r1, r5]
 80079f0:	f000 f874 	bl	8007adc <_read_r>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	db03      	blt.n	8007a00 <__sread+0x18>
 80079f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80079fa:	181b      	adds	r3, r3, r0
 80079fc:	6563      	str	r3, [r4, #84]	; 0x54
 80079fe:	bd70      	pop	{r4, r5, r6, pc}
 8007a00:	89a3      	ldrh	r3, [r4, #12]
 8007a02:	4a02      	ldr	r2, [pc, #8]	; (8007a0c <__sread+0x24>)
 8007a04:	4013      	ands	r3, r2
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	e7f9      	b.n	80079fe <__sread+0x16>
 8007a0a:	46c0      	nop			; (mov r8, r8)
 8007a0c:	ffffefff 	.word	0xffffefff

08007a10 <__swrite>:
 8007a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a12:	001f      	movs	r7, r3
 8007a14:	898b      	ldrh	r3, [r1, #12]
 8007a16:	0005      	movs	r5, r0
 8007a18:	000c      	movs	r4, r1
 8007a1a:	0016      	movs	r6, r2
 8007a1c:	05db      	lsls	r3, r3, #23
 8007a1e:	d505      	bpl.n	8007a2c <__swrite+0x1c>
 8007a20:	230e      	movs	r3, #14
 8007a22:	5ec9      	ldrsh	r1, [r1, r3]
 8007a24:	2200      	movs	r2, #0
 8007a26:	2302      	movs	r3, #2
 8007a28:	f000 f844 	bl	8007ab4 <_lseek_r>
 8007a2c:	89a3      	ldrh	r3, [r4, #12]
 8007a2e:	4a05      	ldr	r2, [pc, #20]	; (8007a44 <__swrite+0x34>)
 8007a30:	0028      	movs	r0, r5
 8007a32:	4013      	ands	r3, r2
 8007a34:	81a3      	strh	r3, [r4, #12]
 8007a36:	0032      	movs	r2, r6
 8007a38:	230e      	movs	r3, #14
 8007a3a:	5ee1      	ldrsh	r1, [r4, r3]
 8007a3c:	003b      	movs	r3, r7
 8007a3e:	f000 f861 	bl	8007b04 <_write_r>
 8007a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a44:	ffffefff 	.word	0xffffefff

08007a48 <__sseek>:
 8007a48:	b570      	push	{r4, r5, r6, lr}
 8007a4a:	000c      	movs	r4, r1
 8007a4c:	250e      	movs	r5, #14
 8007a4e:	5f49      	ldrsh	r1, [r1, r5]
 8007a50:	f000 f830 	bl	8007ab4 <_lseek_r>
 8007a54:	89a3      	ldrh	r3, [r4, #12]
 8007a56:	1c42      	adds	r2, r0, #1
 8007a58:	d103      	bne.n	8007a62 <__sseek+0x1a>
 8007a5a:	4a05      	ldr	r2, [pc, #20]	; (8007a70 <__sseek+0x28>)
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	81a3      	strh	r3, [r4, #12]
 8007a60:	bd70      	pop	{r4, r5, r6, pc}
 8007a62:	2280      	movs	r2, #128	; 0x80
 8007a64:	0152      	lsls	r2, r2, #5
 8007a66:	4313      	orrs	r3, r2
 8007a68:	81a3      	strh	r3, [r4, #12]
 8007a6a:	6560      	str	r0, [r4, #84]	; 0x54
 8007a6c:	e7f8      	b.n	8007a60 <__sseek+0x18>
 8007a6e:	46c0      	nop			; (mov r8, r8)
 8007a70:	ffffefff 	.word	0xffffefff

08007a74 <__sclose>:
 8007a74:	b510      	push	{r4, lr}
 8007a76:	230e      	movs	r3, #14
 8007a78:	5ec9      	ldrsh	r1, [r1, r3]
 8007a7a:	f000 f809 	bl	8007a90 <_close_r>
 8007a7e:	bd10      	pop	{r4, pc}

08007a80 <memset>:
 8007a80:	0003      	movs	r3, r0
 8007a82:	1882      	adds	r2, r0, r2
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d100      	bne.n	8007a8a <memset+0xa>
 8007a88:	4770      	bx	lr
 8007a8a:	7019      	strb	r1, [r3, #0]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	e7f9      	b.n	8007a84 <memset+0x4>

08007a90 <_close_r>:
 8007a90:	2300      	movs	r3, #0
 8007a92:	b570      	push	{r4, r5, r6, lr}
 8007a94:	4d06      	ldr	r5, [pc, #24]	; (8007ab0 <_close_r+0x20>)
 8007a96:	0004      	movs	r4, r0
 8007a98:	0008      	movs	r0, r1
 8007a9a:	602b      	str	r3, [r5, #0]
 8007a9c:	f7f9 f917 	bl	8000cce <_close>
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	d103      	bne.n	8007aac <_close_r+0x1c>
 8007aa4:	682b      	ldr	r3, [r5, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d000      	beq.n	8007aac <_close_r+0x1c>
 8007aaa:	6023      	str	r3, [r4, #0]
 8007aac:	bd70      	pop	{r4, r5, r6, pc}
 8007aae:	46c0      	nop			; (mov r8, r8)
 8007ab0:	20004220 	.word	0x20004220

08007ab4 <_lseek_r>:
 8007ab4:	b570      	push	{r4, r5, r6, lr}
 8007ab6:	0004      	movs	r4, r0
 8007ab8:	0008      	movs	r0, r1
 8007aba:	0011      	movs	r1, r2
 8007abc:	001a      	movs	r2, r3
 8007abe:	2300      	movs	r3, #0
 8007ac0:	4d05      	ldr	r5, [pc, #20]	; (8007ad8 <_lseek_r+0x24>)
 8007ac2:	602b      	str	r3, [r5, #0]
 8007ac4:	f7f9 f924 	bl	8000d10 <_lseek>
 8007ac8:	1c43      	adds	r3, r0, #1
 8007aca:	d103      	bne.n	8007ad4 <_lseek_r+0x20>
 8007acc:	682b      	ldr	r3, [r5, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d000      	beq.n	8007ad4 <_lseek_r+0x20>
 8007ad2:	6023      	str	r3, [r4, #0]
 8007ad4:	bd70      	pop	{r4, r5, r6, pc}
 8007ad6:	46c0      	nop			; (mov r8, r8)
 8007ad8:	20004220 	.word	0x20004220

08007adc <_read_r>:
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	0004      	movs	r4, r0
 8007ae0:	0008      	movs	r0, r1
 8007ae2:	0011      	movs	r1, r2
 8007ae4:	001a      	movs	r2, r3
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	4d05      	ldr	r5, [pc, #20]	; (8007b00 <_read_r+0x24>)
 8007aea:	602b      	str	r3, [r5, #0]
 8007aec:	f7f9 f8b6 	bl	8000c5c <_read>
 8007af0:	1c43      	adds	r3, r0, #1
 8007af2:	d103      	bne.n	8007afc <_read_r+0x20>
 8007af4:	682b      	ldr	r3, [r5, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d000      	beq.n	8007afc <_read_r+0x20>
 8007afa:	6023      	str	r3, [r4, #0]
 8007afc:	bd70      	pop	{r4, r5, r6, pc}
 8007afe:	46c0      	nop			; (mov r8, r8)
 8007b00:	20004220 	.word	0x20004220

08007b04 <_write_r>:
 8007b04:	b570      	push	{r4, r5, r6, lr}
 8007b06:	0004      	movs	r4, r0
 8007b08:	0008      	movs	r0, r1
 8007b0a:	0011      	movs	r1, r2
 8007b0c:	001a      	movs	r2, r3
 8007b0e:	2300      	movs	r3, #0
 8007b10:	4d05      	ldr	r5, [pc, #20]	; (8007b28 <_write_r+0x24>)
 8007b12:	602b      	str	r3, [r5, #0]
 8007b14:	f7f9 f8bf 	bl	8000c96 <_write>
 8007b18:	1c43      	adds	r3, r0, #1
 8007b1a:	d103      	bne.n	8007b24 <_write_r+0x20>
 8007b1c:	682b      	ldr	r3, [r5, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d000      	beq.n	8007b24 <_write_r+0x20>
 8007b22:	6023      	str	r3, [r4, #0]
 8007b24:	bd70      	pop	{r4, r5, r6, pc}
 8007b26:	46c0      	nop			; (mov r8, r8)
 8007b28:	20004220 	.word	0x20004220

08007b2c <__errno>:
 8007b2c:	4b01      	ldr	r3, [pc, #4]	; (8007b34 <__errno+0x8>)
 8007b2e:	6818      	ldr	r0, [r3, #0]
 8007b30:	4770      	bx	lr
 8007b32:	46c0      	nop			; (mov r8, r8)
 8007b34:	20000068 	.word	0x20000068

08007b38 <__libc_init_array>:
 8007b38:	b570      	push	{r4, r5, r6, lr}
 8007b3a:	2600      	movs	r6, #0
 8007b3c:	4c0c      	ldr	r4, [pc, #48]	; (8007b70 <__libc_init_array+0x38>)
 8007b3e:	4d0d      	ldr	r5, [pc, #52]	; (8007b74 <__libc_init_array+0x3c>)
 8007b40:	1b64      	subs	r4, r4, r5
 8007b42:	10a4      	asrs	r4, r4, #2
 8007b44:	42a6      	cmp	r6, r4
 8007b46:	d109      	bne.n	8007b5c <__libc_init_array+0x24>
 8007b48:	2600      	movs	r6, #0
 8007b4a:	f000 fdeb 	bl	8008724 <_init>
 8007b4e:	4c0a      	ldr	r4, [pc, #40]	; (8007b78 <__libc_init_array+0x40>)
 8007b50:	4d0a      	ldr	r5, [pc, #40]	; (8007b7c <__libc_init_array+0x44>)
 8007b52:	1b64      	subs	r4, r4, r5
 8007b54:	10a4      	asrs	r4, r4, #2
 8007b56:	42a6      	cmp	r6, r4
 8007b58:	d105      	bne.n	8007b66 <__libc_init_array+0x2e>
 8007b5a:	bd70      	pop	{r4, r5, r6, pc}
 8007b5c:	00b3      	lsls	r3, r6, #2
 8007b5e:	58eb      	ldr	r3, [r5, r3]
 8007b60:	4798      	blx	r3
 8007b62:	3601      	adds	r6, #1
 8007b64:	e7ee      	b.n	8007b44 <__libc_init_array+0xc>
 8007b66:	00b3      	lsls	r3, r6, #2
 8007b68:	58eb      	ldr	r3, [r5, r3]
 8007b6a:	4798      	blx	r3
 8007b6c:	3601      	adds	r6, #1
 8007b6e:	e7f2      	b.n	8007b56 <__libc_init_array+0x1e>
 8007b70:	080089a8 	.word	0x080089a8
 8007b74:	080089a8 	.word	0x080089a8
 8007b78:	080089ac 	.word	0x080089ac
 8007b7c:	080089a8 	.word	0x080089a8

08007b80 <__retarget_lock_acquire_recursive>:
 8007b80:	4770      	bx	lr

08007b82 <__retarget_lock_release_recursive>:
 8007b82:	4770      	bx	lr

08007b84 <memcpy>:
 8007b84:	2300      	movs	r3, #0
 8007b86:	b510      	push	{r4, lr}
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d100      	bne.n	8007b8e <memcpy+0xa>
 8007b8c:	bd10      	pop	{r4, pc}
 8007b8e:	5ccc      	ldrb	r4, [r1, r3]
 8007b90:	54c4      	strb	r4, [r0, r3]
 8007b92:	3301      	adds	r3, #1
 8007b94:	e7f8      	b.n	8007b88 <memcpy+0x4>
	...

08007b98 <_free_r>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	0005      	movs	r5, r0
 8007b9c:	2900      	cmp	r1, #0
 8007b9e:	d010      	beq.n	8007bc2 <_free_r+0x2a>
 8007ba0:	1f0c      	subs	r4, r1, #4
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	da00      	bge.n	8007baa <_free_r+0x12>
 8007ba8:	18e4      	adds	r4, r4, r3
 8007baa:	0028      	movs	r0, r5
 8007bac:	f000 f8e2 	bl	8007d74 <__malloc_lock>
 8007bb0:	4a1d      	ldr	r2, [pc, #116]	; (8007c28 <_free_r+0x90>)
 8007bb2:	6813      	ldr	r3, [r2, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d105      	bne.n	8007bc4 <_free_r+0x2c>
 8007bb8:	6063      	str	r3, [r4, #4]
 8007bba:	6014      	str	r4, [r2, #0]
 8007bbc:	0028      	movs	r0, r5
 8007bbe:	f000 f8e1 	bl	8007d84 <__malloc_unlock>
 8007bc2:	bd70      	pop	{r4, r5, r6, pc}
 8007bc4:	42a3      	cmp	r3, r4
 8007bc6:	d908      	bls.n	8007bda <_free_r+0x42>
 8007bc8:	6820      	ldr	r0, [r4, #0]
 8007bca:	1821      	adds	r1, r4, r0
 8007bcc:	428b      	cmp	r3, r1
 8007bce:	d1f3      	bne.n	8007bb8 <_free_r+0x20>
 8007bd0:	6819      	ldr	r1, [r3, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	1809      	adds	r1, r1, r0
 8007bd6:	6021      	str	r1, [r4, #0]
 8007bd8:	e7ee      	b.n	8007bb8 <_free_r+0x20>
 8007bda:	001a      	movs	r2, r3
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <_free_r+0x4e>
 8007be2:	42a3      	cmp	r3, r4
 8007be4:	d9f9      	bls.n	8007bda <_free_r+0x42>
 8007be6:	6811      	ldr	r1, [r2, #0]
 8007be8:	1850      	adds	r0, r2, r1
 8007bea:	42a0      	cmp	r0, r4
 8007bec:	d10b      	bne.n	8007c06 <_free_r+0x6e>
 8007bee:	6820      	ldr	r0, [r4, #0]
 8007bf0:	1809      	adds	r1, r1, r0
 8007bf2:	1850      	adds	r0, r2, r1
 8007bf4:	6011      	str	r1, [r2, #0]
 8007bf6:	4283      	cmp	r3, r0
 8007bf8:	d1e0      	bne.n	8007bbc <_free_r+0x24>
 8007bfa:	6818      	ldr	r0, [r3, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	1841      	adds	r1, r0, r1
 8007c00:	6011      	str	r1, [r2, #0]
 8007c02:	6053      	str	r3, [r2, #4]
 8007c04:	e7da      	b.n	8007bbc <_free_r+0x24>
 8007c06:	42a0      	cmp	r0, r4
 8007c08:	d902      	bls.n	8007c10 <_free_r+0x78>
 8007c0a:	230c      	movs	r3, #12
 8007c0c:	602b      	str	r3, [r5, #0]
 8007c0e:	e7d5      	b.n	8007bbc <_free_r+0x24>
 8007c10:	6820      	ldr	r0, [r4, #0]
 8007c12:	1821      	adds	r1, r4, r0
 8007c14:	428b      	cmp	r3, r1
 8007c16:	d103      	bne.n	8007c20 <_free_r+0x88>
 8007c18:	6819      	ldr	r1, [r3, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	1809      	adds	r1, r1, r0
 8007c1e:	6021      	str	r1, [r4, #0]
 8007c20:	6063      	str	r3, [r4, #4]
 8007c22:	6054      	str	r4, [r2, #4]
 8007c24:	e7ca      	b.n	8007bbc <_free_r+0x24>
 8007c26:	46c0      	nop			; (mov r8, r8)
 8007c28:	20004228 	.word	0x20004228

08007c2c <sbrk_aligned>:
 8007c2c:	b570      	push	{r4, r5, r6, lr}
 8007c2e:	4e0f      	ldr	r6, [pc, #60]	; (8007c6c <sbrk_aligned+0x40>)
 8007c30:	000d      	movs	r5, r1
 8007c32:	6831      	ldr	r1, [r6, #0]
 8007c34:	0004      	movs	r4, r0
 8007c36:	2900      	cmp	r1, #0
 8007c38:	d102      	bne.n	8007c40 <sbrk_aligned+0x14>
 8007c3a:	f000 fccb 	bl	80085d4 <_sbrk_r>
 8007c3e:	6030      	str	r0, [r6, #0]
 8007c40:	0029      	movs	r1, r5
 8007c42:	0020      	movs	r0, r4
 8007c44:	f000 fcc6 	bl	80085d4 <_sbrk_r>
 8007c48:	1c43      	adds	r3, r0, #1
 8007c4a:	d00a      	beq.n	8007c62 <sbrk_aligned+0x36>
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	1cc5      	adds	r5, r0, #3
 8007c50:	439d      	bics	r5, r3
 8007c52:	42a8      	cmp	r0, r5
 8007c54:	d007      	beq.n	8007c66 <sbrk_aligned+0x3a>
 8007c56:	1a29      	subs	r1, r5, r0
 8007c58:	0020      	movs	r0, r4
 8007c5a:	f000 fcbb 	bl	80085d4 <_sbrk_r>
 8007c5e:	3001      	adds	r0, #1
 8007c60:	d101      	bne.n	8007c66 <sbrk_aligned+0x3a>
 8007c62:	2501      	movs	r5, #1
 8007c64:	426d      	negs	r5, r5
 8007c66:	0028      	movs	r0, r5
 8007c68:	bd70      	pop	{r4, r5, r6, pc}
 8007c6a:	46c0      	nop			; (mov r8, r8)
 8007c6c:	2000422c 	.word	0x2000422c

08007c70 <_malloc_r>:
 8007c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c72:	2203      	movs	r2, #3
 8007c74:	1ccb      	adds	r3, r1, #3
 8007c76:	4393      	bics	r3, r2
 8007c78:	3308      	adds	r3, #8
 8007c7a:	0006      	movs	r6, r0
 8007c7c:	001f      	movs	r7, r3
 8007c7e:	2b0c      	cmp	r3, #12
 8007c80:	d238      	bcs.n	8007cf4 <_malloc_r+0x84>
 8007c82:	270c      	movs	r7, #12
 8007c84:	42b9      	cmp	r1, r7
 8007c86:	d837      	bhi.n	8007cf8 <_malloc_r+0x88>
 8007c88:	0030      	movs	r0, r6
 8007c8a:	f000 f873 	bl	8007d74 <__malloc_lock>
 8007c8e:	4b38      	ldr	r3, [pc, #224]	; (8007d70 <_malloc_r+0x100>)
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	001c      	movs	r4, r3
 8007c96:	2c00      	cmp	r4, #0
 8007c98:	d133      	bne.n	8007d02 <_malloc_r+0x92>
 8007c9a:	0039      	movs	r1, r7
 8007c9c:	0030      	movs	r0, r6
 8007c9e:	f7ff ffc5 	bl	8007c2c <sbrk_aligned>
 8007ca2:	0004      	movs	r4, r0
 8007ca4:	1c43      	adds	r3, r0, #1
 8007ca6:	d15e      	bne.n	8007d66 <_malloc_r+0xf6>
 8007ca8:	9b00      	ldr	r3, [sp, #0]
 8007caa:	681c      	ldr	r4, [r3, #0]
 8007cac:	0025      	movs	r5, r4
 8007cae:	2d00      	cmp	r5, #0
 8007cb0:	d14e      	bne.n	8007d50 <_malloc_r+0xe0>
 8007cb2:	2c00      	cmp	r4, #0
 8007cb4:	d051      	beq.n	8007d5a <_malloc_r+0xea>
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	0029      	movs	r1, r5
 8007cba:	18e3      	adds	r3, r4, r3
 8007cbc:	0030      	movs	r0, r6
 8007cbe:	9301      	str	r3, [sp, #4]
 8007cc0:	f000 fc88 	bl	80085d4 <_sbrk_r>
 8007cc4:	9b01      	ldr	r3, [sp, #4]
 8007cc6:	4283      	cmp	r3, r0
 8007cc8:	d147      	bne.n	8007d5a <_malloc_r+0xea>
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	0030      	movs	r0, r6
 8007cce:	1aff      	subs	r7, r7, r3
 8007cd0:	0039      	movs	r1, r7
 8007cd2:	f7ff ffab 	bl	8007c2c <sbrk_aligned>
 8007cd6:	3001      	adds	r0, #1
 8007cd8:	d03f      	beq.n	8007d5a <_malloc_r+0xea>
 8007cda:	6823      	ldr	r3, [r4, #0]
 8007cdc:	19db      	adds	r3, r3, r7
 8007cde:	6023      	str	r3, [r4, #0]
 8007ce0:	9b00      	ldr	r3, [sp, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d040      	beq.n	8007d6a <_malloc_r+0xfa>
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	42a2      	cmp	r2, r4
 8007cec:	d133      	bne.n	8007d56 <_malloc_r+0xe6>
 8007cee:	2200      	movs	r2, #0
 8007cf0:	605a      	str	r2, [r3, #4]
 8007cf2:	e014      	b.n	8007d1e <_malloc_r+0xae>
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	dac5      	bge.n	8007c84 <_malloc_r+0x14>
 8007cf8:	230c      	movs	r3, #12
 8007cfa:	2500      	movs	r5, #0
 8007cfc:	6033      	str	r3, [r6, #0]
 8007cfe:	0028      	movs	r0, r5
 8007d00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d02:	6821      	ldr	r1, [r4, #0]
 8007d04:	1bc9      	subs	r1, r1, r7
 8007d06:	d420      	bmi.n	8007d4a <_malloc_r+0xda>
 8007d08:	290b      	cmp	r1, #11
 8007d0a:	d918      	bls.n	8007d3e <_malloc_r+0xce>
 8007d0c:	19e2      	adds	r2, r4, r7
 8007d0e:	6027      	str	r7, [r4, #0]
 8007d10:	42a3      	cmp	r3, r4
 8007d12:	d112      	bne.n	8007d3a <_malloc_r+0xca>
 8007d14:	9b00      	ldr	r3, [sp, #0]
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	6863      	ldr	r3, [r4, #4]
 8007d1a:	6011      	str	r1, [r2, #0]
 8007d1c:	6053      	str	r3, [r2, #4]
 8007d1e:	0030      	movs	r0, r6
 8007d20:	0025      	movs	r5, r4
 8007d22:	f000 f82f 	bl	8007d84 <__malloc_unlock>
 8007d26:	2207      	movs	r2, #7
 8007d28:	350b      	adds	r5, #11
 8007d2a:	1d23      	adds	r3, r4, #4
 8007d2c:	4395      	bics	r5, r2
 8007d2e:	1aea      	subs	r2, r5, r3
 8007d30:	429d      	cmp	r5, r3
 8007d32:	d0e4      	beq.n	8007cfe <_malloc_r+0x8e>
 8007d34:	1b5b      	subs	r3, r3, r5
 8007d36:	50a3      	str	r3, [r4, r2]
 8007d38:	e7e1      	b.n	8007cfe <_malloc_r+0x8e>
 8007d3a:	605a      	str	r2, [r3, #4]
 8007d3c:	e7ec      	b.n	8007d18 <_malloc_r+0xa8>
 8007d3e:	6862      	ldr	r2, [r4, #4]
 8007d40:	42a3      	cmp	r3, r4
 8007d42:	d1d5      	bne.n	8007cf0 <_malloc_r+0x80>
 8007d44:	9b00      	ldr	r3, [sp, #0]
 8007d46:	601a      	str	r2, [r3, #0]
 8007d48:	e7e9      	b.n	8007d1e <_malloc_r+0xae>
 8007d4a:	0023      	movs	r3, r4
 8007d4c:	6864      	ldr	r4, [r4, #4]
 8007d4e:	e7a2      	b.n	8007c96 <_malloc_r+0x26>
 8007d50:	002c      	movs	r4, r5
 8007d52:	686d      	ldr	r5, [r5, #4]
 8007d54:	e7ab      	b.n	8007cae <_malloc_r+0x3e>
 8007d56:	0013      	movs	r3, r2
 8007d58:	e7c4      	b.n	8007ce4 <_malloc_r+0x74>
 8007d5a:	230c      	movs	r3, #12
 8007d5c:	0030      	movs	r0, r6
 8007d5e:	6033      	str	r3, [r6, #0]
 8007d60:	f000 f810 	bl	8007d84 <__malloc_unlock>
 8007d64:	e7cb      	b.n	8007cfe <_malloc_r+0x8e>
 8007d66:	6027      	str	r7, [r4, #0]
 8007d68:	e7d9      	b.n	8007d1e <_malloc_r+0xae>
 8007d6a:	605b      	str	r3, [r3, #4]
 8007d6c:	deff      	udf	#255	; 0xff
 8007d6e:	46c0      	nop			; (mov r8, r8)
 8007d70:	20004228 	.word	0x20004228

08007d74 <__malloc_lock>:
 8007d74:	b510      	push	{r4, lr}
 8007d76:	4802      	ldr	r0, [pc, #8]	; (8007d80 <__malloc_lock+0xc>)
 8007d78:	f7ff ff02 	bl	8007b80 <__retarget_lock_acquire_recursive>
 8007d7c:	bd10      	pop	{r4, pc}
 8007d7e:	46c0      	nop			; (mov r8, r8)
 8007d80:	20004224 	.word	0x20004224

08007d84 <__malloc_unlock>:
 8007d84:	b510      	push	{r4, lr}
 8007d86:	4802      	ldr	r0, [pc, #8]	; (8007d90 <__malloc_unlock+0xc>)
 8007d88:	f7ff fefb 	bl	8007b82 <__retarget_lock_release_recursive>
 8007d8c:	bd10      	pop	{r4, pc}
 8007d8e:	46c0      	nop			; (mov r8, r8)
 8007d90:	20004224 	.word	0x20004224

08007d94 <__sfputc_r>:
 8007d94:	6893      	ldr	r3, [r2, #8]
 8007d96:	b510      	push	{r4, lr}
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	6093      	str	r3, [r2, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	da04      	bge.n	8007daa <__sfputc_r+0x16>
 8007da0:	6994      	ldr	r4, [r2, #24]
 8007da2:	42a3      	cmp	r3, r4
 8007da4:	db07      	blt.n	8007db6 <__sfputc_r+0x22>
 8007da6:	290a      	cmp	r1, #10
 8007da8:	d005      	beq.n	8007db6 <__sfputc_r+0x22>
 8007daa:	6813      	ldr	r3, [r2, #0]
 8007dac:	1c58      	adds	r0, r3, #1
 8007dae:	6010      	str	r0, [r2, #0]
 8007db0:	7019      	strb	r1, [r3, #0]
 8007db2:	0008      	movs	r0, r1
 8007db4:	bd10      	pop	{r4, pc}
 8007db6:	f000 fb66 	bl	8008486 <__swbuf_r>
 8007dba:	0001      	movs	r1, r0
 8007dbc:	e7f9      	b.n	8007db2 <__sfputc_r+0x1e>

08007dbe <__sfputs_r>:
 8007dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc0:	0006      	movs	r6, r0
 8007dc2:	000f      	movs	r7, r1
 8007dc4:	0014      	movs	r4, r2
 8007dc6:	18d5      	adds	r5, r2, r3
 8007dc8:	42ac      	cmp	r4, r5
 8007dca:	d101      	bne.n	8007dd0 <__sfputs_r+0x12>
 8007dcc:	2000      	movs	r0, #0
 8007dce:	e007      	b.n	8007de0 <__sfputs_r+0x22>
 8007dd0:	7821      	ldrb	r1, [r4, #0]
 8007dd2:	003a      	movs	r2, r7
 8007dd4:	0030      	movs	r0, r6
 8007dd6:	f7ff ffdd 	bl	8007d94 <__sfputc_r>
 8007dda:	3401      	adds	r4, #1
 8007ddc:	1c43      	adds	r3, r0, #1
 8007dde:	d1f3      	bne.n	8007dc8 <__sfputs_r+0xa>
 8007de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007de4 <_vfiprintf_r>:
 8007de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007de6:	b0a1      	sub	sp, #132	; 0x84
 8007de8:	000f      	movs	r7, r1
 8007dea:	0015      	movs	r5, r2
 8007dec:	001e      	movs	r6, r3
 8007dee:	9003      	str	r0, [sp, #12]
 8007df0:	2800      	cmp	r0, #0
 8007df2:	d004      	beq.n	8007dfe <_vfiprintf_r+0x1a>
 8007df4:	6a03      	ldr	r3, [r0, #32]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <_vfiprintf_r+0x1a>
 8007dfa:	f7ff fdb1 	bl	8007960 <__sinit>
 8007dfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e00:	07db      	lsls	r3, r3, #31
 8007e02:	d405      	bmi.n	8007e10 <_vfiprintf_r+0x2c>
 8007e04:	89bb      	ldrh	r3, [r7, #12]
 8007e06:	059b      	lsls	r3, r3, #22
 8007e08:	d402      	bmi.n	8007e10 <_vfiprintf_r+0x2c>
 8007e0a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007e0c:	f7ff feb8 	bl	8007b80 <__retarget_lock_acquire_recursive>
 8007e10:	89bb      	ldrh	r3, [r7, #12]
 8007e12:	071b      	lsls	r3, r3, #28
 8007e14:	d502      	bpl.n	8007e1c <_vfiprintf_r+0x38>
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d113      	bne.n	8007e44 <_vfiprintf_r+0x60>
 8007e1c:	0039      	movs	r1, r7
 8007e1e:	9803      	ldr	r0, [sp, #12]
 8007e20:	f000 fb74 	bl	800850c <__swsetup_r>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	d00d      	beq.n	8007e44 <_vfiprintf_r+0x60>
 8007e28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e2a:	07db      	lsls	r3, r3, #31
 8007e2c:	d503      	bpl.n	8007e36 <_vfiprintf_r+0x52>
 8007e2e:	2001      	movs	r0, #1
 8007e30:	4240      	negs	r0, r0
 8007e32:	b021      	add	sp, #132	; 0x84
 8007e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e36:	89bb      	ldrh	r3, [r7, #12]
 8007e38:	059b      	lsls	r3, r3, #22
 8007e3a:	d4f8      	bmi.n	8007e2e <_vfiprintf_r+0x4a>
 8007e3c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007e3e:	f7ff fea0 	bl	8007b82 <__retarget_lock_release_recursive>
 8007e42:	e7f4      	b.n	8007e2e <_vfiprintf_r+0x4a>
 8007e44:	2300      	movs	r3, #0
 8007e46:	ac08      	add	r4, sp, #32
 8007e48:	6163      	str	r3, [r4, #20]
 8007e4a:	3320      	adds	r3, #32
 8007e4c:	7663      	strb	r3, [r4, #25]
 8007e4e:	3310      	adds	r3, #16
 8007e50:	76a3      	strb	r3, [r4, #26]
 8007e52:	9607      	str	r6, [sp, #28]
 8007e54:	002e      	movs	r6, r5
 8007e56:	7833      	ldrb	r3, [r6, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <_vfiprintf_r+0x7c>
 8007e5c:	2b25      	cmp	r3, #37	; 0x25
 8007e5e:	d148      	bne.n	8007ef2 <_vfiprintf_r+0x10e>
 8007e60:	1b73      	subs	r3, r6, r5
 8007e62:	9305      	str	r3, [sp, #20]
 8007e64:	42ae      	cmp	r6, r5
 8007e66:	d00b      	beq.n	8007e80 <_vfiprintf_r+0x9c>
 8007e68:	002a      	movs	r2, r5
 8007e6a:	0039      	movs	r1, r7
 8007e6c:	9803      	ldr	r0, [sp, #12]
 8007e6e:	f7ff ffa6 	bl	8007dbe <__sfputs_r>
 8007e72:	3001      	adds	r0, #1
 8007e74:	d100      	bne.n	8007e78 <_vfiprintf_r+0x94>
 8007e76:	e0af      	b.n	8007fd8 <_vfiprintf_r+0x1f4>
 8007e78:	6963      	ldr	r3, [r4, #20]
 8007e7a:	9a05      	ldr	r2, [sp, #20]
 8007e7c:	189b      	adds	r3, r3, r2
 8007e7e:	6163      	str	r3, [r4, #20]
 8007e80:	7833      	ldrb	r3, [r6, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d100      	bne.n	8007e88 <_vfiprintf_r+0xa4>
 8007e86:	e0a7      	b.n	8007fd8 <_vfiprintf_r+0x1f4>
 8007e88:	2201      	movs	r2, #1
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	4252      	negs	r2, r2
 8007e8e:	6062      	str	r2, [r4, #4]
 8007e90:	a904      	add	r1, sp, #16
 8007e92:	3254      	adds	r2, #84	; 0x54
 8007e94:	1852      	adds	r2, r2, r1
 8007e96:	1c75      	adds	r5, r6, #1
 8007e98:	6023      	str	r3, [r4, #0]
 8007e9a:	60e3      	str	r3, [r4, #12]
 8007e9c:	60a3      	str	r3, [r4, #8]
 8007e9e:	7013      	strb	r3, [r2, #0]
 8007ea0:	65a3      	str	r3, [r4, #88]	; 0x58
 8007ea2:	4b59      	ldr	r3, [pc, #356]	; (8008008 <_vfiprintf_r+0x224>)
 8007ea4:	2205      	movs	r2, #5
 8007ea6:	0018      	movs	r0, r3
 8007ea8:	7829      	ldrb	r1, [r5, #0]
 8007eaa:	9305      	str	r3, [sp, #20]
 8007eac:	f000 fba4 	bl	80085f8 <memchr>
 8007eb0:	1c6e      	adds	r6, r5, #1
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	d11f      	bne.n	8007ef6 <_vfiprintf_r+0x112>
 8007eb6:	6822      	ldr	r2, [r4, #0]
 8007eb8:	06d3      	lsls	r3, r2, #27
 8007eba:	d504      	bpl.n	8007ec6 <_vfiprintf_r+0xe2>
 8007ebc:	2353      	movs	r3, #83	; 0x53
 8007ebe:	a904      	add	r1, sp, #16
 8007ec0:	185b      	adds	r3, r3, r1
 8007ec2:	2120      	movs	r1, #32
 8007ec4:	7019      	strb	r1, [r3, #0]
 8007ec6:	0713      	lsls	r3, r2, #28
 8007ec8:	d504      	bpl.n	8007ed4 <_vfiprintf_r+0xf0>
 8007eca:	2353      	movs	r3, #83	; 0x53
 8007ecc:	a904      	add	r1, sp, #16
 8007ece:	185b      	adds	r3, r3, r1
 8007ed0:	212b      	movs	r1, #43	; 0x2b
 8007ed2:	7019      	strb	r1, [r3, #0]
 8007ed4:	782b      	ldrb	r3, [r5, #0]
 8007ed6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ed8:	d016      	beq.n	8007f08 <_vfiprintf_r+0x124>
 8007eda:	002e      	movs	r6, r5
 8007edc:	2100      	movs	r1, #0
 8007ede:	200a      	movs	r0, #10
 8007ee0:	68e3      	ldr	r3, [r4, #12]
 8007ee2:	7832      	ldrb	r2, [r6, #0]
 8007ee4:	1c75      	adds	r5, r6, #1
 8007ee6:	3a30      	subs	r2, #48	; 0x30
 8007ee8:	2a09      	cmp	r2, #9
 8007eea:	d94e      	bls.n	8007f8a <_vfiprintf_r+0x1a6>
 8007eec:	2900      	cmp	r1, #0
 8007eee:	d111      	bne.n	8007f14 <_vfiprintf_r+0x130>
 8007ef0:	e017      	b.n	8007f22 <_vfiprintf_r+0x13e>
 8007ef2:	3601      	adds	r6, #1
 8007ef4:	e7af      	b.n	8007e56 <_vfiprintf_r+0x72>
 8007ef6:	9b05      	ldr	r3, [sp, #20]
 8007ef8:	6822      	ldr	r2, [r4, #0]
 8007efa:	1ac0      	subs	r0, r0, r3
 8007efc:	2301      	movs	r3, #1
 8007efe:	4083      	lsls	r3, r0
 8007f00:	4313      	orrs	r3, r2
 8007f02:	0035      	movs	r5, r6
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	e7cc      	b.n	8007ea2 <_vfiprintf_r+0xbe>
 8007f08:	9b07      	ldr	r3, [sp, #28]
 8007f0a:	1d19      	adds	r1, r3, #4
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	9107      	str	r1, [sp, #28]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	db01      	blt.n	8007f18 <_vfiprintf_r+0x134>
 8007f14:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f16:	e004      	b.n	8007f22 <_vfiprintf_r+0x13e>
 8007f18:	425b      	negs	r3, r3
 8007f1a:	60e3      	str	r3, [r4, #12]
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	6023      	str	r3, [r4, #0]
 8007f22:	7833      	ldrb	r3, [r6, #0]
 8007f24:	2b2e      	cmp	r3, #46	; 0x2e
 8007f26:	d10a      	bne.n	8007f3e <_vfiprintf_r+0x15a>
 8007f28:	7873      	ldrb	r3, [r6, #1]
 8007f2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f2c:	d135      	bne.n	8007f9a <_vfiprintf_r+0x1b6>
 8007f2e:	9b07      	ldr	r3, [sp, #28]
 8007f30:	3602      	adds	r6, #2
 8007f32:	1d1a      	adds	r2, r3, #4
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	9207      	str	r2, [sp, #28]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	db2b      	blt.n	8007f94 <_vfiprintf_r+0x1b0>
 8007f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f3e:	4d33      	ldr	r5, [pc, #204]	; (800800c <_vfiprintf_r+0x228>)
 8007f40:	2203      	movs	r2, #3
 8007f42:	0028      	movs	r0, r5
 8007f44:	7831      	ldrb	r1, [r6, #0]
 8007f46:	f000 fb57 	bl	80085f8 <memchr>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	d006      	beq.n	8007f5c <_vfiprintf_r+0x178>
 8007f4e:	2340      	movs	r3, #64	; 0x40
 8007f50:	1b40      	subs	r0, r0, r5
 8007f52:	4083      	lsls	r3, r0
 8007f54:	6822      	ldr	r2, [r4, #0]
 8007f56:	3601      	adds	r6, #1
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	6023      	str	r3, [r4, #0]
 8007f5c:	7831      	ldrb	r1, [r6, #0]
 8007f5e:	2206      	movs	r2, #6
 8007f60:	482b      	ldr	r0, [pc, #172]	; (8008010 <_vfiprintf_r+0x22c>)
 8007f62:	1c75      	adds	r5, r6, #1
 8007f64:	7621      	strb	r1, [r4, #24]
 8007f66:	f000 fb47 	bl	80085f8 <memchr>
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	d043      	beq.n	8007ff6 <_vfiprintf_r+0x212>
 8007f6e:	4b29      	ldr	r3, [pc, #164]	; (8008014 <_vfiprintf_r+0x230>)
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d125      	bne.n	8007fc0 <_vfiprintf_r+0x1dc>
 8007f74:	2207      	movs	r2, #7
 8007f76:	9b07      	ldr	r3, [sp, #28]
 8007f78:	3307      	adds	r3, #7
 8007f7a:	4393      	bics	r3, r2
 8007f7c:	3308      	adds	r3, #8
 8007f7e:	9307      	str	r3, [sp, #28]
 8007f80:	6963      	ldr	r3, [r4, #20]
 8007f82:	9a04      	ldr	r2, [sp, #16]
 8007f84:	189b      	adds	r3, r3, r2
 8007f86:	6163      	str	r3, [r4, #20]
 8007f88:	e764      	b.n	8007e54 <_vfiprintf_r+0x70>
 8007f8a:	4343      	muls	r3, r0
 8007f8c:	002e      	movs	r6, r5
 8007f8e:	2101      	movs	r1, #1
 8007f90:	189b      	adds	r3, r3, r2
 8007f92:	e7a6      	b.n	8007ee2 <_vfiprintf_r+0xfe>
 8007f94:	2301      	movs	r3, #1
 8007f96:	425b      	negs	r3, r3
 8007f98:	e7d0      	b.n	8007f3c <_vfiprintf_r+0x158>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	200a      	movs	r0, #10
 8007f9e:	001a      	movs	r2, r3
 8007fa0:	3601      	adds	r6, #1
 8007fa2:	6063      	str	r3, [r4, #4]
 8007fa4:	7831      	ldrb	r1, [r6, #0]
 8007fa6:	1c75      	adds	r5, r6, #1
 8007fa8:	3930      	subs	r1, #48	; 0x30
 8007faa:	2909      	cmp	r1, #9
 8007fac:	d903      	bls.n	8007fb6 <_vfiprintf_r+0x1d2>
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d0c5      	beq.n	8007f3e <_vfiprintf_r+0x15a>
 8007fb2:	9209      	str	r2, [sp, #36]	; 0x24
 8007fb4:	e7c3      	b.n	8007f3e <_vfiprintf_r+0x15a>
 8007fb6:	4342      	muls	r2, r0
 8007fb8:	002e      	movs	r6, r5
 8007fba:	2301      	movs	r3, #1
 8007fbc:	1852      	adds	r2, r2, r1
 8007fbe:	e7f1      	b.n	8007fa4 <_vfiprintf_r+0x1c0>
 8007fc0:	aa07      	add	r2, sp, #28
 8007fc2:	9200      	str	r2, [sp, #0]
 8007fc4:	0021      	movs	r1, r4
 8007fc6:	003a      	movs	r2, r7
 8007fc8:	4b13      	ldr	r3, [pc, #76]	; (8008018 <_vfiprintf_r+0x234>)
 8007fca:	9803      	ldr	r0, [sp, #12]
 8007fcc:	e000      	b.n	8007fd0 <_vfiprintf_r+0x1ec>
 8007fce:	bf00      	nop
 8007fd0:	9004      	str	r0, [sp, #16]
 8007fd2:	9b04      	ldr	r3, [sp, #16]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	d1d3      	bne.n	8007f80 <_vfiprintf_r+0x19c>
 8007fd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fda:	07db      	lsls	r3, r3, #31
 8007fdc:	d405      	bmi.n	8007fea <_vfiprintf_r+0x206>
 8007fde:	89bb      	ldrh	r3, [r7, #12]
 8007fe0:	059b      	lsls	r3, r3, #22
 8007fe2:	d402      	bmi.n	8007fea <_vfiprintf_r+0x206>
 8007fe4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007fe6:	f7ff fdcc 	bl	8007b82 <__retarget_lock_release_recursive>
 8007fea:	89bb      	ldrh	r3, [r7, #12]
 8007fec:	065b      	lsls	r3, r3, #25
 8007fee:	d500      	bpl.n	8007ff2 <_vfiprintf_r+0x20e>
 8007ff0:	e71d      	b.n	8007e2e <_vfiprintf_r+0x4a>
 8007ff2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007ff4:	e71d      	b.n	8007e32 <_vfiprintf_r+0x4e>
 8007ff6:	aa07      	add	r2, sp, #28
 8007ff8:	9200      	str	r2, [sp, #0]
 8007ffa:	0021      	movs	r1, r4
 8007ffc:	003a      	movs	r2, r7
 8007ffe:	4b06      	ldr	r3, [pc, #24]	; (8008018 <_vfiprintf_r+0x234>)
 8008000:	9803      	ldr	r0, [sp, #12]
 8008002:	f000 f87b 	bl	80080fc <_printf_i>
 8008006:	e7e3      	b.n	8007fd0 <_vfiprintf_r+0x1ec>
 8008008:	08008974 	.word	0x08008974
 800800c:	0800897a 	.word	0x0800897a
 8008010:	0800897e 	.word	0x0800897e
 8008014:	00000000 	.word	0x00000000
 8008018:	08007dbf 	.word	0x08007dbf

0800801c <_printf_common>:
 800801c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800801e:	0016      	movs	r6, r2
 8008020:	9301      	str	r3, [sp, #4]
 8008022:	688a      	ldr	r2, [r1, #8]
 8008024:	690b      	ldr	r3, [r1, #16]
 8008026:	000c      	movs	r4, r1
 8008028:	9000      	str	r0, [sp, #0]
 800802a:	4293      	cmp	r3, r2
 800802c:	da00      	bge.n	8008030 <_printf_common+0x14>
 800802e:	0013      	movs	r3, r2
 8008030:	0022      	movs	r2, r4
 8008032:	6033      	str	r3, [r6, #0]
 8008034:	3243      	adds	r2, #67	; 0x43
 8008036:	7812      	ldrb	r2, [r2, #0]
 8008038:	2a00      	cmp	r2, #0
 800803a:	d001      	beq.n	8008040 <_printf_common+0x24>
 800803c:	3301      	adds	r3, #1
 800803e:	6033      	str	r3, [r6, #0]
 8008040:	6823      	ldr	r3, [r4, #0]
 8008042:	069b      	lsls	r3, r3, #26
 8008044:	d502      	bpl.n	800804c <_printf_common+0x30>
 8008046:	6833      	ldr	r3, [r6, #0]
 8008048:	3302      	adds	r3, #2
 800804a:	6033      	str	r3, [r6, #0]
 800804c:	6822      	ldr	r2, [r4, #0]
 800804e:	2306      	movs	r3, #6
 8008050:	0015      	movs	r5, r2
 8008052:	401d      	ands	r5, r3
 8008054:	421a      	tst	r2, r3
 8008056:	d027      	beq.n	80080a8 <_printf_common+0x8c>
 8008058:	0023      	movs	r3, r4
 800805a:	3343      	adds	r3, #67	; 0x43
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	1e5a      	subs	r2, r3, #1
 8008060:	4193      	sbcs	r3, r2
 8008062:	6822      	ldr	r2, [r4, #0]
 8008064:	0692      	lsls	r2, r2, #26
 8008066:	d430      	bmi.n	80080ca <_printf_common+0xae>
 8008068:	0022      	movs	r2, r4
 800806a:	9901      	ldr	r1, [sp, #4]
 800806c:	9800      	ldr	r0, [sp, #0]
 800806e:	9d08      	ldr	r5, [sp, #32]
 8008070:	3243      	adds	r2, #67	; 0x43
 8008072:	47a8      	blx	r5
 8008074:	3001      	adds	r0, #1
 8008076:	d025      	beq.n	80080c4 <_printf_common+0xa8>
 8008078:	2206      	movs	r2, #6
 800807a:	6823      	ldr	r3, [r4, #0]
 800807c:	2500      	movs	r5, #0
 800807e:	4013      	ands	r3, r2
 8008080:	2b04      	cmp	r3, #4
 8008082:	d105      	bne.n	8008090 <_printf_common+0x74>
 8008084:	6833      	ldr	r3, [r6, #0]
 8008086:	68e5      	ldr	r5, [r4, #12]
 8008088:	1aed      	subs	r5, r5, r3
 800808a:	43eb      	mvns	r3, r5
 800808c:	17db      	asrs	r3, r3, #31
 800808e:	401d      	ands	r5, r3
 8008090:	68a3      	ldr	r3, [r4, #8]
 8008092:	6922      	ldr	r2, [r4, #16]
 8008094:	4293      	cmp	r3, r2
 8008096:	dd01      	ble.n	800809c <_printf_common+0x80>
 8008098:	1a9b      	subs	r3, r3, r2
 800809a:	18ed      	adds	r5, r5, r3
 800809c:	2600      	movs	r6, #0
 800809e:	42b5      	cmp	r5, r6
 80080a0:	d120      	bne.n	80080e4 <_printf_common+0xc8>
 80080a2:	2000      	movs	r0, #0
 80080a4:	e010      	b.n	80080c8 <_printf_common+0xac>
 80080a6:	3501      	adds	r5, #1
 80080a8:	68e3      	ldr	r3, [r4, #12]
 80080aa:	6832      	ldr	r2, [r6, #0]
 80080ac:	1a9b      	subs	r3, r3, r2
 80080ae:	42ab      	cmp	r3, r5
 80080b0:	ddd2      	ble.n	8008058 <_printf_common+0x3c>
 80080b2:	0022      	movs	r2, r4
 80080b4:	2301      	movs	r3, #1
 80080b6:	9901      	ldr	r1, [sp, #4]
 80080b8:	9800      	ldr	r0, [sp, #0]
 80080ba:	9f08      	ldr	r7, [sp, #32]
 80080bc:	3219      	adds	r2, #25
 80080be:	47b8      	blx	r7
 80080c0:	3001      	adds	r0, #1
 80080c2:	d1f0      	bne.n	80080a6 <_printf_common+0x8a>
 80080c4:	2001      	movs	r0, #1
 80080c6:	4240      	negs	r0, r0
 80080c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80080ca:	2030      	movs	r0, #48	; 0x30
 80080cc:	18e1      	adds	r1, r4, r3
 80080ce:	3143      	adds	r1, #67	; 0x43
 80080d0:	7008      	strb	r0, [r1, #0]
 80080d2:	0021      	movs	r1, r4
 80080d4:	1c5a      	adds	r2, r3, #1
 80080d6:	3145      	adds	r1, #69	; 0x45
 80080d8:	7809      	ldrb	r1, [r1, #0]
 80080da:	18a2      	adds	r2, r4, r2
 80080dc:	3243      	adds	r2, #67	; 0x43
 80080de:	3302      	adds	r3, #2
 80080e0:	7011      	strb	r1, [r2, #0]
 80080e2:	e7c1      	b.n	8008068 <_printf_common+0x4c>
 80080e4:	0022      	movs	r2, r4
 80080e6:	2301      	movs	r3, #1
 80080e8:	9901      	ldr	r1, [sp, #4]
 80080ea:	9800      	ldr	r0, [sp, #0]
 80080ec:	9f08      	ldr	r7, [sp, #32]
 80080ee:	321a      	adds	r2, #26
 80080f0:	47b8      	blx	r7
 80080f2:	3001      	adds	r0, #1
 80080f4:	d0e6      	beq.n	80080c4 <_printf_common+0xa8>
 80080f6:	3601      	adds	r6, #1
 80080f8:	e7d1      	b.n	800809e <_printf_common+0x82>
	...

080080fc <_printf_i>:
 80080fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080fe:	b08b      	sub	sp, #44	; 0x2c
 8008100:	9206      	str	r2, [sp, #24]
 8008102:	000a      	movs	r2, r1
 8008104:	3243      	adds	r2, #67	; 0x43
 8008106:	9307      	str	r3, [sp, #28]
 8008108:	9005      	str	r0, [sp, #20]
 800810a:	9204      	str	r2, [sp, #16]
 800810c:	7e0a      	ldrb	r2, [r1, #24]
 800810e:	000c      	movs	r4, r1
 8008110:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008112:	2a78      	cmp	r2, #120	; 0x78
 8008114:	d809      	bhi.n	800812a <_printf_i+0x2e>
 8008116:	2a62      	cmp	r2, #98	; 0x62
 8008118:	d80b      	bhi.n	8008132 <_printf_i+0x36>
 800811a:	2a00      	cmp	r2, #0
 800811c:	d100      	bne.n	8008120 <_printf_i+0x24>
 800811e:	e0be      	b.n	800829e <_printf_i+0x1a2>
 8008120:	497c      	ldr	r1, [pc, #496]	; (8008314 <_printf_i+0x218>)
 8008122:	9103      	str	r1, [sp, #12]
 8008124:	2a58      	cmp	r2, #88	; 0x58
 8008126:	d100      	bne.n	800812a <_printf_i+0x2e>
 8008128:	e093      	b.n	8008252 <_printf_i+0x156>
 800812a:	0026      	movs	r6, r4
 800812c:	3642      	adds	r6, #66	; 0x42
 800812e:	7032      	strb	r2, [r6, #0]
 8008130:	e022      	b.n	8008178 <_printf_i+0x7c>
 8008132:	0010      	movs	r0, r2
 8008134:	3863      	subs	r0, #99	; 0x63
 8008136:	2815      	cmp	r0, #21
 8008138:	d8f7      	bhi.n	800812a <_printf_i+0x2e>
 800813a:	f7f7 ffe5 	bl	8000108 <__gnu_thumb1_case_shi>
 800813e:	0016      	.short	0x0016
 8008140:	fff6001f 	.word	0xfff6001f
 8008144:	fff6fff6 	.word	0xfff6fff6
 8008148:	001ffff6 	.word	0x001ffff6
 800814c:	fff6fff6 	.word	0xfff6fff6
 8008150:	fff6fff6 	.word	0xfff6fff6
 8008154:	003600a3 	.word	0x003600a3
 8008158:	fff60083 	.word	0xfff60083
 800815c:	00b4fff6 	.word	0x00b4fff6
 8008160:	0036fff6 	.word	0x0036fff6
 8008164:	fff6fff6 	.word	0xfff6fff6
 8008168:	0087      	.short	0x0087
 800816a:	0026      	movs	r6, r4
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	3642      	adds	r6, #66	; 0x42
 8008170:	1d11      	adds	r1, r2, #4
 8008172:	6019      	str	r1, [r3, #0]
 8008174:	6813      	ldr	r3, [r2, #0]
 8008176:	7033      	strb	r3, [r6, #0]
 8008178:	2301      	movs	r3, #1
 800817a:	e0a2      	b.n	80082c2 <_printf_i+0x1c6>
 800817c:	6818      	ldr	r0, [r3, #0]
 800817e:	6809      	ldr	r1, [r1, #0]
 8008180:	1d02      	adds	r2, r0, #4
 8008182:	060d      	lsls	r5, r1, #24
 8008184:	d50b      	bpl.n	800819e <_printf_i+0xa2>
 8008186:	6805      	ldr	r5, [r0, #0]
 8008188:	601a      	str	r2, [r3, #0]
 800818a:	2d00      	cmp	r5, #0
 800818c:	da03      	bge.n	8008196 <_printf_i+0x9a>
 800818e:	232d      	movs	r3, #45	; 0x2d
 8008190:	9a04      	ldr	r2, [sp, #16]
 8008192:	426d      	negs	r5, r5
 8008194:	7013      	strb	r3, [r2, #0]
 8008196:	4b5f      	ldr	r3, [pc, #380]	; (8008314 <_printf_i+0x218>)
 8008198:	270a      	movs	r7, #10
 800819a:	9303      	str	r3, [sp, #12]
 800819c:	e01b      	b.n	80081d6 <_printf_i+0xda>
 800819e:	6805      	ldr	r5, [r0, #0]
 80081a0:	601a      	str	r2, [r3, #0]
 80081a2:	0649      	lsls	r1, r1, #25
 80081a4:	d5f1      	bpl.n	800818a <_printf_i+0x8e>
 80081a6:	b22d      	sxth	r5, r5
 80081a8:	e7ef      	b.n	800818a <_printf_i+0x8e>
 80081aa:	680d      	ldr	r5, [r1, #0]
 80081ac:	6819      	ldr	r1, [r3, #0]
 80081ae:	1d08      	adds	r0, r1, #4
 80081b0:	6018      	str	r0, [r3, #0]
 80081b2:	062e      	lsls	r6, r5, #24
 80081b4:	d501      	bpl.n	80081ba <_printf_i+0xbe>
 80081b6:	680d      	ldr	r5, [r1, #0]
 80081b8:	e003      	b.n	80081c2 <_printf_i+0xc6>
 80081ba:	066d      	lsls	r5, r5, #25
 80081bc:	d5fb      	bpl.n	80081b6 <_printf_i+0xba>
 80081be:	680d      	ldr	r5, [r1, #0]
 80081c0:	b2ad      	uxth	r5, r5
 80081c2:	4b54      	ldr	r3, [pc, #336]	; (8008314 <_printf_i+0x218>)
 80081c4:	2708      	movs	r7, #8
 80081c6:	9303      	str	r3, [sp, #12]
 80081c8:	2a6f      	cmp	r2, #111	; 0x6f
 80081ca:	d000      	beq.n	80081ce <_printf_i+0xd2>
 80081cc:	3702      	adds	r7, #2
 80081ce:	0023      	movs	r3, r4
 80081d0:	2200      	movs	r2, #0
 80081d2:	3343      	adds	r3, #67	; 0x43
 80081d4:	701a      	strb	r2, [r3, #0]
 80081d6:	6863      	ldr	r3, [r4, #4]
 80081d8:	60a3      	str	r3, [r4, #8]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	db03      	blt.n	80081e6 <_printf_i+0xea>
 80081de:	2104      	movs	r1, #4
 80081e0:	6822      	ldr	r2, [r4, #0]
 80081e2:	438a      	bics	r2, r1
 80081e4:	6022      	str	r2, [r4, #0]
 80081e6:	2d00      	cmp	r5, #0
 80081e8:	d102      	bne.n	80081f0 <_printf_i+0xf4>
 80081ea:	9e04      	ldr	r6, [sp, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00c      	beq.n	800820a <_printf_i+0x10e>
 80081f0:	9e04      	ldr	r6, [sp, #16]
 80081f2:	0028      	movs	r0, r5
 80081f4:	0039      	movs	r1, r7
 80081f6:	f7f8 f817 	bl	8000228 <__aeabi_uidivmod>
 80081fa:	9b03      	ldr	r3, [sp, #12]
 80081fc:	3e01      	subs	r6, #1
 80081fe:	5c5b      	ldrb	r3, [r3, r1]
 8008200:	7033      	strb	r3, [r6, #0]
 8008202:	002b      	movs	r3, r5
 8008204:	0005      	movs	r5, r0
 8008206:	429f      	cmp	r7, r3
 8008208:	d9f3      	bls.n	80081f2 <_printf_i+0xf6>
 800820a:	2f08      	cmp	r7, #8
 800820c:	d109      	bne.n	8008222 <_printf_i+0x126>
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	07db      	lsls	r3, r3, #31
 8008212:	d506      	bpl.n	8008222 <_printf_i+0x126>
 8008214:	6862      	ldr	r2, [r4, #4]
 8008216:	6923      	ldr	r3, [r4, #16]
 8008218:	429a      	cmp	r2, r3
 800821a:	dc02      	bgt.n	8008222 <_printf_i+0x126>
 800821c:	2330      	movs	r3, #48	; 0x30
 800821e:	3e01      	subs	r6, #1
 8008220:	7033      	strb	r3, [r6, #0]
 8008222:	9b04      	ldr	r3, [sp, #16]
 8008224:	1b9b      	subs	r3, r3, r6
 8008226:	6123      	str	r3, [r4, #16]
 8008228:	9b07      	ldr	r3, [sp, #28]
 800822a:	0021      	movs	r1, r4
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	9805      	ldr	r0, [sp, #20]
 8008230:	9b06      	ldr	r3, [sp, #24]
 8008232:	aa09      	add	r2, sp, #36	; 0x24
 8008234:	f7ff fef2 	bl	800801c <_printf_common>
 8008238:	3001      	adds	r0, #1
 800823a:	d147      	bne.n	80082cc <_printf_i+0x1d0>
 800823c:	2001      	movs	r0, #1
 800823e:	4240      	negs	r0, r0
 8008240:	b00b      	add	sp, #44	; 0x2c
 8008242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008244:	2220      	movs	r2, #32
 8008246:	6809      	ldr	r1, [r1, #0]
 8008248:	430a      	orrs	r2, r1
 800824a:	6022      	str	r2, [r4, #0]
 800824c:	2278      	movs	r2, #120	; 0x78
 800824e:	4932      	ldr	r1, [pc, #200]	; (8008318 <_printf_i+0x21c>)
 8008250:	9103      	str	r1, [sp, #12]
 8008252:	0021      	movs	r1, r4
 8008254:	3145      	adds	r1, #69	; 0x45
 8008256:	700a      	strb	r2, [r1, #0]
 8008258:	6819      	ldr	r1, [r3, #0]
 800825a:	6822      	ldr	r2, [r4, #0]
 800825c:	c920      	ldmia	r1!, {r5}
 800825e:	0610      	lsls	r0, r2, #24
 8008260:	d402      	bmi.n	8008268 <_printf_i+0x16c>
 8008262:	0650      	lsls	r0, r2, #25
 8008264:	d500      	bpl.n	8008268 <_printf_i+0x16c>
 8008266:	b2ad      	uxth	r5, r5
 8008268:	6019      	str	r1, [r3, #0]
 800826a:	07d3      	lsls	r3, r2, #31
 800826c:	d502      	bpl.n	8008274 <_printf_i+0x178>
 800826e:	2320      	movs	r3, #32
 8008270:	4313      	orrs	r3, r2
 8008272:	6023      	str	r3, [r4, #0]
 8008274:	2710      	movs	r7, #16
 8008276:	2d00      	cmp	r5, #0
 8008278:	d1a9      	bne.n	80081ce <_printf_i+0xd2>
 800827a:	2220      	movs	r2, #32
 800827c:	6823      	ldr	r3, [r4, #0]
 800827e:	4393      	bics	r3, r2
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	e7a4      	b.n	80081ce <_printf_i+0xd2>
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	680d      	ldr	r5, [r1, #0]
 8008288:	1d10      	adds	r0, r2, #4
 800828a:	6949      	ldr	r1, [r1, #20]
 800828c:	6018      	str	r0, [r3, #0]
 800828e:	6813      	ldr	r3, [r2, #0]
 8008290:	062e      	lsls	r6, r5, #24
 8008292:	d501      	bpl.n	8008298 <_printf_i+0x19c>
 8008294:	6019      	str	r1, [r3, #0]
 8008296:	e002      	b.n	800829e <_printf_i+0x1a2>
 8008298:	066d      	lsls	r5, r5, #25
 800829a:	d5fb      	bpl.n	8008294 <_printf_i+0x198>
 800829c:	8019      	strh	r1, [r3, #0]
 800829e:	2300      	movs	r3, #0
 80082a0:	9e04      	ldr	r6, [sp, #16]
 80082a2:	6123      	str	r3, [r4, #16]
 80082a4:	e7c0      	b.n	8008228 <_printf_i+0x12c>
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	1d11      	adds	r1, r2, #4
 80082aa:	6019      	str	r1, [r3, #0]
 80082ac:	6816      	ldr	r6, [r2, #0]
 80082ae:	2100      	movs	r1, #0
 80082b0:	0030      	movs	r0, r6
 80082b2:	6862      	ldr	r2, [r4, #4]
 80082b4:	f000 f9a0 	bl	80085f8 <memchr>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	d001      	beq.n	80082c0 <_printf_i+0x1c4>
 80082bc:	1b80      	subs	r0, r0, r6
 80082be:	6060      	str	r0, [r4, #4]
 80082c0:	6863      	ldr	r3, [r4, #4]
 80082c2:	6123      	str	r3, [r4, #16]
 80082c4:	2300      	movs	r3, #0
 80082c6:	9a04      	ldr	r2, [sp, #16]
 80082c8:	7013      	strb	r3, [r2, #0]
 80082ca:	e7ad      	b.n	8008228 <_printf_i+0x12c>
 80082cc:	0032      	movs	r2, r6
 80082ce:	6923      	ldr	r3, [r4, #16]
 80082d0:	9906      	ldr	r1, [sp, #24]
 80082d2:	9805      	ldr	r0, [sp, #20]
 80082d4:	9d07      	ldr	r5, [sp, #28]
 80082d6:	47a8      	blx	r5
 80082d8:	3001      	adds	r0, #1
 80082da:	d0af      	beq.n	800823c <_printf_i+0x140>
 80082dc:	6823      	ldr	r3, [r4, #0]
 80082de:	079b      	lsls	r3, r3, #30
 80082e0:	d415      	bmi.n	800830e <_printf_i+0x212>
 80082e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082e4:	68e0      	ldr	r0, [r4, #12]
 80082e6:	4298      	cmp	r0, r3
 80082e8:	daaa      	bge.n	8008240 <_printf_i+0x144>
 80082ea:	0018      	movs	r0, r3
 80082ec:	e7a8      	b.n	8008240 <_printf_i+0x144>
 80082ee:	0022      	movs	r2, r4
 80082f0:	2301      	movs	r3, #1
 80082f2:	9906      	ldr	r1, [sp, #24]
 80082f4:	9805      	ldr	r0, [sp, #20]
 80082f6:	9e07      	ldr	r6, [sp, #28]
 80082f8:	3219      	adds	r2, #25
 80082fa:	47b0      	blx	r6
 80082fc:	3001      	adds	r0, #1
 80082fe:	d09d      	beq.n	800823c <_printf_i+0x140>
 8008300:	3501      	adds	r5, #1
 8008302:	68e3      	ldr	r3, [r4, #12]
 8008304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008306:	1a9b      	subs	r3, r3, r2
 8008308:	42ab      	cmp	r3, r5
 800830a:	dcf0      	bgt.n	80082ee <_printf_i+0x1f2>
 800830c:	e7e9      	b.n	80082e2 <_printf_i+0x1e6>
 800830e:	2500      	movs	r5, #0
 8008310:	e7f7      	b.n	8008302 <_printf_i+0x206>
 8008312:	46c0      	nop			; (mov r8, r8)
 8008314:	08008985 	.word	0x08008985
 8008318:	08008996 	.word	0x08008996

0800831c <__sflush_r>:
 800831c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800831e:	898b      	ldrh	r3, [r1, #12]
 8008320:	0005      	movs	r5, r0
 8008322:	000c      	movs	r4, r1
 8008324:	071a      	lsls	r2, r3, #28
 8008326:	d45c      	bmi.n	80083e2 <__sflush_r+0xc6>
 8008328:	684a      	ldr	r2, [r1, #4]
 800832a:	2a00      	cmp	r2, #0
 800832c:	dc04      	bgt.n	8008338 <__sflush_r+0x1c>
 800832e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008330:	2a00      	cmp	r2, #0
 8008332:	dc01      	bgt.n	8008338 <__sflush_r+0x1c>
 8008334:	2000      	movs	r0, #0
 8008336:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008338:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800833a:	2f00      	cmp	r7, #0
 800833c:	d0fa      	beq.n	8008334 <__sflush_r+0x18>
 800833e:	2200      	movs	r2, #0
 8008340:	2080      	movs	r0, #128	; 0x80
 8008342:	682e      	ldr	r6, [r5, #0]
 8008344:	602a      	str	r2, [r5, #0]
 8008346:	001a      	movs	r2, r3
 8008348:	0140      	lsls	r0, r0, #5
 800834a:	6a21      	ldr	r1, [r4, #32]
 800834c:	4002      	ands	r2, r0
 800834e:	4203      	tst	r3, r0
 8008350:	d034      	beq.n	80083bc <__sflush_r+0xa0>
 8008352:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008354:	89a3      	ldrh	r3, [r4, #12]
 8008356:	075b      	lsls	r3, r3, #29
 8008358:	d506      	bpl.n	8008368 <__sflush_r+0x4c>
 800835a:	6863      	ldr	r3, [r4, #4]
 800835c:	1ac0      	subs	r0, r0, r3
 800835e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008360:	2b00      	cmp	r3, #0
 8008362:	d001      	beq.n	8008368 <__sflush_r+0x4c>
 8008364:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008366:	1ac0      	subs	r0, r0, r3
 8008368:	0002      	movs	r2, r0
 800836a:	2300      	movs	r3, #0
 800836c:	0028      	movs	r0, r5
 800836e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008370:	6a21      	ldr	r1, [r4, #32]
 8008372:	47b8      	blx	r7
 8008374:	89a2      	ldrh	r2, [r4, #12]
 8008376:	1c43      	adds	r3, r0, #1
 8008378:	d106      	bne.n	8008388 <__sflush_r+0x6c>
 800837a:	6829      	ldr	r1, [r5, #0]
 800837c:	291d      	cmp	r1, #29
 800837e:	d82c      	bhi.n	80083da <__sflush_r+0xbe>
 8008380:	4b2a      	ldr	r3, [pc, #168]	; (800842c <__sflush_r+0x110>)
 8008382:	410b      	asrs	r3, r1
 8008384:	07db      	lsls	r3, r3, #31
 8008386:	d428      	bmi.n	80083da <__sflush_r+0xbe>
 8008388:	2300      	movs	r3, #0
 800838a:	6063      	str	r3, [r4, #4]
 800838c:	6923      	ldr	r3, [r4, #16]
 800838e:	6023      	str	r3, [r4, #0]
 8008390:	04d2      	lsls	r2, r2, #19
 8008392:	d505      	bpl.n	80083a0 <__sflush_r+0x84>
 8008394:	1c43      	adds	r3, r0, #1
 8008396:	d102      	bne.n	800839e <__sflush_r+0x82>
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d100      	bne.n	80083a0 <__sflush_r+0x84>
 800839e:	6560      	str	r0, [r4, #84]	; 0x54
 80083a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083a2:	602e      	str	r6, [r5, #0]
 80083a4:	2900      	cmp	r1, #0
 80083a6:	d0c5      	beq.n	8008334 <__sflush_r+0x18>
 80083a8:	0023      	movs	r3, r4
 80083aa:	3344      	adds	r3, #68	; 0x44
 80083ac:	4299      	cmp	r1, r3
 80083ae:	d002      	beq.n	80083b6 <__sflush_r+0x9a>
 80083b0:	0028      	movs	r0, r5
 80083b2:	f7ff fbf1 	bl	8007b98 <_free_r>
 80083b6:	2000      	movs	r0, #0
 80083b8:	6360      	str	r0, [r4, #52]	; 0x34
 80083ba:	e7bc      	b.n	8008336 <__sflush_r+0x1a>
 80083bc:	2301      	movs	r3, #1
 80083be:	0028      	movs	r0, r5
 80083c0:	47b8      	blx	r7
 80083c2:	1c43      	adds	r3, r0, #1
 80083c4:	d1c6      	bne.n	8008354 <__sflush_r+0x38>
 80083c6:	682b      	ldr	r3, [r5, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d0c3      	beq.n	8008354 <__sflush_r+0x38>
 80083cc:	2b1d      	cmp	r3, #29
 80083ce:	d001      	beq.n	80083d4 <__sflush_r+0xb8>
 80083d0:	2b16      	cmp	r3, #22
 80083d2:	d101      	bne.n	80083d8 <__sflush_r+0xbc>
 80083d4:	602e      	str	r6, [r5, #0]
 80083d6:	e7ad      	b.n	8008334 <__sflush_r+0x18>
 80083d8:	89a2      	ldrh	r2, [r4, #12]
 80083da:	2340      	movs	r3, #64	; 0x40
 80083dc:	4313      	orrs	r3, r2
 80083de:	81a3      	strh	r3, [r4, #12]
 80083e0:	e7a9      	b.n	8008336 <__sflush_r+0x1a>
 80083e2:	690e      	ldr	r6, [r1, #16]
 80083e4:	2e00      	cmp	r6, #0
 80083e6:	d0a5      	beq.n	8008334 <__sflush_r+0x18>
 80083e8:	680f      	ldr	r7, [r1, #0]
 80083ea:	600e      	str	r6, [r1, #0]
 80083ec:	1bba      	subs	r2, r7, r6
 80083ee:	9201      	str	r2, [sp, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	079b      	lsls	r3, r3, #30
 80083f4:	d100      	bne.n	80083f8 <__sflush_r+0xdc>
 80083f6:	694a      	ldr	r2, [r1, #20]
 80083f8:	60a2      	str	r2, [r4, #8]
 80083fa:	9b01      	ldr	r3, [sp, #4]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	dd99      	ble.n	8008334 <__sflush_r+0x18>
 8008400:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008402:	0032      	movs	r2, r6
 8008404:	001f      	movs	r7, r3
 8008406:	0028      	movs	r0, r5
 8008408:	9b01      	ldr	r3, [sp, #4]
 800840a:	6a21      	ldr	r1, [r4, #32]
 800840c:	47b8      	blx	r7
 800840e:	2800      	cmp	r0, #0
 8008410:	dc06      	bgt.n	8008420 <__sflush_r+0x104>
 8008412:	2340      	movs	r3, #64	; 0x40
 8008414:	2001      	movs	r0, #1
 8008416:	89a2      	ldrh	r2, [r4, #12]
 8008418:	4240      	negs	r0, r0
 800841a:	4313      	orrs	r3, r2
 800841c:	81a3      	strh	r3, [r4, #12]
 800841e:	e78a      	b.n	8008336 <__sflush_r+0x1a>
 8008420:	9b01      	ldr	r3, [sp, #4]
 8008422:	1836      	adds	r6, r6, r0
 8008424:	1a1b      	subs	r3, r3, r0
 8008426:	9301      	str	r3, [sp, #4]
 8008428:	e7e7      	b.n	80083fa <__sflush_r+0xde>
 800842a:	46c0      	nop			; (mov r8, r8)
 800842c:	dfbffffe 	.word	0xdfbffffe

08008430 <_fflush_r>:
 8008430:	690b      	ldr	r3, [r1, #16]
 8008432:	b570      	push	{r4, r5, r6, lr}
 8008434:	0005      	movs	r5, r0
 8008436:	000c      	movs	r4, r1
 8008438:	2b00      	cmp	r3, #0
 800843a:	d102      	bne.n	8008442 <_fflush_r+0x12>
 800843c:	2500      	movs	r5, #0
 800843e:	0028      	movs	r0, r5
 8008440:	bd70      	pop	{r4, r5, r6, pc}
 8008442:	2800      	cmp	r0, #0
 8008444:	d004      	beq.n	8008450 <_fflush_r+0x20>
 8008446:	6a03      	ldr	r3, [r0, #32]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d101      	bne.n	8008450 <_fflush_r+0x20>
 800844c:	f7ff fa88 	bl	8007960 <__sinit>
 8008450:	220c      	movs	r2, #12
 8008452:	5ea3      	ldrsh	r3, [r4, r2]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d0f1      	beq.n	800843c <_fflush_r+0xc>
 8008458:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800845a:	07d2      	lsls	r2, r2, #31
 800845c:	d404      	bmi.n	8008468 <_fflush_r+0x38>
 800845e:	059b      	lsls	r3, r3, #22
 8008460:	d402      	bmi.n	8008468 <_fflush_r+0x38>
 8008462:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008464:	f7ff fb8c 	bl	8007b80 <__retarget_lock_acquire_recursive>
 8008468:	0028      	movs	r0, r5
 800846a:	0021      	movs	r1, r4
 800846c:	f7ff ff56 	bl	800831c <__sflush_r>
 8008470:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008472:	0005      	movs	r5, r0
 8008474:	07db      	lsls	r3, r3, #31
 8008476:	d4e2      	bmi.n	800843e <_fflush_r+0xe>
 8008478:	89a3      	ldrh	r3, [r4, #12]
 800847a:	059b      	lsls	r3, r3, #22
 800847c:	d4df      	bmi.n	800843e <_fflush_r+0xe>
 800847e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008480:	f7ff fb7f 	bl	8007b82 <__retarget_lock_release_recursive>
 8008484:	e7db      	b.n	800843e <_fflush_r+0xe>

08008486 <__swbuf_r>:
 8008486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008488:	0006      	movs	r6, r0
 800848a:	000d      	movs	r5, r1
 800848c:	0014      	movs	r4, r2
 800848e:	2800      	cmp	r0, #0
 8008490:	d004      	beq.n	800849c <__swbuf_r+0x16>
 8008492:	6a03      	ldr	r3, [r0, #32]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d101      	bne.n	800849c <__swbuf_r+0x16>
 8008498:	f7ff fa62 	bl	8007960 <__sinit>
 800849c:	69a3      	ldr	r3, [r4, #24]
 800849e:	60a3      	str	r3, [r4, #8]
 80084a0:	89a3      	ldrh	r3, [r4, #12]
 80084a2:	071b      	lsls	r3, r3, #28
 80084a4:	d528      	bpl.n	80084f8 <__swbuf_r+0x72>
 80084a6:	6923      	ldr	r3, [r4, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d025      	beq.n	80084f8 <__swbuf_r+0x72>
 80084ac:	6923      	ldr	r3, [r4, #16]
 80084ae:	6820      	ldr	r0, [r4, #0]
 80084b0:	b2ef      	uxtb	r7, r5
 80084b2:	1ac0      	subs	r0, r0, r3
 80084b4:	6963      	ldr	r3, [r4, #20]
 80084b6:	b2ed      	uxtb	r5, r5
 80084b8:	4283      	cmp	r3, r0
 80084ba:	dc05      	bgt.n	80084c8 <__swbuf_r+0x42>
 80084bc:	0021      	movs	r1, r4
 80084be:	0030      	movs	r0, r6
 80084c0:	f7ff ffb6 	bl	8008430 <_fflush_r>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d11d      	bne.n	8008504 <__swbuf_r+0x7e>
 80084c8:	68a3      	ldr	r3, [r4, #8]
 80084ca:	3001      	adds	r0, #1
 80084cc:	3b01      	subs	r3, #1
 80084ce:	60a3      	str	r3, [r4, #8]
 80084d0:	6823      	ldr	r3, [r4, #0]
 80084d2:	1c5a      	adds	r2, r3, #1
 80084d4:	6022      	str	r2, [r4, #0]
 80084d6:	701f      	strb	r7, [r3, #0]
 80084d8:	6963      	ldr	r3, [r4, #20]
 80084da:	4283      	cmp	r3, r0
 80084dc:	d004      	beq.n	80084e8 <__swbuf_r+0x62>
 80084de:	89a3      	ldrh	r3, [r4, #12]
 80084e0:	07db      	lsls	r3, r3, #31
 80084e2:	d507      	bpl.n	80084f4 <__swbuf_r+0x6e>
 80084e4:	2d0a      	cmp	r5, #10
 80084e6:	d105      	bne.n	80084f4 <__swbuf_r+0x6e>
 80084e8:	0021      	movs	r1, r4
 80084ea:	0030      	movs	r0, r6
 80084ec:	f7ff ffa0 	bl	8008430 <_fflush_r>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d107      	bne.n	8008504 <__swbuf_r+0x7e>
 80084f4:	0028      	movs	r0, r5
 80084f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084f8:	0021      	movs	r1, r4
 80084fa:	0030      	movs	r0, r6
 80084fc:	f000 f806 	bl	800850c <__swsetup_r>
 8008500:	2800      	cmp	r0, #0
 8008502:	d0d3      	beq.n	80084ac <__swbuf_r+0x26>
 8008504:	2501      	movs	r5, #1
 8008506:	426d      	negs	r5, r5
 8008508:	e7f4      	b.n	80084f4 <__swbuf_r+0x6e>
	...

0800850c <__swsetup_r>:
 800850c:	4b30      	ldr	r3, [pc, #192]	; (80085d0 <__swsetup_r+0xc4>)
 800850e:	b570      	push	{r4, r5, r6, lr}
 8008510:	0005      	movs	r5, r0
 8008512:	6818      	ldr	r0, [r3, #0]
 8008514:	000c      	movs	r4, r1
 8008516:	2800      	cmp	r0, #0
 8008518:	d004      	beq.n	8008524 <__swsetup_r+0x18>
 800851a:	6a03      	ldr	r3, [r0, #32]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d101      	bne.n	8008524 <__swsetup_r+0x18>
 8008520:	f7ff fa1e 	bl	8007960 <__sinit>
 8008524:	230c      	movs	r3, #12
 8008526:	5ee2      	ldrsh	r2, [r4, r3]
 8008528:	b293      	uxth	r3, r2
 800852a:	0711      	lsls	r1, r2, #28
 800852c:	d423      	bmi.n	8008576 <__swsetup_r+0x6a>
 800852e:	06d9      	lsls	r1, r3, #27
 8008530:	d407      	bmi.n	8008542 <__swsetup_r+0x36>
 8008532:	2309      	movs	r3, #9
 8008534:	2001      	movs	r0, #1
 8008536:	602b      	str	r3, [r5, #0]
 8008538:	3337      	adds	r3, #55	; 0x37
 800853a:	4313      	orrs	r3, r2
 800853c:	81a3      	strh	r3, [r4, #12]
 800853e:	4240      	negs	r0, r0
 8008540:	bd70      	pop	{r4, r5, r6, pc}
 8008542:	075b      	lsls	r3, r3, #29
 8008544:	d513      	bpl.n	800856e <__swsetup_r+0x62>
 8008546:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008548:	2900      	cmp	r1, #0
 800854a:	d008      	beq.n	800855e <__swsetup_r+0x52>
 800854c:	0023      	movs	r3, r4
 800854e:	3344      	adds	r3, #68	; 0x44
 8008550:	4299      	cmp	r1, r3
 8008552:	d002      	beq.n	800855a <__swsetup_r+0x4e>
 8008554:	0028      	movs	r0, r5
 8008556:	f7ff fb1f 	bl	8007b98 <_free_r>
 800855a:	2300      	movs	r3, #0
 800855c:	6363      	str	r3, [r4, #52]	; 0x34
 800855e:	2224      	movs	r2, #36	; 0x24
 8008560:	89a3      	ldrh	r3, [r4, #12]
 8008562:	4393      	bics	r3, r2
 8008564:	81a3      	strh	r3, [r4, #12]
 8008566:	2300      	movs	r3, #0
 8008568:	6063      	str	r3, [r4, #4]
 800856a:	6923      	ldr	r3, [r4, #16]
 800856c:	6023      	str	r3, [r4, #0]
 800856e:	2308      	movs	r3, #8
 8008570:	89a2      	ldrh	r2, [r4, #12]
 8008572:	4313      	orrs	r3, r2
 8008574:	81a3      	strh	r3, [r4, #12]
 8008576:	6923      	ldr	r3, [r4, #16]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10b      	bne.n	8008594 <__swsetup_r+0x88>
 800857c:	21a0      	movs	r1, #160	; 0xa0
 800857e:	2280      	movs	r2, #128	; 0x80
 8008580:	89a3      	ldrh	r3, [r4, #12]
 8008582:	0089      	lsls	r1, r1, #2
 8008584:	0092      	lsls	r2, r2, #2
 8008586:	400b      	ands	r3, r1
 8008588:	4293      	cmp	r3, r2
 800858a:	d003      	beq.n	8008594 <__swsetup_r+0x88>
 800858c:	0021      	movs	r1, r4
 800858e:	0028      	movs	r0, r5
 8008590:	f000 f866 	bl	8008660 <__smakebuf_r>
 8008594:	220c      	movs	r2, #12
 8008596:	5ea3      	ldrsh	r3, [r4, r2]
 8008598:	2001      	movs	r0, #1
 800859a:	001a      	movs	r2, r3
 800859c:	b299      	uxth	r1, r3
 800859e:	4002      	ands	r2, r0
 80085a0:	4203      	tst	r3, r0
 80085a2:	d00f      	beq.n	80085c4 <__swsetup_r+0xb8>
 80085a4:	2200      	movs	r2, #0
 80085a6:	60a2      	str	r2, [r4, #8]
 80085a8:	6962      	ldr	r2, [r4, #20]
 80085aa:	4252      	negs	r2, r2
 80085ac:	61a2      	str	r2, [r4, #24]
 80085ae:	2000      	movs	r0, #0
 80085b0:	6922      	ldr	r2, [r4, #16]
 80085b2:	4282      	cmp	r2, r0
 80085b4:	d1c4      	bne.n	8008540 <__swsetup_r+0x34>
 80085b6:	0609      	lsls	r1, r1, #24
 80085b8:	d5c2      	bpl.n	8008540 <__swsetup_r+0x34>
 80085ba:	2240      	movs	r2, #64	; 0x40
 80085bc:	4313      	orrs	r3, r2
 80085be:	81a3      	strh	r3, [r4, #12]
 80085c0:	3801      	subs	r0, #1
 80085c2:	e7bd      	b.n	8008540 <__swsetup_r+0x34>
 80085c4:	0788      	lsls	r0, r1, #30
 80085c6:	d400      	bmi.n	80085ca <__swsetup_r+0xbe>
 80085c8:	6962      	ldr	r2, [r4, #20]
 80085ca:	60a2      	str	r2, [r4, #8]
 80085cc:	e7ef      	b.n	80085ae <__swsetup_r+0xa2>
 80085ce:	46c0      	nop			; (mov r8, r8)
 80085d0:	20000068 	.word	0x20000068

080085d4 <_sbrk_r>:
 80085d4:	2300      	movs	r3, #0
 80085d6:	b570      	push	{r4, r5, r6, lr}
 80085d8:	4d06      	ldr	r5, [pc, #24]	; (80085f4 <_sbrk_r+0x20>)
 80085da:	0004      	movs	r4, r0
 80085dc:	0008      	movs	r0, r1
 80085de:	602b      	str	r3, [r5, #0]
 80085e0:	f7f8 fba2 	bl	8000d28 <_sbrk>
 80085e4:	1c43      	adds	r3, r0, #1
 80085e6:	d103      	bne.n	80085f0 <_sbrk_r+0x1c>
 80085e8:	682b      	ldr	r3, [r5, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d000      	beq.n	80085f0 <_sbrk_r+0x1c>
 80085ee:	6023      	str	r3, [r4, #0]
 80085f0:	bd70      	pop	{r4, r5, r6, pc}
 80085f2:	46c0      	nop			; (mov r8, r8)
 80085f4:	20004220 	.word	0x20004220

080085f8 <memchr>:
 80085f8:	b2c9      	uxtb	r1, r1
 80085fa:	1882      	adds	r2, r0, r2
 80085fc:	4290      	cmp	r0, r2
 80085fe:	d101      	bne.n	8008604 <memchr+0xc>
 8008600:	2000      	movs	r0, #0
 8008602:	4770      	bx	lr
 8008604:	7803      	ldrb	r3, [r0, #0]
 8008606:	428b      	cmp	r3, r1
 8008608:	d0fb      	beq.n	8008602 <memchr+0xa>
 800860a:	3001      	adds	r0, #1
 800860c:	e7f6      	b.n	80085fc <memchr+0x4>
	...

08008610 <__swhatbuf_r>:
 8008610:	b570      	push	{r4, r5, r6, lr}
 8008612:	000e      	movs	r6, r1
 8008614:	001d      	movs	r5, r3
 8008616:	230e      	movs	r3, #14
 8008618:	5ec9      	ldrsh	r1, [r1, r3]
 800861a:	0014      	movs	r4, r2
 800861c:	b096      	sub	sp, #88	; 0x58
 800861e:	2900      	cmp	r1, #0
 8008620:	da0c      	bge.n	800863c <__swhatbuf_r+0x2c>
 8008622:	89b2      	ldrh	r2, [r6, #12]
 8008624:	2380      	movs	r3, #128	; 0x80
 8008626:	0011      	movs	r1, r2
 8008628:	4019      	ands	r1, r3
 800862a:	421a      	tst	r2, r3
 800862c:	d013      	beq.n	8008656 <__swhatbuf_r+0x46>
 800862e:	2100      	movs	r1, #0
 8008630:	3b40      	subs	r3, #64	; 0x40
 8008632:	2000      	movs	r0, #0
 8008634:	6029      	str	r1, [r5, #0]
 8008636:	6023      	str	r3, [r4, #0]
 8008638:	b016      	add	sp, #88	; 0x58
 800863a:	bd70      	pop	{r4, r5, r6, pc}
 800863c:	466a      	mov	r2, sp
 800863e:	f000 f84d 	bl	80086dc <_fstat_r>
 8008642:	2800      	cmp	r0, #0
 8008644:	dbed      	blt.n	8008622 <__swhatbuf_r+0x12>
 8008646:	23f0      	movs	r3, #240	; 0xf0
 8008648:	9901      	ldr	r1, [sp, #4]
 800864a:	021b      	lsls	r3, r3, #8
 800864c:	4019      	ands	r1, r3
 800864e:	4b03      	ldr	r3, [pc, #12]	; (800865c <__swhatbuf_r+0x4c>)
 8008650:	18c9      	adds	r1, r1, r3
 8008652:	424b      	negs	r3, r1
 8008654:	4159      	adcs	r1, r3
 8008656:	2380      	movs	r3, #128	; 0x80
 8008658:	00db      	lsls	r3, r3, #3
 800865a:	e7ea      	b.n	8008632 <__swhatbuf_r+0x22>
 800865c:	ffffe000 	.word	0xffffe000

08008660 <__smakebuf_r>:
 8008660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008662:	2602      	movs	r6, #2
 8008664:	898b      	ldrh	r3, [r1, #12]
 8008666:	0005      	movs	r5, r0
 8008668:	000c      	movs	r4, r1
 800866a:	4233      	tst	r3, r6
 800866c:	d006      	beq.n	800867c <__smakebuf_r+0x1c>
 800866e:	0023      	movs	r3, r4
 8008670:	3347      	adds	r3, #71	; 0x47
 8008672:	6023      	str	r3, [r4, #0]
 8008674:	6123      	str	r3, [r4, #16]
 8008676:	2301      	movs	r3, #1
 8008678:	6163      	str	r3, [r4, #20]
 800867a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800867c:	466a      	mov	r2, sp
 800867e:	ab01      	add	r3, sp, #4
 8008680:	f7ff ffc6 	bl	8008610 <__swhatbuf_r>
 8008684:	9900      	ldr	r1, [sp, #0]
 8008686:	0007      	movs	r7, r0
 8008688:	0028      	movs	r0, r5
 800868a:	f7ff faf1 	bl	8007c70 <_malloc_r>
 800868e:	2800      	cmp	r0, #0
 8008690:	d108      	bne.n	80086a4 <__smakebuf_r+0x44>
 8008692:	220c      	movs	r2, #12
 8008694:	5ea3      	ldrsh	r3, [r4, r2]
 8008696:	059a      	lsls	r2, r3, #22
 8008698:	d4ef      	bmi.n	800867a <__smakebuf_r+0x1a>
 800869a:	2203      	movs	r2, #3
 800869c:	4393      	bics	r3, r2
 800869e:	431e      	orrs	r6, r3
 80086a0:	81a6      	strh	r6, [r4, #12]
 80086a2:	e7e4      	b.n	800866e <__smakebuf_r+0xe>
 80086a4:	2380      	movs	r3, #128	; 0x80
 80086a6:	89a2      	ldrh	r2, [r4, #12]
 80086a8:	6020      	str	r0, [r4, #0]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	81a3      	strh	r3, [r4, #12]
 80086ae:	9b00      	ldr	r3, [sp, #0]
 80086b0:	6120      	str	r0, [r4, #16]
 80086b2:	6163      	str	r3, [r4, #20]
 80086b4:	9b01      	ldr	r3, [sp, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00c      	beq.n	80086d4 <__smakebuf_r+0x74>
 80086ba:	0028      	movs	r0, r5
 80086bc:	230e      	movs	r3, #14
 80086be:	5ee1      	ldrsh	r1, [r4, r3]
 80086c0:	f000 f81e 	bl	8008700 <_isatty_r>
 80086c4:	2800      	cmp	r0, #0
 80086c6:	d005      	beq.n	80086d4 <__smakebuf_r+0x74>
 80086c8:	2303      	movs	r3, #3
 80086ca:	89a2      	ldrh	r2, [r4, #12]
 80086cc:	439a      	bics	r2, r3
 80086ce:	3b02      	subs	r3, #2
 80086d0:	4313      	orrs	r3, r2
 80086d2:	81a3      	strh	r3, [r4, #12]
 80086d4:	89a3      	ldrh	r3, [r4, #12]
 80086d6:	433b      	orrs	r3, r7
 80086d8:	81a3      	strh	r3, [r4, #12]
 80086da:	e7ce      	b.n	800867a <__smakebuf_r+0x1a>

080086dc <_fstat_r>:
 80086dc:	2300      	movs	r3, #0
 80086de:	b570      	push	{r4, r5, r6, lr}
 80086e0:	4d06      	ldr	r5, [pc, #24]	; (80086fc <_fstat_r+0x20>)
 80086e2:	0004      	movs	r4, r0
 80086e4:	0008      	movs	r0, r1
 80086e6:	0011      	movs	r1, r2
 80086e8:	602b      	str	r3, [r5, #0]
 80086ea:	f7f8 fafa 	bl	8000ce2 <_fstat>
 80086ee:	1c43      	adds	r3, r0, #1
 80086f0:	d103      	bne.n	80086fa <_fstat_r+0x1e>
 80086f2:	682b      	ldr	r3, [r5, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d000      	beq.n	80086fa <_fstat_r+0x1e>
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	bd70      	pop	{r4, r5, r6, pc}
 80086fc:	20004220 	.word	0x20004220

08008700 <_isatty_r>:
 8008700:	2300      	movs	r3, #0
 8008702:	b570      	push	{r4, r5, r6, lr}
 8008704:	4d06      	ldr	r5, [pc, #24]	; (8008720 <_isatty_r+0x20>)
 8008706:	0004      	movs	r4, r0
 8008708:	0008      	movs	r0, r1
 800870a:	602b      	str	r3, [r5, #0]
 800870c:	f7f8 faf7 	bl	8000cfe <_isatty>
 8008710:	1c43      	adds	r3, r0, #1
 8008712:	d103      	bne.n	800871c <_isatty_r+0x1c>
 8008714:	682b      	ldr	r3, [r5, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d000      	beq.n	800871c <_isatty_r+0x1c>
 800871a:	6023      	str	r3, [r4, #0]
 800871c:	bd70      	pop	{r4, r5, r6, pc}
 800871e:	46c0      	nop			; (mov r8, r8)
 8008720:	20004220 	.word	0x20004220

08008724 <_init>:
 8008724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008726:	46c0      	nop			; (mov r8, r8)
 8008728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800872a:	bc08      	pop	{r3}
 800872c:	469e      	mov	lr, r3
 800872e:	4770      	bx	lr

08008730 <_fini>:
 8008730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008732:	46c0      	nop			; (mov r8, r8)
 8008734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008736:	bc08      	pop	{r3}
 8008738:	469e      	mov	lr, r3
 800873a:	4770      	bx	lr
