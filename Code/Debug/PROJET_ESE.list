
PROJET_ESE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004870  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004928  08004928  00014928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a04  08004a04  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004a04  08004a04  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a04  08004a04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a04  08004a04  00014a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a08  08004a08  00014a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  2000000c  08004a18  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08004a18  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011491  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027a4  00000000  00000000  00031508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd8  00000000  00000000  00033cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c6d  00000000  00000000  00034c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000170b3  00000000  00000000  000358f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014450  00000000  00000000  0004c9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009486d  00000000  00000000  00060df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038e4  00000000  00000000  000f5668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000f8f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004910 	.word	0x08004910

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08004910 	.word	0x08004910

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	0018      	movs	r0, r3
 80003f6:	230c      	movs	r3, #12
 80003f8:	001a      	movs	r2, r3
 80003fa:	2100      	movs	r1, #0
 80003fc:	f004 fa5c 	bl	80048b8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000400:	4b2d      	ldr	r3, [pc, #180]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000402:	4a2e      	ldr	r2, [pc, #184]	; (80004bc <MX_ADC1_Init+0xd0>)
 8000404:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000406:	4b2c      	ldr	r3, [pc, #176]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000408:	2280      	movs	r2, #128	; 0x80
 800040a:	05d2      	lsls	r2, r2, #23
 800040c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800040e:	4b2a      	ldr	r3, [pc, #168]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000414:	4b28      	ldr	r3, [pc, #160]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800041a:	4b27      	ldr	r3, [pc, #156]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000420:	4b25      	ldr	r3, [pc, #148]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000422:	2204      	movs	r2, #4
 8000424:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000426:	4b24      	ldr	r3, [pc, #144]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000428:	2200      	movs	r2, #0
 800042a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800042c:	4b22      	ldr	r3, [pc, #136]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800042e:	2200      	movs	r2, #0
 8000430:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000432:	4b21      	ldr	r3, [pc, #132]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000434:	2200      	movs	r2, #0
 8000436:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000438:	4b1f      	ldr	r3, [pc, #124]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800043a:	2201      	movs	r2, #1
 800043c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800043e:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000440:	2220      	movs	r2, #32
 8000442:	2100      	movs	r1, #0
 8000444:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000446:	4b1c      	ldr	r3, [pc, #112]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000448:	2200      	movs	r2, #0
 800044a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800044c:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800044e:	2200      	movs	r2, #0
 8000450:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000452:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000454:	222c      	movs	r2, #44	; 0x2c
 8000456:	2100      	movs	r1, #0
 8000458:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800045a:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800045c:	2200      	movs	r2, #0
 800045e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000460:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000462:	2200      	movs	r2, #0
 8000464:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000468:	2200      	movs	r2, #0
 800046a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800046e:	223c      	movs	r2, #60	; 0x3c
 8000470:	2100      	movs	r1, #0
 8000472:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000474:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000476:	2200      	movs	r2, #0
 8000478:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800047c:	0018      	movs	r0, r3
 800047e:	f001 f933 	bl	80016e8 <HAL_ADC_Init>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000486:	f000 f93c 	bl	8000702 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2201      	movs	r2, #1
 800048e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2200      	movs	r2, #0
 8000494:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800049c:	1d3a      	adds	r2, r7, #4
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <MX_ADC1_Init+0xcc>)
 80004a0:	0011      	movs	r1, r2
 80004a2:	0018      	movs	r0, r3
 80004a4:	f001 fac8 	bl	8001a38 <HAL_ADC_ConfigChannel>
 80004a8:	1e03      	subs	r3, r0, #0
 80004aa:	d001      	beq.n	80004b0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80004ac:	f000 f929 	bl	8000702 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b004      	add	sp, #16
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000028 	.word	0x20000028
 80004bc:	40012400 	.word	0x40012400

080004c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b08b      	sub	sp, #44	; 0x2c
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c8:	2414      	movs	r4, #20
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	0018      	movs	r0, r3
 80004ce:	2314      	movs	r3, #20
 80004d0:	001a      	movs	r2, r3
 80004d2:	2100      	movs	r1, #0
 80004d4:	f004 f9f0 	bl	80048b8 <memset>
  if(adcHandle->Instance==ADC1)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a18      	ldr	r2, [pc, #96]	; (8000540 <HAL_ADC_MspInit+0x80>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d129      	bne.n	8000536 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80004e2:	4b18      	ldr	r3, [pc, #96]	; (8000544 <HAL_ADC_MspInit+0x84>)
 80004e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004e6:	4b17      	ldr	r3, [pc, #92]	; (8000544 <HAL_ADC_MspInit+0x84>)
 80004e8:	2180      	movs	r1, #128	; 0x80
 80004ea:	0349      	lsls	r1, r1, #13
 80004ec:	430a      	orrs	r2, r1
 80004ee:	641a      	str	r2, [r3, #64]	; 0x40
 80004f0:	4b14      	ldr	r3, [pc, #80]	; (8000544 <HAL_ADC_MspInit+0x84>)
 80004f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	035b      	lsls	r3, r3, #13
 80004f8:	4013      	ands	r3, r2
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	4b11      	ldr	r3, [pc, #68]	; (8000544 <HAL_ADC_MspInit+0x84>)
 8000500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000502:	4b10      	ldr	r3, [pc, #64]	; (8000544 <HAL_ADC_MspInit+0x84>)
 8000504:	2101      	movs	r1, #1
 8000506:	430a      	orrs	r2, r1
 8000508:	635a      	str	r2, [r3, #52]	; 0x34
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_ADC_MspInit+0x84>)
 800050c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800050e:	2201      	movs	r2, #1
 8000510:	4013      	ands	r3, r2
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_IN0_BAT_LVL_Pin;
 8000516:	193b      	adds	r3, r7, r4
 8000518:	2201      	movs	r2, #1
 800051a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800051c:	193b      	adds	r3, r7, r4
 800051e:	2203      	movs	r2, #3
 8000520:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	193b      	adds	r3, r7, r4
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC1_IN0_BAT_LVL_GPIO_Port, &GPIO_InitStruct);
 8000528:	193a      	adds	r2, r7, r4
 800052a:	23a0      	movs	r3, #160	; 0xa0
 800052c:	05db      	lsls	r3, r3, #23
 800052e:	0011      	movs	r1, r2
 8000530:	0018      	movs	r0, r3
 8000532:	f001 fd0d 	bl	8001f50 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b00b      	add	sp, #44	; 0x2c
 800053c:	bd90      	pop	{r4, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	40012400 	.word	0x40012400
 8000544:	40021000 	.word	0x40021000

08000548 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b08b      	sub	sp, #44	; 0x2c
 800054c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054e:	2414      	movs	r4, #20
 8000550:	193b      	adds	r3, r7, r4
 8000552:	0018      	movs	r0, r3
 8000554:	2314      	movs	r3, #20
 8000556:	001a      	movs	r2, r3
 8000558:	2100      	movs	r1, #0
 800055a:	f004 f9ad 	bl	80048b8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800055e:	4b34      	ldr	r3, [pc, #208]	; (8000630 <MX_GPIO_Init+0xe8>)
 8000560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000562:	4b33      	ldr	r3, [pc, #204]	; (8000630 <MX_GPIO_Init+0xe8>)
 8000564:	2120      	movs	r1, #32
 8000566:	430a      	orrs	r2, r1
 8000568:	635a      	str	r2, [r3, #52]	; 0x34
 800056a:	4b31      	ldr	r3, [pc, #196]	; (8000630 <MX_GPIO_Init+0xe8>)
 800056c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800056e:	2220      	movs	r2, #32
 8000570:	4013      	ands	r3, r2
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b2e      	ldr	r3, [pc, #184]	; (8000630 <MX_GPIO_Init+0xe8>)
 8000578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800057a:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <MX_GPIO_Init+0xe8>)
 800057c:	2104      	movs	r1, #4
 800057e:	430a      	orrs	r2, r1
 8000580:	635a      	str	r2, [r3, #52]	; 0x34
 8000582:	4b2b      	ldr	r3, [pc, #172]	; (8000630 <MX_GPIO_Init+0xe8>)
 8000584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000586:	2204      	movs	r2, #4
 8000588:	4013      	ands	r3, r2
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	4b28      	ldr	r3, [pc, #160]	; (8000630 <MX_GPIO_Init+0xe8>)
 8000590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000592:	4b27      	ldr	r3, [pc, #156]	; (8000630 <MX_GPIO_Init+0xe8>)
 8000594:	2101      	movs	r1, #1
 8000596:	430a      	orrs	r2, r1
 8000598:	635a      	str	r2, [r3, #52]	; 0x34
 800059a:	4b25      	ldr	r3, [pc, #148]	; (8000630 <MX_GPIO_Init+0xe8>)
 800059c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800059e:	2201      	movs	r2, #1
 80005a0:	4013      	ands	r3, r2
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a6:	4b22      	ldr	r3, [pc, #136]	; (8000630 <MX_GPIO_Init+0xe8>)
 80005a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005aa:	4b21      	ldr	r3, [pc, #132]	; (8000630 <MX_GPIO_Init+0xe8>)
 80005ac:	2102      	movs	r1, #2
 80005ae:	430a      	orrs	r2, r1
 80005b0:	635a      	str	r2, [r3, #52]	; 0x34
 80005b2:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <MX_GPIO_Init+0xe8>)
 80005b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005b6:	2202      	movs	r2, #2
 80005b8:	4013      	ands	r3, r2
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005be:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <MX_GPIO_Init+0xe8>)
 80005c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005c2:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <MX_GPIO_Init+0xe8>)
 80005c4:	2108      	movs	r1, #8
 80005c6:	430a      	orrs	r2, r1
 80005c8:	635a      	str	r2, [r3, #52]	; 0x34
 80005ca:	4b19      	ldr	r3, [pc, #100]	; (8000630 <MX_GPIO_Init+0xe8>)
 80005cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ce:	2208      	movs	r2, #8
 80005d0:	4013      	ands	r3, r2
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEV_EN_Pin|M_EN_Pin|LED_R_Pin|LED_B_Pin, GPIO_PIN_RESET);
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_GPIO_Init+0xec>)
 80005d8:	2200      	movs	r2, #0
 80005da:	211e      	movs	r1, #30
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 fe1b 	bl	8002218 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = V_BORDURE_R_Pin|BUMPER_F_Pin|BUMPER_B_Pin|BUMPER_R_Pin
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	4a14      	ldr	r2, [pc, #80]	; (8000638 <MX_GPIO_Init+0xf0>)
 80005e6:	601a      	str	r2, [r3, #0]
                          |BUMPER_L_Pin|V_BORDURE_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	2202      	movs	r2, #2
 80005f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	4a0f      	ldr	r2, [pc, #60]	; (8000634 <MX_GPIO_Init+0xec>)
 80005f8:	0019      	movs	r1, r3
 80005fa:	0010      	movs	r0, r2
 80005fc:	f001 fca8 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DEV_EN_Pin|M_EN_Pin|LED_R_Pin|LED_B_Pin;
 8000600:	0021      	movs	r1, r4
 8000602:	187b      	adds	r3, r7, r1
 8000604:	221e      	movs	r2, #30
 8000606:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2201      	movs	r2, #1
 800060c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061a:	187b      	adds	r3, r7, r1
 800061c:	4a05      	ldr	r2, [pc, #20]	; (8000634 <MX_GPIO_Init+0xec>)
 800061e:	0019      	movs	r1, r3
 8000620:	0010      	movs	r0, r2
 8000622:	f001 fc95 	bl	8001f50 <HAL_GPIO_Init>

}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b00b      	add	sp, #44	; 0x2c
 800062c:	bd90      	pop	{r4, r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	40021000 	.word	0x40021000
 8000634:	50000400 	.word	0x50000400
 8000638:	000003e1 	.word	0x000003e1

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000640:	f000 fece 	bl	80013e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f815 	bl	8000672 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000648:	f7ff ff7e 	bl	8000548 <MX_GPIO_Init>
  MX_ADC1_Init();
 800064c:	f7ff fece 	bl	80003ec <MX_ADC1_Init>
  MX_TIM1_Init();
 8000650:	f000 f89c 	bl	800078c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000654:	f000 f904 	bl	8000860 <MX_TIM3_Init>
  MX_TIM14_Init();
 8000658:	f000 f966 	bl	8000928 <MX_TIM14_Init>
  MX_TIM15_Init();
 800065c:	f000 f9b4 	bl	80009c8 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000660:	f000 fa76 	bl	8000b50 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000664:	f000 fafc 	bl	8000c60 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8000668:	f000 fd4a 	bl	8001100 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800066c:	f000 fd96 	bl	800119c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000670:	e7fe      	b.n	8000670 <main+0x34>

08000672 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000672:	b590      	push	{r4, r7, lr}
 8000674:	b093      	sub	sp, #76	; 0x4c
 8000676:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000678:	2414      	movs	r4, #20
 800067a:	193b      	adds	r3, r7, r4
 800067c:	0018      	movs	r0, r3
 800067e:	2334      	movs	r3, #52	; 0x34
 8000680:	001a      	movs	r2, r3
 8000682:	2100      	movs	r1, #0
 8000684:	f004 f918 	bl	80048b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	0018      	movs	r0, r3
 800068c:	2310      	movs	r3, #16
 800068e:	001a      	movs	r2, r3
 8000690:	2100      	movs	r1, #0
 8000692:	f004 f911 	bl	80048b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000696:	2380      	movs	r3, #128	; 0x80
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	0018      	movs	r0, r3
 800069c:	f001 fdda 	bl	8002254 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	2202      	movs	r2, #2
 80006a4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	2280      	movs	r2, #128	; 0x80
 80006aa:	0052      	lsls	r2, r2, #1
 80006ac:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	2240      	movs	r2, #64	; 0x40
 80006b8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	2200      	movs	r2, #0
 80006be:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 fe12 	bl	80022ec <HAL_RCC_OscConfig>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006cc:	f000 f819 	bl	8000702 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2207      	movs	r2, #7
 80006d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2100      	movs	r1, #0
 80006ec:	0018      	movs	r0, r3
 80006ee:	f002 f90d 	bl	800290c <HAL_RCC_ClockConfig>
 80006f2:	1e03      	subs	r3, r0, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006f6:	f000 f804 	bl	8000702 <Error_Handler>
  }
}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b013      	add	sp, #76	; 0x4c
 8000700:	bd90      	pop	{r4, r7, pc}

08000702 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000706:	b672      	cpsid	i
}
 8000708:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070a:	e7fe      	b.n	800070a <Error_Handler+0x8>

0800070c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <HAL_MspInit+0x44>)
 8000714:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <HAL_MspInit+0x44>)
 8000718:	2101      	movs	r1, #1
 800071a:	430a      	orrs	r2, r1
 800071c:	641a      	str	r2, [r3, #64]	; 0x40
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <HAL_MspInit+0x44>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000722:	2201      	movs	r2, #1
 8000724:	4013      	ands	r3, r2
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <HAL_MspInit+0x44>)
 800072c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <HAL_MspInit+0x44>)
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	0549      	lsls	r1, r1, #21
 8000734:	430a      	orrs	r2, r1
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <HAL_MspInit+0x44>)
 800073a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	055b      	lsls	r3, r3, #21
 8000740:	4013      	ands	r3, r2
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b002      	add	sp, #8
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	40021000 	.word	0x40021000

08000754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <NMI_Handler+0x4>

0800075a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <HardFault_Handler+0x4>

08000760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000778:	f000 fe9c 	bl	80014b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b08d      	sub	sp, #52	; 0x34
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000792:	240c      	movs	r4, #12
 8000794:	193b      	adds	r3, r7, r4
 8000796:	0018      	movs	r0, r3
 8000798:	2324      	movs	r3, #36	; 0x24
 800079a:	001a      	movs	r2, r3
 800079c:	2100      	movs	r1, #0
 800079e:	f004 f88b 	bl	80048b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a2:	003b      	movs	r3, r7
 80007a4:	0018      	movs	r0, r3
 80007a6:	230c      	movs	r3, #12
 80007a8:	001a      	movs	r2, r3
 80007aa:	2100      	movs	r1, #0
 80007ac:	f004 f884 	bl	80048b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007b0:	4b28      	ldr	r3, [pc, #160]	; (8000854 <MX_TIM1_Init+0xc8>)
 80007b2:	4a29      	ldr	r2, [pc, #164]	; (8000858 <MX_TIM1_Init+0xcc>)
 80007b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007b6:	4b27      	ldr	r3, [pc, #156]	; (8000854 <MX_TIM1_Init+0xc8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007bc:	4b25      	ldr	r3, [pc, #148]	; (8000854 <MX_TIM1_Init+0xc8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007c2:	4b24      	ldr	r3, [pc, #144]	; (8000854 <MX_TIM1_Init+0xc8>)
 80007c4:	4a25      	ldr	r2, [pc, #148]	; (800085c <MX_TIM1_Init+0xd0>)
 80007c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c8:	4b22      	ldr	r3, [pc, #136]	; (8000854 <MX_TIM1_Init+0xc8>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_TIM1_Init+0xc8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d4:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <MX_TIM1_Init+0xc8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80007da:	0021      	movs	r1, r4
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2201      	movs	r2, #1
 80007e0:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2201      	movs	r2, #1
 80007ec:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2201      	movs	r2, #1
 8000804:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2200      	movs	r2, #0
 8000810:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000812:	187a      	adds	r2, r7, r1
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_TIM1_Init+0xc8>)
 8000816:	0011      	movs	r1, r2
 8000818:	0018      	movs	r0, r3
 800081a:	f002 fc0d 	bl	8003038 <HAL_TIM_Encoder_Init>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000822:	f7ff ff6e 	bl	8000702 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000826:	003b      	movs	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800082c:	003b      	movs	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000832:	003b      	movs	r3, r7
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000838:	003a      	movs	r2, r7
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_TIM1_Init+0xc8>)
 800083c:	0011      	movs	r1, r2
 800083e:	0018      	movs	r0, r3
 8000840:	f003 fa4e 	bl	8003ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000848:	f7ff ff5b 	bl	8000702 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b00d      	add	sp, #52	; 0x34
 8000852:	bd90      	pop	{r4, r7, pc}
 8000854:	2000008c 	.word	0x2000008c
 8000858:	40012c00 	.word	0x40012c00
 800085c:	0000ffff 	.word	0x0000ffff

08000860 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b08d      	sub	sp, #52	; 0x34
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000866:	240c      	movs	r4, #12
 8000868:	193b      	adds	r3, r7, r4
 800086a:	0018      	movs	r0, r3
 800086c:	2324      	movs	r3, #36	; 0x24
 800086e:	001a      	movs	r2, r3
 8000870:	2100      	movs	r1, #0
 8000872:	f004 f821 	bl	80048b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000876:	003b      	movs	r3, r7
 8000878:	0018      	movs	r0, r3
 800087a:	230c      	movs	r3, #12
 800087c:	001a      	movs	r2, r3
 800087e:	2100      	movs	r1, #0
 8000880:	f004 f81a 	bl	80048b8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000884:	4b25      	ldr	r3, [pc, #148]	; (800091c <MX_TIM3_Init+0xbc>)
 8000886:	4a26      	ldr	r2, [pc, #152]	; (8000920 <MX_TIM3_Init+0xc0>)
 8000888:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800088a:	4b24      	ldr	r3, [pc, #144]	; (800091c <MX_TIM3_Init+0xbc>)
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000890:	4b22      	ldr	r3, [pc, #136]	; (800091c <MX_TIM3_Init+0xbc>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000896:	4b21      	ldr	r3, [pc, #132]	; (800091c <MX_TIM3_Init+0xbc>)
 8000898:	4a22      	ldr	r2, [pc, #136]	; (8000924 <MX_TIM3_Init+0xc4>)
 800089a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089c:	4b1f      	ldr	r3, [pc, #124]	; (800091c <MX_TIM3_Init+0xbc>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a2:	4b1e      	ldr	r3, [pc, #120]	; (800091c <MX_TIM3_Init+0xbc>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008a8:	0021      	movs	r1, r4
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2201      	movs	r2, #1
 80008ae:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2200      	movs	r2, #0
 80008b4:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2201      	movs	r2, #1
 80008ba:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2200      	movs	r2, #0
 80008cc:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2201      	movs	r2, #1
 80008d2:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008e0:	187a      	adds	r2, r7, r1
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_TIM3_Init+0xbc>)
 80008e4:	0011      	movs	r1, r2
 80008e6:	0018      	movs	r0, r3
 80008e8:	f002 fba6 	bl	8003038 <HAL_TIM_Encoder_Init>
 80008ec:	1e03      	subs	r3, r0, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80008f0:	f7ff ff07 	bl	8000702 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f4:	003b      	movs	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fa:	003b      	movs	r3, r7
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000900:	003a      	movs	r2, r7
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_TIM3_Init+0xbc>)
 8000904:	0011      	movs	r1, r2
 8000906:	0018      	movs	r0, r3
 8000908:	f003 f9ea 	bl	8003ce0 <HAL_TIMEx_MasterConfigSynchronization>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000910:	f7ff fef7 	bl	8000702 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b00d      	add	sp, #52	; 0x34
 800091a:	bd90      	pop	{r4, r7, pc}
 800091c:	200000d8 	.word	0x200000d8
 8000920:	40000400 	.word	0x40000400
 8000924:	0000ffff 	.word	0x0000ffff

08000928 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	0018      	movs	r0, r3
 8000932:	231c      	movs	r3, #28
 8000934:	001a      	movs	r2, r3
 8000936:	2100      	movs	r1, #0
 8000938:	f003 ffbe 	bl	80048b8 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800093c:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <MX_TIM14_Init+0x94>)
 800093e:	4a20      	ldr	r2, [pc, #128]	; (80009c0 <MX_TIM14_Init+0x98>)
 8000940:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000942:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <MX_TIM14_Init+0x94>)
 8000944:	2200      	movs	r2, #0
 8000946:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <MX_TIM14_Init+0x94>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800094e:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <MX_TIM14_Init+0x94>)
 8000950:	4a1c      	ldr	r2, [pc, #112]	; (80009c4 <MX_TIM14_Init+0x9c>)
 8000952:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000954:	4b19      	ldr	r3, [pc, #100]	; (80009bc <MX_TIM14_Init+0x94>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_TIM14_Init+0x94>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_TIM14_Init+0x94>)
 8000962:	0018      	movs	r0, r3
 8000964:	f002 fab0 	bl	8002ec8 <HAL_TIM_Base_Init>
 8000968:	1e03      	subs	r3, r0, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 800096c:	f7ff fec9 	bl	8000702 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_TIM14_Init+0x94>)
 8000972:	0018      	movs	r0, r3
 8000974:	f002 fb00 	bl	8002f78 <HAL_TIM_PWM_Init>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 800097c:	f7ff fec1 	bl	8000702 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2260      	movs	r2, #96	; 0x60
 8000984:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2200      	movs	r2, #0
 800098a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000998:	1d39      	adds	r1, r7, #4
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_TIM14_Init+0x94>)
 800099c:	2200      	movs	r2, #0
 800099e:	0018      	movs	r0, r3
 80009a0:	f002 fbf2 	bl	8003188 <HAL_TIM_PWM_ConfigChannel>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80009a8:	f7ff feab 	bl	8000702 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <MX_TIM14_Init+0x94>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f000 fac4 	bl	8000f3c <HAL_TIM_MspPostInit>

}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b008      	add	sp, #32
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000124 	.word	0x20000124
 80009c0:	40002000 	.word	0x40002000
 80009c4:	0000ffff 	.word	0x0000ffff

080009c8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b09c      	sub	sp, #112	; 0x70
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ce:	2360      	movs	r3, #96	; 0x60
 80009d0:	18fb      	adds	r3, r7, r3
 80009d2:	0018      	movs	r0, r3
 80009d4:	2310      	movs	r3, #16
 80009d6:	001a      	movs	r2, r3
 80009d8:	2100      	movs	r1, #0
 80009da:	f003 ff6d 	bl	80048b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009de:	2354      	movs	r3, #84	; 0x54
 80009e0:	18fb      	adds	r3, r7, r3
 80009e2:	0018      	movs	r0, r3
 80009e4:	230c      	movs	r3, #12
 80009e6:	001a      	movs	r2, r3
 80009e8:	2100      	movs	r1, #0
 80009ea:	f003 ff65 	bl	80048b8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ee:	2338      	movs	r3, #56	; 0x38
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	0018      	movs	r0, r3
 80009f4:	231c      	movs	r3, #28
 80009f6:	001a      	movs	r2, r3
 80009f8:	2100      	movs	r1, #0
 80009fa:	f003 ff5d 	bl	80048b8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	0018      	movs	r0, r3
 8000a02:	2334      	movs	r3, #52	; 0x34
 8000a04:	001a      	movs	r2, r3
 8000a06:	2100      	movs	r1, #0
 8000a08:	f003 ff56 	bl	80048b8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000a0c:	4b4d      	ldr	r3, [pc, #308]	; (8000b44 <MX_TIM15_Init+0x17c>)
 8000a0e:	4a4e      	ldr	r2, [pc, #312]	; (8000b48 <MX_TIM15_Init+0x180>)
 8000a10:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000a12:	4b4c      	ldr	r3, [pc, #304]	; (8000b44 <MX_TIM15_Init+0x17c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a18:	4b4a      	ldr	r3, [pc, #296]	; (8000b44 <MX_TIM15_Init+0x17c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000a1e:	4b49      	ldr	r3, [pc, #292]	; (8000b44 <MX_TIM15_Init+0x17c>)
 8000a20:	4a4a      	ldr	r2, [pc, #296]	; (8000b4c <MX_TIM15_Init+0x184>)
 8000a22:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a24:	4b47      	ldr	r3, [pc, #284]	; (8000b44 <MX_TIM15_Init+0x17c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000a2a:	4b46      	ldr	r3, [pc, #280]	; (8000b44 <MX_TIM15_Init+0x17c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a30:	4b44      	ldr	r3, [pc, #272]	; (8000b44 <MX_TIM15_Init+0x17c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000a36:	4b43      	ldr	r3, [pc, #268]	; (8000b44 <MX_TIM15_Init+0x17c>)
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f002 fa45 	bl	8002ec8 <HAL_TIM_Base_Init>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8000a42:	f7ff fe5e 	bl	8000702 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a46:	2160      	movs	r1, #96	; 0x60
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	0152      	lsls	r2, r2, #5
 8000a4e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000a50:	187a      	adds	r2, r7, r1
 8000a52:	4b3c      	ldr	r3, [pc, #240]	; (8000b44 <MX_TIM15_Init+0x17c>)
 8000a54:	0011      	movs	r1, r2
 8000a56:	0018      	movs	r0, r3
 8000a58:	f002 fc96 	bl	8003388 <HAL_TIM_ConfigClockSource>
 8000a5c:	1e03      	subs	r3, r0, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8000a60:	f7ff fe4f 	bl	8000702 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000a64:	4b37      	ldr	r3, [pc, #220]	; (8000b44 <MX_TIM15_Init+0x17c>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f002 fa86 	bl	8002f78 <HAL_TIM_PWM_Init>
 8000a6c:	1e03      	subs	r3, r0, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8000a70:	f7ff fe47 	bl	8000702 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a74:	2154      	movs	r1, #84	; 0x54
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000a82:	187a      	adds	r2, r7, r1
 8000a84:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <MX_TIM15_Init+0x17c>)
 8000a86:	0011      	movs	r1, r2
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f003 f929 	bl	8003ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8e:	1e03      	subs	r3, r0, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8000a92:	f7ff fe36 	bl	8000702 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a96:	2138      	movs	r1, #56	; 0x38
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2260      	movs	r2, #96	; 0x60
 8000a9c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2200      	movs	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac2:	1879      	adds	r1, r7, r1
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <MX_TIM15_Init+0x17c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 fb5d 	bl	8003188 <HAL_TIM_PWM_ConfigChannel>
 8000ace:	1e03      	subs	r3, r0, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000ad2:	f7ff fe16 	bl	8000702 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ad6:	2338      	movs	r3, #56	; 0x38
 8000ad8:	18f9      	adds	r1, r7, r3
 8000ada:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <MX_TIM15_Init+0x17c>)
 8000adc:	2204      	movs	r2, #4
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f002 fb52 	bl	8003188 <HAL_TIM_PWM_ConfigChannel>
 8000ae4:	1e03      	subs	r3, r0, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 8000ae8:	f7ff fe0b 	bl	8000702 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2200      	movs	r2, #0
 8000af6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2280      	movs	r2, #128	; 0x80
 8000b0e:	0192      	lsls	r2, r2, #6
 8000b10:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000b1e:	1d3a      	adds	r2, r7, #4
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_TIM15_Init+0x17c>)
 8000b22:	0011      	movs	r1, r2
 8000b24:	0018      	movs	r0, r3
 8000b26:	f003 f943 	bl	8003db0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b2a:	1e03      	subs	r3, r0, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM15_Init+0x16a>
  {
    Error_Handler();
 8000b2e:	f7ff fde8 	bl	8000702 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000b32:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <MX_TIM15_Init+0x17c>)
 8000b34:	0018      	movs	r0, r3
 8000b36:	f000 fa01 	bl	8000f3c <HAL_TIM_MspPostInit>

}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b01c      	add	sp, #112	; 0x70
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	20000170 	.word	0x20000170
 8000b48:	40014000 	.word	0x40014000
 8000b4c:	0000ffff 	.word	0x0000ffff

08000b50 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b094      	sub	sp, #80	; 0x50
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b56:	2334      	movs	r3, #52	; 0x34
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	231c      	movs	r3, #28
 8000b5e:	001a      	movs	r2, r3
 8000b60:	2100      	movs	r1, #0
 8000b62:	f003 fea9 	bl	80048b8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b66:	003b      	movs	r3, r7
 8000b68:	0018      	movs	r0, r3
 8000b6a:	2334      	movs	r3, #52	; 0x34
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	2100      	movs	r1, #0
 8000b70:	f003 fea2 	bl	80048b8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b74:	4b37      	ldr	r3, [pc, #220]	; (8000c54 <MX_TIM16_Init+0x104>)
 8000b76:	4a38      	ldr	r2, [pc, #224]	; (8000c58 <MX_TIM16_Init+0x108>)
 8000b78:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000b7a:	4b36      	ldr	r3, [pc, #216]	; (8000c54 <MX_TIM16_Init+0x104>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b80:	4b34      	ldr	r3, [pc, #208]	; (8000c54 <MX_TIM16_Init+0x104>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000b86:	4b33      	ldr	r3, [pc, #204]	; (8000c54 <MX_TIM16_Init+0x104>)
 8000b88:	4a34      	ldr	r2, [pc, #208]	; (8000c5c <MX_TIM16_Init+0x10c>)
 8000b8a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8c:	4b31      	ldr	r3, [pc, #196]	; (8000c54 <MX_TIM16_Init+0x104>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b92:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <MX_TIM16_Init+0x104>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b98:	4b2e      	ldr	r3, [pc, #184]	; (8000c54 <MX_TIM16_Init+0x104>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <MX_TIM16_Init+0x104>)
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f002 f991 	bl	8002ec8 <HAL_TIM_Base_Init>
 8000ba6:	1e03      	subs	r3, r0, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000baa:	f7ff fdaa 	bl	8000702 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <MX_TIM16_Init+0x104>)
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f002 f9e1 	bl	8002f78 <HAL_TIM_PWM_Init>
 8000bb6:	1e03      	subs	r3, r0, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8000bba:	f7ff fda2 	bl	8000702 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bbe:	2134      	movs	r1, #52	; 0x34
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2260      	movs	r2, #96	; 0x60
 8000bc4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2200      	movs	r2, #0
 8000bca:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	2200      	movs	r2, #0
 8000be2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bea:	1879      	adds	r1, r7, r1
 8000bec:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <MX_TIM16_Init+0x104>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f002 fac9 	bl	8003188 <HAL_TIM_PWM_ConfigChannel>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8000bfa:	f7ff fd82 	bl	8000702 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bfe:	003b      	movs	r3, r7
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c04:	003b      	movs	r3, r7
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c10:	003b      	movs	r3, r7
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c16:	003b      	movs	r3, r7
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c1c:	003b      	movs	r3, r7
 8000c1e:	2280      	movs	r2, #128	; 0x80
 8000c20:	0192      	lsls	r2, r2, #6
 8000c22:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c24:	003b      	movs	r3, r7
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c2a:	003b      	movs	r3, r7
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000c30:	003a      	movs	r2, r7
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <MX_TIM16_Init+0x104>)
 8000c34:	0011      	movs	r1, r2
 8000c36:	0018      	movs	r0, r3
 8000c38:	f003 f8ba 	bl	8003db0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c3c:	1e03      	subs	r3, r0, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8000c40:	f7ff fd5f 	bl	8000702 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <MX_TIM16_Init+0x104>)
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 f978 	bl	8000f3c <HAL_TIM_MspPostInit>

}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b014      	add	sp, #80	; 0x50
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	200001bc 	.word	0x200001bc
 8000c58:	40014400 	.word	0x40014400
 8000c5c:	0000ffff 	.word	0x0000ffff

08000c60 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b094      	sub	sp, #80	; 0x50
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c66:	2334      	movs	r3, #52	; 0x34
 8000c68:	18fb      	adds	r3, r7, r3
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	231c      	movs	r3, #28
 8000c6e:	001a      	movs	r2, r3
 8000c70:	2100      	movs	r1, #0
 8000c72:	f003 fe21 	bl	80048b8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c76:	003b      	movs	r3, r7
 8000c78:	0018      	movs	r0, r3
 8000c7a:	2334      	movs	r3, #52	; 0x34
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	2100      	movs	r1, #0
 8000c80:	f003 fe1a 	bl	80048b8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000c84:	4b37      	ldr	r3, [pc, #220]	; (8000d64 <MX_TIM17_Init+0x104>)
 8000c86:	4a38      	ldr	r2, [pc, #224]	; (8000d68 <MX_TIM17_Init+0x108>)
 8000c88:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000c8a:	4b36      	ldr	r3, [pc, #216]	; (8000d64 <MX_TIM17_Init+0x104>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c90:	4b34      	ldr	r3, [pc, #208]	; (8000d64 <MX_TIM17_Init+0x104>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000c96:	4b33      	ldr	r3, [pc, #204]	; (8000d64 <MX_TIM17_Init+0x104>)
 8000c98:	4a34      	ldr	r2, [pc, #208]	; (8000d6c <MX_TIM17_Init+0x10c>)
 8000c9a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9c:	4b31      	ldr	r3, [pc, #196]	; (8000d64 <MX_TIM17_Init+0x104>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000ca2:	4b30      	ldr	r3, [pc, #192]	; (8000d64 <MX_TIM17_Init+0x104>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca8:	4b2e      	ldr	r3, [pc, #184]	; (8000d64 <MX_TIM17_Init+0x104>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000cae:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <MX_TIM17_Init+0x104>)
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f002 f909 	bl	8002ec8 <HAL_TIM_Base_Init>
 8000cb6:	1e03      	subs	r3, r0, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8000cba:	f7ff fd22 	bl	8000702 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000cbe:	4b29      	ldr	r3, [pc, #164]	; (8000d64 <MX_TIM17_Init+0x104>)
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f002 f959 	bl	8002f78 <HAL_TIM_PWM_Init>
 8000cc6:	1e03      	subs	r3, r0, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8000cca:	f7ff fd1a 	bl	8000702 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cce:	2134      	movs	r1, #52	; 0x34
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	2260      	movs	r2, #96	; 0x60
 8000cd4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	2200      	movs	r2, #0
 8000cda:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cfa:	1879      	adds	r1, r7, r1
 8000cfc:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <MX_TIM17_Init+0x104>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	0018      	movs	r0, r3
 8000d02:	f002 fa41 	bl	8003188 <HAL_TIM_PWM_ConfigChannel>
 8000d06:	1e03      	subs	r3, r0, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8000d0a:	f7ff fcfa 	bl	8000702 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d0e:	003b      	movs	r3, r7
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d14:	003b      	movs	r3, r7
 8000d16:	2200      	movs	r2, #0
 8000d18:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d1a:	003b      	movs	r3, r7
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d20:	003b      	movs	r3, r7
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d26:	003b      	movs	r3, r7
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d2c:	003b      	movs	r3, r7
 8000d2e:	2280      	movs	r2, #128	; 0x80
 8000d30:	0192      	lsls	r2, r2, #6
 8000d32:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d34:	003b      	movs	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d3a:	003b      	movs	r3, r7
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000d40:	003a      	movs	r2, r7
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <MX_TIM17_Init+0x104>)
 8000d44:	0011      	movs	r1, r2
 8000d46:	0018      	movs	r0, r3
 8000d48:	f003 f832 	bl	8003db0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d4c:	1e03      	subs	r3, r0, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8000d50:	f7ff fcd7 	bl	8000702 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <MX_TIM17_Init+0x104>)
 8000d56:	0018      	movs	r0, r3
 8000d58:	f000 f8f0 	bl	8000f3c <HAL_TIM_MspPostInit>

}
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b014      	add	sp, #80	; 0x50
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000208 	.word	0x20000208
 8000d68:	40014800 	.word	0x40014800
 8000d6c:	0000ffff 	.word	0x0000ffff

08000d70 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b08d      	sub	sp, #52	; 0x34
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	241c      	movs	r4, #28
 8000d7a:	193b      	adds	r3, r7, r4
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	2314      	movs	r3, #20
 8000d80:	001a      	movs	r2, r3
 8000d82:	2100      	movs	r1, #0
 8000d84:	f003 fd98 	bl	80048b8 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a36      	ldr	r2, [pc, #216]	; (8000e68 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d131      	bne.n	8000df6 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d92:	4b36      	ldr	r3, [pc, #216]	; (8000e6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8000d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d96:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	0109      	lsls	r1, r1, #4
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	641a      	str	r2, [r3, #64]	; 0x40
 8000da0:	4b32      	ldr	r3, [pc, #200]	; (8000e6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8000da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	011b      	lsls	r3, r3, #4
 8000da8:	4013      	ands	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
 8000dac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dae:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8000db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000db2:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8000db4:	2104      	movs	r1, #4
 8000db6:	430a      	orrs	r2, r1
 8000db8:	635a      	str	r2, [r3, #52]	; 0x34
 8000dba:	4b2c      	ldr	r3, [pc, #176]	; (8000e6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8000dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dbe:	2204      	movs	r2, #4
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC8     ------> TIM1_CH1
    PC9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH1_ENCODER_RB_Pin|TIM1_CH2_ENCODER_RA_Pin;
 8000dc6:	193b      	adds	r3, r7, r4
 8000dc8:	22c0      	movs	r2, #192	; 0xc0
 8000dca:	0092      	lsls	r2, r2, #2
 8000dcc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	0021      	movs	r1, r4
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2202      	movs	r2, #2
 8000de6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	4a21      	ldr	r2, [pc, #132]	; (8000e70 <HAL_TIM_Encoder_MspInit+0x100>)
 8000dec:	0019      	movs	r1, r3
 8000dee:	0010      	movs	r0, r2
 8000df0:	f001 f8ae 	bl	8001f50 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000df4:	e033      	b.n	8000e5e <HAL_TIM_Encoder_MspInit+0xee>
  else if(tim_encoderHandle->Instance==TIM3)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a1e      	ldr	r2, [pc, #120]	; (8000e74 <HAL_TIM_Encoder_MspInit+0x104>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d12e      	bne.n	8000e5e <HAL_TIM_Encoder_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8000e02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e04:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8000e06:	2102      	movs	r1, #2
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8000e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e10:	2202      	movs	r2, #2
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8000e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8000e1e:	2101      	movs	r1, #1
 8000e20:	430a      	orrs	r2, r1
 8000e22:	635a      	str	r2, [r3, #52]	; 0x34
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8000e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e28:	2201      	movs	r2, #1
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_ENCODER_LA_Pin|TIM3_CH2_ENCODER_LB_Pin;
 8000e30:	211c      	movs	r1, #28
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	22c0      	movs	r2, #192	; 0xc0
 8000e36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	187a      	adds	r2, r7, r1
 8000e52:	23a0      	movs	r3, #160	; 0xa0
 8000e54:	05db      	lsls	r3, r3, #23
 8000e56:	0011      	movs	r1, r2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f001 f879 	bl	8001f50 <HAL_GPIO_Init>
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b00d      	add	sp, #52	; 0x34
 8000e64:	bd90      	pop	{r4, r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	40012c00 	.word	0x40012c00
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	50000800 	.word	0x50000800
 8000e74:	40000400 	.word	0x40000400

08000e78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a28      	ldr	r2, [pc, #160]	; (8000f28 <HAL_TIM_Base_MspInit+0xb0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d10e      	bne.n	8000ea8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000e8a:	4b28      	ldr	r3, [pc, #160]	; (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000e8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e8e:	4b27      	ldr	r3, [pc, #156]	; (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000e90:	2180      	movs	r1, #128	; 0x80
 8000e92:	0209      	lsls	r1, r1, #8
 8000e94:	430a      	orrs	r2, r1
 8000e96:	641a      	str	r2, [r3, #64]	; 0x40
 8000e98:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000ea6:	e03a      	b.n	8000f1e <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM15)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a20      	ldr	r2, [pc, #128]	; (8000f30 <HAL_TIM_Base_MspInit+0xb8>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d10e      	bne.n	8000ed0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000eb2:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000eb8:	2180      	movs	r1, #128	; 0x80
 8000eba:	0249      	lsls	r1, r1, #9
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	641a      	str	r2, [r3, #64]	; 0x40
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000ec2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	025b      	lsls	r3, r3, #9
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
}
 8000ece:	e026      	b.n	8000f1e <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM16)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a17      	ldr	r2, [pc, #92]	; (8000f34 <HAL_TIM_Base_MspInit+0xbc>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d10e      	bne.n	8000ef8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000edc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000ee0:	2180      	movs	r1, #128	; 0x80
 8000ee2:	0289      	lsls	r1, r1, #10
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ee8:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	029b      	lsls	r3, r3, #10
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
}
 8000ef6:	e012      	b.n	8000f1e <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM17)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <HAL_TIM_Base_MspInit+0xc0>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d10d      	bne.n	8000f1e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000f08:	2180      	movs	r1, #128	; 0x80
 8000f0a:	02c9      	lsls	r1, r1, #11
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	641a      	str	r2, [r3, #64]	; 0x40
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000f12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	02db      	lsls	r3, r3, #11
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	46bd      	mov	sp, r7
 8000f22:	b006      	add	sp, #24
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	40002000 	.word	0x40002000
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40014000 	.word	0x40014000
 8000f34:	40014400 	.word	0x40014400
 8000f38:	40014800 	.word	0x40014800

08000f3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b08d      	sub	sp, #52	; 0x34
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	241c      	movs	r4, #28
 8000f46:	193b      	adds	r3, r7, r4
 8000f48:	0018      	movs	r0, r3
 8000f4a:	2314      	movs	r3, #20
 8000f4c:	001a      	movs	r2, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	f003 fcb2 	bl	80048b8 <memset>
  if(timHandle->Instance==TIM14)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a62      	ldr	r2, [pc, #392]	; (80010e4 <HAL_TIM_MspPostInit+0x1a8>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d123      	bne.n	8000fa6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b62      	ldr	r3, [pc, #392]	; (80010e8 <HAL_TIM_MspPostInit+0x1ac>)
 8000f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f62:	4b61      	ldr	r3, [pc, #388]	; (80010e8 <HAL_TIM_MspPostInit+0x1ac>)
 8000f64:	2101      	movs	r1, #1
 8000f66:	430a      	orrs	r2, r1
 8000f68:	635a      	str	r2, [r3, #52]	; 0x34
 8000f6a:	4b5f      	ldr	r3, [pc, #380]	; (80010e8 <HAL_TIM_MspPostInit+0x1ac>)
 8000f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
 8000f74:	69bb      	ldr	r3, [r7, #24]
    /**TIM14 GPIO Configuration
    PA4     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = TIM14_CH1_M_SCTR_Pin;
 8000f76:	0021      	movs	r1, r4
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	2210      	movs	r2, #16
 8000f7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	187b      	adds	r3, r7, r1
 8000f80:	2202      	movs	r2, #2
 8000f82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	2204      	movs	r2, #4
 8000f94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM14_CH1_M_SCTR_GPIO_Port, &GPIO_InitStruct);
 8000f96:	187a      	adds	r2, r7, r1
 8000f98:	23a0      	movs	r3, #160	; 0xa0
 8000f9a:	05db      	lsls	r3, r3, #23
 8000f9c:	0011      	movs	r1, r2
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 ffd6 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000fa4:	e099      	b.n	80010da <HAL_TIM_MspPostInit+0x19e>
  else if(timHandle->Instance==TIM15)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a50      	ldr	r2, [pc, #320]	; (80010ec <HAL_TIM_MspPostInit+0x1b0>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d145      	bne.n	800103c <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb0:	4b4d      	ldr	r3, [pc, #308]	; (80010e8 <HAL_TIM_MspPostInit+0x1ac>)
 8000fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fb4:	4b4c      	ldr	r3, [pc, #304]	; (80010e8 <HAL_TIM_MspPostInit+0x1ac>)
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	635a      	str	r2, [r3, #52]	; 0x34
 8000fbc:	4b4a      	ldr	r3, [pc, #296]	; (80010e8 <HAL_TIM_MspPostInit+0x1ac>)
 8000fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b47      	ldr	r3, [pc, #284]	; (80010e8 <HAL_TIM_MspPostInit+0x1ac>)
 8000fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fcc:	4b46      	ldr	r3, [pc, #280]	; (80010e8 <HAL_TIM_MspPostInit+0x1ac>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	635a      	str	r2, [r3, #52]	; 0x34
 8000fd4:	4b44      	ldr	r3, [pc, #272]	; (80010e8 <HAL_TIM_MspPostInit+0x1ac>)
 8000fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM15_CH2_REV_MR_Pin;
 8000fe0:	241c      	movs	r4, #28
 8000fe2:	193b      	adds	r3, r7, r4
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	193b      	adds	r3, r7, r4
 8000fea:	2202      	movs	r2, #2
 8000fec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	193b      	adds	r3, r7, r4
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	193b      	adds	r3, r7, r4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 8000ffa:	193b      	adds	r3, r7, r4
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM15_CH2_REV_MR_GPIO_Port, &GPIO_InitStruct);
 8001000:	193b      	adds	r3, r7, r4
 8001002:	4a3b      	ldr	r2, [pc, #236]	; (80010f0 <HAL_TIM_MspPostInit+0x1b4>)
 8001004:	0019      	movs	r1, r3
 8001006:	0010      	movs	r0, r2
 8001008:	f000 ffa2 	bl	8001f50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM15_CH1_REV_ML_Pin;
 800100c:	0021      	movs	r1, r4
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2204      	movs	r2, #4
 8001012:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	187b      	adds	r3, r7, r1
 8001016:	2202      	movs	r2, #2
 8001018:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	187b      	adds	r3, r7, r1
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	187b      	adds	r3, r7, r1
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 8001026:	187b      	adds	r3, r7, r1
 8001028:	2205      	movs	r2, #5
 800102a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM15_CH1_REV_ML_GPIO_Port, &GPIO_InitStruct);
 800102c:	187a      	adds	r2, r7, r1
 800102e:	23a0      	movs	r3, #160	; 0xa0
 8001030:	05db      	lsls	r3, r3, #23
 8001032:	0011      	movs	r1, r2
 8001034:	0018      	movs	r0, r3
 8001036:	f000 ff8b 	bl	8001f50 <HAL_GPIO_Init>
}
 800103a:	e04e      	b.n	80010da <HAL_TIM_MspPostInit+0x19e>
  else if(timHandle->Instance==TIM16)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a2c      	ldr	r2, [pc, #176]	; (80010f4 <HAL_TIM_MspPostInit+0x1b8>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d122      	bne.n	800108c <HAL_TIM_MspPostInit+0x150>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001046:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <HAL_TIM_MspPostInit+0x1ac>)
 8001048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <HAL_TIM_MspPostInit+0x1ac>)
 800104c:	2108      	movs	r1, #8
 800104e:	430a      	orrs	r2, r1
 8001050:	635a      	str	r2, [r3, #52]	; 0x34
 8001052:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <HAL_TIM_MspPostInit+0x1ac>)
 8001054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001056:	2208      	movs	r2, #8
 8001058:	4013      	ands	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM16_CH1_FWD_ML_Pin;
 800105e:	211c      	movs	r1, #28
 8001060:	187b      	adds	r3, r7, r1
 8001062:	2201      	movs	r2, #1
 8001064:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	187b      	adds	r3, r7, r1
 8001068:	2202      	movs	r2, #2
 800106a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	187b      	adds	r3, r7, r1
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	187b      	adds	r3, r7, r1
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8001078:	187b      	adds	r3, r7, r1
 800107a:	2202      	movs	r2, #2
 800107c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM16_CH1_FWD_ML_GPIO_Port, &GPIO_InitStruct);
 800107e:	187b      	adds	r3, r7, r1
 8001080:	4a1d      	ldr	r2, [pc, #116]	; (80010f8 <HAL_TIM_MspPostInit+0x1bc>)
 8001082:	0019      	movs	r1, r3
 8001084:	0010      	movs	r0, r2
 8001086:	f000 ff63 	bl	8001f50 <HAL_GPIO_Init>
}
 800108a:	e026      	b.n	80010da <HAL_TIM_MspPostInit+0x19e>
  else if(timHandle->Instance==TIM17)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a1a      	ldr	r2, [pc, #104]	; (80010fc <HAL_TIM_MspPostInit+0x1c0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d121      	bne.n	80010da <HAL_TIM_MspPostInit+0x19e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <HAL_TIM_MspPostInit+0x1ac>)
 8001098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <HAL_TIM_MspPostInit+0x1ac>)
 800109c:	2108      	movs	r1, #8
 800109e:	430a      	orrs	r2, r1
 80010a0:	635a      	str	r2, [r3, #52]	; 0x34
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_TIM_MspPostInit+0x1ac>)
 80010a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a6:	2208      	movs	r2, #8
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM17_CH1_FWD_MR_Pin;
 80010ae:	211c      	movs	r1, #28
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	2202      	movs	r2, #2
 80010b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2202      	movs	r2, #2
 80010ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	2202      	movs	r2, #2
 80010cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM17_CH1_FWD_MR_GPIO_Port, &GPIO_InitStruct);
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	4a09      	ldr	r2, [pc, #36]	; (80010f8 <HAL_TIM_MspPostInit+0x1bc>)
 80010d2:	0019      	movs	r1, r3
 80010d4:	0010      	movs	r0, r2
 80010d6:	f000 ff3b 	bl	8001f50 <HAL_GPIO_Init>
}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b00d      	add	sp, #52	; 0x34
 80010e0:	bd90      	pop	{r4, r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	40002000 	.word	0x40002000
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40014000 	.word	0x40014000
 80010f0:	50000800 	.word	0x50000800
 80010f4:	40014400 	.word	0x40014400
 80010f8:	50000c00 	.word	0x50000c00
 80010fc:	40014800 	.word	0x40014800

08001100 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <MX_USART1_UART_Init+0x94>)
 8001106:	4a24      	ldr	r2, [pc, #144]	; (8001198 <MX_USART1_UART_Init+0x98>)
 8001108:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800110a:	4b22      	ldr	r3, [pc, #136]	; (8001194 <MX_USART1_UART_Init+0x94>)
 800110c:	22e1      	movs	r2, #225	; 0xe1
 800110e:	0252      	lsls	r2, r2, #9
 8001110:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001112:	4b20      	ldr	r3, [pc, #128]	; (8001194 <MX_USART1_UART_Init+0x94>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001118:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <MX_USART1_UART_Init+0x94>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800111e:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <MX_USART1_UART_Init+0x94>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <MX_USART1_UART_Init+0x94>)
 8001126:	220c      	movs	r2, #12
 8001128:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_USART1_UART_Init+0x94>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <MX_USART1_UART_Init+0x94>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <MX_USART1_UART_Init+0x94>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <MX_USART1_UART_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_USART1_UART_Init+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_USART1_UART_Init+0x94>)
 800114a:	0018      	movs	r0, r3
 800114c:	f002 fed6 	bl	8003efc <HAL_UART_Init>
 8001150:	1e03      	subs	r3, r0, #0
 8001152:	d001      	beq.n	8001158 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001154:	f7ff fad5 	bl	8000702 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_USART1_UART_Init+0x94>)
 800115a:	2100      	movs	r1, #0
 800115c:	0018      	movs	r0, r3
 800115e:	f003 facb 	bl	80046f8 <HAL_UARTEx_SetTxFifoThreshold>
 8001162:	1e03      	subs	r3, r0, #0
 8001164:	d001      	beq.n	800116a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001166:	f7ff facc 	bl	8000702 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <MX_USART1_UART_Init+0x94>)
 800116c:	2100      	movs	r1, #0
 800116e:	0018      	movs	r0, r3
 8001170:	f003 fb02 	bl	8004778 <HAL_UARTEx_SetRxFifoThreshold>
 8001174:	1e03      	subs	r3, r0, #0
 8001176:	d001      	beq.n	800117c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001178:	f7ff fac3 	bl	8000702 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <MX_USART1_UART_Init+0x94>)
 800117e:	0018      	movs	r0, r3
 8001180:	f003 fa80 	bl	8004684 <HAL_UARTEx_DisableFifoMode>
 8001184:	1e03      	subs	r3, r0, #0
 8001186:	d001      	beq.n	800118c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001188:	f7ff fabb 	bl	8000702 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	20000254 	.word	0x20000254
 8001198:	40013800 	.word	0x40013800

0800119c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011a0:	4b23      	ldr	r3, [pc, #140]	; (8001230 <MX_USART2_UART_Init+0x94>)
 80011a2:	4a24      	ldr	r2, [pc, #144]	; (8001234 <MX_USART2_UART_Init+0x98>)
 80011a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011a6:	4b22      	ldr	r3, [pc, #136]	; (8001230 <MX_USART2_UART_Init+0x94>)
 80011a8:	22e1      	movs	r2, #225	; 0xe1
 80011aa:	0252      	lsls	r2, r2, #9
 80011ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <MX_USART2_UART_Init+0x94>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011b4:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <MX_USART2_UART_Init+0x94>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <MX_USART2_UART_Init+0x94>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_USART2_UART_Init+0x94>)
 80011c2:	220c      	movs	r2, #12
 80011c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_USART2_UART_Init+0x94>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_USART2_UART_Init+0x94>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_USART2_UART_Init+0x94>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_USART2_UART_Init+0x94>)
 80011da:	2200      	movs	r2, #0
 80011dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_USART2_UART_Init+0x94>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_USART2_UART_Init+0x94>)
 80011e6:	0018      	movs	r0, r3
 80011e8:	f002 fe88 	bl	8003efc <HAL_UART_Init>
 80011ec:	1e03      	subs	r3, r0, #0
 80011ee:	d001      	beq.n	80011f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011f0:	f7ff fa87 	bl	8000702 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_USART2_UART_Init+0x94>)
 80011f6:	2100      	movs	r1, #0
 80011f8:	0018      	movs	r0, r3
 80011fa:	f003 fa7d 	bl	80046f8 <HAL_UARTEx_SetTxFifoThreshold>
 80011fe:	1e03      	subs	r3, r0, #0
 8001200:	d001      	beq.n	8001206 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001202:	f7ff fa7e 	bl	8000702 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <MX_USART2_UART_Init+0x94>)
 8001208:	2100      	movs	r1, #0
 800120a:	0018      	movs	r0, r3
 800120c:	f003 fab4 	bl	8004778 <HAL_UARTEx_SetRxFifoThreshold>
 8001210:	1e03      	subs	r3, r0, #0
 8001212:	d001      	beq.n	8001218 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001214:	f7ff fa75 	bl	8000702 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <MX_USART2_UART_Init+0x94>)
 800121a:	0018      	movs	r0, r3
 800121c:	f003 fa32 	bl	8004684 <HAL_UARTEx_DisableFifoMode>
 8001220:	1e03      	subs	r3, r0, #0
 8001222:	d001      	beq.n	8001228 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001224:	f7ff fa6d 	bl	8000702 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001228:	46c0      	nop			; (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	200002e8 	.word	0x200002e8
 8001234:	40004400 	.word	0x40004400

08001238 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b093      	sub	sp, #76	; 0x4c
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	2334      	movs	r3, #52	; 0x34
 8001242:	18fb      	adds	r3, r7, r3
 8001244:	0018      	movs	r0, r3
 8001246:	2314      	movs	r3, #20
 8001248:	001a      	movs	r2, r3
 800124a:	2100      	movs	r1, #0
 800124c:	f003 fb34 	bl	80048b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001250:	2418      	movs	r4, #24
 8001252:	193b      	adds	r3, r7, r4
 8001254:	0018      	movs	r0, r3
 8001256:	231c      	movs	r3, #28
 8001258:	001a      	movs	r2, r3
 800125a:	2100      	movs	r1, #0
 800125c:	f003 fb2c 	bl	80048b8 <memset>
  if(uartHandle->Instance==USART1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a44      	ldr	r2, [pc, #272]	; (8001378 <HAL_UART_MspInit+0x140>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d13e      	bne.n	80012e8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800126a:	193b      	adds	r3, r7, r4
 800126c:	2201      	movs	r2, #1
 800126e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001270:	193b      	adds	r3, r7, r4
 8001272:	2200      	movs	r2, #0
 8001274:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001276:	193b      	adds	r3, r7, r4
 8001278:	0018      	movs	r0, r3
 800127a:	f001 fcf1 	bl	8002c60 <HAL_RCCEx_PeriphCLKConfig>
 800127e:	1e03      	subs	r3, r0, #0
 8001280:	d001      	beq.n	8001286 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001282:	f7ff fa3e 	bl	8000702 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001286:	4b3d      	ldr	r3, [pc, #244]	; (800137c <HAL_UART_MspInit+0x144>)
 8001288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800128a:	4b3c      	ldr	r3, [pc, #240]	; (800137c <HAL_UART_MspInit+0x144>)
 800128c:	2180      	movs	r1, #128	; 0x80
 800128e:	01c9      	lsls	r1, r1, #7
 8001290:	430a      	orrs	r2, r1
 8001292:	641a      	str	r2, [r3, #64]	; 0x40
 8001294:	4b39      	ldr	r3, [pc, #228]	; (800137c <HAL_UART_MspInit+0x144>)
 8001296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	01db      	lsls	r3, r3, #7
 800129c:	4013      	ands	r3, r2
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	4b36      	ldr	r3, [pc, #216]	; (800137c <HAL_UART_MspInit+0x144>)
 80012a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012a6:	4b35      	ldr	r3, [pc, #212]	; (800137c <HAL_UART_MspInit+0x144>)
 80012a8:	2104      	movs	r1, #4
 80012aa:	430a      	orrs	r2, r1
 80012ac:	635a      	str	r2, [r3, #52]	; 0x34
 80012ae:	4b33      	ldr	r3, [pc, #204]	; (800137c <HAL_UART_MspInit+0x144>)
 80012b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b2:	2204      	movs	r2, #4
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_VCP_TX_Pin|USART1_RX_VCP_RX_Pin;
 80012ba:	2134      	movs	r1, #52	; 0x34
 80012bc:	187b      	adds	r3, r7, r1
 80012be:	2230      	movs	r2, #48	; 0x30
 80012c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	187b      	adds	r3, r7, r1
 80012c4:	2202      	movs	r2, #2
 80012c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	187b      	adds	r3, r7, r1
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	187b      	adds	r3, r7, r1
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	2201      	movs	r2, #1
 80012d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012da:	187b      	adds	r3, r7, r1
 80012dc:	4a28      	ldr	r2, [pc, #160]	; (8001380 <HAL_UART_MspInit+0x148>)
 80012de:	0019      	movs	r1, r3
 80012e0:	0010      	movs	r0, r2
 80012e2:	f000 fe35 	bl	8001f50 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012e6:	e043      	b.n	8001370 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART2)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a25      	ldr	r2, [pc, #148]	; (8001384 <HAL_UART_MspInit+0x14c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d13e      	bne.n	8001370 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012f2:	2118      	movs	r1, #24
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	2202      	movs	r2, #2
 80012f8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012fa:	187b      	adds	r3, r7, r1
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001300:	187b      	adds	r3, r7, r1
 8001302:	0018      	movs	r0, r3
 8001304:	f001 fcac 	bl	8002c60 <HAL_RCCEx_PeriphCLKConfig>
 8001308:	1e03      	subs	r3, r0, #0
 800130a:	d001      	beq.n	8001310 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 800130c:	f7ff f9f9 	bl	8000702 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001310:	4b1a      	ldr	r3, [pc, #104]	; (800137c <HAL_UART_MspInit+0x144>)
 8001312:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <HAL_UART_MspInit+0x144>)
 8001316:	2180      	movs	r1, #128	; 0x80
 8001318:	0289      	lsls	r1, r1, #10
 800131a:	430a      	orrs	r2, r1
 800131c:	63da      	str	r2, [r3, #60]	; 0x3c
 800131e:	4b17      	ldr	r3, [pc, #92]	; (800137c <HAL_UART_MspInit+0x144>)
 8001320:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	029b      	lsls	r3, r3, #10
 8001326:	4013      	ands	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800132c:	4b13      	ldr	r3, [pc, #76]	; (800137c <HAL_UART_MspInit+0x144>)
 800132e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_UART_MspInit+0x144>)
 8001332:	2108      	movs	r1, #8
 8001334:	430a      	orrs	r2, r1
 8001336:	635a      	str	r2, [r3, #52]	; 0x34
 8001338:	4b10      	ldr	r3, [pc, #64]	; (800137c <HAL_UART_MspInit+0x144>)
 800133a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800133c:	2208      	movs	r2, #8
 800133e:	4013      	ands	r3, r2
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_LIDAR_TX_Pin|USART2_RX_LIDAR_RX_Pin;
 8001344:	2134      	movs	r1, #52	; 0x34
 8001346:	187b      	adds	r3, r7, r1
 8001348:	2260      	movs	r2, #96	; 0x60
 800134a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	187b      	adds	r3, r7, r1
 800134e:	2202      	movs	r2, #2
 8001350:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	187b      	adds	r3, r7, r1
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	187b      	adds	r3, r7, r1
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 800135e:	187b      	adds	r3, r7, r1
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001364:	187b      	adds	r3, r7, r1
 8001366:	4a08      	ldr	r2, [pc, #32]	; (8001388 <HAL_UART_MspInit+0x150>)
 8001368:	0019      	movs	r1, r3
 800136a:	0010      	movs	r0, r2
 800136c:	f000 fdf0 	bl	8001f50 <HAL_GPIO_Init>
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b013      	add	sp, #76	; 0x4c
 8001376:	bd90      	pop	{r4, r7, pc}
 8001378:	40013800 	.word	0x40013800
 800137c:	40021000 	.word	0x40021000
 8001380:	50000800 	.word	0x50000800
 8001384:	40004400 	.word	0x40004400
 8001388:	50000c00 	.word	0x50000c00

0800138c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800138c:	480d      	ldr	r0, [pc, #52]	; (80013c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800138e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001390:	f7ff f9f7 	bl	8000782 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001394:	480c      	ldr	r0, [pc, #48]	; (80013c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001396:	490d      	ldr	r1, [pc, #52]	; (80013cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001398:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <LoopForever+0xe>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800139c:	e002      	b.n	80013a4 <LoopCopyDataInit>

0800139e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a2:	3304      	adds	r3, #4

080013a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a8:	d3f9      	bcc.n	800139e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013aa:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013ac:	4c0a      	ldr	r4, [pc, #40]	; (80013d8 <LoopForever+0x16>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b0:	e001      	b.n	80013b6 <LoopFillZerobss>

080013b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b4:	3204      	adds	r2, #4

080013b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b8:	d3fb      	bcc.n	80013b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013ba:	f003 fa85 	bl	80048c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80013be:	f7ff f93d 	bl	800063c <main>

080013c2 <LoopForever>:

LoopForever:
  b LoopForever
 80013c2:	e7fe      	b.n	80013c2 <LoopForever>
  ldr   r0, =_estack
 80013c4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80013c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013d0:	08004a0c 	.word	0x08004a0c
  ldr r2, =_sbss
 80013d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013d8:	20000380 	.word	0x20000380

080013dc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013dc:	e7fe      	b.n	80013dc <ADC1_IRQHandler>
	...

080013e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013e6:	1dfb      	adds	r3, r7, #7
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_Init+0x3c>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <HAL_Init+0x3c>)
 80013f2:	2180      	movs	r1, #128	; 0x80
 80013f4:	0049      	lsls	r1, r1, #1
 80013f6:	430a      	orrs	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013fa:	2003      	movs	r0, #3
 80013fc:	f000 f810 	bl	8001420 <HAL_InitTick>
 8001400:	1e03      	subs	r3, r0, #0
 8001402:	d003      	beq.n	800140c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001404:	1dfb      	adds	r3, r7, #7
 8001406:	2201      	movs	r2, #1
 8001408:	701a      	strb	r2, [r3, #0]
 800140a:	e001      	b.n	8001410 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800140c:	f7ff f97e 	bl	800070c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001410:	1dfb      	adds	r3, r7, #7
 8001412:	781b      	ldrb	r3, [r3, #0]
}
 8001414:	0018      	movs	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	b002      	add	sp, #8
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40022000 	.word	0x40022000

08001420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001428:	230f      	movs	r3, #15
 800142a:	18fb      	adds	r3, r7, r3
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <HAL_InitTick+0x88>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d02b      	beq.n	8001490 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001438:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <HAL_InitTick+0x8c>)
 800143a:	681c      	ldr	r4, [r3, #0]
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <HAL_InitTick+0x88>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	0019      	movs	r1, r3
 8001442:	23fa      	movs	r3, #250	; 0xfa
 8001444:	0098      	lsls	r0, r3, #2
 8001446:	f7fe fe5b 	bl	8000100 <__udivsi3>
 800144a:	0003      	movs	r3, r0
 800144c:	0019      	movs	r1, r3
 800144e:	0020      	movs	r0, r4
 8001450:	f7fe fe56 	bl	8000100 <__udivsi3>
 8001454:	0003      	movs	r3, r0
 8001456:	0018      	movs	r0, r3
 8001458:	f000 fd6d 	bl	8001f36 <HAL_SYSTICK_Config>
 800145c:	1e03      	subs	r3, r0, #0
 800145e:	d112      	bne.n	8001486 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b03      	cmp	r3, #3
 8001464:	d80a      	bhi.n	800147c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	2301      	movs	r3, #1
 800146a:	425b      	negs	r3, r3
 800146c:	2200      	movs	r2, #0
 800146e:	0018      	movs	r0, r3
 8001470:	f000 fd4c 	bl	8001f0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <HAL_InitTick+0x90>)
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	e00d      	b.n	8001498 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800147c:	230f      	movs	r3, #15
 800147e:	18fb      	adds	r3, r7, r3
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
 8001484:	e008      	b.n	8001498 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001486:	230f      	movs	r3, #15
 8001488:	18fb      	adds	r3, r7, r3
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
 800148e:	e003      	b.n	8001498 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001490:	230f      	movs	r3, #15
 8001492:	18fb      	adds	r3, r7, r3
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001498:	230f      	movs	r3, #15
 800149a:	18fb      	adds	r3, r7, r3
 800149c:	781b      	ldrb	r3, [r3, #0]
}
 800149e:	0018      	movs	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b005      	add	sp, #20
 80014a4:	bd90      	pop	{r4, r7, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	20000008 	.word	0x20000008
 80014ac:	20000000 	.word	0x20000000
 80014b0:	20000004 	.word	0x20000004

080014b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <HAL_IncTick+0x1c>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	001a      	movs	r2, r3
 80014be:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_IncTick+0x20>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	18d2      	adds	r2, r2, r3
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <HAL_IncTick+0x20>)
 80014c6:	601a      	str	r2, [r3, #0]
}
 80014c8:	46c0      	nop			; (mov r8, r8)
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	20000008 	.word	0x20000008
 80014d4:	2000037c 	.word	0x2000037c

080014d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b02      	ldr	r3, [pc, #8]	; (80014e8 <HAL_GetTick+0x10>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	0018      	movs	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	2000037c 	.word	0x2000037c

080014ec <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a05      	ldr	r2, [pc, #20]	; (8001510 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80014fc:	401a      	ands	r2, r3
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	601a      	str	r2, [r3, #0]
}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b002      	add	sp, #8
 800150c:	bd80      	pop	{r7, pc}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	fe3fffff 	.word	0xfe3fffff

08001514 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	23e0      	movs	r3, #224	; 0xe0
 8001522:	045b      	lsls	r3, r3, #17
 8001524:	4013      	ands	r3, r2
}
 8001526:	0018      	movs	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	b002      	add	sp, #8
 800152c:	bd80      	pop	{r7, pc}

0800152e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b084      	sub	sp, #16
 8001532:	af00      	add	r7, sp, #0
 8001534:	60f8      	str	r0, [r7, #12]
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	2104      	movs	r1, #4
 8001542:	400a      	ands	r2, r1
 8001544:	2107      	movs	r1, #7
 8001546:	4091      	lsls	r1, r2
 8001548:	000a      	movs	r2, r1
 800154a:	43d2      	mvns	r2, r2
 800154c:	401a      	ands	r2, r3
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	2104      	movs	r1, #4
 8001552:	400b      	ands	r3, r1
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	4099      	lsls	r1, r3
 8001558:	000b      	movs	r3, r1
 800155a:	431a      	orrs	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001560:	46c0      	nop			; (mov r8, r8)
 8001562:	46bd      	mov	sp, r7
 8001564:	b004      	add	sp, #16
 8001566:	bd80      	pop	{r7, pc}

08001568 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	2104      	movs	r1, #4
 800157a:	400a      	ands	r2, r1
 800157c:	2107      	movs	r1, #7
 800157e:	4091      	lsls	r1, r2
 8001580:	000a      	movs	r2, r1
 8001582:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	2104      	movs	r1, #4
 8001588:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800158a:	40da      	lsrs	r2, r3
 800158c:	0013      	movs	r3, r2
}
 800158e:	0018      	movs	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	b002      	add	sp, #8
 8001594:	bd80      	pop	{r7, pc}

08001596 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b084      	sub	sp, #16
 800159a:	af00      	add	r7, sp, #0
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	211f      	movs	r1, #31
 80015aa:	400a      	ands	r2, r1
 80015ac:	210f      	movs	r1, #15
 80015ae:	4091      	lsls	r1, r2
 80015b0:	000a      	movs	r2, r1
 80015b2:	43d2      	mvns	r2, r2
 80015b4:	401a      	ands	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	0e9b      	lsrs	r3, r3, #26
 80015ba:	210f      	movs	r1, #15
 80015bc:	4019      	ands	r1, r3
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	201f      	movs	r0, #31
 80015c2:	4003      	ands	r3, r0
 80015c4:	4099      	lsls	r1, r3
 80015c6:	000b      	movs	r3, r1
 80015c8:	431a      	orrs	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b004      	add	sp, #16
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	035b      	lsls	r3, r3, #13
 80015e8:	0b5b      	lsrs	r3, r3, #13
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015f0:	46c0      	nop			; (mov r8, r8)
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b002      	add	sp, #8
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	0352      	lsls	r2, r2, #13
 800160a:	0b52      	lsrs	r2, r2, #13
 800160c:	43d2      	mvns	r2, r2
 800160e:	401a      	ands	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001614:	46c0      	nop			; (mov r8, r8)
 8001616:	46bd      	mov	sp, r7
 8001618:	b002      	add	sp, #8
 800161a:	bd80      	pop	{r7, pc}

0800161c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	0212      	lsls	r2, r2, #8
 8001630:	43d2      	mvns	r2, r2
 8001632:	401a      	ands	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	400b      	ands	r3, r1
 800163c:	4904      	ldr	r1, [pc, #16]	; (8001650 <LL_ADC_SetChannelSamplingTime+0x34>)
 800163e:	400b      	ands	r3, r1
 8001640:	431a      	orrs	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	46bd      	mov	sp, r7
 800164a:	b004      	add	sp, #16
 800164c:	bd80      	pop	{r7, pc}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	07ffff00 	.word	0x07ffff00

08001654 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4a05      	ldr	r2, [pc, #20]	; (8001678 <LL_ADC_EnableInternalRegulator+0x24>)
 8001662:	4013      	ands	r3, r2
 8001664:	2280      	movs	r2, #128	; 0x80
 8001666:	0552      	lsls	r2, r2, #21
 8001668:	431a      	orrs	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	46bd      	mov	sp, r7
 8001672:	b002      	add	sp, #8
 8001674:	bd80      	pop	{r7, pc}
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	6fffffe8 	.word	0x6fffffe8

0800167c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	055b      	lsls	r3, r3, #21
 800168c:	401a      	ands	r2, r3
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	055b      	lsls	r3, r3, #21
 8001692:	429a      	cmp	r2, r3
 8001694:	d101      	bne.n	800169a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800169a:	2300      	movs	r3, #0
}
 800169c:	0018      	movs	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	b002      	add	sp, #8
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2201      	movs	r2, #1
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d101      	bne.n	80016bc <LL_ADC_IsEnabled+0x18>
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <LL_ADC_IsEnabled+0x1a>
 80016bc:	2300      	movs	r3, #0
}
 80016be:	0018      	movs	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b002      	add	sp, #8
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2204      	movs	r2, #4
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	d101      	bne.n	80016de <LL_ADC_REG_IsConversionOngoing+0x18>
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016de:	2300      	movs	r3, #0
}
 80016e0:	0018      	movs	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b002      	add	sp, #8
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f0:	231f      	movs	r3, #31
 80016f2:	18fb      	adds	r3, r7, r3
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e17f      	b.n	8001a0e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10a      	bne.n	800172c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	0018      	movs	r0, r3
 800171a:	f7fe fed1 	bl	80004c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2254      	movs	r2, #84	; 0x54
 8001728:	2100      	movs	r1, #0
 800172a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	0018      	movs	r0, r3
 8001732:	f7ff ffa3 	bl	800167c <LL_ADC_IsInternalRegulatorEnabled>
 8001736:	1e03      	subs	r3, r0, #0
 8001738:	d115      	bne.n	8001766 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	0018      	movs	r0, r3
 8001740:	f7ff ff88 	bl	8001654 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001744:	4bb4      	ldr	r3, [pc, #720]	; (8001a18 <HAL_ADC_Init+0x330>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	49b4      	ldr	r1, [pc, #720]	; (8001a1c <HAL_ADC_Init+0x334>)
 800174a:	0018      	movs	r0, r3
 800174c:	f7fe fcd8 	bl	8000100 <__udivsi3>
 8001750:	0003      	movs	r3, r0
 8001752:	3301      	adds	r3, #1
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001758:	e002      	b.n	8001760 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	3b01      	subs	r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f9      	bne.n	800175a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	0018      	movs	r0, r3
 800176c:	f7ff ff86 	bl	800167c <LL_ADC_IsInternalRegulatorEnabled>
 8001770:	1e03      	subs	r3, r0, #0
 8001772:	d10f      	bne.n	8001794 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001778:	2210      	movs	r2, #16
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001784:	2201      	movs	r2, #1
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800178c:	231f      	movs	r3, #31
 800178e:	18fb      	adds	r3, r7, r3
 8001790:	2201      	movs	r2, #1
 8001792:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	0018      	movs	r0, r3
 800179a:	f7ff ff94 	bl	80016c6 <LL_ADC_REG_IsConversionOngoing>
 800179e:	0003      	movs	r3, r0
 80017a0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a6:	2210      	movs	r2, #16
 80017a8:	4013      	ands	r3, r2
 80017aa:	d000      	beq.n	80017ae <HAL_ADC_Init+0xc6>
 80017ac:	e122      	b.n	80019f4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d000      	beq.n	80017b6 <HAL_ADC_Init+0xce>
 80017b4:	e11e      	b.n	80019f4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ba:	4a99      	ldr	r2, [pc, #612]	; (8001a20 <HAL_ADC_Init+0x338>)
 80017bc:	4013      	ands	r3, r2
 80017be:	2202      	movs	r2, #2
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	0018      	movs	r0, r3
 80017cc:	f7ff ff6a 	bl	80016a4 <LL_ADC_IsEnabled>
 80017d0:	1e03      	subs	r3, r0, #0
 80017d2:	d000      	beq.n	80017d6 <HAL_ADC_Init+0xee>
 80017d4:	e0ad      	b.n	8001932 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	7e1b      	ldrb	r3, [r3, #24]
 80017de:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80017e0:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	7e5b      	ldrb	r3, [r3, #25]
 80017e6:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80017e8:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	7e9b      	ldrb	r3, [r3, #26]
 80017ee:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80017f0:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <HAL_ADC_Init+0x118>
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	015b      	lsls	r3, r3, #5
 80017fe:	e000      	b.n	8001802 <HAL_ADC_Init+0x11a>
 8001800:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001802:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001808:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	2b00      	cmp	r3, #0
 8001810:	da04      	bge.n	800181c <HAL_ADC_Init+0x134>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	085b      	lsrs	r3, r3, #1
 800181a:	e001      	b.n	8001820 <HAL_ADC_Init+0x138>
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001820:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	212c      	movs	r1, #44	; 0x2c
 8001826:	5c5b      	ldrb	r3, [r3, r1]
 8001828:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800182a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2220      	movs	r2, #32
 8001836:	5c9b      	ldrb	r3, [r3, r2]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d115      	bne.n	8001868 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	7e9b      	ldrb	r3, [r3, #26]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d105      	bne.n	8001850 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	2280      	movs	r2, #128	; 0x80
 8001848:	0252      	lsls	r2, r2, #9
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	e00b      	b.n	8001868 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	2220      	movs	r2, #32
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001860:	2201      	movs	r2, #1
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00a      	beq.n	8001886 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001874:	23e0      	movs	r3, #224	; 0xe0
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800187e:	4313      	orrs	r3, r2
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	4a65      	ldr	r2, [pc, #404]	; (8001a24 <HAL_ADC_Init+0x33c>)
 800188e:	4013      	ands	r3, r2
 8001890:	0019      	movs	r1, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	430a      	orrs	r2, r1
 800189a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	0f9b      	lsrs	r3, r3, #30
 80018a2:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80018a8:	4313      	orrs	r3, r2
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	223c      	movs	r2, #60	; 0x3c
 80018b4:	5c9b      	ldrb	r3, [r3, r2]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d111      	bne.n	80018de <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	0f9b      	lsrs	r3, r3, #30
 80018c0:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80018c6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80018cc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80018d2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	2201      	movs	r2, #1
 80018da:	4313      	orrs	r3, r2
 80018dc:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	4a50      	ldr	r2, [pc, #320]	; (8001a28 <HAL_ADC_Init+0x340>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	0019      	movs	r1, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	23c0      	movs	r3, #192	; 0xc0
 80018fa:	061b      	lsls	r3, r3, #24
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d018      	beq.n	8001932 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	05db      	lsls	r3, r3, #23
 8001908:	429a      	cmp	r2, r3
 800190a:	d012      	beq.n	8001932 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	061b      	lsls	r3, r3, #24
 8001914:	429a      	cmp	r2, r3
 8001916:	d00c      	beq.n	8001932 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001918:	4b44      	ldr	r3, [pc, #272]	; (8001a2c <HAL_ADC_Init+0x344>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a44      	ldr	r2, [pc, #272]	; (8001a30 <HAL_ADC_Init+0x348>)
 800191e:	4013      	ands	r3, r2
 8001920:	0019      	movs	r1, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	23f0      	movs	r3, #240	; 0xf0
 8001928:	039b      	lsls	r3, r3, #14
 800192a:	401a      	ands	r2, r3
 800192c:	4b3f      	ldr	r3, [pc, #252]	; (8001a2c <HAL_ADC_Init+0x344>)
 800192e:	430a      	orrs	r2, r1
 8001930:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6818      	ldr	r0, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800193a:	001a      	movs	r2, r3
 800193c:	2100      	movs	r1, #0
 800193e:	f7ff fdf6 	bl	800152e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800194a:	493a      	ldr	r1, [pc, #232]	; (8001a34 <HAL_ADC_Init+0x34c>)
 800194c:	001a      	movs	r2, r3
 800194e:	f7ff fdee 	bl	800152e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d109      	bne.n	800196e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2110      	movs	r1, #16
 8001966:	4249      	negs	r1, r1
 8001968:	430a      	orrs	r2, r1
 800196a:	629a      	str	r2, [r3, #40]	; 0x28
 800196c:	e018      	b.n	80019a0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691a      	ldr	r2, [r3, #16]
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	039b      	lsls	r3, r3, #14
 8001976:	429a      	cmp	r2, r3
 8001978:	d112      	bne.n	80019a0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	3b01      	subs	r3, #1
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	221c      	movs	r2, #28
 800198a:	4013      	ands	r3, r2
 800198c:	2210      	movs	r2, #16
 800198e:	4252      	negs	r2, r2
 8001990:	409a      	lsls	r2, r3
 8001992:	0011      	movs	r1, r2
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2100      	movs	r1, #0
 80019a6:	0018      	movs	r0, r3
 80019a8:	f7ff fdde 	bl	8001568 <LL_ADC_GetSamplingTimeCommonChannels>
 80019ac:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d10b      	bne.n	80019ce <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c0:	2203      	movs	r2, #3
 80019c2:	4393      	bics	r3, r2
 80019c4:	2201      	movs	r2, #1
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80019cc:	e01c      	b.n	8001a08 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d2:	2212      	movs	r2, #18
 80019d4:	4393      	bics	r3, r2
 80019d6:	2210      	movs	r2, #16
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e2:	2201      	movs	r2, #1
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80019ea:	231f      	movs	r3, #31
 80019ec:	18fb      	adds	r3, r7, r3
 80019ee:	2201      	movs	r2, #1
 80019f0:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80019f2:	e009      	b.n	8001a08 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f8:	2210      	movs	r2, #16
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a00:	231f      	movs	r3, #31
 8001a02:	18fb      	adds	r3, r7, r3
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001a08:	231f      	movs	r3, #31
 8001a0a:	18fb      	adds	r3, r7, r3
 8001a0c:	781b      	ldrb	r3, [r3, #0]
}
 8001a0e:	0018      	movs	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b008      	add	sp, #32
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	00030d40 	.word	0x00030d40
 8001a20:	fffffefd 	.word	0xfffffefd
 8001a24:	fffe0201 	.word	0xfffe0201
 8001a28:	1ffffc02 	.word	0x1ffffc02
 8001a2c:	40012708 	.word	0x40012708
 8001a30:	ffc3ffff 	.word	0xffc3ffff
 8001a34:	07ffff04 	.word	0x07ffff04

08001a38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a42:	2317      	movs	r3, #23
 8001a44:	18fb      	adds	r3, r7, r3
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2254      	movs	r2, #84	; 0x54
 8001a52:	5c9b      	ldrb	r3, [r3, r2]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x24>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e1c0      	b.n	8001dde <HAL_ADC_ConfigChannel+0x3a6>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2254      	movs	r2, #84	; 0x54
 8001a60:	2101      	movs	r1, #1
 8001a62:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f7ff fe2c 	bl	80016c6 <LL_ADC_REG_IsConversionOngoing>
 8001a6e:	1e03      	subs	r3, r0, #0
 8001a70:	d000      	beq.n	8001a74 <HAL_ADC_ConfigChannel+0x3c>
 8001a72:	e1a3      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d100      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x46>
 8001a7c:	e143      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	061b      	lsls	r3, r3, #24
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d004      	beq.n	8001a94 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a8e:	4ac1      	ldr	r2, [pc, #772]	; (8001d94 <HAL_ADC_ConfigChannel+0x35c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d108      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	0010      	movs	r0, r2
 8001aa0:	f7ff fd99 	bl	80015d6 <LL_ADC_REG_SetSequencerChAdd>
 8001aa4:	e0c9      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	211f      	movs	r1, #31
 8001ab0:	400b      	ands	r3, r1
 8001ab2:	210f      	movs	r1, #15
 8001ab4:	4099      	lsls	r1, r3
 8001ab6:	000b      	movs	r3, r1
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	4013      	ands	r3, r2
 8001abc:	0019      	movs	r1, r3
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	035b      	lsls	r3, r3, #13
 8001ac4:	0b5b      	lsrs	r3, r3, #13
 8001ac6:	d105      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x9c>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	0e9b      	lsrs	r3, r3, #26
 8001ace:	221f      	movs	r2, #31
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	e098      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4013      	ands	r3, r2
 8001adc:	d000      	beq.n	8001ae0 <HAL_ADC_ConfigChannel+0xa8>
 8001ade:	e091      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x1cc>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d000      	beq.n	8001aec <HAL_ADC_ConfigChannel+0xb4>
 8001aea:	e089      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x1c8>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2204      	movs	r2, #4
 8001af2:	4013      	ands	r3, r2
 8001af4:	d000      	beq.n	8001af8 <HAL_ADC_ConfigChannel+0xc0>
 8001af6:	e081      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x1c4>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2208      	movs	r2, #8
 8001afe:	4013      	ands	r3, r2
 8001b00:	d000      	beq.n	8001b04 <HAL_ADC_ConfigChannel+0xcc>
 8001b02:	e079      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x1c0>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2210      	movs	r2, #16
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d000      	beq.n	8001b10 <HAL_ADC_ConfigChannel+0xd8>
 8001b0e:	e071      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x1bc>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2220      	movs	r2, #32
 8001b16:	4013      	ands	r3, r2
 8001b18:	d000      	beq.n	8001b1c <HAL_ADC_ConfigChannel+0xe4>
 8001b1a:	e069      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x1b8>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2240      	movs	r2, #64	; 0x40
 8001b22:	4013      	ands	r3, r2
 8001b24:	d000      	beq.n	8001b28 <HAL_ADC_ConfigChannel+0xf0>
 8001b26:	e061      	b.n	8001bec <HAL_ADC_ConfigChannel+0x1b4>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2280      	movs	r2, #128	; 0x80
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d000      	beq.n	8001b34 <HAL_ADC_ConfigChannel+0xfc>
 8001b32:	e059      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x1b0>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d151      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x1ac>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d149      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x1a8>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4013      	ands	r3, r2
 8001b56:	d141      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x1a4>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	011b      	lsls	r3, r3, #4
 8001b60:	4013      	ands	r3, r2
 8001b62:	d139      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x1a0>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	015b      	lsls	r3, r3, #5
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d131      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x19c>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	019b      	lsls	r3, r3, #6
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d129      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x198>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	01db      	lsls	r3, r3, #7
 8001b84:	4013      	ands	r3, r2
 8001b86:	d121      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x194>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	4013      	ands	r3, r2
 8001b92:	d119      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x190>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	025b      	lsls	r3, r3, #9
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d111      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x18c>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	029b      	lsls	r3, r3, #10
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d109      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x188>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	02db      	lsls	r3, r3, #11
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d001      	beq.n	8001bbc <HAL_ADC_ConfigChannel+0x184>
 8001bb8:	2312      	movs	r3, #18
 8001bba:	e024      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x1ce>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	e022      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x1ce>
 8001bc0:	2311      	movs	r3, #17
 8001bc2:	e020      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x1ce>
 8001bc4:	2310      	movs	r3, #16
 8001bc6:	e01e      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x1ce>
 8001bc8:	230f      	movs	r3, #15
 8001bca:	e01c      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x1ce>
 8001bcc:	230e      	movs	r3, #14
 8001bce:	e01a      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x1ce>
 8001bd0:	230d      	movs	r3, #13
 8001bd2:	e018      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x1ce>
 8001bd4:	230c      	movs	r3, #12
 8001bd6:	e016      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x1ce>
 8001bd8:	230b      	movs	r3, #11
 8001bda:	e014      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x1ce>
 8001bdc:	230a      	movs	r3, #10
 8001bde:	e012      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x1ce>
 8001be0:	2309      	movs	r3, #9
 8001be2:	e010      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x1ce>
 8001be4:	2308      	movs	r3, #8
 8001be6:	e00e      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x1ce>
 8001be8:	2307      	movs	r3, #7
 8001bea:	e00c      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x1ce>
 8001bec:	2306      	movs	r3, #6
 8001bee:	e00a      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x1ce>
 8001bf0:	2305      	movs	r3, #5
 8001bf2:	e008      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x1ce>
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	e006      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x1ce>
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e004      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x1ce>
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	e002      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x1ce>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x1ce>
 8001c04:	2300      	movs	r3, #0
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	6852      	ldr	r2, [r2, #4]
 8001c0a:	201f      	movs	r0, #31
 8001c0c:	4002      	ands	r2, r0
 8001c0e:	4093      	lsls	r3, r2
 8001c10:	000a      	movs	r2, r1
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	089b      	lsrs	r3, r3, #2
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d808      	bhi.n	8001c3a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	6859      	ldr	r1, [r3, #4]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	001a      	movs	r2, r3
 8001c36:	f7ff fcae 	bl	8001596 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6818      	ldr	r0, [r3, #0]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6819      	ldr	r1, [r3, #0]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	001a      	movs	r2, r3
 8001c48:	f7ff fce8 	bl	800161c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	db00      	blt.n	8001c56 <HAL_ADC_ConfigChannel+0x21e>
 8001c54:	e0bc      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c56:	4b50      	ldr	r3, [pc, #320]	; (8001d98 <HAL_ADC_ConfigChannel+0x360>)
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f7ff fc5b 	bl	8001514 <LL_ADC_GetCommonPathInternalCh>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a4d      	ldr	r2, [pc, #308]	; (8001d9c <HAL_ADC_ConfigChannel+0x364>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d122      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	041b      	lsls	r3, r3, #16
 8001c72:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c74:	d11d      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	0412      	lsls	r2, r2, #16
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	4a46      	ldr	r2, [pc, #280]	; (8001d98 <HAL_ADC_ConfigChannel+0x360>)
 8001c80:	0019      	movs	r1, r3
 8001c82:	0010      	movs	r0, r2
 8001c84:	f7ff fc32 	bl	80014ec <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c88:	4b45      	ldr	r3, [pc, #276]	; (8001da0 <HAL_ADC_ConfigChannel+0x368>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4945      	ldr	r1, [pc, #276]	; (8001da4 <HAL_ADC_ConfigChannel+0x36c>)
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f7fe fa36 	bl	8000100 <__udivsi3>
 8001c94:	0003      	movs	r3, r0
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	0013      	movs	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	189b      	adds	r3, r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ca2:	e002      	b.n	8001caa <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f9      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cb0:	e08e      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a3c      	ldr	r2, [pc, #240]	; (8001da8 <HAL_ADC_ConfigChannel+0x370>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d10e      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	045b      	lsls	r3, r3, #17
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d109      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	2280      	movs	r2, #128	; 0x80
 8001cca:	0452      	lsls	r2, r2, #17
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	4a32      	ldr	r2, [pc, #200]	; (8001d98 <HAL_ADC_ConfigChannel+0x360>)
 8001cd0:	0019      	movs	r1, r3
 8001cd2:	0010      	movs	r0, r2
 8001cd4:	f7ff fc0a 	bl	80014ec <LL_ADC_SetCommonPathInternalCh>
 8001cd8:	e07a      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a33      	ldr	r2, [pc, #204]	; (8001dac <HAL_ADC_ConfigChannel+0x374>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d000      	beq.n	8001ce6 <HAL_ADC_ConfigChannel+0x2ae>
 8001ce4:	e074      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	03db      	lsls	r3, r3, #15
 8001cec:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001cee:	d000      	beq.n	8001cf2 <HAL_ADC_ConfigChannel+0x2ba>
 8001cf0:	e06e      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2280      	movs	r2, #128	; 0x80
 8001cf6:	03d2      	lsls	r2, r2, #15
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	4a27      	ldr	r2, [pc, #156]	; (8001d98 <HAL_ADC_ConfigChannel+0x360>)
 8001cfc:	0019      	movs	r1, r3
 8001cfe:	0010      	movs	r0, r2
 8001d00:	f7ff fbf4 	bl	80014ec <LL_ADC_SetCommonPathInternalCh>
 8001d04:	e064      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691a      	ldr	r2, [r3, #16]
 8001d0a:	2380      	movs	r3, #128	; 0x80
 8001d0c:	061b      	lsls	r3, r3, #24
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d004      	beq.n	8001d1c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d16:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <HAL_ADC_ConfigChannel+0x35c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d107      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	0019      	movs	r1, r3
 8001d26:	0010      	movs	r0, r2
 8001d28:	f7ff fc66 	bl	80015f8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	da4d      	bge.n	8001dd0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d34:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <HAL_ADC_ConfigChannel+0x360>)
 8001d36:	0018      	movs	r0, r3
 8001d38:	f7ff fbec 	bl	8001514 <LL_ADC_GetCommonPathInternalCh>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a15      	ldr	r2, [pc, #84]	; (8001d9c <HAL_ADC_ConfigChannel+0x364>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d108      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4a18      	ldr	r2, [pc, #96]	; (8001db0 <HAL_ADC_ConfigChannel+0x378>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	4a11      	ldr	r2, [pc, #68]	; (8001d98 <HAL_ADC_ConfigChannel+0x360>)
 8001d52:	0019      	movs	r1, r3
 8001d54:	0010      	movs	r0, r2
 8001d56:	f7ff fbc9 	bl	80014ec <LL_ADC_SetCommonPathInternalCh>
 8001d5a:	e039      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a11      	ldr	r2, [pc, #68]	; (8001da8 <HAL_ADC_ConfigChannel+0x370>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d108      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <HAL_ADC_ConfigChannel+0x37c>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <HAL_ADC_ConfigChannel+0x360>)
 8001d6e:	0019      	movs	r1, r3
 8001d70:	0010      	movs	r0, r2
 8001d72:	f7ff fbbb 	bl	80014ec <LL_ADC_SetCommonPathInternalCh>
 8001d76:	e02b      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0b      	ldr	r2, [pc, #44]	; (8001dac <HAL_ADC_ConfigChannel+0x374>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d126      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4a0c      	ldr	r2, [pc, #48]	; (8001db8 <HAL_ADC_ConfigChannel+0x380>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	4a03      	ldr	r2, [pc, #12]	; (8001d98 <HAL_ADC_ConfigChannel+0x360>)
 8001d8a:	0019      	movs	r1, r3
 8001d8c:	0010      	movs	r0, r2
 8001d8e:	f7ff fbad 	bl	80014ec <LL_ADC_SetCommonPathInternalCh>
 8001d92:	e01d      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x398>
 8001d94:	80000004 	.word	0x80000004
 8001d98:	40012708 	.word	0x40012708
 8001d9c:	b0001000 	.word	0xb0001000
 8001da0:	20000000 	.word	0x20000000
 8001da4:	00030d40 	.word	0x00030d40
 8001da8:	b8004000 	.word	0xb8004000
 8001dac:	b4002000 	.word	0xb4002000
 8001db0:	ff7fffff 	.word	0xff7fffff
 8001db4:	feffffff 	.word	0xfeffffff
 8001db8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001dc8:	2317      	movs	r3, #23
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	2201      	movs	r2, #1
 8001dce:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2254      	movs	r2, #84	; 0x54
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001dd8:	2317      	movs	r3, #23
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	781b      	ldrb	r3, [r3, #0]
}
 8001dde:	0018      	movs	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	b006      	add	sp, #24
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	46c0      	nop			; (mov r8, r8)

08001de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	0002      	movs	r2, r0
 8001df0:	6039      	str	r1, [r7, #0]
 8001df2:	1dfb      	adds	r3, r7, #7
 8001df4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001df6:	1dfb      	adds	r3, r7, #7
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8001dfc:	d828      	bhi.n	8001e50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dfe:	4a2f      	ldr	r2, [pc, #188]	; (8001ebc <__NVIC_SetPriority+0xd4>)
 8001e00:	1dfb      	adds	r3, r7, #7
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	b25b      	sxtb	r3, r3
 8001e06:	089b      	lsrs	r3, r3, #2
 8001e08:	33c0      	adds	r3, #192	; 0xc0
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	589b      	ldr	r3, [r3, r2]
 8001e0e:	1dfa      	adds	r2, r7, #7
 8001e10:	7812      	ldrb	r2, [r2, #0]
 8001e12:	0011      	movs	r1, r2
 8001e14:	2203      	movs	r2, #3
 8001e16:	400a      	ands	r2, r1
 8001e18:	00d2      	lsls	r2, r2, #3
 8001e1a:	21ff      	movs	r1, #255	; 0xff
 8001e1c:	4091      	lsls	r1, r2
 8001e1e:	000a      	movs	r2, r1
 8001e20:	43d2      	mvns	r2, r2
 8001e22:	401a      	ands	r2, r3
 8001e24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	019b      	lsls	r3, r3, #6
 8001e2a:	22ff      	movs	r2, #255	; 0xff
 8001e2c:	401a      	ands	r2, r3
 8001e2e:	1dfb      	adds	r3, r7, #7
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	0018      	movs	r0, r3
 8001e34:	2303      	movs	r3, #3
 8001e36:	4003      	ands	r3, r0
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e3c:	481f      	ldr	r0, [pc, #124]	; (8001ebc <__NVIC_SetPriority+0xd4>)
 8001e3e:	1dfb      	adds	r3, r7, #7
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	b25b      	sxtb	r3, r3
 8001e44:	089b      	lsrs	r3, r3, #2
 8001e46:	430a      	orrs	r2, r1
 8001e48:	33c0      	adds	r3, #192	; 0xc0
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e4e:	e031      	b.n	8001eb4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e50:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <__NVIC_SetPriority+0xd8>)
 8001e52:	1dfb      	adds	r3, r7, #7
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	0019      	movs	r1, r3
 8001e58:	230f      	movs	r3, #15
 8001e5a:	400b      	ands	r3, r1
 8001e5c:	3b08      	subs	r3, #8
 8001e5e:	089b      	lsrs	r3, r3, #2
 8001e60:	3306      	adds	r3, #6
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	18d3      	adds	r3, r2, r3
 8001e66:	3304      	adds	r3, #4
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	1dfa      	adds	r2, r7, #7
 8001e6c:	7812      	ldrb	r2, [r2, #0]
 8001e6e:	0011      	movs	r1, r2
 8001e70:	2203      	movs	r2, #3
 8001e72:	400a      	ands	r2, r1
 8001e74:	00d2      	lsls	r2, r2, #3
 8001e76:	21ff      	movs	r1, #255	; 0xff
 8001e78:	4091      	lsls	r1, r2
 8001e7a:	000a      	movs	r2, r1
 8001e7c:	43d2      	mvns	r2, r2
 8001e7e:	401a      	ands	r2, r3
 8001e80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	019b      	lsls	r3, r3, #6
 8001e86:	22ff      	movs	r2, #255	; 0xff
 8001e88:	401a      	ands	r2, r3
 8001e8a:	1dfb      	adds	r3, r7, #7
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	0018      	movs	r0, r3
 8001e90:	2303      	movs	r3, #3
 8001e92:	4003      	ands	r3, r0
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e98:	4809      	ldr	r0, [pc, #36]	; (8001ec0 <__NVIC_SetPriority+0xd8>)
 8001e9a:	1dfb      	adds	r3, r7, #7
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	001c      	movs	r4, r3
 8001ea0:	230f      	movs	r3, #15
 8001ea2:	4023      	ands	r3, r4
 8001ea4:	3b08      	subs	r3, #8
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	3306      	adds	r3, #6
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	18c3      	adds	r3, r0, r3
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	601a      	str	r2, [r3, #0]
}
 8001eb4:	46c0      	nop			; (mov r8, r8)
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	b003      	add	sp, #12
 8001eba:	bd90      	pop	{r4, r7, pc}
 8001ebc:	e000e100 	.word	0xe000e100
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	1e5a      	subs	r2, r3, #1
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	045b      	lsls	r3, r3, #17
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d301      	bcc.n	8001edc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e010      	b.n	8001efe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <SysTick_Config+0x44>)
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	3a01      	subs	r2, #1
 8001ee2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	2103      	movs	r1, #3
 8001eea:	0018      	movs	r0, r3
 8001eec:	f7ff ff7c 	bl	8001de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <SysTick_Config+0x44>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <SysTick_Config+0x44>)
 8001ef8:	2207      	movs	r2, #7
 8001efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	0018      	movs	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	b002      	add	sp, #8
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	e000e010 	.word	0xe000e010

08001f0c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
 8001f16:	210f      	movs	r1, #15
 8001f18:	187b      	adds	r3, r7, r1
 8001f1a:	1c02      	adds	r2, r0, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	187b      	adds	r3, r7, r1
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	b25b      	sxtb	r3, r3
 8001f26:	0011      	movs	r1, r2
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f7ff ff5d 	bl	8001de8 <__NVIC_SetPriority>
}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b004      	add	sp, #16
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	0018      	movs	r0, r3
 8001f42:	f7ff ffbf 	bl	8001ec4 <SysTick_Config>
 8001f46:	0003      	movs	r3, r0
}
 8001f48:	0018      	movs	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b002      	add	sp, #8
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5e:	e147      	b.n	80021f0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2101      	movs	r1, #1
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4091      	lsls	r1, r2
 8001f6a:	000a      	movs	r2, r1
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d100      	bne.n	8001f78 <HAL_GPIO_Init+0x28>
 8001f76:	e138      	b.n	80021ea <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d005      	beq.n	8001f90 <HAL_GPIO_Init+0x40>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2203      	movs	r2, #3
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d130      	bne.n	8001ff2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	0013      	movs	r3, r2
 8001fa0:	43da      	mvns	r2, r3
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	0013      	movs	r3, r2
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	0013      	movs	r3, r2
 8001fce:	43da      	mvns	r2, r3
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	091b      	lsrs	r3, r3, #4
 8001fdc:	2201      	movs	r2, #1
 8001fde:	401a      	ands	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	0013      	movs	r3, r2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d017      	beq.n	800202e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	2203      	movs	r2, #3
 800200a:	409a      	lsls	r2, r3
 800200c:	0013      	movs	r3, r2
 800200e:	43da      	mvns	r2, r3
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4013      	ands	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	409a      	lsls	r2, r3
 8002020:	0013      	movs	r3, r2
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2203      	movs	r2, #3
 8002034:	4013      	ands	r3, r2
 8002036:	2b02      	cmp	r3, #2
 8002038:	d123      	bne.n	8002082 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	08da      	lsrs	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3208      	adds	r2, #8
 8002042:	0092      	lsls	r2, r2, #2
 8002044:	58d3      	ldr	r3, [r2, r3]
 8002046:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2207      	movs	r2, #7
 800204c:	4013      	ands	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	220f      	movs	r2, #15
 8002052:	409a      	lsls	r2, r3
 8002054:	0013      	movs	r3, r2
 8002056:	43da      	mvns	r2, r3
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	691a      	ldr	r2, [r3, #16]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2107      	movs	r1, #7
 8002066:	400b      	ands	r3, r1
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	409a      	lsls	r2, r3
 800206c:	0013      	movs	r3, r2
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	08da      	lsrs	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3208      	adds	r2, #8
 800207c:	0092      	lsls	r2, r2, #2
 800207e:	6939      	ldr	r1, [r7, #16]
 8002080:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	2203      	movs	r2, #3
 800208e:	409a      	lsls	r2, r3
 8002090:	0013      	movs	r3, r2
 8002092:	43da      	mvns	r2, r3
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2203      	movs	r2, #3
 80020a0:	401a      	ands	r2, r3
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	409a      	lsls	r2, r3
 80020a8:	0013      	movs	r3, r2
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	23c0      	movs	r3, #192	; 0xc0
 80020bc:	029b      	lsls	r3, r3, #10
 80020be:	4013      	ands	r3, r2
 80020c0:	d100      	bne.n	80020c4 <HAL_GPIO_Init+0x174>
 80020c2:	e092      	b.n	80021ea <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80020c4:	4a50      	ldr	r2, [pc, #320]	; (8002208 <HAL_GPIO_Init+0x2b8>)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	089b      	lsrs	r3, r3, #2
 80020ca:	3318      	adds	r3, #24
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	589b      	ldr	r3, [r3, r2]
 80020d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	2203      	movs	r2, #3
 80020d6:	4013      	ands	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	220f      	movs	r2, #15
 80020dc:	409a      	lsls	r2, r3
 80020de:	0013      	movs	r3, r2
 80020e0:	43da      	mvns	r2, r3
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	23a0      	movs	r3, #160	; 0xa0
 80020ec:	05db      	lsls	r3, r3, #23
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d013      	beq.n	800211a <HAL_GPIO_Init+0x1ca>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a45      	ldr	r2, [pc, #276]	; (800220c <HAL_GPIO_Init+0x2bc>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d00d      	beq.n	8002116 <HAL_GPIO_Init+0x1c6>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a44      	ldr	r2, [pc, #272]	; (8002210 <HAL_GPIO_Init+0x2c0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d007      	beq.n	8002112 <HAL_GPIO_Init+0x1c2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a43      	ldr	r2, [pc, #268]	; (8002214 <HAL_GPIO_Init+0x2c4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d101      	bne.n	800210e <HAL_GPIO_Init+0x1be>
 800210a:	2303      	movs	r3, #3
 800210c:	e006      	b.n	800211c <HAL_GPIO_Init+0x1cc>
 800210e:	2305      	movs	r3, #5
 8002110:	e004      	b.n	800211c <HAL_GPIO_Init+0x1cc>
 8002112:	2302      	movs	r3, #2
 8002114:	e002      	b.n	800211c <HAL_GPIO_Init+0x1cc>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_GPIO_Init+0x1cc>
 800211a:	2300      	movs	r3, #0
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	2103      	movs	r1, #3
 8002120:	400a      	ands	r2, r1
 8002122:	00d2      	lsls	r2, r2, #3
 8002124:	4093      	lsls	r3, r2
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800212c:	4936      	ldr	r1, [pc, #216]	; (8002208 <HAL_GPIO_Init+0x2b8>)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	089b      	lsrs	r3, r3, #2
 8002132:	3318      	adds	r3, #24
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800213a:	4b33      	ldr	r3, [pc, #204]	; (8002208 <HAL_GPIO_Init+0x2b8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	43da      	mvns	r2, r3
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	035b      	lsls	r3, r3, #13
 8002152:	4013      	ands	r3, r2
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800215e:	4b2a      	ldr	r3, [pc, #168]	; (8002208 <HAL_GPIO_Init+0x2b8>)
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002164:	4b28      	ldr	r3, [pc, #160]	; (8002208 <HAL_GPIO_Init+0x2b8>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	43da      	mvns	r2, r3
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	039b      	lsls	r3, r3, #14
 800217c:	4013      	ands	r3, r2
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002188:	4b1f      	ldr	r3, [pc, #124]	; (8002208 <HAL_GPIO_Init+0x2b8>)
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800218e:	4a1e      	ldr	r2, [pc, #120]	; (8002208 <HAL_GPIO_Init+0x2b8>)
 8002190:	2384      	movs	r3, #132	; 0x84
 8002192:	58d3      	ldr	r3, [r2, r3]
 8002194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	43da      	mvns	r2, r3
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	029b      	lsls	r3, r3, #10
 80021a8:	4013      	ands	r3, r2
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021b4:	4914      	ldr	r1, [pc, #80]	; (8002208 <HAL_GPIO_Init+0x2b8>)
 80021b6:	2284      	movs	r2, #132	; 0x84
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80021bc:	4a12      	ldr	r2, [pc, #72]	; (8002208 <HAL_GPIO_Init+0x2b8>)
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	58d3      	ldr	r3, [r2, r3]
 80021c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	43da      	mvns	r2, r3
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4013      	ands	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	025b      	lsls	r3, r3, #9
 80021d6:	4013      	ands	r3, r2
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4313      	orrs	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021e2:	4909      	ldr	r1, [pc, #36]	; (8002208 <HAL_GPIO_Init+0x2b8>)
 80021e4:	2280      	movs	r2, #128	; 0x80
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	3301      	adds	r3, #1
 80021ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	40da      	lsrs	r2, r3
 80021f8:	1e13      	subs	r3, r2, #0
 80021fa:	d000      	beq.n	80021fe <HAL_GPIO_Init+0x2ae>
 80021fc:	e6b0      	b.n	8001f60 <HAL_GPIO_Init+0x10>
  }
}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b006      	add	sp, #24
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021800 	.word	0x40021800
 800220c:	50000400 	.word	0x50000400
 8002210:	50000800 	.word	0x50000800
 8002214:	50000c00 	.word	0x50000c00

08002218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	0008      	movs	r0, r1
 8002222:	0011      	movs	r1, r2
 8002224:	1cbb      	adds	r3, r7, #2
 8002226:	1c02      	adds	r2, r0, #0
 8002228:	801a      	strh	r2, [r3, #0]
 800222a:	1c7b      	adds	r3, r7, #1
 800222c:	1c0a      	adds	r2, r1, #0
 800222e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002230:	1c7b      	adds	r3, r7, #1
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d004      	beq.n	8002242 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002238:	1cbb      	adds	r3, r7, #2
 800223a:	881a      	ldrh	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002240:	e003      	b.n	800224a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002242:	1cbb      	adds	r3, r7, #2
 8002244:	881a      	ldrh	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	629a      	str	r2, [r3, #40]	; 0x28
}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	46bd      	mov	sp, r7
 800224e:	b002      	add	sp, #8
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800225c:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a19      	ldr	r2, [pc, #100]	; (80022c8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002262:	4013      	ands	r3, r2
 8002264:	0019      	movs	r1, r3
 8002266:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	430a      	orrs	r2, r1
 800226c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	429a      	cmp	r2, r3
 8002276:	d11f      	bne.n	80022b8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002278:	4b14      	ldr	r3, [pc, #80]	; (80022cc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	0013      	movs	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	189b      	adds	r3, r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4912      	ldr	r1, [pc, #72]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002286:	0018      	movs	r0, r3
 8002288:	f7fd ff3a 	bl	8000100 <__udivsi3>
 800228c:	0003      	movs	r3, r0
 800228e:	3301      	adds	r3, #1
 8002290:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002292:	e008      	b.n	80022a6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	3b01      	subs	r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	e001      	b.n	80022a6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e009      	b.n	80022ba <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022a6:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80022a8:	695a      	ldr	r2, [r3, #20]
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	401a      	ands	r2, r3
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d0ed      	beq.n	8002294 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	0018      	movs	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	b004      	add	sp, #16
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	40007000 	.word	0x40007000
 80022c8:	fffff9ff 	.word	0xfffff9ff
 80022cc:	20000000 	.word	0x20000000
 80022d0:	000f4240 	.word	0x000f4240

080022d4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	23e0      	movs	r3, #224	; 0xe0
 80022de:	01db      	lsls	r3, r3, #7
 80022e0:	4013      	ands	r3, r2
}
 80022e2:	0018      	movs	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000

080022ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e2f3      	b.n	80028e6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2201      	movs	r2, #1
 8002304:	4013      	ands	r3, r2
 8002306:	d100      	bne.n	800230a <HAL_RCC_OscConfig+0x1e>
 8002308:	e07c      	b.n	8002404 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800230a:	4bc3      	ldr	r3, [pc, #780]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2238      	movs	r2, #56	; 0x38
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002314:	4bc0      	ldr	r3, [pc, #768]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	2203      	movs	r2, #3
 800231a:	4013      	ands	r3, r2
 800231c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	2b10      	cmp	r3, #16
 8002322:	d102      	bne.n	800232a <HAL_RCC_OscConfig+0x3e>
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2b03      	cmp	r3, #3
 8002328:	d002      	beq.n	8002330 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	2b08      	cmp	r3, #8
 800232e:	d10b      	bne.n	8002348 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	4bb9      	ldr	r3, [pc, #740]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	029b      	lsls	r3, r3, #10
 8002338:	4013      	ands	r3, r2
 800233a:	d062      	beq.n	8002402 <HAL_RCC_OscConfig+0x116>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d15e      	bne.n	8002402 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e2ce      	b.n	80028e6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	025b      	lsls	r3, r3, #9
 8002350:	429a      	cmp	r2, r3
 8002352:	d107      	bne.n	8002364 <HAL_RCC_OscConfig+0x78>
 8002354:	4bb0      	ldr	r3, [pc, #704]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4baf      	ldr	r3, [pc, #700]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 800235a:	2180      	movs	r1, #128	; 0x80
 800235c:	0249      	lsls	r1, r1, #9
 800235e:	430a      	orrs	r2, r1
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	e020      	b.n	80023a6 <HAL_RCC_OscConfig+0xba>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	23a0      	movs	r3, #160	; 0xa0
 800236a:	02db      	lsls	r3, r3, #11
 800236c:	429a      	cmp	r2, r3
 800236e:	d10e      	bne.n	800238e <HAL_RCC_OscConfig+0xa2>
 8002370:	4ba9      	ldr	r3, [pc, #676]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4ba8      	ldr	r3, [pc, #672]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 8002376:	2180      	movs	r1, #128	; 0x80
 8002378:	02c9      	lsls	r1, r1, #11
 800237a:	430a      	orrs	r2, r1
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	4ba6      	ldr	r3, [pc, #664]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4ba5      	ldr	r3, [pc, #660]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 8002384:	2180      	movs	r1, #128	; 0x80
 8002386:	0249      	lsls	r1, r1, #9
 8002388:	430a      	orrs	r2, r1
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	e00b      	b.n	80023a6 <HAL_RCC_OscConfig+0xba>
 800238e:	4ba2      	ldr	r3, [pc, #648]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4ba1      	ldr	r3, [pc, #644]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 8002394:	49a1      	ldr	r1, [pc, #644]	; (800261c <HAL_RCC_OscConfig+0x330>)
 8002396:	400a      	ands	r2, r1
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	4b9f      	ldr	r3, [pc, #636]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	4b9e      	ldr	r3, [pc, #632]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 80023a0:	499f      	ldr	r1, [pc, #636]	; (8002620 <HAL_RCC_OscConfig+0x334>)
 80023a2:	400a      	ands	r2, r1
 80023a4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d014      	beq.n	80023d8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ae:	f7ff f893 	bl	80014d8 <HAL_GetTick>
 80023b2:	0003      	movs	r3, r0
 80023b4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b8:	f7ff f88e 	bl	80014d8 <HAL_GetTick>
 80023bc:	0002      	movs	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	; 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e28d      	b.n	80028e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ca:	4b93      	ldr	r3, [pc, #588]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	029b      	lsls	r3, r3, #10
 80023d2:	4013      	ands	r3, r2
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0xcc>
 80023d6:	e015      	b.n	8002404 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7ff f87e 	bl	80014d8 <HAL_GetTick>
 80023dc:	0003      	movs	r3, r0
 80023de:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e2:	f7ff f879 	bl	80014d8 <HAL_GetTick>
 80023e6:	0002      	movs	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b64      	cmp	r3, #100	; 0x64
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e278      	b.n	80028e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023f4:	4b88      	ldr	r3, [pc, #544]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	029b      	lsls	r3, r3, #10
 80023fc:	4013      	ands	r3, r2
 80023fe:	d1f0      	bne.n	80023e2 <HAL_RCC_OscConfig+0xf6>
 8002400:	e000      	b.n	8002404 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002402:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2202      	movs	r2, #2
 800240a:	4013      	ands	r3, r2
 800240c:	d100      	bne.n	8002410 <HAL_RCC_OscConfig+0x124>
 800240e:	e099      	b.n	8002544 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002410:	4b81      	ldr	r3, [pc, #516]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2238      	movs	r2, #56	; 0x38
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800241a:	4b7f      	ldr	r3, [pc, #508]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2203      	movs	r2, #3
 8002420:	4013      	ands	r3, r2
 8002422:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2b10      	cmp	r3, #16
 8002428:	d102      	bne.n	8002430 <HAL_RCC_OscConfig+0x144>
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d002      	beq.n	8002436 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d135      	bne.n	80024a2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002436:	4b78      	ldr	r3, [pc, #480]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4013      	ands	r3, r2
 8002440:	d005      	beq.n	800244e <HAL_RCC_OscConfig+0x162>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e24b      	b.n	80028e6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244e:	4b72      	ldr	r3, [pc, #456]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4a74      	ldr	r2, [pc, #464]	; (8002624 <HAL_RCC_OscConfig+0x338>)
 8002454:	4013      	ands	r3, r2
 8002456:	0019      	movs	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	021a      	lsls	r2, r3, #8
 800245e:	4b6e      	ldr	r3, [pc, #440]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 8002460:	430a      	orrs	r2, r1
 8002462:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d112      	bne.n	8002490 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800246a:	4b6b      	ldr	r3, [pc, #428]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a6e      	ldr	r2, [pc, #440]	; (8002628 <HAL_RCC_OscConfig+0x33c>)
 8002470:	4013      	ands	r3, r2
 8002472:	0019      	movs	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	4b67      	ldr	r3, [pc, #412]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 800247a:	430a      	orrs	r2, r1
 800247c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800247e:	4b66      	ldr	r3, [pc, #408]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	0adb      	lsrs	r3, r3, #11
 8002484:	2207      	movs	r2, #7
 8002486:	4013      	ands	r3, r2
 8002488:	4a68      	ldr	r2, [pc, #416]	; (800262c <HAL_RCC_OscConfig+0x340>)
 800248a:	40da      	lsrs	r2, r3
 800248c:	4b68      	ldr	r3, [pc, #416]	; (8002630 <HAL_RCC_OscConfig+0x344>)
 800248e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002490:	4b68      	ldr	r3, [pc, #416]	; (8002634 <HAL_RCC_OscConfig+0x348>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	0018      	movs	r0, r3
 8002496:	f7fe ffc3 	bl	8001420 <HAL_InitTick>
 800249a:	1e03      	subs	r3, r0, #0
 800249c:	d051      	beq.n	8002542 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e221      	b.n	80028e6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d030      	beq.n	800250c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80024aa:	4b5b      	ldr	r3, [pc, #364]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a5e      	ldr	r2, [pc, #376]	; (8002628 <HAL_RCC_OscConfig+0x33c>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	0019      	movs	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	4b57      	ldr	r3, [pc, #348]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 80024ba:	430a      	orrs	r2, r1
 80024bc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80024be:	4b56      	ldr	r3, [pc, #344]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4b55      	ldr	r3, [pc, #340]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 80024c4:	2180      	movs	r1, #128	; 0x80
 80024c6:	0049      	lsls	r1, r1, #1
 80024c8:	430a      	orrs	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7ff f804 	bl	80014d8 <HAL_GetTick>
 80024d0:	0003      	movs	r3, r0
 80024d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d6:	f7fe ffff 	bl	80014d8 <HAL_GetTick>
 80024da:	0002      	movs	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e1fe      	b.n	80028e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024e8:	4b4b      	ldr	r3, [pc, #300]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4013      	ands	r3, r2
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f4:	4b48      	ldr	r3, [pc, #288]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	4a4a      	ldr	r2, [pc, #296]	; (8002624 <HAL_RCC_OscConfig+0x338>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	0019      	movs	r1, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	021a      	lsls	r2, r3, #8
 8002504:	4b44      	ldr	r3, [pc, #272]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 8002506:	430a      	orrs	r2, r1
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	e01b      	b.n	8002544 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800250c:	4b42      	ldr	r3, [pc, #264]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b41      	ldr	r3, [pc, #260]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 8002512:	4949      	ldr	r1, [pc, #292]	; (8002638 <HAL_RCC_OscConfig+0x34c>)
 8002514:	400a      	ands	r2, r1
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7fe ffde 	bl	80014d8 <HAL_GetTick>
 800251c:	0003      	movs	r3, r0
 800251e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002522:	f7fe ffd9 	bl	80014d8 <HAL_GetTick>
 8002526:	0002      	movs	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e1d8      	b.n	80028e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002534:	4b38      	ldr	r3, [pc, #224]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4013      	ands	r3, r2
 800253e:	d1f0      	bne.n	8002522 <HAL_RCC_OscConfig+0x236>
 8002540:	e000      	b.n	8002544 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002542:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2208      	movs	r2, #8
 800254a:	4013      	ands	r3, r2
 800254c:	d047      	beq.n	80025de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800254e:	4b32      	ldr	r3, [pc, #200]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2238      	movs	r2, #56	; 0x38
 8002554:	4013      	ands	r3, r2
 8002556:	2b18      	cmp	r3, #24
 8002558:	d10a      	bne.n	8002570 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800255a:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 800255c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800255e:	2202      	movs	r2, #2
 8002560:	4013      	ands	r3, r2
 8002562:	d03c      	beq.n	80025de <HAL_RCC_OscConfig+0x2f2>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d138      	bne.n	80025de <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e1ba      	b.n	80028e6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d019      	beq.n	80025ac <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002578:	4b27      	ldr	r3, [pc, #156]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 800257a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800257c:	4b26      	ldr	r3, [pc, #152]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 800257e:	2101      	movs	r1, #1
 8002580:	430a      	orrs	r2, r1
 8002582:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7fe ffa8 	bl	80014d8 <HAL_GetTick>
 8002588:	0003      	movs	r3, r0
 800258a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800258e:	f7fe ffa3 	bl	80014d8 <HAL_GetTick>
 8002592:	0002      	movs	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e1a2      	b.n	80028e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 80025a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a4:	2202      	movs	r2, #2
 80025a6:	4013      	ands	r3, r2
 80025a8:	d0f1      	beq.n	800258e <HAL_RCC_OscConfig+0x2a2>
 80025aa:	e018      	b.n	80025de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80025ac:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 80025ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025b0:	4b19      	ldr	r3, [pc, #100]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 80025b2:	2101      	movs	r1, #1
 80025b4:	438a      	bics	r2, r1
 80025b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7fe ff8e 	bl	80014d8 <HAL_GetTick>
 80025bc:	0003      	movs	r3, r0
 80025be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c2:	f7fe ff89 	bl	80014d8 <HAL_GetTick>
 80025c6:	0002      	movs	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e188      	b.n	80028e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025d4:	4b10      	ldr	r3, [pc, #64]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 80025d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d8:	2202      	movs	r2, #2
 80025da:	4013      	ands	r3, r2
 80025dc:	d1f1      	bne.n	80025c2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2204      	movs	r2, #4
 80025e4:	4013      	ands	r3, r2
 80025e6:	d100      	bne.n	80025ea <HAL_RCC_OscConfig+0x2fe>
 80025e8:	e0c6      	b.n	8002778 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ea:	231f      	movs	r3, #31
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2238      	movs	r2, #56	; 0x38
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b20      	cmp	r3, #32
 80025fc:	d11e      	bne.n	800263c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_RCC_OscConfig+0x32c>)
 8002600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002602:	2202      	movs	r2, #2
 8002604:	4013      	ands	r3, r2
 8002606:	d100      	bne.n	800260a <HAL_RCC_OscConfig+0x31e>
 8002608:	e0b6      	b.n	8002778 <HAL_RCC_OscConfig+0x48c>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d000      	beq.n	8002614 <HAL_RCC_OscConfig+0x328>
 8002612:	e0b1      	b.n	8002778 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e166      	b.n	80028e6 <HAL_RCC_OscConfig+0x5fa>
 8002618:	40021000 	.word	0x40021000
 800261c:	fffeffff 	.word	0xfffeffff
 8002620:	fffbffff 	.word	0xfffbffff
 8002624:	ffff80ff 	.word	0xffff80ff
 8002628:	ffffc7ff 	.word	0xffffc7ff
 800262c:	00f42400 	.word	0x00f42400
 8002630:	20000000 	.word	0x20000000
 8002634:	20000004 	.word	0x20000004
 8002638:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800263c:	4bac      	ldr	r3, [pc, #688]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 800263e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	055b      	lsls	r3, r3, #21
 8002644:	4013      	ands	r3, r2
 8002646:	d101      	bne.n	800264c <HAL_RCC_OscConfig+0x360>
 8002648:	2301      	movs	r3, #1
 800264a:	e000      	b.n	800264e <HAL_RCC_OscConfig+0x362>
 800264c:	2300      	movs	r3, #0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d011      	beq.n	8002676 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002652:	4ba7      	ldr	r3, [pc, #668]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 8002654:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002656:	4ba6      	ldr	r3, [pc, #664]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 8002658:	2180      	movs	r1, #128	; 0x80
 800265a:	0549      	lsls	r1, r1, #21
 800265c:	430a      	orrs	r2, r1
 800265e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002660:	4ba3      	ldr	r3, [pc, #652]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 8002662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	055b      	lsls	r3, r3, #21
 8002668:	4013      	ands	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800266e:	231f      	movs	r3, #31
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002676:	4b9f      	ldr	r3, [pc, #636]	; (80028f4 <HAL_RCC_OscConfig+0x608>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4013      	ands	r3, r2
 8002680:	d11a      	bne.n	80026b8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002682:	4b9c      	ldr	r3, [pc, #624]	; (80028f4 <HAL_RCC_OscConfig+0x608>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	4b9b      	ldr	r3, [pc, #620]	; (80028f4 <HAL_RCC_OscConfig+0x608>)
 8002688:	2180      	movs	r1, #128	; 0x80
 800268a:	0049      	lsls	r1, r1, #1
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002690:	f7fe ff22 	bl	80014d8 <HAL_GetTick>
 8002694:	0003      	movs	r3, r0
 8002696:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269a:	f7fe ff1d 	bl	80014d8 <HAL_GetTick>
 800269e:	0002      	movs	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e11c      	b.n	80028e6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ac:	4b91      	ldr	r3, [pc, #580]	; (80028f4 <HAL_RCC_OscConfig+0x608>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4013      	ands	r3, r2
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d106      	bne.n	80026ce <HAL_RCC_OscConfig+0x3e2>
 80026c0:	4b8b      	ldr	r3, [pc, #556]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 80026c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026c4:	4b8a      	ldr	r3, [pc, #552]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 80026c6:	2101      	movs	r1, #1
 80026c8:	430a      	orrs	r2, r1
 80026ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80026cc:	e01c      	b.n	8002708 <HAL_RCC_OscConfig+0x41c>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b05      	cmp	r3, #5
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x404>
 80026d6:	4b86      	ldr	r3, [pc, #536]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 80026d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026da:	4b85      	ldr	r3, [pc, #532]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 80026dc:	2104      	movs	r1, #4
 80026de:	430a      	orrs	r2, r1
 80026e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80026e2:	4b83      	ldr	r3, [pc, #524]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 80026e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026e6:	4b82      	ldr	r3, [pc, #520]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 80026e8:	2101      	movs	r1, #1
 80026ea:	430a      	orrs	r2, r1
 80026ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80026ee:	e00b      	b.n	8002708 <HAL_RCC_OscConfig+0x41c>
 80026f0:	4b7f      	ldr	r3, [pc, #508]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 80026f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026f4:	4b7e      	ldr	r3, [pc, #504]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 80026f6:	2101      	movs	r1, #1
 80026f8:	438a      	bics	r2, r1
 80026fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80026fc:	4b7c      	ldr	r3, [pc, #496]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 80026fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002700:	4b7b      	ldr	r3, [pc, #492]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 8002702:	2104      	movs	r1, #4
 8002704:	438a      	bics	r2, r1
 8002706:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d014      	beq.n	800273a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fe fee2 	bl	80014d8 <HAL_GetTick>
 8002714:	0003      	movs	r3, r0
 8002716:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002718:	e009      	b.n	800272e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800271a:	f7fe fedd 	bl	80014d8 <HAL_GetTick>
 800271e:	0002      	movs	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	4a74      	ldr	r2, [pc, #464]	; (80028f8 <HAL_RCC_OscConfig+0x60c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e0db      	b.n	80028e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800272e:	4b70      	ldr	r3, [pc, #448]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 8002730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002732:	2202      	movs	r2, #2
 8002734:	4013      	ands	r3, r2
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x42e>
 8002738:	e013      	b.n	8002762 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7fe fecd 	bl	80014d8 <HAL_GetTick>
 800273e:	0003      	movs	r3, r0
 8002740:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002742:	e009      	b.n	8002758 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002744:	f7fe fec8 	bl	80014d8 <HAL_GetTick>
 8002748:	0002      	movs	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	4a6a      	ldr	r2, [pc, #424]	; (80028f8 <HAL_RCC_OscConfig+0x60c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e0c6      	b.n	80028e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002758:	4b65      	ldr	r3, [pc, #404]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 800275a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275c:	2202      	movs	r2, #2
 800275e:	4013      	ands	r3, r2
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002762:	231f      	movs	r3, #31
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d105      	bne.n	8002778 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800276c:	4b60      	ldr	r3, [pc, #384]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 800276e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002770:	4b5f      	ldr	r3, [pc, #380]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 8002772:	4962      	ldr	r1, [pc, #392]	; (80028fc <HAL_RCC_OscConfig+0x610>)
 8002774:	400a      	ands	r2, r1
 8002776:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d100      	bne.n	8002782 <HAL_RCC_OscConfig+0x496>
 8002780:	e0b0      	b.n	80028e4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002782:	4b5b      	ldr	r3, [pc, #364]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2238      	movs	r2, #56	; 0x38
 8002788:	4013      	ands	r3, r2
 800278a:	2b10      	cmp	r3, #16
 800278c:	d100      	bne.n	8002790 <HAL_RCC_OscConfig+0x4a4>
 800278e:	e078      	b.n	8002882 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d153      	bne.n	8002840 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002798:	4b55      	ldr	r3, [pc, #340]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b54      	ldr	r3, [pc, #336]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 800279e:	4958      	ldr	r1, [pc, #352]	; (8002900 <HAL_RCC_OscConfig+0x614>)
 80027a0:	400a      	ands	r2, r1
 80027a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7fe fe98 	bl	80014d8 <HAL_GetTick>
 80027a8:	0003      	movs	r3, r0
 80027aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ae:	f7fe fe93 	bl	80014d8 <HAL_GetTick>
 80027b2:	0002      	movs	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e092      	b.n	80028e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c0:	4b4b      	ldr	r3, [pc, #300]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	049b      	lsls	r3, r3, #18
 80027c8:	4013      	ands	r3, r2
 80027ca:	d1f0      	bne.n	80027ae <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027cc:	4b48      	ldr	r3, [pc, #288]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4a4c      	ldr	r2, [pc, #304]	; (8002904 <HAL_RCC_OscConfig+0x618>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	0019      	movs	r1, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1a      	ldr	r2, [r3, #32]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	431a      	orrs	r2, r3
 80027f4:	4b3e      	ldr	r3, [pc, #248]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 80027f6:	430a      	orrs	r2, r1
 80027f8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027fa:	4b3d      	ldr	r3, [pc, #244]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	4b3c      	ldr	r3, [pc, #240]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 8002800:	2180      	movs	r1, #128	; 0x80
 8002802:	0449      	lsls	r1, r1, #17
 8002804:	430a      	orrs	r2, r1
 8002806:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002808:	4b39      	ldr	r3, [pc, #228]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	4b38      	ldr	r3, [pc, #224]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 800280e:	2180      	movs	r1, #128	; 0x80
 8002810:	0549      	lsls	r1, r1, #21
 8002812:	430a      	orrs	r2, r1
 8002814:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7fe fe5f 	bl	80014d8 <HAL_GetTick>
 800281a:	0003      	movs	r3, r0
 800281c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002820:	f7fe fe5a 	bl	80014d8 <HAL_GetTick>
 8002824:	0002      	movs	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e059      	b.n	80028e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002832:	4b2f      	ldr	r3, [pc, #188]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	049b      	lsls	r3, r3, #18
 800283a:	4013      	ands	r3, r2
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0x534>
 800283e:	e051      	b.n	80028e4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002840:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b2a      	ldr	r3, [pc, #168]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 8002846:	492e      	ldr	r1, [pc, #184]	; (8002900 <HAL_RCC_OscConfig+0x614>)
 8002848:	400a      	ands	r2, r1
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7fe fe44 	bl	80014d8 <HAL_GetTick>
 8002850:	0003      	movs	r3, r0
 8002852:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002856:	f7fe fe3f 	bl	80014d8 <HAL_GetTick>
 800285a:	0002      	movs	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e03e      	b.n	80028e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002868:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	049b      	lsls	r3, r3, #18
 8002870:	4013      	ands	r3, r2
 8002872:	d1f0      	bne.n	8002856 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002874:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 800287a:	4923      	ldr	r1, [pc, #140]	; (8002908 <HAL_RCC_OscConfig+0x61c>)
 800287c:	400a      	ands	r2, r1
 800287e:	60da      	str	r2, [r3, #12]
 8002880:	e030      	b.n	80028e4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e02b      	b.n	80028e6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800288e:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <HAL_RCC_OscConfig+0x604>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2203      	movs	r2, #3
 8002898:	401a      	ands	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d11e      	bne.n	80028e0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2270      	movs	r2, #112	; 0x70
 80028a6:	401a      	ands	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d117      	bne.n	80028e0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	23fe      	movs	r3, #254	; 0xfe
 80028b4:	01db      	lsls	r3, r3, #7
 80028b6:	401a      	ands	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028be:	429a      	cmp	r2, r3
 80028c0:	d10e      	bne.n	80028e0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	23f8      	movs	r3, #248	; 0xf8
 80028c6:	039b      	lsls	r3, r3, #14
 80028c8:	401a      	ands	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d106      	bne.n	80028e0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	0f5b      	lsrs	r3, r3, #29
 80028d6:	075a      	lsls	r2, r3, #29
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028dc:	429a      	cmp	r2, r3
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e000      	b.n	80028e6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	0018      	movs	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b008      	add	sp, #32
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40007000 	.word	0x40007000
 80028f8:	00001388 	.word	0x00001388
 80028fc:	efffffff 	.word	0xefffffff
 8002900:	feffffff 	.word	0xfeffffff
 8002904:	1fc1808c 	.word	0x1fc1808c
 8002908:	effefffc 	.word	0xeffefffc

0800290c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0e9      	b.n	8002af4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002920:	4b76      	ldr	r3, [pc, #472]	; (8002afc <HAL_RCC_ClockConfig+0x1f0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2207      	movs	r2, #7
 8002926:	4013      	ands	r3, r2
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d91e      	bls.n	800296c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b73      	ldr	r3, [pc, #460]	; (8002afc <HAL_RCC_ClockConfig+0x1f0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2207      	movs	r2, #7
 8002934:	4393      	bics	r3, r2
 8002936:	0019      	movs	r1, r3
 8002938:	4b70      	ldr	r3, [pc, #448]	; (8002afc <HAL_RCC_ClockConfig+0x1f0>)
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002940:	f7fe fdca 	bl	80014d8 <HAL_GetTick>
 8002944:	0003      	movs	r3, r0
 8002946:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002948:	e009      	b.n	800295e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800294a:	f7fe fdc5 	bl	80014d8 <HAL_GetTick>
 800294e:	0002      	movs	r2, r0
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	4a6a      	ldr	r2, [pc, #424]	; (8002b00 <HAL_RCC_ClockConfig+0x1f4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d901      	bls.n	800295e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e0ca      	b.n	8002af4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800295e:	4b67      	ldr	r3, [pc, #412]	; (8002afc <HAL_RCC_ClockConfig+0x1f0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2207      	movs	r2, #7
 8002964:	4013      	ands	r3, r2
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d1ee      	bne.n	800294a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2202      	movs	r2, #2
 8002972:	4013      	ands	r3, r2
 8002974:	d015      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2204      	movs	r2, #4
 800297c:	4013      	ands	r3, r2
 800297e:	d006      	beq.n	800298e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002980:	4b60      	ldr	r3, [pc, #384]	; (8002b04 <HAL_RCC_ClockConfig+0x1f8>)
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	4b5f      	ldr	r3, [pc, #380]	; (8002b04 <HAL_RCC_ClockConfig+0x1f8>)
 8002986:	21e0      	movs	r1, #224	; 0xe0
 8002988:	01c9      	lsls	r1, r1, #7
 800298a:	430a      	orrs	r2, r1
 800298c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800298e:	4b5d      	ldr	r3, [pc, #372]	; (8002b04 <HAL_RCC_ClockConfig+0x1f8>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	4a5d      	ldr	r2, [pc, #372]	; (8002b08 <HAL_RCC_ClockConfig+0x1fc>)
 8002994:	4013      	ands	r3, r2
 8002996:	0019      	movs	r1, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	4b59      	ldr	r3, [pc, #356]	; (8002b04 <HAL_RCC_ClockConfig+0x1f8>)
 800299e:	430a      	orrs	r2, r1
 80029a0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2201      	movs	r2, #1
 80029a8:	4013      	ands	r3, r2
 80029aa:	d057      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d107      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029b4:	4b53      	ldr	r3, [pc, #332]	; (8002b04 <HAL_RCC_ClockConfig+0x1f8>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	029b      	lsls	r3, r3, #10
 80029bc:	4013      	ands	r3, r2
 80029be:	d12b      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e097      	b.n	8002af4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d107      	bne.n	80029dc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029cc:	4b4d      	ldr	r3, [pc, #308]	; (8002b04 <HAL_RCC_ClockConfig+0x1f8>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	2380      	movs	r3, #128	; 0x80
 80029d2:	049b      	lsls	r3, r3, #18
 80029d4:	4013      	ands	r3, r2
 80029d6:	d11f      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e08b      	b.n	8002af4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d107      	bne.n	80029f4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029e4:	4b47      	ldr	r3, [pc, #284]	; (8002b04 <HAL_RCC_ClockConfig+0x1f8>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4013      	ands	r3, r2
 80029ee:	d113      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e07f      	b.n	8002af4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d106      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029fc:	4b41      	ldr	r3, [pc, #260]	; (8002b04 <HAL_RCC_ClockConfig+0x1f8>)
 80029fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a00:	2202      	movs	r2, #2
 8002a02:	4013      	ands	r3, r2
 8002a04:	d108      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e074      	b.n	8002af4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a0a:	4b3e      	ldr	r3, [pc, #248]	; (8002b04 <HAL_RCC_ClockConfig+0x1f8>)
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0e:	2202      	movs	r2, #2
 8002a10:	4013      	ands	r3, r2
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e06d      	b.n	8002af4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a18:	4b3a      	ldr	r3, [pc, #232]	; (8002b04 <HAL_RCC_ClockConfig+0x1f8>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2207      	movs	r2, #7
 8002a1e:	4393      	bics	r3, r2
 8002a20:	0019      	movs	r1, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	4b37      	ldr	r3, [pc, #220]	; (8002b04 <HAL_RCC_ClockConfig+0x1f8>)
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a2c:	f7fe fd54 	bl	80014d8 <HAL_GetTick>
 8002a30:	0003      	movs	r3, r0
 8002a32:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a34:	e009      	b.n	8002a4a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a36:	f7fe fd4f 	bl	80014d8 <HAL_GetTick>
 8002a3a:	0002      	movs	r2, r0
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	4a2f      	ldr	r2, [pc, #188]	; (8002b00 <HAL_RCC_ClockConfig+0x1f4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e054      	b.n	8002af4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4a:	4b2e      	ldr	r3, [pc, #184]	; (8002b04 <HAL_RCC_ClockConfig+0x1f8>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2238      	movs	r2, #56	; 0x38
 8002a50:	401a      	ands	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d1ec      	bne.n	8002a36 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a5c:	4b27      	ldr	r3, [pc, #156]	; (8002afc <HAL_RCC_ClockConfig+0x1f0>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2207      	movs	r2, #7
 8002a62:	4013      	ands	r3, r2
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d21e      	bcs.n	8002aa8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	4b24      	ldr	r3, [pc, #144]	; (8002afc <HAL_RCC_ClockConfig+0x1f0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2207      	movs	r2, #7
 8002a70:	4393      	bics	r3, r2
 8002a72:	0019      	movs	r1, r3
 8002a74:	4b21      	ldr	r3, [pc, #132]	; (8002afc <HAL_RCC_ClockConfig+0x1f0>)
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a7c:	f7fe fd2c 	bl	80014d8 <HAL_GetTick>
 8002a80:	0003      	movs	r3, r0
 8002a82:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a84:	e009      	b.n	8002a9a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a86:	f7fe fd27 	bl	80014d8 <HAL_GetTick>
 8002a8a:	0002      	movs	r2, r0
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	4a1b      	ldr	r2, [pc, #108]	; (8002b00 <HAL_RCC_ClockConfig+0x1f4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e02c      	b.n	8002af4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a9a:	4b18      	ldr	r3, [pc, #96]	; (8002afc <HAL_RCC_ClockConfig+0x1f0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2207      	movs	r2, #7
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d1ee      	bne.n	8002a86 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2204      	movs	r2, #4
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d009      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab2:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <HAL_RCC_ClockConfig+0x1f8>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	4a15      	ldr	r2, [pc, #84]	; (8002b0c <HAL_RCC_ClockConfig+0x200>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	0019      	movs	r1, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <HAL_RCC_ClockConfig+0x1f8>)
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002ac6:	f000 f829 	bl	8002b1c <HAL_RCC_GetSysClockFreq>
 8002aca:	0001      	movs	r1, r0
 8002acc:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <HAL_RCC_ClockConfig+0x1f8>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	0a1b      	lsrs	r3, r3, #8
 8002ad2:	220f      	movs	r2, #15
 8002ad4:	401a      	ands	r2, r3
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <HAL_RCC_ClockConfig+0x204>)
 8002ad8:	0092      	lsls	r2, r2, #2
 8002ada:	58d3      	ldr	r3, [r2, r3]
 8002adc:	221f      	movs	r2, #31
 8002ade:	4013      	ands	r3, r2
 8002ae0:	000a      	movs	r2, r1
 8002ae2:	40da      	lsrs	r2, r3
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <HAL_RCC_ClockConfig+0x208>)
 8002ae6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_ClockConfig+0x20c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	0018      	movs	r0, r3
 8002aee:	f7fe fc97 	bl	8001420 <HAL_InitTick>
 8002af2:	0003      	movs	r3, r0
}
 8002af4:	0018      	movs	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	b004      	add	sp, #16
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40022000 	.word	0x40022000
 8002b00:	00001388 	.word	0x00001388
 8002b04:	40021000 	.word	0x40021000
 8002b08:	fffff0ff 	.word	0xfffff0ff
 8002b0c:	ffff8fff 	.word	0xffff8fff
 8002b10:	08004928 	.word	0x08004928
 8002b14:	20000000 	.word	0x20000000
 8002b18:	20000004 	.word	0x20000004

08002b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b22:	4b3c      	ldr	r3, [pc, #240]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2238      	movs	r2, #56	; 0x38
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d10f      	bne.n	8002b4c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002b2c:	4b39      	ldr	r3, [pc, #228]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	0adb      	lsrs	r3, r3, #11
 8002b32:	2207      	movs	r2, #7
 8002b34:	4013      	ands	r3, r2
 8002b36:	2201      	movs	r2, #1
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	0013      	movs	r3, r2
 8002b3c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002b3e:	6839      	ldr	r1, [r7, #0]
 8002b40:	4835      	ldr	r0, [pc, #212]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b42:	f7fd fadd 	bl	8000100 <__udivsi3>
 8002b46:	0003      	movs	r3, r0
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	e05d      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b4c:	4b31      	ldr	r3, [pc, #196]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2238      	movs	r2, #56	; 0x38
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d102      	bne.n	8002b5e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b58:	4b30      	ldr	r3, [pc, #192]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x100>)
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	e054      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b5e:	4b2d      	ldr	r3, [pc, #180]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2238      	movs	r2, #56	; 0x38
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b10      	cmp	r3, #16
 8002b68:	d138      	bne.n	8002bdc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002b6a:	4b2a      	ldr	r3, [pc, #168]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	2203      	movs	r2, #3
 8002b70:	4013      	ands	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b74:	4b27      	ldr	r3, [pc, #156]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	2207      	movs	r2, #7
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	3301      	adds	r3, #1
 8002b80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d10d      	bne.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	4824      	ldr	r0, [pc, #144]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x100>)
 8002b8c:	f7fd fab8 	bl	8000100 <__udivsi3>
 8002b90:	0003      	movs	r3, r0
 8002b92:	0019      	movs	r1, r3
 8002b94:	4b1f      	ldr	r3, [pc, #124]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	0a1b      	lsrs	r3, r3, #8
 8002b9a:	227f      	movs	r2, #127	; 0x7f
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	434b      	muls	r3, r1
 8002ba0:	617b      	str	r3, [r7, #20]
        break;
 8002ba2:	e00d      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	481c      	ldr	r0, [pc, #112]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ba8:	f7fd faaa 	bl	8000100 <__udivsi3>
 8002bac:	0003      	movs	r3, r0
 8002bae:	0019      	movs	r1, r3
 8002bb0:	4b18      	ldr	r3, [pc, #96]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	0a1b      	lsrs	r3, r3, #8
 8002bb6:	227f      	movs	r2, #127	; 0x7f
 8002bb8:	4013      	ands	r3, r2
 8002bba:	434b      	muls	r3, r1
 8002bbc:	617b      	str	r3, [r7, #20]
        break;
 8002bbe:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002bc0:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	0f5b      	lsrs	r3, r3, #29
 8002bc6:	2207      	movs	r2, #7
 8002bc8:	4013      	ands	r3, r2
 8002bca:	3301      	adds	r3, #1
 8002bcc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	6978      	ldr	r0, [r7, #20]
 8002bd2:	f7fd fa95 	bl	8000100 <__udivsi3>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	e015      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002bdc:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2238      	movs	r2, #56	; 0x38
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	d103      	bne.n	8002bf0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	e00b      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002bf0:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2238      	movs	r2, #56	; 0x38
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b18      	cmp	r3, #24
 8002bfa:	d103      	bne.n	8002c04 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002bfc:	23fa      	movs	r3, #250	; 0xfa
 8002bfe:	01db      	lsls	r3, r3, #7
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	e001      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c08:	693b      	ldr	r3, [r7, #16]
}
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	b006      	add	sp, #24
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	40021000 	.word	0x40021000
 8002c18:	00f42400 	.word	0x00f42400
 8002c1c:	007a1200 	.word	0x007a1200

08002c20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c24:	4b02      	ldr	r3, [pc, #8]	; (8002c30 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	0018      	movs	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	20000000 	.word	0x20000000

08002c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c34:	b5b0      	push	{r4, r5, r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002c38:	f7ff fff2 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8002c3c:	0004      	movs	r4, r0
 8002c3e:	f7ff fb49 	bl	80022d4 <LL_RCC_GetAPB1Prescaler>
 8002c42:	0003      	movs	r3, r0
 8002c44:	0b1a      	lsrs	r2, r3, #12
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c48:	0092      	lsls	r2, r2, #2
 8002c4a:	58d3      	ldr	r3, [r2, r3]
 8002c4c:	221f      	movs	r2, #31
 8002c4e:	4013      	ands	r3, r2
 8002c50:	40dc      	lsrs	r4, r3
 8002c52:	0023      	movs	r3, r4
}
 8002c54:	0018      	movs	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bdb0      	pop	{r4, r5, r7, pc}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	08004968 	.word	0x08004968

08002c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002c68:	2313      	movs	r3, #19
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c70:	2312      	movs	r3, #18
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	029b      	lsls	r3, r3, #10
 8002c80:	4013      	ands	r3, r2
 8002c82:	d100      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002c84:	e0a3      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c86:	2011      	movs	r0, #17
 8002c88:	183b      	adds	r3, r7, r0
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c8e:	4b86      	ldr	r3, [pc, #536]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	055b      	lsls	r3, r3, #21
 8002c96:	4013      	ands	r3, r2
 8002c98:	d110      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9a:	4b83      	ldr	r3, [pc, #524]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c9e:	4b82      	ldr	r3, [pc, #520]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ca0:	2180      	movs	r1, #128	; 0x80
 8002ca2:	0549      	lsls	r1, r1, #21
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ca8:	4b7f      	ldr	r3, [pc, #508]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	055b      	lsls	r3, r3, #21
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60bb      	str	r3, [r7, #8]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb6:	183b      	adds	r3, r7, r0
 8002cb8:	2201      	movs	r2, #1
 8002cba:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cbc:	4b7b      	ldr	r3, [pc, #492]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	4b7a      	ldr	r3, [pc, #488]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cc2:	2180      	movs	r1, #128	; 0x80
 8002cc4:	0049      	lsls	r1, r1, #1
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cca:	f7fe fc05 	bl	80014d8 <HAL_GetTick>
 8002cce:	0003      	movs	r3, r0
 8002cd0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cd2:	e00b      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd4:	f7fe fc00 	bl	80014d8 <HAL_GetTick>
 8002cd8:	0002      	movs	r2, r0
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d904      	bls.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002ce2:	2313      	movs	r3, #19
 8002ce4:	18fb      	adds	r3, r7, r3
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	701a      	strb	r2, [r3, #0]
        break;
 8002cea:	e005      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cec:	4b6f      	ldr	r3, [pc, #444]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d0ed      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002cf8:	2313      	movs	r3, #19
 8002cfa:	18fb      	adds	r3, r7, r3
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d154      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d02:	4b69      	ldr	r3, [pc, #420]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d06:	23c0      	movs	r3, #192	; 0xc0
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d019      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d014      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d1e:	4b62      	ldr	r3, [pc, #392]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d22:	4a63      	ldr	r2, [pc, #396]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d28:	4b5f      	ldr	r3, [pc, #380]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d2c:	4b5e      	ldr	r3, [pc, #376]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d2e:	2180      	movs	r1, #128	; 0x80
 8002d30:	0249      	lsls	r1, r1, #9
 8002d32:	430a      	orrs	r2, r1
 8002d34:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d36:	4b5c      	ldr	r3, [pc, #368]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d3a:	4b5b      	ldr	r3, [pc, #364]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d3c:	495d      	ldr	r1, [pc, #372]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002d3e:	400a      	ands	r2, r1
 8002d40:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d42:	4b59      	ldr	r3, [pc, #356]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d016      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7fe fbc2 	bl	80014d8 <HAL_GetTick>
 8002d54:	0003      	movs	r3, r0
 8002d56:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d58:	e00c      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5a:	f7fe fbbd 	bl	80014d8 <HAL_GetTick>
 8002d5e:	0002      	movs	r2, r0
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	4a54      	ldr	r2, [pc, #336]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d904      	bls.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002d6a:	2313      	movs	r3, #19
 8002d6c:	18fb      	adds	r3, r7, r3
 8002d6e:	2203      	movs	r2, #3
 8002d70:	701a      	strb	r2, [r3, #0]
            break;
 8002d72:	e004      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d74:	4b4c      	ldr	r3, [pc, #304]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d78:	2202      	movs	r2, #2
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d0ed      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002d7e:	2313      	movs	r3, #19
 8002d80:	18fb      	adds	r3, r7, r3
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10a      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d88:	4b47      	ldr	r3, [pc, #284]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8c:	4a48      	ldr	r2, [pc, #288]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	0019      	movs	r1, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	4b44      	ldr	r3, [pc, #272]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d9c:	e00c      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d9e:	2312      	movs	r3, #18
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	2213      	movs	r2, #19
 8002da4:	18ba      	adds	r2, r7, r2
 8002da6:	7812      	ldrb	r2, [r2, #0]
 8002da8:	701a      	strb	r2, [r3, #0]
 8002daa:	e005      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dac:	2312      	movs	r3, #18
 8002dae:	18fb      	adds	r3, r7, r3
 8002db0:	2213      	movs	r2, #19
 8002db2:	18ba      	adds	r2, r7, r2
 8002db4:	7812      	ldrb	r2, [r2, #0]
 8002db6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002db8:	2311      	movs	r3, #17
 8002dba:	18fb      	adds	r3, r7, r3
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d105      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc2:	4b39      	ldr	r3, [pc, #228]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dc6:	4b38      	ldr	r3, [pc, #224]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dc8:	493c      	ldr	r1, [pc, #240]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002dca:	400a      	ands	r2, r1
 8002dcc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d009      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dd8:	4b33      	ldr	r3, [pc, #204]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ddc:	2203      	movs	r2, #3
 8002dde:	4393      	bics	r3, r2
 8002de0:	0019      	movs	r1, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	4b30      	ldr	r3, [pc, #192]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002de8:	430a      	orrs	r2, r1
 8002dea:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2202      	movs	r2, #2
 8002df2:	4013      	ands	r3, r2
 8002df4:	d009      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002df6:	4b2c      	ldr	r3, [pc, #176]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfa:	220c      	movs	r2, #12
 8002dfc:	4393      	bics	r3, r2
 8002dfe:	0019      	movs	r1, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	4b28      	ldr	r3, [pc, #160]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e06:	430a      	orrs	r2, r1
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	4013      	ands	r3, r2
 8002e12:	d009      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e14:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e18:	4a29      	ldr	r2, [pc, #164]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e24:	430a      	orrs	r2, r1
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	2380      	movs	r3, #128	; 0x80
 8002e2e:	01db      	lsls	r3, r3, #7
 8002e30:	4013      	ands	r3, r2
 8002e32:	d015      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e34:	4b1c      	ldr	r3, [pc, #112]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	0899      	lsrs	r1, r3, #2
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	695a      	ldr	r2, [r3, #20]
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e42:	430a      	orrs	r2, r1
 8002e44:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	2380      	movs	r3, #128	; 0x80
 8002e4c:	05db      	lsls	r3, r3, #23
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d106      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e52:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e58:	2180      	movs	r1, #128	; 0x80
 8002e5a:	0249      	lsls	r1, r1, #9
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	2380      	movs	r3, #128	; 0x80
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d016      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002e6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e70:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	0019      	movs	r1, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	01db      	lsls	r3, r3, #7
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d106      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e92:	2180      	movs	r1, #128	; 0x80
 8002e94:	0249      	lsls	r1, r1, #9
 8002e96:	430a      	orrs	r2, r1
 8002e98:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002e9a:	2312      	movs	r3, #18
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	781b      	ldrb	r3, [r3, #0]
}
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b006      	add	sp, #24
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40007000 	.word	0x40007000
 8002eb0:	fffffcff 	.word	0xfffffcff
 8002eb4:	fffeffff 	.word	0xfffeffff
 8002eb8:	00001388 	.word	0x00001388
 8002ebc:	efffffff 	.word	0xefffffff
 8002ec0:	ffffcfff 	.word	0xffffcfff
 8002ec4:	ffff3fff 	.word	0xffff3fff

08002ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e04a      	b.n	8002f70 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	223d      	movs	r2, #61	; 0x3d
 8002ede:	5c9b      	ldrb	r3, [r3, r2]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d107      	bne.n	8002ef6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	223c      	movs	r2, #60	; 0x3c
 8002eea:	2100      	movs	r1, #0
 8002eec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f7fd ffc1 	bl	8000e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	223d      	movs	r2, #61	; 0x3d
 8002efa:	2102      	movs	r1, #2
 8002efc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3304      	adds	r3, #4
 8002f06:	0019      	movs	r1, r3
 8002f08:	0010      	movs	r0, r2
 8002f0a:	f000 fb13 	bl	8003534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2248      	movs	r2, #72	; 0x48
 8002f12:	2101      	movs	r1, #1
 8002f14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	223e      	movs	r2, #62	; 0x3e
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	5499      	strb	r1, [r3, r2]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	223f      	movs	r2, #63	; 0x3f
 8002f22:	2101      	movs	r1, #1
 8002f24:	5499      	strb	r1, [r3, r2]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2240      	movs	r2, #64	; 0x40
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	5499      	strb	r1, [r3, r2]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2241      	movs	r2, #65	; 0x41
 8002f32:	2101      	movs	r1, #1
 8002f34:	5499      	strb	r1, [r3, r2]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2242      	movs	r2, #66	; 0x42
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	5499      	strb	r1, [r3, r2]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2243      	movs	r2, #67	; 0x43
 8002f42:	2101      	movs	r1, #1
 8002f44:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2244      	movs	r2, #68	; 0x44
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	5499      	strb	r1, [r3, r2]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2245      	movs	r2, #69	; 0x45
 8002f52:	2101      	movs	r1, #1
 8002f54:	5499      	strb	r1, [r3, r2]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2246      	movs	r2, #70	; 0x46
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	5499      	strb	r1, [r3, r2]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2247      	movs	r2, #71	; 0x47
 8002f62:	2101      	movs	r1, #1
 8002f64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	223d      	movs	r2, #61	; 0x3d
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	0018      	movs	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b002      	add	sp, #8
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e04a      	b.n	8003020 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	223d      	movs	r2, #61	; 0x3d
 8002f8e:	5c9b      	ldrb	r3, [r3, r2]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d107      	bne.n	8002fa6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	223c      	movs	r2, #60	; 0x3c
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f000 f841 	bl	8003028 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	223d      	movs	r2, #61	; 0x3d
 8002faa:	2102      	movs	r1, #2
 8002fac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	0010      	movs	r0, r2
 8002fba:	f000 fabb 	bl	8003534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2248      	movs	r2, #72	; 0x48
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	223e      	movs	r2, #62	; 0x3e
 8002fca:	2101      	movs	r1, #1
 8002fcc:	5499      	strb	r1, [r3, r2]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	223f      	movs	r2, #63	; 0x3f
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	5499      	strb	r1, [r3, r2]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2240      	movs	r2, #64	; 0x40
 8002fda:	2101      	movs	r1, #1
 8002fdc:	5499      	strb	r1, [r3, r2]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2241      	movs	r2, #65	; 0x41
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	5499      	strb	r1, [r3, r2]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2242      	movs	r2, #66	; 0x42
 8002fea:	2101      	movs	r1, #1
 8002fec:	5499      	strb	r1, [r3, r2]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2243      	movs	r2, #67	; 0x43
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2244      	movs	r2, #68	; 0x44
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	5499      	strb	r1, [r3, r2]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2245      	movs	r2, #69	; 0x45
 8003002:	2101      	movs	r1, #1
 8003004:	5499      	strb	r1, [r3, r2]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2246      	movs	r2, #70	; 0x46
 800300a:	2101      	movs	r1, #1
 800300c:	5499      	strb	r1, [r3, r2]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2247      	movs	r2, #71	; 0x47
 8003012:	2101      	movs	r1, #1
 8003014:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	223d      	movs	r2, #61	; 0x3d
 800301a:	2101      	movs	r1, #1
 800301c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	0018      	movs	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	b002      	add	sp, #8
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003030:	46c0      	nop			; (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	b002      	add	sp, #8
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e090      	b.n	800316e <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	223d      	movs	r2, #61	; 0x3d
 8003050:	5c9b      	ldrb	r3, [r3, r2]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d107      	bne.n	8003068 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	223c      	movs	r2, #60	; 0x3c
 800305c:	2100      	movs	r1, #0
 800305e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	0018      	movs	r0, r3
 8003064:	f7fd fe84 	bl	8000d70 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	223d      	movs	r2, #61	; 0x3d
 800306c:	2102      	movs	r1, #2
 800306e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	493f      	ldr	r1, [pc, #252]	; (8003178 <HAL_TIM_Encoder_Init+0x140>)
 800307c:	400a      	ands	r2, r1
 800307e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3304      	adds	r3, #4
 8003088:	0019      	movs	r1, r3
 800308a:	0010      	movs	r0, r2
 800308c:	f000 fa52 	bl	8003534 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4a31      	ldr	r2, [pc, #196]	; (800317c <HAL_TIM_Encoder_Init+0x144>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	4313      	orrs	r3, r2
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4a2c      	ldr	r2, [pc, #176]	; (8003180 <HAL_TIM_Encoder_Init+0x148>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4a2b      	ldr	r2, [pc, #172]	; (8003184 <HAL_TIM_Encoder_Init+0x14c>)
 80030d8:	4013      	ands	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	021b      	lsls	r3, r3, #8
 80030e6:	4313      	orrs	r3, r2
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	011a      	lsls	r2, r3, #4
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	031b      	lsls	r3, r3, #12
 80030fa:	4313      	orrs	r3, r2
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2222      	movs	r2, #34	; 0x22
 8003106:	4393      	bics	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2288      	movs	r2, #136	; 0x88
 800310e:	4393      	bics	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	4313      	orrs	r3, r2
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4313      	orrs	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2248      	movs	r2, #72	; 0x48
 8003140:	2101      	movs	r1, #1
 8003142:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	223e      	movs	r2, #62	; 0x3e
 8003148:	2101      	movs	r1, #1
 800314a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	223f      	movs	r2, #63	; 0x3f
 8003150:	2101      	movs	r1, #1
 8003152:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2244      	movs	r2, #68	; 0x44
 8003158:	2101      	movs	r1, #1
 800315a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2245      	movs	r2, #69	; 0x45
 8003160:	2101      	movs	r1, #1
 8003162:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	223d      	movs	r2, #61	; 0x3d
 8003168:	2101      	movs	r1, #1
 800316a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	0018      	movs	r0, r3
 8003170:	46bd      	mov	sp, r7
 8003172:	b006      	add	sp, #24
 8003174:	bd80      	pop	{r7, pc}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	fffebff8 	.word	0xfffebff8
 800317c:	fffffcfc 	.word	0xfffffcfc
 8003180:	fffff3f3 	.word	0xfffff3f3
 8003184:	ffff0f0f 	.word	0xffff0f0f

08003188 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003194:	2317      	movs	r3, #23
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	223c      	movs	r2, #60	; 0x3c
 80031a0:	5c9b      	ldrb	r3, [r3, r2]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_TIM_PWM_ConfigChannel+0x22>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e0e5      	b.n	8003376 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	223c      	movs	r2, #60	; 0x3c
 80031ae:	2101      	movs	r1, #1
 80031b0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b14      	cmp	r3, #20
 80031b6:	d900      	bls.n	80031ba <HAL_TIM_PWM_ConfigChannel+0x32>
 80031b8:	e0d1      	b.n	800335e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	009a      	lsls	r2, r3, #2
 80031be:	4b70      	ldr	r3, [pc, #448]	; (8003380 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80031c0:	18d3      	adds	r3, r2, r3
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	0011      	movs	r1, r2
 80031ce:	0018      	movs	r0, r3
 80031d0:	f000 fa26 	bl	8003620 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699a      	ldr	r2, [r3, #24]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2108      	movs	r1, #8
 80031e0:	430a      	orrs	r2, r1
 80031e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699a      	ldr	r2, [r3, #24]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2104      	movs	r1, #4
 80031f0:	438a      	bics	r2, r1
 80031f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6999      	ldr	r1, [r3, #24]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	619a      	str	r2, [r3, #24]
      break;
 8003206:	e0af      	b.n	8003368 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	0011      	movs	r1, r2
 8003210:	0018      	movs	r0, r3
 8003212:	f000 fa8f 	bl	8003734 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699a      	ldr	r2, [r3, #24]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2180      	movs	r1, #128	; 0x80
 8003222:	0109      	lsls	r1, r1, #4
 8003224:	430a      	orrs	r2, r1
 8003226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4954      	ldr	r1, [pc, #336]	; (8003384 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003234:	400a      	ands	r2, r1
 8003236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6999      	ldr	r1, [r3, #24]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	021a      	lsls	r2, r3, #8
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	619a      	str	r2, [r3, #24]
      break;
 800324c:	e08c      	b.n	8003368 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	0011      	movs	r1, r2
 8003256:	0018      	movs	r0, r3
 8003258:	f000 faf0 	bl	800383c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	69da      	ldr	r2, [r3, #28]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2108      	movs	r1, #8
 8003268:	430a      	orrs	r2, r1
 800326a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	69da      	ldr	r2, [r3, #28]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2104      	movs	r1, #4
 8003278:	438a      	bics	r2, r1
 800327a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69d9      	ldr	r1, [r3, #28]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	61da      	str	r2, [r3, #28]
      break;
 800328e:	e06b      	b.n	8003368 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	0011      	movs	r1, r2
 8003298:	0018      	movs	r0, r3
 800329a:	f000 fb57 	bl	800394c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2180      	movs	r1, #128	; 0x80
 80032aa:	0109      	lsls	r1, r1, #4
 80032ac:	430a      	orrs	r2, r1
 80032ae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	69da      	ldr	r2, [r3, #28]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4932      	ldr	r1, [pc, #200]	; (8003384 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80032bc:	400a      	ands	r2, r1
 80032be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	69d9      	ldr	r1, [r3, #28]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	021a      	lsls	r2, r3, #8
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	61da      	str	r2, [r3, #28]
      break;
 80032d4:	e048      	b.n	8003368 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	0011      	movs	r1, r2
 80032de:	0018      	movs	r0, r3
 80032e0:	f000 fb9e 	bl	8003a20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2108      	movs	r1, #8
 80032f0:	430a      	orrs	r2, r1
 80032f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2104      	movs	r1, #4
 8003300:	438a      	bics	r2, r1
 8003302:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003316:	e027      	b.n	8003368 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	0011      	movs	r1, r2
 8003320:	0018      	movs	r0, r3
 8003322:	f000 fbdd 	bl	8003ae0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2180      	movs	r1, #128	; 0x80
 8003332:	0109      	lsls	r1, r1, #4
 8003334:	430a      	orrs	r2, r1
 8003336:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4910      	ldr	r1, [pc, #64]	; (8003384 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003344:	400a      	ands	r2, r1
 8003346:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	021a      	lsls	r2, r3, #8
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800335c:	e004      	b.n	8003368 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800335e:	2317      	movs	r3, #23
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	2201      	movs	r2, #1
 8003364:	701a      	strb	r2, [r3, #0]
      break;
 8003366:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	223c      	movs	r2, #60	; 0x3c
 800336c:	2100      	movs	r1, #0
 800336e:	5499      	strb	r1, [r3, r2]

  return status;
 8003370:	2317      	movs	r3, #23
 8003372:	18fb      	adds	r3, r7, r3
 8003374:	781b      	ldrb	r3, [r3, #0]
}
 8003376:	0018      	movs	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	b006      	add	sp, #24
 800337c:	bd80      	pop	{r7, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	08004988 	.word	0x08004988
 8003384:	fffffbff 	.word	0xfffffbff

08003388 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003392:	230f      	movs	r3, #15
 8003394:	18fb      	adds	r3, r7, r3
 8003396:	2200      	movs	r2, #0
 8003398:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	223c      	movs	r2, #60	; 0x3c
 800339e:	5c9b      	ldrb	r3, [r3, r2]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_TIM_ConfigClockSource+0x20>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e0bc      	b.n	8003522 <HAL_TIM_ConfigClockSource+0x19a>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	223c      	movs	r2, #60	; 0x3c
 80033ac:	2101      	movs	r1, #1
 80033ae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	223d      	movs	r2, #61	; 0x3d
 80033b4:	2102      	movs	r1, #2
 80033b6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	4a5a      	ldr	r2, [pc, #360]	; (800352c <HAL_TIM_ConfigClockSource+0x1a4>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4a59      	ldr	r2, [pc, #356]	; (8003530 <HAL_TIM_ConfigClockSource+0x1a8>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2280      	movs	r2, #128	; 0x80
 80033de:	0192      	lsls	r2, r2, #6
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d040      	beq.n	8003466 <HAL_TIM_ConfigClockSource+0xde>
 80033e4:	2280      	movs	r2, #128	; 0x80
 80033e6:	0192      	lsls	r2, r2, #6
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d900      	bls.n	80033ee <HAL_TIM_ConfigClockSource+0x66>
 80033ec:	e088      	b.n	8003500 <HAL_TIM_ConfigClockSource+0x178>
 80033ee:	2280      	movs	r2, #128	; 0x80
 80033f0:	0152      	lsls	r2, r2, #5
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d100      	bne.n	80033f8 <HAL_TIM_ConfigClockSource+0x70>
 80033f6:	e088      	b.n	800350a <HAL_TIM_ConfigClockSource+0x182>
 80033f8:	2280      	movs	r2, #128	; 0x80
 80033fa:	0152      	lsls	r2, r2, #5
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d900      	bls.n	8003402 <HAL_TIM_ConfigClockSource+0x7a>
 8003400:	e07e      	b.n	8003500 <HAL_TIM_ConfigClockSource+0x178>
 8003402:	2b70      	cmp	r3, #112	; 0x70
 8003404:	d018      	beq.n	8003438 <HAL_TIM_ConfigClockSource+0xb0>
 8003406:	d900      	bls.n	800340a <HAL_TIM_ConfigClockSource+0x82>
 8003408:	e07a      	b.n	8003500 <HAL_TIM_ConfigClockSource+0x178>
 800340a:	2b60      	cmp	r3, #96	; 0x60
 800340c:	d04f      	beq.n	80034ae <HAL_TIM_ConfigClockSource+0x126>
 800340e:	d900      	bls.n	8003412 <HAL_TIM_ConfigClockSource+0x8a>
 8003410:	e076      	b.n	8003500 <HAL_TIM_ConfigClockSource+0x178>
 8003412:	2b50      	cmp	r3, #80	; 0x50
 8003414:	d03b      	beq.n	800348e <HAL_TIM_ConfigClockSource+0x106>
 8003416:	d900      	bls.n	800341a <HAL_TIM_ConfigClockSource+0x92>
 8003418:	e072      	b.n	8003500 <HAL_TIM_ConfigClockSource+0x178>
 800341a:	2b40      	cmp	r3, #64	; 0x40
 800341c:	d057      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x146>
 800341e:	d900      	bls.n	8003422 <HAL_TIM_ConfigClockSource+0x9a>
 8003420:	e06e      	b.n	8003500 <HAL_TIM_ConfigClockSource+0x178>
 8003422:	2b30      	cmp	r3, #48	; 0x30
 8003424:	d063      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0x166>
 8003426:	d86b      	bhi.n	8003500 <HAL_TIM_ConfigClockSource+0x178>
 8003428:	2b20      	cmp	r3, #32
 800342a:	d060      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0x166>
 800342c:	d868      	bhi.n	8003500 <HAL_TIM_ConfigClockSource+0x178>
 800342e:	2b00      	cmp	r3, #0
 8003430:	d05d      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0x166>
 8003432:	2b10      	cmp	r3, #16
 8003434:	d05b      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0x166>
 8003436:	e063      	b.n	8003500 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003448:	f000 fc2a 	bl	8003ca0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2277      	movs	r2, #119	; 0x77
 8003458:	4313      	orrs	r3, r2
 800345a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	609a      	str	r2, [r3, #8]
      break;
 8003464:	e052      	b.n	800350c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003476:	f000 fc13 	bl	8003ca0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2180      	movs	r1, #128	; 0x80
 8003486:	01c9      	lsls	r1, r1, #7
 8003488:	430a      	orrs	r2, r1
 800348a:	609a      	str	r2, [r3, #8]
      break;
 800348c:	e03e      	b.n	800350c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800349a:	001a      	movs	r2, r3
 800349c:	f000 fb84 	bl	8003ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2150      	movs	r1, #80	; 0x50
 80034a6:	0018      	movs	r0, r3
 80034a8:	f000 fbde 	bl	8003c68 <TIM_ITRx_SetConfig>
      break;
 80034ac:	e02e      	b.n	800350c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ba:	001a      	movs	r2, r3
 80034bc:	f000 fba2 	bl	8003c04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2160      	movs	r1, #96	; 0x60
 80034c6:	0018      	movs	r0, r3
 80034c8:	f000 fbce 	bl	8003c68 <TIM_ITRx_SetConfig>
      break;
 80034cc:	e01e      	b.n	800350c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034da:	001a      	movs	r2, r3
 80034dc:	f000 fb64 	bl	8003ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2140      	movs	r1, #64	; 0x40
 80034e6:	0018      	movs	r0, r3
 80034e8:	f000 fbbe 	bl	8003c68 <TIM_ITRx_SetConfig>
      break;
 80034ec:	e00e      	b.n	800350c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	0019      	movs	r1, r3
 80034f8:	0010      	movs	r0, r2
 80034fa:	f000 fbb5 	bl	8003c68 <TIM_ITRx_SetConfig>
      break;
 80034fe:	e005      	b.n	800350c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003500:	230f      	movs	r3, #15
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	2201      	movs	r2, #1
 8003506:	701a      	strb	r2, [r3, #0]
      break;
 8003508:	e000      	b.n	800350c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800350a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	223d      	movs	r2, #61	; 0x3d
 8003510:	2101      	movs	r1, #1
 8003512:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	223c      	movs	r2, #60	; 0x3c
 8003518:	2100      	movs	r1, #0
 800351a:	5499      	strb	r1, [r3, r2]

  return status;
 800351c:	230f      	movs	r3, #15
 800351e:	18fb      	adds	r3, r7, r3
 8003520:	781b      	ldrb	r3, [r3, #0]
}
 8003522:	0018      	movs	r0, r3
 8003524:	46bd      	mov	sp, r7
 8003526:	b004      	add	sp, #16
 8003528:	bd80      	pop	{r7, pc}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	ffceff88 	.word	0xffceff88
 8003530:	ffff00ff 	.word	0xffff00ff

08003534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a2f      	ldr	r2, [pc, #188]	; (8003604 <TIM_Base_SetConfig+0xd0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d003      	beq.n	8003554 <TIM_Base_SetConfig+0x20>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a2e      	ldr	r2, [pc, #184]	; (8003608 <TIM_Base_SetConfig+0xd4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d108      	bne.n	8003566 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2270      	movs	r2, #112	; 0x70
 8003558:	4393      	bics	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a26      	ldr	r2, [pc, #152]	; (8003604 <TIM_Base_SetConfig+0xd0>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d013      	beq.n	8003596 <TIM_Base_SetConfig+0x62>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a25      	ldr	r2, [pc, #148]	; (8003608 <TIM_Base_SetConfig+0xd4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00f      	beq.n	8003596 <TIM_Base_SetConfig+0x62>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a24      	ldr	r2, [pc, #144]	; (800360c <TIM_Base_SetConfig+0xd8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00b      	beq.n	8003596 <TIM_Base_SetConfig+0x62>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a23      	ldr	r2, [pc, #140]	; (8003610 <TIM_Base_SetConfig+0xdc>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d007      	beq.n	8003596 <TIM_Base_SetConfig+0x62>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a22      	ldr	r2, [pc, #136]	; (8003614 <TIM_Base_SetConfig+0xe0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d003      	beq.n	8003596 <TIM_Base_SetConfig+0x62>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a21      	ldr	r2, [pc, #132]	; (8003618 <TIM_Base_SetConfig+0xe4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d108      	bne.n	80035a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4a20      	ldr	r2, [pc, #128]	; (800361c <TIM_Base_SetConfig+0xe8>)
 800359a:	4013      	ands	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2280      	movs	r2, #128	; 0x80
 80035ac:	4393      	bics	r3, r2
 80035ae:	001a      	movs	r2, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a0c      	ldr	r2, [pc, #48]	; (8003604 <TIM_Base_SetConfig+0xd0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00b      	beq.n	80035ee <TIM_Base_SetConfig+0xba>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a0d      	ldr	r2, [pc, #52]	; (8003610 <TIM_Base_SetConfig+0xdc>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d007      	beq.n	80035ee <TIM_Base_SetConfig+0xba>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a0c      	ldr	r2, [pc, #48]	; (8003614 <TIM_Base_SetConfig+0xe0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d003      	beq.n	80035ee <TIM_Base_SetConfig+0xba>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a0b      	ldr	r2, [pc, #44]	; (8003618 <TIM_Base_SetConfig+0xe4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d103      	bne.n	80035f6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	615a      	str	r2, [r3, #20]
}
 80035fc:	46c0      	nop			; (mov r8, r8)
 80035fe:	46bd      	mov	sp, r7
 8003600:	b004      	add	sp, #16
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40012c00 	.word	0x40012c00
 8003608:	40000400 	.word	0x40000400
 800360c:	40002000 	.word	0x40002000
 8003610:	40014000 	.word	0x40014000
 8003614:	40014400 	.word	0x40014400
 8003618:	40014800 	.word	0x40014800
 800361c:	fffffcff 	.word	0xfffffcff

08003620 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	2201      	movs	r2, #1
 8003630:	4393      	bics	r3, r2
 8003632:	001a      	movs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4a32      	ldr	r2, [pc, #200]	; (8003718 <TIM_OC1_SetConfig+0xf8>)
 800364e:	4013      	ands	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2203      	movs	r2, #3
 8003656:	4393      	bics	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2202      	movs	r2, #2
 8003668:	4393      	bics	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	4313      	orrs	r3, r2
 8003674:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a28      	ldr	r2, [pc, #160]	; (800371c <TIM_OC1_SetConfig+0xfc>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00b      	beq.n	8003696 <TIM_OC1_SetConfig+0x76>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a27      	ldr	r2, [pc, #156]	; (8003720 <TIM_OC1_SetConfig+0x100>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d007      	beq.n	8003696 <TIM_OC1_SetConfig+0x76>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a26      	ldr	r2, [pc, #152]	; (8003724 <TIM_OC1_SetConfig+0x104>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d003      	beq.n	8003696 <TIM_OC1_SetConfig+0x76>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a25      	ldr	r2, [pc, #148]	; (8003728 <TIM_OC1_SetConfig+0x108>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d10c      	bne.n	80036b0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2208      	movs	r2, #8
 800369a:	4393      	bics	r3, r2
 800369c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2204      	movs	r2, #4
 80036ac:	4393      	bics	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a1a      	ldr	r2, [pc, #104]	; (800371c <TIM_OC1_SetConfig+0xfc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00b      	beq.n	80036d0 <TIM_OC1_SetConfig+0xb0>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a19      	ldr	r2, [pc, #100]	; (8003720 <TIM_OC1_SetConfig+0x100>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d007      	beq.n	80036d0 <TIM_OC1_SetConfig+0xb0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a18      	ldr	r2, [pc, #96]	; (8003724 <TIM_OC1_SetConfig+0x104>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d003      	beq.n	80036d0 <TIM_OC1_SetConfig+0xb0>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a17      	ldr	r2, [pc, #92]	; (8003728 <TIM_OC1_SetConfig+0x108>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d111      	bne.n	80036f4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4a16      	ldr	r2, [pc, #88]	; (800372c <TIM_OC1_SetConfig+0x10c>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4a15      	ldr	r2, [pc, #84]	; (8003730 <TIM_OC1_SetConfig+0x110>)
 80036dc:	4013      	ands	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	621a      	str	r2, [r3, #32]
}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	46bd      	mov	sp, r7
 8003712:	b006      	add	sp, #24
 8003714:	bd80      	pop	{r7, pc}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	fffeff8f 	.word	0xfffeff8f
 800371c:	40012c00 	.word	0x40012c00
 8003720:	40014000 	.word	0x40014000
 8003724:	40014400 	.word	0x40014400
 8003728:	40014800 	.word	0x40014800
 800372c:	fffffeff 	.word	0xfffffeff
 8003730:	fffffdff 	.word	0xfffffdff

08003734 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	2210      	movs	r2, #16
 8003744:	4393      	bics	r3, r2
 8003746:	001a      	movs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4a2e      	ldr	r2, [pc, #184]	; (800381c <TIM_OC2_SetConfig+0xe8>)
 8003762:	4013      	ands	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4a2d      	ldr	r2, [pc, #180]	; (8003820 <TIM_OC2_SetConfig+0xec>)
 800376a:	4013      	ands	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	021b      	lsls	r3, r3, #8
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2220      	movs	r2, #32
 800377e:	4393      	bics	r3, r2
 8003780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	4313      	orrs	r3, r2
 800378c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a24      	ldr	r2, [pc, #144]	; (8003824 <TIM_OC2_SetConfig+0xf0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d10d      	bne.n	80037b2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2280      	movs	r2, #128	; 0x80
 800379a:	4393      	bics	r3, r2
 800379c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2240      	movs	r2, #64	; 0x40
 80037ae:	4393      	bics	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a1b      	ldr	r2, [pc, #108]	; (8003824 <TIM_OC2_SetConfig+0xf0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00b      	beq.n	80037d2 <TIM_OC2_SetConfig+0x9e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a1a      	ldr	r2, [pc, #104]	; (8003828 <TIM_OC2_SetConfig+0xf4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d007      	beq.n	80037d2 <TIM_OC2_SetConfig+0x9e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a19      	ldr	r2, [pc, #100]	; (800382c <TIM_OC2_SetConfig+0xf8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d003      	beq.n	80037d2 <TIM_OC2_SetConfig+0x9e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a18      	ldr	r2, [pc, #96]	; (8003830 <TIM_OC2_SetConfig+0xfc>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d113      	bne.n	80037fa <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4a17      	ldr	r2, [pc, #92]	; (8003834 <TIM_OC2_SetConfig+0x100>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	4a16      	ldr	r2, [pc, #88]	; (8003838 <TIM_OC2_SetConfig+0x104>)
 80037de:	4013      	ands	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	621a      	str	r2, [r3, #32]
}
 8003814:	46c0      	nop			; (mov r8, r8)
 8003816:	46bd      	mov	sp, r7
 8003818:	b006      	add	sp, #24
 800381a:	bd80      	pop	{r7, pc}
 800381c:	feff8fff 	.word	0xfeff8fff
 8003820:	fffffcff 	.word	0xfffffcff
 8003824:	40012c00 	.word	0x40012c00
 8003828:	40014000 	.word	0x40014000
 800382c:	40014400 	.word	0x40014400
 8003830:	40014800 	.word	0x40014800
 8003834:	fffffbff 	.word	0xfffffbff
 8003838:	fffff7ff 	.word	0xfffff7ff

0800383c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	4a35      	ldr	r2, [pc, #212]	; (8003920 <TIM_OC3_SetConfig+0xe4>)
 800384c:	401a      	ands	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4a2f      	ldr	r2, [pc, #188]	; (8003924 <TIM_OC3_SetConfig+0xe8>)
 8003868:	4013      	ands	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2203      	movs	r2, #3
 8003870:	4393      	bics	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	4a29      	ldr	r2, [pc, #164]	; (8003928 <TIM_OC3_SetConfig+0xec>)
 8003882:	4013      	ands	r3, r2
 8003884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a25      	ldr	r2, [pc, #148]	; (800392c <TIM_OC3_SetConfig+0xf0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d10d      	bne.n	80038b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	4a24      	ldr	r2, [pc, #144]	; (8003930 <TIM_OC3_SetConfig+0xf4>)
 800389e:	4013      	ands	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	021b      	lsls	r3, r3, #8
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	4a20      	ldr	r2, [pc, #128]	; (8003934 <TIM_OC3_SetConfig+0xf8>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a1c      	ldr	r2, [pc, #112]	; (800392c <TIM_OC3_SetConfig+0xf0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00b      	beq.n	80038d6 <TIM_OC3_SetConfig+0x9a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a1d      	ldr	r2, [pc, #116]	; (8003938 <TIM_OC3_SetConfig+0xfc>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d007      	beq.n	80038d6 <TIM_OC3_SetConfig+0x9a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a1c      	ldr	r2, [pc, #112]	; (800393c <TIM_OC3_SetConfig+0x100>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d003      	beq.n	80038d6 <TIM_OC3_SetConfig+0x9a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a1b      	ldr	r2, [pc, #108]	; (8003940 <TIM_OC3_SetConfig+0x104>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d113      	bne.n	80038fe <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4a1a      	ldr	r2, [pc, #104]	; (8003944 <TIM_OC3_SetConfig+0x108>)
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	4a19      	ldr	r2, [pc, #100]	; (8003948 <TIM_OC3_SetConfig+0x10c>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	621a      	str	r2, [r3, #32]
}
 8003918:	46c0      	nop			; (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	b006      	add	sp, #24
 800391e:	bd80      	pop	{r7, pc}
 8003920:	fffffeff 	.word	0xfffffeff
 8003924:	fffeff8f 	.word	0xfffeff8f
 8003928:	fffffdff 	.word	0xfffffdff
 800392c:	40012c00 	.word	0x40012c00
 8003930:	fffff7ff 	.word	0xfffff7ff
 8003934:	fffffbff 	.word	0xfffffbff
 8003938:	40014000 	.word	0x40014000
 800393c:	40014400 	.word	0x40014400
 8003940:	40014800 	.word	0x40014800
 8003944:	ffffefff 	.word	0xffffefff
 8003948:	ffffdfff 	.word	0xffffdfff

0800394c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	4a28      	ldr	r2, [pc, #160]	; (80039fc <TIM_OC4_SetConfig+0xb0>)
 800395c:	401a      	ands	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4a22      	ldr	r2, [pc, #136]	; (8003a00 <TIM_OC4_SetConfig+0xb4>)
 8003978:	4013      	ands	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4a21      	ldr	r2, [pc, #132]	; (8003a04 <TIM_OC4_SetConfig+0xb8>)
 8003980:	4013      	ands	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	4a1d      	ldr	r2, [pc, #116]	; (8003a08 <TIM_OC4_SetConfig+0xbc>)
 8003994:	4013      	ands	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	031b      	lsls	r3, r3, #12
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a19      	ldr	r2, [pc, #100]	; (8003a0c <TIM_OC4_SetConfig+0xc0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d00b      	beq.n	80039c4 <TIM_OC4_SetConfig+0x78>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a18      	ldr	r2, [pc, #96]	; (8003a10 <TIM_OC4_SetConfig+0xc4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d007      	beq.n	80039c4 <TIM_OC4_SetConfig+0x78>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a17      	ldr	r2, [pc, #92]	; (8003a14 <TIM_OC4_SetConfig+0xc8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d003      	beq.n	80039c4 <TIM_OC4_SetConfig+0x78>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a16      	ldr	r2, [pc, #88]	; (8003a18 <TIM_OC4_SetConfig+0xcc>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d109      	bne.n	80039d8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	4a15      	ldr	r2, [pc, #84]	; (8003a1c <TIM_OC4_SetConfig+0xd0>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	019b      	lsls	r3, r3, #6
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	621a      	str	r2, [r3, #32]
}
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	46bd      	mov	sp, r7
 80039f6:	b006      	add	sp, #24
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	ffffefff 	.word	0xffffefff
 8003a00:	feff8fff 	.word	0xfeff8fff
 8003a04:	fffffcff 	.word	0xfffffcff
 8003a08:	ffffdfff 	.word	0xffffdfff
 8003a0c:	40012c00 	.word	0x40012c00
 8003a10:	40014000 	.word	0x40014000
 8003a14:	40014400 	.word	0x40014400
 8003a18:	40014800 	.word	0x40014800
 8003a1c:	ffffbfff 	.word	0xffffbfff

08003a20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	4a25      	ldr	r2, [pc, #148]	; (8003ac4 <TIM_OC5_SetConfig+0xa4>)
 8003a30:	401a      	ands	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4a1f      	ldr	r2, [pc, #124]	; (8003ac8 <TIM_OC5_SetConfig+0xa8>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4a1b      	ldr	r2, [pc, #108]	; (8003acc <TIM_OC5_SetConfig+0xac>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	041b      	lsls	r3, r3, #16
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a17      	ldr	r2, [pc, #92]	; (8003ad0 <TIM_OC5_SetConfig+0xb0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00b      	beq.n	8003a8e <TIM_OC5_SetConfig+0x6e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a16      	ldr	r2, [pc, #88]	; (8003ad4 <TIM_OC5_SetConfig+0xb4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <TIM_OC5_SetConfig+0x6e>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a15      	ldr	r2, [pc, #84]	; (8003ad8 <TIM_OC5_SetConfig+0xb8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d003      	beq.n	8003a8e <TIM_OC5_SetConfig+0x6e>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a14      	ldr	r2, [pc, #80]	; (8003adc <TIM_OC5_SetConfig+0xbc>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d109      	bne.n	8003aa2 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	4a0c      	ldr	r2, [pc, #48]	; (8003ac4 <TIM_OC5_SetConfig+0xa4>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	621a      	str	r2, [r3, #32]
}
 8003abc:	46c0      	nop			; (mov r8, r8)
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b006      	add	sp, #24
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	fffeffff 	.word	0xfffeffff
 8003ac8:	fffeff8f 	.word	0xfffeff8f
 8003acc:	fffdffff 	.word	0xfffdffff
 8003ad0:	40012c00 	.word	0x40012c00
 8003ad4:	40014000 	.word	0x40014000
 8003ad8:	40014400 	.word	0x40014400
 8003adc:	40014800 	.word	0x40014800

08003ae0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	4a26      	ldr	r2, [pc, #152]	; (8003b88 <TIM_OC6_SetConfig+0xa8>)
 8003af0:	401a      	ands	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4a20      	ldr	r2, [pc, #128]	; (8003b8c <TIM_OC6_SetConfig+0xac>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	021b      	lsls	r3, r3, #8
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4a1c      	ldr	r2, [pc, #112]	; (8003b90 <TIM_OC6_SetConfig+0xb0>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	051b      	lsls	r3, r3, #20
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a18      	ldr	r2, [pc, #96]	; (8003b94 <TIM_OC6_SetConfig+0xb4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00b      	beq.n	8003b50 <TIM_OC6_SetConfig+0x70>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a17      	ldr	r2, [pc, #92]	; (8003b98 <TIM_OC6_SetConfig+0xb8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d007      	beq.n	8003b50 <TIM_OC6_SetConfig+0x70>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a16      	ldr	r2, [pc, #88]	; (8003b9c <TIM_OC6_SetConfig+0xbc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d003      	beq.n	8003b50 <TIM_OC6_SetConfig+0x70>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a15      	ldr	r2, [pc, #84]	; (8003ba0 <TIM_OC6_SetConfig+0xc0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d109      	bne.n	8003b64 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	4a14      	ldr	r2, [pc, #80]	; (8003ba4 <TIM_OC6_SetConfig+0xc4>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	029b      	lsls	r3, r3, #10
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	621a      	str	r2, [r3, #32]
}
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	46bd      	mov	sp, r7
 8003b82:	b006      	add	sp, #24
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	ffefffff 	.word	0xffefffff
 8003b8c:	feff8fff 	.word	0xfeff8fff
 8003b90:	ffdfffff 	.word	0xffdfffff
 8003b94:	40012c00 	.word	0x40012c00
 8003b98:	40014000 	.word	0x40014000
 8003b9c:	40014400 	.word	0x40014400
 8003ba0:	40014800 	.word	0x40014800
 8003ba4:	fffbffff 	.word	0xfffbffff

08003ba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	4393      	bics	r3, r2
 8003bc2:	001a      	movs	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	22f0      	movs	r2, #240	; 0xf0
 8003bd2:	4393      	bics	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	220a      	movs	r2, #10
 8003be4:	4393      	bics	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	621a      	str	r2, [r3, #32]
}
 8003bfc:	46c0      	nop			; (mov r8, r8)
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b006      	add	sp, #24
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	2210      	movs	r2, #16
 8003c16:	4393      	bics	r3, r2
 8003c18:	001a      	movs	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	4a0d      	ldr	r2, [pc, #52]	; (8003c64 <TIM_TI2_ConfigInputStage+0x60>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	031b      	lsls	r3, r3, #12
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	22a0      	movs	r2, #160	; 0xa0
 8003c40:	4393      	bics	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	621a      	str	r2, [r3, #32]
}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	b006      	add	sp, #24
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	ffff0fff 	.word	0xffff0fff

08003c68 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4a08      	ldr	r2, [pc, #32]	; (8003c9c <TIM_ITRx_SetConfig+0x34>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	2207      	movs	r2, #7
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	609a      	str	r2, [r3, #8]
}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b004      	add	sp, #16
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	ffcfff8f 	.word	0xffcfff8f

08003ca0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	4a09      	ldr	r2, [pc, #36]	; (8003cdc <TIM_ETR_SetConfig+0x3c>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	021a      	lsls	r2, r3, #8
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	609a      	str	r2, [r3, #8]
}
 8003cd4:	46c0      	nop			; (mov r8, r8)
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b006      	add	sp, #24
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	ffff00ff 	.word	0xffff00ff

08003ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	223c      	movs	r2, #60	; 0x3c
 8003cee:	5c9b      	ldrb	r3, [r3, r2]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e04f      	b.n	8003d98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	223c      	movs	r2, #60	; 0x3c
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	223d      	movs	r2, #61	; 0x3d
 8003d04:	2102      	movs	r1, #2
 8003d06:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a20      	ldr	r2, [pc, #128]	; (8003da0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d108      	bne.n	8003d34 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4a1f      	ldr	r2, [pc, #124]	; (8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2270      	movs	r2, #112	; 0x70
 8003d38:	4393      	bics	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a13      	ldr	r2, [pc, #76]	; (8003da0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d009      	beq.n	8003d6c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a12      	ldr	r2, [pc, #72]	; (8003da8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d004      	beq.n	8003d6c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a11      	ldr	r2, [pc, #68]	; (8003dac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d10c      	bne.n	8003d86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2280      	movs	r2, #128	; 0x80
 8003d70:	4393      	bics	r3, r2
 8003d72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	223d      	movs	r2, #61	; 0x3d
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	223c      	movs	r2, #60	; 0x3c
 8003d92:	2100      	movs	r1, #0
 8003d94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	0018      	movs	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b004      	add	sp, #16
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40012c00 	.word	0x40012c00
 8003da4:	ff0fffff 	.word	0xff0fffff
 8003da8:	40000400 	.word	0x40000400
 8003dac:	40014000 	.word	0x40014000

08003db0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	223c      	movs	r2, #60	; 0x3c
 8003dc2:	5c9b      	ldrb	r3, [r3, r2]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e079      	b.n	8003ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	223c      	movs	r2, #60	; 0x3c
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	22ff      	movs	r2, #255	; 0xff
 8003dd8:	4393      	bics	r3, r2
 8003dda:	001a      	movs	r2, r3
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4a38      	ldr	r2, [pc, #224]	; (8003ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003de8:	401a      	ands	r2, r3
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4a35      	ldr	r2, [pc, #212]	; (8003ecc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003df6:	401a      	ands	r2, r3
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4a33      	ldr	r2, [pc, #204]	; (8003ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003e04:	401a      	ands	r2, r3
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4a30      	ldr	r2, [pc, #192]	; (8003ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003e12:	401a      	ands	r2, r3
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4a2e      	ldr	r2, [pc, #184]	; (8003ed8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003e20:	401a      	ands	r2, r3
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4a2b      	ldr	r2, [pc, #172]	; (8003edc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003e2e:	401a      	ands	r2, r3
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4a29      	ldr	r2, [pc, #164]	; (8003ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003e3c:	401a      	ands	r2, r3
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	041b      	lsls	r3, r3, #16
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a25      	ldr	r2, [pc, #148]	; (8003ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d106      	bne.n	8003e60 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4a24      	ldr	r2, [pc, #144]	; (8003ee8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003e56:	401a      	ands	r2, r3
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1f      	ldr	r2, [pc, #124]	; (8003ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d121      	bne.n	8003eae <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4a1f      	ldr	r2, [pc, #124]	; (8003eec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003e6e:	401a      	ands	r2, r3
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	051b      	lsls	r3, r3, #20
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4a1c      	ldr	r2, [pc, #112]	; (8003ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8003e7e:	401a      	ands	r2, r3
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4a1a      	ldr	r2, [pc, #104]	; (8003ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8003e8c:	401a      	ands	r2, r3
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a12      	ldr	r2, [pc, #72]	; (8003ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d106      	bne.n	8003eae <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4a15      	ldr	r2, [pc, #84]	; (8003ef8 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	223c      	movs	r2, #60	; 0x3c
 8003eba:	2100      	movs	r1, #0
 8003ebc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b004      	add	sp, #16
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	fffffcff 	.word	0xfffffcff
 8003ecc:	fffffbff 	.word	0xfffffbff
 8003ed0:	fffff7ff 	.word	0xfffff7ff
 8003ed4:	ffffefff 	.word	0xffffefff
 8003ed8:	ffffdfff 	.word	0xffffdfff
 8003edc:	ffffbfff 	.word	0xffffbfff
 8003ee0:	fff0ffff 	.word	0xfff0ffff
 8003ee4:	40012c00 	.word	0x40012c00
 8003ee8:	efffffff 	.word	0xefffffff
 8003eec:	ff0fffff 	.word	0xff0fffff
 8003ef0:	feffffff 	.word	0xfeffffff
 8003ef4:	fdffffff 	.word	0xfdffffff
 8003ef8:	dfffffff 	.word	0xdfffffff

08003efc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e046      	b.n	8003f9c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2288      	movs	r2, #136	; 0x88
 8003f12:	589b      	ldr	r3, [r3, r2]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d107      	bne.n	8003f28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2284      	movs	r2, #132	; 0x84
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	0018      	movs	r0, r3
 8003f24:	f7fd f988 	bl	8001238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2288      	movs	r2, #136	; 0x88
 8003f2c:	2124      	movs	r1, #36	; 0x24
 8003f2e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	438a      	bics	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	0018      	movs	r0, r3
 8003f44:	f000 f830 	bl	8003fa8 <UART_SetConfig>
 8003f48:	0003      	movs	r3, r0
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d101      	bne.n	8003f52 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e024      	b.n	8003f9c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f000 f9c7 	bl	80042f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	490d      	ldr	r1, [pc, #52]	; (8003fa4 <HAL_UART_Init+0xa8>)
 8003f6e:	400a      	ands	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	212a      	movs	r1, #42	; 0x2a
 8003f7e:	438a      	bics	r2, r1
 8003f80:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	0018      	movs	r0, r3
 8003f96:	f000 fa5f 	bl	8004458 <UART_CheckIdleState>
 8003f9a:	0003      	movs	r3, r0
}
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b002      	add	sp, #8
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	ffffb7ff 	.word	0xffffb7ff

08003fa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fb0:	231a      	movs	r3, #26
 8003fb2:	18fb      	adds	r3, r7, r3
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4abc      	ldr	r2, [pc, #752]	; (80042c8 <UART_SetConfig+0x320>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	0019      	movs	r1, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69fa      	ldr	r2, [r7, #28]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	4ab7      	ldr	r2, [pc, #732]	; (80042cc <UART_SetConfig+0x324>)
 8003fee:	4013      	ands	r3, r2
 8003ff0:	0019      	movs	r1, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	4313      	orrs	r3, r2
 800400c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4aae      	ldr	r2, [pc, #696]	; (80042d0 <UART_SetConfig+0x328>)
 8004016:	4013      	ands	r3, r2
 8004018:	0019      	movs	r1, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69fa      	ldr	r2, [r7, #28]
 8004020:	430a      	orrs	r2, r1
 8004022:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	220f      	movs	r2, #15
 800402c:	4393      	bics	r3, r2
 800402e:	0019      	movs	r1, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4aa4      	ldr	r2, [pc, #656]	; (80042d4 <UART_SetConfig+0x32c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d127      	bne.n	8004096 <UART_SetConfig+0xee>
 8004046:	4ba4      	ldr	r3, [pc, #656]	; (80042d8 <UART_SetConfig+0x330>)
 8004048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404a:	2203      	movs	r2, #3
 800404c:	4013      	ands	r3, r2
 800404e:	2b03      	cmp	r3, #3
 8004050:	d017      	beq.n	8004082 <UART_SetConfig+0xda>
 8004052:	d81b      	bhi.n	800408c <UART_SetConfig+0xe4>
 8004054:	2b02      	cmp	r3, #2
 8004056:	d00a      	beq.n	800406e <UART_SetConfig+0xc6>
 8004058:	d818      	bhi.n	800408c <UART_SetConfig+0xe4>
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <UART_SetConfig+0xbc>
 800405e:	2b01      	cmp	r3, #1
 8004060:	d00a      	beq.n	8004078 <UART_SetConfig+0xd0>
 8004062:	e013      	b.n	800408c <UART_SetConfig+0xe4>
 8004064:	231b      	movs	r3, #27
 8004066:	18fb      	adds	r3, r7, r3
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]
 800406c:	e058      	b.n	8004120 <UART_SetConfig+0x178>
 800406e:	231b      	movs	r3, #27
 8004070:	18fb      	adds	r3, r7, r3
 8004072:	2202      	movs	r2, #2
 8004074:	701a      	strb	r2, [r3, #0]
 8004076:	e053      	b.n	8004120 <UART_SetConfig+0x178>
 8004078:	231b      	movs	r3, #27
 800407a:	18fb      	adds	r3, r7, r3
 800407c:	2204      	movs	r2, #4
 800407e:	701a      	strb	r2, [r3, #0]
 8004080:	e04e      	b.n	8004120 <UART_SetConfig+0x178>
 8004082:	231b      	movs	r3, #27
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	2208      	movs	r2, #8
 8004088:	701a      	strb	r2, [r3, #0]
 800408a:	e049      	b.n	8004120 <UART_SetConfig+0x178>
 800408c:	231b      	movs	r3, #27
 800408e:	18fb      	adds	r3, r7, r3
 8004090:	2210      	movs	r2, #16
 8004092:	701a      	strb	r2, [r3, #0]
 8004094:	e044      	b.n	8004120 <UART_SetConfig+0x178>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a90      	ldr	r2, [pc, #576]	; (80042dc <UART_SetConfig+0x334>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d127      	bne.n	80040f0 <UART_SetConfig+0x148>
 80040a0:	4b8d      	ldr	r3, [pc, #564]	; (80042d8 <UART_SetConfig+0x330>)
 80040a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a4:	220c      	movs	r2, #12
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b0c      	cmp	r3, #12
 80040aa:	d017      	beq.n	80040dc <UART_SetConfig+0x134>
 80040ac:	d81b      	bhi.n	80040e6 <UART_SetConfig+0x13e>
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d00a      	beq.n	80040c8 <UART_SetConfig+0x120>
 80040b2:	d818      	bhi.n	80040e6 <UART_SetConfig+0x13e>
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <UART_SetConfig+0x116>
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d00a      	beq.n	80040d2 <UART_SetConfig+0x12a>
 80040bc:	e013      	b.n	80040e6 <UART_SetConfig+0x13e>
 80040be:	231b      	movs	r3, #27
 80040c0:	18fb      	adds	r3, r7, r3
 80040c2:	2200      	movs	r2, #0
 80040c4:	701a      	strb	r2, [r3, #0]
 80040c6:	e02b      	b.n	8004120 <UART_SetConfig+0x178>
 80040c8:	231b      	movs	r3, #27
 80040ca:	18fb      	adds	r3, r7, r3
 80040cc:	2202      	movs	r2, #2
 80040ce:	701a      	strb	r2, [r3, #0]
 80040d0:	e026      	b.n	8004120 <UART_SetConfig+0x178>
 80040d2:	231b      	movs	r3, #27
 80040d4:	18fb      	adds	r3, r7, r3
 80040d6:	2204      	movs	r2, #4
 80040d8:	701a      	strb	r2, [r3, #0]
 80040da:	e021      	b.n	8004120 <UART_SetConfig+0x178>
 80040dc:	231b      	movs	r3, #27
 80040de:	18fb      	adds	r3, r7, r3
 80040e0:	2208      	movs	r2, #8
 80040e2:	701a      	strb	r2, [r3, #0]
 80040e4:	e01c      	b.n	8004120 <UART_SetConfig+0x178>
 80040e6:	231b      	movs	r3, #27
 80040e8:	18fb      	adds	r3, r7, r3
 80040ea:	2210      	movs	r2, #16
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	e017      	b.n	8004120 <UART_SetConfig+0x178>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a7a      	ldr	r2, [pc, #488]	; (80042e0 <UART_SetConfig+0x338>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d104      	bne.n	8004104 <UART_SetConfig+0x15c>
 80040fa:	231b      	movs	r3, #27
 80040fc:	18fb      	adds	r3, r7, r3
 80040fe:	2200      	movs	r2, #0
 8004100:	701a      	strb	r2, [r3, #0]
 8004102:	e00d      	b.n	8004120 <UART_SetConfig+0x178>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a76      	ldr	r2, [pc, #472]	; (80042e4 <UART_SetConfig+0x33c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d104      	bne.n	8004118 <UART_SetConfig+0x170>
 800410e:	231b      	movs	r3, #27
 8004110:	18fb      	adds	r3, r7, r3
 8004112:	2200      	movs	r2, #0
 8004114:	701a      	strb	r2, [r3, #0]
 8004116:	e003      	b.n	8004120 <UART_SetConfig+0x178>
 8004118:	231b      	movs	r3, #27
 800411a:	18fb      	adds	r3, r7, r3
 800411c:	2210      	movs	r2, #16
 800411e:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69da      	ldr	r2, [r3, #28]
 8004124:	2380      	movs	r3, #128	; 0x80
 8004126:	021b      	lsls	r3, r3, #8
 8004128:	429a      	cmp	r2, r3
 800412a:	d000      	beq.n	800412e <UART_SetConfig+0x186>
 800412c:	e065      	b.n	80041fa <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800412e:	231b      	movs	r3, #27
 8004130:	18fb      	adds	r3, r7, r3
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b08      	cmp	r3, #8
 8004136:	d015      	beq.n	8004164 <UART_SetConfig+0x1bc>
 8004138:	dc18      	bgt.n	800416c <UART_SetConfig+0x1c4>
 800413a:	2b04      	cmp	r3, #4
 800413c:	d00d      	beq.n	800415a <UART_SetConfig+0x1b2>
 800413e:	dc15      	bgt.n	800416c <UART_SetConfig+0x1c4>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <UART_SetConfig+0x1a2>
 8004144:	2b02      	cmp	r3, #2
 8004146:	d005      	beq.n	8004154 <UART_SetConfig+0x1ac>
 8004148:	e010      	b.n	800416c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800414a:	f7fe fd73 	bl	8002c34 <HAL_RCC_GetPCLK1Freq>
 800414e:	0003      	movs	r3, r0
 8004150:	617b      	str	r3, [r7, #20]
        break;
 8004152:	e012      	b.n	800417a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004154:	4b64      	ldr	r3, [pc, #400]	; (80042e8 <UART_SetConfig+0x340>)
 8004156:	617b      	str	r3, [r7, #20]
        break;
 8004158:	e00f      	b.n	800417a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800415a:	f7fe fcdf 	bl	8002b1c <HAL_RCC_GetSysClockFreq>
 800415e:	0003      	movs	r3, r0
 8004160:	617b      	str	r3, [r7, #20]
        break;
 8004162:	e00a      	b.n	800417a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004164:	2380      	movs	r3, #128	; 0x80
 8004166:	021b      	lsls	r3, r3, #8
 8004168:	617b      	str	r3, [r7, #20]
        break;
 800416a:	e006      	b.n	800417a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004170:	231a      	movs	r3, #26
 8004172:	18fb      	adds	r3, r7, r3
 8004174:	2201      	movs	r2, #1
 8004176:	701a      	strb	r2, [r3, #0]
        break;
 8004178:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d100      	bne.n	8004182 <UART_SetConfig+0x1da>
 8004180:	e08d      	b.n	800429e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004186:	4b59      	ldr	r3, [pc, #356]	; (80042ec <UART_SetConfig+0x344>)
 8004188:	0052      	lsls	r2, r2, #1
 800418a:	5ad3      	ldrh	r3, [r2, r3]
 800418c:	0019      	movs	r1, r3
 800418e:	6978      	ldr	r0, [r7, #20]
 8004190:	f7fb ffb6 	bl	8000100 <__udivsi3>
 8004194:	0003      	movs	r3, r0
 8004196:	005a      	lsls	r2, r3, #1
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	085b      	lsrs	r3, r3, #1
 800419e:	18d2      	adds	r2, r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	0019      	movs	r1, r3
 80041a6:	0010      	movs	r0, r2
 80041a8:	f7fb ffaa 	bl	8000100 <__udivsi3>
 80041ac:	0003      	movs	r3, r0
 80041ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	2b0f      	cmp	r3, #15
 80041b4:	d91c      	bls.n	80041f0 <UART_SetConfig+0x248>
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	2380      	movs	r3, #128	; 0x80
 80041ba:	025b      	lsls	r3, r3, #9
 80041bc:	429a      	cmp	r2, r3
 80041be:	d217      	bcs.n	80041f0 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	200e      	movs	r0, #14
 80041c6:	183b      	adds	r3, r7, r0
 80041c8:	210f      	movs	r1, #15
 80041ca:	438a      	bics	r2, r1
 80041cc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	085b      	lsrs	r3, r3, #1
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2207      	movs	r2, #7
 80041d6:	4013      	ands	r3, r2
 80041d8:	b299      	uxth	r1, r3
 80041da:	183b      	adds	r3, r7, r0
 80041dc:	183a      	adds	r2, r7, r0
 80041de:	8812      	ldrh	r2, [r2, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	183a      	adds	r2, r7, r0
 80041ea:	8812      	ldrh	r2, [r2, #0]
 80041ec:	60da      	str	r2, [r3, #12]
 80041ee:	e056      	b.n	800429e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80041f0:	231a      	movs	r3, #26
 80041f2:	18fb      	adds	r3, r7, r3
 80041f4:	2201      	movs	r2, #1
 80041f6:	701a      	strb	r2, [r3, #0]
 80041f8:	e051      	b.n	800429e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041fa:	231b      	movs	r3, #27
 80041fc:	18fb      	adds	r3, r7, r3
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b08      	cmp	r3, #8
 8004202:	d015      	beq.n	8004230 <UART_SetConfig+0x288>
 8004204:	dc18      	bgt.n	8004238 <UART_SetConfig+0x290>
 8004206:	2b04      	cmp	r3, #4
 8004208:	d00d      	beq.n	8004226 <UART_SetConfig+0x27e>
 800420a:	dc15      	bgt.n	8004238 <UART_SetConfig+0x290>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <UART_SetConfig+0x26e>
 8004210:	2b02      	cmp	r3, #2
 8004212:	d005      	beq.n	8004220 <UART_SetConfig+0x278>
 8004214:	e010      	b.n	8004238 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004216:	f7fe fd0d 	bl	8002c34 <HAL_RCC_GetPCLK1Freq>
 800421a:	0003      	movs	r3, r0
 800421c:	617b      	str	r3, [r7, #20]
        break;
 800421e:	e012      	b.n	8004246 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004220:	4b31      	ldr	r3, [pc, #196]	; (80042e8 <UART_SetConfig+0x340>)
 8004222:	617b      	str	r3, [r7, #20]
        break;
 8004224:	e00f      	b.n	8004246 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004226:	f7fe fc79 	bl	8002b1c <HAL_RCC_GetSysClockFreq>
 800422a:	0003      	movs	r3, r0
 800422c:	617b      	str	r3, [r7, #20]
        break;
 800422e:	e00a      	b.n	8004246 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004230:	2380      	movs	r3, #128	; 0x80
 8004232:	021b      	lsls	r3, r3, #8
 8004234:	617b      	str	r3, [r7, #20]
        break;
 8004236:	e006      	b.n	8004246 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800423c:	231a      	movs	r3, #26
 800423e:	18fb      	adds	r3, r7, r3
 8004240:	2201      	movs	r2, #1
 8004242:	701a      	strb	r2, [r3, #0]
        break;
 8004244:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d028      	beq.n	800429e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004250:	4b26      	ldr	r3, [pc, #152]	; (80042ec <UART_SetConfig+0x344>)
 8004252:	0052      	lsls	r2, r2, #1
 8004254:	5ad3      	ldrh	r3, [r2, r3]
 8004256:	0019      	movs	r1, r3
 8004258:	6978      	ldr	r0, [r7, #20]
 800425a:	f7fb ff51 	bl	8000100 <__udivsi3>
 800425e:	0003      	movs	r3, r0
 8004260:	001a      	movs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	085b      	lsrs	r3, r3, #1
 8004268:	18d2      	adds	r2, r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	0019      	movs	r1, r3
 8004270:	0010      	movs	r0, r2
 8004272:	f7fb ff45 	bl	8000100 <__udivsi3>
 8004276:	0003      	movs	r3, r0
 8004278:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	2b0f      	cmp	r3, #15
 800427e:	d90a      	bls.n	8004296 <UART_SetConfig+0x2ee>
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	2380      	movs	r3, #128	; 0x80
 8004284:	025b      	lsls	r3, r3, #9
 8004286:	429a      	cmp	r2, r3
 8004288:	d205      	bcs.n	8004296 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	b29a      	uxth	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	60da      	str	r2, [r3, #12]
 8004294:	e003      	b.n	800429e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8004296:	231a      	movs	r3, #26
 8004298:	18fb      	adds	r3, r7, r3
 800429a:	2201      	movs	r2, #1
 800429c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	226a      	movs	r2, #106	; 0x6a
 80042a2:	2101      	movs	r1, #1
 80042a4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2268      	movs	r2, #104	; 0x68
 80042aa:	2101      	movs	r1, #1
 80042ac:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80042ba:	231a      	movs	r3, #26
 80042bc:	18fb      	adds	r3, r7, r3
 80042be:	781b      	ldrb	r3, [r3, #0]
}
 80042c0:	0018      	movs	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	b008      	add	sp, #32
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	cfff69f3 	.word	0xcfff69f3
 80042cc:	ffffcfff 	.word	0xffffcfff
 80042d0:	11fff4ff 	.word	0x11fff4ff
 80042d4:	40013800 	.word	0x40013800
 80042d8:	40021000 	.word	0x40021000
 80042dc:	40004400 	.word	0x40004400
 80042e0:	40004800 	.word	0x40004800
 80042e4:	40004c00 	.word	0x40004c00
 80042e8:	00f42400 	.word	0x00f42400
 80042ec:	080049dc 	.word	0x080049dc

080042f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fc:	2201      	movs	r2, #1
 80042fe:	4013      	ands	r3, r2
 8004300:	d00b      	beq.n	800431a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4a4a      	ldr	r2, [pc, #296]	; (8004434 <UART_AdvFeatureConfig+0x144>)
 800430a:	4013      	ands	r3, r2
 800430c:	0019      	movs	r1, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431e:	2202      	movs	r2, #2
 8004320:	4013      	ands	r3, r2
 8004322:	d00b      	beq.n	800433c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	4a43      	ldr	r2, [pc, #268]	; (8004438 <UART_AdvFeatureConfig+0x148>)
 800432c:	4013      	ands	r3, r2
 800432e:	0019      	movs	r1, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	2204      	movs	r2, #4
 8004342:	4013      	ands	r3, r2
 8004344:	d00b      	beq.n	800435e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	4a3b      	ldr	r2, [pc, #236]	; (800443c <UART_AdvFeatureConfig+0x14c>)
 800434e:	4013      	ands	r3, r2
 8004350:	0019      	movs	r1, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	2208      	movs	r2, #8
 8004364:	4013      	ands	r3, r2
 8004366:	d00b      	beq.n	8004380 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	4a34      	ldr	r2, [pc, #208]	; (8004440 <UART_AdvFeatureConfig+0x150>)
 8004370:	4013      	ands	r3, r2
 8004372:	0019      	movs	r1, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	430a      	orrs	r2, r1
 800437e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004384:	2210      	movs	r2, #16
 8004386:	4013      	ands	r3, r2
 8004388:	d00b      	beq.n	80043a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	4a2c      	ldr	r2, [pc, #176]	; (8004444 <UART_AdvFeatureConfig+0x154>)
 8004392:	4013      	ands	r3, r2
 8004394:	0019      	movs	r1, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a6:	2220      	movs	r2, #32
 80043a8:	4013      	ands	r3, r2
 80043aa:	d00b      	beq.n	80043c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	4a25      	ldr	r2, [pc, #148]	; (8004448 <UART_AdvFeatureConfig+0x158>)
 80043b4:	4013      	ands	r3, r2
 80043b6:	0019      	movs	r1, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c8:	2240      	movs	r2, #64	; 0x40
 80043ca:	4013      	ands	r3, r2
 80043cc:	d01d      	beq.n	800440a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	4a1d      	ldr	r2, [pc, #116]	; (800444c <UART_AdvFeatureConfig+0x15c>)
 80043d6:	4013      	ands	r3, r2
 80043d8:	0019      	movs	r1, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ea:	2380      	movs	r3, #128	; 0x80
 80043ec:	035b      	lsls	r3, r3, #13
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d10b      	bne.n	800440a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	4a15      	ldr	r2, [pc, #84]	; (8004450 <UART_AdvFeatureConfig+0x160>)
 80043fa:	4013      	ands	r3, r2
 80043fc:	0019      	movs	r1, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	2280      	movs	r2, #128	; 0x80
 8004410:	4013      	ands	r3, r2
 8004412:	d00b      	beq.n	800442c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	4a0e      	ldr	r2, [pc, #56]	; (8004454 <UART_AdvFeatureConfig+0x164>)
 800441c:	4013      	ands	r3, r2
 800441e:	0019      	movs	r1, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	605a      	str	r2, [r3, #4]
  }
}
 800442c:	46c0      	nop			; (mov r8, r8)
 800442e:	46bd      	mov	sp, r7
 8004430:	b002      	add	sp, #8
 8004432:	bd80      	pop	{r7, pc}
 8004434:	fffdffff 	.word	0xfffdffff
 8004438:	fffeffff 	.word	0xfffeffff
 800443c:	fffbffff 	.word	0xfffbffff
 8004440:	ffff7fff 	.word	0xffff7fff
 8004444:	ffffefff 	.word	0xffffefff
 8004448:	ffffdfff 	.word	0xffffdfff
 800444c:	ffefffff 	.word	0xffefffff
 8004450:	ff9fffff 	.word	0xff9fffff
 8004454:	fff7ffff 	.word	0xfff7ffff

08004458 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af02      	add	r7, sp, #8
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2290      	movs	r2, #144	; 0x90
 8004464:	2100      	movs	r1, #0
 8004466:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004468:	f7fd f836 	bl	80014d8 <HAL_GetTick>
 800446c:	0003      	movs	r3, r0
 800446e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2208      	movs	r2, #8
 8004478:	4013      	ands	r3, r2
 800447a:	2b08      	cmp	r3, #8
 800447c:	d10c      	bne.n	8004498 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2280      	movs	r2, #128	; 0x80
 8004482:	0391      	lsls	r1, r2, #14
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	4a1a      	ldr	r2, [pc, #104]	; (80044f0 <UART_CheckIdleState+0x98>)
 8004488:	9200      	str	r2, [sp, #0]
 800448a:	2200      	movs	r2, #0
 800448c:	f000 f832 	bl	80044f4 <UART_WaitOnFlagUntilTimeout>
 8004490:	1e03      	subs	r3, r0, #0
 8004492:	d001      	beq.n	8004498 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e026      	b.n	80044e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2204      	movs	r2, #4
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d10c      	bne.n	80044c0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2280      	movs	r2, #128	; 0x80
 80044aa:	03d1      	lsls	r1, r2, #15
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	4a10      	ldr	r2, [pc, #64]	; (80044f0 <UART_CheckIdleState+0x98>)
 80044b0:	9200      	str	r2, [sp, #0]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f000 f81e 	bl	80044f4 <UART_WaitOnFlagUntilTimeout>
 80044b8:	1e03      	subs	r3, r0, #0
 80044ba:	d001      	beq.n	80044c0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e012      	b.n	80044e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2288      	movs	r2, #136	; 0x88
 80044c4:	2120      	movs	r1, #32
 80044c6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	228c      	movs	r2, #140	; 0x8c
 80044cc:	2120      	movs	r1, #32
 80044ce:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2284      	movs	r2, #132	; 0x84
 80044e0:	2100      	movs	r1, #0
 80044e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	0018      	movs	r0, r3
 80044e8:	46bd      	mov	sp, r7
 80044ea:	b004      	add	sp, #16
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	01ffffff 	.word	0x01ffffff

080044f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b094      	sub	sp, #80	; 0x50
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	603b      	str	r3, [r7, #0]
 8004500:	1dfb      	adds	r3, r7, #7
 8004502:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004504:	e0a7      	b.n	8004656 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004508:	3301      	adds	r3, #1
 800450a:	d100      	bne.n	800450e <UART_WaitOnFlagUntilTimeout+0x1a>
 800450c:	e0a3      	b.n	8004656 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450e:	f7fc ffe3 	bl	80014d8 <HAL_GetTick>
 8004512:	0002      	movs	r2, r0
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800451a:	429a      	cmp	r2, r3
 800451c:	d302      	bcc.n	8004524 <UART_WaitOnFlagUntilTimeout+0x30>
 800451e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004520:	2b00      	cmp	r3, #0
 8004522:	d13f      	bne.n	80045a4 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004524:	f3ef 8310 	mrs	r3, PRIMASK
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800452c:	647b      	str	r3, [r7, #68]	; 0x44
 800452e:	2301      	movs	r3, #1
 8004530:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004534:	f383 8810 	msr	PRIMASK, r3
}
 8004538:	46c0      	nop			; (mov r8, r8)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	494e      	ldr	r1, [pc, #312]	; (8004680 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004546:	400a      	ands	r2, r1
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800454c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	f383 8810 	msr	PRIMASK, r3
}
 8004554:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004556:	f3ef 8310 	mrs	r3, PRIMASK
 800455a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800455c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455e:	643b      	str	r3, [r7, #64]	; 0x40
 8004560:	2301      	movs	r3, #1
 8004562:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004566:	f383 8810 	msr	PRIMASK, r3
}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2101      	movs	r1, #1
 8004578:	438a      	bics	r2, r1
 800457a:	609a      	str	r2, [r3, #8]
 800457c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800457e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004582:	f383 8810 	msr	PRIMASK, r3
}
 8004586:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2288      	movs	r2, #136	; 0x88
 800458c:	2120      	movs	r1, #32
 800458e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	228c      	movs	r2, #140	; 0x8c
 8004594:	2120      	movs	r1, #32
 8004596:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2284      	movs	r2, #132	; 0x84
 800459c:	2100      	movs	r1, #0
 800459e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e069      	b.n	8004678 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2204      	movs	r2, #4
 80045ac:	4013      	ands	r3, r2
 80045ae:	d052      	beq.n	8004656 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	69da      	ldr	r2, [r3, #28]
 80045b6:	2380      	movs	r3, #128	; 0x80
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	401a      	ands	r2, r3
 80045bc:	2380      	movs	r3, #128	; 0x80
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d148      	bne.n	8004656 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2280      	movs	r2, #128	; 0x80
 80045ca:	0112      	lsls	r2, r2, #4
 80045cc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ce:	f3ef 8310 	mrs	r3, PRIMASK
 80045d2:	613b      	str	r3, [r7, #16]
  return(result);
 80045d4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80045d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045d8:	2301      	movs	r3, #1
 80045da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f383 8810 	msr	PRIMASK, r3
}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4924      	ldr	r1, [pc, #144]	; (8004680 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80045f0:	400a      	ands	r2, r1
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	f383 8810 	msr	PRIMASK, r3
}
 80045fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004600:	f3ef 8310 	mrs	r3, PRIMASK
 8004604:	61fb      	str	r3, [r7, #28]
  return(result);
 8004606:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004608:	64bb      	str	r3, [r7, #72]	; 0x48
 800460a:	2301      	movs	r3, #1
 800460c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	f383 8810 	msr	PRIMASK, r3
}
 8004614:	46c0      	nop			; (mov r8, r8)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2101      	movs	r1, #1
 8004622:	438a      	bics	r2, r1
 8004624:	609a      	str	r2, [r3, #8]
 8004626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	f383 8810 	msr	PRIMASK, r3
}
 8004630:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2288      	movs	r2, #136	; 0x88
 8004636:	2120      	movs	r1, #32
 8004638:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	228c      	movs	r2, #140	; 0x8c
 800463e:	2120      	movs	r1, #32
 8004640:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2290      	movs	r2, #144	; 0x90
 8004646:	2120      	movs	r1, #32
 8004648:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2284      	movs	r2, #132	; 0x84
 800464e:	2100      	movs	r1, #0
 8004650:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e010      	b.n	8004678 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	4013      	ands	r3, r2
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	425a      	negs	r2, r3
 8004666:	4153      	adcs	r3, r2
 8004668:	b2db      	uxtb	r3, r3
 800466a:	001a      	movs	r2, r3
 800466c:	1dfb      	adds	r3, r7, #7
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d100      	bne.n	8004676 <UART_WaitOnFlagUntilTimeout+0x182>
 8004674:	e747      	b.n	8004506 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	0018      	movs	r0, r3
 800467a:	46bd      	mov	sp, r7
 800467c:	b014      	add	sp, #80	; 0x50
 800467e:	bd80      	pop	{r7, pc}
 8004680:	fffffe5f 	.word	0xfffffe5f

08004684 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2284      	movs	r2, #132	; 0x84
 8004690:	5c9b      	ldrb	r3, [r3, r2]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d101      	bne.n	800469a <HAL_UARTEx_DisableFifoMode+0x16>
 8004696:	2302      	movs	r3, #2
 8004698:	e027      	b.n	80046ea <HAL_UARTEx_DisableFifoMode+0x66>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2284      	movs	r2, #132	; 0x84
 800469e:	2101      	movs	r1, #1
 80046a0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2288      	movs	r2, #136	; 0x88
 80046a6:	2124      	movs	r1, #36	; 0x24
 80046a8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2101      	movs	r1, #1
 80046be:	438a      	bics	r2, r1
 80046c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4a0b      	ldr	r2, [pc, #44]	; (80046f4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2288      	movs	r2, #136	; 0x88
 80046dc:	2120      	movs	r1, #32
 80046de:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2284      	movs	r2, #132	; 0x84
 80046e4:	2100      	movs	r1, #0
 80046e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	0018      	movs	r0, r3
 80046ec:	46bd      	mov	sp, r7
 80046ee:	b004      	add	sp, #16
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	dfffffff 	.word	0xdfffffff

080046f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2284      	movs	r2, #132	; 0x84
 8004706:	5c9b      	ldrb	r3, [r3, r2]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800470c:	2302      	movs	r3, #2
 800470e:	e02e      	b.n	800476e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2284      	movs	r2, #132	; 0x84
 8004714:	2101      	movs	r1, #1
 8004716:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2288      	movs	r2, #136	; 0x88
 800471c:	2124      	movs	r1, #36	; 0x24
 800471e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2101      	movs	r1, #1
 8004734:	438a      	bics	r2, r1
 8004736:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	08d9      	lsrs	r1, r3, #3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	0018      	movs	r0, r3
 8004750:	f000 f854 	bl	80047fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2288      	movs	r2, #136	; 0x88
 8004760:	2120      	movs	r1, #32
 8004762:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2284      	movs	r2, #132	; 0x84
 8004768:	2100      	movs	r1, #0
 800476a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	0018      	movs	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	b004      	add	sp, #16
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2284      	movs	r2, #132	; 0x84
 8004786:	5c9b      	ldrb	r3, [r3, r2]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800478c:	2302      	movs	r3, #2
 800478e:	e02f      	b.n	80047f0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2284      	movs	r2, #132	; 0x84
 8004794:	2101      	movs	r1, #1
 8004796:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2288      	movs	r2, #136	; 0x88
 800479c:	2124      	movs	r1, #36	; 0x24
 800479e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2101      	movs	r1, #1
 80047b4:	438a      	bics	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	4a0e      	ldr	r2, [pc, #56]	; (80047f8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	0019      	movs	r1, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	0018      	movs	r0, r3
 80047d2:	f000 f813 	bl	80047fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2288      	movs	r2, #136	; 0x88
 80047e2:	2120      	movs	r1, #32
 80047e4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2284      	movs	r2, #132	; 0x84
 80047ea:	2100      	movs	r1, #0
 80047ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	0018      	movs	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b004      	add	sp, #16
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	f1ffffff 	.word	0xf1ffffff

080047fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80047fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004808:	2b00      	cmp	r3, #0
 800480a:	d108      	bne.n	800481e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	226a      	movs	r2, #106	; 0x6a
 8004810:	2101      	movs	r1, #1
 8004812:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2268      	movs	r2, #104	; 0x68
 8004818:	2101      	movs	r1, #1
 800481a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800481c:	e043      	b.n	80048a6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800481e:	260f      	movs	r6, #15
 8004820:	19bb      	adds	r3, r7, r6
 8004822:	2208      	movs	r2, #8
 8004824:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004826:	200e      	movs	r0, #14
 8004828:	183b      	adds	r3, r7, r0
 800482a:	2208      	movs	r2, #8
 800482c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	0e5b      	lsrs	r3, r3, #25
 8004836:	b2da      	uxtb	r2, r3
 8004838:	240d      	movs	r4, #13
 800483a:	193b      	adds	r3, r7, r4
 800483c:	2107      	movs	r1, #7
 800483e:	400a      	ands	r2, r1
 8004840:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	0f5b      	lsrs	r3, r3, #29
 800484a:	b2da      	uxtb	r2, r3
 800484c:	250c      	movs	r5, #12
 800484e:	197b      	adds	r3, r7, r5
 8004850:	2107      	movs	r1, #7
 8004852:	400a      	ands	r2, r1
 8004854:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004856:	183b      	adds	r3, r7, r0
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	197a      	adds	r2, r7, r5
 800485c:	7812      	ldrb	r2, [r2, #0]
 800485e:	4914      	ldr	r1, [pc, #80]	; (80048b0 <UARTEx_SetNbDataToProcess+0xb4>)
 8004860:	5c8a      	ldrb	r2, [r1, r2]
 8004862:	435a      	muls	r2, r3
 8004864:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004866:	197b      	adds	r3, r7, r5
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	4a12      	ldr	r2, [pc, #72]	; (80048b4 <UARTEx_SetNbDataToProcess+0xb8>)
 800486c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800486e:	0019      	movs	r1, r3
 8004870:	f7fb fcd0 	bl	8000214 <__divsi3>
 8004874:	0003      	movs	r3, r0
 8004876:	b299      	uxth	r1, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	226a      	movs	r2, #106	; 0x6a
 800487c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800487e:	19bb      	adds	r3, r7, r6
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	193a      	adds	r2, r7, r4
 8004884:	7812      	ldrb	r2, [r2, #0]
 8004886:	490a      	ldr	r1, [pc, #40]	; (80048b0 <UARTEx_SetNbDataToProcess+0xb4>)
 8004888:	5c8a      	ldrb	r2, [r1, r2]
 800488a:	435a      	muls	r2, r3
 800488c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800488e:	193b      	adds	r3, r7, r4
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	4a08      	ldr	r2, [pc, #32]	; (80048b4 <UARTEx_SetNbDataToProcess+0xb8>)
 8004894:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004896:	0019      	movs	r1, r3
 8004898:	f7fb fcbc 	bl	8000214 <__divsi3>
 800489c:	0003      	movs	r3, r0
 800489e:	b299      	uxth	r1, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2268      	movs	r2, #104	; 0x68
 80048a4:	5299      	strh	r1, [r3, r2]
}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	46bd      	mov	sp, r7
 80048aa:	b005      	add	sp, #20
 80048ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	080049f4 	.word	0x080049f4
 80048b4:	080049fc 	.word	0x080049fc

080048b8 <memset>:
 80048b8:	0003      	movs	r3, r0
 80048ba:	1882      	adds	r2, r0, r2
 80048bc:	4293      	cmp	r3, r2
 80048be:	d100      	bne.n	80048c2 <memset+0xa>
 80048c0:	4770      	bx	lr
 80048c2:	7019      	strb	r1, [r3, #0]
 80048c4:	3301      	adds	r3, #1
 80048c6:	e7f9      	b.n	80048bc <memset+0x4>

080048c8 <__libc_init_array>:
 80048c8:	b570      	push	{r4, r5, r6, lr}
 80048ca:	2600      	movs	r6, #0
 80048cc:	4c0c      	ldr	r4, [pc, #48]	; (8004900 <__libc_init_array+0x38>)
 80048ce:	4d0d      	ldr	r5, [pc, #52]	; (8004904 <__libc_init_array+0x3c>)
 80048d0:	1b64      	subs	r4, r4, r5
 80048d2:	10a4      	asrs	r4, r4, #2
 80048d4:	42a6      	cmp	r6, r4
 80048d6:	d109      	bne.n	80048ec <__libc_init_array+0x24>
 80048d8:	2600      	movs	r6, #0
 80048da:	f000 f819 	bl	8004910 <_init>
 80048de:	4c0a      	ldr	r4, [pc, #40]	; (8004908 <__libc_init_array+0x40>)
 80048e0:	4d0a      	ldr	r5, [pc, #40]	; (800490c <__libc_init_array+0x44>)
 80048e2:	1b64      	subs	r4, r4, r5
 80048e4:	10a4      	asrs	r4, r4, #2
 80048e6:	42a6      	cmp	r6, r4
 80048e8:	d105      	bne.n	80048f6 <__libc_init_array+0x2e>
 80048ea:	bd70      	pop	{r4, r5, r6, pc}
 80048ec:	00b3      	lsls	r3, r6, #2
 80048ee:	58eb      	ldr	r3, [r5, r3]
 80048f0:	4798      	blx	r3
 80048f2:	3601      	adds	r6, #1
 80048f4:	e7ee      	b.n	80048d4 <__libc_init_array+0xc>
 80048f6:	00b3      	lsls	r3, r6, #2
 80048f8:	58eb      	ldr	r3, [r5, r3]
 80048fa:	4798      	blx	r3
 80048fc:	3601      	adds	r6, #1
 80048fe:	e7f2      	b.n	80048e6 <__libc_init_array+0x1e>
 8004900:	08004a04 	.word	0x08004a04
 8004904:	08004a04 	.word	0x08004a04
 8004908:	08004a08 	.word	0x08004a08
 800490c:	08004a04 	.word	0x08004a04

08004910 <_init>:
 8004910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004916:	bc08      	pop	{r3}
 8004918:	469e      	mov	lr, r3
 800491a:	4770      	bx	lr

0800491c <_fini>:
 800491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004922:	bc08      	pop	{r3}
 8004924:	469e      	mov	lr, r3
 8004926:	4770      	bx	lr
