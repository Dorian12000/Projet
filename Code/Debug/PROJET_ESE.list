
PROJET_ESE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004854  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800490c  0800490c  0001490c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049e8  080049e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080049e8  080049e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049e8  080049e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049e8  080049e8  000149e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049ec  080049ec  000149ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080049f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  2000000c  080049fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  080049fc  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011474  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027a4  00000000  00000000  000314eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd8  00000000  00000000  00033c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c6d  00000000  00000000  00034c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000170a7  00000000  00000000  000358d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001444f  00000000  00000000  0004c97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094842  00000000  00000000  00060dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038e4  00000000  00000000  000f5610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000f8ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080048f4 	.word	0x080048f4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080048f4 	.word	0x080048f4

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	0018      	movs	r0, r3
 80003f6:	230c      	movs	r3, #12
 80003f8:	001a      	movs	r2, r3
 80003fa:	2100      	movs	r1, #0
 80003fc:	f004 fa4e 	bl	800489c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000400:	4b2d      	ldr	r3, [pc, #180]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000402:	4a2e      	ldr	r2, [pc, #184]	; (80004bc <MX_ADC1_Init+0xd0>)
 8000404:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000406:	4b2c      	ldr	r3, [pc, #176]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000408:	2280      	movs	r2, #128	; 0x80
 800040a:	05d2      	lsls	r2, r2, #23
 800040c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800040e:	4b2a      	ldr	r3, [pc, #168]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000414:	4b28      	ldr	r3, [pc, #160]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800041a:	4b27      	ldr	r3, [pc, #156]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000420:	4b25      	ldr	r3, [pc, #148]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000422:	2204      	movs	r2, #4
 8000424:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000426:	4b24      	ldr	r3, [pc, #144]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000428:	2200      	movs	r2, #0
 800042a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800042c:	4b22      	ldr	r3, [pc, #136]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800042e:	2200      	movs	r2, #0
 8000430:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000432:	4b21      	ldr	r3, [pc, #132]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000434:	2200      	movs	r2, #0
 8000436:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000438:	4b1f      	ldr	r3, [pc, #124]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800043a:	2201      	movs	r2, #1
 800043c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800043e:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000440:	2220      	movs	r2, #32
 8000442:	2100      	movs	r1, #0
 8000444:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000446:	4b1c      	ldr	r3, [pc, #112]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000448:	2200      	movs	r2, #0
 800044a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800044c:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800044e:	2200      	movs	r2, #0
 8000450:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000452:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000454:	222c      	movs	r2, #44	; 0x2c
 8000456:	2100      	movs	r1, #0
 8000458:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800045a:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800045c:	2200      	movs	r2, #0
 800045e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000460:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000462:	2200      	movs	r2, #0
 8000464:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000468:	2200      	movs	r2, #0
 800046a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800046e:	223c      	movs	r2, #60	; 0x3c
 8000470:	2100      	movs	r1, #0
 8000472:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000474:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000476:	2200      	movs	r2, #0
 8000478:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800047c:	0018      	movs	r0, r3
 800047e:	f001 f925 	bl	80016cc <HAL_ADC_Init>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000486:	f000 f92e 	bl	80006e6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2201      	movs	r2, #1
 800048e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2200      	movs	r2, #0
 8000494:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800049c:	1d3a      	adds	r2, r7, #4
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <MX_ADC1_Init+0xcc>)
 80004a0:	0011      	movs	r1, r2
 80004a2:	0018      	movs	r0, r3
 80004a4:	f001 faba 	bl	8001a1c <HAL_ADC_ConfigChannel>
 80004a8:	1e03      	subs	r3, r0, #0
 80004aa:	d001      	beq.n	80004b0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80004ac:	f000 f91b 	bl	80006e6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b004      	add	sp, #16
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000028 	.word	0x20000028
 80004bc:	40012400 	.word	0x40012400

080004c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b08b      	sub	sp, #44	; 0x2c
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c8:	2414      	movs	r4, #20
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	0018      	movs	r0, r3
 80004ce:	2314      	movs	r3, #20
 80004d0:	001a      	movs	r2, r3
 80004d2:	2100      	movs	r1, #0
 80004d4:	f004 f9e2 	bl	800489c <memset>
  if(adcHandle->Instance==ADC1)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a18      	ldr	r2, [pc, #96]	; (8000540 <HAL_ADC_MspInit+0x80>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d129      	bne.n	8000536 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80004e2:	4b18      	ldr	r3, [pc, #96]	; (8000544 <HAL_ADC_MspInit+0x84>)
 80004e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004e6:	4b17      	ldr	r3, [pc, #92]	; (8000544 <HAL_ADC_MspInit+0x84>)
 80004e8:	2180      	movs	r1, #128	; 0x80
 80004ea:	0349      	lsls	r1, r1, #13
 80004ec:	430a      	orrs	r2, r1
 80004ee:	641a      	str	r2, [r3, #64]	; 0x40
 80004f0:	4b14      	ldr	r3, [pc, #80]	; (8000544 <HAL_ADC_MspInit+0x84>)
 80004f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	035b      	lsls	r3, r3, #13
 80004f8:	4013      	ands	r3, r2
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	4b11      	ldr	r3, [pc, #68]	; (8000544 <HAL_ADC_MspInit+0x84>)
 8000500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000502:	4b10      	ldr	r3, [pc, #64]	; (8000544 <HAL_ADC_MspInit+0x84>)
 8000504:	2101      	movs	r1, #1
 8000506:	430a      	orrs	r2, r1
 8000508:	635a      	str	r2, [r3, #52]	; 0x34
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_ADC_MspInit+0x84>)
 800050c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800050e:	2201      	movs	r2, #1
 8000510:	4013      	ands	r3, r2
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_IN0_BAT_LVL_Pin;
 8000516:	193b      	adds	r3, r7, r4
 8000518:	2201      	movs	r2, #1
 800051a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800051c:	193b      	adds	r3, r7, r4
 800051e:	2203      	movs	r2, #3
 8000520:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	193b      	adds	r3, r7, r4
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC1_IN0_BAT_LVL_GPIO_Port, &GPIO_InitStruct);
 8000528:	193a      	adds	r2, r7, r4
 800052a:	23a0      	movs	r3, #160	; 0xa0
 800052c:	05db      	lsls	r3, r3, #23
 800052e:	0011      	movs	r1, r2
 8000530:	0018      	movs	r0, r3
 8000532:	f001 fcff 	bl	8001f34 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b00b      	add	sp, #44	; 0x2c
 800053c:	bd90      	pop	{r4, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	40012400 	.word	0x40012400
 8000544:	40021000 	.word	0x40021000

08000548 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b08b      	sub	sp, #44	; 0x2c
 800054c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054e:	2414      	movs	r4, #20
 8000550:	193b      	adds	r3, r7, r4
 8000552:	0018      	movs	r0, r3
 8000554:	2314      	movs	r3, #20
 8000556:	001a      	movs	r2, r3
 8000558:	2100      	movs	r1, #0
 800055a:	f004 f99f 	bl	800489c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055e:	4b2e      	ldr	r3, [pc, #184]	; (8000618 <MX_GPIO_Init+0xd0>)
 8000560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000562:	4b2d      	ldr	r3, [pc, #180]	; (8000618 <MX_GPIO_Init+0xd0>)
 8000564:	2104      	movs	r1, #4
 8000566:	430a      	orrs	r2, r1
 8000568:	635a      	str	r2, [r3, #52]	; 0x34
 800056a:	4b2b      	ldr	r3, [pc, #172]	; (8000618 <MX_GPIO_Init+0xd0>)
 800056c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800056e:	2204      	movs	r2, #4
 8000570:	4013      	ands	r3, r2
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b28      	ldr	r3, [pc, #160]	; (8000618 <MX_GPIO_Init+0xd0>)
 8000578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800057a:	4b27      	ldr	r3, [pc, #156]	; (8000618 <MX_GPIO_Init+0xd0>)
 800057c:	2101      	movs	r1, #1
 800057e:	430a      	orrs	r2, r1
 8000580:	635a      	str	r2, [r3, #52]	; 0x34
 8000582:	4b25      	ldr	r3, [pc, #148]	; (8000618 <MX_GPIO_Init+0xd0>)
 8000584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000586:	2201      	movs	r2, #1
 8000588:	4013      	ands	r3, r2
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	4b22      	ldr	r3, [pc, #136]	; (8000618 <MX_GPIO_Init+0xd0>)
 8000590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000592:	4b21      	ldr	r3, [pc, #132]	; (8000618 <MX_GPIO_Init+0xd0>)
 8000594:	2102      	movs	r1, #2
 8000596:	430a      	orrs	r2, r1
 8000598:	635a      	str	r2, [r3, #52]	; 0x34
 800059a:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <MX_GPIO_Init+0xd0>)
 800059c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800059e:	2202      	movs	r2, #2
 80005a0:	4013      	ands	r3, r2
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a6:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <MX_GPIO_Init+0xd0>)
 80005a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005aa:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <MX_GPIO_Init+0xd0>)
 80005ac:	2108      	movs	r1, #8
 80005ae:	430a      	orrs	r2, r1
 80005b0:	635a      	str	r2, [r3, #52]	; 0x34
 80005b2:	4b19      	ldr	r3, [pc, #100]	; (8000618 <MX_GPIO_Init+0xd0>)
 80005b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005b6:	2208      	movs	r2, #8
 80005b8:	4013      	ands	r3, r2
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEV_EN_Pin|M_EN_Pin|LED_R_Pin|LED_B_Pin, GPIO_PIN_RESET);
 80005be:	4b17      	ldr	r3, [pc, #92]	; (800061c <MX_GPIO_Init+0xd4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	211e      	movs	r1, #30
 80005c4:	0018      	movs	r0, r3
 80005c6:	f001 fe19 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = V_BORDURE_Pin|BUMPER_F_Pin|BUMPER_B_Pin|BUMPER_R_Pin
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	22e2      	movs	r2, #226	; 0xe2
 80005ce:	32ff      	adds	r2, #255	; 0xff
 80005d0:	601a      	str	r2, [r3, #0]
                          |BUMPER_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	2200      	movs	r2, #0
 80005d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	2202      	movs	r2, #2
 80005dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	4a0e      	ldr	r2, [pc, #56]	; (800061c <MX_GPIO_Init+0xd4>)
 80005e2:	0019      	movs	r1, r3
 80005e4:	0010      	movs	r0, r2
 80005e6:	f001 fca5 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DEV_EN_Pin|M_EN_Pin|LED_R_Pin|LED_B_Pin;
 80005ea:	0021      	movs	r1, r4
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	221e      	movs	r2, #30
 80005f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2201      	movs	r2, #1
 80005f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2200      	movs	r2, #0
 8000602:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000604:	187b      	adds	r3, r7, r1
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <MX_GPIO_Init+0xd4>)
 8000608:	0019      	movs	r1, r3
 800060a:	0010      	movs	r0, r2
 800060c:	f001 fc92 	bl	8001f34 <HAL_GPIO_Init>

}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b00b      	add	sp, #44	; 0x2c
 8000616:	bd90      	pop	{r4, r7, pc}
 8000618:	40021000 	.word	0x40021000
 800061c:	50000400 	.word	0x50000400

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fece 	bl	80013c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f815 	bl	8000656 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f7ff ff8c 	bl	8000548 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000630:	f7ff fedc 	bl	80003ec <MX_ADC1_Init>
  MX_TIM1_Init();
 8000634:	f000 f89c 	bl	8000770 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000638:	f000 f904 	bl	8000844 <MX_TIM3_Init>
  MX_TIM14_Init();
 800063c:	f000 f966 	bl	800090c <MX_TIM14_Init>
  MX_TIM15_Init();
 8000640:	f000 f9b4 	bl	80009ac <MX_TIM15_Init>
  MX_TIM16_Init();
 8000644:	f000 fa76 	bl	8000b34 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000648:	f000 fafc 	bl	8000c44 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 800064c:	f000 fd4a 	bl	80010e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000650:	f000 fd96 	bl	8001180 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000654:	e7fe      	b.n	8000654 <main+0x34>

08000656 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000656:	b590      	push	{r4, r7, lr}
 8000658:	b093      	sub	sp, #76	; 0x4c
 800065a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065c:	2414      	movs	r4, #20
 800065e:	193b      	adds	r3, r7, r4
 8000660:	0018      	movs	r0, r3
 8000662:	2334      	movs	r3, #52	; 0x34
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f004 f918 	bl	800489c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	0018      	movs	r0, r3
 8000670:	2310      	movs	r3, #16
 8000672:	001a      	movs	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	f004 f911 	bl	800489c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067a:	2380      	movs	r3, #128	; 0x80
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	0018      	movs	r0, r3
 8000680:	f001 fdda 	bl	8002238 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	193b      	adds	r3, r7, r4
 8000686:	2202      	movs	r2, #2
 8000688:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068a:	193b      	adds	r3, r7, r4
 800068c:	2280      	movs	r2, #128	; 0x80
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000692:	193b      	adds	r3, r7, r4
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2240      	movs	r2, #64	; 0x40
 800069c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	2200      	movs	r2, #0
 80006a2:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	0018      	movs	r0, r3
 80006a8:	f001 fe12 	bl	80022d0 <HAL_RCC_OscConfig>
 80006ac:	1e03      	subs	r3, r0, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006b0:	f000 f819 	bl	80006e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2207      	movs	r2, #7
 80006b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2100      	movs	r1, #0
 80006d0:	0018      	movs	r0, r3
 80006d2:	f002 f90d 	bl	80028f0 <HAL_RCC_ClockConfig>
 80006d6:	1e03      	subs	r3, r0, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006da:	f000 f804 	bl	80006e6 <Error_Handler>
  }
}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b013      	add	sp, #76	; 0x4c
 80006e4:	bd90      	pop	{r4, r7, pc}

080006e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ea:	b672      	cpsid	i
}
 80006ec:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ee:	e7fe      	b.n	80006ee <Error_Handler+0x8>

080006f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <HAL_MspInit+0x44>)
 80006f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <HAL_MspInit+0x44>)
 80006fc:	2101      	movs	r1, #1
 80006fe:	430a      	orrs	r2, r1
 8000700:	641a      	str	r2, [r3, #64]	; 0x40
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <HAL_MspInit+0x44>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000706:	2201      	movs	r2, #1
 8000708:	4013      	ands	r3, r2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_MspInit+0x44>)
 8000710:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <HAL_MspInit+0x44>)
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	0549      	lsls	r1, r1, #21
 8000718:	430a      	orrs	r2, r1
 800071a:	63da      	str	r2, [r3, #60]	; 0x3c
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HAL_MspInit+0x44>)
 800071e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	055b      	lsls	r3, r3, #21
 8000724:	4013      	ands	r3, r2
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b002      	add	sp, #8
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	40021000 	.word	0x40021000

08000738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800073c:	e7fe      	b.n	800073c <NMI_Handler+0x4>

0800073e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <HardFault_Handler+0x4>

08000744 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800075c:	f000 fe9c 	bl	8001498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b08d      	sub	sp, #52	; 0x34
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000776:	240c      	movs	r4, #12
 8000778:	193b      	adds	r3, r7, r4
 800077a:	0018      	movs	r0, r3
 800077c:	2324      	movs	r3, #36	; 0x24
 800077e:	001a      	movs	r2, r3
 8000780:	2100      	movs	r1, #0
 8000782:	f004 f88b 	bl	800489c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000786:	003b      	movs	r3, r7
 8000788:	0018      	movs	r0, r3
 800078a:	230c      	movs	r3, #12
 800078c:	001a      	movs	r2, r3
 800078e:	2100      	movs	r1, #0
 8000790:	f004 f884 	bl	800489c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000794:	4b28      	ldr	r3, [pc, #160]	; (8000838 <MX_TIM1_Init+0xc8>)
 8000796:	4a29      	ldr	r2, [pc, #164]	; (800083c <MX_TIM1_Init+0xcc>)
 8000798:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800079a:	4b27      	ldr	r3, [pc, #156]	; (8000838 <MX_TIM1_Init+0xc8>)
 800079c:	2200      	movs	r2, #0
 800079e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a0:	4b25      	ldr	r3, [pc, #148]	; (8000838 <MX_TIM1_Init+0xc8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007a6:	4b24      	ldr	r3, [pc, #144]	; (8000838 <MX_TIM1_Init+0xc8>)
 80007a8:	4a25      	ldr	r2, [pc, #148]	; (8000840 <MX_TIM1_Init+0xd0>)
 80007aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <MX_TIM1_Init+0xc8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007b2:	4b21      	ldr	r3, [pc, #132]	; (8000838 <MX_TIM1_Init+0xc8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <MX_TIM1_Init+0xc8>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80007be:	0021      	movs	r1, r4
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2201      	movs	r2, #1
 80007c4:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2201      	movs	r2, #1
 80007d0:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2201      	movs	r2, #1
 80007e8:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2200      	movs	r2, #0
 80007ee:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2200      	movs	r2, #0
 80007f4:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80007f6:	187a      	adds	r2, r7, r1
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_TIM1_Init+0xc8>)
 80007fa:	0011      	movs	r1, r2
 80007fc:	0018      	movs	r0, r3
 80007fe:	f002 fc0d 	bl	800301c <HAL_TIM_Encoder_Init>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d001      	beq.n	800080a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000806:	f7ff ff6e 	bl	80006e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080a:	003b      	movs	r3, r7
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000810:	003b      	movs	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000816:	003b      	movs	r3, r7
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800081c:	003a      	movs	r2, r7
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_TIM1_Init+0xc8>)
 8000820:	0011      	movs	r1, r2
 8000822:	0018      	movs	r0, r3
 8000824:	f003 fa4e 	bl	8003cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000828:	1e03      	subs	r3, r0, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800082c:	f7ff ff5b 	bl	80006e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	b00d      	add	sp, #52	; 0x34
 8000836:	bd90      	pop	{r4, r7, pc}
 8000838:	2000008c 	.word	0x2000008c
 800083c:	40012c00 	.word	0x40012c00
 8000840:	0000ffff 	.word	0x0000ffff

08000844 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b08d      	sub	sp, #52	; 0x34
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800084a:	240c      	movs	r4, #12
 800084c:	193b      	adds	r3, r7, r4
 800084e:	0018      	movs	r0, r3
 8000850:	2324      	movs	r3, #36	; 0x24
 8000852:	001a      	movs	r2, r3
 8000854:	2100      	movs	r1, #0
 8000856:	f004 f821 	bl	800489c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800085a:	003b      	movs	r3, r7
 800085c:	0018      	movs	r0, r3
 800085e:	230c      	movs	r3, #12
 8000860:	001a      	movs	r2, r3
 8000862:	2100      	movs	r1, #0
 8000864:	f004 f81a 	bl	800489c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000868:	4b25      	ldr	r3, [pc, #148]	; (8000900 <MX_TIM3_Init+0xbc>)
 800086a:	4a26      	ldr	r2, [pc, #152]	; (8000904 <MX_TIM3_Init+0xc0>)
 800086c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800086e:	4b24      	ldr	r3, [pc, #144]	; (8000900 <MX_TIM3_Init+0xbc>)
 8000870:	2200      	movs	r2, #0
 8000872:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <MX_TIM3_Init+0xbc>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <MX_TIM3_Init+0xbc>)
 800087c:	4a22      	ldr	r2, [pc, #136]	; (8000908 <MX_TIM3_Init+0xc4>)
 800087e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <MX_TIM3_Init+0xbc>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000886:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <MX_TIM3_Init+0xbc>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800088c:	0021      	movs	r1, r4
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2201      	movs	r2, #1
 8000892:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2201      	movs	r2, #1
 800089e:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2200      	movs	r2, #0
 80008b0:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2201      	movs	r2, #1
 80008b6:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008c4:	187a      	adds	r2, r7, r1
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_TIM3_Init+0xbc>)
 80008c8:	0011      	movs	r1, r2
 80008ca:	0018      	movs	r0, r3
 80008cc:	f002 fba6 	bl	800301c <HAL_TIM_Encoder_Init>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80008d4:	f7ff ff07 	bl	80006e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d8:	003b      	movs	r3, r7
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008de:	003b      	movs	r3, r7
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008e4:	003a      	movs	r2, r7
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_TIM3_Init+0xbc>)
 80008e8:	0011      	movs	r1, r2
 80008ea:	0018      	movs	r0, r3
 80008ec:	f003 f9ea 	bl	8003cc4 <HAL_TIMEx_MasterConfigSynchronization>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80008f4:	f7ff fef7 	bl	80006e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b00d      	add	sp, #52	; 0x34
 80008fe:	bd90      	pop	{r4, r7, pc}
 8000900:	200000d8 	.word	0x200000d8
 8000904:	40000400 	.word	0x40000400
 8000908:	0000ffff 	.word	0x0000ffff

0800090c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	0018      	movs	r0, r3
 8000916:	231c      	movs	r3, #28
 8000918:	001a      	movs	r2, r3
 800091a:	2100      	movs	r1, #0
 800091c:	f003 ffbe 	bl	800489c <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000920:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <MX_TIM14_Init+0x94>)
 8000922:	4a20      	ldr	r2, [pc, #128]	; (80009a4 <MX_TIM14_Init+0x98>)
 8000924:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000926:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <MX_TIM14_Init+0x94>)
 8000928:	2200      	movs	r2, #0
 800092a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_TIM14_Init+0x94>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <MX_TIM14_Init+0x94>)
 8000934:	4a1c      	ldr	r2, [pc, #112]	; (80009a8 <MX_TIM14_Init+0x9c>)
 8000936:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000938:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <MX_TIM14_Init+0x94>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <MX_TIM14_Init+0x94>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000944:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_TIM14_Init+0x94>)
 8000946:	0018      	movs	r0, r3
 8000948:	f002 fab0 	bl	8002eac <HAL_TIM_Base_Init>
 800094c:	1e03      	subs	r3, r0, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000950:	f7ff fec9 	bl	80006e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_TIM14_Init+0x94>)
 8000956:	0018      	movs	r0, r3
 8000958:	f002 fb00 	bl	8002f5c <HAL_TIM_PWM_Init>
 800095c:	1e03      	subs	r3, r0, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000960:	f7ff fec1 	bl	80006e6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2260      	movs	r2, #96	; 0x60
 8000968:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800097c:	1d39      	adds	r1, r7, #4
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_TIM14_Init+0x94>)
 8000980:	2200      	movs	r2, #0
 8000982:	0018      	movs	r0, r3
 8000984:	f002 fbf2 	bl	800316c <HAL_TIM_PWM_ConfigChannel>
 8000988:	1e03      	subs	r3, r0, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800098c:	f7ff feab 	bl	80006e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000990:	4b03      	ldr	r3, [pc, #12]	; (80009a0 <MX_TIM14_Init+0x94>)
 8000992:	0018      	movs	r0, r3
 8000994:	f000 fac4 	bl	8000f20 <HAL_TIM_MspPostInit>

}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	b008      	add	sp, #32
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000124 	.word	0x20000124
 80009a4:	40002000 	.word	0x40002000
 80009a8:	0000ffff 	.word	0x0000ffff

080009ac <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b09c      	sub	sp, #112	; 0x70
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b2:	2360      	movs	r3, #96	; 0x60
 80009b4:	18fb      	adds	r3, r7, r3
 80009b6:	0018      	movs	r0, r3
 80009b8:	2310      	movs	r3, #16
 80009ba:	001a      	movs	r2, r3
 80009bc:	2100      	movs	r1, #0
 80009be:	f003 ff6d 	bl	800489c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c2:	2354      	movs	r3, #84	; 0x54
 80009c4:	18fb      	adds	r3, r7, r3
 80009c6:	0018      	movs	r0, r3
 80009c8:	230c      	movs	r3, #12
 80009ca:	001a      	movs	r2, r3
 80009cc:	2100      	movs	r1, #0
 80009ce:	f003 ff65 	bl	800489c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d2:	2338      	movs	r3, #56	; 0x38
 80009d4:	18fb      	adds	r3, r7, r3
 80009d6:	0018      	movs	r0, r3
 80009d8:	231c      	movs	r3, #28
 80009da:	001a      	movs	r2, r3
 80009dc:	2100      	movs	r1, #0
 80009de:	f003 ff5d 	bl	800489c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	0018      	movs	r0, r3
 80009e6:	2334      	movs	r3, #52	; 0x34
 80009e8:	001a      	movs	r2, r3
 80009ea:	2100      	movs	r1, #0
 80009ec:	f003 ff56 	bl	800489c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80009f0:	4b4d      	ldr	r3, [pc, #308]	; (8000b28 <MX_TIM15_Init+0x17c>)
 80009f2:	4a4e      	ldr	r2, [pc, #312]	; (8000b2c <MX_TIM15_Init+0x180>)
 80009f4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80009f6:	4b4c      	ldr	r3, [pc, #304]	; (8000b28 <MX_TIM15_Init+0x17c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fc:	4b4a      	ldr	r3, [pc, #296]	; (8000b28 <MX_TIM15_Init+0x17c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000a02:	4b49      	ldr	r3, [pc, #292]	; (8000b28 <MX_TIM15_Init+0x17c>)
 8000a04:	4a4a      	ldr	r2, [pc, #296]	; (8000b30 <MX_TIM15_Init+0x184>)
 8000a06:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a08:	4b47      	ldr	r3, [pc, #284]	; (8000b28 <MX_TIM15_Init+0x17c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000a0e:	4b46      	ldr	r3, [pc, #280]	; (8000b28 <MX_TIM15_Init+0x17c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a14:	4b44      	ldr	r3, [pc, #272]	; (8000b28 <MX_TIM15_Init+0x17c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000a1a:	4b43      	ldr	r3, [pc, #268]	; (8000b28 <MX_TIM15_Init+0x17c>)
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f002 fa45 	bl	8002eac <HAL_TIM_Base_Init>
 8000a22:	1e03      	subs	r3, r0, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8000a26:	f7ff fe5e 	bl	80006e6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2a:	2160      	movs	r1, #96	; 0x60
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2280      	movs	r2, #128	; 0x80
 8000a30:	0152      	lsls	r2, r2, #5
 8000a32:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000a34:	187a      	adds	r2, r7, r1
 8000a36:	4b3c      	ldr	r3, [pc, #240]	; (8000b28 <MX_TIM15_Init+0x17c>)
 8000a38:	0011      	movs	r1, r2
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f002 fc96 	bl	800336c <HAL_TIM_ConfigClockSource>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8000a44:	f7ff fe4f 	bl	80006e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000a48:	4b37      	ldr	r3, [pc, #220]	; (8000b28 <MX_TIM15_Init+0x17c>)
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f002 fa86 	bl	8002f5c <HAL_TIM_PWM_Init>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8000a54:	f7ff fe47 	bl	80006e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a58:	2154      	movs	r1, #84	; 0x54
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000a66:	187a      	adds	r2, r7, r1
 8000a68:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <MX_TIM15_Init+0x17c>)
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f003 f929 	bl	8003cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	1e03      	subs	r3, r0, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8000a76:	f7ff fe36 	bl	80006e6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a7a:	2138      	movs	r1, #56	; 0x38
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2260      	movs	r2, #96	; 0x60
 8000a80:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2200      	movs	r2, #0
 8000a86:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa6:	1879      	adds	r1, r7, r1
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <MX_TIM15_Init+0x17c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	0018      	movs	r0, r3
 8000aae:	f002 fb5d 	bl	800316c <HAL_TIM_PWM_ConfigChannel>
 8000ab2:	1e03      	subs	r3, r0, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000ab6:	f7ff fe16 	bl	80006e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aba:	2338      	movs	r3, #56	; 0x38
 8000abc:	18f9      	adds	r1, r7, r3
 8000abe:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <MX_TIM15_Init+0x17c>)
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f002 fb52 	bl	800316c <HAL_TIM_PWM_ConfigChannel>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 8000acc:	f7ff fe0b 	bl	80006e6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2280      	movs	r2, #128	; 0x80
 8000af2:	0192      	lsls	r2, r2, #6
 8000af4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2200      	movs	r2, #0
 8000b00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000b02:	1d3a      	adds	r2, r7, #4
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <MX_TIM15_Init+0x17c>)
 8000b06:	0011      	movs	r1, r2
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f003 f943 	bl	8003d94 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b0e:	1e03      	subs	r3, r0, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM15_Init+0x16a>
  {
    Error_Handler();
 8000b12:	f7ff fde8 	bl	80006e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000b16:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <MX_TIM15_Init+0x17c>)
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f000 fa01 	bl	8000f20 <HAL_TIM_MspPostInit>

}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b01c      	add	sp, #112	; 0x70
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	20000170 	.word	0x20000170
 8000b2c:	40014000 	.word	0x40014000
 8000b30:	0000ffff 	.word	0x0000ffff

08000b34 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b094      	sub	sp, #80	; 0x50
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b3a:	2334      	movs	r3, #52	; 0x34
 8000b3c:	18fb      	adds	r3, r7, r3
 8000b3e:	0018      	movs	r0, r3
 8000b40:	231c      	movs	r3, #28
 8000b42:	001a      	movs	r2, r3
 8000b44:	2100      	movs	r1, #0
 8000b46:	f003 fea9 	bl	800489c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b4a:	003b      	movs	r3, r7
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	2334      	movs	r3, #52	; 0x34
 8000b50:	001a      	movs	r2, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	f003 fea2 	bl	800489c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b58:	4b37      	ldr	r3, [pc, #220]	; (8000c38 <MX_TIM16_Init+0x104>)
 8000b5a:	4a38      	ldr	r2, [pc, #224]	; (8000c3c <MX_TIM16_Init+0x108>)
 8000b5c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000b5e:	4b36      	ldr	r3, [pc, #216]	; (8000c38 <MX_TIM16_Init+0x104>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b64:	4b34      	ldr	r3, [pc, #208]	; (8000c38 <MX_TIM16_Init+0x104>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000b6a:	4b33      	ldr	r3, [pc, #204]	; (8000c38 <MX_TIM16_Init+0x104>)
 8000b6c:	4a34      	ldr	r2, [pc, #208]	; (8000c40 <MX_TIM16_Init+0x10c>)
 8000b6e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b70:	4b31      	ldr	r3, [pc, #196]	; (8000c38 <MX_TIM16_Init+0x104>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b76:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <MX_TIM16_Init+0x104>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7c:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <MX_TIM16_Init+0x104>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b82:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <MX_TIM16_Init+0x104>)
 8000b84:	0018      	movs	r0, r3
 8000b86:	f002 f991 	bl	8002eac <HAL_TIM_Base_Init>
 8000b8a:	1e03      	subs	r3, r0, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000b8e:	f7ff fdaa 	bl	80006e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000b92:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <MX_TIM16_Init+0x104>)
 8000b94:	0018      	movs	r0, r3
 8000b96:	f002 f9e1 	bl	8002f5c <HAL_TIM_PWM_Init>
 8000b9a:	1e03      	subs	r3, r0, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8000b9e:	f7ff fda2 	bl	80006e6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba2:	2134      	movs	r1, #52	; 0x34
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	2260      	movs	r2, #96	; 0x60
 8000ba8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bce:	1879      	adds	r1, r7, r1
 8000bd0:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <MX_TIM16_Init+0x104>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f002 fac9 	bl	800316c <HAL_TIM_PWM_ConfigChannel>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8000bde:	f7ff fd82 	bl	80006e6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000be2:	003b      	movs	r3, r7
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000be8:	003b      	movs	r3, r7
 8000bea:	2200      	movs	r2, #0
 8000bec:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bee:	003b      	movs	r3, r7
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bf4:	003b      	movs	r3, r7
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bfa:	003b      	movs	r3, r7
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c00:	003b      	movs	r3, r7
 8000c02:	2280      	movs	r2, #128	; 0x80
 8000c04:	0192      	lsls	r2, r2, #6
 8000c06:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c08:	003b      	movs	r3, r7
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c0e:	003b      	movs	r3, r7
 8000c10:	2200      	movs	r2, #0
 8000c12:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000c14:	003a      	movs	r2, r7
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <MX_TIM16_Init+0x104>)
 8000c18:	0011      	movs	r1, r2
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f003 f8ba 	bl	8003d94 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c20:	1e03      	subs	r3, r0, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8000c24:	f7ff fd5f 	bl	80006e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <MX_TIM16_Init+0x104>)
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f000 f978 	bl	8000f20 <HAL_TIM_MspPostInit>

}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b014      	add	sp, #80	; 0x50
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200001bc 	.word	0x200001bc
 8000c3c:	40014400 	.word	0x40014400
 8000c40:	0000ffff 	.word	0x0000ffff

08000c44 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b094      	sub	sp, #80	; 0x50
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c4a:	2334      	movs	r3, #52	; 0x34
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	0018      	movs	r0, r3
 8000c50:	231c      	movs	r3, #28
 8000c52:	001a      	movs	r2, r3
 8000c54:	2100      	movs	r1, #0
 8000c56:	f003 fe21 	bl	800489c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c5a:	003b      	movs	r3, r7
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	2334      	movs	r3, #52	; 0x34
 8000c60:	001a      	movs	r2, r3
 8000c62:	2100      	movs	r1, #0
 8000c64:	f003 fe1a 	bl	800489c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000c68:	4b37      	ldr	r3, [pc, #220]	; (8000d48 <MX_TIM17_Init+0x104>)
 8000c6a:	4a38      	ldr	r2, [pc, #224]	; (8000d4c <MX_TIM17_Init+0x108>)
 8000c6c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000c6e:	4b36      	ldr	r3, [pc, #216]	; (8000d48 <MX_TIM17_Init+0x104>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c74:	4b34      	ldr	r3, [pc, #208]	; (8000d48 <MX_TIM17_Init+0x104>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000c7a:	4b33      	ldr	r3, [pc, #204]	; (8000d48 <MX_TIM17_Init+0x104>)
 8000c7c:	4a34      	ldr	r2, [pc, #208]	; (8000d50 <MX_TIM17_Init+0x10c>)
 8000c7e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c80:	4b31      	ldr	r3, [pc, #196]	; (8000d48 <MX_TIM17_Init+0x104>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000c86:	4b30      	ldr	r3, [pc, #192]	; (8000d48 <MX_TIM17_Init+0x104>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8c:	4b2e      	ldr	r3, [pc, #184]	; (8000d48 <MX_TIM17_Init+0x104>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000c92:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <MX_TIM17_Init+0x104>)
 8000c94:	0018      	movs	r0, r3
 8000c96:	f002 f909 	bl	8002eac <HAL_TIM_Base_Init>
 8000c9a:	1e03      	subs	r3, r0, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8000c9e:	f7ff fd22 	bl	80006e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000ca2:	4b29      	ldr	r3, [pc, #164]	; (8000d48 <MX_TIM17_Init+0x104>)
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f002 f959 	bl	8002f5c <HAL_TIM_PWM_Init>
 8000caa:	1e03      	subs	r3, r0, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8000cae:	f7ff fd1a 	bl	80006e6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb2:	2134      	movs	r1, #52	; 0x34
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	2260      	movs	r2, #96	; 0x60
 8000cb8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cde:	1879      	adds	r1, r7, r1
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <MX_TIM17_Init+0x104>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f002 fa41 	bl	800316c <HAL_TIM_PWM_ConfigChannel>
 8000cea:	1e03      	subs	r3, r0, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8000cee:	f7ff fcfa 	bl	80006e6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cf2:	003b      	movs	r3, r7
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cf8:	003b      	movs	r3, r7
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cfe:	003b      	movs	r3, r7
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d04:	003b      	movs	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d0a:	003b      	movs	r3, r7
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d10:	003b      	movs	r3, r7
 8000d12:	2280      	movs	r2, #128	; 0x80
 8000d14:	0192      	lsls	r2, r2, #6
 8000d16:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d18:	003b      	movs	r3, r7
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d1e:	003b      	movs	r3, r7
 8000d20:	2200      	movs	r2, #0
 8000d22:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000d24:	003a      	movs	r2, r7
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_TIM17_Init+0x104>)
 8000d28:	0011      	movs	r1, r2
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f003 f832 	bl	8003d94 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8000d34:	f7ff fcd7 	bl	80006e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <MX_TIM17_Init+0x104>)
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f000 f8f0 	bl	8000f20 <HAL_TIM_MspPostInit>

}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b014      	add	sp, #80	; 0x50
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000208 	.word	0x20000208
 8000d4c:	40014800 	.word	0x40014800
 8000d50:	0000ffff 	.word	0x0000ffff

08000d54 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b08d      	sub	sp, #52	; 0x34
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	241c      	movs	r4, #28
 8000d5e:	193b      	adds	r3, r7, r4
 8000d60:	0018      	movs	r0, r3
 8000d62:	2314      	movs	r3, #20
 8000d64:	001a      	movs	r2, r3
 8000d66:	2100      	movs	r1, #0
 8000d68:	f003 fd98 	bl	800489c <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a36      	ldr	r2, [pc, #216]	; (8000e4c <HAL_TIM_Encoder_MspInit+0xf8>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d131      	bne.n	8000dda <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d76:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d7a:	4b35      	ldr	r3, [pc, #212]	; (8000e50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000d7c:	2180      	movs	r1, #128	; 0x80
 8000d7e:	0109      	lsls	r1, r1, #4
 8000d80:	430a      	orrs	r2, r1
 8000d82:	641a      	str	r2, [r3, #64]	; 0x40
 8000d84:	4b32      	ldr	r3, [pc, #200]	; (8000e50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
 8000d90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d92:	4b2f      	ldr	r3, [pc, #188]	; (8000e50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d96:	4b2e      	ldr	r3, [pc, #184]	; (8000e50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000d98:	2104      	movs	r1, #4
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d9e:	4b2c      	ldr	r3, [pc, #176]	; (8000e50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da2:	2204      	movs	r2, #4
 8000da4:	4013      	ands	r3, r2
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC8     ------> TIM1_CH1
    PC9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH1_ENCODER_RB_Pin|TIM1_CH2_ENCODER_RA_Pin;
 8000daa:	193b      	adds	r3, r7, r4
 8000dac:	22c0      	movs	r2, #192	; 0xc0
 8000dae:	0092      	lsls	r2, r2, #2
 8000db0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	0021      	movs	r1, r4
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2202      	movs	r2, #2
 8000db8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2202      	movs	r2, #2
 8000dca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	4a21      	ldr	r2, [pc, #132]	; (8000e54 <HAL_TIM_Encoder_MspInit+0x100>)
 8000dd0:	0019      	movs	r1, r3
 8000dd2:	0010      	movs	r0, r2
 8000dd4:	f001 f8ae 	bl	8001f34 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000dd8:	e033      	b.n	8000e42 <HAL_TIM_Encoder_MspInit+0xee>
  else if(tim_encoderHandle->Instance==TIM3)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a1e      	ldr	r2, [pc, #120]	; (8000e58 <HAL_TIM_Encoder_MspInit+0x104>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d12e      	bne.n	8000e42 <HAL_TIM_Encoder_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000dea:	2102      	movs	r1, #2
 8000dec:	430a      	orrs	r2, r1
 8000dee:	63da      	str	r2, [r3, #60]	; 0x3c
 8000df0:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000df4:	2202      	movs	r2, #2
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000e02:	2101      	movs	r1, #1
 8000e04:	430a      	orrs	r2, r1
 8000e06:	635a      	str	r2, [r3, #52]	; 0x34
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4013      	ands	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_ENCODER_LA_Pin|TIM3_CH2_ENCODER_LB_Pin;
 8000e14:	211c      	movs	r1, #28
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	22c0      	movs	r2, #192	; 0xc0
 8000e1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	2202      	movs	r2, #2
 8000e20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	2201      	movs	r2, #1
 8000e32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	187a      	adds	r2, r7, r1
 8000e36:	23a0      	movs	r3, #160	; 0xa0
 8000e38:	05db      	lsls	r3, r3, #23
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f001 f879 	bl	8001f34 <HAL_GPIO_Init>
}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b00d      	add	sp, #52	; 0x34
 8000e48:	bd90      	pop	{r4, r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	40012c00 	.word	0x40012c00
 8000e50:	40021000 	.word	0x40021000
 8000e54:	50000800 	.word	0x50000800
 8000e58:	40000400 	.word	0x40000400

08000e5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a28      	ldr	r2, [pc, #160]	; (8000f0c <HAL_TIM_Base_MspInit+0xb0>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d10e      	bne.n	8000e8c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000e6e:	4b28      	ldr	r3, [pc, #160]	; (8000f10 <HAL_TIM_Base_MspInit+0xb4>)
 8000e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e72:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <HAL_TIM_Base_MspInit+0xb4>)
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	0209      	lsls	r1, r1, #8
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	641a      	str	r2, [r3, #64]	; 0x40
 8000e7c:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <HAL_TIM_Base_MspInit+0xb4>)
 8000e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	4013      	ands	r3, r2
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000e8a:	e03a      	b.n	8000f02 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM15)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a20      	ldr	r2, [pc, #128]	; (8000f14 <HAL_TIM_Base_MspInit+0xb8>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d10e      	bne.n	8000eb4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000e96:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <HAL_TIM_Base_MspInit+0xb4>)
 8000e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e9a:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <HAL_TIM_Base_MspInit+0xb4>)
 8000e9c:	2180      	movs	r1, #128	; 0x80
 8000e9e:	0249      	lsls	r1, r1, #9
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <HAL_TIM_Base_MspInit+0xb4>)
 8000ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	025b      	lsls	r3, r3, #9
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
}
 8000eb2:	e026      	b.n	8000f02 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM16)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a17      	ldr	r2, [pc, #92]	; (8000f18 <HAL_TIM_Base_MspInit+0xbc>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d10e      	bne.n	8000edc <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ebe:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <HAL_TIM_Base_MspInit+0xb4>)
 8000ec0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <HAL_TIM_Base_MspInit+0xb4>)
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	0289      	lsls	r1, r1, #10
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	641a      	str	r2, [r3, #64]	; 0x40
 8000ecc:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <HAL_TIM_Base_MspInit+0xb4>)
 8000ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	029b      	lsls	r3, r3, #10
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
}
 8000eda:	e012      	b.n	8000f02 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM17)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <HAL_TIM_Base_MspInit+0xc0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d10d      	bne.n	8000f02 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_TIM_Base_MspInit+0xb4>)
 8000ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_TIM_Base_MspInit+0xb4>)
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	02c9      	lsls	r1, r1, #11
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_TIM_Base_MspInit+0xb4>)
 8000ef6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	02db      	lsls	r3, r3, #11
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b006      	add	sp, #24
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	40002000 	.word	0x40002000
 8000f10:	40021000 	.word	0x40021000
 8000f14:	40014000 	.word	0x40014000
 8000f18:	40014400 	.word	0x40014400
 8000f1c:	40014800 	.word	0x40014800

08000f20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b08d      	sub	sp, #52	; 0x34
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	241c      	movs	r4, #28
 8000f2a:	193b      	adds	r3, r7, r4
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	2314      	movs	r3, #20
 8000f30:	001a      	movs	r2, r3
 8000f32:	2100      	movs	r1, #0
 8000f34:	f003 fcb2 	bl	800489c <memset>
  if(timHandle->Instance==TIM14)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a62      	ldr	r2, [pc, #392]	; (80010c8 <HAL_TIM_MspPostInit+0x1a8>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d123      	bne.n	8000f8a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	4b62      	ldr	r3, [pc, #392]	; (80010cc <HAL_TIM_MspPostInit+0x1ac>)
 8000f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f46:	4b61      	ldr	r3, [pc, #388]	; (80010cc <HAL_TIM_MspPostInit+0x1ac>)
 8000f48:	2101      	movs	r1, #1
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	635a      	str	r2, [r3, #52]	; 0x34
 8000f4e:	4b5f      	ldr	r3, [pc, #380]	; (80010cc <HAL_TIM_MspPostInit+0x1ac>)
 8000f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f52:	2201      	movs	r2, #1
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
 8000f58:	69bb      	ldr	r3, [r7, #24]
    /**TIM14 GPIO Configuration
    PA4     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = TIM14_CH1_M_SCTR_Pin;
 8000f5a:	0021      	movs	r1, r4
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2210      	movs	r2, #16
 8000f60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	2202      	movs	r2, #2
 8000f66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	187b      	adds	r3, r7, r1
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	2204      	movs	r2, #4
 8000f78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM14_CH1_M_SCTR_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	187a      	adds	r2, r7, r1
 8000f7c:	23a0      	movs	r3, #160	; 0xa0
 8000f7e:	05db      	lsls	r3, r3, #23
 8000f80:	0011      	movs	r1, r2
 8000f82:	0018      	movs	r0, r3
 8000f84:	f000 ffd6 	bl	8001f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000f88:	e099      	b.n	80010be <HAL_TIM_MspPostInit+0x19e>
  else if(timHandle->Instance==TIM15)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a50      	ldr	r2, [pc, #320]	; (80010d0 <HAL_TIM_MspPostInit+0x1b0>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d145      	bne.n	8001020 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f94:	4b4d      	ldr	r3, [pc, #308]	; (80010cc <HAL_TIM_MspPostInit+0x1ac>)
 8000f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f98:	4b4c      	ldr	r3, [pc, #304]	; (80010cc <HAL_TIM_MspPostInit+0x1ac>)
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	635a      	str	r2, [r3, #52]	; 0x34
 8000fa0:	4b4a      	ldr	r3, [pc, #296]	; (80010cc <HAL_TIM_MspPostInit+0x1ac>)
 8000fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fac:	4b47      	ldr	r3, [pc, #284]	; (80010cc <HAL_TIM_MspPostInit+0x1ac>)
 8000fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fb0:	4b46      	ldr	r3, [pc, #280]	; (80010cc <HAL_TIM_MspPostInit+0x1ac>)
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	635a      	str	r2, [r3, #52]	; 0x34
 8000fb8:	4b44      	ldr	r3, [pc, #272]	; (80010cc <HAL_TIM_MspPostInit+0x1ac>)
 8000fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM15_CH2_REV_MR_Pin;
 8000fc4:	241c      	movs	r4, #28
 8000fc6:	193b      	adds	r3, r7, r4
 8000fc8:	2204      	movs	r2, #4
 8000fca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	193b      	adds	r3, r7, r4
 8000fce:	2202      	movs	r2, #2
 8000fd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	193b      	adds	r3, r7, r4
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	193b      	adds	r3, r7, r4
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 8000fde:	193b      	adds	r3, r7, r4
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM15_CH2_REV_MR_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	193b      	adds	r3, r7, r4
 8000fe6:	4a3b      	ldr	r2, [pc, #236]	; (80010d4 <HAL_TIM_MspPostInit+0x1b4>)
 8000fe8:	0019      	movs	r1, r3
 8000fea:	0010      	movs	r0, r2
 8000fec:	f000 ffa2 	bl	8001f34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM15_CH1_REV_ML_Pin;
 8000ff0:	0021      	movs	r1, r4
 8000ff2:	187b      	adds	r3, r7, r1
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	187b      	adds	r3, r7, r1
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 800100a:	187b      	adds	r3, r7, r1
 800100c:	2205      	movs	r2, #5
 800100e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM15_CH1_REV_ML_GPIO_Port, &GPIO_InitStruct);
 8001010:	187a      	adds	r2, r7, r1
 8001012:	23a0      	movs	r3, #160	; 0xa0
 8001014:	05db      	lsls	r3, r3, #23
 8001016:	0011      	movs	r1, r2
 8001018:	0018      	movs	r0, r3
 800101a:	f000 ff8b 	bl	8001f34 <HAL_GPIO_Init>
}
 800101e:	e04e      	b.n	80010be <HAL_TIM_MspPostInit+0x19e>
  else if(timHandle->Instance==TIM16)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a2c      	ldr	r2, [pc, #176]	; (80010d8 <HAL_TIM_MspPostInit+0x1b8>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d122      	bne.n	8001070 <HAL_TIM_MspPostInit+0x150>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800102a:	4b28      	ldr	r3, [pc, #160]	; (80010cc <HAL_TIM_MspPostInit+0x1ac>)
 800102c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800102e:	4b27      	ldr	r3, [pc, #156]	; (80010cc <HAL_TIM_MspPostInit+0x1ac>)
 8001030:	2108      	movs	r1, #8
 8001032:	430a      	orrs	r2, r1
 8001034:	635a      	str	r2, [r3, #52]	; 0x34
 8001036:	4b25      	ldr	r3, [pc, #148]	; (80010cc <HAL_TIM_MspPostInit+0x1ac>)
 8001038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800103a:	2208      	movs	r2, #8
 800103c:	4013      	ands	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM16_CH1_FWD_ML_Pin;
 8001042:	211c      	movs	r1, #28
 8001044:	187b      	adds	r3, r7, r1
 8001046:	2201      	movs	r2, #1
 8001048:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	187b      	adds	r3, r7, r1
 800104c:	2202      	movs	r2, #2
 800104e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	187b      	adds	r3, r7, r1
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 800105c:	187b      	adds	r3, r7, r1
 800105e:	2202      	movs	r2, #2
 8001060:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM16_CH1_FWD_ML_GPIO_Port, &GPIO_InitStruct);
 8001062:	187b      	adds	r3, r7, r1
 8001064:	4a1d      	ldr	r2, [pc, #116]	; (80010dc <HAL_TIM_MspPostInit+0x1bc>)
 8001066:	0019      	movs	r1, r3
 8001068:	0010      	movs	r0, r2
 800106a:	f000 ff63 	bl	8001f34 <HAL_GPIO_Init>
}
 800106e:	e026      	b.n	80010be <HAL_TIM_MspPostInit+0x19e>
  else if(timHandle->Instance==TIM17)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <HAL_TIM_MspPostInit+0x1c0>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d121      	bne.n	80010be <HAL_TIM_MspPostInit+0x19e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <HAL_TIM_MspPostInit+0x1ac>)
 800107c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <HAL_TIM_MspPostInit+0x1ac>)
 8001080:	2108      	movs	r1, #8
 8001082:	430a      	orrs	r2, r1
 8001084:	635a      	str	r2, [r3, #52]	; 0x34
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <HAL_TIM_MspPostInit+0x1ac>)
 8001088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800108a:	2208      	movs	r2, #8
 800108c:	4013      	ands	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM17_CH1_FWD_MR_Pin;
 8001092:	211c      	movs	r1, #28
 8001094:	187b      	adds	r3, r7, r1
 8001096:	2202      	movs	r2, #2
 8001098:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	187b      	adds	r3, r7, r1
 800109c:	2202      	movs	r2, #2
 800109e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	2202      	movs	r2, #2
 80010b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM17_CH1_FWD_MR_GPIO_Port, &GPIO_InitStruct);
 80010b2:	187b      	adds	r3, r7, r1
 80010b4:	4a09      	ldr	r2, [pc, #36]	; (80010dc <HAL_TIM_MspPostInit+0x1bc>)
 80010b6:	0019      	movs	r1, r3
 80010b8:	0010      	movs	r0, r2
 80010ba:	f000 ff3b 	bl	8001f34 <HAL_GPIO_Init>
}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b00d      	add	sp, #52	; 0x34
 80010c4:	bd90      	pop	{r4, r7, pc}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	40002000 	.word	0x40002000
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40014000 	.word	0x40014000
 80010d4:	50000800 	.word	0x50000800
 80010d8:	40014400 	.word	0x40014400
 80010dc:	50000c00 	.word	0x50000c00
 80010e0:	40014800 	.word	0x40014800

080010e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010e8:	4b23      	ldr	r3, [pc, #140]	; (8001178 <MX_USART1_UART_Init+0x94>)
 80010ea:	4a24      	ldr	r2, [pc, #144]	; (800117c <MX_USART1_UART_Init+0x98>)
 80010ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010ee:	4b22      	ldr	r3, [pc, #136]	; (8001178 <MX_USART1_UART_Init+0x94>)
 80010f0:	22e1      	movs	r2, #225	; 0xe1
 80010f2:	0252      	lsls	r2, r2, #9
 80010f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010f6:	4b20      	ldr	r3, [pc, #128]	; (8001178 <MX_USART1_UART_Init+0x94>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <MX_USART1_UART_Init+0x94>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <MX_USART1_UART_Init+0x94>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <MX_USART1_UART_Init+0x94>)
 800110a:	220c      	movs	r2, #12
 800110c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_USART1_UART_Init+0x94>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <MX_USART1_UART_Init+0x94>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_USART1_UART_Init+0x94>)
 800111c:	2200      	movs	r2, #0
 800111e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <MX_USART1_UART_Init+0x94>)
 8001122:	2200      	movs	r2, #0
 8001124:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_USART1_UART_Init+0x94>)
 8001128:	2200      	movs	r2, #0
 800112a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_USART1_UART_Init+0x94>)
 800112e:	0018      	movs	r0, r3
 8001130:	f002 fed6 	bl	8003ee0 <HAL_UART_Init>
 8001134:	1e03      	subs	r3, r0, #0
 8001136:	d001      	beq.n	800113c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001138:	f7ff fad5 	bl	80006e6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_USART1_UART_Init+0x94>)
 800113e:	2100      	movs	r1, #0
 8001140:	0018      	movs	r0, r3
 8001142:	f003 facb 	bl	80046dc <HAL_UARTEx_SetTxFifoThreshold>
 8001146:	1e03      	subs	r3, r0, #0
 8001148:	d001      	beq.n	800114e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800114a:	f7ff facc 	bl	80006e6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <MX_USART1_UART_Init+0x94>)
 8001150:	2100      	movs	r1, #0
 8001152:	0018      	movs	r0, r3
 8001154:	f003 fb02 	bl	800475c <HAL_UARTEx_SetRxFifoThreshold>
 8001158:	1e03      	subs	r3, r0, #0
 800115a:	d001      	beq.n	8001160 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800115c:	f7ff fac3 	bl	80006e6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <MX_USART1_UART_Init+0x94>)
 8001162:	0018      	movs	r0, r3
 8001164:	f003 fa80 	bl	8004668 <HAL_UARTEx_DisableFifoMode>
 8001168:	1e03      	subs	r3, r0, #0
 800116a:	d001      	beq.n	8001170 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800116c:	f7ff fabb 	bl	80006e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	20000254 	.word	0x20000254
 800117c:	40013800 	.word	0x40013800

08001180 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001184:	4b23      	ldr	r3, [pc, #140]	; (8001214 <MX_USART2_UART_Init+0x94>)
 8001186:	4a24      	ldr	r2, [pc, #144]	; (8001218 <MX_USART2_UART_Init+0x98>)
 8001188:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800118a:	4b22      	ldr	r3, [pc, #136]	; (8001214 <MX_USART2_UART_Init+0x94>)
 800118c:	22e1      	movs	r2, #225	; 0xe1
 800118e:	0252      	lsls	r2, r2, #9
 8001190:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <MX_USART2_UART_Init+0x94>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001198:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <MX_USART2_UART_Init+0x94>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800119e:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <MX_USART2_UART_Init+0x94>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <MX_USART2_UART_Init+0x94>)
 80011a6:	220c      	movs	r2, #12
 80011a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_USART2_UART_Init+0x94>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <MX_USART2_UART_Init+0x94>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <MX_USART2_UART_Init+0x94>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_USART2_UART_Init+0x94>)
 80011be:	2200      	movs	r2, #0
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_USART2_UART_Init+0x94>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <MX_USART2_UART_Init+0x94>)
 80011ca:	0018      	movs	r0, r3
 80011cc:	f002 fe88 	bl	8003ee0 <HAL_UART_Init>
 80011d0:	1e03      	subs	r3, r0, #0
 80011d2:	d001      	beq.n	80011d8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011d4:	f7ff fa87 	bl	80006e6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_USART2_UART_Init+0x94>)
 80011da:	2100      	movs	r1, #0
 80011dc:	0018      	movs	r0, r3
 80011de:	f003 fa7d 	bl	80046dc <HAL_UARTEx_SetTxFifoThreshold>
 80011e2:	1e03      	subs	r3, r0, #0
 80011e4:	d001      	beq.n	80011ea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80011e6:	f7ff fa7e 	bl	80006e6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <MX_USART2_UART_Init+0x94>)
 80011ec:	2100      	movs	r1, #0
 80011ee:	0018      	movs	r0, r3
 80011f0:	f003 fab4 	bl	800475c <HAL_UARTEx_SetRxFifoThreshold>
 80011f4:	1e03      	subs	r3, r0, #0
 80011f6:	d001      	beq.n	80011fc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011f8:	f7ff fa75 	bl	80006e6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <MX_USART2_UART_Init+0x94>)
 80011fe:	0018      	movs	r0, r3
 8001200:	f003 fa32 	bl	8004668 <HAL_UARTEx_DisableFifoMode>
 8001204:	1e03      	subs	r3, r0, #0
 8001206:	d001      	beq.n	800120c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001208:	f7ff fa6d 	bl	80006e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	200002e8 	.word	0x200002e8
 8001218:	40004400 	.word	0x40004400

0800121c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b093      	sub	sp, #76	; 0x4c
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	2334      	movs	r3, #52	; 0x34
 8001226:	18fb      	adds	r3, r7, r3
 8001228:	0018      	movs	r0, r3
 800122a:	2314      	movs	r3, #20
 800122c:	001a      	movs	r2, r3
 800122e:	2100      	movs	r1, #0
 8001230:	f003 fb34 	bl	800489c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001234:	2418      	movs	r4, #24
 8001236:	193b      	adds	r3, r7, r4
 8001238:	0018      	movs	r0, r3
 800123a:	231c      	movs	r3, #28
 800123c:	001a      	movs	r2, r3
 800123e:	2100      	movs	r1, #0
 8001240:	f003 fb2c 	bl	800489c <memset>
  if(uartHandle->Instance==USART1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a44      	ldr	r2, [pc, #272]	; (800135c <HAL_UART_MspInit+0x140>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d13e      	bne.n	80012cc <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800124e:	193b      	adds	r3, r7, r4
 8001250:	2201      	movs	r2, #1
 8001252:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001254:	193b      	adds	r3, r7, r4
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125a:	193b      	adds	r3, r7, r4
 800125c:	0018      	movs	r0, r3
 800125e:	f001 fcf1 	bl	8002c44 <HAL_RCCEx_PeriphCLKConfig>
 8001262:	1e03      	subs	r3, r0, #0
 8001264:	d001      	beq.n	800126a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001266:	f7ff fa3e 	bl	80006e6 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800126a:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <HAL_UART_MspInit+0x144>)
 800126c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800126e:	4b3c      	ldr	r3, [pc, #240]	; (8001360 <HAL_UART_MspInit+0x144>)
 8001270:	2180      	movs	r1, #128	; 0x80
 8001272:	01c9      	lsls	r1, r1, #7
 8001274:	430a      	orrs	r2, r1
 8001276:	641a      	str	r2, [r3, #64]	; 0x40
 8001278:	4b39      	ldr	r3, [pc, #228]	; (8001360 <HAL_UART_MspInit+0x144>)
 800127a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	01db      	lsls	r3, r3, #7
 8001280:	4013      	ands	r3, r2
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001286:	4b36      	ldr	r3, [pc, #216]	; (8001360 <HAL_UART_MspInit+0x144>)
 8001288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800128a:	4b35      	ldr	r3, [pc, #212]	; (8001360 <HAL_UART_MspInit+0x144>)
 800128c:	2104      	movs	r1, #4
 800128e:	430a      	orrs	r2, r1
 8001290:	635a      	str	r2, [r3, #52]	; 0x34
 8001292:	4b33      	ldr	r3, [pc, #204]	; (8001360 <HAL_UART_MspInit+0x144>)
 8001294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001296:	2204      	movs	r2, #4
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_VCP_TX_Pin|USART1_RX_VCP_RX_Pin;
 800129e:	2134      	movs	r1, #52	; 0x34
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	2230      	movs	r2, #48	; 0x30
 80012a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	2202      	movs	r2, #2
 80012aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	187b      	adds	r3, r7, r1
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	2201      	movs	r2, #1
 80012bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012be:	187b      	adds	r3, r7, r1
 80012c0:	4a28      	ldr	r2, [pc, #160]	; (8001364 <HAL_UART_MspInit+0x148>)
 80012c2:	0019      	movs	r1, r3
 80012c4:	0010      	movs	r0, r2
 80012c6:	f000 fe35 	bl	8001f34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012ca:	e043      	b.n	8001354 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART2)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a25      	ldr	r2, [pc, #148]	; (8001368 <HAL_UART_MspInit+0x14c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d13e      	bne.n	8001354 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012d6:	2118      	movs	r1, #24
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	2202      	movs	r2, #2
 80012dc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012de:	187b      	adds	r3, r7, r1
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e4:	187b      	adds	r3, r7, r1
 80012e6:	0018      	movs	r0, r3
 80012e8:	f001 fcac 	bl	8002c44 <HAL_RCCEx_PeriphCLKConfig>
 80012ec:	1e03      	subs	r3, r0, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80012f0:	f7ff f9f9 	bl	80006e6 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_UART_MspInit+0x144>)
 80012f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012f8:	4b19      	ldr	r3, [pc, #100]	; (8001360 <HAL_UART_MspInit+0x144>)
 80012fa:	2180      	movs	r1, #128	; 0x80
 80012fc:	0289      	lsls	r1, r1, #10
 80012fe:	430a      	orrs	r2, r1
 8001300:	63da      	str	r2, [r3, #60]	; 0x3c
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <HAL_UART_MspInit+0x144>)
 8001304:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	029b      	lsls	r3, r3, #10
 800130a:	4013      	ands	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_UART_MspInit+0x144>)
 8001312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_UART_MspInit+0x144>)
 8001316:	2108      	movs	r1, #8
 8001318:	430a      	orrs	r2, r1
 800131a:	635a      	str	r2, [r3, #52]	; 0x34
 800131c:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_UART_MspInit+0x144>)
 800131e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001320:	2208      	movs	r2, #8
 8001322:	4013      	ands	r3, r2
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_LIDAR_TX_Pin|USART2_RX_LIDAR_RX_Pin;
 8001328:	2134      	movs	r1, #52	; 0x34
 800132a:	187b      	adds	r3, r7, r1
 800132c:	2260      	movs	r2, #96	; 0x60
 800132e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	187b      	adds	r3, r7, r1
 8001332:	2202      	movs	r2, #2
 8001334:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	187b      	adds	r3, r7, r1
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	187b      	adds	r3, r7, r1
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8001342:	187b      	adds	r3, r7, r1
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001348:	187b      	adds	r3, r7, r1
 800134a:	4a08      	ldr	r2, [pc, #32]	; (800136c <HAL_UART_MspInit+0x150>)
 800134c:	0019      	movs	r1, r3
 800134e:	0010      	movs	r0, r2
 8001350:	f000 fdf0 	bl	8001f34 <HAL_GPIO_Init>
}
 8001354:	46c0      	nop			; (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	b013      	add	sp, #76	; 0x4c
 800135a:	bd90      	pop	{r4, r7, pc}
 800135c:	40013800 	.word	0x40013800
 8001360:	40021000 	.word	0x40021000
 8001364:	50000800 	.word	0x50000800
 8001368:	40004400 	.word	0x40004400
 800136c:	50000c00 	.word	0x50000c00

08001370 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001370:	480d      	ldr	r0, [pc, #52]	; (80013a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001372:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001374:	f7ff f9f7 	bl	8000766 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001378:	480c      	ldr	r0, [pc, #48]	; (80013ac <LoopForever+0x6>)
  ldr r1, =_edata
 800137a:	490d      	ldr	r1, [pc, #52]	; (80013b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800137c:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <LoopForever+0xe>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001380:	e002      	b.n	8001388 <LoopCopyDataInit>

08001382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001386:	3304      	adds	r3, #4

08001388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800138c:	d3f9      	bcc.n	8001382 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001390:	4c0a      	ldr	r4, [pc, #40]	; (80013bc <LoopForever+0x16>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001394:	e001      	b.n	800139a <LoopFillZerobss>

08001396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001398:	3204      	adds	r2, #4

0800139a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800139c:	d3fb      	bcc.n	8001396 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800139e:	f003 fa85 	bl	80048ac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80013a2:	f7ff f93d 	bl	8000620 <main>

080013a6 <LoopForever>:

LoopForever:
  b LoopForever
 80013a6:	e7fe      	b.n	80013a6 <LoopForever>
  ldr   r0, =_estack
 80013a8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80013ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013b4:	080049f0 	.word	0x080049f0
  ldr r2, =_sbss
 80013b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013bc:	20000380 	.word	0x20000380

080013c0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC1_IRQHandler>
	...

080013c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ca:	1dfb      	adds	r3, r7, #7
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <HAL_Init+0x3c>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_Init+0x3c>)
 80013d6:	2180      	movs	r1, #128	; 0x80
 80013d8:	0049      	lsls	r1, r1, #1
 80013da:	430a      	orrs	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013de:	2003      	movs	r0, #3
 80013e0:	f000 f810 	bl	8001404 <HAL_InitTick>
 80013e4:	1e03      	subs	r3, r0, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80013e8:	1dfb      	adds	r3, r7, #7
 80013ea:	2201      	movs	r2, #1
 80013ec:	701a      	strb	r2, [r3, #0]
 80013ee:	e001      	b.n	80013f4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80013f0:	f7ff f97e 	bl	80006f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013f4:	1dfb      	adds	r3, r7, #7
 80013f6:	781b      	ldrb	r3, [r3, #0]
}
 80013f8:	0018      	movs	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b002      	add	sp, #8
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40022000 	.word	0x40022000

08001404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800140c:	230f      	movs	r3, #15
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001414:	4b1d      	ldr	r3, [pc, #116]	; (800148c <HAL_InitTick+0x88>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d02b      	beq.n	8001474 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800141c:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <HAL_InitTick+0x8c>)
 800141e:	681c      	ldr	r4, [r3, #0]
 8001420:	4b1a      	ldr	r3, [pc, #104]	; (800148c <HAL_InitTick+0x88>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	0019      	movs	r1, r3
 8001426:	23fa      	movs	r3, #250	; 0xfa
 8001428:	0098      	lsls	r0, r3, #2
 800142a:	f7fe fe69 	bl	8000100 <__udivsi3>
 800142e:	0003      	movs	r3, r0
 8001430:	0019      	movs	r1, r3
 8001432:	0020      	movs	r0, r4
 8001434:	f7fe fe64 	bl	8000100 <__udivsi3>
 8001438:	0003      	movs	r3, r0
 800143a:	0018      	movs	r0, r3
 800143c:	f000 fd6d 	bl	8001f1a <HAL_SYSTICK_Config>
 8001440:	1e03      	subs	r3, r0, #0
 8001442:	d112      	bne.n	800146a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b03      	cmp	r3, #3
 8001448:	d80a      	bhi.n	8001460 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	2301      	movs	r3, #1
 800144e:	425b      	negs	r3, r3
 8001450:	2200      	movs	r2, #0
 8001452:	0018      	movs	r0, r3
 8001454:	f000 fd4c 	bl	8001ef0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001458:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <HAL_InitTick+0x90>)
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	e00d      	b.n	800147c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001460:	230f      	movs	r3, #15
 8001462:	18fb      	adds	r3, r7, r3
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
 8001468:	e008      	b.n	800147c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800146a:	230f      	movs	r3, #15
 800146c:	18fb      	adds	r3, r7, r3
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
 8001472:	e003      	b.n	800147c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001474:	230f      	movs	r3, #15
 8001476:	18fb      	adds	r3, r7, r3
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800147c:	230f      	movs	r3, #15
 800147e:	18fb      	adds	r3, r7, r3
 8001480:	781b      	ldrb	r3, [r3, #0]
}
 8001482:	0018      	movs	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	b005      	add	sp, #20
 8001488:	bd90      	pop	{r4, r7, pc}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	20000008 	.word	0x20000008
 8001490:	20000000 	.word	0x20000000
 8001494:	20000004 	.word	0x20000004

08001498 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_IncTick+0x1c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	001a      	movs	r2, r3
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <HAL_IncTick+0x20>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	18d2      	adds	r2, r2, r3
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <HAL_IncTick+0x20>)
 80014aa:	601a      	str	r2, [r3, #0]
}
 80014ac:	46c0      	nop			; (mov r8, r8)
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	20000008 	.word	0x20000008
 80014b8:	2000037c 	.word	0x2000037c

080014bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b02      	ldr	r3, [pc, #8]	; (80014cc <HAL_GetTick+0x10>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	0018      	movs	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	2000037c 	.word	0x2000037c

080014d0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a05      	ldr	r2, [pc, #20]	; (80014f4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80014e0:	401a      	ands	r2, r3
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	601a      	str	r2, [r3, #0]
}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	fe3fffff 	.word	0xfe3fffff

080014f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	23e0      	movs	r3, #224	; 0xe0
 8001506:	045b      	lsls	r3, r3, #17
 8001508:	4013      	ands	r3, r2
}
 800150a:	0018      	movs	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	b002      	add	sp, #8
 8001510:	bd80      	pop	{r7, pc}

08001512 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b084      	sub	sp, #16
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	2104      	movs	r1, #4
 8001526:	400a      	ands	r2, r1
 8001528:	2107      	movs	r1, #7
 800152a:	4091      	lsls	r1, r2
 800152c:	000a      	movs	r2, r1
 800152e:	43d2      	mvns	r2, r2
 8001530:	401a      	ands	r2, r3
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	2104      	movs	r1, #4
 8001536:	400b      	ands	r3, r1
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4099      	lsls	r1, r3
 800153c:	000b      	movs	r3, r1
 800153e:	431a      	orrs	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001544:	46c0      	nop			; (mov r8, r8)
 8001546:	46bd      	mov	sp, r7
 8001548:	b004      	add	sp, #16
 800154a:	bd80      	pop	{r7, pc}

0800154c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	2104      	movs	r1, #4
 800155e:	400a      	ands	r2, r1
 8001560:	2107      	movs	r1, #7
 8001562:	4091      	lsls	r1, r2
 8001564:	000a      	movs	r2, r1
 8001566:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	2104      	movs	r1, #4
 800156c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800156e:	40da      	lsrs	r2, r3
 8001570:	0013      	movs	r3, r2
}
 8001572:	0018      	movs	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	b002      	add	sp, #8
 8001578:	bd80      	pop	{r7, pc}

0800157a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b084      	sub	sp, #16
 800157e:	af00      	add	r7, sp, #0
 8001580:	60f8      	str	r0, [r7, #12]
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	211f      	movs	r1, #31
 800158e:	400a      	ands	r2, r1
 8001590:	210f      	movs	r1, #15
 8001592:	4091      	lsls	r1, r2
 8001594:	000a      	movs	r2, r1
 8001596:	43d2      	mvns	r2, r2
 8001598:	401a      	ands	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	0e9b      	lsrs	r3, r3, #26
 800159e:	210f      	movs	r1, #15
 80015a0:	4019      	ands	r1, r3
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	201f      	movs	r0, #31
 80015a6:	4003      	ands	r3, r0
 80015a8:	4099      	lsls	r1, r3
 80015aa:	000b      	movs	r3, r1
 80015ac:	431a      	orrs	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b004      	add	sp, #16
 80015b8:	bd80      	pop	{r7, pc}

080015ba <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	035b      	lsls	r3, r3, #13
 80015cc:	0b5b      	lsrs	r3, r3, #13
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b002      	add	sp, #8
 80015da:	bd80      	pop	{r7, pc}

080015dc <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	0352      	lsls	r2, r2, #13
 80015ee:	0b52      	lsrs	r2, r2, #13
 80015f0:	43d2      	mvns	r2, r2
 80015f2:	401a      	ands	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015f8:	46c0      	nop			; (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b002      	add	sp, #8
 80015fe:	bd80      	pop	{r7, pc}

08001600 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	0212      	lsls	r2, r2, #8
 8001614:	43d2      	mvns	r2, r2
 8001616:	401a      	ands	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	400b      	ands	r3, r1
 8001620:	4904      	ldr	r1, [pc, #16]	; (8001634 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001622:	400b      	ands	r3, r1
 8001624:	431a      	orrs	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	46bd      	mov	sp, r7
 800162e:	b004      	add	sp, #16
 8001630:	bd80      	pop	{r7, pc}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	07ffff00 	.word	0x07ffff00

08001638 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	4a05      	ldr	r2, [pc, #20]	; (800165c <LL_ADC_EnableInternalRegulator+0x24>)
 8001646:	4013      	ands	r3, r2
 8001648:	2280      	movs	r2, #128	; 0x80
 800164a:	0552      	lsls	r2, r2, #21
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	46bd      	mov	sp, r7
 8001656:	b002      	add	sp, #8
 8001658:	bd80      	pop	{r7, pc}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	6fffffe8 	.word	0x6fffffe8

08001660 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	055b      	lsls	r3, r3, #21
 8001670:	401a      	ands	r2, r3
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	055b      	lsls	r3, r3, #21
 8001676:	429a      	cmp	r2, r3
 8001678:	d101      	bne.n	800167e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800167e:	2300      	movs	r3, #0
}
 8001680:	0018      	movs	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	b002      	add	sp, #8
 8001686:	bd80      	pop	{r7, pc}

08001688 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2201      	movs	r2, #1
 8001696:	4013      	ands	r3, r2
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <LL_ADC_IsEnabled+0x18>
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <LL_ADC_IsEnabled+0x1a>
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b002      	add	sp, #8
 80016a8:	bd80      	pop	{r7, pc}

080016aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2204      	movs	r2, #4
 80016b8:	4013      	ands	r3, r2
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d101      	bne.n	80016c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	0018      	movs	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b002      	add	sp, #8
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d4:	231f      	movs	r3, #31
 80016d6:	18fb      	adds	r3, r7, r3
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e17f      	b.n	80019f2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10a      	bne.n	8001710 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7fe fedf 	bl	80004c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2254      	movs	r2, #84	; 0x54
 800170c:	2100      	movs	r1, #0
 800170e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	0018      	movs	r0, r3
 8001716:	f7ff ffa3 	bl	8001660 <LL_ADC_IsInternalRegulatorEnabled>
 800171a:	1e03      	subs	r3, r0, #0
 800171c:	d115      	bne.n	800174a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	0018      	movs	r0, r3
 8001724:	f7ff ff88 	bl	8001638 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001728:	4bb4      	ldr	r3, [pc, #720]	; (80019fc <HAL_ADC_Init+0x330>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	49b4      	ldr	r1, [pc, #720]	; (8001a00 <HAL_ADC_Init+0x334>)
 800172e:	0018      	movs	r0, r3
 8001730:	f7fe fce6 	bl	8000100 <__udivsi3>
 8001734:	0003      	movs	r3, r0
 8001736:	3301      	adds	r3, #1
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800173c:	e002      	b.n	8001744 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3b01      	subs	r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f9      	bne.n	800173e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	0018      	movs	r0, r3
 8001750:	f7ff ff86 	bl	8001660 <LL_ADC_IsInternalRegulatorEnabled>
 8001754:	1e03      	subs	r3, r0, #0
 8001756:	d10f      	bne.n	8001778 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175c:	2210      	movs	r2, #16
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001768:	2201      	movs	r2, #1
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001770:	231f      	movs	r3, #31
 8001772:	18fb      	adds	r3, r7, r3
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	0018      	movs	r0, r3
 800177e:	f7ff ff94 	bl	80016aa <LL_ADC_REG_IsConversionOngoing>
 8001782:	0003      	movs	r3, r0
 8001784:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178a:	2210      	movs	r2, #16
 800178c:	4013      	ands	r3, r2
 800178e:	d000      	beq.n	8001792 <HAL_ADC_Init+0xc6>
 8001790:	e122      	b.n	80019d8 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d000      	beq.n	800179a <HAL_ADC_Init+0xce>
 8001798:	e11e      	b.n	80019d8 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	4a99      	ldr	r2, [pc, #612]	; (8001a04 <HAL_ADC_Init+0x338>)
 80017a0:	4013      	ands	r3, r2
 80017a2:	2202      	movs	r2, #2
 80017a4:	431a      	orrs	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	0018      	movs	r0, r3
 80017b0:	f7ff ff6a 	bl	8001688 <LL_ADC_IsEnabled>
 80017b4:	1e03      	subs	r3, r0, #0
 80017b6:	d000      	beq.n	80017ba <HAL_ADC_Init+0xee>
 80017b8:	e0ad      	b.n	8001916 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7e1b      	ldrb	r3, [r3, #24]
 80017c2:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80017c4:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	7e5b      	ldrb	r3, [r3, #25]
 80017ca:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80017cc:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	7e9b      	ldrb	r3, [r3, #26]
 80017d2:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80017d4:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <HAL_ADC_Init+0x118>
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	015b      	lsls	r3, r3, #5
 80017e2:	e000      	b.n	80017e6 <HAL_ADC_Init+0x11a>
 80017e4:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80017e6:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80017ec:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	da04      	bge.n	8001800 <HAL_ADC_Init+0x134>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	085b      	lsrs	r3, r3, #1
 80017fe:	e001      	b.n	8001804 <HAL_ADC_Init+0x138>
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001804:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	212c      	movs	r1, #44	; 0x2c
 800180a:	5c5b      	ldrb	r3, [r3, r1]
 800180c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800180e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2220      	movs	r2, #32
 800181a:	5c9b      	ldrb	r3, [r3, r2]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d115      	bne.n	800184c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7e9b      	ldrb	r3, [r3, #26]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d105      	bne.n	8001834 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	2280      	movs	r2, #128	; 0x80
 800182c:	0252      	lsls	r2, r2, #9
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
 8001832:	e00b      	b.n	800184c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001838:	2220      	movs	r2, #32
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001844:	2201      	movs	r2, #1
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00a      	beq.n	800186a <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001858:	23e0      	movs	r3, #224	; 0xe0
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001862:	4313      	orrs	r3, r2
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	4a65      	ldr	r2, [pc, #404]	; (8001a08 <HAL_ADC_Init+0x33c>)
 8001872:	4013      	ands	r3, r2
 8001874:	0019      	movs	r1, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	430a      	orrs	r2, r1
 800187e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	0f9b      	lsrs	r3, r3, #30
 8001886:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800188c:	4313      	orrs	r3, r2
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	4313      	orrs	r3, r2
 8001892:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	223c      	movs	r2, #60	; 0x3c
 8001898:	5c9b      	ldrb	r3, [r3, r2]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d111      	bne.n	80018c2 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	0f9b      	lsrs	r3, r3, #30
 80018a4:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80018aa:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80018b0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80018b6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	2201      	movs	r2, #1
 80018be:	4313      	orrs	r3, r2
 80018c0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	4a50      	ldr	r2, [pc, #320]	; (8001a0c <HAL_ADC_Init+0x340>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	0019      	movs	r1, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	23c0      	movs	r3, #192	; 0xc0
 80018de:	061b      	lsls	r3, r3, #24
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d018      	beq.n	8001916 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	05db      	lsls	r3, r3, #23
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d012      	beq.n	8001916 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	061b      	lsls	r3, r3, #24
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d00c      	beq.n	8001916 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80018fc:	4b44      	ldr	r3, [pc, #272]	; (8001a10 <HAL_ADC_Init+0x344>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a44      	ldr	r2, [pc, #272]	; (8001a14 <HAL_ADC_Init+0x348>)
 8001902:	4013      	ands	r3, r2
 8001904:	0019      	movs	r1, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	23f0      	movs	r3, #240	; 0xf0
 800190c:	039b      	lsls	r3, r3, #14
 800190e:	401a      	ands	r2, r3
 8001910:	4b3f      	ldr	r3, [pc, #252]	; (8001a10 <HAL_ADC_Init+0x344>)
 8001912:	430a      	orrs	r2, r1
 8001914:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191e:	001a      	movs	r2, r3
 8001920:	2100      	movs	r1, #0
 8001922:	f7ff fdf6 	bl	8001512 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192e:	493a      	ldr	r1, [pc, #232]	; (8001a18 <HAL_ADC_Init+0x34c>)
 8001930:	001a      	movs	r2, r3
 8001932:	f7ff fdee 	bl	8001512 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d109      	bne.n	8001952 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2110      	movs	r1, #16
 800194a:	4249      	negs	r1, r1
 800194c:	430a      	orrs	r2, r1
 800194e:	629a      	str	r2, [r3, #40]	; 0x28
 8001950:	e018      	b.n	8001984 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691a      	ldr	r2, [r3, #16]
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	039b      	lsls	r3, r3, #14
 800195a:	429a      	cmp	r2, r3
 800195c:	d112      	bne.n	8001984 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	3b01      	subs	r3, #1
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	221c      	movs	r2, #28
 800196e:	4013      	ands	r3, r2
 8001970:	2210      	movs	r2, #16
 8001972:	4252      	negs	r2, r2
 8001974:	409a      	lsls	r2, r3
 8001976:	0011      	movs	r1, r2
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2100      	movs	r1, #0
 800198a:	0018      	movs	r0, r3
 800198c:	f7ff fdde 	bl	800154c <LL_ADC_GetSamplingTimeCommonChannels>
 8001990:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001996:	429a      	cmp	r2, r3
 8001998:	d10b      	bne.n	80019b2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a4:	2203      	movs	r2, #3
 80019a6:	4393      	bics	r3, r2
 80019a8:	2201      	movs	r2, #1
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80019b0:	e01c      	b.n	80019ec <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	2212      	movs	r2, #18
 80019b8:	4393      	bics	r3, r2
 80019ba:	2210      	movs	r2, #16
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c6:	2201      	movs	r2, #1
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80019ce:	231f      	movs	r3, #31
 80019d0:	18fb      	adds	r3, r7, r3
 80019d2:	2201      	movs	r2, #1
 80019d4:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80019d6:	e009      	b.n	80019ec <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019dc:	2210      	movs	r2, #16
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80019e4:	231f      	movs	r3, #31
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80019ec:	231f      	movs	r3, #31
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	781b      	ldrb	r3, [r3, #0]
}
 80019f2:	0018      	movs	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b008      	add	sp, #32
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	20000000 	.word	0x20000000
 8001a00:	00030d40 	.word	0x00030d40
 8001a04:	fffffefd 	.word	0xfffffefd
 8001a08:	fffe0201 	.word	0xfffe0201
 8001a0c:	1ffffc02 	.word	0x1ffffc02
 8001a10:	40012708 	.word	0x40012708
 8001a14:	ffc3ffff 	.word	0xffc3ffff
 8001a18:	07ffff04 	.word	0x07ffff04

08001a1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a26:	2317      	movs	r3, #23
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2254      	movs	r2, #84	; 0x54
 8001a36:	5c9b      	ldrb	r3, [r3, r2]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x24>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e1c0      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x3a6>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2254      	movs	r2, #84	; 0x54
 8001a44:	2101      	movs	r1, #1
 8001a46:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f7ff fe2c 	bl	80016aa <LL_ADC_REG_IsConversionOngoing>
 8001a52:	1e03      	subs	r3, r0, #0
 8001a54:	d000      	beq.n	8001a58 <HAL_ADC_ConfigChannel+0x3c>
 8001a56:	e1a3      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d100      	bne.n	8001a62 <HAL_ADC_ConfigChannel+0x46>
 8001a60:	e143      	b.n	8001cea <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691a      	ldr	r2, [r3, #16]
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	061b      	lsls	r3, r3, #24
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d004      	beq.n	8001a78 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a72:	4ac1      	ldr	r2, [pc, #772]	; (8001d78 <HAL_ADC_ConfigChannel+0x35c>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d108      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	0019      	movs	r1, r3
 8001a82:	0010      	movs	r0, r2
 8001a84:	f7ff fd99 	bl	80015ba <LL_ADC_REG_SetSequencerChAdd>
 8001a88:	e0c9      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	211f      	movs	r1, #31
 8001a94:	400b      	ands	r3, r1
 8001a96:	210f      	movs	r1, #15
 8001a98:	4099      	lsls	r1, r3
 8001a9a:	000b      	movs	r3, r1
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	035b      	lsls	r3, r3, #13
 8001aa8:	0b5b      	lsrs	r3, r3, #13
 8001aaa:	d105      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x9c>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	0e9b      	lsrs	r3, r3, #26
 8001ab2:	221f      	movs	r2, #31
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	e098      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2201      	movs	r2, #1
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d000      	beq.n	8001ac4 <HAL_ADC_ConfigChannel+0xa8>
 8001ac2:	e091      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2202      	movs	r2, #2
 8001aca:	4013      	ands	r3, r2
 8001acc:	d000      	beq.n	8001ad0 <HAL_ADC_ConfigChannel+0xb4>
 8001ace:	e089      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x1c8>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2204      	movs	r2, #4
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d000      	beq.n	8001adc <HAL_ADC_ConfigChannel+0xc0>
 8001ada:	e081      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x1c4>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2208      	movs	r2, #8
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d000      	beq.n	8001ae8 <HAL_ADC_ConfigChannel+0xcc>
 8001ae6:	e079      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x1c0>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2210      	movs	r2, #16
 8001aee:	4013      	ands	r3, r2
 8001af0:	d000      	beq.n	8001af4 <HAL_ADC_ConfigChannel+0xd8>
 8001af2:	e071      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x1bc>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2220      	movs	r2, #32
 8001afa:	4013      	ands	r3, r2
 8001afc:	d000      	beq.n	8001b00 <HAL_ADC_ConfigChannel+0xe4>
 8001afe:	e069      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x1b8>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2240      	movs	r2, #64	; 0x40
 8001b06:	4013      	ands	r3, r2
 8001b08:	d000      	beq.n	8001b0c <HAL_ADC_ConfigChannel+0xf0>
 8001b0a:	e061      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x1b4>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2280      	movs	r2, #128	; 0x80
 8001b12:	4013      	ands	r3, r2
 8001b14:	d000      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0xfc>
 8001b16:	e059      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x1b0>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4013      	ands	r3, r2
 8001b22:	d151      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x1ac>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d149      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x1a8>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d141      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x1a4>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	4013      	ands	r3, r2
 8001b46:	d139      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x1a0>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	015b      	lsls	r3, r3, #5
 8001b50:	4013      	ands	r3, r2
 8001b52:	d131      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x19c>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	019b      	lsls	r3, r3, #6
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d129      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x198>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	01db      	lsls	r3, r3, #7
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d121      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x194>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	4013      	ands	r3, r2
 8001b76:	d119      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x190>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	025b      	lsls	r3, r3, #9
 8001b80:	4013      	ands	r3, r2
 8001b82:	d111      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x18c>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	029b      	lsls	r3, r3, #10
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d109      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x188>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	02db      	lsls	r3, r3, #11
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d001      	beq.n	8001ba0 <HAL_ADC_ConfigChannel+0x184>
 8001b9c:	2312      	movs	r3, #18
 8001b9e:	e024      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e022      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001ba4:	2311      	movs	r3, #17
 8001ba6:	e020      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001ba8:	2310      	movs	r3, #16
 8001baa:	e01e      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bac:	230f      	movs	r3, #15
 8001bae:	e01c      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bb0:	230e      	movs	r3, #14
 8001bb2:	e01a      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bb4:	230d      	movs	r3, #13
 8001bb6:	e018      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bb8:	230c      	movs	r3, #12
 8001bba:	e016      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bbc:	230b      	movs	r3, #11
 8001bbe:	e014      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bc0:	230a      	movs	r3, #10
 8001bc2:	e012      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bc4:	2309      	movs	r3, #9
 8001bc6:	e010      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bc8:	2308      	movs	r3, #8
 8001bca:	e00e      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bcc:	2307      	movs	r3, #7
 8001bce:	e00c      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bd0:	2306      	movs	r3, #6
 8001bd2:	e00a      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bd4:	2305      	movs	r3, #5
 8001bd6:	e008      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bd8:	2304      	movs	r3, #4
 8001bda:	e006      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e004      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e002      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001be8:	2300      	movs	r3, #0
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	6852      	ldr	r2, [r2, #4]
 8001bee:	201f      	movs	r0, #31
 8001bf0:	4002      	ands	r2, r0
 8001bf2:	4093      	lsls	r3, r2
 8001bf4:	000a      	movs	r2, r1
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d808      	bhi.n	8001c1e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	6859      	ldr	r1, [r3, #4]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	001a      	movs	r2, r3
 8001c1a:	f7ff fcae 	bl	800157a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6818      	ldr	r0, [r3, #0]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	6819      	ldr	r1, [r3, #0]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	001a      	movs	r2, r3
 8001c2c:	f7ff fce8 	bl	8001600 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db00      	blt.n	8001c3a <HAL_ADC_ConfigChannel+0x21e>
 8001c38:	e0bc      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c3a:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_ADC_ConfigChannel+0x360>)
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f7ff fc5b 	bl	80014f8 <LL_ADC_GetCommonPathInternalCh>
 8001c42:	0003      	movs	r3, r0
 8001c44:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a4d      	ldr	r2, [pc, #308]	; (8001d80 <HAL_ADC_ConfigChannel+0x364>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d122      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	041b      	lsls	r3, r3, #16
 8001c56:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c58:	d11d      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	2280      	movs	r2, #128	; 0x80
 8001c5e:	0412      	lsls	r2, r2, #16
 8001c60:	4313      	orrs	r3, r2
 8001c62:	4a46      	ldr	r2, [pc, #280]	; (8001d7c <HAL_ADC_ConfigChannel+0x360>)
 8001c64:	0019      	movs	r1, r3
 8001c66:	0010      	movs	r0, r2
 8001c68:	f7ff fc32 	bl	80014d0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c6c:	4b45      	ldr	r3, [pc, #276]	; (8001d84 <HAL_ADC_ConfigChannel+0x368>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4945      	ldr	r1, [pc, #276]	; (8001d88 <HAL_ADC_ConfigChannel+0x36c>)
 8001c72:	0018      	movs	r0, r3
 8001c74:	f7fe fa44 	bl	8000100 <__udivsi3>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	0013      	movs	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	189b      	adds	r3, r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c86:	e002      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f9      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c94:	e08e      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a3c      	ldr	r2, [pc, #240]	; (8001d8c <HAL_ADC_ConfigChannel+0x370>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d10e      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	045b      	lsls	r3, r3, #17
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d109      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	2280      	movs	r2, #128	; 0x80
 8001cae:	0452      	lsls	r2, r2, #17
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	4a32      	ldr	r2, [pc, #200]	; (8001d7c <HAL_ADC_ConfigChannel+0x360>)
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	0010      	movs	r0, r2
 8001cb8:	f7ff fc0a 	bl	80014d0 <LL_ADC_SetCommonPathInternalCh>
 8001cbc:	e07a      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a33      	ldr	r2, [pc, #204]	; (8001d90 <HAL_ADC_ConfigChannel+0x374>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d000      	beq.n	8001cca <HAL_ADC_ConfigChannel+0x2ae>
 8001cc8:	e074      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	03db      	lsls	r3, r3, #15
 8001cd0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001cd2:	d000      	beq.n	8001cd6 <HAL_ADC_ConfigChannel+0x2ba>
 8001cd4:	e06e      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	2280      	movs	r2, #128	; 0x80
 8001cda:	03d2      	lsls	r2, r2, #15
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	4a27      	ldr	r2, [pc, #156]	; (8001d7c <HAL_ADC_ConfigChannel+0x360>)
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	0010      	movs	r0, r2
 8001ce4:	f7ff fbf4 	bl	80014d0 <LL_ADC_SetCommonPathInternalCh>
 8001ce8:	e064      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	061b      	lsls	r3, r3, #24
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d004      	beq.n	8001d00 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001cfa:	4a1f      	ldr	r2, [pc, #124]	; (8001d78 <HAL_ADC_ConfigChannel+0x35c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d107      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	0019      	movs	r1, r3
 8001d0a:	0010      	movs	r0, r2
 8001d0c:	f7ff fc66 	bl	80015dc <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	da4d      	bge.n	8001db4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d18:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <HAL_ADC_ConfigChannel+0x360>)
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f7ff fbec 	bl	80014f8 <LL_ADC_GetCommonPathInternalCh>
 8001d20:	0003      	movs	r3, r0
 8001d22:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <HAL_ADC_ConfigChannel+0x364>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d108      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4a18      	ldr	r2, [pc, #96]	; (8001d94 <HAL_ADC_ConfigChannel+0x378>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	4a11      	ldr	r2, [pc, #68]	; (8001d7c <HAL_ADC_ConfigChannel+0x360>)
 8001d36:	0019      	movs	r1, r3
 8001d38:	0010      	movs	r0, r2
 8001d3a:	f7ff fbc9 	bl	80014d0 <LL_ADC_SetCommonPathInternalCh>
 8001d3e:	e039      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a11      	ldr	r2, [pc, #68]	; (8001d8c <HAL_ADC_ConfigChannel+0x370>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d108      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <HAL_ADC_ConfigChannel+0x37c>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <HAL_ADC_ConfigChannel+0x360>)
 8001d52:	0019      	movs	r1, r3
 8001d54:	0010      	movs	r0, r2
 8001d56:	f7ff fbbb 	bl	80014d0 <LL_ADC_SetCommonPathInternalCh>
 8001d5a:	e02b      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0b      	ldr	r2, [pc, #44]	; (8001d90 <HAL_ADC_ConfigChannel+0x374>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d126      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4a0c      	ldr	r2, [pc, #48]	; (8001d9c <HAL_ADC_ConfigChannel+0x380>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	4a03      	ldr	r2, [pc, #12]	; (8001d7c <HAL_ADC_ConfigChannel+0x360>)
 8001d6e:	0019      	movs	r1, r3
 8001d70:	0010      	movs	r0, r2
 8001d72:	f7ff fbad 	bl	80014d0 <LL_ADC_SetCommonPathInternalCh>
 8001d76:	e01d      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x398>
 8001d78:	80000004 	.word	0x80000004
 8001d7c:	40012708 	.word	0x40012708
 8001d80:	b0001000 	.word	0xb0001000
 8001d84:	20000000 	.word	0x20000000
 8001d88:	00030d40 	.word	0x00030d40
 8001d8c:	b8004000 	.word	0xb8004000
 8001d90:	b4002000 	.word	0xb4002000
 8001d94:	ff7fffff 	.word	0xff7fffff
 8001d98:	feffffff 	.word	0xfeffffff
 8001d9c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da4:	2220      	movs	r2, #32
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001dac:	2317      	movs	r3, #23
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2254      	movs	r2, #84	; 0x54
 8001db8:	2100      	movs	r1, #0
 8001dba:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001dbc:	2317      	movs	r3, #23
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	781b      	ldrb	r3, [r3, #0]
}
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b006      	add	sp, #24
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	46c0      	nop			; (mov r8, r8)

08001dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	1dfb      	adds	r3, r7, #7
 8001dd8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dda:	1dfb      	adds	r3, r7, #7
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b7f      	cmp	r3, #127	; 0x7f
 8001de0:	d828      	bhi.n	8001e34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001de2:	4a2f      	ldr	r2, [pc, #188]	; (8001ea0 <__NVIC_SetPriority+0xd4>)
 8001de4:	1dfb      	adds	r3, r7, #7
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	b25b      	sxtb	r3, r3
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	33c0      	adds	r3, #192	; 0xc0
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	589b      	ldr	r3, [r3, r2]
 8001df2:	1dfa      	adds	r2, r7, #7
 8001df4:	7812      	ldrb	r2, [r2, #0]
 8001df6:	0011      	movs	r1, r2
 8001df8:	2203      	movs	r2, #3
 8001dfa:	400a      	ands	r2, r1
 8001dfc:	00d2      	lsls	r2, r2, #3
 8001dfe:	21ff      	movs	r1, #255	; 0xff
 8001e00:	4091      	lsls	r1, r2
 8001e02:	000a      	movs	r2, r1
 8001e04:	43d2      	mvns	r2, r2
 8001e06:	401a      	ands	r2, r3
 8001e08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	019b      	lsls	r3, r3, #6
 8001e0e:	22ff      	movs	r2, #255	; 0xff
 8001e10:	401a      	ands	r2, r3
 8001e12:	1dfb      	adds	r3, r7, #7
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	0018      	movs	r0, r3
 8001e18:	2303      	movs	r3, #3
 8001e1a:	4003      	ands	r3, r0
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e20:	481f      	ldr	r0, [pc, #124]	; (8001ea0 <__NVIC_SetPriority+0xd4>)
 8001e22:	1dfb      	adds	r3, r7, #7
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	b25b      	sxtb	r3, r3
 8001e28:	089b      	lsrs	r3, r3, #2
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	33c0      	adds	r3, #192	; 0xc0
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e32:	e031      	b.n	8001e98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e34:	4a1b      	ldr	r2, [pc, #108]	; (8001ea4 <__NVIC_SetPriority+0xd8>)
 8001e36:	1dfb      	adds	r3, r7, #7
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	230f      	movs	r3, #15
 8001e3e:	400b      	ands	r3, r1
 8001e40:	3b08      	subs	r3, #8
 8001e42:	089b      	lsrs	r3, r3, #2
 8001e44:	3306      	adds	r3, #6
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	18d3      	adds	r3, r2, r3
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	1dfa      	adds	r2, r7, #7
 8001e50:	7812      	ldrb	r2, [r2, #0]
 8001e52:	0011      	movs	r1, r2
 8001e54:	2203      	movs	r2, #3
 8001e56:	400a      	ands	r2, r1
 8001e58:	00d2      	lsls	r2, r2, #3
 8001e5a:	21ff      	movs	r1, #255	; 0xff
 8001e5c:	4091      	lsls	r1, r2
 8001e5e:	000a      	movs	r2, r1
 8001e60:	43d2      	mvns	r2, r2
 8001e62:	401a      	ands	r2, r3
 8001e64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	019b      	lsls	r3, r3, #6
 8001e6a:	22ff      	movs	r2, #255	; 0xff
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	1dfb      	adds	r3, r7, #7
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	0018      	movs	r0, r3
 8001e74:	2303      	movs	r3, #3
 8001e76:	4003      	ands	r3, r0
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e7c:	4809      	ldr	r0, [pc, #36]	; (8001ea4 <__NVIC_SetPriority+0xd8>)
 8001e7e:	1dfb      	adds	r3, r7, #7
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	001c      	movs	r4, r3
 8001e84:	230f      	movs	r3, #15
 8001e86:	4023      	ands	r3, r4
 8001e88:	3b08      	subs	r3, #8
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	3306      	adds	r3, #6
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	18c3      	adds	r3, r0, r3
 8001e94:	3304      	adds	r3, #4
 8001e96:	601a      	str	r2, [r3, #0]
}
 8001e98:	46c0      	nop			; (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b003      	add	sp, #12
 8001e9e:	bd90      	pop	{r4, r7, pc}
 8001ea0:	e000e100 	.word	0xe000e100
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	1e5a      	subs	r2, r3, #1
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	045b      	lsls	r3, r3, #17
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d301      	bcc.n	8001ec0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e010      	b.n	8001ee2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <SysTick_Config+0x44>)
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	3a01      	subs	r2, #1
 8001ec6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec8:	2301      	movs	r3, #1
 8001eca:	425b      	negs	r3, r3
 8001ecc:	2103      	movs	r1, #3
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f7ff ff7c 	bl	8001dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <SysTick_Config+0x44>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eda:	4b04      	ldr	r3, [pc, #16]	; (8001eec <SysTick_Config+0x44>)
 8001edc:	2207      	movs	r2, #7
 8001ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b002      	add	sp, #8
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	e000e010 	.word	0xe000e010

08001ef0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	210f      	movs	r1, #15
 8001efc:	187b      	adds	r3, r7, r1
 8001efe:	1c02      	adds	r2, r0, #0
 8001f00:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	b25b      	sxtb	r3, r3
 8001f0a:	0011      	movs	r1, r2
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7ff ff5d 	bl	8001dcc <__NVIC_SetPriority>
}
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b004      	add	sp, #16
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	0018      	movs	r0, r3
 8001f26:	f7ff ffbf 	bl	8001ea8 <SysTick_Config>
 8001f2a:	0003      	movs	r3, r0
}
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	b002      	add	sp, #8
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f42:	e147      	b.n	80021d4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2101      	movs	r1, #1
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	4091      	lsls	r1, r2
 8001f4e:	000a      	movs	r2, r1
 8001f50:	4013      	ands	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d100      	bne.n	8001f5c <HAL_GPIO_Init+0x28>
 8001f5a:	e138      	b.n	80021ce <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2203      	movs	r2, #3
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d005      	beq.n	8001f74 <HAL_GPIO_Init+0x40>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d130      	bne.n	8001fd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	2203      	movs	r2, #3
 8001f80:	409a      	lsls	r2, r3
 8001f82:	0013      	movs	r3, r2
 8001f84:	43da      	mvns	r2, r3
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	409a      	lsls	r2, r3
 8001f96:	0013      	movs	r3, r2
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001faa:	2201      	movs	r2, #1
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	0013      	movs	r3, r2
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	091b      	lsrs	r3, r3, #4
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	0013      	movs	r3, r2
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2203      	movs	r2, #3
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d017      	beq.n	8002012 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	0013      	movs	r3, r2
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	409a      	lsls	r2, r3
 8002004:	0013      	movs	r3, r2
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2203      	movs	r2, #3
 8002018:	4013      	ands	r3, r2
 800201a:	2b02      	cmp	r3, #2
 800201c:	d123      	bne.n	8002066 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	08da      	lsrs	r2, r3, #3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3208      	adds	r2, #8
 8002026:	0092      	lsls	r2, r2, #2
 8002028:	58d3      	ldr	r3, [r2, r3]
 800202a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2207      	movs	r2, #7
 8002030:	4013      	ands	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	220f      	movs	r2, #15
 8002036:	409a      	lsls	r2, r3
 8002038:	0013      	movs	r3, r2
 800203a:	43da      	mvns	r2, r3
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	691a      	ldr	r2, [r3, #16]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2107      	movs	r1, #7
 800204a:	400b      	ands	r3, r1
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	409a      	lsls	r2, r3
 8002050:	0013      	movs	r3, r2
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	08da      	lsrs	r2, r3, #3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3208      	adds	r2, #8
 8002060:	0092      	lsls	r2, r2, #2
 8002062:	6939      	ldr	r1, [r7, #16]
 8002064:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	2203      	movs	r2, #3
 8002072:	409a      	lsls	r2, r3
 8002074:	0013      	movs	r3, r2
 8002076:	43da      	mvns	r2, r3
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2203      	movs	r2, #3
 8002084:	401a      	ands	r2, r3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	409a      	lsls	r2, r3
 800208c:	0013      	movs	r3, r2
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	23c0      	movs	r3, #192	; 0xc0
 80020a0:	029b      	lsls	r3, r3, #10
 80020a2:	4013      	ands	r3, r2
 80020a4:	d100      	bne.n	80020a8 <HAL_GPIO_Init+0x174>
 80020a6:	e092      	b.n	80021ce <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80020a8:	4a50      	ldr	r2, [pc, #320]	; (80021ec <HAL_GPIO_Init+0x2b8>)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	089b      	lsrs	r3, r3, #2
 80020ae:	3318      	adds	r3, #24
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	589b      	ldr	r3, [r3, r2]
 80020b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2203      	movs	r2, #3
 80020ba:	4013      	ands	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	220f      	movs	r2, #15
 80020c0:	409a      	lsls	r2, r3
 80020c2:	0013      	movs	r3, r2
 80020c4:	43da      	mvns	r2, r3
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4013      	ands	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	23a0      	movs	r3, #160	; 0xa0
 80020d0:	05db      	lsls	r3, r3, #23
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d013      	beq.n	80020fe <HAL_GPIO_Init+0x1ca>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a45      	ldr	r2, [pc, #276]	; (80021f0 <HAL_GPIO_Init+0x2bc>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00d      	beq.n	80020fa <HAL_GPIO_Init+0x1c6>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a44      	ldr	r2, [pc, #272]	; (80021f4 <HAL_GPIO_Init+0x2c0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d007      	beq.n	80020f6 <HAL_GPIO_Init+0x1c2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a43      	ldr	r2, [pc, #268]	; (80021f8 <HAL_GPIO_Init+0x2c4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d101      	bne.n	80020f2 <HAL_GPIO_Init+0x1be>
 80020ee:	2303      	movs	r3, #3
 80020f0:	e006      	b.n	8002100 <HAL_GPIO_Init+0x1cc>
 80020f2:	2305      	movs	r3, #5
 80020f4:	e004      	b.n	8002100 <HAL_GPIO_Init+0x1cc>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e002      	b.n	8002100 <HAL_GPIO_Init+0x1cc>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_GPIO_Init+0x1cc>
 80020fe:	2300      	movs	r3, #0
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	2103      	movs	r1, #3
 8002104:	400a      	ands	r2, r1
 8002106:	00d2      	lsls	r2, r2, #3
 8002108:	4093      	lsls	r3, r2
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002110:	4936      	ldr	r1, [pc, #216]	; (80021ec <HAL_GPIO_Init+0x2b8>)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	089b      	lsrs	r3, r3, #2
 8002116:	3318      	adds	r3, #24
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800211e:	4b33      	ldr	r3, [pc, #204]	; (80021ec <HAL_GPIO_Init+0x2b8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	43da      	mvns	r2, r3
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	035b      	lsls	r3, r3, #13
 8002136:	4013      	ands	r3, r2
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002142:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <HAL_GPIO_Init+0x2b8>)
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002148:	4b28      	ldr	r3, [pc, #160]	; (80021ec <HAL_GPIO_Init+0x2b8>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	43da      	mvns	r2, r3
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4013      	ands	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	039b      	lsls	r3, r3, #14
 8002160:	4013      	ands	r3, r2
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800216c:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <HAL_GPIO_Init+0x2b8>)
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002172:	4a1e      	ldr	r2, [pc, #120]	; (80021ec <HAL_GPIO_Init+0x2b8>)
 8002174:	2384      	movs	r3, #132	; 0x84
 8002176:	58d3      	ldr	r3, [r2, r3]
 8002178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	43da      	mvns	r2, r3
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4013      	ands	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	029b      	lsls	r3, r3, #10
 800218c:	4013      	ands	r3, r2
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002198:	4914      	ldr	r1, [pc, #80]	; (80021ec <HAL_GPIO_Init+0x2b8>)
 800219a:	2284      	movs	r2, #132	; 0x84
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80021a0:	4a12      	ldr	r2, [pc, #72]	; (80021ec <HAL_GPIO_Init+0x2b8>)
 80021a2:	2380      	movs	r3, #128	; 0x80
 80021a4:	58d3      	ldr	r3, [r2, r3]
 80021a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	43da      	mvns	r2, r3
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4013      	ands	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	2380      	movs	r3, #128	; 0x80
 80021b8:	025b      	lsls	r3, r3, #9
 80021ba:	4013      	ands	r3, r2
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021c6:	4909      	ldr	r1, [pc, #36]	; (80021ec <HAL_GPIO_Init+0x2b8>)
 80021c8:	2280      	movs	r2, #128	; 0x80
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	3301      	adds	r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	40da      	lsrs	r2, r3
 80021dc:	1e13      	subs	r3, r2, #0
 80021de:	d000      	beq.n	80021e2 <HAL_GPIO_Init+0x2ae>
 80021e0:	e6b0      	b.n	8001f44 <HAL_GPIO_Init+0x10>
  }
}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	46c0      	nop			; (mov r8, r8)
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b006      	add	sp, #24
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021800 	.word	0x40021800
 80021f0:	50000400 	.word	0x50000400
 80021f4:	50000800 	.word	0x50000800
 80021f8:	50000c00 	.word	0x50000c00

080021fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	0008      	movs	r0, r1
 8002206:	0011      	movs	r1, r2
 8002208:	1cbb      	adds	r3, r7, #2
 800220a:	1c02      	adds	r2, r0, #0
 800220c:	801a      	strh	r2, [r3, #0]
 800220e:	1c7b      	adds	r3, r7, #1
 8002210:	1c0a      	adds	r2, r1, #0
 8002212:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002214:	1c7b      	adds	r3, r7, #1
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d004      	beq.n	8002226 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800221c:	1cbb      	adds	r3, r7, #2
 800221e:	881a      	ldrh	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002224:	e003      	b.n	800222e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002226:	1cbb      	adds	r3, r7, #2
 8002228:	881a      	ldrh	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	46bd      	mov	sp, r7
 8002232:	b002      	add	sp, #8
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002240:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a19      	ldr	r2, [pc, #100]	; (80022ac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002246:	4013      	ands	r3, r2
 8002248:	0019      	movs	r1, r3
 800224a:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	430a      	orrs	r2, r1
 8002250:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	429a      	cmp	r2, r3
 800225a:	d11f      	bne.n	800229c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800225c:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	0013      	movs	r3, r2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	189b      	adds	r3, r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4912      	ldr	r1, [pc, #72]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800226a:	0018      	movs	r0, r3
 800226c:	f7fd ff48 	bl	8000100 <__udivsi3>
 8002270:	0003      	movs	r3, r0
 8002272:	3301      	adds	r3, #1
 8002274:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002276:	e008      	b.n	800228a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	3b01      	subs	r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e001      	b.n	800228a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e009      	b.n	800229e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800228a:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	401a      	ands	r2, r3
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	429a      	cmp	r2, r3
 800229a:	d0ed      	beq.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	0018      	movs	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b004      	add	sp, #16
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	40007000 	.word	0x40007000
 80022ac:	fffff9ff 	.word	0xfffff9ff
 80022b0:	20000000 	.word	0x20000000
 80022b4:	000f4240 	.word	0x000f4240

080022b8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <LL_RCC_GetAPB1Prescaler+0x14>)
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	23e0      	movs	r3, #224	; 0xe0
 80022c2:	01db      	lsls	r3, r3, #7
 80022c4:	4013      	ands	r3, r2
}
 80022c6:	0018      	movs	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000

080022d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e2f3      	b.n	80028ca <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2201      	movs	r2, #1
 80022e8:	4013      	ands	r3, r2
 80022ea:	d100      	bne.n	80022ee <HAL_RCC_OscConfig+0x1e>
 80022ec:	e07c      	b.n	80023e8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ee:	4bc3      	ldr	r3, [pc, #780]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2238      	movs	r2, #56	; 0x38
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022f8:	4bc0      	ldr	r3, [pc, #768]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2203      	movs	r2, #3
 80022fe:	4013      	ands	r3, r2
 8002300:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	2b10      	cmp	r3, #16
 8002306:	d102      	bne.n	800230e <HAL_RCC_OscConfig+0x3e>
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2b03      	cmp	r3, #3
 800230c:	d002      	beq.n	8002314 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	2b08      	cmp	r3, #8
 8002312:	d10b      	bne.n	800232c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002314:	4bb9      	ldr	r3, [pc, #740]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	029b      	lsls	r3, r3, #10
 800231c:	4013      	ands	r3, r2
 800231e:	d062      	beq.n	80023e6 <HAL_RCC_OscConfig+0x116>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d15e      	bne.n	80023e6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e2ce      	b.n	80028ca <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	025b      	lsls	r3, r3, #9
 8002334:	429a      	cmp	r2, r3
 8002336:	d107      	bne.n	8002348 <HAL_RCC_OscConfig+0x78>
 8002338:	4bb0      	ldr	r3, [pc, #704]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4baf      	ldr	r3, [pc, #700]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 800233e:	2180      	movs	r1, #128	; 0x80
 8002340:	0249      	lsls	r1, r1, #9
 8002342:	430a      	orrs	r2, r1
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	e020      	b.n	800238a <HAL_RCC_OscConfig+0xba>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	23a0      	movs	r3, #160	; 0xa0
 800234e:	02db      	lsls	r3, r3, #11
 8002350:	429a      	cmp	r2, r3
 8002352:	d10e      	bne.n	8002372 <HAL_RCC_OscConfig+0xa2>
 8002354:	4ba9      	ldr	r3, [pc, #676]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4ba8      	ldr	r3, [pc, #672]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 800235a:	2180      	movs	r1, #128	; 0x80
 800235c:	02c9      	lsls	r1, r1, #11
 800235e:	430a      	orrs	r2, r1
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	4ba6      	ldr	r3, [pc, #664]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	4ba5      	ldr	r3, [pc, #660]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 8002368:	2180      	movs	r1, #128	; 0x80
 800236a:	0249      	lsls	r1, r1, #9
 800236c:	430a      	orrs	r2, r1
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	e00b      	b.n	800238a <HAL_RCC_OscConfig+0xba>
 8002372:	4ba2      	ldr	r3, [pc, #648]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	4ba1      	ldr	r3, [pc, #644]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 8002378:	49a1      	ldr	r1, [pc, #644]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 800237a:	400a      	ands	r2, r1
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	4b9f      	ldr	r3, [pc, #636]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4b9e      	ldr	r3, [pc, #632]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 8002384:	499f      	ldr	r1, [pc, #636]	; (8002604 <HAL_RCC_OscConfig+0x334>)
 8002386:	400a      	ands	r2, r1
 8002388:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d014      	beq.n	80023bc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7ff f893 	bl	80014bc <HAL_GetTick>
 8002396:	0003      	movs	r3, r0
 8002398:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800239c:	f7ff f88e 	bl	80014bc <HAL_GetTick>
 80023a0:	0002      	movs	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b64      	cmp	r3, #100	; 0x64
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e28d      	b.n	80028ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ae:	4b93      	ldr	r3, [pc, #588]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	029b      	lsls	r3, r3, #10
 80023b6:	4013      	ands	r3, r2
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0xcc>
 80023ba:	e015      	b.n	80023e8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f7ff f87e 	bl	80014bc <HAL_GetTick>
 80023c0:	0003      	movs	r3, r0
 80023c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c6:	f7ff f879 	bl	80014bc <HAL_GetTick>
 80023ca:	0002      	movs	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b64      	cmp	r3, #100	; 0x64
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e278      	b.n	80028ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023d8:	4b88      	ldr	r3, [pc, #544]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	029b      	lsls	r3, r3, #10
 80023e0:	4013      	ands	r3, r2
 80023e2:	d1f0      	bne.n	80023c6 <HAL_RCC_OscConfig+0xf6>
 80023e4:	e000      	b.n	80023e8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2202      	movs	r2, #2
 80023ee:	4013      	ands	r3, r2
 80023f0:	d100      	bne.n	80023f4 <HAL_RCC_OscConfig+0x124>
 80023f2:	e099      	b.n	8002528 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023f4:	4b81      	ldr	r3, [pc, #516]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2238      	movs	r2, #56	; 0x38
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023fe:	4b7f      	ldr	r3, [pc, #508]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2203      	movs	r2, #3
 8002404:	4013      	ands	r3, r2
 8002406:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2b10      	cmp	r3, #16
 800240c:	d102      	bne.n	8002414 <HAL_RCC_OscConfig+0x144>
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d002      	beq.n	800241a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d135      	bne.n	8002486 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800241a:	4b78      	ldr	r3, [pc, #480]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4013      	ands	r3, r2
 8002424:	d005      	beq.n	8002432 <HAL_RCC_OscConfig+0x162>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e24b      	b.n	80028ca <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002432:	4b72      	ldr	r3, [pc, #456]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	4a74      	ldr	r2, [pc, #464]	; (8002608 <HAL_RCC_OscConfig+0x338>)
 8002438:	4013      	ands	r3, r2
 800243a:	0019      	movs	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	021a      	lsls	r2, r3, #8
 8002442:	4b6e      	ldr	r3, [pc, #440]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 8002444:	430a      	orrs	r2, r1
 8002446:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d112      	bne.n	8002474 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800244e:	4b6b      	ldr	r3, [pc, #428]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a6e      	ldr	r2, [pc, #440]	; (800260c <HAL_RCC_OscConfig+0x33c>)
 8002454:	4013      	ands	r3, r2
 8002456:	0019      	movs	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	4b67      	ldr	r3, [pc, #412]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 800245e:	430a      	orrs	r2, r1
 8002460:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002462:	4b66      	ldr	r3, [pc, #408]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	0adb      	lsrs	r3, r3, #11
 8002468:	2207      	movs	r2, #7
 800246a:	4013      	ands	r3, r2
 800246c:	4a68      	ldr	r2, [pc, #416]	; (8002610 <HAL_RCC_OscConfig+0x340>)
 800246e:	40da      	lsrs	r2, r3
 8002470:	4b68      	ldr	r3, [pc, #416]	; (8002614 <HAL_RCC_OscConfig+0x344>)
 8002472:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002474:	4b68      	ldr	r3, [pc, #416]	; (8002618 <HAL_RCC_OscConfig+0x348>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0018      	movs	r0, r3
 800247a:	f7fe ffc3 	bl	8001404 <HAL_InitTick>
 800247e:	1e03      	subs	r3, r0, #0
 8002480:	d051      	beq.n	8002526 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e221      	b.n	80028ca <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d030      	beq.n	80024f0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800248e:	4b5b      	ldr	r3, [pc, #364]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a5e      	ldr	r2, [pc, #376]	; (800260c <HAL_RCC_OscConfig+0x33c>)
 8002494:	4013      	ands	r3, r2
 8002496:	0019      	movs	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	4b57      	ldr	r3, [pc, #348]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 800249e:	430a      	orrs	r2, r1
 80024a0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80024a2:	4b56      	ldr	r3, [pc, #344]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	4b55      	ldr	r3, [pc, #340]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 80024a8:	2180      	movs	r1, #128	; 0x80
 80024aa:	0049      	lsls	r1, r1, #1
 80024ac:	430a      	orrs	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7ff f804 	bl	80014bc <HAL_GetTick>
 80024b4:	0003      	movs	r3, r0
 80024b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ba:	f7fe ffff 	bl	80014bc <HAL_GetTick>
 80024be:	0002      	movs	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e1fe      	b.n	80028ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024cc:	4b4b      	ldr	r3, [pc, #300]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4013      	ands	r3, r2
 80024d6:	d0f0      	beq.n	80024ba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d8:	4b48      	ldr	r3, [pc, #288]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	4a4a      	ldr	r2, [pc, #296]	; (8002608 <HAL_RCC_OscConfig+0x338>)
 80024de:	4013      	ands	r3, r2
 80024e0:	0019      	movs	r1, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	021a      	lsls	r2, r3, #8
 80024e8:	4b44      	ldr	r3, [pc, #272]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 80024ea:	430a      	orrs	r2, r1
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	e01b      	b.n	8002528 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80024f0:	4b42      	ldr	r3, [pc, #264]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b41      	ldr	r3, [pc, #260]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 80024f6:	4949      	ldr	r1, [pc, #292]	; (800261c <HAL_RCC_OscConfig+0x34c>)
 80024f8:	400a      	ands	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7fe ffde 	bl	80014bc <HAL_GetTick>
 8002500:	0003      	movs	r3, r0
 8002502:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002506:	f7fe ffd9 	bl	80014bc <HAL_GetTick>
 800250a:	0002      	movs	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e1d8      	b.n	80028ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002518:	4b38      	ldr	r3, [pc, #224]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4013      	ands	r3, r2
 8002522:	d1f0      	bne.n	8002506 <HAL_RCC_OscConfig+0x236>
 8002524:	e000      	b.n	8002528 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002526:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2208      	movs	r2, #8
 800252e:	4013      	ands	r3, r2
 8002530:	d047      	beq.n	80025c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002532:	4b32      	ldr	r3, [pc, #200]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2238      	movs	r2, #56	; 0x38
 8002538:	4013      	ands	r3, r2
 800253a:	2b18      	cmp	r3, #24
 800253c:	d10a      	bne.n	8002554 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800253e:	4b2f      	ldr	r3, [pc, #188]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 8002540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002542:	2202      	movs	r2, #2
 8002544:	4013      	ands	r3, r2
 8002546:	d03c      	beq.n	80025c2 <HAL_RCC_OscConfig+0x2f2>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d138      	bne.n	80025c2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e1ba      	b.n	80028ca <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d019      	beq.n	8002590 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800255c:	4b27      	ldr	r3, [pc, #156]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 800255e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002560:	4b26      	ldr	r3, [pc, #152]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 8002562:	2101      	movs	r1, #1
 8002564:	430a      	orrs	r2, r1
 8002566:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7fe ffa8 	bl	80014bc <HAL_GetTick>
 800256c:	0003      	movs	r3, r0
 800256e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002572:	f7fe ffa3 	bl	80014bc <HAL_GetTick>
 8002576:	0002      	movs	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e1a2      	b.n	80028ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002584:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 8002586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002588:	2202      	movs	r2, #2
 800258a:	4013      	ands	r3, r2
 800258c:	d0f1      	beq.n	8002572 <HAL_RCC_OscConfig+0x2a2>
 800258e:	e018      	b.n	80025c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002590:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 8002592:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 8002596:	2101      	movs	r1, #1
 8002598:	438a      	bics	r2, r1
 800259a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7fe ff8e 	bl	80014bc <HAL_GetTick>
 80025a0:	0003      	movs	r3, r0
 80025a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a6:	f7fe ff89 	bl	80014bc <HAL_GetTick>
 80025aa:	0002      	movs	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e188      	b.n	80028ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025b8:	4b10      	ldr	r3, [pc, #64]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 80025ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025bc:	2202      	movs	r2, #2
 80025be:	4013      	ands	r3, r2
 80025c0:	d1f1      	bne.n	80025a6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2204      	movs	r2, #4
 80025c8:	4013      	ands	r3, r2
 80025ca:	d100      	bne.n	80025ce <HAL_RCC_OscConfig+0x2fe>
 80025cc:	e0c6      	b.n	800275c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ce:	231f      	movs	r3, #31
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80025d6:	4b09      	ldr	r3, [pc, #36]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2238      	movs	r2, #56	; 0x38
 80025dc:	4013      	ands	r3, r2
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d11e      	bne.n	8002620 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80025e2:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_RCC_OscConfig+0x32c>)
 80025e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e6:	2202      	movs	r2, #2
 80025e8:	4013      	ands	r3, r2
 80025ea:	d100      	bne.n	80025ee <HAL_RCC_OscConfig+0x31e>
 80025ec:	e0b6      	b.n	800275c <HAL_RCC_OscConfig+0x48c>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d000      	beq.n	80025f8 <HAL_RCC_OscConfig+0x328>
 80025f6:	e0b1      	b.n	800275c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e166      	b.n	80028ca <HAL_RCC_OscConfig+0x5fa>
 80025fc:	40021000 	.word	0x40021000
 8002600:	fffeffff 	.word	0xfffeffff
 8002604:	fffbffff 	.word	0xfffbffff
 8002608:	ffff80ff 	.word	0xffff80ff
 800260c:	ffffc7ff 	.word	0xffffc7ff
 8002610:	00f42400 	.word	0x00f42400
 8002614:	20000000 	.word	0x20000000
 8002618:	20000004 	.word	0x20000004
 800261c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002620:	4bac      	ldr	r3, [pc, #688]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 8002622:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002624:	2380      	movs	r3, #128	; 0x80
 8002626:	055b      	lsls	r3, r3, #21
 8002628:	4013      	ands	r3, r2
 800262a:	d101      	bne.n	8002630 <HAL_RCC_OscConfig+0x360>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <HAL_RCC_OscConfig+0x362>
 8002630:	2300      	movs	r3, #0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d011      	beq.n	800265a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002636:	4ba7      	ldr	r3, [pc, #668]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 8002638:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800263a:	4ba6      	ldr	r3, [pc, #664]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 800263c:	2180      	movs	r1, #128	; 0x80
 800263e:	0549      	lsls	r1, r1, #21
 8002640:	430a      	orrs	r2, r1
 8002642:	63da      	str	r2, [r3, #60]	; 0x3c
 8002644:	4ba3      	ldr	r3, [pc, #652]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 8002646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	055b      	lsls	r3, r3, #21
 800264c:	4013      	ands	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002652:	231f      	movs	r3, #31
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800265a:	4b9f      	ldr	r3, [pc, #636]	; (80028d8 <HAL_RCC_OscConfig+0x608>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	2380      	movs	r3, #128	; 0x80
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	4013      	ands	r3, r2
 8002664:	d11a      	bne.n	800269c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002666:	4b9c      	ldr	r3, [pc, #624]	; (80028d8 <HAL_RCC_OscConfig+0x608>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	4b9b      	ldr	r3, [pc, #620]	; (80028d8 <HAL_RCC_OscConfig+0x608>)
 800266c:	2180      	movs	r1, #128	; 0x80
 800266e:	0049      	lsls	r1, r1, #1
 8002670:	430a      	orrs	r2, r1
 8002672:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002674:	f7fe ff22 	bl	80014bc <HAL_GetTick>
 8002678:	0003      	movs	r3, r0
 800267a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267e:	f7fe ff1d 	bl	80014bc <HAL_GetTick>
 8002682:	0002      	movs	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e11c      	b.n	80028ca <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002690:	4b91      	ldr	r3, [pc, #580]	; (80028d8 <HAL_RCC_OscConfig+0x608>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	4013      	ands	r3, r2
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d106      	bne.n	80026b2 <HAL_RCC_OscConfig+0x3e2>
 80026a4:	4b8b      	ldr	r3, [pc, #556]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 80026a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026a8:	4b8a      	ldr	r3, [pc, #552]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 80026aa:	2101      	movs	r1, #1
 80026ac:	430a      	orrs	r2, r1
 80026ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80026b0:	e01c      	b.n	80026ec <HAL_RCC_OscConfig+0x41c>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b05      	cmp	r3, #5
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x404>
 80026ba:	4b86      	ldr	r3, [pc, #536]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 80026bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026be:	4b85      	ldr	r3, [pc, #532]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 80026c0:	2104      	movs	r1, #4
 80026c2:	430a      	orrs	r2, r1
 80026c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80026c6:	4b83      	ldr	r3, [pc, #524]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 80026c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026ca:	4b82      	ldr	r3, [pc, #520]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 80026cc:	2101      	movs	r1, #1
 80026ce:	430a      	orrs	r2, r1
 80026d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80026d2:	e00b      	b.n	80026ec <HAL_RCC_OscConfig+0x41c>
 80026d4:	4b7f      	ldr	r3, [pc, #508]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 80026d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026d8:	4b7e      	ldr	r3, [pc, #504]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 80026da:	2101      	movs	r1, #1
 80026dc:	438a      	bics	r2, r1
 80026de:	65da      	str	r2, [r3, #92]	; 0x5c
 80026e0:	4b7c      	ldr	r3, [pc, #496]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 80026e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026e4:	4b7b      	ldr	r3, [pc, #492]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 80026e6:	2104      	movs	r1, #4
 80026e8:	438a      	bics	r2, r1
 80026ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d014      	beq.n	800271e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7fe fee2 	bl	80014bc <HAL_GetTick>
 80026f8:	0003      	movs	r3, r0
 80026fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026fc:	e009      	b.n	8002712 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fe:	f7fe fedd 	bl	80014bc <HAL_GetTick>
 8002702:	0002      	movs	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	4a74      	ldr	r2, [pc, #464]	; (80028dc <HAL_RCC_OscConfig+0x60c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e0db      	b.n	80028ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002712:	4b70      	ldr	r3, [pc, #448]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 8002714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002716:	2202      	movs	r2, #2
 8002718:	4013      	ands	r3, r2
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x42e>
 800271c:	e013      	b.n	8002746 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271e:	f7fe fecd 	bl	80014bc <HAL_GetTick>
 8002722:	0003      	movs	r3, r0
 8002724:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002726:	e009      	b.n	800273c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002728:	f7fe fec8 	bl	80014bc <HAL_GetTick>
 800272c:	0002      	movs	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	4a6a      	ldr	r2, [pc, #424]	; (80028dc <HAL_RCC_OscConfig+0x60c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e0c6      	b.n	80028ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800273c:	4b65      	ldr	r3, [pc, #404]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 800273e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002740:	2202      	movs	r2, #2
 8002742:	4013      	ands	r3, r2
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002746:	231f      	movs	r3, #31
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d105      	bne.n	800275c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002750:	4b60      	ldr	r3, [pc, #384]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 8002752:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002754:	4b5f      	ldr	r3, [pc, #380]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 8002756:	4962      	ldr	r1, [pc, #392]	; (80028e0 <HAL_RCC_OscConfig+0x610>)
 8002758:	400a      	ands	r2, r1
 800275a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d100      	bne.n	8002766 <HAL_RCC_OscConfig+0x496>
 8002764:	e0b0      	b.n	80028c8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002766:	4b5b      	ldr	r3, [pc, #364]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2238      	movs	r2, #56	; 0x38
 800276c:	4013      	ands	r3, r2
 800276e:	2b10      	cmp	r3, #16
 8002770:	d100      	bne.n	8002774 <HAL_RCC_OscConfig+0x4a4>
 8002772:	e078      	b.n	8002866 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d153      	bne.n	8002824 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277c:	4b55      	ldr	r3, [pc, #340]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b54      	ldr	r3, [pc, #336]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 8002782:	4958      	ldr	r1, [pc, #352]	; (80028e4 <HAL_RCC_OscConfig+0x614>)
 8002784:	400a      	ands	r2, r1
 8002786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7fe fe98 	bl	80014bc <HAL_GetTick>
 800278c:	0003      	movs	r3, r0
 800278e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002792:	f7fe fe93 	bl	80014bc <HAL_GetTick>
 8002796:	0002      	movs	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e092      	b.n	80028ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a4:	4b4b      	ldr	r3, [pc, #300]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	049b      	lsls	r3, r3, #18
 80027ac:	4013      	ands	r3, r2
 80027ae:	d1f0      	bne.n	8002792 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027b0:	4b48      	ldr	r3, [pc, #288]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4a4c      	ldr	r2, [pc, #304]	; (80028e8 <HAL_RCC_OscConfig+0x618>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	0019      	movs	r1, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1a      	ldr	r2, [r3, #32]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	431a      	orrs	r2, r3
 80027d8:	4b3e      	ldr	r3, [pc, #248]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 80027da:	430a      	orrs	r2, r1
 80027dc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027de:	4b3d      	ldr	r3, [pc, #244]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	4b3c      	ldr	r3, [pc, #240]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 80027e4:	2180      	movs	r1, #128	; 0x80
 80027e6:	0449      	lsls	r1, r1, #17
 80027e8:	430a      	orrs	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80027ec:	4b39      	ldr	r3, [pc, #228]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	4b38      	ldr	r3, [pc, #224]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 80027f2:	2180      	movs	r1, #128	; 0x80
 80027f4:	0549      	lsls	r1, r1, #21
 80027f6:	430a      	orrs	r2, r1
 80027f8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fa:	f7fe fe5f 	bl	80014bc <HAL_GetTick>
 80027fe:	0003      	movs	r3, r0
 8002800:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002804:	f7fe fe5a 	bl	80014bc <HAL_GetTick>
 8002808:	0002      	movs	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e059      	b.n	80028ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002816:	4b2f      	ldr	r3, [pc, #188]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	049b      	lsls	r3, r3, #18
 800281e:	4013      	ands	r3, r2
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x534>
 8002822:	e051      	b.n	80028c8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002824:	4b2b      	ldr	r3, [pc, #172]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4b2a      	ldr	r3, [pc, #168]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 800282a:	492e      	ldr	r1, [pc, #184]	; (80028e4 <HAL_RCC_OscConfig+0x614>)
 800282c:	400a      	ands	r2, r1
 800282e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7fe fe44 	bl	80014bc <HAL_GetTick>
 8002834:	0003      	movs	r3, r0
 8002836:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283a:	f7fe fe3f 	bl	80014bc <HAL_GetTick>
 800283e:	0002      	movs	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e03e      	b.n	80028ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800284c:	4b21      	ldr	r3, [pc, #132]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	049b      	lsls	r3, r3, #18
 8002854:	4013      	ands	r3, r2
 8002856:	d1f0      	bne.n	800283a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002858:	4b1e      	ldr	r3, [pc, #120]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 800285e:	4923      	ldr	r1, [pc, #140]	; (80028ec <HAL_RCC_OscConfig+0x61c>)
 8002860:	400a      	ands	r2, r1
 8002862:	60da      	str	r2, [r3, #12]
 8002864:	e030      	b.n	80028c8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e02b      	b.n	80028ca <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002872:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <HAL_RCC_OscConfig+0x604>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2203      	movs	r2, #3
 800287c:	401a      	ands	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	429a      	cmp	r2, r3
 8002884:	d11e      	bne.n	80028c4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2270      	movs	r2, #112	; 0x70
 800288a:	401a      	ands	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002890:	429a      	cmp	r2, r3
 8002892:	d117      	bne.n	80028c4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	23fe      	movs	r3, #254	; 0xfe
 8002898:	01db      	lsls	r3, r3, #7
 800289a:	401a      	ands	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d10e      	bne.n	80028c4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	23f8      	movs	r3, #248	; 0xf8
 80028aa:	039b      	lsls	r3, r3, #14
 80028ac:	401a      	ands	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d106      	bne.n	80028c4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	0f5b      	lsrs	r3, r3, #29
 80028ba:	075a      	lsls	r2, r3, #29
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e000      	b.n	80028ca <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	0018      	movs	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b008      	add	sp, #32
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40007000 	.word	0x40007000
 80028dc:	00001388 	.word	0x00001388
 80028e0:	efffffff 	.word	0xefffffff
 80028e4:	feffffff 	.word	0xfeffffff
 80028e8:	1fc1808c 	.word	0x1fc1808c
 80028ec:	effefffc 	.word	0xeffefffc

080028f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0e9      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002904:	4b76      	ldr	r3, [pc, #472]	; (8002ae0 <HAL_RCC_ClockConfig+0x1f0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2207      	movs	r2, #7
 800290a:	4013      	ands	r3, r2
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d91e      	bls.n	8002950 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b73      	ldr	r3, [pc, #460]	; (8002ae0 <HAL_RCC_ClockConfig+0x1f0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2207      	movs	r2, #7
 8002918:	4393      	bics	r3, r2
 800291a:	0019      	movs	r1, r3
 800291c:	4b70      	ldr	r3, [pc, #448]	; (8002ae0 <HAL_RCC_ClockConfig+0x1f0>)
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002924:	f7fe fdca 	bl	80014bc <HAL_GetTick>
 8002928:	0003      	movs	r3, r0
 800292a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800292c:	e009      	b.n	8002942 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800292e:	f7fe fdc5 	bl	80014bc <HAL_GetTick>
 8002932:	0002      	movs	r2, r0
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	4a6a      	ldr	r2, [pc, #424]	; (8002ae4 <HAL_RCC_ClockConfig+0x1f4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e0ca      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002942:	4b67      	ldr	r3, [pc, #412]	; (8002ae0 <HAL_RCC_ClockConfig+0x1f0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2207      	movs	r2, #7
 8002948:	4013      	ands	r3, r2
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d1ee      	bne.n	800292e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2202      	movs	r2, #2
 8002956:	4013      	ands	r3, r2
 8002958:	d015      	beq.n	8002986 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2204      	movs	r2, #4
 8002960:	4013      	ands	r3, r2
 8002962:	d006      	beq.n	8002972 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002964:	4b60      	ldr	r3, [pc, #384]	; (8002ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	4b5f      	ldr	r3, [pc, #380]	; (8002ae8 <HAL_RCC_ClockConfig+0x1f8>)
 800296a:	21e0      	movs	r1, #224	; 0xe0
 800296c:	01c9      	lsls	r1, r1, #7
 800296e:	430a      	orrs	r2, r1
 8002970:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002972:	4b5d      	ldr	r3, [pc, #372]	; (8002ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	4a5d      	ldr	r2, [pc, #372]	; (8002aec <HAL_RCC_ClockConfig+0x1fc>)
 8002978:	4013      	ands	r3, r2
 800297a:	0019      	movs	r1, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	4b59      	ldr	r3, [pc, #356]	; (8002ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8002982:	430a      	orrs	r2, r1
 8002984:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2201      	movs	r2, #1
 800298c:	4013      	ands	r3, r2
 800298e:	d057      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d107      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002998:	4b53      	ldr	r3, [pc, #332]	; (8002ae8 <HAL_RCC_ClockConfig+0x1f8>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	029b      	lsls	r3, r3, #10
 80029a0:	4013      	ands	r3, r2
 80029a2:	d12b      	bne.n	80029fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e097      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d107      	bne.n	80029c0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b0:	4b4d      	ldr	r3, [pc, #308]	; (8002ae8 <HAL_RCC_ClockConfig+0x1f8>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	2380      	movs	r3, #128	; 0x80
 80029b6:	049b      	lsls	r3, r3, #18
 80029b8:	4013      	ands	r3, r2
 80029ba:	d11f      	bne.n	80029fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e08b      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d107      	bne.n	80029d8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029c8:	4b47      	ldr	r3, [pc, #284]	; (8002ae8 <HAL_RCC_ClockConfig+0x1f8>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	2380      	movs	r3, #128	; 0x80
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	4013      	ands	r3, r2
 80029d2:	d113      	bne.n	80029fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e07f      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d106      	bne.n	80029ee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029e0:	4b41      	ldr	r3, [pc, #260]	; (8002ae8 <HAL_RCC_ClockConfig+0x1f8>)
 80029e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e4:	2202      	movs	r2, #2
 80029e6:	4013      	ands	r3, r2
 80029e8:	d108      	bne.n	80029fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e074      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ee:	4b3e      	ldr	r3, [pc, #248]	; (8002ae8 <HAL_RCC_ClockConfig+0x1f8>)
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	2202      	movs	r2, #2
 80029f4:	4013      	ands	r3, r2
 80029f6:	d101      	bne.n	80029fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e06d      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029fc:	4b3a      	ldr	r3, [pc, #232]	; (8002ae8 <HAL_RCC_ClockConfig+0x1f8>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2207      	movs	r2, #7
 8002a02:	4393      	bics	r3, r2
 8002a04:	0019      	movs	r1, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	4b37      	ldr	r3, [pc, #220]	; (8002ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a10:	f7fe fd54 	bl	80014bc <HAL_GetTick>
 8002a14:	0003      	movs	r3, r0
 8002a16:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a18:	e009      	b.n	8002a2e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a1a:	f7fe fd4f 	bl	80014bc <HAL_GetTick>
 8002a1e:	0002      	movs	r2, r0
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	4a2f      	ldr	r2, [pc, #188]	; (8002ae4 <HAL_RCC_ClockConfig+0x1f4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e054      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	4b2e      	ldr	r3, [pc, #184]	; (8002ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2238      	movs	r2, #56	; 0x38
 8002a34:	401a      	ands	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d1ec      	bne.n	8002a1a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a40:	4b27      	ldr	r3, [pc, #156]	; (8002ae0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2207      	movs	r2, #7
 8002a46:	4013      	ands	r3, r2
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d21e      	bcs.n	8002a8c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4e:	4b24      	ldr	r3, [pc, #144]	; (8002ae0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2207      	movs	r2, #7
 8002a54:	4393      	bics	r3, r2
 8002a56:	0019      	movs	r1, r3
 8002a58:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a60:	f7fe fd2c 	bl	80014bc <HAL_GetTick>
 8002a64:	0003      	movs	r3, r0
 8002a66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a68:	e009      	b.n	8002a7e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a6a:	f7fe fd27 	bl	80014bc <HAL_GetTick>
 8002a6e:	0002      	movs	r2, r0
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	4a1b      	ldr	r2, [pc, #108]	; (8002ae4 <HAL_RCC_ClockConfig+0x1f4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e02c      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a7e:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2207      	movs	r2, #7
 8002a84:	4013      	ands	r3, r2
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d1ee      	bne.n	8002a6a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2204      	movs	r2, #4
 8002a92:	4013      	ands	r3, r2
 8002a94:	d009      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a96:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <HAL_RCC_ClockConfig+0x200>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	4b10      	ldr	r3, [pc, #64]	; (8002ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002aaa:	f000 f829 	bl	8002b00 <HAL_RCC_GetSysClockFreq>
 8002aae:	0001      	movs	r1, r0
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	0a1b      	lsrs	r3, r3, #8
 8002ab6:	220f      	movs	r2, #15
 8002ab8:	401a      	ands	r2, r3
 8002aba:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <HAL_RCC_ClockConfig+0x204>)
 8002abc:	0092      	lsls	r2, r2, #2
 8002abe:	58d3      	ldr	r3, [r2, r3]
 8002ac0:	221f      	movs	r2, #31
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	000a      	movs	r2, r1
 8002ac6:	40da      	lsrs	r2, r3
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_RCC_ClockConfig+0x208>)
 8002aca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_RCC_ClockConfig+0x20c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f7fe fc97 	bl	8001404 <HAL_InitTick>
 8002ad6:	0003      	movs	r3, r0
}
 8002ad8:	0018      	movs	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	b004      	add	sp, #16
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40022000 	.word	0x40022000
 8002ae4:	00001388 	.word	0x00001388
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	fffff0ff 	.word	0xfffff0ff
 8002af0:	ffff8fff 	.word	0xffff8fff
 8002af4:	0800490c 	.word	0x0800490c
 8002af8:	20000000 	.word	0x20000000
 8002afc:	20000004 	.word	0x20000004

08002b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b06:	4b3c      	ldr	r3, [pc, #240]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2238      	movs	r2, #56	; 0x38
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d10f      	bne.n	8002b30 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002b10:	4b39      	ldr	r3, [pc, #228]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	0adb      	lsrs	r3, r3, #11
 8002b16:	2207      	movs	r2, #7
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	0013      	movs	r3, r2
 8002b20:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002b22:	6839      	ldr	r1, [r7, #0]
 8002b24:	4835      	ldr	r0, [pc, #212]	; (8002bfc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b26:	f7fd faeb 	bl	8000100 <__udivsi3>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	e05d      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b30:	4b31      	ldr	r3, [pc, #196]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2238      	movs	r2, #56	; 0x38
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d102      	bne.n	8002b42 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b3c:	4b30      	ldr	r3, [pc, #192]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	e054      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b42:	4b2d      	ldr	r3, [pc, #180]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2238      	movs	r2, #56	; 0x38
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b10      	cmp	r3, #16
 8002b4c:	d138      	bne.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002b4e:	4b2a      	ldr	r3, [pc, #168]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	2203      	movs	r2, #3
 8002b54:	4013      	ands	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b58:	4b27      	ldr	r3, [pc, #156]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	2207      	movs	r2, #7
 8002b60:	4013      	ands	r3, r2
 8002b62:	3301      	adds	r3, #1
 8002b64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d10d      	bne.n	8002b88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	4824      	ldr	r0, [pc, #144]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b70:	f7fd fac6 	bl	8000100 <__udivsi3>
 8002b74:	0003      	movs	r3, r0
 8002b76:	0019      	movs	r1, r3
 8002b78:	4b1f      	ldr	r3, [pc, #124]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	227f      	movs	r2, #127	; 0x7f
 8002b80:	4013      	ands	r3, r2
 8002b82:	434b      	muls	r3, r1
 8002b84:	617b      	str	r3, [r7, #20]
        break;
 8002b86:	e00d      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	481c      	ldr	r0, [pc, #112]	; (8002bfc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b8c:	f7fd fab8 	bl	8000100 <__udivsi3>
 8002b90:	0003      	movs	r3, r0
 8002b92:	0019      	movs	r1, r3
 8002b94:	4b18      	ldr	r3, [pc, #96]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	0a1b      	lsrs	r3, r3, #8
 8002b9a:	227f      	movs	r2, #127	; 0x7f
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	434b      	muls	r3, r1
 8002ba0:	617b      	str	r3, [r7, #20]
        break;
 8002ba2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002ba4:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	0f5b      	lsrs	r3, r3, #29
 8002baa:	2207      	movs	r2, #7
 8002bac:	4013      	ands	r3, r2
 8002bae:	3301      	adds	r3, #1
 8002bb0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	6978      	ldr	r0, [r7, #20]
 8002bb6:	f7fd faa3 	bl	8000100 <__udivsi3>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	e015      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002bc0:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2238      	movs	r2, #56	; 0x38
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d103      	bne.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002bcc:	2380      	movs	r3, #128	; 0x80
 8002bce:	021b      	lsls	r3, r3, #8
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	e00b      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002bd4:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2238      	movs	r2, #56	; 0x38
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b18      	cmp	r3, #24
 8002bde:	d103      	bne.n	8002be8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002be0:	23fa      	movs	r3, #250	; 0xfa
 8002be2:	01db      	lsls	r3, r3, #7
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	e001      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002bec:	693b      	ldr	r3, [r7, #16]
}
 8002bee:	0018      	movs	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b006      	add	sp, #24
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	00f42400 	.word	0x00f42400
 8002c00:	007a1200 	.word	0x007a1200

08002c04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c08:	4b02      	ldr	r3, [pc, #8]	; (8002c14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
}
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	20000000 	.word	0x20000000

08002c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c18:	b5b0      	push	{r4, r5, r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002c1c:	f7ff fff2 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c20:	0004      	movs	r4, r0
 8002c22:	f7ff fb49 	bl	80022b8 <LL_RCC_GetAPB1Prescaler>
 8002c26:	0003      	movs	r3, r0
 8002c28:	0b1a      	lsrs	r2, r3, #12
 8002c2a:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c2c:	0092      	lsls	r2, r2, #2
 8002c2e:	58d3      	ldr	r3, [r2, r3]
 8002c30:	221f      	movs	r2, #31
 8002c32:	4013      	ands	r3, r2
 8002c34:	40dc      	lsrs	r4, r3
 8002c36:	0023      	movs	r3, r4
}
 8002c38:	0018      	movs	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	0800494c 	.word	0x0800494c

08002c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002c4c:	2313      	movs	r3, #19
 8002c4e:	18fb      	adds	r3, r7, r3
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c54:	2312      	movs	r3, #18
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	2380      	movs	r3, #128	; 0x80
 8002c62:	029b      	lsls	r3, r3, #10
 8002c64:	4013      	ands	r3, r2
 8002c66:	d100      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002c68:	e0a3      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c6a:	2011      	movs	r0, #17
 8002c6c:	183b      	adds	r3, r7, r0
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c72:	4b86      	ldr	r3, [pc, #536]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	055b      	lsls	r3, r3, #21
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d110      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7e:	4b83      	ldr	r3, [pc, #524]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c82:	4b82      	ldr	r3, [pc, #520]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c84:	2180      	movs	r1, #128	; 0x80
 8002c86:	0549      	lsls	r1, r1, #21
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c8c:	4b7f      	ldr	r3, [pc, #508]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	055b      	lsls	r3, r3, #21
 8002c94:	4013      	ands	r3, r2
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c9a:	183b      	adds	r3, r7, r0
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ca0:	4b7b      	ldr	r3, [pc, #492]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4b7a      	ldr	r3, [pc, #488]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002ca6:	2180      	movs	r1, #128	; 0x80
 8002ca8:	0049      	lsls	r1, r1, #1
 8002caa:	430a      	orrs	r2, r1
 8002cac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cae:	f7fe fc05 	bl	80014bc <HAL_GetTick>
 8002cb2:	0003      	movs	r3, r0
 8002cb4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cb6:	e00b      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb8:	f7fe fc00 	bl	80014bc <HAL_GetTick>
 8002cbc:	0002      	movs	r2, r0
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d904      	bls.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002cc6:	2313      	movs	r3, #19
 8002cc8:	18fb      	adds	r3, r7, r3
 8002cca:	2203      	movs	r2, #3
 8002ccc:	701a      	strb	r2, [r3, #0]
        break;
 8002cce:	e005      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cd0:	4b6f      	ldr	r3, [pc, #444]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d0ed      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002cdc:	2313      	movs	r3, #19
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d154      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ce6:	4b69      	ldr	r3, [pc, #420]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ce8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cea:	23c0      	movs	r3, #192	; 0xc0
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4013      	ands	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d019      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d014      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d02:	4b62      	ldr	r3, [pc, #392]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d06:	4a63      	ldr	r2, [pc, #396]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d0c:	4b5f      	ldr	r3, [pc, #380]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d10:	4b5e      	ldr	r3, [pc, #376]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d12:	2180      	movs	r1, #128	; 0x80
 8002d14:	0249      	lsls	r1, r1, #9
 8002d16:	430a      	orrs	r2, r1
 8002d18:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d1a:	4b5c      	ldr	r3, [pc, #368]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d1e:	4b5b      	ldr	r3, [pc, #364]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d20:	495d      	ldr	r1, [pc, #372]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002d22:	400a      	ands	r2, r1
 8002d24:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d26:	4b59      	ldr	r3, [pc, #356]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	4013      	ands	r3, r2
 8002d32:	d016      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fe fbc2 	bl	80014bc <HAL_GetTick>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d3c:	e00c      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3e:	f7fe fbbd 	bl	80014bc <HAL_GetTick>
 8002d42:	0002      	movs	r2, r0
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	4a54      	ldr	r2, [pc, #336]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d904      	bls.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002d4e:	2313      	movs	r3, #19
 8002d50:	18fb      	adds	r3, r7, r3
 8002d52:	2203      	movs	r2, #3
 8002d54:	701a      	strb	r2, [r3, #0]
            break;
 8002d56:	e004      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d58:	4b4c      	ldr	r3, [pc, #304]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d0ed      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002d62:	2313      	movs	r3, #19
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d6c:	4b47      	ldr	r3, [pc, #284]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d70:	4a48      	ldr	r2, [pc, #288]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	0019      	movs	r1, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	4b44      	ldr	r3, [pc, #272]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d80:	e00c      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d82:	2312      	movs	r3, #18
 8002d84:	18fb      	adds	r3, r7, r3
 8002d86:	2213      	movs	r2, #19
 8002d88:	18ba      	adds	r2, r7, r2
 8002d8a:	7812      	ldrb	r2, [r2, #0]
 8002d8c:	701a      	strb	r2, [r3, #0]
 8002d8e:	e005      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d90:	2312      	movs	r3, #18
 8002d92:	18fb      	adds	r3, r7, r3
 8002d94:	2213      	movs	r2, #19
 8002d96:	18ba      	adds	r2, r7, r2
 8002d98:	7812      	ldrb	r2, [r2, #0]
 8002d9a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d9c:	2311      	movs	r3, #17
 8002d9e:	18fb      	adds	r3, r7, r3
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d105      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da6:	4b39      	ldr	r3, [pc, #228]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002da8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002daa:	4b38      	ldr	r3, [pc, #224]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dac:	493c      	ldr	r1, [pc, #240]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002dae:	400a      	ands	r2, r1
 8002db0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2201      	movs	r2, #1
 8002db8:	4013      	ands	r3, r2
 8002dba:	d009      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dbc:	4b33      	ldr	r3, [pc, #204]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	4393      	bics	r3, r2
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	4b30      	ldr	r3, [pc, #192]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d009      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dda:	4b2c      	ldr	r3, [pc, #176]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dde:	220c      	movs	r2, #12
 8002de0:	4393      	bics	r3, r2
 8002de2:	0019      	movs	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	4b28      	ldr	r3, [pc, #160]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dea:	430a      	orrs	r2, r1
 8002dec:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2220      	movs	r2, #32
 8002df4:	4013      	ands	r3, r2
 8002df6:	d009      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002df8:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfc:	4a29      	ldr	r2, [pc, #164]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	0019      	movs	r1, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	4b21      	ldr	r3, [pc, #132]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	01db      	lsls	r3, r3, #7
 8002e14:	4013      	ands	r3, r2
 8002e16:	d015      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e18:	4b1c      	ldr	r3, [pc, #112]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	0899      	lsrs	r1, r3, #2
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e26:	430a      	orrs	r2, r1
 8002e28:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	05db      	lsls	r3, r3, #23
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d106      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e36:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e3c:	2180      	movs	r1, #128	; 0x80
 8002e3e:	0249      	lsls	r1, r1, #9
 8002e40:	430a      	orrs	r2, r1
 8002e42:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d016      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002e50:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	4a14      	ldr	r2, [pc, #80]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	0019      	movs	r1, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e60:	430a      	orrs	r2, r1
 8002e62:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	01db      	lsls	r3, r3, #7
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d106      	bne.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e76:	2180      	movs	r1, #128	; 0x80
 8002e78:	0249      	lsls	r1, r1, #9
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002e7e:	2312      	movs	r3, #18
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	781b      	ldrb	r3, [r3, #0]
}
 8002e84:	0018      	movs	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b006      	add	sp, #24
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40007000 	.word	0x40007000
 8002e94:	fffffcff 	.word	0xfffffcff
 8002e98:	fffeffff 	.word	0xfffeffff
 8002e9c:	00001388 	.word	0x00001388
 8002ea0:	efffffff 	.word	0xefffffff
 8002ea4:	ffffcfff 	.word	0xffffcfff
 8002ea8:	ffff3fff 	.word	0xffff3fff

08002eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e04a      	b.n	8002f54 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	223d      	movs	r2, #61	; 0x3d
 8002ec2:	5c9b      	ldrb	r3, [r3, r2]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d107      	bne.n	8002eda <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	223c      	movs	r2, #60	; 0x3c
 8002ece:	2100      	movs	r1, #0
 8002ed0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f7fd ffc1 	bl	8000e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	223d      	movs	r2, #61	; 0x3d
 8002ede:	2102      	movs	r1, #2
 8002ee0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	0019      	movs	r1, r3
 8002eec:	0010      	movs	r0, r2
 8002eee:	f000 fb13 	bl	8003518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2248      	movs	r2, #72	; 0x48
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	223e      	movs	r2, #62	; 0x3e
 8002efe:	2101      	movs	r1, #1
 8002f00:	5499      	strb	r1, [r3, r2]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	223f      	movs	r2, #63	; 0x3f
 8002f06:	2101      	movs	r1, #1
 8002f08:	5499      	strb	r1, [r3, r2]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2240      	movs	r2, #64	; 0x40
 8002f0e:	2101      	movs	r1, #1
 8002f10:	5499      	strb	r1, [r3, r2]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2241      	movs	r2, #65	; 0x41
 8002f16:	2101      	movs	r1, #1
 8002f18:	5499      	strb	r1, [r3, r2]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2242      	movs	r2, #66	; 0x42
 8002f1e:	2101      	movs	r1, #1
 8002f20:	5499      	strb	r1, [r3, r2]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2243      	movs	r2, #67	; 0x43
 8002f26:	2101      	movs	r1, #1
 8002f28:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2244      	movs	r2, #68	; 0x44
 8002f2e:	2101      	movs	r1, #1
 8002f30:	5499      	strb	r1, [r3, r2]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2245      	movs	r2, #69	; 0x45
 8002f36:	2101      	movs	r1, #1
 8002f38:	5499      	strb	r1, [r3, r2]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2246      	movs	r2, #70	; 0x46
 8002f3e:	2101      	movs	r1, #1
 8002f40:	5499      	strb	r1, [r3, r2]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2247      	movs	r2, #71	; 0x47
 8002f46:	2101      	movs	r1, #1
 8002f48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	223d      	movs	r2, #61	; 0x3d
 8002f4e:	2101      	movs	r1, #1
 8002f50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	0018      	movs	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b002      	add	sp, #8
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e04a      	b.n	8003004 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	223d      	movs	r2, #61	; 0x3d
 8002f72:	5c9b      	ldrb	r3, [r3, r2]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d107      	bne.n	8002f8a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	223c      	movs	r2, #60	; 0x3c
 8002f7e:	2100      	movs	r1, #0
 8002f80:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	0018      	movs	r0, r3
 8002f86:	f000 f841 	bl	800300c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	223d      	movs	r2, #61	; 0x3d
 8002f8e:	2102      	movs	r1, #2
 8002f90:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	0010      	movs	r0, r2
 8002f9e:	f000 fabb 	bl	8003518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2248      	movs	r2, #72	; 0x48
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	223e      	movs	r2, #62	; 0x3e
 8002fae:	2101      	movs	r1, #1
 8002fb0:	5499      	strb	r1, [r3, r2]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	223f      	movs	r2, #63	; 0x3f
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	5499      	strb	r1, [r3, r2]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2240      	movs	r2, #64	; 0x40
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	5499      	strb	r1, [r3, r2]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2241      	movs	r2, #65	; 0x41
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	5499      	strb	r1, [r3, r2]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2242      	movs	r2, #66	; 0x42
 8002fce:	2101      	movs	r1, #1
 8002fd0:	5499      	strb	r1, [r3, r2]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2243      	movs	r2, #67	; 0x43
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2244      	movs	r2, #68	; 0x44
 8002fde:	2101      	movs	r1, #1
 8002fe0:	5499      	strb	r1, [r3, r2]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2245      	movs	r2, #69	; 0x45
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	5499      	strb	r1, [r3, r2]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2246      	movs	r2, #70	; 0x46
 8002fee:	2101      	movs	r1, #1
 8002ff0:	5499      	strb	r1, [r3, r2]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2247      	movs	r2, #71	; 0x47
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	223d      	movs	r2, #61	; 0x3d
 8002ffe:	2101      	movs	r1, #1
 8003000:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	0018      	movs	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	b002      	add	sp, #8
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	46bd      	mov	sp, r7
 8003018:	b002      	add	sp, #8
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e090      	b.n	8003152 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	223d      	movs	r2, #61	; 0x3d
 8003034:	5c9b      	ldrb	r3, [r3, r2]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d107      	bne.n	800304c <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	223c      	movs	r2, #60	; 0x3c
 8003040:	2100      	movs	r1, #0
 8003042:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	0018      	movs	r0, r3
 8003048:	f7fd fe84 	bl	8000d54 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	223d      	movs	r2, #61	; 0x3d
 8003050:	2102      	movs	r1, #2
 8003052:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	493f      	ldr	r1, [pc, #252]	; (800315c <HAL_TIM_Encoder_Init+0x140>)
 8003060:	400a      	ands	r2, r1
 8003062:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3304      	adds	r3, #4
 800306c:	0019      	movs	r1, r3
 800306e:	0010      	movs	r0, r2
 8003070:	f000 fa52 	bl	8003518 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	4313      	orrs	r3, r2
 8003094:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4a31      	ldr	r2, [pc, #196]	; (8003160 <HAL_TIM_Encoder_Init+0x144>)
 800309a:	4013      	ands	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	021b      	lsls	r3, r3, #8
 80030a8:	4313      	orrs	r3, r2
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4a2c      	ldr	r2, [pc, #176]	; (8003164 <HAL_TIM_Encoder_Init+0x148>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4a2b      	ldr	r2, [pc, #172]	; (8003168 <HAL_TIM_Encoder_Init+0x14c>)
 80030bc:	4013      	ands	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	021b      	lsls	r3, r3, #8
 80030ca:	4313      	orrs	r3, r2
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	011a      	lsls	r2, r3, #4
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	031b      	lsls	r3, r3, #12
 80030de:	4313      	orrs	r3, r2
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2222      	movs	r2, #34	; 0x22
 80030ea:	4393      	bics	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2288      	movs	r2, #136	; 0x88
 80030f2:	4393      	bics	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	4313      	orrs	r3, r2
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	4313      	orrs	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2248      	movs	r2, #72	; 0x48
 8003124:	2101      	movs	r1, #1
 8003126:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	223e      	movs	r2, #62	; 0x3e
 800312c:	2101      	movs	r1, #1
 800312e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	223f      	movs	r2, #63	; 0x3f
 8003134:	2101      	movs	r1, #1
 8003136:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2244      	movs	r2, #68	; 0x44
 800313c:	2101      	movs	r1, #1
 800313e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2245      	movs	r2, #69	; 0x45
 8003144:	2101      	movs	r1, #1
 8003146:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	223d      	movs	r2, #61	; 0x3d
 800314c:	2101      	movs	r1, #1
 800314e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	0018      	movs	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	b006      	add	sp, #24
 8003158:	bd80      	pop	{r7, pc}
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	fffebff8 	.word	0xfffebff8
 8003160:	fffffcfc 	.word	0xfffffcfc
 8003164:	fffff3f3 	.word	0xfffff3f3
 8003168:	ffff0f0f 	.word	0xffff0f0f

0800316c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003178:	2317      	movs	r3, #23
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	223c      	movs	r2, #60	; 0x3c
 8003184:	5c9b      	ldrb	r3, [r3, r2]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_TIM_PWM_ConfigChannel+0x22>
 800318a:	2302      	movs	r3, #2
 800318c:	e0e5      	b.n	800335a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	223c      	movs	r2, #60	; 0x3c
 8003192:	2101      	movs	r1, #1
 8003194:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b14      	cmp	r3, #20
 800319a:	d900      	bls.n	800319e <HAL_TIM_PWM_ConfigChannel+0x32>
 800319c:	e0d1      	b.n	8003342 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	009a      	lsls	r2, r3, #2
 80031a2:	4b70      	ldr	r3, [pc, #448]	; (8003364 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80031a4:	18d3      	adds	r3, r2, r3
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	0011      	movs	r1, r2
 80031b2:	0018      	movs	r0, r3
 80031b4:	f000 fa26 	bl	8003604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2108      	movs	r1, #8
 80031c4:	430a      	orrs	r2, r1
 80031c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699a      	ldr	r2, [r3, #24]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2104      	movs	r1, #4
 80031d4:	438a      	bics	r2, r1
 80031d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6999      	ldr	r1, [r3, #24]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	619a      	str	r2, [r3, #24]
      break;
 80031ea:	e0af      	b.n	800334c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	0011      	movs	r1, r2
 80031f4:	0018      	movs	r0, r3
 80031f6:	f000 fa8f 	bl	8003718 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699a      	ldr	r2, [r3, #24]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2180      	movs	r1, #128	; 0x80
 8003206:	0109      	lsls	r1, r1, #4
 8003208:	430a      	orrs	r2, r1
 800320a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4954      	ldr	r1, [pc, #336]	; (8003368 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003218:	400a      	ands	r2, r1
 800321a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6999      	ldr	r1, [r3, #24]
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	021a      	lsls	r2, r3, #8
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	619a      	str	r2, [r3, #24]
      break;
 8003230:	e08c      	b.n	800334c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	0011      	movs	r1, r2
 800323a:	0018      	movs	r0, r3
 800323c:	f000 faf0 	bl	8003820 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	69da      	ldr	r2, [r3, #28]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2108      	movs	r1, #8
 800324c:	430a      	orrs	r2, r1
 800324e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	69da      	ldr	r2, [r3, #28]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2104      	movs	r1, #4
 800325c:	438a      	bics	r2, r1
 800325e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	69d9      	ldr	r1, [r3, #28]
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	691a      	ldr	r2, [r3, #16]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	61da      	str	r2, [r3, #28]
      break;
 8003272:	e06b      	b.n	800334c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	0011      	movs	r1, r2
 800327c:	0018      	movs	r0, r3
 800327e:	f000 fb57 	bl	8003930 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2180      	movs	r1, #128	; 0x80
 800328e:	0109      	lsls	r1, r1, #4
 8003290:	430a      	orrs	r2, r1
 8003292:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	69da      	ldr	r2, [r3, #28]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4932      	ldr	r1, [pc, #200]	; (8003368 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80032a0:	400a      	ands	r2, r1
 80032a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	69d9      	ldr	r1, [r3, #28]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	021a      	lsls	r2, r3, #8
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	61da      	str	r2, [r3, #28]
      break;
 80032b8:	e048      	b.n	800334c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	0011      	movs	r1, r2
 80032c2:	0018      	movs	r0, r3
 80032c4:	f000 fb9e 	bl	8003a04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2108      	movs	r1, #8
 80032d4:	430a      	orrs	r2, r1
 80032d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2104      	movs	r1, #4
 80032e4:	438a      	bics	r2, r1
 80032e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	691a      	ldr	r2, [r3, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80032fa:	e027      	b.n	800334c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	0011      	movs	r1, r2
 8003304:	0018      	movs	r0, r3
 8003306:	f000 fbdd 	bl	8003ac4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2180      	movs	r1, #128	; 0x80
 8003316:	0109      	lsls	r1, r1, #4
 8003318:	430a      	orrs	r2, r1
 800331a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4910      	ldr	r1, [pc, #64]	; (8003368 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003328:	400a      	ands	r2, r1
 800332a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	021a      	lsls	r2, r3, #8
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003340:	e004      	b.n	800334c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003342:	2317      	movs	r3, #23
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]
      break;
 800334a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	223c      	movs	r2, #60	; 0x3c
 8003350:	2100      	movs	r1, #0
 8003352:	5499      	strb	r1, [r3, r2]

  return status;
 8003354:	2317      	movs	r3, #23
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	781b      	ldrb	r3, [r3, #0]
}
 800335a:	0018      	movs	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	b006      	add	sp, #24
 8003360:	bd80      	pop	{r7, pc}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	0800496c 	.word	0x0800496c
 8003368:	fffffbff 	.word	0xfffffbff

0800336c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003376:	230f      	movs	r3, #15
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	2200      	movs	r2, #0
 800337c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	223c      	movs	r2, #60	; 0x3c
 8003382:	5c9b      	ldrb	r3, [r3, r2]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_TIM_ConfigClockSource+0x20>
 8003388:	2302      	movs	r3, #2
 800338a:	e0bc      	b.n	8003506 <HAL_TIM_ConfigClockSource+0x19a>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	223c      	movs	r2, #60	; 0x3c
 8003390:	2101      	movs	r1, #1
 8003392:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	223d      	movs	r2, #61	; 0x3d
 8003398:	2102      	movs	r1, #2
 800339a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4a5a      	ldr	r2, [pc, #360]	; (8003510 <HAL_TIM_ConfigClockSource+0x1a4>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4a59      	ldr	r2, [pc, #356]	; (8003514 <HAL_TIM_ConfigClockSource+0x1a8>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2280      	movs	r2, #128	; 0x80
 80033c2:	0192      	lsls	r2, r2, #6
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d040      	beq.n	800344a <HAL_TIM_ConfigClockSource+0xde>
 80033c8:	2280      	movs	r2, #128	; 0x80
 80033ca:	0192      	lsls	r2, r2, #6
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d900      	bls.n	80033d2 <HAL_TIM_ConfigClockSource+0x66>
 80033d0:	e088      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x178>
 80033d2:	2280      	movs	r2, #128	; 0x80
 80033d4:	0152      	lsls	r2, r2, #5
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d100      	bne.n	80033dc <HAL_TIM_ConfigClockSource+0x70>
 80033da:	e088      	b.n	80034ee <HAL_TIM_ConfigClockSource+0x182>
 80033dc:	2280      	movs	r2, #128	; 0x80
 80033de:	0152      	lsls	r2, r2, #5
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d900      	bls.n	80033e6 <HAL_TIM_ConfigClockSource+0x7a>
 80033e4:	e07e      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x178>
 80033e6:	2b70      	cmp	r3, #112	; 0x70
 80033e8:	d018      	beq.n	800341c <HAL_TIM_ConfigClockSource+0xb0>
 80033ea:	d900      	bls.n	80033ee <HAL_TIM_ConfigClockSource+0x82>
 80033ec:	e07a      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x178>
 80033ee:	2b60      	cmp	r3, #96	; 0x60
 80033f0:	d04f      	beq.n	8003492 <HAL_TIM_ConfigClockSource+0x126>
 80033f2:	d900      	bls.n	80033f6 <HAL_TIM_ConfigClockSource+0x8a>
 80033f4:	e076      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x178>
 80033f6:	2b50      	cmp	r3, #80	; 0x50
 80033f8:	d03b      	beq.n	8003472 <HAL_TIM_ConfigClockSource+0x106>
 80033fa:	d900      	bls.n	80033fe <HAL_TIM_ConfigClockSource+0x92>
 80033fc:	e072      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x178>
 80033fe:	2b40      	cmp	r3, #64	; 0x40
 8003400:	d057      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x146>
 8003402:	d900      	bls.n	8003406 <HAL_TIM_ConfigClockSource+0x9a>
 8003404:	e06e      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x178>
 8003406:	2b30      	cmp	r3, #48	; 0x30
 8003408:	d063      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x166>
 800340a:	d86b      	bhi.n	80034e4 <HAL_TIM_ConfigClockSource+0x178>
 800340c:	2b20      	cmp	r3, #32
 800340e:	d060      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x166>
 8003410:	d868      	bhi.n	80034e4 <HAL_TIM_ConfigClockSource+0x178>
 8003412:	2b00      	cmp	r3, #0
 8003414:	d05d      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x166>
 8003416:	2b10      	cmp	r3, #16
 8003418:	d05b      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x166>
 800341a:	e063      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800342c:	f000 fc2a 	bl	8003c84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2277      	movs	r2, #119	; 0x77
 800343c:	4313      	orrs	r3, r2
 800343e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	609a      	str	r2, [r3, #8]
      break;
 8003448:	e052      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800345a:	f000 fc13 	bl	8003c84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2180      	movs	r1, #128	; 0x80
 800346a:	01c9      	lsls	r1, r1, #7
 800346c:	430a      	orrs	r2, r1
 800346e:	609a      	str	r2, [r3, #8]
      break;
 8003470:	e03e      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800347e:	001a      	movs	r2, r3
 8003480:	f000 fb84 	bl	8003b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2150      	movs	r1, #80	; 0x50
 800348a:	0018      	movs	r0, r3
 800348c:	f000 fbde 	bl	8003c4c <TIM_ITRx_SetConfig>
      break;
 8003490:	e02e      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800349e:	001a      	movs	r2, r3
 80034a0:	f000 fba2 	bl	8003be8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2160      	movs	r1, #96	; 0x60
 80034aa:	0018      	movs	r0, r3
 80034ac:	f000 fbce 	bl	8003c4c <TIM_ITRx_SetConfig>
      break;
 80034b0:	e01e      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034be:	001a      	movs	r2, r3
 80034c0:	f000 fb64 	bl	8003b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2140      	movs	r1, #64	; 0x40
 80034ca:	0018      	movs	r0, r3
 80034cc:	f000 fbbe 	bl	8003c4c <TIM_ITRx_SetConfig>
      break;
 80034d0:	e00e      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	0019      	movs	r1, r3
 80034dc:	0010      	movs	r0, r2
 80034de:	f000 fbb5 	bl	8003c4c <TIM_ITRx_SetConfig>
      break;
 80034e2:	e005      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80034e4:	230f      	movs	r3, #15
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	2201      	movs	r2, #1
 80034ea:	701a      	strb	r2, [r3, #0]
      break;
 80034ec:	e000      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80034ee:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	223d      	movs	r2, #61	; 0x3d
 80034f4:	2101      	movs	r1, #1
 80034f6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	223c      	movs	r2, #60	; 0x3c
 80034fc:	2100      	movs	r1, #0
 80034fe:	5499      	strb	r1, [r3, r2]

  return status;
 8003500:	230f      	movs	r3, #15
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	781b      	ldrb	r3, [r3, #0]
}
 8003506:	0018      	movs	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	b004      	add	sp, #16
 800350c:	bd80      	pop	{r7, pc}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	ffceff88 	.word	0xffceff88
 8003514:	ffff00ff 	.word	0xffff00ff

08003518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a2f      	ldr	r2, [pc, #188]	; (80035e8 <TIM_Base_SetConfig+0xd0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d003      	beq.n	8003538 <TIM_Base_SetConfig+0x20>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a2e      	ldr	r2, [pc, #184]	; (80035ec <TIM_Base_SetConfig+0xd4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d108      	bne.n	800354a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2270      	movs	r2, #112	; 0x70
 800353c:	4393      	bics	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a26      	ldr	r2, [pc, #152]	; (80035e8 <TIM_Base_SetConfig+0xd0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d013      	beq.n	800357a <TIM_Base_SetConfig+0x62>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a25      	ldr	r2, [pc, #148]	; (80035ec <TIM_Base_SetConfig+0xd4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d00f      	beq.n	800357a <TIM_Base_SetConfig+0x62>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a24      	ldr	r2, [pc, #144]	; (80035f0 <TIM_Base_SetConfig+0xd8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00b      	beq.n	800357a <TIM_Base_SetConfig+0x62>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a23      	ldr	r2, [pc, #140]	; (80035f4 <TIM_Base_SetConfig+0xdc>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d007      	beq.n	800357a <TIM_Base_SetConfig+0x62>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a22      	ldr	r2, [pc, #136]	; (80035f8 <TIM_Base_SetConfig+0xe0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d003      	beq.n	800357a <TIM_Base_SetConfig+0x62>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a21      	ldr	r2, [pc, #132]	; (80035fc <TIM_Base_SetConfig+0xe4>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d108      	bne.n	800358c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4a20      	ldr	r2, [pc, #128]	; (8003600 <TIM_Base_SetConfig+0xe8>)
 800357e:	4013      	ands	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4313      	orrs	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2280      	movs	r2, #128	; 0x80
 8003590:	4393      	bics	r3, r2
 8003592:	001a      	movs	r2, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a0c      	ldr	r2, [pc, #48]	; (80035e8 <TIM_Base_SetConfig+0xd0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00b      	beq.n	80035d2 <TIM_Base_SetConfig+0xba>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a0d      	ldr	r2, [pc, #52]	; (80035f4 <TIM_Base_SetConfig+0xdc>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d007      	beq.n	80035d2 <TIM_Base_SetConfig+0xba>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a0c      	ldr	r2, [pc, #48]	; (80035f8 <TIM_Base_SetConfig+0xe0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d003      	beq.n	80035d2 <TIM_Base_SetConfig+0xba>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a0b      	ldr	r2, [pc, #44]	; (80035fc <TIM_Base_SetConfig+0xe4>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d103      	bne.n	80035da <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	691a      	ldr	r2, [r3, #16]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	615a      	str	r2, [r3, #20]
}
 80035e0:	46c0      	nop			; (mov r8, r8)
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b004      	add	sp, #16
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40012c00 	.word	0x40012c00
 80035ec:	40000400 	.word	0x40000400
 80035f0:	40002000 	.word	0x40002000
 80035f4:	40014000 	.word	0x40014000
 80035f8:	40014400 	.word	0x40014400
 80035fc:	40014800 	.word	0x40014800
 8003600:	fffffcff 	.word	0xfffffcff

08003604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	2201      	movs	r2, #1
 8003614:	4393      	bics	r3, r2
 8003616:	001a      	movs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4a32      	ldr	r2, [pc, #200]	; (80036fc <TIM_OC1_SetConfig+0xf8>)
 8003632:	4013      	ands	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2203      	movs	r2, #3
 800363a:	4393      	bics	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4313      	orrs	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	2202      	movs	r2, #2
 800364c:	4393      	bics	r3, r2
 800364e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a28      	ldr	r2, [pc, #160]	; (8003700 <TIM_OC1_SetConfig+0xfc>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00b      	beq.n	800367a <TIM_OC1_SetConfig+0x76>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a27      	ldr	r2, [pc, #156]	; (8003704 <TIM_OC1_SetConfig+0x100>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d007      	beq.n	800367a <TIM_OC1_SetConfig+0x76>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a26      	ldr	r2, [pc, #152]	; (8003708 <TIM_OC1_SetConfig+0x104>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d003      	beq.n	800367a <TIM_OC1_SetConfig+0x76>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a25      	ldr	r2, [pc, #148]	; (800370c <TIM_OC1_SetConfig+0x108>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d10c      	bne.n	8003694 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2208      	movs	r2, #8
 800367e:	4393      	bics	r3, r2
 8003680:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	2204      	movs	r2, #4
 8003690:	4393      	bics	r3, r2
 8003692:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a1a      	ldr	r2, [pc, #104]	; (8003700 <TIM_OC1_SetConfig+0xfc>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00b      	beq.n	80036b4 <TIM_OC1_SetConfig+0xb0>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a19      	ldr	r2, [pc, #100]	; (8003704 <TIM_OC1_SetConfig+0x100>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d007      	beq.n	80036b4 <TIM_OC1_SetConfig+0xb0>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a18      	ldr	r2, [pc, #96]	; (8003708 <TIM_OC1_SetConfig+0x104>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d003      	beq.n	80036b4 <TIM_OC1_SetConfig+0xb0>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a17      	ldr	r2, [pc, #92]	; (800370c <TIM_OC1_SetConfig+0x108>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d111      	bne.n	80036d8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4a16      	ldr	r2, [pc, #88]	; (8003710 <TIM_OC1_SetConfig+0x10c>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4a15      	ldr	r2, [pc, #84]	; (8003714 <TIM_OC1_SetConfig+0x110>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	621a      	str	r2, [r3, #32]
}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	46bd      	mov	sp, r7
 80036f6:	b006      	add	sp, #24
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	fffeff8f 	.word	0xfffeff8f
 8003700:	40012c00 	.word	0x40012c00
 8003704:	40014000 	.word	0x40014000
 8003708:	40014400 	.word	0x40014400
 800370c:	40014800 	.word	0x40014800
 8003710:	fffffeff 	.word	0xfffffeff
 8003714:	fffffdff 	.word	0xfffffdff

08003718 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	2210      	movs	r2, #16
 8003728:	4393      	bics	r3, r2
 800372a:	001a      	movs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4a2e      	ldr	r2, [pc, #184]	; (8003800 <TIM_OC2_SetConfig+0xe8>)
 8003746:	4013      	ands	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4a2d      	ldr	r2, [pc, #180]	; (8003804 <TIM_OC2_SetConfig+0xec>)
 800374e:	4013      	ands	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	021b      	lsls	r3, r3, #8
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2220      	movs	r2, #32
 8003762:	4393      	bics	r3, r2
 8003764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a24      	ldr	r2, [pc, #144]	; (8003808 <TIM_OC2_SetConfig+0xf0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d10d      	bne.n	8003796 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2280      	movs	r2, #128	; 0x80
 800377e:	4393      	bics	r3, r2
 8003780:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	4313      	orrs	r3, r2
 800378c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2240      	movs	r2, #64	; 0x40
 8003792:	4393      	bics	r3, r2
 8003794:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a1b      	ldr	r2, [pc, #108]	; (8003808 <TIM_OC2_SetConfig+0xf0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00b      	beq.n	80037b6 <TIM_OC2_SetConfig+0x9e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a1a      	ldr	r2, [pc, #104]	; (800380c <TIM_OC2_SetConfig+0xf4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d007      	beq.n	80037b6 <TIM_OC2_SetConfig+0x9e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a19      	ldr	r2, [pc, #100]	; (8003810 <TIM_OC2_SetConfig+0xf8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d003      	beq.n	80037b6 <TIM_OC2_SetConfig+0x9e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a18      	ldr	r2, [pc, #96]	; (8003814 <TIM_OC2_SetConfig+0xfc>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d113      	bne.n	80037de <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4a17      	ldr	r2, [pc, #92]	; (8003818 <TIM_OC2_SetConfig+0x100>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4a16      	ldr	r2, [pc, #88]	; (800381c <TIM_OC2_SetConfig+0x104>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	621a      	str	r2, [r3, #32]
}
 80037f8:	46c0      	nop			; (mov r8, r8)
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b006      	add	sp, #24
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	feff8fff 	.word	0xfeff8fff
 8003804:	fffffcff 	.word	0xfffffcff
 8003808:	40012c00 	.word	0x40012c00
 800380c:	40014000 	.word	0x40014000
 8003810:	40014400 	.word	0x40014400
 8003814:	40014800 	.word	0x40014800
 8003818:	fffffbff 	.word	0xfffffbff
 800381c:	fffff7ff 	.word	0xfffff7ff

08003820 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	4a35      	ldr	r2, [pc, #212]	; (8003904 <TIM_OC3_SetConfig+0xe4>)
 8003830:	401a      	ands	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4a2f      	ldr	r2, [pc, #188]	; (8003908 <TIM_OC3_SetConfig+0xe8>)
 800384c:	4013      	ands	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2203      	movs	r2, #3
 8003854:	4393      	bics	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	4a29      	ldr	r2, [pc, #164]	; (800390c <TIM_OC3_SetConfig+0xec>)
 8003866:	4013      	ands	r3, r2
 8003868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	021b      	lsls	r3, r3, #8
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	4313      	orrs	r3, r2
 8003874:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a25      	ldr	r2, [pc, #148]	; (8003910 <TIM_OC3_SetConfig+0xf0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d10d      	bne.n	800389a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	4a24      	ldr	r2, [pc, #144]	; (8003914 <TIM_OC3_SetConfig+0xf4>)
 8003882:	4013      	ands	r3, r2
 8003884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	4a20      	ldr	r2, [pc, #128]	; (8003918 <TIM_OC3_SetConfig+0xf8>)
 8003896:	4013      	ands	r3, r2
 8003898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a1c      	ldr	r2, [pc, #112]	; (8003910 <TIM_OC3_SetConfig+0xf0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d00b      	beq.n	80038ba <TIM_OC3_SetConfig+0x9a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a1d      	ldr	r2, [pc, #116]	; (800391c <TIM_OC3_SetConfig+0xfc>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d007      	beq.n	80038ba <TIM_OC3_SetConfig+0x9a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a1c      	ldr	r2, [pc, #112]	; (8003920 <TIM_OC3_SetConfig+0x100>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d003      	beq.n	80038ba <TIM_OC3_SetConfig+0x9a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a1b      	ldr	r2, [pc, #108]	; (8003924 <TIM_OC3_SetConfig+0x104>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d113      	bne.n	80038e2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4a1a      	ldr	r2, [pc, #104]	; (8003928 <TIM_OC3_SetConfig+0x108>)
 80038be:	4013      	ands	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	4a19      	ldr	r2, [pc, #100]	; (800392c <TIM_OC3_SetConfig+0x10c>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	621a      	str	r2, [r3, #32]
}
 80038fc:	46c0      	nop			; (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	b006      	add	sp, #24
 8003902:	bd80      	pop	{r7, pc}
 8003904:	fffffeff 	.word	0xfffffeff
 8003908:	fffeff8f 	.word	0xfffeff8f
 800390c:	fffffdff 	.word	0xfffffdff
 8003910:	40012c00 	.word	0x40012c00
 8003914:	fffff7ff 	.word	0xfffff7ff
 8003918:	fffffbff 	.word	0xfffffbff
 800391c:	40014000 	.word	0x40014000
 8003920:	40014400 	.word	0x40014400
 8003924:	40014800 	.word	0x40014800
 8003928:	ffffefff 	.word	0xffffefff
 800392c:	ffffdfff 	.word	0xffffdfff

08003930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	4a28      	ldr	r2, [pc, #160]	; (80039e0 <TIM_OC4_SetConfig+0xb0>)
 8003940:	401a      	ands	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4a22      	ldr	r2, [pc, #136]	; (80039e4 <TIM_OC4_SetConfig+0xb4>)
 800395c:	4013      	ands	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4a21      	ldr	r2, [pc, #132]	; (80039e8 <TIM_OC4_SetConfig+0xb8>)
 8003964:	4013      	ands	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	021b      	lsls	r3, r3, #8
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4a1d      	ldr	r2, [pc, #116]	; (80039ec <TIM_OC4_SetConfig+0xbc>)
 8003978:	4013      	ands	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	031b      	lsls	r3, r3, #12
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a19      	ldr	r2, [pc, #100]	; (80039f0 <TIM_OC4_SetConfig+0xc0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00b      	beq.n	80039a8 <TIM_OC4_SetConfig+0x78>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a18      	ldr	r2, [pc, #96]	; (80039f4 <TIM_OC4_SetConfig+0xc4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d007      	beq.n	80039a8 <TIM_OC4_SetConfig+0x78>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a17      	ldr	r2, [pc, #92]	; (80039f8 <TIM_OC4_SetConfig+0xc8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d003      	beq.n	80039a8 <TIM_OC4_SetConfig+0x78>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a16      	ldr	r2, [pc, #88]	; (80039fc <TIM_OC4_SetConfig+0xcc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d109      	bne.n	80039bc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	4a15      	ldr	r2, [pc, #84]	; (8003a00 <TIM_OC4_SetConfig+0xd0>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	019b      	lsls	r3, r3, #6
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	621a      	str	r2, [r3, #32]
}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	46bd      	mov	sp, r7
 80039da:	b006      	add	sp, #24
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	ffffefff 	.word	0xffffefff
 80039e4:	feff8fff 	.word	0xfeff8fff
 80039e8:	fffffcff 	.word	0xfffffcff
 80039ec:	ffffdfff 	.word	0xffffdfff
 80039f0:	40012c00 	.word	0x40012c00
 80039f4:	40014000 	.word	0x40014000
 80039f8:	40014400 	.word	0x40014400
 80039fc:	40014800 	.word	0x40014800
 8003a00:	ffffbfff 	.word	0xffffbfff

08003a04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	4a25      	ldr	r2, [pc, #148]	; (8003aa8 <TIM_OC5_SetConfig+0xa4>)
 8003a14:	401a      	ands	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4a1f      	ldr	r2, [pc, #124]	; (8003aac <TIM_OC5_SetConfig+0xa8>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	4a1b      	ldr	r2, [pc, #108]	; (8003ab0 <TIM_OC5_SetConfig+0xac>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	041b      	lsls	r3, r3, #16
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a17      	ldr	r2, [pc, #92]	; (8003ab4 <TIM_OC5_SetConfig+0xb0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00b      	beq.n	8003a72 <TIM_OC5_SetConfig+0x6e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a16      	ldr	r2, [pc, #88]	; (8003ab8 <TIM_OC5_SetConfig+0xb4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d007      	beq.n	8003a72 <TIM_OC5_SetConfig+0x6e>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a15      	ldr	r2, [pc, #84]	; (8003abc <TIM_OC5_SetConfig+0xb8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d003      	beq.n	8003a72 <TIM_OC5_SetConfig+0x6e>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a14      	ldr	r2, [pc, #80]	; (8003ac0 <TIM_OC5_SetConfig+0xbc>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d109      	bne.n	8003a86 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	4a0c      	ldr	r2, [pc, #48]	; (8003aa8 <TIM_OC5_SetConfig+0xa4>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	021b      	lsls	r3, r3, #8
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	621a      	str	r2, [r3, #32]
}
 8003aa0:	46c0      	nop			; (mov r8, r8)
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	b006      	add	sp, #24
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	fffeffff 	.word	0xfffeffff
 8003aac:	fffeff8f 	.word	0xfffeff8f
 8003ab0:	fffdffff 	.word	0xfffdffff
 8003ab4:	40012c00 	.word	0x40012c00
 8003ab8:	40014000 	.word	0x40014000
 8003abc:	40014400 	.word	0x40014400
 8003ac0:	40014800 	.word	0x40014800

08003ac4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	4a26      	ldr	r2, [pc, #152]	; (8003b6c <TIM_OC6_SetConfig+0xa8>)
 8003ad4:	401a      	ands	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4a20      	ldr	r2, [pc, #128]	; (8003b70 <TIM_OC6_SetConfig+0xac>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	4a1c      	ldr	r2, [pc, #112]	; (8003b74 <TIM_OC6_SetConfig+0xb0>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	051b      	lsls	r3, r3, #20
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a18      	ldr	r2, [pc, #96]	; (8003b78 <TIM_OC6_SetConfig+0xb4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d00b      	beq.n	8003b34 <TIM_OC6_SetConfig+0x70>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a17      	ldr	r2, [pc, #92]	; (8003b7c <TIM_OC6_SetConfig+0xb8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d007      	beq.n	8003b34 <TIM_OC6_SetConfig+0x70>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a16      	ldr	r2, [pc, #88]	; (8003b80 <TIM_OC6_SetConfig+0xbc>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d003      	beq.n	8003b34 <TIM_OC6_SetConfig+0x70>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a15      	ldr	r2, [pc, #84]	; (8003b84 <TIM_OC6_SetConfig+0xc0>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d109      	bne.n	8003b48 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	4a14      	ldr	r2, [pc, #80]	; (8003b88 <TIM_OC6_SetConfig+0xc4>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	029b      	lsls	r3, r3, #10
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	621a      	str	r2, [r3, #32]
}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b006      	add	sp, #24
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	ffefffff 	.word	0xffefffff
 8003b70:	feff8fff 	.word	0xfeff8fff
 8003b74:	ffdfffff 	.word	0xffdfffff
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40014000 	.word	0x40014000
 8003b80:	40014400 	.word	0x40014400
 8003b84:	40014800 	.word	0x40014800
 8003b88:	fffbffff 	.word	0xfffbffff

08003b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	4393      	bics	r3, r2
 8003ba6:	001a      	movs	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	22f0      	movs	r2, #240	; 0xf0
 8003bb6:	4393      	bics	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	220a      	movs	r2, #10
 8003bc8:	4393      	bics	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	621a      	str	r2, [r3, #32]
}
 8003be0:	46c0      	nop			; (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b006      	add	sp, #24
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	2210      	movs	r2, #16
 8003bfa:	4393      	bics	r3, r2
 8003bfc:	001a      	movs	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	4a0d      	ldr	r2, [pc, #52]	; (8003c48 <TIM_TI2_ConfigInputStage+0x60>)
 8003c12:	4013      	ands	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	031b      	lsls	r3, r3, #12
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	22a0      	movs	r2, #160	; 0xa0
 8003c24:	4393      	bics	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	621a      	str	r2, [r3, #32]
}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	46bd      	mov	sp, r7
 8003c42:	b006      	add	sp, #24
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	46c0      	nop			; (mov r8, r8)
 8003c48:	ffff0fff 	.word	0xffff0fff

08003c4c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4a08      	ldr	r2, [pc, #32]	; (8003c80 <TIM_ITRx_SetConfig+0x34>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	2207      	movs	r2, #7
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	609a      	str	r2, [r3, #8]
}
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	b004      	add	sp, #16
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	ffcfff8f 	.word	0xffcfff8f

08003c84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	4a09      	ldr	r2, [pc, #36]	; (8003cc0 <TIM_ETR_SetConfig+0x3c>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	021a      	lsls	r2, r3, #8
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	609a      	str	r2, [r3, #8]
}
 8003cb8:	46c0      	nop			; (mov r8, r8)
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b006      	add	sp, #24
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	ffff00ff 	.word	0xffff00ff

08003cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	223c      	movs	r2, #60	; 0x3c
 8003cd2:	5c9b      	ldrb	r3, [r3, r2]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	e04f      	b.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	223c      	movs	r2, #60	; 0x3c
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	223d      	movs	r2, #61	; 0x3d
 8003ce8:	2102      	movs	r1, #2
 8003cea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a20      	ldr	r2, [pc, #128]	; (8003d84 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d108      	bne.n	8003d18 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4a1f      	ldr	r2, [pc, #124]	; (8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2270      	movs	r2, #112	; 0x70
 8003d1c:	4393      	bics	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a13      	ldr	r2, [pc, #76]	; (8003d84 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d009      	beq.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a12      	ldr	r2, [pc, #72]	; (8003d8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d004      	beq.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a11      	ldr	r2, [pc, #68]	; (8003d90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d10c      	bne.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2280      	movs	r2, #128	; 0x80
 8003d54:	4393      	bics	r3, r2
 8003d56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	223d      	movs	r2, #61	; 0x3d
 8003d6e:	2101      	movs	r1, #1
 8003d70:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	223c      	movs	r2, #60	; 0x3c
 8003d76:	2100      	movs	r1, #0
 8003d78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b004      	add	sp, #16
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40012c00 	.word	0x40012c00
 8003d88:	ff0fffff 	.word	0xff0fffff
 8003d8c:	40000400 	.word	0x40000400
 8003d90:	40014000 	.word	0x40014000

08003d94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	223c      	movs	r2, #60	; 0x3c
 8003da6:	5c9b      	ldrb	r3, [r3, r2]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e079      	b.n	8003ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	223c      	movs	r2, #60	; 0x3c
 8003db4:	2101      	movs	r1, #1
 8003db6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	22ff      	movs	r2, #255	; 0xff
 8003dbc:	4393      	bics	r3, r2
 8003dbe:	001a      	movs	r2, r3
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4a38      	ldr	r2, [pc, #224]	; (8003eac <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003dcc:	401a      	ands	r2, r3
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4a35      	ldr	r2, [pc, #212]	; (8003eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003dda:	401a      	ands	r2, r3
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4a33      	ldr	r2, [pc, #204]	; (8003eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003de8:	401a      	ands	r2, r3
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4a30      	ldr	r2, [pc, #192]	; (8003eb8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003df6:	401a      	ands	r2, r3
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4a2e      	ldr	r2, [pc, #184]	; (8003ebc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003e04:	401a      	ands	r2, r3
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4a2b      	ldr	r2, [pc, #172]	; (8003ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003e12:	401a      	ands	r2, r3
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4a29      	ldr	r2, [pc, #164]	; (8003ec4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003e20:	401a      	ands	r2, r3
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	041b      	lsls	r3, r3, #16
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a25      	ldr	r2, [pc, #148]	; (8003ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d106      	bne.n	8003e44 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a24      	ldr	r2, [pc, #144]	; (8003ecc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a1f      	ldr	r2, [pc, #124]	; (8003ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d121      	bne.n	8003e92 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4a1f      	ldr	r2, [pc, #124]	; (8003ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003e52:	401a      	ands	r2, r3
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	051b      	lsls	r3, r3, #20
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4a1c      	ldr	r2, [pc, #112]	; (8003ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8003e62:	401a      	ands	r2, r3
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4a1a      	ldr	r2, [pc, #104]	; (8003ed8 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8003e70:	401a      	ands	r2, r3
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a12      	ldr	r2, [pc, #72]	; (8003ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d106      	bne.n	8003e92 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4a15      	ldr	r2, [pc, #84]	; (8003edc <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8003e88:	401a      	ands	r2, r3
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	223c      	movs	r2, #60	; 0x3c
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b004      	add	sp, #16
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	fffffcff 	.word	0xfffffcff
 8003eb0:	fffffbff 	.word	0xfffffbff
 8003eb4:	fffff7ff 	.word	0xfffff7ff
 8003eb8:	ffffefff 	.word	0xffffefff
 8003ebc:	ffffdfff 	.word	0xffffdfff
 8003ec0:	ffffbfff 	.word	0xffffbfff
 8003ec4:	fff0ffff 	.word	0xfff0ffff
 8003ec8:	40012c00 	.word	0x40012c00
 8003ecc:	efffffff 	.word	0xefffffff
 8003ed0:	ff0fffff 	.word	0xff0fffff
 8003ed4:	feffffff 	.word	0xfeffffff
 8003ed8:	fdffffff 	.word	0xfdffffff
 8003edc:	dfffffff 	.word	0xdfffffff

08003ee0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e046      	b.n	8003f80 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2288      	movs	r2, #136	; 0x88
 8003ef6:	589b      	ldr	r3, [r3, r2]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d107      	bne.n	8003f0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2284      	movs	r2, #132	; 0x84
 8003f00:	2100      	movs	r1, #0
 8003f02:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	0018      	movs	r0, r3
 8003f08:	f7fd f988 	bl	800121c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2288      	movs	r2, #136	; 0x88
 8003f10:	2124      	movs	r1, #36	; 0x24
 8003f12:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2101      	movs	r1, #1
 8003f20:	438a      	bics	r2, r1
 8003f22:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	0018      	movs	r0, r3
 8003f28:	f000 f830 	bl	8003f8c <UART_SetConfig>
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e024      	b.n	8003f80 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	0018      	movs	r0, r3
 8003f42:	f000 f9c7 	bl	80042d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	490d      	ldr	r1, [pc, #52]	; (8003f88 <HAL_UART_Init+0xa8>)
 8003f52:	400a      	ands	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	212a      	movs	r1, #42	; 0x2a
 8003f62:	438a      	bics	r2, r1
 8003f64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2101      	movs	r1, #1
 8003f72:	430a      	orrs	r2, r1
 8003f74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f000 fa5f 	bl	800443c <UART_CheckIdleState>
 8003f7e:	0003      	movs	r3, r0
}
 8003f80:	0018      	movs	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	b002      	add	sp, #8
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	ffffb7ff 	.word	0xffffb7ff

08003f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f94:	231a      	movs	r3, #26
 8003f96:	18fb      	adds	r3, r7, r3
 8003f98:	2200      	movs	r2, #0
 8003f9a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4abc      	ldr	r2, [pc, #752]	; (80042ac <UART_SetConfig+0x320>)
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	0019      	movs	r1, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	4ab7      	ldr	r2, [pc, #732]	; (80042b0 <UART_SetConfig+0x324>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	0019      	movs	r1, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	69fa      	ldr	r2, [r7, #28]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	4aae      	ldr	r2, [pc, #696]	; (80042b4 <UART_SetConfig+0x328>)
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	0019      	movs	r1, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	69fa      	ldr	r2, [r7, #28]
 8004004:	430a      	orrs	r2, r1
 8004006:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400e:	220f      	movs	r2, #15
 8004010:	4393      	bics	r3, r2
 8004012:	0019      	movs	r1, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4aa4      	ldr	r2, [pc, #656]	; (80042b8 <UART_SetConfig+0x32c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d127      	bne.n	800407a <UART_SetConfig+0xee>
 800402a:	4ba4      	ldr	r3, [pc, #656]	; (80042bc <UART_SetConfig+0x330>)
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	2203      	movs	r2, #3
 8004030:	4013      	ands	r3, r2
 8004032:	2b03      	cmp	r3, #3
 8004034:	d017      	beq.n	8004066 <UART_SetConfig+0xda>
 8004036:	d81b      	bhi.n	8004070 <UART_SetConfig+0xe4>
 8004038:	2b02      	cmp	r3, #2
 800403a:	d00a      	beq.n	8004052 <UART_SetConfig+0xc6>
 800403c:	d818      	bhi.n	8004070 <UART_SetConfig+0xe4>
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <UART_SetConfig+0xbc>
 8004042:	2b01      	cmp	r3, #1
 8004044:	d00a      	beq.n	800405c <UART_SetConfig+0xd0>
 8004046:	e013      	b.n	8004070 <UART_SetConfig+0xe4>
 8004048:	231b      	movs	r3, #27
 800404a:	18fb      	adds	r3, r7, r3
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]
 8004050:	e058      	b.n	8004104 <UART_SetConfig+0x178>
 8004052:	231b      	movs	r3, #27
 8004054:	18fb      	adds	r3, r7, r3
 8004056:	2202      	movs	r2, #2
 8004058:	701a      	strb	r2, [r3, #0]
 800405a:	e053      	b.n	8004104 <UART_SetConfig+0x178>
 800405c:	231b      	movs	r3, #27
 800405e:	18fb      	adds	r3, r7, r3
 8004060:	2204      	movs	r2, #4
 8004062:	701a      	strb	r2, [r3, #0]
 8004064:	e04e      	b.n	8004104 <UART_SetConfig+0x178>
 8004066:	231b      	movs	r3, #27
 8004068:	18fb      	adds	r3, r7, r3
 800406a:	2208      	movs	r2, #8
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	e049      	b.n	8004104 <UART_SetConfig+0x178>
 8004070:	231b      	movs	r3, #27
 8004072:	18fb      	adds	r3, r7, r3
 8004074:	2210      	movs	r2, #16
 8004076:	701a      	strb	r2, [r3, #0]
 8004078:	e044      	b.n	8004104 <UART_SetConfig+0x178>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a90      	ldr	r2, [pc, #576]	; (80042c0 <UART_SetConfig+0x334>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d127      	bne.n	80040d4 <UART_SetConfig+0x148>
 8004084:	4b8d      	ldr	r3, [pc, #564]	; (80042bc <UART_SetConfig+0x330>)
 8004086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004088:	220c      	movs	r2, #12
 800408a:	4013      	ands	r3, r2
 800408c:	2b0c      	cmp	r3, #12
 800408e:	d017      	beq.n	80040c0 <UART_SetConfig+0x134>
 8004090:	d81b      	bhi.n	80040ca <UART_SetConfig+0x13e>
 8004092:	2b08      	cmp	r3, #8
 8004094:	d00a      	beq.n	80040ac <UART_SetConfig+0x120>
 8004096:	d818      	bhi.n	80040ca <UART_SetConfig+0x13e>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <UART_SetConfig+0x116>
 800409c:	2b04      	cmp	r3, #4
 800409e:	d00a      	beq.n	80040b6 <UART_SetConfig+0x12a>
 80040a0:	e013      	b.n	80040ca <UART_SetConfig+0x13e>
 80040a2:	231b      	movs	r3, #27
 80040a4:	18fb      	adds	r3, r7, r3
 80040a6:	2200      	movs	r2, #0
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	e02b      	b.n	8004104 <UART_SetConfig+0x178>
 80040ac:	231b      	movs	r3, #27
 80040ae:	18fb      	adds	r3, r7, r3
 80040b0:	2202      	movs	r2, #2
 80040b2:	701a      	strb	r2, [r3, #0]
 80040b4:	e026      	b.n	8004104 <UART_SetConfig+0x178>
 80040b6:	231b      	movs	r3, #27
 80040b8:	18fb      	adds	r3, r7, r3
 80040ba:	2204      	movs	r2, #4
 80040bc:	701a      	strb	r2, [r3, #0]
 80040be:	e021      	b.n	8004104 <UART_SetConfig+0x178>
 80040c0:	231b      	movs	r3, #27
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	2208      	movs	r2, #8
 80040c6:	701a      	strb	r2, [r3, #0]
 80040c8:	e01c      	b.n	8004104 <UART_SetConfig+0x178>
 80040ca:	231b      	movs	r3, #27
 80040cc:	18fb      	adds	r3, r7, r3
 80040ce:	2210      	movs	r2, #16
 80040d0:	701a      	strb	r2, [r3, #0]
 80040d2:	e017      	b.n	8004104 <UART_SetConfig+0x178>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a7a      	ldr	r2, [pc, #488]	; (80042c4 <UART_SetConfig+0x338>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d104      	bne.n	80040e8 <UART_SetConfig+0x15c>
 80040de:	231b      	movs	r3, #27
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	2200      	movs	r2, #0
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	e00d      	b.n	8004104 <UART_SetConfig+0x178>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a76      	ldr	r2, [pc, #472]	; (80042c8 <UART_SetConfig+0x33c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d104      	bne.n	80040fc <UART_SetConfig+0x170>
 80040f2:	231b      	movs	r3, #27
 80040f4:	18fb      	adds	r3, r7, r3
 80040f6:	2200      	movs	r2, #0
 80040f8:	701a      	strb	r2, [r3, #0]
 80040fa:	e003      	b.n	8004104 <UART_SetConfig+0x178>
 80040fc:	231b      	movs	r3, #27
 80040fe:	18fb      	adds	r3, r7, r3
 8004100:	2210      	movs	r2, #16
 8004102:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69da      	ldr	r2, [r3, #28]
 8004108:	2380      	movs	r3, #128	; 0x80
 800410a:	021b      	lsls	r3, r3, #8
 800410c:	429a      	cmp	r2, r3
 800410e:	d000      	beq.n	8004112 <UART_SetConfig+0x186>
 8004110:	e065      	b.n	80041de <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8004112:	231b      	movs	r3, #27
 8004114:	18fb      	adds	r3, r7, r3
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b08      	cmp	r3, #8
 800411a:	d015      	beq.n	8004148 <UART_SetConfig+0x1bc>
 800411c:	dc18      	bgt.n	8004150 <UART_SetConfig+0x1c4>
 800411e:	2b04      	cmp	r3, #4
 8004120:	d00d      	beq.n	800413e <UART_SetConfig+0x1b2>
 8004122:	dc15      	bgt.n	8004150 <UART_SetConfig+0x1c4>
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <UART_SetConfig+0x1a2>
 8004128:	2b02      	cmp	r3, #2
 800412a:	d005      	beq.n	8004138 <UART_SetConfig+0x1ac>
 800412c:	e010      	b.n	8004150 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800412e:	f7fe fd73 	bl	8002c18 <HAL_RCC_GetPCLK1Freq>
 8004132:	0003      	movs	r3, r0
 8004134:	617b      	str	r3, [r7, #20]
        break;
 8004136:	e012      	b.n	800415e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004138:	4b64      	ldr	r3, [pc, #400]	; (80042cc <UART_SetConfig+0x340>)
 800413a:	617b      	str	r3, [r7, #20]
        break;
 800413c:	e00f      	b.n	800415e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800413e:	f7fe fcdf 	bl	8002b00 <HAL_RCC_GetSysClockFreq>
 8004142:	0003      	movs	r3, r0
 8004144:	617b      	str	r3, [r7, #20]
        break;
 8004146:	e00a      	b.n	800415e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004148:	2380      	movs	r3, #128	; 0x80
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	617b      	str	r3, [r7, #20]
        break;
 800414e:	e006      	b.n	800415e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004154:	231a      	movs	r3, #26
 8004156:	18fb      	adds	r3, r7, r3
 8004158:	2201      	movs	r2, #1
 800415a:	701a      	strb	r2, [r3, #0]
        break;
 800415c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d100      	bne.n	8004166 <UART_SetConfig+0x1da>
 8004164:	e08d      	b.n	8004282 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800416a:	4b59      	ldr	r3, [pc, #356]	; (80042d0 <UART_SetConfig+0x344>)
 800416c:	0052      	lsls	r2, r2, #1
 800416e:	5ad3      	ldrh	r3, [r2, r3]
 8004170:	0019      	movs	r1, r3
 8004172:	6978      	ldr	r0, [r7, #20]
 8004174:	f7fb ffc4 	bl	8000100 <__udivsi3>
 8004178:	0003      	movs	r3, r0
 800417a:	005a      	lsls	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	085b      	lsrs	r3, r3, #1
 8004182:	18d2      	adds	r2, r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	0019      	movs	r1, r3
 800418a:	0010      	movs	r0, r2
 800418c:	f7fb ffb8 	bl	8000100 <__udivsi3>
 8004190:	0003      	movs	r3, r0
 8004192:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	2b0f      	cmp	r3, #15
 8004198:	d91c      	bls.n	80041d4 <UART_SetConfig+0x248>
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	025b      	lsls	r3, r3, #9
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d217      	bcs.n	80041d4 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	200e      	movs	r0, #14
 80041aa:	183b      	adds	r3, r7, r0
 80041ac:	210f      	movs	r1, #15
 80041ae:	438a      	bics	r2, r1
 80041b0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	085b      	lsrs	r3, r3, #1
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2207      	movs	r2, #7
 80041ba:	4013      	ands	r3, r2
 80041bc:	b299      	uxth	r1, r3
 80041be:	183b      	adds	r3, r7, r0
 80041c0:	183a      	adds	r2, r7, r0
 80041c2:	8812      	ldrh	r2, [r2, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	183a      	adds	r2, r7, r0
 80041ce:	8812      	ldrh	r2, [r2, #0]
 80041d0:	60da      	str	r2, [r3, #12]
 80041d2:	e056      	b.n	8004282 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80041d4:	231a      	movs	r3, #26
 80041d6:	18fb      	adds	r3, r7, r3
 80041d8:	2201      	movs	r2, #1
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	e051      	b.n	8004282 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041de:	231b      	movs	r3, #27
 80041e0:	18fb      	adds	r3, r7, r3
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d015      	beq.n	8004214 <UART_SetConfig+0x288>
 80041e8:	dc18      	bgt.n	800421c <UART_SetConfig+0x290>
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d00d      	beq.n	800420a <UART_SetConfig+0x27e>
 80041ee:	dc15      	bgt.n	800421c <UART_SetConfig+0x290>
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <UART_SetConfig+0x26e>
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d005      	beq.n	8004204 <UART_SetConfig+0x278>
 80041f8:	e010      	b.n	800421c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041fa:	f7fe fd0d 	bl	8002c18 <HAL_RCC_GetPCLK1Freq>
 80041fe:	0003      	movs	r3, r0
 8004200:	617b      	str	r3, [r7, #20]
        break;
 8004202:	e012      	b.n	800422a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004204:	4b31      	ldr	r3, [pc, #196]	; (80042cc <UART_SetConfig+0x340>)
 8004206:	617b      	str	r3, [r7, #20]
        break;
 8004208:	e00f      	b.n	800422a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800420a:	f7fe fc79 	bl	8002b00 <HAL_RCC_GetSysClockFreq>
 800420e:	0003      	movs	r3, r0
 8004210:	617b      	str	r3, [r7, #20]
        break;
 8004212:	e00a      	b.n	800422a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004214:	2380      	movs	r3, #128	; 0x80
 8004216:	021b      	lsls	r3, r3, #8
 8004218:	617b      	str	r3, [r7, #20]
        break;
 800421a:	e006      	b.n	800422a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004220:	231a      	movs	r3, #26
 8004222:	18fb      	adds	r3, r7, r3
 8004224:	2201      	movs	r2, #1
 8004226:	701a      	strb	r2, [r3, #0]
        break;
 8004228:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d028      	beq.n	8004282 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004234:	4b26      	ldr	r3, [pc, #152]	; (80042d0 <UART_SetConfig+0x344>)
 8004236:	0052      	lsls	r2, r2, #1
 8004238:	5ad3      	ldrh	r3, [r2, r3]
 800423a:	0019      	movs	r1, r3
 800423c:	6978      	ldr	r0, [r7, #20]
 800423e:	f7fb ff5f 	bl	8000100 <__udivsi3>
 8004242:	0003      	movs	r3, r0
 8004244:	001a      	movs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	085b      	lsrs	r3, r3, #1
 800424c:	18d2      	adds	r2, r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	0019      	movs	r1, r3
 8004254:	0010      	movs	r0, r2
 8004256:	f7fb ff53 	bl	8000100 <__udivsi3>
 800425a:	0003      	movs	r3, r0
 800425c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	2b0f      	cmp	r3, #15
 8004262:	d90a      	bls.n	800427a <UART_SetConfig+0x2ee>
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	2380      	movs	r3, #128	; 0x80
 8004268:	025b      	lsls	r3, r3, #9
 800426a:	429a      	cmp	r2, r3
 800426c:	d205      	bcs.n	800427a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	b29a      	uxth	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60da      	str	r2, [r3, #12]
 8004278:	e003      	b.n	8004282 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800427a:	231a      	movs	r3, #26
 800427c:	18fb      	adds	r3, r7, r3
 800427e:	2201      	movs	r2, #1
 8004280:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	226a      	movs	r2, #106	; 0x6a
 8004286:	2101      	movs	r1, #1
 8004288:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2268      	movs	r2, #104	; 0x68
 800428e:	2101      	movs	r1, #1
 8004290:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800429e:	231a      	movs	r3, #26
 80042a0:	18fb      	adds	r3, r7, r3
 80042a2:	781b      	ldrb	r3, [r3, #0]
}
 80042a4:	0018      	movs	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	b008      	add	sp, #32
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	cfff69f3 	.word	0xcfff69f3
 80042b0:	ffffcfff 	.word	0xffffcfff
 80042b4:	11fff4ff 	.word	0x11fff4ff
 80042b8:	40013800 	.word	0x40013800
 80042bc:	40021000 	.word	0x40021000
 80042c0:	40004400 	.word	0x40004400
 80042c4:	40004800 	.word	0x40004800
 80042c8:	40004c00 	.word	0x40004c00
 80042cc:	00f42400 	.word	0x00f42400
 80042d0:	080049c0 	.word	0x080049c0

080042d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	2201      	movs	r2, #1
 80042e2:	4013      	ands	r3, r2
 80042e4:	d00b      	beq.n	80042fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	4a4a      	ldr	r2, [pc, #296]	; (8004418 <UART_AdvFeatureConfig+0x144>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	0019      	movs	r1, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004302:	2202      	movs	r2, #2
 8004304:	4013      	ands	r3, r2
 8004306:	d00b      	beq.n	8004320 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4a43      	ldr	r2, [pc, #268]	; (800441c <UART_AdvFeatureConfig+0x148>)
 8004310:	4013      	ands	r3, r2
 8004312:	0019      	movs	r1, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004324:	2204      	movs	r2, #4
 8004326:	4013      	ands	r3, r2
 8004328:	d00b      	beq.n	8004342 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	4a3b      	ldr	r2, [pc, #236]	; (8004420 <UART_AdvFeatureConfig+0x14c>)
 8004332:	4013      	ands	r3, r2
 8004334:	0019      	movs	r1, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004346:	2208      	movs	r2, #8
 8004348:	4013      	ands	r3, r2
 800434a:	d00b      	beq.n	8004364 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	4a34      	ldr	r2, [pc, #208]	; (8004424 <UART_AdvFeatureConfig+0x150>)
 8004354:	4013      	ands	r3, r2
 8004356:	0019      	movs	r1, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004368:	2210      	movs	r2, #16
 800436a:	4013      	ands	r3, r2
 800436c:	d00b      	beq.n	8004386 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	4a2c      	ldr	r2, [pc, #176]	; (8004428 <UART_AdvFeatureConfig+0x154>)
 8004376:	4013      	ands	r3, r2
 8004378:	0019      	movs	r1, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438a:	2220      	movs	r2, #32
 800438c:	4013      	ands	r3, r2
 800438e:	d00b      	beq.n	80043a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	4a25      	ldr	r2, [pc, #148]	; (800442c <UART_AdvFeatureConfig+0x158>)
 8004398:	4013      	ands	r3, r2
 800439a:	0019      	movs	r1, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ac:	2240      	movs	r2, #64	; 0x40
 80043ae:	4013      	ands	r3, r2
 80043b0:	d01d      	beq.n	80043ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4a1d      	ldr	r2, [pc, #116]	; (8004430 <UART_AdvFeatureConfig+0x15c>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	0019      	movs	r1, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ce:	2380      	movs	r3, #128	; 0x80
 80043d0:	035b      	lsls	r3, r3, #13
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d10b      	bne.n	80043ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	4a15      	ldr	r2, [pc, #84]	; (8004434 <UART_AdvFeatureConfig+0x160>)
 80043de:	4013      	ands	r3, r2
 80043e0:	0019      	movs	r1, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	2280      	movs	r2, #128	; 0x80
 80043f4:	4013      	ands	r3, r2
 80043f6:	d00b      	beq.n	8004410 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	4a0e      	ldr	r2, [pc, #56]	; (8004438 <UART_AdvFeatureConfig+0x164>)
 8004400:	4013      	ands	r3, r2
 8004402:	0019      	movs	r1, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	605a      	str	r2, [r3, #4]
  }
}
 8004410:	46c0      	nop			; (mov r8, r8)
 8004412:	46bd      	mov	sp, r7
 8004414:	b002      	add	sp, #8
 8004416:	bd80      	pop	{r7, pc}
 8004418:	fffdffff 	.word	0xfffdffff
 800441c:	fffeffff 	.word	0xfffeffff
 8004420:	fffbffff 	.word	0xfffbffff
 8004424:	ffff7fff 	.word	0xffff7fff
 8004428:	ffffefff 	.word	0xffffefff
 800442c:	ffffdfff 	.word	0xffffdfff
 8004430:	ffefffff 	.word	0xffefffff
 8004434:	ff9fffff 	.word	0xff9fffff
 8004438:	fff7ffff 	.word	0xfff7ffff

0800443c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af02      	add	r7, sp, #8
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2290      	movs	r2, #144	; 0x90
 8004448:	2100      	movs	r1, #0
 800444a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800444c:	f7fd f836 	bl	80014bc <HAL_GetTick>
 8004450:	0003      	movs	r3, r0
 8004452:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2208      	movs	r2, #8
 800445c:	4013      	ands	r3, r2
 800445e:	2b08      	cmp	r3, #8
 8004460:	d10c      	bne.n	800447c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2280      	movs	r2, #128	; 0x80
 8004466:	0391      	lsls	r1, r2, #14
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	4a1a      	ldr	r2, [pc, #104]	; (80044d4 <UART_CheckIdleState+0x98>)
 800446c:	9200      	str	r2, [sp, #0]
 800446e:	2200      	movs	r2, #0
 8004470:	f000 f832 	bl	80044d8 <UART_WaitOnFlagUntilTimeout>
 8004474:	1e03      	subs	r3, r0, #0
 8004476:	d001      	beq.n	800447c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e026      	b.n	80044ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2204      	movs	r2, #4
 8004484:	4013      	ands	r3, r2
 8004486:	2b04      	cmp	r3, #4
 8004488:	d10c      	bne.n	80044a4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2280      	movs	r2, #128	; 0x80
 800448e:	03d1      	lsls	r1, r2, #15
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	4a10      	ldr	r2, [pc, #64]	; (80044d4 <UART_CheckIdleState+0x98>)
 8004494:	9200      	str	r2, [sp, #0]
 8004496:	2200      	movs	r2, #0
 8004498:	f000 f81e 	bl	80044d8 <UART_WaitOnFlagUntilTimeout>
 800449c:	1e03      	subs	r3, r0, #0
 800449e:	d001      	beq.n	80044a4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e012      	b.n	80044ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2288      	movs	r2, #136	; 0x88
 80044a8:	2120      	movs	r1, #32
 80044aa:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	228c      	movs	r2, #140	; 0x8c
 80044b0:	2120      	movs	r1, #32
 80044b2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2284      	movs	r2, #132	; 0x84
 80044c4:	2100      	movs	r1, #0
 80044c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	0018      	movs	r0, r3
 80044cc:	46bd      	mov	sp, r7
 80044ce:	b004      	add	sp, #16
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	46c0      	nop			; (mov r8, r8)
 80044d4:	01ffffff 	.word	0x01ffffff

080044d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b094      	sub	sp, #80	; 0x50
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	1dfb      	adds	r3, r7, #7
 80044e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e8:	e0a7      	b.n	800463a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044ec:	3301      	adds	r3, #1
 80044ee:	d100      	bne.n	80044f2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80044f0:	e0a3      	b.n	800463a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f2:	f7fc ffe3 	bl	80014bc <HAL_GetTick>
 80044f6:	0002      	movs	r2, r0
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044fe:	429a      	cmp	r2, r3
 8004500:	d302      	bcc.n	8004508 <UART_WaitOnFlagUntilTimeout+0x30>
 8004502:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004504:	2b00      	cmp	r3, #0
 8004506:	d13f      	bne.n	8004588 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004508:	f3ef 8310 	mrs	r3, PRIMASK
 800450c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800450e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004510:	647b      	str	r3, [r7, #68]	; 0x44
 8004512:	2301      	movs	r3, #1
 8004514:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004518:	f383 8810 	msr	PRIMASK, r3
}
 800451c:	46c0      	nop			; (mov r8, r8)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	494e      	ldr	r1, [pc, #312]	; (8004664 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800452a:	400a      	ands	r2, r1
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004530:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	f383 8810 	msr	PRIMASK, r3
}
 8004538:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800453a:	f3ef 8310 	mrs	r3, PRIMASK
 800453e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004542:	643b      	str	r3, [r7, #64]	; 0x40
 8004544:	2301      	movs	r3, #1
 8004546:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454a:	f383 8810 	msr	PRIMASK, r3
}
 800454e:	46c0      	nop			; (mov r8, r8)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2101      	movs	r1, #1
 800455c:	438a      	bics	r2, r1
 800455e:	609a      	str	r2, [r3, #8]
 8004560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004562:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004566:	f383 8810 	msr	PRIMASK, r3
}
 800456a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2288      	movs	r2, #136	; 0x88
 8004570:	2120      	movs	r1, #32
 8004572:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	228c      	movs	r2, #140	; 0x8c
 8004578:	2120      	movs	r1, #32
 800457a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2284      	movs	r2, #132	; 0x84
 8004580:	2100      	movs	r1, #0
 8004582:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e069      	b.n	800465c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2204      	movs	r2, #4
 8004590:	4013      	ands	r3, r2
 8004592:	d052      	beq.n	800463a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	69da      	ldr	r2, [r3, #28]
 800459a:	2380      	movs	r3, #128	; 0x80
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	401a      	ands	r2, r3
 80045a0:	2380      	movs	r3, #128	; 0x80
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d148      	bne.n	800463a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2280      	movs	r2, #128	; 0x80
 80045ae:	0112      	lsls	r2, r2, #4
 80045b0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b2:	f3ef 8310 	mrs	r3, PRIMASK
 80045b6:	613b      	str	r3, [r7, #16]
  return(result);
 80045b8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80045ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045bc:	2301      	movs	r3, #1
 80045be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f383 8810 	msr	PRIMASK, r3
}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4924      	ldr	r1, [pc, #144]	; (8004664 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80045d4:	400a      	ands	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	f383 8810 	msr	PRIMASK, r3
}
 80045e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045e4:	f3ef 8310 	mrs	r3, PRIMASK
 80045e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80045ea:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80045ee:	2301      	movs	r3, #1
 80045f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	f383 8810 	msr	PRIMASK, r3
}
 80045f8:	46c0      	nop			; (mov r8, r8)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2101      	movs	r1, #1
 8004606:	438a      	bics	r2, r1
 8004608:	609a      	str	r2, [r3, #8]
 800460a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	f383 8810 	msr	PRIMASK, r3
}
 8004614:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2288      	movs	r2, #136	; 0x88
 800461a:	2120      	movs	r1, #32
 800461c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	228c      	movs	r2, #140	; 0x8c
 8004622:	2120      	movs	r1, #32
 8004624:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2290      	movs	r2, #144	; 0x90
 800462a:	2120      	movs	r1, #32
 800462c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2284      	movs	r2, #132	; 0x84
 8004632:	2100      	movs	r1, #0
 8004634:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e010      	b.n	800465c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	4013      	ands	r3, r2
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	425a      	negs	r2, r3
 800464a:	4153      	adcs	r3, r2
 800464c:	b2db      	uxtb	r3, r3
 800464e:	001a      	movs	r2, r3
 8004650:	1dfb      	adds	r3, r7, #7
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d100      	bne.n	800465a <UART_WaitOnFlagUntilTimeout+0x182>
 8004658:	e747      	b.n	80044ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	0018      	movs	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	b014      	add	sp, #80	; 0x50
 8004662:	bd80      	pop	{r7, pc}
 8004664:	fffffe5f 	.word	0xfffffe5f

08004668 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2284      	movs	r2, #132	; 0x84
 8004674:	5c9b      	ldrb	r3, [r3, r2]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <HAL_UARTEx_DisableFifoMode+0x16>
 800467a:	2302      	movs	r3, #2
 800467c:	e027      	b.n	80046ce <HAL_UARTEx_DisableFifoMode+0x66>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2284      	movs	r2, #132	; 0x84
 8004682:	2101      	movs	r1, #1
 8004684:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2288      	movs	r2, #136	; 0x88
 800468a:	2124      	movs	r1, #36	; 0x24
 800468c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2101      	movs	r1, #1
 80046a2:	438a      	bics	r2, r1
 80046a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4a0b      	ldr	r2, [pc, #44]	; (80046d8 <HAL_UARTEx_DisableFifoMode+0x70>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2288      	movs	r2, #136	; 0x88
 80046c0:	2120      	movs	r1, #32
 80046c2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2284      	movs	r2, #132	; 0x84
 80046c8:	2100      	movs	r1, #0
 80046ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	0018      	movs	r0, r3
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b004      	add	sp, #16
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	dfffffff 	.word	0xdfffffff

080046dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2284      	movs	r2, #132	; 0x84
 80046ea:	5c9b      	ldrb	r3, [r3, r2]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e02e      	b.n	8004752 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2284      	movs	r2, #132	; 0x84
 80046f8:	2101      	movs	r1, #1
 80046fa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2288      	movs	r2, #136	; 0x88
 8004700:	2124      	movs	r1, #36	; 0x24
 8004702:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2101      	movs	r1, #1
 8004718:	438a      	bics	r2, r1
 800471a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	08d9      	lsrs	r1, r3, #3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	0018      	movs	r0, r3
 8004734:	f000 f854 	bl	80047e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2288      	movs	r2, #136	; 0x88
 8004744:	2120      	movs	r1, #32
 8004746:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2284      	movs	r2, #132	; 0x84
 800474c:	2100      	movs	r1, #0
 800474e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	0018      	movs	r0, r3
 8004754:	46bd      	mov	sp, r7
 8004756:	b004      	add	sp, #16
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2284      	movs	r2, #132	; 0x84
 800476a:	5c9b      	ldrb	r3, [r3, r2]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004770:	2302      	movs	r3, #2
 8004772:	e02f      	b.n	80047d4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2284      	movs	r2, #132	; 0x84
 8004778:	2101      	movs	r1, #1
 800477a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2288      	movs	r2, #136	; 0x88
 8004780:	2124      	movs	r1, #36	; 0x24
 8004782:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2101      	movs	r1, #1
 8004798:	438a      	bics	r2, r1
 800479a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	4a0e      	ldr	r2, [pc, #56]	; (80047dc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	0019      	movs	r1, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	0018      	movs	r0, r3
 80047b6:	f000 f813 	bl	80047e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2288      	movs	r2, #136	; 0x88
 80047c6:	2120      	movs	r1, #32
 80047c8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2284      	movs	r2, #132	; 0x84
 80047ce:	2100      	movs	r1, #0
 80047d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	0018      	movs	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b004      	add	sp, #16
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	f1ffffff 	.word	0xf1ffffff

080047e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80047e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d108      	bne.n	8004802 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	226a      	movs	r2, #106	; 0x6a
 80047f4:	2101      	movs	r1, #1
 80047f6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2268      	movs	r2, #104	; 0x68
 80047fc:	2101      	movs	r1, #1
 80047fe:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004800:	e043      	b.n	800488a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004802:	260f      	movs	r6, #15
 8004804:	19bb      	adds	r3, r7, r6
 8004806:	2208      	movs	r2, #8
 8004808:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800480a:	200e      	movs	r0, #14
 800480c:	183b      	adds	r3, r7, r0
 800480e:	2208      	movs	r2, #8
 8004810:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	0e5b      	lsrs	r3, r3, #25
 800481a:	b2da      	uxtb	r2, r3
 800481c:	240d      	movs	r4, #13
 800481e:	193b      	adds	r3, r7, r4
 8004820:	2107      	movs	r1, #7
 8004822:	400a      	ands	r2, r1
 8004824:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	0f5b      	lsrs	r3, r3, #29
 800482e:	b2da      	uxtb	r2, r3
 8004830:	250c      	movs	r5, #12
 8004832:	197b      	adds	r3, r7, r5
 8004834:	2107      	movs	r1, #7
 8004836:	400a      	ands	r2, r1
 8004838:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800483a:	183b      	adds	r3, r7, r0
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	197a      	adds	r2, r7, r5
 8004840:	7812      	ldrb	r2, [r2, #0]
 8004842:	4914      	ldr	r1, [pc, #80]	; (8004894 <UARTEx_SetNbDataToProcess+0xb4>)
 8004844:	5c8a      	ldrb	r2, [r1, r2]
 8004846:	435a      	muls	r2, r3
 8004848:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800484a:	197b      	adds	r3, r7, r5
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	4a12      	ldr	r2, [pc, #72]	; (8004898 <UARTEx_SetNbDataToProcess+0xb8>)
 8004850:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004852:	0019      	movs	r1, r3
 8004854:	f7fb fcde 	bl	8000214 <__divsi3>
 8004858:	0003      	movs	r3, r0
 800485a:	b299      	uxth	r1, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	226a      	movs	r2, #106	; 0x6a
 8004860:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004862:	19bb      	adds	r3, r7, r6
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	193a      	adds	r2, r7, r4
 8004868:	7812      	ldrb	r2, [r2, #0]
 800486a:	490a      	ldr	r1, [pc, #40]	; (8004894 <UARTEx_SetNbDataToProcess+0xb4>)
 800486c:	5c8a      	ldrb	r2, [r1, r2]
 800486e:	435a      	muls	r2, r3
 8004870:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004872:	193b      	adds	r3, r7, r4
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	4a08      	ldr	r2, [pc, #32]	; (8004898 <UARTEx_SetNbDataToProcess+0xb8>)
 8004878:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800487a:	0019      	movs	r1, r3
 800487c:	f7fb fcca 	bl	8000214 <__divsi3>
 8004880:	0003      	movs	r3, r0
 8004882:	b299      	uxth	r1, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2268      	movs	r2, #104	; 0x68
 8004888:	5299      	strh	r1, [r3, r2]
}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	46bd      	mov	sp, r7
 800488e:	b005      	add	sp, #20
 8004890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	080049d8 	.word	0x080049d8
 8004898:	080049e0 	.word	0x080049e0

0800489c <memset>:
 800489c:	0003      	movs	r3, r0
 800489e:	1882      	adds	r2, r0, r2
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d100      	bne.n	80048a6 <memset+0xa>
 80048a4:	4770      	bx	lr
 80048a6:	7019      	strb	r1, [r3, #0]
 80048a8:	3301      	adds	r3, #1
 80048aa:	e7f9      	b.n	80048a0 <memset+0x4>

080048ac <__libc_init_array>:
 80048ac:	b570      	push	{r4, r5, r6, lr}
 80048ae:	2600      	movs	r6, #0
 80048b0:	4c0c      	ldr	r4, [pc, #48]	; (80048e4 <__libc_init_array+0x38>)
 80048b2:	4d0d      	ldr	r5, [pc, #52]	; (80048e8 <__libc_init_array+0x3c>)
 80048b4:	1b64      	subs	r4, r4, r5
 80048b6:	10a4      	asrs	r4, r4, #2
 80048b8:	42a6      	cmp	r6, r4
 80048ba:	d109      	bne.n	80048d0 <__libc_init_array+0x24>
 80048bc:	2600      	movs	r6, #0
 80048be:	f000 f819 	bl	80048f4 <_init>
 80048c2:	4c0a      	ldr	r4, [pc, #40]	; (80048ec <__libc_init_array+0x40>)
 80048c4:	4d0a      	ldr	r5, [pc, #40]	; (80048f0 <__libc_init_array+0x44>)
 80048c6:	1b64      	subs	r4, r4, r5
 80048c8:	10a4      	asrs	r4, r4, #2
 80048ca:	42a6      	cmp	r6, r4
 80048cc:	d105      	bne.n	80048da <__libc_init_array+0x2e>
 80048ce:	bd70      	pop	{r4, r5, r6, pc}
 80048d0:	00b3      	lsls	r3, r6, #2
 80048d2:	58eb      	ldr	r3, [r5, r3]
 80048d4:	4798      	blx	r3
 80048d6:	3601      	adds	r6, #1
 80048d8:	e7ee      	b.n	80048b8 <__libc_init_array+0xc>
 80048da:	00b3      	lsls	r3, r6, #2
 80048dc:	58eb      	ldr	r3, [r5, r3]
 80048de:	4798      	blx	r3
 80048e0:	3601      	adds	r6, #1
 80048e2:	e7f2      	b.n	80048ca <__libc_init_array+0x1e>
 80048e4:	080049e8 	.word	0x080049e8
 80048e8:	080049e8 	.word	0x080049e8
 80048ec:	080049ec 	.word	0x080049ec
 80048f0:	080049e8 	.word	0x080049e8

080048f4 <_init>:
 80048f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048fa:	bc08      	pop	{r3}
 80048fc:	469e      	mov	lr, r3
 80048fe:	4770      	bx	lr

08004900 <_fini>:
 8004900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004902:	46c0      	nop			; (mov r8, r8)
 8004904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004906:	bc08      	pop	{r3}
 8004908:	469e      	mov	lr, r3
 800490a:	4770      	bx	lr
