
PROJET_ESE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c88c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f0  0800c950  0800c950  0001c950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d040  0800d040  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d040  0800d040  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d040  0800d040  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d040  0800d040  0001d040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d044  0800d044  0001d044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800d048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000161c  2000006c  0800d0b4  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001688  0800d0b4  00021688  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b61e  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046c8  00000000  00000000  0003b6f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001920  00000000  00000000  0003fdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000136d  00000000  00000000  000416e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b90a  00000000  00000000  00042a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f4f8  00000000  00000000  0005e357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a4d93  00000000  00000000  0007d84f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000064b8  00000000  00000000  001225e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00128a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c934 	.word	0x0800c934

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	0800c934 	.word	0x0800c934

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0010      	movs	r0, r2
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	0019      	movs	r1, r3
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f001 fe0d 	bl	8002038 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f001 fd5d 	bl	8001ee8 <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 fdff 	bl	8002038 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fdf5 	bl	8002038 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fd85 	bl	8001f6c <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f001 fd7b 	bl	8001f6c <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_cfrcmple>:
 8000484:	4684      	mov	ip, r0
 8000486:	0008      	movs	r0, r1
 8000488:	4661      	mov	r1, ip
 800048a:	e7ff      	b.n	800048c <__aeabi_cfcmpeq>

0800048c <__aeabi_cfcmpeq>:
 800048c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800048e:	f000 fb59 	bl	8000b44 <__lesf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	d401      	bmi.n	800049a <__aeabi_cfcmpeq+0xe>
 8000496:	2100      	movs	r1, #0
 8000498:	42c8      	cmn	r0, r1
 800049a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800049c <__aeabi_fcmpeq>:
 800049c:	b510      	push	{r4, lr}
 800049e:	f000 fae5 	bl	8000a6c <__eqsf2>
 80004a2:	4240      	negs	r0, r0
 80004a4:	3001      	adds	r0, #1
 80004a6:	bd10      	pop	{r4, pc}

080004a8 <__aeabi_fcmplt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 fb4b 	bl	8000b44 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	db01      	blt.n	80004b6 <__aeabi_fcmplt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_fcmple>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fb41 	bl	8000b44 <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dd01      	ble.n	80004ca <__aeabi_fcmple+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmpgt>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 faf1 	bl	8000ab8 <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dc01      	bgt.n	80004de <__aeabi_fcmpgt+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_fcmpge>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f000 fae7 	bl	8000ab8 <__gesf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	da01      	bge.n	80004f2 <__aeabi_fcmpge+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)

080004f8 <__aeabi_fadd>:
 80004f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fa:	4647      	mov	r7, r8
 80004fc:	46ce      	mov	lr, r9
 80004fe:	024a      	lsls	r2, r1, #9
 8000500:	0243      	lsls	r3, r0, #9
 8000502:	0045      	lsls	r5, r0, #1
 8000504:	0fc4      	lsrs	r4, r0, #31
 8000506:	0a50      	lsrs	r0, r2, #9
 8000508:	4680      	mov	r8, r0
 800050a:	0048      	lsls	r0, r1, #1
 800050c:	0a5b      	lsrs	r3, r3, #9
 800050e:	0e00      	lsrs	r0, r0, #24
 8000510:	0992      	lsrs	r2, r2, #6
 8000512:	4694      	mov	ip, r2
 8000514:	b580      	push	{r7, lr}
 8000516:	001e      	movs	r6, r3
 8000518:	4681      	mov	r9, r0
 800051a:	0002      	movs	r2, r0
 800051c:	0e2d      	lsrs	r5, r5, #24
 800051e:	00df      	lsls	r7, r3, #3
 8000520:	0fc9      	lsrs	r1, r1, #31
 8000522:	428c      	cmp	r4, r1
 8000524:	d024      	beq.n	8000570 <__aeabi_fadd+0x78>
 8000526:	1a28      	subs	r0, r5, r0
 8000528:	2800      	cmp	r0, #0
 800052a:	dd0e      	ble.n	800054a <__aeabi_fadd+0x52>
 800052c:	2a00      	cmp	r2, #0
 800052e:	d13e      	bne.n	80005ae <__aeabi_fadd+0xb6>
 8000530:	4662      	mov	r2, ip
 8000532:	2a00      	cmp	r2, #0
 8000534:	d100      	bne.n	8000538 <__aeabi_fadd+0x40>
 8000536:	e0fd      	b.n	8000734 <__aeabi_fadd+0x23c>
 8000538:	1e42      	subs	r2, r0, #1
 800053a:	2801      	cmp	r0, #1
 800053c:	d100      	bne.n	8000540 <__aeabi_fadd+0x48>
 800053e:	e137      	b.n	80007b0 <__aeabi_fadd+0x2b8>
 8000540:	28ff      	cmp	r0, #255	; 0xff
 8000542:	d100      	bne.n	8000546 <__aeabi_fadd+0x4e>
 8000544:	e0a9      	b.n	800069a <__aeabi_fadd+0x1a2>
 8000546:	0010      	movs	r0, r2
 8000548:	e039      	b.n	80005be <__aeabi_fadd+0xc6>
 800054a:	2800      	cmp	r0, #0
 800054c:	d063      	beq.n	8000616 <__aeabi_fadd+0x11e>
 800054e:	464b      	mov	r3, r9
 8000550:	1b52      	subs	r2, r2, r5
 8000552:	2d00      	cmp	r5, #0
 8000554:	d000      	beq.n	8000558 <__aeabi_fadd+0x60>
 8000556:	e0e0      	b.n	800071a <__aeabi_fadd+0x222>
 8000558:	2f00      	cmp	r7, #0
 800055a:	d100      	bne.n	800055e <__aeabi_fadd+0x66>
 800055c:	e0ce      	b.n	80006fc <__aeabi_fadd+0x204>
 800055e:	1e53      	subs	r3, r2, #1
 8000560:	2a01      	cmp	r2, #1
 8000562:	d100      	bne.n	8000566 <__aeabi_fadd+0x6e>
 8000564:	e155      	b.n	8000812 <__aeabi_fadd+0x31a>
 8000566:	2aff      	cmp	r2, #255	; 0xff
 8000568:	d100      	bne.n	800056c <__aeabi_fadd+0x74>
 800056a:	e094      	b.n	8000696 <__aeabi_fadd+0x19e>
 800056c:	001a      	movs	r2, r3
 800056e:	e0d9      	b.n	8000724 <__aeabi_fadd+0x22c>
 8000570:	1a2a      	subs	r2, r5, r0
 8000572:	2a00      	cmp	r2, #0
 8000574:	dc00      	bgt.n	8000578 <__aeabi_fadd+0x80>
 8000576:	e099      	b.n	80006ac <__aeabi_fadd+0x1b4>
 8000578:	2800      	cmp	r0, #0
 800057a:	d062      	beq.n	8000642 <__aeabi_fadd+0x14a>
 800057c:	2dff      	cmp	r5, #255	; 0xff
 800057e:	d100      	bne.n	8000582 <__aeabi_fadd+0x8a>
 8000580:	e08b      	b.n	800069a <__aeabi_fadd+0x1a2>
 8000582:	2380      	movs	r3, #128	; 0x80
 8000584:	4661      	mov	r1, ip
 8000586:	04db      	lsls	r3, r3, #19
 8000588:	4319      	orrs	r1, r3
 800058a:	468c      	mov	ip, r1
 800058c:	2a1b      	cmp	r2, #27
 800058e:	dc00      	bgt.n	8000592 <__aeabi_fadd+0x9a>
 8000590:	e0d2      	b.n	8000738 <__aeabi_fadd+0x240>
 8000592:	2301      	movs	r3, #1
 8000594:	19db      	adds	r3, r3, r7
 8000596:	015a      	lsls	r2, r3, #5
 8000598:	d56a      	bpl.n	8000670 <__aeabi_fadd+0x178>
 800059a:	3501      	adds	r5, #1
 800059c:	2dff      	cmp	r5, #255	; 0xff
 800059e:	d05b      	beq.n	8000658 <__aeabi_fadd+0x160>
 80005a0:	2201      	movs	r2, #1
 80005a2:	49a3      	ldr	r1, [pc, #652]	; (8000830 <__aeabi_fadd+0x338>)
 80005a4:	401a      	ands	r2, r3
 80005a6:	085b      	lsrs	r3, r3, #1
 80005a8:	400b      	ands	r3, r1
 80005aa:	4313      	orrs	r3, r2
 80005ac:	e01c      	b.n	80005e8 <__aeabi_fadd+0xf0>
 80005ae:	2dff      	cmp	r5, #255	; 0xff
 80005b0:	d100      	bne.n	80005b4 <__aeabi_fadd+0xbc>
 80005b2:	e072      	b.n	800069a <__aeabi_fadd+0x1a2>
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	4662      	mov	r2, ip
 80005b8:	04db      	lsls	r3, r3, #19
 80005ba:	431a      	orrs	r2, r3
 80005bc:	4694      	mov	ip, r2
 80005be:	281b      	cmp	r0, #27
 80005c0:	dc00      	bgt.n	80005c4 <__aeabi_fadd+0xcc>
 80005c2:	e090      	b.n	80006e6 <__aeabi_fadd+0x1ee>
 80005c4:	2301      	movs	r3, #1
 80005c6:	1afb      	subs	r3, r7, r3
 80005c8:	015a      	lsls	r2, r3, #5
 80005ca:	d551      	bpl.n	8000670 <__aeabi_fadd+0x178>
 80005cc:	019b      	lsls	r3, r3, #6
 80005ce:	099e      	lsrs	r6, r3, #6
 80005d0:	0030      	movs	r0, r6
 80005d2:	f002 fcd7 	bl	8002f84 <__clzsi2>
 80005d6:	0033      	movs	r3, r6
 80005d8:	3805      	subs	r0, #5
 80005da:	4083      	lsls	r3, r0
 80005dc:	4285      	cmp	r5, r0
 80005de:	dc00      	bgt.n	80005e2 <__aeabi_fadd+0xea>
 80005e0:	e075      	b.n	80006ce <__aeabi_fadd+0x1d6>
 80005e2:	4a94      	ldr	r2, [pc, #592]	; (8000834 <__aeabi_fadd+0x33c>)
 80005e4:	1a2d      	subs	r5, r5, r0
 80005e6:	4013      	ands	r3, r2
 80005e8:	075a      	lsls	r2, r3, #29
 80005ea:	d004      	beq.n	80005f6 <__aeabi_fadd+0xfe>
 80005ec:	220f      	movs	r2, #15
 80005ee:	401a      	ands	r2, r3
 80005f0:	2a04      	cmp	r2, #4
 80005f2:	d000      	beq.n	80005f6 <__aeabi_fadd+0xfe>
 80005f4:	3304      	adds	r3, #4
 80005f6:	015a      	lsls	r2, r3, #5
 80005f8:	d53c      	bpl.n	8000674 <__aeabi_fadd+0x17c>
 80005fa:	1c68      	adds	r0, r5, #1
 80005fc:	2dfe      	cmp	r5, #254	; 0xfe
 80005fe:	d02b      	beq.n	8000658 <__aeabi_fadd+0x160>
 8000600:	019b      	lsls	r3, r3, #6
 8000602:	0a5e      	lsrs	r6, r3, #9
 8000604:	b2c0      	uxtb	r0, r0
 8000606:	05c0      	lsls	r0, r0, #23
 8000608:	4330      	orrs	r0, r6
 800060a:	07e4      	lsls	r4, r4, #31
 800060c:	4320      	orrs	r0, r4
 800060e:	bcc0      	pop	{r6, r7}
 8000610:	46b9      	mov	r9, r7
 8000612:	46b0      	mov	r8, r6
 8000614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000616:	20fe      	movs	r0, #254	; 0xfe
 8000618:	1c6a      	adds	r2, r5, #1
 800061a:	4210      	tst	r0, r2
 800061c:	d172      	bne.n	8000704 <__aeabi_fadd+0x20c>
 800061e:	2d00      	cmp	r5, #0
 8000620:	d000      	beq.n	8000624 <__aeabi_fadd+0x12c>
 8000622:	e0ae      	b.n	8000782 <__aeabi_fadd+0x28a>
 8000624:	2f00      	cmp	r7, #0
 8000626:	d100      	bne.n	800062a <__aeabi_fadd+0x132>
 8000628:	e0ec      	b.n	8000804 <__aeabi_fadd+0x30c>
 800062a:	4663      	mov	r3, ip
 800062c:	2000      	movs	r0, #0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0e9      	beq.n	8000606 <__aeabi_fadd+0x10e>
 8000632:	1afb      	subs	r3, r7, r3
 8000634:	015a      	lsls	r2, r3, #5
 8000636:	d400      	bmi.n	800063a <__aeabi_fadd+0x142>
 8000638:	e0f3      	b.n	8000822 <__aeabi_fadd+0x32a>
 800063a:	4663      	mov	r3, ip
 800063c:	000c      	movs	r4, r1
 800063e:	1bdb      	subs	r3, r3, r7
 8000640:	e7d2      	b.n	80005e8 <__aeabi_fadd+0xf0>
 8000642:	4661      	mov	r1, ip
 8000644:	2900      	cmp	r1, #0
 8000646:	d05b      	beq.n	8000700 <__aeabi_fadd+0x208>
 8000648:	1e51      	subs	r1, r2, #1
 800064a:	2a01      	cmp	r2, #1
 800064c:	d100      	bne.n	8000650 <__aeabi_fadd+0x158>
 800064e:	e0a7      	b.n	80007a0 <__aeabi_fadd+0x2a8>
 8000650:	2aff      	cmp	r2, #255	; 0xff
 8000652:	d022      	beq.n	800069a <__aeabi_fadd+0x1a2>
 8000654:	000a      	movs	r2, r1
 8000656:	e799      	b.n	800058c <__aeabi_fadd+0x94>
 8000658:	20ff      	movs	r0, #255	; 0xff
 800065a:	2600      	movs	r6, #0
 800065c:	e7d3      	b.n	8000606 <__aeabi_fadd+0x10e>
 800065e:	21fe      	movs	r1, #254	; 0xfe
 8000660:	1c6a      	adds	r2, r5, #1
 8000662:	4211      	tst	r1, r2
 8000664:	d073      	beq.n	800074e <__aeabi_fadd+0x256>
 8000666:	2aff      	cmp	r2, #255	; 0xff
 8000668:	d0f6      	beq.n	8000658 <__aeabi_fadd+0x160>
 800066a:	0015      	movs	r5, r2
 800066c:	4467      	add	r7, ip
 800066e:	087b      	lsrs	r3, r7, #1
 8000670:	075a      	lsls	r2, r3, #29
 8000672:	d1bb      	bne.n	80005ec <__aeabi_fadd+0xf4>
 8000674:	08db      	lsrs	r3, r3, #3
 8000676:	2dff      	cmp	r5, #255	; 0xff
 8000678:	d00f      	beq.n	800069a <__aeabi_fadd+0x1a2>
 800067a:	025b      	lsls	r3, r3, #9
 800067c:	0a5e      	lsrs	r6, r3, #9
 800067e:	b2e8      	uxtb	r0, r5
 8000680:	e7c1      	b.n	8000606 <__aeabi_fadd+0x10e>
 8000682:	4662      	mov	r2, ip
 8000684:	2a00      	cmp	r2, #0
 8000686:	d008      	beq.n	800069a <__aeabi_fadd+0x1a2>
 8000688:	2280      	movs	r2, #128	; 0x80
 800068a:	03d2      	lsls	r2, r2, #15
 800068c:	4213      	tst	r3, r2
 800068e:	d004      	beq.n	800069a <__aeabi_fadd+0x1a2>
 8000690:	4640      	mov	r0, r8
 8000692:	4210      	tst	r0, r2
 8000694:	d101      	bne.n	800069a <__aeabi_fadd+0x1a2>
 8000696:	000c      	movs	r4, r1
 8000698:	4643      	mov	r3, r8
 800069a:	2b00      	cmp	r3, #0
 800069c:	d0dc      	beq.n	8000658 <__aeabi_fadd+0x160>
 800069e:	2680      	movs	r6, #128	; 0x80
 80006a0:	03f6      	lsls	r6, r6, #15
 80006a2:	431e      	orrs	r6, r3
 80006a4:	0276      	lsls	r6, r6, #9
 80006a6:	20ff      	movs	r0, #255	; 0xff
 80006a8:	0a76      	lsrs	r6, r6, #9
 80006aa:	e7ac      	b.n	8000606 <__aeabi_fadd+0x10e>
 80006ac:	2a00      	cmp	r2, #0
 80006ae:	d0d6      	beq.n	800065e <__aeabi_fadd+0x166>
 80006b0:	1b42      	subs	r2, r0, r5
 80006b2:	2d00      	cmp	r5, #0
 80006b4:	d05c      	beq.n	8000770 <__aeabi_fadd+0x278>
 80006b6:	28ff      	cmp	r0, #255	; 0xff
 80006b8:	d0ee      	beq.n	8000698 <__aeabi_fadd+0x1a0>
 80006ba:	2380      	movs	r3, #128	; 0x80
 80006bc:	04db      	lsls	r3, r3, #19
 80006be:	431f      	orrs	r7, r3
 80006c0:	2a1b      	cmp	r2, #27
 80006c2:	dc00      	bgt.n	80006c6 <__aeabi_fadd+0x1ce>
 80006c4:	e082      	b.n	80007cc <__aeabi_fadd+0x2d4>
 80006c6:	2301      	movs	r3, #1
 80006c8:	464d      	mov	r5, r9
 80006ca:	4463      	add	r3, ip
 80006cc:	e763      	b.n	8000596 <__aeabi_fadd+0x9e>
 80006ce:	2220      	movs	r2, #32
 80006d0:	1b40      	subs	r0, r0, r5
 80006d2:	3001      	adds	r0, #1
 80006d4:	1a12      	subs	r2, r2, r0
 80006d6:	0019      	movs	r1, r3
 80006d8:	4093      	lsls	r3, r2
 80006da:	40c1      	lsrs	r1, r0
 80006dc:	1e5a      	subs	r2, r3, #1
 80006de:	4193      	sbcs	r3, r2
 80006e0:	2500      	movs	r5, #0
 80006e2:	430b      	orrs	r3, r1
 80006e4:	e780      	b.n	80005e8 <__aeabi_fadd+0xf0>
 80006e6:	2320      	movs	r3, #32
 80006e8:	4661      	mov	r1, ip
 80006ea:	1a1b      	subs	r3, r3, r0
 80006ec:	4099      	lsls	r1, r3
 80006ee:	4662      	mov	r2, ip
 80006f0:	000b      	movs	r3, r1
 80006f2:	40c2      	lsrs	r2, r0
 80006f4:	1e59      	subs	r1, r3, #1
 80006f6:	418b      	sbcs	r3, r1
 80006f8:	4313      	orrs	r3, r2
 80006fa:	e764      	b.n	80005c6 <__aeabi_fadd+0xce>
 80006fc:	000c      	movs	r4, r1
 80006fe:	4643      	mov	r3, r8
 8000700:	0015      	movs	r5, r2
 8000702:	e7b8      	b.n	8000676 <__aeabi_fadd+0x17e>
 8000704:	4663      	mov	r3, ip
 8000706:	1afe      	subs	r6, r7, r3
 8000708:	0173      	lsls	r3, r6, #5
 800070a:	d445      	bmi.n	8000798 <__aeabi_fadd+0x2a0>
 800070c:	2e00      	cmp	r6, #0
 800070e:	d000      	beq.n	8000712 <__aeabi_fadd+0x21a>
 8000710:	e75e      	b.n	80005d0 <__aeabi_fadd+0xd8>
 8000712:	2400      	movs	r4, #0
 8000714:	2000      	movs	r0, #0
 8000716:	2600      	movs	r6, #0
 8000718:	e775      	b.n	8000606 <__aeabi_fadd+0x10e>
 800071a:	2bff      	cmp	r3, #255	; 0xff
 800071c:	d0bb      	beq.n	8000696 <__aeabi_fadd+0x19e>
 800071e:	2380      	movs	r3, #128	; 0x80
 8000720:	04db      	lsls	r3, r3, #19
 8000722:	431f      	orrs	r7, r3
 8000724:	2a1b      	cmp	r2, #27
 8000726:	dd47      	ble.n	80007b8 <__aeabi_fadd+0x2c0>
 8000728:	2301      	movs	r3, #1
 800072a:	4662      	mov	r2, ip
 800072c:	000c      	movs	r4, r1
 800072e:	464d      	mov	r5, r9
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	e749      	b.n	80005c8 <__aeabi_fadd+0xd0>
 8000734:	0005      	movs	r5, r0
 8000736:	e79e      	b.n	8000676 <__aeabi_fadd+0x17e>
 8000738:	4661      	mov	r1, ip
 800073a:	2320      	movs	r3, #32
 800073c:	40d1      	lsrs	r1, r2
 800073e:	1a9b      	subs	r3, r3, r2
 8000740:	4662      	mov	r2, ip
 8000742:	409a      	lsls	r2, r3
 8000744:	0013      	movs	r3, r2
 8000746:	1e5a      	subs	r2, r3, #1
 8000748:	4193      	sbcs	r3, r2
 800074a:	430b      	orrs	r3, r1
 800074c:	e722      	b.n	8000594 <__aeabi_fadd+0x9c>
 800074e:	2d00      	cmp	r5, #0
 8000750:	d146      	bne.n	80007e0 <__aeabi_fadd+0x2e8>
 8000752:	2f00      	cmp	r7, #0
 8000754:	d062      	beq.n	800081c <__aeabi_fadd+0x324>
 8000756:	4663      	mov	r3, ip
 8000758:	2000      	movs	r0, #0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d100      	bne.n	8000760 <__aeabi_fadd+0x268>
 800075e:	e752      	b.n	8000606 <__aeabi_fadd+0x10e>
 8000760:	003b      	movs	r3, r7
 8000762:	4463      	add	r3, ip
 8000764:	015a      	lsls	r2, r3, #5
 8000766:	d583      	bpl.n	8000670 <__aeabi_fadd+0x178>
 8000768:	4a32      	ldr	r2, [pc, #200]	; (8000834 <__aeabi_fadd+0x33c>)
 800076a:	3501      	adds	r5, #1
 800076c:	4013      	ands	r3, r2
 800076e:	e77f      	b.n	8000670 <__aeabi_fadd+0x178>
 8000770:	2f00      	cmp	r7, #0
 8000772:	d0c4      	beq.n	80006fe <__aeabi_fadd+0x206>
 8000774:	1e53      	subs	r3, r2, #1
 8000776:	2a01      	cmp	r2, #1
 8000778:	d012      	beq.n	80007a0 <__aeabi_fadd+0x2a8>
 800077a:	2aff      	cmp	r2, #255	; 0xff
 800077c:	d08c      	beq.n	8000698 <__aeabi_fadd+0x1a0>
 800077e:	001a      	movs	r2, r3
 8000780:	e79e      	b.n	80006c0 <__aeabi_fadd+0x1c8>
 8000782:	2f00      	cmp	r7, #0
 8000784:	d000      	beq.n	8000788 <__aeabi_fadd+0x290>
 8000786:	e77c      	b.n	8000682 <__aeabi_fadd+0x18a>
 8000788:	4663      	mov	r3, ip
 800078a:	2b00      	cmp	r3, #0
 800078c:	d183      	bne.n	8000696 <__aeabi_fadd+0x19e>
 800078e:	2680      	movs	r6, #128	; 0x80
 8000790:	2400      	movs	r4, #0
 8000792:	20ff      	movs	r0, #255	; 0xff
 8000794:	03f6      	lsls	r6, r6, #15
 8000796:	e736      	b.n	8000606 <__aeabi_fadd+0x10e>
 8000798:	4663      	mov	r3, ip
 800079a:	000c      	movs	r4, r1
 800079c:	1bde      	subs	r6, r3, r7
 800079e:	e717      	b.n	80005d0 <__aeabi_fadd+0xd8>
 80007a0:	003b      	movs	r3, r7
 80007a2:	4463      	add	r3, ip
 80007a4:	2501      	movs	r5, #1
 80007a6:	015a      	lsls	r2, r3, #5
 80007a8:	d400      	bmi.n	80007ac <__aeabi_fadd+0x2b4>
 80007aa:	e761      	b.n	8000670 <__aeabi_fadd+0x178>
 80007ac:	2502      	movs	r5, #2
 80007ae:	e6f7      	b.n	80005a0 <__aeabi_fadd+0xa8>
 80007b0:	4663      	mov	r3, ip
 80007b2:	2501      	movs	r5, #1
 80007b4:	1afb      	subs	r3, r7, r3
 80007b6:	e707      	b.n	80005c8 <__aeabi_fadd+0xd0>
 80007b8:	2320      	movs	r3, #32
 80007ba:	1a9b      	subs	r3, r3, r2
 80007bc:	0038      	movs	r0, r7
 80007be:	409f      	lsls	r7, r3
 80007c0:	003b      	movs	r3, r7
 80007c2:	40d0      	lsrs	r0, r2
 80007c4:	1e5a      	subs	r2, r3, #1
 80007c6:	4193      	sbcs	r3, r2
 80007c8:	4303      	orrs	r3, r0
 80007ca:	e7ae      	b.n	800072a <__aeabi_fadd+0x232>
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	0039      	movs	r1, r7
 80007d2:	409f      	lsls	r7, r3
 80007d4:	003b      	movs	r3, r7
 80007d6:	40d1      	lsrs	r1, r2
 80007d8:	1e5a      	subs	r2, r3, #1
 80007da:	4193      	sbcs	r3, r2
 80007dc:	430b      	orrs	r3, r1
 80007de:	e773      	b.n	80006c8 <__aeabi_fadd+0x1d0>
 80007e0:	2f00      	cmp	r7, #0
 80007e2:	d100      	bne.n	80007e6 <__aeabi_fadd+0x2ee>
 80007e4:	e758      	b.n	8000698 <__aeabi_fadd+0x1a0>
 80007e6:	4662      	mov	r2, ip
 80007e8:	2a00      	cmp	r2, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0x2f6>
 80007ec:	e755      	b.n	800069a <__aeabi_fadd+0x1a2>
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	03d2      	lsls	r2, r2, #15
 80007f2:	4213      	tst	r3, r2
 80007f4:	d100      	bne.n	80007f8 <__aeabi_fadd+0x300>
 80007f6:	e750      	b.n	800069a <__aeabi_fadd+0x1a2>
 80007f8:	4641      	mov	r1, r8
 80007fa:	4211      	tst	r1, r2
 80007fc:	d000      	beq.n	8000800 <__aeabi_fadd+0x308>
 80007fe:	e74c      	b.n	800069a <__aeabi_fadd+0x1a2>
 8000800:	4643      	mov	r3, r8
 8000802:	e74a      	b.n	800069a <__aeabi_fadd+0x1a2>
 8000804:	4663      	mov	r3, ip
 8000806:	2b00      	cmp	r3, #0
 8000808:	d083      	beq.n	8000712 <__aeabi_fadd+0x21a>
 800080a:	000c      	movs	r4, r1
 800080c:	4646      	mov	r6, r8
 800080e:	2000      	movs	r0, #0
 8000810:	e6f9      	b.n	8000606 <__aeabi_fadd+0x10e>
 8000812:	4663      	mov	r3, ip
 8000814:	000c      	movs	r4, r1
 8000816:	1bdb      	subs	r3, r3, r7
 8000818:	3501      	adds	r5, #1
 800081a:	e6d5      	b.n	80005c8 <__aeabi_fadd+0xd0>
 800081c:	4646      	mov	r6, r8
 800081e:	2000      	movs	r0, #0
 8000820:	e6f1      	b.n	8000606 <__aeabi_fadd+0x10e>
 8000822:	2b00      	cmp	r3, #0
 8000824:	d000      	beq.n	8000828 <__aeabi_fadd+0x330>
 8000826:	e723      	b.n	8000670 <__aeabi_fadd+0x178>
 8000828:	2400      	movs	r4, #0
 800082a:	2600      	movs	r6, #0
 800082c:	e6eb      	b.n	8000606 <__aeabi_fadd+0x10e>
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	7dffffff 	.word	0x7dffffff
 8000834:	fbffffff 	.word	0xfbffffff

08000838 <__aeabi_fdiv>:
 8000838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083a:	464f      	mov	r7, r9
 800083c:	4646      	mov	r6, r8
 800083e:	46d6      	mov	lr, sl
 8000840:	0245      	lsls	r5, r0, #9
 8000842:	b5c0      	push	{r6, r7, lr}
 8000844:	0047      	lsls	r7, r0, #1
 8000846:	1c0c      	adds	r4, r1, #0
 8000848:	0a6d      	lsrs	r5, r5, #9
 800084a:	0e3f      	lsrs	r7, r7, #24
 800084c:	0fc6      	lsrs	r6, r0, #31
 800084e:	2f00      	cmp	r7, #0
 8000850:	d100      	bne.n	8000854 <__aeabi_fdiv+0x1c>
 8000852:	e06f      	b.n	8000934 <__aeabi_fdiv+0xfc>
 8000854:	2fff      	cmp	r7, #255	; 0xff
 8000856:	d100      	bne.n	800085a <__aeabi_fdiv+0x22>
 8000858:	e074      	b.n	8000944 <__aeabi_fdiv+0x10c>
 800085a:	2300      	movs	r3, #0
 800085c:	2280      	movs	r2, #128	; 0x80
 800085e:	4699      	mov	r9, r3
 8000860:	469a      	mov	sl, r3
 8000862:	00ed      	lsls	r5, r5, #3
 8000864:	04d2      	lsls	r2, r2, #19
 8000866:	4315      	orrs	r5, r2
 8000868:	3f7f      	subs	r7, #127	; 0x7f
 800086a:	0263      	lsls	r3, r4, #9
 800086c:	0a5b      	lsrs	r3, r3, #9
 800086e:	4698      	mov	r8, r3
 8000870:	0063      	lsls	r3, r4, #1
 8000872:	0e1b      	lsrs	r3, r3, #24
 8000874:	0fe4      	lsrs	r4, r4, #31
 8000876:	2b00      	cmp	r3, #0
 8000878:	d04d      	beq.n	8000916 <__aeabi_fdiv+0xde>
 800087a:	2bff      	cmp	r3, #255	; 0xff
 800087c:	d045      	beq.n	800090a <__aeabi_fdiv+0xd2>
 800087e:	4642      	mov	r2, r8
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	00d2      	lsls	r2, r2, #3
 8000884:	04c9      	lsls	r1, r1, #19
 8000886:	4311      	orrs	r1, r2
 8000888:	4688      	mov	r8, r1
 800088a:	2200      	movs	r2, #0
 800088c:	3b7f      	subs	r3, #127	; 0x7f
 800088e:	0031      	movs	r1, r6
 8000890:	1aff      	subs	r7, r7, r3
 8000892:	464b      	mov	r3, r9
 8000894:	4061      	eors	r1, r4
 8000896:	b2c9      	uxtb	r1, r1
 8000898:	2b0f      	cmp	r3, #15
 800089a:	d900      	bls.n	800089e <__aeabi_fdiv+0x66>
 800089c:	e0b8      	b.n	8000a10 <__aeabi_fdiv+0x1d8>
 800089e:	4870      	ldr	r0, [pc, #448]	; (8000a60 <__aeabi_fdiv+0x228>)
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	58c3      	ldr	r3, [r0, r3]
 80008a4:	469f      	mov	pc, r3
 80008a6:	2300      	movs	r3, #0
 80008a8:	4698      	mov	r8, r3
 80008aa:	0026      	movs	r6, r4
 80008ac:	4645      	mov	r5, r8
 80008ae:	4692      	mov	sl, r2
 80008b0:	4653      	mov	r3, sl
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d100      	bne.n	80008b8 <__aeabi_fdiv+0x80>
 80008b6:	e08d      	b.n	80009d4 <__aeabi_fdiv+0x19c>
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	d100      	bne.n	80008be <__aeabi_fdiv+0x86>
 80008bc:	e0a1      	b.n	8000a02 <__aeabi_fdiv+0x1ca>
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d018      	beq.n	80008f4 <__aeabi_fdiv+0xbc>
 80008c2:	003b      	movs	r3, r7
 80008c4:	337f      	adds	r3, #127	; 0x7f
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	dd6d      	ble.n	80009a6 <__aeabi_fdiv+0x16e>
 80008ca:	076a      	lsls	r2, r5, #29
 80008cc:	d004      	beq.n	80008d8 <__aeabi_fdiv+0xa0>
 80008ce:	220f      	movs	r2, #15
 80008d0:	402a      	ands	r2, r5
 80008d2:	2a04      	cmp	r2, #4
 80008d4:	d000      	beq.n	80008d8 <__aeabi_fdiv+0xa0>
 80008d6:	3504      	adds	r5, #4
 80008d8:	012a      	lsls	r2, r5, #4
 80008da:	d503      	bpl.n	80008e4 <__aeabi_fdiv+0xac>
 80008dc:	4b61      	ldr	r3, [pc, #388]	; (8000a64 <__aeabi_fdiv+0x22c>)
 80008de:	401d      	ands	r5, r3
 80008e0:	003b      	movs	r3, r7
 80008e2:	3380      	adds	r3, #128	; 0x80
 80008e4:	2bfe      	cmp	r3, #254	; 0xfe
 80008e6:	dd00      	ble.n	80008ea <__aeabi_fdiv+0xb2>
 80008e8:	e074      	b.n	80009d4 <__aeabi_fdiv+0x19c>
 80008ea:	01aa      	lsls	r2, r5, #6
 80008ec:	0a52      	lsrs	r2, r2, #9
 80008ee:	b2d8      	uxtb	r0, r3
 80008f0:	e002      	b.n	80008f8 <__aeabi_fdiv+0xc0>
 80008f2:	000e      	movs	r6, r1
 80008f4:	2000      	movs	r0, #0
 80008f6:	2200      	movs	r2, #0
 80008f8:	05c0      	lsls	r0, r0, #23
 80008fa:	07f6      	lsls	r6, r6, #31
 80008fc:	4310      	orrs	r0, r2
 80008fe:	4330      	orrs	r0, r6
 8000900:	bce0      	pop	{r5, r6, r7}
 8000902:	46ba      	mov	sl, r7
 8000904:	46b1      	mov	r9, r6
 8000906:	46a8      	mov	r8, r5
 8000908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800090a:	4643      	mov	r3, r8
 800090c:	2b00      	cmp	r3, #0
 800090e:	d13f      	bne.n	8000990 <__aeabi_fdiv+0x158>
 8000910:	2202      	movs	r2, #2
 8000912:	3fff      	subs	r7, #255	; 0xff
 8000914:	e003      	b.n	800091e <__aeabi_fdiv+0xe6>
 8000916:	4643      	mov	r3, r8
 8000918:	2b00      	cmp	r3, #0
 800091a:	d12d      	bne.n	8000978 <__aeabi_fdiv+0x140>
 800091c:	2201      	movs	r2, #1
 800091e:	0031      	movs	r1, r6
 8000920:	464b      	mov	r3, r9
 8000922:	4061      	eors	r1, r4
 8000924:	b2c9      	uxtb	r1, r1
 8000926:	4313      	orrs	r3, r2
 8000928:	2b0f      	cmp	r3, #15
 800092a:	d838      	bhi.n	800099e <__aeabi_fdiv+0x166>
 800092c:	484e      	ldr	r0, [pc, #312]	; (8000a68 <__aeabi_fdiv+0x230>)
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	58c3      	ldr	r3, [r0, r3]
 8000932:	469f      	mov	pc, r3
 8000934:	2d00      	cmp	r5, #0
 8000936:	d113      	bne.n	8000960 <__aeabi_fdiv+0x128>
 8000938:	2304      	movs	r3, #4
 800093a:	4699      	mov	r9, r3
 800093c:	3b03      	subs	r3, #3
 800093e:	2700      	movs	r7, #0
 8000940:	469a      	mov	sl, r3
 8000942:	e792      	b.n	800086a <__aeabi_fdiv+0x32>
 8000944:	2d00      	cmp	r5, #0
 8000946:	d105      	bne.n	8000954 <__aeabi_fdiv+0x11c>
 8000948:	2308      	movs	r3, #8
 800094a:	4699      	mov	r9, r3
 800094c:	3b06      	subs	r3, #6
 800094e:	27ff      	movs	r7, #255	; 0xff
 8000950:	469a      	mov	sl, r3
 8000952:	e78a      	b.n	800086a <__aeabi_fdiv+0x32>
 8000954:	230c      	movs	r3, #12
 8000956:	4699      	mov	r9, r3
 8000958:	3b09      	subs	r3, #9
 800095a:	27ff      	movs	r7, #255	; 0xff
 800095c:	469a      	mov	sl, r3
 800095e:	e784      	b.n	800086a <__aeabi_fdiv+0x32>
 8000960:	0028      	movs	r0, r5
 8000962:	f002 fb0f 	bl	8002f84 <__clzsi2>
 8000966:	2776      	movs	r7, #118	; 0x76
 8000968:	1f43      	subs	r3, r0, #5
 800096a:	409d      	lsls	r5, r3
 800096c:	2300      	movs	r3, #0
 800096e:	427f      	negs	r7, r7
 8000970:	4699      	mov	r9, r3
 8000972:	469a      	mov	sl, r3
 8000974:	1a3f      	subs	r7, r7, r0
 8000976:	e778      	b.n	800086a <__aeabi_fdiv+0x32>
 8000978:	4640      	mov	r0, r8
 800097a:	f002 fb03 	bl	8002f84 <__clzsi2>
 800097e:	4642      	mov	r2, r8
 8000980:	1f43      	subs	r3, r0, #5
 8000982:	409a      	lsls	r2, r3
 8000984:	2376      	movs	r3, #118	; 0x76
 8000986:	425b      	negs	r3, r3
 8000988:	4690      	mov	r8, r2
 800098a:	1a1b      	subs	r3, r3, r0
 800098c:	2200      	movs	r2, #0
 800098e:	e77e      	b.n	800088e <__aeabi_fdiv+0x56>
 8000990:	2303      	movs	r3, #3
 8000992:	464a      	mov	r2, r9
 8000994:	431a      	orrs	r2, r3
 8000996:	4691      	mov	r9, r2
 8000998:	33fc      	adds	r3, #252	; 0xfc
 800099a:	2203      	movs	r2, #3
 800099c:	e777      	b.n	800088e <__aeabi_fdiv+0x56>
 800099e:	000e      	movs	r6, r1
 80009a0:	20ff      	movs	r0, #255	; 0xff
 80009a2:	2200      	movs	r2, #0
 80009a4:	e7a8      	b.n	80008f8 <__aeabi_fdiv+0xc0>
 80009a6:	2201      	movs	r2, #1
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	2b1b      	cmp	r3, #27
 80009ac:	dca2      	bgt.n	80008f4 <__aeabi_fdiv+0xbc>
 80009ae:	379e      	adds	r7, #158	; 0x9e
 80009b0:	002a      	movs	r2, r5
 80009b2:	40bd      	lsls	r5, r7
 80009b4:	40da      	lsrs	r2, r3
 80009b6:	1e6b      	subs	r3, r5, #1
 80009b8:	419d      	sbcs	r5, r3
 80009ba:	4315      	orrs	r5, r2
 80009bc:	076a      	lsls	r2, r5, #29
 80009be:	d004      	beq.n	80009ca <__aeabi_fdiv+0x192>
 80009c0:	220f      	movs	r2, #15
 80009c2:	402a      	ands	r2, r5
 80009c4:	2a04      	cmp	r2, #4
 80009c6:	d000      	beq.n	80009ca <__aeabi_fdiv+0x192>
 80009c8:	3504      	adds	r5, #4
 80009ca:	016a      	lsls	r2, r5, #5
 80009cc:	d544      	bpl.n	8000a58 <__aeabi_fdiv+0x220>
 80009ce:	2001      	movs	r0, #1
 80009d0:	2200      	movs	r2, #0
 80009d2:	e791      	b.n	80008f8 <__aeabi_fdiv+0xc0>
 80009d4:	20ff      	movs	r0, #255	; 0xff
 80009d6:	2200      	movs	r2, #0
 80009d8:	e78e      	b.n	80008f8 <__aeabi_fdiv+0xc0>
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	2600      	movs	r6, #0
 80009de:	20ff      	movs	r0, #255	; 0xff
 80009e0:	03d2      	lsls	r2, r2, #15
 80009e2:	e789      	b.n	80008f8 <__aeabi_fdiv+0xc0>
 80009e4:	2300      	movs	r3, #0
 80009e6:	4698      	mov	r8, r3
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	03d2      	lsls	r2, r2, #15
 80009ec:	4215      	tst	r5, r2
 80009ee:	d008      	beq.n	8000a02 <__aeabi_fdiv+0x1ca>
 80009f0:	4643      	mov	r3, r8
 80009f2:	4213      	tst	r3, r2
 80009f4:	d105      	bne.n	8000a02 <__aeabi_fdiv+0x1ca>
 80009f6:	431a      	orrs	r2, r3
 80009f8:	0252      	lsls	r2, r2, #9
 80009fa:	0026      	movs	r6, r4
 80009fc:	20ff      	movs	r0, #255	; 0xff
 80009fe:	0a52      	lsrs	r2, r2, #9
 8000a00:	e77a      	b.n	80008f8 <__aeabi_fdiv+0xc0>
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	03d2      	lsls	r2, r2, #15
 8000a06:	432a      	orrs	r2, r5
 8000a08:	0252      	lsls	r2, r2, #9
 8000a0a:	20ff      	movs	r0, #255	; 0xff
 8000a0c:	0a52      	lsrs	r2, r2, #9
 8000a0e:	e773      	b.n	80008f8 <__aeabi_fdiv+0xc0>
 8000a10:	4642      	mov	r2, r8
 8000a12:	016b      	lsls	r3, r5, #5
 8000a14:	0155      	lsls	r5, r2, #5
 8000a16:	42ab      	cmp	r3, r5
 8000a18:	d21a      	bcs.n	8000a50 <__aeabi_fdiv+0x218>
 8000a1a:	201b      	movs	r0, #27
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	3f01      	subs	r7, #1
 8000a20:	2601      	movs	r6, #1
 8000a22:	001c      	movs	r4, r3
 8000a24:	0052      	lsls	r2, r2, #1
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	2c00      	cmp	r4, #0
 8000a2a:	db01      	blt.n	8000a30 <__aeabi_fdiv+0x1f8>
 8000a2c:	429d      	cmp	r5, r3
 8000a2e:	d801      	bhi.n	8000a34 <__aeabi_fdiv+0x1fc>
 8000a30:	1b5b      	subs	r3, r3, r5
 8000a32:	4332      	orrs	r2, r6
 8000a34:	3801      	subs	r0, #1
 8000a36:	2800      	cmp	r0, #0
 8000a38:	d1f3      	bne.n	8000a22 <__aeabi_fdiv+0x1ea>
 8000a3a:	1e58      	subs	r0, r3, #1
 8000a3c:	4183      	sbcs	r3, r0
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	001d      	movs	r5, r3
 8000a42:	003b      	movs	r3, r7
 8000a44:	337f      	adds	r3, #127	; 0x7f
 8000a46:	000e      	movs	r6, r1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	dd00      	ble.n	8000a4e <__aeabi_fdiv+0x216>
 8000a4c:	e73d      	b.n	80008ca <__aeabi_fdiv+0x92>
 8000a4e:	e7aa      	b.n	80009a6 <__aeabi_fdiv+0x16e>
 8000a50:	201a      	movs	r0, #26
 8000a52:	2201      	movs	r2, #1
 8000a54:	1b5b      	subs	r3, r3, r5
 8000a56:	e7e3      	b.n	8000a20 <__aeabi_fdiv+0x1e8>
 8000a58:	01aa      	lsls	r2, r5, #6
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	0a52      	lsrs	r2, r2, #9
 8000a5e:	e74b      	b.n	80008f8 <__aeabi_fdiv+0xc0>
 8000a60:	0800cd68 	.word	0x0800cd68
 8000a64:	f7ffffff 	.word	0xf7ffffff
 8000a68:	0800cda8 	.word	0x0800cda8

08000a6c <__eqsf2>:
 8000a6c:	b570      	push	{r4, r5, r6, lr}
 8000a6e:	0042      	lsls	r2, r0, #1
 8000a70:	0245      	lsls	r5, r0, #9
 8000a72:	024e      	lsls	r6, r1, #9
 8000a74:	004c      	lsls	r4, r1, #1
 8000a76:	0fc3      	lsrs	r3, r0, #31
 8000a78:	0a6d      	lsrs	r5, r5, #9
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	0e12      	lsrs	r2, r2, #24
 8000a7e:	0a76      	lsrs	r6, r6, #9
 8000a80:	0e24      	lsrs	r4, r4, #24
 8000a82:	0fc9      	lsrs	r1, r1, #31
 8000a84:	2aff      	cmp	r2, #255	; 0xff
 8000a86:	d006      	beq.n	8000a96 <__eqsf2+0x2a>
 8000a88:	2cff      	cmp	r4, #255	; 0xff
 8000a8a:	d003      	beq.n	8000a94 <__eqsf2+0x28>
 8000a8c:	42a2      	cmp	r2, r4
 8000a8e:	d101      	bne.n	8000a94 <__eqsf2+0x28>
 8000a90:	42b5      	cmp	r5, r6
 8000a92:	d006      	beq.n	8000aa2 <__eqsf2+0x36>
 8000a94:	bd70      	pop	{r4, r5, r6, pc}
 8000a96:	2d00      	cmp	r5, #0
 8000a98:	d1fc      	bne.n	8000a94 <__eqsf2+0x28>
 8000a9a:	2cff      	cmp	r4, #255	; 0xff
 8000a9c:	d1fa      	bne.n	8000a94 <__eqsf2+0x28>
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	d1f8      	bne.n	8000a94 <__eqsf2+0x28>
 8000aa2:	428b      	cmp	r3, r1
 8000aa4:	d006      	beq.n	8000ab4 <__eqsf2+0x48>
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	2a00      	cmp	r2, #0
 8000aaa:	d1f3      	bne.n	8000a94 <__eqsf2+0x28>
 8000aac:	0028      	movs	r0, r5
 8000aae:	1e43      	subs	r3, r0, #1
 8000ab0:	4198      	sbcs	r0, r3
 8000ab2:	e7ef      	b.n	8000a94 <__eqsf2+0x28>
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	e7ed      	b.n	8000a94 <__eqsf2+0x28>

08000ab8 <__gesf2>:
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	0042      	lsls	r2, r0, #1
 8000abc:	0245      	lsls	r5, r0, #9
 8000abe:	024e      	lsls	r6, r1, #9
 8000ac0:	004c      	lsls	r4, r1, #1
 8000ac2:	0fc3      	lsrs	r3, r0, #31
 8000ac4:	0a6d      	lsrs	r5, r5, #9
 8000ac6:	0e12      	lsrs	r2, r2, #24
 8000ac8:	0a76      	lsrs	r6, r6, #9
 8000aca:	0e24      	lsrs	r4, r4, #24
 8000acc:	0fc8      	lsrs	r0, r1, #31
 8000ace:	2aff      	cmp	r2, #255	; 0xff
 8000ad0:	d01b      	beq.n	8000b0a <__gesf2+0x52>
 8000ad2:	2cff      	cmp	r4, #255	; 0xff
 8000ad4:	d00e      	beq.n	8000af4 <__gesf2+0x3c>
 8000ad6:	2a00      	cmp	r2, #0
 8000ad8:	d11b      	bne.n	8000b12 <__gesf2+0x5a>
 8000ada:	2c00      	cmp	r4, #0
 8000adc:	d101      	bne.n	8000ae2 <__gesf2+0x2a>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	d01c      	beq.n	8000b1c <__gesf2+0x64>
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	d00c      	beq.n	8000b00 <__gesf2+0x48>
 8000ae6:	4283      	cmp	r3, r0
 8000ae8:	d01c      	beq.n	8000b24 <__gesf2+0x6c>
 8000aea:	2102      	movs	r1, #2
 8000aec:	1e58      	subs	r0, r3, #1
 8000aee:	4008      	ands	r0, r1
 8000af0:	3801      	subs	r0, #1
 8000af2:	bd70      	pop	{r4, r5, r6, pc}
 8000af4:	2e00      	cmp	r6, #0
 8000af6:	d122      	bne.n	8000b3e <__gesf2+0x86>
 8000af8:	2a00      	cmp	r2, #0
 8000afa:	d1f4      	bne.n	8000ae6 <__gesf2+0x2e>
 8000afc:	2d00      	cmp	r5, #0
 8000afe:	d1f2      	bne.n	8000ae6 <__gesf2+0x2e>
 8000b00:	2800      	cmp	r0, #0
 8000b02:	d1f6      	bne.n	8000af2 <__gesf2+0x3a>
 8000b04:	2001      	movs	r0, #1
 8000b06:	4240      	negs	r0, r0
 8000b08:	e7f3      	b.n	8000af2 <__gesf2+0x3a>
 8000b0a:	2d00      	cmp	r5, #0
 8000b0c:	d117      	bne.n	8000b3e <__gesf2+0x86>
 8000b0e:	2cff      	cmp	r4, #255	; 0xff
 8000b10:	d0f0      	beq.n	8000af4 <__gesf2+0x3c>
 8000b12:	2c00      	cmp	r4, #0
 8000b14:	d1e7      	bne.n	8000ae6 <__gesf2+0x2e>
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d1e5      	bne.n	8000ae6 <__gesf2+0x2e>
 8000b1a:	e7e6      	b.n	8000aea <__gesf2+0x32>
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d0e7      	beq.n	8000af2 <__gesf2+0x3a>
 8000b22:	e7e2      	b.n	8000aea <__gesf2+0x32>
 8000b24:	42a2      	cmp	r2, r4
 8000b26:	dc05      	bgt.n	8000b34 <__gesf2+0x7c>
 8000b28:	dbea      	blt.n	8000b00 <__gesf2+0x48>
 8000b2a:	42b5      	cmp	r5, r6
 8000b2c:	d802      	bhi.n	8000b34 <__gesf2+0x7c>
 8000b2e:	d3e7      	bcc.n	8000b00 <__gesf2+0x48>
 8000b30:	2000      	movs	r0, #0
 8000b32:	e7de      	b.n	8000af2 <__gesf2+0x3a>
 8000b34:	4243      	negs	r3, r0
 8000b36:	4158      	adcs	r0, r3
 8000b38:	0040      	lsls	r0, r0, #1
 8000b3a:	3801      	subs	r0, #1
 8000b3c:	e7d9      	b.n	8000af2 <__gesf2+0x3a>
 8000b3e:	2002      	movs	r0, #2
 8000b40:	4240      	negs	r0, r0
 8000b42:	e7d6      	b.n	8000af2 <__gesf2+0x3a>

08000b44 <__lesf2>:
 8000b44:	b570      	push	{r4, r5, r6, lr}
 8000b46:	0042      	lsls	r2, r0, #1
 8000b48:	0245      	lsls	r5, r0, #9
 8000b4a:	024e      	lsls	r6, r1, #9
 8000b4c:	004c      	lsls	r4, r1, #1
 8000b4e:	0fc3      	lsrs	r3, r0, #31
 8000b50:	0a6d      	lsrs	r5, r5, #9
 8000b52:	0e12      	lsrs	r2, r2, #24
 8000b54:	0a76      	lsrs	r6, r6, #9
 8000b56:	0e24      	lsrs	r4, r4, #24
 8000b58:	0fc8      	lsrs	r0, r1, #31
 8000b5a:	2aff      	cmp	r2, #255	; 0xff
 8000b5c:	d00b      	beq.n	8000b76 <__lesf2+0x32>
 8000b5e:	2cff      	cmp	r4, #255	; 0xff
 8000b60:	d00d      	beq.n	8000b7e <__lesf2+0x3a>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	d11f      	bne.n	8000ba6 <__lesf2+0x62>
 8000b66:	2c00      	cmp	r4, #0
 8000b68:	d116      	bne.n	8000b98 <__lesf2+0x54>
 8000b6a:	2e00      	cmp	r6, #0
 8000b6c:	d114      	bne.n	8000b98 <__lesf2+0x54>
 8000b6e:	2000      	movs	r0, #0
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d010      	beq.n	8000b96 <__lesf2+0x52>
 8000b74:	e009      	b.n	8000b8a <__lesf2+0x46>
 8000b76:	2d00      	cmp	r5, #0
 8000b78:	d10c      	bne.n	8000b94 <__lesf2+0x50>
 8000b7a:	2cff      	cmp	r4, #255	; 0xff
 8000b7c:	d113      	bne.n	8000ba6 <__lesf2+0x62>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d108      	bne.n	8000b94 <__lesf2+0x50>
 8000b82:	2a00      	cmp	r2, #0
 8000b84:	d008      	beq.n	8000b98 <__lesf2+0x54>
 8000b86:	4283      	cmp	r3, r0
 8000b88:	d012      	beq.n	8000bb0 <__lesf2+0x6c>
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	1e58      	subs	r0, r3, #1
 8000b8e:	4008      	ands	r0, r1
 8000b90:	3801      	subs	r0, #1
 8000b92:	e000      	b.n	8000b96 <__lesf2+0x52>
 8000b94:	2002      	movs	r0, #2
 8000b96:	bd70      	pop	{r4, r5, r6, pc}
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	d1f4      	bne.n	8000b86 <__lesf2+0x42>
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	d1fa      	bne.n	8000b96 <__lesf2+0x52>
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	4240      	negs	r0, r0
 8000ba4:	e7f7      	b.n	8000b96 <__lesf2+0x52>
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	d1ed      	bne.n	8000b86 <__lesf2+0x42>
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	d1eb      	bne.n	8000b86 <__lesf2+0x42>
 8000bae:	e7ec      	b.n	8000b8a <__lesf2+0x46>
 8000bb0:	42a2      	cmp	r2, r4
 8000bb2:	dc05      	bgt.n	8000bc0 <__lesf2+0x7c>
 8000bb4:	dbf2      	blt.n	8000b9c <__lesf2+0x58>
 8000bb6:	42b5      	cmp	r5, r6
 8000bb8:	d802      	bhi.n	8000bc0 <__lesf2+0x7c>
 8000bba:	d3ef      	bcc.n	8000b9c <__lesf2+0x58>
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7ea      	b.n	8000b96 <__lesf2+0x52>
 8000bc0:	4243      	negs	r3, r0
 8000bc2:	4158      	adcs	r0, r3
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	3801      	subs	r0, #1
 8000bc8:	e7e5      	b.n	8000b96 <__lesf2+0x52>
 8000bca:	46c0      	nop			; (mov r8, r8)

08000bcc <__aeabi_fmul>:
 8000bcc:	0243      	lsls	r3, r0, #9
 8000bce:	0a5b      	lsrs	r3, r3, #9
 8000bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd2:	464f      	mov	r7, r9
 8000bd4:	4646      	mov	r6, r8
 8000bd6:	4699      	mov	r9, r3
 8000bd8:	46d6      	mov	lr, sl
 8000bda:	0fc3      	lsrs	r3, r0, #31
 8000bdc:	0045      	lsls	r5, r0, #1
 8000bde:	4698      	mov	r8, r3
 8000be0:	b5c0      	push	{r6, r7, lr}
 8000be2:	464b      	mov	r3, r9
 8000be4:	1c0f      	adds	r7, r1, #0
 8000be6:	0e2d      	lsrs	r5, r5, #24
 8000be8:	d100      	bne.n	8000bec <__aeabi_fmul+0x20>
 8000bea:	e0cb      	b.n	8000d84 <__aeabi_fmul+0x1b8>
 8000bec:	2dff      	cmp	r5, #255	; 0xff
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_fmul+0x26>
 8000bf0:	e0cf      	b.n	8000d92 <__aeabi_fmul+0x1c6>
 8000bf2:	2280      	movs	r2, #128	; 0x80
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	04d2      	lsls	r2, r2, #19
 8000bf8:	431a      	orrs	r2, r3
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	4691      	mov	r9, r2
 8000bfe:	2600      	movs	r6, #0
 8000c00:	469a      	mov	sl, r3
 8000c02:	3d7f      	subs	r5, #127	; 0x7f
 8000c04:	027c      	lsls	r4, r7, #9
 8000c06:	007b      	lsls	r3, r7, #1
 8000c08:	0a64      	lsrs	r4, r4, #9
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0fff      	lsrs	r7, r7, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d100      	bne.n	8000c14 <__aeabi_fmul+0x48>
 8000c12:	e0a9      	b.n	8000d68 <__aeabi_fmul+0x19c>
 8000c14:	2bff      	cmp	r3, #255	; 0xff
 8000c16:	d011      	beq.n	8000c3c <__aeabi_fmul+0x70>
 8000c18:	2280      	movs	r2, #128	; 0x80
 8000c1a:	00e4      	lsls	r4, r4, #3
 8000c1c:	04d2      	lsls	r2, r2, #19
 8000c1e:	4314      	orrs	r4, r2
 8000c20:	4642      	mov	r2, r8
 8000c22:	3b7f      	subs	r3, #127	; 0x7f
 8000c24:	195b      	adds	r3, r3, r5
 8000c26:	407a      	eors	r2, r7
 8000c28:	2000      	movs	r0, #0
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	1c5d      	adds	r5, r3, #1
 8000c2e:	2e0a      	cmp	r6, #10
 8000c30:	dd13      	ble.n	8000c5a <__aeabi_fmul+0x8e>
 8000c32:	003a      	movs	r2, r7
 8000c34:	2e0b      	cmp	r6, #11
 8000c36:	d047      	beq.n	8000cc8 <__aeabi_fmul+0xfc>
 8000c38:	4647      	mov	r7, r8
 8000c3a:	e03f      	b.n	8000cbc <__aeabi_fmul+0xf0>
 8000c3c:	002b      	movs	r3, r5
 8000c3e:	33ff      	adds	r3, #255	; 0xff
 8000c40:	2c00      	cmp	r4, #0
 8000c42:	d11e      	bne.n	8000c82 <__aeabi_fmul+0xb6>
 8000c44:	2202      	movs	r2, #2
 8000c46:	4316      	orrs	r6, r2
 8000c48:	4642      	mov	r2, r8
 8000c4a:	3501      	adds	r5, #1
 8000c4c:	407a      	eors	r2, r7
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	35ff      	adds	r5, #255	; 0xff
 8000c52:	2e0a      	cmp	r6, #10
 8000c54:	dd00      	ble.n	8000c58 <__aeabi_fmul+0x8c>
 8000c56:	e0e4      	b.n	8000e22 <__aeabi_fmul+0x256>
 8000c58:	2002      	movs	r0, #2
 8000c5a:	2e02      	cmp	r6, #2
 8000c5c:	dc1c      	bgt.n	8000c98 <__aeabi_fmul+0xcc>
 8000c5e:	3e01      	subs	r6, #1
 8000c60:	2e01      	cmp	r6, #1
 8000c62:	d842      	bhi.n	8000cea <__aeabi_fmul+0x11e>
 8000c64:	2802      	cmp	r0, #2
 8000c66:	d03d      	beq.n	8000ce4 <__aeabi_fmul+0x118>
 8000c68:	2801      	cmp	r0, #1
 8000c6a:	d166      	bne.n	8000d3a <__aeabi_fmul+0x16e>
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	2100      	movs	r1, #0
 8000c70:	05c0      	lsls	r0, r0, #23
 8000c72:	4308      	orrs	r0, r1
 8000c74:	07d2      	lsls	r2, r2, #31
 8000c76:	4310      	orrs	r0, r2
 8000c78:	bce0      	pop	{r5, r6, r7}
 8000c7a:	46ba      	mov	sl, r7
 8000c7c:	46b1      	mov	r9, r6
 8000c7e:	46a8      	mov	r8, r5
 8000c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c82:	2203      	movs	r2, #3
 8000c84:	4316      	orrs	r6, r2
 8000c86:	4642      	mov	r2, r8
 8000c88:	3501      	adds	r5, #1
 8000c8a:	407a      	eors	r2, r7
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	35ff      	adds	r5, #255	; 0xff
 8000c90:	2e0a      	cmp	r6, #10
 8000c92:	dd00      	ble.n	8000c96 <__aeabi_fmul+0xca>
 8000c94:	e0e4      	b.n	8000e60 <__aeabi_fmul+0x294>
 8000c96:	2003      	movs	r0, #3
 8000c98:	2101      	movs	r1, #1
 8000c9a:	40b1      	lsls	r1, r6
 8000c9c:	26a6      	movs	r6, #166	; 0xa6
 8000c9e:	00f6      	lsls	r6, r6, #3
 8000ca0:	4231      	tst	r1, r6
 8000ca2:	d10a      	bne.n	8000cba <__aeabi_fmul+0xee>
 8000ca4:	2690      	movs	r6, #144	; 0x90
 8000ca6:	00b6      	lsls	r6, r6, #2
 8000ca8:	4231      	tst	r1, r6
 8000caa:	d116      	bne.n	8000cda <__aeabi_fmul+0x10e>
 8000cac:	3eb9      	subs	r6, #185	; 0xb9
 8000cae:	3eff      	subs	r6, #255	; 0xff
 8000cb0:	420e      	tst	r6, r1
 8000cb2:	d01a      	beq.n	8000cea <__aeabi_fmul+0x11e>
 8000cb4:	46a1      	mov	r9, r4
 8000cb6:	4682      	mov	sl, r0
 8000cb8:	e000      	b.n	8000cbc <__aeabi_fmul+0xf0>
 8000cba:	0017      	movs	r7, r2
 8000cbc:	4653      	mov	r3, sl
 8000cbe:	003a      	movs	r2, r7
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d00f      	beq.n	8000ce4 <__aeabi_fmul+0x118>
 8000cc4:	464c      	mov	r4, r9
 8000cc6:	4650      	mov	r0, sl
 8000cc8:	2803      	cmp	r0, #3
 8000cca:	d1cd      	bne.n	8000c68 <__aeabi_fmul+0x9c>
 8000ccc:	2180      	movs	r1, #128	; 0x80
 8000cce:	03c9      	lsls	r1, r1, #15
 8000cd0:	4321      	orrs	r1, r4
 8000cd2:	0249      	lsls	r1, r1, #9
 8000cd4:	20ff      	movs	r0, #255	; 0xff
 8000cd6:	0a49      	lsrs	r1, r1, #9
 8000cd8:	e7ca      	b.n	8000c70 <__aeabi_fmul+0xa4>
 8000cda:	2180      	movs	r1, #128	; 0x80
 8000cdc:	2200      	movs	r2, #0
 8000cde:	20ff      	movs	r0, #255	; 0xff
 8000ce0:	03c9      	lsls	r1, r1, #15
 8000ce2:	e7c5      	b.n	8000c70 <__aeabi_fmul+0xa4>
 8000ce4:	20ff      	movs	r0, #255	; 0xff
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	e7c2      	b.n	8000c70 <__aeabi_fmul+0xa4>
 8000cea:	0c20      	lsrs	r0, r4, #16
 8000cec:	4649      	mov	r1, r9
 8000cee:	0424      	lsls	r4, r4, #16
 8000cf0:	0c24      	lsrs	r4, r4, #16
 8000cf2:	0027      	movs	r7, r4
 8000cf4:	0c0e      	lsrs	r6, r1, #16
 8000cf6:	0409      	lsls	r1, r1, #16
 8000cf8:	0c09      	lsrs	r1, r1, #16
 8000cfa:	4374      	muls	r4, r6
 8000cfc:	434f      	muls	r7, r1
 8000cfe:	4346      	muls	r6, r0
 8000d00:	4348      	muls	r0, r1
 8000d02:	0c39      	lsrs	r1, r7, #16
 8000d04:	1900      	adds	r0, r0, r4
 8000d06:	1809      	adds	r1, r1, r0
 8000d08:	428c      	cmp	r4, r1
 8000d0a:	d903      	bls.n	8000d14 <__aeabi_fmul+0x148>
 8000d0c:	2080      	movs	r0, #128	; 0x80
 8000d0e:	0240      	lsls	r0, r0, #9
 8000d10:	4684      	mov	ip, r0
 8000d12:	4466      	add	r6, ip
 8000d14:	043f      	lsls	r7, r7, #16
 8000d16:	0408      	lsls	r0, r1, #16
 8000d18:	0c3f      	lsrs	r7, r7, #16
 8000d1a:	19c0      	adds	r0, r0, r7
 8000d1c:	0184      	lsls	r4, r0, #6
 8000d1e:	1e67      	subs	r7, r4, #1
 8000d20:	41bc      	sbcs	r4, r7
 8000d22:	0c09      	lsrs	r1, r1, #16
 8000d24:	0e80      	lsrs	r0, r0, #26
 8000d26:	1989      	adds	r1, r1, r6
 8000d28:	4304      	orrs	r4, r0
 8000d2a:	0189      	lsls	r1, r1, #6
 8000d2c:	430c      	orrs	r4, r1
 8000d2e:	0109      	lsls	r1, r1, #4
 8000d30:	d571      	bpl.n	8000e16 <__aeabi_fmul+0x24a>
 8000d32:	2301      	movs	r3, #1
 8000d34:	0861      	lsrs	r1, r4, #1
 8000d36:	401c      	ands	r4, r3
 8000d38:	430c      	orrs	r4, r1
 8000d3a:	002b      	movs	r3, r5
 8000d3c:	337f      	adds	r3, #127	; 0x7f
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	dd51      	ble.n	8000de6 <__aeabi_fmul+0x21a>
 8000d42:	0761      	lsls	r1, r4, #29
 8000d44:	d004      	beq.n	8000d50 <__aeabi_fmul+0x184>
 8000d46:	210f      	movs	r1, #15
 8000d48:	4021      	ands	r1, r4
 8000d4a:	2904      	cmp	r1, #4
 8000d4c:	d000      	beq.n	8000d50 <__aeabi_fmul+0x184>
 8000d4e:	3404      	adds	r4, #4
 8000d50:	0121      	lsls	r1, r4, #4
 8000d52:	d503      	bpl.n	8000d5c <__aeabi_fmul+0x190>
 8000d54:	4b43      	ldr	r3, [pc, #268]	; (8000e64 <__aeabi_fmul+0x298>)
 8000d56:	401c      	ands	r4, r3
 8000d58:	002b      	movs	r3, r5
 8000d5a:	3380      	adds	r3, #128	; 0x80
 8000d5c:	2bfe      	cmp	r3, #254	; 0xfe
 8000d5e:	dcc1      	bgt.n	8000ce4 <__aeabi_fmul+0x118>
 8000d60:	01a1      	lsls	r1, r4, #6
 8000d62:	0a49      	lsrs	r1, r1, #9
 8000d64:	b2d8      	uxtb	r0, r3
 8000d66:	e783      	b.n	8000c70 <__aeabi_fmul+0xa4>
 8000d68:	2c00      	cmp	r4, #0
 8000d6a:	d12c      	bne.n	8000dc6 <__aeabi_fmul+0x1fa>
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	4642      	mov	r2, r8
 8000d70:	431e      	orrs	r6, r3
 8000d72:	002b      	movs	r3, r5
 8000d74:	407a      	eors	r2, r7
 8000d76:	2001      	movs	r0, #1
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	1c5d      	adds	r5, r3, #1
 8000d7c:	2e0a      	cmp	r6, #10
 8000d7e:	dd00      	ble.n	8000d82 <__aeabi_fmul+0x1b6>
 8000d80:	e757      	b.n	8000c32 <__aeabi_fmul+0x66>
 8000d82:	e76a      	b.n	8000c5a <__aeabi_fmul+0x8e>
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d110      	bne.n	8000daa <__aeabi_fmul+0x1de>
 8000d88:	2301      	movs	r3, #1
 8000d8a:	2604      	movs	r6, #4
 8000d8c:	2500      	movs	r5, #0
 8000d8e:	469a      	mov	sl, r3
 8000d90:	e738      	b.n	8000c04 <__aeabi_fmul+0x38>
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d104      	bne.n	8000da0 <__aeabi_fmul+0x1d4>
 8000d96:	2302      	movs	r3, #2
 8000d98:	2608      	movs	r6, #8
 8000d9a:	25ff      	movs	r5, #255	; 0xff
 8000d9c:	469a      	mov	sl, r3
 8000d9e:	e731      	b.n	8000c04 <__aeabi_fmul+0x38>
 8000da0:	2303      	movs	r3, #3
 8000da2:	260c      	movs	r6, #12
 8000da4:	25ff      	movs	r5, #255	; 0xff
 8000da6:	469a      	mov	sl, r3
 8000da8:	e72c      	b.n	8000c04 <__aeabi_fmul+0x38>
 8000daa:	4648      	mov	r0, r9
 8000dac:	f002 f8ea 	bl	8002f84 <__clzsi2>
 8000db0:	464a      	mov	r2, r9
 8000db2:	1f43      	subs	r3, r0, #5
 8000db4:	2576      	movs	r5, #118	; 0x76
 8000db6:	409a      	lsls	r2, r3
 8000db8:	2300      	movs	r3, #0
 8000dba:	426d      	negs	r5, r5
 8000dbc:	4691      	mov	r9, r2
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	469a      	mov	sl, r3
 8000dc2:	1a2d      	subs	r5, r5, r0
 8000dc4:	e71e      	b.n	8000c04 <__aeabi_fmul+0x38>
 8000dc6:	0020      	movs	r0, r4
 8000dc8:	f002 f8dc 	bl	8002f84 <__clzsi2>
 8000dcc:	4642      	mov	r2, r8
 8000dce:	1f43      	subs	r3, r0, #5
 8000dd0:	409c      	lsls	r4, r3
 8000dd2:	1a2b      	subs	r3, r5, r0
 8000dd4:	3b76      	subs	r3, #118	; 0x76
 8000dd6:	407a      	eors	r2, r7
 8000dd8:	2000      	movs	r0, #0
 8000dda:	b2d2      	uxtb	r2, r2
 8000ddc:	1c5d      	adds	r5, r3, #1
 8000dde:	2e0a      	cmp	r6, #10
 8000de0:	dd00      	ble.n	8000de4 <__aeabi_fmul+0x218>
 8000de2:	e726      	b.n	8000c32 <__aeabi_fmul+0x66>
 8000de4:	e739      	b.n	8000c5a <__aeabi_fmul+0x8e>
 8000de6:	2101      	movs	r1, #1
 8000de8:	1acb      	subs	r3, r1, r3
 8000dea:	2b1b      	cmp	r3, #27
 8000dec:	dd00      	ble.n	8000df0 <__aeabi_fmul+0x224>
 8000dee:	e73d      	b.n	8000c6c <__aeabi_fmul+0xa0>
 8000df0:	359e      	adds	r5, #158	; 0x9e
 8000df2:	0021      	movs	r1, r4
 8000df4:	40ac      	lsls	r4, r5
 8000df6:	40d9      	lsrs	r1, r3
 8000df8:	1e63      	subs	r3, r4, #1
 8000dfa:	419c      	sbcs	r4, r3
 8000dfc:	4321      	orrs	r1, r4
 8000dfe:	074b      	lsls	r3, r1, #29
 8000e00:	d004      	beq.n	8000e0c <__aeabi_fmul+0x240>
 8000e02:	230f      	movs	r3, #15
 8000e04:	400b      	ands	r3, r1
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	d000      	beq.n	8000e0c <__aeabi_fmul+0x240>
 8000e0a:	3104      	adds	r1, #4
 8000e0c:	014b      	lsls	r3, r1, #5
 8000e0e:	d504      	bpl.n	8000e1a <__aeabi_fmul+0x24e>
 8000e10:	2001      	movs	r0, #1
 8000e12:	2100      	movs	r1, #0
 8000e14:	e72c      	b.n	8000c70 <__aeabi_fmul+0xa4>
 8000e16:	001d      	movs	r5, r3
 8000e18:	e78f      	b.n	8000d3a <__aeabi_fmul+0x16e>
 8000e1a:	0189      	lsls	r1, r1, #6
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	0a49      	lsrs	r1, r1, #9
 8000e20:	e726      	b.n	8000c70 <__aeabi_fmul+0xa4>
 8000e22:	2302      	movs	r3, #2
 8000e24:	2e0f      	cmp	r6, #15
 8000e26:	d10c      	bne.n	8000e42 <__aeabi_fmul+0x276>
 8000e28:	2180      	movs	r1, #128	; 0x80
 8000e2a:	464b      	mov	r3, r9
 8000e2c:	03c9      	lsls	r1, r1, #15
 8000e2e:	420b      	tst	r3, r1
 8000e30:	d00d      	beq.n	8000e4e <__aeabi_fmul+0x282>
 8000e32:	420c      	tst	r4, r1
 8000e34:	d10b      	bne.n	8000e4e <__aeabi_fmul+0x282>
 8000e36:	4321      	orrs	r1, r4
 8000e38:	0249      	lsls	r1, r1, #9
 8000e3a:	003a      	movs	r2, r7
 8000e3c:	20ff      	movs	r0, #255	; 0xff
 8000e3e:	0a49      	lsrs	r1, r1, #9
 8000e40:	e716      	b.n	8000c70 <__aeabi_fmul+0xa4>
 8000e42:	2e0b      	cmp	r6, #11
 8000e44:	d000      	beq.n	8000e48 <__aeabi_fmul+0x27c>
 8000e46:	e6f7      	b.n	8000c38 <__aeabi_fmul+0x6c>
 8000e48:	46a1      	mov	r9, r4
 8000e4a:	469a      	mov	sl, r3
 8000e4c:	e736      	b.n	8000cbc <__aeabi_fmul+0xf0>
 8000e4e:	2180      	movs	r1, #128	; 0x80
 8000e50:	464b      	mov	r3, r9
 8000e52:	03c9      	lsls	r1, r1, #15
 8000e54:	4319      	orrs	r1, r3
 8000e56:	0249      	lsls	r1, r1, #9
 8000e58:	4642      	mov	r2, r8
 8000e5a:	20ff      	movs	r0, #255	; 0xff
 8000e5c:	0a49      	lsrs	r1, r1, #9
 8000e5e:	e707      	b.n	8000c70 <__aeabi_fmul+0xa4>
 8000e60:	2303      	movs	r3, #3
 8000e62:	e7df      	b.n	8000e24 <__aeabi_fmul+0x258>
 8000e64:	f7ffffff 	.word	0xf7ffffff

08000e68 <__aeabi_fsub>:
 8000e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e6a:	46c6      	mov	lr, r8
 8000e6c:	0243      	lsls	r3, r0, #9
 8000e6e:	0a5b      	lsrs	r3, r3, #9
 8000e70:	0045      	lsls	r5, r0, #1
 8000e72:	00da      	lsls	r2, r3, #3
 8000e74:	0fc4      	lsrs	r4, r0, #31
 8000e76:	0248      	lsls	r0, r1, #9
 8000e78:	004f      	lsls	r7, r1, #1
 8000e7a:	4694      	mov	ip, r2
 8000e7c:	0a42      	lsrs	r2, r0, #9
 8000e7e:	001e      	movs	r6, r3
 8000e80:	4690      	mov	r8, r2
 8000e82:	b500      	push	{lr}
 8000e84:	0e2d      	lsrs	r5, r5, #24
 8000e86:	0e3f      	lsrs	r7, r7, #24
 8000e88:	0fc9      	lsrs	r1, r1, #31
 8000e8a:	0980      	lsrs	r0, r0, #6
 8000e8c:	2fff      	cmp	r7, #255	; 0xff
 8000e8e:	d059      	beq.n	8000f44 <__aeabi_fsub+0xdc>
 8000e90:	2201      	movs	r2, #1
 8000e92:	4051      	eors	r1, r2
 8000e94:	428c      	cmp	r4, r1
 8000e96:	d039      	beq.n	8000f0c <__aeabi_fsub+0xa4>
 8000e98:	1bea      	subs	r2, r5, r7
 8000e9a:	2a00      	cmp	r2, #0
 8000e9c:	dd58      	ble.n	8000f50 <__aeabi_fsub+0xe8>
 8000e9e:	2f00      	cmp	r7, #0
 8000ea0:	d068      	beq.n	8000f74 <__aeabi_fsub+0x10c>
 8000ea2:	2dff      	cmp	r5, #255	; 0xff
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_fsub+0x40>
 8000ea6:	e0d1      	b.n	800104c <__aeabi_fsub+0x1e4>
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	04db      	lsls	r3, r3, #19
 8000eac:	4318      	orrs	r0, r3
 8000eae:	2a1b      	cmp	r2, #27
 8000eb0:	dc00      	bgt.n	8000eb4 <__aeabi_fsub+0x4c>
 8000eb2:	e0e3      	b.n	800107c <__aeabi_fsub+0x214>
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	4662      	mov	r2, ip
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	015a      	lsls	r2, r3, #5
 8000ebc:	d400      	bmi.n	8000ec0 <__aeabi_fsub+0x58>
 8000ebe:	e0ac      	b.n	800101a <__aeabi_fsub+0x1b2>
 8000ec0:	019b      	lsls	r3, r3, #6
 8000ec2:	099e      	lsrs	r6, r3, #6
 8000ec4:	0030      	movs	r0, r6
 8000ec6:	f002 f85d 	bl	8002f84 <__clzsi2>
 8000eca:	0033      	movs	r3, r6
 8000ecc:	3805      	subs	r0, #5
 8000ece:	4083      	lsls	r3, r0
 8000ed0:	4285      	cmp	r5, r0
 8000ed2:	dc00      	bgt.n	8000ed6 <__aeabi_fsub+0x6e>
 8000ed4:	e0c6      	b.n	8001064 <__aeabi_fsub+0x1fc>
 8000ed6:	4ab2      	ldr	r2, [pc, #712]	; (80011a0 <__aeabi_fsub+0x338>)
 8000ed8:	1a2d      	subs	r5, r5, r0
 8000eda:	4013      	ands	r3, r2
 8000edc:	075a      	lsls	r2, r3, #29
 8000ede:	d004      	beq.n	8000eea <__aeabi_fsub+0x82>
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	2a04      	cmp	r2, #4
 8000ee6:	d000      	beq.n	8000eea <__aeabi_fsub+0x82>
 8000ee8:	3304      	adds	r3, #4
 8000eea:	015a      	lsls	r2, r3, #5
 8000eec:	d400      	bmi.n	8000ef0 <__aeabi_fsub+0x88>
 8000eee:	e097      	b.n	8001020 <__aeabi_fsub+0x1b8>
 8000ef0:	1c6a      	adds	r2, r5, #1
 8000ef2:	2dfe      	cmp	r5, #254	; 0xfe
 8000ef4:	d100      	bne.n	8000ef8 <__aeabi_fsub+0x90>
 8000ef6:	e084      	b.n	8001002 <__aeabi_fsub+0x19a>
 8000ef8:	019b      	lsls	r3, r3, #6
 8000efa:	0a5e      	lsrs	r6, r3, #9
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	05d0      	lsls	r0, r2, #23
 8000f00:	4330      	orrs	r0, r6
 8000f02:	07e4      	lsls	r4, r4, #31
 8000f04:	4320      	orrs	r0, r4
 8000f06:	bc80      	pop	{r7}
 8000f08:	46b8      	mov	r8, r7
 8000f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f0c:	1bea      	subs	r2, r5, r7
 8000f0e:	2a00      	cmp	r2, #0
 8000f10:	dd41      	ble.n	8000f96 <__aeabi_fsub+0x12e>
 8000f12:	2f00      	cmp	r7, #0
 8000f14:	d06b      	beq.n	8000fee <__aeabi_fsub+0x186>
 8000f16:	2dff      	cmp	r5, #255	; 0xff
 8000f18:	d100      	bne.n	8000f1c <__aeabi_fsub+0xb4>
 8000f1a:	e097      	b.n	800104c <__aeabi_fsub+0x1e4>
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	04db      	lsls	r3, r3, #19
 8000f20:	4318      	orrs	r0, r3
 8000f22:	2a1b      	cmp	r2, #27
 8000f24:	dc00      	bgt.n	8000f28 <__aeabi_fsub+0xc0>
 8000f26:	e0cc      	b.n	80010c2 <__aeabi_fsub+0x25a>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	4463      	add	r3, ip
 8000f2c:	015a      	lsls	r2, r3, #5
 8000f2e:	d574      	bpl.n	800101a <__aeabi_fsub+0x1b2>
 8000f30:	3501      	adds	r5, #1
 8000f32:	2dff      	cmp	r5, #255	; 0xff
 8000f34:	d065      	beq.n	8001002 <__aeabi_fsub+0x19a>
 8000f36:	2201      	movs	r2, #1
 8000f38:	499a      	ldr	r1, [pc, #616]	; (80011a4 <__aeabi_fsub+0x33c>)
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	085b      	lsrs	r3, r3, #1
 8000f3e:	400b      	ands	r3, r1
 8000f40:	4313      	orrs	r3, r2
 8000f42:	e7cb      	b.n	8000edc <__aeabi_fsub+0x74>
 8000f44:	2800      	cmp	r0, #0
 8000f46:	d01f      	beq.n	8000f88 <__aeabi_fsub+0x120>
 8000f48:	428c      	cmp	r4, r1
 8000f4a:	d022      	beq.n	8000f92 <__aeabi_fsub+0x12a>
 8000f4c:	002a      	movs	r2, r5
 8000f4e:	3aff      	subs	r2, #255	; 0xff
 8000f50:	2a00      	cmp	r2, #0
 8000f52:	d035      	beq.n	8000fc0 <__aeabi_fsub+0x158>
 8000f54:	1b7a      	subs	r2, r7, r5
 8000f56:	2d00      	cmp	r5, #0
 8000f58:	d000      	beq.n	8000f5c <__aeabi_fsub+0xf4>
 8000f5a:	e099      	b.n	8001090 <__aeabi_fsub+0x228>
 8000f5c:	4663      	mov	r3, ip
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fsub+0xfc>
 8000f62:	e0dd      	b.n	8001120 <__aeabi_fsub+0x2b8>
 8000f64:	1e53      	subs	r3, r2, #1
 8000f66:	2a01      	cmp	r2, #1
 8000f68:	d100      	bne.n	8000f6c <__aeabi_fsub+0x104>
 8000f6a:	e105      	b.n	8001178 <__aeabi_fsub+0x310>
 8000f6c:	2aff      	cmp	r2, #255	; 0xff
 8000f6e:	d06b      	beq.n	8001048 <__aeabi_fsub+0x1e0>
 8000f70:	001a      	movs	r2, r3
 8000f72:	e094      	b.n	800109e <__aeabi_fsub+0x236>
 8000f74:	2800      	cmp	r0, #0
 8000f76:	d073      	beq.n	8001060 <__aeabi_fsub+0x1f8>
 8000f78:	1e51      	subs	r1, r2, #1
 8000f7a:	2a01      	cmp	r2, #1
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_fsub+0x118>
 8000f7e:	e0df      	b.n	8001140 <__aeabi_fsub+0x2d8>
 8000f80:	2aff      	cmp	r2, #255	; 0xff
 8000f82:	d063      	beq.n	800104c <__aeabi_fsub+0x1e4>
 8000f84:	000a      	movs	r2, r1
 8000f86:	e792      	b.n	8000eae <__aeabi_fsub+0x46>
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4051      	eors	r1, r2
 8000f8c:	42a1      	cmp	r1, r4
 8000f8e:	d000      	beq.n	8000f92 <__aeabi_fsub+0x12a>
 8000f90:	e782      	b.n	8000e98 <__aeabi_fsub+0x30>
 8000f92:	002a      	movs	r2, r5
 8000f94:	3aff      	subs	r2, #255	; 0xff
 8000f96:	2a00      	cmp	r2, #0
 8000f98:	d036      	beq.n	8001008 <__aeabi_fsub+0x1a0>
 8000f9a:	1b7a      	subs	r2, r7, r5
 8000f9c:	2d00      	cmp	r5, #0
 8000f9e:	d100      	bne.n	8000fa2 <__aeabi_fsub+0x13a>
 8000fa0:	e0aa      	b.n	80010f8 <__aeabi_fsub+0x290>
 8000fa2:	2fff      	cmp	r7, #255	; 0xff
 8000fa4:	d100      	bne.n	8000fa8 <__aeabi_fsub+0x140>
 8000fa6:	e0da      	b.n	800115e <__aeabi_fsub+0x2f6>
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	4661      	mov	r1, ip
 8000fac:	04db      	lsls	r3, r3, #19
 8000fae:	4319      	orrs	r1, r3
 8000fb0:	468c      	mov	ip, r1
 8000fb2:	2a1b      	cmp	r2, #27
 8000fb4:	dc00      	bgt.n	8000fb8 <__aeabi_fsub+0x150>
 8000fb6:	e0d4      	b.n	8001162 <__aeabi_fsub+0x2fa>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	003d      	movs	r5, r7
 8000fbc:	181b      	adds	r3, r3, r0
 8000fbe:	e7b5      	b.n	8000f2c <__aeabi_fsub+0xc4>
 8000fc0:	27fe      	movs	r7, #254	; 0xfe
 8000fc2:	1c6a      	adds	r2, r5, #1
 8000fc4:	4217      	tst	r7, r2
 8000fc6:	d171      	bne.n	80010ac <__aeabi_fsub+0x244>
 8000fc8:	2d00      	cmp	r5, #0
 8000fca:	d000      	beq.n	8000fce <__aeabi_fsub+0x166>
 8000fcc:	e09e      	b.n	800110c <__aeabi_fsub+0x2a4>
 8000fce:	4663      	mov	r3, ip
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_fsub+0x16e>
 8000fd4:	e0d5      	b.n	8001182 <__aeabi_fsub+0x31a>
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	d100      	bne.n	8000fde <__aeabi_fsub+0x176>
 8000fdc:	e78f      	b.n	8000efe <__aeabi_fsub+0x96>
 8000fde:	1a1b      	subs	r3, r3, r0
 8000fe0:	015e      	lsls	r6, r3, #5
 8000fe2:	d400      	bmi.n	8000fe6 <__aeabi_fsub+0x17e>
 8000fe4:	e0d6      	b.n	8001194 <__aeabi_fsub+0x32c>
 8000fe6:	4663      	mov	r3, ip
 8000fe8:	000c      	movs	r4, r1
 8000fea:	1ac3      	subs	r3, r0, r3
 8000fec:	e776      	b.n	8000edc <__aeabi_fsub+0x74>
 8000fee:	2800      	cmp	r0, #0
 8000ff0:	d036      	beq.n	8001060 <__aeabi_fsub+0x1f8>
 8000ff2:	1e51      	subs	r1, r2, #1
 8000ff4:	2a01      	cmp	r2, #1
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_fsub+0x192>
 8000ff8:	e09a      	b.n	8001130 <__aeabi_fsub+0x2c8>
 8000ffa:	2aff      	cmp	r2, #255	; 0xff
 8000ffc:	d026      	beq.n	800104c <__aeabi_fsub+0x1e4>
 8000ffe:	000a      	movs	r2, r1
 8001000:	e78f      	b.n	8000f22 <__aeabi_fsub+0xba>
 8001002:	22ff      	movs	r2, #255	; 0xff
 8001004:	2600      	movs	r6, #0
 8001006:	e77a      	b.n	8000efe <__aeabi_fsub+0x96>
 8001008:	27fe      	movs	r7, #254	; 0xfe
 800100a:	1c6a      	adds	r2, r5, #1
 800100c:	4217      	tst	r7, r2
 800100e:	d062      	beq.n	80010d6 <__aeabi_fsub+0x26e>
 8001010:	2aff      	cmp	r2, #255	; 0xff
 8001012:	d0f6      	beq.n	8001002 <__aeabi_fsub+0x19a>
 8001014:	0015      	movs	r5, r2
 8001016:	4460      	add	r0, ip
 8001018:	0843      	lsrs	r3, r0, #1
 800101a:	075a      	lsls	r2, r3, #29
 800101c:	d000      	beq.n	8001020 <__aeabi_fsub+0x1b8>
 800101e:	e75f      	b.n	8000ee0 <__aeabi_fsub+0x78>
 8001020:	08db      	lsrs	r3, r3, #3
 8001022:	2dff      	cmp	r5, #255	; 0xff
 8001024:	d012      	beq.n	800104c <__aeabi_fsub+0x1e4>
 8001026:	025b      	lsls	r3, r3, #9
 8001028:	0a5e      	lsrs	r6, r3, #9
 800102a:	b2ea      	uxtb	r2, r5
 800102c:	e767      	b.n	8000efe <__aeabi_fsub+0x96>
 800102e:	4662      	mov	r2, ip
 8001030:	2a00      	cmp	r2, #0
 8001032:	d100      	bne.n	8001036 <__aeabi_fsub+0x1ce>
 8001034:	e093      	b.n	800115e <__aeabi_fsub+0x2f6>
 8001036:	2800      	cmp	r0, #0
 8001038:	d008      	beq.n	800104c <__aeabi_fsub+0x1e4>
 800103a:	2280      	movs	r2, #128	; 0x80
 800103c:	03d2      	lsls	r2, r2, #15
 800103e:	4213      	tst	r3, r2
 8001040:	d004      	beq.n	800104c <__aeabi_fsub+0x1e4>
 8001042:	4640      	mov	r0, r8
 8001044:	4210      	tst	r0, r2
 8001046:	d101      	bne.n	800104c <__aeabi_fsub+0x1e4>
 8001048:	000c      	movs	r4, r1
 800104a:	4643      	mov	r3, r8
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0d8      	beq.n	8001002 <__aeabi_fsub+0x19a>
 8001050:	2680      	movs	r6, #128	; 0x80
 8001052:	03f6      	lsls	r6, r6, #15
 8001054:	431e      	orrs	r6, r3
 8001056:	0276      	lsls	r6, r6, #9
 8001058:	22ff      	movs	r2, #255	; 0xff
 800105a:	0a76      	lsrs	r6, r6, #9
 800105c:	e74f      	b.n	8000efe <__aeabi_fsub+0x96>
 800105e:	4643      	mov	r3, r8
 8001060:	0015      	movs	r5, r2
 8001062:	e7de      	b.n	8001022 <__aeabi_fsub+0x1ba>
 8001064:	2220      	movs	r2, #32
 8001066:	1b40      	subs	r0, r0, r5
 8001068:	3001      	adds	r0, #1
 800106a:	1a12      	subs	r2, r2, r0
 800106c:	0019      	movs	r1, r3
 800106e:	4093      	lsls	r3, r2
 8001070:	40c1      	lsrs	r1, r0
 8001072:	1e5a      	subs	r2, r3, #1
 8001074:	4193      	sbcs	r3, r2
 8001076:	2500      	movs	r5, #0
 8001078:	430b      	orrs	r3, r1
 800107a:	e72f      	b.n	8000edc <__aeabi_fsub+0x74>
 800107c:	2320      	movs	r3, #32
 800107e:	1a9b      	subs	r3, r3, r2
 8001080:	0001      	movs	r1, r0
 8001082:	4098      	lsls	r0, r3
 8001084:	0003      	movs	r3, r0
 8001086:	40d1      	lsrs	r1, r2
 8001088:	1e5a      	subs	r2, r3, #1
 800108a:	4193      	sbcs	r3, r2
 800108c:	430b      	orrs	r3, r1
 800108e:	e712      	b.n	8000eb6 <__aeabi_fsub+0x4e>
 8001090:	2fff      	cmp	r7, #255	; 0xff
 8001092:	d0d9      	beq.n	8001048 <__aeabi_fsub+0x1e0>
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	4664      	mov	r4, ip
 8001098:	04db      	lsls	r3, r3, #19
 800109a:	431c      	orrs	r4, r3
 800109c:	46a4      	mov	ip, r4
 800109e:	2a1b      	cmp	r2, #27
 80010a0:	dd52      	ble.n	8001148 <__aeabi_fsub+0x2e0>
 80010a2:	2301      	movs	r3, #1
 80010a4:	000c      	movs	r4, r1
 80010a6:	003d      	movs	r5, r7
 80010a8:	1ac3      	subs	r3, r0, r3
 80010aa:	e706      	b.n	8000eba <__aeabi_fsub+0x52>
 80010ac:	4663      	mov	r3, ip
 80010ae:	1a1e      	subs	r6, r3, r0
 80010b0:	0173      	lsls	r3, r6, #5
 80010b2:	d439      	bmi.n	8001128 <__aeabi_fsub+0x2c0>
 80010b4:	2e00      	cmp	r6, #0
 80010b6:	d000      	beq.n	80010ba <__aeabi_fsub+0x252>
 80010b8:	e704      	b.n	8000ec4 <__aeabi_fsub+0x5c>
 80010ba:	2400      	movs	r4, #0
 80010bc:	2200      	movs	r2, #0
 80010be:	2600      	movs	r6, #0
 80010c0:	e71d      	b.n	8000efe <__aeabi_fsub+0x96>
 80010c2:	2320      	movs	r3, #32
 80010c4:	1a9b      	subs	r3, r3, r2
 80010c6:	0001      	movs	r1, r0
 80010c8:	4098      	lsls	r0, r3
 80010ca:	0003      	movs	r3, r0
 80010cc:	40d1      	lsrs	r1, r2
 80010ce:	1e5a      	subs	r2, r3, #1
 80010d0:	4193      	sbcs	r3, r2
 80010d2:	430b      	orrs	r3, r1
 80010d4:	e729      	b.n	8000f2a <__aeabi_fsub+0xc2>
 80010d6:	2d00      	cmp	r5, #0
 80010d8:	d1a9      	bne.n	800102e <__aeabi_fsub+0x1c6>
 80010da:	4663      	mov	r3, ip
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d056      	beq.n	800118e <__aeabi_fsub+0x326>
 80010e0:	2200      	movs	r2, #0
 80010e2:	2800      	cmp	r0, #0
 80010e4:	d100      	bne.n	80010e8 <__aeabi_fsub+0x280>
 80010e6:	e70a      	b.n	8000efe <__aeabi_fsub+0x96>
 80010e8:	0003      	movs	r3, r0
 80010ea:	4463      	add	r3, ip
 80010ec:	015a      	lsls	r2, r3, #5
 80010ee:	d594      	bpl.n	800101a <__aeabi_fsub+0x1b2>
 80010f0:	4a2b      	ldr	r2, [pc, #172]	; (80011a0 <__aeabi_fsub+0x338>)
 80010f2:	3501      	adds	r5, #1
 80010f4:	4013      	ands	r3, r2
 80010f6:	e790      	b.n	800101a <__aeabi_fsub+0x1b2>
 80010f8:	4663      	mov	r3, ip
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0af      	beq.n	800105e <__aeabi_fsub+0x1f6>
 80010fe:	1e53      	subs	r3, r2, #1
 8001100:	2a01      	cmp	r2, #1
 8001102:	d015      	beq.n	8001130 <__aeabi_fsub+0x2c8>
 8001104:	2aff      	cmp	r2, #255	; 0xff
 8001106:	d02a      	beq.n	800115e <__aeabi_fsub+0x2f6>
 8001108:	001a      	movs	r2, r3
 800110a:	e752      	b.n	8000fb2 <__aeabi_fsub+0x14a>
 800110c:	4662      	mov	r2, ip
 800110e:	2a00      	cmp	r2, #0
 8001110:	d191      	bne.n	8001036 <__aeabi_fsub+0x1ce>
 8001112:	2800      	cmp	r0, #0
 8001114:	d198      	bne.n	8001048 <__aeabi_fsub+0x1e0>
 8001116:	2680      	movs	r6, #128	; 0x80
 8001118:	2400      	movs	r4, #0
 800111a:	22ff      	movs	r2, #255	; 0xff
 800111c:	03f6      	lsls	r6, r6, #15
 800111e:	e6ee      	b.n	8000efe <__aeabi_fsub+0x96>
 8001120:	000c      	movs	r4, r1
 8001122:	4643      	mov	r3, r8
 8001124:	0015      	movs	r5, r2
 8001126:	e77c      	b.n	8001022 <__aeabi_fsub+0x1ba>
 8001128:	4663      	mov	r3, ip
 800112a:	000c      	movs	r4, r1
 800112c:	1ac6      	subs	r6, r0, r3
 800112e:	e6c9      	b.n	8000ec4 <__aeabi_fsub+0x5c>
 8001130:	0003      	movs	r3, r0
 8001132:	4463      	add	r3, ip
 8001134:	2501      	movs	r5, #1
 8001136:	015a      	lsls	r2, r3, #5
 8001138:	d400      	bmi.n	800113c <__aeabi_fsub+0x2d4>
 800113a:	e76e      	b.n	800101a <__aeabi_fsub+0x1b2>
 800113c:	2502      	movs	r5, #2
 800113e:	e6fa      	b.n	8000f36 <__aeabi_fsub+0xce>
 8001140:	4663      	mov	r3, ip
 8001142:	2501      	movs	r5, #1
 8001144:	1a1b      	subs	r3, r3, r0
 8001146:	e6b8      	b.n	8000eba <__aeabi_fsub+0x52>
 8001148:	4664      	mov	r4, ip
 800114a:	2320      	movs	r3, #32
 800114c:	40d4      	lsrs	r4, r2
 800114e:	1a9b      	subs	r3, r3, r2
 8001150:	4662      	mov	r2, ip
 8001152:	409a      	lsls	r2, r3
 8001154:	0013      	movs	r3, r2
 8001156:	1e5a      	subs	r2, r3, #1
 8001158:	4193      	sbcs	r3, r2
 800115a:	4323      	orrs	r3, r4
 800115c:	e7a2      	b.n	80010a4 <__aeabi_fsub+0x23c>
 800115e:	4643      	mov	r3, r8
 8001160:	e774      	b.n	800104c <__aeabi_fsub+0x1e4>
 8001162:	4661      	mov	r1, ip
 8001164:	2320      	movs	r3, #32
 8001166:	40d1      	lsrs	r1, r2
 8001168:	1a9b      	subs	r3, r3, r2
 800116a:	4662      	mov	r2, ip
 800116c:	409a      	lsls	r2, r3
 800116e:	0013      	movs	r3, r2
 8001170:	1e5a      	subs	r2, r3, #1
 8001172:	4193      	sbcs	r3, r2
 8001174:	430b      	orrs	r3, r1
 8001176:	e720      	b.n	8000fba <__aeabi_fsub+0x152>
 8001178:	4663      	mov	r3, ip
 800117a:	000c      	movs	r4, r1
 800117c:	2501      	movs	r5, #1
 800117e:	1ac3      	subs	r3, r0, r3
 8001180:	e69b      	b.n	8000eba <__aeabi_fsub+0x52>
 8001182:	2800      	cmp	r0, #0
 8001184:	d099      	beq.n	80010ba <__aeabi_fsub+0x252>
 8001186:	000c      	movs	r4, r1
 8001188:	4646      	mov	r6, r8
 800118a:	2200      	movs	r2, #0
 800118c:	e6b7      	b.n	8000efe <__aeabi_fsub+0x96>
 800118e:	4646      	mov	r6, r8
 8001190:	2200      	movs	r2, #0
 8001192:	e6b4      	b.n	8000efe <__aeabi_fsub+0x96>
 8001194:	2b00      	cmp	r3, #0
 8001196:	d000      	beq.n	800119a <__aeabi_fsub+0x332>
 8001198:	e73f      	b.n	800101a <__aeabi_fsub+0x1b2>
 800119a:	2400      	movs	r4, #0
 800119c:	2600      	movs	r6, #0
 800119e:	e6ae      	b.n	8000efe <__aeabi_fsub+0x96>
 80011a0:	fbffffff 	.word	0xfbffffff
 80011a4:	7dffffff 	.word	0x7dffffff

080011a8 <__aeabi_i2f>:
 80011a8:	b570      	push	{r4, r5, r6, lr}
 80011aa:	2800      	cmp	r0, #0
 80011ac:	d013      	beq.n	80011d6 <__aeabi_i2f+0x2e>
 80011ae:	17c3      	asrs	r3, r0, #31
 80011b0:	18c5      	adds	r5, r0, r3
 80011b2:	405d      	eors	r5, r3
 80011b4:	0fc4      	lsrs	r4, r0, #31
 80011b6:	0028      	movs	r0, r5
 80011b8:	f001 fee4 	bl	8002f84 <__clzsi2>
 80011bc:	239e      	movs	r3, #158	; 0x9e
 80011be:	0001      	movs	r1, r0
 80011c0:	1a1b      	subs	r3, r3, r0
 80011c2:	2b96      	cmp	r3, #150	; 0x96
 80011c4:	dc0f      	bgt.n	80011e6 <__aeabi_i2f+0x3e>
 80011c6:	2808      	cmp	r0, #8
 80011c8:	d031      	beq.n	800122e <__aeabi_i2f+0x86>
 80011ca:	3908      	subs	r1, #8
 80011cc:	408d      	lsls	r5, r1
 80011ce:	026d      	lsls	r5, r5, #9
 80011d0:	0a6d      	lsrs	r5, r5, #9
 80011d2:	b2d8      	uxtb	r0, r3
 80011d4:	e002      	b.n	80011dc <__aeabi_i2f+0x34>
 80011d6:	2400      	movs	r4, #0
 80011d8:	2000      	movs	r0, #0
 80011da:	2500      	movs	r5, #0
 80011dc:	05c0      	lsls	r0, r0, #23
 80011de:	4328      	orrs	r0, r5
 80011e0:	07e4      	lsls	r4, r4, #31
 80011e2:	4320      	orrs	r0, r4
 80011e4:	bd70      	pop	{r4, r5, r6, pc}
 80011e6:	2b99      	cmp	r3, #153	; 0x99
 80011e8:	dd0c      	ble.n	8001204 <__aeabi_i2f+0x5c>
 80011ea:	2205      	movs	r2, #5
 80011ec:	1a12      	subs	r2, r2, r0
 80011ee:	0028      	movs	r0, r5
 80011f0:	40d0      	lsrs	r0, r2
 80011f2:	0002      	movs	r2, r0
 80011f4:	0008      	movs	r0, r1
 80011f6:	301b      	adds	r0, #27
 80011f8:	4085      	lsls	r5, r0
 80011fa:	0028      	movs	r0, r5
 80011fc:	1e45      	subs	r5, r0, #1
 80011fe:	41a8      	sbcs	r0, r5
 8001200:	4302      	orrs	r2, r0
 8001202:	0015      	movs	r5, r2
 8001204:	2905      	cmp	r1, #5
 8001206:	dc16      	bgt.n	8001236 <__aeabi_i2f+0x8e>
 8001208:	002a      	movs	r2, r5
 800120a:	480f      	ldr	r0, [pc, #60]	; (8001248 <__aeabi_i2f+0xa0>)
 800120c:	4002      	ands	r2, r0
 800120e:	076e      	lsls	r6, r5, #29
 8001210:	d009      	beq.n	8001226 <__aeabi_i2f+0x7e>
 8001212:	260f      	movs	r6, #15
 8001214:	4035      	ands	r5, r6
 8001216:	2d04      	cmp	r5, #4
 8001218:	d005      	beq.n	8001226 <__aeabi_i2f+0x7e>
 800121a:	3204      	adds	r2, #4
 800121c:	0155      	lsls	r5, r2, #5
 800121e:	d502      	bpl.n	8001226 <__aeabi_i2f+0x7e>
 8001220:	239f      	movs	r3, #159	; 0x9f
 8001222:	4002      	ands	r2, r0
 8001224:	1a5b      	subs	r3, r3, r1
 8001226:	0192      	lsls	r2, r2, #6
 8001228:	0a55      	lsrs	r5, r2, #9
 800122a:	b2d8      	uxtb	r0, r3
 800122c:	e7d6      	b.n	80011dc <__aeabi_i2f+0x34>
 800122e:	026d      	lsls	r5, r5, #9
 8001230:	2096      	movs	r0, #150	; 0x96
 8001232:	0a6d      	lsrs	r5, r5, #9
 8001234:	e7d2      	b.n	80011dc <__aeabi_i2f+0x34>
 8001236:	1f4a      	subs	r2, r1, #5
 8001238:	4095      	lsls	r5, r2
 800123a:	002a      	movs	r2, r5
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <__aeabi_i2f+0xa0>)
 800123e:	4002      	ands	r2, r0
 8001240:	076e      	lsls	r6, r5, #29
 8001242:	d0f0      	beq.n	8001226 <__aeabi_i2f+0x7e>
 8001244:	e7e5      	b.n	8001212 <__aeabi_i2f+0x6a>
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	fbffffff 	.word	0xfbffffff

0800124c <__aeabi_dadd>:
 800124c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124e:	464f      	mov	r7, r9
 8001250:	4646      	mov	r6, r8
 8001252:	46d6      	mov	lr, sl
 8001254:	0004      	movs	r4, r0
 8001256:	b5c0      	push	{r6, r7, lr}
 8001258:	001f      	movs	r7, r3
 800125a:	030b      	lsls	r3, r1, #12
 800125c:	0010      	movs	r0, r2
 800125e:	004e      	lsls	r6, r1, #1
 8001260:	0a5b      	lsrs	r3, r3, #9
 8001262:	0fcd      	lsrs	r5, r1, #31
 8001264:	0f61      	lsrs	r1, r4, #29
 8001266:	007a      	lsls	r2, r7, #1
 8001268:	4319      	orrs	r1, r3
 800126a:	00e3      	lsls	r3, r4, #3
 800126c:	033c      	lsls	r4, r7, #12
 800126e:	0fff      	lsrs	r7, r7, #31
 8001270:	46bc      	mov	ip, r7
 8001272:	0a64      	lsrs	r4, r4, #9
 8001274:	0f47      	lsrs	r7, r0, #29
 8001276:	4327      	orrs	r7, r4
 8001278:	0d76      	lsrs	r6, r6, #21
 800127a:	0d52      	lsrs	r2, r2, #21
 800127c:	00c0      	lsls	r0, r0, #3
 800127e:	46b9      	mov	r9, r7
 8001280:	4680      	mov	r8, r0
 8001282:	1ab7      	subs	r7, r6, r2
 8001284:	4565      	cmp	r5, ip
 8001286:	d100      	bne.n	800128a <__aeabi_dadd+0x3e>
 8001288:	e09b      	b.n	80013c2 <__aeabi_dadd+0x176>
 800128a:	2f00      	cmp	r7, #0
 800128c:	dc00      	bgt.n	8001290 <__aeabi_dadd+0x44>
 800128e:	e084      	b.n	800139a <__aeabi_dadd+0x14e>
 8001290:	2a00      	cmp	r2, #0
 8001292:	d100      	bne.n	8001296 <__aeabi_dadd+0x4a>
 8001294:	e0be      	b.n	8001414 <__aeabi_dadd+0x1c8>
 8001296:	4ac8      	ldr	r2, [pc, #800]	; (80015b8 <__aeabi_dadd+0x36c>)
 8001298:	4296      	cmp	r6, r2
 800129a:	d100      	bne.n	800129e <__aeabi_dadd+0x52>
 800129c:	e124      	b.n	80014e8 <__aeabi_dadd+0x29c>
 800129e:	2280      	movs	r2, #128	; 0x80
 80012a0:	464c      	mov	r4, r9
 80012a2:	0412      	lsls	r2, r2, #16
 80012a4:	4314      	orrs	r4, r2
 80012a6:	46a1      	mov	r9, r4
 80012a8:	2f38      	cmp	r7, #56	; 0x38
 80012aa:	dd00      	ble.n	80012ae <__aeabi_dadd+0x62>
 80012ac:	e167      	b.n	800157e <__aeabi_dadd+0x332>
 80012ae:	2f1f      	cmp	r7, #31
 80012b0:	dd00      	ble.n	80012b4 <__aeabi_dadd+0x68>
 80012b2:	e1d6      	b.n	8001662 <__aeabi_dadd+0x416>
 80012b4:	2220      	movs	r2, #32
 80012b6:	464c      	mov	r4, r9
 80012b8:	1bd2      	subs	r2, r2, r7
 80012ba:	4094      	lsls	r4, r2
 80012bc:	46a2      	mov	sl, r4
 80012be:	4644      	mov	r4, r8
 80012c0:	40fc      	lsrs	r4, r7
 80012c2:	0020      	movs	r0, r4
 80012c4:	4654      	mov	r4, sl
 80012c6:	4304      	orrs	r4, r0
 80012c8:	4640      	mov	r0, r8
 80012ca:	4090      	lsls	r0, r2
 80012cc:	1e42      	subs	r2, r0, #1
 80012ce:	4190      	sbcs	r0, r2
 80012d0:	464a      	mov	r2, r9
 80012d2:	40fa      	lsrs	r2, r7
 80012d4:	4304      	orrs	r4, r0
 80012d6:	1a89      	subs	r1, r1, r2
 80012d8:	1b1c      	subs	r4, r3, r4
 80012da:	42a3      	cmp	r3, r4
 80012dc:	4192      	sbcs	r2, r2
 80012de:	4252      	negs	r2, r2
 80012e0:	1a8b      	subs	r3, r1, r2
 80012e2:	469a      	mov	sl, r3
 80012e4:	4653      	mov	r3, sl
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	d400      	bmi.n	80012ec <__aeabi_dadd+0xa0>
 80012ea:	e0d4      	b.n	8001496 <__aeabi_dadd+0x24a>
 80012ec:	4653      	mov	r3, sl
 80012ee:	025a      	lsls	r2, r3, #9
 80012f0:	0a53      	lsrs	r3, r2, #9
 80012f2:	469a      	mov	sl, r3
 80012f4:	4653      	mov	r3, sl
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d100      	bne.n	80012fc <__aeabi_dadd+0xb0>
 80012fa:	e104      	b.n	8001506 <__aeabi_dadd+0x2ba>
 80012fc:	4650      	mov	r0, sl
 80012fe:	f001 fe41 	bl	8002f84 <__clzsi2>
 8001302:	0003      	movs	r3, r0
 8001304:	3b08      	subs	r3, #8
 8001306:	2220      	movs	r2, #32
 8001308:	0020      	movs	r0, r4
 800130a:	1ad2      	subs	r2, r2, r3
 800130c:	4651      	mov	r1, sl
 800130e:	40d0      	lsrs	r0, r2
 8001310:	4099      	lsls	r1, r3
 8001312:	0002      	movs	r2, r0
 8001314:	409c      	lsls	r4, r3
 8001316:	430a      	orrs	r2, r1
 8001318:	42b3      	cmp	r3, r6
 800131a:	da00      	bge.n	800131e <__aeabi_dadd+0xd2>
 800131c:	e102      	b.n	8001524 <__aeabi_dadd+0x2d8>
 800131e:	1b9b      	subs	r3, r3, r6
 8001320:	1c59      	adds	r1, r3, #1
 8001322:	291f      	cmp	r1, #31
 8001324:	dd00      	ble.n	8001328 <__aeabi_dadd+0xdc>
 8001326:	e0a7      	b.n	8001478 <__aeabi_dadd+0x22c>
 8001328:	2320      	movs	r3, #32
 800132a:	0010      	movs	r0, r2
 800132c:	0026      	movs	r6, r4
 800132e:	1a5b      	subs	r3, r3, r1
 8001330:	409c      	lsls	r4, r3
 8001332:	4098      	lsls	r0, r3
 8001334:	40ce      	lsrs	r6, r1
 8001336:	40ca      	lsrs	r2, r1
 8001338:	1e63      	subs	r3, r4, #1
 800133a:	419c      	sbcs	r4, r3
 800133c:	4330      	orrs	r0, r6
 800133e:	4692      	mov	sl, r2
 8001340:	2600      	movs	r6, #0
 8001342:	4304      	orrs	r4, r0
 8001344:	0763      	lsls	r3, r4, #29
 8001346:	d009      	beq.n	800135c <__aeabi_dadd+0x110>
 8001348:	230f      	movs	r3, #15
 800134a:	4023      	ands	r3, r4
 800134c:	2b04      	cmp	r3, #4
 800134e:	d005      	beq.n	800135c <__aeabi_dadd+0x110>
 8001350:	1d23      	adds	r3, r4, #4
 8001352:	42a3      	cmp	r3, r4
 8001354:	41a4      	sbcs	r4, r4
 8001356:	4264      	negs	r4, r4
 8001358:	44a2      	add	sl, r4
 800135a:	001c      	movs	r4, r3
 800135c:	4653      	mov	r3, sl
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	d400      	bmi.n	8001364 <__aeabi_dadd+0x118>
 8001362:	e09b      	b.n	800149c <__aeabi_dadd+0x250>
 8001364:	4b94      	ldr	r3, [pc, #592]	; (80015b8 <__aeabi_dadd+0x36c>)
 8001366:	3601      	adds	r6, #1
 8001368:	429e      	cmp	r6, r3
 800136a:	d100      	bne.n	800136e <__aeabi_dadd+0x122>
 800136c:	e0b8      	b.n	80014e0 <__aeabi_dadd+0x294>
 800136e:	4653      	mov	r3, sl
 8001370:	4992      	ldr	r1, [pc, #584]	; (80015bc <__aeabi_dadd+0x370>)
 8001372:	08e4      	lsrs	r4, r4, #3
 8001374:	400b      	ands	r3, r1
 8001376:	0019      	movs	r1, r3
 8001378:	075b      	lsls	r3, r3, #29
 800137a:	4323      	orrs	r3, r4
 800137c:	0572      	lsls	r2, r6, #21
 800137e:	024c      	lsls	r4, r1, #9
 8001380:	0b24      	lsrs	r4, r4, #12
 8001382:	0d52      	lsrs	r2, r2, #21
 8001384:	0512      	lsls	r2, r2, #20
 8001386:	07ed      	lsls	r5, r5, #31
 8001388:	4322      	orrs	r2, r4
 800138a:	432a      	orrs	r2, r5
 800138c:	0018      	movs	r0, r3
 800138e:	0011      	movs	r1, r2
 8001390:	bce0      	pop	{r5, r6, r7}
 8001392:	46ba      	mov	sl, r7
 8001394:	46b1      	mov	r9, r6
 8001396:	46a8      	mov	r8, r5
 8001398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800139a:	2f00      	cmp	r7, #0
 800139c:	d048      	beq.n	8001430 <__aeabi_dadd+0x1e4>
 800139e:	1b97      	subs	r7, r2, r6
 80013a0:	2e00      	cmp	r6, #0
 80013a2:	d000      	beq.n	80013a6 <__aeabi_dadd+0x15a>
 80013a4:	e10e      	b.n	80015c4 <__aeabi_dadd+0x378>
 80013a6:	000c      	movs	r4, r1
 80013a8:	431c      	orrs	r4, r3
 80013aa:	d100      	bne.n	80013ae <__aeabi_dadd+0x162>
 80013ac:	e1b7      	b.n	800171e <__aeabi_dadd+0x4d2>
 80013ae:	1e7c      	subs	r4, r7, #1
 80013b0:	2f01      	cmp	r7, #1
 80013b2:	d100      	bne.n	80013b6 <__aeabi_dadd+0x16a>
 80013b4:	e226      	b.n	8001804 <__aeabi_dadd+0x5b8>
 80013b6:	4d80      	ldr	r5, [pc, #512]	; (80015b8 <__aeabi_dadd+0x36c>)
 80013b8:	42af      	cmp	r7, r5
 80013ba:	d100      	bne.n	80013be <__aeabi_dadd+0x172>
 80013bc:	e1d5      	b.n	800176a <__aeabi_dadd+0x51e>
 80013be:	0027      	movs	r7, r4
 80013c0:	e107      	b.n	80015d2 <__aeabi_dadd+0x386>
 80013c2:	2f00      	cmp	r7, #0
 80013c4:	dc00      	bgt.n	80013c8 <__aeabi_dadd+0x17c>
 80013c6:	e0b2      	b.n	800152e <__aeabi_dadd+0x2e2>
 80013c8:	2a00      	cmp	r2, #0
 80013ca:	d047      	beq.n	800145c <__aeabi_dadd+0x210>
 80013cc:	4a7a      	ldr	r2, [pc, #488]	; (80015b8 <__aeabi_dadd+0x36c>)
 80013ce:	4296      	cmp	r6, r2
 80013d0:	d100      	bne.n	80013d4 <__aeabi_dadd+0x188>
 80013d2:	e089      	b.n	80014e8 <__aeabi_dadd+0x29c>
 80013d4:	2280      	movs	r2, #128	; 0x80
 80013d6:	464c      	mov	r4, r9
 80013d8:	0412      	lsls	r2, r2, #16
 80013da:	4314      	orrs	r4, r2
 80013dc:	46a1      	mov	r9, r4
 80013de:	2f38      	cmp	r7, #56	; 0x38
 80013e0:	dc6b      	bgt.n	80014ba <__aeabi_dadd+0x26e>
 80013e2:	2f1f      	cmp	r7, #31
 80013e4:	dc00      	bgt.n	80013e8 <__aeabi_dadd+0x19c>
 80013e6:	e16e      	b.n	80016c6 <__aeabi_dadd+0x47a>
 80013e8:	003a      	movs	r2, r7
 80013ea:	4648      	mov	r0, r9
 80013ec:	3a20      	subs	r2, #32
 80013ee:	40d0      	lsrs	r0, r2
 80013f0:	4684      	mov	ip, r0
 80013f2:	2f20      	cmp	r7, #32
 80013f4:	d007      	beq.n	8001406 <__aeabi_dadd+0x1ba>
 80013f6:	2240      	movs	r2, #64	; 0x40
 80013f8:	4648      	mov	r0, r9
 80013fa:	1bd2      	subs	r2, r2, r7
 80013fc:	4090      	lsls	r0, r2
 80013fe:	0002      	movs	r2, r0
 8001400:	4640      	mov	r0, r8
 8001402:	4310      	orrs	r0, r2
 8001404:	4680      	mov	r8, r0
 8001406:	4640      	mov	r0, r8
 8001408:	1e42      	subs	r2, r0, #1
 800140a:	4190      	sbcs	r0, r2
 800140c:	4662      	mov	r2, ip
 800140e:	0004      	movs	r4, r0
 8001410:	4314      	orrs	r4, r2
 8001412:	e057      	b.n	80014c4 <__aeabi_dadd+0x278>
 8001414:	464a      	mov	r2, r9
 8001416:	4302      	orrs	r2, r0
 8001418:	d100      	bne.n	800141c <__aeabi_dadd+0x1d0>
 800141a:	e103      	b.n	8001624 <__aeabi_dadd+0x3d8>
 800141c:	1e7a      	subs	r2, r7, #1
 800141e:	2f01      	cmp	r7, #1
 8001420:	d100      	bne.n	8001424 <__aeabi_dadd+0x1d8>
 8001422:	e193      	b.n	800174c <__aeabi_dadd+0x500>
 8001424:	4c64      	ldr	r4, [pc, #400]	; (80015b8 <__aeabi_dadd+0x36c>)
 8001426:	42a7      	cmp	r7, r4
 8001428:	d100      	bne.n	800142c <__aeabi_dadd+0x1e0>
 800142a:	e18a      	b.n	8001742 <__aeabi_dadd+0x4f6>
 800142c:	0017      	movs	r7, r2
 800142e:	e73b      	b.n	80012a8 <__aeabi_dadd+0x5c>
 8001430:	4c63      	ldr	r4, [pc, #396]	; (80015c0 <__aeabi_dadd+0x374>)
 8001432:	1c72      	adds	r2, r6, #1
 8001434:	4222      	tst	r2, r4
 8001436:	d000      	beq.n	800143a <__aeabi_dadd+0x1ee>
 8001438:	e0e0      	b.n	80015fc <__aeabi_dadd+0x3b0>
 800143a:	000a      	movs	r2, r1
 800143c:	431a      	orrs	r2, r3
 800143e:	2e00      	cmp	r6, #0
 8001440:	d000      	beq.n	8001444 <__aeabi_dadd+0x1f8>
 8001442:	e174      	b.n	800172e <__aeabi_dadd+0x4e2>
 8001444:	2a00      	cmp	r2, #0
 8001446:	d100      	bne.n	800144a <__aeabi_dadd+0x1fe>
 8001448:	e1d0      	b.n	80017ec <__aeabi_dadd+0x5a0>
 800144a:	464a      	mov	r2, r9
 800144c:	4302      	orrs	r2, r0
 800144e:	d000      	beq.n	8001452 <__aeabi_dadd+0x206>
 8001450:	e1e3      	b.n	800181a <__aeabi_dadd+0x5ce>
 8001452:	074a      	lsls	r2, r1, #29
 8001454:	08db      	lsrs	r3, r3, #3
 8001456:	4313      	orrs	r3, r2
 8001458:	08c9      	lsrs	r1, r1, #3
 800145a:	e029      	b.n	80014b0 <__aeabi_dadd+0x264>
 800145c:	464a      	mov	r2, r9
 800145e:	4302      	orrs	r2, r0
 8001460:	d100      	bne.n	8001464 <__aeabi_dadd+0x218>
 8001462:	e17d      	b.n	8001760 <__aeabi_dadd+0x514>
 8001464:	1e7a      	subs	r2, r7, #1
 8001466:	2f01      	cmp	r7, #1
 8001468:	d100      	bne.n	800146c <__aeabi_dadd+0x220>
 800146a:	e0e0      	b.n	800162e <__aeabi_dadd+0x3e2>
 800146c:	4c52      	ldr	r4, [pc, #328]	; (80015b8 <__aeabi_dadd+0x36c>)
 800146e:	42a7      	cmp	r7, r4
 8001470:	d100      	bne.n	8001474 <__aeabi_dadd+0x228>
 8001472:	e166      	b.n	8001742 <__aeabi_dadd+0x4f6>
 8001474:	0017      	movs	r7, r2
 8001476:	e7b2      	b.n	80013de <__aeabi_dadd+0x192>
 8001478:	0010      	movs	r0, r2
 800147a:	3b1f      	subs	r3, #31
 800147c:	40d8      	lsrs	r0, r3
 800147e:	2920      	cmp	r1, #32
 8001480:	d003      	beq.n	800148a <__aeabi_dadd+0x23e>
 8001482:	2340      	movs	r3, #64	; 0x40
 8001484:	1a5b      	subs	r3, r3, r1
 8001486:	409a      	lsls	r2, r3
 8001488:	4314      	orrs	r4, r2
 800148a:	1e63      	subs	r3, r4, #1
 800148c:	419c      	sbcs	r4, r3
 800148e:	2300      	movs	r3, #0
 8001490:	2600      	movs	r6, #0
 8001492:	469a      	mov	sl, r3
 8001494:	4304      	orrs	r4, r0
 8001496:	0763      	lsls	r3, r4, #29
 8001498:	d000      	beq.n	800149c <__aeabi_dadd+0x250>
 800149a:	e755      	b.n	8001348 <__aeabi_dadd+0xfc>
 800149c:	4652      	mov	r2, sl
 800149e:	08e3      	lsrs	r3, r4, #3
 80014a0:	0752      	lsls	r2, r2, #29
 80014a2:	4313      	orrs	r3, r2
 80014a4:	4652      	mov	r2, sl
 80014a6:	0037      	movs	r7, r6
 80014a8:	08d1      	lsrs	r1, r2, #3
 80014aa:	4a43      	ldr	r2, [pc, #268]	; (80015b8 <__aeabi_dadd+0x36c>)
 80014ac:	4297      	cmp	r7, r2
 80014ae:	d01f      	beq.n	80014f0 <__aeabi_dadd+0x2a4>
 80014b0:	0309      	lsls	r1, r1, #12
 80014b2:	057a      	lsls	r2, r7, #21
 80014b4:	0b0c      	lsrs	r4, r1, #12
 80014b6:	0d52      	lsrs	r2, r2, #21
 80014b8:	e764      	b.n	8001384 <__aeabi_dadd+0x138>
 80014ba:	4642      	mov	r2, r8
 80014bc:	464c      	mov	r4, r9
 80014be:	4314      	orrs	r4, r2
 80014c0:	1e62      	subs	r2, r4, #1
 80014c2:	4194      	sbcs	r4, r2
 80014c4:	18e4      	adds	r4, r4, r3
 80014c6:	429c      	cmp	r4, r3
 80014c8:	4192      	sbcs	r2, r2
 80014ca:	4252      	negs	r2, r2
 80014cc:	4692      	mov	sl, r2
 80014ce:	448a      	add	sl, r1
 80014d0:	4653      	mov	r3, sl
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	d5df      	bpl.n	8001496 <__aeabi_dadd+0x24a>
 80014d6:	4b38      	ldr	r3, [pc, #224]	; (80015b8 <__aeabi_dadd+0x36c>)
 80014d8:	3601      	adds	r6, #1
 80014da:	429e      	cmp	r6, r3
 80014dc:	d000      	beq.n	80014e0 <__aeabi_dadd+0x294>
 80014de:	e0b3      	b.n	8001648 <__aeabi_dadd+0x3fc>
 80014e0:	0032      	movs	r2, r6
 80014e2:	2400      	movs	r4, #0
 80014e4:	2300      	movs	r3, #0
 80014e6:	e74d      	b.n	8001384 <__aeabi_dadd+0x138>
 80014e8:	074a      	lsls	r2, r1, #29
 80014ea:	08db      	lsrs	r3, r3, #3
 80014ec:	4313      	orrs	r3, r2
 80014ee:	08c9      	lsrs	r1, r1, #3
 80014f0:	001a      	movs	r2, r3
 80014f2:	430a      	orrs	r2, r1
 80014f4:	d100      	bne.n	80014f8 <__aeabi_dadd+0x2ac>
 80014f6:	e200      	b.n	80018fa <__aeabi_dadd+0x6ae>
 80014f8:	2480      	movs	r4, #128	; 0x80
 80014fa:	0324      	lsls	r4, r4, #12
 80014fc:	430c      	orrs	r4, r1
 80014fe:	0324      	lsls	r4, r4, #12
 8001500:	4a2d      	ldr	r2, [pc, #180]	; (80015b8 <__aeabi_dadd+0x36c>)
 8001502:	0b24      	lsrs	r4, r4, #12
 8001504:	e73e      	b.n	8001384 <__aeabi_dadd+0x138>
 8001506:	0020      	movs	r0, r4
 8001508:	f001 fd3c 	bl	8002f84 <__clzsi2>
 800150c:	0003      	movs	r3, r0
 800150e:	3318      	adds	r3, #24
 8001510:	2b1f      	cmp	r3, #31
 8001512:	dc00      	bgt.n	8001516 <__aeabi_dadd+0x2ca>
 8001514:	e6f7      	b.n	8001306 <__aeabi_dadd+0xba>
 8001516:	0022      	movs	r2, r4
 8001518:	3808      	subs	r0, #8
 800151a:	4082      	lsls	r2, r0
 800151c:	2400      	movs	r4, #0
 800151e:	42b3      	cmp	r3, r6
 8001520:	db00      	blt.n	8001524 <__aeabi_dadd+0x2d8>
 8001522:	e6fc      	b.n	800131e <__aeabi_dadd+0xd2>
 8001524:	1af6      	subs	r6, r6, r3
 8001526:	4b25      	ldr	r3, [pc, #148]	; (80015bc <__aeabi_dadd+0x370>)
 8001528:	401a      	ands	r2, r3
 800152a:	4692      	mov	sl, r2
 800152c:	e70a      	b.n	8001344 <__aeabi_dadd+0xf8>
 800152e:	2f00      	cmp	r7, #0
 8001530:	d02b      	beq.n	800158a <__aeabi_dadd+0x33e>
 8001532:	1b97      	subs	r7, r2, r6
 8001534:	2e00      	cmp	r6, #0
 8001536:	d100      	bne.n	800153a <__aeabi_dadd+0x2ee>
 8001538:	e0b8      	b.n	80016ac <__aeabi_dadd+0x460>
 800153a:	4c1f      	ldr	r4, [pc, #124]	; (80015b8 <__aeabi_dadd+0x36c>)
 800153c:	42a2      	cmp	r2, r4
 800153e:	d100      	bne.n	8001542 <__aeabi_dadd+0x2f6>
 8001540:	e11c      	b.n	800177c <__aeabi_dadd+0x530>
 8001542:	2480      	movs	r4, #128	; 0x80
 8001544:	0424      	lsls	r4, r4, #16
 8001546:	4321      	orrs	r1, r4
 8001548:	2f38      	cmp	r7, #56	; 0x38
 800154a:	dd00      	ble.n	800154e <__aeabi_dadd+0x302>
 800154c:	e11e      	b.n	800178c <__aeabi_dadd+0x540>
 800154e:	2f1f      	cmp	r7, #31
 8001550:	dd00      	ble.n	8001554 <__aeabi_dadd+0x308>
 8001552:	e19e      	b.n	8001892 <__aeabi_dadd+0x646>
 8001554:	2620      	movs	r6, #32
 8001556:	000c      	movs	r4, r1
 8001558:	1bf6      	subs	r6, r6, r7
 800155a:	0018      	movs	r0, r3
 800155c:	40b3      	lsls	r3, r6
 800155e:	40b4      	lsls	r4, r6
 8001560:	40f8      	lsrs	r0, r7
 8001562:	1e5e      	subs	r6, r3, #1
 8001564:	41b3      	sbcs	r3, r6
 8001566:	40f9      	lsrs	r1, r7
 8001568:	4304      	orrs	r4, r0
 800156a:	431c      	orrs	r4, r3
 800156c:	4489      	add	r9, r1
 800156e:	4444      	add	r4, r8
 8001570:	4544      	cmp	r4, r8
 8001572:	419b      	sbcs	r3, r3
 8001574:	425b      	negs	r3, r3
 8001576:	444b      	add	r3, r9
 8001578:	469a      	mov	sl, r3
 800157a:	0016      	movs	r6, r2
 800157c:	e7a8      	b.n	80014d0 <__aeabi_dadd+0x284>
 800157e:	4642      	mov	r2, r8
 8001580:	464c      	mov	r4, r9
 8001582:	4314      	orrs	r4, r2
 8001584:	1e62      	subs	r2, r4, #1
 8001586:	4194      	sbcs	r4, r2
 8001588:	e6a6      	b.n	80012d8 <__aeabi_dadd+0x8c>
 800158a:	4c0d      	ldr	r4, [pc, #52]	; (80015c0 <__aeabi_dadd+0x374>)
 800158c:	1c72      	adds	r2, r6, #1
 800158e:	4222      	tst	r2, r4
 8001590:	d000      	beq.n	8001594 <__aeabi_dadd+0x348>
 8001592:	e0a8      	b.n	80016e6 <__aeabi_dadd+0x49a>
 8001594:	000a      	movs	r2, r1
 8001596:	431a      	orrs	r2, r3
 8001598:	2e00      	cmp	r6, #0
 800159a:	d000      	beq.n	800159e <__aeabi_dadd+0x352>
 800159c:	e10a      	b.n	80017b4 <__aeabi_dadd+0x568>
 800159e:	2a00      	cmp	r2, #0
 80015a0:	d100      	bne.n	80015a4 <__aeabi_dadd+0x358>
 80015a2:	e15e      	b.n	8001862 <__aeabi_dadd+0x616>
 80015a4:	464a      	mov	r2, r9
 80015a6:	4302      	orrs	r2, r0
 80015a8:	d000      	beq.n	80015ac <__aeabi_dadd+0x360>
 80015aa:	e161      	b.n	8001870 <__aeabi_dadd+0x624>
 80015ac:	074a      	lsls	r2, r1, #29
 80015ae:	08db      	lsrs	r3, r3, #3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	08c9      	lsrs	r1, r1, #3
 80015b4:	e77c      	b.n	80014b0 <__aeabi_dadd+0x264>
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	000007ff 	.word	0x000007ff
 80015bc:	ff7fffff 	.word	0xff7fffff
 80015c0:	000007fe 	.word	0x000007fe
 80015c4:	4ccf      	ldr	r4, [pc, #828]	; (8001904 <__aeabi_dadd+0x6b8>)
 80015c6:	42a2      	cmp	r2, r4
 80015c8:	d100      	bne.n	80015cc <__aeabi_dadd+0x380>
 80015ca:	e0ce      	b.n	800176a <__aeabi_dadd+0x51e>
 80015cc:	2480      	movs	r4, #128	; 0x80
 80015ce:	0424      	lsls	r4, r4, #16
 80015d0:	4321      	orrs	r1, r4
 80015d2:	2f38      	cmp	r7, #56	; 0x38
 80015d4:	dc5b      	bgt.n	800168e <__aeabi_dadd+0x442>
 80015d6:	2f1f      	cmp	r7, #31
 80015d8:	dd00      	ble.n	80015dc <__aeabi_dadd+0x390>
 80015da:	e0dc      	b.n	8001796 <__aeabi_dadd+0x54a>
 80015dc:	2520      	movs	r5, #32
 80015de:	000c      	movs	r4, r1
 80015e0:	1bed      	subs	r5, r5, r7
 80015e2:	001e      	movs	r6, r3
 80015e4:	40ab      	lsls	r3, r5
 80015e6:	40ac      	lsls	r4, r5
 80015e8:	40fe      	lsrs	r6, r7
 80015ea:	1e5d      	subs	r5, r3, #1
 80015ec:	41ab      	sbcs	r3, r5
 80015ee:	4334      	orrs	r4, r6
 80015f0:	40f9      	lsrs	r1, r7
 80015f2:	431c      	orrs	r4, r3
 80015f4:	464b      	mov	r3, r9
 80015f6:	1a5b      	subs	r3, r3, r1
 80015f8:	4699      	mov	r9, r3
 80015fa:	e04c      	b.n	8001696 <__aeabi_dadd+0x44a>
 80015fc:	464a      	mov	r2, r9
 80015fe:	1a1c      	subs	r4, r3, r0
 8001600:	1a88      	subs	r0, r1, r2
 8001602:	42a3      	cmp	r3, r4
 8001604:	4192      	sbcs	r2, r2
 8001606:	4252      	negs	r2, r2
 8001608:	4692      	mov	sl, r2
 800160a:	0002      	movs	r2, r0
 800160c:	4650      	mov	r0, sl
 800160e:	1a12      	subs	r2, r2, r0
 8001610:	4692      	mov	sl, r2
 8001612:	0212      	lsls	r2, r2, #8
 8001614:	d478      	bmi.n	8001708 <__aeabi_dadd+0x4bc>
 8001616:	4653      	mov	r3, sl
 8001618:	4323      	orrs	r3, r4
 800161a:	d000      	beq.n	800161e <__aeabi_dadd+0x3d2>
 800161c:	e66a      	b.n	80012f4 <__aeabi_dadd+0xa8>
 800161e:	2100      	movs	r1, #0
 8001620:	2500      	movs	r5, #0
 8001622:	e745      	b.n	80014b0 <__aeabi_dadd+0x264>
 8001624:	074a      	lsls	r2, r1, #29
 8001626:	08db      	lsrs	r3, r3, #3
 8001628:	4313      	orrs	r3, r2
 800162a:	08c9      	lsrs	r1, r1, #3
 800162c:	e73d      	b.n	80014aa <__aeabi_dadd+0x25e>
 800162e:	181c      	adds	r4, r3, r0
 8001630:	429c      	cmp	r4, r3
 8001632:	419b      	sbcs	r3, r3
 8001634:	4449      	add	r1, r9
 8001636:	468a      	mov	sl, r1
 8001638:	425b      	negs	r3, r3
 800163a:	449a      	add	sl, r3
 800163c:	4653      	mov	r3, sl
 800163e:	2601      	movs	r6, #1
 8001640:	021b      	lsls	r3, r3, #8
 8001642:	d400      	bmi.n	8001646 <__aeabi_dadd+0x3fa>
 8001644:	e727      	b.n	8001496 <__aeabi_dadd+0x24a>
 8001646:	2602      	movs	r6, #2
 8001648:	4652      	mov	r2, sl
 800164a:	4baf      	ldr	r3, [pc, #700]	; (8001908 <__aeabi_dadd+0x6bc>)
 800164c:	2101      	movs	r1, #1
 800164e:	401a      	ands	r2, r3
 8001650:	0013      	movs	r3, r2
 8001652:	4021      	ands	r1, r4
 8001654:	0862      	lsrs	r2, r4, #1
 8001656:	430a      	orrs	r2, r1
 8001658:	07dc      	lsls	r4, r3, #31
 800165a:	085b      	lsrs	r3, r3, #1
 800165c:	469a      	mov	sl, r3
 800165e:	4314      	orrs	r4, r2
 8001660:	e670      	b.n	8001344 <__aeabi_dadd+0xf8>
 8001662:	003a      	movs	r2, r7
 8001664:	464c      	mov	r4, r9
 8001666:	3a20      	subs	r2, #32
 8001668:	40d4      	lsrs	r4, r2
 800166a:	46a4      	mov	ip, r4
 800166c:	2f20      	cmp	r7, #32
 800166e:	d007      	beq.n	8001680 <__aeabi_dadd+0x434>
 8001670:	2240      	movs	r2, #64	; 0x40
 8001672:	4648      	mov	r0, r9
 8001674:	1bd2      	subs	r2, r2, r7
 8001676:	4090      	lsls	r0, r2
 8001678:	0002      	movs	r2, r0
 800167a:	4640      	mov	r0, r8
 800167c:	4310      	orrs	r0, r2
 800167e:	4680      	mov	r8, r0
 8001680:	4640      	mov	r0, r8
 8001682:	1e42      	subs	r2, r0, #1
 8001684:	4190      	sbcs	r0, r2
 8001686:	4662      	mov	r2, ip
 8001688:	0004      	movs	r4, r0
 800168a:	4314      	orrs	r4, r2
 800168c:	e624      	b.n	80012d8 <__aeabi_dadd+0x8c>
 800168e:	4319      	orrs	r1, r3
 8001690:	000c      	movs	r4, r1
 8001692:	1e63      	subs	r3, r4, #1
 8001694:	419c      	sbcs	r4, r3
 8001696:	4643      	mov	r3, r8
 8001698:	1b1c      	subs	r4, r3, r4
 800169a:	45a0      	cmp	r8, r4
 800169c:	419b      	sbcs	r3, r3
 800169e:	4649      	mov	r1, r9
 80016a0:	425b      	negs	r3, r3
 80016a2:	1acb      	subs	r3, r1, r3
 80016a4:	469a      	mov	sl, r3
 80016a6:	4665      	mov	r5, ip
 80016a8:	0016      	movs	r6, r2
 80016aa:	e61b      	b.n	80012e4 <__aeabi_dadd+0x98>
 80016ac:	000c      	movs	r4, r1
 80016ae:	431c      	orrs	r4, r3
 80016b0:	d100      	bne.n	80016b4 <__aeabi_dadd+0x468>
 80016b2:	e0c7      	b.n	8001844 <__aeabi_dadd+0x5f8>
 80016b4:	1e7c      	subs	r4, r7, #1
 80016b6:	2f01      	cmp	r7, #1
 80016b8:	d100      	bne.n	80016bc <__aeabi_dadd+0x470>
 80016ba:	e0f9      	b.n	80018b0 <__aeabi_dadd+0x664>
 80016bc:	4e91      	ldr	r6, [pc, #580]	; (8001904 <__aeabi_dadd+0x6b8>)
 80016be:	42b7      	cmp	r7, r6
 80016c0:	d05c      	beq.n	800177c <__aeabi_dadd+0x530>
 80016c2:	0027      	movs	r7, r4
 80016c4:	e740      	b.n	8001548 <__aeabi_dadd+0x2fc>
 80016c6:	2220      	movs	r2, #32
 80016c8:	464c      	mov	r4, r9
 80016ca:	4640      	mov	r0, r8
 80016cc:	1bd2      	subs	r2, r2, r7
 80016ce:	4094      	lsls	r4, r2
 80016d0:	40f8      	lsrs	r0, r7
 80016d2:	4304      	orrs	r4, r0
 80016d4:	4640      	mov	r0, r8
 80016d6:	4090      	lsls	r0, r2
 80016d8:	1e42      	subs	r2, r0, #1
 80016da:	4190      	sbcs	r0, r2
 80016dc:	464a      	mov	r2, r9
 80016de:	40fa      	lsrs	r2, r7
 80016e0:	4304      	orrs	r4, r0
 80016e2:	1889      	adds	r1, r1, r2
 80016e4:	e6ee      	b.n	80014c4 <__aeabi_dadd+0x278>
 80016e6:	4c87      	ldr	r4, [pc, #540]	; (8001904 <__aeabi_dadd+0x6b8>)
 80016e8:	42a2      	cmp	r2, r4
 80016ea:	d100      	bne.n	80016ee <__aeabi_dadd+0x4a2>
 80016ec:	e6f9      	b.n	80014e2 <__aeabi_dadd+0x296>
 80016ee:	1818      	adds	r0, r3, r0
 80016f0:	4298      	cmp	r0, r3
 80016f2:	419b      	sbcs	r3, r3
 80016f4:	4449      	add	r1, r9
 80016f6:	425b      	negs	r3, r3
 80016f8:	18cb      	adds	r3, r1, r3
 80016fa:	07dc      	lsls	r4, r3, #31
 80016fc:	0840      	lsrs	r0, r0, #1
 80016fe:	085b      	lsrs	r3, r3, #1
 8001700:	469a      	mov	sl, r3
 8001702:	0016      	movs	r6, r2
 8001704:	4304      	orrs	r4, r0
 8001706:	e6c6      	b.n	8001496 <__aeabi_dadd+0x24a>
 8001708:	4642      	mov	r2, r8
 800170a:	1ad4      	subs	r4, r2, r3
 800170c:	45a0      	cmp	r8, r4
 800170e:	4180      	sbcs	r0, r0
 8001710:	464b      	mov	r3, r9
 8001712:	4240      	negs	r0, r0
 8001714:	1a59      	subs	r1, r3, r1
 8001716:	1a0b      	subs	r3, r1, r0
 8001718:	469a      	mov	sl, r3
 800171a:	4665      	mov	r5, ip
 800171c:	e5ea      	b.n	80012f4 <__aeabi_dadd+0xa8>
 800171e:	464b      	mov	r3, r9
 8001720:	464a      	mov	r2, r9
 8001722:	08c0      	lsrs	r0, r0, #3
 8001724:	075b      	lsls	r3, r3, #29
 8001726:	4665      	mov	r5, ip
 8001728:	4303      	orrs	r3, r0
 800172a:	08d1      	lsrs	r1, r2, #3
 800172c:	e6bd      	b.n	80014aa <__aeabi_dadd+0x25e>
 800172e:	2a00      	cmp	r2, #0
 8001730:	d000      	beq.n	8001734 <__aeabi_dadd+0x4e8>
 8001732:	e08e      	b.n	8001852 <__aeabi_dadd+0x606>
 8001734:	464b      	mov	r3, r9
 8001736:	4303      	orrs	r3, r0
 8001738:	d117      	bne.n	800176a <__aeabi_dadd+0x51e>
 800173a:	2180      	movs	r1, #128	; 0x80
 800173c:	2500      	movs	r5, #0
 800173e:	0309      	lsls	r1, r1, #12
 8001740:	e6da      	b.n	80014f8 <__aeabi_dadd+0x2ac>
 8001742:	074a      	lsls	r2, r1, #29
 8001744:	08db      	lsrs	r3, r3, #3
 8001746:	4313      	orrs	r3, r2
 8001748:	08c9      	lsrs	r1, r1, #3
 800174a:	e6d1      	b.n	80014f0 <__aeabi_dadd+0x2a4>
 800174c:	1a1c      	subs	r4, r3, r0
 800174e:	464a      	mov	r2, r9
 8001750:	42a3      	cmp	r3, r4
 8001752:	419b      	sbcs	r3, r3
 8001754:	1a89      	subs	r1, r1, r2
 8001756:	425b      	negs	r3, r3
 8001758:	1acb      	subs	r3, r1, r3
 800175a:	469a      	mov	sl, r3
 800175c:	2601      	movs	r6, #1
 800175e:	e5c1      	b.n	80012e4 <__aeabi_dadd+0x98>
 8001760:	074a      	lsls	r2, r1, #29
 8001762:	08db      	lsrs	r3, r3, #3
 8001764:	4313      	orrs	r3, r2
 8001766:	08c9      	lsrs	r1, r1, #3
 8001768:	e69f      	b.n	80014aa <__aeabi_dadd+0x25e>
 800176a:	4643      	mov	r3, r8
 800176c:	08d8      	lsrs	r0, r3, #3
 800176e:	464b      	mov	r3, r9
 8001770:	464a      	mov	r2, r9
 8001772:	075b      	lsls	r3, r3, #29
 8001774:	4665      	mov	r5, ip
 8001776:	4303      	orrs	r3, r0
 8001778:	08d1      	lsrs	r1, r2, #3
 800177a:	e6b9      	b.n	80014f0 <__aeabi_dadd+0x2a4>
 800177c:	4643      	mov	r3, r8
 800177e:	08d8      	lsrs	r0, r3, #3
 8001780:	464b      	mov	r3, r9
 8001782:	464a      	mov	r2, r9
 8001784:	075b      	lsls	r3, r3, #29
 8001786:	4303      	orrs	r3, r0
 8001788:	08d1      	lsrs	r1, r2, #3
 800178a:	e6b1      	b.n	80014f0 <__aeabi_dadd+0x2a4>
 800178c:	4319      	orrs	r1, r3
 800178e:	000c      	movs	r4, r1
 8001790:	1e63      	subs	r3, r4, #1
 8001792:	419c      	sbcs	r4, r3
 8001794:	e6eb      	b.n	800156e <__aeabi_dadd+0x322>
 8001796:	003c      	movs	r4, r7
 8001798:	000d      	movs	r5, r1
 800179a:	3c20      	subs	r4, #32
 800179c:	40e5      	lsrs	r5, r4
 800179e:	2f20      	cmp	r7, #32
 80017a0:	d003      	beq.n	80017aa <__aeabi_dadd+0x55e>
 80017a2:	2440      	movs	r4, #64	; 0x40
 80017a4:	1be4      	subs	r4, r4, r7
 80017a6:	40a1      	lsls	r1, r4
 80017a8:	430b      	orrs	r3, r1
 80017aa:	001c      	movs	r4, r3
 80017ac:	1e63      	subs	r3, r4, #1
 80017ae:	419c      	sbcs	r4, r3
 80017b0:	432c      	orrs	r4, r5
 80017b2:	e770      	b.n	8001696 <__aeabi_dadd+0x44a>
 80017b4:	2a00      	cmp	r2, #0
 80017b6:	d0e1      	beq.n	800177c <__aeabi_dadd+0x530>
 80017b8:	464a      	mov	r2, r9
 80017ba:	4302      	orrs	r2, r0
 80017bc:	d0c1      	beq.n	8001742 <__aeabi_dadd+0x4f6>
 80017be:	074a      	lsls	r2, r1, #29
 80017c0:	08db      	lsrs	r3, r3, #3
 80017c2:	4313      	orrs	r3, r2
 80017c4:	2280      	movs	r2, #128	; 0x80
 80017c6:	08c9      	lsrs	r1, r1, #3
 80017c8:	0312      	lsls	r2, r2, #12
 80017ca:	4211      	tst	r1, r2
 80017cc:	d008      	beq.n	80017e0 <__aeabi_dadd+0x594>
 80017ce:	4648      	mov	r0, r9
 80017d0:	08c4      	lsrs	r4, r0, #3
 80017d2:	4214      	tst	r4, r2
 80017d4:	d104      	bne.n	80017e0 <__aeabi_dadd+0x594>
 80017d6:	4643      	mov	r3, r8
 80017d8:	0021      	movs	r1, r4
 80017da:	08db      	lsrs	r3, r3, #3
 80017dc:	0742      	lsls	r2, r0, #29
 80017de:	4313      	orrs	r3, r2
 80017e0:	0f5a      	lsrs	r2, r3, #29
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	0752      	lsls	r2, r2, #29
 80017e6:	08db      	lsrs	r3, r3, #3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	e681      	b.n	80014f0 <__aeabi_dadd+0x2a4>
 80017ec:	464b      	mov	r3, r9
 80017ee:	4303      	orrs	r3, r0
 80017f0:	d100      	bne.n	80017f4 <__aeabi_dadd+0x5a8>
 80017f2:	e714      	b.n	800161e <__aeabi_dadd+0x3d2>
 80017f4:	464b      	mov	r3, r9
 80017f6:	464a      	mov	r2, r9
 80017f8:	08c0      	lsrs	r0, r0, #3
 80017fa:	075b      	lsls	r3, r3, #29
 80017fc:	4665      	mov	r5, ip
 80017fe:	4303      	orrs	r3, r0
 8001800:	08d1      	lsrs	r1, r2, #3
 8001802:	e655      	b.n	80014b0 <__aeabi_dadd+0x264>
 8001804:	1ac4      	subs	r4, r0, r3
 8001806:	45a0      	cmp	r8, r4
 8001808:	4180      	sbcs	r0, r0
 800180a:	464b      	mov	r3, r9
 800180c:	4240      	negs	r0, r0
 800180e:	1a59      	subs	r1, r3, r1
 8001810:	1a0b      	subs	r3, r1, r0
 8001812:	469a      	mov	sl, r3
 8001814:	4665      	mov	r5, ip
 8001816:	2601      	movs	r6, #1
 8001818:	e564      	b.n	80012e4 <__aeabi_dadd+0x98>
 800181a:	1a1c      	subs	r4, r3, r0
 800181c:	464a      	mov	r2, r9
 800181e:	42a3      	cmp	r3, r4
 8001820:	4180      	sbcs	r0, r0
 8001822:	1a8a      	subs	r2, r1, r2
 8001824:	4240      	negs	r0, r0
 8001826:	1a12      	subs	r2, r2, r0
 8001828:	4692      	mov	sl, r2
 800182a:	0212      	lsls	r2, r2, #8
 800182c:	d549      	bpl.n	80018c2 <__aeabi_dadd+0x676>
 800182e:	4642      	mov	r2, r8
 8001830:	1ad4      	subs	r4, r2, r3
 8001832:	45a0      	cmp	r8, r4
 8001834:	4180      	sbcs	r0, r0
 8001836:	464b      	mov	r3, r9
 8001838:	4240      	negs	r0, r0
 800183a:	1a59      	subs	r1, r3, r1
 800183c:	1a0b      	subs	r3, r1, r0
 800183e:	469a      	mov	sl, r3
 8001840:	4665      	mov	r5, ip
 8001842:	e57f      	b.n	8001344 <__aeabi_dadd+0xf8>
 8001844:	464b      	mov	r3, r9
 8001846:	464a      	mov	r2, r9
 8001848:	08c0      	lsrs	r0, r0, #3
 800184a:	075b      	lsls	r3, r3, #29
 800184c:	4303      	orrs	r3, r0
 800184e:	08d1      	lsrs	r1, r2, #3
 8001850:	e62b      	b.n	80014aa <__aeabi_dadd+0x25e>
 8001852:	464a      	mov	r2, r9
 8001854:	08db      	lsrs	r3, r3, #3
 8001856:	4302      	orrs	r2, r0
 8001858:	d138      	bne.n	80018cc <__aeabi_dadd+0x680>
 800185a:	074a      	lsls	r2, r1, #29
 800185c:	4313      	orrs	r3, r2
 800185e:	08c9      	lsrs	r1, r1, #3
 8001860:	e646      	b.n	80014f0 <__aeabi_dadd+0x2a4>
 8001862:	464b      	mov	r3, r9
 8001864:	464a      	mov	r2, r9
 8001866:	08c0      	lsrs	r0, r0, #3
 8001868:	075b      	lsls	r3, r3, #29
 800186a:	4303      	orrs	r3, r0
 800186c:	08d1      	lsrs	r1, r2, #3
 800186e:	e61f      	b.n	80014b0 <__aeabi_dadd+0x264>
 8001870:	181c      	adds	r4, r3, r0
 8001872:	429c      	cmp	r4, r3
 8001874:	419b      	sbcs	r3, r3
 8001876:	4449      	add	r1, r9
 8001878:	468a      	mov	sl, r1
 800187a:	425b      	negs	r3, r3
 800187c:	449a      	add	sl, r3
 800187e:	4653      	mov	r3, sl
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	d400      	bmi.n	8001886 <__aeabi_dadd+0x63a>
 8001884:	e607      	b.n	8001496 <__aeabi_dadd+0x24a>
 8001886:	4652      	mov	r2, sl
 8001888:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <__aeabi_dadd+0x6bc>)
 800188a:	2601      	movs	r6, #1
 800188c:	401a      	ands	r2, r3
 800188e:	4692      	mov	sl, r2
 8001890:	e601      	b.n	8001496 <__aeabi_dadd+0x24a>
 8001892:	003c      	movs	r4, r7
 8001894:	000e      	movs	r6, r1
 8001896:	3c20      	subs	r4, #32
 8001898:	40e6      	lsrs	r6, r4
 800189a:	2f20      	cmp	r7, #32
 800189c:	d003      	beq.n	80018a6 <__aeabi_dadd+0x65a>
 800189e:	2440      	movs	r4, #64	; 0x40
 80018a0:	1be4      	subs	r4, r4, r7
 80018a2:	40a1      	lsls	r1, r4
 80018a4:	430b      	orrs	r3, r1
 80018a6:	001c      	movs	r4, r3
 80018a8:	1e63      	subs	r3, r4, #1
 80018aa:	419c      	sbcs	r4, r3
 80018ac:	4334      	orrs	r4, r6
 80018ae:	e65e      	b.n	800156e <__aeabi_dadd+0x322>
 80018b0:	4443      	add	r3, r8
 80018b2:	4283      	cmp	r3, r0
 80018b4:	4180      	sbcs	r0, r0
 80018b6:	4449      	add	r1, r9
 80018b8:	468a      	mov	sl, r1
 80018ba:	4240      	negs	r0, r0
 80018bc:	001c      	movs	r4, r3
 80018be:	4482      	add	sl, r0
 80018c0:	e6bc      	b.n	800163c <__aeabi_dadd+0x3f0>
 80018c2:	4653      	mov	r3, sl
 80018c4:	4323      	orrs	r3, r4
 80018c6:	d100      	bne.n	80018ca <__aeabi_dadd+0x67e>
 80018c8:	e6a9      	b.n	800161e <__aeabi_dadd+0x3d2>
 80018ca:	e5e4      	b.n	8001496 <__aeabi_dadd+0x24a>
 80018cc:	074a      	lsls	r2, r1, #29
 80018ce:	4313      	orrs	r3, r2
 80018d0:	2280      	movs	r2, #128	; 0x80
 80018d2:	08c9      	lsrs	r1, r1, #3
 80018d4:	0312      	lsls	r2, r2, #12
 80018d6:	4211      	tst	r1, r2
 80018d8:	d009      	beq.n	80018ee <__aeabi_dadd+0x6a2>
 80018da:	4648      	mov	r0, r9
 80018dc:	08c4      	lsrs	r4, r0, #3
 80018de:	4214      	tst	r4, r2
 80018e0:	d105      	bne.n	80018ee <__aeabi_dadd+0x6a2>
 80018e2:	4643      	mov	r3, r8
 80018e4:	4665      	mov	r5, ip
 80018e6:	0021      	movs	r1, r4
 80018e8:	08db      	lsrs	r3, r3, #3
 80018ea:	0742      	lsls	r2, r0, #29
 80018ec:	4313      	orrs	r3, r2
 80018ee:	0f5a      	lsrs	r2, r3, #29
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	08db      	lsrs	r3, r3, #3
 80018f4:	0752      	lsls	r2, r2, #29
 80018f6:	4313      	orrs	r3, r2
 80018f8:	e5fa      	b.n	80014f0 <__aeabi_dadd+0x2a4>
 80018fa:	2300      	movs	r3, #0
 80018fc:	4a01      	ldr	r2, [pc, #4]	; (8001904 <__aeabi_dadd+0x6b8>)
 80018fe:	001c      	movs	r4, r3
 8001900:	e540      	b.n	8001384 <__aeabi_dadd+0x138>
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	000007ff 	.word	0x000007ff
 8001908:	ff7fffff 	.word	0xff7fffff

0800190c <__aeabi_ddiv>:
 800190c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800190e:	4657      	mov	r7, sl
 8001910:	464e      	mov	r6, r9
 8001912:	4645      	mov	r5, r8
 8001914:	46de      	mov	lr, fp
 8001916:	b5e0      	push	{r5, r6, r7, lr}
 8001918:	030c      	lsls	r4, r1, #12
 800191a:	001f      	movs	r7, r3
 800191c:	004b      	lsls	r3, r1, #1
 800191e:	4681      	mov	r9, r0
 8001920:	4692      	mov	sl, r2
 8001922:	0005      	movs	r5, r0
 8001924:	b085      	sub	sp, #20
 8001926:	0b24      	lsrs	r4, r4, #12
 8001928:	0d5b      	lsrs	r3, r3, #21
 800192a:	0fce      	lsrs	r6, r1, #31
 800192c:	2b00      	cmp	r3, #0
 800192e:	d100      	bne.n	8001932 <__aeabi_ddiv+0x26>
 8001930:	e152      	b.n	8001bd8 <__aeabi_ddiv+0x2cc>
 8001932:	4ad2      	ldr	r2, [pc, #840]	; (8001c7c <__aeabi_ddiv+0x370>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d100      	bne.n	800193a <__aeabi_ddiv+0x2e>
 8001938:	e16e      	b.n	8001c18 <__aeabi_ddiv+0x30c>
 800193a:	0f42      	lsrs	r2, r0, #29
 800193c:	00e4      	lsls	r4, r4, #3
 800193e:	4314      	orrs	r4, r2
 8001940:	2280      	movs	r2, #128	; 0x80
 8001942:	0412      	lsls	r2, r2, #16
 8001944:	4322      	orrs	r2, r4
 8001946:	4690      	mov	r8, r2
 8001948:	4acd      	ldr	r2, [pc, #820]	; (8001c80 <__aeabi_ddiv+0x374>)
 800194a:	00c5      	lsls	r5, r0, #3
 800194c:	4693      	mov	fp, r2
 800194e:	449b      	add	fp, r3
 8001950:	2300      	movs	r3, #0
 8001952:	4699      	mov	r9, r3
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	033c      	lsls	r4, r7, #12
 8001958:	007b      	lsls	r3, r7, #1
 800195a:	4650      	mov	r0, sl
 800195c:	0b24      	lsrs	r4, r4, #12
 800195e:	0d5b      	lsrs	r3, r3, #21
 8001960:	0fff      	lsrs	r7, r7, #31
 8001962:	2b00      	cmp	r3, #0
 8001964:	d100      	bne.n	8001968 <__aeabi_ddiv+0x5c>
 8001966:	e11a      	b.n	8001b9e <__aeabi_ddiv+0x292>
 8001968:	4ac4      	ldr	r2, [pc, #784]	; (8001c7c <__aeabi_ddiv+0x370>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d100      	bne.n	8001970 <__aeabi_ddiv+0x64>
 800196e:	e15e      	b.n	8001c2e <__aeabi_ddiv+0x322>
 8001970:	0f42      	lsrs	r2, r0, #29
 8001972:	00e4      	lsls	r4, r4, #3
 8001974:	4322      	orrs	r2, r4
 8001976:	2480      	movs	r4, #128	; 0x80
 8001978:	0424      	lsls	r4, r4, #16
 800197a:	4314      	orrs	r4, r2
 800197c:	4ac0      	ldr	r2, [pc, #768]	; (8001c80 <__aeabi_ddiv+0x374>)
 800197e:	00c1      	lsls	r1, r0, #3
 8001980:	4694      	mov	ip, r2
 8001982:	465a      	mov	r2, fp
 8001984:	4463      	add	r3, ip
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	469b      	mov	fp, r3
 800198a:	2000      	movs	r0, #0
 800198c:	0033      	movs	r3, r6
 800198e:	407b      	eors	r3, r7
 8001990:	469a      	mov	sl, r3
 8001992:	464b      	mov	r3, r9
 8001994:	2b0f      	cmp	r3, #15
 8001996:	d827      	bhi.n	80019e8 <__aeabi_ddiv+0xdc>
 8001998:	4aba      	ldr	r2, [pc, #744]	; (8001c84 <__aeabi_ddiv+0x378>)
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	58d3      	ldr	r3, [r2, r3]
 800199e:	469f      	mov	pc, r3
 80019a0:	46b2      	mov	sl, r6
 80019a2:	9b00      	ldr	r3, [sp, #0]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d016      	beq.n	80019d6 <__aeabi_ddiv+0xca>
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d100      	bne.n	80019ae <__aeabi_ddiv+0xa2>
 80019ac:	e287      	b.n	8001ebe <__aeabi_ddiv+0x5b2>
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d000      	beq.n	80019b4 <__aeabi_ddiv+0xa8>
 80019b2:	e0d5      	b.n	8001b60 <__aeabi_ddiv+0x254>
 80019b4:	2300      	movs	r3, #0
 80019b6:	2200      	movs	r2, #0
 80019b8:	2500      	movs	r5, #0
 80019ba:	051b      	lsls	r3, r3, #20
 80019bc:	4313      	orrs	r3, r2
 80019be:	4652      	mov	r2, sl
 80019c0:	07d2      	lsls	r2, r2, #31
 80019c2:	4313      	orrs	r3, r2
 80019c4:	0028      	movs	r0, r5
 80019c6:	0019      	movs	r1, r3
 80019c8:	b005      	add	sp, #20
 80019ca:	bcf0      	pop	{r4, r5, r6, r7}
 80019cc:	46bb      	mov	fp, r7
 80019ce:	46b2      	mov	sl, r6
 80019d0:	46a9      	mov	r9, r5
 80019d2:	46a0      	mov	r8, r4
 80019d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d6:	2200      	movs	r2, #0
 80019d8:	2500      	movs	r5, #0
 80019da:	4ba8      	ldr	r3, [pc, #672]	; (8001c7c <__aeabi_ddiv+0x370>)
 80019dc:	e7ed      	b.n	80019ba <__aeabi_ddiv+0xae>
 80019de:	46ba      	mov	sl, r7
 80019e0:	46a0      	mov	r8, r4
 80019e2:	000d      	movs	r5, r1
 80019e4:	9000      	str	r0, [sp, #0]
 80019e6:	e7dc      	b.n	80019a2 <__aeabi_ddiv+0x96>
 80019e8:	4544      	cmp	r4, r8
 80019ea:	d200      	bcs.n	80019ee <__aeabi_ddiv+0xe2>
 80019ec:	e1c4      	b.n	8001d78 <__aeabi_ddiv+0x46c>
 80019ee:	d100      	bne.n	80019f2 <__aeabi_ddiv+0xe6>
 80019f0:	e1bf      	b.n	8001d72 <__aeabi_ddiv+0x466>
 80019f2:	2301      	movs	r3, #1
 80019f4:	425b      	negs	r3, r3
 80019f6:	469c      	mov	ip, r3
 80019f8:	002e      	movs	r6, r5
 80019fa:	4640      	mov	r0, r8
 80019fc:	2500      	movs	r5, #0
 80019fe:	44e3      	add	fp, ip
 8001a00:	0223      	lsls	r3, r4, #8
 8001a02:	0e0c      	lsrs	r4, r1, #24
 8001a04:	431c      	orrs	r4, r3
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	4699      	mov	r9, r3
 8001a0a:	0423      	lsls	r3, r4, #16
 8001a0c:	020a      	lsls	r2, r1, #8
 8001a0e:	0c1f      	lsrs	r7, r3, #16
 8001a10:	4649      	mov	r1, r9
 8001a12:	9200      	str	r2, [sp, #0]
 8001a14:	9701      	str	r7, [sp, #4]
 8001a16:	f7fe fc07 	bl	8000228 <__aeabi_uidivmod>
 8001a1a:	0002      	movs	r2, r0
 8001a1c:	437a      	muls	r2, r7
 8001a1e:	040b      	lsls	r3, r1, #16
 8001a20:	0c31      	lsrs	r1, r6, #16
 8001a22:	4680      	mov	r8, r0
 8001a24:	4319      	orrs	r1, r3
 8001a26:	428a      	cmp	r2, r1
 8001a28:	d907      	bls.n	8001a3a <__aeabi_ddiv+0x12e>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	425b      	negs	r3, r3
 8001a2e:	469c      	mov	ip, r3
 8001a30:	1909      	adds	r1, r1, r4
 8001a32:	44e0      	add	r8, ip
 8001a34:	428c      	cmp	r4, r1
 8001a36:	d800      	bhi.n	8001a3a <__aeabi_ddiv+0x12e>
 8001a38:	e201      	b.n	8001e3e <__aeabi_ddiv+0x532>
 8001a3a:	1a88      	subs	r0, r1, r2
 8001a3c:	4649      	mov	r1, r9
 8001a3e:	f7fe fbf3 	bl	8000228 <__aeabi_uidivmod>
 8001a42:	9a01      	ldr	r2, [sp, #4]
 8001a44:	0436      	lsls	r6, r6, #16
 8001a46:	4342      	muls	r2, r0
 8001a48:	0409      	lsls	r1, r1, #16
 8001a4a:	0c36      	lsrs	r6, r6, #16
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	430e      	orrs	r6, r1
 8001a50:	42b2      	cmp	r2, r6
 8001a52:	d904      	bls.n	8001a5e <__aeabi_ddiv+0x152>
 8001a54:	1936      	adds	r6, r6, r4
 8001a56:	3b01      	subs	r3, #1
 8001a58:	42b4      	cmp	r4, r6
 8001a5a:	d800      	bhi.n	8001a5e <__aeabi_ddiv+0x152>
 8001a5c:	e1e9      	b.n	8001e32 <__aeabi_ddiv+0x526>
 8001a5e:	1ab0      	subs	r0, r6, r2
 8001a60:	4642      	mov	r2, r8
 8001a62:	9e00      	ldr	r6, [sp, #0]
 8001a64:	0412      	lsls	r2, r2, #16
 8001a66:	431a      	orrs	r2, r3
 8001a68:	0c33      	lsrs	r3, r6, #16
 8001a6a:	001f      	movs	r7, r3
 8001a6c:	0c11      	lsrs	r1, r2, #16
 8001a6e:	4690      	mov	r8, r2
 8001a70:	9302      	str	r3, [sp, #8]
 8001a72:	0413      	lsls	r3, r2, #16
 8001a74:	0432      	lsls	r2, r6, #16
 8001a76:	0c16      	lsrs	r6, r2, #16
 8001a78:	0032      	movs	r2, r6
 8001a7a:	0c1b      	lsrs	r3, r3, #16
 8001a7c:	435a      	muls	r2, r3
 8001a7e:	9603      	str	r6, [sp, #12]
 8001a80:	437b      	muls	r3, r7
 8001a82:	434e      	muls	r6, r1
 8001a84:	4379      	muls	r1, r7
 8001a86:	0c17      	lsrs	r7, r2, #16
 8001a88:	46bc      	mov	ip, r7
 8001a8a:	199b      	adds	r3, r3, r6
 8001a8c:	4463      	add	r3, ip
 8001a8e:	429e      	cmp	r6, r3
 8001a90:	d903      	bls.n	8001a9a <__aeabi_ddiv+0x18e>
 8001a92:	2680      	movs	r6, #128	; 0x80
 8001a94:	0276      	lsls	r6, r6, #9
 8001a96:	46b4      	mov	ip, r6
 8001a98:	4461      	add	r1, ip
 8001a9a:	0c1e      	lsrs	r6, r3, #16
 8001a9c:	1871      	adds	r1, r6, r1
 8001a9e:	0416      	lsls	r6, r2, #16
 8001aa0:	041b      	lsls	r3, r3, #16
 8001aa2:	0c36      	lsrs	r6, r6, #16
 8001aa4:	199e      	adds	r6, r3, r6
 8001aa6:	4288      	cmp	r0, r1
 8001aa8:	d302      	bcc.n	8001ab0 <__aeabi_ddiv+0x1a4>
 8001aaa:	d112      	bne.n	8001ad2 <__aeabi_ddiv+0x1c6>
 8001aac:	42b5      	cmp	r5, r6
 8001aae:	d210      	bcs.n	8001ad2 <__aeabi_ddiv+0x1c6>
 8001ab0:	4643      	mov	r3, r8
 8001ab2:	1e5a      	subs	r2, r3, #1
 8001ab4:	9b00      	ldr	r3, [sp, #0]
 8001ab6:	469c      	mov	ip, r3
 8001ab8:	4465      	add	r5, ip
 8001aba:	001f      	movs	r7, r3
 8001abc:	429d      	cmp	r5, r3
 8001abe:	419b      	sbcs	r3, r3
 8001ac0:	425b      	negs	r3, r3
 8001ac2:	191b      	adds	r3, r3, r4
 8001ac4:	18c0      	adds	r0, r0, r3
 8001ac6:	4284      	cmp	r4, r0
 8001ac8:	d200      	bcs.n	8001acc <__aeabi_ddiv+0x1c0>
 8001aca:	e19e      	b.n	8001e0a <__aeabi_ddiv+0x4fe>
 8001acc:	d100      	bne.n	8001ad0 <__aeabi_ddiv+0x1c4>
 8001ace:	e199      	b.n	8001e04 <__aeabi_ddiv+0x4f8>
 8001ad0:	4690      	mov	r8, r2
 8001ad2:	1bae      	subs	r6, r5, r6
 8001ad4:	42b5      	cmp	r5, r6
 8001ad6:	41ad      	sbcs	r5, r5
 8001ad8:	1a40      	subs	r0, r0, r1
 8001ada:	426d      	negs	r5, r5
 8001adc:	1b40      	subs	r0, r0, r5
 8001ade:	4284      	cmp	r4, r0
 8001ae0:	d100      	bne.n	8001ae4 <__aeabi_ddiv+0x1d8>
 8001ae2:	e1d2      	b.n	8001e8a <__aeabi_ddiv+0x57e>
 8001ae4:	4649      	mov	r1, r9
 8001ae6:	f7fe fb9f 	bl	8000228 <__aeabi_uidivmod>
 8001aea:	9a01      	ldr	r2, [sp, #4]
 8001aec:	040b      	lsls	r3, r1, #16
 8001aee:	4342      	muls	r2, r0
 8001af0:	0c31      	lsrs	r1, r6, #16
 8001af2:	0005      	movs	r5, r0
 8001af4:	4319      	orrs	r1, r3
 8001af6:	428a      	cmp	r2, r1
 8001af8:	d900      	bls.n	8001afc <__aeabi_ddiv+0x1f0>
 8001afa:	e16c      	b.n	8001dd6 <__aeabi_ddiv+0x4ca>
 8001afc:	1a88      	subs	r0, r1, r2
 8001afe:	4649      	mov	r1, r9
 8001b00:	f7fe fb92 	bl	8000228 <__aeabi_uidivmod>
 8001b04:	9a01      	ldr	r2, [sp, #4]
 8001b06:	0436      	lsls	r6, r6, #16
 8001b08:	4342      	muls	r2, r0
 8001b0a:	0409      	lsls	r1, r1, #16
 8001b0c:	0c36      	lsrs	r6, r6, #16
 8001b0e:	0003      	movs	r3, r0
 8001b10:	430e      	orrs	r6, r1
 8001b12:	42b2      	cmp	r2, r6
 8001b14:	d900      	bls.n	8001b18 <__aeabi_ddiv+0x20c>
 8001b16:	e153      	b.n	8001dc0 <__aeabi_ddiv+0x4b4>
 8001b18:	9803      	ldr	r0, [sp, #12]
 8001b1a:	1ab6      	subs	r6, r6, r2
 8001b1c:	0002      	movs	r2, r0
 8001b1e:	042d      	lsls	r5, r5, #16
 8001b20:	431d      	orrs	r5, r3
 8001b22:	9f02      	ldr	r7, [sp, #8]
 8001b24:	042b      	lsls	r3, r5, #16
 8001b26:	0c1b      	lsrs	r3, r3, #16
 8001b28:	435a      	muls	r2, r3
 8001b2a:	437b      	muls	r3, r7
 8001b2c:	469c      	mov	ip, r3
 8001b2e:	0c29      	lsrs	r1, r5, #16
 8001b30:	4348      	muls	r0, r1
 8001b32:	0c13      	lsrs	r3, r2, #16
 8001b34:	4484      	add	ip, r0
 8001b36:	4463      	add	r3, ip
 8001b38:	4379      	muls	r1, r7
 8001b3a:	4298      	cmp	r0, r3
 8001b3c:	d903      	bls.n	8001b46 <__aeabi_ddiv+0x23a>
 8001b3e:	2080      	movs	r0, #128	; 0x80
 8001b40:	0240      	lsls	r0, r0, #9
 8001b42:	4684      	mov	ip, r0
 8001b44:	4461      	add	r1, ip
 8001b46:	0c18      	lsrs	r0, r3, #16
 8001b48:	0412      	lsls	r2, r2, #16
 8001b4a:	041b      	lsls	r3, r3, #16
 8001b4c:	0c12      	lsrs	r2, r2, #16
 8001b4e:	1840      	adds	r0, r0, r1
 8001b50:	189b      	adds	r3, r3, r2
 8001b52:	4286      	cmp	r6, r0
 8001b54:	d200      	bcs.n	8001b58 <__aeabi_ddiv+0x24c>
 8001b56:	e100      	b.n	8001d5a <__aeabi_ddiv+0x44e>
 8001b58:	d100      	bne.n	8001b5c <__aeabi_ddiv+0x250>
 8001b5a:	e0fb      	b.n	8001d54 <__aeabi_ddiv+0x448>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	4b49      	ldr	r3, [pc, #292]	; (8001c88 <__aeabi_ddiv+0x37c>)
 8001b62:	445b      	add	r3, fp
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	dc00      	bgt.n	8001b6a <__aeabi_ddiv+0x25e>
 8001b68:	e0aa      	b.n	8001cc0 <__aeabi_ddiv+0x3b4>
 8001b6a:	076a      	lsls	r2, r5, #29
 8001b6c:	d000      	beq.n	8001b70 <__aeabi_ddiv+0x264>
 8001b6e:	e13d      	b.n	8001dec <__aeabi_ddiv+0x4e0>
 8001b70:	08e9      	lsrs	r1, r5, #3
 8001b72:	4642      	mov	r2, r8
 8001b74:	01d2      	lsls	r2, r2, #7
 8001b76:	d506      	bpl.n	8001b86 <__aeabi_ddiv+0x27a>
 8001b78:	4642      	mov	r2, r8
 8001b7a:	4b44      	ldr	r3, [pc, #272]	; (8001c8c <__aeabi_ddiv+0x380>)
 8001b7c:	401a      	ands	r2, r3
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	4690      	mov	r8, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	445b      	add	r3, fp
 8001b86:	4a42      	ldr	r2, [pc, #264]	; (8001c90 <__aeabi_ddiv+0x384>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	dd00      	ble.n	8001b8e <__aeabi_ddiv+0x282>
 8001b8c:	e723      	b.n	80019d6 <__aeabi_ddiv+0xca>
 8001b8e:	4642      	mov	r2, r8
 8001b90:	055b      	lsls	r3, r3, #21
 8001b92:	0755      	lsls	r5, r2, #29
 8001b94:	0252      	lsls	r2, r2, #9
 8001b96:	430d      	orrs	r5, r1
 8001b98:	0b12      	lsrs	r2, r2, #12
 8001b9a:	0d5b      	lsrs	r3, r3, #21
 8001b9c:	e70d      	b.n	80019ba <__aeabi_ddiv+0xae>
 8001b9e:	4651      	mov	r1, sl
 8001ba0:	4321      	orrs	r1, r4
 8001ba2:	d100      	bne.n	8001ba6 <__aeabi_ddiv+0x29a>
 8001ba4:	e07c      	b.n	8001ca0 <__aeabi_ddiv+0x394>
 8001ba6:	2c00      	cmp	r4, #0
 8001ba8:	d100      	bne.n	8001bac <__aeabi_ddiv+0x2a0>
 8001baa:	e0fb      	b.n	8001da4 <__aeabi_ddiv+0x498>
 8001bac:	0020      	movs	r0, r4
 8001bae:	f001 f9e9 	bl	8002f84 <__clzsi2>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	3a0b      	subs	r2, #11
 8001bb6:	231d      	movs	r3, #29
 8001bb8:	1a9b      	subs	r3, r3, r2
 8001bba:	4652      	mov	r2, sl
 8001bbc:	0001      	movs	r1, r0
 8001bbe:	40da      	lsrs	r2, r3
 8001bc0:	4653      	mov	r3, sl
 8001bc2:	3908      	subs	r1, #8
 8001bc4:	408b      	lsls	r3, r1
 8001bc6:	408c      	lsls	r4, r1
 8001bc8:	0019      	movs	r1, r3
 8001bca:	4314      	orrs	r4, r2
 8001bcc:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <__aeabi_ddiv+0x388>)
 8001bce:	4458      	add	r0, fp
 8001bd0:	469b      	mov	fp, r3
 8001bd2:	4483      	add	fp, r0
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	e6d9      	b.n	800198c <__aeabi_ddiv+0x80>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	4323      	orrs	r3, r4
 8001bdc:	4698      	mov	r8, r3
 8001bde:	d044      	beq.n	8001c6a <__aeabi_ddiv+0x35e>
 8001be0:	2c00      	cmp	r4, #0
 8001be2:	d100      	bne.n	8001be6 <__aeabi_ddiv+0x2da>
 8001be4:	e0cf      	b.n	8001d86 <__aeabi_ddiv+0x47a>
 8001be6:	0020      	movs	r0, r4
 8001be8:	f001 f9cc 	bl	8002f84 <__clzsi2>
 8001bec:	0001      	movs	r1, r0
 8001bee:	0002      	movs	r2, r0
 8001bf0:	390b      	subs	r1, #11
 8001bf2:	231d      	movs	r3, #29
 8001bf4:	1a5b      	subs	r3, r3, r1
 8001bf6:	4649      	mov	r1, r9
 8001bf8:	0010      	movs	r0, r2
 8001bfa:	40d9      	lsrs	r1, r3
 8001bfc:	3808      	subs	r0, #8
 8001bfe:	4084      	lsls	r4, r0
 8001c00:	000b      	movs	r3, r1
 8001c02:	464d      	mov	r5, r9
 8001c04:	4323      	orrs	r3, r4
 8001c06:	4698      	mov	r8, r3
 8001c08:	4085      	lsls	r5, r0
 8001c0a:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <__aeabi_ddiv+0x38c>)
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	469b      	mov	fp, r3
 8001c10:	2300      	movs	r3, #0
 8001c12:	4699      	mov	r9, r3
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	e69e      	b.n	8001956 <__aeabi_ddiv+0x4a>
 8001c18:	0002      	movs	r2, r0
 8001c1a:	4322      	orrs	r2, r4
 8001c1c:	4690      	mov	r8, r2
 8001c1e:	d11d      	bne.n	8001c5c <__aeabi_ddiv+0x350>
 8001c20:	2208      	movs	r2, #8
 8001c22:	469b      	mov	fp, r3
 8001c24:	2302      	movs	r3, #2
 8001c26:	2500      	movs	r5, #0
 8001c28:	4691      	mov	r9, r2
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	e693      	b.n	8001956 <__aeabi_ddiv+0x4a>
 8001c2e:	4651      	mov	r1, sl
 8001c30:	4321      	orrs	r1, r4
 8001c32:	d109      	bne.n	8001c48 <__aeabi_ddiv+0x33c>
 8001c34:	2302      	movs	r3, #2
 8001c36:	464a      	mov	r2, r9
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <__aeabi_ddiv+0x390>)
 8001c3c:	4691      	mov	r9, r2
 8001c3e:	469c      	mov	ip, r3
 8001c40:	2400      	movs	r4, #0
 8001c42:	2002      	movs	r0, #2
 8001c44:	44e3      	add	fp, ip
 8001c46:	e6a1      	b.n	800198c <__aeabi_ddiv+0x80>
 8001c48:	2303      	movs	r3, #3
 8001c4a:	464a      	mov	r2, r9
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <__aeabi_ddiv+0x390>)
 8001c50:	4691      	mov	r9, r2
 8001c52:	469c      	mov	ip, r3
 8001c54:	4651      	mov	r1, sl
 8001c56:	2003      	movs	r0, #3
 8001c58:	44e3      	add	fp, ip
 8001c5a:	e697      	b.n	800198c <__aeabi_ddiv+0x80>
 8001c5c:	220c      	movs	r2, #12
 8001c5e:	469b      	mov	fp, r3
 8001c60:	2303      	movs	r3, #3
 8001c62:	46a0      	mov	r8, r4
 8001c64:	4691      	mov	r9, r2
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	e675      	b.n	8001956 <__aeabi_ddiv+0x4a>
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	4699      	mov	r9, r3
 8001c6e:	2300      	movs	r3, #0
 8001c70:	469b      	mov	fp, r3
 8001c72:	3301      	adds	r3, #1
 8001c74:	2500      	movs	r5, #0
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	e66d      	b.n	8001956 <__aeabi_ddiv+0x4a>
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	000007ff 	.word	0x000007ff
 8001c80:	fffffc01 	.word	0xfffffc01
 8001c84:	0800cde8 	.word	0x0800cde8
 8001c88:	000003ff 	.word	0x000003ff
 8001c8c:	feffffff 	.word	0xfeffffff
 8001c90:	000007fe 	.word	0x000007fe
 8001c94:	000003f3 	.word	0x000003f3
 8001c98:	fffffc0d 	.word	0xfffffc0d
 8001c9c:	fffff801 	.word	0xfffff801
 8001ca0:	464a      	mov	r2, r9
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	4691      	mov	r9, r2
 8001ca8:	2400      	movs	r4, #0
 8001caa:	2001      	movs	r0, #1
 8001cac:	e66e      	b.n	800198c <__aeabi_ddiv+0x80>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2280      	movs	r2, #128	; 0x80
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	2500      	movs	r5, #0
 8001cb6:	4b88      	ldr	r3, [pc, #544]	; (8001ed8 <__aeabi_ddiv+0x5cc>)
 8001cb8:	0312      	lsls	r2, r2, #12
 8001cba:	e67e      	b.n	80019ba <__aeabi_ddiv+0xae>
 8001cbc:	2501      	movs	r5, #1
 8001cbe:	426d      	negs	r5, r5
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	1ad2      	subs	r2, r2, r3
 8001cc4:	2a38      	cmp	r2, #56	; 0x38
 8001cc6:	dd00      	ble.n	8001cca <__aeabi_ddiv+0x3be>
 8001cc8:	e674      	b.n	80019b4 <__aeabi_ddiv+0xa8>
 8001cca:	2a1f      	cmp	r2, #31
 8001ccc:	dc00      	bgt.n	8001cd0 <__aeabi_ddiv+0x3c4>
 8001cce:	e0bd      	b.n	8001e4c <__aeabi_ddiv+0x540>
 8001cd0:	211f      	movs	r1, #31
 8001cd2:	4249      	negs	r1, r1
 8001cd4:	1acb      	subs	r3, r1, r3
 8001cd6:	4641      	mov	r1, r8
 8001cd8:	40d9      	lsrs	r1, r3
 8001cda:	000b      	movs	r3, r1
 8001cdc:	2a20      	cmp	r2, #32
 8001cde:	d004      	beq.n	8001cea <__aeabi_ddiv+0x3de>
 8001ce0:	4641      	mov	r1, r8
 8001ce2:	4a7e      	ldr	r2, [pc, #504]	; (8001edc <__aeabi_ddiv+0x5d0>)
 8001ce4:	445a      	add	r2, fp
 8001ce6:	4091      	lsls	r1, r2
 8001ce8:	430d      	orrs	r5, r1
 8001cea:	0029      	movs	r1, r5
 8001cec:	1e4a      	subs	r2, r1, #1
 8001cee:	4191      	sbcs	r1, r2
 8001cf0:	4319      	orrs	r1, r3
 8001cf2:	2307      	movs	r3, #7
 8001cf4:	001d      	movs	r5, r3
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	400d      	ands	r5, r1
 8001cfa:	420b      	tst	r3, r1
 8001cfc:	d100      	bne.n	8001d00 <__aeabi_ddiv+0x3f4>
 8001cfe:	e0d0      	b.n	8001ea2 <__aeabi_ddiv+0x596>
 8001d00:	220f      	movs	r2, #15
 8001d02:	2300      	movs	r3, #0
 8001d04:	400a      	ands	r2, r1
 8001d06:	2a04      	cmp	r2, #4
 8001d08:	d100      	bne.n	8001d0c <__aeabi_ddiv+0x400>
 8001d0a:	e0c7      	b.n	8001e9c <__aeabi_ddiv+0x590>
 8001d0c:	1d0a      	adds	r2, r1, #4
 8001d0e:	428a      	cmp	r2, r1
 8001d10:	4189      	sbcs	r1, r1
 8001d12:	4249      	negs	r1, r1
 8001d14:	185b      	adds	r3, r3, r1
 8001d16:	0011      	movs	r1, r2
 8001d18:	021a      	lsls	r2, r3, #8
 8001d1a:	d400      	bmi.n	8001d1e <__aeabi_ddiv+0x412>
 8001d1c:	e0be      	b.n	8001e9c <__aeabi_ddiv+0x590>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	2200      	movs	r2, #0
 8001d22:	2500      	movs	r5, #0
 8001d24:	e649      	b.n	80019ba <__aeabi_ddiv+0xae>
 8001d26:	2280      	movs	r2, #128	; 0x80
 8001d28:	4643      	mov	r3, r8
 8001d2a:	0312      	lsls	r2, r2, #12
 8001d2c:	4213      	tst	r3, r2
 8001d2e:	d008      	beq.n	8001d42 <__aeabi_ddiv+0x436>
 8001d30:	4214      	tst	r4, r2
 8001d32:	d106      	bne.n	8001d42 <__aeabi_ddiv+0x436>
 8001d34:	4322      	orrs	r2, r4
 8001d36:	0312      	lsls	r2, r2, #12
 8001d38:	46ba      	mov	sl, r7
 8001d3a:	000d      	movs	r5, r1
 8001d3c:	4b66      	ldr	r3, [pc, #408]	; (8001ed8 <__aeabi_ddiv+0x5cc>)
 8001d3e:	0b12      	lsrs	r2, r2, #12
 8001d40:	e63b      	b.n	80019ba <__aeabi_ddiv+0xae>
 8001d42:	2280      	movs	r2, #128	; 0x80
 8001d44:	4643      	mov	r3, r8
 8001d46:	0312      	lsls	r2, r2, #12
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	0312      	lsls	r2, r2, #12
 8001d4c:	46b2      	mov	sl, r6
 8001d4e:	4b62      	ldr	r3, [pc, #392]	; (8001ed8 <__aeabi_ddiv+0x5cc>)
 8001d50:	0b12      	lsrs	r2, r2, #12
 8001d52:	e632      	b.n	80019ba <__aeabi_ddiv+0xae>
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d100      	bne.n	8001d5a <__aeabi_ddiv+0x44e>
 8001d58:	e702      	b.n	8001b60 <__aeabi_ddiv+0x254>
 8001d5a:	19a6      	adds	r6, r4, r6
 8001d5c:	1e6a      	subs	r2, r5, #1
 8001d5e:	42a6      	cmp	r6, r4
 8001d60:	d200      	bcs.n	8001d64 <__aeabi_ddiv+0x458>
 8001d62:	e089      	b.n	8001e78 <__aeabi_ddiv+0x56c>
 8001d64:	4286      	cmp	r6, r0
 8001d66:	d200      	bcs.n	8001d6a <__aeabi_ddiv+0x45e>
 8001d68:	e09f      	b.n	8001eaa <__aeabi_ddiv+0x59e>
 8001d6a:	d100      	bne.n	8001d6e <__aeabi_ddiv+0x462>
 8001d6c:	e0af      	b.n	8001ece <__aeabi_ddiv+0x5c2>
 8001d6e:	0015      	movs	r5, r2
 8001d70:	e6f4      	b.n	8001b5c <__aeabi_ddiv+0x250>
 8001d72:	42a9      	cmp	r1, r5
 8001d74:	d900      	bls.n	8001d78 <__aeabi_ddiv+0x46c>
 8001d76:	e63c      	b.n	80019f2 <__aeabi_ddiv+0xe6>
 8001d78:	4643      	mov	r3, r8
 8001d7a:	07de      	lsls	r6, r3, #31
 8001d7c:	0858      	lsrs	r0, r3, #1
 8001d7e:	086b      	lsrs	r3, r5, #1
 8001d80:	431e      	orrs	r6, r3
 8001d82:	07ed      	lsls	r5, r5, #31
 8001d84:	e63c      	b.n	8001a00 <__aeabi_ddiv+0xf4>
 8001d86:	f001 f8fd 	bl	8002f84 <__clzsi2>
 8001d8a:	0001      	movs	r1, r0
 8001d8c:	0002      	movs	r2, r0
 8001d8e:	3115      	adds	r1, #21
 8001d90:	3220      	adds	r2, #32
 8001d92:	291c      	cmp	r1, #28
 8001d94:	dc00      	bgt.n	8001d98 <__aeabi_ddiv+0x48c>
 8001d96:	e72c      	b.n	8001bf2 <__aeabi_ddiv+0x2e6>
 8001d98:	464b      	mov	r3, r9
 8001d9a:	3808      	subs	r0, #8
 8001d9c:	4083      	lsls	r3, r0
 8001d9e:	2500      	movs	r5, #0
 8001da0:	4698      	mov	r8, r3
 8001da2:	e732      	b.n	8001c0a <__aeabi_ddiv+0x2fe>
 8001da4:	f001 f8ee 	bl	8002f84 <__clzsi2>
 8001da8:	0003      	movs	r3, r0
 8001daa:	001a      	movs	r2, r3
 8001dac:	3215      	adds	r2, #21
 8001dae:	3020      	adds	r0, #32
 8001db0:	2a1c      	cmp	r2, #28
 8001db2:	dc00      	bgt.n	8001db6 <__aeabi_ddiv+0x4aa>
 8001db4:	e6ff      	b.n	8001bb6 <__aeabi_ddiv+0x2aa>
 8001db6:	4654      	mov	r4, sl
 8001db8:	3b08      	subs	r3, #8
 8001dba:	2100      	movs	r1, #0
 8001dbc:	409c      	lsls	r4, r3
 8001dbe:	e705      	b.n	8001bcc <__aeabi_ddiv+0x2c0>
 8001dc0:	1936      	adds	r6, r6, r4
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	42b4      	cmp	r4, r6
 8001dc6:	d900      	bls.n	8001dca <__aeabi_ddiv+0x4be>
 8001dc8:	e6a6      	b.n	8001b18 <__aeabi_ddiv+0x20c>
 8001dca:	42b2      	cmp	r2, r6
 8001dcc:	d800      	bhi.n	8001dd0 <__aeabi_ddiv+0x4c4>
 8001dce:	e6a3      	b.n	8001b18 <__aeabi_ddiv+0x20c>
 8001dd0:	1e83      	subs	r3, r0, #2
 8001dd2:	1936      	adds	r6, r6, r4
 8001dd4:	e6a0      	b.n	8001b18 <__aeabi_ddiv+0x20c>
 8001dd6:	1909      	adds	r1, r1, r4
 8001dd8:	3d01      	subs	r5, #1
 8001dda:	428c      	cmp	r4, r1
 8001ddc:	d900      	bls.n	8001de0 <__aeabi_ddiv+0x4d4>
 8001dde:	e68d      	b.n	8001afc <__aeabi_ddiv+0x1f0>
 8001de0:	428a      	cmp	r2, r1
 8001de2:	d800      	bhi.n	8001de6 <__aeabi_ddiv+0x4da>
 8001de4:	e68a      	b.n	8001afc <__aeabi_ddiv+0x1f0>
 8001de6:	1e85      	subs	r5, r0, #2
 8001de8:	1909      	adds	r1, r1, r4
 8001dea:	e687      	b.n	8001afc <__aeabi_ddiv+0x1f0>
 8001dec:	220f      	movs	r2, #15
 8001dee:	402a      	ands	r2, r5
 8001df0:	2a04      	cmp	r2, #4
 8001df2:	d100      	bne.n	8001df6 <__aeabi_ddiv+0x4ea>
 8001df4:	e6bc      	b.n	8001b70 <__aeabi_ddiv+0x264>
 8001df6:	1d29      	adds	r1, r5, #4
 8001df8:	42a9      	cmp	r1, r5
 8001dfa:	41ad      	sbcs	r5, r5
 8001dfc:	426d      	negs	r5, r5
 8001dfe:	08c9      	lsrs	r1, r1, #3
 8001e00:	44a8      	add	r8, r5
 8001e02:	e6b6      	b.n	8001b72 <__aeabi_ddiv+0x266>
 8001e04:	42af      	cmp	r7, r5
 8001e06:	d900      	bls.n	8001e0a <__aeabi_ddiv+0x4fe>
 8001e08:	e662      	b.n	8001ad0 <__aeabi_ddiv+0x1c4>
 8001e0a:	4281      	cmp	r1, r0
 8001e0c:	d804      	bhi.n	8001e18 <__aeabi_ddiv+0x50c>
 8001e0e:	d000      	beq.n	8001e12 <__aeabi_ddiv+0x506>
 8001e10:	e65e      	b.n	8001ad0 <__aeabi_ddiv+0x1c4>
 8001e12:	42ae      	cmp	r6, r5
 8001e14:	d800      	bhi.n	8001e18 <__aeabi_ddiv+0x50c>
 8001e16:	e65b      	b.n	8001ad0 <__aeabi_ddiv+0x1c4>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	425b      	negs	r3, r3
 8001e1c:	469c      	mov	ip, r3
 8001e1e:	9b00      	ldr	r3, [sp, #0]
 8001e20:	44e0      	add	r8, ip
 8001e22:	469c      	mov	ip, r3
 8001e24:	4465      	add	r5, ip
 8001e26:	429d      	cmp	r5, r3
 8001e28:	419b      	sbcs	r3, r3
 8001e2a:	425b      	negs	r3, r3
 8001e2c:	191b      	adds	r3, r3, r4
 8001e2e:	18c0      	adds	r0, r0, r3
 8001e30:	e64f      	b.n	8001ad2 <__aeabi_ddiv+0x1c6>
 8001e32:	42b2      	cmp	r2, r6
 8001e34:	d800      	bhi.n	8001e38 <__aeabi_ddiv+0x52c>
 8001e36:	e612      	b.n	8001a5e <__aeabi_ddiv+0x152>
 8001e38:	1e83      	subs	r3, r0, #2
 8001e3a:	1936      	adds	r6, r6, r4
 8001e3c:	e60f      	b.n	8001a5e <__aeabi_ddiv+0x152>
 8001e3e:	428a      	cmp	r2, r1
 8001e40:	d800      	bhi.n	8001e44 <__aeabi_ddiv+0x538>
 8001e42:	e5fa      	b.n	8001a3a <__aeabi_ddiv+0x12e>
 8001e44:	1e83      	subs	r3, r0, #2
 8001e46:	4698      	mov	r8, r3
 8001e48:	1909      	adds	r1, r1, r4
 8001e4a:	e5f6      	b.n	8001a3a <__aeabi_ddiv+0x12e>
 8001e4c:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <__aeabi_ddiv+0x5d4>)
 8001e4e:	0028      	movs	r0, r5
 8001e50:	445b      	add	r3, fp
 8001e52:	4641      	mov	r1, r8
 8001e54:	409d      	lsls	r5, r3
 8001e56:	4099      	lsls	r1, r3
 8001e58:	40d0      	lsrs	r0, r2
 8001e5a:	1e6b      	subs	r3, r5, #1
 8001e5c:	419d      	sbcs	r5, r3
 8001e5e:	4643      	mov	r3, r8
 8001e60:	4301      	orrs	r1, r0
 8001e62:	4329      	orrs	r1, r5
 8001e64:	40d3      	lsrs	r3, r2
 8001e66:	074a      	lsls	r2, r1, #29
 8001e68:	d100      	bne.n	8001e6c <__aeabi_ddiv+0x560>
 8001e6a:	e755      	b.n	8001d18 <__aeabi_ddiv+0x40c>
 8001e6c:	220f      	movs	r2, #15
 8001e6e:	400a      	ands	r2, r1
 8001e70:	2a04      	cmp	r2, #4
 8001e72:	d000      	beq.n	8001e76 <__aeabi_ddiv+0x56a>
 8001e74:	e74a      	b.n	8001d0c <__aeabi_ddiv+0x400>
 8001e76:	e74f      	b.n	8001d18 <__aeabi_ddiv+0x40c>
 8001e78:	0015      	movs	r5, r2
 8001e7a:	4286      	cmp	r6, r0
 8001e7c:	d000      	beq.n	8001e80 <__aeabi_ddiv+0x574>
 8001e7e:	e66d      	b.n	8001b5c <__aeabi_ddiv+0x250>
 8001e80:	9a00      	ldr	r2, [sp, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d000      	beq.n	8001e88 <__aeabi_ddiv+0x57c>
 8001e86:	e669      	b.n	8001b5c <__aeabi_ddiv+0x250>
 8001e88:	e66a      	b.n	8001b60 <__aeabi_ddiv+0x254>
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <__aeabi_ddiv+0x5d8>)
 8001e8c:	445b      	add	r3, fp
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	dc00      	bgt.n	8001e94 <__aeabi_ddiv+0x588>
 8001e92:	e713      	b.n	8001cbc <__aeabi_ddiv+0x3b0>
 8001e94:	2501      	movs	r5, #1
 8001e96:	2100      	movs	r1, #0
 8001e98:	44a8      	add	r8, r5
 8001e9a:	e66a      	b.n	8001b72 <__aeabi_ddiv+0x266>
 8001e9c:	075d      	lsls	r5, r3, #29
 8001e9e:	025b      	lsls	r3, r3, #9
 8001ea0:	0b1a      	lsrs	r2, r3, #12
 8001ea2:	08c9      	lsrs	r1, r1, #3
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	430d      	orrs	r5, r1
 8001ea8:	e587      	b.n	80019ba <__aeabi_ddiv+0xae>
 8001eaa:	9900      	ldr	r1, [sp, #0]
 8001eac:	3d02      	subs	r5, #2
 8001eae:	004a      	lsls	r2, r1, #1
 8001eb0:	428a      	cmp	r2, r1
 8001eb2:	41bf      	sbcs	r7, r7
 8001eb4:	427f      	negs	r7, r7
 8001eb6:	193f      	adds	r7, r7, r4
 8001eb8:	19f6      	adds	r6, r6, r7
 8001eba:	9200      	str	r2, [sp, #0]
 8001ebc:	e7dd      	b.n	8001e7a <__aeabi_ddiv+0x56e>
 8001ebe:	2280      	movs	r2, #128	; 0x80
 8001ec0:	4643      	mov	r3, r8
 8001ec2:	0312      	lsls	r2, r2, #12
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	0312      	lsls	r2, r2, #12
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <__aeabi_ddiv+0x5cc>)
 8001eca:	0b12      	lsrs	r2, r2, #12
 8001ecc:	e575      	b.n	80019ba <__aeabi_ddiv+0xae>
 8001ece:	9900      	ldr	r1, [sp, #0]
 8001ed0:	4299      	cmp	r1, r3
 8001ed2:	d3ea      	bcc.n	8001eaa <__aeabi_ddiv+0x59e>
 8001ed4:	0015      	movs	r5, r2
 8001ed6:	e7d3      	b.n	8001e80 <__aeabi_ddiv+0x574>
 8001ed8:	000007ff 	.word	0x000007ff
 8001edc:	0000043e 	.word	0x0000043e
 8001ee0:	0000041e 	.word	0x0000041e
 8001ee4:	000003ff 	.word	0x000003ff

08001ee8 <__eqdf2>:
 8001ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eea:	464e      	mov	r6, r9
 8001eec:	4645      	mov	r5, r8
 8001eee:	46de      	mov	lr, fp
 8001ef0:	4657      	mov	r7, sl
 8001ef2:	4690      	mov	r8, r2
 8001ef4:	b5e0      	push	{r5, r6, r7, lr}
 8001ef6:	0017      	movs	r7, r2
 8001ef8:	031a      	lsls	r2, r3, #12
 8001efa:	0b12      	lsrs	r2, r2, #12
 8001efc:	0005      	movs	r5, r0
 8001efe:	4684      	mov	ip, r0
 8001f00:	4819      	ldr	r0, [pc, #100]	; (8001f68 <__eqdf2+0x80>)
 8001f02:	030e      	lsls	r6, r1, #12
 8001f04:	004c      	lsls	r4, r1, #1
 8001f06:	4691      	mov	r9, r2
 8001f08:	005a      	lsls	r2, r3, #1
 8001f0a:	0fdb      	lsrs	r3, r3, #31
 8001f0c:	469b      	mov	fp, r3
 8001f0e:	0b36      	lsrs	r6, r6, #12
 8001f10:	0d64      	lsrs	r4, r4, #21
 8001f12:	0fc9      	lsrs	r1, r1, #31
 8001f14:	0d52      	lsrs	r2, r2, #21
 8001f16:	4284      	cmp	r4, r0
 8001f18:	d019      	beq.n	8001f4e <__eqdf2+0x66>
 8001f1a:	4282      	cmp	r2, r0
 8001f1c:	d010      	beq.n	8001f40 <__eqdf2+0x58>
 8001f1e:	2001      	movs	r0, #1
 8001f20:	4294      	cmp	r4, r2
 8001f22:	d10e      	bne.n	8001f42 <__eqdf2+0x5a>
 8001f24:	454e      	cmp	r6, r9
 8001f26:	d10c      	bne.n	8001f42 <__eqdf2+0x5a>
 8001f28:	2001      	movs	r0, #1
 8001f2a:	45c4      	cmp	ip, r8
 8001f2c:	d109      	bne.n	8001f42 <__eqdf2+0x5a>
 8001f2e:	4559      	cmp	r1, fp
 8001f30:	d017      	beq.n	8001f62 <__eqdf2+0x7a>
 8001f32:	2c00      	cmp	r4, #0
 8001f34:	d105      	bne.n	8001f42 <__eqdf2+0x5a>
 8001f36:	0030      	movs	r0, r6
 8001f38:	4328      	orrs	r0, r5
 8001f3a:	1e43      	subs	r3, r0, #1
 8001f3c:	4198      	sbcs	r0, r3
 8001f3e:	e000      	b.n	8001f42 <__eqdf2+0x5a>
 8001f40:	2001      	movs	r0, #1
 8001f42:	bcf0      	pop	{r4, r5, r6, r7}
 8001f44:	46bb      	mov	fp, r7
 8001f46:	46b2      	mov	sl, r6
 8001f48:	46a9      	mov	r9, r5
 8001f4a:	46a0      	mov	r8, r4
 8001f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f4e:	0033      	movs	r3, r6
 8001f50:	2001      	movs	r0, #1
 8001f52:	432b      	orrs	r3, r5
 8001f54:	d1f5      	bne.n	8001f42 <__eqdf2+0x5a>
 8001f56:	42a2      	cmp	r2, r4
 8001f58:	d1f3      	bne.n	8001f42 <__eqdf2+0x5a>
 8001f5a:	464b      	mov	r3, r9
 8001f5c:	433b      	orrs	r3, r7
 8001f5e:	d1f0      	bne.n	8001f42 <__eqdf2+0x5a>
 8001f60:	e7e2      	b.n	8001f28 <__eqdf2+0x40>
 8001f62:	2000      	movs	r0, #0
 8001f64:	e7ed      	b.n	8001f42 <__eqdf2+0x5a>
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	000007ff 	.word	0x000007ff

08001f6c <__gedf2>:
 8001f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6e:	4647      	mov	r7, r8
 8001f70:	46ce      	mov	lr, r9
 8001f72:	0004      	movs	r4, r0
 8001f74:	0018      	movs	r0, r3
 8001f76:	0016      	movs	r6, r2
 8001f78:	031b      	lsls	r3, r3, #12
 8001f7a:	0b1b      	lsrs	r3, r3, #12
 8001f7c:	4d2d      	ldr	r5, [pc, #180]	; (8002034 <__gedf2+0xc8>)
 8001f7e:	004a      	lsls	r2, r1, #1
 8001f80:	4699      	mov	r9, r3
 8001f82:	b580      	push	{r7, lr}
 8001f84:	0043      	lsls	r3, r0, #1
 8001f86:	030f      	lsls	r7, r1, #12
 8001f88:	46a4      	mov	ip, r4
 8001f8a:	46b0      	mov	r8, r6
 8001f8c:	0b3f      	lsrs	r7, r7, #12
 8001f8e:	0d52      	lsrs	r2, r2, #21
 8001f90:	0fc9      	lsrs	r1, r1, #31
 8001f92:	0d5b      	lsrs	r3, r3, #21
 8001f94:	0fc0      	lsrs	r0, r0, #31
 8001f96:	42aa      	cmp	r2, r5
 8001f98:	d021      	beq.n	8001fde <__gedf2+0x72>
 8001f9a:	42ab      	cmp	r3, r5
 8001f9c:	d013      	beq.n	8001fc6 <__gedf2+0x5a>
 8001f9e:	2a00      	cmp	r2, #0
 8001fa0:	d122      	bne.n	8001fe8 <__gedf2+0x7c>
 8001fa2:	433c      	orrs	r4, r7
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d102      	bne.n	8001fae <__gedf2+0x42>
 8001fa8:	464d      	mov	r5, r9
 8001faa:	432e      	orrs	r6, r5
 8001fac:	d022      	beq.n	8001ff4 <__gedf2+0x88>
 8001fae:	2c00      	cmp	r4, #0
 8001fb0:	d010      	beq.n	8001fd4 <__gedf2+0x68>
 8001fb2:	4281      	cmp	r1, r0
 8001fb4:	d022      	beq.n	8001ffc <__gedf2+0x90>
 8001fb6:	2002      	movs	r0, #2
 8001fb8:	3901      	subs	r1, #1
 8001fba:	4008      	ands	r0, r1
 8001fbc:	3801      	subs	r0, #1
 8001fbe:	bcc0      	pop	{r6, r7}
 8001fc0:	46b9      	mov	r9, r7
 8001fc2:	46b0      	mov	r8, r6
 8001fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fc6:	464d      	mov	r5, r9
 8001fc8:	432e      	orrs	r6, r5
 8001fca:	d129      	bne.n	8002020 <__gedf2+0xb4>
 8001fcc:	2a00      	cmp	r2, #0
 8001fce:	d1f0      	bne.n	8001fb2 <__gedf2+0x46>
 8001fd0:	433c      	orrs	r4, r7
 8001fd2:	d1ee      	bne.n	8001fb2 <__gedf2+0x46>
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	d1f2      	bne.n	8001fbe <__gedf2+0x52>
 8001fd8:	2001      	movs	r0, #1
 8001fda:	4240      	negs	r0, r0
 8001fdc:	e7ef      	b.n	8001fbe <__gedf2+0x52>
 8001fde:	003d      	movs	r5, r7
 8001fe0:	4325      	orrs	r5, r4
 8001fe2:	d11d      	bne.n	8002020 <__gedf2+0xb4>
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d0ee      	beq.n	8001fc6 <__gedf2+0x5a>
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1e2      	bne.n	8001fb2 <__gedf2+0x46>
 8001fec:	464c      	mov	r4, r9
 8001fee:	4326      	orrs	r6, r4
 8001ff0:	d1df      	bne.n	8001fb2 <__gedf2+0x46>
 8001ff2:	e7e0      	b.n	8001fb6 <__gedf2+0x4a>
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	2c00      	cmp	r4, #0
 8001ff8:	d0e1      	beq.n	8001fbe <__gedf2+0x52>
 8001ffa:	e7dc      	b.n	8001fb6 <__gedf2+0x4a>
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	dc0a      	bgt.n	8002016 <__gedf2+0xaa>
 8002000:	dbe8      	blt.n	8001fd4 <__gedf2+0x68>
 8002002:	454f      	cmp	r7, r9
 8002004:	d8d7      	bhi.n	8001fb6 <__gedf2+0x4a>
 8002006:	d00e      	beq.n	8002026 <__gedf2+0xba>
 8002008:	2000      	movs	r0, #0
 800200a:	454f      	cmp	r7, r9
 800200c:	d2d7      	bcs.n	8001fbe <__gedf2+0x52>
 800200e:	2900      	cmp	r1, #0
 8002010:	d0e2      	beq.n	8001fd8 <__gedf2+0x6c>
 8002012:	0008      	movs	r0, r1
 8002014:	e7d3      	b.n	8001fbe <__gedf2+0x52>
 8002016:	4243      	negs	r3, r0
 8002018:	4158      	adcs	r0, r3
 800201a:	0040      	lsls	r0, r0, #1
 800201c:	3801      	subs	r0, #1
 800201e:	e7ce      	b.n	8001fbe <__gedf2+0x52>
 8002020:	2002      	movs	r0, #2
 8002022:	4240      	negs	r0, r0
 8002024:	e7cb      	b.n	8001fbe <__gedf2+0x52>
 8002026:	45c4      	cmp	ip, r8
 8002028:	d8c5      	bhi.n	8001fb6 <__gedf2+0x4a>
 800202a:	2000      	movs	r0, #0
 800202c:	45c4      	cmp	ip, r8
 800202e:	d2c6      	bcs.n	8001fbe <__gedf2+0x52>
 8002030:	e7ed      	b.n	800200e <__gedf2+0xa2>
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	000007ff 	.word	0x000007ff

08002038 <__ledf2>:
 8002038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800203a:	4647      	mov	r7, r8
 800203c:	46ce      	mov	lr, r9
 800203e:	0004      	movs	r4, r0
 8002040:	0018      	movs	r0, r3
 8002042:	0016      	movs	r6, r2
 8002044:	031b      	lsls	r3, r3, #12
 8002046:	0b1b      	lsrs	r3, r3, #12
 8002048:	4d2c      	ldr	r5, [pc, #176]	; (80020fc <__ledf2+0xc4>)
 800204a:	004a      	lsls	r2, r1, #1
 800204c:	4699      	mov	r9, r3
 800204e:	b580      	push	{r7, lr}
 8002050:	0043      	lsls	r3, r0, #1
 8002052:	030f      	lsls	r7, r1, #12
 8002054:	46a4      	mov	ip, r4
 8002056:	46b0      	mov	r8, r6
 8002058:	0b3f      	lsrs	r7, r7, #12
 800205a:	0d52      	lsrs	r2, r2, #21
 800205c:	0fc9      	lsrs	r1, r1, #31
 800205e:	0d5b      	lsrs	r3, r3, #21
 8002060:	0fc0      	lsrs	r0, r0, #31
 8002062:	42aa      	cmp	r2, r5
 8002064:	d00d      	beq.n	8002082 <__ledf2+0x4a>
 8002066:	42ab      	cmp	r3, r5
 8002068:	d010      	beq.n	800208c <__ledf2+0x54>
 800206a:	2a00      	cmp	r2, #0
 800206c:	d127      	bne.n	80020be <__ledf2+0x86>
 800206e:	433c      	orrs	r4, r7
 8002070:	2b00      	cmp	r3, #0
 8002072:	d111      	bne.n	8002098 <__ledf2+0x60>
 8002074:	464d      	mov	r5, r9
 8002076:	432e      	orrs	r6, r5
 8002078:	d10e      	bne.n	8002098 <__ledf2+0x60>
 800207a:	2000      	movs	r0, #0
 800207c:	2c00      	cmp	r4, #0
 800207e:	d015      	beq.n	80020ac <__ledf2+0x74>
 8002080:	e00e      	b.n	80020a0 <__ledf2+0x68>
 8002082:	003d      	movs	r5, r7
 8002084:	4325      	orrs	r5, r4
 8002086:	d110      	bne.n	80020aa <__ledf2+0x72>
 8002088:	4293      	cmp	r3, r2
 800208a:	d118      	bne.n	80020be <__ledf2+0x86>
 800208c:	464d      	mov	r5, r9
 800208e:	432e      	orrs	r6, r5
 8002090:	d10b      	bne.n	80020aa <__ledf2+0x72>
 8002092:	2a00      	cmp	r2, #0
 8002094:	d102      	bne.n	800209c <__ledf2+0x64>
 8002096:	433c      	orrs	r4, r7
 8002098:	2c00      	cmp	r4, #0
 800209a:	d00b      	beq.n	80020b4 <__ledf2+0x7c>
 800209c:	4281      	cmp	r1, r0
 800209e:	d014      	beq.n	80020ca <__ledf2+0x92>
 80020a0:	2002      	movs	r0, #2
 80020a2:	3901      	subs	r1, #1
 80020a4:	4008      	ands	r0, r1
 80020a6:	3801      	subs	r0, #1
 80020a8:	e000      	b.n	80020ac <__ledf2+0x74>
 80020aa:	2002      	movs	r0, #2
 80020ac:	bcc0      	pop	{r6, r7}
 80020ae:	46b9      	mov	r9, r7
 80020b0:	46b0      	mov	r8, r6
 80020b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020b4:	2800      	cmp	r0, #0
 80020b6:	d1f9      	bne.n	80020ac <__ledf2+0x74>
 80020b8:	2001      	movs	r0, #1
 80020ba:	4240      	negs	r0, r0
 80020bc:	e7f6      	b.n	80020ac <__ledf2+0x74>
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1ec      	bne.n	800209c <__ledf2+0x64>
 80020c2:	464c      	mov	r4, r9
 80020c4:	4326      	orrs	r6, r4
 80020c6:	d1e9      	bne.n	800209c <__ledf2+0x64>
 80020c8:	e7ea      	b.n	80020a0 <__ledf2+0x68>
 80020ca:	429a      	cmp	r2, r3
 80020cc:	dd04      	ble.n	80020d8 <__ledf2+0xa0>
 80020ce:	4243      	negs	r3, r0
 80020d0:	4158      	adcs	r0, r3
 80020d2:	0040      	lsls	r0, r0, #1
 80020d4:	3801      	subs	r0, #1
 80020d6:	e7e9      	b.n	80020ac <__ledf2+0x74>
 80020d8:	429a      	cmp	r2, r3
 80020da:	dbeb      	blt.n	80020b4 <__ledf2+0x7c>
 80020dc:	454f      	cmp	r7, r9
 80020de:	d8df      	bhi.n	80020a0 <__ledf2+0x68>
 80020e0:	d006      	beq.n	80020f0 <__ledf2+0xb8>
 80020e2:	2000      	movs	r0, #0
 80020e4:	454f      	cmp	r7, r9
 80020e6:	d2e1      	bcs.n	80020ac <__ledf2+0x74>
 80020e8:	2900      	cmp	r1, #0
 80020ea:	d0e5      	beq.n	80020b8 <__ledf2+0x80>
 80020ec:	0008      	movs	r0, r1
 80020ee:	e7dd      	b.n	80020ac <__ledf2+0x74>
 80020f0:	45c4      	cmp	ip, r8
 80020f2:	d8d5      	bhi.n	80020a0 <__ledf2+0x68>
 80020f4:	2000      	movs	r0, #0
 80020f6:	45c4      	cmp	ip, r8
 80020f8:	d2d8      	bcs.n	80020ac <__ledf2+0x74>
 80020fa:	e7f5      	b.n	80020e8 <__ledf2+0xb0>
 80020fc:	000007ff 	.word	0x000007ff

08002100 <__aeabi_dmul>:
 8002100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002102:	4645      	mov	r5, r8
 8002104:	46de      	mov	lr, fp
 8002106:	4657      	mov	r7, sl
 8002108:	464e      	mov	r6, r9
 800210a:	b5e0      	push	{r5, r6, r7, lr}
 800210c:	001f      	movs	r7, r3
 800210e:	030b      	lsls	r3, r1, #12
 8002110:	0b1b      	lsrs	r3, r3, #12
 8002112:	469b      	mov	fp, r3
 8002114:	004d      	lsls	r5, r1, #1
 8002116:	0fcb      	lsrs	r3, r1, #31
 8002118:	0004      	movs	r4, r0
 800211a:	4691      	mov	r9, r2
 800211c:	4698      	mov	r8, r3
 800211e:	b087      	sub	sp, #28
 8002120:	0d6d      	lsrs	r5, r5, #21
 8002122:	d100      	bne.n	8002126 <__aeabi_dmul+0x26>
 8002124:	e1cd      	b.n	80024c2 <__aeabi_dmul+0x3c2>
 8002126:	4bce      	ldr	r3, [pc, #824]	; (8002460 <__aeabi_dmul+0x360>)
 8002128:	429d      	cmp	r5, r3
 800212a:	d100      	bne.n	800212e <__aeabi_dmul+0x2e>
 800212c:	e1e9      	b.n	8002502 <__aeabi_dmul+0x402>
 800212e:	465a      	mov	r2, fp
 8002130:	0f43      	lsrs	r3, r0, #29
 8002132:	00d2      	lsls	r2, r2, #3
 8002134:	4313      	orrs	r3, r2
 8002136:	2280      	movs	r2, #128	; 0x80
 8002138:	0412      	lsls	r2, r2, #16
 800213a:	431a      	orrs	r2, r3
 800213c:	00c3      	lsls	r3, r0, #3
 800213e:	469a      	mov	sl, r3
 8002140:	4bc8      	ldr	r3, [pc, #800]	; (8002464 <__aeabi_dmul+0x364>)
 8002142:	4693      	mov	fp, r2
 8002144:	469c      	mov	ip, r3
 8002146:	2300      	movs	r3, #0
 8002148:	2600      	movs	r6, #0
 800214a:	4465      	add	r5, ip
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	033c      	lsls	r4, r7, #12
 8002150:	007b      	lsls	r3, r7, #1
 8002152:	4648      	mov	r0, r9
 8002154:	0b24      	lsrs	r4, r4, #12
 8002156:	0d5b      	lsrs	r3, r3, #21
 8002158:	0fff      	lsrs	r7, r7, #31
 800215a:	2b00      	cmp	r3, #0
 800215c:	d100      	bne.n	8002160 <__aeabi_dmul+0x60>
 800215e:	e189      	b.n	8002474 <__aeabi_dmul+0x374>
 8002160:	4abf      	ldr	r2, [pc, #764]	; (8002460 <__aeabi_dmul+0x360>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d019      	beq.n	800219a <__aeabi_dmul+0x9a>
 8002166:	0f42      	lsrs	r2, r0, #29
 8002168:	00e4      	lsls	r4, r4, #3
 800216a:	4322      	orrs	r2, r4
 800216c:	2480      	movs	r4, #128	; 0x80
 800216e:	0424      	lsls	r4, r4, #16
 8002170:	4314      	orrs	r4, r2
 8002172:	4abc      	ldr	r2, [pc, #752]	; (8002464 <__aeabi_dmul+0x364>)
 8002174:	2100      	movs	r1, #0
 8002176:	4694      	mov	ip, r2
 8002178:	4642      	mov	r2, r8
 800217a:	4463      	add	r3, ip
 800217c:	195b      	adds	r3, r3, r5
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	9b01      	ldr	r3, [sp, #4]
 8002182:	407a      	eors	r2, r7
 8002184:	3301      	adds	r3, #1
 8002186:	00c0      	lsls	r0, r0, #3
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	9302      	str	r3, [sp, #8]
 800218c:	2e0a      	cmp	r6, #10
 800218e:	dd1c      	ble.n	80021ca <__aeabi_dmul+0xca>
 8002190:	003a      	movs	r2, r7
 8002192:	2e0b      	cmp	r6, #11
 8002194:	d05e      	beq.n	8002254 <__aeabi_dmul+0x154>
 8002196:	4647      	mov	r7, r8
 8002198:	e056      	b.n	8002248 <__aeabi_dmul+0x148>
 800219a:	4649      	mov	r1, r9
 800219c:	4bb0      	ldr	r3, [pc, #704]	; (8002460 <__aeabi_dmul+0x360>)
 800219e:	4321      	orrs	r1, r4
 80021a0:	18eb      	adds	r3, r5, r3
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	2900      	cmp	r1, #0
 80021a6:	d12a      	bne.n	80021fe <__aeabi_dmul+0xfe>
 80021a8:	2080      	movs	r0, #128	; 0x80
 80021aa:	2202      	movs	r2, #2
 80021ac:	0100      	lsls	r0, r0, #4
 80021ae:	002b      	movs	r3, r5
 80021b0:	4684      	mov	ip, r0
 80021b2:	4316      	orrs	r6, r2
 80021b4:	4642      	mov	r2, r8
 80021b6:	4463      	add	r3, ip
 80021b8:	407a      	eors	r2, r7
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	9302      	str	r3, [sp, #8]
 80021be:	2e0a      	cmp	r6, #10
 80021c0:	dd00      	ble.n	80021c4 <__aeabi_dmul+0xc4>
 80021c2:	e231      	b.n	8002628 <__aeabi_dmul+0x528>
 80021c4:	2000      	movs	r0, #0
 80021c6:	2400      	movs	r4, #0
 80021c8:	2102      	movs	r1, #2
 80021ca:	2e02      	cmp	r6, #2
 80021cc:	dc26      	bgt.n	800221c <__aeabi_dmul+0x11c>
 80021ce:	3e01      	subs	r6, #1
 80021d0:	2e01      	cmp	r6, #1
 80021d2:	d852      	bhi.n	800227a <__aeabi_dmul+0x17a>
 80021d4:	2902      	cmp	r1, #2
 80021d6:	d04c      	beq.n	8002272 <__aeabi_dmul+0x172>
 80021d8:	2901      	cmp	r1, #1
 80021da:	d000      	beq.n	80021de <__aeabi_dmul+0xde>
 80021dc:	e118      	b.n	8002410 <__aeabi_dmul+0x310>
 80021de:	2300      	movs	r3, #0
 80021e0:	2400      	movs	r4, #0
 80021e2:	2500      	movs	r5, #0
 80021e4:	051b      	lsls	r3, r3, #20
 80021e6:	4323      	orrs	r3, r4
 80021e8:	07d2      	lsls	r2, r2, #31
 80021ea:	4313      	orrs	r3, r2
 80021ec:	0028      	movs	r0, r5
 80021ee:	0019      	movs	r1, r3
 80021f0:	b007      	add	sp, #28
 80021f2:	bcf0      	pop	{r4, r5, r6, r7}
 80021f4:	46bb      	mov	fp, r7
 80021f6:	46b2      	mov	sl, r6
 80021f8:	46a9      	mov	r9, r5
 80021fa:	46a0      	mov	r8, r4
 80021fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021fe:	2180      	movs	r1, #128	; 0x80
 8002200:	2203      	movs	r2, #3
 8002202:	0109      	lsls	r1, r1, #4
 8002204:	002b      	movs	r3, r5
 8002206:	468c      	mov	ip, r1
 8002208:	4316      	orrs	r6, r2
 800220a:	4642      	mov	r2, r8
 800220c:	4463      	add	r3, ip
 800220e:	407a      	eors	r2, r7
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	9302      	str	r3, [sp, #8]
 8002214:	2e0a      	cmp	r6, #10
 8002216:	dd00      	ble.n	800221a <__aeabi_dmul+0x11a>
 8002218:	e228      	b.n	800266c <__aeabi_dmul+0x56c>
 800221a:	2103      	movs	r1, #3
 800221c:	2501      	movs	r5, #1
 800221e:	40b5      	lsls	r5, r6
 8002220:	46ac      	mov	ip, r5
 8002222:	26a6      	movs	r6, #166	; 0xa6
 8002224:	4663      	mov	r3, ip
 8002226:	00f6      	lsls	r6, r6, #3
 8002228:	4035      	ands	r5, r6
 800222a:	4233      	tst	r3, r6
 800222c:	d10b      	bne.n	8002246 <__aeabi_dmul+0x146>
 800222e:	2690      	movs	r6, #144	; 0x90
 8002230:	00b6      	lsls	r6, r6, #2
 8002232:	4233      	tst	r3, r6
 8002234:	d118      	bne.n	8002268 <__aeabi_dmul+0x168>
 8002236:	3eb9      	subs	r6, #185	; 0xb9
 8002238:	3eff      	subs	r6, #255	; 0xff
 800223a:	421e      	tst	r6, r3
 800223c:	d01d      	beq.n	800227a <__aeabi_dmul+0x17a>
 800223e:	46a3      	mov	fp, r4
 8002240:	4682      	mov	sl, r0
 8002242:	9100      	str	r1, [sp, #0]
 8002244:	e000      	b.n	8002248 <__aeabi_dmul+0x148>
 8002246:	0017      	movs	r7, r2
 8002248:	9900      	ldr	r1, [sp, #0]
 800224a:	003a      	movs	r2, r7
 800224c:	2902      	cmp	r1, #2
 800224e:	d010      	beq.n	8002272 <__aeabi_dmul+0x172>
 8002250:	465c      	mov	r4, fp
 8002252:	4650      	mov	r0, sl
 8002254:	2903      	cmp	r1, #3
 8002256:	d1bf      	bne.n	80021d8 <__aeabi_dmul+0xd8>
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	031b      	lsls	r3, r3, #12
 800225c:	431c      	orrs	r4, r3
 800225e:	0324      	lsls	r4, r4, #12
 8002260:	0005      	movs	r5, r0
 8002262:	4b7f      	ldr	r3, [pc, #508]	; (8002460 <__aeabi_dmul+0x360>)
 8002264:	0b24      	lsrs	r4, r4, #12
 8002266:	e7bd      	b.n	80021e4 <__aeabi_dmul+0xe4>
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	2200      	movs	r2, #0
 800226c:	4b7c      	ldr	r3, [pc, #496]	; (8002460 <__aeabi_dmul+0x360>)
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	e7b8      	b.n	80021e4 <__aeabi_dmul+0xe4>
 8002272:	2400      	movs	r4, #0
 8002274:	2500      	movs	r5, #0
 8002276:	4b7a      	ldr	r3, [pc, #488]	; (8002460 <__aeabi_dmul+0x360>)
 8002278:	e7b4      	b.n	80021e4 <__aeabi_dmul+0xe4>
 800227a:	4653      	mov	r3, sl
 800227c:	041e      	lsls	r6, r3, #16
 800227e:	0c36      	lsrs	r6, r6, #16
 8002280:	0c1f      	lsrs	r7, r3, #16
 8002282:	0033      	movs	r3, r6
 8002284:	0c01      	lsrs	r1, r0, #16
 8002286:	0400      	lsls	r0, r0, #16
 8002288:	0c00      	lsrs	r0, r0, #16
 800228a:	4343      	muls	r3, r0
 800228c:	4698      	mov	r8, r3
 800228e:	0003      	movs	r3, r0
 8002290:	437b      	muls	r3, r7
 8002292:	4699      	mov	r9, r3
 8002294:	0033      	movs	r3, r6
 8002296:	434b      	muls	r3, r1
 8002298:	469c      	mov	ip, r3
 800229a:	4643      	mov	r3, r8
 800229c:	000d      	movs	r5, r1
 800229e:	0c1b      	lsrs	r3, r3, #16
 80022a0:	469a      	mov	sl, r3
 80022a2:	437d      	muls	r5, r7
 80022a4:	44cc      	add	ip, r9
 80022a6:	44d4      	add	ip, sl
 80022a8:	9500      	str	r5, [sp, #0]
 80022aa:	45e1      	cmp	r9, ip
 80022ac:	d904      	bls.n	80022b8 <__aeabi_dmul+0x1b8>
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	025b      	lsls	r3, r3, #9
 80022b2:	4699      	mov	r9, r3
 80022b4:	444d      	add	r5, r9
 80022b6:	9500      	str	r5, [sp, #0]
 80022b8:	4663      	mov	r3, ip
 80022ba:	0c1b      	lsrs	r3, r3, #16
 80022bc:	001d      	movs	r5, r3
 80022be:	4663      	mov	r3, ip
 80022c0:	041b      	lsls	r3, r3, #16
 80022c2:	469c      	mov	ip, r3
 80022c4:	4643      	mov	r3, r8
 80022c6:	041b      	lsls	r3, r3, #16
 80022c8:	0c1b      	lsrs	r3, r3, #16
 80022ca:	4698      	mov	r8, r3
 80022cc:	4663      	mov	r3, ip
 80022ce:	4443      	add	r3, r8
 80022d0:	9303      	str	r3, [sp, #12]
 80022d2:	0c23      	lsrs	r3, r4, #16
 80022d4:	4698      	mov	r8, r3
 80022d6:	0033      	movs	r3, r6
 80022d8:	0424      	lsls	r4, r4, #16
 80022da:	0c24      	lsrs	r4, r4, #16
 80022dc:	4363      	muls	r3, r4
 80022de:	469c      	mov	ip, r3
 80022e0:	0023      	movs	r3, r4
 80022e2:	437b      	muls	r3, r7
 80022e4:	4699      	mov	r9, r3
 80022e6:	4643      	mov	r3, r8
 80022e8:	435e      	muls	r6, r3
 80022ea:	435f      	muls	r7, r3
 80022ec:	444e      	add	r6, r9
 80022ee:	4663      	mov	r3, ip
 80022f0:	46b2      	mov	sl, r6
 80022f2:	0c1e      	lsrs	r6, r3, #16
 80022f4:	4456      	add	r6, sl
 80022f6:	45b1      	cmp	r9, r6
 80022f8:	d903      	bls.n	8002302 <__aeabi_dmul+0x202>
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	025b      	lsls	r3, r3, #9
 80022fe:	4699      	mov	r9, r3
 8002300:	444f      	add	r7, r9
 8002302:	0c33      	lsrs	r3, r6, #16
 8002304:	4699      	mov	r9, r3
 8002306:	003b      	movs	r3, r7
 8002308:	444b      	add	r3, r9
 800230a:	9305      	str	r3, [sp, #20]
 800230c:	4663      	mov	r3, ip
 800230e:	46ac      	mov	ip, r5
 8002310:	041f      	lsls	r7, r3, #16
 8002312:	0c3f      	lsrs	r7, r7, #16
 8002314:	0436      	lsls	r6, r6, #16
 8002316:	19f6      	adds	r6, r6, r7
 8002318:	44b4      	add	ip, r6
 800231a:	4663      	mov	r3, ip
 800231c:	9304      	str	r3, [sp, #16]
 800231e:	465b      	mov	r3, fp
 8002320:	0c1b      	lsrs	r3, r3, #16
 8002322:	469c      	mov	ip, r3
 8002324:	465b      	mov	r3, fp
 8002326:	041f      	lsls	r7, r3, #16
 8002328:	0c3f      	lsrs	r7, r7, #16
 800232a:	003b      	movs	r3, r7
 800232c:	4343      	muls	r3, r0
 800232e:	4699      	mov	r9, r3
 8002330:	4663      	mov	r3, ip
 8002332:	4343      	muls	r3, r0
 8002334:	469a      	mov	sl, r3
 8002336:	464b      	mov	r3, r9
 8002338:	4660      	mov	r0, ip
 800233a:	0c1b      	lsrs	r3, r3, #16
 800233c:	469b      	mov	fp, r3
 800233e:	4348      	muls	r0, r1
 8002340:	4379      	muls	r1, r7
 8002342:	4451      	add	r1, sl
 8002344:	4459      	add	r1, fp
 8002346:	458a      	cmp	sl, r1
 8002348:	d903      	bls.n	8002352 <__aeabi_dmul+0x252>
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	025b      	lsls	r3, r3, #9
 800234e:	469a      	mov	sl, r3
 8002350:	4450      	add	r0, sl
 8002352:	0c0b      	lsrs	r3, r1, #16
 8002354:	469a      	mov	sl, r3
 8002356:	464b      	mov	r3, r9
 8002358:	041b      	lsls	r3, r3, #16
 800235a:	0c1b      	lsrs	r3, r3, #16
 800235c:	4699      	mov	r9, r3
 800235e:	003b      	movs	r3, r7
 8002360:	4363      	muls	r3, r4
 8002362:	0409      	lsls	r1, r1, #16
 8002364:	4645      	mov	r5, r8
 8002366:	4449      	add	r1, r9
 8002368:	4699      	mov	r9, r3
 800236a:	4663      	mov	r3, ip
 800236c:	435c      	muls	r4, r3
 800236e:	436b      	muls	r3, r5
 8002370:	469c      	mov	ip, r3
 8002372:	464b      	mov	r3, r9
 8002374:	0c1b      	lsrs	r3, r3, #16
 8002376:	4698      	mov	r8, r3
 8002378:	436f      	muls	r7, r5
 800237a:	193f      	adds	r7, r7, r4
 800237c:	4447      	add	r7, r8
 800237e:	4450      	add	r0, sl
 8002380:	42bc      	cmp	r4, r7
 8002382:	d903      	bls.n	800238c <__aeabi_dmul+0x28c>
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	025b      	lsls	r3, r3, #9
 8002388:	4698      	mov	r8, r3
 800238a:	44c4      	add	ip, r8
 800238c:	9b04      	ldr	r3, [sp, #16]
 800238e:	9d00      	ldr	r5, [sp, #0]
 8002390:	4698      	mov	r8, r3
 8002392:	4445      	add	r5, r8
 8002394:	42b5      	cmp	r5, r6
 8002396:	41b6      	sbcs	r6, r6
 8002398:	4273      	negs	r3, r6
 800239a:	4698      	mov	r8, r3
 800239c:	464b      	mov	r3, r9
 800239e:	041e      	lsls	r6, r3, #16
 80023a0:	9b05      	ldr	r3, [sp, #20]
 80023a2:	043c      	lsls	r4, r7, #16
 80023a4:	4699      	mov	r9, r3
 80023a6:	0c36      	lsrs	r6, r6, #16
 80023a8:	19a4      	adds	r4, r4, r6
 80023aa:	444c      	add	r4, r9
 80023ac:	46a1      	mov	r9, r4
 80023ae:	4683      	mov	fp, r0
 80023b0:	186e      	adds	r6, r5, r1
 80023b2:	44c1      	add	r9, r8
 80023b4:	428e      	cmp	r6, r1
 80023b6:	4189      	sbcs	r1, r1
 80023b8:	44cb      	add	fp, r9
 80023ba:	465d      	mov	r5, fp
 80023bc:	4249      	negs	r1, r1
 80023be:	186d      	adds	r5, r5, r1
 80023c0:	429c      	cmp	r4, r3
 80023c2:	41a4      	sbcs	r4, r4
 80023c4:	45c1      	cmp	r9, r8
 80023c6:	419b      	sbcs	r3, r3
 80023c8:	4583      	cmp	fp, r0
 80023ca:	4180      	sbcs	r0, r0
 80023cc:	428d      	cmp	r5, r1
 80023ce:	4189      	sbcs	r1, r1
 80023d0:	425b      	negs	r3, r3
 80023d2:	4264      	negs	r4, r4
 80023d4:	431c      	orrs	r4, r3
 80023d6:	4240      	negs	r0, r0
 80023d8:	9b03      	ldr	r3, [sp, #12]
 80023da:	4249      	negs	r1, r1
 80023dc:	4301      	orrs	r1, r0
 80023de:	0270      	lsls	r0, r6, #9
 80023e0:	0c3f      	lsrs	r7, r7, #16
 80023e2:	4318      	orrs	r0, r3
 80023e4:	19e4      	adds	r4, r4, r7
 80023e6:	1e47      	subs	r7, r0, #1
 80023e8:	41b8      	sbcs	r0, r7
 80023ea:	1864      	adds	r4, r4, r1
 80023ec:	4464      	add	r4, ip
 80023ee:	0df6      	lsrs	r6, r6, #23
 80023f0:	0261      	lsls	r1, r4, #9
 80023f2:	4330      	orrs	r0, r6
 80023f4:	0dec      	lsrs	r4, r5, #23
 80023f6:	026e      	lsls	r6, r5, #9
 80023f8:	430c      	orrs	r4, r1
 80023fa:	4330      	orrs	r0, r6
 80023fc:	01c9      	lsls	r1, r1, #7
 80023fe:	d400      	bmi.n	8002402 <__aeabi_dmul+0x302>
 8002400:	e0f1      	b.n	80025e6 <__aeabi_dmul+0x4e6>
 8002402:	2101      	movs	r1, #1
 8002404:	0843      	lsrs	r3, r0, #1
 8002406:	4001      	ands	r1, r0
 8002408:	430b      	orrs	r3, r1
 800240a:	07e0      	lsls	r0, r4, #31
 800240c:	4318      	orrs	r0, r3
 800240e:	0864      	lsrs	r4, r4, #1
 8002410:	4915      	ldr	r1, [pc, #84]	; (8002468 <__aeabi_dmul+0x368>)
 8002412:	9b02      	ldr	r3, [sp, #8]
 8002414:	468c      	mov	ip, r1
 8002416:	4463      	add	r3, ip
 8002418:	2b00      	cmp	r3, #0
 800241a:	dc00      	bgt.n	800241e <__aeabi_dmul+0x31e>
 800241c:	e097      	b.n	800254e <__aeabi_dmul+0x44e>
 800241e:	0741      	lsls	r1, r0, #29
 8002420:	d009      	beq.n	8002436 <__aeabi_dmul+0x336>
 8002422:	210f      	movs	r1, #15
 8002424:	4001      	ands	r1, r0
 8002426:	2904      	cmp	r1, #4
 8002428:	d005      	beq.n	8002436 <__aeabi_dmul+0x336>
 800242a:	1d01      	adds	r1, r0, #4
 800242c:	4281      	cmp	r1, r0
 800242e:	4180      	sbcs	r0, r0
 8002430:	4240      	negs	r0, r0
 8002432:	1824      	adds	r4, r4, r0
 8002434:	0008      	movs	r0, r1
 8002436:	01e1      	lsls	r1, r4, #7
 8002438:	d506      	bpl.n	8002448 <__aeabi_dmul+0x348>
 800243a:	2180      	movs	r1, #128	; 0x80
 800243c:	00c9      	lsls	r1, r1, #3
 800243e:	468c      	mov	ip, r1
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <__aeabi_dmul+0x36c>)
 8002442:	401c      	ands	r4, r3
 8002444:	9b02      	ldr	r3, [sp, #8]
 8002446:	4463      	add	r3, ip
 8002448:	4909      	ldr	r1, [pc, #36]	; (8002470 <__aeabi_dmul+0x370>)
 800244a:	428b      	cmp	r3, r1
 800244c:	dd00      	ble.n	8002450 <__aeabi_dmul+0x350>
 800244e:	e710      	b.n	8002272 <__aeabi_dmul+0x172>
 8002450:	0761      	lsls	r1, r4, #29
 8002452:	08c5      	lsrs	r5, r0, #3
 8002454:	0264      	lsls	r4, r4, #9
 8002456:	055b      	lsls	r3, r3, #21
 8002458:	430d      	orrs	r5, r1
 800245a:	0b24      	lsrs	r4, r4, #12
 800245c:	0d5b      	lsrs	r3, r3, #21
 800245e:	e6c1      	b.n	80021e4 <__aeabi_dmul+0xe4>
 8002460:	000007ff 	.word	0x000007ff
 8002464:	fffffc01 	.word	0xfffffc01
 8002468:	000003ff 	.word	0x000003ff
 800246c:	feffffff 	.word	0xfeffffff
 8002470:	000007fe 	.word	0x000007fe
 8002474:	464b      	mov	r3, r9
 8002476:	4323      	orrs	r3, r4
 8002478:	d059      	beq.n	800252e <__aeabi_dmul+0x42e>
 800247a:	2c00      	cmp	r4, #0
 800247c:	d100      	bne.n	8002480 <__aeabi_dmul+0x380>
 800247e:	e0a3      	b.n	80025c8 <__aeabi_dmul+0x4c8>
 8002480:	0020      	movs	r0, r4
 8002482:	f000 fd7f 	bl	8002f84 <__clzsi2>
 8002486:	0001      	movs	r1, r0
 8002488:	0003      	movs	r3, r0
 800248a:	390b      	subs	r1, #11
 800248c:	221d      	movs	r2, #29
 800248e:	1a52      	subs	r2, r2, r1
 8002490:	4649      	mov	r1, r9
 8002492:	0018      	movs	r0, r3
 8002494:	40d1      	lsrs	r1, r2
 8002496:	464a      	mov	r2, r9
 8002498:	3808      	subs	r0, #8
 800249a:	4082      	lsls	r2, r0
 800249c:	4084      	lsls	r4, r0
 800249e:	0010      	movs	r0, r2
 80024a0:	430c      	orrs	r4, r1
 80024a2:	4a74      	ldr	r2, [pc, #464]	; (8002674 <__aeabi_dmul+0x574>)
 80024a4:	1aeb      	subs	r3, r5, r3
 80024a6:	4694      	mov	ip, r2
 80024a8:	4642      	mov	r2, r8
 80024aa:	4463      	add	r3, ip
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	9b01      	ldr	r3, [sp, #4]
 80024b0:	407a      	eors	r2, r7
 80024b2:	3301      	adds	r3, #1
 80024b4:	2100      	movs	r1, #0
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	9302      	str	r3, [sp, #8]
 80024ba:	2e0a      	cmp	r6, #10
 80024bc:	dd00      	ble.n	80024c0 <__aeabi_dmul+0x3c0>
 80024be:	e667      	b.n	8002190 <__aeabi_dmul+0x90>
 80024c0:	e683      	b.n	80021ca <__aeabi_dmul+0xca>
 80024c2:	465b      	mov	r3, fp
 80024c4:	4303      	orrs	r3, r0
 80024c6:	469a      	mov	sl, r3
 80024c8:	d02a      	beq.n	8002520 <__aeabi_dmul+0x420>
 80024ca:	465b      	mov	r3, fp
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d06d      	beq.n	80025ac <__aeabi_dmul+0x4ac>
 80024d0:	4658      	mov	r0, fp
 80024d2:	f000 fd57 	bl	8002f84 <__clzsi2>
 80024d6:	0001      	movs	r1, r0
 80024d8:	0003      	movs	r3, r0
 80024da:	390b      	subs	r1, #11
 80024dc:	221d      	movs	r2, #29
 80024de:	1a52      	subs	r2, r2, r1
 80024e0:	0021      	movs	r1, r4
 80024e2:	0018      	movs	r0, r3
 80024e4:	465d      	mov	r5, fp
 80024e6:	40d1      	lsrs	r1, r2
 80024e8:	3808      	subs	r0, #8
 80024ea:	4085      	lsls	r5, r0
 80024ec:	000a      	movs	r2, r1
 80024ee:	4084      	lsls	r4, r0
 80024f0:	432a      	orrs	r2, r5
 80024f2:	4693      	mov	fp, r2
 80024f4:	46a2      	mov	sl, r4
 80024f6:	4d5f      	ldr	r5, [pc, #380]	; (8002674 <__aeabi_dmul+0x574>)
 80024f8:	2600      	movs	r6, #0
 80024fa:	1aed      	subs	r5, r5, r3
 80024fc:	2300      	movs	r3, #0
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	e625      	b.n	800214e <__aeabi_dmul+0x4e>
 8002502:	465b      	mov	r3, fp
 8002504:	4303      	orrs	r3, r0
 8002506:	469a      	mov	sl, r3
 8002508:	d105      	bne.n	8002516 <__aeabi_dmul+0x416>
 800250a:	2300      	movs	r3, #0
 800250c:	469b      	mov	fp, r3
 800250e:	3302      	adds	r3, #2
 8002510:	2608      	movs	r6, #8
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	e61b      	b.n	800214e <__aeabi_dmul+0x4e>
 8002516:	2303      	movs	r3, #3
 8002518:	4682      	mov	sl, r0
 800251a:	260c      	movs	r6, #12
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	e616      	b.n	800214e <__aeabi_dmul+0x4e>
 8002520:	2300      	movs	r3, #0
 8002522:	469b      	mov	fp, r3
 8002524:	3301      	adds	r3, #1
 8002526:	2604      	movs	r6, #4
 8002528:	2500      	movs	r5, #0
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	e60f      	b.n	800214e <__aeabi_dmul+0x4e>
 800252e:	4642      	mov	r2, r8
 8002530:	3301      	adds	r3, #1
 8002532:	9501      	str	r5, [sp, #4]
 8002534:	431e      	orrs	r6, r3
 8002536:	9b01      	ldr	r3, [sp, #4]
 8002538:	407a      	eors	r2, r7
 800253a:	3301      	adds	r3, #1
 800253c:	2400      	movs	r4, #0
 800253e:	2000      	movs	r0, #0
 8002540:	2101      	movs	r1, #1
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	9302      	str	r3, [sp, #8]
 8002546:	2e0a      	cmp	r6, #10
 8002548:	dd00      	ble.n	800254c <__aeabi_dmul+0x44c>
 800254a:	e621      	b.n	8002190 <__aeabi_dmul+0x90>
 800254c:	e63d      	b.n	80021ca <__aeabi_dmul+0xca>
 800254e:	2101      	movs	r1, #1
 8002550:	1ac9      	subs	r1, r1, r3
 8002552:	2938      	cmp	r1, #56	; 0x38
 8002554:	dd00      	ble.n	8002558 <__aeabi_dmul+0x458>
 8002556:	e642      	b.n	80021de <__aeabi_dmul+0xde>
 8002558:	291f      	cmp	r1, #31
 800255a:	dd47      	ble.n	80025ec <__aeabi_dmul+0x4ec>
 800255c:	261f      	movs	r6, #31
 800255e:	0025      	movs	r5, r4
 8002560:	4276      	negs	r6, r6
 8002562:	1af3      	subs	r3, r6, r3
 8002564:	40dd      	lsrs	r5, r3
 8002566:	002b      	movs	r3, r5
 8002568:	2920      	cmp	r1, #32
 800256a:	d005      	beq.n	8002578 <__aeabi_dmul+0x478>
 800256c:	4942      	ldr	r1, [pc, #264]	; (8002678 <__aeabi_dmul+0x578>)
 800256e:	9d02      	ldr	r5, [sp, #8]
 8002570:	468c      	mov	ip, r1
 8002572:	4465      	add	r5, ip
 8002574:	40ac      	lsls	r4, r5
 8002576:	4320      	orrs	r0, r4
 8002578:	1e41      	subs	r1, r0, #1
 800257a:	4188      	sbcs	r0, r1
 800257c:	4318      	orrs	r0, r3
 800257e:	2307      	movs	r3, #7
 8002580:	001d      	movs	r5, r3
 8002582:	2400      	movs	r4, #0
 8002584:	4005      	ands	r5, r0
 8002586:	4203      	tst	r3, r0
 8002588:	d04a      	beq.n	8002620 <__aeabi_dmul+0x520>
 800258a:	230f      	movs	r3, #15
 800258c:	2400      	movs	r4, #0
 800258e:	4003      	ands	r3, r0
 8002590:	2b04      	cmp	r3, #4
 8002592:	d042      	beq.n	800261a <__aeabi_dmul+0x51a>
 8002594:	1d03      	adds	r3, r0, #4
 8002596:	4283      	cmp	r3, r0
 8002598:	4180      	sbcs	r0, r0
 800259a:	4240      	negs	r0, r0
 800259c:	1824      	adds	r4, r4, r0
 800259e:	0018      	movs	r0, r3
 80025a0:	0223      	lsls	r3, r4, #8
 80025a2:	d53a      	bpl.n	800261a <__aeabi_dmul+0x51a>
 80025a4:	2301      	movs	r3, #1
 80025a6:	2400      	movs	r4, #0
 80025a8:	2500      	movs	r5, #0
 80025aa:	e61b      	b.n	80021e4 <__aeabi_dmul+0xe4>
 80025ac:	f000 fcea 	bl	8002f84 <__clzsi2>
 80025b0:	0001      	movs	r1, r0
 80025b2:	0003      	movs	r3, r0
 80025b4:	3115      	adds	r1, #21
 80025b6:	3320      	adds	r3, #32
 80025b8:	291c      	cmp	r1, #28
 80025ba:	dd8f      	ble.n	80024dc <__aeabi_dmul+0x3dc>
 80025bc:	3808      	subs	r0, #8
 80025be:	2200      	movs	r2, #0
 80025c0:	4084      	lsls	r4, r0
 80025c2:	4692      	mov	sl, r2
 80025c4:	46a3      	mov	fp, r4
 80025c6:	e796      	b.n	80024f6 <__aeabi_dmul+0x3f6>
 80025c8:	f000 fcdc 	bl	8002f84 <__clzsi2>
 80025cc:	0001      	movs	r1, r0
 80025ce:	0003      	movs	r3, r0
 80025d0:	3115      	adds	r1, #21
 80025d2:	3320      	adds	r3, #32
 80025d4:	291c      	cmp	r1, #28
 80025d6:	dc00      	bgt.n	80025da <__aeabi_dmul+0x4da>
 80025d8:	e758      	b.n	800248c <__aeabi_dmul+0x38c>
 80025da:	0002      	movs	r2, r0
 80025dc:	464c      	mov	r4, r9
 80025de:	3a08      	subs	r2, #8
 80025e0:	2000      	movs	r0, #0
 80025e2:	4094      	lsls	r4, r2
 80025e4:	e75d      	b.n	80024a2 <__aeabi_dmul+0x3a2>
 80025e6:	9b01      	ldr	r3, [sp, #4]
 80025e8:	9302      	str	r3, [sp, #8]
 80025ea:	e711      	b.n	8002410 <__aeabi_dmul+0x310>
 80025ec:	4b23      	ldr	r3, [pc, #140]	; (800267c <__aeabi_dmul+0x57c>)
 80025ee:	0026      	movs	r6, r4
 80025f0:	469c      	mov	ip, r3
 80025f2:	0003      	movs	r3, r0
 80025f4:	9d02      	ldr	r5, [sp, #8]
 80025f6:	40cb      	lsrs	r3, r1
 80025f8:	4465      	add	r5, ip
 80025fa:	40ae      	lsls	r6, r5
 80025fc:	431e      	orrs	r6, r3
 80025fe:	0003      	movs	r3, r0
 8002600:	40ab      	lsls	r3, r5
 8002602:	1e58      	subs	r0, r3, #1
 8002604:	4183      	sbcs	r3, r0
 8002606:	0030      	movs	r0, r6
 8002608:	4318      	orrs	r0, r3
 800260a:	40cc      	lsrs	r4, r1
 800260c:	0743      	lsls	r3, r0, #29
 800260e:	d0c7      	beq.n	80025a0 <__aeabi_dmul+0x4a0>
 8002610:	230f      	movs	r3, #15
 8002612:	4003      	ands	r3, r0
 8002614:	2b04      	cmp	r3, #4
 8002616:	d1bd      	bne.n	8002594 <__aeabi_dmul+0x494>
 8002618:	e7c2      	b.n	80025a0 <__aeabi_dmul+0x4a0>
 800261a:	0765      	lsls	r5, r4, #29
 800261c:	0264      	lsls	r4, r4, #9
 800261e:	0b24      	lsrs	r4, r4, #12
 8002620:	08c0      	lsrs	r0, r0, #3
 8002622:	2300      	movs	r3, #0
 8002624:	4305      	orrs	r5, r0
 8002626:	e5dd      	b.n	80021e4 <__aeabi_dmul+0xe4>
 8002628:	2500      	movs	r5, #0
 800262a:	2302      	movs	r3, #2
 800262c:	2e0f      	cmp	r6, #15
 800262e:	d10c      	bne.n	800264a <__aeabi_dmul+0x54a>
 8002630:	2480      	movs	r4, #128	; 0x80
 8002632:	465b      	mov	r3, fp
 8002634:	0324      	lsls	r4, r4, #12
 8002636:	4223      	tst	r3, r4
 8002638:	d00e      	beq.n	8002658 <__aeabi_dmul+0x558>
 800263a:	4221      	tst	r1, r4
 800263c:	d10c      	bne.n	8002658 <__aeabi_dmul+0x558>
 800263e:	430c      	orrs	r4, r1
 8002640:	0324      	lsls	r4, r4, #12
 8002642:	003a      	movs	r2, r7
 8002644:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <__aeabi_dmul+0x580>)
 8002646:	0b24      	lsrs	r4, r4, #12
 8002648:	e5cc      	b.n	80021e4 <__aeabi_dmul+0xe4>
 800264a:	2e0b      	cmp	r6, #11
 800264c:	d000      	beq.n	8002650 <__aeabi_dmul+0x550>
 800264e:	e5a2      	b.n	8002196 <__aeabi_dmul+0x96>
 8002650:	468b      	mov	fp, r1
 8002652:	46aa      	mov	sl, r5
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	e5f7      	b.n	8002248 <__aeabi_dmul+0x148>
 8002658:	2480      	movs	r4, #128	; 0x80
 800265a:	465b      	mov	r3, fp
 800265c:	0324      	lsls	r4, r4, #12
 800265e:	431c      	orrs	r4, r3
 8002660:	0324      	lsls	r4, r4, #12
 8002662:	4642      	mov	r2, r8
 8002664:	4655      	mov	r5, sl
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <__aeabi_dmul+0x580>)
 8002668:	0b24      	lsrs	r4, r4, #12
 800266a:	e5bb      	b.n	80021e4 <__aeabi_dmul+0xe4>
 800266c:	464d      	mov	r5, r9
 800266e:	0021      	movs	r1, r4
 8002670:	2303      	movs	r3, #3
 8002672:	e7db      	b.n	800262c <__aeabi_dmul+0x52c>
 8002674:	fffffc0d 	.word	0xfffffc0d
 8002678:	0000043e 	.word	0x0000043e
 800267c:	0000041e 	.word	0x0000041e
 8002680:	000007ff 	.word	0x000007ff

08002684 <__aeabi_dsub>:
 8002684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002686:	4657      	mov	r7, sl
 8002688:	464e      	mov	r6, r9
 800268a:	4645      	mov	r5, r8
 800268c:	46de      	mov	lr, fp
 800268e:	b5e0      	push	{r5, r6, r7, lr}
 8002690:	000d      	movs	r5, r1
 8002692:	0004      	movs	r4, r0
 8002694:	0019      	movs	r1, r3
 8002696:	0010      	movs	r0, r2
 8002698:	032b      	lsls	r3, r5, #12
 800269a:	0a5b      	lsrs	r3, r3, #9
 800269c:	0f62      	lsrs	r2, r4, #29
 800269e:	431a      	orrs	r2, r3
 80026a0:	00e3      	lsls	r3, r4, #3
 80026a2:	030c      	lsls	r4, r1, #12
 80026a4:	0a64      	lsrs	r4, r4, #9
 80026a6:	0f47      	lsrs	r7, r0, #29
 80026a8:	4327      	orrs	r7, r4
 80026aa:	4cd0      	ldr	r4, [pc, #832]	; (80029ec <__aeabi_dsub+0x368>)
 80026ac:	006e      	lsls	r6, r5, #1
 80026ae:	4691      	mov	r9, r2
 80026b0:	b083      	sub	sp, #12
 80026b2:	004a      	lsls	r2, r1, #1
 80026b4:	00c0      	lsls	r0, r0, #3
 80026b6:	4698      	mov	r8, r3
 80026b8:	46a2      	mov	sl, r4
 80026ba:	0d76      	lsrs	r6, r6, #21
 80026bc:	0fed      	lsrs	r5, r5, #31
 80026be:	0d52      	lsrs	r2, r2, #21
 80026c0:	0fc9      	lsrs	r1, r1, #31
 80026c2:	9001      	str	r0, [sp, #4]
 80026c4:	42a2      	cmp	r2, r4
 80026c6:	d100      	bne.n	80026ca <__aeabi_dsub+0x46>
 80026c8:	e0b9      	b.n	800283e <__aeabi_dsub+0x1ba>
 80026ca:	2401      	movs	r4, #1
 80026cc:	4061      	eors	r1, r4
 80026ce:	468b      	mov	fp, r1
 80026d0:	428d      	cmp	r5, r1
 80026d2:	d100      	bne.n	80026d6 <__aeabi_dsub+0x52>
 80026d4:	e08d      	b.n	80027f2 <__aeabi_dsub+0x16e>
 80026d6:	1ab4      	subs	r4, r6, r2
 80026d8:	46a4      	mov	ip, r4
 80026da:	2c00      	cmp	r4, #0
 80026dc:	dc00      	bgt.n	80026e0 <__aeabi_dsub+0x5c>
 80026de:	e0b7      	b.n	8002850 <__aeabi_dsub+0x1cc>
 80026e0:	2a00      	cmp	r2, #0
 80026e2:	d100      	bne.n	80026e6 <__aeabi_dsub+0x62>
 80026e4:	e0cb      	b.n	800287e <__aeabi_dsub+0x1fa>
 80026e6:	4ac1      	ldr	r2, [pc, #772]	; (80029ec <__aeabi_dsub+0x368>)
 80026e8:	4296      	cmp	r6, r2
 80026ea:	d100      	bne.n	80026ee <__aeabi_dsub+0x6a>
 80026ec:	e186      	b.n	80029fc <__aeabi_dsub+0x378>
 80026ee:	2280      	movs	r2, #128	; 0x80
 80026f0:	0412      	lsls	r2, r2, #16
 80026f2:	4317      	orrs	r7, r2
 80026f4:	4662      	mov	r2, ip
 80026f6:	2a38      	cmp	r2, #56	; 0x38
 80026f8:	dd00      	ble.n	80026fc <__aeabi_dsub+0x78>
 80026fa:	e1a4      	b.n	8002a46 <__aeabi_dsub+0x3c2>
 80026fc:	2a1f      	cmp	r2, #31
 80026fe:	dd00      	ble.n	8002702 <__aeabi_dsub+0x7e>
 8002700:	e21d      	b.n	8002b3e <__aeabi_dsub+0x4ba>
 8002702:	4661      	mov	r1, ip
 8002704:	2220      	movs	r2, #32
 8002706:	003c      	movs	r4, r7
 8002708:	1a52      	subs	r2, r2, r1
 800270a:	0001      	movs	r1, r0
 800270c:	4090      	lsls	r0, r2
 800270e:	4094      	lsls	r4, r2
 8002710:	1e42      	subs	r2, r0, #1
 8002712:	4190      	sbcs	r0, r2
 8002714:	4662      	mov	r2, ip
 8002716:	46a0      	mov	r8, r4
 8002718:	4664      	mov	r4, ip
 800271a:	40d7      	lsrs	r7, r2
 800271c:	464a      	mov	r2, r9
 800271e:	40e1      	lsrs	r1, r4
 8002720:	4644      	mov	r4, r8
 8002722:	1bd2      	subs	r2, r2, r7
 8002724:	4691      	mov	r9, r2
 8002726:	430c      	orrs	r4, r1
 8002728:	4304      	orrs	r4, r0
 800272a:	1b1c      	subs	r4, r3, r4
 800272c:	42a3      	cmp	r3, r4
 800272e:	4192      	sbcs	r2, r2
 8002730:	464b      	mov	r3, r9
 8002732:	4252      	negs	r2, r2
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	469a      	mov	sl, r3
 8002738:	4653      	mov	r3, sl
 800273a:	021b      	lsls	r3, r3, #8
 800273c:	d400      	bmi.n	8002740 <__aeabi_dsub+0xbc>
 800273e:	e12b      	b.n	8002998 <__aeabi_dsub+0x314>
 8002740:	4653      	mov	r3, sl
 8002742:	025a      	lsls	r2, r3, #9
 8002744:	0a53      	lsrs	r3, r2, #9
 8002746:	469a      	mov	sl, r3
 8002748:	4653      	mov	r3, sl
 800274a:	2b00      	cmp	r3, #0
 800274c:	d100      	bne.n	8002750 <__aeabi_dsub+0xcc>
 800274e:	e166      	b.n	8002a1e <__aeabi_dsub+0x39a>
 8002750:	4650      	mov	r0, sl
 8002752:	f000 fc17 	bl	8002f84 <__clzsi2>
 8002756:	0003      	movs	r3, r0
 8002758:	3b08      	subs	r3, #8
 800275a:	2220      	movs	r2, #32
 800275c:	0020      	movs	r0, r4
 800275e:	1ad2      	subs	r2, r2, r3
 8002760:	4651      	mov	r1, sl
 8002762:	40d0      	lsrs	r0, r2
 8002764:	4099      	lsls	r1, r3
 8002766:	0002      	movs	r2, r0
 8002768:	409c      	lsls	r4, r3
 800276a:	430a      	orrs	r2, r1
 800276c:	429e      	cmp	r6, r3
 800276e:	dd00      	ble.n	8002772 <__aeabi_dsub+0xee>
 8002770:	e164      	b.n	8002a3c <__aeabi_dsub+0x3b8>
 8002772:	1b9b      	subs	r3, r3, r6
 8002774:	1c59      	adds	r1, r3, #1
 8002776:	291f      	cmp	r1, #31
 8002778:	dd00      	ble.n	800277c <__aeabi_dsub+0xf8>
 800277a:	e0fe      	b.n	800297a <__aeabi_dsub+0x2f6>
 800277c:	2320      	movs	r3, #32
 800277e:	0010      	movs	r0, r2
 8002780:	0026      	movs	r6, r4
 8002782:	1a5b      	subs	r3, r3, r1
 8002784:	409c      	lsls	r4, r3
 8002786:	4098      	lsls	r0, r3
 8002788:	40ce      	lsrs	r6, r1
 800278a:	40ca      	lsrs	r2, r1
 800278c:	1e63      	subs	r3, r4, #1
 800278e:	419c      	sbcs	r4, r3
 8002790:	4330      	orrs	r0, r6
 8002792:	4692      	mov	sl, r2
 8002794:	2600      	movs	r6, #0
 8002796:	4304      	orrs	r4, r0
 8002798:	0763      	lsls	r3, r4, #29
 800279a:	d009      	beq.n	80027b0 <__aeabi_dsub+0x12c>
 800279c:	230f      	movs	r3, #15
 800279e:	4023      	ands	r3, r4
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d005      	beq.n	80027b0 <__aeabi_dsub+0x12c>
 80027a4:	1d23      	adds	r3, r4, #4
 80027a6:	42a3      	cmp	r3, r4
 80027a8:	41a4      	sbcs	r4, r4
 80027aa:	4264      	negs	r4, r4
 80027ac:	44a2      	add	sl, r4
 80027ae:	001c      	movs	r4, r3
 80027b0:	4653      	mov	r3, sl
 80027b2:	021b      	lsls	r3, r3, #8
 80027b4:	d400      	bmi.n	80027b8 <__aeabi_dsub+0x134>
 80027b6:	e0f2      	b.n	800299e <__aeabi_dsub+0x31a>
 80027b8:	4b8c      	ldr	r3, [pc, #560]	; (80029ec <__aeabi_dsub+0x368>)
 80027ba:	3601      	adds	r6, #1
 80027bc:	429e      	cmp	r6, r3
 80027be:	d100      	bne.n	80027c2 <__aeabi_dsub+0x13e>
 80027c0:	e10f      	b.n	80029e2 <__aeabi_dsub+0x35e>
 80027c2:	4653      	mov	r3, sl
 80027c4:	498a      	ldr	r1, [pc, #552]	; (80029f0 <__aeabi_dsub+0x36c>)
 80027c6:	08e4      	lsrs	r4, r4, #3
 80027c8:	400b      	ands	r3, r1
 80027ca:	0019      	movs	r1, r3
 80027cc:	075b      	lsls	r3, r3, #29
 80027ce:	4323      	orrs	r3, r4
 80027d0:	0572      	lsls	r2, r6, #21
 80027d2:	024c      	lsls	r4, r1, #9
 80027d4:	0b24      	lsrs	r4, r4, #12
 80027d6:	0d52      	lsrs	r2, r2, #21
 80027d8:	0512      	lsls	r2, r2, #20
 80027da:	4322      	orrs	r2, r4
 80027dc:	07ed      	lsls	r5, r5, #31
 80027de:	432a      	orrs	r2, r5
 80027e0:	0018      	movs	r0, r3
 80027e2:	0011      	movs	r1, r2
 80027e4:	b003      	add	sp, #12
 80027e6:	bcf0      	pop	{r4, r5, r6, r7}
 80027e8:	46bb      	mov	fp, r7
 80027ea:	46b2      	mov	sl, r6
 80027ec:	46a9      	mov	r9, r5
 80027ee:	46a0      	mov	r8, r4
 80027f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027f2:	1ab4      	subs	r4, r6, r2
 80027f4:	46a4      	mov	ip, r4
 80027f6:	2c00      	cmp	r4, #0
 80027f8:	dd59      	ble.n	80028ae <__aeabi_dsub+0x22a>
 80027fa:	2a00      	cmp	r2, #0
 80027fc:	d100      	bne.n	8002800 <__aeabi_dsub+0x17c>
 80027fe:	e0b0      	b.n	8002962 <__aeabi_dsub+0x2de>
 8002800:	4556      	cmp	r6, sl
 8002802:	d100      	bne.n	8002806 <__aeabi_dsub+0x182>
 8002804:	e0fa      	b.n	80029fc <__aeabi_dsub+0x378>
 8002806:	2280      	movs	r2, #128	; 0x80
 8002808:	0412      	lsls	r2, r2, #16
 800280a:	4317      	orrs	r7, r2
 800280c:	4662      	mov	r2, ip
 800280e:	2a38      	cmp	r2, #56	; 0x38
 8002810:	dd00      	ble.n	8002814 <__aeabi_dsub+0x190>
 8002812:	e0d4      	b.n	80029be <__aeabi_dsub+0x33a>
 8002814:	2a1f      	cmp	r2, #31
 8002816:	dc00      	bgt.n	800281a <__aeabi_dsub+0x196>
 8002818:	e1c0      	b.n	8002b9c <__aeabi_dsub+0x518>
 800281a:	0039      	movs	r1, r7
 800281c:	3a20      	subs	r2, #32
 800281e:	40d1      	lsrs	r1, r2
 8002820:	4662      	mov	r2, ip
 8002822:	2a20      	cmp	r2, #32
 8002824:	d006      	beq.n	8002834 <__aeabi_dsub+0x1b0>
 8002826:	4664      	mov	r4, ip
 8002828:	2240      	movs	r2, #64	; 0x40
 800282a:	1b12      	subs	r2, r2, r4
 800282c:	003c      	movs	r4, r7
 800282e:	4094      	lsls	r4, r2
 8002830:	4304      	orrs	r4, r0
 8002832:	9401      	str	r4, [sp, #4]
 8002834:	9c01      	ldr	r4, [sp, #4]
 8002836:	1e62      	subs	r2, r4, #1
 8002838:	4194      	sbcs	r4, r2
 800283a:	430c      	orrs	r4, r1
 800283c:	e0c3      	b.n	80029c6 <__aeabi_dsub+0x342>
 800283e:	003c      	movs	r4, r7
 8002840:	4304      	orrs	r4, r0
 8002842:	d02b      	beq.n	800289c <__aeabi_dsub+0x218>
 8002844:	468b      	mov	fp, r1
 8002846:	428d      	cmp	r5, r1
 8002848:	d02e      	beq.n	80028a8 <__aeabi_dsub+0x224>
 800284a:	4c6a      	ldr	r4, [pc, #424]	; (80029f4 <__aeabi_dsub+0x370>)
 800284c:	46a4      	mov	ip, r4
 800284e:	44b4      	add	ip, r6
 8002850:	4664      	mov	r4, ip
 8002852:	2c00      	cmp	r4, #0
 8002854:	d05f      	beq.n	8002916 <__aeabi_dsub+0x292>
 8002856:	1b94      	subs	r4, r2, r6
 8002858:	46a4      	mov	ip, r4
 800285a:	2e00      	cmp	r6, #0
 800285c:	d000      	beq.n	8002860 <__aeabi_dsub+0x1dc>
 800285e:	e120      	b.n	8002aa2 <__aeabi_dsub+0x41e>
 8002860:	464c      	mov	r4, r9
 8002862:	431c      	orrs	r4, r3
 8002864:	d100      	bne.n	8002868 <__aeabi_dsub+0x1e4>
 8002866:	e1c7      	b.n	8002bf8 <__aeabi_dsub+0x574>
 8002868:	4661      	mov	r1, ip
 800286a:	1e4c      	subs	r4, r1, #1
 800286c:	2901      	cmp	r1, #1
 800286e:	d100      	bne.n	8002872 <__aeabi_dsub+0x1ee>
 8002870:	e223      	b.n	8002cba <__aeabi_dsub+0x636>
 8002872:	4d5e      	ldr	r5, [pc, #376]	; (80029ec <__aeabi_dsub+0x368>)
 8002874:	45ac      	cmp	ip, r5
 8002876:	d100      	bne.n	800287a <__aeabi_dsub+0x1f6>
 8002878:	e1d8      	b.n	8002c2c <__aeabi_dsub+0x5a8>
 800287a:	46a4      	mov	ip, r4
 800287c:	e11a      	b.n	8002ab4 <__aeabi_dsub+0x430>
 800287e:	003a      	movs	r2, r7
 8002880:	4302      	orrs	r2, r0
 8002882:	d100      	bne.n	8002886 <__aeabi_dsub+0x202>
 8002884:	e0e4      	b.n	8002a50 <__aeabi_dsub+0x3cc>
 8002886:	0022      	movs	r2, r4
 8002888:	3a01      	subs	r2, #1
 800288a:	2c01      	cmp	r4, #1
 800288c:	d100      	bne.n	8002890 <__aeabi_dsub+0x20c>
 800288e:	e1c3      	b.n	8002c18 <__aeabi_dsub+0x594>
 8002890:	4956      	ldr	r1, [pc, #344]	; (80029ec <__aeabi_dsub+0x368>)
 8002892:	428c      	cmp	r4, r1
 8002894:	d100      	bne.n	8002898 <__aeabi_dsub+0x214>
 8002896:	e0b1      	b.n	80029fc <__aeabi_dsub+0x378>
 8002898:	4694      	mov	ip, r2
 800289a:	e72b      	b.n	80026f4 <__aeabi_dsub+0x70>
 800289c:	2401      	movs	r4, #1
 800289e:	4061      	eors	r1, r4
 80028a0:	468b      	mov	fp, r1
 80028a2:	428d      	cmp	r5, r1
 80028a4:	d000      	beq.n	80028a8 <__aeabi_dsub+0x224>
 80028a6:	e716      	b.n	80026d6 <__aeabi_dsub+0x52>
 80028a8:	4952      	ldr	r1, [pc, #328]	; (80029f4 <__aeabi_dsub+0x370>)
 80028aa:	468c      	mov	ip, r1
 80028ac:	44b4      	add	ip, r6
 80028ae:	4664      	mov	r4, ip
 80028b0:	2c00      	cmp	r4, #0
 80028b2:	d100      	bne.n	80028b6 <__aeabi_dsub+0x232>
 80028b4:	e0d3      	b.n	8002a5e <__aeabi_dsub+0x3da>
 80028b6:	1b91      	subs	r1, r2, r6
 80028b8:	468c      	mov	ip, r1
 80028ba:	2e00      	cmp	r6, #0
 80028bc:	d100      	bne.n	80028c0 <__aeabi_dsub+0x23c>
 80028be:	e15e      	b.n	8002b7e <__aeabi_dsub+0x4fa>
 80028c0:	494a      	ldr	r1, [pc, #296]	; (80029ec <__aeabi_dsub+0x368>)
 80028c2:	428a      	cmp	r2, r1
 80028c4:	d100      	bne.n	80028c8 <__aeabi_dsub+0x244>
 80028c6:	e1be      	b.n	8002c46 <__aeabi_dsub+0x5c2>
 80028c8:	2180      	movs	r1, #128	; 0x80
 80028ca:	464c      	mov	r4, r9
 80028cc:	0409      	lsls	r1, r1, #16
 80028ce:	430c      	orrs	r4, r1
 80028d0:	46a1      	mov	r9, r4
 80028d2:	4661      	mov	r1, ip
 80028d4:	2938      	cmp	r1, #56	; 0x38
 80028d6:	dd00      	ble.n	80028da <__aeabi_dsub+0x256>
 80028d8:	e1ba      	b.n	8002c50 <__aeabi_dsub+0x5cc>
 80028da:	291f      	cmp	r1, #31
 80028dc:	dd00      	ble.n	80028e0 <__aeabi_dsub+0x25c>
 80028de:	e227      	b.n	8002d30 <__aeabi_dsub+0x6ac>
 80028e0:	2420      	movs	r4, #32
 80028e2:	1a64      	subs	r4, r4, r1
 80028e4:	4649      	mov	r1, r9
 80028e6:	40a1      	lsls	r1, r4
 80028e8:	001e      	movs	r6, r3
 80028ea:	4688      	mov	r8, r1
 80028ec:	4661      	mov	r1, ip
 80028ee:	40a3      	lsls	r3, r4
 80028f0:	40ce      	lsrs	r6, r1
 80028f2:	4641      	mov	r1, r8
 80028f4:	1e5c      	subs	r4, r3, #1
 80028f6:	41a3      	sbcs	r3, r4
 80028f8:	4331      	orrs	r1, r6
 80028fa:	4319      	orrs	r1, r3
 80028fc:	000c      	movs	r4, r1
 80028fe:	4663      	mov	r3, ip
 8002900:	4649      	mov	r1, r9
 8002902:	40d9      	lsrs	r1, r3
 8002904:	187f      	adds	r7, r7, r1
 8002906:	1824      	adds	r4, r4, r0
 8002908:	4284      	cmp	r4, r0
 800290a:	419b      	sbcs	r3, r3
 800290c:	425b      	negs	r3, r3
 800290e:	469a      	mov	sl, r3
 8002910:	0016      	movs	r6, r2
 8002912:	44ba      	add	sl, r7
 8002914:	e05d      	b.n	80029d2 <__aeabi_dsub+0x34e>
 8002916:	4c38      	ldr	r4, [pc, #224]	; (80029f8 <__aeabi_dsub+0x374>)
 8002918:	1c72      	adds	r2, r6, #1
 800291a:	4222      	tst	r2, r4
 800291c:	d000      	beq.n	8002920 <__aeabi_dsub+0x29c>
 800291e:	e0df      	b.n	8002ae0 <__aeabi_dsub+0x45c>
 8002920:	464a      	mov	r2, r9
 8002922:	431a      	orrs	r2, r3
 8002924:	2e00      	cmp	r6, #0
 8002926:	d000      	beq.n	800292a <__aeabi_dsub+0x2a6>
 8002928:	e15c      	b.n	8002be4 <__aeabi_dsub+0x560>
 800292a:	2a00      	cmp	r2, #0
 800292c:	d100      	bne.n	8002930 <__aeabi_dsub+0x2ac>
 800292e:	e1cf      	b.n	8002cd0 <__aeabi_dsub+0x64c>
 8002930:	003a      	movs	r2, r7
 8002932:	4302      	orrs	r2, r0
 8002934:	d100      	bne.n	8002938 <__aeabi_dsub+0x2b4>
 8002936:	e17f      	b.n	8002c38 <__aeabi_dsub+0x5b4>
 8002938:	1a1c      	subs	r4, r3, r0
 800293a:	464a      	mov	r2, r9
 800293c:	42a3      	cmp	r3, r4
 800293e:	4189      	sbcs	r1, r1
 8002940:	1bd2      	subs	r2, r2, r7
 8002942:	4249      	negs	r1, r1
 8002944:	1a52      	subs	r2, r2, r1
 8002946:	4692      	mov	sl, r2
 8002948:	0212      	lsls	r2, r2, #8
 800294a:	d400      	bmi.n	800294e <__aeabi_dsub+0x2ca>
 800294c:	e20a      	b.n	8002d64 <__aeabi_dsub+0x6e0>
 800294e:	1ac4      	subs	r4, r0, r3
 8002950:	42a0      	cmp	r0, r4
 8002952:	4180      	sbcs	r0, r0
 8002954:	464b      	mov	r3, r9
 8002956:	4240      	negs	r0, r0
 8002958:	1aff      	subs	r7, r7, r3
 800295a:	1a3b      	subs	r3, r7, r0
 800295c:	469a      	mov	sl, r3
 800295e:	465d      	mov	r5, fp
 8002960:	e71a      	b.n	8002798 <__aeabi_dsub+0x114>
 8002962:	003a      	movs	r2, r7
 8002964:	4302      	orrs	r2, r0
 8002966:	d073      	beq.n	8002a50 <__aeabi_dsub+0x3cc>
 8002968:	0022      	movs	r2, r4
 800296a:	3a01      	subs	r2, #1
 800296c:	2c01      	cmp	r4, #1
 800296e:	d100      	bne.n	8002972 <__aeabi_dsub+0x2ee>
 8002970:	e0cb      	b.n	8002b0a <__aeabi_dsub+0x486>
 8002972:	4554      	cmp	r4, sl
 8002974:	d042      	beq.n	80029fc <__aeabi_dsub+0x378>
 8002976:	4694      	mov	ip, r2
 8002978:	e748      	b.n	800280c <__aeabi_dsub+0x188>
 800297a:	0010      	movs	r0, r2
 800297c:	3b1f      	subs	r3, #31
 800297e:	40d8      	lsrs	r0, r3
 8002980:	2920      	cmp	r1, #32
 8002982:	d003      	beq.n	800298c <__aeabi_dsub+0x308>
 8002984:	2340      	movs	r3, #64	; 0x40
 8002986:	1a5b      	subs	r3, r3, r1
 8002988:	409a      	lsls	r2, r3
 800298a:	4314      	orrs	r4, r2
 800298c:	1e63      	subs	r3, r4, #1
 800298e:	419c      	sbcs	r4, r3
 8002990:	2300      	movs	r3, #0
 8002992:	2600      	movs	r6, #0
 8002994:	469a      	mov	sl, r3
 8002996:	4304      	orrs	r4, r0
 8002998:	0763      	lsls	r3, r4, #29
 800299a:	d000      	beq.n	800299e <__aeabi_dsub+0x31a>
 800299c:	e6fe      	b.n	800279c <__aeabi_dsub+0x118>
 800299e:	4652      	mov	r2, sl
 80029a0:	08e3      	lsrs	r3, r4, #3
 80029a2:	0752      	lsls	r2, r2, #29
 80029a4:	4313      	orrs	r3, r2
 80029a6:	4652      	mov	r2, sl
 80029a8:	46b4      	mov	ip, r6
 80029aa:	08d2      	lsrs	r2, r2, #3
 80029ac:	490f      	ldr	r1, [pc, #60]	; (80029ec <__aeabi_dsub+0x368>)
 80029ae:	458c      	cmp	ip, r1
 80029b0:	d02a      	beq.n	8002a08 <__aeabi_dsub+0x384>
 80029b2:	0312      	lsls	r2, r2, #12
 80029b4:	0b14      	lsrs	r4, r2, #12
 80029b6:	4662      	mov	r2, ip
 80029b8:	0552      	lsls	r2, r2, #21
 80029ba:	0d52      	lsrs	r2, r2, #21
 80029bc:	e70c      	b.n	80027d8 <__aeabi_dsub+0x154>
 80029be:	003c      	movs	r4, r7
 80029c0:	4304      	orrs	r4, r0
 80029c2:	1e62      	subs	r2, r4, #1
 80029c4:	4194      	sbcs	r4, r2
 80029c6:	18e4      	adds	r4, r4, r3
 80029c8:	429c      	cmp	r4, r3
 80029ca:	4192      	sbcs	r2, r2
 80029cc:	4252      	negs	r2, r2
 80029ce:	444a      	add	r2, r9
 80029d0:	4692      	mov	sl, r2
 80029d2:	4653      	mov	r3, sl
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	d5df      	bpl.n	8002998 <__aeabi_dsub+0x314>
 80029d8:	4b04      	ldr	r3, [pc, #16]	; (80029ec <__aeabi_dsub+0x368>)
 80029da:	3601      	adds	r6, #1
 80029dc:	429e      	cmp	r6, r3
 80029de:	d000      	beq.n	80029e2 <__aeabi_dsub+0x35e>
 80029e0:	e0a0      	b.n	8002b24 <__aeabi_dsub+0x4a0>
 80029e2:	0032      	movs	r2, r6
 80029e4:	2400      	movs	r4, #0
 80029e6:	2300      	movs	r3, #0
 80029e8:	e6f6      	b.n	80027d8 <__aeabi_dsub+0x154>
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	000007ff 	.word	0x000007ff
 80029f0:	ff7fffff 	.word	0xff7fffff
 80029f4:	fffff801 	.word	0xfffff801
 80029f8:	000007fe 	.word	0x000007fe
 80029fc:	08db      	lsrs	r3, r3, #3
 80029fe:	464a      	mov	r2, r9
 8002a00:	0752      	lsls	r2, r2, #29
 8002a02:	4313      	orrs	r3, r2
 8002a04:	464a      	mov	r2, r9
 8002a06:	08d2      	lsrs	r2, r2, #3
 8002a08:	0019      	movs	r1, r3
 8002a0a:	4311      	orrs	r1, r2
 8002a0c:	d100      	bne.n	8002a10 <__aeabi_dsub+0x38c>
 8002a0e:	e1b5      	b.n	8002d7c <__aeabi_dsub+0x6f8>
 8002a10:	2480      	movs	r4, #128	; 0x80
 8002a12:	0324      	lsls	r4, r4, #12
 8002a14:	4314      	orrs	r4, r2
 8002a16:	0324      	lsls	r4, r4, #12
 8002a18:	4ad5      	ldr	r2, [pc, #852]	; (8002d70 <__aeabi_dsub+0x6ec>)
 8002a1a:	0b24      	lsrs	r4, r4, #12
 8002a1c:	e6dc      	b.n	80027d8 <__aeabi_dsub+0x154>
 8002a1e:	0020      	movs	r0, r4
 8002a20:	f000 fab0 	bl	8002f84 <__clzsi2>
 8002a24:	0003      	movs	r3, r0
 8002a26:	3318      	adds	r3, #24
 8002a28:	2b1f      	cmp	r3, #31
 8002a2a:	dc00      	bgt.n	8002a2e <__aeabi_dsub+0x3aa>
 8002a2c:	e695      	b.n	800275a <__aeabi_dsub+0xd6>
 8002a2e:	0022      	movs	r2, r4
 8002a30:	3808      	subs	r0, #8
 8002a32:	4082      	lsls	r2, r0
 8002a34:	2400      	movs	r4, #0
 8002a36:	429e      	cmp	r6, r3
 8002a38:	dc00      	bgt.n	8002a3c <__aeabi_dsub+0x3b8>
 8002a3a:	e69a      	b.n	8002772 <__aeabi_dsub+0xee>
 8002a3c:	1af6      	subs	r6, r6, r3
 8002a3e:	4bcd      	ldr	r3, [pc, #820]	; (8002d74 <__aeabi_dsub+0x6f0>)
 8002a40:	401a      	ands	r2, r3
 8002a42:	4692      	mov	sl, r2
 8002a44:	e6a8      	b.n	8002798 <__aeabi_dsub+0x114>
 8002a46:	003c      	movs	r4, r7
 8002a48:	4304      	orrs	r4, r0
 8002a4a:	1e62      	subs	r2, r4, #1
 8002a4c:	4194      	sbcs	r4, r2
 8002a4e:	e66c      	b.n	800272a <__aeabi_dsub+0xa6>
 8002a50:	464a      	mov	r2, r9
 8002a52:	08db      	lsrs	r3, r3, #3
 8002a54:	0752      	lsls	r2, r2, #29
 8002a56:	4313      	orrs	r3, r2
 8002a58:	464a      	mov	r2, r9
 8002a5a:	08d2      	lsrs	r2, r2, #3
 8002a5c:	e7a6      	b.n	80029ac <__aeabi_dsub+0x328>
 8002a5e:	4cc6      	ldr	r4, [pc, #792]	; (8002d78 <__aeabi_dsub+0x6f4>)
 8002a60:	1c72      	adds	r2, r6, #1
 8002a62:	4222      	tst	r2, r4
 8002a64:	d000      	beq.n	8002a68 <__aeabi_dsub+0x3e4>
 8002a66:	e0ac      	b.n	8002bc2 <__aeabi_dsub+0x53e>
 8002a68:	464a      	mov	r2, r9
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	2e00      	cmp	r6, #0
 8002a6e:	d000      	beq.n	8002a72 <__aeabi_dsub+0x3ee>
 8002a70:	e105      	b.n	8002c7e <__aeabi_dsub+0x5fa>
 8002a72:	2a00      	cmp	r2, #0
 8002a74:	d100      	bne.n	8002a78 <__aeabi_dsub+0x3f4>
 8002a76:	e156      	b.n	8002d26 <__aeabi_dsub+0x6a2>
 8002a78:	003a      	movs	r2, r7
 8002a7a:	4302      	orrs	r2, r0
 8002a7c:	d100      	bne.n	8002a80 <__aeabi_dsub+0x3fc>
 8002a7e:	e0db      	b.n	8002c38 <__aeabi_dsub+0x5b4>
 8002a80:	181c      	adds	r4, r3, r0
 8002a82:	429c      	cmp	r4, r3
 8002a84:	419b      	sbcs	r3, r3
 8002a86:	444f      	add	r7, r9
 8002a88:	46ba      	mov	sl, r7
 8002a8a:	425b      	negs	r3, r3
 8002a8c:	449a      	add	sl, r3
 8002a8e:	4653      	mov	r3, sl
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	d400      	bmi.n	8002a96 <__aeabi_dsub+0x412>
 8002a94:	e780      	b.n	8002998 <__aeabi_dsub+0x314>
 8002a96:	4652      	mov	r2, sl
 8002a98:	4bb6      	ldr	r3, [pc, #728]	; (8002d74 <__aeabi_dsub+0x6f0>)
 8002a9a:	2601      	movs	r6, #1
 8002a9c:	401a      	ands	r2, r3
 8002a9e:	4692      	mov	sl, r2
 8002aa0:	e77a      	b.n	8002998 <__aeabi_dsub+0x314>
 8002aa2:	4cb3      	ldr	r4, [pc, #716]	; (8002d70 <__aeabi_dsub+0x6ec>)
 8002aa4:	42a2      	cmp	r2, r4
 8002aa6:	d100      	bne.n	8002aaa <__aeabi_dsub+0x426>
 8002aa8:	e0c0      	b.n	8002c2c <__aeabi_dsub+0x5a8>
 8002aaa:	2480      	movs	r4, #128	; 0x80
 8002aac:	464d      	mov	r5, r9
 8002aae:	0424      	lsls	r4, r4, #16
 8002ab0:	4325      	orrs	r5, r4
 8002ab2:	46a9      	mov	r9, r5
 8002ab4:	4664      	mov	r4, ip
 8002ab6:	2c38      	cmp	r4, #56	; 0x38
 8002ab8:	dc53      	bgt.n	8002b62 <__aeabi_dsub+0x4de>
 8002aba:	4661      	mov	r1, ip
 8002abc:	2c1f      	cmp	r4, #31
 8002abe:	dd00      	ble.n	8002ac2 <__aeabi_dsub+0x43e>
 8002ac0:	e0cd      	b.n	8002c5e <__aeabi_dsub+0x5da>
 8002ac2:	2520      	movs	r5, #32
 8002ac4:	001e      	movs	r6, r3
 8002ac6:	1b2d      	subs	r5, r5, r4
 8002ac8:	464c      	mov	r4, r9
 8002aca:	40ab      	lsls	r3, r5
 8002acc:	40ac      	lsls	r4, r5
 8002ace:	40ce      	lsrs	r6, r1
 8002ad0:	1e5d      	subs	r5, r3, #1
 8002ad2:	41ab      	sbcs	r3, r5
 8002ad4:	4334      	orrs	r4, r6
 8002ad6:	4323      	orrs	r3, r4
 8002ad8:	464c      	mov	r4, r9
 8002ada:	40cc      	lsrs	r4, r1
 8002adc:	1b3f      	subs	r7, r7, r4
 8002ade:	e045      	b.n	8002b6c <__aeabi_dsub+0x4e8>
 8002ae0:	464a      	mov	r2, r9
 8002ae2:	1a1c      	subs	r4, r3, r0
 8002ae4:	1bd1      	subs	r1, r2, r7
 8002ae6:	42a3      	cmp	r3, r4
 8002ae8:	4192      	sbcs	r2, r2
 8002aea:	4252      	negs	r2, r2
 8002aec:	4692      	mov	sl, r2
 8002aee:	000a      	movs	r2, r1
 8002af0:	4651      	mov	r1, sl
 8002af2:	1a52      	subs	r2, r2, r1
 8002af4:	4692      	mov	sl, r2
 8002af6:	0212      	lsls	r2, r2, #8
 8002af8:	d500      	bpl.n	8002afc <__aeabi_dsub+0x478>
 8002afa:	e083      	b.n	8002c04 <__aeabi_dsub+0x580>
 8002afc:	4653      	mov	r3, sl
 8002afe:	4323      	orrs	r3, r4
 8002b00:	d000      	beq.n	8002b04 <__aeabi_dsub+0x480>
 8002b02:	e621      	b.n	8002748 <__aeabi_dsub+0xc4>
 8002b04:	2200      	movs	r2, #0
 8002b06:	2500      	movs	r5, #0
 8002b08:	e753      	b.n	80029b2 <__aeabi_dsub+0x32e>
 8002b0a:	181c      	adds	r4, r3, r0
 8002b0c:	429c      	cmp	r4, r3
 8002b0e:	419b      	sbcs	r3, r3
 8002b10:	444f      	add	r7, r9
 8002b12:	46ba      	mov	sl, r7
 8002b14:	425b      	negs	r3, r3
 8002b16:	449a      	add	sl, r3
 8002b18:	4653      	mov	r3, sl
 8002b1a:	2601      	movs	r6, #1
 8002b1c:	021b      	lsls	r3, r3, #8
 8002b1e:	d400      	bmi.n	8002b22 <__aeabi_dsub+0x49e>
 8002b20:	e73a      	b.n	8002998 <__aeabi_dsub+0x314>
 8002b22:	2602      	movs	r6, #2
 8002b24:	4652      	mov	r2, sl
 8002b26:	4b93      	ldr	r3, [pc, #588]	; (8002d74 <__aeabi_dsub+0x6f0>)
 8002b28:	2101      	movs	r1, #1
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	0013      	movs	r3, r2
 8002b2e:	4021      	ands	r1, r4
 8002b30:	0862      	lsrs	r2, r4, #1
 8002b32:	430a      	orrs	r2, r1
 8002b34:	07dc      	lsls	r4, r3, #31
 8002b36:	085b      	lsrs	r3, r3, #1
 8002b38:	469a      	mov	sl, r3
 8002b3a:	4314      	orrs	r4, r2
 8002b3c:	e62c      	b.n	8002798 <__aeabi_dsub+0x114>
 8002b3e:	0039      	movs	r1, r7
 8002b40:	3a20      	subs	r2, #32
 8002b42:	40d1      	lsrs	r1, r2
 8002b44:	4662      	mov	r2, ip
 8002b46:	2a20      	cmp	r2, #32
 8002b48:	d006      	beq.n	8002b58 <__aeabi_dsub+0x4d4>
 8002b4a:	4664      	mov	r4, ip
 8002b4c:	2240      	movs	r2, #64	; 0x40
 8002b4e:	1b12      	subs	r2, r2, r4
 8002b50:	003c      	movs	r4, r7
 8002b52:	4094      	lsls	r4, r2
 8002b54:	4304      	orrs	r4, r0
 8002b56:	9401      	str	r4, [sp, #4]
 8002b58:	9c01      	ldr	r4, [sp, #4]
 8002b5a:	1e62      	subs	r2, r4, #1
 8002b5c:	4194      	sbcs	r4, r2
 8002b5e:	430c      	orrs	r4, r1
 8002b60:	e5e3      	b.n	800272a <__aeabi_dsub+0xa6>
 8002b62:	4649      	mov	r1, r9
 8002b64:	4319      	orrs	r1, r3
 8002b66:	000b      	movs	r3, r1
 8002b68:	1e5c      	subs	r4, r3, #1
 8002b6a:	41a3      	sbcs	r3, r4
 8002b6c:	1ac4      	subs	r4, r0, r3
 8002b6e:	42a0      	cmp	r0, r4
 8002b70:	419b      	sbcs	r3, r3
 8002b72:	425b      	negs	r3, r3
 8002b74:	1afb      	subs	r3, r7, r3
 8002b76:	469a      	mov	sl, r3
 8002b78:	465d      	mov	r5, fp
 8002b7a:	0016      	movs	r6, r2
 8002b7c:	e5dc      	b.n	8002738 <__aeabi_dsub+0xb4>
 8002b7e:	4649      	mov	r1, r9
 8002b80:	4319      	orrs	r1, r3
 8002b82:	d100      	bne.n	8002b86 <__aeabi_dsub+0x502>
 8002b84:	e0ae      	b.n	8002ce4 <__aeabi_dsub+0x660>
 8002b86:	4661      	mov	r1, ip
 8002b88:	4664      	mov	r4, ip
 8002b8a:	3901      	subs	r1, #1
 8002b8c:	2c01      	cmp	r4, #1
 8002b8e:	d100      	bne.n	8002b92 <__aeabi_dsub+0x50e>
 8002b90:	e0e0      	b.n	8002d54 <__aeabi_dsub+0x6d0>
 8002b92:	4c77      	ldr	r4, [pc, #476]	; (8002d70 <__aeabi_dsub+0x6ec>)
 8002b94:	45a4      	cmp	ip, r4
 8002b96:	d056      	beq.n	8002c46 <__aeabi_dsub+0x5c2>
 8002b98:	468c      	mov	ip, r1
 8002b9a:	e69a      	b.n	80028d2 <__aeabi_dsub+0x24e>
 8002b9c:	4661      	mov	r1, ip
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	003c      	movs	r4, r7
 8002ba2:	1a52      	subs	r2, r2, r1
 8002ba4:	4094      	lsls	r4, r2
 8002ba6:	0001      	movs	r1, r0
 8002ba8:	4090      	lsls	r0, r2
 8002baa:	46a0      	mov	r8, r4
 8002bac:	4664      	mov	r4, ip
 8002bae:	1e42      	subs	r2, r0, #1
 8002bb0:	4190      	sbcs	r0, r2
 8002bb2:	4662      	mov	r2, ip
 8002bb4:	40e1      	lsrs	r1, r4
 8002bb6:	4644      	mov	r4, r8
 8002bb8:	40d7      	lsrs	r7, r2
 8002bba:	430c      	orrs	r4, r1
 8002bbc:	4304      	orrs	r4, r0
 8002bbe:	44b9      	add	r9, r7
 8002bc0:	e701      	b.n	80029c6 <__aeabi_dsub+0x342>
 8002bc2:	496b      	ldr	r1, [pc, #428]	; (8002d70 <__aeabi_dsub+0x6ec>)
 8002bc4:	428a      	cmp	r2, r1
 8002bc6:	d100      	bne.n	8002bca <__aeabi_dsub+0x546>
 8002bc8:	e70c      	b.n	80029e4 <__aeabi_dsub+0x360>
 8002bca:	1818      	adds	r0, r3, r0
 8002bcc:	4298      	cmp	r0, r3
 8002bce:	419b      	sbcs	r3, r3
 8002bd0:	444f      	add	r7, r9
 8002bd2:	425b      	negs	r3, r3
 8002bd4:	18fb      	adds	r3, r7, r3
 8002bd6:	07dc      	lsls	r4, r3, #31
 8002bd8:	0840      	lsrs	r0, r0, #1
 8002bda:	085b      	lsrs	r3, r3, #1
 8002bdc:	469a      	mov	sl, r3
 8002bde:	0016      	movs	r6, r2
 8002be0:	4304      	orrs	r4, r0
 8002be2:	e6d9      	b.n	8002998 <__aeabi_dsub+0x314>
 8002be4:	2a00      	cmp	r2, #0
 8002be6:	d000      	beq.n	8002bea <__aeabi_dsub+0x566>
 8002be8:	e081      	b.n	8002cee <__aeabi_dsub+0x66a>
 8002bea:	003b      	movs	r3, r7
 8002bec:	4303      	orrs	r3, r0
 8002bee:	d11d      	bne.n	8002c2c <__aeabi_dsub+0x5a8>
 8002bf0:	2280      	movs	r2, #128	; 0x80
 8002bf2:	2500      	movs	r5, #0
 8002bf4:	0312      	lsls	r2, r2, #12
 8002bf6:	e70b      	b.n	8002a10 <__aeabi_dsub+0x38c>
 8002bf8:	08c0      	lsrs	r0, r0, #3
 8002bfa:	077b      	lsls	r3, r7, #29
 8002bfc:	465d      	mov	r5, fp
 8002bfe:	4303      	orrs	r3, r0
 8002c00:	08fa      	lsrs	r2, r7, #3
 8002c02:	e6d3      	b.n	80029ac <__aeabi_dsub+0x328>
 8002c04:	1ac4      	subs	r4, r0, r3
 8002c06:	42a0      	cmp	r0, r4
 8002c08:	4180      	sbcs	r0, r0
 8002c0a:	464b      	mov	r3, r9
 8002c0c:	4240      	negs	r0, r0
 8002c0e:	1aff      	subs	r7, r7, r3
 8002c10:	1a3b      	subs	r3, r7, r0
 8002c12:	469a      	mov	sl, r3
 8002c14:	465d      	mov	r5, fp
 8002c16:	e597      	b.n	8002748 <__aeabi_dsub+0xc4>
 8002c18:	1a1c      	subs	r4, r3, r0
 8002c1a:	464a      	mov	r2, r9
 8002c1c:	42a3      	cmp	r3, r4
 8002c1e:	419b      	sbcs	r3, r3
 8002c20:	1bd7      	subs	r7, r2, r7
 8002c22:	425b      	negs	r3, r3
 8002c24:	1afb      	subs	r3, r7, r3
 8002c26:	469a      	mov	sl, r3
 8002c28:	2601      	movs	r6, #1
 8002c2a:	e585      	b.n	8002738 <__aeabi_dsub+0xb4>
 8002c2c:	08c0      	lsrs	r0, r0, #3
 8002c2e:	077b      	lsls	r3, r7, #29
 8002c30:	465d      	mov	r5, fp
 8002c32:	4303      	orrs	r3, r0
 8002c34:	08fa      	lsrs	r2, r7, #3
 8002c36:	e6e7      	b.n	8002a08 <__aeabi_dsub+0x384>
 8002c38:	464a      	mov	r2, r9
 8002c3a:	08db      	lsrs	r3, r3, #3
 8002c3c:	0752      	lsls	r2, r2, #29
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	464a      	mov	r2, r9
 8002c42:	08d2      	lsrs	r2, r2, #3
 8002c44:	e6b5      	b.n	80029b2 <__aeabi_dsub+0x32e>
 8002c46:	08c0      	lsrs	r0, r0, #3
 8002c48:	077b      	lsls	r3, r7, #29
 8002c4a:	4303      	orrs	r3, r0
 8002c4c:	08fa      	lsrs	r2, r7, #3
 8002c4e:	e6db      	b.n	8002a08 <__aeabi_dsub+0x384>
 8002c50:	4649      	mov	r1, r9
 8002c52:	4319      	orrs	r1, r3
 8002c54:	000b      	movs	r3, r1
 8002c56:	1e59      	subs	r1, r3, #1
 8002c58:	418b      	sbcs	r3, r1
 8002c5a:	001c      	movs	r4, r3
 8002c5c:	e653      	b.n	8002906 <__aeabi_dsub+0x282>
 8002c5e:	464d      	mov	r5, r9
 8002c60:	3c20      	subs	r4, #32
 8002c62:	40e5      	lsrs	r5, r4
 8002c64:	2920      	cmp	r1, #32
 8002c66:	d005      	beq.n	8002c74 <__aeabi_dsub+0x5f0>
 8002c68:	2440      	movs	r4, #64	; 0x40
 8002c6a:	1a64      	subs	r4, r4, r1
 8002c6c:	4649      	mov	r1, r9
 8002c6e:	40a1      	lsls	r1, r4
 8002c70:	430b      	orrs	r3, r1
 8002c72:	4698      	mov	r8, r3
 8002c74:	4643      	mov	r3, r8
 8002c76:	1e5c      	subs	r4, r3, #1
 8002c78:	41a3      	sbcs	r3, r4
 8002c7a:	432b      	orrs	r3, r5
 8002c7c:	e776      	b.n	8002b6c <__aeabi_dsub+0x4e8>
 8002c7e:	2a00      	cmp	r2, #0
 8002c80:	d0e1      	beq.n	8002c46 <__aeabi_dsub+0x5c2>
 8002c82:	003a      	movs	r2, r7
 8002c84:	08db      	lsrs	r3, r3, #3
 8002c86:	4302      	orrs	r2, r0
 8002c88:	d100      	bne.n	8002c8c <__aeabi_dsub+0x608>
 8002c8a:	e6b8      	b.n	80029fe <__aeabi_dsub+0x37a>
 8002c8c:	464a      	mov	r2, r9
 8002c8e:	0752      	lsls	r2, r2, #29
 8002c90:	2480      	movs	r4, #128	; 0x80
 8002c92:	4313      	orrs	r3, r2
 8002c94:	464a      	mov	r2, r9
 8002c96:	0324      	lsls	r4, r4, #12
 8002c98:	08d2      	lsrs	r2, r2, #3
 8002c9a:	4222      	tst	r2, r4
 8002c9c:	d007      	beq.n	8002cae <__aeabi_dsub+0x62a>
 8002c9e:	08fe      	lsrs	r6, r7, #3
 8002ca0:	4226      	tst	r6, r4
 8002ca2:	d104      	bne.n	8002cae <__aeabi_dsub+0x62a>
 8002ca4:	465d      	mov	r5, fp
 8002ca6:	0032      	movs	r2, r6
 8002ca8:	08c3      	lsrs	r3, r0, #3
 8002caa:	077f      	lsls	r7, r7, #29
 8002cac:	433b      	orrs	r3, r7
 8002cae:	0f59      	lsrs	r1, r3, #29
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	0749      	lsls	r1, r1, #29
 8002cb4:	08db      	lsrs	r3, r3, #3
 8002cb6:	430b      	orrs	r3, r1
 8002cb8:	e6a6      	b.n	8002a08 <__aeabi_dsub+0x384>
 8002cba:	1ac4      	subs	r4, r0, r3
 8002cbc:	42a0      	cmp	r0, r4
 8002cbe:	4180      	sbcs	r0, r0
 8002cc0:	464b      	mov	r3, r9
 8002cc2:	4240      	negs	r0, r0
 8002cc4:	1aff      	subs	r7, r7, r3
 8002cc6:	1a3b      	subs	r3, r7, r0
 8002cc8:	469a      	mov	sl, r3
 8002cca:	465d      	mov	r5, fp
 8002ccc:	2601      	movs	r6, #1
 8002cce:	e533      	b.n	8002738 <__aeabi_dsub+0xb4>
 8002cd0:	003b      	movs	r3, r7
 8002cd2:	4303      	orrs	r3, r0
 8002cd4:	d100      	bne.n	8002cd8 <__aeabi_dsub+0x654>
 8002cd6:	e715      	b.n	8002b04 <__aeabi_dsub+0x480>
 8002cd8:	08c0      	lsrs	r0, r0, #3
 8002cda:	077b      	lsls	r3, r7, #29
 8002cdc:	465d      	mov	r5, fp
 8002cde:	4303      	orrs	r3, r0
 8002ce0:	08fa      	lsrs	r2, r7, #3
 8002ce2:	e666      	b.n	80029b2 <__aeabi_dsub+0x32e>
 8002ce4:	08c0      	lsrs	r0, r0, #3
 8002ce6:	077b      	lsls	r3, r7, #29
 8002ce8:	4303      	orrs	r3, r0
 8002cea:	08fa      	lsrs	r2, r7, #3
 8002cec:	e65e      	b.n	80029ac <__aeabi_dsub+0x328>
 8002cee:	003a      	movs	r2, r7
 8002cf0:	08db      	lsrs	r3, r3, #3
 8002cf2:	4302      	orrs	r2, r0
 8002cf4:	d100      	bne.n	8002cf8 <__aeabi_dsub+0x674>
 8002cf6:	e682      	b.n	80029fe <__aeabi_dsub+0x37a>
 8002cf8:	464a      	mov	r2, r9
 8002cfa:	0752      	lsls	r2, r2, #29
 8002cfc:	2480      	movs	r4, #128	; 0x80
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	464a      	mov	r2, r9
 8002d02:	0324      	lsls	r4, r4, #12
 8002d04:	08d2      	lsrs	r2, r2, #3
 8002d06:	4222      	tst	r2, r4
 8002d08:	d007      	beq.n	8002d1a <__aeabi_dsub+0x696>
 8002d0a:	08fe      	lsrs	r6, r7, #3
 8002d0c:	4226      	tst	r6, r4
 8002d0e:	d104      	bne.n	8002d1a <__aeabi_dsub+0x696>
 8002d10:	465d      	mov	r5, fp
 8002d12:	0032      	movs	r2, r6
 8002d14:	08c3      	lsrs	r3, r0, #3
 8002d16:	077f      	lsls	r7, r7, #29
 8002d18:	433b      	orrs	r3, r7
 8002d1a:	0f59      	lsrs	r1, r3, #29
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	08db      	lsrs	r3, r3, #3
 8002d20:	0749      	lsls	r1, r1, #29
 8002d22:	430b      	orrs	r3, r1
 8002d24:	e670      	b.n	8002a08 <__aeabi_dsub+0x384>
 8002d26:	08c0      	lsrs	r0, r0, #3
 8002d28:	077b      	lsls	r3, r7, #29
 8002d2a:	4303      	orrs	r3, r0
 8002d2c:	08fa      	lsrs	r2, r7, #3
 8002d2e:	e640      	b.n	80029b2 <__aeabi_dsub+0x32e>
 8002d30:	464c      	mov	r4, r9
 8002d32:	3920      	subs	r1, #32
 8002d34:	40cc      	lsrs	r4, r1
 8002d36:	4661      	mov	r1, ip
 8002d38:	2920      	cmp	r1, #32
 8002d3a:	d006      	beq.n	8002d4a <__aeabi_dsub+0x6c6>
 8002d3c:	4666      	mov	r6, ip
 8002d3e:	2140      	movs	r1, #64	; 0x40
 8002d40:	1b89      	subs	r1, r1, r6
 8002d42:	464e      	mov	r6, r9
 8002d44:	408e      	lsls	r6, r1
 8002d46:	4333      	orrs	r3, r6
 8002d48:	4698      	mov	r8, r3
 8002d4a:	4643      	mov	r3, r8
 8002d4c:	1e59      	subs	r1, r3, #1
 8002d4e:	418b      	sbcs	r3, r1
 8002d50:	431c      	orrs	r4, r3
 8002d52:	e5d8      	b.n	8002906 <__aeabi_dsub+0x282>
 8002d54:	181c      	adds	r4, r3, r0
 8002d56:	4284      	cmp	r4, r0
 8002d58:	4180      	sbcs	r0, r0
 8002d5a:	444f      	add	r7, r9
 8002d5c:	46ba      	mov	sl, r7
 8002d5e:	4240      	negs	r0, r0
 8002d60:	4482      	add	sl, r0
 8002d62:	e6d9      	b.n	8002b18 <__aeabi_dsub+0x494>
 8002d64:	4653      	mov	r3, sl
 8002d66:	4323      	orrs	r3, r4
 8002d68:	d100      	bne.n	8002d6c <__aeabi_dsub+0x6e8>
 8002d6a:	e6cb      	b.n	8002b04 <__aeabi_dsub+0x480>
 8002d6c:	e614      	b.n	8002998 <__aeabi_dsub+0x314>
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	000007ff 	.word	0x000007ff
 8002d74:	ff7fffff 	.word	0xff7fffff
 8002d78:	000007fe 	.word	0x000007fe
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	4a01      	ldr	r2, [pc, #4]	; (8002d84 <__aeabi_dsub+0x700>)
 8002d80:	001c      	movs	r4, r3
 8002d82:	e529      	b.n	80027d8 <__aeabi_dsub+0x154>
 8002d84:	000007ff 	.word	0x000007ff

08002d88 <__aeabi_i2d>:
 8002d88:	b570      	push	{r4, r5, r6, lr}
 8002d8a:	2800      	cmp	r0, #0
 8002d8c:	d016      	beq.n	8002dbc <__aeabi_i2d+0x34>
 8002d8e:	17c3      	asrs	r3, r0, #31
 8002d90:	18c5      	adds	r5, r0, r3
 8002d92:	405d      	eors	r5, r3
 8002d94:	0fc4      	lsrs	r4, r0, #31
 8002d96:	0028      	movs	r0, r5
 8002d98:	f000 f8f4 	bl	8002f84 <__clzsi2>
 8002d9c:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <__aeabi_i2d+0x5c>)
 8002d9e:	1a1b      	subs	r3, r3, r0
 8002da0:	280a      	cmp	r0, #10
 8002da2:	dc16      	bgt.n	8002dd2 <__aeabi_i2d+0x4a>
 8002da4:	0002      	movs	r2, r0
 8002da6:	002e      	movs	r6, r5
 8002da8:	3215      	adds	r2, #21
 8002daa:	4096      	lsls	r6, r2
 8002dac:	220b      	movs	r2, #11
 8002dae:	1a12      	subs	r2, r2, r0
 8002db0:	40d5      	lsrs	r5, r2
 8002db2:	055b      	lsls	r3, r3, #21
 8002db4:	032d      	lsls	r5, r5, #12
 8002db6:	0b2d      	lsrs	r5, r5, #12
 8002db8:	0d5b      	lsrs	r3, r3, #21
 8002dba:	e003      	b.n	8002dc4 <__aeabi_i2d+0x3c>
 8002dbc:	2400      	movs	r4, #0
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	2500      	movs	r5, #0
 8002dc2:	2600      	movs	r6, #0
 8002dc4:	051b      	lsls	r3, r3, #20
 8002dc6:	432b      	orrs	r3, r5
 8002dc8:	07e4      	lsls	r4, r4, #31
 8002dca:	4323      	orrs	r3, r4
 8002dcc:	0030      	movs	r0, r6
 8002dce:	0019      	movs	r1, r3
 8002dd0:	bd70      	pop	{r4, r5, r6, pc}
 8002dd2:	380b      	subs	r0, #11
 8002dd4:	4085      	lsls	r5, r0
 8002dd6:	055b      	lsls	r3, r3, #21
 8002dd8:	032d      	lsls	r5, r5, #12
 8002dda:	2600      	movs	r6, #0
 8002ddc:	0b2d      	lsrs	r5, r5, #12
 8002dde:	0d5b      	lsrs	r3, r3, #21
 8002de0:	e7f0      	b.n	8002dc4 <__aeabi_i2d+0x3c>
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	0000041e 	.word	0x0000041e

08002de8 <__aeabi_f2d>:
 8002de8:	b570      	push	{r4, r5, r6, lr}
 8002dea:	0242      	lsls	r2, r0, #9
 8002dec:	0043      	lsls	r3, r0, #1
 8002dee:	0fc4      	lsrs	r4, r0, #31
 8002df0:	20fe      	movs	r0, #254	; 0xfe
 8002df2:	0e1b      	lsrs	r3, r3, #24
 8002df4:	1c59      	adds	r1, r3, #1
 8002df6:	0a55      	lsrs	r5, r2, #9
 8002df8:	4208      	tst	r0, r1
 8002dfa:	d00c      	beq.n	8002e16 <__aeabi_f2d+0x2e>
 8002dfc:	21e0      	movs	r1, #224	; 0xe0
 8002dfe:	0089      	lsls	r1, r1, #2
 8002e00:	468c      	mov	ip, r1
 8002e02:	076d      	lsls	r5, r5, #29
 8002e04:	0b12      	lsrs	r2, r2, #12
 8002e06:	4463      	add	r3, ip
 8002e08:	051b      	lsls	r3, r3, #20
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	07e4      	lsls	r4, r4, #31
 8002e0e:	4323      	orrs	r3, r4
 8002e10:	0028      	movs	r0, r5
 8002e12:	0019      	movs	r1, r3
 8002e14:	bd70      	pop	{r4, r5, r6, pc}
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d114      	bne.n	8002e44 <__aeabi_f2d+0x5c>
 8002e1a:	2d00      	cmp	r5, #0
 8002e1c:	d01b      	beq.n	8002e56 <__aeabi_f2d+0x6e>
 8002e1e:	0028      	movs	r0, r5
 8002e20:	f000 f8b0 	bl	8002f84 <__clzsi2>
 8002e24:	280a      	cmp	r0, #10
 8002e26:	dc1c      	bgt.n	8002e62 <__aeabi_f2d+0x7a>
 8002e28:	230b      	movs	r3, #11
 8002e2a:	002a      	movs	r2, r5
 8002e2c:	1a1b      	subs	r3, r3, r0
 8002e2e:	40da      	lsrs	r2, r3
 8002e30:	0003      	movs	r3, r0
 8002e32:	3315      	adds	r3, #21
 8002e34:	409d      	lsls	r5, r3
 8002e36:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <__aeabi_f2d+0x88>)
 8002e38:	0312      	lsls	r2, r2, #12
 8002e3a:	1a1b      	subs	r3, r3, r0
 8002e3c:	055b      	lsls	r3, r3, #21
 8002e3e:	0b12      	lsrs	r2, r2, #12
 8002e40:	0d5b      	lsrs	r3, r3, #21
 8002e42:	e7e1      	b.n	8002e08 <__aeabi_f2d+0x20>
 8002e44:	2d00      	cmp	r5, #0
 8002e46:	d009      	beq.n	8002e5c <__aeabi_f2d+0x74>
 8002e48:	0b13      	lsrs	r3, r2, #12
 8002e4a:	2280      	movs	r2, #128	; 0x80
 8002e4c:	0312      	lsls	r2, r2, #12
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	076d      	lsls	r5, r5, #29
 8002e52:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <__aeabi_f2d+0x8c>)
 8002e54:	e7d8      	b.n	8002e08 <__aeabi_f2d+0x20>
 8002e56:	2300      	movs	r3, #0
 8002e58:	2200      	movs	r2, #0
 8002e5a:	e7d5      	b.n	8002e08 <__aeabi_f2d+0x20>
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <__aeabi_f2d+0x8c>)
 8002e60:	e7d2      	b.n	8002e08 <__aeabi_f2d+0x20>
 8002e62:	0003      	movs	r3, r0
 8002e64:	002a      	movs	r2, r5
 8002e66:	3b0b      	subs	r3, #11
 8002e68:	409a      	lsls	r2, r3
 8002e6a:	2500      	movs	r5, #0
 8002e6c:	e7e3      	b.n	8002e36 <__aeabi_f2d+0x4e>
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	00000389 	.word	0x00000389
 8002e74:	000007ff 	.word	0x000007ff

08002e78 <__aeabi_d2f>:
 8002e78:	0002      	movs	r2, r0
 8002e7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e7c:	004b      	lsls	r3, r1, #1
 8002e7e:	030d      	lsls	r5, r1, #12
 8002e80:	0f40      	lsrs	r0, r0, #29
 8002e82:	0d5b      	lsrs	r3, r3, #21
 8002e84:	0fcc      	lsrs	r4, r1, #31
 8002e86:	0a6d      	lsrs	r5, r5, #9
 8002e88:	493a      	ldr	r1, [pc, #232]	; (8002f74 <__aeabi_d2f+0xfc>)
 8002e8a:	4305      	orrs	r5, r0
 8002e8c:	1c58      	adds	r0, r3, #1
 8002e8e:	00d7      	lsls	r7, r2, #3
 8002e90:	4208      	tst	r0, r1
 8002e92:	d00a      	beq.n	8002eaa <__aeabi_d2f+0x32>
 8002e94:	4938      	ldr	r1, [pc, #224]	; (8002f78 <__aeabi_d2f+0x100>)
 8002e96:	1859      	adds	r1, r3, r1
 8002e98:	29fe      	cmp	r1, #254	; 0xfe
 8002e9a:	dd16      	ble.n	8002eca <__aeabi_d2f+0x52>
 8002e9c:	20ff      	movs	r0, #255	; 0xff
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	05c0      	lsls	r0, r0, #23
 8002ea2:	4310      	orrs	r0, r2
 8002ea4:	07e4      	lsls	r4, r4, #31
 8002ea6:	4320      	orrs	r0, r4
 8002ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <__aeabi_d2f+0x44>
 8002eae:	433d      	orrs	r5, r7
 8002eb0:	d026      	beq.n	8002f00 <__aeabi_d2f+0x88>
 8002eb2:	2205      	movs	r2, #5
 8002eb4:	0192      	lsls	r2, r2, #6
 8002eb6:	0a52      	lsrs	r2, r2, #9
 8002eb8:	b2d8      	uxtb	r0, r3
 8002eba:	e7f1      	b.n	8002ea0 <__aeabi_d2f+0x28>
 8002ebc:	432f      	orrs	r7, r5
 8002ebe:	d0ed      	beq.n	8002e9c <__aeabi_d2f+0x24>
 8002ec0:	2280      	movs	r2, #128	; 0x80
 8002ec2:	03d2      	lsls	r2, r2, #15
 8002ec4:	20ff      	movs	r0, #255	; 0xff
 8002ec6:	432a      	orrs	r2, r5
 8002ec8:	e7ea      	b.n	8002ea0 <__aeabi_d2f+0x28>
 8002eca:	2900      	cmp	r1, #0
 8002ecc:	dd1b      	ble.n	8002f06 <__aeabi_d2f+0x8e>
 8002ece:	0192      	lsls	r2, r2, #6
 8002ed0:	1e50      	subs	r0, r2, #1
 8002ed2:	4182      	sbcs	r2, r0
 8002ed4:	00ed      	lsls	r5, r5, #3
 8002ed6:	0f7f      	lsrs	r7, r7, #29
 8002ed8:	432a      	orrs	r2, r5
 8002eda:	433a      	orrs	r2, r7
 8002edc:	0753      	lsls	r3, r2, #29
 8002ede:	d047      	beq.n	8002f70 <__aeabi_d2f+0xf8>
 8002ee0:	230f      	movs	r3, #15
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d000      	beq.n	8002eea <__aeabi_d2f+0x72>
 8002ee8:	3204      	adds	r2, #4
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	04db      	lsls	r3, r3, #19
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d03e      	beq.n	8002f70 <__aeabi_d2f+0xf8>
 8002ef2:	1c48      	adds	r0, r1, #1
 8002ef4:	29fe      	cmp	r1, #254	; 0xfe
 8002ef6:	d0d1      	beq.n	8002e9c <__aeabi_d2f+0x24>
 8002ef8:	0192      	lsls	r2, r2, #6
 8002efa:	0a52      	lsrs	r2, r2, #9
 8002efc:	b2c0      	uxtb	r0, r0
 8002efe:	e7cf      	b.n	8002ea0 <__aeabi_d2f+0x28>
 8002f00:	2000      	movs	r0, #0
 8002f02:	2200      	movs	r2, #0
 8002f04:	e7cc      	b.n	8002ea0 <__aeabi_d2f+0x28>
 8002f06:	000a      	movs	r2, r1
 8002f08:	3217      	adds	r2, #23
 8002f0a:	db2f      	blt.n	8002f6c <__aeabi_d2f+0xf4>
 8002f0c:	2680      	movs	r6, #128	; 0x80
 8002f0e:	0436      	lsls	r6, r6, #16
 8002f10:	432e      	orrs	r6, r5
 8002f12:	251e      	movs	r5, #30
 8002f14:	1a6d      	subs	r5, r5, r1
 8002f16:	2d1f      	cmp	r5, #31
 8002f18:	dd11      	ble.n	8002f3e <__aeabi_d2f+0xc6>
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	4252      	negs	r2, r2
 8002f1e:	1a52      	subs	r2, r2, r1
 8002f20:	0031      	movs	r1, r6
 8002f22:	40d1      	lsrs	r1, r2
 8002f24:	2d20      	cmp	r5, #32
 8002f26:	d004      	beq.n	8002f32 <__aeabi_d2f+0xba>
 8002f28:	4a14      	ldr	r2, [pc, #80]	; (8002f7c <__aeabi_d2f+0x104>)
 8002f2a:	4694      	mov	ip, r2
 8002f2c:	4463      	add	r3, ip
 8002f2e:	409e      	lsls	r6, r3
 8002f30:	4337      	orrs	r7, r6
 8002f32:	003a      	movs	r2, r7
 8002f34:	1e53      	subs	r3, r2, #1
 8002f36:	419a      	sbcs	r2, r3
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	e7ce      	b.n	8002edc <__aeabi_d2f+0x64>
 8002f3e:	4a10      	ldr	r2, [pc, #64]	; (8002f80 <__aeabi_d2f+0x108>)
 8002f40:	0038      	movs	r0, r7
 8002f42:	4694      	mov	ip, r2
 8002f44:	4463      	add	r3, ip
 8002f46:	4098      	lsls	r0, r3
 8002f48:	003a      	movs	r2, r7
 8002f4a:	1e41      	subs	r1, r0, #1
 8002f4c:	4188      	sbcs	r0, r1
 8002f4e:	409e      	lsls	r6, r3
 8002f50:	40ea      	lsrs	r2, r5
 8002f52:	4330      	orrs	r0, r6
 8002f54:	4302      	orrs	r2, r0
 8002f56:	2100      	movs	r1, #0
 8002f58:	0753      	lsls	r3, r2, #29
 8002f5a:	d1c1      	bne.n	8002ee0 <__aeabi_d2f+0x68>
 8002f5c:	2180      	movs	r1, #128	; 0x80
 8002f5e:	0013      	movs	r3, r2
 8002f60:	04c9      	lsls	r1, r1, #19
 8002f62:	2001      	movs	r0, #1
 8002f64:	400b      	ands	r3, r1
 8002f66:	420a      	tst	r2, r1
 8002f68:	d1c6      	bne.n	8002ef8 <__aeabi_d2f+0x80>
 8002f6a:	e7a3      	b.n	8002eb4 <__aeabi_d2f+0x3c>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	e7a0      	b.n	8002eb2 <__aeabi_d2f+0x3a>
 8002f70:	000b      	movs	r3, r1
 8002f72:	e79f      	b.n	8002eb4 <__aeabi_d2f+0x3c>
 8002f74:	000007fe 	.word	0x000007fe
 8002f78:	fffffc80 	.word	0xfffffc80
 8002f7c:	fffffca2 	.word	0xfffffca2
 8002f80:	fffffc82 	.word	0xfffffc82

08002f84 <__clzsi2>:
 8002f84:	211c      	movs	r1, #28
 8002f86:	2301      	movs	r3, #1
 8002f88:	041b      	lsls	r3, r3, #16
 8002f8a:	4298      	cmp	r0, r3
 8002f8c:	d301      	bcc.n	8002f92 <__clzsi2+0xe>
 8002f8e:	0c00      	lsrs	r0, r0, #16
 8002f90:	3910      	subs	r1, #16
 8002f92:	0a1b      	lsrs	r3, r3, #8
 8002f94:	4298      	cmp	r0, r3
 8002f96:	d301      	bcc.n	8002f9c <__clzsi2+0x18>
 8002f98:	0a00      	lsrs	r0, r0, #8
 8002f9a:	3908      	subs	r1, #8
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	4298      	cmp	r0, r3
 8002fa0:	d301      	bcc.n	8002fa6 <__clzsi2+0x22>
 8002fa2:	0900      	lsrs	r0, r0, #4
 8002fa4:	3904      	subs	r1, #4
 8002fa6:	a202      	add	r2, pc, #8	; (adr r2, 8002fb0 <__clzsi2+0x2c>)
 8002fa8:	5c10      	ldrb	r0, [r2, r0]
 8002faa:	1840      	adds	r0, r0, r1
 8002fac:	4770      	bx	lr
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	02020304 	.word	0x02020304
 8002fb4:	01010101 	.word	0x01010101
	...

08002fc0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002fc6:	1d3b      	adds	r3, r7, #4
 8002fc8:	0018      	movs	r0, r3
 8002fca:	230c      	movs	r3, #12
 8002fcc:	001a      	movs	r2, r3
 8002fce:	2100      	movs	r1, #0
 8002fd0:	f008 fcc8 	bl	800b964 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002fd4:	4b2d      	ldr	r3, [pc, #180]	; (800308c <MX_ADC1_Init+0xcc>)
 8002fd6:	4a2e      	ldr	r2, [pc, #184]	; (8003090 <MX_ADC1_Init+0xd0>)
 8002fd8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002fda:	4b2c      	ldr	r3, [pc, #176]	; (800308c <MX_ADC1_Init+0xcc>)
 8002fdc:	2280      	movs	r2, #128	; 0x80
 8002fde:	05d2      	lsls	r2, r2, #23
 8002fe0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002fe2:	4b2a      	ldr	r3, [pc, #168]	; (800308c <MX_ADC1_Init+0xcc>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fe8:	4b28      	ldr	r3, [pc, #160]	; (800308c <MX_ADC1_Init+0xcc>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002fee:	4b27      	ldr	r3, [pc, #156]	; (800308c <MX_ADC1_Init+0xcc>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ff4:	4b25      	ldr	r3, [pc, #148]	; (800308c <MX_ADC1_Init+0xcc>)
 8002ff6:	2204      	movs	r2, #4
 8002ff8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002ffa:	4b24      	ldr	r3, [pc, #144]	; (800308c <MX_ADC1_Init+0xcc>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003000:	4b22      	ldr	r3, [pc, #136]	; (800308c <MX_ADC1_Init+0xcc>)
 8003002:	2200      	movs	r2, #0
 8003004:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003006:	4b21      	ldr	r3, [pc, #132]	; (800308c <MX_ADC1_Init+0xcc>)
 8003008:	2200      	movs	r2, #0
 800300a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800300c:	4b1f      	ldr	r3, [pc, #124]	; (800308c <MX_ADC1_Init+0xcc>)
 800300e:	2201      	movs	r2, #1
 8003010:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003012:	4b1e      	ldr	r3, [pc, #120]	; (800308c <MX_ADC1_Init+0xcc>)
 8003014:	2220      	movs	r2, #32
 8003016:	2100      	movs	r1, #0
 8003018:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800301a:	4b1c      	ldr	r3, [pc, #112]	; (800308c <MX_ADC1_Init+0xcc>)
 800301c:	2200      	movs	r2, #0
 800301e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003020:	4b1a      	ldr	r3, [pc, #104]	; (800308c <MX_ADC1_Init+0xcc>)
 8003022:	2200      	movs	r2, #0
 8003024:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003026:	4b19      	ldr	r3, [pc, #100]	; (800308c <MX_ADC1_Init+0xcc>)
 8003028:	222c      	movs	r2, #44	; 0x2c
 800302a:	2100      	movs	r1, #0
 800302c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800302e:	4b17      	ldr	r3, [pc, #92]	; (800308c <MX_ADC1_Init+0xcc>)
 8003030:	2200      	movs	r2, #0
 8003032:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003034:	4b15      	ldr	r3, [pc, #84]	; (800308c <MX_ADC1_Init+0xcc>)
 8003036:	2200      	movs	r2, #0
 8003038:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800303a:	4b14      	ldr	r3, [pc, #80]	; (800308c <MX_ADC1_Init+0xcc>)
 800303c:	2200      	movs	r2, #0
 800303e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003040:	4b12      	ldr	r3, [pc, #72]	; (800308c <MX_ADC1_Init+0xcc>)
 8003042:	223c      	movs	r2, #60	; 0x3c
 8003044:	2100      	movs	r1, #0
 8003046:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003048:	4b10      	ldr	r3, [pc, #64]	; (800308c <MX_ADC1_Init+0xcc>)
 800304a:	2200      	movs	r2, #0
 800304c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800304e:	4b0f      	ldr	r3, [pc, #60]	; (800308c <MX_ADC1_Init+0xcc>)
 8003050:	0018      	movs	r0, r3
 8003052:	f001 fa55 	bl	8004500 <HAL_ADC_Init>
 8003056:	1e03      	subs	r3, r0, #0
 8003058:	d001      	beq.n	800305e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800305a:	f000 f985 	bl	8003368 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800305e:	1d3b      	adds	r3, r7, #4
 8003060:	2201      	movs	r2, #1
 8003062:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003064:	1d3b      	adds	r3, r7, #4
 8003066:	2200      	movs	r2, #0
 8003068:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800306a:	1d3b      	adds	r3, r7, #4
 800306c:	2200      	movs	r2, #0
 800306e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003070:	1d3a      	adds	r2, r7, #4
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <MX_ADC1_Init+0xcc>)
 8003074:	0011      	movs	r1, r2
 8003076:	0018      	movs	r0, r3
 8003078:	f001 fbea 	bl	8004850 <HAL_ADC_ConfigChannel>
 800307c:	1e03      	subs	r3, r0, #0
 800307e:	d001      	beq.n	8003084 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8003080:	f000 f972 	bl	8003368 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003084:	46c0      	nop			; (mov r8, r8)
 8003086:	46bd      	mov	sp, r7
 8003088:	b004      	add	sp, #16
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20000088 	.word	0x20000088
 8003090:	40012400 	.word	0x40012400

08003094 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003094:	b590      	push	{r4, r7, lr}
 8003096:	b08b      	sub	sp, #44	; 0x2c
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309c:	2414      	movs	r4, #20
 800309e:	193b      	adds	r3, r7, r4
 80030a0:	0018      	movs	r0, r3
 80030a2:	2314      	movs	r3, #20
 80030a4:	001a      	movs	r2, r3
 80030a6:	2100      	movs	r1, #0
 80030a8:	f008 fc5c 	bl	800b964 <memset>
  if(adcHandle->Instance==ADC1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a18      	ldr	r2, [pc, #96]	; (8003114 <HAL_ADC_MspInit+0x80>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d129      	bne.n	800310a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80030b6:	4b18      	ldr	r3, [pc, #96]	; (8003118 <HAL_ADC_MspInit+0x84>)
 80030b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ba:	4b17      	ldr	r3, [pc, #92]	; (8003118 <HAL_ADC_MspInit+0x84>)
 80030bc:	2180      	movs	r1, #128	; 0x80
 80030be:	0349      	lsls	r1, r1, #13
 80030c0:	430a      	orrs	r2, r1
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40
 80030c4:	4b14      	ldr	r3, [pc, #80]	; (8003118 <HAL_ADC_MspInit+0x84>)
 80030c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030c8:	2380      	movs	r3, #128	; 0x80
 80030ca:	035b      	lsls	r3, r3, #13
 80030cc:	4013      	ands	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d2:	4b11      	ldr	r3, [pc, #68]	; (8003118 <HAL_ADC_MspInit+0x84>)
 80030d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030d6:	4b10      	ldr	r3, [pc, #64]	; (8003118 <HAL_ADC_MspInit+0x84>)
 80030d8:	2101      	movs	r1, #1
 80030da:	430a      	orrs	r2, r1
 80030dc:	635a      	str	r2, [r3, #52]	; 0x34
 80030de:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <HAL_ADC_MspInit+0x84>)
 80030e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e2:	2201      	movs	r2, #1
 80030e4:	4013      	ands	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_IN0_BAT_LVL_Pin;
 80030ea:	193b      	adds	r3, r7, r4
 80030ec:	2201      	movs	r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030f0:	193b      	adds	r3, r7, r4
 80030f2:	2203      	movs	r2, #3
 80030f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f6:	193b      	adds	r3, r7, r4
 80030f8:	2200      	movs	r2, #0
 80030fa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC1_IN0_BAT_LVL_GPIO_Port, &GPIO_InitStruct);
 80030fc:	193a      	adds	r2, r7, r4
 80030fe:	23a0      	movs	r3, #160	; 0xa0
 8003100:	05db      	lsls	r3, r3, #23
 8003102:	0011      	movs	r1, r2
 8003104:	0018      	movs	r0, r3
 8003106:	f001 feef 	bl	8004ee8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	46bd      	mov	sp, r7
 800310e:	b00b      	add	sp, #44	; 0x2c
 8003110:	bd90      	pop	{r4, r7, pc}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	40012400 	.word	0x40012400
 8003118:	40021000 	.word	0x40021000

0800311c <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0

}
 8003120:	46c0      	nop			; (mov r8, r8)
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	af00      	add	r7, sp, #0
return 0;
 800312a:	2300      	movs	r3, #0
}
 800312c:	0018      	movs	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003134:	b590      	push	{r4, r7, lr}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800313a:	1d3b      	adds	r3, r7, #4
 800313c:	4a08      	ldr	r2, [pc, #32]	; (8003160 <MX_FREERTOS_Init+0x2c>)
 800313e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003140:	c313      	stmia	r3!, {r0, r1, r4}
 8003142:	ca03      	ldmia	r2!, {r0, r1}
 8003144:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003146:	1d3b      	adds	r3, r7, #4
 8003148:	2100      	movs	r1, #0
 800314a:	0018      	movs	r0, r3
 800314c:	f005 f943 	bl	80083d6 <osThreadCreate>
 8003150:	0002      	movs	r2, r0
 8003152:	4b04      	ldr	r3, [pc, #16]	; (8003164 <MX_FREERTOS_Init+0x30>)
 8003154:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	46bd      	mov	sp, r7
 800315a:	b007      	add	sp, #28
 800315c:	bd90      	pop	{r4, r7, pc}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	0800c95c 	.word	0x0800c95c
 8003164:	200000ec 	.word	0x200000ec

08003168 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003170:	2001      	movs	r0, #1
 8003172:	f005 f958 	bl	8008426 <osDelay>
 8003176:	e7fb      	b.n	8003170 <StartDefaultTask+0x8>

08003178 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003178:	b590      	push	{r4, r7, lr}
 800317a:	b08b      	sub	sp, #44	; 0x2c
 800317c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800317e:	2414      	movs	r4, #20
 8003180:	193b      	adds	r3, r7, r4
 8003182:	0018      	movs	r0, r3
 8003184:	2314      	movs	r3, #20
 8003186:	001a      	movs	r2, r3
 8003188:	2100      	movs	r1, #0
 800318a:	f008 fbeb 	bl	800b964 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800318e:	4b34      	ldr	r3, [pc, #208]	; (8003260 <MX_GPIO_Init+0xe8>)
 8003190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003192:	4b33      	ldr	r3, [pc, #204]	; (8003260 <MX_GPIO_Init+0xe8>)
 8003194:	2120      	movs	r1, #32
 8003196:	430a      	orrs	r2, r1
 8003198:	635a      	str	r2, [r3, #52]	; 0x34
 800319a:	4b31      	ldr	r3, [pc, #196]	; (8003260 <MX_GPIO_Init+0xe8>)
 800319c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319e:	2220      	movs	r2, #32
 80031a0:	4013      	ands	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031a6:	4b2e      	ldr	r3, [pc, #184]	; (8003260 <MX_GPIO_Init+0xe8>)
 80031a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031aa:	4b2d      	ldr	r3, [pc, #180]	; (8003260 <MX_GPIO_Init+0xe8>)
 80031ac:	2104      	movs	r1, #4
 80031ae:	430a      	orrs	r2, r1
 80031b0:	635a      	str	r2, [r3, #52]	; 0x34
 80031b2:	4b2b      	ldr	r3, [pc, #172]	; (8003260 <MX_GPIO_Init+0xe8>)
 80031b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b6:	2204      	movs	r2, #4
 80031b8:	4013      	ands	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031be:	4b28      	ldr	r3, [pc, #160]	; (8003260 <MX_GPIO_Init+0xe8>)
 80031c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c2:	4b27      	ldr	r3, [pc, #156]	; (8003260 <MX_GPIO_Init+0xe8>)
 80031c4:	2101      	movs	r1, #1
 80031c6:	430a      	orrs	r2, r1
 80031c8:	635a      	str	r2, [r3, #52]	; 0x34
 80031ca:	4b25      	ldr	r3, [pc, #148]	; (8003260 <MX_GPIO_Init+0xe8>)
 80031cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ce:	2201      	movs	r2, #1
 80031d0:	4013      	ands	r3, r2
 80031d2:	60bb      	str	r3, [r7, #8]
 80031d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d6:	4b22      	ldr	r3, [pc, #136]	; (8003260 <MX_GPIO_Init+0xe8>)
 80031d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031da:	4b21      	ldr	r3, [pc, #132]	; (8003260 <MX_GPIO_Init+0xe8>)
 80031dc:	2102      	movs	r1, #2
 80031de:	430a      	orrs	r2, r1
 80031e0:	635a      	str	r2, [r3, #52]	; 0x34
 80031e2:	4b1f      	ldr	r3, [pc, #124]	; (8003260 <MX_GPIO_Init+0xe8>)
 80031e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e6:	2202      	movs	r2, #2
 80031e8:	4013      	ands	r3, r2
 80031ea:	607b      	str	r3, [r7, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ee:	4b1c      	ldr	r3, [pc, #112]	; (8003260 <MX_GPIO_Init+0xe8>)
 80031f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031f2:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <MX_GPIO_Init+0xe8>)
 80031f4:	2108      	movs	r1, #8
 80031f6:	430a      	orrs	r2, r1
 80031f8:	635a      	str	r2, [r3, #52]	; 0x34
 80031fa:	4b19      	ldr	r3, [pc, #100]	; (8003260 <MX_GPIO_Init+0xe8>)
 80031fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fe:	2208      	movs	r2, #8
 8003200:	4013      	ands	r3, r2
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEV_EN_Pin|M_EN_Pin|LED_R_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8003206:	4b17      	ldr	r3, [pc, #92]	; (8003264 <MX_GPIO_Init+0xec>)
 8003208:	2200      	movs	r2, #0
 800320a:	211e      	movs	r1, #30
 800320c:	0018      	movs	r0, r3
 800320e:	f001 ffcf 	bl	80051b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = V_BORDURE_R_Pin|BUMPER_F_Pin|BUMPER_B_Pin|BUMPER_R_Pin
 8003212:	193b      	adds	r3, r7, r4
 8003214:	4a14      	ldr	r2, [pc, #80]	; (8003268 <MX_GPIO_Init+0xf0>)
 8003216:	601a      	str	r2, [r3, #0]
                          |BUMPER_L_Pin|V_BORDURE_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003218:	193b      	adds	r3, r7, r4
 800321a:	2200      	movs	r2, #0
 800321c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800321e:	193b      	adds	r3, r7, r4
 8003220:	2202      	movs	r2, #2
 8003222:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003224:	193b      	adds	r3, r7, r4
 8003226:	4a0f      	ldr	r2, [pc, #60]	; (8003264 <MX_GPIO_Init+0xec>)
 8003228:	0019      	movs	r1, r3
 800322a:	0010      	movs	r0, r2
 800322c:	f001 fe5c 	bl	8004ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DEV_EN_Pin|M_EN_Pin|LED_R_Pin|LED_B_Pin;
 8003230:	0021      	movs	r1, r4
 8003232:	187b      	adds	r3, r7, r1
 8003234:	221e      	movs	r2, #30
 8003236:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003238:	187b      	adds	r3, r7, r1
 800323a:	2201      	movs	r2, #1
 800323c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323e:	187b      	adds	r3, r7, r1
 8003240:	2200      	movs	r2, #0
 8003242:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003244:	187b      	adds	r3, r7, r1
 8003246:	2200      	movs	r2, #0
 8003248:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800324a:	187b      	adds	r3, r7, r1
 800324c:	4a05      	ldr	r2, [pc, #20]	; (8003264 <MX_GPIO_Init+0xec>)
 800324e:	0019      	movs	r1, r3
 8003250:	0010      	movs	r0, r2
 8003252:	f001 fe49 	bl	8004ee8 <HAL_GPIO_Init>

}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	46bd      	mov	sp, r7
 800325a:	b00b      	add	sp, #44	; 0x2c
 800325c:	bd90      	pop	{r4, r7, pc}
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	40021000 	.word	0x40021000
 8003264:	50000400 	.word	0x50000400
 8003268:	000003e1 	.word	0x000003e1

0800326c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003270:	f001 f80c 	bl	800428c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003274:	f000 f81d 	bl	80032b2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003278:	f7ff ff7e 	bl	8003178 <MX_GPIO_Init>
  MX_ADC1_Init();
 800327c:	f7ff fea0 	bl	8002fc0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8003280:	f000 f9da 	bl	8003638 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003284:	f000 fa42 	bl	800370c <MX_TIM3_Init>
  MX_TIM14_Init();
 8003288:	f000 faa4 	bl	80037d4 <MX_TIM14_Init>
  MX_TIM15_Init();
 800328c:	f000 faf2 	bl	8003874 <MX_TIM15_Init>
  MX_TIM16_Init();
 8003290:	f000 fbb4 	bl	80039fc <MX_TIM16_Init>
  MX_TIM17_Init();
 8003294:	f000 fc3a 	bl	8003b0c <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8003298:	f000 fe88 	bl	8003fac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800329c:	f000 fed4 	bl	8004048 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	createLidarTask();
 80032a0:	f008 fa24 	bl	800b6ec <createLidarTask>
	vTaskStartScheduler();
 80032a4:	f006 f842 	bl	800932c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80032a8:	f7ff ff44 	bl	8003134 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80032ac:	f005 f88b 	bl	80083c6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80032b0:	e7fe      	b.n	80032b0 <main+0x44>

080032b2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032b2:	b590      	push	{r4, r7, lr}
 80032b4:	b093      	sub	sp, #76	; 0x4c
 80032b6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032b8:	2414      	movs	r4, #20
 80032ba:	193b      	adds	r3, r7, r4
 80032bc:	0018      	movs	r0, r3
 80032be:	2334      	movs	r3, #52	; 0x34
 80032c0:	001a      	movs	r2, r3
 80032c2:	2100      	movs	r1, #0
 80032c4:	f008 fb4e 	bl	800b964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032c8:	1d3b      	adds	r3, r7, #4
 80032ca:	0018      	movs	r0, r3
 80032cc:	2310      	movs	r3, #16
 80032ce:	001a      	movs	r2, r3
 80032d0:	2100      	movs	r1, #0
 80032d2:	f008 fb47 	bl	800b964 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	0018      	movs	r0, r3
 80032dc:	f001 ff86 	bl	80051ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80032e0:	193b      	adds	r3, r7, r4
 80032e2:	2202      	movs	r2, #2
 80032e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032e6:	193b      	adds	r3, r7, r4
 80032e8:	2280      	movs	r2, #128	; 0x80
 80032ea:	0052      	lsls	r2, r2, #1
 80032ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80032ee:	193b      	adds	r3, r7, r4
 80032f0:	2200      	movs	r2, #0
 80032f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80032f4:	193b      	adds	r3, r7, r4
 80032f6:	2240      	movs	r2, #64	; 0x40
 80032f8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80032fa:	193b      	adds	r3, r7, r4
 80032fc:	2200      	movs	r2, #0
 80032fe:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003300:	193b      	adds	r3, r7, r4
 8003302:	0018      	movs	r0, r3
 8003304:	f001 ffbe 	bl	8005284 <HAL_RCC_OscConfig>
 8003308:	1e03      	subs	r3, r0, #0
 800330a:	d001      	beq.n	8003310 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800330c:	f000 f82c 	bl	8003368 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003310:	1d3b      	adds	r3, r7, #4
 8003312:	2207      	movs	r2, #7
 8003314:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003316:	1d3b      	adds	r3, r7, #4
 8003318:	2200      	movs	r2, #0
 800331a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800331c:	1d3b      	adds	r3, r7, #4
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003322:	1d3b      	adds	r3, r7, #4
 8003324:	2200      	movs	r2, #0
 8003326:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003328:	1d3b      	adds	r3, r7, #4
 800332a:	2100      	movs	r1, #0
 800332c:	0018      	movs	r0, r3
 800332e:	f002 fab9 	bl	80058a4 <HAL_RCC_ClockConfig>
 8003332:	1e03      	subs	r3, r0, #0
 8003334:	d001      	beq.n	800333a <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003336:	f000 f817 	bl	8003368 <Error_Handler>
  }
}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	46bd      	mov	sp, r7
 800333e:	b013      	add	sp, #76	; 0x4c
 8003340:	bd90      	pop	{r4, r7, pc}
	...

08003344 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a04      	ldr	r2, [pc, #16]	; (8003364 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d101      	bne.n	800335a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003356:	f000 ffb9 	bl	80042cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	46bd      	mov	sp, r7
 800335e:	b002      	add	sp, #8
 8003360:	bd80      	pop	{r7, pc}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	40001000 	.word	0x40001000

08003368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800336c:	b672      	cpsid	i
}
 800336e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003370:	e7fe      	b.n	8003370 <Error_Handler+0x8>
	...

08003374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337a:	4b12      	ldr	r3, [pc, #72]	; (80033c4 <HAL_MspInit+0x50>)
 800337c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800337e:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <HAL_MspInit+0x50>)
 8003380:	2101      	movs	r1, #1
 8003382:	430a      	orrs	r2, r1
 8003384:	641a      	str	r2, [r3, #64]	; 0x40
 8003386:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <HAL_MspInit+0x50>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	2201      	movs	r2, #1
 800338c:	4013      	ands	r3, r2
 800338e:	607b      	str	r3, [r7, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003392:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <HAL_MspInit+0x50>)
 8003394:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003396:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <HAL_MspInit+0x50>)
 8003398:	2180      	movs	r1, #128	; 0x80
 800339a:	0549      	lsls	r1, r1, #21
 800339c:	430a      	orrs	r2, r1
 800339e:	63da      	str	r2, [r3, #60]	; 0x3c
 80033a0:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <HAL_MspInit+0x50>)
 80033a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033a4:	2380      	movs	r3, #128	; 0x80
 80033a6:	055b      	lsls	r3, r3, #21
 80033a8:	4013      	ands	r3, r2
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80033ae:	2302      	movs	r3, #2
 80033b0:	425b      	negs	r3, r3
 80033b2:	2200      	movs	r2, #0
 80033b4:	2103      	movs	r1, #3
 80033b6:	0018      	movs	r0, r3
 80033b8:	f001 fcaa 	bl	8004d10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033bc:	46c0      	nop			; (mov r8, r8)
 80033be:	46bd      	mov	sp, r7
 80033c0:	b002      	add	sp, #8
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40021000 	.word	0x40021000

080033c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033c8:	b5b0      	push	{r4, r5, r7, lr}
 80033ca:	b08c      	sub	sp, #48	; 0x30
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80033d0:	232b      	movs	r3, #43	; 0x2b
 80033d2:	18fb      	adds	r3, r7, r3
 80033d4:	2200      	movs	r2, #0
 80033d6:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80033d8:	4b37      	ldr	r3, [pc, #220]	; (80034b8 <HAL_InitTick+0xf0>)
 80033da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033dc:	4b36      	ldr	r3, [pc, #216]	; (80034b8 <HAL_InitTick+0xf0>)
 80033de:	2110      	movs	r1, #16
 80033e0:	430a      	orrs	r2, r1
 80033e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80033e4:	4b34      	ldr	r3, [pc, #208]	; (80034b8 <HAL_InitTick+0xf0>)
 80033e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e8:	2210      	movs	r2, #16
 80033ea:	4013      	ands	r3, r2
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80033f0:	230c      	movs	r3, #12
 80033f2:	18fa      	adds	r2, r7, r3
 80033f4:	2410      	movs	r4, #16
 80033f6:	193b      	adds	r3, r7, r4
 80033f8:	0011      	movs	r1, r2
 80033fa:	0018      	movs	r0, r3
 80033fc:	f002 fbfc 	bl	8005bf8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003400:	193b      	adds	r3, r7, r4
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	2b00      	cmp	r3, #0
 800340a:	d104      	bne.n	8003416 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800340c:	f002 fbde 	bl	8005bcc <HAL_RCC_GetPCLK1Freq>
 8003410:	0003      	movs	r3, r0
 8003412:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003414:	e004      	b.n	8003420 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003416:	f002 fbd9 	bl	8005bcc <HAL_RCC_GetPCLK1Freq>
 800341a:	0003      	movs	r3, r0
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003422:	4926      	ldr	r1, [pc, #152]	; (80034bc <HAL_InitTick+0xf4>)
 8003424:	0018      	movs	r0, r3
 8003426:	f7fc fe79 	bl	800011c <__udivsi3>
 800342a:	0003      	movs	r3, r0
 800342c:	3b01      	subs	r3, #1
 800342e:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003430:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <HAL_InitTick+0xf8>)
 8003432:	4a24      	ldr	r2, [pc, #144]	; (80034c4 <HAL_InitTick+0xfc>)
 8003434:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003436:	4b22      	ldr	r3, [pc, #136]	; (80034c0 <HAL_InitTick+0xf8>)
 8003438:	4a23      	ldr	r2, [pc, #140]	; (80034c8 <HAL_InitTick+0x100>)
 800343a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800343c:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <HAL_InitTick+0xf8>)
 800343e:	6a3a      	ldr	r2, [r7, #32]
 8003440:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8003442:	4b1f      	ldr	r3, [pc, #124]	; (80034c0 <HAL_InitTick+0xf8>)
 8003444:	2200      	movs	r2, #0
 8003446:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003448:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <HAL_InitTick+0xf8>)
 800344a:	2200      	movs	r2, #0
 800344c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800344e:	4b1c      	ldr	r3, [pc, #112]	; (80034c0 <HAL_InitTick+0xf8>)
 8003450:	2200      	movs	r2, #0
 8003452:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003454:	252b      	movs	r5, #43	; 0x2b
 8003456:	197c      	adds	r4, r7, r5
 8003458:	4b19      	ldr	r3, [pc, #100]	; (80034c0 <HAL_InitTick+0xf8>)
 800345a:	0018      	movs	r0, r3
 800345c:	f002 fd2a 	bl	8005eb4 <HAL_TIM_Base_Init>
 8003460:	0003      	movs	r3, r0
 8003462:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8003464:	197b      	adds	r3, r7, r5
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d11e      	bne.n	80034aa <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800346c:	197c      	adds	r4, r7, r5
 800346e:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <HAL_InitTick+0xf8>)
 8003470:	0018      	movs	r0, r3
 8003472:	f002 fd77 	bl	8005f64 <HAL_TIM_Base_Start_IT>
 8003476:	0003      	movs	r3, r0
 8003478:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800347a:	197b      	adds	r3, r7, r5
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d113      	bne.n	80034aa <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003482:	2011      	movs	r0, #17
 8003484:	f001 fc59 	bl	8004d3a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b03      	cmp	r3, #3
 800348c:	d809      	bhi.n	80034a2 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	0019      	movs	r1, r3
 8003494:	2011      	movs	r0, #17
 8003496:	f001 fc3b 	bl	8004d10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800349a:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <HAL_InitTick+0x104>)
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	e003      	b.n	80034aa <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 80034a2:	232b      	movs	r3, #43	; 0x2b
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	2201      	movs	r2, #1
 80034a8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80034aa:	232b      	movs	r3, #43	; 0x2b
 80034ac:	18fb      	adds	r3, r7, r3
 80034ae:	781b      	ldrb	r3, [r3, #0]
}
 80034b0:	0018      	movs	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b00c      	add	sp, #48	; 0x30
 80034b6:	bdb0      	pop	{r4, r5, r7, pc}
 80034b8:	40021000 	.word	0x40021000
 80034bc:	000f4240 	.word	0x000f4240
 80034c0:	200000f0 	.word	0x200000f0
 80034c4:	40001000 	.word	0x40001000
 80034c8:	000003e7 	.word	0x000003e7
 80034cc:	20000004 	.word	0x20000004

080034d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034d4:	e7fe      	b.n	80034d4 <NMI_Handler+0x4>

080034d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034da:	e7fe      	b.n	80034da <HardFault_Handler+0x4>

080034dc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <TIM6_IRQHandler+0x14>)
 80034e2:	0018      	movs	r0, r3
 80034e4:	f002 fe9c 	bl	8006220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80034e8:	46c0      	nop			; (mov r8, r8)
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	200000f0 	.word	0x200000f0

080034f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	e00a      	b.n	800351c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003506:	e000      	b.n	800350a <_read+0x16>
 8003508:	bf00      	nop
 800350a:	0001      	movs	r1, r0
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	60ba      	str	r2, [r7, #8]
 8003512:	b2ca      	uxtb	r2, r1
 8003514:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	3301      	adds	r3, #1
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	429a      	cmp	r2, r3
 8003522:	dbf0      	blt.n	8003506 <_read+0x12>
  }

  return len;
 8003524:	687b      	ldr	r3, [r7, #4]
}
 8003526:	0018      	movs	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	b006      	add	sp, #24
 800352c:	bd80      	pop	{r7, pc}

0800352e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b086      	sub	sp, #24
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	e009      	b.n	8003554 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	60ba      	str	r2, [r7, #8]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	0018      	movs	r0, r3
 800354a:	e000      	b.n	800354e <_write+0x20>
 800354c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	3301      	adds	r3, #1
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	429a      	cmp	r2, r3
 800355a:	dbf1      	blt.n	8003540 <_write+0x12>
  }
  return len;
 800355c:	687b      	ldr	r3, [r7, #4]
}
 800355e:	0018      	movs	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	b006      	add	sp, #24
 8003564:	bd80      	pop	{r7, pc}

08003566 <_close>:

int _close(int file)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800356e:	2301      	movs	r3, #1
 8003570:	425b      	negs	r3, r3
}
 8003572:	0018      	movs	r0, r3
 8003574:	46bd      	mov	sp, r7
 8003576:	b002      	add	sp, #8
 8003578:	bd80      	pop	{r7, pc}

0800357a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2280      	movs	r2, #128	; 0x80
 8003588:	0192      	lsls	r2, r2, #6
 800358a:	605a      	str	r2, [r3, #4]
  return 0;
 800358c:	2300      	movs	r3, #0
}
 800358e:	0018      	movs	r0, r3
 8003590:	46bd      	mov	sp, r7
 8003592:	b002      	add	sp, #8
 8003594:	bd80      	pop	{r7, pc}

08003596 <_isatty>:

int _isatty(int file)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800359e:	2301      	movs	r3, #1
}
 80035a0:	0018      	movs	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b002      	add	sp, #8
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	0018      	movs	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b004      	add	sp, #16
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035c8:	4a14      	ldr	r2, [pc, #80]	; (800361c <_sbrk+0x5c>)
 80035ca:	4b15      	ldr	r3, [pc, #84]	; (8003620 <_sbrk+0x60>)
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035d4:	4b13      	ldr	r3, [pc, #76]	; (8003624 <_sbrk+0x64>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d102      	bne.n	80035e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035dc:	4b11      	ldr	r3, [pc, #68]	; (8003624 <_sbrk+0x64>)
 80035de:	4a12      	ldr	r2, [pc, #72]	; (8003628 <_sbrk+0x68>)
 80035e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035e2:	4b10      	ldr	r3, [pc, #64]	; (8003624 <_sbrk+0x64>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	18d3      	adds	r3, r2, r3
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d207      	bcs.n	8003600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035f0:	f008 fa20 	bl	800ba34 <__errno>
 80035f4:	0003      	movs	r3, r0
 80035f6:	220c      	movs	r2, #12
 80035f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035fa:	2301      	movs	r3, #1
 80035fc:	425b      	negs	r3, r3
 80035fe:	e009      	b.n	8003614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003600:	4b08      	ldr	r3, [pc, #32]	; (8003624 <_sbrk+0x64>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003606:	4b07      	ldr	r3, [pc, #28]	; (8003624 <_sbrk+0x64>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	18d2      	adds	r2, r2, r3
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <_sbrk+0x64>)
 8003610:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003612:	68fb      	ldr	r3, [r7, #12]
}
 8003614:	0018      	movs	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	b006      	add	sp, #24
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20009000 	.word	0x20009000
 8003620:	00000400 	.word	0x00000400
 8003624:	2000013c 	.word	0x2000013c
 8003628:	20001688 	.word	0x20001688

0800362c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003630:	46c0      	nop			; (mov r8, r8)
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003638:	b590      	push	{r4, r7, lr}
 800363a:	b08d      	sub	sp, #52	; 0x34
 800363c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800363e:	240c      	movs	r4, #12
 8003640:	193b      	adds	r3, r7, r4
 8003642:	0018      	movs	r0, r3
 8003644:	2324      	movs	r3, #36	; 0x24
 8003646:	001a      	movs	r2, r3
 8003648:	2100      	movs	r1, #0
 800364a:	f008 f98b 	bl	800b964 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800364e:	003b      	movs	r3, r7
 8003650:	0018      	movs	r0, r3
 8003652:	230c      	movs	r3, #12
 8003654:	001a      	movs	r2, r3
 8003656:	2100      	movs	r1, #0
 8003658:	f008 f984 	bl	800b964 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800365c:	4b28      	ldr	r3, [pc, #160]	; (8003700 <MX_TIM1_Init+0xc8>)
 800365e:	4a29      	ldr	r2, [pc, #164]	; (8003704 <MX_TIM1_Init+0xcc>)
 8003660:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003662:	4b27      	ldr	r3, [pc, #156]	; (8003700 <MX_TIM1_Init+0xc8>)
 8003664:	2200      	movs	r2, #0
 8003666:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003668:	4b25      	ldr	r3, [pc, #148]	; (8003700 <MX_TIM1_Init+0xc8>)
 800366a:	2200      	movs	r2, #0
 800366c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800366e:	4b24      	ldr	r3, [pc, #144]	; (8003700 <MX_TIM1_Init+0xc8>)
 8003670:	4a25      	ldr	r2, [pc, #148]	; (8003708 <MX_TIM1_Init+0xd0>)
 8003672:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003674:	4b22      	ldr	r3, [pc, #136]	; (8003700 <MX_TIM1_Init+0xc8>)
 8003676:	2200      	movs	r2, #0
 8003678:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800367a:	4b21      	ldr	r3, [pc, #132]	; (8003700 <MX_TIM1_Init+0xc8>)
 800367c:	2200      	movs	r2, #0
 800367e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003680:	4b1f      	ldr	r3, [pc, #124]	; (8003700 <MX_TIM1_Init+0xc8>)
 8003682:	2200      	movs	r2, #0
 8003684:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003686:	0021      	movs	r1, r4
 8003688:	187b      	adds	r3, r7, r1
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800368e:	187b      	adds	r3, r7, r1
 8003690:	2200      	movs	r2, #0
 8003692:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003694:	187b      	adds	r3, r7, r1
 8003696:	2201      	movs	r2, #1
 8003698:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800369a:	187b      	adds	r3, r7, r1
 800369c:	2200      	movs	r2, #0
 800369e:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80036a0:	187b      	adds	r3, r7, r1
 80036a2:	2200      	movs	r2, #0
 80036a4:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80036a6:	187b      	adds	r3, r7, r1
 80036a8:	2200      	movs	r2, #0
 80036aa:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80036ac:	187b      	adds	r3, r7, r1
 80036ae:	2201      	movs	r2, #1
 80036b0:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80036b2:	187b      	adds	r3, r7, r1
 80036b4:	2200      	movs	r2, #0
 80036b6:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80036b8:	187b      	adds	r3, r7, r1
 80036ba:	2200      	movs	r2, #0
 80036bc:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80036be:	187a      	adds	r2, r7, r1
 80036c0:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <MX_TIM1_Init+0xc8>)
 80036c2:	0011      	movs	r1, r2
 80036c4:	0018      	movs	r0, r3
 80036c6:	f002 fd03 	bl	80060d0 <HAL_TIM_Encoder_Init>
 80036ca:	1e03      	subs	r3, r0, #0
 80036cc:	d001      	beq.n	80036d2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80036ce:	f7ff fe4b 	bl	8003368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036d2:	003b      	movs	r3, r7
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80036d8:	003b      	movs	r3, r7
 80036da:	2200      	movs	r2, #0
 80036dc:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036de:	003b      	movs	r3, r7
 80036e0:	2200      	movs	r2, #0
 80036e2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80036e4:	003a      	movs	r2, r7
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <MX_TIM1_Init+0xc8>)
 80036e8:	0011      	movs	r1, r2
 80036ea:	0018      	movs	r0, r3
 80036ec:	f003 fc96 	bl	800701c <HAL_TIMEx_MasterConfigSynchronization>
 80036f0:	1e03      	subs	r3, r0, #0
 80036f2:	d001      	beq.n	80036f8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80036f4:	f7ff fe38 	bl	8003368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80036f8:	46c0      	nop			; (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b00d      	add	sp, #52	; 0x34
 80036fe:	bd90      	pop	{r4, r7, pc}
 8003700:	20000140 	.word	0x20000140
 8003704:	40012c00 	.word	0x40012c00
 8003708:	0000ffff 	.word	0x0000ffff

0800370c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800370c:	b590      	push	{r4, r7, lr}
 800370e:	b08d      	sub	sp, #52	; 0x34
 8003710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003712:	240c      	movs	r4, #12
 8003714:	193b      	adds	r3, r7, r4
 8003716:	0018      	movs	r0, r3
 8003718:	2324      	movs	r3, #36	; 0x24
 800371a:	001a      	movs	r2, r3
 800371c:	2100      	movs	r1, #0
 800371e:	f008 f921 	bl	800b964 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003722:	003b      	movs	r3, r7
 8003724:	0018      	movs	r0, r3
 8003726:	230c      	movs	r3, #12
 8003728:	001a      	movs	r2, r3
 800372a:	2100      	movs	r1, #0
 800372c:	f008 f91a 	bl	800b964 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003730:	4b25      	ldr	r3, [pc, #148]	; (80037c8 <MX_TIM3_Init+0xbc>)
 8003732:	4a26      	ldr	r2, [pc, #152]	; (80037cc <MX_TIM3_Init+0xc0>)
 8003734:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003736:	4b24      	ldr	r3, [pc, #144]	; (80037c8 <MX_TIM3_Init+0xbc>)
 8003738:	2200      	movs	r2, #0
 800373a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800373c:	4b22      	ldr	r3, [pc, #136]	; (80037c8 <MX_TIM3_Init+0xbc>)
 800373e:	2200      	movs	r2, #0
 8003740:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003742:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <MX_TIM3_Init+0xbc>)
 8003744:	4a22      	ldr	r2, [pc, #136]	; (80037d0 <MX_TIM3_Init+0xc4>)
 8003746:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003748:	4b1f      	ldr	r3, [pc, #124]	; (80037c8 <MX_TIM3_Init+0xbc>)
 800374a:	2200      	movs	r2, #0
 800374c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800374e:	4b1e      	ldr	r3, [pc, #120]	; (80037c8 <MX_TIM3_Init+0xbc>)
 8003750:	2200      	movs	r2, #0
 8003752:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003754:	0021      	movs	r1, r4
 8003756:	187b      	adds	r3, r7, r1
 8003758:	2201      	movs	r2, #1
 800375a:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800375c:	187b      	adds	r3, r7, r1
 800375e:	2200      	movs	r2, #0
 8003760:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003762:	187b      	adds	r3, r7, r1
 8003764:	2201      	movs	r2, #1
 8003766:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003768:	187b      	adds	r3, r7, r1
 800376a:	2200      	movs	r2, #0
 800376c:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 800376e:	187b      	adds	r3, r7, r1
 8003770:	2200      	movs	r2, #0
 8003772:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003774:	187b      	adds	r3, r7, r1
 8003776:	2200      	movs	r2, #0
 8003778:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800377a:	187b      	adds	r3, r7, r1
 800377c:	2201      	movs	r2, #1
 800377e:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003780:	187b      	adds	r3, r7, r1
 8003782:	2200      	movs	r2, #0
 8003784:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8003786:	187b      	adds	r3, r7, r1
 8003788:	2200      	movs	r2, #0
 800378a:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800378c:	187a      	adds	r2, r7, r1
 800378e:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <MX_TIM3_Init+0xbc>)
 8003790:	0011      	movs	r1, r2
 8003792:	0018      	movs	r0, r3
 8003794:	f002 fc9c 	bl	80060d0 <HAL_TIM_Encoder_Init>
 8003798:	1e03      	subs	r3, r0, #0
 800379a:	d001      	beq.n	80037a0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800379c:	f7ff fde4 	bl	8003368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037a0:	003b      	movs	r3, r7
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037a6:	003b      	movs	r3, r7
 80037a8:	2200      	movs	r2, #0
 80037aa:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037ac:	003a      	movs	r2, r7
 80037ae:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <MX_TIM3_Init+0xbc>)
 80037b0:	0011      	movs	r1, r2
 80037b2:	0018      	movs	r0, r3
 80037b4:	f003 fc32 	bl	800701c <HAL_TIMEx_MasterConfigSynchronization>
 80037b8:	1e03      	subs	r3, r0, #0
 80037ba:	d001      	beq.n	80037c0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80037bc:	f7ff fdd4 	bl	8003368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80037c0:	46c0      	nop			; (mov r8, r8)
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b00d      	add	sp, #52	; 0x34
 80037c6:	bd90      	pop	{r4, r7, pc}
 80037c8:	2000018c 	.word	0x2000018c
 80037cc:	40000400 	.word	0x40000400
 80037d0:	0000ffff 	.word	0x0000ffff

080037d4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80037da:	1d3b      	adds	r3, r7, #4
 80037dc:	0018      	movs	r0, r3
 80037de:	231c      	movs	r3, #28
 80037e0:	001a      	movs	r2, r3
 80037e2:	2100      	movs	r1, #0
 80037e4:	f008 f8be 	bl	800b964 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80037e8:	4b1f      	ldr	r3, [pc, #124]	; (8003868 <MX_TIM14_Init+0x94>)
 80037ea:	4a20      	ldr	r2, [pc, #128]	; (800386c <MX_TIM14_Init+0x98>)
 80037ec:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80037ee:	4b1e      	ldr	r3, [pc, #120]	; (8003868 <MX_TIM14_Init+0x94>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037f4:	4b1c      	ldr	r3, [pc, #112]	; (8003868 <MX_TIM14_Init+0x94>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80037fa:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <MX_TIM14_Init+0x94>)
 80037fc:	4a1c      	ldr	r2, [pc, #112]	; (8003870 <MX_TIM14_Init+0x9c>)
 80037fe:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003800:	4b19      	ldr	r3, [pc, #100]	; (8003868 <MX_TIM14_Init+0x94>)
 8003802:	2200      	movs	r2, #0
 8003804:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003806:	4b18      	ldr	r3, [pc, #96]	; (8003868 <MX_TIM14_Init+0x94>)
 8003808:	2200      	movs	r2, #0
 800380a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800380c:	4b16      	ldr	r3, [pc, #88]	; (8003868 <MX_TIM14_Init+0x94>)
 800380e:	0018      	movs	r0, r3
 8003810:	f002 fb50 	bl	8005eb4 <HAL_TIM_Base_Init>
 8003814:	1e03      	subs	r3, r0, #0
 8003816:	d001      	beq.n	800381c <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8003818:	f7ff fda6 	bl	8003368 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800381c:	4b12      	ldr	r3, [pc, #72]	; (8003868 <MX_TIM14_Init+0x94>)
 800381e:	0018      	movs	r0, r3
 8003820:	f002 fbf6 	bl	8006010 <HAL_TIM_PWM_Init>
 8003824:	1e03      	subs	r3, r0, #0
 8003826:	d001      	beq.n	800382c <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8003828:	f7ff fd9e 	bl	8003368 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800382c:	1d3b      	adds	r3, r7, #4
 800382e:	2260      	movs	r2, #96	; 0x60
 8003830:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003832:	1d3b      	adds	r3, r7, #4
 8003834:	2200      	movs	r2, #0
 8003836:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003838:	1d3b      	adds	r3, r7, #4
 800383a:	2200      	movs	r2, #0
 800383c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800383e:	1d3b      	adds	r3, r7, #4
 8003840:	2200      	movs	r2, #0
 8003842:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003844:	1d39      	adds	r1, r7, #4
 8003846:	4b08      	ldr	r3, [pc, #32]	; (8003868 <MX_TIM14_Init+0x94>)
 8003848:	2200      	movs	r2, #0
 800384a:	0018      	movs	r0, r3
 800384c:	f002 fe1a 	bl	8006484 <HAL_TIM_PWM_ConfigChannel>
 8003850:	1e03      	subs	r3, r0, #0
 8003852:	d001      	beq.n	8003858 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8003854:	f7ff fd88 	bl	8003368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8003858:	4b03      	ldr	r3, [pc, #12]	; (8003868 <MX_TIM14_Init+0x94>)
 800385a:	0018      	movs	r0, r3
 800385c:	f000 fac4 	bl	8003de8 <HAL_TIM_MspPostInit>

}
 8003860:	46c0      	nop			; (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	b008      	add	sp, #32
 8003866:	bd80      	pop	{r7, pc}
 8003868:	200001d8 	.word	0x200001d8
 800386c:	40002000 	.word	0x40002000
 8003870:	0000ffff 	.word	0x0000ffff

08003874 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b09c      	sub	sp, #112	; 0x70
 8003878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800387a:	2360      	movs	r3, #96	; 0x60
 800387c:	18fb      	adds	r3, r7, r3
 800387e:	0018      	movs	r0, r3
 8003880:	2310      	movs	r3, #16
 8003882:	001a      	movs	r2, r3
 8003884:	2100      	movs	r1, #0
 8003886:	f008 f86d 	bl	800b964 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800388a:	2354      	movs	r3, #84	; 0x54
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	0018      	movs	r0, r3
 8003890:	230c      	movs	r3, #12
 8003892:	001a      	movs	r2, r3
 8003894:	2100      	movs	r1, #0
 8003896:	f008 f865 	bl	800b964 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800389a:	2338      	movs	r3, #56	; 0x38
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	0018      	movs	r0, r3
 80038a0:	231c      	movs	r3, #28
 80038a2:	001a      	movs	r2, r3
 80038a4:	2100      	movs	r1, #0
 80038a6:	f008 f85d 	bl	800b964 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80038aa:	1d3b      	adds	r3, r7, #4
 80038ac:	0018      	movs	r0, r3
 80038ae:	2334      	movs	r3, #52	; 0x34
 80038b0:	001a      	movs	r2, r3
 80038b2:	2100      	movs	r1, #0
 80038b4:	f008 f856 	bl	800b964 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80038b8:	4b4d      	ldr	r3, [pc, #308]	; (80039f0 <MX_TIM15_Init+0x17c>)
 80038ba:	4a4e      	ldr	r2, [pc, #312]	; (80039f4 <MX_TIM15_Init+0x180>)
 80038bc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80038be:	4b4c      	ldr	r3, [pc, #304]	; (80039f0 <MX_TIM15_Init+0x17c>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038c4:	4b4a      	ldr	r3, [pc, #296]	; (80039f0 <MX_TIM15_Init+0x17c>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80038ca:	4b49      	ldr	r3, [pc, #292]	; (80039f0 <MX_TIM15_Init+0x17c>)
 80038cc:	4a4a      	ldr	r2, [pc, #296]	; (80039f8 <MX_TIM15_Init+0x184>)
 80038ce:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038d0:	4b47      	ldr	r3, [pc, #284]	; (80039f0 <MX_TIM15_Init+0x17c>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80038d6:	4b46      	ldr	r3, [pc, #280]	; (80039f0 <MX_TIM15_Init+0x17c>)
 80038d8:	2200      	movs	r2, #0
 80038da:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038dc:	4b44      	ldr	r3, [pc, #272]	; (80039f0 <MX_TIM15_Init+0x17c>)
 80038de:	2200      	movs	r2, #0
 80038e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80038e2:	4b43      	ldr	r3, [pc, #268]	; (80039f0 <MX_TIM15_Init+0x17c>)
 80038e4:	0018      	movs	r0, r3
 80038e6:	f002 fae5 	bl	8005eb4 <HAL_TIM_Base_Init>
 80038ea:	1e03      	subs	r3, r0, #0
 80038ec:	d001      	beq.n	80038f2 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80038ee:	f7ff fd3b 	bl	8003368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038f2:	2160      	movs	r1, #96	; 0x60
 80038f4:	187b      	adds	r3, r7, r1
 80038f6:	2280      	movs	r2, #128	; 0x80
 80038f8:	0152      	lsls	r2, r2, #5
 80038fa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80038fc:	187a      	adds	r2, r7, r1
 80038fe:	4b3c      	ldr	r3, [pc, #240]	; (80039f0 <MX_TIM15_Init+0x17c>)
 8003900:	0011      	movs	r1, r2
 8003902:	0018      	movs	r0, r3
 8003904:	f002 febe 	bl	8006684 <HAL_TIM_ConfigClockSource>
 8003908:	1e03      	subs	r3, r0, #0
 800390a:	d001      	beq.n	8003910 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 800390c:	f7ff fd2c 	bl	8003368 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8003910:	4b37      	ldr	r3, [pc, #220]	; (80039f0 <MX_TIM15_Init+0x17c>)
 8003912:	0018      	movs	r0, r3
 8003914:	f002 fb7c 	bl	8006010 <HAL_TIM_PWM_Init>
 8003918:	1e03      	subs	r3, r0, #0
 800391a:	d001      	beq.n	8003920 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 800391c:	f7ff fd24 	bl	8003368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003920:	2154      	movs	r1, #84	; 0x54
 8003922:	187b      	adds	r3, r7, r1
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003928:	187b      	adds	r3, r7, r1
 800392a:	2200      	movs	r2, #0
 800392c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800392e:	187a      	adds	r2, r7, r1
 8003930:	4b2f      	ldr	r3, [pc, #188]	; (80039f0 <MX_TIM15_Init+0x17c>)
 8003932:	0011      	movs	r1, r2
 8003934:	0018      	movs	r0, r3
 8003936:	f003 fb71 	bl	800701c <HAL_TIMEx_MasterConfigSynchronization>
 800393a:	1e03      	subs	r3, r0, #0
 800393c:	d001      	beq.n	8003942 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 800393e:	f7ff fd13 	bl	8003368 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003942:	2138      	movs	r1, #56	; 0x38
 8003944:	187b      	adds	r3, r7, r1
 8003946:	2260      	movs	r2, #96	; 0x60
 8003948:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800394a:	187b      	adds	r3, r7, r1
 800394c:	2200      	movs	r2, #0
 800394e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003950:	187b      	adds	r3, r7, r1
 8003952:	2200      	movs	r2, #0
 8003954:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003956:	187b      	adds	r3, r7, r1
 8003958:	2200      	movs	r2, #0
 800395a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800395c:	187b      	adds	r3, r7, r1
 800395e:	2200      	movs	r2, #0
 8003960:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003962:	187b      	adds	r3, r7, r1
 8003964:	2200      	movs	r2, #0
 8003966:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003968:	187b      	adds	r3, r7, r1
 800396a:	2200      	movs	r2, #0
 800396c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800396e:	1879      	adds	r1, r7, r1
 8003970:	4b1f      	ldr	r3, [pc, #124]	; (80039f0 <MX_TIM15_Init+0x17c>)
 8003972:	2200      	movs	r2, #0
 8003974:	0018      	movs	r0, r3
 8003976:	f002 fd85 	bl	8006484 <HAL_TIM_PWM_ConfigChannel>
 800397a:	1e03      	subs	r3, r0, #0
 800397c:	d001      	beq.n	8003982 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800397e:	f7ff fcf3 	bl	8003368 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003982:	2338      	movs	r3, #56	; 0x38
 8003984:	18f9      	adds	r1, r7, r3
 8003986:	4b1a      	ldr	r3, [pc, #104]	; (80039f0 <MX_TIM15_Init+0x17c>)
 8003988:	2204      	movs	r2, #4
 800398a:	0018      	movs	r0, r3
 800398c:	f002 fd7a 	bl	8006484 <HAL_TIM_PWM_ConfigChannel>
 8003990:	1e03      	subs	r3, r0, #0
 8003992:	d001      	beq.n	8003998 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 8003994:	f7ff fce8 	bl	8003368 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003998:	1d3b      	adds	r3, r7, #4
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800399e:	1d3b      	adds	r3, r7, #4
 80039a0:	2200      	movs	r2, #0
 80039a2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80039a4:	1d3b      	adds	r3, r7, #4
 80039a6:	2200      	movs	r2, #0
 80039a8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80039aa:	1d3b      	adds	r3, r7, #4
 80039ac:	2200      	movs	r2, #0
 80039ae:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80039b0:	1d3b      	adds	r3, r7, #4
 80039b2:	2200      	movs	r2, #0
 80039b4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80039b6:	1d3b      	adds	r3, r7, #4
 80039b8:	2280      	movs	r2, #128	; 0x80
 80039ba:	0192      	lsls	r2, r2, #6
 80039bc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80039be:	1d3b      	adds	r3, r7, #4
 80039c0:	2200      	movs	r2, #0
 80039c2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80039c4:	1d3b      	adds	r3, r7, #4
 80039c6:	2200      	movs	r2, #0
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80039ca:	1d3a      	adds	r2, r7, #4
 80039cc:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <MX_TIM15_Init+0x17c>)
 80039ce:	0011      	movs	r1, r2
 80039d0:	0018      	movs	r0, r3
 80039d2:	f003 fb8b 	bl	80070ec <HAL_TIMEx_ConfigBreakDeadTime>
 80039d6:	1e03      	subs	r3, r0, #0
 80039d8:	d001      	beq.n	80039de <MX_TIM15_Init+0x16a>
  {
    Error_Handler();
 80039da:	f7ff fcc5 	bl	8003368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80039de:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <MX_TIM15_Init+0x17c>)
 80039e0:	0018      	movs	r0, r3
 80039e2:	f000 fa01 	bl	8003de8 <HAL_TIM_MspPostInit>

}
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b01c      	add	sp, #112	; 0x70
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	20000224 	.word	0x20000224
 80039f4:	40014000 	.word	0x40014000
 80039f8:	0000ffff 	.word	0x0000ffff

080039fc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b094      	sub	sp, #80	; 0x50
 8003a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a02:	2334      	movs	r3, #52	; 0x34
 8003a04:	18fb      	adds	r3, r7, r3
 8003a06:	0018      	movs	r0, r3
 8003a08:	231c      	movs	r3, #28
 8003a0a:	001a      	movs	r2, r3
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	f007 ffa9 	bl	800b964 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a12:	003b      	movs	r3, r7
 8003a14:	0018      	movs	r0, r3
 8003a16:	2334      	movs	r3, #52	; 0x34
 8003a18:	001a      	movs	r2, r3
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	f007 ffa2 	bl	800b964 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003a20:	4b37      	ldr	r3, [pc, #220]	; (8003b00 <MX_TIM16_Init+0x104>)
 8003a22:	4a38      	ldr	r2, [pc, #224]	; (8003b04 <MX_TIM16_Init+0x108>)
 8003a24:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8003a26:	4b36      	ldr	r3, [pc, #216]	; (8003b00 <MX_TIM16_Init+0x104>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a2c:	4b34      	ldr	r3, [pc, #208]	; (8003b00 <MX_TIM16_Init+0x104>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8003a32:	4b33      	ldr	r3, [pc, #204]	; (8003b00 <MX_TIM16_Init+0x104>)
 8003a34:	4a34      	ldr	r2, [pc, #208]	; (8003b08 <MX_TIM16_Init+0x10c>)
 8003a36:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a38:	4b31      	ldr	r3, [pc, #196]	; (8003b00 <MX_TIM16_Init+0x104>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003a3e:	4b30      	ldr	r3, [pc, #192]	; (8003b00 <MX_TIM16_Init+0x104>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a44:	4b2e      	ldr	r3, [pc, #184]	; (8003b00 <MX_TIM16_Init+0x104>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003a4a:	4b2d      	ldr	r3, [pc, #180]	; (8003b00 <MX_TIM16_Init+0x104>)
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f002 fa31 	bl	8005eb4 <HAL_TIM_Base_Init>
 8003a52:	1e03      	subs	r3, r0, #0
 8003a54:	d001      	beq.n	8003a5a <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8003a56:	f7ff fc87 	bl	8003368 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8003a5a:	4b29      	ldr	r3, [pc, #164]	; (8003b00 <MX_TIM16_Init+0x104>)
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f002 fad7 	bl	8006010 <HAL_TIM_PWM_Init>
 8003a62:	1e03      	subs	r3, r0, #0
 8003a64:	d001      	beq.n	8003a6a <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8003a66:	f7ff fc7f 	bl	8003368 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a6a:	2134      	movs	r1, #52	; 0x34
 8003a6c:	187b      	adds	r3, r7, r1
 8003a6e:	2260      	movs	r2, #96	; 0x60
 8003a70:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003a72:	187b      	adds	r3, r7, r1
 8003a74:	2200      	movs	r2, #0
 8003a76:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a78:	187b      	adds	r3, r7, r1
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a7e:	187b      	adds	r3, r7, r1
 8003a80:	2200      	movs	r2, #0
 8003a82:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a84:	187b      	adds	r3, r7, r1
 8003a86:	2200      	movs	r2, #0
 8003a88:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a8a:	187b      	adds	r3, r7, r1
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a90:	187b      	adds	r3, r7, r1
 8003a92:	2200      	movs	r2, #0
 8003a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a96:	1879      	adds	r1, r7, r1
 8003a98:	4b19      	ldr	r3, [pc, #100]	; (8003b00 <MX_TIM16_Init+0x104>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f002 fcf1 	bl	8006484 <HAL_TIM_PWM_ConfigChannel>
 8003aa2:	1e03      	subs	r3, r0, #0
 8003aa4:	d001      	beq.n	8003aaa <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8003aa6:	f7ff fc5f 	bl	8003368 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003aaa:	003b      	movs	r3, r7
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ab0:	003b      	movs	r3, r7
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ab6:	003b      	movs	r3, r7
 8003ab8:	2200      	movs	r2, #0
 8003aba:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003abc:	003b      	movs	r3, r7
 8003abe:	2200      	movs	r2, #0
 8003ac0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ac2:	003b      	movs	r3, r7
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ac8:	003b      	movs	r3, r7
 8003aca:	2280      	movs	r2, #128	; 0x80
 8003acc:	0192      	lsls	r2, r2, #6
 8003ace:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003ad0:	003b      	movs	r3, r7
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ad6:	003b      	movs	r3, r7
 8003ad8:	2200      	movs	r2, #0
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003adc:	003a      	movs	r2, r7
 8003ade:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <MX_TIM16_Init+0x104>)
 8003ae0:	0011      	movs	r1, r2
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f003 fb02 	bl	80070ec <HAL_TIMEx_ConfigBreakDeadTime>
 8003ae8:	1e03      	subs	r3, r0, #0
 8003aea:	d001      	beq.n	8003af0 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8003aec:	f7ff fc3c 	bl	8003368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <MX_TIM16_Init+0x104>)
 8003af2:	0018      	movs	r0, r3
 8003af4:	f000 f978 	bl	8003de8 <HAL_TIM_MspPostInit>

}
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	46bd      	mov	sp, r7
 8003afc:	b014      	add	sp, #80	; 0x50
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	20000270 	.word	0x20000270
 8003b04:	40014400 	.word	0x40014400
 8003b08:	0000ffff 	.word	0x0000ffff

08003b0c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b094      	sub	sp, #80	; 0x50
 8003b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b12:	2334      	movs	r3, #52	; 0x34
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	0018      	movs	r0, r3
 8003b18:	231c      	movs	r3, #28
 8003b1a:	001a      	movs	r2, r3
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	f007 ff21 	bl	800b964 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003b22:	003b      	movs	r3, r7
 8003b24:	0018      	movs	r0, r3
 8003b26:	2334      	movs	r3, #52	; 0x34
 8003b28:	001a      	movs	r2, r3
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	f007 ff1a 	bl	800b964 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003b30:	4b37      	ldr	r3, [pc, #220]	; (8003c10 <MX_TIM17_Init+0x104>)
 8003b32:	4a38      	ldr	r2, [pc, #224]	; (8003c14 <MX_TIM17_Init+0x108>)
 8003b34:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8003b36:	4b36      	ldr	r3, [pc, #216]	; (8003c10 <MX_TIM17_Init+0x104>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b3c:	4b34      	ldr	r3, [pc, #208]	; (8003c10 <MX_TIM17_Init+0x104>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8003b42:	4b33      	ldr	r3, [pc, #204]	; (8003c10 <MX_TIM17_Init+0x104>)
 8003b44:	4a34      	ldr	r2, [pc, #208]	; (8003c18 <MX_TIM17_Init+0x10c>)
 8003b46:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b48:	4b31      	ldr	r3, [pc, #196]	; (8003c10 <MX_TIM17_Init+0x104>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003b4e:	4b30      	ldr	r3, [pc, #192]	; (8003c10 <MX_TIM17_Init+0x104>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b54:	4b2e      	ldr	r3, [pc, #184]	; (8003c10 <MX_TIM17_Init+0x104>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003b5a:	4b2d      	ldr	r3, [pc, #180]	; (8003c10 <MX_TIM17_Init+0x104>)
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f002 f9a9 	bl	8005eb4 <HAL_TIM_Base_Init>
 8003b62:	1e03      	subs	r3, r0, #0
 8003b64:	d001      	beq.n	8003b6a <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8003b66:	f7ff fbff 	bl	8003368 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8003b6a:	4b29      	ldr	r3, [pc, #164]	; (8003c10 <MX_TIM17_Init+0x104>)
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f002 fa4f 	bl	8006010 <HAL_TIM_PWM_Init>
 8003b72:	1e03      	subs	r3, r0, #0
 8003b74:	d001      	beq.n	8003b7a <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8003b76:	f7ff fbf7 	bl	8003368 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b7a:	2134      	movs	r1, #52	; 0x34
 8003b7c:	187b      	adds	r3, r7, r1
 8003b7e:	2260      	movs	r2, #96	; 0x60
 8003b80:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003b82:	187b      	adds	r3, r7, r1
 8003b84:	2200      	movs	r2, #0
 8003b86:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b88:	187b      	adds	r3, r7, r1
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b8e:	187b      	adds	r3, r7, r1
 8003b90:	2200      	movs	r2, #0
 8003b92:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b94:	187b      	adds	r3, r7, r1
 8003b96:	2200      	movs	r2, #0
 8003b98:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b9a:	187b      	adds	r3, r7, r1
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ba0:	187b      	adds	r3, r7, r1
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ba6:	1879      	adds	r1, r7, r1
 8003ba8:	4b19      	ldr	r3, [pc, #100]	; (8003c10 <MX_TIM17_Init+0x104>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	0018      	movs	r0, r3
 8003bae:	f002 fc69 	bl	8006484 <HAL_TIM_PWM_ConfigChannel>
 8003bb2:	1e03      	subs	r3, r0, #0
 8003bb4:	d001      	beq.n	8003bba <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8003bb6:	f7ff fbd7 	bl	8003368 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003bba:	003b      	movs	r3, r7
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003bc0:	003b      	movs	r3, r7
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003bc6:	003b      	movs	r3, r7
 8003bc8:	2200      	movs	r2, #0
 8003bca:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003bcc:	003b      	movs	r3, r7
 8003bce:	2200      	movs	r2, #0
 8003bd0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003bd2:	003b      	movs	r3, r7
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003bd8:	003b      	movs	r3, r7
 8003bda:	2280      	movs	r2, #128	; 0x80
 8003bdc:	0192      	lsls	r2, r2, #6
 8003bde:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003be0:	003b      	movs	r3, r7
 8003be2:	2200      	movs	r2, #0
 8003be4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003be6:	003b      	movs	r3, r7
 8003be8:	2200      	movs	r2, #0
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8003bec:	003a      	movs	r2, r7
 8003bee:	4b08      	ldr	r3, [pc, #32]	; (8003c10 <MX_TIM17_Init+0x104>)
 8003bf0:	0011      	movs	r1, r2
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f003 fa7a 	bl	80070ec <HAL_TIMEx_ConfigBreakDeadTime>
 8003bf8:	1e03      	subs	r3, r0, #0
 8003bfa:	d001      	beq.n	8003c00 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8003bfc:	f7ff fbb4 	bl	8003368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8003c00:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <MX_TIM17_Init+0x104>)
 8003c02:	0018      	movs	r0, r3
 8003c04:	f000 f8f0 	bl	8003de8 <HAL_TIM_MspPostInit>

}
 8003c08:	46c0      	nop			; (mov r8, r8)
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b014      	add	sp, #80	; 0x50
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	200002bc 	.word	0x200002bc
 8003c14:	40014800 	.word	0x40014800
 8003c18:	0000ffff 	.word	0x0000ffff

08003c1c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003c1c:	b590      	push	{r4, r7, lr}
 8003c1e:	b08d      	sub	sp, #52	; 0x34
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c24:	241c      	movs	r4, #28
 8003c26:	193b      	adds	r3, r7, r4
 8003c28:	0018      	movs	r0, r3
 8003c2a:	2314      	movs	r3, #20
 8003c2c:	001a      	movs	r2, r3
 8003c2e:	2100      	movs	r1, #0
 8003c30:	f007 fe98 	bl	800b964 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a36      	ldr	r2, [pc, #216]	; (8003d14 <HAL_TIM_Encoder_MspInit+0xf8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d131      	bne.n	8003ca2 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c3e:	4b36      	ldr	r3, [pc, #216]	; (8003d18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c42:	4b35      	ldr	r3, [pc, #212]	; (8003d18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003c44:	2180      	movs	r1, #128	; 0x80
 8003c46:	0109      	lsls	r1, r1, #4
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40
 8003c4c:	4b32      	ldr	r3, [pc, #200]	; (8003d18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	4013      	ands	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c5a:	4b2f      	ldr	r3, [pc, #188]	; (8003d18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c5e:	4b2e      	ldr	r3, [pc, #184]	; (8003d18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003c60:	2104      	movs	r1, #4
 8003c62:	430a      	orrs	r2, r1
 8003c64:	635a      	str	r2, [r3, #52]	; 0x34
 8003c66:	4b2c      	ldr	r3, [pc, #176]	; (8003d18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6a:	2204      	movs	r2, #4
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC8     ------> TIM1_CH1
    PC9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH1_ENCODER_RB_Pin|TIM1_CH2_ENCODER_RA_Pin;
 8003c72:	193b      	adds	r3, r7, r4
 8003c74:	22c0      	movs	r2, #192	; 0xc0
 8003c76:	0092      	lsls	r2, r2, #2
 8003c78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7a:	0021      	movs	r1, r4
 8003c7c:	187b      	adds	r3, r7, r1
 8003c7e:	2202      	movs	r2, #2
 8003c80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c82:	187b      	adds	r3, r7, r1
 8003c84:	2200      	movs	r2, #0
 8003c86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c88:	187b      	adds	r3, r7, r1
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003c8e:	187b      	adds	r3, r7, r1
 8003c90:	2202      	movs	r2, #2
 8003c92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c94:	187b      	adds	r3, r7, r1
 8003c96:	4a21      	ldr	r2, [pc, #132]	; (8003d1c <HAL_TIM_Encoder_MspInit+0x100>)
 8003c98:	0019      	movs	r1, r3
 8003c9a:	0010      	movs	r0, r2
 8003c9c:	f001 f924 	bl	8004ee8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003ca0:	e033      	b.n	8003d0a <HAL_TIM_Encoder_MspInit+0xee>
  else if(tim_encoderHandle->Instance==TIM3)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a1e      	ldr	r2, [pc, #120]	; (8003d20 <HAL_TIM_Encoder_MspInit+0x104>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d12e      	bne.n	8003d0a <HAL_TIM_Encoder_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cac:	4b1a      	ldr	r3, [pc, #104]	; (8003d18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003cb2:	2102      	movs	r1, #2
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	63da      	str	r2, [r3, #60]	; 0x3c
 8003cb8:	4b17      	ldr	r3, [pc, #92]	; (8003d18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cc4:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cc8:	4b13      	ldr	r3, [pc, #76]	; (8003d18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003cca:	2101      	movs	r1, #1
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	635a      	str	r2, [r3, #52]	; 0x34
 8003cd0:	4b11      	ldr	r3, [pc, #68]	; (8003d18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_ENCODER_LA_Pin|TIM3_CH2_ENCODER_LB_Pin;
 8003cdc:	211c      	movs	r1, #28
 8003cde:	187b      	adds	r3, r7, r1
 8003ce0:	22c0      	movs	r2, #192	; 0xc0
 8003ce2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce4:	187b      	adds	r3, r7, r1
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cea:	187b      	adds	r3, r7, r1
 8003cec:	2200      	movs	r2, #0
 8003cee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf0:	187b      	adds	r3, r7, r1
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003cf6:	187b      	adds	r3, r7, r1
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cfc:	187a      	adds	r2, r7, r1
 8003cfe:	23a0      	movs	r3, #160	; 0xa0
 8003d00:	05db      	lsls	r3, r3, #23
 8003d02:	0011      	movs	r1, r2
 8003d04:	0018      	movs	r0, r3
 8003d06:	f001 f8ef 	bl	8004ee8 <HAL_GPIO_Init>
}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b00d      	add	sp, #52	; 0x34
 8003d10:	bd90      	pop	{r4, r7, pc}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	40012c00 	.word	0x40012c00
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	50000800 	.word	0x50000800
 8003d20:	40000400 	.word	0x40000400

08003d24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a28      	ldr	r2, [pc, #160]	; (8003dd4 <HAL_TIM_Base_MspInit+0xb0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d10e      	bne.n	8003d54 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003d36:	4b28      	ldr	r3, [pc, #160]	; (8003dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8003d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d3a:	4b27      	ldr	r3, [pc, #156]	; (8003dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8003d3c:	2180      	movs	r1, #128	; 0x80
 8003d3e:	0209      	lsls	r1, r1, #8
 8003d40:	430a      	orrs	r2, r1
 8003d42:	641a      	str	r2, [r3, #64]	; 0x40
 8003d44:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8003d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d48:	2380      	movs	r3, #128	; 0x80
 8003d4a:	021b      	lsls	r3, r3, #8
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8003d52:	e03a      	b.n	8003dca <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM15)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a20      	ldr	r2, [pc, #128]	; (8003ddc <HAL_TIM_Base_MspInit+0xb8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d10e      	bne.n	8003d7c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003d5e:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8003d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d62:	4b1d      	ldr	r3, [pc, #116]	; (8003dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8003d64:	2180      	movs	r1, #128	; 0x80
 8003d66:	0249      	lsls	r1, r1, #9
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	641a      	str	r2, [r3, #64]	; 0x40
 8003d6c:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8003d6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d70:	2380      	movs	r3, #128	; 0x80
 8003d72:	025b      	lsls	r3, r3, #9
 8003d74:	4013      	ands	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
 8003d78:	693b      	ldr	r3, [r7, #16]
}
 8003d7a:	e026      	b.n	8003dca <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM16)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a17      	ldr	r2, [pc, #92]	; (8003de0 <HAL_TIM_Base_MspInit+0xbc>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d10e      	bne.n	8003da4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003d86:	4b14      	ldr	r3, [pc, #80]	; (8003dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8003d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d8a:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8003d8c:	2180      	movs	r1, #128	; 0x80
 8003d8e:	0289      	lsls	r1, r1, #10
 8003d90:	430a      	orrs	r2, r1
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40
 8003d94:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8003d96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d98:	2380      	movs	r3, #128	; 0x80
 8003d9a:	029b      	lsls	r3, r3, #10
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
}
 8003da2:	e012      	b.n	8003dca <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM17)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a0e      	ldr	r2, [pc, #56]	; (8003de4 <HAL_TIM_Base_MspInit+0xc0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d10d      	bne.n	8003dca <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003dae:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8003db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003db2:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8003db4:	2180      	movs	r1, #128	; 0x80
 8003db6:	02c9      	lsls	r1, r1, #11
 8003db8:	430a      	orrs	r2, r1
 8003dba:	641a      	str	r2, [r3, #64]	; 0x40
 8003dbc:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8003dbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	02db      	lsls	r3, r3, #11
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
}
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	b006      	add	sp, #24
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	40002000 	.word	0x40002000
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	40014000 	.word	0x40014000
 8003de0:	40014400 	.word	0x40014400
 8003de4:	40014800 	.word	0x40014800

08003de8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003de8:	b590      	push	{r4, r7, lr}
 8003dea:	b08d      	sub	sp, #52	; 0x34
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df0:	241c      	movs	r4, #28
 8003df2:	193b      	adds	r3, r7, r4
 8003df4:	0018      	movs	r0, r3
 8003df6:	2314      	movs	r3, #20
 8003df8:	001a      	movs	r2, r3
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	f007 fdb2 	bl	800b964 <memset>
  if(timHandle->Instance==TIM14)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a62      	ldr	r2, [pc, #392]	; (8003f90 <HAL_TIM_MspPostInit+0x1a8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d123      	bne.n	8003e52 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e0a:	4b62      	ldr	r3, [pc, #392]	; (8003f94 <HAL_TIM_MspPostInit+0x1ac>)
 8003e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e0e:	4b61      	ldr	r3, [pc, #388]	; (8003f94 <HAL_TIM_MspPostInit+0x1ac>)
 8003e10:	2101      	movs	r1, #1
 8003e12:	430a      	orrs	r2, r1
 8003e14:	635a      	str	r2, [r3, #52]	; 0x34
 8003e16:	4b5f      	ldr	r3, [pc, #380]	; (8003f94 <HAL_TIM_MspPostInit+0x1ac>)
 8003e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
 8003e20:	69bb      	ldr	r3, [r7, #24]
    /**TIM14 GPIO Configuration
    PA4     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = TIM14_CH1_M_SCTR_Pin;
 8003e22:	0021      	movs	r1, r4
 8003e24:	187b      	adds	r3, r7, r1
 8003e26:	2210      	movs	r2, #16
 8003e28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2a:	187b      	adds	r3, r7, r1
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e30:	187b      	adds	r3, r7, r1
 8003e32:	2200      	movs	r2, #0
 8003e34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e36:	187b      	adds	r3, r7, r1
 8003e38:	2200      	movs	r2, #0
 8003e3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8003e3c:	187b      	adds	r3, r7, r1
 8003e3e:	2204      	movs	r2, #4
 8003e40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM14_CH1_M_SCTR_GPIO_Port, &GPIO_InitStruct);
 8003e42:	187a      	adds	r2, r7, r1
 8003e44:	23a0      	movs	r3, #160	; 0xa0
 8003e46:	05db      	lsls	r3, r3, #23
 8003e48:	0011      	movs	r1, r2
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	f001 f84c 	bl	8004ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003e50:	e099      	b.n	8003f86 <HAL_TIM_MspPostInit+0x19e>
  else if(timHandle->Instance==TIM15)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a50      	ldr	r2, [pc, #320]	; (8003f98 <HAL_TIM_MspPostInit+0x1b0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d145      	bne.n	8003ee8 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e5c:	4b4d      	ldr	r3, [pc, #308]	; (8003f94 <HAL_TIM_MspPostInit+0x1ac>)
 8003e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e60:	4b4c      	ldr	r3, [pc, #304]	; (8003f94 <HAL_TIM_MspPostInit+0x1ac>)
 8003e62:	2104      	movs	r1, #4
 8003e64:	430a      	orrs	r2, r1
 8003e66:	635a      	str	r2, [r3, #52]	; 0x34
 8003e68:	4b4a      	ldr	r3, [pc, #296]	; (8003f94 <HAL_TIM_MspPostInit+0x1ac>)
 8003e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	4013      	ands	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e74:	4b47      	ldr	r3, [pc, #284]	; (8003f94 <HAL_TIM_MspPostInit+0x1ac>)
 8003e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e78:	4b46      	ldr	r3, [pc, #280]	; (8003f94 <HAL_TIM_MspPostInit+0x1ac>)
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	635a      	str	r2, [r3, #52]	; 0x34
 8003e80:	4b44      	ldr	r3, [pc, #272]	; (8003f94 <HAL_TIM_MspPostInit+0x1ac>)
 8003e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e84:	2201      	movs	r2, #1
 8003e86:	4013      	ands	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
 8003e8a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM15_CH2_REV_MR_Pin;
 8003e8c:	241c      	movs	r4, #28
 8003e8e:	193b      	adds	r3, r7, r4
 8003e90:	2204      	movs	r2, #4
 8003e92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e94:	193b      	adds	r3, r7, r4
 8003e96:	2202      	movs	r2, #2
 8003e98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9a:	193b      	adds	r3, r7, r4
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea0:	193b      	adds	r3, r7, r4
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 8003ea6:	193b      	adds	r3, r7, r4
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM15_CH2_REV_MR_GPIO_Port, &GPIO_InitStruct);
 8003eac:	193b      	adds	r3, r7, r4
 8003eae:	4a3b      	ldr	r2, [pc, #236]	; (8003f9c <HAL_TIM_MspPostInit+0x1b4>)
 8003eb0:	0019      	movs	r1, r3
 8003eb2:	0010      	movs	r0, r2
 8003eb4:	f001 f818 	bl	8004ee8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM15_CH1_REV_ML_Pin;
 8003eb8:	0021      	movs	r1, r4
 8003eba:	187b      	adds	r3, r7, r1
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec0:	187b      	adds	r3, r7, r1
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec6:	187b      	adds	r3, r7, r1
 8003ec8:	2200      	movs	r2, #0
 8003eca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ecc:	187b      	adds	r3, r7, r1
 8003ece:	2200      	movs	r2, #0
 8003ed0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 8003ed2:	187b      	adds	r3, r7, r1
 8003ed4:	2205      	movs	r2, #5
 8003ed6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM15_CH1_REV_ML_GPIO_Port, &GPIO_InitStruct);
 8003ed8:	187a      	adds	r2, r7, r1
 8003eda:	23a0      	movs	r3, #160	; 0xa0
 8003edc:	05db      	lsls	r3, r3, #23
 8003ede:	0011      	movs	r1, r2
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f001 f801 	bl	8004ee8 <HAL_GPIO_Init>
}
 8003ee6:	e04e      	b.n	8003f86 <HAL_TIM_MspPostInit+0x19e>
  else if(timHandle->Instance==TIM16)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a2c      	ldr	r2, [pc, #176]	; (8003fa0 <HAL_TIM_MspPostInit+0x1b8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d122      	bne.n	8003f38 <HAL_TIM_MspPostInit+0x150>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ef2:	4b28      	ldr	r3, [pc, #160]	; (8003f94 <HAL_TIM_MspPostInit+0x1ac>)
 8003ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ef6:	4b27      	ldr	r3, [pc, #156]	; (8003f94 <HAL_TIM_MspPostInit+0x1ac>)
 8003ef8:	2108      	movs	r1, #8
 8003efa:	430a      	orrs	r2, r1
 8003efc:	635a      	str	r2, [r3, #52]	; 0x34
 8003efe:	4b25      	ldr	r3, [pc, #148]	; (8003f94 <HAL_TIM_MspPostInit+0x1ac>)
 8003f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f02:	2208      	movs	r2, #8
 8003f04:	4013      	ands	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM16_CH1_FWD_ML_Pin;
 8003f0a:	211c      	movs	r1, #28
 8003f0c:	187b      	adds	r3, r7, r1
 8003f0e:	2201      	movs	r2, #1
 8003f10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f12:	187b      	adds	r3, r7, r1
 8003f14:	2202      	movs	r2, #2
 8003f16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f18:	187b      	adds	r3, r7, r1
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f1e:	187b      	adds	r3, r7, r1
 8003f20:	2200      	movs	r2, #0
 8003f22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8003f24:	187b      	adds	r3, r7, r1
 8003f26:	2202      	movs	r2, #2
 8003f28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM16_CH1_FWD_ML_GPIO_Port, &GPIO_InitStruct);
 8003f2a:	187b      	adds	r3, r7, r1
 8003f2c:	4a1d      	ldr	r2, [pc, #116]	; (8003fa4 <HAL_TIM_MspPostInit+0x1bc>)
 8003f2e:	0019      	movs	r1, r3
 8003f30:	0010      	movs	r0, r2
 8003f32:	f000 ffd9 	bl	8004ee8 <HAL_GPIO_Init>
}
 8003f36:	e026      	b.n	8003f86 <HAL_TIM_MspPostInit+0x19e>
  else if(timHandle->Instance==TIM17)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a1a      	ldr	r2, [pc, #104]	; (8003fa8 <HAL_TIM_MspPostInit+0x1c0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d121      	bne.n	8003f86 <HAL_TIM_MspPostInit+0x19e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f42:	4b14      	ldr	r3, [pc, #80]	; (8003f94 <HAL_TIM_MspPostInit+0x1ac>)
 8003f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f46:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <HAL_TIM_MspPostInit+0x1ac>)
 8003f48:	2108      	movs	r1, #8
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	635a      	str	r2, [r3, #52]	; 0x34
 8003f4e:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <HAL_TIM_MspPostInit+0x1ac>)
 8003f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f52:	2208      	movs	r2, #8
 8003f54:	4013      	ands	r3, r2
 8003f56:	60bb      	str	r3, [r7, #8]
 8003f58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM17_CH1_FWD_MR_Pin;
 8003f5a:	211c      	movs	r1, #28
 8003f5c:	187b      	adds	r3, r7, r1
 8003f5e:	2202      	movs	r2, #2
 8003f60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f62:	187b      	adds	r3, r7, r1
 8003f64:	2202      	movs	r2, #2
 8003f66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f68:	187b      	adds	r3, r7, r1
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f6e:	187b      	adds	r3, r7, r1
 8003f70:	2200      	movs	r2, #0
 8003f72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8003f74:	187b      	adds	r3, r7, r1
 8003f76:	2202      	movs	r2, #2
 8003f78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM17_CH1_FWD_MR_GPIO_Port, &GPIO_InitStruct);
 8003f7a:	187b      	adds	r3, r7, r1
 8003f7c:	4a09      	ldr	r2, [pc, #36]	; (8003fa4 <HAL_TIM_MspPostInit+0x1bc>)
 8003f7e:	0019      	movs	r1, r3
 8003f80:	0010      	movs	r0, r2
 8003f82:	f000 ffb1 	bl	8004ee8 <HAL_GPIO_Init>
}
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	b00d      	add	sp, #52	; 0x34
 8003f8c:	bd90      	pop	{r4, r7, pc}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	40002000 	.word	0x40002000
 8003f94:	40021000 	.word	0x40021000
 8003f98:	40014000 	.word	0x40014000
 8003f9c:	50000800 	.word	0x50000800
 8003fa0:	40014400 	.word	0x40014400
 8003fa4:	50000c00 	.word	0x50000c00
 8003fa8:	40014800 	.word	0x40014800

08003fac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003fb0:	4b23      	ldr	r3, [pc, #140]	; (8004040 <MX_USART1_UART_Init+0x94>)
 8003fb2:	4a24      	ldr	r2, [pc, #144]	; (8004044 <MX_USART1_UART_Init+0x98>)
 8003fb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003fb6:	4b22      	ldr	r3, [pc, #136]	; (8004040 <MX_USART1_UART_Init+0x94>)
 8003fb8:	22e1      	movs	r2, #225	; 0xe1
 8003fba:	0252      	lsls	r2, r2, #9
 8003fbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003fbe:	4b20      	ldr	r3, [pc, #128]	; (8004040 <MX_USART1_UART_Init+0x94>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003fc4:	4b1e      	ldr	r3, [pc, #120]	; (8004040 <MX_USART1_UART_Init+0x94>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003fca:	4b1d      	ldr	r3, [pc, #116]	; (8004040 <MX_USART1_UART_Init+0x94>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003fd0:	4b1b      	ldr	r3, [pc, #108]	; (8004040 <MX_USART1_UART_Init+0x94>)
 8003fd2:	220c      	movs	r2, #12
 8003fd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fd6:	4b1a      	ldr	r3, [pc, #104]	; (8004040 <MX_USART1_UART_Init+0x94>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fdc:	4b18      	ldr	r3, [pc, #96]	; (8004040 <MX_USART1_UART_Init+0x94>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fe2:	4b17      	ldr	r3, [pc, #92]	; (8004040 <MX_USART1_UART_Init+0x94>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003fe8:	4b15      	ldr	r3, [pc, #84]	; (8004040 <MX_USART1_UART_Init+0x94>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003fee:	4b14      	ldr	r3, [pc, #80]	; (8004040 <MX_USART1_UART_Init+0x94>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ff4:	4b12      	ldr	r3, [pc, #72]	; (8004040 <MX_USART1_UART_Init+0x94>)
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f003 f936 	bl	8007268 <HAL_UART_Init>
 8003ffc:	1e03      	subs	r3, r0, #0
 8003ffe:	d001      	beq.n	8004004 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004000:	f7ff f9b2 	bl	8003368 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004004:	4b0e      	ldr	r3, [pc, #56]	; (8004040 <MX_USART1_UART_Init+0x94>)
 8004006:	2100      	movs	r1, #0
 8004008:	0018      	movs	r0, r3
 800400a:	f004 f8e3 	bl	80081d4 <HAL_UARTEx_SetTxFifoThreshold>
 800400e:	1e03      	subs	r3, r0, #0
 8004010:	d001      	beq.n	8004016 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004012:	f7ff f9a9 	bl	8003368 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004016:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <MX_USART1_UART_Init+0x94>)
 8004018:	2100      	movs	r1, #0
 800401a:	0018      	movs	r0, r3
 800401c:	f004 f91a 	bl	8008254 <HAL_UARTEx_SetRxFifoThreshold>
 8004020:	1e03      	subs	r3, r0, #0
 8004022:	d001      	beq.n	8004028 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004024:	f7ff f9a0 	bl	8003368 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004028:	4b05      	ldr	r3, [pc, #20]	; (8004040 <MX_USART1_UART_Init+0x94>)
 800402a:	0018      	movs	r0, r3
 800402c:	f004 f898 	bl	8008160 <HAL_UARTEx_DisableFifoMode>
 8004030:	1e03      	subs	r3, r0, #0
 8004032:	d001      	beq.n	8004038 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004034:	f7ff f998 	bl	8003368 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004038:	46c0      	nop			; (mov r8, r8)
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	20000308 	.word	0x20000308
 8004044:	40013800 	.word	0x40013800

08004048 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800404c:	4b23      	ldr	r3, [pc, #140]	; (80040dc <MX_USART2_UART_Init+0x94>)
 800404e:	4a24      	ldr	r2, [pc, #144]	; (80040e0 <MX_USART2_UART_Init+0x98>)
 8004050:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004052:	4b22      	ldr	r3, [pc, #136]	; (80040dc <MX_USART2_UART_Init+0x94>)
 8004054:	22e1      	movs	r2, #225	; 0xe1
 8004056:	0252      	lsls	r2, r2, #9
 8004058:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800405a:	4b20      	ldr	r3, [pc, #128]	; (80040dc <MX_USART2_UART_Init+0x94>)
 800405c:	2200      	movs	r2, #0
 800405e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004060:	4b1e      	ldr	r3, [pc, #120]	; (80040dc <MX_USART2_UART_Init+0x94>)
 8004062:	2200      	movs	r2, #0
 8004064:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004066:	4b1d      	ldr	r3, [pc, #116]	; (80040dc <MX_USART2_UART_Init+0x94>)
 8004068:	2200      	movs	r2, #0
 800406a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800406c:	4b1b      	ldr	r3, [pc, #108]	; (80040dc <MX_USART2_UART_Init+0x94>)
 800406e:	220c      	movs	r2, #12
 8004070:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004072:	4b1a      	ldr	r3, [pc, #104]	; (80040dc <MX_USART2_UART_Init+0x94>)
 8004074:	2200      	movs	r2, #0
 8004076:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004078:	4b18      	ldr	r3, [pc, #96]	; (80040dc <MX_USART2_UART_Init+0x94>)
 800407a:	2200      	movs	r2, #0
 800407c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800407e:	4b17      	ldr	r3, [pc, #92]	; (80040dc <MX_USART2_UART_Init+0x94>)
 8004080:	2200      	movs	r2, #0
 8004082:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004084:	4b15      	ldr	r3, [pc, #84]	; (80040dc <MX_USART2_UART_Init+0x94>)
 8004086:	2200      	movs	r2, #0
 8004088:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800408a:	4b14      	ldr	r3, [pc, #80]	; (80040dc <MX_USART2_UART_Init+0x94>)
 800408c:	2200      	movs	r2, #0
 800408e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004090:	4b12      	ldr	r3, [pc, #72]	; (80040dc <MX_USART2_UART_Init+0x94>)
 8004092:	0018      	movs	r0, r3
 8004094:	f003 f8e8 	bl	8007268 <HAL_UART_Init>
 8004098:	1e03      	subs	r3, r0, #0
 800409a:	d001      	beq.n	80040a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800409c:	f7ff f964 	bl	8003368 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040a0:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <MX_USART2_UART_Init+0x94>)
 80040a2:	2100      	movs	r1, #0
 80040a4:	0018      	movs	r0, r3
 80040a6:	f004 f895 	bl	80081d4 <HAL_UARTEx_SetTxFifoThreshold>
 80040aa:	1e03      	subs	r3, r0, #0
 80040ac:	d001      	beq.n	80040b2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80040ae:	f7ff f95b 	bl	8003368 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <MX_USART2_UART_Init+0x94>)
 80040b4:	2100      	movs	r1, #0
 80040b6:	0018      	movs	r0, r3
 80040b8:	f004 f8cc 	bl	8008254 <HAL_UARTEx_SetRxFifoThreshold>
 80040bc:	1e03      	subs	r3, r0, #0
 80040be:	d001      	beq.n	80040c4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80040c0:	f7ff f952 	bl	8003368 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80040c4:	4b05      	ldr	r3, [pc, #20]	; (80040dc <MX_USART2_UART_Init+0x94>)
 80040c6:	0018      	movs	r0, r3
 80040c8:	f004 f84a 	bl	8008160 <HAL_UARTEx_DisableFifoMode>
 80040cc:	1e03      	subs	r3, r0, #0
 80040ce:	d001      	beq.n	80040d4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80040d0:	f7ff f94a 	bl	8003368 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80040d4:	46c0      	nop			; (mov r8, r8)
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	2000039c 	.word	0x2000039c
 80040e0:	40004400 	.word	0x40004400

080040e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80040e4:	b590      	push	{r4, r7, lr}
 80040e6:	b093      	sub	sp, #76	; 0x4c
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ec:	2334      	movs	r3, #52	; 0x34
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	0018      	movs	r0, r3
 80040f2:	2314      	movs	r3, #20
 80040f4:	001a      	movs	r2, r3
 80040f6:	2100      	movs	r1, #0
 80040f8:	f007 fc34 	bl	800b964 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040fc:	2418      	movs	r4, #24
 80040fe:	193b      	adds	r3, r7, r4
 8004100:	0018      	movs	r0, r3
 8004102:	231c      	movs	r3, #28
 8004104:	001a      	movs	r2, r3
 8004106:	2100      	movs	r1, #0
 8004108:	f007 fc2c 	bl	800b964 <memset>
  if(uartHandle->Instance==USART1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a44      	ldr	r2, [pc, #272]	; (8004224 <HAL_UART_MspInit+0x140>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d13e      	bne.n	8004194 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004116:	193b      	adds	r3, r7, r4
 8004118:	2201      	movs	r2, #1
 800411a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800411c:	193b      	adds	r3, r7, r4
 800411e:	2200      	movs	r2, #0
 8004120:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004122:	193b      	adds	r3, r7, r4
 8004124:	0018      	movs	r0, r3
 8004126:	f001 fd91 	bl	8005c4c <HAL_RCCEx_PeriphCLKConfig>
 800412a:	1e03      	subs	r3, r0, #0
 800412c:	d001      	beq.n	8004132 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800412e:	f7ff f91b 	bl	8003368 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004132:	4b3d      	ldr	r3, [pc, #244]	; (8004228 <HAL_UART_MspInit+0x144>)
 8004134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004136:	4b3c      	ldr	r3, [pc, #240]	; (8004228 <HAL_UART_MspInit+0x144>)
 8004138:	2180      	movs	r1, #128	; 0x80
 800413a:	01c9      	lsls	r1, r1, #7
 800413c:	430a      	orrs	r2, r1
 800413e:	641a      	str	r2, [r3, #64]	; 0x40
 8004140:	4b39      	ldr	r3, [pc, #228]	; (8004228 <HAL_UART_MspInit+0x144>)
 8004142:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004144:	2380      	movs	r3, #128	; 0x80
 8004146:	01db      	lsls	r3, r3, #7
 8004148:	4013      	ands	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800414e:	4b36      	ldr	r3, [pc, #216]	; (8004228 <HAL_UART_MspInit+0x144>)
 8004150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004152:	4b35      	ldr	r3, [pc, #212]	; (8004228 <HAL_UART_MspInit+0x144>)
 8004154:	2104      	movs	r1, #4
 8004156:	430a      	orrs	r2, r1
 8004158:	635a      	str	r2, [r3, #52]	; 0x34
 800415a:	4b33      	ldr	r3, [pc, #204]	; (8004228 <HAL_UART_MspInit+0x144>)
 800415c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415e:	2204      	movs	r2, #4
 8004160:	4013      	ands	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
 8004164:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_VCP_TX_Pin|USART1_RX_VCP_RX_Pin;
 8004166:	2134      	movs	r1, #52	; 0x34
 8004168:	187b      	adds	r3, r7, r1
 800416a:	2230      	movs	r2, #48	; 0x30
 800416c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800416e:	187b      	adds	r3, r7, r1
 8004170:	2202      	movs	r2, #2
 8004172:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004174:	187b      	adds	r3, r7, r1
 8004176:	2200      	movs	r2, #0
 8004178:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800417a:	187b      	adds	r3, r7, r1
 800417c:	2200      	movs	r2, #0
 800417e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004180:	187b      	adds	r3, r7, r1
 8004182:	2201      	movs	r2, #1
 8004184:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004186:	187b      	adds	r3, r7, r1
 8004188:	4a28      	ldr	r2, [pc, #160]	; (800422c <HAL_UART_MspInit+0x148>)
 800418a:	0019      	movs	r1, r3
 800418c:	0010      	movs	r0, r2
 800418e:	f000 feab 	bl	8004ee8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004192:	e043      	b.n	800421c <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART2)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a25      	ldr	r2, [pc, #148]	; (8004230 <HAL_UART_MspInit+0x14c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d13e      	bne.n	800421c <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800419e:	2118      	movs	r1, #24
 80041a0:	187b      	adds	r3, r7, r1
 80041a2:	2202      	movs	r2, #2
 80041a4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80041a6:	187b      	adds	r3, r7, r1
 80041a8:	2200      	movs	r2, #0
 80041aa:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041ac:	187b      	adds	r3, r7, r1
 80041ae:	0018      	movs	r0, r3
 80041b0:	f001 fd4c 	bl	8005c4c <HAL_RCCEx_PeriphCLKConfig>
 80041b4:	1e03      	subs	r3, r0, #0
 80041b6:	d001      	beq.n	80041bc <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80041b8:	f7ff f8d6 	bl	8003368 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80041bc:	4b1a      	ldr	r3, [pc, #104]	; (8004228 <HAL_UART_MspInit+0x144>)
 80041be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041c0:	4b19      	ldr	r3, [pc, #100]	; (8004228 <HAL_UART_MspInit+0x144>)
 80041c2:	2180      	movs	r1, #128	; 0x80
 80041c4:	0289      	lsls	r1, r1, #10
 80041c6:	430a      	orrs	r2, r1
 80041c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80041ca:	4b17      	ldr	r3, [pc, #92]	; (8004228 <HAL_UART_MspInit+0x144>)
 80041cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041ce:	2380      	movs	r3, #128	; 0x80
 80041d0:	029b      	lsls	r3, r3, #10
 80041d2:	4013      	ands	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041d8:	4b13      	ldr	r3, [pc, #76]	; (8004228 <HAL_UART_MspInit+0x144>)
 80041da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041dc:	4b12      	ldr	r3, [pc, #72]	; (8004228 <HAL_UART_MspInit+0x144>)
 80041de:	2108      	movs	r1, #8
 80041e0:	430a      	orrs	r2, r1
 80041e2:	635a      	str	r2, [r3, #52]	; 0x34
 80041e4:	4b10      	ldr	r3, [pc, #64]	; (8004228 <HAL_UART_MspInit+0x144>)
 80041e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e8:	2208      	movs	r2, #8
 80041ea:	4013      	ands	r3, r2
 80041ec:	60bb      	str	r3, [r7, #8]
 80041ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_LIDAR_TX_Pin|USART2_RX_LIDAR_RX_Pin;
 80041f0:	2134      	movs	r1, #52	; 0x34
 80041f2:	187b      	adds	r3, r7, r1
 80041f4:	2260      	movs	r2, #96	; 0x60
 80041f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f8:	187b      	adds	r3, r7, r1
 80041fa:	2202      	movs	r2, #2
 80041fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041fe:	187b      	adds	r3, r7, r1
 8004200:	2200      	movs	r2, #0
 8004202:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004204:	187b      	adds	r3, r7, r1
 8004206:	2200      	movs	r2, #0
 8004208:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 800420a:	187b      	adds	r3, r7, r1
 800420c:	2200      	movs	r2, #0
 800420e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004210:	187b      	adds	r3, r7, r1
 8004212:	4a08      	ldr	r2, [pc, #32]	; (8004234 <HAL_UART_MspInit+0x150>)
 8004214:	0019      	movs	r1, r3
 8004216:	0010      	movs	r0, r2
 8004218:	f000 fe66 	bl	8004ee8 <HAL_GPIO_Init>
}
 800421c:	46c0      	nop			; (mov r8, r8)
 800421e:	46bd      	mov	sp, r7
 8004220:	b013      	add	sp, #76	; 0x4c
 8004222:	bd90      	pop	{r4, r7, pc}
 8004224:	40013800 	.word	0x40013800
 8004228:	40021000 	.word	0x40021000
 800422c:	50000800 	.word	0x50000800
 8004230:	40004400 	.word	0x40004400
 8004234:	50000c00 	.word	0x50000c00

08004238 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004238:	480d      	ldr	r0, [pc, #52]	; (8004270 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800423a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800423c:	f7ff f9f6 	bl	800362c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004240:	480c      	ldr	r0, [pc, #48]	; (8004274 <LoopForever+0x6>)
  ldr r1, =_edata
 8004242:	490d      	ldr	r1, [pc, #52]	; (8004278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004244:	4a0d      	ldr	r2, [pc, #52]	; (800427c <LoopForever+0xe>)
  movs r3, #0
 8004246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004248:	e002      	b.n	8004250 <LoopCopyDataInit>

0800424a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800424a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800424c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800424e:	3304      	adds	r3, #4

08004250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004254:	d3f9      	bcc.n	800424a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004256:	4a0a      	ldr	r2, [pc, #40]	; (8004280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004258:	4c0a      	ldr	r4, [pc, #40]	; (8004284 <LoopForever+0x16>)
  movs r3, #0
 800425a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800425c:	e001      	b.n	8004262 <LoopFillZerobss>

0800425e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800425e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004260:	3204      	adds	r2, #4

08004262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004264:	d3fb      	bcc.n	800425e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004266:	f007 fbeb 	bl	800ba40 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800426a:	f7fe ffff 	bl	800326c <main>

0800426e <LoopForever>:

LoopForever:
  b LoopForever
 800426e:	e7fe      	b.n	800426e <LoopForever>
  ldr   r0, =_estack
 8004270:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8004274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004278:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800427c:	0800d048 	.word	0x0800d048
  ldr r2, =_sbss
 8004280:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8004284:	20001688 	.word	0x20001688

08004288 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004288:	e7fe      	b.n	8004288 <ADC1_IRQHandler>
	...

0800428c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004292:	1dfb      	adds	r3, r7, #7
 8004294:	2200      	movs	r2, #0
 8004296:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004298:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <HAL_Init+0x3c>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <HAL_Init+0x3c>)
 800429e:	2180      	movs	r1, #128	; 0x80
 80042a0:	0049      	lsls	r1, r1, #1
 80042a2:	430a      	orrs	r2, r1
 80042a4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042a6:	2003      	movs	r0, #3
 80042a8:	f7ff f88e 	bl	80033c8 <HAL_InitTick>
 80042ac:	1e03      	subs	r3, r0, #0
 80042ae:	d003      	beq.n	80042b8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80042b0:	1dfb      	adds	r3, r7, #7
 80042b2:	2201      	movs	r2, #1
 80042b4:	701a      	strb	r2, [r3, #0]
 80042b6:	e001      	b.n	80042bc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80042b8:	f7ff f85c 	bl	8003374 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80042bc:	1dfb      	adds	r3, r7, #7
 80042be:	781b      	ldrb	r3, [r3, #0]
}
 80042c0:	0018      	movs	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	b002      	add	sp, #8
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40022000 	.word	0x40022000

080042cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80042d0:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <HAL_IncTick+0x1c>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	001a      	movs	r2, r3
 80042d6:	4b05      	ldr	r3, [pc, #20]	; (80042ec <HAL_IncTick+0x20>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	18d2      	adds	r2, r2, r3
 80042dc:	4b03      	ldr	r3, [pc, #12]	; (80042ec <HAL_IncTick+0x20>)
 80042de:	601a      	str	r2, [r3, #0]
}
 80042e0:	46c0      	nop			; (mov r8, r8)
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	20000008 	.word	0x20000008
 80042ec:	20000430 	.word	0x20000430

080042f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  return uwTick;
 80042f4:	4b02      	ldr	r3, [pc, #8]	; (8004300 <HAL_GetTick+0x10>)
 80042f6:	681b      	ldr	r3, [r3, #0]
}
 80042f8:	0018      	movs	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	20000430 	.word	0x20000430

08004304 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a05      	ldr	r2, [pc, #20]	; (8004328 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004314:	401a      	ands	r2, r3
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	431a      	orrs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	601a      	str	r2, [r3, #0]
}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	46bd      	mov	sp, r7
 8004322:	b002      	add	sp, #8
 8004324:	bd80      	pop	{r7, pc}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	fe3fffff 	.word	0xfe3fffff

0800432c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	23e0      	movs	r3, #224	; 0xe0
 800433a:	045b      	lsls	r3, r3, #17
 800433c:	4013      	ands	r3, r2
}
 800433e:	0018      	movs	r0, r3
 8004340:	46bd      	mov	sp, r7
 8004342:	b002      	add	sp, #8
 8004344:	bd80      	pop	{r7, pc}

08004346 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	2104      	movs	r1, #4
 800435a:	400a      	ands	r2, r1
 800435c:	2107      	movs	r1, #7
 800435e:	4091      	lsls	r1, r2
 8004360:	000a      	movs	r2, r1
 8004362:	43d2      	mvns	r2, r2
 8004364:	401a      	ands	r2, r3
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2104      	movs	r1, #4
 800436a:	400b      	ands	r3, r1
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	4099      	lsls	r1, r3
 8004370:	000b      	movs	r3, r1
 8004372:	431a      	orrs	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004378:	46c0      	nop			; (mov r8, r8)
 800437a:	46bd      	mov	sp, r7
 800437c:	b004      	add	sp, #16
 800437e:	bd80      	pop	{r7, pc}

08004380 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	2104      	movs	r1, #4
 8004392:	400a      	ands	r2, r1
 8004394:	2107      	movs	r1, #7
 8004396:	4091      	lsls	r1, r2
 8004398:	000a      	movs	r2, r1
 800439a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2104      	movs	r1, #4
 80043a0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80043a2:	40da      	lsrs	r2, r3
 80043a4:	0013      	movs	r3, r2
}
 80043a6:	0018      	movs	r0, r3
 80043a8:	46bd      	mov	sp, r7
 80043aa:	b002      	add	sp, #8
 80043ac:	bd80      	pop	{r7, pc}

080043ae <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	211f      	movs	r1, #31
 80043c2:	400a      	ands	r2, r1
 80043c4:	210f      	movs	r1, #15
 80043c6:	4091      	lsls	r1, r2
 80043c8:	000a      	movs	r2, r1
 80043ca:	43d2      	mvns	r2, r2
 80043cc:	401a      	ands	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	0e9b      	lsrs	r3, r3, #26
 80043d2:	210f      	movs	r1, #15
 80043d4:	4019      	ands	r1, r3
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	201f      	movs	r0, #31
 80043da:	4003      	ands	r3, r0
 80043dc:	4099      	lsls	r1, r3
 80043de:	000b      	movs	r3, r1
 80043e0:	431a      	orrs	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b004      	add	sp, #16
 80043ec:	bd80      	pop	{r7, pc}

080043ee <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b082      	sub	sp, #8
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	035b      	lsls	r3, r3, #13
 8004400:	0b5b      	lsrs	r3, r3, #13
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004408:	46c0      	nop			; (mov r8, r8)
 800440a:	46bd      	mov	sp, r7
 800440c:	b002      	add	sp, #8
 800440e:	bd80      	pop	{r7, pc}

08004410 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	0352      	lsls	r2, r2, #13
 8004422:	0b52      	lsrs	r2, r2, #13
 8004424:	43d2      	mvns	r2, r2
 8004426:	401a      	ands	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800442c:	46c0      	nop			; (mov r8, r8)
 800442e:	46bd      	mov	sp, r7
 8004430:	b002      	add	sp, #8
 8004432:	bd80      	pop	{r7, pc}

08004434 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	0212      	lsls	r2, r2, #8
 8004448:	43d2      	mvns	r2, r2
 800444a:	401a      	ands	r2, r3
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	021b      	lsls	r3, r3, #8
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	400b      	ands	r3, r1
 8004454:	4904      	ldr	r1, [pc, #16]	; (8004468 <LL_ADC_SetChannelSamplingTime+0x34>)
 8004456:	400b      	ands	r3, r1
 8004458:	431a      	orrs	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800445e:	46c0      	nop			; (mov r8, r8)
 8004460:	46bd      	mov	sp, r7
 8004462:	b004      	add	sp, #16
 8004464:	bd80      	pop	{r7, pc}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	07ffff00 	.word	0x07ffff00

0800446c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4a05      	ldr	r2, [pc, #20]	; (8004490 <LL_ADC_EnableInternalRegulator+0x24>)
 800447a:	4013      	ands	r3, r2
 800447c:	2280      	movs	r2, #128	; 0x80
 800447e:	0552      	lsls	r2, r2, #21
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	46bd      	mov	sp, r7
 800448a:	b002      	add	sp, #8
 800448c:	bd80      	pop	{r7, pc}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	6fffffe8 	.word	0x6fffffe8

08004494 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	2380      	movs	r3, #128	; 0x80
 80044a2:	055b      	lsls	r3, r3, #21
 80044a4:	401a      	ands	r2, r3
 80044a6:	2380      	movs	r3, #128	; 0x80
 80044a8:	055b      	lsls	r3, r3, #21
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d101      	bne.n	80044b2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	0018      	movs	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b002      	add	sp, #8
 80044ba:	bd80      	pop	{r7, pc}

080044bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2201      	movs	r2, #1
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <LL_ADC_IsEnabled+0x18>
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <LL_ADC_IsEnabled+0x1a>
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	0018      	movs	r0, r3
 80044d8:	46bd      	mov	sp, r7
 80044da:	b002      	add	sp, #8
 80044dc:	bd80      	pop	{r7, pc}

080044de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b082      	sub	sp, #8
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	2204      	movs	r2, #4
 80044ec:	4013      	ands	r3, r2
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d101      	bne.n	80044f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	0018      	movs	r0, r3
 80044fa:	46bd      	mov	sp, r7
 80044fc:	b002      	add	sp, #8
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b088      	sub	sp, #32
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004508:	231f      	movs	r3, #31
 800450a:	18fb      	adds	r3, r7, r3
 800450c:	2200      	movs	r2, #0
 800450e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8004510:	2300      	movs	r3, #0
 8004512:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8004514:	2300      	movs	r3, #0
 8004516:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e17f      	b.n	8004826 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10a      	bne.n	8004544 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0018      	movs	r0, r3
 8004532:	f7fe fdaf 	bl	8003094 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2254      	movs	r2, #84	; 0x54
 8004540:	2100      	movs	r1, #0
 8004542:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	0018      	movs	r0, r3
 800454a:	f7ff ffa3 	bl	8004494 <LL_ADC_IsInternalRegulatorEnabled>
 800454e:	1e03      	subs	r3, r0, #0
 8004550:	d115      	bne.n	800457e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	0018      	movs	r0, r3
 8004558:	f7ff ff88 	bl	800446c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800455c:	4bb4      	ldr	r3, [pc, #720]	; (8004830 <HAL_ADC_Init+0x330>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	49b4      	ldr	r1, [pc, #720]	; (8004834 <HAL_ADC_Init+0x334>)
 8004562:	0018      	movs	r0, r3
 8004564:	f7fb fdda 	bl	800011c <__udivsi3>
 8004568:	0003      	movs	r3, r0
 800456a:	3301      	adds	r3, #1
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004570:	e002      	b.n	8004578 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3b01      	subs	r3, #1
 8004576:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f9      	bne.n	8004572 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	0018      	movs	r0, r3
 8004584:	f7ff ff86 	bl	8004494 <LL_ADC_IsInternalRegulatorEnabled>
 8004588:	1e03      	subs	r3, r0, #0
 800458a:	d10f      	bne.n	80045ac <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004590:	2210      	movs	r2, #16
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459c:	2201      	movs	r2, #1
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80045a4:	231f      	movs	r3, #31
 80045a6:	18fb      	adds	r3, r7, r3
 80045a8:	2201      	movs	r2, #1
 80045aa:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	0018      	movs	r0, r3
 80045b2:	f7ff ff94 	bl	80044de <LL_ADC_REG_IsConversionOngoing>
 80045b6:	0003      	movs	r3, r0
 80045b8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045be:	2210      	movs	r2, #16
 80045c0:	4013      	ands	r3, r2
 80045c2:	d000      	beq.n	80045c6 <HAL_ADC_Init+0xc6>
 80045c4:	e122      	b.n	800480c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d000      	beq.n	80045ce <HAL_ADC_Init+0xce>
 80045cc:	e11e      	b.n	800480c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d2:	4a99      	ldr	r2, [pc, #612]	; (8004838 <HAL_ADC_Init+0x338>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	2202      	movs	r2, #2
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	0018      	movs	r0, r3
 80045e4:	f7ff ff6a 	bl	80044bc <LL_ADC_IsEnabled>
 80045e8:	1e03      	subs	r3, r0, #0
 80045ea:	d000      	beq.n	80045ee <HAL_ADC_Init+0xee>
 80045ec:	e0ad      	b.n	800474a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	7e1b      	ldrb	r3, [r3, #24]
 80045f6:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80045f8:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	7e5b      	ldrb	r3, [r3, #25]
 80045fe:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004600:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	7e9b      	ldrb	r3, [r3, #26]
 8004606:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004608:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_ADC_Init+0x118>
 8004612:	2380      	movs	r3, #128	; 0x80
 8004614:	015b      	lsls	r3, r3, #5
 8004616:	e000      	b.n	800461a <HAL_ADC_Init+0x11a>
 8004618:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800461a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004620:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b00      	cmp	r3, #0
 8004628:	da04      	bge.n	8004634 <HAL_ADC_Init+0x134>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	085b      	lsrs	r3, r3, #1
 8004632:	e001      	b.n	8004638 <HAL_ADC_Init+0x138>
 8004634:	2380      	movs	r3, #128	; 0x80
 8004636:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8004638:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	212c      	movs	r1, #44	; 0x2c
 800463e:	5c5b      	ldrb	r3, [r3, r1]
 8004640:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004642:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	4313      	orrs	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	5c9b      	ldrb	r3, [r3, r2]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d115      	bne.n	8004680 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	7e9b      	ldrb	r3, [r3, #26]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d105      	bne.n	8004668 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	2280      	movs	r2, #128	; 0x80
 8004660:	0252      	lsls	r2, r2, #9
 8004662:	4313      	orrs	r3, r2
 8004664:	61bb      	str	r3, [r7, #24]
 8004666:	e00b      	b.n	8004680 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466c:	2220      	movs	r2, #32
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004678:	2201      	movs	r2, #1
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800468c:	23e0      	movs	r3, #224	; 0xe0
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004696:	4313      	orrs	r3, r2
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4313      	orrs	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	4a65      	ldr	r2, [pc, #404]	; (800483c <HAL_ADC_Init+0x33c>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	0019      	movs	r1, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	0f9b      	lsrs	r3, r3, #30
 80046ba:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046c0:	4313      	orrs	r3, r2
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	223c      	movs	r2, #60	; 0x3c
 80046cc:	5c9b      	ldrb	r3, [r3, r2]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d111      	bne.n	80046f6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	0f9b      	lsrs	r3, r3, #30
 80046d8:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046de:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80046e4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80046ea:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	2201      	movs	r2, #1
 80046f2:	4313      	orrs	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	4a50      	ldr	r2, [pc, #320]	; (8004840 <HAL_ADC_Init+0x340>)
 80046fe:	4013      	ands	r3, r2
 8004700:	0019      	movs	r1, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	430a      	orrs	r2, r1
 800470a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	23c0      	movs	r3, #192	; 0xc0
 8004712:	061b      	lsls	r3, r3, #24
 8004714:	429a      	cmp	r2, r3
 8004716:	d018      	beq.n	800474a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800471c:	2380      	movs	r3, #128	; 0x80
 800471e:	05db      	lsls	r3, r3, #23
 8004720:	429a      	cmp	r2, r3
 8004722:	d012      	beq.n	800474a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004728:	2380      	movs	r3, #128	; 0x80
 800472a:	061b      	lsls	r3, r3, #24
 800472c:	429a      	cmp	r2, r3
 800472e:	d00c      	beq.n	800474a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004730:	4b44      	ldr	r3, [pc, #272]	; (8004844 <HAL_ADC_Init+0x344>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a44      	ldr	r2, [pc, #272]	; (8004848 <HAL_ADC_Init+0x348>)
 8004736:	4013      	ands	r3, r2
 8004738:	0019      	movs	r1, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	23f0      	movs	r3, #240	; 0xf0
 8004740:	039b      	lsls	r3, r3, #14
 8004742:	401a      	ands	r2, r3
 8004744:	4b3f      	ldr	r3, [pc, #252]	; (8004844 <HAL_ADC_Init+0x344>)
 8004746:	430a      	orrs	r2, r1
 8004748:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004752:	001a      	movs	r2, r3
 8004754:	2100      	movs	r1, #0
 8004756:	f7ff fdf6 	bl	8004346 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	493a      	ldr	r1, [pc, #232]	; (800484c <HAL_ADC_Init+0x34c>)
 8004764:	001a      	movs	r2, r3
 8004766:	f7ff fdee 	bl	8004346 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d109      	bne.n	8004786 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2110      	movs	r1, #16
 800477e:	4249      	negs	r1, r1
 8004780:	430a      	orrs	r2, r1
 8004782:	629a      	str	r2, [r3, #40]	; 0x28
 8004784:	e018      	b.n	80047b8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691a      	ldr	r2, [r3, #16]
 800478a:	2380      	movs	r3, #128	; 0x80
 800478c:	039b      	lsls	r3, r3, #14
 800478e:	429a      	cmp	r2, r3
 8004790:	d112      	bne.n	80047b8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	3b01      	subs	r3, #1
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	221c      	movs	r2, #28
 80047a2:	4013      	ands	r3, r2
 80047a4:	2210      	movs	r2, #16
 80047a6:	4252      	negs	r2, r2
 80047a8:	409a      	lsls	r2, r3
 80047aa:	0011      	movs	r1, r2
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2100      	movs	r1, #0
 80047be:	0018      	movs	r0, r3
 80047c0:	f7ff fdde 	bl	8004380 <LL_ADC_GetSamplingTimeCommonChannels>
 80047c4:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d10b      	bne.n	80047e6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d8:	2203      	movs	r2, #3
 80047da:	4393      	bics	r3, r2
 80047dc:	2201      	movs	r2, #1
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80047e4:	e01c      	b.n	8004820 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ea:	2212      	movs	r2, #18
 80047ec:	4393      	bics	r3, r2
 80047ee:	2210      	movs	r2, #16
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047fa:	2201      	movs	r2, #1
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8004802:	231f      	movs	r3, #31
 8004804:	18fb      	adds	r3, r7, r3
 8004806:	2201      	movs	r2, #1
 8004808:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800480a:	e009      	b.n	8004820 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004810:	2210      	movs	r2, #16
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004818:	231f      	movs	r3, #31
 800481a:	18fb      	adds	r3, r7, r3
 800481c:	2201      	movs	r2, #1
 800481e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004820:	231f      	movs	r3, #31
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	781b      	ldrb	r3, [r3, #0]
}
 8004826:	0018      	movs	r0, r3
 8004828:	46bd      	mov	sp, r7
 800482a:	b008      	add	sp, #32
 800482c:	bd80      	pop	{r7, pc}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	20000000 	.word	0x20000000
 8004834:	00030d40 	.word	0x00030d40
 8004838:	fffffefd 	.word	0xfffffefd
 800483c:	fffe0201 	.word	0xfffe0201
 8004840:	1ffffc02 	.word	0x1ffffc02
 8004844:	40012708 	.word	0x40012708
 8004848:	ffc3ffff 	.word	0xffc3ffff
 800484c:	07ffff04 	.word	0x07ffff04

08004850 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800485a:	2317      	movs	r3, #23
 800485c:	18fb      	adds	r3, r7, r3
 800485e:	2200      	movs	r2, #0
 8004860:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2254      	movs	r2, #84	; 0x54
 800486a:	5c9b      	ldrb	r3, [r3, r2]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_ADC_ConfigChannel+0x24>
 8004870:	2302      	movs	r3, #2
 8004872:	e1c0      	b.n	8004bf6 <HAL_ADC_ConfigChannel+0x3a6>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2254      	movs	r2, #84	; 0x54
 8004878:	2101      	movs	r1, #1
 800487a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	0018      	movs	r0, r3
 8004882:	f7ff fe2c 	bl	80044de <LL_ADC_REG_IsConversionOngoing>
 8004886:	1e03      	subs	r3, r0, #0
 8004888:	d000      	beq.n	800488c <HAL_ADC_ConfigChannel+0x3c>
 800488a:	e1a3      	b.n	8004bd4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b02      	cmp	r3, #2
 8004892:	d100      	bne.n	8004896 <HAL_ADC_ConfigChannel+0x46>
 8004894:	e143      	b.n	8004b1e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	2380      	movs	r3, #128	; 0x80
 800489c:	061b      	lsls	r3, r3, #24
 800489e:	429a      	cmp	r2, r3
 80048a0:	d004      	beq.n	80048ac <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80048a6:	4ac1      	ldr	r2, [pc, #772]	; (8004bac <HAL_ADC_ConfigChannel+0x35c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d108      	bne.n	80048be <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	0019      	movs	r1, r3
 80048b6:	0010      	movs	r0, r2
 80048b8:	f7ff fd99 	bl	80043ee <LL_ADC_REG_SetSequencerChAdd>
 80048bc:	e0c9      	b.n	8004a52 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	211f      	movs	r1, #31
 80048c8:	400b      	ands	r3, r1
 80048ca:	210f      	movs	r1, #15
 80048cc:	4099      	lsls	r1, r3
 80048ce:	000b      	movs	r3, r1
 80048d0:	43db      	mvns	r3, r3
 80048d2:	4013      	ands	r3, r2
 80048d4:	0019      	movs	r1, r3
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	035b      	lsls	r3, r3, #13
 80048dc:	0b5b      	lsrs	r3, r3, #13
 80048de:	d105      	bne.n	80048ec <HAL_ADC_ConfigChannel+0x9c>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	0e9b      	lsrs	r3, r3, #26
 80048e6:	221f      	movs	r2, #31
 80048e8:	4013      	ands	r3, r2
 80048ea:	e098      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x1ce>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2201      	movs	r2, #1
 80048f2:	4013      	ands	r3, r2
 80048f4:	d000      	beq.n	80048f8 <HAL_ADC_ConfigChannel+0xa8>
 80048f6:	e091      	b.n	8004a1c <HAL_ADC_ConfigChannel+0x1cc>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2202      	movs	r2, #2
 80048fe:	4013      	ands	r3, r2
 8004900:	d000      	beq.n	8004904 <HAL_ADC_ConfigChannel+0xb4>
 8004902:	e089      	b.n	8004a18 <HAL_ADC_ConfigChannel+0x1c8>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2204      	movs	r2, #4
 800490a:	4013      	ands	r3, r2
 800490c:	d000      	beq.n	8004910 <HAL_ADC_ConfigChannel+0xc0>
 800490e:	e081      	b.n	8004a14 <HAL_ADC_ConfigChannel+0x1c4>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2208      	movs	r2, #8
 8004916:	4013      	ands	r3, r2
 8004918:	d000      	beq.n	800491c <HAL_ADC_ConfigChannel+0xcc>
 800491a:	e079      	b.n	8004a10 <HAL_ADC_ConfigChannel+0x1c0>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2210      	movs	r2, #16
 8004922:	4013      	ands	r3, r2
 8004924:	d000      	beq.n	8004928 <HAL_ADC_ConfigChannel+0xd8>
 8004926:	e071      	b.n	8004a0c <HAL_ADC_ConfigChannel+0x1bc>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2220      	movs	r2, #32
 800492e:	4013      	ands	r3, r2
 8004930:	d000      	beq.n	8004934 <HAL_ADC_ConfigChannel+0xe4>
 8004932:	e069      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x1b8>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2240      	movs	r2, #64	; 0x40
 800493a:	4013      	ands	r3, r2
 800493c:	d000      	beq.n	8004940 <HAL_ADC_ConfigChannel+0xf0>
 800493e:	e061      	b.n	8004a04 <HAL_ADC_ConfigChannel+0x1b4>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2280      	movs	r2, #128	; 0x80
 8004946:	4013      	ands	r3, r2
 8004948:	d000      	beq.n	800494c <HAL_ADC_ConfigChannel+0xfc>
 800494a:	e059      	b.n	8004a00 <HAL_ADC_ConfigChannel+0x1b0>
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	2380      	movs	r3, #128	; 0x80
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	4013      	ands	r3, r2
 8004956:	d151      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x1ac>
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	2380      	movs	r3, #128	; 0x80
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4013      	ands	r3, r2
 8004962:	d149      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0x1a8>
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	2380      	movs	r3, #128	; 0x80
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	4013      	ands	r3, r2
 800496e:	d141      	bne.n	80049f4 <HAL_ADC_ConfigChannel+0x1a4>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	2380      	movs	r3, #128	; 0x80
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	4013      	ands	r3, r2
 800497a:	d139      	bne.n	80049f0 <HAL_ADC_ConfigChannel+0x1a0>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	2380      	movs	r3, #128	; 0x80
 8004982:	015b      	lsls	r3, r3, #5
 8004984:	4013      	ands	r3, r2
 8004986:	d131      	bne.n	80049ec <HAL_ADC_ConfigChannel+0x19c>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	2380      	movs	r3, #128	; 0x80
 800498e:	019b      	lsls	r3, r3, #6
 8004990:	4013      	ands	r3, r2
 8004992:	d129      	bne.n	80049e8 <HAL_ADC_ConfigChannel+0x198>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	2380      	movs	r3, #128	; 0x80
 800499a:	01db      	lsls	r3, r3, #7
 800499c:	4013      	ands	r3, r2
 800499e:	d121      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x194>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	2380      	movs	r3, #128	; 0x80
 80049a6:	021b      	lsls	r3, r3, #8
 80049a8:	4013      	ands	r3, r2
 80049aa:	d119      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x190>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	2380      	movs	r3, #128	; 0x80
 80049b2:	025b      	lsls	r3, r3, #9
 80049b4:	4013      	ands	r3, r2
 80049b6:	d111      	bne.n	80049dc <HAL_ADC_ConfigChannel+0x18c>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	2380      	movs	r3, #128	; 0x80
 80049be:	029b      	lsls	r3, r3, #10
 80049c0:	4013      	ands	r3, r2
 80049c2:	d109      	bne.n	80049d8 <HAL_ADC_ConfigChannel+0x188>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	2380      	movs	r3, #128	; 0x80
 80049ca:	02db      	lsls	r3, r3, #11
 80049cc:	4013      	ands	r3, r2
 80049ce:	d001      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0x184>
 80049d0:	2312      	movs	r3, #18
 80049d2:	e024      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x1ce>
 80049d4:	2300      	movs	r3, #0
 80049d6:	e022      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x1ce>
 80049d8:	2311      	movs	r3, #17
 80049da:	e020      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x1ce>
 80049dc:	2310      	movs	r3, #16
 80049de:	e01e      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x1ce>
 80049e0:	230f      	movs	r3, #15
 80049e2:	e01c      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x1ce>
 80049e4:	230e      	movs	r3, #14
 80049e6:	e01a      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x1ce>
 80049e8:	230d      	movs	r3, #13
 80049ea:	e018      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x1ce>
 80049ec:	230c      	movs	r3, #12
 80049ee:	e016      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x1ce>
 80049f0:	230b      	movs	r3, #11
 80049f2:	e014      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x1ce>
 80049f4:	230a      	movs	r3, #10
 80049f6:	e012      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x1ce>
 80049f8:	2309      	movs	r3, #9
 80049fa:	e010      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x1ce>
 80049fc:	2308      	movs	r3, #8
 80049fe:	e00e      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x1ce>
 8004a00:	2307      	movs	r3, #7
 8004a02:	e00c      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x1ce>
 8004a04:	2306      	movs	r3, #6
 8004a06:	e00a      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x1ce>
 8004a08:	2305      	movs	r3, #5
 8004a0a:	e008      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x1ce>
 8004a0c:	2304      	movs	r3, #4
 8004a0e:	e006      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x1ce>
 8004a10:	2303      	movs	r3, #3
 8004a12:	e004      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x1ce>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e002      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x1ce>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e000      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x1ce>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	6852      	ldr	r2, [r2, #4]
 8004a22:	201f      	movs	r0, #31
 8004a24:	4002      	ands	r2, r0
 8004a26:	4093      	lsls	r3, r2
 8004a28:	000a      	movs	r2, r1
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	089b      	lsrs	r3, r3, #2
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d808      	bhi.n	8004a52 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6818      	ldr	r0, [r3, #0]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	6859      	ldr	r1, [r3, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	001a      	movs	r2, r3
 8004a4e:	f7ff fcae 	bl	80043ae <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	6819      	ldr	r1, [r3, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	001a      	movs	r2, r3
 8004a60:	f7ff fce8 	bl	8004434 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	db00      	blt.n	8004a6e <HAL_ADC_ConfigChannel+0x21e>
 8004a6c:	e0bc      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a6e:	4b50      	ldr	r3, [pc, #320]	; (8004bb0 <HAL_ADC_ConfigChannel+0x360>)
 8004a70:	0018      	movs	r0, r3
 8004a72:	f7ff fc5b 	bl	800432c <LL_ADC_GetCommonPathInternalCh>
 8004a76:	0003      	movs	r3, r0
 8004a78:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a4d      	ldr	r2, [pc, #308]	; (8004bb4 <HAL_ADC_ConfigChannel+0x364>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d122      	bne.n	8004aca <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	2380      	movs	r3, #128	; 0x80
 8004a88:	041b      	lsls	r3, r3, #16
 8004a8a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004a8c:	d11d      	bne.n	8004aca <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	2280      	movs	r2, #128	; 0x80
 8004a92:	0412      	lsls	r2, r2, #16
 8004a94:	4313      	orrs	r3, r2
 8004a96:	4a46      	ldr	r2, [pc, #280]	; (8004bb0 <HAL_ADC_ConfigChannel+0x360>)
 8004a98:	0019      	movs	r1, r3
 8004a9a:	0010      	movs	r0, r2
 8004a9c:	f7ff fc32 	bl	8004304 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004aa0:	4b45      	ldr	r3, [pc, #276]	; (8004bb8 <HAL_ADC_ConfigChannel+0x368>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4945      	ldr	r1, [pc, #276]	; (8004bbc <HAL_ADC_ConfigChannel+0x36c>)
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f7fb fb38 	bl	800011c <__udivsi3>
 8004aac:	0003      	movs	r3, r0
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	0013      	movs	r3, r2
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	189b      	adds	r3, r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004aba:	e002      	b.n	8004ac2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1f9      	bne.n	8004abc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004ac8:	e08e      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a3c      	ldr	r2, [pc, #240]	; (8004bc0 <HAL_ADC_ConfigChannel+0x370>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d10e      	bne.n	8004af2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	2380      	movs	r3, #128	; 0x80
 8004ad8:	045b      	lsls	r3, r3, #17
 8004ada:	4013      	ands	r3, r2
 8004adc:	d109      	bne.n	8004af2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	2280      	movs	r2, #128	; 0x80
 8004ae2:	0452      	lsls	r2, r2, #17
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	4a32      	ldr	r2, [pc, #200]	; (8004bb0 <HAL_ADC_ConfigChannel+0x360>)
 8004ae8:	0019      	movs	r1, r3
 8004aea:	0010      	movs	r0, r2
 8004aec:	f7ff fc0a 	bl	8004304 <LL_ADC_SetCommonPathInternalCh>
 8004af0:	e07a      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a33      	ldr	r2, [pc, #204]	; (8004bc4 <HAL_ADC_ConfigChannel+0x374>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d000      	beq.n	8004afe <HAL_ADC_ConfigChannel+0x2ae>
 8004afc:	e074      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	2380      	movs	r3, #128	; 0x80
 8004b02:	03db      	lsls	r3, r3, #15
 8004b04:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004b06:	d000      	beq.n	8004b0a <HAL_ADC_ConfigChannel+0x2ba>
 8004b08:	e06e      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	2280      	movs	r2, #128	; 0x80
 8004b0e:	03d2      	lsls	r2, r2, #15
 8004b10:	4313      	orrs	r3, r2
 8004b12:	4a27      	ldr	r2, [pc, #156]	; (8004bb0 <HAL_ADC_ConfigChannel+0x360>)
 8004b14:	0019      	movs	r1, r3
 8004b16:	0010      	movs	r0, r2
 8004b18:	f7ff fbf4 	bl	8004304 <LL_ADC_SetCommonPathInternalCh>
 8004b1c:	e064      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691a      	ldr	r2, [r3, #16]
 8004b22:	2380      	movs	r3, #128	; 0x80
 8004b24:	061b      	lsls	r3, r3, #24
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d004      	beq.n	8004b34 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004b2e:	4a1f      	ldr	r2, [pc, #124]	; (8004bac <HAL_ADC_ConfigChannel+0x35c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d107      	bne.n	8004b44 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	0019      	movs	r1, r3
 8004b3e:	0010      	movs	r0, r2
 8004b40:	f7ff fc66 	bl	8004410 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	da4d      	bge.n	8004be8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b4c:	4b18      	ldr	r3, [pc, #96]	; (8004bb0 <HAL_ADC_ConfigChannel+0x360>)
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f7ff fbec 	bl	800432c <LL_ADC_GetCommonPathInternalCh>
 8004b54:	0003      	movs	r3, r0
 8004b56:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a15      	ldr	r2, [pc, #84]	; (8004bb4 <HAL_ADC_ConfigChannel+0x364>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d108      	bne.n	8004b74 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	4a18      	ldr	r2, [pc, #96]	; (8004bc8 <HAL_ADC_ConfigChannel+0x378>)
 8004b66:	4013      	ands	r3, r2
 8004b68:	4a11      	ldr	r2, [pc, #68]	; (8004bb0 <HAL_ADC_ConfigChannel+0x360>)
 8004b6a:	0019      	movs	r1, r3
 8004b6c:	0010      	movs	r0, r2
 8004b6e:	f7ff fbc9 	bl	8004304 <LL_ADC_SetCommonPathInternalCh>
 8004b72:	e039      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a11      	ldr	r2, [pc, #68]	; (8004bc0 <HAL_ADC_ConfigChannel+0x370>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d108      	bne.n	8004b90 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	4a12      	ldr	r2, [pc, #72]	; (8004bcc <HAL_ADC_ConfigChannel+0x37c>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	4a0a      	ldr	r2, [pc, #40]	; (8004bb0 <HAL_ADC_ConfigChannel+0x360>)
 8004b86:	0019      	movs	r1, r3
 8004b88:	0010      	movs	r0, r2
 8004b8a:	f7ff fbbb 	bl	8004304 <LL_ADC_SetCommonPathInternalCh>
 8004b8e:	e02b      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a0b      	ldr	r2, [pc, #44]	; (8004bc4 <HAL_ADC_ConfigChannel+0x374>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d126      	bne.n	8004be8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	4a0c      	ldr	r2, [pc, #48]	; (8004bd0 <HAL_ADC_ConfigChannel+0x380>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	4a03      	ldr	r2, [pc, #12]	; (8004bb0 <HAL_ADC_ConfigChannel+0x360>)
 8004ba2:	0019      	movs	r1, r3
 8004ba4:	0010      	movs	r0, r2
 8004ba6:	f7ff fbad 	bl	8004304 <LL_ADC_SetCommonPathInternalCh>
 8004baa:	e01d      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x398>
 8004bac:	80000004 	.word	0x80000004
 8004bb0:	40012708 	.word	0x40012708
 8004bb4:	b0001000 	.word	0xb0001000
 8004bb8:	20000000 	.word	0x20000000
 8004bbc:	00030d40 	.word	0x00030d40
 8004bc0:	b8004000 	.word	0xb8004000
 8004bc4:	b4002000 	.word	0xb4002000
 8004bc8:	ff7fffff 	.word	0xff7fffff
 8004bcc:	feffffff 	.word	0xfeffffff
 8004bd0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd8:	2220      	movs	r2, #32
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004be0:	2317      	movs	r3, #23
 8004be2:	18fb      	adds	r3, r7, r3
 8004be4:	2201      	movs	r2, #1
 8004be6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2254      	movs	r2, #84	; 0x54
 8004bec:	2100      	movs	r1, #0
 8004bee:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004bf0:	2317      	movs	r3, #23
 8004bf2:	18fb      	adds	r3, r7, r3
 8004bf4:	781b      	ldrb	r3, [r3, #0]
}
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	b006      	add	sp, #24
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	46c0      	nop			; (mov r8, r8)

08004c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	0002      	movs	r2, r0
 8004c08:	1dfb      	adds	r3, r7, #7
 8004c0a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c0c:	1dfb      	adds	r3, r7, #7
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b7f      	cmp	r3, #127	; 0x7f
 8004c12:	d809      	bhi.n	8004c28 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c14:	1dfb      	adds	r3, r7, #7
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	001a      	movs	r2, r3
 8004c1a:	231f      	movs	r3, #31
 8004c1c:	401a      	ands	r2, r3
 8004c1e:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <__NVIC_EnableIRQ+0x30>)
 8004c20:	2101      	movs	r1, #1
 8004c22:	4091      	lsls	r1, r2
 8004c24:	000a      	movs	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004c28:	46c0      	nop			; (mov r8, r8)
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	b002      	add	sp, #8
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	e000e100 	.word	0xe000e100

08004c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c34:	b590      	push	{r4, r7, lr}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	0002      	movs	r2, r0
 8004c3c:	6039      	str	r1, [r7, #0]
 8004c3e:	1dfb      	adds	r3, r7, #7
 8004c40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c42:	1dfb      	adds	r3, r7, #7
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b7f      	cmp	r3, #127	; 0x7f
 8004c48:	d828      	bhi.n	8004c9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c4a:	4a2f      	ldr	r2, [pc, #188]	; (8004d08 <__NVIC_SetPriority+0xd4>)
 8004c4c:	1dfb      	adds	r3, r7, #7
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	b25b      	sxtb	r3, r3
 8004c52:	089b      	lsrs	r3, r3, #2
 8004c54:	33c0      	adds	r3, #192	; 0xc0
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	589b      	ldr	r3, [r3, r2]
 8004c5a:	1dfa      	adds	r2, r7, #7
 8004c5c:	7812      	ldrb	r2, [r2, #0]
 8004c5e:	0011      	movs	r1, r2
 8004c60:	2203      	movs	r2, #3
 8004c62:	400a      	ands	r2, r1
 8004c64:	00d2      	lsls	r2, r2, #3
 8004c66:	21ff      	movs	r1, #255	; 0xff
 8004c68:	4091      	lsls	r1, r2
 8004c6a:	000a      	movs	r2, r1
 8004c6c:	43d2      	mvns	r2, r2
 8004c6e:	401a      	ands	r2, r3
 8004c70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	019b      	lsls	r3, r3, #6
 8004c76:	22ff      	movs	r2, #255	; 0xff
 8004c78:	401a      	ands	r2, r3
 8004c7a:	1dfb      	adds	r3, r7, #7
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	0018      	movs	r0, r3
 8004c80:	2303      	movs	r3, #3
 8004c82:	4003      	ands	r3, r0
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c88:	481f      	ldr	r0, [pc, #124]	; (8004d08 <__NVIC_SetPriority+0xd4>)
 8004c8a:	1dfb      	adds	r3, r7, #7
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	b25b      	sxtb	r3, r3
 8004c90:	089b      	lsrs	r3, r3, #2
 8004c92:	430a      	orrs	r2, r1
 8004c94:	33c0      	adds	r3, #192	; 0xc0
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004c9a:	e031      	b.n	8004d00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c9c:	4a1b      	ldr	r2, [pc, #108]	; (8004d0c <__NVIC_SetPriority+0xd8>)
 8004c9e:	1dfb      	adds	r3, r7, #7
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	0019      	movs	r1, r3
 8004ca4:	230f      	movs	r3, #15
 8004ca6:	400b      	ands	r3, r1
 8004ca8:	3b08      	subs	r3, #8
 8004caa:	089b      	lsrs	r3, r3, #2
 8004cac:	3306      	adds	r3, #6
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	18d3      	adds	r3, r2, r3
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	1dfa      	adds	r2, r7, #7
 8004cb8:	7812      	ldrb	r2, [r2, #0]
 8004cba:	0011      	movs	r1, r2
 8004cbc:	2203      	movs	r2, #3
 8004cbe:	400a      	ands	r2, r1
 8004cc0:	00d2      	lsls	r2, r2, #3
 8004cc2:	21ff      	movs	r1, #255	; 0xff
 8004cc4:	4091      	lsls	r1, r2
 8004cc6:	000a      	movs	r2, r1
 8004cc8:	43d2      	mvns	r2, r2
 8004cca:	401a      	ands	r2, r3
 8004ccc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	019b      	lsls	r3, r3, #6
 8004cd2:	22ff      	movs	r2, #255	; 0xff
 8004cd4:	401a      	ands	r2, r3
 8004cd6:	1dfb      	adds	r3, r7, #7
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	0018      	movs	r0, r3
 8004cdc:	2303      	movs	r3, #3
 8004cde:	4003      	ands	r3, r0
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ce4:	4809      	ldr	r0, [pc, #36]	; (8004d0c <__NVIC_SetPriority+0xd8>)
 8004ce6:	1dfb      	adds	r3, r7, #7
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	001c      	movs	r4, r3
 8004cec:	230f      	movs	r3, #15
 8004cee:	4023      	ands	r3, r4
 8004cf0:	3b08      	subs	r3, #8
 8004cf2:	089b      	lsrs	r3, r3, #2
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	3306      	adds	r3, #6
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	18c3      	adds	r3, r0, r3
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	601a      	str	r2, [r3, #0]
}
 8004d00:	46c0      	nop			; (mov r8, r8)
 8004d02:	46bd      	mov	sp, r7
 8004d04:	b003      	add	sp, #12
 8004d06:	bd90      	pop	{r4, r7, pc}
 8004d08:	e000e100 	.word	0xe000e100
 8004d0c:	e000ed00 	.word	0xe000ed00

08004d10 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	607a      	str	r2, [r7, #4]
 8004d1a:	210f      	movs	r1, #15
 8004d1c:	187b      	adds	r3, r7, r1
 8004d1e:	1c02      	adds	r2, r0, #0
 8004d20:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	187b      	adds	r3, r7, r1
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	b25b      	sxtb	r3, r3
 8004d2a:	0011      	movs	r1, r2
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	f7ff ff81 	bl	8004c34 <__NVIC_SetPriority>
}
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	46bd      	mov	sp, r7
 8004d36:	b004      	add	sp, #16
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b082      	sub	sp, #8
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	0002      	movs	r2, r0
 8004d42:	1dfb      	adds	r3, r7, #7
 8004d44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d46:	1dfb      	adds	r3, r7, #7
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	b25b      	sxtb	r3, r3
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f7ff ff57 	bl	8004c00 <__NVIC_EnableIRQ>
}
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b002      	add	sp, #8
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b086      	sub	sp, #24
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	607a      	str	r2, [r7, #4]
 8004d66:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d68:	2317      	movs	r3, #23
 8004d6a:	18fb      	adds	r3, r7, r3
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2224      	movs	r2, #36	; 0x24
 8004d74:	5c9b      	ldrb	r3, [r3, r2]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d101      	bne.n	8004d7e <HAL_DMA_Start_IT+0x24>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e06f      	b.n	8004e5e <HAL_DMA_Start_IT+0x104>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2224      	movs	r2, #36	; 0x24
 8004d82:	2101      	movs	r1, #1
 8004d84:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2225      	movs	r2, #37	; 0x25
 8004d8a:	5c9b      	ldrb	r3, [r3, r2]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d157      	bne.n	8004e42 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2225      	movs	r2, #37	; 0x25
 8004d96:	2102      	movs	r1, #2
 8004d98:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2101      	movs	r1, #1
 8004dac:	438a      	bics	r2, r1
 8004dae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 f856 	bl	8004e68 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	210e      	movs	r1, #14
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	e00f      	b.n	8004df6 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2104      	movs	r1, #4
 8004de2:	438a      	bics	r2, r1
 8004de4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	210a      	movs	r1, #10
 8004df2:	430a      	orrs	r2, r1
 8004df4:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	2380      	movs	r3, #128	; 0x80
 8004dfe:	025b      	lsls	r3, r3, #9
 8004e00:	4013      	ands	r3, r2
 8004e02:	d008      	beq.n	8004e16 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0e:	2180      	movs	r1, #128	; 0x80
 8004e10:	0049      	lsls	r1, r1, #1
 8004e12:	430a      	orrs	r2, r1
 8004e14:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d008      	beq.n	8004e30 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e28:	2180      	movs	r1, #128	; 0x80
 8004e2a:	0049      	lsls	r1, r1, #1
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	e00a      	b.n	8004e58 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2280      	movs	r2, #128	; 0x80
 8004e46:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2224      	movs	r2, #36	; 0x24
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8004e50:	2317      	movs	r3, #23
 8004e52:	18fb      	adds	r3, r7, r3
 8004e54:	2201      	movs	r2, #1
 8004e56:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004e58:	2317      	movs	r3, #23
 8004e5a:	18fb      	adds	r3, r7, r3
 8004e5c:	781b      	ldrb	r3, [r3, #0]
}
 8004e5e:	0018      	movs	r0, r3
 8004e60:	46bd      	mov	sp, r7
 8004e62:	b006      	add	sp, #24
 8004e64:	bd80      	pop	{r7, pc}
	...

08004e68 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004e7e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d004      	beq.n	8004e92 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004e90:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004e92:	4b14      	ldr	r3, [pc, #80]	; (8004ee4 <DMA_SetConfig+0x7c>)
 8004e94:	6859      	ldr	r1, [r3, #4]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	221c      	movs	r2, #28
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	409a      	lsls	r2, r3
 8004ea2:	4b10      	ldr	r3, [pc, #64]	; (8004ee4 <DMA_SetConfig+0x7c>)
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	2b10      	cmp	r3, #16
 8004eb6:	d108      	bne.n	8004eca <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ec8:	e007      	b.n	8004eda <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	60da      	str	r2, [r3, #12]
}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	46bd      	mov	sp, r7
 8004ede:	b004      	add	sp, #16
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	46c0      	nop			; (mov r8, r8)
 8004ee4:	40020000 	.word	0x40020000

08004ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ef6:	e147      	b.n	8005188 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2101      	movs	r1, #1
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	4091      	lsls	r1, r2
 8004f02:	000a      	movs	r2, r1
 8004f04:	4013      	ands	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d100      	bne.n	8004f10 <HAL_GPIO_Init+0x28>
 8004f0e:	e138      	b.n	8005182 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2203      	movs	r2, #3
 8004f16:	4013      	ands	r3, r2
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d005      	beq.n	8004f28 <HAL_GPIO_Init+0x40>
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2203      	movs	r2, #3
 8004f22:	4013      	ands	r3, r2
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d130      	bne.n	8004f8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	2203      	movs	r2, #3
 8004f34:	409a      	lsls	r2, r3
 8004f36:	0013      	movs	r3, r2
 8004f38:	43da      	mvns	r2, r3
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	409a      	lsls	r2, r3
 8004f4a:	0013      	movs	r3, r2
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f5e:	2201      	movs	r2, #1
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	409a      	lsls	r2, r3
 8004f64:	0013      	movs	r3, r2
 8004f66:	43da      	mvns	r2, r3
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	091b      	lsrs	r3, r3, #4
 8004f74:	2201      	movs	r2, #1
 8004f76:	401a      	ands	r2, r3
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	409a      	lsls	r2, r3
 8004f7c:	0013      	movs	r3, r2
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2203      	movs	r2, #3
 8004f90:	4013      	ands	r3, r2
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d017      	beq.n	8004fc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	2203      	movs	r2, #3
 8004fa2:	409a      	lsls	r2, r3
 8004fa4:	0013      	movs	r3, r2
 8004fa6:	43da      	mvns	r2, r3
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	4013      	ands	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	409a      	lsls	r2, r3
 8004fb8:	0013      	movs	r3, r2
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2203      	movs	r2, #3
 8004fcc:	4013      	ands	r3, r2
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d123      	bne.n	800501a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	08da      	lsrs	r2, r3, #3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3208      	adds	r2, #8
 8004fda:	0092      	lsls	r2, r2, #2
 8004fdc:	58d3      	ldr	r3, [r2, r3]
 8004fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2207      	movs	r2, #7
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	220f      	movs	r2, #15
 8004fea:	409a      	lsls	r2, r3
 8004fec:	0013      	movs	r3, r2
 8004fee:	43da      	mvns	r2, r3
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	691a      	ldr	r2, [r3, #16]
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2107      	movs	r1, #7
 8004ffe:	400b      	ands	r3, r1
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	409a      	lsls	r2, r3
 8005004:	0013      	movs	r3, r2
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	08da      	lsrs	r2, r3, #3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3208      	adds	r2, #8
 8005014:	0092      	lsls	r2, r2, #2
 8005016:	6939      	ldr	r1, [r7, #16]
 8005018:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	2203      	movs	r2, #3
 8005026:	409a      	lsls	r2, r3
 8005028:	0013      	movs	r3, r2
 800502a:	43da      	mvns	r2, r3
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	4013      	ands	r3, r2
 8005030:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2203      	movs	r2, #3
 8005038:	401a      	ands	r2, r3
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	409a      	lsls	r2, r3
 8005040:	0013      	movs	r3, r2
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	23c0      	movs	r3, #192	; 0xc0
 8005054:	029b      	lsls	r3, r3, #10
 8005056:	4013      	ands	r3, r2
 8005058:	d100      	bne.n	800505c <HAL_GPIO_Init+0x174>
 800505a:	e092      	b.n	8005182 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800505c:	4a50      	ldr	r2, [pc, #320]	; (80051a0 <HAL_GPIO_Init+0x2b8>)
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	089b      	lsrs	r3, r3, #2
 8005062:	3318      	adds	r3, #24
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	589b      	ldr	r3, [r3, r2]
 8005068:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2203      	movs	r2, #3
 800506e:	4013      	ands	r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	220f      	movs	r2, #15
 8005074:	409a      	lsls	r2, r3
 8005076:	0013      	movs	r3, r2
 8005078:	43da      	mvns	r2, r3
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	4013      	ands	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	23a0      	movs	r3, #160	; 0xa0
 8005084:	05db      	lsls	r3, r3, #23
 8005086:	429a      	cmp	r2, r3
 8005088:	d013      	beq.n	80050b2 <HAL_GPIO_Init+0x1ca>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a45      	ldr	r2, [pc, #276]	; (80051a4 <HAL_GPIO_Init+0x2bc>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00d      	beq.n	80050ae <HAL_GPIO_Init+0x1c6>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a44      	ldr	r2, [pc, #272]	; (80051a8 <HAL_GPIO_Init+0x2c0>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d007      	beq.n	80050aa <HAL_GPIO_Init+0x1c2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a43      	ldr	r2, [pc, #268]	; (80051ac <HAL_GPIO_Init+0x2c4>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d101      	bne.n	80050a6 <HAL_GPIO_Init+0x1be>
 80050a2:	2303      	movs	r3, #3
 80050a4:	e006      	b.n	80050b4 <HAL_GPIO_Init+0x1cc>
 80050a6:	2305      	movs	r3, #5
 80050a8:	e004      	b.n	80050b4 <HAL_GPIO_Init+0x1cc>
 80050aa:	2302      	movs	r3, #2
 80050ac:	e002      	b.n	80050b4 <HAL_GPIO_Init+0x1cc>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e000      	b.n	80050b4 <HAL_GPIO_Init+0x1cc>
 80050b2:	2300      	movs	r3, #0
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	2103      	movs	r1, #3
 80050b8:	400a      	ands	r2, r1
 80050ba:	00d2      	lsls	r2, r2, #3
 80050bc:	4093      	lsls	r3, r2
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80050c4:	4936      	ldr	r1, [pc, #216]	; (80051a0 <HAL_GPIO_Init+0x2b8>)
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	089b      	lsrs	r3, r3, #2
 80050ca:	3318      	adds	r3, #24
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050d2:	4b33      	ldr	r3, [pc, #204]	; (80051a0 <HAL_GPIO_Init+0x2b8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	43da      	mvns	r2, r3
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	4013      	ands	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	2380      	movs	r3, #128	; 0x80
 80050e8:	035b      	lsls	r3, r3, #13
 80050ea:	4013      	ands	r3, r2
 80050ec:	d003      	beq.n	80050f6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80050f6:	4b2a      	ldr	r3, [pc, #168]	; (80051a0 <HAL_GPIO_Init+0x2b8>)
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80050fc:	4b28      	ldr	r3, [pc, #160]	; (80051a0 <HAL_GPIO_Init+0x2b8>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	43da      	mvns	r2, r3
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	4013      	ands	r3, r2
 800510a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	2380      	movs	r3, #128	; 0x80
 8005112:	039b      	lsls	r3, r3, #14
 8005114:	4013      	ands	r3, r2
 8005116:	d003      	beq.n	8005120 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	4313      	orrs	r3, r2
 800511e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005120:	4b1f      	ldr	r3, [pc, #124]	; (80051a0 <HAL_GPIO_Init+0x2b8>)
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005126:	4a1e      	ldr	r2, [pc, #120]	; (80051a0 <HAL_GPIO_Init+0x2b8>)
 8005128:	2384      	movs	r3, #132	; 0x84
 800512a:	58d3      	ldr	r3, [r2, r3]
 800512c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	43da      	mvns	r2, r3
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	4013      	ands	r3, r2
 8005136:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	2380      	movs	r3, #128	; 0x80
 800513e:	029b      	lsls	r3, r3, #10
 8005140:	4013      	ands	r3, r2
 8005142:	d003      	beq.n	800514c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4313      	orrs	r3, r2
 800514a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800514c:	4914      	ldr	r1, [pc, #80]	; (80051a0 <HAL_GPIO_Init+0x2b8>)
 800514e:	2284      	movs	r2, #132	; 0x84
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005154:	4a12      	ldr	r2, [pc, #72]	; (80051a0 <HAL_GPIO_Init+0x2b8>)
 8005156:	2380      	movs	r3, #128	; 0x80
 8005158:	58d3      	ldr	r3, [r2, r3]
 800515a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	43da      	mvns	r2, r3
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	4013      	ands	r3, r2
 8005164:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	2380      	movs	r3, #128	; 0x80
 800516c:	025b      	lsls	r3, r3, #9
 800516e:	4013      	ands	r3, r2
 8005170:	d003      	beq.n	800517a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800517a:	4909      	ldr	r1, [pc, #36]	; (80051a0 <HAL_GPIO_Init+0x2b8>)
 800517c:	2280      	movs	r2, #128	; 0x80
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	3301      	adds	r3, #1
 8005186:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	40da      	lsrs	r2, r3
 8005190:	1e13      	subs	r3, r2, #0
 8005192:	d000      	beq.n	8005196 <HAL_GPIO_Init+0x2ae>
 8005194:	e6b0      	b.n	8004ef8 <HAL_GPIO_Init+0x10>
  }
}
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	46c0      	nop			; (mov r8, r8)
 800519a:	46bd      	mov	sp, r7
 800519c:	b006      	add	sp, #24
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40021800 	.word	0x40021800
 80051a4:	50000400 	.word	0x50000400
 80051a8:	50000800 	.word	0x50000800
 80051ac:	50000c00 	.word	0x50000c00

080051b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	0008      	movs	r0, r1
 80051ba:	0011      	movs	r1, r2
 80051bc:	1cbb      	adds	r3, r7, #2
 80051be:	1c02      	adds	r2, r0, #0
 80051c0:	801a      	strh	r2, [r3, #0]
 80051c2:	1c7b      	adds	r3, r7, #1
 80051c4:	1c0a      	adds	r2, r1, #0
 80051c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051c8:	1c7b      	adds	r3, r7, #1
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d004      	beq.n	80051da <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80051d0:	1cbb      	adds	r3, r7, #2
 80051d2:	881a      	ldrh	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80051d8:	e003      	b.n	80051e2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051da:	1cbb      	adds	r3, r7, #2
 80051dc:	881a      	ldrh	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80051e2:	46c0      	nop			; (mov r8, r8)
 80051e4:	46bd      	mov	sp, r7
 80051e6:	b002      	add	sp, #8
 80051e8:	bd80      	pop	{r7, pc}
	...

080051ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80051f4:	4b19      	ldr	r3, [pc, #100]	; (800525c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a19      	ldr	r2, [pc, #100]	; (8005260 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80051fa:	4013      	ands	r3, r2
 80051fc:	0019      	movs	r1, r3
 80051fe:	4b17      	ldr	r3, [pc, #92]	; (800525c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	430a      	orrs	r2, r1
 8005204:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	2380      	movs	r3, #128	; 0x80
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	429a      	cmp	r2, r3
 800520e:	d11f      	bne.n	8005250 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005210:	4b14      	ldr	r3, [pc, #80]	; (8005264 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	0013      	movs	r3, r2
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	189b      	adds	r3, r3, r2
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	4912      	ldr	r1, [pc, #72]	; (8005268 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800521e:	0018      	movs	r0, r3
 8005220:	f7fa ff7c 	bl	800011c <__udivsi3>
 8005224:	0003      	movs	r3, r0
 8005226:	3301      	adds	r3, #1
 8005228:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800522a:	e008      	b.n	800523e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3b01      	subs	r3, #1
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	e001      	b.n	800523e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e009      	b.n	8005252 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800523e:	4b07      	ldr	r3, [pc, #28]	; (800525c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005240:	695a      	ldr	r2, [r3, #20]
 8005242:	2380      	movs	r3, #128	; 0x80
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	401a      	ands	r2, r3
 8005248:	2380      	movs	r3, #128	; 0x80
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	429a      	cmp	r2, r3
 800524e:	d0ed      	beq.n	800522c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	0018      	movs	r0, r3
 8005254:	46bd      	mov	sp, r7
 8005256:	b004      	add	sp, #16
 8005258:	bd80      	pop	{r7, pc}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	40007000 	.word	0x40007000
 8005260:	fffff9ff 	.word	0xfffff9ff
 8005264:	20000000 	.word	0x20000000
 8005268:	000f4240 	.word	0x000f4240

0800526c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005270:	4b03      	ldr	r3, [pc, #12]	; (8005280 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	23e0      	movs	r3, #224	; 0xe0
 8005276:	01db      	lsls	r3, r3, #7
 8005278:	4013      	ands	r3, r2
}
 800527a:	0018      	movs	r0, r3
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	40021000 	.word	0x40021000

08005284 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e2f3      	b.n	800587e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2201      	movs	r2, #1
 800529c:	4013      	ands	r3, r2
 800529e:	d100      	bne.n	80052a2 <HAL_RCC_OscConfig+0x1e>
 80052a0:	e07c      	b.n	800539c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052a2:	4bc3      	ldr	r3, [pc, #780]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2238      	movs	r2, #56	; 0x38
 80052a8:	4013      	ands	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052ac:	4bc0      	ldr	r3, [pc, #768]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	2203      	movs	r2, #3
 80052b2:	4013      	ands	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	2b10      	cmp	r3, #16
 80052ba:	d102      	bne.n	80052c2 <HAL_RCC_OscConfig+0x3e>
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2b03      	cmp	r3, #3
 80052c0:	d002      	beq.n	80052c8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d10b      	bne.n	80052e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052c8:	4bb9      	ldr	r3, [pc, #740]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	2380      	movs	r3, #128	; 0x80
 80052ce:	029b      	lsls	r3, r3, #10
 80052d0:	4013      	ands	r3, r2
 80052d2:	d062      	beq.n	800539a <HAL_RCC_OscConfig+0x116>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d15e      	bne.n	800539a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e2ce      	b.n	800587e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	2380      	movs	r3, #128	; 0x80
 80052e6:	025b      	lsls	r3, r3, #9
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d107      	bne.n	80052fc <HAL_RCC_OscConfig+0x78>
 80052ec:	4bb0      	ldr	r3, [pc, #704]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	4baf      	ldr	r3, [pc, #700]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80052f2:	2180      	movs	r1, #128	; 0x80
 80052f4:	0249      	lsls	r1, r1, #9
 80052f6:	430a      	orrs	r2, r1
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	e020      	b.n	800533e <HAL_RCC_OscConfig+0xba>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	23a0      	movs	r3, #160	; 0xa0
 8005302:	02db      	lsls	r3, r3, #11
 8005304:	429a      	cmp	r2, r3
 8005306:	d10e      	bne.n	8005326 <HAL_RCC_OscConfig+0xa2>
 8005308:	4ba9      	ldr	r3, [pc, #676]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	4ba8      	ldr	r3, [pc, #672]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800530e:	2180      	movs	r1, #128	; 0x80
 8005310:	02c9      	lsls	r1, r1, #11
 8005312:	430a      	orrs	r2, r1
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	4ba6      	ldr	r3, [pc, #664]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	4ba5      	ldr	r3, [pc, #660]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800531c:	2180      	movs	r1, #128	; 0x80
 800531e:	0249      	lsls	r1, r1, #9
 8005320:	430a      	orrs	r2, r1
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	e00b      	b.n	800533e <HAL_RCC_OscConfig+0xba>
 8005326:	4ba2      	ldr	r3, [pc, #648]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4ba1      	ldr	r3, [pc, #644]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800532c:	49a1      	ldr	r1, [pc, #644]	; (80055b4 <HAL_RCC_OscConfig+0x330>)
 800532e:	400a      	ands	r2, r1
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	4b9f      	ldr	r3, [pc, #636]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	4b9e      	ldr	r3, [pc, #632]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005338:	499f      	ldr	r1, [pc, #636]	; (80055b8 <HAL_RCC_OscConfig+0x334>)
 800533a:	400a      	ands	r2, r1
 800533c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d014      	beq.n	8005370 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005346:	f7fe ffd3 	bl	80042f0 <HAL_GetTick>
 800534a:	0003      	movs	r3, r0
 800534c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005350:	f7fe ffce 	bl	80042f0 <HAL_GetTick>
 8005354:	0002      	movs	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b64      	cmp	r3, #100	; 0x64
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e28d      	b.n	800587e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005362:	4b93      	ldr	r3, [pc, #588]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	2380      	movs	r3, #128	; 0x80
 8005368:	029b      	lsls	r3, r3, #10
 800536a:	4013      	ands	r3, r2
 800536c:	d0f0      	beq.n	8005350 <HAL_RCC_OscConfig+0xcc>
 800536e:	e015      	b.n	800539c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005370:	f7fe ffbe 	bl	80042f0 <HAL_GetTick>
 8005374:	0003      	movs	r3, r0
 8005376:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005378:	e008      	b.n	800538c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800537a:	f7fe ffb9 	bl	80042f0 <HAL_GetTick>
 800537e:	0002      	movs	r2, r0
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b64      	cmp	r3, #100	; 0x64
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e278      	b.n	800587e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800538c:	4b88      	ldr	r3, [pc, #544]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	2380      	movs	r3, #128	; 0x80
 8005392:	029b      	lsls	r3, r3, #10
 8005394:	4013      	ands	r3, r2
 8005396:	d1f0      	bne.n	800537a <HAL_RCC_OscConfig+0xf6>
 8005398:	e000      	b.n	800539c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800539a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2202      	movs	r2, #2
 80053a2:	4013      	ands	r3, r2
 80053a4:	d100      	bne.n	80053a8 <HAL_RCC_OscConfig+0x124>
 80053a6:	e099      	b.n	80054dc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053a8:	4b81      	ldr	r3, [pc, #516]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	2238      	movs	r2, #56	; 0x38
 80053ae:	4013      	ands	r3, r2
 80053b0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053b2:	4b7f      	ldr	r3, [pc, #508]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	2203      	movs	r2, #3
 80053b8:	4013      	ands	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	2b10      	cmp	r3, #16
 80053c0:	d102      	bne.n	80053c8 <HAL_RCC_OscConfig+0x144>
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d002      	beq.n	80053ce <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d135      	bne.n	800543a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053ce:	4b78      	ldr	r3, [pc, #480]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	2380      	movs	r3, #128	; 0x80
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	4013      	ands	r3, r2
 80053d8:	d005      	beq.n	80053e6 <HAL_RCC_OscConfig+0x162>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e24b      	b.n	800587e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e6:	4b72      	ldr	r3, [pc, #456]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	4a74      	ldr	r2, [pc, #464]	; (80055bc <HAL_RCC_OscConfig+0x338>)
 80053ec:	4013      	ands	r3, r2
 80053ee:	0019      	movs	r1, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	021a      	lsls	r2, r3, #8
 80053f6:	4b6e      	ldr	r3, [pc, #440]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80053f8:	430a      	orrs	r2, r1
 80053fa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d112      	bne.n	8005428 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005402:	4b6b      	ldr	r3, [pc, #428]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a6e      	ldr	r2, [pc, #440]	; (80055c0 <HAL_RCC_OscConfig+0x33c>)
 8005408:	4013      	ands	r3, r2
 800540a:	0019      	movs	r1, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691a      	ldr	r2, [r3, #16]
 8005410:	4b67      	ldr	r3, [pc, #412]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005412:	430a      	orrs	r2, r1
 8005414:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005416:	4b66      	ldr	r3, [pc, #408]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	0adb      	lsrs	r3, r3, #11
 800541c:	2207      	movs	r2, #7
 800541e:	4013      	ands	r3, r2
 8005420:	4a68      	ldr	r2, [pc, #416]	; (80055c4 <HAL_RCC_OscConfig+0x340>)
 8005422:	40da      	lsrs	r2, r3
 8005424:	4b68      	ldr	r3, [pc, #416]	; (80055c8 <HAL_RCC_OscConfig+0x344>)
 8005426:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005428:	4b68      	ldr	r3, [pc, #416]	; (80055cc <HAL_RCC_OscConfig+0x348>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	0018      	movs	r0, r3
 800542e:	f7fd ffcb 	bl	80033c8 <HAL_InitTick>
 8005432:	1e03      	subs	r3, r0, #0
 8005434:	d051      	beq.n	80054da <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e221      	b.n	800587e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d030      	beq.n	80054a4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005442:	4b5b      	ldr	r3, [pc, #364]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a5e      	ldr	r2, [pc, #376]	; (80055c0 <HAL_RCC_OscConfig+0x33c>)
 8005448:	4013      	ands	r3, r2
 800544a:	0019      	movs	r1, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	4b57      	ldr	r3, [pc, #348]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005452:	430a      	orrs	r2, r1
 8005454:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005456:	4b56      	ldr	r3, [pc, #344]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	4b55      	ldr	r3, [pc, #340]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800545c:	2180      	movs	r1, #128	; 0x80
 800545e:	0049      	lsls	r1, r1, #1
 8005460:	430a      	orrs	r2, r1
 8005462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005464:	f7fe ff44 	bl	80042f0 <HAL_GetTick>
 8005468:	0003      	movs	r3, r0
 800546a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800546c:	e008      	b.n	8005480 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800546e:	f7fe ff3f 	bl	80042f0 <HAL_GetTick>
 8005472:	0002      	movs	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e1fe      	b.n	800587e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005480:	4b4b      	ldr	r3, [pc, #300]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	2380      	movs	r3, #128	; 0x80
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	4013      	ands	r3, r2
 800548a:	d0f0      	beq.n	800546e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800548c:	4b48      	ldr	r3, [pc, #288]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	4a4a      	ldr	r2, [pc, #296]	; (80055bc <HAL_RCC_OscConfig+0x338>)
 8005492:	4013      	ands	r3, r2
 8005494:	0019      	movs	r1, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	021a      	lsls	r2, r3, #8
 800549c:	4b44      	ldr	r3, [pc, #272]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800549e:	430a      	orrs	r2, r1
 80054a0:	605a      	str	r2, [r3, #4]
 80054a2:	e01b      	b.n	80054dc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80054a4:	4b42      	ldr	r3, [pc, #264]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	4b41      	ldr	r3, [pc, #260]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80054aa:	4949      	ldr	r1, [pc, #292]	; (80055d0 <HAL_RCC_OscConfig+0x34c>)
 80054ac:	400a      	ands	r2, r1
 80054ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b0:	f7fe ff1e 	bl	80042f0 <HAL_GetTick>
 80054b4:	0003      	movs	r3, r0
 80054b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054b8:	e008      	b.n	80054cc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054ba:	f7fe ff19 	bl	80042f0 <HAL_GetTick>
 80054be:	0002      	movs	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e1d8      	b.n	800587e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054cc:	4b38      	ldr	r3, [pc, #224]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	2380      	movs	r3, #128	; 0x80
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	4013      	ands	r3, r2
 80054d6:	d1f0      	bne.n	80054ba <HAL_RCC_OscConfig+0x236>
 80054d8:	e000      	b.n	80054dc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054da:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2208      	movs	r2, #8
 80054e2:	4013      	ands	r3, r2
 80054e4:	d047      	beq.n	8005576 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80054e6:	4b32      	ldr	r3, [pc, #200]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	2238      	movs	r2, #56	; 0x38
 80054ec:	4013      	ands	r3, r2
 80054ee:	2b18      	cmp	r3, #24
 80054f0:	d10a      	bne.n	8005508 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80054f2:	4b2f      	ldr	r3, [pc, #188]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80054f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f6:	2202      	movs	r2, #2
 80054f8:	4013      	ands	r3, r2
 80054fa:	d03c      	beq.n	8005576 <HAL_RCC_OscConfig+0x2f2>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d138      	bne.n	8005576 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e1ba      	b.n	800587e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d019      	beq.n	8005544 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005510:	4b27      	ldr	r3, [pc, #156]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005512:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005514:	4b26      	ldr	r3, [pc, #152]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005516:	2101      	movs	r1, #1
 8005518:	430a      	orrs	r2, r1
 800551a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551c:	f7fe fee8 	bl	80042f0 <HAL_GetTick>
 8005520:	0003      	movs	r3, r0
 8005522:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005526:	f7fe fee3 	bl	80042f0 <HAL_GetTick>
 800552a:	0002      	movs	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e1a2      	b.n	800587e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005538:	4b1d      	ldr	r3, [pc, #116]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800553a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553c:	2202      	movs	r2, #2
 800553e:	4013      	ands	r3, r2
 8005540:	d0f1      	beq.n	8005526 <HAL_RCC_OscConfig+0x2a2>
 8005542:	e018      	b.n	8005576 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005544:	4b1a      	ldr	r3, [pc, #104]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005546:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005548:	4b19      	ldr	r3, [pc, #100]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800554a:	2101      	movs	r1, #1
 800554c:	438a      	bics	r2, r1
 800554e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005550:	f7fe fece 	bl	80042f0 <HAL_GetTick>
 8005554:	0003      	movs	r3, r0
 8005556:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800555a:	f7fe fec9 	bl	80042f0 <HAL_GetTick>
 800555e:	0002      	movs	r2, r0
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e188      	b.n	800587e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800556c:	4b10      	ldr	r3, [pc, #64]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800556e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005570:	2202      	movs	r2, #2
 8005572:	4013      	ands	r3, r2
 8005574:	d1f1      	bne.n	800555a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2204      	movs	r2, #4
 800557c:	4013      	ands	r3, r2
 800557e:	d100      	bne.n	8005582 <HAL_RCC_OscConfig+0x2fe>
 8005580:	e0c6      	b.n	8005710 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005582:	231f      	movs	r3, #31
 8005584:	18fb      	adds	r3, r7, r3
 8005586:	2200      	movs	r2, #0
 8005588:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800558a:	4b09      	ldr	r3, [pc, #36]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	2238      	movs	r2, #56	; 0x38
 8005590:	4013      	ands	r3, r2
 8005592:	2b20      	cmp	r3, #32
 8005594:	d11e      	bne.n	80055d4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005596:	4b06      	ldr	r3, [pc, #24]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800559a:	2202      	movs	r2, #2
 800559c:	4013      	ands	r3, r2
 800559e:	d100      	bne.n	80055a2 <HAL_RCC_OscConfig+0x31e>
 80055a0:	e0b6      	b.n	8005710 <HAL_RCC_OscConfig+0x48c>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d000      	beq.n	80055ac <HAL_RCC_OscConfig+0x328>
 80055aa:	e0b1      	b.n	8005710 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e166      	b.n	800587e <HAL_RCC_OscConfig+0x5fa>
 80055b0:	40021000 	.word	0x40021000
 80055b4:	fffeffff 	.word	0xfffeffff
 80055b8:	fffbffff 	.word	0xfffbffff
 80055bc:	ffff80ff 	.word	0xffff80ff
 80055c0:	ffffc7ff 	.word	0xffffc7ff
 80055c4:	00f42400 	.word	0x00f42400
 80055c8:	20000000 	.word	0x20000000
 80055cc:	20000004 	.word	0x20000004
 80055d0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055d4:	4bac      	ldr	r3, [pc, #688]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 80055d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055d8:	2380      	movs	r3, #128	; 0x80
 80055da:	055b      	lsls	r3, r3, #21
 80055dc:	4013      	ands	r3, r2
 80055de:	d101      	bne.n	80055e4 <HAL_RCC_OscConfig+0x360>
 80055e0:	2301      	movs	r3, #1
 80055e2:	e000      	b.n	80055e6 <HAL_RCC_OscConfig+0x362>
 80055e4:	2300      	movs	r3, #0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d011      	beq.n	800560e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80055ea:	4ba7      	ldr	r3, [pc, #668]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 80055ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055ee:	4ba6      	ldr	r3, [pc, #664]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 80055f0:	2180      	movs	r1, #128	; 0x80
 80055f2:	0549      	lsls	r1, r1, #21
 80055f4:	430a      	orrs	r2, r1
 80055f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80055f8:	4ba3      	ldr	r3, [pc, #652]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 80055fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055fc:	2380      	movs	r3, #128	; 0x80
 80055fe:	055b      	lsls	r3, r3, #21
 8005600:	4013      	ands	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005606:	231f      	movs	r3, #31
 8005608:	18fb      	adds	r3, r7, r3
 800560a:	2201      	movs	r2, #1
 800560c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800560e:	4b9f      	ldr	r3, [pc, #636]	; (800588c <HAL_RCC_OscConfig+0x608>)
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	2380      	movs	r3, #128	; 0x80
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	4013      	ands	r3, r2
 8005618:	d11a      	bne.n	8005650 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800561a:	4b9c      	ldr	r3, [pc, #624]	; (800588c <HAL_RCC_OscConfig+0x608>)
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	4b9b      	ldr	r3, [pc, #620]	; (800588c <HAL_RCC_OscConfig+0x608>)
 8005620:	2180      	movs	r1, #128	; 0x80
 8005622:	0049      	lsls	r1, r1, #1
 8005624:	430a      	orrs	r2, r1
 8005626:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005628:	f7fe fe62 	bl	80042f0 <HAL_GetTick>
 800562c:	0003      	movs	r3, r0
 800562e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005630:	e008      	b.n	8005644 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005632:	f7fe fe5d 	bl	80042f0 <HAL_GetTick>
 8005636:	0002      	movs	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d901      	bls.n	8005644 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e11c      	b.n	800587e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005644:	4b91      	ldr	r3, [pc, #580]	; (800588c <HAL_RCC_OscConfig+0x608>)
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	2380      	movs	r3, #128	; 0x80
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	4013      	ands	r3, r2
 800564e:	d0f0      	beq.n	8005632 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d106      	bne.n	8005666 <HAL_RCC_OscConfig+0x3e2>
 8005658:	4b8b      	ldr	r3, [pc, #556]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 800565a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800565c:	4b8a      	ldr	r3, [pc, #552]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 800565e:	2101      	movs	r1, #1
 8005660:	430a      	orrs	r2, r1
 8005662:	65da      	str	r2, [r3, #92]	; 0x5c
 8005664:	e01c      	b.n	80056a0 <HAL_RCC_OscConfig+0x41c>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	2b05      	cmp	r3, #5
 800566c:	d10c      	bne.n	8005688 <HAL_RCC_OscConfig+0x404>
 800566e:	4b86      	ldr	r3, [pc, #536]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 8005670:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005672:	4b85      	ldr	r3, [pc, #532]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 8005674:	2104      	movs	r1, #4
 8005676:	430a      	orrs	r2, r1
 8005678:	65da      	str	r2, [r3, #92]	; 0x5c
 800567a:	4b83      	ldr	r3, [pc, #524]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 800567c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800567e:	4b82      	ldr	r3, [pc, #520]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 8005680:	2101      	movs	r1, #1
 8005682:	430a      	orrs	r2, r1
 8005684:	65da      	str	r2, [r3, #92]	; 0x5c
 8005686:	e00b      	b.n	80056a0 <HAL_RCC_OscConfig+0x41c>
 8005688:	4b7f      	ldr	r3, [pc, #508]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 800568a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800568c:	4b7e      	ldr	r3, [pc, #504]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 800568e:	2101      	movs	r1, #1
 8005690:	438a      	bics	r2, r1
 8005692:	65da      	str	r2, [r3, #92]	; 0x5c
 8005694:	4b7c      	ldr	r3, [pc, #496]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 8005696:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005698:	4b7b      	ldr	r3, [pc, #492]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 800569a:	2104      	movs	r1, #4
 800569c:	438a      	bics	r2, r1
 800569e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d014      	beq.n	80056d2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a8:	f7fe fe22 	bl	80042f0 <HAL_GetTick>
 80056ac:	0003      	movs	r3, r0
 80056ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056b0:	e009      	b.n	80056c6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056b2:	f7fe fe1d 	bl	80042f0 <HAL_GetTick>
 80056b6:	0002      	movs	r2, r0
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	4a74      	ldr	r2, [pc, #464]	; (8005890 <HAL_RCC_OscConfig+0x60c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e0db      	b.n	800587e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056c6:	4b70      	ldr	r3, [pc, #448]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 80056c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ca:	2202      	movs	r2, #2
 80056cc:	4013      	ands	r3, r2
 80056ce:	d0f0      	beq.n	80056b2 <HAL_RCC_OscConfig+0x42e>
 80056d0:	e013      	b.n	80056fa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d2:	f7fe fe0d 	bl	80042f0 <HAL_GetTick>
 80056d6:	0003      	movs	r3, r0
 80056d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056da:	e009      	b.n	80056f0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056dc:	f7fe fe08 	bl	80042f0 <HAL_GetTick>
 80056e0:	0002      	movs	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	4a6a      	ldr	r2, [pc, #424]	; (8005890 <HAL_RCC_OscConfig+0x60c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e0c6      	b.n	800587e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056f0:	4b65      	ldr	r3, [pc, #404]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 80056f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f4:	2202      	movs	r2, #2
 80056f6:	4013      	ands	r3, r2
 80056f8:	d1f0      	bne.n	80056dc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80056fa:	231f      	movs	r3, #31
 80056fc:	18fb      	adds	r3, r7, r3
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d105      	bne.n	8005710 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005704:	4b60      	ldr	r3, [pc, #384]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 8005706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005708:	4b5f      	ldr	r3, [pc, #380]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 800570a:	4962      	ldr	r1, [pc, #392]	; (8005894 <HAL_RCC_OscConfig+0x610>)
 800570c:	400a      	ands	r2, r1
 800570e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d100      	bne.n	800571a <HAL_RCC_OscConfig+0x496>
 8005718:	e0b0      	b.n	800587c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800571a:	4b5b      	ldr	r3, [pc, #364]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	2238      	movs	r2, #56	; 0x38
 8005720:	4013      	ands	r3, r2
 8005722:	2b10      	cmp	r3, #16
 8005724:	d100      	bne.n	8005728 <HAL_RCC_OscConfig+0x4a4>
 8005726:	e078      	b.n	800581a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	2b02      	cmp	r3, #2
 800572e:	d153      	bne.n	80057d8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005730:	4b55      	ldr	r3, [pc, #340]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	4b54      	ldr	r3, [pc, #336]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 8005736:	4958      	ldr	r1, [pc, #352]	; (8005898 <HAL_RCC_OscConfig+0x614>)
 8005738:	400a      	ands	r2, r1
 800573a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573c:	f7fe fdd8 	bl	80042f0 <HAL_GetTick>
 8005740:	0003      	movs	r3, r0
 8005742:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005744:	e008      	b.n	8005758 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005746:	f7fe fdd3 	bl	80042f0 <HAL_GetTick>
 800574a:	0002      	movs	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e092      	b.n	800587e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005758:	4b4b      	ldr	r3, [pc, #300]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	2380      	movs	r3, #128	; 0x80
 800575e:	049b      	lsls	r3, r3, #18
 8005760:	4013      	ands	r3, r2
 8005762:	d1f0      	bne.n	8005746 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005764:	4b48      	ldr	r3, [pc, #288]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	4a4c      	ldr	r2, [pc, #304]	; (800589c <HAL_RCC_OscConfig+0x618>)
 800576a:	4013      	ands	r3, r2
 800576c:	0019      	movs	r1, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1a      	ldr	r2, [r3, #32]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	431a      	orrs	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578a:	431a      	orrs	r2, r3
 800578c:	4b3e      	ldr	r3, [pc, #248]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 800578e:	430a      	orrs	r2, r1
 8005790:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005792:	4b3d      	ldr	r3, [pc, #244]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	4b3c      	ldr	r3, [pc, #240]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 8005798:	2180      	movs	r1, #128	; 0x80
 800579a:	0449      	lsls	r1, r1, #17
 800579c:	430a      	orrs	r2, r1
 800579e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80057a0:	4b39      	ldr	r3, [pc, #228]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 80057a2:	68da      	ldr	r2, [r3, #12]
 80057a4:	4b38      	ldr	r3, [pc, #224]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 80057a6:	2180      	movs	r1, #128	; 0x80
 80057a8:	0549      	lsls	r1, r1, #21
 80057aa:	430a      	orrs	r2, r1
 80057ac:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ae:	f7fe fd9f 	bl	80042f0 <HAL_GetTick>
 80057b2:	0003      	movs	r3, r0
 80057b4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b8:	f7fe fd9a 	bl	80042f0 <HAL_GetTick>
 80057bc:	0002      	movs	r2, r0
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e059      	b.n	800587e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057ca:	4b2f      	ldr	r3, [pc, #188]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	2380      	movs	r3, #128	; 0x80
 80057d0:	049b      	lsls	r3, r3, #18
 80057d2:	4013      	ands	r3, r2
 80057d4:	d0f0      	beq.n	80057b8 <HAL_RCC_OscConfig+0x534>
 80057d6:	e051      	b.n	800587c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057d8:	4b2b      	ldr	r3, [pc, #172]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	4b2a      	ldr	r3, [pc, #168]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 80057de:	492e      	ldr	r1, [pc, #184]	; (8005898 <HAL_RCC_OscConfig+0x614>)
 80057e0:	400a      	ands	r2, r1
 80057e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e4:	f7fe fd84 	bl	80042f0 <HAL_GetTick>
 80057e8:	0003      	movs	r3, r0
 80057ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057ec:	e008      	b.n	8005800 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ee:	f7fe fd7f 	bl	80042f0 <HAL_GetTick>
 80057f2:	0002      	movs	r2, r0
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e03e      	b.n	800587e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005800:	4b21      	ldr	r3, [pc, #132]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	2380      	movs	r3, #128	; 0x80
 8005806:	049b      	lsls	r3, r3, #18
 8005808:	4013      	ands	r3, r2
 800580a:	d1f0      	bne.n	80057ee <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800580c:	4b1e      	ldr	r3, [pc, #120]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	4b1d      	ldr	r3, [pc, #116]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 8005812:	4923      	ldr	r1, [pc, #140]	; (80058a0 <HAL_RCC_OscConfig+0x61c>)
 8005814:	400a      	ands	r2, r1
 8005816:	60da      	str	r2, [r3, #12]
 8005818:	e030      	b.n	800587c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d101      	bne.n	8005826 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e02b      	b.n	800587e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005826:	4b18      	ldr	r3, [pc, #96]	; (8005888 <HAL_RCC_OscConfig+0x604>)
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2203      	movs	r2, #3
 8005830:	401a      	ands	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	429a      	cmp	r2, r3
 8005838:	d11e      	bne.n	8005878 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2270      	movs	r2, #112	; 0x70
 800583e:	401a      	ands	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005844:	429a      	cmp	r2, r3
 8005846:	d117      	bne.n	8005878 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	23fe      	movs	r3, #254	; 0xfe
 800584c:	01db      	lsls	r3, r3, #7
 800584e:	401a      	ands	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005854:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005856:	429a      	cmp	r2, r3
 8005858:	d10e      	bne.n	8005878 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	23f8      	movs	r3, #248	; 0xf8
 800585e:	039b      	lsls	r3, r3, #14
 8005860:	401a      	ands	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005866:	429a      	cmp	r2, r3
 8005868:	d106      	bne.n	8005878 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	0f5b      	lsrs	r3, r3, #29
 800586e:	075a      	lsls	r2, r3, #29
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005874:	429a      	cmp	r2, r3
 8005876:	d001      	beq.n	800587c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	0018      	movs	r0, r3
 8005880:	46bd      	mov	sp, r7
 8005882:	b008      	add	sp, #32
 8005884:	bd80      	pop	{r7, pc}
 8005886:	46c0      	nop			; (mov r8, r8)
 8005888:	40021000 	.word	0x40021000
 800588c:	40007000 	.word	0x40007000
 8005890:	00001388 	.word	0x00001388
 8005894:	efffffff 	.word	0xefffffff
 8005898:	feffffff 	.word	0xfeffffff
 800589c:	1fc1808c 	.word	0x1fc1808c
 80058a0:	effefffc 	.word	0xeffefffc

080058a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e0e9      	b.n	8005a8c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058b8:	4b76      	ldr	r3, [pc, #472]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2207      	movs	r2, #7
 80058be:	4013      	ands	r3, r2
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d91e      	bls.n	8005904 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058c6:	4b73      	ldr	r3, [pc, #460]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2207      	movs	r2, #7
 80058cc:	4393      	bics	r3, r2
 80058ce:	0019      	movs	r1, r3
 80058d0:	4b70      	ldr	r3, [pc, #448]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058d8:	f7fe fd0a 	bl	80042f0 <HAL_GetTick>
 80058dc:	0003      	movs	r3, r0
 80058de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80058e0:	e009      	b.n	80058f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058e2:	f7fe fd05 	bl	80042f0 <HAL_GetTick>
 80058e6:	0002      	movs	r2, r0
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	4a6a      	ldr	r2, [pc, #424]	; (8005a98 <HAL_RCC_ClockConfig+0x1f4>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e0ca      	b.n	8005a8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80058f6:	4b67      	ldr	r3, [pc, #412]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2207      	movs	r2, #7
 80058fc:	4013      	ands	r3, r2
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d1ee      	bne.n	80058e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2202      	movs	r2, #2
 800590a:	4013      	ands	r3, r2
 800590c:	d015      	beq.n	800593a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2204      	movs	r2, #4
 8005914:	4013      	ands	r3, r2
 8005916:	d006      	beq.n	8005926 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005918:	4b60      	ldr	r3, [pc, #384]	; (8005a9c <HAL_RCC_ClockConfig+0x1f8>)
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	4b5f      	ldr	r3, [pc, #380]	; (8005a9c <HAL_RCC_ClockConfig+0x1f8>)
 800591e:	21e0      	movs	r1, #224	; 0xe0
 8005920:	01c9      	lsls	r1, r1, #7
 8005922:	430a      	orrs	r2, r1
 8005924:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005926:	4b5d      	ldr	r3, [pc, #372]	; (8005a9c <HAL_RCC_ClockConfig+0x1f8>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	4a5d      	ldr	r2, [pc, #372]	; (8005aa0 <HAL_RCC_ClockConfig+0x1fc>)
 800592c:	4013      	ands	r3, r2
 800592e:	0019      	movs	r1, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	4b59      	ldr	r3, [pc, #356]	; (8005a9c <HAL_RCC_ClockConfig+0x1f8>)
 8005936:	430a      	orrs	r2, r1
 8005938:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2201      	movs	r2, #1
 8005940:	4013      	ands	r3, r2
 8005942:	d057      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d107      	bne.n	800595c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800594c:	4b53      	ldr	r3, [pc, #332]	; (8005a9c <HAL_RCC_ClockConfig+0x1f8>)
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	2380      	movs	r3, #128	; 0x80
 8005952:	029b      	lsls	r3, r3, #10
 8005954:	4013      	ands	r3, r2
 8005956:	d12b      	bne.n	80059b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e097      	b.n	8005a8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	2b02      	cmp	r3, #2
 8005962:	d107      	bne.n	8005974 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005964:	4b4d      	ldr	r3, [pc, #308]	; (8005a9c <HAL_RCC_ClockConfig+0x1f8>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	2380      	movs	r3, #128	; 0x80
 800596a:	049b      	lsls	r3, r3, #18
 800596c:	4013      	ands	r3, r2
 800596e:	d11f      	bne.n	80059b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e08b      	b.n	8005a8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d107      	bne.n	800598c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800597c:	4b47      	ldr	r3, [pc, #284]	; (8005a9c <HAL_RCC_ClockConfig+0x1f8>)
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	2380      	movs	r3, #128	; 0x80
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	4013      	ands	r3, r2
 8005986:	d113      	bne.n	80059b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e07f      	b.n	8005a8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	2b03      	cmp	r3, #3
 8005992:	d106      	bne.n	80059a2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005994:	4b41      	ldr	r3, [pc, #260]	; (8005a9c <HAL_RCC_ClockConfig+0x1f8>)
 8005996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005998:	2202      	movs	r2, #2
 800599a:	4013      	ands	r3, r2
 800599c:	d108      	bne.n	80059b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e074      	b.n	8005a8c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059a2:	4b3e      	ldr	r3, [pc, #248]	; (8005a9c <HAL_RCC_ClockConfig+0x1f8>)
 80059a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a6:	2202      	movs	r2, #2
 80059a8:	4013      	ands	r3, r2
 80059aa:	d101      	bne.n	80059b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e06d      	b.n	8005a8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059b0:	4b3a      	ldr	r3, [pc, #232]	; (8005a9c <HAL_RCC_ClockConfig+0x1f8>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	2207      	movs	r2, #7
 80059b6:	4393      	bics	r3, r2
 80059b8:	0019      	movs	r1, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	4b37      	ldr	r3, [pc, #220]	; (8005a9c <HAL_RCC_ClockConfig+0x1f8>)
 80059c0:	430a      	orrs	r2, r1
 80059c2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059c4:	f7fe fc94 	bl	80042f0 <HAL_GetTick>
 80059c8:	0003      	movs	r3, r0
 80059ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059cc:	e009      	b.n	80059e2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059ce:	f7fe fc8f 	bl	80042f0 <HAL_GetTick>
 80059d2:	0002      	movs	r2, r0
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	4a2f      	ldr	r2, [pc, #188]	; (8005a98 <HAL_RCC_ClockConfig+0x1f4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e054      	b.n	8005a8c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e2:	4b2e      	ldr	r3, [pc, #184]	; (8005a9c <HAL_RCC_ClockConfig+0x1f8>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	2238      	movs	r2, #56	; 0x38
 80059e8:	401a      	ands	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d1ec      	bne.n	80059ce <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059f4:	4b27      	ldr	r3, [pc, #156]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2207      	movs	r2, #7
 80059fa:	4013      	ands	r3, r2
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d21e      	bcs.n	8005a40 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a02:	4b24      	ldr	r3, [pc, #144]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2207      	movs	r2, #7
 8005a08:	4393      	bics	r3, r2
 8005a0a:	0019      	movs	r1, r3
 8005a0c:	4b21      	ldr	r3, [pc, #132]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a14:	f7fe fc6c 	bl	80042f0 <HAL_GetTick>
 8005a18:	0003      	movs	r3, r0
 8005a1a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a1c:	e009      	b.n	8005a32 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a1e:	f7fe fc67 	bl	80042f0 <HAL_GetTick>
 8005a22:	0002      	movs	r2, r0
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	4a1b      	ldr	r2, [pc, #108]	; (8005a98 <HAL_RCC_ClockConfig+0x1f4>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e02c      	b.n	8005a8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a32:	4b18      	ldr	r3, [pc, #96]	; (8005a94 <HAL_RCC_ClockConfig+0x1f0>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2207      	movs	r2, #7
 8005a38:	4013      	ands	r3, r2
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d1ee      	bne.n	8005a1e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2204      	movs	r2, #4
 8005a46:	4013      	ands	r3, r2
 8005a48:	d009      	beq.n	8005a5e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005a4a:	4b14      	ldr	r3, [pc, #80]	; (8005a9c <HAL_RCC_ClockConfig+0x1f8>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	4a15      	ldr	r2, [pc, #84]	; (8005aa4 <HAL_RCC_ClockConfig+0x200>)
 8005a50:	4013      	ands	r3, r2
 8005a52:	0019      	movs	r1, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68da      	ldr	r2, [r3, #12]
 8005a58:	4b10      	ldr	r3, [pc, #64]	; (8005a9c <HAL_RCC_ClockConfig+0x1f8>)
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005a5e:	f000 f829 	bl	8005ab4 <HAL_RCC_GetSysClockFreq>
 8005a62:	0001      	movs	r1, r0
 8005a64:	4b0d      	ldr	r3, [pc, #52]	; (8005a9c <HAL_RCC_ClockConfig+0x1f8>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	0a1b      	lsrs	r3, r3, #8
 8005a6a:	220f      	movs	r2, #15
 8005a6c:	401a      	ands	r2, r3
 8005a6e:	4b0e      	ldr	r3, [pc, #56]	; (8005aa8 <HAL_RCC_ClockConfig+0x204>)
 8005a70:	0092      	lsls	r2, r2, #2
 8005a72:	58d3      	ldr	r3, [r2, r3]
 8005a74:	221f      	movs	r2, #31
 8005a76:	4013      	ands	r3, r2
 8005a78:	000a      	movs	r2, r1
 8005a7a:	40da      	lsrs	r2, r3
 8005a7c:	4b0b      	ldr	r3, [pc, #44]	; (8005aac <HAL_RCC_ClockConfig+0x208>)
 8005a7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005a80:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <HAL_RCC_ClockConfig+0x20c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	0018      	movs	r0, r3
 8005a86:	f7fd fc9f 	bl	80033c8 <HAL_InitTick>
 8005a8a:	0003      	movs	r3, r0
}
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	b004      	add	sp, #16
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	40022000 	.word	0x40022000
 8005a98:	00001388 	.word	0x00001388
 8005a9c:	40021000 	.word	0x40021000
 8005aa0:	fffff0ff 	.word	0xfffff0ff
 8005aa4:	ffff8fff 	.word	0xffff8fff
 8005aa8:	0800ce28 	.word	0x0800ce28
 8005aac:	20000000 	.word	0x20000000
 8005ab0:	20000004 	.word	0x20000004

08005ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005aba:	4b3c      	ldr	r3, [pc, #240]	; (8005bac <HAL_RCC_GetSysClockFreq+0xf8>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	2238      	movs	r2, #56	; 0x38
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	d10f      	bne.n	8005ae4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005ac4:	4b39      	ldr	r3, [pc, #228]	; (8005bac <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	0adb      	lsrs	r3, r3, #11
 8005aca:	2207      	movs	r2, #7
 8005acc:	4013      	ands	r3, r2
 8005ace:	2201      	movs	r2, #1
 8005ad0:	409a      	lsls	r2, r3
 8005ad2:	0013      	movs	r3, r2
 8005ad4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005ad6:	6839      	ldr	r1, [r7, #0]
 8005ad8:	4835      	ldr	r0, [pc, #212]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005ada:	f7fa fb1f 	bl	800011c <__udivsi3>
 8005ade:	0003      	movs	r3, r0
 8005ae0:	613b      	str	r3, [r7, #16]
 8005ae2:	e05d      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ae4:	4b31      	ldr	r3, [pc, #196]	; (8005bac <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	2238      	movs	r2, #56	; 0x38
 8005aea:	4013      	ands	r3, r2
 8005aec:	2b08      	cmp	r3, #8
 8005aee:	d102      	bne.n	8005af6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005af0:	4b30      	ldr	r3, [pc, #192]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005af2:	613b      	str	r3, [r7, #16]
 8005af4:	e054      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005af6:	4b2d      	ldr	r3, [pc, #180]	; (8005bac <HAL_RCC_GetSysClockFreq+0xf8>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	2238      	movs	r2, #56	; 0x38
 8005afc:	4013      	ands	r3, r2
 8005afe:	2b10      	cmp	r3, #16
 8005b00:	d138      	bne.n	8005b74 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005b02:	4b2a      	ldr	r3, [pc, #168]	; (8005bac <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	2203      	movs	r2, #3
 8005b08:	4013      	ands	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b0c:	4b27      	ldr	r3, [pc, #156]	; (8005bac <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	091b      	lsrs	r3, r3, #4
 8005b12:	2207      	movs	r2, #7
 8005b14:	4013      	ands	r3, r2
 8005b16:	3301      	adds	r3, #1
 8005b18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	d10d      	bne.n	8005b3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b20:	68b9      	ldr	r1, [r7, #8]
 8005b22:	4824      	ldr	r0, [pc, #144]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005b24:	f7fa fafa 	bl	800011c <__udivsi3>
 8005b28:	0003      	movs	r3, r0
 8005b2a:	0019      	movs	r1, r3
 8005b2c:	4b1f      	ldr	r3, [pc, #124]	; (8005bac <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	0a1b      	lsrs	r3, r3, #8
 8005b32:	227f      	movs	r2, #127	; 0x7f
 8005b34:	4013      	ands	r3, r2
 8005b36:	434b      	muls	r3, r1
 8005b38:	617b      	str	r3, [r7, #20]
        break;
 8005b3a:	e00d      	b.n	8005b58 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	481c      	ldr	r0, [pc, #112]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005b40:	f7fa faec 	bl	800011c <__udivsi3>
 8005b44:	0003      	movs	r3, r0
 8005b46:	0019      	movs	r1, r3
 8005b48:	4b18      	ldr	r3, [pc, #96]	; (8005bac <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	0a1b      	lsrs	r3, r3, #8
 8005b4e:	227f      	movs	r2, #127	; 0x7f
 8005b50:	4013      	ands	r3, r2
 8005b52:	434b      	muls	r3, r1
 8005b54:	617b      	str	r3, [r7, #20]
        break;
 8005b56:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005b58:	4b14      	ldr	r3, [pc, #80]	; (8005bac <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	0f5b      	lsrs	r3, r3, #29
 8005b5e:	2207      	movs	r2, #7
 8005b60:	4013      	ands	r3, r2
 8005b62:	3301      	adds	r3, #1
 8005b64:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005b66:	6879      	ldr	r1, [r7, #4]
 8005b68:	6978      	ldr	r0, [r7, #20]
 8005b6a:	f7fa fad7 	bl	800011c <__udivsi3>
 8005b6e:	0003      	movs	r3, r0
 8005b70:	613b      	str	r3, [r7, #16]
 8005b72:	e015      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005b74:	4b0d      	ldr	r3, [pc, #52]	; (8005bac <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	2238      	movs	r2, #56	; 0x38
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	d103      	bne.n	8005b88 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005b80:	2380      	movs	r3, #128	; 0x80
 8005b82:	021b      	lsls	r3, r3, #8
 8005b84:	613b      	str	r3, [r7, #16]
 8005b86:	e00b      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005b88:	4b08      	ldr	r3, [pc, #32]	; (8005bac <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	2238      	movs	r2, #56	; 0x38
 8005b8e:	4013      	ands	r3, r2
 8005b90:	2b18      	cmp	r3, #24
 8005b92:	d103      	bne.n	8005b9c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005b94:	23fa      	movs	r3, #250	; 0xfa
 8005b96:	01db      	lsls	r3, r3, #7
 8005b98:	613b      	str	r3, [r7, #16]
 8005b9a:	e001      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ba0:	693b      	ldr	r3, [r7, #16]
}
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	b006      	add	sp, #24
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	46c0      	nop			; (mov r8, r8)
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	00f42400 	.word	0x00f42400
 8005bb4:	007a1200 	.word	0x007a1200

08005bb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bbc:	4b02      	ldr	r3, [pc, #8]	; (8005bc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
}
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	46c0      	nop			; (mov r8, r8)
 8005bc8:	20000000 	.word	0x20000000

08005bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bcc:	b5b0      	push	{r4, r5, r7, lr}
 8005bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005bd0:	f7ff fff2 	bl	8005bb8 <HAL_RCC_GetHCLKFreq>
 8005bd4:	0004      	movs	r4, r0
 8005bd6:	f7ff fb49 	bl	800526c <LL_RCC_GetAPB1Prescaler>
 8005bda:	0003      	movs	r3, r0
 8005bdc:	0b1a      	lsrs	r2, r3, #12
 8005bde:	4b05      	ldr	r3, [pc, #20]	; (8005bf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005be0:	0092      	lsls	r2, r2, #2
 8005be2:	58d3      	ldr	r3, [r2, r3]
 8005be4:	221f      	movs	r2, #31
 8005be6:	4013      	ands	r3, r2
 8005be8:	40dc      	lsrs	r4, r3
 8005bea:	0023      	movs	r3, r4
}
 8005bec:	0018      	movs	r0, r3
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8005bf2:	46c0      	nop			; (mov r8, r8)
 8005bf4:	0800ce68 	.word	0x0800ce68

08005bf8 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2207      	movs	r2, #7
 8005c06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c08:	4b0e      	ldr	r3, [pc, #56]	; (8005c44 <HAL_RCC_GetClockConfig+0x4c>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	2207      	movs	r2, #7
 8005c0e:	401a      	ands	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005c14:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <HAL_RCC_GetClockConfig+0x4c>)
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	23f0      	movs	r3, #240	; 0xf0
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	401a      	ands	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8005c22:	4b08      	ldr	r3, [pc, #32]	; (8005c44 <HAL_RCC_GetClockConfig+0x4c>)
 8005c24:	689a      	ldr	r2, [r3, #8]
 8005c26:	23e0      	movs	r3, #224	; 0xe0
 8005c28:	01db      	lsls	r3, r3, #7
 8005c2a:	401a      	ands	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c30:	4b05      	ldr	r3, [pc, #20]	; (8005c48 <HAL_RCC_GetClockConfig+0x50>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2207      	movs	r2, #7
 8005c36:	401a      	ands	r2, r3
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	601a      	str	r2, [r3, #0]
}
 8005c3c:	46c0      	nop			; (mov r8, r8)
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	b002      	add	sp, #8
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	40021000 	.word	0x40021000
 8005c48:	40022000 	.word	0x40022000

08005c4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005c54:	2313      	movs	r3, #19
 8005c56:	18fb      	adds	r3, r7, r3
 8005c58:	2200      	movs	r2, #0
 8005c5a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c5c:	2312      	movs	r3, #18
 8005c5e:	18fb      	adds	r3, r7, r3
 8005c60:	2200      	movs	r2, #0
 8005c62:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	2380      	movs	r3, #128	; 0x80
 8005c6a:	029b      	lsls	r3, r3, #10
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	d100      	bne.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005c70:	e0a3      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c72:	2011      	movs	r0, #17
 8005c74:	183b      	adds	r3, r7, r0
 8005c76:	2200      	movs	r2, #0
 8005c78:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c7a:	4b86      	ldr	r3, [pc, #536]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005c7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c7e:	2380      	movs	r3, #128	; 0x80
 8005c80:	055b      	lsls	r3, r3, #21
 8005c82:	4013      	ands	r3, r2
 8005c84:	d110      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c86:	4b83      	ldr	r3, [pc, #524]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005c88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c8a:	4b82      	ldr	r3, [pc, #520]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005c8c:	2180      	movs	r1, #128	; 0x80
 8005c8e:	0549      	lsls	r1, r1, #21
 8005c90:	430a      	orrs	r2, r1
 8005c92:	63da      	str	r2, [r3, #60]	; 0x3c
 8005c94:	4b7f      	ldr	r3, [pc, #508]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c98:	2380      	movs	r3, #128	; 0x80
 8005c9a:	055b      	lsls	r3, r3, #21
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	60bb      	str	r3, [r7, #8]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ca2:	183b      	adds	r3, r7, r0
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ca8:	4b7b      	ldr	r3, [pc, #492]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	4b7a      	ldr	r3, [pc, #488]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005cae:	2180      	movs	r1, #128	; 0x80
 8005cb0:	0049      	lsls	r1, r1, #1
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cb6:	f7fe fb1b 	bl	80042f0 <HAL_GetTick>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cbe:	e00b      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cc0:	f7fe fb16 	bl	80042f0 <HAL_GetTick>
 8005cc4:	0002      	movs	r2, r0
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d904      	bls.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005cce:	2313      	movs	r3, #19
 8005cd0:	18fb      	adds	r3, r7, r3
 8005cd2:	2203      	movs	r2, #3
 8005cd4:	701a      	strb	r2, [r3, #0]
        break;
 8005cd6:	e005      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cd8:	4b6f      	ldr	r3, [pc, #444]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	2380      	movs	r3, #128	; 0x80
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	d0ed      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005ce4:	2313      	movs	r3, #19
 8005ce6:	18fb      	adds	r3, r7, r3
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d154      	bne.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005cee:	4b69      	ldr	r3, [pc, #420]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005cf0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cf2:	23c0      	movs	r3, #192	; 0xc0
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d019      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d014      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d0a:	4b62      	ldr	r3, [pc, #392]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d0e:	4a63      	ldr	r2, [pc, #396]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d14:	4b5f      	ldr	r3, [pc, #380]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005d16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d18:	4b5e      	ldr	r3, [pc, #376]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005d1a:	2180      	movs	r1, #128	; 0x80
 8005d1c:	0249      	lsls	r1, r1, #9
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d22:	4b5c      	ldr	r3, [pc, #368]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005d24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d26:	4b5b      	ldr	r3, [pc, #364]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005d28:	495d      	ldr	r1, [pc, #372]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d2a:	400a      	ands	r2, r1
 8005d2c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d2e:	4b59      	ldr	r3, [pc, #356]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	2201      	movs	r2, #1
 8005d38:	4013      	ands	r3, r2
 8005d3a:	d016      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3c:	f7fe fad8 	bl	80042f0 <HAL_GetTick>
 8005d40:	0003      	movs	r3, r0
 8005d42:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d44:	e00c      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d46:	f7fe fad3 	bl	80042f0 <HAL_GetTick>
 8005d4a:	0002      	movs	r2, r0
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	4a54      	ldr	r2, [pc, #336]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d904      	bls.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005d56:	2313      	movs	r3, #19
 8005d58:	18fb      	adds	r3, r7, r3
 8005d5a:	2203      	movs	r2, #3
 8005d5c:	701a      	strb	r2, [r3, #0]
            break;
 8005d5e:	e004      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d60:	4b4c      	ldr	r3, [pc, #304]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d64:	2202      	movs	r2, #2
 8005d66:	4013      	ands	r3, r2
 8005d68:	d0ed      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005d6a:	2313      	movs	r3, #19
 8005d6c:	18fb      	adds	r3, r7, r3
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10a      	bne.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d74:	4b47      	ldr	r3, [pc, #284]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d78:	4a48      	ldr	r2, [pc, #288]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	0019      	movs	r1, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699a      	ldr	r2, [r3, #24]
 8005d82:	4b44      	ldr	r3, [pc, #272]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005d84:	430a      	orrs	r2, r1
 8005d86:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d88:	e00c      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d8a:	2312      	movs	r3, #18
 8005d8c:	18fb      	adds	r3, r7, r3
 8005d8e:	2213      	movs	r2, #19
 8005d90:	18ba      	adds	r2, r7, r2
 8005d92:	7812      	ldrb	r2, [r2, #0]
 8005d94:	701a      	strb	r2, [r3, #0]
 8005d96:	e005      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d98:	2312      	movs	r3, #18
 8005d9a:	18fb      	adds	r3, r7, r3
 8005d9c:	2213      	movs	r2, #19
 8005d9e:	18ba      	adds	r2, r7, r2
 8005da0:	7812      	ldrb	r2, [r2, #0]
 8005da2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005da4:	2311      	movs	r3, #17
 8005da6:	18fb      	adds	r3, r7, r3
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d105      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dae:	4b39      	ldr	r3, [pc, #228]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005db0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005db2:	4b38      	ldr	r3, [pc, #224]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005db4:	493c      	ldr	r1, [pc, #240]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005db6:	400a      	ands	r2, r1
 8005db8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	d009      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005dc4:	4b33      	ldr	r3, [pc, #204]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc8:	2203      	movs	r2, #3
 8005dca:	4393      	bics	r3, r2
 8005dcc:	0019      	movs	r1, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	4b30      	ldr	r3, [pc, #192]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2202      	movs	r2, #2
 8005dde:	4013      	ands	r3, r2
 8005de0:	d009      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005de2:	4b2c      	ldr	r3, [pc, #176]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de6:	220c      	movs	r2, #12
 8005de8:	4393      	bics	r3, r2
 8005dea:	0019      	movs	r1, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	4b28      	ldr	r3, [pc, #160]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005df2:	430a      	orrs	r2, r1
 8005df4:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	d009      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e00:	4b24      	ldr	r3, [pc, #144]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e04:	4a29      	ldr	r2, [pc, #164]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e06:	4013      	ands	r3, r2
 8005e08:	0019      	movs	r1, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	4b21      	ldr	r3, [pc, #132]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005e10:	430a      	orrs	r2, r1
 8005e12:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	2380      	movs	r3, #128	; 0x80
 8005e1a:	01db      	lsls	r3, r3, #7
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	d015      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e20:	4b1c      	ldr	r3, [pc, #112]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	0899      	lsrs	r1, r3, #2
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	695a      	ldr	r2, [r3, #20]
 8005e2c:	4b19      	ldr	r3, [pc, #100]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	695a      	ldr	r2, [r3, #20]
 8005e36:	2380      	movs	r3, #128	; 0x80
 8005e38:	05db      	lsls	r3, r3, #23
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d106      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005e3e:	4b15      	ldr	r3, [pc, #84]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005e40:	68da      	ldr	r2, [r3, #12]
 8005e42:	4b14      	ldr	r3, [pc, #80]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005e44:	2180      	movs	r1, #128	; 0x80
 8005e46:	0249      	lsls	r1, r1, #9
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	2380      	movs	r3, #128	; 0x80
 8005e52:	011b      	lsls	r3, r3, #4
 8005e54:	4013      	ands	r3, r2
 8005e56:	d016      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005e58:	4b0e      	ldr	r3, [pc, #56]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5c:	4a14      	ldr	r2, [pc, #80]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e5e:	4013      	ands	r3, r2
 8005e60:	0019      	movs	r1, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	691a      	ldr	r2, [r3, #16]
 8005e66:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	2380      	movs	r3, #128	; 0x80
 8005e72:	01db      	lsls	r3, r3, #7
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d106      	bne.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005e78:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005e7a:	68da      	ldr	r2, [r3, #12]
 8005e7c:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005e7e:	2180      	movs	r1, #128	; 0x80
 8005e80:	0249      	lsls	r1, r1, #9
 8005e82:	430a      	orrs	r2, r1
 8005e84:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005e86:	2312      	movs	r3, #18
 8005e88:	18fb      	adds	r3, r7, r3
 8005e8a:	781b      	ldrb	r3, [r3, #0]
}
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	b006      	add	sp, #24
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	40021000 	.word	0x40021000
 8005e98:	40007000 	.word	0x40007000
 8005e9c:	fffffcff 	.word	0xfffffcff
 8005ea0:	fffeffff 	.word	0xfffeffff
 8005ea4:	00001388 	.word	0x00001388
 8005ea8:	efffffff 	.word	0xefffffff
 8005eac:	ffffcfff 	.word	0xffffcfff
 8005eb0:	ffff3fff 	.word	0xffff3fff

08005eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e04a      	b.n	8005f5c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	223d      	movs	r2, #61	; 0x3d
 8005eca:	5c9b      	ldrb	r3, [r3, r2]
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d107      	bne.n	8005ee2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	223c      	movs	r2, #60	; 0x3c
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	0018      	movs	r0, r3
 8005ede:	f7fd ff21 	bl	8003d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	223d      	movs	r2, #61	; 0x3d
 8005ee6:	2102      	movs	r1, #2
 8005ee8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	0019      	movs	r1, r3
 8005ef4:	0010      	movs	r0, r2
 8005ef6:	f000 fcbb 	bl	8006870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2248      	movs	r2, #72	; 0x48
 8005efe:	2101      	movs	r1, #1
 8005f00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	223e      	movs	r2, #62	; 0x3e
 8005f06:	2101      	movs	r1, #1
 8005f08:	5499      	strb	r1, [r3, r2]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	223f      	movs	r2, #63	; 0x3f
 8005f0e:	2101      	movs	r1, #1
 8005f10:	5499      	strb	r1, [r3, r2]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2240      	movs	r2, #64	; 0x40
 8005f16:	2101      	movs	r1, #1
 8005f18:	5499      	strb	r1, [r3, r2]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2241      	movs	r2, #65	; 0x41
 8005f1e:	2101      	movs	r1, #1
 8005f20:	5499      	strb	r1, [r3, r2]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2242      	movs	r2, #66	; 0x42
 8005f26:	2101      	movs	r1, #1
 8005f28:	5499      	strb	r1, [r3, r2]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2243      	movs	r2, #67	; 0x43
 8005f2e:	2101      	movs	r1, #1
 8005f30:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2244      	movs	r2, #68	; 0x44
 8005f36:	2101      	movs	r1, #1
 8005f38:	5499      	strb	r1, [r3, r2]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2245      	movs	r2, #69	; 0x45
 8005f3e:	2101      	movs	r1, #1
 8005f40:	5499      	strb	r1, [r3, r2]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2246      	movs	r2, #70	; 0x46
 8005f46:	2101      	movs	r1, #1
 8005f48:	5499      	strb	r1, [r3, r2]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2247      	movs	r2, #71	; 0x47
 8005f4e:	2101      	movs	r1, #1
 8005f50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	223d      	movs	r2, #61	; 0x3d
 8005f56:	2101      	movs	r1, #1
 8005f58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	b002      	add	sp, #8
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	223d      	movs	r2, #61	; 0x3d
 8005f70:	5c9b      	ldrb	r3, [r3, r2]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d001      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e03c      	b.n	8005ff6 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	223d      	movs	r2, #61	; 0x3d
 8005f80:	2102      	movs	r1, #2
 8005f82:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2101      	movs	r1, #1
 8005f90:	430a      	orrs	r2, r1
 8005f92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a19      	ldr	r2, [pc, #100]	; (8006000 <HAL_TIM_Base_Start_IT+0x9c>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d009      	beq.n	8005fb2 <HAL_TIM_Base_Start_IT+0x4e>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a18      	ldr	r2, [pc, #96]	; (8006004 <HAL_TIM_Base_Start_IT+0xa0>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d004      	beq.n	8005fb2 <HAL_TIM_Base_Start_IT+0x4e>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a16      	ldr	r2, [pc, #88]	; (8006008 <HAL_TIM_Base_Start_IT+0xa4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d116      	bne.n	8005fe0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	4a14      	ldr	r2, [pc, #80]	; (800600c <HAL_TIM_Base_Start_IT+0xa8>)
 8005fba:	4013      	ands	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b06      	cmp	r3, #6
 8005fc2:	d016      	beq.n	8005ff2 <HAL_TIM_Base_Start_IT+0x8e>
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	2380      	movs	r3, #128	; 0x80
 8005fc8:	025b      	lsls	r3, r3, #9
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d011      	beq.n	8005ff2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2101      	movs	r1, #1
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fde:	e008      	b.n	8005ff2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2101      	movs	r1, #1
 8005fec:	430a      	orrs	r2, r1
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	e000      	b.n	8005ff4 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	0018      	movs	r0, r3
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	b004      	add	sp, #16
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	46c0      	nop			; (mov r8, r8)
 8006000:	40012c00 	.word	0x40012c00
 8006004:	40000400 	.word	0x40000400
 8006008:	40014000 	.word	0x40014000
 800600c:	00010007 	.word	0x00010007

08006010 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e04a      	b.n	80060b8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	223d      	movs	r2, #61	; 0x3d
 8006026:	5c9b      	ldrb	r3, [r3, r2]
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d107      	bne.n	800603e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	223c      	movs	r2, #60	; 0x3c
 8006032:	2100      	movs	r1, #0
 8006034:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	0018      	movs	r0, r3
 800603a:	f000 f841 	bl	80060c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	223d      	movs	r2, #61	; 0x3d
 8006042:	2102      	movs	r1, #2
 8006044:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	3304      	adds	r3, #4
 800604e:	0019      	movs	r1, r3
 8006050:	0010      	movs	r0, r2
 8006052:	f000 fc0d 	bl	8006870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2248      	movs	r2, #72	; 0x48
 800605a:	2101      	movs	r1, #1
 800605c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	223e      	movs	r2, #62	; 0x3e
 8006062:	2101      	movs	r1, #1
 8006064:	5499      	strb	r1, [r3, r2]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	223f      	movs	r2, #63	; 0x3f
 800606a:	2101      	movs	r1, #1
 800606c:	5499      	strb	r1, [r3, r2]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2240      	movs	r2, #64	; 0x40
 8006072:	2101      	movs	r1, #1
 8006074:	5499      	strb	r1, [r3, r2]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2241      	movs	r2, #65	; 0x41
 800607a:	2101      	movs	r1, #1
 800607c:	5499      	strb	r1, [r3, r2]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2242      	movs	r2, #66	; 0x42
 8006082:	2101      	movs	r1, #1
 8006084:	5499      	strb	r1, [r3, r2]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2243      	movs	r2, #67	; 0x43
 800608a:	2101      	movs	r1, #1
 800608c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2244      	movs	r2, #68	; 0x44
 8006092:	2101      	movs	r1, #1
 8006094:	5499      	strb	r1, [r3, r2]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2245      	movs	r2, #69	; 0x45
 800609a:	2101      	movs	r1, #1
 800609c:	5499      	strb	r1, [r3, r2]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2246      	movs	r2, #70	; 0x46
 80060a2:	2101      	movs	r1, #1
 80060a4:	5499      	strb	r1, [r3, r2]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2247      	movs	r2, #71	; 0x47
 80060aa:	2101      	movs	r1, #1
 80060ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	223d      	movs	r2, #61	; 0x3d
 80060b2:	2101      	movs	r1, #1
 80060b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	0018      	movs	r0, r3
 80060ba:	46bd      	mov	sp, r7
 80060bc:	b002      	add	sp, #8
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060c8:	46c0      	nop			; (mov r8, r8)
 80060ca:	46bd      	mov	sp, r7
 80060cc:	b002      	add	sp, #8
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e090      	b.n	8006206 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	223d      	movs	r2, #61	; 0x3d
 80060e8:	5c9b      	ldrb	r3, [r3, r2]
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d107      	bne.n	8006100 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	223c      	movs	r2, #60	; 0x3c
 80060f4:	2100      	movs	r1, #0
 80060f6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	0018      	movs	r0, r3
 80060fc:	f7fd fd8e 	bl	8003c1c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	223d      	movs	r2, #61	; 0x3d
 8006104:	2102      	movs	r1, #2
 8006106:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	493f      	ldr	r1, [pc, #252]	; (8006210 <HAL_TIM_Encoder_Init+0x140>)
 8006114:	400a      	ands	r2, r1
 8006116:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3304      	adds	r3, #4
 8006120:	0019      	movs	r1, r3
 8006122:	0010      	movs	r0, r2
 8006124:	f000 fba4 	bl	8006870 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	4a31      	ldr	r2, [pc, #196]	; (8006214 <HAL_TIM_Encoder_Init+0x144>)
 800614e:	4013      	ands	r3, r2
 8006150:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	689a      	ldr	r2, [r3, #8]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	021b      	lsls	r3, r3, #8
 800615c:	4313      	orrs	r3, r2
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	4a2c      	ldr	r2, [pc, #176]	; (8006218 <HAL_TIM_Encoder_Init+0x148>)
 8006168:	4013      	ands	r3, r2
 800616a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	4a2b      	ldr	r2, [pc, #172]	; (800621c <HAL_TIM_Encoder_Init+0x14c>)
 8006170:	4013      	ands	r3, r2
 8006172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	68da      	ldr	r2, [r3, #12]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	021b      	lsls	r3, r3, #8
 800617e:	4313      	orrs	r3, r2
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4313      	orrs	r3, r2
 8006184:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	011a      	lsls	r2, r3, #4
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	031b      	lsls	r3, r3, #12
 8006192:	4313      	orrs	r3, r2
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	4313      	orrs	r3, r2
 8006198:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2222      	movs	r2, #34	; 0x22
 800619e:	4393      	bics	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2288      	movs	r2, #136	; 0x88
 80061a6:	4393      	bics	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	011b      	lsls	r3, r3, #4
 80061b4:	4313      	orrs	r3, r2
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2248      	movs	r2, #72	; 0x48
 80061d8:	2101      	movs	r1, #1
 80061da:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	223e      	movs	r2, #62	; 0x3e
 80061e0:	2101      	movs	r1, #1
 80061e2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	223f      	movs	r2, #63	; 0x3f
 80061e8:	2101      	movs	r1, #1
 80061ea:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2244      	movs	r2, #68	; 0x44
 80061f0:	2101      	movs	r1, #1
 80061f2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2245      	movs	r2, #69	; 0x45
 80061f8:	2101      	movs	r1, #1
 80061fa:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	223d      	movs	r2, #61	; 0x3d
 8006200:	2101      	movs	r1, #1
 8006202:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	0018      	movs	r0, r3
 8006208:	46bd      	mov	sp, r7
 800620a:	b006      	add	sp, #24
 800620c:	bd80      	pop	{r7, pc}
 800620e:	46c0      	nop			; (mov r8, r8)
 8006210:	fffebff8 	.word	0xfffebff8
 8006214:	fffffcfc 	.word	0xfffffcfc
 8006218:	fffff3f3 	.word	0xfffff3f3
 800621c:	ffff0f0f 	.word	0xffff0f0f

08006220 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	2202      	movs	r2, #2
 8006230:	4013      	ands	r3, r2
 8006232:	2b02      	cmp	r3, #2
 8006234:	d124      	bne.n	8006280 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	2202      	movs	r2, #2
 800623e:	4013      	ands	r3, r2
 8006240:	2b02      	cmp	r3, #2
 8006242:	d11d      	bne.n	8006280 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2203      	movs	r2, #3
 800624a:	4252      	negs	r2, r2
 800624c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	2203      	movs	r2, #3
 800625c:	4013      	ands	r3, r2
 800625e:	d004      	beq.n	800626a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	0018      	movs	r0, r3
 8006264:	f000 faec 	bl	8006840 <HAL_TIM_IC_CaptureCallback>
 8006268:	e007      	b.n	800627a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	0018      	movs	r0, r3
 800626e:	f000 fadf 	bl	8006830 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	0018      	movs	r0, r3
 8006276:	f000 faeb 	bl	8006850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	2204      	movs	r2, #4
 8006288:	4013      	ands	r3, r2
 800628a:	2b04      	cmp	r3, #4
 800628c:	d125      	bne.n	80062da <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	2204      	movs	r2, #4
 8006296:	4013      	ands	r3, r2
 8006298:	2b04      	cmp	r3, #4
 800629a:	d11e      	bne.n	80062da <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2205      	movs	r2, #5
 80062a2:	4252      	negs	r2, r2
 80062a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2202      	movs	r2, #2
 80062aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699a      	ldr	r2, [r3, #24]
 80062b2:	23c0      	movs	r3, #192	; 0xc0
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4013      	ands	r3, r2
 80062b8:	d004      	beq.n	80062c4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	0018      	movs	r0, r3
 80062be:	f000 fabf 	bl	8006840 <HAL_TIM_IC_CaptureCallback>
 80062c2:	e007      	b.n	80062d4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	0018      	movs	r0, r3
 80062c8:	f000 fab2 	bl	8006830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	0018      	movs	r0, r3
 80062d0:	f000 fabe 	bl	8006850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	2208      	movs	r2, #8
 80062e2:	4013      	ands	r3, r2
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d124      	bne.n	8006332 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	2208      	movs	r2, #8
 80062f0:	4013      	ands	r3, r2
 80062f2:	2b08      	cmp	r3, #8
 80062f4:	d11d      	bne.n	8006332 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2209      	movs	r2, #9
 80062fc:	4252      	negs	r2, r2
 80062fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2204      	movs	r2, #4
 8006304:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69db      	ldr	r3, [r3, #28]
 800630c:	2203      	movs	r2, #3
 800630e:	4013      	ands	r3, r2
 8006310:	d004      	beq.n	800631c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	0018      	movs	r0, r3
 8006316:	f000 fa93 	bl	8006840 <HAL_TIM_IC_CaptureCallback>
 800631a:	e007      	b.n	800632c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	0018      	movs	r0, r3
 8006320:	f000 fa86 	bl	8006830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	0018      	movs	r0, r3
 8006328:	f000 fa92 	bl	8006850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	2210      	movs	r2, #16
 800633a:	4013      	ands	r3, r2
 800633c:	2b10      	cmp	r3, #16
 800633e:	d125      	bne.n	800638c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	2210      	movs	r2, #16
 8006348:	4013      	ands	r3, r2
 800634a:	2b10      	cmp	r3, #16
 800634c:	d11e      	bne.n	800638c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2211      	movs	r2, #17
 8006354:	4252      	negs	r2, r2
 8006356:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2208      	movs	r2, #8
 800635c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	69da      	ldr	r2, [r3, #28]
 8006364:	23c0      	movs	r3, #192	; 0xc0
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4013      	ands	r3, r2
 800636a:	d004      	beq.n	8006376 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	0018      	movs	r0, r3
 8006370:	f000 fa66 	bl	8006840 <HAL_TIM_IC_CaptureCallback>
 8006374:	e007      	b.n	8006386 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	0018      	movs	r0, r3
 800637a:	f000 fa59 	bl	8006830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	0018      	movs	r0, r3
 8006382:	f000 fa65 	bl	8006850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	2201      	movs	r2, #1
 8006394:	4013      	ands	r3, r2
 8006396:	2b01      	cmp	r3, #1
 8006398:	d10f      	bne.n	80063ba <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	4013      	ands	r3, r2
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d108      	bne.n	80063ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2202      	movs	r2, #2
 80063ae:	4252      	negs	r2, r2
 80063b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	0018      	movs	r0, r3
 80063b6:	f7fc ffc5 	bl	8003344 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	2280      	movs	r2, #128	; 0x80
 80063c2:	4013      	ands	r3, r2
 80063c4:	2b80      	cmp	r3, #128	; 0x80
 80063c6:	d10f      	bne.n	80063e8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	2280      	movs	r2, #128	; 0x80
 80063d0:	4013      	ands	r3, r2
 80063d2:	2b80      	cmp	r3, #128	; 0x80
 80063d4:	d108      	bne.n	80063e8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2281      	movs	r2, #129	; 0x81
 80063dc:	4252      	negs	r2, r2
 80063de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	0018      	movs	r0, r3
 80063e4:	f000 ff30 	bl	8007248 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	691a      	ldr	r2, [r3, #16]
 80063ee:	2380      	movs	r3, #128	; 0x80
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	401a      	ands	r2, r3
 80063f4:	2380      	movs	r3, #128	; 0x80
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d10e      	bne.n	800641a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	2280      	movs	r2, #128	; 0x80
 8006404:	4013      	ands	r3, r2
 8006406:	2b80      	cmp	r3, #128	; 0x80
 8006408:	d107      	bne.n	800641a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a1c      	ldr	r2, [pc, #112]	; (8006480 <HAL_TIM_IRQHandler+0x260>)
 8006410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	0018      	movs	r0, r3
 8006416:	f000 ff1f 	bl	8007258 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	2240      	movs	r2, #64	; 0x40
 8006422:	4013      	ands	r3, r2
 8006424:	2b40      	cmp	r3, #64	; 0x40
 8006426:	d10f      	bne.n	8006448 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	2240      	movs	r2, #64	; 0x40
 8006430:	4013      	ands	r3, r2
 8006432:	2b40      	cmp	r3, #64	; 0x40
 8006434:	d108      	bne.n	8006448 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2241      	movs	r2, #65	; 0x41
 800643c:	4252      	negs	r2, r2
 800643e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	0018      	movs	r0, r3
 8006444:	f000 fa0c 	bl	8006860 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	2220      	movs	r2, #32
 8006450:	4013      	ands	r3, r2
 8006452:	2b20      	cmp	r3, #32
 8006454:	d10f      	bne.n	8006476 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	2220      	movs	r2, #32
 800645e:	4013      	ands	r3, r2
 8006460:	2b20      	cmp	r3, #32
 8006462:	d108      	bne.n	8006476 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2221      	movs	r2, #33	; 0x21
 800646a:	4252      	negs	r2, r2
 800646c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	0018      	movs	r0, r3
 8006472:	f000 fee1 	bl	8007238 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	46bd      	mov	sp, r7
 800647a:	b002      	add	sp, #8
 800647c:	bd80      	pop	{r7, pc}
 800647e:	46c0      	nop			; (mov r8, r8)
 8006480:	fffffeff 	.word	0xfffffeff

08006484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006490:	2317      	movs	r3, #23
 8006492:	18fb      	adds	r3, r7, r3
 8006494:	2200      	movs	r2, #0
 8006496:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	223c      	movs	r2, #60	; 0x3c
 800649c:	5c9b      	ldrb	r3, [r3, r2]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d101      	bne.n	80064a6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80064a2:	2302      	movs	r3, #2
 80064a4:	e0e5      	b.n	8006672 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	223c      	movs	r2, #60	; 0x3c
 80064aa:	2101      	movs	r1, #1
 80064ac:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b14      	cmp	r3, #20
 80064b2:	d900      	bls.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80064b4:	e0d1      	b.n	800665a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	009a      	lsls	r2, r3, #2
 80064ba:	4b70      	ldr	r3, [pc, #448]	; (800667c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80064bc:	18d3      	adds	r3, r2, r3
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	0011      	movs	r1, r2
 80064ca:	0018      	movs	r0, r3
 80064cc:	f000 fa46 	bl	800695c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	699a      	ldr	r2, [r3, #24]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2108      	movs	r1, #8
 80064dc:	430a      	orrs	r2, r1
 80064de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	699a      	ldr	r2, [r3, #24]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2104      	movs	r1, #4
 80064ec:	438a      	bics	r2, r1
 80064ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6999      	ldr	r1, [r3, #24]
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	691a      	ldr	r2, [r3, #16]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	619a      	str	r2, [r3, #24]
      break;
 8006502:	e0af      	b.n	8006664 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	0011      	movs	r1, r2
 800650c:	0018      	movs	r0, r3
 800650e:	f000 faaf 	bl	8006a70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	699a      	ldr	r2, [r3, #24]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2180      	movs	r1, #128	; 0x80
 800651e:	0109      	lsls	r1, r1, #4
 8006520:	430a      	orrs	r2, r1
 8006522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699a      	ldr	r2, [r3, #24]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4954      	ldr	r1, [pc, #336]	; (8006680 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006530:	400a      	ands	r2, r1
 8006532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6999      	ldr	r1, [r3, #24]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	021a      	lsls	r2, r3, #8
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	619a      	str	r2, [r3, #24]
      break;
 8006548:	e08c      	b.n	8006664 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	0011      	movs	r1, r2
 8006552:	0018      	movs	r0, r3
 8006554:	f000 fb10 	bl	8006b78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	69da      	ldr	r2, [r3, #28]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2108      	movs	r1, #8
 8006564:	430a      	orrs	r2, r1
 8006566:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	69da      	ldr	r2, [r3, #28]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2104      	movs	r1, #4
 8006574:	438a      	bics	r2, r1
 8006576:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	69d9      	ldr	r1, [r3, #28]
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	691a      	ldr	r2, [r3, #16]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	61da      	str	r2, [r3, #28]
      break;
 800658a:	e06b      	b.n	8006664 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	0011      	movs	r1, r2
 8006594:	0018      	movs	r0, r3
 8006596:	f000 fb77 	bl	8006c88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	69da      	ldr	r2, [r3, #28]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2180      	movs	r1, #128	; 0x80
 80065a6:	0109      	lsls	r1, r1, #4
 80065a8:	430a      	orrs	r2, r1
 80065aa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	69da      	ldr	r2, [r3, #28]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4932      	ldr	r1, [pc, #200]	; (8006680 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80065b8:	400a      	ands	r2, r1
 80065ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	69d9      	ldr	r1, [r3, #28]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	021a      	lsls	r2, r3, #8
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	61da      	str	r2, [r3, #28]
      break;
 80065d0:	e048      	b.n	8006664 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	0011      	movs	r1, r2
 80065da:	0018      	movs	r0, r3
 80065dc:	f000 fbbe 	bl	8006d5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2108      	movs	r1, #8
 80065ec:	430a      	orrs	r2, r1
 80065ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2104      	movs	r1, #4
 80065fc:	438a      	bics	r2, r1
 80065fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	691a      	ldr	r2, [r3, #16]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006612:	e027      	b.n	8006664 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	0011      	movs	r1, r2
 800661c:	0018      	movs	r0, r3
 800661e:	f000 fbfd 	bl	8006e1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2180      	movs	r1, #128	; 0x80
 800662e:	0109      	lsls	r1, r1, #4
 8006630:	430a      	orrs	r2, r1
 8006632:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4910      	ldr	r1, [pc, #64]	; (8006680 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006640:	400a      	ands	r2, r1
 8006642:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	021a      	lsls	r2, r3, #8
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006658:	e004      	b.n	8006664 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800665a:	2317      	movs	r3, #23
 800665c:	18fb      	adds	r3, r7, r3
 800665e:	2201      	movs	r2, #1
 8006660:	701a      	strb	r2, [r3, #0]
      break;
 8006662:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	223c      	movs	r2, #60	; 0x3c
 8006668:	2100      	movs	r1, #0
 800666a:	5499      	strb	r1, [r3, r2]

  return status;
 800666c:	2317      	movs	r3, #23
 800666e:	18fb      	adds	r3, r7, r3
 8006670:	781b      	ldrb	r3, [r3, #0]
}
 8006672:	0018      	movs	r0, r3
 8006674:	46bd      	mov	sp, r7
 8006676:	b006      	add	sp, #24
 8006678:	bd80      	pop	{r7, pc}
 800667a:	46c0      	nop			; (mov r8, r8)
 800667c:	0800ce88 	.word	0x0800ce88
 8006680:	fffffbff 	.word	0xfffffbff

08006684 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800668e:	230f      	movs	r3, #15
 8006690:	18fb      	adds	r3, r7, r3
 8006692:	2200      	movs	r2, #0
 8006694:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	223c      	movs	r2, #60	; 0x3c
 800669a:	5c9b      	ldrb	r3, [r3, r2]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d101      	bne.n	80066a4 <HAL_TIM_ConfigClockSource+0x20>
 80066a0:	2302      	movs	r3, #2
 80066a2:	e0bc      	b.n	800681e <HAL_TIM_ConfigClockSource+0x19a>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	223c      	movs	r2, #60	; 0x3c
 80066a8:	2101      	movs	r1, #1
 80066aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	223d      	movs	r2, #61	; 0x3d
 80066b0:	2102      	movs	r1, #2
 80066b2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	4a5a      	ldr	r2, [pc, #360]	; (8006828 <HAL_TIM_ConfigClockSource+0x1a4>)
 80066c0:	4013      	ands	r3, r2
 80066c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	4a59      	ldr	r2, [pc, #356]	; (800682c <HAL_TIM_ConfigClockSource+0x1a8>)
 80066c8:	4013      	ands	r3, r2
 80066ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2280      	movs	r2, #128	; 0x80
 80066da:	0192      	lsls	r2, r2, #6
 80066dc:	4293      	cmp	r3, r2
 80066de:	d040      	beq.n	8006762 <HAL_TIM_ConfigClockSource+0xde>
 80066e0:	2280      	movs	r2, #128	; 0x80
 80066e2:	0192      	lsls	r2, r2, #6
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d900      	bls.n	80066ea <HAL_TIM_ConfigClockSource+0x66>
 80066e8:	e088      	b.n	80067fc <HAL_TIM_ConfigClockSource+0x178>
 80066ea:	2280      	movs	r2, #128	; 0x80
 80066ec:	0152      	lsls	r2, r2, #5
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d100      	bne.n	80066f4 <HAL_TIM_ConfigClockSource+0x70>
 80066f2:	e088      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x182>
 80066f4:	2280      	movs	r2, #128	; 0x80
 80066f6:	0152      	lsls	r2, r2, #5
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d900      	bls.n	80066fe <HAL_TIM_ConfigClockSource+0x7a>
 80066fc:	e07e      	b.n	80067fc <HAL_TIM_ConfigClockSource+0x178>
 80066fe:	2b70      	cmp	r3, #112	; 0x70
 8006700:	d018      	beq.n	8006734 <HAL_TIM_ConfigClockSource+0xb0>
 8006702:	d900      	bls.n	8006706 <HAL_TIM_ConfigClockSource+0x82>
 8006704:	e07a      	b.n	80067fc <HAL_TIM_ConfigClockSource+0x178>
 8006706:	2b60      	cmp	r3, #96	; 0x60
 8006708:	d04f      	beq.n	80067aa <HAL_TIM_ConfigClockSource+0x126>
 800670a:	d900      	bls.n	800670e <HAL_TIM_ConfigClockSource+0x8a>
 800670c:	e076      	b.n	80067fc <HAL_TIM_ConfigClockSource+0x178>
 800670e:	2b50      	cmp	r3, #80	; 0x50
 8006710:	d03b      	beq.n	800678a <HAL_TIM_ConfigClockSource+0x106>
 8006712:	d900      	bls.n	8006716 <HAL_TIM_ConfigClockSource+0x92>
 8006714:	e072      	b.n	80067fc <HAL_TIM_ConfigClockSource+0x178>
 8006716:	2b40      	cmp	r3, #64	; 0x40
 8006718:	d057      	beq.n	80067ca <HAL_TIM_ConfigClockSource+0x146>
 800671a:	d900      	bls.n	800671e <HAL_TIM_ConfigClockSource+0x9a>
 800671c:	e06e      	b.n	80067fc <HAL_TIM_ConfigClockSource+0x178>
 800671e:	2b30      	cmp	r3, #48	; 0x30
 8006720:	d063      	beq.n	80067ea <HAL_TIM_ConfigClockSource+0x166>
 8006722:	d86b      	bhi.n	80067fc <HAL_TIM_ConfigClockSource+0x178>
 8006724:	2b20      	cmp	r3, #32
 8006726:	d060      	beq.n	80067ea <HAL_TIM_ConfigClockSource+0x166>
 8006728:	d868      	bhi.n	80067fc <HAL_TIM_ConfigClockSource+0x178>
 800672a:	2b00      	cmp	r3, #0
 800672c:	d05d      	beq.n	80067ea <HAL_TIM_ConfigClockSource+0x166>
 800672e:	2b10      	cmp	r3, #16
 8006730:	d05b      	beq.n	80067ea <HAL_TIM_ConfigClockSource+0x166>
 8006732:	e063      	b.n	80067fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006744:	f000 fc4a 	bl	8006fdc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2277      	movs	r2, #119	; 0x77
 8006754:	4313      	orrs	r3, r2
 8006756:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	609a      	str	r2, [r3, #8]
      break;
 8006760:	e052      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006772:	f000 fc33 	bl	8006fdc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2180      	movs	r1, #128	; 0x80
 8006782:	01c9      	lsls	r1, r1, #7
 8006784:	430a      	orrs	r2, r1
 8006786:	609a      	str	r2, [r3, #8]
      break;
 8006788:	e03e      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006796:	001a      	movs	r2, r3
 8006798:	f000 fba4 	bl	8006ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2150      	movs	r1, #80	; 0x50
 80067a2:	0018      	movs	r0, r3
 80067a4:	f000 fbfe 	bl	8006fa4 <TIM_ITRx_SetConfig>
      break;
 80067a8:	e02e      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067b6:	001a      	movs	r2, r3
 80067b8:	f000 fbc2 	bl	8006f40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2160      	movs	r1, #96	; 0x60
 80067c2:	0018      	movs	r0, r3
 80067c4:	f000 fbee 	bl	8006fa4 <TIM_ITRx_SetConfig>
      break;
 80067c8:	e01e      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067d6:	001a      	movs	r2, r3
 80067d8:	f000 fb84 	bl	8006ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2140      	movs	r1, #64	; 0x40
 80067e2:	0018      	movs	r0, r3
 80067e4:	f000 fbde 	bl	8006fa4 <TIM_ITRx_SetConfig>
      break;
 80067e8:	e00e      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	0019      	movs	r1, r3
 80067f4:	0010      	movs	r0, r2
 80067f6:	f000 fbd5 	bl	8006fa4 <TIM_ITRx_SetConfig>
      break;
 80067fa:	e005      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80067fc:	230f      	movs	r3, #15
 80067fe:	18fb      	adds	r3, r7, r3
 8006800:	2201      	movs	r2, #1
 8006802:	701a      	strb	r2, [r3, #0]
      break;
 8006804:	e000      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006806:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	223d      	movs	r2, #61	; 0x3d
 800680c:	2101      	movs	r1, #1
 800680e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	223c      	movs	r2, #60	; 0x3c
 8006814:	2100      	movs	r1, #0
 8006816:	5499      	strb	r1, [r3, r2]

  return status;
 8006818:	230f      	movs	r3, #15
 800681a:	18fb      	adds	r3, r7, r3
 800681c:	781b      	ldrb	r3, [r3, #0]
}
 800681e:	0018      	movs	r0, r3
 8006820:	46bd      	mov	sp, r7
 8006822:	b004      	add	sp, #16
 8006824:	bd80      	pop	{r7, pc}
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	ffceff88 	.word	0xffceff88
 800682c:	ffff00ff 	.word	0xffff00ff

08006830 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006838:	46c0      	nop			; (mov r8, r8)
 800683a:	46bd      	mov	sp, r7
 800683c:	b002      	add	sp, #8
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006848:	46c0      	nop			; (mov r8, r8)
 800684a:	46bd      	mov	sp, r7
 800684c:	b002      	add	sp, #8
 800684e:	bd80      	pop	{r7, pc}

08006850 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006858:	46c0      	nop			; (mov r8, r8)
 800685a:	46bd      	mov	sp, r7
 800685c:	b002      	add	sp, #8
 800685e:	bd80      	pop	{r7, pc}

08006860 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006868:	46c0      	nop			; (mov r8, r8)
 800686a:	46bd      	mov	sp, r7
 800686c:	b002      	add	sp, #8
 800686e:	bd80      	pop	{r7, pc}

08006870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a2f      	ldr	r2, [pc, #188]	; (8006940 <TIM_Base_SetConfig+0xd0>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d003      	beq.n	8006890 <TIM_Base_SetConfig+0x20>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a2e      	ldr	r2, [pc, #184]	; (8006944 <TIM_Base_SetConfig+0xd4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d108      	bne.n	80068a2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2270      	movs	r2, #112	; 0x70
 8006894:	4393      	bics	r3, r2
 8006896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4313      	orrs	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a26      	ldr	r2, [pc, #152]	; (8006940 <TIM_Base_SetConfig+0xd0>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d013      	beq.n	80068d2 <TIM_Base_SetConfig+0x62>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a25      	ldr	r2, [pc, #148]	; (8006944 <TIM_Base_SetConfig+0xd4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00f      	beq.n	80068d2 <TIM_Base_SetConfig+0x62>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a24      	ldr	r2, [pc, #144]	; (8006948 <TIM_Base_SetConfig+0xd8>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d00b      	beq.n	80068d2 <TIM_Base_SetConfig+0x62>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a23      	ldr	r2, [pc, #140]	; (800694c <TIM_Base_SetConfig+0xdc>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d007      	beq.n	80068d2 <TIM_Base_SetConfig+0x62>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a22      	ldr	r2, [pc, #136]	; (8006950 <TIM_Base_SetConfig+0xe0>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d003      	beq.n	80068d2 <TIM_Base_SetConfig+0x62>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a21      	ldr	r2, [pc, #132]	; (8006954 <TIM_Base_SetConfig+0xe4>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d108      	bne.n	80068e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	4a20      	ldr	r2, [pc, #128]	; (8006958 <TIM_Base_SetConfig+0xe8>)
 80068d6:	4013      	ands	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2280      	movs	r2, #128	; 0x80
 80068e8:	4393      	bics	r3, r2
 80068ea:	001a      	movs	r2, r3
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	689a      	ldr	r2, [r3, #8]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a0c      	ldr	r2, [pc, #48]	; (8006940 <TIM_Base_SetConfig+0xd0>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d00b      	beq.n	800692a <TIM_Base_SetConfig+0xba>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a0d      	ldr	r2, [pc, #52]	; (800694c <TIM_Base_SetConfig+0xdc>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d007      	beq.n	800692a <TIM_Base_SetConfig+0xba>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a0c      	ldr	r2, [pc, #48]	; (8006950 <TIM_Base_SetConfig+0xe0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d003      	beq.n	800692a <TIM_Base_SetConfig+0xba>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a0b      	ldr	r2, [pc, #44]	; (8006954 <TIM_Base_SetConfig+0xe4>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d103      	bne.n	8006932 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	691a      	ldr	r2, [r3, #16]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	615a      	str	r2, [r3, #20]
}
 8006938:	46c0      	nop			; (mov r8, r8)
 800693a:	46bd      	mov	sp, r7
 800693c:	b004      	add	sp, #16
 800693e:	bd80      	pop	{r7, pc}
 8006940:	40012c00 	.word	0x40012c00
 8006944:	40000400 	.word	0x40000400
 8006948:	40002000 	.word	0x40002000
 800694c:	40014000 	.word	0x40014000
 8006950:	40014400 	.word	0x40014400
 8006954:	40014800 	.word	0x40014800
 8006958:	fffffcff 	.word	0xfffffcff

0800695c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	2201      	movs	r2, #1
 800696c:	4393      	bics	r3, r2
 800696e:	001a      	movs	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	4a32      	ldr	r2, [pc, #200]	; (8006a54 <TIM_OC1_SetConfig+0xf8>)
 800698a:	4013      	ands	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2203      	movs	r2, #3
 8006992:	4393      	bics	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	4313      	orrs	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	2202      	movs	r2, #2
 80069a4:	4393      	bics	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a28      	ldr	r2, [pc, #160]	; (8006a58 <TIM_OC1_SetConfig+0xfc>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d00b      	beq.n	80069d2 <TIM_OC1_SetConfig+0x76>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a27      	ldr	r2, [pc, #156]	; (8006a5c <TIM_OC1_SetConfig+0x100>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d007      	beq.n	80069d2 <TIM_OC1_SetConfig+0x76>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a26      	ldr	r2, [pc, #152]	; (8006a60 <TIM_OC1_SetConfig+0x104>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d003      	beq.n	80069d2 <TIM_OC1_SetConfig+0x76>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a25      	ldr	r2, [pc, #148]	; (8006a64 <TIM_OC1_SetConfig+0x108>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d10c      	bne.n	80069ec <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2208      	movs	r2, #8
 80069d6:	4393      	bics	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	2204      	movs	r2, #4
 80069e8:	4393      	bics	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a1a      	ldr	r2, [pc, #104]	; (8006a58 <TIM_OC1_SetConfig+0xfc>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d00b      	beq.n	8006a0c <TIM_OC1_SetConfig+0xb0>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a19      	ldr	r2, [pc, #100]	; (8006a5c <TIM_OC1_SetConfig+0x100>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d007      	beq.n	8006a0c <TIM_OC1_SetConfig+0xb0>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a18      	ldr	r2, [pc, #96]	; (8006a60 <TIM_OC1_SetConfig+0x104>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d003      	beq.n	8006a0c <TIM_OC1_SetConfig+0xb0>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a17      	ldr	r2, [pc, #92]	; (8006a64 <TIM_OC1_SetConfig+0x108>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d111      	bne.n	8006a30 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	4a16      	ldr	r2, [pc, #88]	; (8006a68 <TIM_OC1_SetConfig+0x10c>)
 8006a10:	4013      	ands	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	4a15      	ldr	r2, [pc, #84]	; (8006a6c <TIM_OC1_SetConfig+0x110>)
 8006a18:	4013      	ands	r3, r2
 8006a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	621a      	str	r2, [r3, #32]
}
 8006a4a:	46c0      	nop			; (mov r8, r8)
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	b006      	add	sp, #24
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	46c0      	nop			; (mov r8, r8)
 8006a54:	fffeff8f 	.word	0xfffeff8f
 8006a58:	40012c00 	.word	0x40012c00
 8006a5c:	40014000 	.word	0x40014000
 8006a60:	40014400 	.word	0x40014400
 8006a64:	40014800 	.word	0x40014800
 8006a68:	fffffeff 	.word	0xfffffeff
 8006a6c:	fffffdff 	.word	0xfffffdff

08006a70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	2210      	movs	r2, #16
 8006a80:	4393      	bics	r3, r2
 8006a82:	001a      	movs	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4a2e      	ldr	r2, [pc, #184]	; (8006b58 <TIM_OC2_SetConfig+0xe8>)
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4a2d      	ldr	r2, [pc, #180]	; (8006b5c <TIM_OC2_SetConfig+0xec>)
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	021b      	lsls	r3, r3, #8
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	4393      	bics	r3, r2
 8006abc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	011b      	lsls	r3, r3, #4
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a24      	ldr	r2, [pc, #144]	; (8006b60 <TIM_OC2_SetConfig+0xf0>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d10d      	bne.n	8006aee <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2280      	movs	r2, #128	; 0x80
 8006ad6:	4393      	bics	r3, r2
 8006ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	011b      	lsls	r3, r3, #4
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2240      	movs	r2, #64	; 0x40
 8006aea:	4393      	bics	r3, r2
 8006aec:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a1b      	ldr	r2, [pc, #108]	; (8006b60 <TIM_OC2_SetConfig+0xf0>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d00b      	beq.n	8006b0e <TIM_OC2_SetConfig+0x9e>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a1a      	ldr	r2, [pc, #104]	; (8006b64 <TIM_OC2_SetConfig+0xf4>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d007      	beq.n	8006b0e <TIM_OC2_SetConfig+0x9e>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a19      	ldr	r2, [pc, #100]	; (8006b68 <TIM_OC2_SetConfig+0xf8>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d003      	beq.n	8006b0e <TIM_OC2_SetConfig+0x9e>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a18      	ldr	r2, [pc, #96]	; (8006b6c <TIM_OC2_SetConfig+0xfc>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d113      	bne.n	8006b36 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	4a17      	ldr	r2, [pc, #92]	; (8006b70 <TIM_OC2_SetConfig+0x100>)
 8006b12:	4013      	ands	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	4a16      	ldr	r2, [pc, #88]	; (8006b74 <TIM_OC2_SetConfig+0x104>)
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	621a      	str	r2, [r3, #32]
}
 8006b50:	46c0      	nop			; (mov r8, r8)
 8006b52:	46bd      	mov	sp, r7
 8006b54:	b006      	add	sp, #24
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	feff8fff 	.word	0xfeff8fff
 8006b5c:	fffffcff 	.word	0xfffffcff
 8006b60:	40012c00 	.word	0x40012c00
 8006b64:	40014000 	.word	0x40014000
 8006b68:	40014400 	.word	0x40014400
 8006b6c:	40014800 	.word	0x40014800
 8006b70:	fffffbff 	.word	0xfffffbff
 8006b74:	fffff7ff 	.word	0xfffff7ff

08006b78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	4a35      	ldr	r2, [pc, #212]	; (8006c5c <TIM_OC3_SetConfig+0xe4>)
 8006b88:	401a      	ands	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4a2f      	ldr	r2, [pc, #188]	; (8006c60 <TIM_OC3_SetConfig+0xe8>)
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2203      	movs	r2, #3
 8006bac:	4393      	bics	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	4a29      	ldr	r2, [pc, #164]	; (8006c64 <TIM_OC3_SetConfig+0xec>)
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	021b      	lsls	r3, r3, #8
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a25      	ldr	r2, [pc, #148]	; (8006c68 <TIM_OC3_SetConfig+0xf0>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d10d      	bne.n	8006bf2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	4a24      	ldr	r2, [pc, #144]	; (8006c6c <TIM_OC3_SetConfig+0xf4>)
 8006bda:	4013      	ands	r3, r2
 8006bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	021b      	lsls	r3, r3, #8
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	4a20      	ldr	r2, [pc, #128]	; (8006c70 <TIM_OC3_SetConfig+0xf8>)
 8006bee:	4013      	ands	r3, r2
 8006bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a1c      	ldr	r2, [pc, #112]	; (8006c68 <TIM_OC3_SetConfig+0xf0>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d00b      	beq.n	8006c12 <TIM_OC3_SetConfig+0x9a>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a1d      	ldr	r2, [pc, #116]	; (8006c74 <TIM_OC3_SetConfig+0xfc>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d007      	beq.n	8006c12 <TIM_OC3_SetConfig+0x9a>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a1c      	ldr	r2, [pc, #112]	; (8006c78 <TIM_OC3_SetConfig+0x100>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d003      	beq.n	8006c12 <TIM_OC3_SetConfig+0x9a>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a1b      	ldr	r2, [pc, #108]	; (8006c7c <TIM_OC3_SetConfig+0x104>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d113      	bne.n	8006c3a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	4a1a      	ldr	r2, [pc, #104]	; (8006c80 <TIM_OC3_SetConfig+0x108>)
 8006c16:	4013      	ands	r3, r2
 8006c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	4a19      	ldr	r2, [pc, #100]	; (8006c84 <TIM_OC3_SetConfig+0x10c>)
 8006c1e:	4013      	ands	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	011b      	lsls	r3, r3, #4
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	011b      	lsls	r3, r3, #4
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	621a      	str	r2, [r3, #32]
}
 8006c54:	46c0      	nop			; (mov r8, r8)
 8006c56:	46bd      	mov	sp, r7
 8006c58:	b006      	add	sp, #24
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	fffffeff 	.word	0xfffffeff
 8006c60:	fffeff8f 	.word	0xfffeff8f
 8006c64:	fffffdff 	.word	0xfffffdff
 8006c68:	40012c00 	.word	0x40012c00
 8006c6c:	fffff7ff 	.word	0xfffff7ff
 8006c70:	fffffbff 	.word	0xfffffbff
 8006c74:	40014000 	.word	0x40014000
 8006c78:	40014400 	.word	0x40014400
 8006c7c:	40014800 	.word	0x40014800
 8006c80:	ffffefff 	.word	0xffffefff
 8006c84:	ffffdfff 	.word	0xffffdfff

08006c88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	4a28      	ldr	r2, [pc, #160]	; (8006d38 <TIM_OC4_SetConfig+0xb0>)
 8006c98:	401a      	ands	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4a22      	ldr	r2, [pc, #136]	; (8006d3c <TIM_OC4_SetConfig+0xb4>)
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4a21      	ldr	r2, [pc, #132]	; (8006d40 <TIM_OC4_SetConfig+0xb8>)
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	4a1d      	ldr	r2, [pc, #116]	; (8006d44 <TIM_OC4_SetConfig+0xbc>)
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	031b      	lsls	r3, r3, #12
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a19      	ldr	r2, [pc, #100]	; (8006d48 <TIM_OC4_SetConfig+0xc0>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d00b      	beq.n	8006d00 <TIM_OC4_SetConfig+0x78>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a18      	ldr	r2, [pc, #96]	; (8006d4c <TIM_OC4_SetConfig+0xc4>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d007      	beq.n	8006d00 <TIM_OC4_SetConfig+0x78>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a17      	ldr	r2, [pc, #92]	; (8006d50 <TIM_OC4_SetConfig+0xc8>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d003      	beq.n	8006d00 <TIM_OC4_SetConfig+0x78>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a16      	ldr	r2, [pc, #88]	; (8006d54 <TIM_OC4_SetConfig+0xcc>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d109      	bne.n	8006d14 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	4a15      	ldr	r2, [pc, #84]	; (8006d58 <TIM_OC4_SetConfig+0xd0>)
 8006d04:	4013      	ands	r3, r2
 8006d06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	019b      	lsls	r3, r3, #6
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	621a      	str	r2, [r3, #32]
}
 8006d2e:	46c0      	nop			; (mov r8, r8)
 8006d30:	46bd      	mov	sp, r7
 8006d32:	b006      	add	sp, #24
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	46c0      	nop			; (mov r8, r8)
 8006d38:	ffffefff 	.word	0xffffefff
 8006d3c:	feff8fff 	.word	0xfeff8fff
 8006d40:	fffffcff 	.word	0xfffffcff
 8006d44:	ffffdfff 	.word	0xffffdfff
 8006d48:	40012c00 	.word	0x40012c00
 8006d4c:	40014000 	.word	0x40014000
 8006d50:	40014400 	.word	0x40014400
 8006d54:	40014800 	.word	0x40014800
 8006d58:	ffffbfff 	.word	0xffffbfff

08006d5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	4a25      	ldr	r2, [pc, #148]	; (8006e00 <TIM_OC5_SetConfig+0xa4>)
 8006d6c:	401a      	ands	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4a1f      	ldr	r2, [pc, #124]	; (8006e04 <TIM_OC5_SetConfig+0xa8>)
 8006d88:	4013      	ands	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	4a1b      	ldr	r2, [pc, #108]	; (8006e08 <TIM_OC5_SetConfig+0xac>)
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	041b      	lsls	r3, r3, #16
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a17      	ldr	r2, [pc, #92]	; (8006e0c <TIM_OC5_SetConfig+0xb0>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d00b      	beq.n	8006dca <TIM_OC5_SetConfig+0x6e>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a16      	ldr	r2, [pc, #88]	; (8006e10 <TIM_OC5_SetConfig+0xb4>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d007      	beq.n	8006dca <TIM_OC5_SetConfig+0x6e>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a15      	ldr	r2, [pc, #84]	; (8006e14 <TIM_OC5_SetConfig+0xb8>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d003      	beq.n	8006dca <TIM_OC5_SetConfig+0x6e>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a14      	ldr	r2, [pc, #80]	; (8006e18 <TIM_OC5_SetConfig+0xbc>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d109      	bne.n	8006dde <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	4a0c      	ldr	r2, [pc, #48]	; (8006e00 <TIM_OC5_SetConfig+0xa4>)
 8006dce:	4013      	ands	r3, r2
 8006dd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	021b      	lsls	r3, r3, #8
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	621a      	str	r2, [r3, #32]
}
 8006df8:	46c0      	nop			; (mov r8, r8)
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	b006      	add	sp, #24
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	fffeffff 	.word	0xfffeffff
 8006e04:	fffeff8f 	.word	0xfffeff8f
 8006e08:	fffdffff 	.word	0xfffdffff
 8006e0c:	40012c00 	.word	0x40012c00
 8006e10:	40014000 	.word	0x40014000
 8006e14:	40014400 	.word	0x40014400
 8006e18:	40014800 	.word	0x40014800

08006e1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	4a26      	ldr	r2, [pc, #152]	; (8006ec4 <TIM_OC6_SetConfig+0xa8>)
 8006e2c:	401a      	ands	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4a20      	ldr	r2, [pc, #128]	; (8006ec8 <TIM_OC6_SetConfig+0xac>)
 8006e48:	4013      	ands	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	021b      	lsls	r3, r3, #8
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	4a1c      	ldr	r2, [pc, #112]	; (8006ecc <TIM_OC6_SetConfig+0xb0>)
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	051b      	lsls	r3, r3, #20
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a18      	ldr	r2, [pc, #96]	; (8006ed0 <TIM_OC6_SetConfig+0xb4>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d00b      	beq.n	8006e8c <TIM_OC6_SetConfig+0x70>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a17      	ldr	r2, [pc, #92]	; (8006ed4 <TIM_OC6_SetConfig+0xb8>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d007      	beq.n	8006e8c <TIM_OC6_SetConfig+0x70>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a16      	ldr	r2, [pc, #88]	; (8006ed8 <TIM_OC6_SetConfig+0xbc>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d003      	beq.n	8006e8c <TIM_OC6_SetConfig+0x70>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a15      	ldr	r2, [pc, #84]	; (8006edc <TIM_OC6_SetConfig+0xc0>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d109      	bne.n	8006ea0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	4a14      	ldr	r2, [pc, #80]	; (8006ee0 <TIM_OC6_SetConfig+0xc4>)
 8006e90:	4013      	ands	r3, r2
 8006e92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	029b      	lsls	r3, r3, #10
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	621a      	str	r2, [r3, #32]
}
 8006eba:	46c0      	nop			; (mov r8, r8)
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	b006      	add	sp, #24
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	46c0      	nop			; (mov r8, r8)
 8006ec4:	ffefffff 	.word	0xffefffff
 8006ec8:	feff8fff 	.word	0xfeff8fff
 8006ecc:	ffdfffff 	.word	0xffdfffff
 8006ed0:	40012c00 	.word	0x40012c00
 8006ed4:	40014000 	.word	0x40014000
 8006ed8:	40014400 	.word	0x40014400
 8006edc:	40014800 	.word	0x40014800
 8006ee0:	fffbffff 	.word	0xfffbffff

08006ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6a1b      	ldr	r3, [r3, #32]
 8006ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	2201      	movs	r2, #1
 8006efc:	4393      	bics	r3, r2
 8006efe:	001a      	movs	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	22f0      	movs	r2, #240	; 0xf0
 8006f0e:	4393      	bics	r3, r2
 8006f10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	011b      	lsls	r3, r3, #4
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	220a      	movs	r2, #10
 8006f20:	4393      	bics	r3, r2
 8006f22:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	621a      	str	r2, [r3, #32]
}
 8006f38:	46c0      	nop			; (mov r8, r8)
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	b006      	add	sp, #24
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
 8006f50:	2210      	movs	r2, #16
 8006f52:	4393      	bics	r3, r2
 8006f54:	001a      	movs	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	4a0d      	ldr	r2, [pc, #52]	; (8006fa0 <TIM_TI2_ConfigInputStage+0x60>)
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	031b      	lsls	r3, r3, #12
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	22a0      	movs	r2, #160	; 0xa0
 8006f7c:	4393      	bics	r3, r2
 8006f7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	011b      	lsls	r3, r3, #4
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	621a      	str	r2, [r3, #32]
}
 8006f96:	46c0      	nop			; (mov r8, r8)
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	b006      	add	sp, #24
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	46c0      	nop			; (mov r8, r8)
 8006fa0:	ffff0fff 	.word	0xffff0fff

08006fa4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4a08      	ldr	r2, [pc, #32]	; (8006fd8 <TIM_ITRx_SetConfig+0x34>)
 8006fb8:	4013      	ands	r3, r2
 8006fba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	2207      	movs	r2, #7
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	609a      	str	r2, [r3, #8]
}
 8006fce:	46c0      	nop			; (mov r8, r8)
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	b004      	add	sp, #16
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	46c0      	nop			; (mov r8, r8)
 8006fd8:	ffcfff8f 	.word	0xffcfff8f

08006fdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	4a09      	ldr	r2, [pc, #36]	; (8007018 <TIM_ETR_SetConfig+0x3c>)
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	021a      	lsls	r2, r3, #8
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	431a      	orrs	r2, r3
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	4313      	orrs	r3, r2
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	4313      	orrs	r3, r2
 8007008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	609a      	str	r2, [r3, #8]
}
 8007010:	46c0      	nop			; (mov r8, r8)
 8007012:	46bd      	mov	sp, r7
 8007014:	b006      	add	sp, #24
 8007016:	bd80      	pop	{r7, pc}
 8007018:	ffff00ff 	.word	0xffff00ff

0800701c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	223c      	movs	r2, #60	; 0x3c
 800702a:	5c9b      	ldrb	r3, [r3, r2]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d101      	bne.n	8007034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007030:	2302      	movs	r3, #2
 8007032:	e04f      	b.n	80070d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	223c      	movs	r2, #60	; 0x3c
 8007038:	2101      	movs	r1, #1
 800703a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	223d      	movs	r2, #61	; 0x3d
 8007040:	2102      	movs	r1, #2
 8007042:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a20      	ldr	r2, [pc, #128]	; (80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d108      	bne.n	8007070 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	4a1f      	ldr	r2, [pc, #124]	; (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007062:	4013      	ands	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	4313      	orrs	r3, r2
 800706e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2270      	movs	r2, #112	; 0x70
 8007074:	4393      	bics	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	4313      	orrs	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a13      	ldr	r2, [pc, #76]	; (80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d009      	beq.n	80070a8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a12      	ldr	r2, [pc, #72]	; (80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d004      	beq.n	80070a8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a11      	ldr	r2, [pc, #68]	; (80070e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d10c      	bne.n	80070c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2280      	movs	r2, #128	; 0x80
 80070ac:	4393      	bics	r3, r2
 80070ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	223d      	movs	r2, #61	; 0x3d
 80070c6:	2101      	movs	r1, #1
 80070c8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	223c      	movs	r2, #60	; 0x3c
 80070ce:	2100      	movs	r1, #0
 80070d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	0018      	movs	r0, r3
 80070d6:	46bd      	mov	sp, r7
 80070d8:	b004      	add	sp, #16
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	40012c00 	.word	0x40012c00
 80070e0:	ff0fffff 	.word	0xff0fffff
 80070e4:	40000400 	.word	0x40000400
 80070e8:	40014000 	.word	0x40014000

080070ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070f6:	2300      	movs	r3, #0
 80070f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	223c      	movs	r2, #60	; 0x3c
 80070fe:	5c9b      	ldrb	r3, [r3, r2]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d101      	bne.n	8007108 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007104:	2302      	movs	r3, #2
 8007106:	e079      	b.n	80071fc <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	223c      	movs	r2, #60	; 0x3c
 800710c:	2101      	movs	r1, #1
 800710e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	22ff      	movs	r2, #255	; 0xff
 8007114:	4393      	bics	r3, r2
 8007116:	001a      	movs	r2, r3
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	4313      	orrs	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4a38      	ldr	r2, [pc, #224]	; (8007204 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8007124:	401a      	ands	r2, r3
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	4313      	orrs	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	4a35      	ldr	r2, [pc, #212]	; (8007208 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007132:	401a      	ands	r2, r3
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	4313      	orrs	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4a33      	ldr	r2, [pc, #204]	; (800720c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007140:	401a      	ands	r2, r3
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4313      	orrs	r3, r2
 8007148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	4a30      	ldr	r2, [pc, #192]	; (8007210 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800714e:	401a      	ands	r2, r3
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	4313      	orrs	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4a2e      	ldr	r2, [pc, #184]	; (8007214 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800715c:	401a      	ands	r2, r3
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4a2b      	ldr	r2, [pc, #172]	; (8007218 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800716a:	401a      	ands	r2, r3
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007170:	4313      	orrs	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4a29      	ldr	r2, [pc, #164]	; (800721c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8007178:	401a      	ands	r2, r3
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	041b      	lsls	r3, r3, #16
 8007180:	4313      	orrs	r3, r2
 8007182:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a25      	ldr	r2, [pc, #148]	; (8007220 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d106      	bne.n	800719c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	4a24      	ldr	r2, [pc, #144]	; (8007224 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007192:	401a      	ands	r2, r3
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	69db      	ldr	r3, [r3, #28]
 8007198:	4313      	orrs	r3, r2
 800719a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a1f      	ldr	r2, [pc, #124]	; (8007220 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d121      	bne.n	80071ea <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	4a1f      	ldr	r2, [pc, #124]	; (8007228 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80071aa:	401a      	ands	r2, r3
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b0:	051b      	lsls	r3, r3, #20
 80071b2:	4313      	orrs	r3, r2
 80071b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4a1c      	ldr	r2, [pc, #112]	; (800722c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80071ba:	401a      	ands	r2, r3
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4a1a      	ldr	r2, [pc, #104]	; (8007230 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80071c8:	401a      	ands	r2, r3
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	4313      	orrs	r3, r2
 80071d0:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a12      	ldr	r2, [pc, #72]	; (8007220 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d106      	bne.n	80071ea <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4a15      	ldr	r2, [pc, #84]	; (8007234 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80071e0:	401a      	ands	r2, r3
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e6:	4313      	orrs	r3, r2
 80071e8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	223c      	movs	r2, #60	; 0x3c
 80071f6:	2100      	movs	r1, #0
 80071f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	0018      	movs	r0, r3
 80071fe:	46bd      	mov	sp, r7
 8007200:	b004      	add	sp, #16
 8007202:	bd80      	pop	{r7, pc}
 8007204:	fffffcff 	.word	0xfffffcff
 8007208:	fffffbff 	.word	0xfffffbff
 800720c:	fffff7ff 	.word	0xfffff7ff
 8007210:	ffffefff 	.word	0xffffefff
 8007214:	ffffdfff 	.word	0xffffdfff
 8007218:	ffffbfff 	.word	0xffffbfff
 800721c:	fff0ffff 	.word	0xfff0ffff
 8007220:	40012c00 	.word	0x40012c00
 8007224:	efffffff 	.word	0xefffffff
 8007228:	ff0fffff 	.word	0xff0fffff
 800722c:	feffffff 	.word	0xfeffffff
 8007230:	fdffffff 	.word	0xfdffffff
 8007234:	dfffffff 	.word	0xdfffffff

08007238 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007240:	46c0      	nop			; (mov r8, r8)
 8007242:	46bd      	mov	sp, r7
 8007244:	b002      	add	sp, #8
 8007246:	bd80      	pop	{r7, pc}

08007248 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007250:	46c0      	nop			; (mov r8, r8)
 8007252:	46bd      	mov	sp, r7
 8007254:	b002      	add	sp, #8
 8007256:	bd80      	pop	{r7, pc}

08007258 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007260:	46c0      	nop			; (mov r8, r8)
 8007262:	46bd      	mov	sp, r7
 8007264:	b002      	add	sp, #8
 8007266:	bd80      	pop	{r7, pc}

08007268 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e046      	b.n	8007308 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2288      	movs	r2, #136	; 0x88
 800727e:	589b      	ldr	r3, [r3, r2]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d107      	bne.n	8007294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2284      	movs	r2, #132	; 0x84
 8007288:	2100      	movs	r1, #0
 800728a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	0018      	movs	r0, r3
 8007290:	f7fc ff28 	bl	80040e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2288      	movs	r2, #136	; 0x88
 8007298:	2124      	movs	r1, #36	; 0x24
 800729a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2101      	movs	r1, #1
 80072a8:	438a      	bics	r2, r1
 80072aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	0018      	movs	r0, r3
 80072b0:	f000 f944 	bl	800753c <UART_SetConfig>
 80072b4:	0003      	movs	r3, r0
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d101      	bne.n	80072be <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e024      	b.n	8007308 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	0018      	movs	r0, r3
 80072ca:	f000 fadb 	bl	8007884 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	490d      	ldr	r1, [pc, #52]	; (8007310 <HAL_UART_Init+0xa8>)
 80072da:	400a      	ands	r2, r1
 80072dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	689a      	ldr	r2, [r3, #8]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	212a      	movs	r1, #42	; 0x2a
 80072ea:	438a      	bics	r2, r1
 80072ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2101      	movs	r1, #1
 80072fa:	430a      	orrs	r2, r1
 80072fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	0018      	movs	r0, r3
 8007302:	f000 fb73 	bl	80079ec <UART_CheckIdleState>
 8007306:	0003      	movs	r3, r0
}
 8007308:	0018      	movs	r0, r3
 800730a:	46bd      	mov	sp, r7
 800730c:	b002      	add	sp, #8
 800730e:	bd80      	pop	{r7, pc}
 8007310:	ffffb7ff 	.word	0xffffb7ff

08007314 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b088      	sub	sp, #32
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	1dbb      	adds	r3, r7, #6
 8007320:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2288      	movs	r2, #136	; 0x88
 8007326:	589b      	ldr	r3, [r3, r2]
 8007328:	2b20      	cmp	r3, #32
 800732a:	d000      	beq.n	800732e <HAL_UART_Transmit_DMA+0x1a>
 800732c:	e079      	b.n	8007422 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d003      	beq.n	800733c <HAL_UART_Transmit_DMA+0x28>
 8007334:	1dbb      	adds	r3, r7, #6
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e071      	b.n	8007424 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	689a      	ldr	r2, [r3, #8]
 8007344:	2380      	movs	r3, #128	; 0x80
 8007346:	015b      	lsls	r3, r3, #5
 8007348:	429a      	cmp	r2, r3
 800734a:	d109      	bne.n	8007360 <HAL_UART_Transmit_DMA+0x4c>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d105      	bne.n	8007360 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2201      	movs	r2, #1
 8007358:	4013      	ands	r3, r2
 800735a:	d001      	beq.n	8007360 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e061      	b.n	8007424 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	1dba      	adds	r2, r7, #6
 800736a:	2154      	movs	r1, #84	; 0x54
 800736c:	8812      	ldrh	r2, [r2, #0]
 800736e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	1dba      	adds	r2, r7, #6
 8007374:	2156      	movs	r1, #86	; 0x56
 8007376:	8812      	ldrh	r2, [r2, #0]
 8007378:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2290      	movs	r2, #144	; 0x90
 800737e:	2100      	movs	r1, #0
 8007380:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2288      	movs	r2, #136	; 0x88
 8007386:	2121      	movs	r1, #33	; 0x21
 8007388:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800738e:	2b00      	cmp	r3, #0
 8007390:	d028      	beq.n	80073e4 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007396:	4a25      	ldr	r2, [pc, #148]	; (800742c <HAL_UART_Transmit_DMA+0x118>)
 8007398:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800739e:	4a24      	ldr	r2, [pc, #144]	; (8007430 <HAL_UART_Transmit_DMA+0x11c>)
 80073a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073a6:	4a23      	ldr	r2, [pc, #140]	; (8007434 <HAL_UART_Transmit_DMA+0x120>)
 80073a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073ae:	2200      	movs	r2, #0
 80073b0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ba:	0019      	movs	r1, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3328      	adds	r3, #40	; 0x28
 80073c2:	001a      	movs	r2, r3
 80073c4:	1dbb      	adds	r3, r7, #6
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	f7fd fcc7 	bl	8004d5a <HAL_DMA_Start_IT>
 80073cc:	1e03      	subs	r3, r0, #0
 80073ce:	d009      	beq.n	80073e4 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2290      	movs	r2, #144	; 0x90
 80073d4:	2110      	movs	r1, #16
 80073d6:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2288      	movs	r2, #136	; 0x88
 80073dc:	2120      	movs	r1, #32
 80073de:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e01f      	b.n	8007424 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2240      	movs	r2, #64	; 0x40
 80073ea:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073ec:	f3ef 8310 	mrs	r3, PRIMASK
 80073f0:	613b      	str	r3, [r7, #16]
  return(result);
 80073f2:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80073f4:	61fb      	str	r3, [r7, #28]
 80073f6:	2301      	movs	r3, #1
 80073f8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f383 8810 	msr	PRIMASK, r3
}
 8007400:	46c0      	nop			; (mov r8, r8)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689a      	ldr	r2, [r3, #8]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2180      	movs	r1, #128	; 0x80
 800740e:	430a      	orrs	r2, r1
 8007410:	609a      	str	r2, [r3, #8]
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	f383 8810 	msr	PRIMASK, r3
}
 800741c:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	e000      	b.n	8007424 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8007422:	2302      	movs	r3, #2
  }
}
 8007424:	0018      	movs	r0, r3
 8007426:	46bd      	mov	sp, r7
 8007428:	b008      	add	sp, #32
 800742a:	bd80      	pop	{r7, pc}
 800742c:	08007eb1 	.word	0x08007eb1
 8007430:	08007f49 	.word	0x08007f49
 8007434:	080080db 	.word	0x080080db

08007438 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b088      	sub	sp, #32
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	1dbb      	adds	r3, r7, #6
 8007444:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	228c      	movs	r2, #140	; 0x8c
 800744a:	589b      	ldr	r3, [r3, r2]
 800744c:	2b20      	cmp	r3, #32
 800744e:	d145      	bne.n	80074dc <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <HAL_UART_Receive_DMA+0x26>
 8007456:	1dbb      	adds	r3, r7, #6
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e03d      	b.n	80074de <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	689a      	ldr	r2, [r3, #8]
 8007466:	2380      	movs	r3, #128	; 0x80
 8007468:	015b      	lsls	r3, r3, #5
 800746a:	429a      	cmp	r2, r3
 800746c:	d109      	bne.n	8007482 <HAL_UART_Receive_DMA+0x4a>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d105      	bne.n	8007482 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	2201      	movs	r2, #1
 800747a:	4013      	ands	r3, r2
 800747c:	d001      	beq.n	8007482 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e02d      	b.n	80074de <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	2380      	movs	r3, #128	; 0x80
 8007490:	041b      	lsls	r3, r3, #16
 8007492:	4013      	ands	r3, r2
 8007494:	d019      	beq.n	80074ca <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007496:	f3ef 8310 	mrs	r3, PRIMASK
 800749a:	613b      	str	r3, [r7, #16]
  return(result);
 800749c:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800749e:	61fb      	str	r3, [r7, #28]
 80074a0:	2301      	movs	r3, #1
 80074a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f383 8810 	msr	PRIMASK, r3
}
 80074aa:	46c0      	nop			; (mov r8, r8)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2180      	movs	r1, #128	; 0x80
 80074b8:	04c9      	lsls	r1, r1, #19
 80074ba:	430a      	orrs	r2, r1
 80074bc:	601a      	str	r2, [r3, #0]
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	f383 8810 	msr	PRIMASK, r3
}
 80074c8:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80074ca:	1dbb      	adds	r3, r7, #6
 80074cc:	881a      	ldrh	r2, [r3, #0]
 80074ce:	68b9      	ldr	r1, [r7, #8]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	0018      	movs	r0, r3
 80074d4:	f000 fba0 	bl	8007c18 <UART_Start_Receive_DMA>
 80074d8:	0003      	movs	r3, r0
 80074da:	e000      	b.n	80074de <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80074dc:	2302      	movs	r3, #2
  }
}
 80074de:	0018      	movs	r0, r3
 80074e0:	46bd      	mov	sp, r7
 80074e2:	b008      	add	sp, #32
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b082      	sub	sp, #8
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80074ee:	46c0      	nop			; (mov r8, r8)
 80074f0:	46bd      	mov	sp, r7
 80074f2:	b002      	add	sp, #8
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b082      	sub	sp, #8
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80074fe:	46c0      	nop			; (mov r8, r8)
 8007500:	46bd      	mov	sp, r7
 8007502:	b002      	add	sp, #8
 8007504:	bd80      	pop	{r7, pc}

08007506 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b082      	sub	sp, #8
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800750e:	46c0      	nop			; (mov r8, r8)
 8007510:	46bd      	mov	sp, r7
 8007512:	b002      	add	sp, #8
 8007514:	bd80      	pop	{r7, pc}

08007516 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b082      	sub	sp, #8
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800751e:	46c0      	nop			; (mov r8, r8)
 8007520:	46bd      	mov	sp, r7
 8007522:	b002      	add	sp, #8
 8007524:	bd80      	pop	{r7, pc}

08007526 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b082      	sub	sp, #8
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	000a      	movs	r2, r1
 8007530:	1cbb      	adds	r3, r7, #2
 8007532:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007534:	46c0      	nop			; (mov r8, r8)
 8007536:	46bd      	mov	sp, r7
 8007538:	b002      	add	sp, #8
 800753a:	bd80      	pop	{r7, pc}

0800753c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b088      	sub	sp, #32
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007544:	231a      	movs	r3, #26
 8007546:	18fb      	adds	r3, r7, r3
 8007548:	2200      	movs	r2, #0
 800754a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	431a      	orrs	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	431a      	orrs	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	4313      	orrs	r3, r2
 8007562:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4abc      	ldr	r2, [pc, #752]	; (800785c <UART_SetConfig+0x320>)
 800756c:	4013      	ands	r3, r2
 800756e:	0019      	movs	r1, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	69fa      	ldr	r2, [r7, #28]
 8007576:	430a      	orrs	r2, r1
 8007578:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	4ab7      	ldr	r2, [pc, #732]	; (8007860 <UART_SetConfig+0x324>)
 8007582:	4013      	ands	r3, r2
 8007584:	0019      	movs	r1, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68da      	ldr	r2, [r3, #12]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a1b      	ldr	r3, [r3, #32]
 800759c:	69fa      	ldr	r2, [r7, #28]
 800759e:	4313      	orrs	r3, r2
 80075a0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	4aae      	ldr	r2, [pc, #696]	; (8007864 <UART_SetConfig+0x328>)
 80075aa:	4013      	ands	r3, r2
 80075ac:	0019      	movs	r1, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	69fa      	ldr	r2, [r7, #28]
 80075b4:	430a      	orrs	r2, r1
 80075b6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075be:	220f      	movs	r2, #15
 80075c0:	4393      	bics	r3, r2
 80075c2:	0019      	movs	r1, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4aa4      	ldr	r2, [pc, #656]	; (8007868 <UART_SetConfig+0x32c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d127      	bne.n	800762a <UART_SetConfig+0xee>
 80075da:	4ba4      	ldr	r3, [pc, #656]	; (800786c <UART_SetConfig+0x330>)
 80075dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075de:	2203      	movs	r2, #3
 80075e0:	4013      	ands	r3, r2
 80075e2:	2b03      	cmp	r3, #3
 80075e4:	d017      	beq.n	8007616 <UART_SetConfig+0xda>
 80075e6:	d81b      	bhi.n	8007620 <UART_SetConfig+0xe4>
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d00a      	beq.n	8007602 <UART_SetConfig+0xc6>
 80075ec:	d818      	bhi.n	8007620 <UART_SetConfig+0xe4>
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d002      	beq.n	80075f8 <UART_SetConfig+0xbc>
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d00a      	beq.n	800760c <UART_SetConfig+0xd0>
 80075f6:	e013      	b.n	8007620 <UART_SetConfig+0xe4>
 80075f8:	231b      	movs	r3, #27
 80075fa:	18fb      	adds	r3, r7, r3
 80075fc:	2200      	movs	r2, #0
 80075fe:	701a      	strb	r2, [r3, #0]
 8007600:	e058      	b.n	80076b4 <UART_SetConfig+0x178>
 8007602:	231b      	movs	r3, #27
 8007604:	18fb      	adds	r3, r7, r3
 8007606:	2202      	movs	r2, #2
 8007608:	701a      	strb	r2, [r3, #0]
 800760a:	e053      	b.n	80076b4 <UART_SetConfig+0x178>
 800760c:	231b      	movs	r3, #27
 800760e:	18fb      	adds	r3, r7, r3
 8007610:	2204      	movs	r2, #4
 8007612:	701a      	strb	r2, [r3, #0]
 8007614:	e04e      	b.n	80076b4 <UART_SetConfig+0x178>
 8007616:	231b      	movs	r3, #27
 8007618:	18fb      	adds	r3, r7, r3
 800761a:	2208      	movs	r2, #8
 800761c:	701a      	strb	r2, [r3, #0]
 800761e:	e049      	b.n	80076b4 <UART_SetConfig+0x178>
 8007620:	231b      	movs	r3, #27
 8007622:	18fb      	adds	r3, r7, r3
 8007624:	2210      	movs	r2, #16
 8007626:	701a      	strb	r2, [r3, #0]
 8007628:	e044      	b.n	80076b4 <UART_SetConfig+0x178>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a90      	ldr	r2, [pc, #576]	; (8007870 <UART_SetConfig+0x334>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d127      	bne.n	8007684 <UART_SetConfig+0x148>
 8007634:	4b8d      	ldr	r3, [pc, #564]	; (800786c <UART_SetConfig+0x330>)
 8007636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007638:	220c      	movs	r2, #12
 800763a:	4013      	ands	r3, r2
 800763c:	2b0c      	cmp	r3, #12
 800763e:	d017      	beq.n	8007670 <UART_SetConfig+0x134>
 8007640:	d81b      	bhi.n	800767a <UART_SetConfig+0x13e>
 8007642:	2b08      	cmp	r3, #8
 8007644:	d00a      	beq.n	800765c <UART_SetConfig+0x120>
 8007646:	d818      	bhi.n	800767a <UART_SetConfig+0x13e>
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <UART_SetConfig+0x116>
 800764c:	2b04      	cmp	r3, #4
 800764e:	d00a      	beq.n	8007666 <UART_SetConfig+0x12a>
 8007650:	e013      	b.n	800767a <UART_SetConfig+0x13e>
 8007652:	231b      	movs	r3, #27
 8007654:	18fb      	adds	r3, r7, r3
 8007656:	2200      	movs	r2, #0
 8007658:	701a      	strb	r2, [r3, #0]
 800765a:	e02b      	b.n	80076b4 <UART_SetConfig+0x178>
 800765c:	231b      	movs	r3, #27
 800765e:	18fb      	adds	r3, r7, r3
 8007660:	2202      	movs	r2, #2
 8007662:	701a      	strb	r2, [r3, #0]
 8007664:	e026      	b.n	80076b4 <UART_SetConfig+0x178>
 8007666:	231b      	movs	r3, #27
 8007668:	18fb      	adds	r3, r7, r3
 800766a:	2204      	movs	r2, #4
 800766c:	701a      	strb	r2, [r3, #0]
 800766e:	e021      	b.n	80076b4 <UART_SetConfig+0x178>
 8007670:	231b      	movs	r3, #27
 8007672:	18fb      	adds	r3, r7, r3
 8007674:	2208      	movs	r2, #8
 8007676:	701a      	strb	r2, [r3, #0]
 8007678:	e01c      	b.n	80076b4 <UART_SetConfig+0x178>
 800767a:	231b      	movs	r3, #27
 800767c:	18fb      	adds	r3, r7, r3
 800767e:	2210      	movs	r2, #16
 8007680:	701a      	strb	r2, [r3, #0]
 8007682:	e017      	b.n	80076b4 <UART_SetConfig+0x178>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a7a      	ldr	r2, [pc, #488]	; (8007874 <UART_SetConfig+0x338>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d104      	bne.n	8007698 <UART_SetConfig+0x15c>
 800768e:	231b      	movs	r3, #27
 8007690:	18fb      	adds	r3, r7, r3
 8007692:	2200      	movs	r2, #0
 8007694:	701a      	strb	r2, [r3, #0]
 8007696:	e00d      	b.n	80076b4 <UART_SetConfig+0x178>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a76      	ldr	r2, [pc, #472]	; (8007878 <UART_SetConfig+0x33c>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d104      	bne.n	80076ac <UART_SetConfig+0x170>
 80076a2:	231b      	movs	r3, #27
 80076a4:	18fb      	adds	r3, r7, r3
 80076a6:	2200      	movs	r2, #0
 80076a8:	701a      	strb	r2, [r3, #0]
 80076aa:	e003      	b.n	80076b4 <UART_SetConfig+0x178>
 80076ac:	231b      	movs	r3, #27
 80076ae:	18fb      	adds	r3, r7, r3
 80076b0:	2210      	movs	r2, #16
 80076b2:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	69da      	ldr	r2, [r3, #28]
 80076b8:	2380      	movs	r3, #128	; 0x80
 80076ba:	021b      	lsls	r3, r3, #8
 80076bc:	429a      	cmp	r2, r3
 80076be:	d000      	beq.n	80076c2 <UART_SetConfig+0x186>
 80076c0:	e065      	b.n	800778e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80076c2:	231b      	movs	r3, #27
 80076c4:	18fb      	adds	r3, r7, r3
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	d015      	beq.n	80076f8 <UART_SetConfig+0x1bc>
 80076cc:	dc18      	bgt.n	8007700 <UART_SetConfig+0x1c4>
 80076ce:	2b04      	cmp	r3, #4
 80076d0:	d00d      	beq.n	80076ee <UART_SetConfig+0x1b2>
 80076d2:	dc15      	bgt.n	8007700 <UART_SetConfig+0x1c4>
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <UART_SetConfig+0x1a2>
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d005      	beq.n	80076e8 <UART_SetConfig+0x1ac>
 80076dc:	e010      	b.n	8007700 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076de:	f7fe fa75 	bl	8005bcc <HAL_RCC_GetPCLK1Freq>
 80076e2:	0003      	movs	r3, r0
 80076e4:	617b      	str	r3, [r7, #20]
        break;
 80076e6:	e012      	b.n	800770e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076e8:	4b64      	ldr	r3, [pc, #400]	; (800787c <UART_SetConfig+0x340>)
 80076ea:	617b      	str	r3, [r7, #20]
        break;
 80076ec:	e00f      	b.n	800770e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076ee:	f7fe f9e1 	bl	8005ab4 <HAL_RCC_GetSysClockFreq>
 80076f2:	0003      	movs	r3, r0
 80076f4:	617b      	str	r3, [r7, #20]
        break;
 80076f6:	e00a      	b.n	800770e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076f8:	2380      	movs	r3, #128	; 0x80
 80076fa:	021b      	lsls	r3, r3, #8
 80076fc:	617b      	str	r3, [r7, #20]
        break;
 80076fe:	e006      	b.n	800770e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8007700:	2300      	movs	r3, #0
 8007702:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007704:	231a      	movs	r3, #26
 8007706:	18fb      	adds	r3, r7, r3
 8007708:	2201      	movs	r2, #1
 800770a:	701a      	strb	r2, [r3, #0]
        break;
 800770c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d100      	bne.n	8007716 <UART_SetConfig+0x1da>
 8007714:	e08d      	b.n	8007832 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800771a:	4b59      	ldr	r3, [pc, #356]	; (8007880 <UART_SetConfig+0x344>)
 800771c:	0052      	lsls	r2, r2, #1
 800771e:	5ad3      	ldrh	r3, [r2, r3]
 8007720:	0019      	movs	r1, r3
 8007722:	6978      	ldr	r0, [r7, #20]
 8007724:	f7f8 fcfa 	bl	800011c <__udivsi3>
 8007728:	0003      	movs	r3, r0
 800772a:	005a      	lsls	r2, r3, #1
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	085b      	lsrs	r3, r3, #1
 8007732:	18d2      	adds	r2, r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	0019      	movs	r1, r3
 800773a:	0010      	movs	r0, r2
 800773c:	f7f8 fcee 	bl	800011c <__udivsi3>
 8007740:	0003      	movs	r3, r0
 8007742:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	2b0f      	cmp	r3, #15
 8007748:	d91c      	bls.n	8007784 <UART_SetConfig+0x248>
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	2380      	movs	r3, #128	; 0x80
 800774e:	025b      	lsls	r3, r3, #9
 8007750:	429a      	cmp	r2, r3
 8007752:	d217      	bcs.n	8007784 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	b29a      	uxth	r2, r3
 8007758:	200e      	movs	r0, #14
 800775a:	183b      	adds	r3, r7, r0
 800775c:	210f      	movs	r1, #15
 800775e:	438a      	bics	r2, r1
 8007760:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	085b      	lsrs	r3, r3, #1
 8007766:	b29b      	uxth	r3, r3
 8007768:	2207      	movs	r2, #7
 800776a:	4013      	ands	r3, r2
 800776c:	b299      	uxth	r1, r3
 800776e:	183b      	adds	r3, r7, r0
 8007770:	183a      	adds	r2, r7, r0
 8007772:	8812      	ldrh	r2, [r2, #0]
 8007774:	430a      	orrs	r2, r1
 8007776:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	183a      	adds	r2, r7, r0
 800777e:	8812      	ldrh	r2, [r2, #0]
 8007780:	60da      	str	r2, [r3, #12]
 8007782:	e056      	b.n	8007832 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8007784:	231a      	movs	r3, #26
 8007786:	18fb      	adds	r3, r7, r3
 8007788:	2201      	movs	r2, #1
 800778a:	701a      	strb	r2, [r3, #0]
 800778c:	e051      	b.n	8007832 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800778e:	231b      	movs	r3, #27
 8007790:	18fb      	adds	r3, r7, r3
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	2b08      	cmp	r3, #8
 8007796:	d015      	beq.n	80077c4 <UART_SetConfig+0x288>
 8007798:	dc18      	bgt.n	80077cc <UART_SetConfig+0x290>
 800779a:	2b04      	cmp	r3, #4
 800779c:	d00d      	beq.n	80077ba <UART_SetConfig+0x27e>
 800779e:	dc15      	bgt.n	80077cc <UART_SetConfig+0x290>
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <UART_SetConfig+0x26e>
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d005      	beq.n	80077b4 <UART_SetConfig+0x278>
 80077a8:	e010      	b.n	80077cc <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077aa:	f7fe fa0f 	bl	8005bcc <HAL_RCC_GetPCLK1Freq>
 80077ae:	0003      	movs	r3, r0
 80077b0:	617b      	str	r3, [r7, #20]
        break;
 80077b2:	e012      	b.n	80077da <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077b4:	4b31      	ldr	r3, [pc, #196]	; (800787c <UART_SetConfig+0x340>)
 80077b6:	617b      	str	r3, [r7, #20]
        break;
 80077b8:	e00f      	b.n	80077da <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077ba:	f7fe f97b 	bl	8005ab4 <HAL_RCC_GetSysClockFreq>
 80077be:	0003      	movs	r3, r0
 80077c0:	617b      	str	r3, [r7, #20]
        break;
 80077c2:	e00a      	b.n	80077da <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077c4:	2380      	movs	r3, #128	; 0x80
 80077c6:	021b      	lsls	r3, r3, #8
 80077c8:	617b      	str	r3, [r7, #20]
        break;
 80077ca:	e006      	b.n	80077da <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80077cc:	2300      	movs	r3, #0
 80077ce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80077d0:	231a      	movs	r3, #26
 80077d2:	18fb      	adds	r3, r7, r3
 80077d4:	2201      	movs	r2, #1
 80077d6:	701a      	strb	r2, [r3, #0]
        break;
 80077d8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d028      	beq.n	8007832 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077e4:	4b26      	ldr	r3, [pc, #152]	; (8007880 <UART_SetConfig+0x344>)
 80077e6:	0052      	lsls	r2, r2, #1
 80077e8:	5ad3      	ldrh	r3, [r2, r3]
 80077ea:	0019      	movs	r1, r3
 80077ec:	6978      	ldr	r0, [r7, #20]
 80077ee:	f7f8 fc95 	bl	800011c <__udivsi3>
 80077f2:	0003      	movs	r3, r0
 80077f4:	001a      	movs	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	085b      	lsrs	r3, r3, #1
 80077fc:	18d2      	adds	r2, r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	0019      	movs	r1, r3
 8007804:	0010      	movs	r0, r2
 8007806:	f7f8 fc89 	bl	800011c <__udivsi3>
 800780a:	0003      	movs	r3, r0
 800780c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	2b0f      	cmp	r3, #15
 8007812:	d90a      	bls.n	800782a <UART_SetConfig+0x2ee>
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	2380      	movs	r3, #128	; 0x80
 8007818:	025b      	lsls	r3, r3, #9
 800781a:	429a      	cmp	r2, r3
 800781c:	d205      	bcs.n	800782a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	b29a      	uxth	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60da      	str	r2, [r3, #12]
 8007828:	e003      	b.n	8007832 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800782a:	231a      	movs	r3, #26
 800782c:	18fb      	adds	r3, r7, r3
 800782e:	2201      	movs	r2, #1
 8007830:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	226a      	movs	r2, #106	; 0x6a
 8007836:	2101      	movs	r1, #1
 8007838:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2268      	movs	r2, #104	; 0x68
 800783e:	2101      	movs	r1, #1
 8007840:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800784e:	231a      	movs	r3, #26
 8007850:	18fb      	adds	r3, r7, r3
 8007852:	781b      	ldrb	r3, [r3, #0]
}
 8007854:	0018      	movs	r0, r3
 8007856:	46bd      	mov	sp, r7
 8007858:	b008      	add	sp, #32
 800785a:	bd80      	pop	{r7, pc}
 800785c:	cfff69f3 	.word	0xcfff69f3
 8007860:	ffffcfff 	.word	0xffffcfff
 8007864:	11fff4ff 	.word	0x11fff4ff
 8007868:	40013800 	.word	0x40013800
 800786c:	40021000 	.word	0x40021000
 8007870:	40004400 	.word	0x40004400
 8007874:	40004800 	.word	0x40004800
 8007878:	40004c00 	.word	0x40004c00
 800787c:	00f42400 	.word	0x00f42400
 8007880:	0800cedc 	.word	0x0800cedc

08007884 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007890:	2201      	movs	r2, #1
 8007892:	4013      	ands	r3, r2
 8007894:	d00b      	beq.n	80078ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	4a4a      	ldr	r2, [pc, #296]	; (80079c8 <UART_AdvFeatureConfig+0x144>)
 800789e:	4013      	ands	r3, r2
 80078a0:	0019      	movs	r1, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b2:	2202      	movs	r2, #2
 80078b4:	4013      	ands	r3, r2
 80078b6:	d00b      	beq.n	80078d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	4a43      	ldr	r2, [pc, #268]	; (80079cc <UART_AdvFeatureConfig+0x148>)
 80078c0:	4013      	ands	r3, r2
 80078c2:	0019      	movs	r1, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	430a      	orrs	r2, r1
 80078ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d4:	2204      	movs	r2, #4
 80078d6:	4013      	ands	r3, r2
 80078d8:	d00b      	beq.n	80078f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	4a3b      	ldr	r2, [pc, #236]	; (80079d0 <UART_AdvFeatureConfig+0x14c>)
 80078e2:	4013      	ands	r3, r2
 80078e4:	0019      	movs	r1, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f6:	2208      	movs	r2, #8
 80078f8:	4013      	ands	r3, r2
 80078fa:	d00b      	beq.n	8007914 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	4a34      	ldr	r2, [pc, #208]	; (80079d4 <UART_AdvFeatureConfig+0x150>)
 8007904:	4013      	ands	r3, r2
 8007906:	0019      	movs	r1, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	430a      	orrs	r2, r1
 8007912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007918:	2210      	movs	r2, #16
 800791a:	4013      	ands	r3, r2
 800791c:	d00b      	beq.n	8007936 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	4a2c      	ldr	r2, [pc, #176]	; (80079d8 <UART_AdvFeatureConfig+0x154>)
 8007926:	4013      	ands	r3, r2
 8007928:	0019      	movs	r1, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793a:	2220      	movs	r2, #32
 800793c:	4013      	ands	r3, r2
 800793e:	d00b      	beq.n	8007958 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	4a25      	ldr	r2, [pc, #148]	; (80079dc <UART_AdvFeatureConfig+0x158>)
 8007948:	4013      	ands	r3, r2
 800794a:	0019      	movs	r1, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	430a      	orrs	r2, r1
 8007956:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795c:	2240      	movs	r2, #64	; 0x40
 800795e:	4013      	ands	r3, r2
 8007960:	d01d      	beq.n	800799e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	4a1d      	ldr	r2, [pc, #116]	; (80079e0 <UART_AdvFeatureConfig+0x15c>)
 800796a:	4013      	ands	r3, r2
 800796c:	0019      	movs	r1, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	430a      	orrs	r2, r1
 8007978:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800797e:	2380      	movs	r3, #128	; 0x80
 8007980:	035b      	lsls	r3, r3, #13
 8007982:	429a      	cmp	r2, r3
 8007984:	d10b      	bne.n	800799e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	4a15      	ldr	r2, [pc, #84]	; (80079e4 <UART_AdvFeatureConfig+0x160>)
 800798e:	4013      	ands	r3, r2
 8007990:	0019      	movs	r1, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	430a      	orrs	r2, r1
 800799c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a2:	2280      	movs	r2, #128	; 0x80
 80079a4:	4013      	ands	r3, r2
 80079a6:	d00b      	beq.n	80079c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	4a0e      	ldr	r2, [pc, #56]	; (80079e8 <UART_AdvFeatureConfig+0x164>)
 80079b0:	4013      	ands	r3, r2
 80079b2:	0019      	movs	r1, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	430a      	orrs	r2, r1
 80079be:	605a      	str	r2, [r3, #4]
  }
}
 80079c0:	46c0      	nop			; (mov r8, r8)
 80079c2:	46bd      	mov	sp, r7
 80079c4:	b002      	add	sp, #8
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	fffdffff 	.word	0xfffdffff
 80079cc:	fffeffff 	.word	0xfffeffff
 80079d0:	fffbffff 	.word	0xfffbffff
 80079d4:	ffff7fff 	.word	0xffff7fff
 80079d8:	ffffefff 	.word	0xffffefff
 80079dc:	ffffdfff 	.word	0xffffdfff
 80079e0:	ffefffff 	.word	0xffefffff
 80079e4:	ff9fffff 	.word	0xff9fffff
 80079e8:	fff7ffff 	.word	0xfff7ffff

080079ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af02      	add	r7, sp, #8
 80079f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2290      	movs	r2, #144	; 0x90
 80079f8:	2100      	movs	r1, #0
 80079fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079fc:	f7fc fc78 	bl	80042f0 <HAL_GetTick>
 8007a00:	0003      	movs	r3, r0
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2208      	movs	r2, #8
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	2b08      	cmp	r3, #8
 8007a10:	d10c      	bne.n	8007a2c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2280      	movs	r2, #128	; 0x80
 8007a16:	0391      	lsls	r1, r2, #14
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	4a1a      	ldr	r2, [pc, #104]	; (8007a84 <UART_CheckIdleState+0x98>)
 8007a1c:	9200      	str	r2, [sp, #0]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f000 f832 	bl	8007a88 <UART_WaitOnFlagUntilTimeout>
 8007a24:	1e03      	subs	r3, r0, #0
 8007a26:	d001      	beq.n	8007a2c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e026      	b.n	8007a7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2204      	movs	r2, #4
 8007a34:	4013      	ands	r3, r2
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	d10c      	bne.n	8007a54 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2280      	movs	r2, #128	; 0x80
 8007a3e:	03d1      	lsls	r1, r2, #15
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	4a10      	ldr	r2, [pc, #64]	; (8007a84 <UART_CheckIdleState+0x98>)
 8007a44:	9200      	str	r2, [sp, #0]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f000 f81e 	bl	8007a88 <UART_WaitOnFlagUntilTimeout>
 8007a4c:	1e03      	subs	r3, r0, #0
 8007a4e:	d001      	beq.n	8007a54 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e012      	b.n	8007a7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2288      	movs	r2, #136	; 0x88
 8007a58:	2120      	movs	r1, #32
 8007a5a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	228c      	movs	r2, #140	; 0x8c
 8007a60:	2120      	movs	r1, #32
 8007a62:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2284      	movs	r2, #132	; 0x84
 8007a74:	2100      	movs	r1, #0
 8007a76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	0018      	movs	r0, r3
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	b004      	add	sp, #16
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	46c0      	nop			; (mov r8, r8)
 8007a84:	01ffffff 	.word	0x01ffffff

08007a88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b094      	sub	sp, #80	; 0x50
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	603b      	str	r3, [r7, #0]
 8007a94:	1dfb      	adds	r3, r7, #7
 8007a96:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a98:	e0a7      	b.n	8007bea <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	d100      	bne.n	8007aa2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007aa0:	e0a3      	b.n	8007bea <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aa2:	f7fc fc25 	bl	80042f0 <HAL_GetTick>
 8007aa6:	0002      	movs	r2, r0
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d302      	bcc.n	8007ab8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d13f      	bne.n	8007b38 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8007abc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac8:	f383 8810 	msr	PRIMASK, r3
}
 8007acc:	46c0      	nop			; (mov r8, r8)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	494e      	ldr	r1, [pc, #312]	; (8007c14 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007ada:	400a      	ands	r2, r1
 8007adc:	601a      	str	r2, [r3, #0]
 8007ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ae0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	f383 8810 	msr	PRIMASK, r3
}
 8007ae8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aea:	f3ef 8310 	mrs	r3, PRIMASK
 8007aee:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007af2:	643b      	str	r3, [r7, #64]	; 0x40
 8007af4:	2301      	movs	r3, #1
 8007af6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afa:	f383 8810 	msr	PRIMASK, r3
}
 8007afe:	46c0      	nop			; (mov r8, r8)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689a      	ldr	r2, [r3, #8]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	438a      	bics	r2, r1
 8007b0e:	609a      	str	r2, [r3, #8]
 8007b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b16:	f383 8810 	msr	PRIMASK, r3
}
 8007b1a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2288      	movs	r2, #136	; 0x88
 8007b20:	2120      	movs	r1, #32
 8007b22:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	228c      	movs	r2, #140	; 0x8c
 8007b28:	2120      	movs	r1, #32
 8007b2a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2284      	movs	r2, #132	; 0x84
 8007b30:	2100      	movs	r1, #0
 8007b32:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e069      	b.n	8007c0c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2204      	movs	r2, #4
 8007b40:	4013      	ands	r3, r2
 8007b42:	d052      	beq.n	8007bea <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	69da      	ldr	r2, [r3, #28]
 8007b4a:	2380      	movs	r3, #128	; 0x80
 8007b4c:	011b      	lsls	r3, r3, #4
 8007b4e:	401a      	ands	r2, r3
 8007b50:	2380      	movs	r3, #128	; 0x80
 8007b52:	011b      	lsls	r3, r3, #4
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d148      	bne.n	8007bea <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2280      	movs	r2, #128	; 0x80
 8007b5e:	0112      	lsls	r2, r2, #4
 8007b60:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b62:	f3ef 8310 	mrs	r3, PRIMASK
 8007b66:	613b      	str	r3, [r7, #16]
  return(result);
 8007b68:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f383 8810 	msr	PRIMASK, r3
}
 8007b76:	46c0      	nop			; (mov r8, r8)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4924      	ldr	r1, [pc, #144]	; (8007c14 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007b84:	400a      	ands	r2, r1
 8007b86:	601a      	str	r2, [r3, #0]
 8007b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	f383 8810 	msr	PRIMASK, r3
}
 8007b92:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b94:	f3ef 8310 	mrs	r3, PRIMASK
 8007b98:	61fb      	str	r3, [r7, #28]
  return(result);
 8007b9a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ba2:	6a3b      	ldr	r3, [r7, #32]
 8007ba4:	f383 8810 	msr	PRIMASK, r3
}
 8007ba8:	46c0      	nop			; (mov r8, r8)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	689a      	ldr	r2, [r3, #8]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	438a      	bics	r2, r1
 8007bb8:	609a      	str	r2, [r3, #8]
 8007bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	f383 8810 	msr	PRIMASK, r3
}
 8007bc4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2288      	movs	r2, #136	; 0x88
 8007bca:	2120      	movs	r1, #32
 8007bcc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	228c      	movs	r2, #140	; 0x8c
 8007bd2:	2120      	movs	r1, #32
 8007bd4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2290      	movs	r2, #144	; 0x90
 8007bda:	2120      	movs	r1, #32
 8007bdc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2284      	movs	r2, #132	; 0x84
 8007be2:	2100      	movs	r1, #0
 8007be4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e010      	b.n	8007c0c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	69db      	ldr	r3, [r3, #28]
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	425a      	negs	r2, r3
 8007bfa:	4153      	adcs	r3, r2
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	001a      	movs	r2, r3
 8007c00:	1dfb      	adds	r3, r7, #7
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d100      	bne.n	8007c0a <UART_WaitOnFlagUntilTimeout+0x182>
 8007c08:	e747      	b.n	8007a9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	0018      	movs	r0, r3
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	b014      	add	sp, #80	; 0x50
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	fffffe5f 	.word	0xfffffe5f

08007c18 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b090      	sub	sp, #64	; 0x40
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	1dbb      	adds	r3, r7, #6
 8007c24:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	1dba      	adds	r2, r7, #6
 8007c30:	215c      	movs	r1, #92	; 0x5c
 8007c32:	8812      	ldrh	r2, [r2, #0]
 8007c34:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2290      	movs	r2, #144	; 0x90
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	228c      	movs	r2, #140	; 0x8c
 8007c42:	2122      	movs	r1, #34	; 0x22
 8007c44:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2280      	movs	r2, #128	; 0x80
 8007c4a:	589b      	ldr	r3, [r3, r2]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d02d      	beq.n	8007cac <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2280      	movs	r2, #128	; 0x80
 8007c54:	589b      	ldr	r3, [r3, r2]
 8007c56:	4a40      	ldr	r2, [pc, #256]	; (8007d58 <UART_Start_Receive_DMA+0x140>)
 8007c58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2280      	movs	r2, #128	; 0x80
 8007c5e:	589b      	ldr	r3, [r3, r2]
 8007c60:	4a3e      	ldr	r2, [pc, #248]	; (8007d5c <UART_Start_Receive_DMA+0x144>)
 8007c62:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2280      	movs	r2, #128	; 0x80
 8007c68:	589b      	ldr	r3, [r3, r2]
 8007c6a:	4a3d      	ldr	r2, [pc, #244]	; (8007d60 <UART_Start_Receive_DMA+0x148>)
 8007c6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2280      	movs	r2, #128	; 0x80
 8007c72:	589b      	ldr	r3, [r3, r2]
 8007c74:	2200      	movs	r2, #0
 8007c76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2280      	movs	r2, #128	; 0x80
 8007c7c:	5898      	ldr	r0, [r3, r2]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	3324      	adds	r3, #36	; 0x24
 8007c84:	0019      	movs	r1, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c8a:	001a      	movs	r2, r3
 8007c8c:	1dbb      	adds	r3, r7, #6
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	f7fd f863 	bl	8004d5a <HAL_DMA_Start_IT>
 8007c94:	1e03      	subs	r3, r0, #0
 8007c96:	d009      	beq.n	8007cac <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2290      	movs	r2, #144	; 0x90
 8007c9c:	2110      	movs	r1, #16
 8007c9e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	228c      	movs	r2, #140	; 0x8c
 8007ca4:	2120      	movs	r1, #32
 8007ca6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e050      	b.n	8007d4e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d019      	beq.n	8007ce8 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8007cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc4:	f383 8810 	msr	PRIMASK, r3
}
 8007cc8:	46c0      	nop			; (mov r8, r8)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2180      	movs	r1, #128	; 0x80
 8007cd6:	0049      	lsls	r1, r1, #1
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	601a      	str	r2, [r3, #0]
 8007cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cde:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce2:	f383 8810 	msr	PRIMASK, r3
}
 8007ce6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8007cec:	613b      	str	r3, [r7, #16]
  return(result);
 8007cee:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cf0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	f383 8810 	msr	PRIMASK, r3
}
 8007cfc:	46c0      	nop			; (mov r8, r8)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	689a      	ldr	r2, [r3, #8]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2101      	movs	r1, #1
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	609a      	str	r2, [r3, #8]
 8007d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d10:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	f383 8810 	msr	PRIMASK, r3
}
 8007d18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8007d1e:	61fb      	str	r3, [r7, #28]
  return(result);
 8007d20:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d22:	637b      	str	r3, [r7, #52]	; 0x34
 8007d24:	2301      	movs	r3, #1
 8007d26:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	f383 8810 	msr	PRIMASK, r3
}
 8007d2e:	46c0      	nop			; (mov r8, r8)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689a      	ldr	r2, [r3, #8]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2140      	movs	r1, #64	; 0x40
 8007d3c:	430a      	orrs	r2, r1
 8007d3e:	609a      	str	r2, [r3, #8]
 8007d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d42:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	f383 8810 	msr	PRIMASK, r3
}
 8007d4a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	0018      	movs	r0, r3
 8007d50:	46bd      	mov	sp, r7
 8007d52:	b010      	add	sp, #64	; 0x40
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	46c0      	nop			; (mov r8, r8)
 8007d58:	08007f69 	.word	0x08007f69
 8007d5c:	08008099 	.word	0x08008099
 8007d60:	080080db 	.word	0x080080db

08007d64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b08a      	sub	sp, #40	; 0x28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8007d70:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d72:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007d74:	627b      	str	r3, [r7, #36]	; 0x24
 8007d76:	2301      	movs	r3, #1
 8007d78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f383 8810 	msr	PRIMASK, r3
}
 8007d80:	46c0      	nop			; (mov r8, r8)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	21c0      	movs	r1, #192	; 0xc0
 8007d8e:	438a      	bics	r2, r1
 8007d90:	601a      	str	r2, [r3, #0]
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	f383 8810 	msr	PRIMASK, r3
}
 8007d9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8007da2:	617b      	str	r3, [r7, #20]
  return(result);
 8007da4:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007da6:	623b      	str	r3, [r7, #32]
 8007da8:	2301      	movs	r3, #1
 8007daa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	f383 8810 	msr	PRIMASK, r3
}
 8007db2:	46c0      	nop			; (mov r8, r8)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	689a      	ldr	r2, [r3, #8]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4908      	ldr	r1, [pc, #32]	; (8007de0 <UART_EndTxTransfer+0x7c>)
 8007dc0:	400a      	ands	r2, r1
 8007dc2:	609a      	str	r2, [r3, #8]
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	f383 8810 	msr	PRIMASK, r3
}
 8007dce:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2288      	movs	r2, #136	; 0x88
 8007dd4:	2120      	movs	r1, #32
 8007dd6:	5099      	str	r1, [r3, r2]
}
 8007dd8:	46c0      	nop			; (mov r8, r8)
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	b00a      	add	sp, #40	; 0x28
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	ff7fffff 	.word	0xff7fffff

08007de4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b08e      	sub	sp, #56	; 0x38
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dec:	f3ef 8310 	mrs	r3, PRIMASK
 8007df0:	617b      	str	r3, [r7, #20]
  return(result);
 8007df2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007df4:	637b      	str	r3, [r7, #52]	; 0x34
 8007df6:	2301      	movs	r3, #1
 8007df8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	f383 8810 	msr	PRIMASK, r3
}
 8007e00:	46c0      	nop			; (mov r8, r8)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4926      	ldr	r1, [pc, #152]	; (8007ea8 <UART_EndRxTransfer+0xc4>)
 8007e0e:	400a      	ands	r2, r1
 8007e10:	601a      	str	r2, [r3, #0]
 8007e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	f383 8810 	msr	PRIMASK, r3
}
 8007e1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8007e22:	623b      	str	r3, [r7, #32]
  return(result);
 8007e24:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e26:	633b      	str	r3, [r7, #48]	; 0x30
 8007e28:	2301      	movs	r3, #1
 8007e2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	f383 8810 	msr	PRIMASK, r3
}
 8007e32:	46c0      	nop			; (mov r8, r8)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689a      	ldr	r2, [r3, #8]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	491b      	ldr	r1, [pc, #108]	; (8007eac <UART_EndRxTransfer+0xc8>)
 8007e40:	400a      	ands	r2, r1
 8007e42:	609a      	str	r2, [r3, #8]
 8007e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e46:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4a:	f383 8810 	msr	PRIMASK, r3
}
 8007e4e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d118      	bne.n	8007e8a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e58:	f3ef 8310 	mrs	r3, PRIMASK
 8007e5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e5e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e62:	2301      	movs	r3, #1
 8007e64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f383 8810 	msr	PRIMASK, r3
}
 8007e6c:	46c0      	nop			; (mov r8, r8)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2110      	movs	r1, #16
 8007e7a:	438a      	bics	r2, r1
 8007e7c:	601a      	str	r2, [r3, #0]
 8007e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	f383 8810 	msr	PRIMASK, r3
}
 8007e88:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	228c      	movs	r2, #140	; 0x8c
 8007e8e:	2120      	movs	r1, #32
 8007e90:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007e9e:	46c0      	nop			; (mov r8, r8)
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	b00e      	add	sp, #56	; 0x38
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	46c0      	nop			; (mov r8, r8)
 8007ea8:	fffffedf 	.word	0xfffffedf
 8007eac:	effffffe 	.word	0xeffffffe

08007eb0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b08c      	sub	sp, #48	; 0x30
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2220      	movs	r2, #32
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	d135      	bne.n	8007f36 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8007eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ecc:	2256      	movs	r2, #86	; 0x56
 8007ece:	2100      	movs	r1, #0
 8007ed0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ed6:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ed8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007eda:	62bb      	str	r3, [r7, #40]	; 0x28
 8007edc:	2301      	movs	r3, #1
 8007ede:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	f383 8810 	msr	PRIMASK, r3
}
 8007ee6:	46c0      	nop			; (mov r8, r8)
 8007ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	689a      	ldr	r2, [r3, #8]
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2180      	movs	r1, #128	; 0x80
 8007ef4:	438a      	bics	r2, r1
 8007ef6:	609a      	str	r2, [r3, #8]
 8007ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	f383 8810 	msr	PRIMASK, r3
}
 8007f02:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f04:	f3ef 8310 	mrs	r3, PRIMASK
 8007f08:	61bb      	str	r3, [r7, #24]
  return(result);
 8007f0a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f0e:	2301      	movs	r3, #1
 8007f10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	f383 8810 	msr	PRIMASK, r3
}
 8007f18:	46c0      	nop			; (mov r8, r8)
 8007f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2140      	movs	r1, #64	; 0x40
 8007f26:	430a      	orrs	r2, r1
 8007f28:	601a      	str	r2, [r3, #0]
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	f383 8810 	msr	PRIMASK, r3
}
 8007f34:	e004      	b.n	8007f40 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8007f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f38:	0018      	movs	r0, r3
 8007f3a:	f7ff fad4 	bl	80074e6 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f3e:	46c0      	nop			; (mov r8, r8)
 8007f40:	46c0      	nop			; (mov r8, r8)
 8007f42:	46bd      	mov	sp, r7
 8007f44:	b00c      	add	sp, #48	; 0x30
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f54:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	0018      	movs	r0, r3
 8007f5a:	f7ff facc 	bl	80074f6 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f5e:	46c0      	nop			; (mov r8, r8)
 8007f60:	46bd      	mov	sp, r7
 8007f62:	b004      	add	sp, #16
 8007f64:	bd80      	pop	{r7, pc}
	...

08007f68 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b094      	sub	sp, #80	; 0x50
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f74:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	4013      	ands	r3, r2
 8007f80:	d16f      	bne.n	8008062 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8007f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f84:	225e      	movs	r2, #94	; 0x5e
 8007f86:	2100      	movs	r1, #0
 8007f88:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007f90:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f92:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f94:	2301      	movs	r3, #1
 8007f96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	f383 8810 	msr	PRIMASK, r3
}
 8007f9e:	46c0      	nop			; (mov r8, r8)
 8007fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	493a      	ldr	r1, [pc, #232]	; (8008094 <UART_DMAReceiveCplt+0x12c>)
 8007fac:	400a      	ands	r2, r1
 8007fae:	601a      	str	r2, [r3, #0]
 8007fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fb2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	f383 8810 	msr	PRIMASK, r3
}
 8007fba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8007fc0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fcc:	f383 8810 	msr	PRIMASK, r3
}
 8007fd0:	46c0      	nop			; (mov r8, r8)
 8007fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	689a      	ldr	r2, [r3, #8]
 8007fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2101      	movs	r1, #1
 8007fde:	438a      	bics	r2, r1
 8007fe0:	609a      	str	r2, [r3, #8]
 8007fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe8:	f383 8810 	msr	PRIMASK, r3
}
 8007fec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fee:	f3ef 8310 	mrs	r3, PRIMASK
 8007ff2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ff6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ffe:	f383 8810 	msr	PRIMASK, r3
}
 8008002:	46c0      	nop			; (mov r8, r8)
 8008004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689a      	ldr	r2, [r3, #8]
 800800a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2140      	movs	r1, #64	; 0x40
 8008010:	438a      	bics	r2, r1
 8008012:	609a      	str	r2, [r3, #8]
 8008014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008016:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801a:	f383 8810 	msr	PRIMASK, r3
}
 800801e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008022:	228c      	movs	r2, #140	; 0x8c
 8008024:	2120      	movs	r1, #32
 8008026:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800802a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800802c:	2b01      	cmp	r3, #1
 800802e:	d118      	bne.n	8008062 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008030:	f3ef 8310 	mrs	r3, PRIMASK
 8008034:	60fb      	str	r3, [r7, #12]
  return(result);
 8008036:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800803a:	2301      	movs	r3, #1
 800803c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	f383 8810 	msr	PRIMASK, r3
}
 8008044:	46c0      	nop			; (mov r8, r8)
 8008046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2110      	movs	r1, #16
 8008052:	438a      	bics	r2, r1
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008058:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	f383 8810 	msr	PRIMASK, r3
}
 8008060:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008064:	2200      	movs	r2, #0
 8008066:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800806a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800806c:	2b01      	cmp	r3, #1
 800806e:	d108      	bne.n	8008082 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008072:	225c      	movs	r2, #92	; 0x5c
 8008074:	5a9a      	ldrh	r2, [r3, r2]
 8008076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008078:	0011      	movs	r1, r2
 800807a:	0018      	movs	r0, r3
 800807c:	f7ff fa53 	bl	8007526 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008080:	e003      	b.n	800808a <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8008082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008084:	0018      	movs	r0, r3
 8008086:	f002 fd05 	bl	800aa94 <HAL_UART_RxCpltCallback>
}
 800808a:	46c0      	nop			; (mov r8, r8)
 800808c:	46bd      	mov	sp, r7
 800808e:	b014      	add	sp, #80	; 0x50
 8008090:	bd80      	pop	{r7, pc}
 8008092:	46c0      	nop			; (mov r8, r8)
 8008094:	fffffeff 	.word	0xfffffeff

08008098 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2201      	movs	r2, #1
 80080aa:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d10a      	bne.n	80080ca <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	225c      	movs	r2, #92	; 0x5c
 80080b8:	5a9b      	ldrh	r3, [r3, r2]
 80080ba:	085b      	lsrs	r3, r3, #1
 80080bc:	b29a      	uxth	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	0011      	movs	r1, r2
 80080c2:	0018      	movs	r0, r3
 80080c4:	f7ff fa2f 	bl	8007526 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80080c8:	e003      	b.n	80080d2 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	0018      	movs	r0, r3
 80080ce:	f7ff fa1a 	bl	8007506 <HAL_UART_RxHalfCpltCallback>
}
 80080d2:	46c0      	nop			; (mov r8, r8)
 80080d4:	46bd      	mov	sp, r7
 80080d6:	b004      	add	sp, #16
 80080d8:	bd80      	pop	{r7, pc}

080080da <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b086      	sub	sp, #24
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	2288      	movs	r2, #136	; 0x88
 80080ec:	589b      	ldr	r3, [r3, r2]
 80080ee:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	228c      	movs	r2, #140	; 0x8c
 80080f4:	589b      	ldr	r3, [r3, r2]
 80080f6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	2280      	movs	r2, #128	; 0x80
 8008100:	4013      	ands	r3, r2
 8008102:	2b80      	cmp	r3, #128	; 0x80
 8008104:	d10a      	bne.n	800811c <UART_DMAError+0x42>
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	2b21      	cmp	r3, #33	; 0x21
 800810a:	d107      	bne.n	800811c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	2256      	movs	r2, #86	; 0x56
 8008110:	2100      	movs	r1, #0
 8008112:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	0018      	movs	r0, r3
 8008118:	f7ff fe24 	bl	8007d64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	2240      	movs	r2, #64	; 0x40
 8008124:	4013      	ands	r3, r2
 8008126:	2b40      	cmp	r3, #64	; 0x40
 8008128:	d10a      	bne.n	8008140 <UART_DMAError+0x66>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2b22      	cmp	r3, #34	; 0x22
 800812e:	d107      	bne.n	8008140 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	225e      	movs	r2, #94	; 0x5e
 8008134:	2100      	movs	r1, #0
 8008136:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	0018      	movs	r0, r3
 800813c:	f7ff fe52 	bl	8007de4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	2290      	movs	r2, #144	; 0x90
 8008144:	589b      	ldr	r3, [r3, r2]
 8008146:	2210      	movs	r2, #16
 8008148:	431a      	orrs	r2, r3
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	2190      	movs	r1, #144	; 0x90
 800814e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	0018      	movs	r0, r3
 8008154:	f7ff f9df 	bl	8007516 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008158:	46c0      	nop			; (mov r8, r8)
 800815a:	46bd      	mov	sp, r7
 800815c:	b006      	add	sp, #24
 800815e:	bd80      	pop	{r7, pc}

08008160 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2284      	movs	r2, #132	; 0x84
 800816c:	5c9b      	ldrb	r3, [r3, r2]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d101      	bne.n	8008176 <HAL_UARTEx_DisableFifoMode+0x16>
 8008172:	2302      	movs	r3, #2
 8008174:	e027      	b.n	80081c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2284      	movs	r2, #132	; 0x84
 800817a:	2101      	movs	r1, #1
 800817c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2288      	movs	r2, #136	; 0x88
 8008182:	2124      	movs	r1, #36	; 0x24
 8008184:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2101      	movs	r1, #1
 800819a:	438a      	bics	r2, r1
 800819c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	4a0b      	ldr	r2, [pc, #44]	; (80081d0 <HAL_UARTEx_DisableFifoMode+0x70>)
 80081a2:	4013      	ands	r3, r2
 80081a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2288      	movs	r2, #136	; 0x88
 80081b8:	2120      	movs	r1, #32
 80081ba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2284      	movs	r2, #132	; 0x84
 80081c0:	2100      	movs	r1, #0
 80081c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	0018      	movs	r0, r3
 80081c8:	46bd      	mov	sp, r7
 80081ca:	b004      	add	sp, #16
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	46c0      	nop			; (mov r8, r8)
 80081d0:	dfffffff 	.word	0xdfffffff

080081d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2284      	movs	r2, #132	; 0x84
 80081e2:	5c9b      	ldrb	r3, [r3, r2]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d101      	bne.n	80081ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80081e8:	2302      	movs	r3, #2
 80081ea:	e02e      	b.n	800824a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2284      	movs	r2, #132	; 0x84
 80081f0:	2101      	movs	r1, #1
 80081f2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2288      	movs	r2, #136	; 0x88
 80081f8:	2124      	movs	r1, #36	; 0x24
 80081fa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2101      	movs	r1, #1
 8008210:	438a      	bics	r2, r1
 8008212:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	00db      	lsls	r3, r3, #3
 800821c:	08d9      	lsrs	r1, r3, #3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	430a      	orrs	r2, r1
 8008226:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	0018      	movs	r0, r3
 800822c:	f000 f854 	bl	80082d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2288      	movs	r2, #136	; 0x88
 800823c:	2120      	movs	r1, #32
 800823e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2284      	movs	r2, #132	; 0x84
 8008244:	2100      	movs	r1, #0
 8008246:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	0018      	movs	r0, r3
 800824c:	46bd      	mov	sp, r7
 800824e:	b004      	add	sp, #16
 8008250:	bd80      	pop	{r7, pc}
	...

08008254 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2284      	movs	r2, #132	; 0x84
 8008262:	5c9b      	ldrb	r3, [r3, r2]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d101      	bne.n	800826c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008268:	2302      	movs	r3, #2
 800826a:	e02f      	b.n	80082cc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2284      	movs	r2, #132	; 0x84
 8008270:	2101      	movs	r1, #1
 8008272:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2288      	movs	r2, #136	; 0x88
 8008278:	2124      	movs	r1, #36	; 0x24
 800827a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2101      	movs	r1, #1
 8008290:	438a      	bics	r2, r1
 8008292:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	4a0e      	ldr	r2, [pc, #56]	; (80082d4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800829c:	4013      	ands	r3, r2
 800829e:	0019      	movs	r1, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	683a      	ldr	r2, [r7, #0]
 80082a6:	430a      	orrs	r2, r1
 80082a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	0018      	movs	r0, r3
 80082ae:	f000 f813 	bl	80082d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2288      	movs	r2, #136	; 0x88
 80082be:	2120      	movs	r1, #32
 80082c0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2284      	movs	r2, #132	; 0x84
 80082c6:	2100      	movs	r1, #0
 80082c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	0018      	movs	r0, r3
 80082ce:	46bd      	mov	sp, r7
 80082d0:	b004      	add	sp, #16
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	f1ffffff 	.word	0xf1ffffff

080082d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80082d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d108      	bne.n	80082fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	226a      	movs	r2, #106	; 0x6a
 80082ec:	2101      	movs	r1, #1
 80082ee:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2268      	movs	r2, #104	; 0x68
 80082f4:	2101      	movs	r1, #1
 80082f6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80082f8:	e043      	b.n	8008382 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80082fa:	260f      	movs	r6, #15
 80082fc:	19bb      	adds	r3, r7, r6
 80082fe:	2208      	movs	r2, #8
 8008300:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008302:	200e      	movs	r0, #14
 8008304:	183b      	adds	r3, r7, r0
 8008306:	2208      	movs	r2, #8
 8008308:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	0e5b      	lsrs	r3, r3, #25
 8008312:	b2da      	uxtb	r2, r3
 8008314:	240d      	movs	r4, #13
 8008316:	193b      	adds	r3, r7, r4
 8008318:	2107      	movs	r1, #7
 800831a:	400a      	ands	r2, r1
 800831c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	0f5b      	lsrs	r3, r3, #29
 8008326:	b2da      	uxtb	r2, r3
 8008328:	250c      	movs	r5, #12
 800832a:	197b      	adds	r3, r7, r5
 800832c:	2107      	movs	r1, #7
 800832e:	400a      	ands	r2, r1
 8008330:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008332:	183b      	adds	r3, r7, r0
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	197a      	adds	r2, r7, r5
 8008338:	7812      	ldrb	r2, [r2, #0]
 800833a:	4914      	ldr	r1, [pc, #80]	; (800838c <UARTEx_SetNbDataToProcess+0xb4>)
 800833c:	5c8a      	ldrb	r2, [r1, r2]
 800833e:	435a      	muls	r2, r3
 8008340:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008342:	197b      	adds	r3, r7, r5
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	4a12      	ldr	r2, [pc, #72]	; (8008390 <UARTEx_SetNbDataToProcess+0xb8>)
 8008348:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800834a:	0019      	movs	r1, r3
 800834c:	f7f7 ff70 	bl	8000230 <__divsi3>
 8008350:	0003      	movs	r3, r0
 8008352:	b299      	uxth	r1, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	226a      	movs	r2, #106	; 0x6a
 8008358:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800835a:	19bb      	adds	r3, r7, r6
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	193a      	adds	r2, r7, r4
 8008360:	7812      	ldrb	r2, [r2, #0]
 8008362:	490a      	ldr	r1, [pc, #40]	; (800838c <UARTEx_SetNbDataToProcess+0xb4>)
 8008364:	5c8a      	ldrb	r2, [r1, r2]
 8008366:	435a      	muls	r2, r3
 8008368:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800836a:	193b      	adds	r3, r7, r4
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	4a08      	ldr	r2, [pc, #32]	; (8008390 <UARTEx_SetNbDataToProcess+0xb8>)
 8008370:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008372:	0019      	movs	r1, r3
 8008374:	f7f7 ff5c 	bl	8000230 <__divsi3>
 8008378:	0003      	movs	r3, r0
 800837a:	b299      	uxth	r1, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2268      	movs	r2, #104	; 0x68
 8008380:	5299      	strh	r1, [r3, r2]
}
 8008382:	46c0      	nop			; (mov r8, r8)
 8008384:	46bd      	mov	sp, r7
 8008386:	b005      	add	sp, #20
 8008388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800838a:	46c0      	nop			; (mov r8, r8)
 800838c:	0800cef4 	.word	0x0800cef4
 8008390:	0800cefc 	.word	0x0800cefc

08008394 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	0002      	movs	r2, r0
 800839c:	1dbb      	adds	r3, r7, #6
 800839e:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80083a0:	2300      	movs	r3, #0
 80083a2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80083a4:	1dbb      	adds	r3, r7, #6
 80083a6:	2200      	movs	r2, #0
 80083a8:	5e9b      	ldrsh	r3, [r3, r2]
 80083aa:	2b84      	cmp	r3, #132	; 0x84
 80083ac:	d006      	beq.n	80083bc <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80083ae:	1dbb      	adds	r3, r7, #6
 80083b0:	2200      	movs	r2, #0
 80083b2:	5e9a      	ldrsh	r2, [r3, r2]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	18d3      	adds	r3, r2, r3
 80083b8:	3303      	adds	r3, #3
 80083ba:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80083bc:	68fb      	ldr	r3, [r7, #12]
}
 80083be:	0018      	movs	r0, r3
 80083c0:	46bd      	mov	sp, r7
 80083c2:	b004      	add	sp, #16
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80083ca:	f000 ffaf 	bl	800932c <vTaskStartScheduler>
  
  return osOK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	0018      	movs	r0, r3
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80083d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083d8:	b087      	sub	sp, #28
 80083da:	af02      	add	r7, sp, #8
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685c      	ldr	r4, [r3, #4]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083ec:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2208      	movs	r2, #8
 80083f2:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083f4:	0018      	movs	r0, r3
 80083f6:	f7ff ffcd 	bl	8008394 <makeFreeRtosPriority>
 80083fa:	0001      	movs	r1, r0
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	230c      	movs	r3, #12
 8008400:	18fb      	adds	r3, r7, r3
 8008402:	9301      	str	r3, [sp, #4]
 8008404:	9100      	str	r1, [sp, #0]
 8008406:	0013      	movs	r3, r2
 8008408:	0032      	movs	r2, r6
 800840a:	0029      	movs	r1, r5
 800840c:	0020      	movs	r0, r4
 800840e:	f000 fe2a 	bl	8009066 <xTaskCreate>
 8008412:	0003      	movs	r3, r0
 8008414:	2b01      	cmp	r3, #1
 8008416:	d001      	beq.n	800841c <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8008418:	2300      	movs	r3, #0
 800841a:	e000      	b.n	800841e <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 800841c:	68fb      	ldr	r3, [r7, #12]
}
 800841e:	0018      	movs	r0, r3
 8008420:	46bd      	mov	sp, r7
 8008422:	b005      	add	sp, #20
 8008424:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008426 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b084      	sub	sp, #16
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <osDelay+0x16>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	e000      	b.n	800843e <osDelay+0x18>
 800843c:	2301      	movs	r3, #1
 800843e:	0018      	movs	r0, r3
 8008440:	f000 ff4e 	bl	80092e0 <vTaskDelay>
  
  return osOK;
 8008444:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008446:	0018      	movs	r0, r3
 8008448:	46bd      	mov	sp, r7
 800844a:	b004      	add	sp, #16
 800844c:	bd80      	pop	{r7, pc}

0800844e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b082      	sub	sp, #8
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	3308      	adds	r3, #8
 800845a:	001a      	movs	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	4252      	negs	r2, r2
 8008466:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3308      	adds	r3, #8
 800846c:	001a      	movs	r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	3308      	adds	r3, #8
 8008476:	001a      	movs	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008482:	46c0      	nop			; (mov r8, r8)
 8008484:	46bd      	mov	sp, r7
 8008486:	b002      	add	sp, #8
 8008488:	bd80      	pop	{r7, pc}

0800848a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b082      	sub	sp, #8
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008498:	46c0      	nop			; (mov r8, r8)
 800849a:	46bd      	mov	sp, r7
 800849c:	b002      	add	sp, #8
 800849e:	bd80      	pop	{r7, pc}

080084a0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	689a      	ldr	r2, [r3, #8]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	683a      	ldr	r2, [r7, #0]
 80084c4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	683a      	ldr	r2, [r7, #0]
 80084ca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	1c5a      	adds	r2, r3, #1
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	601a      	str	r2, [r3, #0]
}
 80084dc:	46c0      	nop			; (mov r8, r8)
 80084de:	46bd      	mov	sp, r7
 80084e0:	b004      	add	sp, #16
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	3301      	adds	r3, #1
 80084f8:	d103      	bne.n	8008502 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	60fb      	str	r3, [r7, #12]
 8008500:	e00c      	b.n	800851c <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	3308      	adds	r3, #8
 8008506:	60fb      	str	r3, [r7, #12]
 8008508:	e002      	b.n	8008510 <vListInsert+0x2c>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	60fb      	str	r3, [r7, #12]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	429a      	cmp	r2, r3
 800851a:	d2f6      	bcs.n	800850a <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	685a      	ldr	r2, [r3, #4]
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	683a      	ldr	r2, [r7, #0]
 8008536:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	1c5a      	adds	r2, r3, #1
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	601a      	str	r2, [r3, #0]
}
 8008548:	46c0      	nop			; (mov r8, r8)
 800854a:	46bd      	mov	sp, r7
 800854c:	b004      	add	sp, #16
 800854e:	bd80      	pop	{r7, pc}

08008550 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	6892      	ldr	r2, [r2, #8]
 8008566:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	6852      	ldr	r2, [r2, #4]
 8008570:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	429a      	cmp	r2, r3
 800857a:	d103      	bne.n	8008584 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	689a      	ldr	r2, [r3, #8]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	1e5a      	subs	r2, r3, #1
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
}
 8008598:	0018      	movs	r0, r3
 800859a:	46bd      	mov	sp, r7
 800859c:	b004      	add	sp, #16
 800859e:	bd80      	pop	{r7, pc}

080085a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d101      	bne.n	80085b8 <xQueueGenericReset+0x18>
 80085b4:	b672      	cpsid	i
 80085b6:	e7fe      	b.n	80085b6 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80085b8:	f002 f822 	bl	800a600 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c8:	434b      	muls	r3, r1
 80085ca:	18d2      	adds	r2, r2, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e6:	1e59      	subs	r1, r3, #1
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ec:	434b      	muls	r3, r1
 80085ee:	18d2      	adds	r2, r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2244      	movs	r2, #68	; 0x44
 80085f8:	21ff      	movs	r1, #255	; 0xff
 80085fa:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2245      	movs	r2, #69	; 0x45
 8008600:	21ff      	movs	r1, #255	; 0xff
 8008602:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10d      	bne.n	8008626 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d013      	beq.n	800863a <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3310      	adds	r3, #16
 8008616:	0018      	movs	r0, r3
 8008618:	f001 f8ce 	bl	80097b8 <xTaskRemoveFromEventList>
 800861c:	1e03      	subs	r3, r0, #0
 800861e:	d00c      	beq.n	800863a <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008620:	f001 ffde 	bl	800a5e0 <vPortYield>
 8008624:	e009      	b.n	800863a <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	3310      	adds	r3, #16
 800862a:	0018      	movs	r0, r3
 800862c:	f7ff ff0f 	bl	800844e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	3324      	adds	r3, #36	; 0x24
 8008634:	0018      	movs	r0, r3
 8008636:	f7ff ff0a 	bl	800844e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800863a:	f001 fff3 	bl	800a624 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800863e:	2301      	movs	r3, #1
}
 8008640:	0018      	movs	r0, r3
 8008642:	46bd      	mov	sp, r7
 8008644:	b004      	add	sp, #16
 8008646:	bd80      	pop	{r7, pc}

08008648 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008648:	b590      	push	{r4, r7, lr}
 800864a:	b08b      	sub	sp, #44	; 0x2c
 800864c:	af02      	add	r7, sp, #8
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	1dfb      	adds	r3, r7, #7
 8008654:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d101      	bne.n	8008660 <xQueueGenericCreate+0x18>
 800865c:	b672      	cpsid	i
 800865e:	e7fe      	b.n	800865e <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	4353      	muls	r3, r2
 8008666:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	3350      	adds	r3, #80	; 0x50
 800866c:	0018      	movs	r0, r3
 800866e:	f002 f85f 	bl	800a730 <pvPortMalloc>
 8008672:	0003      	movs	r3, r0
 8008674:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00e      	beq.n	800869a <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	3350      	adds	r3, #80	; 0x50
 8008684:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008686:	1dfb      	adds	r3, r7, #7
 8008688:	781c      	ldrb	r4, [r3, #0]
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	68b9      	ldr	r1, [r7, #8]
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	0023      	movs	r3, r4
 8008696:	f000 f805 	bl	80086a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800869a:	69bb      	ldr	r3, [r7, #24]
	}
 800869c:	0018      	movs	r0, r3
 800869e:	46bd      	mov	sp, r7
 80086a0:	b009      	add	sp, #36	; 0x24
 80086a2:	bd90      	pop	{r4, r7, pc}

080086a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
 80086b0:	001a      	movs	r2, r3
 80086b2:	1cfb      	adds	r3, r7, #3
 80086b4:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d103      	bne.n	80086c4 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	e002      	b.n	80086ca <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	2101      	movs	r1, #1
 80086da:	0018      	movs	r0, r3
 80086dc:	f7ff ff60 	bl	80085a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	1cfa      	adds	r2, r7, #3
 80086e4:	214c      	movs	r1, #76	; 0x4c
 80086e6:	7812      	ldrb	r2, [r2, #0]
 80086e8:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80086ea:	46c0      	nop			; (mov r8, r8)
 80086ec:	46bd      	mov	sp, r7
 80086ee:	b004      	add	sp, #16
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b08a      	sub	sp, #40	; 0x28
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	60f8      	str	r0, [r7, #12]
 80086fa:	60b9      	str	r1, [r7, #8]
 80086fc:	607a      	str	r2, [r7, #4]
 80086fe:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008700:	2300      	movs	r3, #0
 8008702:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8008708:	6a3b      	ldr	r3, [r7, #32]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d101      	bne.n	8008712 <xQueueGenericSend+0x20>
 800870e:	b672      	cpsid	i
 8008710:	e7fe      	b.n	8008710 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d103      	bne.n	8008720 <xQueueGenericSend+0x2e>
 8008718:	6a3b      	ldr	r3, [r7, #32]
 800871a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871c:	2b00      	cmp	r3, #0
 800871e:	d101      	bne.n	8008724 <xQueueGenericSend+0x32>
 8008720:	2301      	movs	r3, #1
 8008722:	e000      	b.n	8008726 <xQueueGenericSend+0x34>
 8008724:	2300      	movs	r3, #0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d101      	bne.n	800872e <xQueueGenericSend+0x3c>
 800872a:	b672      	cpsid	i
 800872c:	e7fe      	b.n	800872c <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	2b02      	cmp	r3, #2
 8008732:	d103      	bne.n	800873c <xQueueGenericSend+0x4a>
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008738:	2b01      	cmp	r3, #1
 800873a:	d101      	bne.n	8008740 <xQueueGenericSend+0x4e>
 800873c:	2301      	movs	r3, #1
 800873e:	e000      	b.n	8008742 <xQueueGenericSend+0x50>
 8008740:	2300      	movs	r3, #0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <xQueueGenericSend+0x58>
 8008746:	b672      	cpsid	i
 8008748:	e7fe      	b.n	8008748 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800874a:	f001 f9b1 	bl	8009ab0 <xTaskGetSchedulerState>
 800874e:	1e03      	subs	r3, r0, #0
 8008750:	d102      	bne.n	8008758 <xQueueGenericSend+0x66>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <xQueueGenericSend+0x6a>
 8008758:	2301      	movs	r3, #1
 800875a:	e000      	b.n	800875e <xQueueGenericSend+0x6c>
 800875c:	2300      	movs	r3, #0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d101      	bne.n	8008766 <xQueueGenericSend+0x74>
 8008762:	b672      	cpsid	i
 8008764:	e7fe      	b.n	8008764 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008766:	f001 ff4b 	bl	800a600 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800876a:	6a3b      	ldr	r3, [r7, #32]
 800876c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008772:	429a      	cmp	r2, r3
 8008774:	d302      	bcc.n	800877c <xQueueGenericSend+0x8a>
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	2b02      	cmp	r3, #2
 800877a:	d11e      	bne.n	80087ba <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	68b9      	ldr	r1, [r7, #8]
 8008780:	6a3b      	ldr	r3, [r7, #32]
 8008782:	0018      	movs	r0, r3
 8008784:	f000 faf7 	bl	8008d76 <prvCopyDataToQueue>
 8008788:	0003      	movs	r3, r0
 800878a:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800878c:	6a3b      	ldr	r3, [r7, #32]
 800878e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008790:	2b00      	cmp	r3, #0
 8008792:	d009      	beq.n	80087a8 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008794:	6a3b      	ldr	r3, [r7, #32]
 8008796:	3324      	adds	r3, #36	; 0x24
 8008798:	0018      	movs	r0, r3
 800879a:	f001 f80d 	bl	80097b8 <xTaskRemoveFromEventList>
 800879e:	1e03      	subs	r3, r0, #0
 80087a0:	d007      	beq.n	80087b2 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80087a2:	f001 ff1d 	bl	800a5e0 <vPortYield>
 80087a6:	e004      	b.n	80087b2 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d001      	beq.n	80087b2 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80087ae:	f001 ff17 	bl	800a5e0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80087b2:	f001 ff37 	bl	800a624 <vPortExitCritical>
				return pdPASS;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e05b      	b.n	8008872 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d103      	bne.n	80087c8 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087c0:	f001 ff30 	bl	800a624 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80087c4:	2300      	movs	r3, #0
 80087c6:	e054      	b.n	8008872 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d106      	bne.n	80087dc <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087ce:	2314      	movs	r3, #20
 80087d0:	18fb      	adds	r3, r7, r3
 80087d2:	0018      	movs	r0, r3
 80087d4:	f001 f84c 	bl	8009870 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087d8:	2301      	movs	r3, #1
 80087da:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087dc:	f001 ff22 	bl	800a624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087e0:	f000 fde2 	bl	80093a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087e4:	f001 ff0c 	bl	800a600 <vPortEnterCritical>
 80087e8:	6a3b      	ldr	r3, [r7, #32]
 80087ea:	2244      	movs	r2, #68	; 0x44
 80087ec:	5c9b      	ldrb	r3, [r3, r2]
 80087ee:	b25b      	sxtb	r3, r3
 80087f0:	3301      	adds	r3, #1
 80087f2:	d103      	bne.n	80087fc <xQueueGenericSend+0x10a>
 80087f4:	6a3b      	ldr	r3, [r7, #32]
 80087f6:	2244      	movs	r2, #68	; 0x44
 80087f8:	2100      	movs	r1, #0
 80087fa:	5499      	strb	r1, [r3, r2]
 80087fc:	6a3b      	ldr	r3, [r7, #32]
 80087fe:	2245      	movs	r2, #69	; 0x45
 8008800:	5c9b      	ldrb	r3, [r3, r2]
 8008802:	b25b      	sxtb	r3, r3
 8008804:	3301      	adds	r3, #1
 8008806:	d103      	bne.n	8008810 <xQueueGenericSend+0x11e>
 8008808:	6a3b      	ldr	r3, [r7, #32]
 800880a:	2245      	movs	r2, #69	; 0x45
 800880c:	2100      	movs	r1, #0
 800880e:	5499      	strb	r1, [r3, r2]
 8008810:	f001 ff08 	bl	800a624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008814:	1d3a      	adds	r2, r7, #4
 8008816:	2314      	movs	r3, #20
 8008818:	18fb      	adds	r3, r7, r3
 800881a:	0011      	movs	r1, r2
 800881c:	0018      	movs	r0, r3
 800881e:	f001 f83b 	bl	8009898 <xTaskCheckForTimeOut>
 8008822:	1e03      	subs	r3, r0, #0
 8008824:	d11e      	bne.n	8008864 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008826:	6a3b      	ldr	r3, [r7, #32]
 8008828:	0018      	movs	r0, r3
 800882a:	f000 fba9 	bl	8008f80 <prvIsQueueFull>
 800882e:	1e03      	subs	r3, r0, #0
 8008830:	d011      	beq.n	8008856 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008832:	6a3b      	ldr	r3, [r7, #32]
 8008834:	3310      	adds	r3, #16
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	0011      	movs	r1, r2
 800883a:	0018      	movs	r0, r3
 800883c:	f000 ff78 	bl	8009730 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008840:	6a3b      	ldr	r3, [r7, #32]
 8008842:	0018      	movs	r0, r3
 8008844:	f000 fb28 	bl	8008e98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008848:	f000 fdba 	bl	80093c0 <xTaskResumeAll>
 800884c:	1e03      	subs	r3, r0, #0
 800884e:	d18a      	bne.n	8008766 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8008850:	f001 fec6 	bl	800a5e0 <vPortYield>
 8008854:	e787      	b.n	8008766 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008856:	6a3b      	ldr	r3, [r7, #32]
 8008858:	0018      	movs	r0, r3
 800885a:	f000 fb1d 	bl	8008e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800885e:	f000 fdaf 	bl	80093c0 <xTaskResumeAll>
 8008862:	e780      	b.n	8008766 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	0018      	movs	r0, r3
 8008868:	f000 fb16 	bl	8008e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800886c:	f000 fda8 	bl	80093c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008870:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008872:	0018      	movs	r0, r3
 8008874:	46bd      	mov	sp, r7
 8008876:	b00a      	add	sp, #40	; 0x28
 8008878:	bd80      	pop	{r7, pc}

0800887a <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800887a:	b590      	push	{r4, r7, lr}
 800887c:	b08b      	sub	sp, #44	; 0x2c
 800887e:	af00      	add	r7, sp, #0
 8008880:	60f8      	str	r0, [r7, #12]
 8008882:	60b9      	str	r1, [r7, #8]
 8008884:	607a      	str	r2, [r7, #4]
 8008886:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d101      	bne.n	8008896 <xQueueGenericSendFromISR+0x1c>
 8008892:	b672      	cpsid	i
 8008894:	e7fe      	b.n	8008894 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d103      	bne.n	80088a4 <xQueueGenericSendFromISR+0x2a>
 800889c:	6a3b      	ldr	r3, [r7, #32]
 800889e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d101      	bne.n	80088a8 <xQueueGenericSendFromISR+0x2e>
 80088a4:	2301      	movs	r3, #1
 80088a6:	e000      	b.n	80088aa <xQueueGenericSendFromISR+0x30>
 80088a8:	2300      	movs	r3, #0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d101      	bne.n	80088b2 <xQueueGenericSendFromISR+0x38>
 80088ae:	b672      	cpsid	i
 80088b0:	e7fe      	b.n	80088b0 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d103      	bne.n	80088c0 <xQueueGenericSendFromISR+0x46>
 80088b8:	6a3b      	ldr	r3, [r7, #32]
 80088ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d101      	bne.n	80088c4 <xQueueGenericSendFromISR+0x4a>
 80088c0:	2301      	movs	r3, #1
 80088c2:	e000      	b.n	80088c6 <xQueueGenericSendFromISR+0x4c>
 80088c4:	2300      	movs	r3, #0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d101      	bne.n	80088ce <xQueueGenericSendFromISR+0x54>
 80088ca:	b672      	cpsid	i
 80088cc:	e7fe      	b.n	80088cc <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088ce:	f001 fec1 	bl	800a654 <ulSetInterruptMaskFromISR>
 80088d2:	0003      	movs	r3, r0
 80088d4:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088de:	429a      	cmp	r2, r3
 80088e0:	d302      	bcc.n	80088e8 <xQueueGenericSendFromISR+0x6e>
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d131      	bne.n	800894c <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80088e8:	241b      	movs	r4, #27
 80088ea:	193b      	adds	r3, r7, r4
 80088ec:	6a3a      	ldr	r2, [r7, #32]
 80088ee:	2145      	movs	r1, #69	; 0x45
 80088f0:	5c52      	ldrb	r2, [r2, r1]
 80088f2:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f8:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	68b9      	ldr	r1, [r7, #8]
 80088fe:	6a3b      	ldr	r3, [r7, #32]
 8008900:	0018      	movs	r0, r3
 8008902:	f000 fa38 	bl	8008d76 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008906:	193b      	adds	r3, r7, r4
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	b25b      	sxtb	r3, r3
 800890c:	3301      	adds	r3, #1
 800890e:	d111      	bne.n	8008934 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008910:	6a3b      	ldr	r3, [r7, #32]
 8008912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008914:	2b00      	cmp	r3, #0
 8008916:	d016      	beq.n	8008946 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008918:	6a3b      	ldr	r3, [r7, #32]
 800891a:	3324      	adds	r3, #36	; 0x24
 800891c:	0018      	movs	r0, r3
 800891e:	f000 ff4b 	bl	80097b8 <xTaskRemoveFromEventList>
 8008922:	1e03      	subs	r3, r0, #0
 8008924:	d00f      	beq.n	8008946 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00c      	beq.n	8008946 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	601a      	str	r2, [r3, #0]
 8008932:	e008      	b.n	8008946 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008934:	231b      	movs	r3, #27
 8008936:	18fb      	adds	r3, r7, r3
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	3301      	adds	r3, #1
 800893c:	b2db      	uxtb	r3, r3
 800893e:	b259      	sxtb	r1, r3
 8008940:	6a3b      	ldr	r3, [r7, #32]
 8008942:	2245      	movs	r2, #69	; 0x45
 8008944:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8008946:	2301      	movs	r3, #1
 8008948:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800894a:	e001      	b.n	8008950 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800894c:	2300      	movs	r3, #0
 800894e:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	0018      	movs	r0, r3
 8008954:	f001 fe84 	bl	800a660 <vClearInterruptMaskFromISR>

	return xReturn;
 8008958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800895a:	0018      	movs	r0, r3
 800895c:	46bd      	mov	sp, r7
 800895e:	b00b      	add	sp, #44	; 0x2c
 8008960:	bd90      	pop	{r4, r7, pc}

08008962 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b088      	sub	sp, #32
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <xQueueGiveFromISR+0x18>
 8008976:	b672      	cpsid	i
 8008978:	e7fe      	b.n	8008978 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <xQueueGiveFromISR+0x24>
 8008982:	b672      	cpsid	i
 8008984:	e7fe      	b.n	8008984 <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d103      	bne.n	8008996 <xQueueGiveFromISR+0x34>
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <xQueueGiveFromISR+0x38>
 8008996:	2301      	movs	r3, #1
 8008998:	e000      	b.n	800899c <xQueueGiveFromISR+0x3a>
 800899a:	2300      	movs	r3, #0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d101      	bne.n	80089a4 <xQueueGiveFromISR+0x42>
 80089a0:	b672      	cpsid	i
 80089a2:	e7fe      	b.n	80089a2 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089a4:	f001 fe56 	bl	800a654 <ulSetInterruptMaskFromISR>
 80089a8:	0003      	movs	r3, r0
 80089aa:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b0:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d22c      	bcs.n	8008a16 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089bc:	200f      	movs	r0, #15
 80089be:	183b      	adds	r3, r7, r0
 80089c0:	69ba      	ldr	r2, [r7, #24]
 80089c2:	2145      	movs	r1, #69	; 0x45
 80089c4:	5c52      	ldrb	r2, [r2, r1]
 80089c6:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80089d0:	183b      	adds	r3, r7, r0
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	b25b      	sxtb	r3, r3
 80089d6:	3301      	adds	r3, #1
 80089d8:	d111      	bne.n	80089fe <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d016      	beq.n	8008a10 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	3324      	adds	r3, #36	; 0x24
 80089e6:	0018      	movs	r0, r3
 80089e8:	f000 fee6 	bl	80097b8 <xTaskRemoveFromEventList>
 80089ec:	1e03      	subs	r3, r0, #0
 80089ee:	d00f      	beq.n	8008a10 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00c      	beq.n	8008a10 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	2201      	movs	r2, #1
 80089fa:	601a      	str	r2, [r3, #0]
 80089fc:	e008      	b.n	8008a10 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80089fe:	230f      	movs	r3, #15
 8008a00:	18fb      	adds	r3, r7, r3
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	3301      	adds	r3, #1
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	b259      	sxtb	r1, r3
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	2245      	movs	r2, #69	; 0x45
 8008a0e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8008a10:	2301      	movs	r3, #1
 8008a12:	61fb      	str	r3, [r7, #28]
 8008a14:	e001      	b.n	8008a1a <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a16:	2300      	movs	r3, #0
 8008a18:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	0018      	movs	r0, r3
 8008a1e:	f001 fe1f 	bl	800a660 <vClearInterruptMaskFromISR>

	return xReturn;
 8008a22:	69fb      	ldr	r3, [r7, #28]
}
 8008a24:	0018      	movs	r0, r3
 8008a26:	46bd      	mov	sp, r7
 8008a28:	b008      	add	sp, #32
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b08a      	sub	sp, #40	; 0x28
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a40:	6a3b      	ldr	r3, [r7, #32]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d101      	bne.n	8008a4a <xQueueReceive+0x1e>
 8008a46:	b672      	cpsid	i
 8008a48:	e7fe      	b.n	8008a48 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d103      	bne.n	8008a58 <xQueueReceive+0x2c>
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d101      	bne.n	8008a5c <xQueueReceive+0x30>
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e000      	b.n	8008a5e <xQueueReceive+0x32>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <xQueueReceive+0x3a>
 8008a62:	b672      	cpsid	i
 8008a64:	e7fe      	b.n	8008a64 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a66:	f001 f823 	bl	8009ab0 <xTaskGetSchedulerState>
 8008a6a:	1e03      	subs	r3, r0, #0
 8008a6c:	d102      	bne.n	8008a74 <xQueueReceive+0x48>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d101      	bne.n	8008a78 <xQueueReceive+0x4c>
 8008a74:	2301      	movs	r3, #1
 8008a76:	e000      	b.n	8008a7a <xQueueReceive+0x4e>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d101      	bne.n	8008a82 <xQueueReceive+0x56>
 8008a7e:	b672      	cpsid	i
 8008a80:	e7fe      	b.n	8008a80 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a82:	f001 fdbd 	bl	800a600 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a86:	6a3b      	ldr	r3, [r7, #32]
 8008a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8a:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d01a      	beq.n	8008ac8 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	6a3b      	ldr	r3, [r7, #32]
 8008a96:	0011      	movs	r1, r2
 8008a98:	0018      	movs	r0, r3
 8008a9a:	f000 f9d7 	bl	8008e4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	1e5a      	subs	r2, r3, #1
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d008      	beq.n	8008ac0 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008aae:	6a3b      	ldr	r3, [r7, #32]
 8008ab0:	3310      	adds	r3, #16
 8008ab2:	0018      	movs	r0, r3
 8008ab4:	f000 fe80 	bl	80097b8 <xTaskRemoveFromEventList>
 8008ab8:	1e03      	subs	r3, r0, #0
 8008aba:	d001      	beq.n	8008ac0 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008abc:	f001 fd90 	bl	800a5e0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008ac0:	f001 fdb0 	bl	800a624 <vPortExitCritical>
				return pdPASS;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e062      	b.n	8008b8e <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d103      	bne.n	8008ad6 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ace:	f001 fda9 	bl	800a624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	e05b      	b.n	8008b8e <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d106      	bne.n	8008aea <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008adc:	2314      	movs	r3, #20
 8008ade:	18fb      	adds	r3, r7, r3
 8008ae0:	0018      	movs	r0, r3
 8008ae2:	f000 fec5 	bl	8009870 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008aea:	f001 fd9b 	bl	800a624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008aee:	f000 fc5b 	bl	80093a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008af2:	f001 fd85 	bl	800a600 <vPortEnterCritical>
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	2244      	movs	r2, #68	; 0x44
 8008afa:	5c9b      	ldrb	r3, [r3, r2]
 8008afc:	b25b      	sxtb	r3, r3
 8008afe:	3301      	adds	r3, #1
 8008b00:	d103      	bne.n	8008b0a <xQueueReceive+0xde>
 8008b02:	6a3b      	ldr	r3, [r7, #32]
 8008b04:	2244      	movs	r2, #68	; 0x44
 8008b06:	2100      	movs	r1, #0
 8008b08:	5499      	strb	r1, [r3, r2]
 8008b0a:	6a3b      	ldr	r3, [r7, #32]
 8008b0c:	2245      	movs	r2, #69	; 0x45
 8008b0e:	5c9b      	ldrb	r3, [r3, r2]
 8008b10:	b25b      	sxtb	r3, r3
 8008b12:	3301      	adds	r3, #1
 8008b14:	d103      	bne.n	8008b1e <xQueueReceive+0xf2>
 8008b16:	6a3b      	ldr	r3, [r7, #32]
 8008b18:	2245      	movs	r2, #69	; 0x45
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	5499      	strb	r1, [r3, r2]
 8008b1e:	f001 fd81 	bl	800a624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b22:	1d3a      	adds	r2, r7, #4
 8008b24:	2314      	movs	r3, #20
 8008b26:	18fb      	adds	r3, r7, r3
 8008b28:	0011      	movs	r1, r2
 8008b2a:	0018      	movs	r0, r3
 8008b2c:	f000 feb4 	bl	8009898 <xTaskCheckForTimeOut>
 8008b30:	1e03      	subs	r3, r0, #0
 8008b32:	d11e      	bne.n	8008b72 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b34:	6a3b      	ldr	r3, [r7, #32]
 8008b36:	0018      	movs	r0, r3
 8008b38:	f000 fa0c 	bl	8008f54 <prvIsQueueEmpty>
 8008b3c:	1e03      	subs	r3, r0, #0
 8008b3e:	d011      	beq.n	8008b64 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b40:	6a3b      	ldr	r3, [r7, #32]
 8008b42:	3324      	adds	r3, #36	; 0x24
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	0011      	movs	r1, r2
 8008b48:	0018      	movs	r0, r3
 8008b4a:	f000 fdf1 	bl	8009730 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b4e:	6a3b      	ldr	r3, [r7, #32]
 8008b50:	0018      	movs	r0, r3
 8008b52:	f000 f9a1 	bl	8008e98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b56:	f000 fc33 	bl	80093c0 <xTaskResumeAll>
 8008b5a:	1e03      	subs	r3, r0, #0
 8008b5c:	d191      	bne.n	8008a82 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8008b5e:	f001 fd3f 	bl	800a5e0 <vPortYield>
 8008b62:	e78e      	b.n	8008a82 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008b64:	6a3b      	ldr	r3, [r7, #32]
 8008b66:	0018      	movs	r0, r3
 8008b68:	f000 f996 	bl	8008e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b6c:	f000 fc28 	bl	80093c0 <xTaskResumeAll>
 8008b70:	e787      	b.n	8008a82 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	0018      	movs	r0, r3
 8008b76:	f000 f98f 	bl	8008e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b7a:	f000 fc21 	bl	80093c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	0018      	movs	r0, r3
 8008b82:	f000 f9e7 	bl	8008f54 <prvIsQueueEmpty>
 8008b86:	1e03      	subs	r3, r0, #0
 8008b88:	d100      	bne.n	8008b8c <xQueueReceive+0x160>
 8008b8a:	e77a      	b.n	8008a82 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b8e:	0018      	movs	r0, r3
 8008b90:	46bd      	mov	sp, r7
 8008b92:	b00a      	add	sp, #40	; 0x28
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b08a      	sub	sp, #40	; 0x28
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
 8008b9e:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d101      	bne.n	8008bb6 <xQueueSemaphoreTake+0x20>
 8008bb2:	b672      	cpsid	i
 8008bb4:	e7fe      	b.n	8008bb4 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <xQueueSemaphoreTake+0x2c>
 8008bbe:	b672      	cpsid	i
 8008bc0:	e7fe      	b.n	8008bc0 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bc2:	f000 ff75 	bl	8009ab0 <xTaskGetSchedulerState>
 8008bc6:	1e03      	subs	r3, r0, #0
 8008bc8:	d102      	bne.n	8008bd0 <xQueueSemaphoreTake+0x3a>
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d101      	bne.n	8008bd4 <xQueueSemaphoreTake+0x3e>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e000      	b.n	8008bd6 <xQueueSemaphoreTake+0x40>
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d101      	bne.n	8008bde <xQueueSemaphoreTake+0x48>
 8008bda:	b672      	cpsid	i
 8008bdc:	e7fe      	b.n	8008bdc <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bde:	f001 fd0f 	bl	800a600 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be6:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d01d      	beq.n	8008c2a <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	1e5a      	subs	r2, r3, #1
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d104      	bne.n	8008c08 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008bfe:	f001 f8a7 	bl	8009d50 <pvTaskIncrementMutexHeldCount>
 8008c02:	0002      	movs	r2, r0
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d008      	beq.n	8008c22 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	3310      	adds	r3, #16
 8008c14:	0018      	movs	r0, r3
 8008c16:	f000 fdcf 	bl	80097b8 <xTaskRemoveFromEventList>
 8008c1a:	1e03      	subs	r3, r0, #0
 8008c1c:	d001      	beq.n	8008c22 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c1e:	f001 fcdf 	bl	800a5e0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c22:	f001 fcff 	bl	800a624 <vPortExitCritical>
				return pdPASS;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e08b      	b.n	8008d42 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d108      	bne.n	8008c42 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008c30:	6a3b      	ldr	r3, [r7, #32]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d001      	beq.n	8008c3a <xQueueSemaphoreTake+0xa4>
 8008c36:	b672      	cpsid	i
 8008c38:	e7fe      	b.n	8008c38 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008c3a:	f001 fcf3 	bl	800a624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	e07f      	b.n	8008d42 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d106      	bne.n	8008c56 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c48:	230c      	movs	r3, #12
 8008c4a:	18fb      	adds	r3, r7, r3
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	f000 fe0f 	bl	8009870 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c52:	2301      	movs	r3, #1
 8008c54:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c56:	f001 fce5 	bl	800a624 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c5a:	f000 fba5 	bl	80093a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c5e:	f001 fccf 	bl	800a600 <vPortEnterCritical>
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	2244      	movs	r2, #68	; 0x44
 8008c66:	5c9b      	ldrb	r3, [r3, r2]
 8008c68:	b25b      	sxtb	r3, r3
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	d103      	bne.n	8008c76 <xQueueSemaphoreTake+0xe0>
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	2244      	movs	r2, #68	; 0x44
 8008c72:	2100      	movs	r1, #0
 8008c74:	5499      	strb	r1, [r3, r2]
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	2245      	movs	r2, #69	; 0x45
 8008c7a:	5c9b      	ldrb	r3, [r3, r2]
 8008c7c:	b25b      	sxtb	r3, r3
 8008c7e:	3301      	adds	r3, #1
 8008c80:	d103      	bne.n	8008c8a <xQueueSemaphoreTake+0xf4>
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	2245      	movs	r2, #69	; 0x45
 8008c86:	2100      	movs	r1, #0
 8008c88:	5499      	strb	r1, [r3, r2]
 8008c8a:	f001 fccb 	bl	800a624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c8e:	003a      	movs	r2, r7
 8008c90:	230c      	movs	r3, #12
 8008c92:	18fb      	adds	r3, r7, r3
 8008c94:	0011      	movs	r1, r2
 8008c96:	0018      	movs	r0, r3
 8008c98:	f000 fdfe 	bl	8009898 <xTaskCheckForTimeOut>
 8008c9c:	1e03      	subs	r3, r0, #0
 8008c9e:	d12e      	bne.n	8008cfe <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	0018      	movs	r0, r3
 8008ca4:	f000 f956 	bl	8008f54 <prvIsQueueEmpty>
 8008ca8:	1e03      	subs	r3, r0, #0
 8008caa:	d021      	beq.n	8008cf0 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10a      	bne.n	8008cca <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 8008cb4:	f001 fca4 	bl	800a600 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	0018      	movs	r0, r3
 8008cbe:	f000 ff13 	bl	8009ae8 <xTaskPriorityInherit>
 8008cc2:	0003      	movs	r3, r0
 8008cc4:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8008cc6:	f001 fcad 	bl	800a624 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	3324      	adds	r3, #36	; 0x24
 8008cce:	683a      	ldr	r2, [r7, #0]
 8008cd0:	0011      	movs	r1, r2
 8008cd2:	0018      	movs	r0, r3
 8008cd4:	f000 fd2c 	bl	8009730 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	0018      	movs	r0, r3
 8008cdc:	f000 f8dc 	bl	8008e98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ce0:	f000 fb6e 	bl	80093c0 <xTaskResumeAll>
 8008ce4:	1e03      	subs	r3, r0, #0
 8008ce6:	d000      	beq.n	8008cea <xQueueSemaphoreTake+0x154>
 8008ce8:	e779      	b.n	8008bde <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 8008cea:	f001 fc79 	bl	800a5e0 <vPortYield>
 8008cee:	e776      	b.n	8008bde <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	0018      	movs	r0, r3
 8008cf4:	f000 f8d0 	bl	8008e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cf8:	f000 fb62 	bl	80093c0 <xTaskResumeAll>
 8008cfc:	e76f      	b.n	8008bde <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	0018      	movs	r0, r3
 8008d02:	f000 f8c9 	bl	8008e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d06:	f000 fb5b 	bl	80093c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	0018      	movs	r0, r3
 8008d0e:	f000 f921 	bl	8008f54 <prvIsQueueEmpty>
 8008d12:	1e03      	subs	r3, r0, #0
 8008d14:	d100      	bne.n	8008d18 <xQueueSemaphoreTake+0x182>
 8008d16:	e762      	b.n	8008bde <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008d18:	6a3b      	ldr	r3, [r7, #32]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d010      	beq.n	8008d40 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 8008d1e:	f001 fc6f 	bl	800a600 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	0018      	movs	r0, r3
 8008d26:	f000 f810 	bl	8008d4a <prvGetDisinheritPriorityAfterTimeout>
 8008d2a:	0003      	movs	r3, r0
 8008d2c:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	697a      	ldr	r2, [r7, #20]
 8008d34:	0011      	movs	r1, r2
 8008d36:	0018      	movs	r0, r3
 8008d38:	f000 ff9a 	bl	8009c70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008d3c:	f001 fc72 	bl	800a624 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d42:	0018      	movs	r0, r3
 8008d44:	46bd      	mov	sp, r7
 8008d46:	b00a      	add	sp, #40	; 0x28
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b084      	sub	sp, #16
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d006      	beq.n	8008d68 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2207      	movs	r2, #7
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	60fb      	str	r3, [r7, #12]
 8008d66:	e001      	b.n	8008d6c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
	}
 8008d6e:	0018      	movs	r0, r3
 8008d70:	46bd      	mov	sp, r7
 8008d72:	b004      	add	sp, #16
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b086      	sub	sp, #24
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	60f8      	str	r0, [r7, #12]
 8008d7e:	60b9      	str	r1, [r7, #8]
 8008d80:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008d82:	2300      	movs	r3, #0
 8008d84:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10e      	bne.n	8008db2 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d14e      	bne.n	8008e3a <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	0018      	movs	r0, r3
 8008da2:	f000 ff09 	bl	8009bb8 <xTaskPriorityDisinherit>
 8008da6:	0003      	movs	r3, r0
 8008da8:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	609a      	str	r2, [r3, #8]
 8008db0:	e043      	b.n	8008e3a <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d119      	bne.n	8008dec <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6858      	ldr	r0, [r3, #4]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	0019      	movs	r1, r3
 8008dc4:	f002 fe62 	bl	800ba8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	685a      	ldr	r2, [r3, #4]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd0:	18d2      	adds	r2, r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	685a      	ldr	r2, [r3, #4]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d32b      	bcc.n	8008e3a <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	605a      	str	r2, [r3, #4]
 8008dea:	e026      	b.n	8008e3a <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	68d8      	ldr	r0, [r3, #12]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	0019      	movs	r1, r3
 8008df8:	f002 fe48 	bl	800ba8c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	68da      	ldr	r2, [r3, #12]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e04:	425b      	negs	r3, r3
 8008e06:	18d2      	adds	r2, r2, r3
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	68da      	ldr	r2, [r3, #12]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d207      	bcs.n	8008e28 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	689a      	ldr	r2, [r3, #8]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e20:	425b      	negs	r3, r3
 8008e22:	18d2      	adds	r2, r2, r3
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d105      	bne.n	8008e3a <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d002      	beq.n	8008e3a <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	3b01      	subs	r3, #1
 8008e38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	1c5a      	adds	r2, r3, #1
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008e42:	697b      	ldr	r3, [r7, #20]
}
 8008e44:	0018      	movs	r0, r3
 8008e46:	46bd      	mov	sp, r7
 8008e48:	b006      	add	sp, #24
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d018      	beq.n	8008e90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68da      	ldr	r2, [r3, #12]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e66:	18d2      	adds	r2, r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	68da      	ldr	r2, [r3, #12]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d303      	bcc.n	8008e80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	68d9      	ldr	r1, [r3, #12]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	0018      	movs	r0, r3
 8008e8c:	f002 fdfe 	bl	800ba8c <memcpy>
	}
}
 8008e90:	46c0      	nop			; (mov r8, r8)
 8008e92:	46bd      	mov	sp, r7
 8008e94:	b002      	add	sp, #8
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008ea0:	f001 fbae 	bl	800a600 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008ea4:	230f      	movs	r3, #15
 8008ea6:	18fb      	adds	r3, r7, r3
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	2145      	movs	r1, #69	; 0x45
 8008eac:	5c52      	ldrb	r2, [r2, r1]
 8008eae:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008eb0:	e013      	b.n	8008eda <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d016      	beq.n	8008ee8 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	3324      	adds	r3, #36	; 0x24
 8008ebe:	0018      	movs	r0, r3
 8008ec0:	f000 fc7a 	bl	80097b8 <xTaskRemoveFromEventList>
 8008ec4:	1e03      	subs	r3, r0, #0
 8008ec6:	d001      	beq.n	8008ecc <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ec8:	f000 fd36 	bl	8009938 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008ecc:	210f      	movs	r1, #15
 8008ece:	187b      	adds	r3, r7, r1
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	b2da      	uxtb	r2, r3
 8008ed6:	187b      	adds	r3, r7, r1
 8008ed8:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008eda:	230f      	movs	r3, #15
 8008edc:	18fb      	adds	r3, r7, r3
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	b25b      	sxtb	r3, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	dce5      	bgt.n	8008eb2 <prvUnlockQueue+0x1a>
 8008ee6:	e000      	b.n	8008eea <prvUnlockQueue+0x52>
					break;
 8008ee8:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2245      	movs	r2, #69	; 0x45
 8008eee:	21ff      	movs	r1, #255	; 0xff
 8008ef0:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8008ef2:	f001 fb97 	bl	800a624 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008ef6:	f001 fb83 	bl	800a600 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008efa:	230e      	movs	r3, #14
 8008efc:	18fb      	adds	r3, r7, r3
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	2144      	movs	r1, #68	; 0x44
 8008f02:	5c52      	ldrb	r2, [r2, r1]
 8008f04:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f06:	e013      	b.n	8008f30 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	691b      	ldr	r3, [r3, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d016      	beq.n	8008f3e <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3310      	adds	r3, #16
 8008f14:	0018      	movs	r0, r3
 8008f16:	f000 fc4f 	bl	80097b8 <xTaskRemoveFromEventList>
 8008f1a:	1e03      	subs	r3, r0, #0
 8008f1c:	d001      	beq.n	8008f22 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8008f1e:	f000 fd0b 	bl	8009938 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008f22:	210e      	movs	r1, #14
 8008f24:	187b      	adds	r3, r7, r1
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	b2da      	uxtb	r2, r3
 8008f2c:	187b      	adds	r3, r7, r1
 8008f2e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f30:	230e      	movs	r3, #14
 8008f32:	18fb      	adds	r3, r7, r3
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	b25b      	sxtb	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	dce5      	bgt.n	8008f08 <prvUnlockQueue+0x70>
 8008f3c:	e000      	b.n	8008f40 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8008f3e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2244      	movs	r2, #68	; 0x44
 8008f44:	21ff      	movs	r1, #255	; 0xff
 8008f46:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8008f48:	f001 fb6c 	bl	800a624 <vPortExitCritical>
}
 8008f4c:	46c0      	nop			; (mov r8, r8)
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	b004      	add	sp, #16
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f5c:	f001 fb50 	bl	800a600 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d102      	bne.n	8008f6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	e001      	b.n	8008f72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f72:	f001 fb57 	bl	800a624 <vPortExitCritical>

	return xReturn;
 8008f76:	68fb      	ldr	r3, [r7, #12]
}
 8008f78:	0018      	movs	r0, r3
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	b004      	add	sp, #16
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f88:	f001 fb3a 	bl	800a600 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d102      	bne.n	8008f9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	e001      	b.n	8008fa2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008fa2:	f001 fb3f 	bl	800a624 <vPortExitCritical>

	return xReturn;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
}
 8008fa8:	0018      	movs	r0, r3
 8008faa:	46bd      	mov	sp, r7
 8008fac:	b004      	add	sp, #16
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60fb      	str	r3, [r7, #12]
 8008fbe:	e015      	b.n	8008fec <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008fc0:	4b0e      	ldr	r3, [pc, #56]	; (8008ffc <vQueueAddToRegistry+0x4c>)
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	00d2      	lsls	r2, r2, #3
 8008fc6:	58d3      	ldr	r3, [r2, r3]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10c      	bne.n	8008fe6 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008fcc:	4b0b      	ldr	r3, [pc, #44]	; (8008ffc <vQueueAddToRegistry+0x4c>)
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	00d2      	lsls	r2, r2, #3
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008fd6:	4a09      	ldr	r2, [pc, #36]	; (8008ffc <vQueueAddToRegistry+0x4c>)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	00db      	lsls	r3, r3, #3
 8008fdc:	18d3      	adds	r3, r2, r3
 8008fde:	3304      	adds	r3, #4
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008fe4:	e006      	b.n	8008ff4 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	60fb      	str	r3, [r7, #12]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2b07      	cmp	r3, #7
 8008ff0:	d9e6      	bls.n	8008fc0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ff2:	46c0      	nop			; (mov r8, r8)
 8008ff4:	46c0      	nop			; (mov r8, r8)
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	b004      	add	sp, #16
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	20000434 	.word	0x20000434

08009000 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009010:	f001 faf6 	bl	800a600 <vPortEnterCritical>
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	2244      	movs	r2, #68	; 0x44
 8009018:	5c9b      	ldrb	r3, [r3, r2]
 800901a:	b25b      	sxtb	r3, r3
 800901c:	3301      	adds	r3, #1
 800901e:	d103      	bne.n	8009028 <vQueueWaitForMessageRestricted+0x28>
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	2244      	movs	r2, #68	; 0x44
 8009024:	2100      	movs	r1, #0
 8009026:	5499      	strb	r1, [r3, r2]
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	2245      	movs	r2, #69	; 0x45
 800902c:	5c9b      	ldrb	r3, [r3, r2]
 800902e:	b25b      	sxtb	r3, r3
 8009030:	3301      	adds	r3, #1
 8009032:	d103      	bne.n	800903c <vQueueWaitForMessageRestricted+0x3c>
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	2245      	movs	r2, #69	; 0x45
 8009038:	2100      	movs	r1, #0
 800903a:	5499      	strb	r1, [r3, r2]
 800903c:	f001 faf2 	bl	800a624 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009044:	2b00      	cmp	r3, #0
 8009046:	d106      	bne.n	8009056 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	3324      	adds	r3, #36	; 0x24
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	68b9      	ldr	r1, [r7, #8]
 8009050:	0018      	movs	r0, r3
 8009052:	f000 fb8b 	bl	800976c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	0018      	movs	r0, r3
 800905a:	f7ff ff1d 	bl	8008e98 <prvUnlockQueue>
	}
 800905e:	46c0      	nop			; (mov r8, r8)
 8009060:	46bd      	mov	sp, r7
 8009062:	b006      	add	sp, #24
 8009064:	bd80      	pop	{r7, pc}

08009066 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009066:	b590      	push	{r4, r7, lr}
 8009068:	b08d      	sub	sp, #52	; 0x34
 800906a:	af04      	add	r7, sp, #16
 800906c:	60f8      	str	r0, [r7, #12]
 800906e:	60b9      	str	r1, [r7, #8]
 8009070:	603b      	str	r3, [r7, #0]
 8009072:	1dbb      	adds	r3, r7, #6
 8009074:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009076:	1dbb      	adds	r3, r7, #6
 8009078:	881b      	ldrh	r3, [r3, #0]
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	0018      	movs	r0, r3
 800907e:	f001 fb57 	bl	800a730 <pvPortMalloc>
 8009082:	0003      	movs	r3, r0
 8009084:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d010      	beq.n	80090ae <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800908c:	2060      	movs	r0, #96	; 0x60
 800908e:	f001 fb4f 	bl	800a730 <pvPortMalloc>
 8009092:	0003      	movs	r3, r0
 8009094:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d003      	beq.n	80090a4 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	631a      	str	r2, [r3, #48]	; 0x30
 80090a2:	e006      	b.n	80090b2 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	0018      	movs	r0, r3
 80090a8:	f001 fbee 	bl	800a888 <vPortFree>
 80090ac:	e001      	b.n	80090b2 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80090ae:	2300      	movs	r3, #0
 80090b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d016      	beq.n	80090e6 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80090b8:	1dbb      	adds	r3, r7, #6
 80090ba:	881a      	ldrh	r2, [r3, #0]
 80090bc:	683c      	ldr	r4, [r7, #0]
 80090be:	68b9      	ldr	r1, [r7, #8]
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	2300      	movs	r3, #0
 80090c4:	9303      	str	r3, [sp, #12]
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	9302      	str	r3, [sp, #8]
 80090ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090cc:	9301      	str	r3, [sp, #4]
 80090ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	0023      	movs	r3, r4
 80090d4:	f000 f810 	bl	80090f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	0018      	movs	r0, r3
 80090dc:	f000 f898 	bl	8009210 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80090e0:	2301      	movs	r3, #1
 80090e2:	61bb      	str	r3, [r7, #24]
 80090e4:	e002      	b.n	80090ec <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80090e6:	2301      	movs	r3, #1
 80090e8:	425b      	negs	r3, r3
 80090ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80090ec:	69bb      	ldr	r3, [r7, #24]
	}
 80090ee:	0018      	movs	r0, r3
 80090f0:	46bd      	mov	sp, r7
 80090f2:	b009      	add	sp, #36	; 0x24
 80090f4:	bd90      	pop	{r4, r7, pc}
	...

080090f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b086      	sub	sp, #24
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
 8009104:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009108:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	001a      	movs	r2, r3
 8009110:	21a5      	movs	r1, #165	; 0xa5
 8009112:	f002 fc27 	bl	800b964 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	493b      	ldr	r1, [pc, #236]	; (800920c <prvInitialiseNewTask+0x114>)
 800911e:	468c      	mov	ip, r1
 8009120:	4463      	add	r3, ip
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	18d3      	adds	r3, r2, r3
 8009126:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	2207      	movs	r2, #7
 800912c:	4393      	bics	r3, r2
 800912e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	2207      	movs	r2, #7
 8009134:	4013      	ands	r3, r2
 8009136:	d001      	beq.n	800913c <prvInitialiseNewTask+0x44>
 8009138:	b672      	cpsid	i
 800913a:	e7fe      	b.n	800913a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d020      	beq.n	8009184 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009142:	2300      	movs	r3, #0
 8009144:	617b      	str	r3, [r7, #20]
 8009146:	e013      	b.n	8009170 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	18d3      	adds	r3, r2, r3
 800914e:	7818      	ldrb	r0, [r3, #0]
 8009150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009152:	2134      	movs	r1, #52	; 0x34
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	18d3      	adds	r3, r2, r3
 8009158:	185b      	adds	r3, r3, r1
 800915a:	1c02      	adds	r2, r0, #0
 800915c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	18d3      	adds	r3, r2, r3
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d006      	beq.n	8009178 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	3301      	adds	r3, #1
 800916e:	617b      	str	r3, [r7, #20]
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	2b0f      	cmp	r3, #15
 8009174:	d9e8      	bls.n	8009148 <prvInitialiseNewTask+0x50>
 8009176:	e000      	b.n	800917a <prvInitialiseNewTask+0x82>
			{
				break;
 8009178:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800917a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917c:	2243      	movs	r2, #67	; 0x43
 800917e:	2100      	movs	r1, #0
 8009180:	5499      	strb	r1, [r3, r2]
 8009182:	e003      	b.n	800918c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009186:	2234      	movs	r2, #52	; 0x34
 8009188:	2100      	movs	r1, #0
 800918a:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800918c:	6a3b      	ldr	r3, [r7, #32]
 800918e:	2b06      	cmp	r3, #6
 8009190:	d901      	bls.n	8009196 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009192:	2306      	movs	r3, #6
 8009194:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009198:	6a3a      	ldr	r2, [r7, #32]
 800919a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800919c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919e:	6a3a      	ldr	r2, [r7, #32]
 80091a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80091a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a4:	2200      	movs	r2, #0
 80091a6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80091a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091aa:	3304      	adds	r3, #4
 80091ac:	0018      	movs	r0, r3
 80091ae:	f7ff f96c 	bl	800848a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80091b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b4:	3318      	adds	r3, #24
 80091b6:	0018      	movs	r0, r3
 80091b8:	f7ff f967 	bl	800848a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80091bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091c2:	6a3b      	ldr	r3, [r7, #32]
 80091c4:	2207      	movs	r2, #7
 80091c6:	1ad2      	subs	r2, r2, r3
 80091c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80091cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091d0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80091d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d4:	2200      	movs	r2, #0
 80091d6:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80091d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091da:	2200      	movs	r2, #0
 80091dc:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80091de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e0:	225c      	movs	r2, #92	; 0x5c
 80091e2:	2100      	movs	r1, #0
 80091e4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80091e6:	683a      	ldr	r2, [r7, #0]
 80091e8:	68f9      	ldr	r1, [r7, #12]
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	0018      	movs	r0, r3
 80091ee:	f001 f96b 	bl	800a4c8 <pxPortInitialiseStack>
 80091f2:	0002      	movs	r2, r0
 80091f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80091f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d002      	beq.n	8009204 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80091fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009202:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009204:	46c0      	nop			; (mov r8, r8)
 8009206:	46bd      	mov	sp, r7
 8009208:	b006      	add	sp, #24
 800920a:	bd80      	pop	{r7, pc}
 800920c:	3fffffff 	.word	0x3fffffff

08009210 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009218:	f001 f9f2 	bl	800a600 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800921c:	4b2a      	ldr	r3, [pc, #168]	; (80092c8 <prvAddNewTaskToReadyList+0xb8>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	1c5a      	adds	r2, r3, #1
 8009222:	4b29      	ldr	r3, [pc, #164]	; (80092c8 <prvAddNewTaskToReadyList+0xb8>)
 8009224:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8009226:	4b29      	ldr	r3, [pc, #164]	; (80092cc <prvAddNewTaskToReadyList+0xbc>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d109      	bne.n	8009242 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800922e:	4b27      	ldr	r3, [pc, #156]	; (80092cc <prvAddNewTaskToReadyList+0xbc>)
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009234:	4b24      	ldr	r3, [pc, #144]	; (80092c8 <prvAddNewTaskToReadyList+0xb8>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d110      	bne.n	800925e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800923c:	f000 fb96 	bl	800996c <prvInitialiseTaskLists>
 8009240:	e00d      	b.n	800925e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009242:	4b23      	ldr	r3, [pc, #140]	; (80092d0 <prvAddNewTaskToReadyList+0xc0>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d109      	bne.n	800925e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800924a:	4b20      	ldr	r3, [pc, #128]	; (80092cc <prvAddNewTaskToReadyList+0xbc>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009254:	429a      	cmp	r2, r3
 8009256:	d802      	bhi.n	800925e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009258:	4b1c      	ldr	r3, [pc, #112]	; (80092cc <prvAddNewTaskToReadyList+0xbc>)
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800925e:	4b1d      	ldr	r3, [pc, #116]	; (80092d4 <prvAddNewTaskToReadyList+0xc4>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	1c5a      	adds	r2, r3, #1
 8009264:	4b1b      	ldr	r3, [pc, #108]	; (80092d4 <prvAddNewTaskToReadyList+0xc4>)
 8009266:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009268:	4b1a      	ldr	r3, [pc, #104]	; (80092d4 <prvAddNewTaskToReadyList+0xc4>)
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009274:	4b18      	ldr	r3, [pc, #96]	; (80092d8 <prvAddNewTaskToReadyList+0xc8>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	429a      	cmp	r2, r3
 800927a:	d903      	bls.n	8009284 <prvAddNewTaskToReadyList+0x74>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009280:	4b15      	ldr	r3, [pc, #84]	; (80092d8 <prvAddNewTaskToReadyList+0xc8>)
 8009282:	601a      	str	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009288:	0013      	movs	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	189b      	adds	r3, r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4a12      	ldr	r2, [pc, #72]	; (80092dc <prvAddNewTaskToReadyList+0xcc>)
 8009292:	189a      	adds	r2, r3, r2
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	3304      	adds	r3, #4
 8009298:	0019      	movs	r1, r3
 800929a:	0010      	movs	r0, r2
 800929c:	f7ff f900 	bl	80084a0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80092a0:	f001 f9c0 	bl	800a624 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80092a4:	4b0a      	ldr	r3, [pc, #40]	; (80092d0 <prvAddNewTaskToReadyList+0xc0>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d008      	beq.n	80092be <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80092ac:	4b07      	ldr	r3, [pc, #28]	; (80092cc <prvAddNewTaskToReadyList+0xbc>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d201      	bcs.n	80092be <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80092ba:	f001 f991 	bl	800a5e0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092be:	46c0      	nop			; (mov r8, r8)
 80092c0:	46bd      	mov	sp, r7
 80092c2:	b002      	add	sp, #8
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	46c0      	nop			; (mov r8, r8)
 80092c8:	20000574 	.word	0x20000574
 80092cc:	20000474 	.word	0x20000474
 80092d0:	20000580 	.word	0x20000580
 80092d4:	20000590 	.word	0x20000590
 80092d8:	2000057c 	.word	0x2000057c
 80092dc:	20000478 	.word	0x20000478

080092e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80092e8:	2300      	movs	r3, #0
 80092ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d010      	beq.n	8009314 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80092f2:	4b0d      	ldr	r3, [pc, #52]	; (8009328 <vTaskDelay+0x48>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d001      	beq.n	80092fe <vTaskDelay+0x1e>
 80092fa:	b672      	cpsid	i
 80092fc:	e7fe      	b.n	80092fc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80092fe:	f000 f853 	bl	80093a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2100      	movs	r1, #0
 8009306:	0018      	movs	r0, r3
 8009308:	f000 fd34 	bl	8009d74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800930c:	f000 f858 	bl	80093c0 <xTaskResumeAll>
 8009310:	0003      	movs	r3, r0
 8009312:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d101      	bne.n	800931e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800931a:	f001 f961 	bl	800a5e0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800931e:	46c0      	nop			; (mov r8, r8)
 8009320:	46bd      	mov	sp, r7
 8009322:	b004      	add	sp, #16
 8009324:	bd80      	pop	{r7, pc}
 8009326:	46c0      	nop			; (mov r8, r8)
 8009328:	2000059c 	.word	0x2000059c

0800932c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8009332:	4917      	ldr	r1, [pc, #92]	; (8009390 <vTaskStartScheduler+0x64>)
 8009334:	4817      	ldr	r0, [pc, #92]	; (8009394 <vTaskStartScheduler+0x68>)
 8009336:	4b18      	ldr	r3, [pc, #96]	; (8009398 <vTaskStartScheduler+0x6c>)
 8009338:	9301      	str	r3, [sp, #4]
 800933a:	2300      	movs	r3, #0
 800933c:	9300      	str	r3, [sp, #0]
 800933e:	2300      	movs	r3, #0
 8009340:	2280      	movs	r2, #128	; 0x80
 8009342:	f7ff fe90 	bl	8009066 <xTaskCreate>
 8009346:	0003      	movs	r3, r0
 8009348:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d103      	bne.n	8009358 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
 8009350:	f000 fd64 	bl	8009e1c <xTimerCreateTimerTask>
 8009354:	0003      	movs	r3, r0
 8009356:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b01      	cmp	r3, #1
 800935c:	d10f      	bne.n	800937e <vTaskStartScheduler+0x52>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800935e:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009360:	4b0e      	ldr	r3, [pc, #56]	; (800939c <vTaskStartScheduler+0x70>)
 8009362:	2201      	movs	r2, #1
 8009364:	4252      	negs	r2, r2
 8009366:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009368:	4b0d      	ldr	r3, [pc, #52]	; (80093a0 <vTaskStartScheduler+0x74>)
 800936a:	2201      	movs	r2, #1
 800936c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800936e:	4b0d      	ldr	r3, [pc, #52]	; (80093a4 <vTaskStartScheduler+0x78>)
 8009370:	2200      	movs	r2, #0
 8009372:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8009374:	f7f9 fed2 	bl	800311c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009378:	f001 f90e 	bl	800a598 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800937c:	e004      	b.n	8009388 <vTaskStartScheduler+0x5c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	3301      	adds	r3, #1
 8009382:	d101      	bne.n	8009388 <vTaskStartScheduler+0x5c>
 8009384:	b672      	cpsid	i
 8009386:	e7fe      	b.n	8009386 <vTaskStartScheduler+0x5a>
}
 8009388:	46c0      	nop			; (mov r8, r8)
 800938a:	46bd      	mov	sp, r7
 800938c:	b002      	add	sp, #8
 800938e:	bd80      	pop	{r7, pc}
 8009390:	0800c970 	.word	0x0800c970
 8009394:	0800994d 	.word	0x0800994d
 8009398:	20000598 	.word	0x20000598
 800939c:	20000594 	.word	0x20000594
 80093a0:	20000580 	.word	0x20000580
 80093a4:	20000578 	.word	0x20000578

080093a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80093ac:	4b03      	ldr	r3, [pc, #12]	; (80093bc <vTaskSuspendAll+0x14>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	1c5a      	adds	r2, r3, #1
 80093b2:	4b02      	ldr	r3, [pc, #8]	; (80093bc <vTaskSuspendAll+0x14>)
 80093b4:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80093b6:	46c0      	nop			; (mov r8, r8)
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	2000059c 	.word	0x2000059c

080093c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80093c6:	2300      	movs	r3, #0
 80093c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80093ca:	2300      	movs	r3, #0
 80093cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80093ce:	4b3a      	ldr	r3, [pc, #232]	; (80094b8 <xTaskResumeAll+0xf8>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d101      	bne.n	80093da <xTaskResumeAll+0x1a>
 80093d6:	b672      	cpsid	i
 80093d8:	e7fe      	b.n	80093d8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80093da:	f001 f911 	bl	800a600 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80093de:	4b36      	ldr	r3, [pc, #216]	; (80094b8 <xTaskResumeAll+0xf8>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	1e5a      	subs	r2, r3, #1
 80093e4:	4b34      	ldr	r3, [pc, #208]	; (80094b8 <xTaskResumeAll+0xf8>)
 80093e6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093e8:	4b33      	ldr	r3, [pc, #204]	; (80094b8 <xTaskResumeAll+0xf8>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d15b      	bne.n	80094a8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80093f0:	4b32      	ldr	r3, [pc, #200]	; (80094bc <xTaskResumeAll+0xfc>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d057      	beq.n	80094a8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093f8:	e02f      	b.n	800945a <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093fa:	4b31      	ldr	r3, [pc, #196]	; (80094c0 <xTaskResumeAll+0x100>)
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	3318      	adds	r3, #24
 8009406:	0018      	movs	r0, r3
 8009408:	f7ff f8a2 	bl	8008550 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	3304      	adds	r3, #4
 8009410:	0018      	movs	r0, r3
 8009412:	f7ff f89d 	bl	8008550 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800941a:	4b2a      	ldr	r3, [pc, #168]	; (80094c4 <xTaskResumeAll+0x104>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	429a      	cmp	r2, r3
 8009420:	d903      	bls.n	800942a <xTaskResumeAll+0x6a>
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009426:	4b27      	ldr	r3, [pc, #156]	; (80094c4 <xTaskResumeAll+0x104>)
 8009428:	601a      	str	r2, [r3, #0]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800942e:	0013      	movs	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	189b      	adds	r3, r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4a24      	ldr	r2, [pc, #144]	; (80094c8 <xTaskResumeAll+0x108>)
 8009438:	189a      	adds	r2, r3, r2
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	3304      	adds	r3, #4
 800943e:	0019      	movs	r1, r3
 8009440:	0010      	movs	r0, r2
 8009442:	f7ff f82d 	bl	80084a0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800944a:	4b20      	ldr	r3, [pc, #128]	; (80094cc <xTaskResumeAll+0x10c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009450:	429a      	cmp	r2, r3
 8009452:	d302      	bcc.n	800945a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8009454:	4b1e      	ldr	r3, [pc, #120]	; (80094d0 <xTaskResumeAll+0x110>)
 8009456:	2201      	movs	r2, #1
 8009458:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800945a:	4b19      	ldr	r3, [pc, #100]	; (80094c0 <xTaskResumeAll+0x100>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1cb      	bne.n	80093fa <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d001      	beq.n	800946c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009468:	f000 fb04 	bl	8009a74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800946c:	4b19      	ldr	r3, [pc, #100]	; (80094d4 <xTaskResumeAll+0x114>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00f      	beq.n	8009498 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009478:	f000 f83c 	bl	80094f4 <xTaskIncrementTick>
 800947c:	1e03      	subs	r3, r0, #0
 800947e:	d002      	beq.n	8009486 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8009480:	4b13      	ldr	r3, [pc, #76]	; (80094d0 <xTaskResumeAll+0x110>)
 8009482:	2201      	movs	r2, #1
 8009484:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	3b01      	subs	r3, #1
 800948a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1f2      	bne.n	8009478 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8009492:	4b10      	ldr	r3, [pc, #64]	; (80094d4 <xTaskResumeAll+0x114>)
 8009494:	2200      	movs	r2, #0
 8009496:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009498:	4b0d      	ldr	r3, [pc, #52]	; (80094d0 <xTaskResumeAll+0x110>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d003      	beq.n	80094a8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80094a0:	2301      	movs	r3, #1
 80094a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80094a4:	f001 f89c 	bl	800a5e0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094a8:	f001 f8bc 	bl	800a624 <vPortExitCritical>

	return xAlreadyYielded;
 80094ac:	68bb      	ldr	r3, [r7, #8]
}
 80094ae:	0018      	movs	r0, r3
 80094b0:	46bd      	mov	sp, r7
 80094b2:	b004      	add	sp, #16
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	46c0      	nop			; (mov r8, r8)
 80094b8:	2000059c 	.word	0x2000059c
 80094bc:	20000574 	.word	0x20000574
 80094c0:	20000534 	.word	0x20000534
 80094c4:	2000057c 	.word	0x2000057c
 80094c8:	20000478 	.word	0x20000478
 80094cc:	20000474 	.word	0x20000474
 80094d0:	20000588 	.word	0x20000588
 80094d4:	20000584 	.word	0x20000584

080094d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80094de:	4b04      	ldr	r3, [pc, #16]	; (80094f0 <xTaskGetTickCount+0x18>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80094e4:	687b      	ldr	r3, [r7, #4]
}
 80094e6:	0018      	movs	r0, r3
 80094e8:	46bd      	mov	sp, r7
 80094ea:	b002      	add	sp, #8
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	46c0      	nop			; (mov r8, r8)
 80094f0:	20000578 	.word	0x20000578

080094f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b086      	sub	sp, #24
 80094f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80094fa:	2300      	movs	r3, #0
 80094fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094fe:	4b4a      	ldr	r3, [pc, #296]	; (8009628 <xTaskIncrementTick+0x134>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d000      	beq.n	8009508 <xTaskIncrementTick+0x14>
 8009506:	e084      	b.n	8009612 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009508:	4b48      	ldr	r3, [pc, #288]	; (800962c <xTaskIncrementTick+0x138>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	3301      	adds	r3, #1
 800950e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009510:	4b46      	ldr	r3, [pc, #280]	; (800962c <xTaskIncrementTick+0x138>)
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d117      	bne.n	800954c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800951c:	4b44      	ldr	r3, [pc, #272]	; (8009630 <xTaskIncrementTick+0x13c>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <xTaskIncrementTick+0x36>
 8009526:	b672      	cpsid	i
 8009528:	e7fe      	b.n	8009528 <xTaskIncrementTick+0x34>
 800952a:	4b41      	ldr	r3, [pc, #260]	; (8009630 <xTaskIncrementTick+0x13c>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	60fb      	str	r3, [r7, #12]
 8009530:	4b40      	ldr	r3, [pc, #256]	; (8009634 <xTaskIncrementTick+0x140>)
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	4b3e      	ldr	r3, [pc, #248]	; (8009630 <xTaskIncrementTick+0x13c>)
 8009536:	601a      	str	r2, [r3, #0]
 8009538:	4b3e      	ldr	r3, [pc, #248]	; (8009634 <xTaskIncrementTick+0x140>)
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	601a      	str	r2, [r3, #0]
 800953e:	4b3e      	ldr	r3, [pc, #248]	; (8009638 <xTaskIncrementTick+0x144>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	1c5a      	adds	r2, r3, #1
 8009544:	4b3c      	ldr	r3, [pc, #240]	; (8009638 <xTaskIncrementTick+0x144>)
 8009546:	601a      	str	r2, [r3, #0]
 8009548:	f000 fa94 	bl	8009a74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800954c:	4b3b      	ldr	r3, [pc, #236]	; (800963c <xTaskIncrementTick+0x148>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	429a      	cmp	r2, r3
 8009554:	d349      	bcc.n	80095ea <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009556:	4b36      	ldr	r3, [pc, #216]	; (8009630 <xTaskIncrementTick+0x13c>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d104      	bne.n	800956a <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009560:	4b36      	ldr	r3, [pc, #216]	; (800963c <xTaskIncrementTick+0x148>)
 8009562:	2201      	movs	r2, #1
 8009564:	4252      	negs	r2, r2
 8009566:	601a      	str	r2, [r3, #0]
					break;
 8009568:	e03f      	b.n	80095ea <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800956a:	4b31      	ldr	r3, [pc, #196]	; (8009630 <xTaskIncrementTick+0x13c>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	429a      	cmp	r2, r3
 8009580:	d203      	bcs.n	800958a <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009582:	4b2e      	ldr	r3, [pc, #184]	; (800963c <xTaskIncrementTick+0x148>)
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009588:	e02f      	b.n	80095ea <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	3304      	adds	r3, #4
 800958e:	0018      	movs	r0, r3
 8009590:	f7fe ffde 	bl	8008550 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009598:	2b00      	cmp	r3, #0
 800959a:	d004      	beq.n	80095a6 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	3318      	adds	r3, #24
 80095a0:	0018      	movs	r0, r3
 80095a2:	f7fe ffd5 	bl	8008550 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095aa:	4b25      	ldr	r3, [pc, #148]	; (8009640 <xTaskIncrementTick+0x14c>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d903      	bls.n	80095ba <xTaskIncrementTick+0xc6>
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b6:	4b22      	ldr	r3, [pc, #136]	; (8009640 <xTaskIncrementTick+0x14c>)
 80095b8:	601a      	str	r2, [r3, #0]
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095be:	0013      	movs	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	189b      	adds	r3, r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	4a1f      	ldr	r2, [pc, #124]	; (8009644 <xTaskIncrementTick+0x150>)
 80095c8:	189a      	adds	r2, r3, r2
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	3304      	adds	r3, #4
 80095ce:	0019      	movs	r1, r3
 80095d0:	0010      	movs	r0, r2
 80095d2:	f7fe ff65 	bl	80084a0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095da:	4b1b      	ldr	r3, [pc, #108]	; (8009648 <xTaskIncrementTick+0x154>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d3b8      	bcc.n	8009556 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80095e4:	2301      	movs	r3, #1
 80095e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095e8:	e7b5      	b.n	8009556 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80095ea:	4b17      	ldr	r3, [pc, #92]	; (8009648 <xTaskIncrementTick+0x154>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f0:	4914      	ldr	r1, [pc, #80]	; (8009644 <xTaskIncrementTick+0x150>)
 80095f2:	0013      	movs	r3, r2
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	189b      	adds	r3, r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	585b      	ldr	r3, [r3, r1]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d901      	bls.n	8009604 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8009600:	2301      	movs	r3, #1
 8009602:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009604:	4b11      	ldr	r3, [pc, #68]	; (800964c <xTaskIncrementTick+0x158>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d007      	beq.n	800961c <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 800960c:	2301      	movs	r3, #1
 800960e:	617b      	str	r3, [r7, #20]
 8009610:	e004      	b.n	800961c <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009612:	4b0f      	ldr	r3, [pc, #60]	; (8009650 <xTaskIncrementTick+0x15c>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	1c5a      	adds	r2, r3, #1
 8009618:	4b0d      	ldr	r3, [pc, #52]	; (8009650 <xTaskIncrementTick+0x15c>)
 800961a:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800961c:	697b      	ldr	r3, [r7, #20]
}
 800961e:	0018      	movs	r0, r3
 8009620:	46bd      	mov	sp, r7
 8009622:	b006      	add	sp, #24
 8009624:	bd80      	pop	{r7, pc}
 8009626:	46c0      	nop			; (mov r8, r8)
 8009628:	2000059c 	.word	0x2000059c
 800962c:	20000578 	.word	0x20000578
 8009630:	2000052c 	.word	0x2000052c
 8009634:	20000530 	.word	0x20000530
 8009638:	2000058c 	.word	0x2000058c
 800963c:	20000594 	.word	0x20000594
 8009640:	2000057c 	.word	0x2000057c
 8009644:	20000478 	.word	0x20000478
 8009648:	20000474 	.word	0x20000474
 800964c:	20000588 	.word	0x20000588
 8009650:	20000584 	.word	0x20000584

08009654 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800965a:	4b2e      	ldr	r3, [pc, #184]	; (8009714 <vTaskSwitchContext+0xc0>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d003      	beq.n	800966a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009662:	4b2d      	ldr	r3, [pc, #180]	; (8009718 <vTaskSwitchContext+0xc4>)
 8009664:	2201      	movs	r2, #1
 8009666:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009668:	e050      	b.n	800970c <vTaskSwitchContext+0xb8>
		xYieldPending = pdFALSE;
 800966a:	4b2b      	ldr	r3, [pc, #172]	; (8009718 <vTaskSwitchContext+0xc4>)
 800966c:	2200      	movs	r2, #0
 800966e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009670:	f7f9 fd59 	bl	8003126 <getRunTimeCounterValue>
 8009674:	0002      	movs	r2, r0
 8009676:	4b29      	ldr	r3, [pc, #164]	; (800971c <vTaskSwitchContext+0xc8>)
 8009678:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800967a:	4b28      	ldr	r3, [pc, #160]	; (800971c <vTaskSwitchContext+0xc8>)
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	4b28      	ldr	r3, [pc, #160]	; (8009720 <vTaskSwitchContext+0xcc>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	429a      	cmp	r2, r3
 8009684:	d909      	bls.n	800969a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009686:	4b27      	ldr	r3, [pc, #156]	; (8009724 <vTaskSwitchContext+0xd0>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800968c:	4a23      	ldr	r2, [pc, #140]	; (800971c <vTaskSwitchContext+0xc8>)
 800968e:	6810      	ldr	r0, [r2, #0]
 8009690:	4a23      	ldr	r2, [pc, #140]	; (8009720 <vTaskSwitchContext+0xcc>)
 8009692:	6812      	ldr	r2, [r2, #0]
 8009694:	1a82      	subs	r2, r0, r2
 8009696:	188a      	adds	r2, r1, r2
 8009698:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800969a:	4b20      	ldr	r3, [pc, #128]	; (800971c <vTaskSwitchContext+0xc8>)
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	4b20      	ldr	r3, [pc, #128]	; (8009720 <vTaskSwitchContext+0xcc>)
 80096a0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096a2:	4b21      	ldr	r3, [pc, #132]	; (8009728 <vTaskSwitchContext+0xd4>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	607b      	str	r3, [r7, #4]
 80096a8:	e007      	b.n	80096ba <vTaskSwitchContext+0x66>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d101      	bne.n	80096b4 <vTaskSwitchContext+0x60>
 80096b0:	b672      	cpsid	i
 80096b2:	e7fe      	b.n	80096b2 <vTaskSwitchContext+0x5e>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	3b01      	subs	r3, #1
 80096b8:	607b      	str	r3, [r7, #4]
 80096ba:	491c      	ldr	r1, [pc, #112]	; (800972c <vTaskSwitchContext+0xd8>)
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	0013      	movs	r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	189b      	adds	r3, r3, r2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	585b      	ldr	r3, [r3, r1]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d0ee      	beq.n	80096aa <vTaskSwitchContext+0x56>
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	0013      	movs	r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	189b      	adds	r3, r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4a15      	ldr	r2, [pc, #84]	; (800972c <vTaskSwitchContext+0xd8>)
 80096d8:	189b      	adds	r3, r3, r2
 80096da:	603b      	str	r3, [r7, #0]
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	685a      	ldr	r2, [r3, #4]
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	605a      	str	r2, [r3, #4]
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	685a      	ldr	r2, [r3, #4]
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	3308      	adds	r3, #8
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d104      	bne.n	80096fc <vTaskSwitchContext+0xa8>
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	685a      	ldr	r2, [r3, #4]
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	605a      	str	r2, [r3, #4]
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	68da      	ldr	r2, [r3, #12]
 8009702:	4b08      	ldr	r3, [pc, #32]	; (8009724 <vTaskSwitchContext+0xd0>)
 8009704:	601a      	str	r2, [r3, #0]
 8009706:	4b08      	ldr	r3, [pc, #32]	; (8009728 <vTaskSwitchContext+0xd4>)
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	601a      	str	r2, [r3, #0]
}
 800970c:	46c0      	nop			; (mov r8, r8)
 800970e:	46bd      	mov	sp, r7
 8009710:	b002      	add	sp, #8
 8009712:	bd80      	pop	{r7, pc}
 8009714:	2000059c 	.word	0x2000059c
 8009718:	20000588 	.word	0x20000588
 800971c:	200005a4 	.word	0x200005a4
 8009720:	200005a0 	.word	0x200005a0
 8009724:	20000474 	.word	0x20000474
 8009728:	2000057c 	.word	0x2000057c
 800972c:	20000478 	.word	0x20000478

08009730 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d101      	bne.n	8009744 <vTaskPlaceOnEventList+0x14>
 8009740:	b672      	cpsid	i
 8009742:	e7fe      	b.n	8009742 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009744:	4b08      	ldr	r3, [pc, #32]	; (8009768 <vTaskPlaceOnEventList+0x38>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	3318      	adds	r3, #24
 800974a:	001a      	movs	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	0011      	movs	r1, r2
 8009750:	0018      	movs	r0, r3
 8009752:	f7fe fec7 	bl	80084e4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	2101      	movs	r1, #1
 800975a:	0018      	movs	r0, r3
 800975c:	f000 fb0a 	bl	8009d74 <prvAddCurrentTaskToDelayedList>
}
 8009760:	46c0      	nop			; (mov r8, r8)
 8009762:	46bd      	mov	sp, r7
 8009764:	b002      	add	sp, #8
 8009766:	bd80      	pop	{r7, pc}
 8009768:	20000474 	.word	0x20000474

0800976c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d101      	bne.n	8009782 <vTaskPlaceOnEventListRestricted+0x16>
 800977e:	b672      	cpsid	i
 8009780:	e7fe      	b.n	8009780 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009782:	4b0c      	ldr	r3, [pc, #48]	; (80097b4 <vTaskPlaceOnEventListRestricted+0x48>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3318      	adds	r3, #24
 8009788:	001a      	movs	r2, r3
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	0011      	movs	r1, r2
 800978e:	0018      	movs	r0, r3
 8009790:	f7fe fe86 	bl	80084a0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d002      	beq.n	80097a0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800979a:	2301      	movs	r3, #1
 800979c:	425b      	negs	r3, r3
 800979e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	0011      	movs	r1, r2
 80097a6:	0018      	movs	r0, r3
 80097a8:	f000 fae4 	bl	8009d74 <prvAddCurrentTaskToDelayedList>
	}
 80097ac:	46c0      	nop			; (mov r8, r8)
 80097ae:	46bd      	mov	sp, r7
 80097b0:	b004      	add	sp, #16
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	20000474 	.word	0x20000474

080097b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d101      	bne.n	80097d2 <xTaskRemoveFromEventList+0x1a>
 80097ce:	b672      	cpsid	i
 80097d0:	e7fe      	b.n	80097d0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	3318      	adds	r3, #24
 80097d6:	0018      	movs	r0, r3
 80097d8:	f7fe feba 	bl	8008550 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097dc:	4b1e      	ldr	r3, [pc, #120]	; (8009858 <xTaskRemoveFromEventList+0xa0>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d11d      	bne.n	8009820 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	3304      	adds	r3, #4
 80097e8:	0018      	movs	r0, r3
 80097ea:	f7fe feb1 	bl	8008550 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f2:	4b1a      	ldr	r3, [pc, #104]	; (800985c <xTaskRemoveFromEventList+0xa4>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d903      	bls.n	8009802 <xTaskRemoveFromEventList+0x4a>
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097fe:	4b17      	ldr	r3, [pc, #92]	; (800985c <xTaskRemoveFromEventList+0xa4>)
 8009800:	601a      	str	r2, [r3, #0]
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009806:	0013      	movs	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	189b      	adds	r3, r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4a14      	ldr	r2, [pc, #80]	; (8009860 <xTaskRemoveFromEventList+0xa8>)
 8009810:	189a      	adds	r2, r3, r2
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	3304      	adds	r3, #4
 8009816:	0019      	movs	r1, r3
 8009818:	0010      	movs	r0, r2
 800981a:	f7fe fe41 	bl	80084a0 <vListInsertEnd>
 800981e:	e007      	b.n	8009830 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	3318      	adds	r3, #24
 8009824:	001a      	movs	r2, r3
 8009826:	4b0f      	ldr	r3, [pc, #60]	; (8009864 <xTaskRemoveFromEventList+0xac>)
 8009828:	0011      	movs	r1, r2
 800982a:	0018      	movs	r0, r3
 800982c:	f7fe fe38 	bl	80084a0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009834:	4b0c      	ldr	r3, [pc, #48]	; (8009868 <xTaskRemoveFromEventList+0xb0>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983a:	429a      	cmp	r2, r3
 800983c:	d905      	bls.n	800984a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800983e:	2301      	movs	r3, #1
 8009840:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009842:	4b0a      	ldr	r3, [pc, #40]	; (800986c <xTaskRemoveFromEventList+0xb4>)
 8009844:	2201      	movs	r2, #1
 8009846:	601a      	str	r2, [r3, #0]
 8009848:	e001      	b.n	800984e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800984a:	2300      	movs	r3, #0
 800984c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800984e:	68fb      	ldr	r3, [r7, #12]
}
 8009850:	0018      	movs	r0, r3
 8009852:	46bd      	mov	sp, r7
 8009854:	b004      	add	sp, #16
 8009856:	bd80      	pop	{r7, pc}
 8009858:	2000059c 	.word	0x2000059c
 800985c:	2000057c 	.word	0x2000057c
 8009860:	20000478 	.word	0x20000478
 8009864:	20000534 	.word	0x20000534
 8009868:	20000474 	.word	0x20000474
 800986c:	20000588 	.word	0x20000588

08009870 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009878:	4b05      	ldr	r3, [pc, #20]	; (8009890 <vTaskInternalSetTimeOutState+0x20>)
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009880:	4b04      	ldr	r3, [pc, #16]	; (8009894 <vTaskInternalSetTimeOutState+0x24>)
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	605a      	str	r2, [r3, #4]
}
 8009888:	46c0      	nop			; (mov r8, r8)
 800988a:	46bd      	mov	sp, r7
 800988c:	b002      	add	sp, #8
 800988e:	bd80      	pop	{r7, pc}
 8009890:	2000058c 	.word	0x2000058c
 8009894:	20000578 	.word	0x20000578

08009898 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d101      	bne.n	80098ac <xTaskCheckForTimeOut+0x14>
 80098a8:	b672      	cpsid	i
 80098aa:	e7fe      	b.n	80098aa <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d101      	bne.n	80098b6 <xTaskCheckForTimeOut+0x1e>
 80098b2:	b672      	cpsid	i
 80098b4:	e7fe      	b.n	80098b4 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80098b6:	f000 fea3 	bl	800a600 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80098ba:	4b1d      	ldr	r3, [pc, #116]	; (8009930 <xTaskCheckForTimeOut+0x98>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	693a      	ldr	r2, [r7, #16]
 80098c6:	1ad3      	subs	r3, r2, r3
 80098c8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	3301      	adds	r3, #1
 80098d0:	d102      	bne.n	80098d8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80098d2:	2300      	movs	r3, #0
 80098d4:	617b      	str	r3, [r7, #20]
 80098d6:	e024      	b.n	8009922 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	4b15      	ldr	r3, [pc, #84]	; (8009934 <xTaskCheckForTimeOut+0x9c>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d007      	beq.n	80098f4 <xTaskCheckForTimeOut+0x5c>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d302      	bcc.n	80098f4 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80098ee:	2301      	movs	r3, #1
 80098f0:	617b      	str	r3, [r7, #20]
 80098f2:	e016      	b.n	8009922 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d20c      	bcs.n	8009918 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	1ad2      	subs	r2, r2, r3
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	0018      	movs	r0, r3
 800990e:	f7ff ffaf 	bl	8009870 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009912:	2300      	movs	r3, #0
 8009914:	617b      	str	r3, [r7, #20]
 8009916:	e004      	b.n	8009922 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	2200      	movs	r2, #0
 800991c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800991e:	2301      	movs	r3, #1
 8009920:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8009922:	f000 fe7f 	bl	800a624 <vPortExitCritical>

	return xReturn;
 8009926:	697b      	ldr	r3, [r7, #20]
}
 8009928:	0018      	movs	r0, r3
 800992a:	46bd      	mov	sp, r7
 800992c:	b006      	add	sp, #24
 800992e:	bd80      	pop	{r7, pc}
 8009930:	20000578 	.word	0x20000578
 8009934:	2000058c 	.word	0x2000058c

08009938 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800993c:	4b02      	ldr	r3, [pc, #8]	; (8009948 <vTaskMissedYield+0x10>)
 800993e:	2201      	movs	r2, #1
 8009940:	601a      	str	r2, [r3, #0]
}
 8009942:	46c0      	nop			; (mov r8, r8)
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	20000588 	.word	0x20000588

0800994c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009954:	f000 f84e 	bl	80099f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009958:	4b03      	ldr	r3, [pc, #12]	; (8009968 <prvIdleTask+0x1c>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d9f9      	bls.n	8009954 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009960:	f000 fe3e 	bl	800a5e0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8009964:	e7f6      	b.n	8009954 <prvIdleTask+0x8>
 8009966:	46c0      	nop			; (mov r8, r8)
 8009968:	20000478 	.word	0x20000478

0800996c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009972:	2300      	movs	r3, #0
 8009974:	607b      	str	r3, [r7, #4]
 8009976:	e00c      	b.n	8009992 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	0013      	movs	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	189b      	adds	r3, r3, r2
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4a14      	ldr	r2, [pc, #80]	; (80099d4 <prvInitialiseTaskLists+0x68>)
 8009984:	189b      	adds	r3, r3, r2
 8009986:	0018      	movs	r0, r3
 8009988:	f7fe fd61 	bl	800844e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	3301      	adds	r3, #1
 8009990:	607b      	str	r3, [r7, #4]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2b06      	cmp	r3, #6
 8009996:	d9ef      	bls.n	8009978 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009998:	4b0f      	ldr	r3, [pc, #60]	; (80099d8 <prvInitialiseTaskLists+0x6c>)
 800999a:	0018      	movs	r0, r3
 800999c:	f7fe fd57 	bl	800844e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80099a0:	4b0e      	ldr	r3, [pc, #56]	; (80099dc <prvInitialiseTaskLists+0x70>)
 80099a2:	0018      	movs	r0, r3
 80099a4:	f7fe fd53 	bl	800844e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80099a8:	4b0d      	ldr	r3, [pc, #52]	; (80099e0 <prvInitialiseTaskLists+0x74>)
 80099aa:	0018      	movs	r0, r3
 80099ac:	f7fe fd4f 	bl	800844e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80099b0:	4b0c      	ldr	r3, [pc, #48]	; (80099e4 <prvInitialiseTaskLists+0x78>)
 80099b2:	0018      	movs	r0, r3
 80099b4:	f7fe fd4b 	bl	800844e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80099b8:	4b0b      	ldr	r3, [pc, #44]	; (80099e8 <prvInitialiseTaskLists+0x7c>)
 80099ba:	0018      	movs	r0, r3
 80099bc:	f7fe fd47 	bl	800844e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80099c0:	4b0a      	ldr	r3, [pc, #40]	; (80099ec <prvInitialiseTaskLists+0x80>)
 80099c2:	4a05      	ldr	r2, [pc, #20]	; (80099d8 <prvInitialiseTaskLists+0x6c>)
 80099c4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80099c6:	4b0a      	ldr	r3, [pc, #40]	; (80099f0 <prvInitialiseTaskLists+0x84>)
 80099c8:	4a04      	ldr	r2, [pc, #16]	; (80099dc <prvInitialiseTaskLists+0x70>)
 80099ca:	601a      	str	r2, [r3, #0]
}
 80099cc:	46c0      	nop			; (mov r8, r8)
 80099ce:	46bd      	mov	sp, r7
 80099d0:	b002      	add	sp, #8
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	20000478 	.word	0x20000478
 80099d8:	20000504 	.word	0x20000504
 80099dc:	20000518 	.word	0x20000518
 80099e0:	20000534 	.word	0x20000534
 80099e4:	20000548 	.word	0x20000548
 80099e8:	20000560 	.word	0x20000560
 80099ec:	2000052c 	.word	0x2000052c
 80099f0:	20000530 	.word	0x20000530

080099f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099fa:	e01a      	b.n	8009a32 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80099fc:	f000 fe00 	bl	800a600 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a00:	4b10      	ldr	r3, [pc, #64]	; (8009a44 <prvCheckTasksWaitingTermination+0x50>)
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	3304      	adds	r3, #4
 8009a0c:	0018      	movs	r0, r3
 8009a0e:	f7fe fd9f 	bl	8008550 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a12:	4b0d      	ldr	r3, [pc, #52]	; (8009a48 <prvCheckTasksWaitingTermination+0x54>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	1e5a      	subs	r2, r3, #1
 8009a18:	4b0b      	ldr	r3, [pc, #44]	; (8009a48 <prvCheckTasksWaitingTermination+0x54>)
 8009a1a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a1c:	4b0b      	ldr	r3, [pc, #44]	; (8009a4c <prvCheckTasksWaitingTermination+0x58>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	1e5a      	subs	r2, r3, #1
 8009a22:	4b0a      	ldr	r3, [pc, #40]	; (8009a4c <prvCheckTasksWaitingTermination+0x58>)
 8009a24:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8009a26:	f000 fdfd 	bl	800a624 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	0018      	movs	r0, r3
 8009a2e:	f000 f80f 	bl	8009a50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a32:	4b06      	ldr	r3, [pc, #24]	; (8009a4c <prvCheckTasksWaitingTermination+0x58>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d1e0      	bne.n	80099fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a3a:	46c0      	nop			; (mov r8, r8)
 8009a3c:	46c0      	nop			; (mov r8, r8)
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	b002      	add	sp, #8
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	20000548 	.word	0x20000548
 8009a48:	20000574 	.word	0x20000574
 8009a4c:	2000055c 	.word	0x2000055c

08009a50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a5c:	0018      	movs	r0, r3
 8009a5e:	f000 ff13 	bl	800a888 <vPortFree>
			vPortFree( pxTCB );
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	0018      	movs	r0, r3
 8009a66:	f000 ff0f 	bl	800a888 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a6a:	46c0      	nop			; (mov r8, r8)
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	b002      	add	sp, #8
 8009a70:	bd80      	pop	{r7, pc}
	...

08009a74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a7a:	4b0b      	ldr	r3, [pc, #44]	; (8009aa8 <prvResetNextTaskUnblockTime+0x34>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d104      	bne.n	8009a8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a84:	4b09      	ldr	r3, [pc, #36]	; (8009aac <prvResetNextTaskUnblockTime+0x38>)
 8009a86:	2201      	movs	r2, #1
 8009a88:	4252      	negs	r2, r2
 8009a8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a8c:	e008      	b.n	8009aa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a8e:	4b06      	ldr	r3, [pc, #24]	; (8009aa8 <prvResetNextTaskUnblockTime+0x34>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	685a      	ldr	r2, [r3, #4]
 8009a9c:	4b03      	ldr	r3, [pc, #12]	; (8009aac <prvResetNextTaskUnblockTime+0x38>)
 8009a9e:	601a      	str	r2, [r3, #0]
}
 8009aa0:	46c0      	nop			; (mov r8, r8)
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	b002      	add	sp, #8
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	2000052c 	.word	0x2000052c
 8009aac:	20000594 	.word	0x20000594

08009ab0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009ab6:	4b0a      	ldr	r3, [pc, #40]	; (8009ae0 <xTaskGetSchedulerState+0x30>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d102      	bne.n	8009ac4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	607b      	str	r3, [r7, #4]
 8009ac2:	e008      	b.n	8009ad6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ac4:	4b07      	ldr	r3, [pc, #28]	; (8009ae4 <xTaskGetSchedulerState+0x34>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d102      	bne.n	8009ad2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009acc:	2302      	movs	r3, #2
 8009ace:	607b      	str	r3, [r7, #4]
 8009ad0:	e001      	b.n	8009ad6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ad6:	687b      	ldr	r3, [r7, #4]
	}
 8009ad8:	0018      	movs	r0, r3
 8009ada:	46bd      	mov	sp, r7
 8009adc:	b002      	add	sp, #8
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	20000580 	.word	0x20000580
 8009ae4:	2000059c 	.word	0x2000059c

08009ae8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009af4:	2300      	movs	r3, #0
 8009af6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d051      	beq.n	8009ba2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b02:	4b2a      	ldr	r3, [pc, #168]	; (8009bac <xTaskPriorityInherit+0xc4>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d241      	bcs.n	8009b90 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	699b      	ldr	r3, [r3, #24]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	db06      	blt.n	8009b22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b14:	4b25      	ldr	r3, [pc, #148]	; (8009bac <xTaskPriorityInherit+0xc4>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1a:	2207      	movs	r2, #7
 8009b1c:	1ad2      	subs	r2, r2, r3
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	6959      	ldr	r1, [r3, #20]
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b2a:	0013      	movs	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	189b      	adds	r3, r3, r2
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4a1f      	ldr	r2, [pc, #124]	; (8009bb0 <xTaskPriorityInherit+0xc8>)
 8009b34:	189b      	adds	r3, r3, r2
 8009b36:	4299      	cmp	r1, r3
 8009b38:	d122      	bne.n	8009b80 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	0018      	movs	r0, r3
 8009b40:	f7fe fd06 	bl	8008550 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b44:	4b19      	ldr	r3, [pc, #100]	; (8009bac <xTaskPriorityInherit+0xc4>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b52:	4b18      	ldr	r3, [pc, #96]	; (8009bb4 <xTaskPriorityInherit+0xcc>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d903      	bls.n	8009b62 <xTaskPriorityInherit+0x7a>
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b5e:	4b15      	ldr	r3, [pc, #84]	; (8009bb4 <xTaskPriorityInherit+0xcc>)
 8009b60:	601a      	str	r2, [r3, #0]
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b66:	0013      	movs	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	189b      	adds	r3, r3, r2
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	4a10      	ldr	r2, [pc, #64]	; (8009bb0 <xTaskPriorityInherit+0xc8>)
 8009b70:	189a      	adds	r2, r3, r2
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	3304      	adds	r3, #4
 8009b76:	0019      	movs	r1, r3
 8009b78:	0010      	movs	r0, r2
 8009b7a:	f7fe fc91 	bl	80084a0 <vListInsertEnd>
 8009b7e:	e004      	b.n	8009b8a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b80:	4b0a      	ldr	r3, [pc, #40]	; (8009bac <xTaskPriorityInherit+0xc4>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	60fb      	str	r3, [r7, #12]
 8009b8e:	e008      	b.n	8009ba2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b94:	4b05      	ldr	r3, [pc, #20]	; (8009bac <xTaskPriorityInherit+0xc4>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d201      	bcs.n	8009ba2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
	}
 8009ba4:	0018      	movs	r0, r3
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	b004      	add	sp, #16
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	20000474 	.word	0x20000474
 8009bb0:	20000478 	.word	0x20000478
 8009bb4:	2000057c 	.word	0x2000057c

08009bb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d044      	beq.n	8009c58 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009bce:	4b25      	ldr	r3, [pc, #148]	; (8009c64 <xTaskPriorityDisinherit+0xac>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d001      	beq.n	8009bdc <xTaskPriorityDisinherit+0x24>
 8009bd8:	b672      	cpsid	i
 8009bda:	e7fe      	b.n	8009bda <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d101      	bne.n	8009be8 <xTaskPriorityDisinherit+0x30>
 8009be4:	b672      	cpsid	i
 8009be6:	e7fe      	b.n	8009be6 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bec:	1e5a      	subs	r2, r3, #1
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d02c      	beq.n	8009c58 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d128      	bne.n	8009c58 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	3304      	adds	r3, #4
 8009c0a:	0018      	movs	r0, r3
 8009c0c:	f7fe fca0 	bl	8008550 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1c:	2207      	movs	r2, #7
 8009c1e:	1ad2      	subs	r2, r2, r3
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c28:	4b0f      	ldr	r3, [pc, #60]	; (8009c68 <xTaskPriorityDisinherit+0xb0>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d903      	bls.n	8009c38 <xTaskPriorityDisinherit+0x80>
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c34:	4b0c      	ldr	r3, [pc, #48]	; (8009c68 <xTaskPriorityDisinherit+0xb0>)
 8009c36:	601a      	str	r2, [r3, #0]
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c3c:	0013      	movs	r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	189b      	adds	r3, r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4a09      	ldr	r2, [pc, #36]	; (8009c6c <xTaskPriorityDisinherit+0xb4>)
 8009c46:	189a      	adds	r2, r3, r2
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	3304      	adds	r3, #4
 8009c4c:	0019      	movs	r1, r3
 8009c4e:	0010      	movs	r0, r2
 8009c50:	f7fe fc26 	bl	80084a0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c54:	2301      	movs	r3, #1
 8009c56:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c58:	68fb      	ldr	r3, [r7, #12]
	}
 8009c5a:	0018      	movs	r0, r3
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	b004      	add	sp, #16
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	46c0      	nop			; (mov r8, r8)
 8009c64:	20000474 	.word	0x20000474
 8009c68:	2000057c 	.word	0x2000057c
 8009c6c:	20000478 	.word	0x20000478

08009c70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d058      	beq.n	8009d3a <vTaskPriorityDisinheritAfterTimeout+0xca>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d101      	bne.n	8009c94 <vTaskPriorityDisinheritAfterTimeout+0x24>
 8009c90:	b672      	cpsid	i
 8009c92:	e7fe      	b.n	8009c92 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c98:	683a      	ldr	r2, [r7, #0]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d902      	bls.n	8009ca4 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	617b      	str	r3, [r7, #20]
 8009ca2:	e002      	b.n	8009caa <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ca8:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cae:	697a      	ldr	r2, [r7, #20]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d042      	beq.n	8009d3a <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d13d      	bne.n	8009d3a <vTaskPriorityDisinheritAfterTimeout+0xca>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009cbe:	4b21      	ldr	r3, [pc, #132]	; (8009d44 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	693a      	ldr	r2, [r7, #16]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d101      	bne.n	8009ccc <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8009cc8:	b672      	cpsid	i
 8009cca:	e7fe      	b.n	8009cca <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd0:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	697a      	ldr	r2, [r7, #20]
 8009cd6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	699b      	ldr	r3, [r3, #24]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	db04      	blt.n	8009cea <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	2207      	movs	r2, #7
 8009ce4:	1ad2      	subs	r2, r2, r3
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	6959      	ldr	r1, [r3, #20]
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	0013      	movs	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	189b      	adds	r3, r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4a13      	ldr	r2, [pc, #76]	; (8009d48 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8009cfa:	189b      	adds	r3, r3, r2
 8009cfc:	4299      	cmp	r1, r3
 8009cfe:	d11c      	bne.n	8009d3a <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	3304      	adds	r3, #4
 8009d04:	0018      	movs	r0, r3
 8009d06:	f7fe fc23 	bl	8008550 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d0e:	4b0f      	ldr	r3, [pc, #60]	; (8009d4c <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d903      	bls.n	8009d1e <vTaskPriorityDisinheritAfterTimeout+0xae>
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d1a:	4b0c      	ldr	r3, [pc, #48]	; (8009d4c <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8009d1c:	601a      	str	r2, [r3, #0]
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d22:	0013      	movs	r3, r2
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	189b      	adds	r3, r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	4a07      	ldr	r2, [pc, #28]	; (8009d48 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8009d2c:	189a      	adds	r2, r3, r2
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	3304      	adds	r3, #4
 8009d32:	0019      	movs	r1, r3
 8009d34:	0010      	movs	r0, r2
 8009d36:	f7fe fbb3 	bl	80084a0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d3a:	46c0      	nop			; (mov r8, r8)
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	b006      	add	sp, #24
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	46c0      	nop			; (mov r8, r8)
 8009d44:	20000474 	.word	0x20000474
 8009d48:	20000478 	.word	0x20000478
 8009d4c:	2000057c 	.word	0x2000057c

08009d50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009d54:	4b06      	ldr	r3, [pc, #24]	; (8009d70 <pvTaskIncrementMutexHeldCount+0x20>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d004      	beq.n	8009d66 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009d5c:	4b04      	ldr	r3, [pc, #16]	; (8009d70 <pvTaskIncrementMutexHeldCount+0x20>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d62:	3201      	adds	r2, #1
 8009d64:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009d66:	4b02      	ldr	r3, [pc, #8]	; (8009d70 <pvTaskIncrementMutexHeldCount+0x20>)
 8009d68:	681b      	ldr	r3, [r3, #0]
	}
 8009d6a:	0018      	movs	r0, r3
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	20000474 	.word	0x20000474

08009d74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d7e:	4b21      	ldr	r3, [pc, #132]	; (8009e04 <prvAddCurrentTaskToDelayedList+0x90>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d84:	4b20      	ldr	r3, [pc, #128]	; (8009e08 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	3304      	adds	r3, #4
 8009d8a:	0018      	movs	r0, r3
 8009d8c:	f7fe fbe0 	bl	8008550 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	3301      	adds	r3, #1
 8009d94:	d10b      	bne.n	8009dae <prvAddCurrentTaskToDelayedList+0x3a>
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d008      	beq.n	8009dae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d9c:	4b1a      	ldr	r3, [pc, #104]	; (8009e08 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	1d1a      	adds	r2, r3, #4
 8009da2:	4b1a      	ldr	r3, [pc, #104]	; (8009e0c <prvAddCurrentTaskToDelayedList+0x98>)
 8009da4:	0011      	movs	r1, r2
 8009da6:	0018      	movs	r0, r3
 8009da8:	f7fe fb7a 	bl	80084a0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009dac:	e026      	b.n	8009dfc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	18d3      	adds	r3, r2, r3
 8009db4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009db6:	4b14      	ldr	r3, [pc, #80]	; (8009e08 <prvAddCurrentTaskToDelayedList+0x94>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d209      	bcs.n	8009dda <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dc6:	4b12      	ldr	r3, [pc, #72]	; (8009e10 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	4b0f      	ldr	r3, [pc, #60]	; (8009e08 <prvAddCurrentTaskToDelayedList+0x94>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	3304      	adds	r3, #4
 8009dd0:	0019      	movs	r1, r3
 8009dd2:	0010      	movs	r0, r2
 8009dd4:	f7fe fb86 	bl	80084e4 <vListInsert>
}
 8009dd8:	e010      	b.n	8009dfc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dda:	4b0e      	ldr	r3, [pc, #56]	; (8009e14 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	4b0a      	ldr	r3, [pc, #40]	; (8009e08 <prvAddCurrentTaskToDelayedList+0x94>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	3304      	adds	r3, #4
 8009de4:	0019      	movs	r1, r3
 8009de6:	0010      	movs	r0, r2
 8009de8:	f7fe fb7c 	bl	80084e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009dec:	4b0a      	ldr	r3, [pc, #40]	; (8009e18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d202      	bcs.n	8009dfc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009df6:	4b08      	ldr	r3, [pc, #32]	; (8009e18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009df8:	68ba      	ldr	r2, [r7, #8]
 8009dfa:	601a      	str	r2, [r3, #0]
}
 8009dfc:	46c0      	nop			; (mov r8, r8)
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	b004      	add	sp, #16
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	20000578 	.word	0x20000578
 8009e08:	20000474 	.word	0x20000474
 8009e0c:	20000560 	.word	0x20000560
 8009e10:	20000530 	.word	0x20000530
 8009e14:	2000052c 	.word	0x2000052c
 8009e18:	20000594 	.word	0x20000594

08009e1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8009e22:	2300      	movs	r3, #0
 8009e24:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009e26:	f000 faf5 	bl	800a414 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009e2a:	4b0d      	ldr	r3, [pc, #52]	; (8009e60 <xTimerCreateTimerTask+0x44>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00c      	beq.n	8009e4c <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8009e32:	2380      	movs	r3, #128	; 0x80
 8009e34:	005a      	lsls	r2, r3, #1
 8009e36:	490b      	ldr	r1, [pc, #44]	; (8009e64 <xTimerCreateTimerTask+0x48>)
 8009e38:	480b      	ldr	r0, [pc, #44]	; (8009e68 <xTimerCreateTimerTask+0x4c>)
 8009e3a:	4b0c      	ldr	r3, [pc, #48]	; (8009e6c <xTimerCreateTimerTask+0x50>)
 8009e3c:	9301      	str	r3, [sp, #4]
 8009e3e:	2302      	movs	r3, #2
 8009e40:	9300      	str	r3, [sp, #0]
 8009e42:	2300      	movs	r3, #0
 8009e44:	f7ff f90f 	bl	8009066 <xTaskCreate>
 8009e48:	0003      	movs	r3, r0
 8009e4a:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d101      	bne.n	8009e56 <xTimerCreateTimerTask+0x3a>
 8009e52:	b672      	cpsid	i
 8009e54:	e7fe      	b.n	8009e54 <xTimerCreateTimerTask+0x38>
	return xReturn;
 8009e56:	687b      	ldr	r3, [r7, #4]
}
 8009e58:	0018      	movs	r0, r3
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	b002      	add	sp, #8
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	200005d8 	.word	0x200005d8
 8009e64:	0800c978 	.word	0x0800c978
 8009e68:	0800a039 	.word	0x0800a039
 8009e6c:	200005dc 	.word	0x200005dc

08009e70 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009e70:	b590      	push	{r4, r7, lr}
 8009e72:	b089      	sub	sp, #36	; 0x24
 8009e74:	af02      	add	r7, sp, #8
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
 8009e7c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009e7e:	202c      	movs	r0, #44	; 0x2c
 8009e80:	f000 fc56 	bl	800a730 <pvPortMalloc>
 8009e84:	0003      	movs	r3, r0
 8009e86:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00e      	beq.n	8009eac <xTimerCreate+0x3c>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	2228      	movs	r2, #40	; 0x28
 8009e92:	2100      	movs	r1, #0
 8009e94:	5499      	strb	r1, [r3, r2]
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009e96:	683c      	ldr	r4, [r7, #0]
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	68b9      	ldr	r1, [r7, #8]
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	9301      	str	r3, [sp, #4]
 8009ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea4:	9300      	str	r3, [sp, #0]
 8009ea6:	0023      	movs	r3, r4
 8009ea8:	f000 f805 	bl	8009eb6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009eac:	697b      	ldr	r3, [r7, #20]
	}
 8009eae:	0018      	movs	r0, r3
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	b007      	add	sp, #28
 8009eb4:	bd90      	pop	{r4, r7, pc}

08009eb6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b084      	sub	sp, #16
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	60f8      	str	r0, [r7, #12]
 8009ebe:	60b9      	str	r1, [r7, #8]
 8009ec0:	607a      	str	r2, [r7, #4]
 8009ec2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d101      	bne.n	8009ece <prvInitialiseNewTimer+0x18>
 8009eca:	b672      	cpsid	i
 8009ecc:	e7fe      	b.n	8009ecc <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d01e      	beq.n	8009f12 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009ed4:	f000 fa9e 	bl	800a414 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	683a      	ldr	r2, [r7, #0]
 8009ee8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009eea:	69fb      	ldr	r3, [r7, #28]
 8009eec:	69ba      	ldr	r2, [r7, #24]
 8009eee:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	3304      	adds	r3, #4
 8009ef4:	0018      	movs	r0, r3
 8009ef6:	f7fe fac8 	bl	800848a <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d008      	beq.n	8009f12 <prvInitialiseNewTimer+0x5c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009f00:	69fb      	ldr	r3, [r7, #28]
 8009f02:	2228      	movs	r2, #40	; 0x28
 8009f04:	5c9b      	ldrb	r3, [r3, r2]
 8009f06:	2204      	movs	r2, #4
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	b2d9      	uxtb	r1, r3
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	2228      	movs	r2, #40	; 0x28
 8009f10:	5499      	strb	r1, [r3, r2]
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009f12:	46c0      	nop			; (mov r8, r8)
 8009f14:	46bd      	mov	sp, r7
 8009f16:	b004      	add	sp, #16
 8009f18:	bd80      	pop	{r7, pc}
	...

08009f1c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009f1c:	b590      	push	{r4, r7, lr}
 8009f1e:	b089      	sub	sp, #36	; 0x24
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]
 8009f28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d101      	bne.n	8009f38 <xTimerGenericCommand+0x1c>
 8009f34:	b672      	cpsid	i
 8009f36:	e7fe      	b.n	8009f36 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009f38:	4b1c      	ldr	r3, [pc, #112]	; (8009fac <xTimerGenericCommand+0x90>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d030      	beq.n	8009fa2 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009f40:	2410      	movs	r4, #16
 8009f42:	193b      	adds	r3, r7, r4
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009f48:	193b      	adds	r3, r7, r4
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009f4e:	193b      	adds	r3, r7, r4
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	2b05      	cmp	r3, #5
 8009f58:	dc19      	bgt.n	8009f8e <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009f5a:	f7ff fda9 	bl	8009ab0 <xTaskGetSchedulerState>
 8009f5e:	0003      	movs	r3, r0
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d109      	bne.n	8009f78 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009f64:	4b11      	ldr	r3, [pc, #68]	; (8009fac <xTimerGenericCommand+0x90>)
 8009f66:	6818      	ldr	r0, [r3, #0]
 8009f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f6a:	1939      	adds	r1, r7, r4
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	f7fe fbc0 	bl	80086f2 <xQueueGenericSend>
 8009f72:	0003      	movs	r3, r0
 8009f74:	61fb      	str	r3, [r7, #28]
 8009f76:	e014      	b.n	8009fa2 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009f78:	4b0c      	ldr	r3, [pc, #48]	; (8009fac <xTimerGenericCommand+0x90>)
 8009f7a:	6818      	ldr	r0, [r3, #0]
 8009f7c:	2310      	movs	r3, #16
 8009f7e:	18f9      	adds	r1, r7, r3
 8009f80:	2300      	movs	r3, #0
 8009f82:	2200      	movs	r2, #0
 8009f84:	f7fe fbb5 	bl	80086f2 <xQueueGenericSend>
 8009f88:	0003      	movs	r3, r0
 8009f8a:	61fb      	str	r3, [r7, #28]
 8009f8c:	e009      	b.n	8009fa2 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009f8e:	4b07      	ldr	r3, [pc, #28]	; (8009fac <xTimerGenericCommand+0x90>)
 8009f90:	6818      	ldr	r0, [r3, #0]
 8009f92:	683a      	ldr	r2, [r7, #0]
 8009f94:	2310      	movs	r3, #16
 8009f96:	18f9      	adds	r1, r7, r3
 8009f98:	2300      	movs	r3, #0
 8009f9a:	f7fe fc6e 	bl	800887a <xQueueGenericSendFromISR>
 8009f9e:	0003      	movs	r3, r0
 8009fa0:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009fa2:	69fb      	ldr	r3, [r7, #28]
}
 8009fa4:	0018      	movs	r0, r3
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	b009      	add	sp, #36	; 0x24
 8009faa:	bd90      	pop	{r4, r7, pc}
 8009fac:	200005d8 	.word	0x200005d8

08009fb0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af02      	add	r7, sp, #8
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fba:	4b1e      	ldr	r3, [pc, #120]	; (800a034 <prvProcessExpiredTimer+0x84>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	0018      	movs	r0, r3
 8009fca:	f7fe fac1 	bl	8008550 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2228      	movs	r2, #40	; 0x28
 8009fd2:	5c9b      	ldrb	r3, [r3, r2]
 8009fd4:	001a      	movs	r2, r3
 8009fd6:	2304      	movs	r3, #4
 8009fd8:	4013      	ands	r3, r2
 8009fda:	d019      	beq.n	800a010 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	699a      	ldr	r2, [r3, #24]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	18d1      	adds	r1, r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	683a      	ldr	r2, [r7, #0]
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f000 f8c3 	bl	800a174 <prvInsertTimerInActiveList>
 8009fee:	1e03      	subs	r3, r0, #0
 8009ff0:	d017      	beq.n	800a022 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	9300      	str	r3, [sp, #0]
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	f7ff ff8d 	bl	8009f1c <xTimerGenericCommand>
 800a002:	0003      	movs	r3, r0
 800a004:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10a      	bne.n	800a022 <prvProcessExpiredTimer+0x72>
 800a00c:	b672      	cpsid	i
 800a00e:	e7fe      	b.n	800a00e <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2228      	movs	r2, #40	; 0x28
 800a014:	5c9b      	ldrb	r3, [r3, r2]
 800a016:	2201      	movs	r2, #1
 800a018:	4393      	bics	r3, r2
 800a01a:	b2d9      	uxtb	r1, r3
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2228      	movs	r2, #40	; 0x28
 800a020:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	0010      	movs	r0, r2
 800a02a:	4798      	blx	r3
}
 800a02c:	46c0      	nop			; (mov r8, r8)
 800a02e:	46bd      	mov	sp, r7
 800a030:	b004      	add	sp, #16
 800a032:	bd80      	pop	{r7, pc}
 800a034:	200005d0 	.word	0x200005d0

0800a038 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a040:	2308      	movs	r3, #8
 800a042:	18fb      	adds	r3, r7, r3
 800a044:	0018      	movs	r0, r3
 800a046:	f000 f853 	bl	800a0f0 <prvGetNextExpireTime>
 800a04a:	0003      	movs	r3, r0
 800a04c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a04e:	68ba      	ldr	r2, [r7, #8]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	0011      	movs	r1, r2
 800a054:	0018      	movs	r0, r3
 800a056:	f000 f803 	bl	800a060 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a05a:	f000 f8cd 	bl	800a1f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a05e:	e7ef      	b.n	800a040 <prvTimerTask+0x8>

0800a060 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a06a:	f7ff f99d 	bl	80093a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a06e:	2308      	movs	r3, #8
 800a070:	18fb      	adds	r3, r7, r3
 800a072:	0018      	movs	r0, r3
 800a074:	f000 f85e 	bl	800a134 <prvSampleTimeNow>
 800a078:	0003      	movs	r3, r0
 800a07a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d12b      	bne.n	800a0da <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d10c      	bne.n	800a0a2 <prvProcessTimerOrBlockTask+0x42>
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d808      	bhi.n	800a0a2 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800a090:	f7ff f996 	bl	80093c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	0011      	movs	r1, r2
 800a09a:	0018      	movs	r0, r3
 800a09c:	f7ff ff88 	bl	8009fb0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a0a0:	e01d      	b.n	800a0de <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d008      	beq.n	800a0ba <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a0a8:	4b0f      	ldr	r3, [pc, #60]	; (800a0e8 <prvProcessTimerOrBlockTask+0x88>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d101      	bne.n	800a0b6 <prvProcessTimerOrBlockTask+0x56>
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e000      	b.n	800a0b8 <prvProcessTimerOrBlockTask+0x58>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a0ba:	4b0c      	ldr	r3, [pc, #48]	; (800a0ec <prvProcessTimerOrBlockTask+0x8c>)
 800a0bc:	6818      	ldr	r0, [r3, #0]
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	1ad3      	subs	r3, r2, r3
 800a0c4:	683a      	ldr	r2, [r7, #0]
 800a0c6:	0019      	movs	r1, r3
 800a0c8:	f7fe ff9a 	bl	8009000 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a0cc:	f7ff f978 	bl	80093c0 <xTaskResumeAll>
 800a0d0:	1e03      	subs	r3, r0, #0
 800a0d2:	d104      	bne.n	800a0de <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 800a0d4:	f000 fa84 	bl	800a5e0 <vPortYield>
}
 800a0d8:	e001      	b.n	800a0de <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800a0da:	f7ff f971 	bl	80093c0 <xTaskResumeAll>
}
 800a0de:	46c0      	nop			; (mov r8, r8)
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	b004      	add	sp, #16
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	46c0      	nop			; (mov r8, r8)
 800a0e8:	200005d4 	.word	0x200005d4
 800a0ec:	200005d8 	.word	0x200005d8

0800a0f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a0f8:	4b0d      	ldr	r3, [pc, #52]	; (800a130 <prvGetNextExpireTime+0x40>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d101      	bne.n	800a106 <prvGetNextExpireTime+0x16>
 800a102:	2201      	movs	r2, #1
 800a104:	e000      	b.n	800a108 <prvGetNextExpireTime+0x18>
 800a106:	2200      	movs	r2, #0
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d105      	bne.n	800a120 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a114:	4b06      	ldr	r3, [pc, #24]	; (800a130 <prvGetNextExpireTime+0x40>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	60fb      	str	r3, [r7, #12]
 800a11e:	e001      	b.n	800a124 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a120:	2300      	movs	r3, #0
 800a122:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a124:	68fb      	ldr	r3, [r7, #12]
}
 800a126:	0018      	movs	r0, r3
 800a128:	46bd      	mov	sp, r7
 800a12a:	b004      	add	sp, #16
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	46c0      	nop			; (mov r8, r8)
 800a130:	200005d0 	.word	0x200005d0

0800a134 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a13c:	f7ff f9cc 	bl	80094d8 <xTaskGetTickCount>
 800a140:	0003      	movs	r3, r0
 800a142:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800a144:	4b0a      	ldr	r3, [pc, #40]	; (800a170 <prvSampleTimeNow+0x3c>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d205      	bcs.n	800a15a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800a14e:	f000 f903 	bl	800a358 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2201      	movs	r2, #1
 800a156:	601a      	str	r2, [r3, #0]
 800a158:	e002      	b.n	800a160 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a160:	4b03      	ldr	r3, [pc, #12]	; (800a170 <prvSampleTimeNow+0x3c>)
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800a166:	68fb      	ldr	r3, [r7, #12]
}
 800a168:	0018      	movs	r0, r3
 800a16a:	46bd      	mov	sp, r7
 800a16c:	b004      	add	sp, #16
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	200005e0 	.word	0x200005e0

0800a174 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b086      	sub	sp, #24
 800a178:	af00      	add	r7, sp, #0
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	607a      	str	r2, [r7, #4]
 800a180:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a182:	2300      	movs	r3, #0
 800a184:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a192:	68ba      	ldr	r2, [r7, #8]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	429a      	cmp	r2, r3
 800a198:	d812      	bhi.n	800a1c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	1ad2      	subs	r2, r2, r3
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	699b      	ldr	r3, [r3, #24]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d302      	bcc.n	800a1ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	617b      	str	r3, [r7, #20]
 800a1ac:	e01b      	b.n	800a1e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a1ae:	4b10      	ldr	r3, [pc, #64]	; (800a1f0 <prvInsertTimerInActiveList+0x7c>)
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	3304      	adds	r3, #4
 800a1b6:	0019      	movs	r1, r3
 800a1b8:	0010      	movs	r0, r2
 800a1ba:	f7fe f993 	bl	80084e4 <vListInsert>
 800a1be:	e012      	b.n	800a1e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d206      	bcs.n	800a1d6 <prvInsertTimerInActiveList+0x62>
 800a1c8:	68ba      	ldr	r2, [r7, #8]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d302      	bcc.n	800a1d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	617b      	str	r3, [r7, #20]
 800a1d4:	e007      	b.n	800a1e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1d6:	4b07      	ldr	r3, [pc, #28]	; (800a1f4 <prvInsertTimerInActiveList+0x80>)
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	3304      	adds	r3, #4
 800a1de:	0019      	movs	r1, r3
 800a1e0:	0010      	movs	r0, r2
 800a1e2:	f7fe f97f 	bl	80084e4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a1e6:	697b      	ldr	r3, [r7, #20]
}
 800a1e8:	0018      	movs	r0, r3
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	b006      	add	sp, #24
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	200005d4 	.word	0x200005d4
 800a1f4:	200005d0 	.word	0x200005d0

0800a1f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a1f8:	b590      	push	{r4, r7, lr}
 800a1fa:	b08b      	sub	sp, #44	; 0x2c
 800a1fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1fe:	e097      	b.n	800a330 <prvProcessReceivedCommands+0x138>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a200:	2208      	movs	r2, #8
 800a202:	18bb      	adds	r3, r7, r2
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	da00      	bge.n	800a20c <prvProcessReceivedCommands+0x14>
 800a20a:	e091      	b.n	800a330 <prvProcessReceivedCommands+0x138>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a20c:	18bb      	adds	r3, r7, r2
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	695b      	ldr	r3, [r3, #20]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d004      	beq.n	800a224 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a21a:	69fb      	ldr	r3, [r7, #28]
 800a21c:	3304      	adds	r3, #4
 800a21e:	0018      	movs	r0, r3
 800a220:	f7fe f996 	bl	8008550 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a224:	1d3b      	adds	r3, r7, #4
 800a226:	0018      	movs	r0, r3
 800a228:	f7ff ff84 	bl	800a134 <prvSampleTimeNow>
 800a22c:	0003      	movs	r3, r0
 800a22e:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
 800a230:	2308      	movs	r3, #8
 800a232:	18fb      	adds	r3, r7, r3
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2b09      	cmp	r3, #9
 800a238:	d900      	bls.n	800a23c <prvProcessReceivedCommands+0x44>
 800a23a:	e078      	b.n	800a32e <prvProcessReceivedCommands+0x136>
 800a23c:	009a      	lsls	r2, r3, #2
 800a23e:	4b44      	ldr	r3, [pc, #272]	; (800a350 <prvProcessReceivedCommands+0x158>)
 800a240:	18d3      	adds	r3, r2, r3
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	2228      	movs	r2, #40	; 0x28
 800a24a:	5c9b      	ldrb	r3, [r3, r2]
 800a24c:	2201      	movs	r2, #1
 800a24e:	4313      	orrs	r3, r2
 800a250:	b2d9      	uxtb	r1, r3
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	2228      	movs	r2, #40	; 0x28
 800a256:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a258:	2408      	movs	r4, #8
 800a25a:	193b      	adds	r3, r7, r4
 800a25c:	685a      	ldr	r2, [r3, #4]
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	18d1      	adds	r1, r2, r3
 800a264:	193b      	adds	r3, r7, r4
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	69ba      	ldr	r2, [r7, #24]
 800a26a:	69f8      	ldr	r0, [r7, #28]
 800a26c:	f7ff ff82 	bl	800a174 <prvInsertTimerInActiveList>
 800a270:	1e03      	subs	r3, r0, #0
 800a272:	d05d      	beq.n	800a330 <prvProcessReceivedCommands+0x138>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	6a1b      	ldr	r3, [r3, #32]
 800a278:	69fa      	ldr	r2, [r7, #28]
 800a27a:	0010      	movs	r0, r2
 800a27c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	2228      	movs	r2, #40	; 0x28
 800a282:	5c9b      	ldrb	r3, [r3, r2]
 800a284:	001a      	movs	r2, r3
 800a286:	2304      	movs	r3, #4
 800a288:	4013      	ands	r3, r2
 800a28a:	d051      	beq.n	800a330 <prvProcessReceivedCommands+0x138>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a28c:	193b      	adds	r3, r7, r4
 800a28e:	685a      	ldr	r2, [r3, #4]
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	699b      	ldr	r3, [r3, #24]
 800a294:	18d2      	adds	r2, r2, r3
 800a296:	69f8      	ldr	r0, [r7, #28]
 800a298:	2300      	movs	r3, #0
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	2300      	movs	r3, #0
 800a29e:	2100      	movs	r1, #0
 800a2a0:	f7ff fe3c 	bl	8009f1c <xTimerGenericCommand>
 800a2a4:	0003      	movs	r3, r0
 800a2a6:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d140      	bne.n	800a330 <prvProcessReceivedCommands+0x138>
 800a2ae:	b672      	cpsid	i
 800a2b0:	e7fe      	b.n	800a2b0 <prvProcessReceivedCommands+0xb8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	2228      	movs	r2, #40	; 0x28
 800a2b6:	5c9b      	ldrb	r3, [r3, r2]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	4393      	bics	r3, r2
 800a2bc:	b2d9      	uxtb	r1, r3
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	2228      	movs	r2, #40	; 0x28
 800a2c2:	5499      	strb	r1, [r3, r2]
					break;
 800a2c4:	e034      	b.n	800a330 <prvProcessReceivedCommands+0x138>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	2228      	movs	r2, #40	; 0x28
 800a2ca:	5c9b      	ldrb	r3, [r3, r2]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	b2d9      	uxtb	r1, r3
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	2228      	movs	r2, #40	; 0x28
 800a2d6:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a2d8:	2308      	movs	r3, #8
 800a2da:	18fb      	adds	r3, r7, r3
 800a2dc:	685a      	ldr	r2, [r3, #4]
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d101      	bne.n	800a2ee <prvProcessReceivedCommands+0xf6>
 800a2ea:	b672      	cpsid	i
 800a2ec:	e7fe      	b.n	800a2ec <prvProcessReceivedCommands+0xf4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	699a      	ldr	r2, [r3, #24]
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	18d1      	adds	r1, r2, r3
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	69ba      	ldr	r2, [r7, #24]
 800a2fa:	69f8      	ldr	r0, [r7, #28]
 800a2fc:	f7ff ff3a 	bl	800a174 <prvInsertTimerInActiveList>
					break;
 800a300:	e016      	b.n	800a330 <prvProcessReceivedCommands+0x138>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	2228      	movs	r2, #40	; 0x28
 800a306:	5c9b      	ldrb	r3, [r3, r2]
 800a308:	001a      	movs	r2, r3
 800a30a:	2302      	movs	r3, #2
 800a30c:	4013      	ands	r3, r2
 800a30e:	d104      	bne.n	800a31a <prvProcessReceivedCommands+0x122>
						{
							vPortFree( pxTimer );
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	0018      	movs	r0, r3
 800a314:	f000 fab8 	bl	800a888 <vPortFree>
 800a318:	e00a      	b.n	800a330 <prvProcessReceivedCommands+0x138>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	2228      	movs	r2, #40	; 0x28
 800a31e:	5c9b      	ldrb	r3, [r3, r2]
 800a320:	2201      	movs	r2, #1
 800a322:	4393      	bics	r3, r2
 800a324:	b2d9      	uxtb	r1, r3
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	2228      	movs	r2, #40	; 0x28
 800a32a:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a32c:	e000      	b.n	800a330 <prvProcessReceivedCommands+0x138>

				default	:
					/* Don't expect to get here. */
					break;
 800a32e:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a330:	4b08      	ldr	r3, [pc, #32]	; (800a354 <prvProcessReceivedCommands+0x15c>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2208      	movs	r2, #8
 800a336:	18b9      	adds	r1, r7, r2
 800a338:	2200      	movs	r2, #0
 800a33a:	0018      	movs	r0, r3
 800a33c:	f7fe fb76 	bl	8008a2c <xQueueReceive>
 800a340:	1e03      	subs	r3, r0, #0
 800a342:	d000      	beq.n	800a346 <prvProcessReceivedCommands+0x14e>
 800a344:	e75c      	b.n	800a200 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a346:	46c0      	nop			; (mov r8, r8)
 800a348:	46c0      	nop			; (mov r8, r8)
 800a34a:	46bd      	mov	sp, r7
 800a34c:	b009      	add	sp, #36	; 0x24
 800a34e:	bd90      	pop	{r4, r7, pc}
 800a350:	0800cf04 	.word	0x0800cf04
 800a354:	200005d8 	.word	0x200005d8

0800a358 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b088      	sub	sp, #32
 800a35c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a35e:	e041      	b.n	800a3e4 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a360:	4b2a      	ldr	r3, [pc, #168]	; (800a40c <prvSwitchTimerLists+0xb4>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a36a:	4b28      	ldr	r3, [pc, #160]	; (800a40c <prvSwitchTimerLists+0xb4>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	3304      	adds	r3, #4
 800a378:	0018      	movs	r0, r3
 800a37a:	f7fe f8e9 	bl	8008550 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6a1b      	ldr	r3, [r3, #32]
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	0010      	movs	r0, r2
 800a386:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2228      	movs	r2, #40	; 0x28
 800a38c:	5c9b      	ldrb	r3, [r3, r2]
 800a38e:	001a      	movs	r2, r3
 800a390:	2304      	movs	r3, #4
 800a392:	4013      	ands	r3, r2
 800a394:	d026      	beq.n	800a3e4 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	699b      	ldr	r3, [r3, #24]
 800a39a:	693a      	ldr	r2, [r7, #16]
 800a39c:	18d3      	adds	r3, r2, r3
 800a39e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d90e      	bls.n	800a3c6 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	68ba      	ldr	r2, [r7, #8]
 800a3ac:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a3b4:	4b15      	ldr	r3, [pc, #84]	; (800a40c <prvSwitchTimerLists+0xb4>)
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	3304      	adds	r3, #4
 800a3bc:	0019      	movs	r1, r3
 800a3be:	0010      	movs	r0, r2
 800a3c0:	f7fe f890 	bl	80084e4 <vListInsert>
 800a3c4:	e00e      	b.n	800a3e4 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a3c6:	693a      	ldr	r2, [r7, #16]
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	9300      	str	r3, [sp, #0]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	f7ff fda3 	bl	8009f1c <xTimerGenericCommand>
 800a3d6:	0003      	movs	r3, r0
 800a3d8:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d101      	bne.n	800a3e4 <prvSwitchTimerLists+0x8c>
 800a3e0:	b672      	cpsid	i
 800a3e2:	e7fe      	b.n	800a3e2 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3e4:	4b09      	ldr	r3, [pc, #36]	; (800a40c <prvSwitchTimerLists+0xb4>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d1b8      	bne.n	800a360 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a3ee:	4b07      	ldr	r3, [pc, #28]	; (800a40c <prvSwitchTimerLists+0xb4>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a3f4:	4b06      	ldr	r3, [pc, #24]	; (800a410 <prvSwitchTimerLists+0xb8>)
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	4b04      	ldr	r3, [pc, #16]	; (800a40c <prvSwitchTimerLists+0xb4>)
 800a3fa:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800a3fc:	4b04      	ldr	r3, [pc, #16]	; (800a410 <prvSwitchTimerLists+0xb8>)
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	601a      	str	r2, [r3, #0]
}
 800a402:	46c0      	nop			; (mov r8, r8)
 800a404:	46bd      	mov	sp, r7
 800a406:	b006      	add	sp, #24
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	46c0      	nop			; (mov r8, r8)
 800a40c:	200005d0 	.word	0x200005d0
 800a410:	200005d4 	.word	0x200005d4

0800a414 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a414:	b580      	push	{r7, lr}
 800a416:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a418:	f000 f8f2 	bl	800a600 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a41c:	4b14      	ldr	r3, [pc, #80]	; (800a470 <prvCheckForValidListAndQueue+0x5c>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d120      	bne.n	800a466 <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
 800a424:	4b13      	ldr	r3, [pc, #76]	; (800a474 <prvCheckForValidListAndQueue+0x60>)
 800a426:	0018      	movs	r0, r3
 800a428:	f7fe f811 	bl	800844e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a42c:	4b12      	ldr	r3, [pc, #72]	; (800a478 <prvCheckForValidListAndQueue+0x64>)
 800a42e:	0018      	movs	r0, r3
 800a430:	f7fe f80d 	bl	800844e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a434:	4b11      	ldr	r3, [pc, #68]	; (800a47c <prvCheckForValidListAndQueue+0x68>)
 800a436:	4a0f      	ldr	r2, [pc, #60]	; (800a474 <prvCheckForValidListAndQueue+0x60>)
 800a438:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a43a:	4b11      	ldr	r3, [pc, #68]	; (800a480 <prvCheckForValidListAndQueue+0x6c>)
 800a43c:	4a0e      	ldr	r2, [pc, #56]	; (800a478 <prvCheckForValidListAndQueue+0x64>)
 800a43e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800a440:	2200      	movs	r2, #0
 800a442:	210c      	movs	r1, #12
 800a444:	200a      	movs	r0, #10
 800a446:	f7fe f8ff 	bl	8008648 <xQueueGenericCreate>
 800a44a:	0002      	movs	r2, r0
 800a44c:	4b08      	ldr	r3, [pc, #32]	; (800a470 <prvCheckForValidListAndQueue+0x5c>)
 800a44e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a450:	4b07      	ldr	r3, [pc, #28]	; (800a470 <prvCheckForValidListAndQueue+0x5c>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d006      	beq.n	800a466 <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a458:	4b05      	ldr	r3, [pc, #20]	; (800a470 <prvCheckForValidListAndQueue+0x5c>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a09      	ldr	r2, [pc, #36]	; (800a484 <prvCheckForValidListAndQueue+0x70>)
 800a45e:	0011      	movs	r1, r2
 800a460:	0018      	movs	r0, r3
 800a462:	f7fe fda5 	bl	8008fb0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a466:	f000 f8dd 	bl	800a624 <vPortExitCritical>
}
 800a46a:	46c0      	nop			; (mov r8, r8)
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	200005d8 	.word	0x200005d8
 800a474:	200005a8 	.word	0x200005a8
 800a478:	200005bc 	.word	0x200005bc
 800a47c:	200005d0 	.word	0x200005d0
 800a480:	200005d4 	.word	0x200005d4
 800a484:	0800c980 	.word	0x0800c980

0800a488 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	60bb      	str	r3, [r7, #8]

	configASSERT( xTimer );
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d101      	bne.n	800a49e <xTimerIsTimerActive+0x16>
 800a49a:	b672      	cpsid	i
 800a49c:	e7fe      	b.n	800a49c <xTimerIsTimerActive+0x14>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800a49e:	f000 f8af 	bl	800a600 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	2228      	movs	r2, #40	; 0x28
 800a4a6:	5c9b      	ldrb	r3, [r3, r2]
 800a4a8:	001a      	movs	r2, r3
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	4013      	ands	r3, r2
 800a4ae:	d102      	bne.n	800a4b6 <xTimerIsTimerActive+0x2e>
		{
			xReturn = pdFALSE;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	60fb      	str	r3, [r7, #12]
 800a4b4:	e001      	b.n	800a4ba <xTimerIsTimerActive+0x32>
		}
		else
		{
			xReturn = pdTRUE;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4ba:	f000 f8b3 	bl	800a624 <vPortExitCritical>

	return xReturn;
 800a4be:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800a4c0:	0018      	movs	r0, r3
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	b004      	add	sp, #16
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	3b04      	subs	r3, #4
 800a4d8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2280      	movs	r2, #128	; 0x80
 800a4de:	0452      	lsls	r2, r2, #17
 800a4e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	3b04      	subs	r3, #4
 800a4e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800a4e8:	68ba      	ldr	r2, [r7, #8]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	3b04      	subs	r3, #4
 800a4f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a4f4:	4a08      	ldr	r2, [pc, #32]	; (800a518 <pxPortInitialiseStack+0x50>)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	3b14      	subs	r3, #20
 800a4fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	3b20      	subs	r3, #32
 800a50a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a50c:	68fb      	ldr	r3, [r7, #12]
}
 800a50e:	0018      	movs	r0, r3
 800a510:	46bd      	mov	sp, r7
 800a512:	b004      	add	sp, #16
 800a514:	bd80      	pop	{r7, pc}
 800a516:	46c0      	nop			; (mov r8, r8)
 800a518:	0800a51d 	.word	0x0800a51d

0800a51c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a522:	2300      	movs	r3, #0
 800a524:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a526:	4b08      	ldr	r3, [pc, #32]	; (800a548 <prvTaskExitError+0x2c>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	3301      	adds	r3, #1
 800a52c:	d001      	beq.n	800a532 <prvTaskExitError+0x16>
 800a52e:	b672      	cpsid	i
 800a530:	e7fe      	b.n	800a530 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800a532:	b672      	cpsid	i
	while( ulDummy == 0 )
 800a534:	46c0      	nop			; (mov r8, r8)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d0fc      	beq.n	800a536 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a53c:	46c0      	nop			; (mov r8, r8)
 800a53e:	46c0      	nop			; (mov r8, r8)
 800a540:	46bd      	mov	sp, r7
 800a542:	b002      	add	sp, #8
 800a544:	bd80      	pop	{r7, pc}
 800a546:	46c0      	nop			; (mov r8, r8)
 800a548:	2000000c 	.word	0x2000000c

0800a54c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800a550:	46c0      	nop			; (mov r8, r8)
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
	...

0800a560 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800a560:	4a0b      	ldr	r2, [pc, #44]	; (800a590 <pxCurrentTCBConst2>)
 800a562:	6813      	ldr	r3, [r2, #0]
 800a564:	6818      	ldr	r0, [r3, #0]
 800a566:	3020      	adds	r0, #32
 800a568:	f380 8809 	msr	PSP, r0
 800a56c:	2002      	movs	r0, #2
 800a56e:	f380 8814 	msr	CONTROL, r0
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800a578:	46ae      	mov	lr, r5
 800a57a:	bc08      	pop	{r3}
 800a57c:	bc04      	pop	{r2}
 800a57e:	b662      	cpsie	i
 800a580:	4718      	bx	r3
 800a582:	46c0      	nop			; (mov r8, r8)
 800a584:	46c0      	nop			; (mov r8, r8)
 800a586:	46c0      	nop			; (mov r8, r8)
 800a588:	46c0      	nop			; (mov r8, r8)
 800a58a:	46c0      	nop			; (mov r8, r8)
 800a58c:	46c0      	nop			; (mov r8, r8)
 800a58e:	46c0      	nop			; (mov r8, r8)

0800a590 <pxCurrentTCBConst2>:
 800a590:	20000474 	.word	0x20000474
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800a594:	46c0      	nop			; (mov r8, r8)
 800a596:	46c0      	nop			; (mov r8, r8)

0800a598 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a59c:	4b0e      	ldr	r3, [pc, #56]	; (800a5d8 <xPortStartScheduler+0x40>)
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	4b0d      	ldr	r3, [pc, #52]	; (800a5d8 <xPortStartScheduler+0x40>)
 800a5a2:	21ff      	movs	r1, #255	; 0xff
 800a5a4:	0409      	lsls	r1, r1, #16
 800a5a6:	430a      	orrs	r2, r1
 800a5a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a5aa:	4b0b      	ldr	r3, [pc, #44]	; (800a5d8 <xPortStartScheduler+0x40>)
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	4b0a      	ldr	r3, [pc, #40]	; (800a5d8 <xPortStartScheduler+0x40>)
 800a5b0:	21ff      	movs	r1, #255	; 0xff
 800a5b2:	0609      	lsls	r1, r1, #24
 800a5b4:	430a      	orrs	r2, r1
 800a5b6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a5b8:	f000 f898 	bl	800a6ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a5bc:	4b07      	ldr	r3, [pc, #28]	; (800a5dc <xPortStartScheduler+0x44>)
 800a5be:	2200      	movs	r2, #0
 800a5c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800a5c2:	f7ff ffcd 	bl	800a560 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a5c6:	f7ff f845 	bl	8009654 <vTaskSwitchContext>
	prvTaskExitError();
 800a5ca:	f7ff ffa7 	bl	800a51c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	0018      	movs	r0, r3
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	46c0      	nop			; (mov r8, r8)
 800a5d8:	e000ed20 	.word	0xe000ed20
 800a5dc:	2000000c 	.word	0x2000000c

0800a5e0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a5e4:	4b05      	ldr	r3, [pc, #20]	; (800a5fc <vPortYield+0x1c>)
 800a5e6:	2280      	movs	r2, #128	; 0x80
 800a5e8:	0552      	lsls	r2, r2, #21
 800a5ea:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800a5ec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800a5f0:	f3bf 8f6f 	isb	sy
}
 800a5f4:	46c0      	nop			; (mov r8, r8)
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	46c0      	nop			; (mov r8, r8)
 800a5fc:	e000ed04 	.word	0xe000ed04

0800a600 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800a604:	b672      	cpsid	i
	uxCriticalNesting++;
 800a606:	4b06      	ldr	r3, [pc, #24]	; (800a620 <vPortEnterCritical+0x20>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	1c5a      	adds	r2, r3, #1
 800a60c:	4b04      	ldr	r3, [pc, #16]	; (800a620 <vPortEnterCritical+0x20>)
 800a60e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800a610:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800a614:	f3bf 8f6f 	isb	sy
}
 800a618:	46c0      	nop			; (mov r8, r8)
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	46c0      	nop			; (mov r8, r8)
 800a620:	2000000c 	.word	0x2000000c

0800a624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a624:	b580      	push	{r7, lr}
 800a626:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a628:	4b09      	ldr	r3, [pc, #36]	; (800a650 <vPortExitCritical+0x2c>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d101      	bne.n	800a634 <vPortExitCritical+0x10>
 800a630:	b672      	cpsid	i
 800a632:	e7fe      	b.n	800a632 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 800a634:	4b06      	ldr	r3, [pc, #24]	; (800a650 <vPortExitCritical+0x2c>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	1e5a      	subs	r2, r3, #1
 800a63a:	4b05      	ldr	r3, [pc, #20]	; (800a650 <vPortExitCritical+0x2c>)
 800a63c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800a63e:	4b04      	ldr	r3, [pc, #16]	; (800a650 <vPortExitCritical+0x2c>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d100      	bne.n	800a648 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 800a646:	b662      	cpsie	i
	}
}
 800a648:	46c0      	nop			; (mov r8, r8)
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	46c0      	nop			; (mov r8, r8)
 800a650:	2000000c 	.word	0x2000000c

0800a654 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800a654:	f3ef 8010 	mrs	r0, PRIMASK
 800a658:	b672      	cpsid	i
 800a65a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800a65c:	46c0      	nop			; (mov r8, r8)
 800a65e:	0018      	movs	r0, r3

0800a660 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800a660:	f380 8810 	msr	PRIMASK, r0
 800a664:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800a666:	46c0      	nop			; (mov r8, r8)
	...

0800a670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a670:	f3ef 8009 	mrs	r0, PSP
 800a674:	4b0e      	ldr	r3, [pc, #56]	; (800a6b0 <pxCurrentTCBConst>)
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	3820      	subs	r0, #32
 800a67a:	6010      	str	r0, [r2, #0]
 800a67c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800a67e:	4644      	mov	r4, r8
 800a680:	464d      	mov	r5, r9
 800a682:	4656      	mov	r6, sl
 800a684:	465f      	mov	r7, fp
 800a686:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800a688:	b508      	push	{r3, lr}
 800a68a:	b672      	cpsid	i
 800a68c:	f7fe ffe2 	bl	8009654 <vTaskSwitchContext>
 800a690:	b662      	cpsie	i
 800a692:	bc0c      	pop	{r2, r3}
 800a694:	6811      	ldr	r1, [r2, #0]
 800a696:	6808      	ldr	r0, [r1, #0]
 800a698:	3010      	adds	r0, #16
 800a69a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800a69c:	46a0      	mov	r8, r4
 800a69e:	46a9      	mov	r9, r5
 800a6a0:	46b2      	mov	sl, r6
 800a6a2:	46bb      	mov	fp, r7
 800a6a4:	f380 8809 	msr	PSP, r0
 800a6a8:	3820      	subs	r0, #32
 800a6aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800a6ac:	4718      	bx	r3
 800a6ae:	46c0      	nop			; (mov r8, r8)

0800a6b0 <pxCurrentTCBConst>:
 800a6b0:	20000474 	.word	0x20000474
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800a6b4:	46c0      	nop			; (mov r8, r8)
 800a6b6:	46c0      	nop			; (mov r8, r8)

0800a6b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6be:	f7ff ffc9 	bl	800a654 <ulSetInterruptMaskFromISR>
 800a6c2:	0003      	movs	r3, r0
 800a6c4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a6c6:	f7fe ff15 	bl	80094f4 <xTaskIncrementTick>
 800a6ca:	1e03      	subs	r3, r0, #0
 800a6cc:	d003      	beq.n	800a6d6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a6ce:	4b06      	ldr	r3, [pc, #24]	; (800a6e8 <SysTick_Handler+0x30>)
 800a6d0:	2280      	movs	r2, #128	; 0x80
 800a6d2:	0552      	lsls	r2, r2, #21
 800a6d4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	0018      	movs	r0, r3
 800a6da:	f7ff ffc1 	bl	800a660 <vClearInterruptMaskFromISR>
}
 800a6de:	46c0      	nop			; (mov r8, r8)
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	b002      	add	sp, #8
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	46c0      	nop			; (mov r8, r8)
 800a6e8:	e000ed04 	.word	0xe000ed04

0800a6ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a6f0:	4b0b      	ldr	r3, [pc, #44]	; (800a720 <vPortSetupTimerInterrupt+0x34>)
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a6f6:	4b0b      	ldr	r3, [pc, #44]	; (800a724 <vPortSetupTimerInterrupt+0x38>)
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a6fc:	4b0a      	ldr	r3, [pc, #40]	; (800a728 <vPortSetupTimerInterrupt+0x3c>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	22fa      	movs	r2, #250	; 0xfa
 800a702:	0091      	lsls	r1, r2, #2
 800a704:	0018      	movs	r0, r3
 800a706:	f7f5 fd09 	bl	800011c <__udivsi3>
 800a70a:	0003      	movs	r3, r0
 800a70c:	001a      	movs	r2, r3
 800a70e:	4b07      	ldr	r3, [pc, #28]	; (800a72c <vPortSetupTimerInterrupt+0x40>)
 800a710:	3a01      	subs	r2, #1
 800a712:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800a714:	4b02      	ldr	r3, [pc, #8]	; (800a720 <vPortSetupTimerInterrupt+0x34>)
 800a716:	2207      	movs	r2, #7
 800a718:	601a      	str	r2, [r3, #0]
}
 800a71a:	46c0      	nop			; (mov r8, r8)
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	e000e010 	.word	0xe000e010
 800a724:	e000e018 	.word	0xe000e018
 800a728:	20000000 	.word	0x20000000
 800a72c:	e000e014 	.word	0xe000e014

0800a730 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b086      	sub	sp, #24
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a738:	2300      	movs	r3, #0
 800a73a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800a73c:	f7fe fe34 	bl	80093a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a740:	4b4b      	ldr	r3, [pc, #300]	; (800a870 <pvPortMalloc+0x140>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d101      	bne.n	800a74c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a748:	f000 f8ec 	bl	800a924 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a74c:	4b49      	ldr	r3, [pc, #292]	; (800a874 <pvPortMalloc+0x144>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	4013      	ands	r3, r2
 800a754:	d000      	beq.n	800a758 <pvPortMalloc+0x28>
 800a756:	e07e      	b.n	800a856 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d012      	beq.n	800a784 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800a75e:	2208      	movs	r2, #8
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	189b      	adds	r3, r3, r2
 800a764:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2207      	movs	r2, #7
 800a76a:	4013      	ands	r3, r2
 800a76c:	d00a      	beq.n	800a784 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2207      	movs	r2, #7
 800a772:	4393      	bics	r3, r2
 800a774:	3308      	adds	r3, #8
 800a776:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2207      	movs	r2, #7
 800a77c:	4013      	ands	r3, r2
 800a77e:	d001      	beq.n	800a784 <pvPortMalloc+0x54>
 800a780:	b672      	cpsid	i
 800a782:	e7fe      	b.n	800a782 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d065      	beq.n	800a856 <pvPortMalloc+0x126>
 800a78a:	4b3b      	ldr	r3, [pc, #236]	; (800a878 <pvPortMalloc+0x148>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	429a      	cmp	r2, r3
 800a792:	d860      	bhi.n	800a856 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a794:	4b39      	ldr	r3, [pc, #228]	; (800a87c <pvPortMalloc+0x14c>)
 800a796:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800a798:	4b38      	ldr	r3, [pc, #224]	; (800a87c <pvPortMalloc+0x14c>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a79e:	e004      	b.n	800a7aa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d903      	bls.n	800a7bc <pvPortMalloc+0x8c>
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d1f1      	bne.n	800a7a0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a7bc:	4b2c      	ldr	r3, [pc, #176]	; (800a870 <pvPortMalloc+0x140>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	697a      	ldr	r2, [r7, #20]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d047      	beq.n	800a856 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2208      	movs	r2, #8
 800a7cc:	189b      	adds	r3, r3, r2
 800a7ce:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	685a      	ldr	r2, [r3, #4]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	1ad2      	subs	r2, r2, r3
 800a7e0:	2308      	movs	r3, #8
 800a7e2:	005b      	lsls	r3, r3, #1
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d916      	bls.n	800a816 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a7e8:	697a      	ldr	r2, [r7, #20]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	18d3      	adds	r3, r2, r3
 800a7ee:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	2207      	movs	r2, #7
 800a7f4:	4013      	ands	r3, r2
 800a7f6:	d001      	beq.n	800a7fc <pvPortMalloc+0xcc>
 800a7f8:	b672      	cpsid	i
 800a7fa:	e7fe      	b.n	800a7fa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	685a      	ldr	r2, [r3, #4]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	1ad2      	subs	r2, r2, r3
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	0018      	movs	r0, r3
 800a812:	f000 f8e7 	bl	800a9e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a816:	4b18      	ldr	r3, [pc, #96]	; (800a878 <pvPortMalloc+0x148>)
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	1ad2      	subs	r2, r2, r3
 800a820:	4b15      	ldr	r3, [pc, #84]	; (800a878 <pvPortMalloc+0x148>)
 800a822:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a824:	4b14      	ldr	r3, [pc, #80]	; (800a878 <pvPortMalloc+0x148>)
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	4b15      	ldr	r3, [pc, #84]	; (800a880 <pvPortMalloc+0x150>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d203      	bcs.n	800a838 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a830:	4b11      	ldr	r3, [pc, #68]	; (800a878 <pvPortMalloc+0x148>)
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	4b12      	ldr	r3, [pc, #72]	; (800a880 <pvPortMalloc+0x150>)
 800a836:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	685a      	ldr	r2, [r3, #4]
 800a83c:	4b0d      	ldr	r3, [pc, #52]	; (800a874 <pvPortMalloc+0x144>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	431a      	orrs	r2, r3
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	2200      	movs	r2, #0
 800a84a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a84c:	4b0d      	ldr	r3, [pc, #52]	; (800a884 <pvPortMalloc+0x154>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	1c5a      	adds	r2, r3, #1
 800a852:	4b0c      	ldr	r3, [pc, #48]	; (800a884 <pvPortMalloc+0x154>)
 800a854:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a856:	f7fe fdb3 	bl	80093c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2207      	movs	r2, #7
 800a85e:	4013      	ands	r3, r2
 800a860:	d001      	beq.n	800a866 <pvPortMalloc+0x136>
 800a862:	b672      	cpsid	i
 800a864:	e7fe      	b.n	800a864 <pvPortMalloc+0x134>
	return pvReturn;
 800a866:	68fb      	ldr	r3, [r7, #12]
}
 800a868:	0018      	movs	r0, r3
 800a86a:	46bd      	mov	sp, r7
 800a86c:	b006      	add	sp, #24
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	200011ec 	.word	0x200011ec
 800a874:	20001200 	.word	0x20001200
 800a878:	200011f0 	.word	0x200011f0
 800a87c:	200011e4 	.word	0x200011e4
 800a880:	200011f4 	.word	0x200011f4
 800a884:	200011f8 	.word	0x200011f8

0800a888 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d03a      	beq.n	800a910 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a89a:	2308      	movs	r3, #8
 800a89c:	425b      	negs	r3, r3
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	18d3      	adds	r3, r2, r3
 800a8a2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	685a      	ldr	r2, [r3, #4]
 800a8ac:	4b1a      	ldr	r3, [pc, #104]	; (800a918 <vPortFree+0x90>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4013      	ands	r3, r2
 800a8b2:	d101      	bne.n	800a8b8 <vPortFree+0x30>
 800a8b4:	b672      	cpsid	i
 800a8b6:	e7fe      	b.n	800a8b6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d001      	beq.n	800a8c4 <vPortFree+0x3c>
 800a8c0:	b672      	cpsid	i
 800a8c2:	e7fe      	b.n	800a8c2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	685a      	ldr	r2, [r3, #4]
 800a8c8:	4b13      	ldr	r3, [pc, #76]	; (800a918 <vPortFree+0x90>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4013      	ands	r3, r2
 800a8ce:	d01f      	beq.n	800a910 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d11b      	bne.n	800a910 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	685a      	ldr	r2, [r3, #4]
 800a8dc:	4b0e      	ldr	r3, [pc, #56]	; (800a918 <vPortFree+0x90>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	43db      	mvns	r3, r3
 800a8e2:	401a      	ands	r2, r3
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a8e8:	f7fe fd5e 	bl	80093a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	685a      	ldr	r2, [r3, #4]
 800a8f0:	4b0a      	ldr	r3, [pc, #40]	; (800a91c <vPortFree+0x94>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	18d2      	adds	r2, r2, r3
 800a8f6:	4b09      	ldr	r3, [pc, #36]	; (800a91c <vPortFree+0x94>)
 800a8f8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	0018      	movs	r0, r3
 800a8fe:	f000 f871 	bl	800a9e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a902:	4b07      	ldr	r3, [pc, #28]	; (800a920 <vPortFree+0x98>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	1c5a      	adds	r2, r3, #1
 800a908:	4b05      	ldr	r3, [pc, #20]	; (800a920 <vPortFree+0x98>)
 800a90a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800a90c:	f7fe fd58 	bl	80093c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a910:	46c0      	nop			; (mov r8, r8)
 800a912:	46bd      	mov	sp, r7
 800a914:	b004      	add	sp, #16
 800a916:	bd80      	pop	{r7, pc}
 800a918:	20001200 	.word	0x20001200
 800a91c:	200011f0 	.word	0x200011f0
 800a920:	200011fc 	.word	0x200011fc

0800a924 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a92a:	23c0      	movs	r3, #192	; 0xc0
 800a92c:	011b      	lsls	r3, r3, #4
 800a92e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a930:	4b26      	ldr	r3, [pc, #152]	; (800a9cc <prvHeapInit+0xa8>)
 800a932:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2207      	movs	r2, #7
 800a938:	4013      	ands	r3, r2
 800a93a:	d00c      	beq.n	800a956 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	3307      	adds	r3, #7
 800a940:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2207      	movs	r2, #7
 800a946:	4393      	bics	r3, r2
 800a948:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a94a:	68ba      	ldr	r2, [r7, #8]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	1ad2      	subs	r2, r2, r3
 800a950:	4b1e      	ldr	r3, [pc, #120]	; (800a9cc <prvHeapInit+0xa8>)
 800a952:	18d3      	adds	r3, r2, r3
 800a954:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a95a:	4b1d      	ldr	r3, [pc, #116]	; (800a9d0 <prvHeapInit+0xac>)
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a960:	4b1b      	ldr	r3, [pc, #108]	; (800a9d0 <prvHeapInit+0xac>)
 800a962:	2200      	movs	r2, #0
 800a964:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	68ba      	ldr	r2, [r7, #8]
 800a96a:	18d3      	adds	r3, r2, r3
 800a96c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a96e:	2208      	movs	r2, #8
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	1a9b      	subs	r3, r3, r2
 800a974:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2207      	movs	r2, #7
 800a97a:	4393      	bics	r3, r2
 800a97c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a97e:	68fa      	ldr	r2, [r7, #12]
 800a980:	4b14      	ldr	r3, [pc, #80]	; (800a9d4 <prvHeapInit+0xb0>)
 800a982:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800a984:	4b13      	ldr	r3, [pc, #76]	; (800a9d4 <prvHeapInit+0xb0>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	2200      	movs	r2, #0
 800a98a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a98c:	4b11      	ldr	r3, [pc, #68]	; (800a9d4 <prvHeapInit+0xb0>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2200      	movs	r2, #0
 800a992:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	68fa      	ldr	r2, [r7, #12]
 800a99c:	1ad2      	subs	r2, r2, r3
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a9a2:	4b0c      	ldr	r3, [pc, #48]	; (800a9d4 <prvHeapInit+0xb0>)
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	685a      	ldr	r2, [r3, #4]
 800a9ae:	4b0a      	ldr	r3, [pc, #40]	; (800a9d8 <prvHeapInit+0xb4>)
 800a9b0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	685a      	ldr	r2, [r3, #4]
 800a9b6:	4b09      	ldr	r3, [pc, #36]	; (800a9dc <prvHeapInit+0xb8>)
 800a9b8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a9ba:	4b09      	ldr	r3, [pc, #36]	; (800a9e0 <prvHeapInit+0xbc>)
 800a9bc:	2280      	movs	r2, #128	; 0x80
 800a9be:	0612      	lsls	r2, r2, #24
 800a9c0:	601a      	str	r2, [r3, #0]
}
 800a9c2:	46c0      	nop			; (mov r8, r8)
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	b004      	add	sp, #16
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	46c0      	nop			; (mov r8, r8)
 800a9cc:	200005e4 	.word	0x200005e4
 800a9d0:	200011e4 	.word	0x200011e4
 800a9d4:	200011ec 	.word	0x200011ec
 800a9d8:	200011f4 	.word	0x200011f4
 800a9dc:	200011f0 	.word	0x200011f0
 800a9e0:	20001200 	.word	0x20001200

0800a9e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a9ec:	4b27      	ldr	r3, [pc, #156]	; (800aa8c <prvInsertBlockIntoFreeList+0xa8>)
 800a9ee:	60fb      	str	r3, [r7, #12]
 800a9f0:	e002      	b.n	800a9f8 <prvInsertBlockIntoFreeList+0x14>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	60fb      	str	r3, [r7, #12]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d8f7      	bhi.n	800a9f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	68ba      	ldr	r2, [r7, #8]
 800aa0c:	18d3      	adds	r3, r2, r3
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d108      	bne.n	800aa26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	685a      	ldr	r2, [r3, #4]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	18d2      	adds	r2, r2, r3
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	18d2      	adds	r2, r2, r3
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d118      	bne.n	800aa6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	4b14      	ldr	r3, [pc, #80]	; (800aa90 <prvInsertBlockIntoFreeList+0xac>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d00d      	beq.n	800aa62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	685a      	ldr	r2, [r3, #4]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	18d2      	adds	r2, r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	601a      	str	r2, [r3, #0]
 800aa60:	e008      	b.n	800aa74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa62:	4b0b      	ldr	r3, [pc, #44]	; (800aa90 <prvInsertBlockIntoFreeList+0xac>)
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	601a      	str	r2, [r3, #0]
 800aa6a:	e003      	b.n	800aa74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d002      	beq.n	800aa82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa82:	46c0      	nop			; (mov r8, r8)
 800aa84:	46bd      	mov	sp, r7
 800aa86:	b004      	add	sp, #16
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	46c0      	nop			; (mov r8, r8)
 800aa8c:	200011e4 	.word	0x200011e4
 800aa90:	200011ec 	.word	0x200011ec

0800aa94 <HAL_UART_RxCpltCallback>:
#define RAYON 0.0637 //rayon du lidar en m

static lidar_t lidar;
static SemaphoreHandle_t sem_uart_read = NULL;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a0b      	ldr	r2, [pc, #44]	; (800aad0 <HAL_UART_RxCpltCallback+0x3c>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d110      	bne.n	800aac8 <HAL_UART_RxCpltCallback+0x34>
	{
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 800aaaa:	4b0a      	ldr	r3, [pc, #40]	; (800aad4 <HAL_UART_RxCpltCallback+0x40>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	220c      	movs	r2, #12
 800aab0:	18ba      	adds	r2, r7, r2
 800aab2:	0011      	movs	r1, r2
 800aab4:	0018      	movs	r0, r3
 800aab6:	f7fd ff54 	bl	8008962 <xQueueGiveFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d003      	beq.n	800aac8 <HAL_UART_RxCpltCallback+0x34>
 800aac0:	4b05      	ldr	r3, [pc, #20]	; (800aad8 <HAL_UART_RxCpltCallback+0x44>)
 800aac2:	2280      	movs	r2, #128	; 0x80
 800aac4:	0552      	lsls	r2, r2, #21
 800aac6:	601a      	str	r2, [r3, #0]
	}
}
 800aac8:	46c0      	nop			; (mov r8, r8)
 800aaca:	46bd      	mov	sp, r7
 800aacc:	b004      	add	sp, #16
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	40013800 	.word	0x40013800
 800aad4:	2000152c 	.word	0x2000152c
 800aad8:	e000ed04 	.word	0xe000ed04

0800aadc <LidarUarTx>:
 *   - #HAL_ERROR: An error occurred during transmission.
 *
 * @note This function is specific to the UART communication for Lidar devices.
 * It uses DMA for efficient and non-blocking data transmission.
 */
static inline HAL_StatusTypeDef LidarUarTx(uint8_t *address, uint8_t *p_data, uint16_t size) {
 800aadc:	b5b0      	push	{r4, r5, r7, lr}
 800aade:	b086      	sub	sp, #24
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	1dbb      	adds	r3, r7, #6
 800aae8:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status;
	status = HAL_UART_Transmit_DMA(&huart1, address, 2);
 800aaea:	2517      	movs	r5, #23
 800aaec:	197c      	adds	r4, r7, r5
 800aaee:	68f9      	ldr	r1, [r7, #12]
 800aaf0:	4b06      	ldr	r3, [pc, #24]	; (800ab0c <LidarUarTx+0x30>)
 800aaf2:	2202      	movs	r2, #2
 800aaf4:	0018      	movs	r0, r3
 800aaf6:	f7fc fc0d 	bl	8007314 <HAL_UART_Transmit_DMA>
 800aafa:	0003      	movs	r3, r0
 800aafc:	7023      	strb	r3, [r4, #0]
	return status;
 800aafe:	197b      	adds	r3, r7, r5
 800ab00:	781b      	ldrb	r3, [r3, #0]
}
 800ab02:	0018      	movs	r0, r3
 800ab04:	46bd      	mov	sp, r7
 800ab06:	b006      	add	sp, #24
 800ab08:	bdb0      	pop	{r4, r5, r7, pc}
 800ab0a:	46c0      	nop			; (mov r8, r8)
 800ab0c:	20000308 	.word	0x20000308

0800ab10 <LidarUartRx>:
 *   - #HAL_ERROR: An error occurred during reception.
 *
 * @note This function is specific to the UART communication for Lidar devices.
 * It uses DMA for efficient and non-blocking data reception.
 */
static inline HAL_StatusTypeDef LidarUartRx(uint8_t *p_data, uint16_t size) {
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	000a      	movs	r2, r1
 800ab1a:	1cbb      	adds	r3, r7, #2
 800ab1c:	801a      	strh	r2, [r3, #0]
	return HAL_UART_Receive_DMA(&huart1, p_data, size);
 800ab1e:	1cbb      	adds	r3, r7, #2
 800ab20:	881a      	ldrh	r2, [r3, #0]
 800ab22:	6879      	ldr	r1, [r7, #4]
 800ab24:	4b04      	ldr	r3, [pc, #16]	; (800ab38 <LidarUartRx+0x28>)
 800ab26:	0018      	movs	r0, r3
 800ab28:	f7fc fc86 	bl	8007438 <HAL_UART_Receive_DMA>
 800ab2c:	0003      	movs	r3, r0
}
 800ab2e:	0018      	movs	r0, r3
 800ab30:	46bd      	mov	sp, r7
 800ab32:	b002      	add	sp, #8
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	46c0      	nop			; (mov r8, r8)
 800ab38:	20000308 	.word	0x20000308

0800ab3c <LidarInit>:
 *
 * @note This function sets up the necessary configurations for the Lidar device to operate.
 * It also creates a semaphore for synchronization during UART reads and enables the Lidar device and motor.
 * The Lidar speed is set to 0 during initialization.
 */
returncode_t LidarInit(void) {
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
	returncode_t ret = success;
 800ab42:	1dfb      	adds	r3, r7, #7
 800ab44:	2200      	movs	r2, #0
 800ab46:	701a      	strb	r2, [r3, #0]
	lidar.uart.tx = LidarUarTx;
 800ab48:	4b14      	ldr	r3, [pc, #80]	; (800ab9c <LidarInit+0x60>)
 800ab4a:	4a15      	ldr	r2, [pc, #84]	; (800aba0 <LidarInit+0x64>)
 800ab4c:	601a      	str	r2, [r3, #0]
	lidar.uart.rx = LidarUartRx;
 800ab4e:	4b13      	ldr	r3, [pc, #76]	; (800ab9c <LidarInit+0x60>)
 800ab50:	4a14      	ldr	r2, [pc, #80]	; (800aba4 <LidarInit+0x68>)
 800ab52:	605a      	str	r2, [r3, #4]
	
	sem_uart_read = xSemaphoreCreateBinary();
 800ab54:	2203      	movs	r2, #3
 800ab56:	2100      	movs	r1, #0
 800ab58:	2001      	movs	r0, #1
 800ab5a:	f7fd fd75 	bl	8008648 <xQueueGenericCreate>
 800ab5e:	0002      	movs	r2, r0
 800ab60:	4b11      	ldr	r3, [pc, #68]	; (800aba8 <LidarInit+0x6c>)
 800ab62:	601a      	str	r2, [r3, #0]
	if(sem_uart_read == NULL) {
 800ab64:	4b10      	ldr	r3, [pc, #64]	; (800aba8 <LidarInit+0x6c>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d101      	bne.n	800ab70 <LidarInit+0x34>
		return memoryfail;
 800ab6c:	2304      	movs	r3, #4
 800ab6e:	e010      	b.n	800ab92 <LidarInit+0x56>
	}
	LIDAR_DEV_ENABLE();
 800ab70:	4b0e      	ldr	r3, [pc, #56]	; (800abac <LidarInit+0x70>)
 800ab72:	2201      	movs	r2, #1
 800ab74:	2102      	movs	r1, #2
 800ab76:	0018      	movs	r0, r3
 800ab78:	f7fa fb1a 	bl	80051b0 <HAL_GPIO_WritePin>
	LIDAR_MOTOR_DISABLE();
 800ab7c:	4b0b      	ldr	r3, [pc, #44]	; (800abac <LidarInit+0x70>)
 800ab7e:	2200      	movs	r2, #0
 800ab80:	2104      	movs	r1, #4
 800ab82:	0018      	movs	r0, r3
 800ab84:	f7fa fb14 	bl	80051b0 <HAL_GPIO_WritePin>
	LidarSetSpeed(0);
 800ab88:	2000      	movs	r0, #0
 800ab8a:	f000 f811 	bl	800abb0 <LidarSetSpeed>
	//ret = LidarScanStop();
	return ret;
 800ab8e:	1dfb      	adds	r3, r7, #7
 800ab90:	781b      	ldrb	r3, [r3, #0]
}
 800ab92:	0018      	movs	r0, r3
 800ab94:	46bd      	mov	sp, r7
 800ab96:	b002      	add	sp, #8
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	46c0      	nop			; (mov r8, r8)
 800ab9c:	20001204 	.word	0x20001204
 800aba0:	0800aadd 	.word	0x0800aadd
 800aba4:	0800ab11 	.word	0x0800ab11
 800aba8:	2000152c 	.word	0x2000152c
 800abac:	50000400 	.word	0x50000400

0800abb0 <LidarSetSpeed>:
 * @param speed La nouvelle valeur de vitesse à définir.
 *
 * @note 0: vitesse minimale
 * @note 50: vitesse maximale.
 */
void LidarSetSpeed(uint8_t speed) {
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	0002      	movs	r2, r0
 800abb8:	1dfb      	adds	r3, r7, #7
 800abba:	701a      	strb	r2, [r3, #0]
	speed += 49;
 800abbc:	1dfb      	adds	r3, r7, #7
 800abbe:	1dfa      	adds	r2, r7, #7
 800abc0:	7812      	ldrb	r2, [r2, #0]
 800abc2:	3231      	adds	r2, #49	; 0x31
 800abc4:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1 ,speed);
 800abc6:	4b04      	ldr	r3, [pc, #16]	; (800abd8 <LidarSetSpeed+0x28>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	1dfa      	adds	r2, r7, #7
 800abcc:	7812      	ldrb	r2, [r2, #0]
 800abce:	635a      	str	r2, [r3, #52]	; 0x34
}
 800abd0:	46c0      	nop			; (mov r8, r8)
 800abd2:	46bd      	mov	sp, r7
 800abd4:	b002      	add	sp, #8
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	20000140 	.word	0x20000140

0800abdc <LidarGetInformation>:
 *   - #wrongparameter: Received data has an unexpected header or format.
 *
 * @note This function uses UART communication with DMA for efficient data transmission and reception.
 * It checks the header of the received data to ensure it matches the expected format before extracting device information.
 */
returncode_t LidarGetInformation(lidar_devEUI_t *devEUI) {
 800abdc:	b590      	push	{r4, r7, lr}
 800abde:	b08d      	sub	sp, #52	; 0x34
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
	LOG_LIDAR_ENTER();
 800abe4:	4a3d      	ldr	r2, [pc, #244]	; (800acdc <LidarGetInformation+0x100>)
 800abe6:	4b3e      	ldr	r3, [pc, #248]	; (800ace0 <LidarGetInformation+0x104>)
 800abe8:	0011      	movs	r1, r2
 800abea:	0018      	movs	r0, r3
 800abec:	f000 fe5e 	bl	800b8ac <iprintf>
	HAL_StatusTypeDef status;
	uint8_t command[COMMAND_SIZE] = {(LIDAR_GET_DEV_ID & 0xFF00) >> 8, (LIDAR_GET_DEV_ID & 0x00FF)};
 800abf0:	212c      	movs	r1, #44	; 0x2c
 800abf2:	187b      	adds	r3, r7, r1
 800abf4:	4a3b      	ldr	r2, [pc, #236]	; (800ace4 <LidarGetInformation+0x108>)
 800abf6:	801a      	strh	r2, [r3, #0]
	status = lidar.uart.tx(command, NULL, 0);
 800abf8:	4b3b      	ldr	r3, [pc, #236]	; (800ace8 <LidarGetInformation+0x10c>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	1878      	adds	r0, r7, r1
 800abfe:	2200      	movs	r2, #0
 800ac00:	2100      	movs	r1, #0
 800ac02:	4798      	blx	r3
 800ac04:	0002      	movs	r2, r0
 800ac06:	212f      	movs	r1, #47	; 0x2f
 800ac08:	187b      	adds	r3, r7, r1
 800ac0a:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK) {
 800ac0c:	000a      	movs	r2, r1
 800ac0e:	18bb      	adds	r3, r7, r2
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d008      	beq.n	800ac28 <LidarGetInformation+0x4c>
		LOG_LIDAR_ERROR("transmit error: %d", status);
 800ac16:	18bb      	adds	r3, r7, r2
 800ac18:	781a      	ldrb	r2, [r3, #0]
 800ac1a:	4930      	ldr	r1, [pc, #192]	; (800acdc <LidarGetInformation+0x100>)
 800ac1c:	4b33      	ldr	r3, [pc, #204]	; (800acec <LidarGetInformation+0x110>)
 800ac1e:	0018      	movs	r0, r3
 800ac20:	f000 fe44 	bl	800b8ac <iprintf>
		return transmission_failed;
 800ac24:	2309      	movs	r3, #9
 800ac26:	e054      	b.n	800acd2 <LidarGetInformation+0xf6>
	}

	uint8_t version[DEVEUI_SIZE + HEADER_SIZE];

	status = lidar.uart.rx(version, (DEVEUI_SIZE + HEADER_SIZE));
 800ac28:	4b2f      	ldr	r3, [pc, #188]	; (800ace8 <LidarGetInformation+0x10c>)
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	2410      	movs	r4, #16
 800ac2e:	193a      	adds	r2, r7, r4
 800ac30:	211b      	movs	r1, #27
 800ac32:	0010      	movs	r0, r2
 800ac34:	4798      	blx	r3
 800ac36:	0002      	movs	r2, r0
 800ac38:	212f      	movs	r1, #47	; 0x2f
 800ac3a:	187b      	adds	r3, r7, r1
 800ac3c:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK) {
 800ac3e:	187b      	adds	r3, r7, r1
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d13e      	bne.n	800acc4 <LidarGetInformation+0xe8>
		xSemaphoreTake(sem_uart_read, portMAX_DELAY);	// Wait for DMA Notification
 800ac46:	4b2a      	ldr	r3, [pc, #168]	; (800acf0 <LidarGetInformation+0x114>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	4252      	negs	r2, r2
 800ac4e:	0011      	movs	r1, r2
 800ac50:	0018      	movs	r0, r3
 800ac52:	f7fd ffa0 	bl	8008b96 <xQueueSemaphoreTake>
		if(strncmp(version, (uint8_t[]){0xA5, 0x5A}, 2) == 0) {
 800ac56:	210c      	movs	r1, #12
 800ac58:	187b      	adds	r3, r7, r1
 800ac5a:	4a26      	ldr	r2, [pc, #152]	; (800acf4 <LidarGetInformation+0x118>)
 800ac5c:	8812      	ldrh	r2, [r2, #0]
 800ac5e:	801a      	strh	r2, [r3, #0]
 800ac60:	1879      	adds	r1, r7, r1
 800ac62:	193b      	adds	r3, r7, r4
 800ac64:	2202      	movs	r2, #2
 800ac66:	0018      	movs	r0, r3
 800ac68:	f000 fe84 	bl	800b974 <strncmp>
 800ac6c:	1e03      	subs	r3, r0, #0
 800ac6e:	d11d      	bne.n	800acac <LidarGetInformation+0xd0>
			//LOG_LIDAR_DEBUG(COLOR_GREEN"header OK");
			memcpy(&(devEUI->ModelNumber), &(version[HEADER_SIZE]), MODEL_NUMBER_SIZE);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	0021      	movs	r1, r4
 800ac74:	193a      	adds	r2, r7, r4
 800ac76:	79d2      	ldrb	r2, [r2, #7]
 800ac78:	701a      	strb	r2, [r3, #0]
			memcpy(&(devEUI->FirmWareVersion), &(version[HEADER_SIZE+1]), FIRMWARE_VERSION_SIZE);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	1c98      	adds	r0, r3, #2
 800ac7e:	000c      	movs	r4, r1
 800ac80:	187b      	adds	r3, r7, r1
 800ac82:	3308      	adds	r3, #8
 800ac84:	2202      	movs	r2, #2
 800ac86:	0019      	movs	r1, r3
 800ac88:	f000 ff00 	bl	800ba8c <memcpy>
			memcpy(&(devEUI->HardWareVersion), &(version[HEADER_SIZE+3]), HARDWARE_VERSION_SIZE);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	3304      	adds	r3, #4
 800ac90:	0021      	movs	r1, r4
 800ac92:	187a      	adds	r2, r7, r1
 800ac94:	7a92      	ldrb	r2, [r2, #10]
 800ac96:	701a      	strb	r2, [r3, #0]
			memcpy(&(devEUI->SerialNumber), &(version[HEADER_SIZE+4]), SERIAL_NUMBER_SIZE);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	1d58      	adds	r0, r3, #5
 800ac9c:	187b      	adds	r3, r7, r1
 800ac9e:	330b      	adds	r3, #11
 800aca0:	2210      	movs	r2, #16
 800aca2:	0019      	movs	r1, r3
 800aca4:	f000 fef2 	bl	800ba8c <memcpy>
	}
	else {
		LOG_LIDAR_ERROR("received error");
		return transmission_failed;
	}
	return success;
 800aca8:	2300      	movs	r3, #0
 800acaa:	e012      	b.n	800acd2 <LidarGetInformation+0xf6>
			LOG_LIDAR_ERROR("Header error 0x%02X %02X", version[0], version[1]);
 800acac:	2110      	movs	r1, #16
 800acae:	187b      	adds	r3, r7, r1
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	001a      	movs	r2, r3
 800acb4:	187b      	adds	r3, r7, r1
 800acb6:	785b      	ldrb	r3, [r3, #1]
 800acb8:	4908      	ldr	r1, [pc, #32]	; (800acdc <LidarGetInformation+0x100>)
 800acba:	480f      	ldr	r0, [pc, #60]	; (800acf8 <LidarGetInformation+0x11c>)
 800acbc:	f000 fdf6 	bl	800b8ac <iprintf>
			return wrongparameter;
 800acc0:	2305      	movs	r3, #5
 800acc2:	e006      	b.n	800acd2 <LidarGetInformation+0xf6>
		LOG_LIDAR_ERROR("received error");
 800acc4:	4a05      	ldr	r2, [pc, #20]	; (800acdc <LidarGetInformation+0x100>)
 800acc6:	4b0d      	ldr	r3, [pc, #52]	; (800acfc <LidarGetInformation+0x120>)
 800acc8:	0011      	movs	r1, r2
 800acca:	0018      	movs	r0, r3
 800accc:	f000 fdee 	bl	800b8ac <iprintf>
		return transmission_failed;
 800acd0:	2309      	movs	r3, #9
}
 800acd2:	0018      	movs	r0, r3
 800acd4:	46bd      	mov	sp, r7
 800acd6:	b00d      	add	sp, #52	; 0x34
 800acd8:	bd90      	pop	{r4, r7, pc}
 800acda:	46c0      	nop			; (mov r8, r8)
 800acdc:	0800cf2c 	.word	0x0800cf2c
 800ace0:	0800c988 	.word	0x0800c988
 800ace4:	ffff90a5 	.word	0xffff90a5
 800ace8:	20001204 	.word	0x20001204
 800acec:	0800c9a4 	.word	0x0800c9a4
 800acf0:	2000152c 	.word	0x2000152c
 800acf4:	0800ca44 	.word	0x0800ca44
 800acf8:	0800c9d8 	.word	0x0800c9d8
 800acfc:	0800ca14 	.word	0x0800ca14

0800ad00 <LidarScanStart>:
 *   - #success: Lidar scanning process was successfully initiated.
 *   - #transmission_failed: Failed to transmit the scanning command.
 *
 * @note This function uses UART communication with DMA for efficient data transmission.
 */
returncode_t LidarScanStart(void){
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
	LOG_LIDAR_ENTER();
 800ad06:	4a18      	ldr	r2, [pc, #96]	; (800ad68 <LidarScanStart+0x68>)
 800ad08:	4b18      	ldr	r3, [pc, #96]	; (800ad6c <LidarScanStart+0x6c>)
 800ad0a:	0011      	movs	r1, r2
 800ad0c:	0018      	movs	r0, r3
 800ad0e:	f000 fdcd 	bl	800b8ac <iprintf>
	HAL_StatusTypeDef status;

	LIDAR_DEV_ENABLE();
 800ad12:	4b17      	ldr	r3, [pc, #92]	; (800ad70 <LidarScanStart+0x70>)
 800ad14:	2201      	movs	r2, #1
 800ad16:	2102      	movs	r1, #2
 800ad18:	0018      	movs	r0, r3
 800ad1a:	f7fa fa49 	bl	80051b0 <HAL_GPIO_WritePin>
	LIDAR_MOTOR_ENABLE();
 800ad1e:	4b14      	ldr	r3, [pc, #80]	; (800ad70 <LidarScanStart+0x70>)
 800ad20:	2201      	movs	r2, #1
 800ad22:	2104      	movs	r1, #4
 800ad24:	0018      	movs	r0, r3
 800ad26:	f7fa fa43 	bl	80051b0 <HAL_GPIO_WritePin>

	uint8_t command[COMMAND_SIZE] = {(LIDAR_SCAN_START & 0xFF00) >> 8, (LIDAR_SCAN_START & 0x00FF)};
 800ad2a:	1d3b      	adds	r3, r7, #4
 800ad2c:	4a11      	ldr	r2, [pc, #68]	; (800ad74 <LidarScanStart+0x74>)
 800ad2e:	801a      	strh	r2, [r3, #0]
	//uint8_t command[COMMAND_SIZE] = {0x60, 0xA5};
	status = lidar.uart.tx(command, NULL, 0);
 800ad30:	4b11      	ldr	r3, [pc, #68]	; (800ad78 <LidarScanStart+0x78>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	1d38      	adds	r0, r7, #4
 800ad36:	2200      	movs	r2, #0
 800ad38:	2100      	movs	r1, #0
 800ad3a:	4798      	blx	r3
 800ad3c:	0002      	movs	r2, r0
 800ad3e:	1dfb      	adds	r3, r7, #7
 800ad40:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK) {
 800ad42:	1dfb      	adds	r3, r7, #7
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d008      	beq.n	800ad5c <LidarScanStart+0x5c>
		LOG_LIDAR_ERROR("transmit error: %d", status);
 800ad4a:	1dfb      	adds	r3, r7, #7
 800ad4c:	781a      	ldrb	r2, [r3, #0]
 800ad4e:	4906      	ldr	r1, [pc, #24]	; (800ad68 <LidarScanStart+0x68>)
 800ad50:	4b0a      	ldr	r3, [pc, #40]	; (800ad7c <LidarScanStart+0x7c>)
 800ad52:	0018      	movs	r0, r3
 800ad54:	f000 fdaa 	bl	800b8ac <iprintf>
		return transmission_failed;
 800ad58:	2309      	movs	r3, #9
 800ad5a:	e000      	b.n	800ad5e <LidarScanStart+0x5e>
	}
	return success;
 800ad5c:	2300      	movs	r3, #0
}
 800ad5e:	0018      	movs	r0, r3
 800ad60:	46bd      	mov	sp, r7
 800ad62:	b002      	add	sp, #8
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	46c0      	nop			; (mov r8, r8)
 800ad68:	0800cf40 	.word	0x0800cf40
 800ad6c:	0800c988 	.word	0x0800c988
 800ad70:	50000400 	.word	0x50000400
 800ad74:	000060a5 	.word	0x000060a5
 800ad78:	20001204 	.word	0x20001204
 800ad7c:	0800c9a4 	.word	0x0800c9a4

0800ad80 <LidarScanStop>:
 *   - #success: Lidar scanning process was successfully stopped.
 *   - #transmission_failed: Failed to transmit the command to stop scanning.
 *
 * @note This function uses UART communication with DMA for efficient data transmission.
 */
returncode_t LidarScanStop(void) {
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
	//LOG_LIDAR_ENTER();
	LIDAR_MOTOR_DISABLE();
 800ad86:	4b12      	ldr	r3, [pc, #72]	; (800add0 <LidarScanStop+0x50>)
 800ad88:	2200      	movs	r2, #0
 800ad8a:	2104      	movs	r1, #4
 800ad8c:	0018      	movs	r0, r3
 800ad8e:	f7fa fa0f 	bl	80051b0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status;
	uint8_t command[COMMAND_SIZE] = {(LIDAR_SCAN_STOP & 0xFF00) >> 8, (LIDAR_SCAN_STOP & 0x00FF)};
 800ad92:	1d3b      	adds	r3, r7, #4
 800ad94:	4a0f      	ldr	r2, [pc, #60]	; (800add4 <LidarScanStop+0x54>)
 800ad96:	801a      	strh	r2, [r3, #0]
	status = lidar.uart.tx(command, NULL, 0);
 800ad98:	4b0f      	ldr	r3, [pc, #60]	; (800add8 <LidarScanStop+0x58>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	1d38      	adds	r0, r7, #4
 800ad9e:	2200      	movs	r2, #0
 800ada0:	2100      	movs	r1, #0
 800ada2:	4798      	blx	r3
 800ada4:	0002      	movs	r2, r0
 800ada6:	1dfb      	adds	r3, r7, #7
 800ada8:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK) {
 800adaa:	1dfb      	adds	r3, r7, #7
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d008      	beq.n	800adc4 <LidarScanStop+0x44>
		LOG_LIDAR_ERROR("transmit error: %d", status);
 800adb2:	1dfb      	adds	r3, r7, #7
 800adb4:	781a      	ldrb	r2, [r3, #0]
 800adb6:	4909      	ldr	r1, [pc, #36]	; (800addc <LidarScanStop+0x5c>)
 800adb8:	4b09      	ldr	r3, [pc, #36]	; (800ade0 <LidarScanStop+0x60>)
 800adba:	0018      	movs	r0, r3
 800adbc:	f000 fd76 	bl	800b8ac <iprintf>
		return transmission_failed;
 800adc0:	2309      	movs	r3, #9
 800adc2:	e000      	b.n	800adc6 <LidarScanStop+0x46>
	}
	return success;
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	0018      	movs	r0, r3
 800adc8:	46bd      	mov	sp, r7
 800adca:	b002      	add	sp, #8
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	46c0      	nop			; (mov r8, r8)
 800add0:	50000400 	.word	0x50000400
 800add4:	000065a5 	.word	0x000065a5
 800add8:	20001204 	.word	0x20001204
 800addc:	0800cf50 	.word	0x0800cf50
 800ade0:	0800c9a4 	.word	0x0800c9a4

0800ade4 <LidarHealthStatus>:
 *   - #wrongparameter: Received data has an unexpected header or format.
 *
 * @note This function uses UART communication with DMA for efficient data transmission and reception.
 * It checks the header of the received data to ensure it matches the expected format before extracting health status information.
 */
returncode_t LidarHealthStatus(lidar_healthStatus_t *healthStatus) {
 800ade4:	b590      	push	{r4, r7, lr}
 800ade6:	b08b      	sub	sp, #44	; 0x2c
 800ade8:	af02      	add	r7, sp, #8
 800adea:	6078      	str	r0, [r7, #4]
	LOG_LIDAR_ENTER();
 800adec:	4a40      	ldr	r2, [pc, #256]	; (800aef0 <LidarHealthStatus+0x10c>)
 800adee:	4b41      	ldr	r3, [pc, #260]	; (800aef4 <LidarHealthStatus+0x110>)
 800adf0:	0011      	movs	r1, r2
 800adf2:	0018      	movs	r0, r3
 800adf4:	f000 fd5a 	bl	800b8ac <iprintf>
	HAL_StatusTypeDef status;
	uint8_t command[COMMAND_SIZE] = {(LIDAR_GET_HEALTH_STATUS & 0xFF00) >> 8, (LIDAR_GET_HEALTH_STATUS & 0x00FF)};
 800adf8:	211c      	movs	r1, #28
 800adfa:	187b      	adds	r3, r7, r1
 800adfc:	4a3e      	ldr	r2, [pc, #248]	; (800aef8 <LidarHealthStatus+0x114>)
 800adfe:	801a      	strh	r2, [r3, #0]
	status = lidar.uart.tx(command, NULL, 0);
 800ae00:	4b3e      	ldr	r3, [pc, #248]	; (800aefc <LidarHealthStatus+0x118>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	1878      	adds	r0, r7, r1
 800ae06:	2200      	movs	r2, #0
 800ae08:	2100      	movs	r1, #0
 800ae0a:	4798      	blx	r3
 800ae0c:	0002      	movs	r2, r0
 800ae0e:	211f      	movs	r1, #31
 800ae10:	187b      	adds	r3, r7, r1
 800ae12:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK) {
 800ae14:	000a      	movs	r2, r1
 800ae16:	18bb      	adds	r3, r7, r2
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d006      	beq.n	800ae2c <LidarHealthStatus+0x48>
		LOG_LIDAR_ERROR("transmit error: %d", status);
 800ae1e:	18bb      	adds	r3, r7, r2
 800ae20:	781a      	ldrb	r2, [r3, #0]
 800ae22:	4933      	ldr	r1, [pc, #204]	; (800aef0 <LidarHealthStatus+0x10c>)
 800ae24:	4b36      	ldr	r3, [pc, #216]	; (800af00 <LidarHealthStatus+0x11c>)
 800ae26:	0018      	movs	r0, r3
 800ae28:	f000 fd40 	bl	800b8ac <iprintf>
	}
	uint8_t buf[HEADER_SIZE + HEALTH_STATUS_SIZE];

	status = lidar.uart.rx(buf,  (HEADER_SIZE + HEALTH_STATUS_SIZE));
 800ae2c:	4b33      	ldr	r3, [pc, #204]	; (800aefc <LidarHealthStatus+0x118>)
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	2410      	movs	r4, #16
 800ae32:	193a      	adds	r2, r7, r4
 800ae34:	210a      	movs	r1, #10
 800ae36:	0010      	movs	r0, r2
 800ae38:	4798      	blx	r3
 800ae3a:	0002      	movs	r2, r0
 800ae3c:	211f      	movs	r1, #31
 800ae3e:	187b      	adds	r3, r7, r1
 800ae40:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK) {
 800ae42:	187b      	adds	r3, r7, r1
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d131      	bne.n	800aeae <LidarHealthStatus+0xca>
		xSemaphoreTake(sem_uart_read, portMAX_DELAY);	// Wait for DMA Notification
 800ae4a:	4b2e      	ldr	r3, [pc, #184]	; (800af04 <LidarHealthStatus+0x120>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	4252      	negs	r2, r2
 800ae52:	0011      	movs	r1, r2
 800ae54:	0018      	movs	r0, r3
 800ae56:	f7fd fe9e 	bl	8008b96 <xQueueSemaphoreTake>
		if(strncmp(buf, (uint8_t[]){0xA5, 0x5A}, 2) == 0) {
 800ae5a:	210c      	movs	r1, #12
 800ae5c:	187b      	adds	r3, r7, r1
 800ae5e:	4a2a      	ldr	r2, [pc, #168]	; (800af08 <LidarHealthStatus+0x124>)
 800ae60:	8812      	ldrh	r2, [r2, #0]
 800ae62:	801a      	strh	r2, [r3, #0]
 800ae64:	1879      	adds	r1, r7, r1
 800ae66:	193b      	adds	r3, r7, r4
 800ae68:	2202      	movs	r2, #2
 800ae6a:	0018      	movs	r0, r3
 800ae6c:	f000 fd82 	bl	800b974 <strncmp>
 800ae70:	1e03      	subs	r3, r0, #0
 800ae72:	d110      	bne.n	800ae96 <LidarHealthStatus+0xb2>
			memcpy(&(healthStatus->StatusCode), &(buf[HEADER_SIZE]), STATUS_CODE_SIZE);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	193a      	adds	r2, r7, r4
 800ae78:	79d2      	ldrb	r2, [r2, #7]
 800ae7a:	701a      	strb	r2, [r3, #0]
			memcpy(&(healthStatus->ErrorCode), &(buf[HEADER_SIZE + 1]), ERROR_CODE_SIZE);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	1c58      	adds	r0, r3, #1
 800ae80:	193b      	adds	r3, r7, r4
 800ae82:	3308      	adds	r3, #8
 800ae84:	2202      	movs	r2, #2
 800ae86:	0019      	movs	r1, r3
 800ae88:	f000 fe00 	bl	800ba8c <memcpy>
	}
	else {
		LOG_LIDAR_ERROR("reception error");
		return transmission_failed;
	}
	LOG_LIDAR_DEBUG("healthStatus: -status = %s, -error: 0x[%02X %02X]", 
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d114      	bne.n	800aebe <LidarHealthStatus+0xda>
 800ae94:	e01b      	b.n	800aece <LidarHealthStatus+0xea>
			LOG_LIDAR_ERROR("Header error 0x%02X %02X", buf[0], buf[1]);
 800ae96:	2110      	movs	r1, #16
 800ae98:	187b      	adds	r3, r7, r1
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	001a      	movs	r2, r3
 800ae9e:	187b      	adds	r3, r7, r1
 800aea0:	785b      	ldrb	r3, [r3, #1]
 800aea2:	4913      	ldr	r1, [pc, #76]	; (800aef0 <LidarHealthStatus+0x10c>)
 800aea4:	4819      	ldr	r0, [pc, #100]	; (800af0c <LidarHealthStatus+0x128>)
 800aea6:	f000 fd01 	bl	800b8ac <iprintf>
			return wrongparameter;
 800aeaa:	2305      	movs	r3, #5
 800aeac:	e01c      	b.n	800aee8 <LidarHealthStatus+0x104>
		LOG_LIDAR_ERROR("reception error");
 800aeae:	4a10      	ldr	r2, [pc, #64]	; (800aef0 <LidarHealthStatus+0x10c>)
 800aeb0:	4b17      	ldr	r3, [pc, #92]	; (800af10 <LidarHealthStatus+0x12c>)
 800aeb2:	0011      	movs	r1, r2
 800aeb4:	0018      	movs	r0, r3
 800aeb6:	f000 fcf9 	bl	800b8ac <iprintf>
		return transmission_failed;
 800aeba:	2309      	movs	r3, #9
 800aebc:	e014      	b.n	800aee8 <LidarHealthStatus+0x104>
	LOG_LIDAR_DEBUG("healthStatus: -status = %s, -error: 0x[%02X %02X]", 
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d101      	bne.n	800aeca <LidarHealthStatus+0xe6>
 800aec6:	4a13      	ldr	r2, [pc, #76]	; (800af14 <LidarHealthStatus+0x130>)
 800aec8:	e002      	b.n	800aed0 <LidarHealthStatus+0xec>
 800aeca:	4a13      	ldr	r2, [pc, #76]	; (800af18 <LidarHealthStatus+0x134>)
 800aecc:	e000      	b.n	800aed0 <LidarHealthStatus+0xec>
 800aece:	4a13      	ldr	r2, [pc, #76]	; (800af1c <LidarHealthStatus+0x138>)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	785b      	ldrb	r3, [r3, #1]
 800aed4:	001c      	movs	r4, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	789b      	ldrb	r3, [r3, #2]
 800aeda:	4905      	ldr	r1, [pc, #20]	; (800aef0 <LidarHealthStatus+0x10c>)
 800aedc:	4810      	ldr	r0, [pc, #64]	; (800af20 <LidarHealthStatus+0x13c>)
 800aede:	9300      	str	r3, [sp, #0]
 800aee0:	0023      	movs	r3, r4
 800aee2:	f000 fce3 	bl	800b8ac <iprintf>
					(healthStatus->StatusCode == 0) ? "running normaly" : (healthStatus->StatusCode == 1) ? "running warning" : "running incorrectly",
					healthStatus->ErrorCode[0], healthStatus->ErrorCode[1]);
	return success;
 800aee6:	2300      	movs	r3, #0
}
 800aee8:	0018      	movs	r0, r3
 800aeea:	46bd      	mov	sp, r7
 800aeec:	b009      	add	sp, #36	; 0x24
 800aeee:	bd90      	pop	{r4, r7, pc}
 800aef0:	0800cf60 	.word	0x0800cf60
 800aef4:	0800c988 	.word	0x0800c988
 800aef8:	ffff91a5 	.word	0xffff91a5
 800aefc:	20001204 	.word	0x20001204
 800af00:	0800c9a4 	.word	0x0800c9a4
 800af04:	2000152c 	.word	0x2000152c
 800af08:	0800ca44 	.word	0x0800ca44
 800af0c:	0800c9d8 	.word	0x0800c9d8
 800af10:	0800ca48 	.word	0x0800ca48
 800af14:	0800ca7c 	.word	0x0800ca7c
 800af18:	0800ca8c 	.word	0x0800ca8c
 800af1c:	0800caa0 	.word	0x0800caa0
 800af20:	0800cab0 	.word	0x0800cab0

0800af24 <lidarRestart>:

returncode_t lidarRestart(void) {
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
	LOG_LIDAR_ENTER();
 800af2a:	4a12      	ldr	r2, [pc, #72]	; (800af74 <lidarRestart+0x50>)
 800af2c:	4b12      	ldr	r3, [pc, #72]	; (800af78 <lidarRestart+0x54>)
 800af2e:	0011      	movs	r1, r2
 800af30:	0018      	movs	r0, r3
 800af32:	f000 fcbb 	bl	800b8ac <iprintf>
	HAL_StatusTypeDef status;
	uint8_t command[COMMAND_SIZE] = {(LIDAR_RESTART & 0xFF00) >> 8, (LIDAR_RESTART & 0x00FF)};
 800af36:	1d3b      	adds	r3, r7, #4
 800af38:	4a10      	ldr	r2, [pc, #64]	; (800af7c <lidarRestart+0x58>)
 800af3a:	801a      	strh	r2, [r3, #0]
	status = lidar.uart.tx(command, NULL, 0);
 800af3c:	4b10      	ldr	r3, [pc, #64]	; (800af80 <lidarRestart+0x5c>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	1d38      	adds	r0, r7, #4
 800af42:	2200      	movs	r2, #0
 800af44:	2100      	movs	r1, #0
 800af46:	4798      	blx	r3
 800af48:	0002      	movs	r2, r0
 800af4a:	1dfb      	adds	r3, r7, #7
 800af4c:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK) {
 800af4e:	1dfb      	adds	r3, r7, #7
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d008      	beq.n	800af68 <lidarRestart+0x44>
		LOG_LIDAR_ERROR("transmit error: %d", status);
 800af56:	1dfb      	adds	r3, r7, #7
 800af58:	781a      	ldrb	r2, [r3, #0]
 800af5a:	4906      	ldr	r1, [pc, #24]	; (800af74 <lidarRestart+0x50>)
 800af5c:	4b09      	ldr	r3, [pc, #36]	; (800af84 <lidarRestart+0x60>)
 800af5e:	0018      	movs	r0, r3
 800af60:	f000 fca4 	bl	800b8ac <iprintf>
		return transmission_failed;
 800af64:	2309      	movs	r3, #9
 800af66:	e000      	b.n	800af6a <lidarRestart+0x46>
	}
	return success;
 800af68:	2300      	movs	r3, #0
}
 800af6a:	0018      	movs	r0, r3
 800af6c:	46bd      	mov	sp, r7
 800af6e:	b002      	add	sp, #8
 800af70:	bd80      	pop	{r7, pc}
 800af72:	46c0      	nop			; (mov r8, r8)
 800af74:	0800cf74 	.word	0x0800cf74
 800af78:	0800c988 	.word	0x0800c988
 800af7c:	ffff80a5 	.word	0xffff80a5
 800af80:	20001204 	.word	0x20001204
 800af84:	0800c9a4 	.word	0x0800c9a4

0800af88 <convertSample>:
	else {
		return false;
	}
}

returncode_t convertSample(lidar_scan_t *lidarData) { //TODO
 800af88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af8a:	b091      	sub	sp, #68	; 0x44
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	61f8      	str	r0, [r7, #28]
 800af90:	4669      	mov	r1, sp
 800af92:	000e      	movs	r6, r1
	/******************** convert distance ***********************/
	uint16_t sampleSize = lidarData->LSN/Si_SIZE;
 800af94:	69f9      	ldr	r1, [r7, #28]
 800af96:	78c9      	ldrb	r1, [r1, #3]
 800af98:	0849      	lsrs	r1, r1, #1
 800af9a:	b2c8      	uxtb	r0, r1
 800af9c:	211e      	movs	r1, #30
 800af9e:	000b      	movs	r3, r1
 800afa0:	2218      	movs	r2, #24
 800afa2:	188a      	adds	r2, r1, r2
 800afa4:	19d1      	adds	r1, r2, r7
 800afa6:	8008      	strh	r0, [r1, #0]
	//uint16_t distance[sampleSize];
	position_t position[sampleSize];
 800afa8:	0019      	movs	r1, r3
 800afaa:	2318      	movs	r3, #24
 800afac:	18cb      	adds	r3, r1, r3
 800afae:	19d9      	adds	r1, r3, r7
 800afb0:	8809      	ldrh	r1, [r1, #0]
 800afb2:	0008      	movs	r0, r1
 800afb4:	3801      	subs	r0, #1
 800afb6:	6338      	str	r0, [r7, #48]	; 0x30
 800afb8:	6139      	str	r1, [r7, #16]
 800afba:	2000      	movs	r0, #0
 800afbc:	6178      	str	r0, [r7, #20]
 800afbe:	693a      	ldr	r2, [r7, #16]
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	0010      	movs	r0, r2
 800afc4:	0e80      	lsrs	r0, r0, #26
 800afc6:	613a      	str	r2, [r7, #16]
 800afc8:	617b      	str	r3, [r7, #20]
 800afca:	019d      	lsls	r5, r3, #6
 800afcc:	4305      	orrs	r5, r0
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	019c      	lsls	r4, r3, #6
 800afd2:	6039      	str	r1, [r7, #0]
 800afd4:	2000      	movs	r0, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	683c      	ldr	r4, [r7, #0]
 800afda:	687d      	ldr	r5, [r7, #4]
 800afdc:	0023      	movs	r3, r4
 800afde:	0e98      	lsrs	r0, r3, #26
 800afe0:	002b      	movs	r3, r5
 800afe2:	019b      	lsls	r3, r3, #6
 800afe4:	60fb      	str	r3, [r7, #12]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	4303      	orrs	r3, r0
 800afea:	60fb      	str	r3, [r7, #12]
 800afec:	0023      	movs	r3, r4
 800afee:	019b      	lsls	r3, r3, #6
 800aff0:	60bb      	str	r3, [r7, #8]
 800aff2:	000b      	movs	r3, r1
 800aff4:	00db      	lsls	r3, r3, #3
 800aff6:	3307      	adds	r3, #7
 800aff8:	08db      	lsrs	r3, r3, #3
 800affa:	00db      	lsls	r3, r3, #3
 800affc:	466a      	mov	r2, sp
 800affe:	1ad3      	subs	r3, r2, r3
 800b000:	469d      	mov	sp, r3
 800b002:	466b      	mov	r3, sp
 800b004:	3303      	adds	r3, #3
 800b006:	089b      	lsrs	r3, r3, #2
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int i = 0;
 800b00c:	2300      	movs	r3, #0
 800b00e:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i = 0; i < sampleSize; i++) {
 800b010:	2300      	movs	r3, #0
 800b012:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b014:	e01a      	b.n	800b04c <convertSample+0xc4>
		//distance[i] = ((lidarData->SI[0] << 8) + lidarData->SI[1])/4;
		position[i].distance = ((lidarData->SI[i] << 8) + lidarData->SI[i+1])/4; // distance in mm
 800b016:	69fa      	ldr	r2, [r7, #28]
 800b018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b01a:	18d3      	adds	r3, r2, r3
 800b01c:	330a      	adds	r3, #10
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	021b      	lsls	r3, r3, #8
 800b022:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b024:	3201      	adds	r2, #1
 800b026:	69f9      	ldr	r1, [r7, #28]
 800b028:	188a      	adds	r2, r1, r2
 800b02a:	7a92      	ldrb	r2, [r2, #10]
 800b02c:	189b      	adds	r3, r3, r2
 800b02e:	2b00      	cmp	r3, #0
 800b030:	da00      	bge.n	800b034 <convertSample+0xac>
 800b032:	3303      	adds	r3, #3
 800b034:	109b      	asrs	r3, r3, #2
 800b036:	b299      	uxth	r1, r3
 800b038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b03a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b03c:	00db      	lsls	r3, r3, #3
 800b03e:	18d3      	adds	r3, r2, r3
 800b040:	3304      	adds	r3, #4
 800b042:	1c0a      	adds	r2, r1, #0
 800b044:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < sampleSize; i++) {
 800b046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b048:	3301      	adds	r3, #1
 800b04a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b04c:	231e      	movs	r3, #30
 800b04e:	2218      	movs	r2, #24
 800b050:	189b      	adds	r3, r3, r2
 800b052:	19db      	adds	r3, r3, r7
 800b054:	881b      	ldrh	r3, [r3, #0]
 800b056:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b058:	429a      	cmp	r2, r3
 800b05a:	dbdc      	blt.n	800b016 <convertSample+0x8e>
	}

	/******************** angle ***********************/
	float angleFSA, angleLSA, deltaAngle;
	angleFSA = ((((lidarData->FSA[1]) << 8) + lidarData->FSA[0]) >> 1)/64;
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	795b      	ldrb	r3, [r3, #5]
 800b060:	021b      	lsls	r3, r3, #8
 800b062:	69fa      	ldr	r2, [r7, #28]
 800b064:	7912      	ldrb	r2, [r2, #4]
 800b066:	189b      	adds	r3, r3, r2
 800b068:	105b      	asrs	r3, r3, #1
 800b06a:	d500      	bpl.n	800b06e <convertSample+0xe6>
 800b06c:	333f      	adds	r3, #63	; 0x3f
 800b06e:	119b      	asrs	r3, r3, #6
 800b070:	0018      	movs	r0, r3
 800b072:	f7f6 f899 	bl	80011a8 <__aeabi_i2f>
 800b076:	1c03      	adds	r3, r0, #0
 800b078:	62bb      	str	r3, [r7, #40]	; 0x28
	angleLSA = ((((lidarData->LSA[1]) << 8) + lidarData->LSA[0]) >> 1)/64;
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	79db      	ldrb	r3, [r3, #7]
 800b07e:	021b      	lsls	r3, r3, #8
 800b080:	69fa      	ldr	r2, [r7, #28]
 800b082:	7992      	ldrb	r2, [r2, #6]
 800b084:	189b      	adds	r3, r3, r2
 800b086:	105b      	asrs	r3, r3, #1
 800b088:	d500      	bpl.n	800b08c <convertSample+0x104>
 800b08a:	333f      	adds	r3, #63	; 0x3f
 800b08c:	119b      	asrs	r3, r3, #6
 800b08e:	0018      	movs	r0, r3
 800b090:	f7f6 f88a 	bl	80011a8 <__aeabi_i2f>
 800b094:	1c03      	adds	r3, r0, #0
 800b096:	63bb      	str	r3, [r7, #56]	; 0x38
	if(angleLSA < angleFSA) {
 800b098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b09a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b09c:	f7f5 fa04 	bl	80004a8 <__aeabi_fcmplt>
 800b0a0:	1e03      	subs	r3, r0, #0
 800b0a2:	d005      	beq.n	800b0b0 <convertSample+0x128>
		angleLSA += 360;
 800b0a4:	4961      	ldr	r1, [pc, #388]	; (800b22c <convertSample+0x2a4>)
 800b0a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0a8:	f7f5 fa26 	bl	80004f8 <__aeabi_fadd>
 800b0ac:	1c03      	adds	r3, r0, #0
 800b0ae:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	deltaAngle = angleLSA - angleFSA;
 800b0b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0b4:	f7f5 fed8 	bl	8000e68 <__aeabi_fsub>
 800b0b8:	1c03      	adds	r3, r0, #0
 800b0ba:	627b      	str	r3, [r7, #36]	; 0x24

	/******************** angle correction & convertion ***********************/
	//float correctAngle[sampleSize];
	for(i = 0; i < sampleSize; i++) {
 800b0bc:	2300      	movs	r3, #0
 800b0be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0c0:	e096      	b.n	800b1f0 <convertSample+0x268>
		if(position[i].distance>0) {
 800b0c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0c6:	00db      	lsls	r3, r3, #3
 800b0c8:	18d3      	adds	r3, r2, r3
 800b0ca:	3304      	adds	r3, #4
 800b0cc:	881b      	ldrh	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d100      	bne.n	800b0d4 <convertSample+0x14c>
 800b0d2:	e08a      	b.n	800b1ea <convertSample+0x262>
			//correctAngle[i] = deltaAngle/sampleSize * i + angleFSA + (atan(21.8 * (155.3 - distance[i]) / (155.3 * distance[i])) * 180/3.14);
			position[i].angle = deltaAngle/sampleSize * i + angleFSA + (atan(21.8 * (155.3 - position[i].distance) / (155.3 * position[i].distance)) * 180/3.14);
 800b0d4:	231e      	movs	r3, #30
 800b0d6:	2218      	movs	r2, #24
 800b0d8:	189b      	adds	r3, r3, r2
 800b0da:	19db      	adds	r3, r3, r7
 800b0dc:	881b      	ldrh	r3, [r3, #0]
 800b0de:	0018      	movs	r0, r3
 800b0e0:	f7f6 f862 	bl	80011a8 <__aeabi_i2f>
 800b0e4:	1c03      	adds	r3, r0, #0
 800b0e6:	1c19      	adds	r1, r3, #0
 800b0e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0ea:	f7f5 fba5 	bl	8000838 <__aeabi_fdiv>
 800b0ee:	1c03      	adds	r3, r0, #0
 800b0f0:	1c1c      	adds	r4, r3, #0
 800b0f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b0f4:	f7f6 f858 	bl	80011a8 <__aeabi_i2f>
 800b0f8:	1c03      	adds	r3, r0, #0
 800b0fa:	1c19      	adds	r1, r3, #0
 800b0fc:	1c20      	adds	r0, r4, #0
 800b0fe:	f7f5 fd65 	bl	8000bcc <__aeabi_fmul>
 800b102:	1c03      	adds	r3, r0, #0
 800b104:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b106:	1c18      	adds	r0, r3, #0
 800b108:	f7f5 f9f6 	bl	80004f8 <__aeabi_fadd>
 800b10c:	1c03      	adds	r3, r0, #0
 800b10e:	1c18      	adds	r0, r3, #0
 800b110:	f7f7 fe6a 	bl	8002de8 <__aeabi_f2d>
 800b114:	0004      	movs	r4, r0
 800b116:	000d      	movs	r5, r1
 800b118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b11a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b11c:	00db      	lsls	r3, r3, #3
 800b11e:	18d3      	adds	r3, r2, r3
 800b120:	3304      	adds	r3, #4
 800b122:	881b      	ldrh	r3, [r3, #0]
 800b124:	0018      	movs	r0, r3
 800b126:	f7f7 fe2f 	bl	8002d88 <__aeabi_i2d>
 800b12a:	0002      	movs	r2, r0
 800b12c:	000b      	movs	r3, r1
 800b12e:	4840      	ldr	r0, [pc, #256]	; (800b230 <convertSample+0x2a8>)
 800b130:	4940      	ldr	r1, [pc, #256]	; (800b234 <convertSample+0x2ac>)
 800b132:	f7f7 faa7 	bl	8002684 <__aeabi_dsub>
 800b136:	0002      	movs	r2, r0
 800b138:	000b      	movs	r3, r1
 800b13a:	0010      	movs	r0, r2
 800b13c:	0019      	movs	r1, r3
 800b13e:	4a3e      	ldr	r2, [pc, #248]	; (800b238 <convertSample+0x2b0>)
 800b140:	4b3e      	ldr	r3, [pc, #248]	; (800b23c <convertSample+0x2b4>)
 800b142:	f7f6 ffdd 	bl	8002100 <__aeabi_dmul>
 800b146:	0002      	movs	r2, r0
 800b148:	000b      	movs	r3, r1
 800b14a:	613a      	str	r2, [r7, #16]
 800b14c:	617b      	str	r3, [r7, #20]
 800b14e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b152:	00db      	lsls	r3, r3, #3
 800b154:	18d3      	adds	r3, r2, r3
 800b156:	3304      	adds	r3, #4
 800b158:	881b      	ldrh	r3, [r3, #0]
 800b15a:	0018      	movs	r0, r3
 800b15c:	f7f7 fe14 	bl	8002d88 <__aeabi_i2d>
 800b160:	4a33      	ldr	r2, [pc, #204]	; (800b230 <convertSample+0x2a8>)
 800b162:	4b34      	ldr	r3, [pc, #208]	; (800b234 <convertSample+0x2ac>)
 800b164:	f7f6 ffcc 	bl	8002100 <__aeabi_dmul>
 800b168:	0002      	movs	r2, r0
 800b16a:	000b      	movs	r3, r1
 800b16c:	6938      	ldr	r0, [r7, #16]
 800b16e:	6979      	ldr	r1, [r7, #20]
 800b170:	f7f6 fbcc 	bl	800190c <__aeabi_ddiv>
 800b174:	0002      	movs	r2, r0
 800b176:	000b      	movs	r3, r1
 800b178:	0010      	movs	r0, r2
 800b17a:	0019      	movs	r1, r3
 800b17c:	f001 fa56 	bl	800c62c <atan>
 800b180:	2200      	movs	r2, #0
 800b182:	4b2f      	ldr	r3, [pc, #188]	; (800b240 <convertSample+0x2b8>)
 800b184:	f7f6 ffbc 	bl	8002100 <__aeabi_dmul>
 800b188:	0002      	movs	r2, r0
 800b18a:	000b      	movs	r3, r1
 800b18c:	0010      	movs	r0, r2
 800b18e:	0019      	movs	r1, r3
 800b190:	4a2c      	ldr	r2, [pc, #176]	; (800b244 <convertSample+0x2bc>)
 800b192:	4b2d      	ldr	r3, [pc, #180]	; (800b248 <convertSample+0x2c0>)
 800b194:	f7f6 fbba 	bl	800190c <__aeabi_ddiv>
 800b198:	0002      	movs	r2, r0
 800b19a:	000b      	movs	r3, r1
 800b19c:	0020      	movs	r0, r4
 800b19e:	0029      	movs	r1, r5
 800b1a0:	f7f6 f854 	bl	800124c <__aeabi_dadd>
 800b1a4:	0002      	movs	r2, r0
 800b1a6:	000b      	movs	r3, r1
 800b1a8:	0010      	movs	r0, r2
 800b1aa:	0019      	movs	r1, r3
 800b1ac:	f7f7 fe64 	bl	8002e78 <__aeabi_d2f>
 800b1b0:	1c01      	adds	r1, r0, #0
 800b1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b1b6:	00d2      	lsls	r2, r2, #3
 800b1b8:	50d1      	str	r1, [r2, r3]
			if(position[i].angle >= 360.0f) {
 800b1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b1be:	00d2      	lsls	r2, r2, #3
 800b1c0:	58d3      	ldr	r3, [r2, r3]
 800b1c2:	491a      	ldr	r1, [pc, #104]	; (800b22c <convertSample+0x2a4>)
 800b1c4:	1c18      	adds	r0, r3, #0
 800b1c6:	f7f5 f98d 	bl	80004e4 <__aeabi_fcmpge>
 800b1ca:	1e03      	subs	r3, r0, #0
 800b1cc:	d00d      	beq.n	800b1ea <convertSample+0x262>
				position[i].angle -= 360.0f;
 800b1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b1d2:	00d2      	lsls	r2, r2, #3
 800b1d4:	58d3      	ldr	r3, [r2, r3]
 800b1d6:	4915      	ldr	r1, [pc, #84]	; (800b22c <convertSample+0x2a4>)
 800b1d8:	1c18      	adds	r0, r3, #0
 800b1da:	f7f5 fe45 	bl	8000e68 <__aeabi_fsub>
 800b1de:	1c03      	adds	r3, r0, #0
 800b1e0:	1c19      	adds	r1, r3, #0
 800b1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b1e6:	00d2      	lsls	r2, r2, #3
 800b1e8:	50d1      	str	r1, [r2, r3]
	for(i = 0; i < sampleSize; i++) {
 800b1ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1f0:	241e      	movs	r4, #30
 800b1f2:	2318      	movs	r3, #24
 800b1f4:	18e3      	adds	r3, r4, r3
 800b1f6:	19db      	adds	r3, r3, r7
 800b1f8:	881b      	ldrh	r3, [r3, #0]
 800b1fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	da00      	bge.n	800b202 <convertSample+0x27a>
 800b200:	e75f      	b.n	800b0c2 <convertSample+0x13a>
			}
		}
	}
	memset(lidar.position, 0, 100);
 800b202:	4b12      	ldr	r3, [pc, #72]	; (800b24c <convertSample+0x2c4>)
 800b204:	2264      	movs	r2, #100	; 0x64
 800b206:	2100      	movs	r1, #0
 800b208:	0018      	movs	r0, r3
 800b20a:	f000 fbab 	bl	800b964 <memset>
	memcpy(lidar.position, position, sampleSize);
 800b20e:	2318      	movs	r3, #24
 800b210:	18e3      	adds	r3, r4, r3
 800b212:	19db      	adds	r3, r3, r7
 800b214:	881a      	ldrh	r2, [r3, #0]
 800b216:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b218:	4b0c      	ldr	r3, [pc, #48]	; (800b24c <convertSample+0x2c4>)
 800b21a:	0018      	movs	r0, r3
 800b21c:	f000 fc36 	bl	800ba8c <memcpy>
	return success;
 800b220:	2300      	movs	r3, #0
 800b222:	46b5      	mov	sp, r6
}
 800b224:	0018      	movs	r0, r3
 800b226:	46bd      	mov	sp, r7
 800b228:	b011      	add	sp, #68	; 0x44
 800b22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b22c:	43b40000 	.word	0x43b40000
 800b230:	9999999a 	.word	0x9999999a
 800b234:	40636999 	.word	0x40636999
 800b238:	cccccccd 	.word	0xcccccccd
 800b23c:	4035cccc 	.word	0x4035cccc
 800b240:	40668000 	.word	0x40668000
 800b244:	51eb851f 	.word	0x51eb851f
 800b248:	40091eb8 	.word	0x40091eb8
 800b24c:	2000120c 	.word	0x2000120c

0800b250 <getLidarScanData>:
								2 * distanceInitiale * RAYON * cos(angleEnRadians));// Calcul de la distance à laquelle devrait etre le prochain point pour etre un robot
																					// en utilisant le théorème des cosinus
	return nouvelleDistance;
}*/

returncode_t getLidarScanData(lidar_scan_t *lidarScanData) {
 800b250:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b252:	b0cb      	sub	sp, #300	; 0x12c
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = 0;
 800b258:	241c      	movs	r4, #28
 800b25a:	34ff      	adds	r4, #255	; 0xff
 800b25c:	193b      	adds	r3, r7, r4
 800b25e:	2200      	movs	r2, #0
 800b260:	701a      	strb	r2, [r3, #0]
	int size = 0;
 800b262:	2300      	movs	r3, #0
 800b264:	228a      	movs	r2, #138	; 0x8a
 800b266:	0052      	lsls	r2, r2, #1
 800b268:	18ba      	adds	r2, r7, r2
 800b26a:	6013      	str	r3, [r2, #0]
	uint8_t lidarScanRawData[256];
	status = lidar.uart.rx(lidarScanRawData, 256);
 800b26c:	4ba2      	ldr	r3, [pc, #648]	; (800b4f8 <getLidarScanData+0x2a8>)
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	2280      	movs	r2, #128	; 0x80
 800b272:	0051      	lsls	r1, r2, #1
 800b274:	2214      	movs	r2, #20
 800b276:	18ba      	adds	r2, r7, r2
 800b278:	0010      	movs	r0, r2
 800b27a:	4798      	blx	r3
 800b27c:	0002      	movs	r2, r0
 800b27e:	193b      	adds	r3, r7, r4
 800b280:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK) {
 800b282:	193b      	adds	r3, r7, r4
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d000      	beq.n	800b28c <getLidarScanData+0x3c>
 800b28a:	e125      	b.n	800b4d8 <getLidarScanData+0x288>
		if (xSemaphoreTake(sem_uart_read, 100) == pdTRUE) {	// Wait for DMA Notification
 800b28c:	4b9b      	ldr	r3, [pc, #620]	; (800b4fc <getLidarScanData+0x2ac>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2164      	movs	r1, #100	; 0x64
 800b292:	0018      	movs	r0, r3
 800b294:	f7fd fc7f 	bl	8008b96 <xQueueSemaphoreTake>
 800b298:	0003      	movs	r3, r0
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d000      	beq.n	800b2a0 <getLidarScanData+0x50>
 800b29e:	e113      	b.n	800b4c8 <getLidarScanData+0x278>
			//LidarScanStop();
			//printf(COLOR_MAGENTA"*** %s\n", CONVERT_TO_STRING(lidarScanRawData, 256));
			
			int j = 0;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	2292      	movs	r2, #146	; 0x92
 800b2a4:	0052      	lsls	r2, r2, #1
 800b2a6:	18b9      	adds	r1, r7, r2
 800b2a8:	600b      	str	r3, [r1, #0]
			for(j = 0; j < 256; j++) {
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	18ba      	adds	r2, r7, r2
 800b2ae:	6013      	str	r3, [r2, #0]
 800b2b0:	e0f5      	b.n	800b49e <getLidarScanData+0x24e>
				if(strncmp(&(lidarScanRawData[j]), (uint8_t[]){0xA5, 0x5A}, 2) == 0) {
 800b2b2:	2414      	movs	r4, #20
 800b2b4:	193a      	adds	r2, r7, r4
 800b2b6:	2692      	movs	r6, #146	; 0x92
 800b2b8:	0076      	lsls	r6, r6, #1
 800b2ba:	19bb      	adds	r3, r7, r6
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	18d0      	adds	r0, r2, r3
 800b2c0:	4b8f      	ldr	r3, [pc, #572]	; (800b500 <getLidarScanData+0x2b0>)
 800b2c2:	2594      	movs	r5, #148	; 0x94
 800b2c4:	006d      	lsls	r5, r5, #1
 800b2c6:	195b      	adds	r3, r3, r5
 800b2c8:	19db      	adds	r3, r3, r7
 800b2ca:	4a8e      	ldr	r2, [pc, #568]	; (800b504 <getLidarScanData+0x2b4>)
 800b2cc:	8812      	ldrh	r2, [r2, #0]
 800b2ce:	801a      	strh	r2, [r3, #0]
 800b2d0:	2310      	movs	r3, #16
 800b2d2:	18fb      	adds	r3, r7, r3
 800b2d4:	2202      	movs	r2, #2
 800b2d6:	0019      	movs	r1, r3
 800b2d8:	f000 fb4c 	bl	800b974 <strncmp>
 800b2dc:	1e03      	subs	r3, r0, #0
 800b2de:	d15b      	bne.n	800b398 <getLidarScanData+0x148>
					printf("main header detected @ %d\n", j);
 800b2e0:	19bb      	adds	r3, r7, r6
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	4b88      	ldr	r3, [pc, #544]	; (800b508 <getLidarScanData+0x2b8>)
 800b2e6:	0011      	movs	r1, r2
 800b2e8:	0018      	movs	r0, r3
 800b2ea:	f000 fadf 	bl	800b8ac <iprintf>
					//LOG_LIDAR_DEBUG("main header detected @ %d", j);
					memcpy(lidarScanData->PH, &(lidarScanRawData[HEADER_SIZE]), PH_SIZE);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	193b      	adds	r3, r7, r4
 800b2f2:	3307      	adds	r3, #7
 800b2f4:	2202      	movs	r2, #2
 800b2f6:	0019      	movs	r1, r3
 800b2f8:	f000 fbc8 	bl	800ba8c <memcpy>
					memcpy(&(lidarScanData->CT), &(lidarScanRawData[HEADER_SIZE + 2]), CT_SIZE);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	3302      	adds	r3, #2
 800b300:	4a82      	ldr	r2, [pc, #520]	; (800b50c <getLidarScanData+0x2bc>)
 800b302:	1952      	adds	r2, r2, r5
 800b304:	19d2      	adds	r2, r2, r7
 800b306:	7a52      	ldrb	r2, [r2, #9]
 800b308:	701a      	strb	r2, [r3, #0]
					memcpy(&(lidarScanData->LSN), &(lidarScanRawData[HEADER_SIZE + 3]), LSN_SIZE);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	3303      	adds	r3, #3
 800b30e:	4a7f      	ldr	r2, [pc, #508]	; (800b50c <getLidarScanData+0x2bc>)
 800b310:	1952      	adds	r2, r2, r5
 800b312:	19d2      	adds	r2, r2, r7
 800b314:	7a92      	ldrb	r2, [r2, #10]
 800b316:	701a      	strb	r2, [r3, #0]
					memcpy(lidarScanData->FSA, &(lidarScanRawData[HEADER_SIZE + 4]), FSA_SIZE);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	1d18      	adds	r0, r3, #4
 800b31c:	193b      	adds	r3, r7, r4
 800b31e:	330b      	adds	r3, #11
 800b320:	2202      	movs	r2, #2
 800b322:	0019      	movs	r1, r3
 800b324:	f000 fbb2 	bl	800ba8c <memcpy>
					memcpy(lidarScanData->LSA, &(lidarScanRawData[HEADER_SIZE + 6]), LSA_SIZE);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	1d98      	adds	r0, r3, #6
 800b32c:	193b      	adds	r3, r7, r4
 800b32e:	330d      	adds	r3, #13
 800b330:	2202      	movs	r2, #2
 800b332:	0019      	movs	r1, r3
 800b334:	f000 fbaa 	bl	800ba8c <memcpy>
					memcpy(lidarScanData->CS, &(lidarScanRawData[HEADER_SIZE + 8]), CS_SIZE);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	3308      	adds	r3, #8
 800b33c:	0018      	movs	r0, r3
 800b33e:	193b      	adds	r3, r7, r4
 800b340:	330f      	adds	r3, #15
 800b342:	2202      	movs	r2, #2
 800b344:	0019      	movs	r1, r3
 800b346:	f000 fba1 	bl	800ba8c <memcpy>
					//memcpy(lidarScanData->SI, &(lidarScanRawData[HEADER_SIZE + j + 10]), lidarScanData->LSN);
					for(int k = 0; k < lidarScanData->LSN; k++) {
 800b34a:	2300      	movs	r3, #0
 800b34c:	2290      	movs	r2, #144	; 0x90
 800b34e:	0052      	lsls	r2, r2, #1
 800b350:	18ba      	adds	r2, r7, r2
 800b352:	6013      	str	r3, [r2, #0]
 800b354:	e016      	b.n	800b384 <getLidarScanData+0x134>
						lidarScanData->SI[k] = lidarScanRawData[HEADER_SIZE + k + 10];
 800b356:	2090      	movs	r0, #144	; 0x90
 800b358:	0040      	lsls	r0, r0, #1
 800b35a:	183b      	adds	r3, r7, r0
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	3311      	adds	r3, #17
 800b360:	4a6a      	ldr	r2, [pc, #424]	; (800b50c <getLidarScanData+0x2bc>)
 800b362:	2194      	movs	r1, #148	; 0x94
 800b364:	0049      	lsls	r1, r1, #1
 800b366:	1852      	adds	r2, r2, r1
 800b368:	19d2      	adds	r2, r2, r7
 800b36a:	5cd1      	ldrb	r1, [r2, r3]
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	183b      	adds	r3, r7, r0
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	18d3      	adds	r3, r2, r3
 800b374:	330a      	adds	r3, #10
 800b376:	1c0a      	adds	r2, r1, #0
 800b378:	701a      	strb	r2, [r3, #0]
					for(int k = 0; k < lidarScanData->LSN; k++) {
 800b37a:	183b      	adds	r3, r7, r0
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	3301      	adds	r3, #1
 800b380:	183a      	adds	r2, r7, r0
 800b382:	6013      	str	r3, [r2, #0]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	78db      	ldrb	r3, [r3, #3]
 800b388:	001a      	movs	r2, r3
 800b38a:	2390      	movs	r3, #144	; 0x90
 800b38c:	005b      	lsls	r3, r3, #1
 800b38e:	18fb      	adds	r3, r7, r3
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4293      	cmp	r3, r2
 800b394:	dbdf      	blt.n	800b356 <getLidarScanData+0x106>
					}
					break;
 800b396:	e089      	b.n	800b4ac <getLidarScanData+0x25c>
				}
				else if(strncmp(&(lidarScanRawData[j]), (uint8_t[]){0xAA, 0x55}, 2) == 0) {
 800b398:	2414      	movs	r4, #20
 800b39a:	193a      	adds	r2, r7, r4
 800b39c:	2592      	movs	r5, #146	; 0x92
 800b39e:	006d      	lsls	r5, r5, #1
 800b3a0:	197b      	adds	r3, r7, r5
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	18d0      	adds	r0, r2, r3
 800b3a6:	4b5a      	ldr	r3, [pc, #360]	; (800b510 <getLidarScanData+0x2c0>)
 800b3a8:	2294      	movs	r2, #148	; 0x94
 800b3aa:	0052      	lsls	r2, r2, #1
 800b3ac:	189b      	adds	r3, r3, r2
 800b3ae:	19db      	adds	r3, r3, r7
 800b3b0:	4a58      	ldr	r2, [pc, #352]	; (800b514 <getLidarScanData+0x2c4>)
 800b3b2:	8812      	ldrh	r2, [r2, #0]
 800b3b4:	801a      	strh	r2, [r3, #0]
 800b3b6:	230c      	movs	r3, #12
 800b3b8:	18fb      	adds	r3, r7, r3
 800b3ba:	2202      	movs	r2, #2
 800b3bc:	0019      	movs	r1, r3
 800b3be:	f000 fad9 	bl	800b974 <strncmp>
 800b3c2:	1e03      	subs	r3, r0, #0
 800b3c4:	d164      	bne.n	800b490 <getLidarScanData+0x240>
					//LOG_LIDAR_DEBUG("header detected @ %d", j);
					memcpy(lidarScanData->PH, &(lidarScanRawData[j]), PH_SIZE);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	193a      	adds	r2, r7, r4
 800b3ca:	197b      	adds	r3, r7, r5
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	18d3      	adds	r3, r2, r3
 800b3d0:	2202      	movs	r2, #2
 800b3d2:	0019      	movs	r1, r3
 800b3d4:	f000 fb5a 	bl	800ba8c <memcpy>
					memcpy(&(lidarScanData->CT), &(lidarScanRawData[j + 2]), CT_SIZE);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	3302      	adds	r3, #2
 800b3dc:	197a      	adds	r2, r7, r5
 800b3de:	6812      	ldr	r2, [r2, #0]
 800b3e0:	3202      	adds	r2, #2
 800b3e2:	1939      	adds	r1, r7, r4
 800b3e4:	188a      	adds	r2, r1, r2
 800b3e6:	7812      	ldrb	r2, [r2, #0]
 800b3e8:	701a      	strb	r2, [r3, #0]
					memcpy(&(lidarScanData->LSN), &(lidarScanRawData[j + 3]), LSN_SIZE);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	3303      	adds	r3, #3
 800b3ee:	197a      	adds	r2, r7, r5
 800b3f0:	6812      	ldr	r2, [r2, #0]
 800b3f2:	3203      	adds	r2, #3
 800b3f4:	1939      	adds	r1, r7, r4
 800b3f6:	188a      	adds	r2, r1, r2
 800b3f8:	7812      	ldrb	r2, [r2, #0]
 800b3fa:	701a      	strb	r2, [r3, #0]
					memcpy(lidarScanData->FSA, &(lidarScanRawData[j + 4]), FSA_SIZE);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	1d18      	adds	r0, r3, #4
 800b400:	197b      	adds	r3, r7, r5
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	3304      	adds	r3, #4
 800b406:	193a      	adds	r2, r7, r4
 800b408:	18d3      	adds	r3, r2, r3
 800b40a:	2202      	movs	r2, #2
 800b40c:	0019      	movs	r1, r3
 800b40e:	f000 fb3d 	bl	800ba8c <memcpy>
					memcpy(lidarScanData->LSA, &(lidarScanRawData[j + 6]), LSA_SIZE);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	1d98      	adds	r0, r3, #6
 800b416:	197b      	adds	r3, r7, r5
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	3306      	adds	r3, #6
 800b41c:	193a      	adds	r2, r7, r4
 800b41e:	18d3      	adds	r3, r2, r3
 800b420:	2202      	movs	r2, #2
 800b422:	0019      	movs	r1, r3
 800b424:	f000 fb32 	bl	800ba8c <memcpy>
					memcpy(lidarScanData->CS, &(lidarScanRawData[j  + 8]), CS_SIZE);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	3308      	adds	r3, #8
 800b42c:	0018      	movs	r0, r3
 800b42e:	197b      	adds	r3, r7, r5
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	3308      	adds	r3, #8
 800b434:	193a      	adds	r2, r7, r4
 800b436:	18d3      	adds	r3, r2, r3
 800b438:	2202      	movs	r2, #2
 800b43a:	0019      	movs	r1, r3
 800b43c:	f000 fb26 	bl	800ba8c <memcpy>
					//memcpy(lidarScanData->SI, &(lidarScanRawData[j + 10]), lidarScanData->LSN);
					for(int k = 0; k < lidarScanData->LSN; k++) {
 800b440:	2300      	movs	r3, #0
 800b442:	228e      	movs	r2, #142	; 0x8e
 800b444:	0052      	lsls	r2, r2, #1
 800b446:	18ba      	adds	r2, r7, r2
 800b448:	6013      	str	r3, [r2, #0]
 800b44a:	e016      	b.n	800b47a <getLidarScanData+0x22a>
						lidarScanData->SI[k] = lidarScanRawData[k + 10];
 800b44c:	208e      	movs	r0, #142	; 0x8e
 800b44e:	0040      	lsls	r0, r0, #1
 800b450:	183b      	adds	r3, r7, r0
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	330a      	adds	r3, #10
 800b456:	4a2d      	ldr	r2, [pc, #180]	; (800b50c <getLidarScanData+0x2bc>)
 800b458:	2194      	movs	r1, #148	; 0x94
 800b45a:	0049      	lsls	r1, r1, #1
 800b45c:	1852      	adds	r2, r2, r1
 800b45e:	19d2      	adds	r2, r2, r7
 800b460:	5cd1      	ldrb	r1, [r2, r3]
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	183b      	adds	r3, r7, r0
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	18d3      	adds	r3, r2, r3
 800b46a:	330a      	adds	r3, #10
 800b46c:	1c0a      	adds	r2, r1, #0
 800b46e:	701a      	strb	r2, [r3, #0]
					for(int k = 0; k < lidarScanData->LSN; k++) {
 800b470:	183b      	adds	r3, r7, r0
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	3301      	adds	r3, #1
 800b476:	183a      	adds	r2, r7, r0
 800b478:	6013      	str	r3, [r2, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	78db      	ldrb	r3, [r3, #3]
 800b47e:	001a      	movs	r2, r3
 800b480:	238e      	movs	r3, #142	; 0x8e
 800b482:	005b      	lsls	r3, r3, #1
 800b484:	18fb      	adds	r3, r7, r3
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4293      	cmp	r3, r2
 800b48a:	dbdf      	blt.n	800b44c <getLidarScanData+0x1fc>
					}
					break;
 800b48c:	46c0      	nop			; (mov r8, r8)
					break;
 800b48e:	e00d      	b.n	800b4ac <getLidarScanData+0x25c>
			for(j = 0; j < 256; j++) {
 800b490:	2292      	movs	r2, #146	; 0x92
 800b492:	0052      	lsls	r2, r2, #1
 800b494:	18bb      	adds	r3, r7, r2
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	3301      	adds	r3, #1
 800b49a:	18ba      	adds	r2, r7, r2
 800b49c:	6013      	str	r3, [r2, #0]
 800b49e:	2392      	movs	r3, #146	; 0x92
 800b4a0:	005b      	lsls	r3, r3, #1
 800b4a2:	18fb      	adds	r3, r7, r3
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2bff      	cmp	r3, #255	; 0xff
 800b4a8:	dc00      	bgt.n	800b4ac <getLidarScanData+0x25c>
 800b4aa:	e702      	b.n	800b2b2 <getLidarScanData+0x62>
				}
			}
			if(j > 255) {
 800b4ac:	2392      	movs	r3, #146	; 0x92
 800b4ae:	005b      	lsls	r3, r3, #1
 800b4b0:	18fb      	adds	r3, r7, r3
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	2bff      	cmp	r3, #255	; 0xff
 800b4b6:	dd1a      	ble.n	800b4ee <getLidarScanData+0x29e>
				LOG_LIDAR_WARN("no header detected");
 800b4b8:	4a17      	ldr	r2, [pc, #92]	; (800b518 <getLidarScanData+0x2c8>)
 800b4ba:	4b18      	ldr	r3, [pc, #96]	; (800b51c <getLidarScanData+0x2cc>)
 800b4bc:	0011      	movs	r1, r2
 800b4be:	0018      	movs	r0, r3
 800b4c0:	f000 f9f4 	bl	800b8ac <iprintf>
				return wrongparameter;
 800b4c4:	2305      	movs	r3, #5
 800b4c6:	e013      	b.n	800b4f0 <getLidarScanData+0x2a0>
			}
		}
		else {
			LOG_LIDAR_WARN("semaphore timeout");
 800b4c8:	4a13      	ldr	r2, [pc, #76]	; (800b518 <getLidarScanData+0x2c8>)
 800b4ca:	4b15      	ldr	r3, [pc, #84]	; (800b520 <getLidarScanData+0x2d0>)
 800b4cc:	0011      	movs	r1, r2
 800b4ce:	0018      	movs	r0, r3
 800b4d0:	f000 f9ec 	bl	800b8ac <iprintf>
			return transmission_no_response;
 800b4d4:	230a      	movs	r3, #10
 800b4d6:	e00b      	b.n	800b4f0 <getLidarScanData+0x2a0>
		}
	}
	else {
		LOG_LIDAR_ERROR("uart Rx error: %d", status);
 800b4d8:	231c      	movs	r3, #28
 800b4da:	33ff      	adds	r3, #255	; 0xff
 800b4dc:	18fb      	adds	r3, r7, r3
 800b4de:	781a      	ldrb	r2, [r3, #0]
 800b4e0:	490d      	ldr	r1, [pc, #52]	; (800b518 <getLidarScanData+0x2c8>)
 800b4e2:	4b10      	ldr	r3, [pc, #64]	; (800b524 <getLidarScanData+0x2d4>)
 800b4e4:	0018      	movs	r0, r3
 800b4e6:	f000 f9e1 	bl	800b8ac <iprintf>
		return transmission_no_response;
 800b4ea:	230a      	movs	r3, #10
 800b4ec:	e000      	b.n	800b4f0 <getLidarScanData+0x2a0>
	}
	return success;
 800b4ee:	2300      	movs	r3, #0
}
 800b4f0:	0018      	movs	r0, r3
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	b04b      	add	sp, #300	; 0x12c
 800b4f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4f8:	20001204 	.word	0x20001204
 800b4fc:	2000152c 	.word	0x2000152c
 800b500:	fffffee8 	.word	0xfffffee8
 800b504:	0800ca44 	.word	0x0800ca44
 800b508:	0800cb04 	.word	0x0800cb04
 800b50c:	fffffeec 	.word	0xfffffeec
 800b510:	fffffee4 	.word	0xfffffee4
 800b514:	0800cbbc 	.word	0x0800cbbc
 800b518:	0800cf84 	.word	0x0800cf84
 800b51c:	0800cb20 	.word	0x0800cb20
 800b520:	0800cb54 	.word	0x0800cb54
 800b524:	0800cb88 	.word	0x0800cb88

0800b528 <lidarTask>:
 *
 * @note The task runs indefinitely in a loop, continuously monitoring and managing the Lidar device state.
 *
 * @return None.
 */
TaskFunction_t lidarTask(void) {
 800b528:	b5b0      	push	{r4, r5, r7, lr}
 800b52a:	b0a6      	sub	sp, #152	; 0x98
 800b52c:	af02      	add	r7, sp, #8
	lidar_devEUI_t devEUI;
	lidar_scan_t lidarScanData;
	lidar_healthStatus_t healthStatus;


	lidarHandle.state = LIDAR_INIT;
 800b52e:	4b66      	ldr	r3, [pc, #408]	; (800b6c8 <lidarTask+0x1a0>)
 800b530:	2200      	movs	r2, #0
 800b532:	701a      	strb	r2, [r3, #0]
	lidarHandle.lastState = lidarHandle.state;
 800b534:	4b64      	ldr	r3, [pc, #400]	; (800b6c8 <lidarTask+0x1a0>)
 800b536:	781a      	ldrb	r2, [r3, #0]
 800b538:	4b63      	ldr	r3, [pc, #396]	; (800b6c8 <lidarTask+0x1a0>)
 800b53a:	705a      	strb	r2, [r3, #1]
	lidarHandle.timer = xTimerCreate("Lidar Timer", 100, pdTRUE, NULL, NULL);
 800b53c:	4863      	ldr	r0, [pc, #396]	; (800b6cc <lidarTask+0x1a4>)
 800b53e:	2300      	movs	r3, #0
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	2300      	movs	r3, #0
 800b544:	2201      	movs	r2, #1
 800b546:	2164      	movs	r1, #100	; 0x64
 800b548:	f7fe fc92 	bl	8009e70 <xTimerCreate>
 800b54c:	0002      	movs	r2, r0
 800b54e:	4b5e      	ldr	r3, [pc, #376]	; (800b6c8 <lidarTask+0x1a0>)
 800b550:	605a      	str	r2, [r3, #4]

	while(1) {
		switch (lidarHandle.state) {
 800b552:	4b5d      	ldr	r3, [pc, #372]	; (800b6c8 <lidarTask+0x1a0>)
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	2b04      	cmp	r3, #4
 800b558:	d900      	bls.n	800b55c <lidarTask+0x34>
 800b55a:	e09a      	b.n	800b692 <lidarTask+0x16a>
 800b55c:	009a      	lsls	r2, r3, #2
 800b55e:	4b5c      	ldr	r3, [pc, #368]	; (800b6d0 <lidarTask+0x1a8>)
 800b560:	18d3      	adds	r3, r2, r3
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	469f      	mov	pc, r3
			
			case LIDAR_INIT: {
				if(xTimerIsTimerActive(lidarHandle.timer) == pdFALSE) {
 800b566:	4b58      	ldr	r3, [pc, #352]	; (800b6c8 <lidarTask+0x1a0>)
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	0018      	movs	r0, r3
 800b56c:	f7fe ff8c 	bl	800a488 <xTimerIsTimerActive>
 800b570:	1e03      	subs	r3, r0, #0
 800b572:	d10f      	bne.n	800b594 <lidarTask+0x6c>
					xTimerStart(lidarHandle.timer, 0);
 800b574:	4b54      	ldr	r3, [pc, #336]	; (800b6c8 <lidarTask+0x1a0>)
 800b576:	685c      	ldr	r4, [r3, #4]
 800b578:	f7fd ffae 	bl	80094d8 <xTaskGetTickCount>
 800b57c:	0002      	movs	r2, r0
 800b57e:	2300      	movs	r3, #0
 800b580:	9300      	str	r3, [sp, #0]
 800b582:	2300      	movs	r3, #0
 800b584:	2101      	movs	r1, #1
 800b586:	0020      	movs	r0, r4
 800b588:	f7fe fcc8 	bl	8009f1c <xTimerGenericCommand>
					LidarInit();
 800b58c:	f7ff fad6 	bl	800ab3c <LidarInit>
					lidarRestart();
 800b590:	f7ff fcc8 	bl	800af24 <lidarRestart>
				}
				if(LidarGetInformation(&devEUI) == success) {
 800b594:	2378      	movs	r3, #120	; 0x78
 800b596:	18fb      	adds	r3, r7, r3
 800b598:	0018      	movs	r0, r3
 800b59a:	f7ff fb1f 	bl	800abdc <LidarGetInformation>
 800b59e:	1e03      	subs	r3, r0, #0
 800b5a0:	d109      	bne.n	800b5b6 <lidarTask+0x8e>
					LOG_LIDAR_INFO(COLOR_GREEN"init lidar successful");
 800b5a2:	4a4c      	ldr	r2, [pc, #304]	; (800b6d4 <lidarTask+0x1ac>)
 800b5a4:	4b4c      	ldr	r3, [pc, #304]	; (800b6d8 <lidarTask+0x1b0>)
 800b5a6:	0011      	movs	r1, r2
 800b5a8:	0018      	movs	r0, r3
 800b5aa:	f000 f97f 	bl	800b8ac <iprintf>
					//LOG_LIDAR_INFO("model: %02X, firmware: %04X, hardware: %02X, serial: %d", devEUI.ModelNumber, devEUI.FirmWareVersion, devEUI.HardWareVersion, devEUI.SerialNumber);
					lidarHandle.state = LIDAR_SCANNING;
 800b5ae:	4b46      	ldr	r3, [pc, #280]	; (800b6c8 <lidarTask+0x1a0>)
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	701a      	strb	r2, [r3, #0]
				}
				else {
					LOG_LIDAR_ERROR("lidar bad information");
				}
				break;
 800b5b4:	e072      	b.n	800b69c <lidarTask+0x174>
					LOG_LIDAR_ERROR("lidar bad information");
 800b5b6:	4a47      	ldr	r2, [pc, #284]	; (800b6d4 <lidarTask+0x1ac>)
 800b5b8:	4b48      	ldr	r3, [pc, #288]	; (800b6dc <lidarTask+0x1b4>)
 800b5ba:	0011      	movs	r1, r2
 800b5bc:	0018      	movs	r0, r3
 800b5be:	f000 f975 	bl	800b8ac <iprintf>
				break;
 800b5c2:	e06b      	b.n	800b69c <lidarTask+0x174>
			}

			case LIDAR_SCANNING: {
				if(xTimerIsTimerActive(lidarHandle.timer) == pdFALSE) {
 800b5c4:	4b40      	ldr	r3, [pc, #256]	; (800b6c8 <lidarTask+0x1a0>)
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	0018      	movs	r0, r3
 800b5ca:	f7fe ff5d 	bl	800a488 <xTimerIsTimerActive>
 800b5ce:	1e03      	subs	r3, r0, #0
 800b5d0:	d11c      	bne.n	800b60c <lidarTask+0xe4>
					xTimerStart(lidarHandle.timer, 0);
 800b5d2:	4b3d      	ldr	r3, [pc, #244]	; (800b6c8 <lidarTask+0x1a0>)
 800b5d4:	685c      	ldr	r4, [r3, #4]
 800b5d6:	f7fd ff7f 	bl	80094d8 <xTaskGetTickCount>
 800b5da:	0002      	movs	r2, r0
 800b5dc:	2300      	movs	r3, #0
 800b5de:	9300      	str	r3, [sp, #0]
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	2101      	movs	r1, #1
 800b5e4:	0020      	movs	r0, r4
 800b5e6:	f7fe fc99 	bl	8009f1c <xTimerGenericCommand>
					while(LidarScanStart() != success) {
 800b5ea:	e005      	b.n	800b5f8 <lidarTask+0xd0>
						LOG_LIDAR_ERROR("cannot start scan");
 800b5ec:	4a39      	ldr	r2, [pc, #228]	; (800b6d4 <lidarTask+0x1ac>)
 800b5ee:	4b3c      	ldr	r3, [pc, #240]	; (800b6e0 <lidarTask+0x1b8>)
 800b5f0:	0011      	movs	r1, r2
 800b5f2:	0018      	movs	r0, r3
 800b5f4:	f000 f95a 	bl	800b8ac <iprintf>
					while(LidarScanStart() != success) {
 800b5f8:	f7ff fb82 	bl	800ad00 <LidarScanStart>
 800b5fc:	1e03      	subs	r3, r0, #0
 800b5fe:	d1f5      	bne.n	800b5ec <lidarTask+0xc4>
					}
					LOG_LIDAR_INFO("scan started");
 800b600:	4a34      	ldr	r2, [pc, #208]	; (800b6d4 <lidarTask+0x1ac>)
 800b602:	4b38      	ldr	r3, [pc, #224]	; (800b6e4 <lidarTask+0x1bc>)
 800b604:	0011      	movs	r1, r2
 800b606:	0018      	movs	r0, r3
 800b608:	f000 f950 	bl	800b8ac <iprintf>
				}
				status = getLidarScanData(&lidarScanData);
 800b60c:	258f      	movs	r5, #143	; 0x8f
 800b60e:	197c      	adds	r4, r7, r5
 800b610:	2308      	movs	r3, #8
 800b612:	18fb      	adds	r3, r7, r3
 800b614:	0018      	movs	r0, r3
 800b616:	f7ff fe1b 	bl	800b250 <getLidarScanData>
 800b61a:	0003      	movs	r3, r0
 800b61c:	7023      	strb	r3, [r4, #0]
				if(status != success) {
 800b61e:	197b      	adds	r3, r7, r5
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d003      	beq.n	800b62e <lidarTask+0x106>
					lidarHandle.state = LIDAR_ERROR;
 800b626:	4b28      	ldr	r3, [pc, #160]	; (800b6c8 <lidarTask+0x1a0>)
 800b628:	2204      	movs	r2, #4
 800b62a:	701a      	strb	r2, [r3, #0]
					break;
 800b62c:	e036      	b.n	800b69c <lidarTask+0x174>
				}
				//if(checkCS(&lidarScanData)){
					status = convertSample(&lidarScanData);
 800b62e:	258f      	movs	r5, #143	; 0x8f
 800b630:	197c      	adds	r4, r7, r5
 800b632:	2308      	movs	r3, #8
 800b634:	18fb      	adds	r3, r7, r3
 800b636:	0018      	movs	r0, r3
 800b638:	f7ff fca6 	bl	800af88 <convertSample>
 800b63c:	0003      	movs	r3, r0
 800b63e:	7023      	strb	r3, [r4, #0]
					if(status != success) {
 800b640:	197b      	adds	r3, r7, r5
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d028      	beq.n	800b69a <lidarTask+0x172>
						LOG_LIDAR_WARN("convert sample failed: %d", status);
 800b648:	197b      	adds	r3, r7, r5
 800b64a:	781a      	ldrb	r2, [r3, #0]
 800b64c:	4921      	ldr	r1, [pc, #132]	; (800b6d4 <lidarTask+0x1ac>)
 800b64e:	4b26      	ldr	r3, [pc, #152]	; (800b6e8 <lidarTask+0x1c0>)
 800b650:	0018      	movs	r0, r3
 800b652:	f000 f92b 	bl	800b8ac <iprintf>
				//osDelay(1000);
			}
			case LIDAR_PROCESS: {
				
				//lidarHandle.state = LIDAR_SCANNING;
				break;
 800b656:	e020      	b.n	800b69a <lidarTask+0x172>
			case LIDAR_STANDBY: {
				break;
			}
			case LIDAR_ERROR : {
				while(LidarScanStop() != success) {
					osDelay(1);
 800b658:	2001      	movs	r0, #1
 800b65a:	f7fc fee4 	bl	8008426 <osDelay>
				while(LidarScanStop() != success) {
 800b65e:	f7ff fb8f 	bl	800ad80 <LidarScanStop>
 800b662:	1e03      	subs	r3, r0, #0
 800b664:	d1f8      	bne.n	800b658 <lidarTask+0x130>
				}
				status = LidarHealthStatus(&healthStatus);
 800b666:	238f      	movs	r3, #143	; 0x8f
 800b668:	18fc      	adds	r4, r7, r3
 800b66a:	1d3b      	adds	r3, r7, #4
 800b66c:	0018      	movs	r0, r3
 800b66e:	f7ff fbb9 	bl	800ade4 <LidarHealthStatus>
 800b672:	0003      	movs	r3, r0
 800b674:	7023      	strb	r3, [r4, #0]
				if(healthStatus.StatusCode == 2) {
 800b676:	1d3b      	adds	r3, r7, #4
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	2b02      	cmp	r3, #2
 800b67c:	d105      	bne.n	800b68a <lidarTask+0x162>
					lidarRestart();
 800b67e:	f7ff fc51 	bl	800af24 <lidarRestart>
					lidarHandle.state = LIDAR_INIT;
 800b682:	4b11      	ldr	r3, [pc, #68]	; (800b6c8 <lidarTask+0x1a0>)
 800b684:	2200      	movs	r2, #0
 800b686:	701a      	strb	r2, [r3, #0]
				}
				else {
					lidarHandle.state = LIDAR_SCANNING;
				}
				break;
 800b688:	e008      	b.n	800b69c <lidarTask+0x174>
					lidarHandle.state = LIDAR_SCANNING;
 800b68a:	4b0f      	ldr	r3, [pc, #60]	; (800b6c8 <lidarTask+0x1a0>)
 800b68c:	2201      	movs	r2, #1
 800b68e:	701a      	strb	r2, [r3, #0]
				break;
 800b690:	e004      	b.n	800b69c <lidarTask+0x174>
			}
			default:
				lidarHandle.state = LIDAR_INIT;
 800b692:	4b0d      	ldr	r3, [pc, #52]	; (800b6c8 <lidarTask+0x1a0>)
 800b694:	2200      	movs	r2, #0
 800b696:	701a      	strb	r2, [r3, #0]
				break;
 800b698:	e000      	b.n	800b69c <lidarTask+0x174>
				break;
 800b69a:	46c0      	nop			; (mov r8, r8)
		}
		if(lidarHandle.lastState != lidarHandle.state) {
 800b69c:	4b0a      	ldr	r3, [pc, #40]	; (800b6c8 <lidarTask+0x1a0>)
 800b69e:	785a      	ldrb	r2, [r3, #1]
 800b6a0:	4b09      	ldr	r3, [pc, #36]	; (800b6c8 <lidarTask+0x1a0>)
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d100      	bne.n	800b6aa <lidarTask+0x182>
 800b6a8:	e753      	b.n	800b552 <lidarTask+0x2a>
			xTimerStop(lidarHandle.timer, 0);
 800b6aa:	4b07      	ldr	r3, [pc, #28]	; (800b6c8 <lidarTask+0x1a0>)
 800b6ac:	6858      	ldr	r0, [r3, #4]
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	9300      	str	r3, [sp, #0]
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	2103      	movs	r1, #3
 800b6b8:	f7fe fc30 	bl	8009f1c <xTimerGenericCommand>
			lidarHandle.lastState = lidarHandle.state;
 800b6bc:	4b02      	ldr	r3, [pc, #8]	; (800b6c8 <lidarTask+0x1a0>)
 800b6be:	781a      	ldrb	r2, [r3, #0]
 800b6c0:	4b01      	ldr	r3, [pc, #4]	; (800b6c8 <lidarTask+0x1a0>)
 800b6c2:	705a      	strb	r2, [r3, #1]
		switch (lidarHandle.state) {
 800b6c4:	e745      	b.n	800b552 <lidarTask+0x2a>
 800b6c6:	46c0      	nop			; (mov r8, r8)
 800b6c8:	20001534 	.word	0x20001534
 800b6cc:	0800cbc0 	.word	0x0800cbc0
 800b6d0:	0800cf98 	.word	0x0800cf98
 800b6d4:	0800cfac 	.word	0x0800cfac
 800b6d8:	0800cbcc 	.word	0x0800cbcc
 800b6dc:	0800cc0c 	.word	0x0800cc0c
 800b6e0:	0800cc44 	.word	0x0800cc44
 800b6e4:	0800cc78 	.word	0x0800cc78
 800b6e8:	0800cca8 	.word	0x0800cca8

0800b6ec <createLidarTask>:
 *
 * @see lidarTask
 *
 * @return None.
 */
void createLidarTask(void) {
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af02      	add	r7, sp, #8
	if (xTaskCreate(lidarTask, "Lidar", TASK_LIDAR_STACK_DEPTH, NULL, TASK_LIDAR_PRIORITY, &h_task_lidar) != pdPASS) {
 800b6f2:	2380      	movs	r3, #128	; 0x80
 800b6f4:	009a      	lsls	r2, r3, #2
 800b6f6:	490e      	ldr	r1, [pc, #56]	; (800b730 <createLidarTask+0x44>)
 800b6f8:	480e      	ldr	r0, [pc, #56]	; (800b734 <createLidarTask+0x48>)
 800b6fa:	4b0f      	ldr	r3, [pc, #60]	; (800b738 <createLidarTask+0x4c>)
 800b6fc:	9301      	str	r3, [sp, #4]
 800b6fe:	2301      	movs	r3, #1
 800b700:	9300      	str	r3, [sp, #0]
 800b702:	2300      	movs	r3, #0
 800b704:	f7fd fcaf 	bl	8009066 <xTaskCreate>
 800b708:	0003      	movs	r3, r0
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d006      	beq.n	800b71c <createLidarTask+0x30>
		LOG_LIDAR_ERROR("Error creating task lidar\r\n");
 800b70e:	4a0b      	ldr	r2, [pc, #44]	; (800b73c <createLidarTask+0x50>)
 800b710:	4b0b      	ldr	r3, [pc, #44]	; (800b740 <createLidarTask+0x54>)
 800b712:	0011      	movs	r1, r2
 800b714:	0018      	movs	r0, r3
 800b716:	f000 f8c9 	bl	800b8ac <iprintf>
	}
	else {
		LOG_LIDAR_DEBUG(COLOR_GREEN"Lidar task create");
	}
}
 800b71a:	e005      	b.n	800b728 <createLidarTask+0x3c>
		LOG_LIDAR_DEBUG(COLOR_GREEN"Lidar task create");
 800b71c:	4a07      	ldr	r2, [pc, #28]	; (800b73c <createLidarTask+0x50>)
 800b71e:	4b09      	ldr	r3, [pc, #36]	; (800b744 <createLidarTask+0x58>)
 800b720:	0011      	movs	r1, r2
 800b722:	0018      	movs	r0, r3
 800b724:	f000 f8c2 	bl	800b8ac <iprintf>
}
 800b728:	46c0      	nop			; (mov r8, r8)
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	46c0      	nop			; (mov r8, r8)
 800b730:	0800cce4 	.word	0x0800cce4
 800b734:	0800b529 	.word	0x0800b529
 800b738:	20001530 	.word	0x20001530
 800b73c:	0800cfb8 	.word	0x0800cfb8
 800b740:	0800ccec 	.word	0x0800ccec
 800b744:	0800cd2c 	.word	0x0800cd2c

0800b748 <std>:
 800b748:	2300      	movs	r3, #0
 800b74a:	b510      	push	{r4, lr}
 800b74c:	0004      	movs	r4, r0
 800b74e:	6003      	str	r3, [r0, #0]
 800b750:	6043      	str	r3, [r0, #4]
 800b752:	6083      	str	r3, [r0, #8]
 800b754:	8181      	strh	r1, [r0, #12]
 800b756:	6643      	str	r3, [r0, #100]	; 0x64
 800b758:	0019      	movs	r1, r3
 800b75a:	81c2      	strh	r2, [r0, #14]
 800b75c:	6103      	str	r3, [r0, #16]
 800b75e:	6143      	str	r3, [r0, #20]
 800b760:	6183      	str	r3, [r0, #24]
 800b762:	2208      	movs	r2, #8
 800b764:	305c      	adds	r0, #92	; 0x5c
 800b766:	f000 f8fd 	bl	800b964 <memset>
 800b76a:	4b05      	ldr	r3, [pc, #20]	; (800b780 <std+0x38>)
 800b76c:	6224      	str	r4, [r4, #32]
 800b76e:	6263      	str	r3, [r4, #36]	; 0x24
 800b770:	4b04      	ldr	r3, [pc, #16]	; (800b784 <std+0x3c>)
 800b772:	62a3      	str	r3, [r4, #40]	; 0x28
 800b774:	4b04      	ldr	r3, [pc, #16]	; (800b788 <std+0x40>)
 800b776:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b778:	4b04      	ldr	r3, [pc, #16]	; (800b78c <std+0x44>)
 800b77a:	6323      	str	r3, [r4, #48]	; 0x30
 800b77c:	bd10      	pop	{r4, pc}
 800b77e:	46c0      	nop			; (mov r8, r8)
 800b780:	0800b8cd 	.word	0x0800b8cd
 800b784:	0800b8f5 	.word	0x0800b8f5
 800b788:	0800b92d 	.word	0x0800b92d
 800b78c:	0800b959 	.word	0x0800b959

0800b790 <stdio_exit_handler>:
 800b790:	b510      	push	{r4, lr}
 800b792:	4a03      	ldr	r2, [pc, #12]	; (800b7a0 <stdio_exit_handler+0x10>)
 800b794:	4903      	ldr	r1, [pc, #12]	; (800b7a4 <stdio_exit_handler+0x14>)
 800b796:	4804      	ldr	r0, [pc, #16]	; (800b7a8 <stdio_exit_handler+0x18>)
 800b798:	f000 f86c 	bl	800b874 <_fwalk_sglue>
 800b79c:	bd10      	pop	{r4, pc}
 800b79e:	46c0      	nop			; (mov r8, r8)
 800b7a0:	20000010 	.word	0x20000010
 800b7a4:	0800c339 	.word	0x0800c339
 800b7a8:	2000001c 	.word	0x2000001c

0800b7ac <cleanup_stdio>:
 800b7ac:	6841      	ldr	r1, [r0, #4]
 800b7ae:	4b0b      	ldr	r3, [pc, #44]	; (800b7dc <cleanup_stdio+0x30>)
 800b7b0:	b510      	push	{r4, lr}
 800b7b2:	0004      	movs	r4, r0
 800b7b4:	4299      	cmp	r1, r3
 800b7b6:	d001      	beq.n	800b7bc <cleanup_stdio+0x10>
 800b7b8:	f000 fdbe 	bl	800c338 <_fflush_r>
 800b7bc:	68a1      	ldr	r1, [r4, #8]
 800b7be:	4b08      	ldr	r3, [pc, #32]	; (800b7e0 <cleanup_stdio+0x34>)
 800b7c0:	4299      	cmp	r1, r3
 800b7c2:	d002      	beq.n	800b7ca <cleanup_stdio+0x1e>
 800b7c4:	0020      	movs	r0, r4
 800b7c6:	f000 fdb7 	bl	800c338 <_fflush_r>
 800b7ca:	68e1      	ldr	r1, [r4, #12]
 800b7cc:	4b05      	ldr	r3, [pc, #20]	; (800b7e4 <cleanup_stdio+0x38>)
 800b7ce:	4299      	cmp	r1, r3
 800b7d0:	d002      	beq.n	800b7d8 <cleanup_stdio+0x2c>
 800b7d2:	0020      	movs	r0, r4
 800b7d4:	f000 fdb0 	bl	800c338 <_fflush_r>
 800b7d8:	bd10      	pop	{r4, pc}
 800b7da:	46c0      	nop			; (mov r8, r8)
 800b7dc:	2000153c 	.word	0x2000153c
 800b7e0:	200015a4 	.word	0x200015a4
 800b7e4:	2000160c 	.word	0x2000160c

0800b7e8 <global_stdio_init.part.0>:
 800b7e8:	b510      	push	{r4, lr}
 800b7ea:	4b09      	ldr	r3, [pc, #36]	; (800b810 <global_stdio_init.part.0+0x28>)
 800b7ec:	4a09      	ldr	r2, [pc, #36]	; (800b814 <global_stdio_init.part.0+0x2c>)
 800b7ee:	2104      	movs	r1, #4
 800b7f0:	601a      	str	r2, [r3, #0]
 800b7f2:	4809      	ldr	r0, [pc, #36]	; (800b818 <global_stdio_init.part.0+0x30>)
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f7ff ffa7 	bl	800b748 <std>
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	2109      	movs	r1, #9
 800b7fe:	4807      	ldr	r0, [pc, #28]	; (800b81c <global_stdio_init.part.0+0x34>)
 800b800:	f7ff ffa2 	bl	800b748 <std>
 800b804:	2202      	movs	r2, #2
 800b806:	2112      	movs	r1, #18
 800b808:	4805      	ldr	r0, [pc, #20]	; (800b820 <global_stdio_init.part.0+0x38>)
 800b80a:	f7ff ff9d 	bl	800b748 <std>
 800b80e:	bd10      	pop	{r4, pc}
 800b810:	20001674 	.word	0x20001674
 800b814:	0800b791 	.word	0x0800b791
 800b818:	2000153c 	.word	0x2000153c
 800b81c:	200015a4 	.word	0x200015a4
 800b820:	2000160c 	.word	0x2000160c

0800b824 <__sfp_lock_acquire>:
 800b824:	b510      	push	{r4, lr}
 800b826:	4802      	ldr	r0, [pc, #8]	; (800b830 <__sfp_lock_acquire+0xc>)
 800b828:	f000 f92e 	bl	800ba88 <__retarget_lock_acquire_recursive>
 800b82c:	bd10      	pop	{r4, pc}
 800b82e:	46c0      	nop			; (mov r8, r8)
 800b830:	2000167d 	.word	0x2000167d

0800b834 <__sfp_lock_release>:
 800b834:	b510      	push	{r4, lr}
 800b836:	4802      	ldr	r0, [pc, #8]	; (800b840 <__sfp_lock_release+0xc>)
 800b838:	f000 f927 	bl	800ba8a <__retarget_lock_release_recursive>
 800b83c:	bd10      	pop	{r4, pc}
 800b83e:	46c0      	nop			; (mov r8, r8)
 800b840:	2000167d 	.word	0x2000167d

0800b844 <__sinit>:
 800b844:	b510      	push	{r4, lr}
 800b846:	0004      	movs	r4, r0
 800b848:	f7ff ffec 	bl	800b824 <__sfp_lock_acquire>
 800b84c:	6a23      	ldr	r3, [r4, #32]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d002      	beq.n	800b858 <__sinit+0x14>
 800b852:	f7ff ffef 	bl	800b834 <__sfp_lock_release>
 800b856:	bd10      	pop	{r4, pc}
 800b858:	4b04      	ldr	r3, [pc, #16]	; (800b86c <__sinit+0x28>)
 800b85a:	6223      	str	r3, [r4, #32]
 800b85c:	4b04      	ldr	r3, [pc, #16]	; (800b870 <__sinit+0x2c>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d1f6      	bne.n	800b852 <__sinit+0xe>
 800b864:	f7ff ffc0 	bl	800b7e8 <global_stdio_init.part.0>
 800b868:	e7f3      	b.n	800b852 <__sinit+0xe>
 800b86a:	46c0      	nop			; (mov r8, r8)
 800b86c:	0800b7ad 	.word	0x0800b7ad
 800b870:	20001674 	.word	0x20001674

0800b874 <_fwalk_sglue>:
 800b874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b876:	0014      	movs	r4, r2
 800b878:	2600      	movs	r6, #0
 800b87a:	9000      	str	r0, [sp, #0]
 800b87c:	9101      	str	r1, [sp, #4]
 800b87e:	68a5      	ldr	r5, [r4, #8]
 800b880:	6867      	ldr	r7, [r4, #4]
 800b882:	3f01      	subs	r7, #1
 800b884:	d504      	bpl.n	800b890 <_fwalk_sglue+0x1c>
 800b886:	6824      	ldr	r4, [r4, #0]
 800b888:	2c00      	cmp	r4, #0
 800b88a:	d1f8      	bne.n	800b87e <_fwalk_sglue+0xa>
 800b88c:	0030      	movs	r0, r6
 800b88e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b890:	89ab      	ldrh	r3, [r5, #12]
 800b892:	2b01      	cmp	r3, #1
 800b894:	d908      	bls.n	800b8a8 <_fwalk_sglue+0x34>
 800b896:	220e      	movs	r2, #14
 800b898:	5eab      	ldrsh	r3, [r5, r2]
 800b89a:	3301      	adds	r3, #1
 800b89c:	d004      	beq.n	800b8a8 <_fwalk_sglue+0x34>
 800b89e:	0029      	movs	r1, r5
 800b8a0:	9800      	ldr	r0, [sp, #0]
 800b8a2:	9b01      	ldr	r3, [sp, #4]
 800b8a4:	4798      	blx	r3
 800b8a6:	4306      	orrs	r6, r0
 800b8a8:	3568      	adds	r5, #104	; 0x68
 800b8aa:	e7ea      	b.n	800b882 <_fwalk_sglue+0xe>

0800b8ac <iprintf>:
 800b8ac:	b40f      	push	{r0, r1, r2, r3}
 800b8ae:	b507      	push	{r0, r1, r2, lr}
 800b8b0:	4905      	ldr	r1, [pc, #20]	; (800b8c8 <iprintf+0x1c>)
 800b8b2:	ab04      	add	r3, sp, #16
 800b8b4:	6808      	ldr	r0, [r1, #0]
 800b8b6:	cb04      	ldmia	r3!, {r2}
 800b8b8:	6881      	ldr	r1, [r0, #8]
 800b8ba:	9301      	str	r3, [sp, #4]
 800b8bc:	f000 fa16 	bl	800bcec <_vfiprintf_r>
 800b8c0:	b003      	add	sp, #12
 800b8c2:	bc08      	pop	{r3}
 800b8c4:	b004      	add	sp, #16
 800b8c6:	4718      	bx	r3
 800b8c8:	20000068 	.word	0x20000068

0800b8cc <__sread>:
 800b8cc:	b570      	push	{r4, r5, r6, lr}
 800b8ce:	000c      	movs	r4, r1
 800b8d0:	250e      	movs	r5, #14
 800b8d2:	5f49      	ldrsh	r1, [r1, r5]
 800b8d4:	f000 f886 	bl	800b9e4 <_read_r>
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	db03      	blt.n	800b8e4 <__sread+0x18>
 800b8dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b8de:	181b      	adds	r3, r3, r0
 800b8e0:	6563      	str	r3, [r4, #84]	; 0x54
 800b8e2:	bd70      	pop	{r4, r5, r6, pc}
 800b8e4:	89a3      	ldrh	r3, [r4, #12]
 800b8e6:	4a02      	ldr	r2, [pc, #8]	; (800b8f0 <__sread+0x24>)
 800b8e8:	4013      	ands	r3, r2
 800b8ea:	81a3      	strh	r3, [r4, #12]
 800b8ec:	e7f9      	b.n	800b8e2 <__sread+0x16>
 800b8ee:	46c0      	nop			; (mov r8, r8)
 800b8f0:	ffffefff 	.word	0xffffefff

0800b8f4 <__swrite>:
 800b8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8f6:	001f      	movs	r7, r3
 800b8f8:	898b      	ldrh	r3, [r1, #12]
 800b8fa:	0005      	movs	r5, r0
 800b8fc:	000c      	movs	r4, r1
 800b8fe:	0016      	movs	r6, r2
 800b900:	05db      	lsls	r3, r3, #23
 800b902:	d505      	bpl.n	800b910 <__swrite+0x1c>
 800b904:	230e      	movs	r3, #14
 800b906:	5ec9      	ldrsh	r1, [r1, r3]
 800b908:	2200      	movs	r2, #0
 800b90a:	2302      	movs	r3, #2
 800b90c:	f000 f856 	bl	800b9bc <_lseek_r>
 800b910:	89a3      	ldrh	r3, [r4, #12]
 800b912:	4a05      	ldr	r2, [pc, #20]	; (800b928 <__swrite+0x34>)
 800b914:	0028      	movs	r0, r5
 800b916:	4013      	ands	r3, r2
 800b918:	81a3      	strh	r3, [r4, #12]
 800b91a:	0032      	movs	r2, r6
 800b91c:	230e      	movs	r3, #14
 800b91e:	5ee1      	ldrsh	r1, [r4, r3]
 800b920:	003b      	movs	r3, r7
 800b922:	f000 f873 	bl	800ba0c <_write_r>
 800b926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b928:	ffffefff 	.word	0xffffefff

0800b92c <__sseek>:
 800b92c:	b570      	push	{r4, r5, r6, lr}
 800b92e:	000c      	movs	r4, r1
 800b930:	250e      	movs	r5, #14
 800b932:	5f49      	ldrsh	r1, [r1, r5]
 800b934:	f000 f842 	bl	800b9bc <_lseek_r>
 800b938:	89a3      	ldrh	r3, [r4, #12]
 800b93a:	1c42      	adds	r2, r0, #1
 800b93c:	d103      	bne.n	800b946 <__sseek+0x1a>
 800b93e:	4a05      	ldr	r2, [pc, #20]	; (800b954 <__sseek+0x28>)
 800b940:	4013      	ands	r3, r2
 800b942:	81a3      	strh	r3, [r4, #12]
 800b944:	bd70      	pop	{r4, r5, r6, pc}
 800b946:	2280      	movs	r2, #128	; 0x80
 800b948:	0152      	lsls	r2, r2, #5
 800b94a:	4313      	orrs	r3, r2
 800b94c:	81a3      	strh	r3, [r4, #12]
 800b94e:	6560      	str	r0, [r4, #84]	; 0x54
 800b950:	e7f8      	b.n	800b944 <__sseek+0x18>
 800b952:	46c0      	nop			; (mov r8, r8)
 800b954:	ffffefff 	.word	0xffffefff

0800b958 <__sclose>:
 800b958:	b510      	push	{r4, lr}
 800b95a:	230e      	movs	r3, #14
 800b95c:	5ec9      	ldrsh	r1, [r1, r3]
 800b95e:	f000 f81b 	bl	800b998 <_close_r>
 800b962:	bd10      	pop	{r4, pc}

0800b964 <memset>:
 800b964:	0003      	movs	r3, r0
 800b966:	1882      	adds	r2, r0, r2
 800b968:	4293      	cmp	r3, r2
 800b96a:	d100      	bne.n	800b96e <memset+0xa>
 800b96c:	4770      	bx	lr
 800b96e:	7019      	strb	r1, [r3, #0]
 800b970:	3301      	adds	r3, #1
 800b972:	e7f9      	b.n	800b968 <memset+0x4>

0800b974 <strncmp>:
 800b974:	b530      	push	{r4, r5, lr}
 800b976:	0005      	movs	r5, r0
 800b978:	1e10      	subs	r0, r2, #0
 800b97a:	d00b      	beq.n	800b994 <strncmp+0x20>
 800b97c:	2400      	movs	r4, #0
 800b97e:	3a01      	subs	r2, #1
 800b980:	5d2b      	ldrb	r3, [r5, r4]
 800b982:	5d08      	ldrb	r0, [r1, r4]
 800b984:	4283      	cmp	r3, r0
 800b986:	d104      	bne.n	800b992 <strncmp+0x1e>
 800b988:	42a2      	cmp	r2, r4
 800b98a:	d002      	beq.n	800b992 <strncmp+0x1e>
 800b98c:	3401      	adds	r4, #1
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1f6      	bne.n	800b980 <strncmp+0xc>
 800b992:	1a18      	subs	r0, r3, r0
 800b994:	bd30      	pop	{r4, r5, pc}
	...

0800b998 <_close_r>:
 800b998:	2300      	movs	r3, #0
 800b99a:	b570      	push	{r4, r5, r6, lr}
 800b99c:	4d06      	ldr	r5, [pc, #24]	; (800b9b8 <_close_r+0x20>)
 800b99e:	0004      	movs	r4, r0
 800b9a0:	0008      	movs	r0, r1
 800b9a2:	602b      	str	r3, [r5, #0]
 800b9a4:	f7f7 fddf 	bl	8003566 <_close>
 800b9a8:	1c43      	adds	r3, r0, #1
 800b9aa:	d103      	bne.n	800b9b4 <_close_r+0x1c>
 800b9ac:	682b      	ldr	r3, [r5, #0]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d000      	beq.n	800b9b4 <_close_r+0x1c>
 800b9b2:	6023      	str	r3, [r4, #0]
 800b9b4:	bd70      	pop	{r4, r5, r6, pc}
 800b9b6:	46c0      	nop			; (mov r8, r8)
 800b9b8:	20001678 	.word	0x20001678

0800b9bc <_lseek_r>:
 800b9bc:	b570      	push	{r4, r5, r6, lr}
 800b9be:	0004      	movs	r4, r0
 800b9c0:	0008      	movs	r0, r1
 800b9c2:	0011      	movs	r1, r2
 800b9c4:	001a      	movs	r2, r3
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	4d05      	ldr	r5, [pc, #20]	; (800b9e0 <_lseek_r+0x24>)
 800b9ca:	602b      	str	r3, [r5, #0]
 800b9cc:	f7f7 fdec 	bl	80035a8 <_lseek>
 800b9d0:	1c43      	adds	r3, r0, #1
 800b9d2:	d103      	bne.n	800b9dc <_lseek_r+0x20>
 800b9d4:	682b      	ldr	r3, [r5, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d000      	beq.n	800b9dc <_lseek_r+0x20>
 800b9da:	6023      	str	r3, [r4, #0]
 800b9dc:	bd70      	pop	{r4, r5, r6, pc}
 800b9de:	46c0      	nop			; (mov r8, r8)
 800b9e0:	20001678 	.word	0x20001678

0800b9e4 <_read_r>:
 800b9e4:	b570      	push	{r4, r5, r6, lr}
 800b9e6:	0004      	movs	r4, r0
 800b9e8:	0008      	movs	r0, r1
 800b9ea:	0011      	movs	r1, r2
 800b9ec:	001a      	movs	r2, r3
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	4d05      	ldr	r5, [pc, #20]	; (800ba08 <_read_r+0x24>)
 800b9f2:	602b      	str	r3, [r5, #0]
 800b9f4:	f7f7 fd7e 	bl	80034f4 <_read>
 800b9f8:	1c43      	adds	r3, r0, #1
 800b9fa:	d103      	bne.n	800ba04 <_read_r+0x20>
 800b9fc:	682b      	ldr	r3, [r5, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d000      	beq.n	800ba04 <_read_r+0x20>
 800ba02:	6023      	str	r3, [r4, #0]
 800ba04:	bd70      	pop	{r4, r5, r6, pc}
 800ba06:	46c0      	nop			; (mov r8, r8)
 800ba08:	20001678 	.word	0x20001678

0800ba0c <_write_r>:
 800ba0c:	b570      	push	{r4, r5, r6, lr}
 800ba0e:	0004      	movs	r4, r0
 800ba10:	0008      	movs	r0, r1
 800ba12:	0011      	movs	r1, r2
 800ba14:	001a      	movs	r2, r3
 800ba16:	2300      	movs	r3, #0
 800ba18:	4d05      	ldr	r5, [pc, #20]	; (800ba30 <_write_r+0x24>)
 800ba1a:	602b      	str	r3, [r5, #0]
 800ba1c:	f7f7 fd87 	bl	800352e <_write>
 800ba20:	1c43      	adds	r3, r0, #1
 800ba22:	d103      	bne.n	800ba2c <_write_r+0x20>
 800ba24:	682b      	ldr	r3, [r5, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d000      	beq.n	800ba2c <_write_r+0x20>
 800ba2a:	6023      	str	r3, [r4, #0]
 800ba2c:	bd70      	pop	{r4, r5, r6, pc}
 800ba2e:	46c0      	nop			; (mov r8, r8)
 800ba30:	20001678 	.word	0x20001678

0800ba34 <__errno>:
 800ba34:	4b01      	ldr	r3, [pc, #4]	; (800ba3c <__errno+0x8>)
 800ba36:	6818      	ldr	r0, [r3, #0]
 800ba38:	4770      	bx	lr
 800ba3a:	46c0      	nop			; (mov r8, r8)
 800ba3c:	20000068 	.word	0x20000068

0800ba40 <__libc_init_array>:
 800ba40:	b570      	push	{r4, r5, r6, lr}
 800ba42:	2600      	movs	r6, #0
 800ba44:	4c0c      	ldr	r4, [pc, #48]	; (800ba78 <__libc_init_array+0x38>)
 800ba46:	4d0d      	ldr	r5, [pc, #52]	; (800ba7c <__libc_init_array+0x3c>)
 800ba48:	1b64      	subs	r4, r4, r5
 800ba4a:	10a4      	asrs	r4, r4, #2
 800ba4c:	42a6      	cmp	r6, r4
 800ba4e:	d109      	bne.n	800ba64 <__libc_init_array+0x24>
 800ba50:	2600      	movs	r6, #0
 800ba52:	f000 ff6f 	bl	800c934 <_init>
 800ba56:	4c0a      	ldr	r4, [pc, #40]	; (800ba80 <__libc_init_array+0x40>)
 800ba58:	4d0a      	ldr	r5, [pc, #40]	; (800ba84 <__libc_init_array+0x44>)
 800ba5a:	1b64      	subs	r4, r4, r5
 800ba5c:	10a4      	asrs	r4, r4, #2
 800ba5e:	42a6      	cmp	r6, r4
 800ba60:	d105      	bne.n	800ba6e <__libc_init_array+0x2e>
 800ba62:	bd70      	pop	{r4, r5, r6, pc}
 800ba64:	00b3      	lsls	r3, r6, #2
 800ba66:	58eb      	ldr	r3, [r5, r3]
 800ba68:	4798      	blx	r3
 800ba6a:	3601      	adds	r6, #1
 800ba6c:	e7ee      	b.n	800ba4c <__libc_init_array+0xc>
 800ba6e:	00b3      	lsls	r3, r6, #2
 800ba70:	58eb      	ldr	r3, [r5, r3]
 800ba72:	4798      	blx	r3
 800ba74:	3601      	adds	r6, #1
 800ba76:	e7f2      	b.n	800ba5e <__libc_init_array+0x1e>
 800ba78:	0800d040 	.word	0x0800d040
 800ba7c:	0800d040 	.word	0x0800d040
 800ba80:	0800d044 	.word	0x0800d044
 800ba84:	0800d040 	.word	0x0800d040

0800ba88 <__retarget_lock_acquire_recursive>:
 800ba88:	4770      	bx	lr

0800ba8a <__retarget_lock_release_recursive>:
 800ba8a:	4770      	bx	lr

0800ba8c <memcpy>:
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	b510      	push	{r4, lr}
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d100      	bne.n	800ba96 <memcpy+0xa>
 800ba94:	bd10      	pop	{r4, pc}
 800ba96:	5ccc      	ldrb	r4, [r1, r3]
 800ba98:	54c4      	strb	r4, [r0, r3]
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	e7f8      	b.n	800ba90 <memcpy+0x4>
	...

0800baa0 <_free_r>:
 800baa0:	b570      	push	{r4, r5, r6, lr}
 800baa2:	0005      	movs	r5, r0
 800baa4:	2900      	cmp	r1, #0
 800baa6:	d010      	beq.n	800baca <_free_r+0x2a>
 800baa8:	1f0c      	subs	r4, r1, #4
 800baaa:	6823      	ldr	r3, [r4, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	da00      	bge.n	800bab2 <_free_r+0x12>
 800bab0:	18e4      	adds	r4, r4, r3
 800bab2:	0028      	movs	r0, r5
 800bab4:	f000 f8e2 	bl	800bc7c <__malloc_lock>
 800bab8:	4a1d      	ldr	r2, [pc, #116]	; (800bb30 <_free_r+0x90>)
 800baba:	6813      	ldr	r3, [r2, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d105      	bne.n	800bacc <_free_r+0x2c>
 800bac0:	6063      	str	r3, [r4, #4]
 800bac2:	6014      	str	r4, [r2, #0]
 800bac4:	0028      	movs	r0, r5
 800bac6:	f000 f8e1 	bl	800bc8c <__malloc_unlock>
 800baca:	bd70      	pop	{r4, r5, r6, pc}
 800bacc:	42a3      	cmp	r3, r4
 800bace:	d908      	bls.n	800bae2 <_free_r+0x42>
 800bad0:	6820      	ldr	r0, [r4, #0]
 800bad2:	1821      	adds	r1, r4, r0
 800bad4:	428b      	cmp	r3, r1
 800bad6:	d1f3      	bne.n	800bac0 <_free_r+0x20>
 800bad8:	6819      	ldr	r1, [r3, #0]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	1809      	adds	r1, r1, r0
 800bade:	6021      	str	r1, [r4, #0]
 800bae0:	e7ee      	b.n	800bac0 <_free_r+0x20>
 800bae2:	001a      	movs	r2, r3
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d001      	beq.n	800baee <_free_r+0x4e>
 800baea:	42a3      	cmp	r3, r4
 800baec:	d9f9      	bls.n	800bae2 <_free_r+0x42>
 800baee:	6811      	ldr	r1, [r2, #0]
 800baf0:	1850      	adds	r0, r2, r1
 800baf2:	42a0      	cmp	r0, r4
 800baf4:	d10b      	bne.n	800bb0e <_free_r+0x6e>
 800baf6:	6820      	ldr	r0, [r4, #0]
 800baf8:	1809      	adds	r1, r1, r0
 800bafa:	1850      	adds	r0, r2, r1
 800bafc:	6011      	str	r1, [r2, #0]
 800bafe:	4283      	cmp	r3, r0
 800bb00:	d1e0      	bne.n	800bac4 <_free_r+0x24>
 800bb02:	6818      	ldr	r0, [r3, #0]
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	1841      	adds	r1, r0, r1
 800bb08:	6011      	str	r1, [r2, #0]
 800bb0a:	6053      	str	r3, [r2, #4]
 800bb0c:	e7da      	b.n	800bac4 <_free_r+0x24>
 800bb0e:	42a0      	cmp	r0, r4
 800bb10:	d902      	bls.n	800bb18 <_free_r+0x78>
 800bb12:	230c      	movs	r3, #12
 800bb14:	602b      	str	r3, [r5, #0]
 800bb16:	e7d5      	b.n	800bac4 <_free_r+0x24>
 800bb18:	6820      	ldr	r0, [r4, #0]
 800bb1a:	1821      	adds	r1, r4, r0
 800bb1c:	428b      	cmp	r3, r1
 800bb1e:	d103      	bne.n	800bb28 <_free_r+0x88>
 800bb20:	6819      	ldr	r1, [r3, #0]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	1809      	adds	r1, r1, r0
 800bb26:	6021      	str	r1, [r4, #0]
 800bb28:	6063      	str	r3, [r4, #4]
 800bb2a:	6054      	str	r4, [r2, #4]
 800bb2c:	e7ca      	b.n	800bac4 <_free_r+0x24>
 800bb2e:	46c0      	nop			; (mov r8, r8)
 800bb30:	20001680 	.word	0x20001680

0800bb34 <sbrk_aligned>:
 800bb34:	b570      	push	{r4, r5, r6, lr}
 800bb36:	4e0f      	ldr	r6, [pc, #60]	; (800bb74 <sbrk_aligned+0x40>)
 800bb38:	000d      	movs	r5, r1
 800bb3a:	6831      	ldr	r1, [r6, #0]
 800bb3c:	0004      	movs	r4, r0
 800bb3e:	2900      	cmp	r1, #0
 800bb40:	d102      	bne.n	800bb48 <sbrk_aligned+0x14>
 800bb42:	f000 fccb 	bl	800c4dc <_sbrk_r>
 800bb46:	6030      	str	r0, [r6, #0]
 800bb48:	0029      	movs	r1, r5
 800bb4a:	0020      	movs	r0, r4
 800bb4c:	f000 fcc6 	bl	800c4dc <_sbrk_r>
 800bb50:	1c43      	adds	r3, r0, #1
 800bb52:	d00a      	beq.n	800bb6a <sbrk_aligned+0x36>
 800bb54:	2303      	movs	r3, #3
 800bb56:	1cc5      	adds	r5, r0, #3
 800bb58:	439d      	bics	r5, r3
 800bb5a:	42a8      	cmp	r0, r5
 800bb5c:	d007      	beq.n	800bb6e <sbrk_aligned+0x3a>
 800bb5e:	1a29      	subs	r1, r5, r0
 800bb60:	0020      	movs	r0, r4
 800bb62:	f000 fcbb 	bl	800c4dc <_sbrk_r>
 800bb66:	3001      	adds	r0, #1
 800bb68:	d101      	bne.n	800bb6e <sbrk_aligned+0x3a>
 800bb6a:	2501      	movs	r5, #1
 800bb6c:	426d      	negs	r5, r5
 800bb6e:	0028      	movs	r0, r5
 800bb70:	bd70      	pop	{r4, r5, r6, pc}
 800bb72:	46c0      	nop			; (mov r8, r8)
 800bb74:	20001684 	.word	0x20001684

0800bb78 <_malloc_r>:
 800bb78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb7a:	2203      	movs	r2, #3
 800bb7c:	1ccb      	adds	r3, r1, #3
 800bb7e:	4393      	bics	r3, r2
 800bb80:	3308      	adds	r3, #8
 800bb82:	0006      	movs	r6, r0
 800bb84:	001f      	movs	r7, r3
 800bb86:	2b0c      	cmp	r3, #12
 800bb88:	d238      	bcs.n	800bbfc <_malloc_r+0x84>
 800bb8a:	270c      	movs	r7, #12
 800bb8c:	42b9      	cmp	r1, r7
 800bb8e:	d837      	bhi.n	800bc00 <_malloc_r+0x88>
 800bb90:	0030      	movs	r0, r6
 800bb92:	f000 f873 	bl	800bc7c <__malloc_lock>
 800bb96:	4b38      	ldr	r3, [pc, #224]	; (800bc78 <_malloc_r+0x100>)
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	001c      	movs	r4, r3
 800bb9e:	2c00      	cmp	r4, #0
 800bba0:	d133      	bne.n	800bc0a <_malloc_r+0x92>
 800bba2:	0039      	movs	r1, r7
 800bba4:	0030      	movs	r0, r6
 800bba6:	f7ff ffc5 	bl	800bb34 <sbrk_aligned>
 800bbaa:	0004      	movs	r4, r0
 800bbac:	1c43      	adds	r3, r0, #1
 800bbae:	d15e      	bne.n	800bc6e <_malloc_r+0xf6>
 800bbb0:	9b00      	ldr	r3, [sp, #0]
 800bbb2:	681c      	ldr	r4, [r3, #0]
 800bbb4:	0025      	movs	r5, r4
 800bbb6:	2d00      	cmp	r5, #0
 800bbb8:	d14e      	bne.n	800bc58 <_malloc_r+0xe0>
 800bbba:	2c00      	cmp	r4, #0
 800bbbc:	d051      	beq.n	800bc62 <_malloc_r+0xea>
 800bbbe:	6823      	ldr	r3, [r4, #0]
 800bbc0:	0029      	movs	r1, r5
 800bbc2:	18e3      	adds	r3, r4, r3
 800bbc4:	0030      	movs	r0, r6
 800bbc6:	9301      	str	r3, [sp, #4]
 800bbc8:	f000 fc88 	bl	800c4dc <_sbrk_r>
 800bbcc:	9b01      	ldr	r3, [sp, #4]
 800bbce:	4283      	cmp	r3, r0
 800bbd0:	d147      	bne.n	800bc62 <_malloc_r+0xea>
 800bbd2:	6823      	ldr	r3, [r4, #0]
 800bbd4:	0030      	movs	r0, r6
 800bbd6:	1aff      	subs	r7, r7, r3
 800bbd8:	0039      	movs	r1, r7
 800bbda:	f7ff ffab 	bl	800bb34 <sbrk_aligned>
 800bbde:	3001      	adds	r0, #1
 800bbe0:	d03f      	beq.n	800bc62 <_malloc_r+0xea>
 800bbe2:	6823      	ldr	r3, [r4, #0]
 800bbe4:	19db      	adds	r3, r3, r7
 800bbe6:	6023      	str	r3, [r4, #0]
 800bbe8:	9b00      	ldr	r3, [sp, #0]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d040      	beq.n	800bc72 <_malloc_r+0xfa>
 800bbf0:	685a      	ldr	r2, [r3, #4]
 800bbf2:	42a2      	cmp	r2, r4
 800bbf4:	d133      	bne.n	800bc5e <_malloc_r+0xe6>
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	605a      	str	r2, [r3, #4]
 800bbfa:	e014      	b.n	800bc26 <_malloc_r+0xae>
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	dac5      	bge.n	800bb8c <_malloc_r+0x14>
 800bc00:	230c      	movs	r3, #12
 800bc02:	2500      	movs	r5, #0
 800bc04:	6033      	str	r3, [r6, #0]
 800bc06:	0028      	movs	r0, r5
 800bc08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc0a:	6821      	ldr	r1, [r4, #0]
 800bc0c:	1bc9      	subs	r1, r1, r7
 800bc0e:	d420      	bmi.n	800bc52 <_malloc_r+0xda>
 800bc10:	290b      	cmp	r1, #11
 800bc12:	d918      	bls.n	800bc46 <_malloc_r+0xce>
 800bc14:	19e2      	adds	r2, r4, r7
 800bc16:	6027      	str	r7, [r4, #0]
 800bc18:	42a3      	cmp	r3, r4
 800bc1a:	d112      	bne.n	800bc42 <_malloc_r+0xca>
 800bc1c:	9b00      	ldr	r3, [sp, #0]
 800bc1e:	601a      	str	r2, [r3, #0]
 800bc20:	6863      	ldr	r3, [r4, #4]
 800bc22:	6011      	str	r1, [r2, #0]
 800bc24:	6053      	str	r3, [r2, #4]
 800bc26:	0030      	movs	r0, r6
 800bc28:	0025      	movs	r5, r4
 800bc2a:	f000 f82f 	bl	800bc8c <__malloc_unlock>
 800bc2e:	2207      	movs	r2, #7
 800bc30:	350b      	adds	r5, #11
 800bc32:	1d23      	adds	r3, r4, #4
 800bc34:	4395      	bics	r5, r2
 800bc36:	1aea      	subs	r2, r5, r3
 800bc38:	429d      	cmp	r5, r3
 800bc3a:	d0e4      	beq.n	800bc06 <_malloc_r+0x8e>
 800bc3c:	1b5b      	subs	r3, r3, r5
 800bc3e:	50a3      	str	r3, [r4, r2]
 800bc40:	e7e1      	b.n	800bc06 <_malloc_r+0x8e>
 800bc42:	605a      	str	r2, [r3, #4]
 800bc44:	e7ec      	b.n	800bc20 <_malloc_r+0xa8>
 800bc46:	6862      	ldr	r2, [r4, #4]
 800bc48:	42a3      	cmp	r3, r4
 800bc4a:	d1d5      	bne.n	800bbf8 <_malloc_r+0x80>
 800bc4c:	9b00      	ldr	r3, [sp, #0]
 800bc4e:	601a      	str	r2, [r3, #0]
 800bc50:	e7e9      	b.n	800bc26 <_malloc_r+0xae>
 800bc52:	0023      	movs	r3, r4
 800bc54:	6864      	ldr	r4, [r4, #4]
 800bc56:	e7a2      	b.n	800bb9e <_malloc_r+0x26>
 800bc58:	002c      	movs	r4, r5
 800bc5a:	686d      	ldr	r5, [r5, #4]
 800bc5c:	e7ab      	b.n	800bbb6 <_malloc_r+0x3e>
 800bc5e:	0013      	movs	r3, r2
 800bc60:	e7c4      	b.n	800bbec <_malloc_r+0x74>
 800bc62:	230c      	movs	r3, #12
 800bc64:	0030      	movs	r0, r6
 800bc66:	6033      	str	r3, [r6, #0]
 800bc68:	f000 f810 	bl	800bc8c <__malloc_unlock>
 800bc6c:	e7cb      	b.n	800bc06 <_malloc_r+0x8e>
 800bc6e:	6027      	str	r7, [r4, #0]
 800bc70:	e7d9      	b.n	800bc26 <_malloc_r+0xae>
 800bc72:	605b      	str	r3, [r3, #4]
 800bc74:	deff      	udf	#255	; 0xff
 800bc76:	46c0      	nop			; (mov r8, r8)
 800bc78:	20001680 	.word	0x20001680

0800bc7c <__malloc_lock>:
 800bc7c:	b510      	push	{r4, lr}
 800bc7e:	4802      	ldr	r0, [pc, #8]	; (800bc88 <__malloc_lock+0xc>)
 800bc80:	f7ff ff02 	bl	800ba88 <__retarget_lock_acquire_recursive>
 800bc84:	bd10      	pop	{r4, pc}
 800bc86:	46c0      	nop			; (mov r8, r8)
 800bc88:	2000167c 	.word	0x2000167c

0800bc8c <__malloc_unlock>:
 800bc8c:	b510      	push	{r4, lr}
 800bc8e:	4802      	ldr	r0, [pc, #8]	; (800bc98 <__malloc_unlock+0xc>)
 800bc90:	f7ff fefb 	bl	800ba8a <__retarget_lock_release_recursive>
 800bc94:	bd10      	pop	{r4, pc}
 800bc96:	46c0      	nop			; (mov r8, r8)
 800bc98:	2000167c 	.word	0x2000167c

0800bc9c <__sfputc_r>:
 800bc9c:	6893      	ldr	r3, [r2, #8]
 800bc9e:	b510      	push	{r4, lr}
 800bca0:	3b01      	subs	r3, #1
 800bca2:	6093      	str	r3, [r2, #8]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	da04      	bge.n	800bcb2 <__sfputc_r+0x16>
 800bca8:	6994      	ldr	r4, [r2, #24]
 800bcaa:	42a3      	cmp	r3, r4
 800bcac:	db07      	blt.n	800bcbe <__sfputc_r+0x22>
 800bcae:	290a      	cmp	r1, #10
 800bcb0:	d005      	beq.n	800bcbe <__sfputc_r+0x22>
 800bcb2:	6813      	ldr	r3, [r2, #0]
 800bcb4:	1c58      	adds	r0, r3, #1
 800bcb6:	6010      	str	r0, [r2, #0]
 800bcb8:	7019      	strb	r1, [r3, #0]
 800bcba:	0008      	movs	r0, r1
 800bcbc:	bd10      	pop	{r4, pc}
 800bcbe:	f000 fb66 	bl	800c38e <__swbuf_r>
 800bcc2:	0001      	movs	r1, r0
 800bcc4:	e7f9      	b.n	800bcba <__sfputc_r+0x1e>

0800bcc6 <__sfputs_r>:
 800bcc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcc8:	0006      	movs	r6, r0
 800bcca:	000f      	movs	r7, r1
 800bccc:	0014      	movs	r4, r2
 800bcce:	18d5      	adds	r5, r2, r3
 800bcd0:	42ac      	cmp	r4, r5
 800bcd2:	d101      	bne.n	800bcd8 <__sfputs_r+0x12>
 800bcd4:	2000      	movs	r0, #0
 800bcd6:	e007      	b.n	800bce8 <__sfputs_r+0x22>
 800bcd8:	7821      	ldrb	r1, [r4, #0]
 800bcda:	003a      	movs	r2, r7
 800bcdc:	0030      	movs	r0, r6
 800bcde:	f7ff ffdd 	bl	800bc9c <__sfputc_r>
 800bce2:	3401      	adds	r4, #1
 800bce4:	1c43      	adds	r3, r0, #1
 800bce6:	d1f3      	bne.n	800bcd0 <__sfputs_r+0xa>
 800bce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bcec <_vfiprintf_r>:
 800bcec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcee:	b0a1      	sub	sp, #132	; 0x84
 800bcf0:	000f      	movs	r7, r1
 800bcf2:	0015      	movs	r5, r2
 800bcf4:	001e      	movs	r6, r3
 800bcf6:	9003      	str	r0, [sp, #12]
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	d004      	beq.n	800bd06 <_vfiprintf_r+0x1a>
 800bcfc:	6a03      	ldr	r3, [r0, #32]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d101      	bne.n	800bd06 <_vfiprintf_r+0x1a>
 800bd02:	f7ff fd9f 	bl	800b844 <__sinit>
 800bd06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd08:	07db      	lsls	r3, r3, #31
 800bd0a:	d405      	bmi.n	800bd18 <_vfiprintf_r+0x2c>
 800bd0c:	89bb      	ldrh	r3, [r7, #12]
 800bd0e:	059b      	lsls	r3, r3, #22
 800bd10:	d402      	bmi.n	800bd18 <_vfiprintf_r+0x2c>
 800bd12:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bd14:	f7ff feb8 	bl	800ba88 <__retarget_lock_acquire_recursive>
 800bd18:	89bb      	ldrh	r3, [r7, #12]
 800bd1a:	071b      	lsls	r3, r3, #28
 800bd1c:	d502      	bpl.n	800bd24 <_vfiprintf_r+0x38>
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d113      	bne.n	800bd4c <_vfiprintf_r+0x60>
 800bd24:	0039      	movs	r1, r7
 800bd26:	9803      	ldr	r0, [sp, #12]
 800bd28:	f000 fb74 	bl	800c414 <__swsetup_r>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	d00d      	beq.n	800bd4c <_vfiprintf_r+0x60>
 800bd30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd32:	07db      	lsls	r3, r3, #31
 800bd34:	d503      	bpl.n	800bd3e <_vfiprintf_r+0x52>
 800bd36:	2001      	movs	r0, #1
 800bd38:	4240      	negs	r0, r0
 800bd3a:	b021      	add	sp, #132	; 0x84
 800bd3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd3e:	89bb      	ldrh	r3, [r7, #12]
 800bd40:	059b      	lsls	r3, r3, #22
 800bd42:	d4f8      	bmi.n	800bd36 <_vfiprintf_r+0x4a>
 800bd44:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bd46:	f7ff fea0 	bl	800ba8a <__retarget_lock_release_recursive>
 800bd4a:	e7f4      	b.n	800bd36 <_vfiprintf_r+0x4a>
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	ac08      	add	r4, sp, #32
 800bd50:	6163      	str	r3, [r4, #20]
 800bd52:	3320      	adds	r3, #32
 800bd54:	7663      	strb	r3, [r4, #25]
 800bd56:	3310      	adds	r3, #16
 800bd58:	76a3      	strb	r3, [r4, #26]
 800bd5a:	9607      	str	r6, [sp, #28]
 800bd5c:	002e      	movs	r6, r5
 800bd5e:	7833      	ldrb	r3, [r6, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d001      	beq.n	800bd68 <_vfiprintf_r+0x7c>
 800bd64:	2b25      	cmp	r3, #37	; 0x25
 800bd66:	d148      	bne.n	800bdfa <_vfiprintf_r+0x10e>
 800bd68:	1b73      	subs	r3, r6, r5
 800bd6a:	9305      	str	r3, [sp, #20]
 800bd6c:	42ae      	cmp	r6, r5
 800bd6e:	d00b      	beq.n	800bd88 <_vfiprintf_r+0x9c>
 800bd70:	002a      	movs	r2, r5
 800bd72:	0039      	movs	r1, r7
 800bd74:	9803      	ldr	r0, [sp, #12]
 800bd76:	f7ff ffa6 	bl	800bcc6 <__sfputs_r>
 800bd7a:	3001      	adds	r0, #1
 800bd7c:	d100      	bne.n	800bd80 <_vfiprintf_r+0x94>
 800bd7e:	e0af      	b.n	800bee0 <_vfiprintf_r+0x1f4>
 800bd80:	6963      	ldr	r3, [r4, #20]
 800bd82:	9a05      	ldr	r2, [sp, #20]
 800bd84:	189b      	adds	r3, r3, r2
 800bd86:	6163      	str	r3, [r4, #20]
 800bd88:	7833      	ldrb	r3, [r6, #0]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d100      	bne.n	800bd90 <_vfiprintf_r+0xa4>
 800bd8e:	e0a7      	b.n	800bee0 <_vfiprintf_r+0x1f4>
 800bd90:	2201      	movs	r2, #1
 800bd92:	2300      	movs	r3, #0
 800bd94:	4252      	negs	r2, r2
 800bd96:	6062      	str	r2, [r4, #4]
 800bd98:	a904      	add	r1, sp, #16
 800bd9a:	3254      	adds	r2, #84	; 0x54
 800bd9c:	1852      	adds	r2, r2, r1
 800bd9e:	1c75      	adds	r5, r6, #1
 800bda0:	6023      	str	r3, [r4, #0]
 800bda2:	60e3      	str	r3, [r4, #12]
 800bda4:	60a3      	str	r3, [r4, #8]
 800bda6:	7013      	strb	r3, [r2, #0]
 800bda8:	65a3      	str	r3, [r4, #88]	; 0x58
 800bdaa:	4b59      	ldr	r3, [pc, #356]	; (800bf10 <_vfiprintf_r+0x224>)
 800bdac:	2205      	movs	r2, #5
 800bdae:	0018      	movs	r0, r3
 800bdb0:	7829      	ldrb	r1, [r5, #0]
 800bdb2:	9305      	str	r3, [sp, #20]
 800bdb4:	f000 fba4 	bl	800c500 <memchr>
 800bdb8:	1c6e      	adds	r6, r5, #1
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	d11f      	bne.n	800bdfe <_vfiprintf_r+0x112>
 800bdbe:	6822      	ldr	r2, [r4, #0]
 800bdc0:	06d3      	lsls	r3, r2, #27
 800bdc2:	d504      	bpl.n	800bdce <_vfiprintf_r+0xe2>
 800bdc4:	2353      	movs	r3, #83	; 0x53
 800bdc6:	a904      	add	r1, sp, #16
 800bdc8:	185b      	adds	r3, r3, r1
 800bdca:	2120      	movs	r1, #32
 800bdcc:	7019      	strb	r1, [r3, #0]
 800bdce:	0713      	lsls	r3, r2, #28
 800bdd0:	d504      	bpl.n	800bddc <_vfiprintf_r+0xf0>
 800bdd2:	2353      	movs	r3, #83	; 0x53
 800bdd4:	a904      	add	r1, sp, #16
 800bdd6:	185b      	adds	r3, r3, r1
 800bdd8:	212b      	movs	r1, #43	; 0x2b
 800bdda:	7019      	strb	r1, [r3, #0]
 800bddc:	782b      	ldrb	r3, [r5, #0]
 800bdde:	2b2a      	cmp	r3, #42	; 0x2a
 800bde0:	d016      	beq.n	800be10 <_vfiprintf_r+0x124>
 800bde2:	002e      	movs	r6, r5
 800bde4:	2100      	movs	r1, #0
 800bde6:	200a      	movs	r0, #10
 800bde8:	68e3      	ldr	r3, [r4, #12]
 800bdea:	7832      	ldrb	r2, [r6, #0]
 800bdec:	1c75      	adds	r5, r6, #1
 800bdee:	3a30      	subs	r2, #48	; 0x30
 800bdf0:	2a09      	cmp	r2, #9
 800bdf2:	d94e      	bls.n	800be92 <_vfiprintf_r+0x1a6>
 800bdf4:	2900      	cmp	r1, #0
 800bdf6:	d111      	bne.n	800be1c <_vfiprintf_r+0x130>
 800bdf8:	e017      	b.n	800be2a <_vfiprintf_r+0x13e>
 800bdfa:	3601      	adds	r6, #1
 800bdfc:	e7af      	b.n	800bd5e <_vfiprintf_r+0x72>
 800bdfe:	9b05      	ldr	r3, [sp, #20]
 800be00:	6822      	ldr	r2, [r4, #0]
 800be02:	1ac0      	subs	r0, r0, r3
 800be04:	2301      	movs	r3, #1
 800be06:	4083      	lsls	r3, r0
 800be08:	4313      	orrs	r3, r2
 800be0a:	0035      	movs	r5, r6
 800be0c:	6023      	str	r3, [r4, #0]
 800be0e:	e7cc      	b.n	800bdaa <_vfiprintf_r+0xbe>
 800be10:	9b07      	ldr	r3, [sp, #28]
 800be12:	1d19      	adds	r1, r3, #4
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	9107      	str	r1, [sp, #28]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	db01      	blt.n	800be20 <_vfiprintf_r+0x134>
 800be1c:	930b      	str	r3, [sp, #44]	; 0x2c
 800be1e:	e004      	b.n	800be2a <_vfiprintf_r+0x13e>
 800be20:	425b      	negs	r3, r3
 800be22:	60e3      	str	r3, [r4, #12]
 800be24:	2302      	movs	r3, #2
 800be26:	4313      	orrs	r3, r2
 800be28:	6023      	str	r3, [r4, #0]
 800be2a:	7833      	ldrb	r3, [r6, #0]
 800be2c:	2b2e      	cmp	r3, #46	; 0x2e
 800be2e:	d10a      	bne.n	800be46 <_vfiprintf_r+0x15a>
 800be30:	7873      	ldrb	r3, [r6, #1]
 800be32:	2b2a      	cmp	r3, #42	; 0x2a
 800be34:	d135      	bne.n	800bea2 <_vfiprintf_r+0x1b6>
 800be36:	9b07      	ldr	r3, [sp, #28]
 800be38:	3602      	adds	r6, #2
 800be3a:	1d1a      	adds	r2, r3, #4
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	9207      	str	r2, [sp, #28]
 800be40:	2b00      	cmp	r3, #0
 800be42:	db2b      	blt.n	800be9c <_vfiprintf_r+0x1b0>
 800be44:	9309      	str	r3, [sp, #36]	; 0x24
 800be46:	4d33      	ldr	r5, [pc, #204]	; (800bf14 <_vfiprintf_r+0x228>)
 800be48:	2203      	movs	r2, #3
 800be4a:	0028      	movs	r0, r5
 800be4c:	7831      	ldrb	r1, [r6, #0]
 800be4e:	f000 fb57 	bl	800c500 <memchr>
 800be52:	2800      	cmp	r0, #0
 800be54:	d006      	beq.n	800be64 <_vfiprintf_r+0x178>
 800be56:	2340      	movs	r3, #64	; 0x40
 800be58:	1b40      	subs	r0, r0, r5
 800be5a:	4083      	lsls	r3, r0
 800be5c:	6822      	ldr	r2, [r4, #0]
 800be5e:	3601      	adds	r6, #1
 800be60:	4313      	orrs	r3, r2
 800be62:	6023      	str	r3, [r4, #0]
 800be64:	7831      	ldrb	r1, [r6, #0]
 800be66:	2206      	movs	r2, #6
 800be68:	482b      	ldr	r0, [pc, #172]	; (800bf18 <_vfiprintf_r+0x22c>)
 800be6a:	1c75      	adds	r5, r6, #1
 800be6c:	7621      	strb	r1, [r4, #24]
 800be6e:	f000 fb47 	bl	800c500 <memchr>
 800be72:	2800      	cmp	r0, #0
 800be74:	d043      	beq.n	800befe <_vfiprintf_r+0x212>
 800be76:	4b29      	ldr	r3, [pc, #164]	; (800bf1c <_vfiprintf_r+0x230>)
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d125      	bne.n	800bec8 <_vfiprintf_r+0x1dc>
 800be7c:	2207      	movs	r2, #7
 800be7e:	9b07      	ldr	r3, [sp, #28]
 800be80:	3307      	adds	r3, #7
 800be82:	4393      	bics	r3, r2
 800be84:	3308      	adds	r3, #8
 800be86:	9307      	str	r3, [sp, #28]
 800be88:	6963      	ldr	r3, [r4, #20]
 800be8a:	9a04      	ldr	r2, [sp, #16]
 800be8c:	189b      	adds	r3, r3, r2
 800be8e:	6163      	str	r3, [r4, #20]
 800be90:	e764      	b.n	800bd5c <_vfiprintf_r+0x70>
 800be92:	4343      	muls	r3, r0
 800be94:	002e      	movs	r6, r5
 800be96:	2101      	movs	r1, #1
 800be98:	189b      	adds	r3, r3, r2
 800be9a:	e7a6      	b.n	800bdea <_vfiprintf_r+0xfe>
 800be9c:	2301      	movs	r3, #1
 800be9e:	425b      	negs	r3, r3
 800bea0:	e7d0      	b.n	800be44 <_vfiprintf_r+0x158>
 800bea2:	2300      	movs	r3, #0
 800bea4:	200a      	movs	r0, #10
 800bea6:	001a      	movs	r2, r3
 800bea8:	3601      	adds	r6, #1
 800beaa:	6063      	str	r3, [r4, #4]
 800beac:	7831      	ldrb	r1, [r6, #0]
 800beae:	1c75      	adds	r5, r6, #1
 800beb0:	3930      	subs	r1, #48	; 0x30
 800beb2:	2909      	cmp	r1, #9
 800beb4:	d903      	bls.n	800bebe <_vfiprintf_r+0x1d2>
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d0c5      	beq.n	800be46 <_vfiprintf_r+0x15a>
 800beba:	9209      	str	r2, [sp, #36]	; 0x24
 800bebc:	e7c3      	b.n	800be46 <_vfiprintf_r+0x15a>
 800bebe:	4342      	muls	r2, r0
 800bec0:	002e      	movs	r6, r5
 800bec2:	2301      	movs	r3, #1
 800bec4:	1852      	adds	r2, r2, r1
 800bec6:	e7f1      	b.n	800beac <_vfiprintf_r+0x1c0>
 800bec8:	aa07      	add	r2, sp, #28
 800beca:	9200      	str	r2, [sp, #0]
 800becc:	0021      	movs	r1, r4
 800bece:	003a      	movs	r2, r7
 800bed0:	4b13      	ldr	r3, [pc, #76]	; (800bf20 <_vfiprintf_r+0x234>)
 800bed2:	9803      	ldr	r0, [sp, #12]
 800bed4:	e000      	b.n	800bed8 <_vfiprintf_r+0x1ec>
 800bed6:	bf00      	nop
 800bed8:	9004      	str	r0, [sp, #16]
 800beda:	9b04      	ldr	r3, [sp, #16]
 800bedc:	3301      	adds	r3, #1
 800bede:	d1d3      	bne.n	800be88 <_vfiprintf_r+0x19c>
 800bee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bee2:	07db      	lsls	r3, r3, #31
 800bee4:	d405      	bmi.n	800bef2 <_vfiprintf_r+0x206>
 800bee6:	89bb      	ldrh	r3, [r7, #12]
 800bee8:	059b      	lsls	r3, r3, #22
 800beea:	d402      	bmi.n	800bef2 <_vfiprintf_r+0x206>
 800beec:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800beee:	f7ff fdcc 	bl	800ba8a <__retarget_lock_release_recursive>
 800bef2:	89bb      	ldrh	r3, [r7, #12]
 800bef4:	065b      	lsls	r3, r3, #25
 800bef6:	d500      	bpl.n	800befa <_vfiprintf_r+0x20e>
 800bef8:	e71d      	b.n	800bd36 <_vfiprintf_r+0x4a>
 800befa:	980d      	ldr	r0, [sp, #52]	; 0x34
 800befc:	e71d      	b.n	800bd3a <_vfiprintf_r+0x4e>
 800befe:	aa07      	add	r2, sp, #28
 800bf00:	9200      	str	r2, [sp, #0]
 800bf02:	0021      	movs	r1, r4
 800bf04:	003a      	movs	r2, r7
 800bf06:	4b06      	ldr	r3, [pc, #24]	; (800bf20 <_vfiprintf_r+0x234>)
 800bf08:	9803      	ldr	r0, [sp, #12]
 800bf0a:	f000 f87b 	bl	800c004 <_printf_i>
 800bf0e:	e7e3      	b.n	800bed8 <_vfiprintf_r+0x1ec>
 800bf10:	0800cfc8 	.word	0x0800cfc8
 800bf14:	0800cfce 	.word	0x0800cfce
 800bf18:	0800cfd2 	.word	0x0800cfd2
 800bf1c:	00000000 	.word	0x00000000
 800bf20:	0800bcc7 	.word	0x0800bcc7

0800bf24 <_printf_common>:
 800bf24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf26:	0016      	movs	r6, r2
 800bf28:	9301      	str	r3, [sp, #4]
 800bf2a:	688a      	ldr	r2, [r1, #8]
 800bf2c:	690b      	ldr	r3, [r1, #16]
 800bf2e:	000c      	movs	r4, r1
 800bf30:	9000      	str	r0, [sp, #0]
 800bf32:	4293      	cmp	r3, r2
 800bf34:	da00      	bge.n	800bf38 <_printf_common+0x14>
 800bf36:	0013      	movs	r3, r2
 800bf38:	0022      	movs	r2, r4
 800bf3a:	6033      	str	r3, [r6, #0]
 800bf3c:	3243      	adds	r2, #67	; 0x43
 800bf3e:	7812      	ldrb	r2, [r2, #0]
 800bf40:	2a00      	cmp	r2, #0
 800bf42:	d001      	beq.n	800bf48 <_printf_common+0x24>
 800bf44:	3301      	adds	r3, #1
 800bf46:	6033      	str	r3, [r6, #0]
 800bf48:	6823      	ldr	r3, [r4, #0]
 800bf4a:	069b      	lsls	r3, r3, #26
 800bf4c:	d502      	bpl.n	800bf54 <_printf_common+0x30>
 800bf4e:	6833      	ldr	r3, [r6, #0]
 800bf50:	3302      	adds	r3, #2
 800bf52:	6033      	str	r3, [r6, #0]
 800bf54:	6822      	ldr	r2, [r4, #0]
 800bf56:	2306      	movs	r3, #6
 800bf58:	0015      	movs	r5, r2
 800bf5a:	401d      	ands	r5, r3
 800bf5c:	421a      	tst	r2, r3
 800bf5e:	d027      	beq.n	800bfb0 <_printf_common+0x8c>
 800bf60:	0023      	movs	r3, r4
 800bf62:	3343      	adds	r3, #67	; 0x43
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	1e5a      	subs	r2, r3, #1
 800bf68:	4193      	sbcs	r3, r2
 800bf6a:	6822      	ldr	r2, [r4, #0]
 800bf6c:	0692      	lsls	r2, r2, #26
 800bf6e:	d430      	bmi.n	800bfd2 <_printf_common+0xae>
 800bf70:	0022      	movs	r2, r4
 800bf72:	9901      	ldr	r1, [sp, #4]
 800bf74:	9800      	ldr	r0, [sp, #0]
 800bf76:	9d08      	ldr	r5, [sp, #32]
 800bf78:	3243      	adds	r2, #67	; 0x43
 800bf7a:	47a8      	blx	r5
 800bf7c:	3001      	adds	r0, #1
 800bf7e:	d025      	beq.n	800bfcc <_printf_common+0xa8>
 800bf80:	2206      	movs	r2, #6
 800bf82:	6823      	ldr	r3, [r4, #0]
 800bf84:	2500      	movs	r5, #0
 800bf86:	4013      	ands	r3, r2
 800bf88:	2b04      	cmp	r3, #4
 800bf8a:	d105      	bne.n	800bf98 <_printf_common+0x74>
 800bf8c:	6833      	ldr	r3, [r6, #0]
 800bf8e:	68e5      	ldr	r5, [r4, #12]
 800bf90:	1aed      	subs	r5, r5, r3
 800bf92:	43eb      	mvns	r3, r5
 800bf94:	17db      	asrs	r3, r3, #31
 800bf96:	401d      	ands	r5, r3
 800bf98:	68a3      	ldr	r3, [r4, #8]
 800bf9a:	6922      	ldr	r2, [r4, #16]
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	dd01      	ble.n	800bfa4 <_printf_common+0x80>
 800bfa0:	1a9b      	subs	r3, r3, r2
 800bfa2:	18ed      	adds	r5, r5, r3
 800bfa4:	2600      	movs	r6, #0
 800bfa6:	42b5      	cmp	r5, r6
 800bfa8:	d120      	bne.n	800bfec <_printf_common+0xc8>
 800bfaa:	2000      	movs	r0, #0
 800bfac:	e010      	b.n	800bfd0 <_printf_common+0xac>
 800bfae:	3501      	adds	r5, #1
 800bfb0:	68e3      	ldr	r3, [r4, #12]
 800bfb2:	6832      	ldr	r2, [r6, #0]
 800bfb4:	1a9b      	subs	r3, r3, r2
 800bfb6:	42ab      	cmp	r3, r5
 800bfb8:	ddd2      	ble.n	800bf60 <_printf_common+0x3c>
 800bfba:	0022      	movs	r2, r4
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	9901      	ldr	r1, [sp, #4]
 800bfc0:	9800      	ldr	r0, [sp, #0]
 800bfc2:	9f08      	ldr	r7, [sp, #32]
 800bfc4:	3219      	adds	r2, #25
 800bfc6:	47b8      	blx	r7
 800bfc8:	3001      	adds	r0, #1
 800bfca:	d1f0      	bne.n	800bfae <_printf_common+0x8a>
 800bfcc:	2001      	movs	r0, #1
 800bfce:	4240      	negs	r0, r0
 800bfd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bfd2:	2030      	movs	r0, #48	; 0x30
 800bfd4:	18e1      	adds	r1, r4, r3
 800bfd6:	3143      	adds	r1, #67	; 0x43
 800bfd8:	7008      	strb	r0, [r1, #0]
 800bfda:	0021      	movs	r1, r4
 800bfdc:	1c5a      	adds	r2, r3, #1
 800bfde:	3145      	adds	r1, #69	; 0x45
 800bfe0:	7809      	ldrb	r1, [r1, #0]
 800bfe2:	18a2      	adds	r2, r4, r2
 800bfe4:	3243      	adds	r2, #67	; 0x43
 800bfe6:	3302      	adds	r3, #2
 800bfe8:	7011      	strb	r1, [r2, #0]
 800bfea:	e7c1      	b.n	800bf70 <_printf_common+0x4c>
 800bfec:	0022      	movs	r2, r4
 800bfee:	2301      	movs	r3, #1
 800bff0:	9901      	ldr	r1, [sp, #4]
 800bff2:	9800      	ldr	r0, [sp, #0]
 800bff4:	9f08      	ldr	r7, [sp, #32]
 800bff6:	321a      	adds	r2, #26
 800bff8:	47b8      	blx	r7
 800bffa:	3001      	adds	r0, #1
 800bffc:	d0e6      	beq.n	800bfcc <_printf_common+0xa8>
 800bffe:	3601      	adds	r6, #1
 800c000:	e7d1      	b.n	800bfa6 <_printf_common+0x82>
	...

0800c004 <_printf_i>:
 800c004:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c006:	b08b      	sub	sp, #44	; 0x2c
 800c008:	9206      	str	r2, [sp, #24]
 800c00a:	000a      	movs	r2, r1
 800c00c:	3243      	adds	r2, #67	; 0x43
 800c00e:	9307      	str	r3, [sp, #28]
 800c010:	9005      	str	r0, [sp, #20]
 800c012:	9204      	str	r2, [sp, #16]
 800c014:	7e0a      	ldrb	r2, [r1, #24]
 800c016:	000c      	movs	r4, r1
 800c018:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c01a:	2a78      	cmp	r2, #120	; 0x78
 800c01c:	d809      	bhi.n	800c032 <_printf_i+0x2e>
 800c01e:	2a62      	cmp	r2, #98	; 0x62
 800c020:	d80b      	bhi.n	800c03a <_printf_i+0x36>
 800c022:	2a00      	cmp	r2, #0
 800c024:	d100      	bne.n	800c028 <_printf_i+0x24>
 800c026:	e0be      	b.n	800c1a6 <_printf_i+0x1a2>
 800c028:	497c      	ldr	r1, [pc, #496]	; (800c21c <_printf_i+0x218>)
 800c02a:	9103      	str	r1, [sp, #12]
 800c02c:	2a58      	cmp	r2, #88	; 0x58
 800c02e:	d100      	bne.n	800c032 <_printf_i+0x2e>
 800c030:	e093      	b.n	800c15a <_printf_i+0x156>
 800c032:	0026      	movs	r6, r4
 800c034:	3642      	adds	r6, #66	; 0x42
 800c036:	7032      	strb	r2, [r6, #0]
 800c038:	e022      	b.n	800c080 <_printf_i+0x7c>
 800c03a:	0010      	movs	r0, r2
 800c03c:	3863      	subs	r0, #99	; 0x63
 800c03e:	2815      	cmp	r0, #21
 800c040:	d8f7      	bhi.n	800c032 <_printf_i+0x2e>
 800c042:	f7f4 f861 	bl	8000108 <__gnu_thumb1_case_shi>
 800c046:	0016      	.short	0x0016
 800c048:	fff6001f 	.word	0xfff6001f
 800c04c:	fff6fff6 	.word	0xfff6fff6
 800c050:	001ffff6 	.word	0x001ffff6
 800c054:	fff6fff6 	.word	0xfff6fff6
 800c058:	fff6fff6 	.word	0xfff6fff6
 800c05c:	003600a3 	.word	0x003600a3
 800c060:	fff60083 	.word	0xfff60083
 800c064:	00b4fff6 	.word	0x00b4fff6
 800c068:	0036fff6 	.word	0x0036fff6
 800c06c:	fff6fff6 	.word	0xfff6fff6
 800c070:	0087      	.short	0x0087
 800c072:	0026      	movs	r6, r4
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	3642      	adds	r6, #66	; 0x42
 800c078:	1d11      	adds	r1, r2, #4
 800c07a:	6019      	str	r1, [r3, #0]
 800c07c:	6813      	ldr	r3, [r2, #0]
 800c07e:	7033      	strb	r3, [r6, #0]
 800c080:	2301      	movs	r3, #1
 800c082:	e0a2      	b.n	800c1ca <_printf_i+0x1c6>
 800c084:	6818      	ldr	r0, [r3, #0]
 800c086:	6809      	ldr	r1, [r1, #0]
 800c088:	1d02      	adds	r2, r0, #4
 800c08a:	060d      	lsls	r5, r1, #24
 800c08c:	d50b      	bpl.n	800c0a6 <_printf_i+0xa2>
 800c08e:	6805      	ldr	r5, [r0, #0]
 800c090:	601a      	str	r2, [r3, #0]
 800c092:	2d00      	cmp	r5, #0
 800c094:	da03      	bge.n	800c09e <_printf_i+0x9a>
 800c096:	232d      	movs	r3, #45	; 0x2d
 800c098:	9a04      	ldr	r2, [sp, #16]
 800c09a:	426d      	negs	r5, r5
 800c09c:	7013      	strb	r3, [r2, #0]
 800c09e:	4b5f      	ldr	r3, [pc, #380]	; (800c21c <_printf_i+0x218>)
 800c0a0:	270a      	movs	r7, #10
 800c0a2:	9303      	str	r3, [sp, #12]
 800c0a4:	e01b      	b.n	800c0de <_printf_i+0xda>
 800c0a6:	6805      	ldr	r5, [r0, #0]
 800c0a8:	601a      	str	r2, [r3, #0]
 800c0aa:	0649      	lsls	r1, r1, #25
 800c0ac:	d5f1      	bpl.n	800c092 <_printf_i+0x8e>
 800c0ae:	b22d      	sxth	r5, r5
 800c0b0:	e7ef      	b.n	800c092 <_printf_i+0x8e>
 800c0b2:	680d      	ldr	r5, [r1, #0]
 800c0b4:	6819      	ldr	r1, [r3, #0]
 800c0b6:	1d08      	adds	r0, r1, #4
 800c0b8:	6018      	str	r0, [r3, #0]
 800c0ba:	062e      	lsls	r6, r5, #24
 800c0bc:	d501      	bpl.n	800c0c2 <_printf_i+0xbe>
 800c0be:	680d      	ldr	r5, [r1, #0]
 800c0c0:	e003      	b.n	800c0ca <_printf_i+0xc6>
 800c0c2:	066d      	lsls	r5, r5, #25
 800c0c4:	d5fb      	bpl.n	800c0be <_printf_i+0xba>
 800c0c6:	680d      	ldr	r5, [r1, #0]
 800c0c8:	b2ad      	uxth	r5, r5
 800c0ca:	4b54      	ldr	r3, [pc, #336]	; (800c21c <_printf_i+0x218>)
 800c0cc:	2708      	movs	r7, #8
 800c0ce:	9303      	str	r3, [sp, #12]
 800c0d0:	2a6f      	cmp	r2, #111	; 0x6f
 800c0d2:	d000      	beq.n	800c0d6 <_printf_i+0xd2>
 800c0d4:	3702      	adds	r7, #2
 800c0d6:	0023      	movs	r3, r4
 800c0d8:	2200      	movs	r2, #0
 800c0da:	3343      	adds	r3, #67	; 0x43
 800c0dc:	701a      	strb	r2, [r3, #0]
 800c0de:	6863      	ldr	r3, [r4, #4]
 800c0e0:	60a3      	str	r3, [r4, #8]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	db03      	blt.n	800c0ee <_printf_i+0xea>
 800c0e6:	2104      	movs	r1, #4
 800c0e8:	6822      	ldr	r2, [r4, #0]
 800c0ea:	438a      	bics	r2, r1
 800c0ec:	6022      	str	r2, [r4, #0]
 800c0ee:	2d00      	cmp	r5, #0
 800c0f0:	d102      	bne.n	800c0f8 <_printf_i+0xf4>
 800c0f2:	9e04      	ldr	r6, [sp, #16]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d00c      	beq.n	800c112 <_printf_i+0x10e>
 800c0f8:	9e04      	ldr	r6, [sp, #16]
 800c0fa:	0028      	movs	r0, r5
 800c0fc:	0039      	movs	r1, r7
 800c0fe:	f7f4 f893 	bl	8000228 <__aeabi_uidivmod>
 800c102:	9b03      	ldr	r3, [sp, #12]
 800c104:	3e01      	subs	r6, #1
 800c106:	5c5b      	ldrb	r3, [r3, r1]
 800c108:	7033      	strb	r3, [r6, #0]
 800c10a:	002b      	movs	r3, r5
 800c10c:	0005      	movs	r5, r0
 800c10e:	429f      	cmp	r7, r3
 800c110:	d9f3      	bls.n	800c0fa <_printf_i+0xf6>
 800c112:	2f08      	cmp	r7, #8
 800c114:	d109      	bne.n	800c12a <_printf_i+0x126>
 800c116:	6823      	ldr	r3, [r4, #0]
 800c118:	07db      	lsls	r3, r3, #31
 800c11a:	d506      	bpl.n	800c12a <_printf_i+0x126>
 800c11c:	6862      	ldr	r2, [r4, #4]
 800c11e:	6923      	ldr	r3, [r4, #16]
 800c120:	429a      	cmp	r2, r3
 800c122:	dc02      	bgt.n	800c12a <_printf_i+0x126>
 800c124:	2330      	movs	r3, #48	; 0x30
 800c126:	3e01      	subs	r6, #1
 800c128:	7033      	strb	r3, [r6, #0]
 800c12a:	9b04      	ldr	r3, [sp, #16]
 800c12c:	1b9b      	subs	r3, r3, r6
 800c12e:	6123      	str	r3, [r4, #16]
 800c130:	9b07      	ldr	r3, [sp, #28]
 800c132:	0021      	movs	r1, r4
 800c134:	9300      	str	r3, [sp, #0]
 800c136:	9805      	ldr	r0, [sp, #20]
 800c138:	9b06      	ldr	r3, [sp, #24]
 800c13a:	aa09      	add	r2, sp, #36	; 0x24
 800c13c:	f7ff fef2 	bl	800bf24 <_printf_common>
 800c140:	3001      	adds	r0, #1
 800c142:	d147      	bne.n	800c1d4 <_printf_i+0x1d0>
 800c144:	2001      	movs	r0, #1
 800c146:	4240      	negs	r0, r0
 800c148:	b00b      	add	sp, #44	; 0x2c
 800c14a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c14c:	2220      	movs	r2, #32
 800c14e:	6809      	ldr	r1, [r1, #0]
 800c150:	430a      	orrs	r2, r1
 800c152:	6022      	str	r2, [r4, #0]
 800c154:	2278      	movs	r2, #120	; 0x78
 800c156:	4932      	ldr	r1, [pc, #200]	; (800c220 <_printf_i+0x21c>)
 800c158:	9103      	str	r1, [sp, #12]
 800c15a:	0021      	movs	r1, r4
 800c15c:	3145      	adds	r1, #69	; 0x45
 800c15e:	700a      	strb	r2, [r1, #0]
 800c160:	6819      	ldr	r1, [r3, #0]
 800c162:	6822      	ldr	r2, [r4, #0]
 800c164:	c920      	ldmia	r1!, {r5}
 800c166:	0610      	lsls	r0, r2, #24
 800c168:	d402      	bmi.n	800c170 <_printf_i+0x16c>
 800c16a:	0650      	lsls	r0, r2, #25
 800c16c:	d500      	bpl.n	800c170 <_printf_i+0x16c>
 800c16e:	b2ad      	uxth	r5, r5
 800c170:	6019      	str	r1, [r3, #0]
 800c172:	07d3      	lsls	r3, r2, #31
 800c174:	d502      	bpl.n	800c17c <_printf_i+0x178>
 800c176:	2320      	movs	r3, #32
 800c178:	4313      	orrs	r3, r2
 800c17a:	6023      	str	r3, [r4, #0]
 800c17c:	2710      	movs	r7, #16
 800c17e:	2d00      	cmp	r5, #0
 800c180:	d1a9      	bne.n	800c0d6 <_printf_i+0xd2>
 800c182:	2220      	movs	r2, #32
 800c184:	6823      	ldr	r3, [r4, #0]
 800c186:	4393      	bics	r3, r2
 800c188:	6023      	str	r3, [r4, #0]
 800c18a:	e7a4      	b.n	800c0d6 <_printf_i+0xd2>
 800c18c:	681a      	ldr	r2, [r3, #0]
 800c18e:	680d      	ldr	r5, [r1, #0]
 800c190:	1d10      	adds	r0, r2, #4
 800c192:	6949      	ldr	r1, [r1, #20]
 800c194:	6018      	str	r0, [r3, #0]
 800c196:	6813      	ldr	r3, [r2, #0]
 800c198:	062e      	lsls	r6, r5, #24
 800c19a:	d501      	bpl.n	800c1a0 <_printf_i+0x19c>
 800c19c:	6019      	str	r1, [r3, #0]
 800c19e:	e002      	b.n	800c1a6 <_printf_i+0x1a2>
 800c1a0:	066d      	lsls	r5, r5, #25
 800c1a2:	d5fb      	bpl.n	800c19c <_printf_i+0x198>
 800c1a4:	8019      	strh	r1, [r3, #0]
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	9e04      	ldr	r6, [sp, #16]
 800c1aa:	6123      	str	r3, [r4, #16]
 800c1ac:	e7c0      	b.n	800c130 <_printf_i+0x12c>
 800c1ae:	681a      	ldr	r2, [r3, #0]
 800c1b0:	1d11      	adds	r1, r2, #4
 800c1b2:	6019      	str	r1, [r3, #0]
 800c1b4:	6816      	ldr	r6, [r2, #0]
 800c1b6:	2100      	movs	r1, #0
 800c1b8:	0030      	movs	r0, r6
 800c1ba:	6862      	ldr	r2, [r4, #4]
 800c1bc:	f000 f9a0 	bl	800c500 <memchr>
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	d001      	beq.n	800c1c8 <_printf_i+0x1c4>
 800c1c4:	1b80      	subs	r0, r0, r6
 800c1c6:	6060      	str	r0, [r4, #4]
 800c1c8:	6863      	ldr	r3, [r4, #4]
 800c1ca:	6123      	str	r3, [r4, #16]
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	9a04      	ldr	r2, [sp, #16]
 800c1d0:	7013      	strb	r3, [r2, #0]
 800c1d2:	e7ad      	b.n	800c130 <_printf_i+0x12c>
 800c1d4:	0032      	movs	r2, r6
 800c1d6:	6923      	ldr	r3, [r4, #16]
 800c1d8:	9906      	ldr	r1, [sp, #24]
 800c1da:	9805      	ldr	r0, [sp, #20]
 800c1dc:	9d07      	ldr	r5, [sp, #28]
 800c1de:	47a8      	blx	r5
 800c1e0:	3001      	adds	r0, #1
 800c1e2:	d0af      	beq.n	800c144 <_printf_i+0x140>
 800c1e4:	6823      	ldr	r3, [r4, #0]
 800c1e6:	079b      	lsls	r3, r3, #30
 800c1e8:	d415      	bmi.n	800c216 <_printf_i+0x212>
 800c1ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ec:	68e0      	ldr	r0, [r4, #12]
 800c1ee:	4298      	cmp	r0, r3
 800c1f0:	daaa      	bge.n	800c148 <_printf_i+0x144>
 800c1f2:	0018      	movs	r0, r3
 800c1f4:	e7a8      	b.n	800c148 <_printf_i+0x144>
 800c1f6:	0022      	movs	r2, r4
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	9906      	ldr	r1, [sp, #24]
 800c1fc:	9805      	ldr	r0, [sp, #20]
 800c1fe:	9e07      	ldr	r6, [sp, #28]
 800c200:	3219      	adds	r2, #25
 800c202:	47b0      	blx	r6
 800c204:	3001      	adds	r0, #1
 800c206:	d09d      	beq.n	800c144 <_printf_i+0x140>
 800c208:	3501      	adds	r5, #1
 800c20a:	68e3      	ldr	r3, [r4, #12]
 800c20c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c20e:	1a9b      	subs	r3, r3, r2
 800c210:	42ab      	cmp	r3, r5
 800c212:	dcf0      	bgt.n	800c1f6 <_printf_i+0x1f2>
 800c214:	e7e9      	b.n	800c1ea <_printf_i+0x1e6>
 800c216:	2500      	movs	r5, #0
 800c218:	e7f7      	b.n	800c20a <_printf_i+0x206>
 800c21a:	46c0      	nop			; (mov r8, r8)
 800c21c:	0800cfd9 	.word	0x0800cfd9
 800c220:	0800cfea 	.word	0x0800cfea

0800c224 <__sflush_r>:
 800c224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c226:	898b      	ldrh	r3, [r1, #12]
 800c228:	0005      	movs	r5, r0
 800c22a:	000c      	movs	r4, r1
 800c22c:	071a      	lsls	r2, r3, #28
 800c22e:	d45c      	bmi.n	800c2ea <__sflush_r+0xc6>
 800c230:	684a      	ldr	r2, [r1, #4]
 800c232:	2a00      	cmp	r2, #0
 800c234:	dc04      	bgt.n	800c240 <__sflush_r+0x1c>
 800c236:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c238:	2a00      	cmp	r2, #0
 800c23a:	dc01      	bgt.n	800c240 <__sflush_r+0x1c>
 800c23c:	2000      	movs	r0, #0
 800c23e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c240:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c242:	2f00      	cmp	r7, #0
 800c244:	d0fa      	beq.n	800c23c <__sflush_r+0x18>
 800c246:	2200      	movs	r2, #0
 800c248:	2080      	movs	r0, #128	; 0x80
 800c24a:	682e      	ldr	r6, [r5, #0]
 800c24c:	602a      	str	r2, [r5, #0]
 800c24e:	001a      	movs	r2, r3
 800c250:	0140      	lsls	r0, r0, #5
 800c252:	6a21      	ldr	r1, [r4, #32]
 800c254:	4002      	ands	r2, r0
 800c256:	4203      	tst	r3, r0
 800c258:	d034      	beq.n	800c2c4 <__sflush_r+0xa0>
 800c25a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c25c:	89a3      	ldrh	r3, [r4, #12]
 800c25e:	075b      	lsls	r3, r3, #29
 800c260:	d506      	bpl.n	800c270 <__sflush_r+0x4c>
 800c262:	6863      	ldr	r3, [r4, #4]
 800c264:	1ac0      	subs	r0, r0, r3
 800c266:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d001      	beq.n	800c270 <__sflush_r+0x4c>
 800c26c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c26e:	1ac0      	subs	r0, r0, r3
 800c270:	0002      	movs	r2, r0
 800c272:	2300      	movs	r3, #0
 800c274:	0028      	movs	r0, r5
 800c276:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c278:	6a21      	ldr	r1, [r4, #32]
 800c27a:	47b8      	blx	r7
 800c27c:	89a2      	ldrh	r2, [r4, #12]
 800c27e:	1c43      	adds	r3, r0, #1
 800c280:	d106      	bne.n	800c290 <__sflush_r+0x6c>
 800c282:	6829      	ldr	r1, [r5, #0]
 800c284:	291d      	cmp	r1, #29
 800c286:	d82c      	bhi.n	800c2e2 <__sflush_r+0xbe>
 800c288:	4b2a      	ldr	r3, [pc, #168]	; (800c334 <__sflush_r+0x110>)
 800c28a:	410b      	asrs	r3, r1
 800c28c:	07db      	lsls	r3, r3, #31
 800c28e:	d428      	bmi.n	800c2e2 <__sflush_r+0xbe>
 800c290:	2300      	movs	r3, #0
 800c292:	6063      	str	r3, [r4, #4]
 800c294:	6923      	ldr	r3, [r4, #16]
 800c296:	6023      	str	r3, [r4, #0]
 800c298:	04d2      	lsls	r2, r2, #19
 800c29a:	d505      	bpl.n	800c2a8 <__sflush_r+0x84>
 800c29c:	1c43      	adds	r3, r0, #1
 800c29e:	d102      	bne.n	800c2a6 <__sflush_r+0x82>
 800c2a0:	682b      	ldr	r3, [r5, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d100      	bne.n	800c2a8 <__sflush_r+0x84>
 800c2a6:	6560      	str	r0, [r4, #84]	; 0x54
 800c2a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2aa:	602e      	str	r6, [r5, #0]
 800c2ac:	2900      	cmp	r1, #0
 800c2ae:	d0c5      	beq.n	800c23c <__sflush_r+0x18>
 800c2b0:	0023      	movs	r3, r4
 800c2b2:	3344      	adds	r3, #68	; 0x44
 800c2b4:	4299      	cmp	r1, r3
 800c2b6:	d002      	beq.n	800c2be <__sflush_r+0x9a>
 800c2b8:	0028      	movs	r0, r5
 800c2ba:	f7ff fbf1 	bl	800baa0 <_free_r>
 800c2be:	2000      	movs	r0, #0
 800c2c0:	6360      	str	r0, [r4, #52]	; 0x34
 800c2c2:	e7bc      	b.n	800c23e <__sflush_r+0x1a>
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	0028      	movs	r0, r5
 800c2c8:	47b8      	blx	r7
 800c2ca:	1c43      	adds	r3, r0, #1
 800c2cc:	d1c6      	bne.n	800c25c <__sflush_r+0x38>
 800c2ce:	682b      	ldr	r3, [r5, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d0c3      	beq.n	800c25c <__sflush_r+0x38>
 800c2d4:	2b1d      	cmp	r3, #29
 800c2d6:	d001      	beq.n	800c2dc <__sflush_r+0xb8>
 800c2d8:	2b16      	cmp	r3, #22
 800c2da:	d101      	bne.n	800c2e0 <__sflush_r+0xbc>
 800c2dc:	602e      	str	r6, [r5, #0]
 800c2de:	e7ad      	b.n	800c23c <__sflush_r+0x18>
 800c2e0:	89a2      	ldrh	r2, [r4, #12]
 800c2e2:	2340      	movs	r3, #64	; 0x40
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	81a3      	strh	r3, [r4, #12]
 800c2e8:	e7a9      	b.n	800c23e <__sflush_r+0x1a>
 800c2ea:	690e      	ldr	r6, [r1, #16]
 800c2ec:	2e00      	cmp	r6, #0
 800c2ee:	d0a5      	beq.n	800c23c <__sflush_r+0x18>
 800c2f0:	680f      	ldr	r7, [r1, #0]
 800c2f2:	600e      	str	r6, [r1, #0]
 800c2f4:	1bba      	subs	r2, r7, r6
 800c2f6:	9201      	str	r2, [sp, #4]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	079b      	lsls	r3, r3, #30
 800c2fc:	d100      	bne.n	800c300 <__sflush_r+0xdc>
 800c2fe:	694a      	ldr	r2, [r1, #20]
 800c300:	60a2      	str	r2, [r4, #8]
 800c302:	9b01      	ldr	r3, [sp, #4]
 800c304:	2b00      	cmp	r3, #0
 800c306:	dd99      	ble.n	800c23c <__sflush_r+0x18>
 800c308:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c30a:	0032      	movs	r2, r6
 800c30c:	001f      	movs	r7, r3
 800c30e:	0028      	movs	r0, r5
 800c310:	9b01      	ldr	r3, [sp, #4]
 800c312:	6a21      	ldr	r1, [r4, #32]
 800c314:	47b8      	blx	r7
 800c316:	2800      	cmp	r0, #0
 800c318:	dc06      	bgt.n	800c328 <__sflush_r+0x104>
 800c31a:	2340      	movs	r3, #64	; 0x40
 800c31c:	2001      	movs	r0, #1
 800c31e:	89a2      	ldrh	r2, [r4, #12]
 800c320:	4240      	negs	r0, r0
 800c322:	4313      	orrs	r3, r2
 800c324:	81a3      	strh	r3, [r4, #12]
 800c326:	e78a      	b.n	800c23e <__sflush_r+0x1a>
 800c328:	9b01      	ldr	r3, [sp, #4]
 800c32a:	1836      	adds	r6, r6, r0
 800c32c:	1a1b      	subs	r3, r3, r0
 800c32e:	9301      	str	r3, [sp, #4]
 800c330:	e7e7      	b.n	800c302 <__sflush_r+0xde>
 800c332:	46c0      	nop			; (mov r8, r8)
 800c334:	dfbffffe 	.word	0xdfbffffe

0800c338 <_fflush_r>:
 800c338:	690b      	ldr	r3, [r1, #16]
 800c33a:	b570      	push	{r4, r5, r6, lr}
 800c33c:	0005      	movs	r5, r0
 800c33e:	000c      	movs	r4, r1
 800c340:	2b00      	cmp	r3, #0
 800c342:	d102      	bne.n	800c34a <_fflush_r+0x12>
 800c344:	2500      	movs	r5, #0
 800c346:	0028      	movs	r0, r5
 800c348:	bd70      	pop	{r4, r5, r6, pc}
 800c34a:	2800      	cmp	r0, #0
 800c34c:	d004      	beq.n	800c358 <_fflush_r+0x20>
 800c34e:	6a03      	ldr	r3, [r0, #32]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d101      	bne.n	800c358 <_fflush_r+0x20>
 800c354:	f7ff fa76 	bl	800b844 <__sinit>
 800c358:	220c      	movs	r2, #12
 800c35a:	5ea3      	ldrsh	r3, [r4, r2]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d0f1      	beq.n	800c344 <_fflush_r+0xc>
 800c360:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c362:	07d2      	lsls	r2, r2, #31
 800c364:	d404      	bmi.n	800c370 <_fflush_r+0x38>
 800c366:	059b      	lsls	r3, r3, #22
 800c368:	d402      	bmi.n	800c370 <_fflush_r+0x38>
 800c36a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c36c:	f7ff fb8c 	bl	800ba88 <__retarget_lock_acquire_recursive>
 800c370:	0028      	movs	r0, r5
 800c372:	0021      	movs	r1, r4
 800c374:	f7ff ff56 	bl	800c224 <__sflush_r>
 800c378:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c37a:	0005      	movs	r5, r0
 800c37c:	07db      	lsls	r3, r3, #31
 800c37e:	d4e2      	bmi.n	800c346 <_fflush_r+0xe>
 800c380:	89a3      	ldrh	r3, [r4, #12]
 800c382:	059b      	lsls	r3, r3, #22
 800c384:	d4df      	bmi.n	800c346 <_fflush_r+0xe>
 800c386:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c388:	f7ff fb7f 	bl	800ba8a <__retarget_lock_release_recursive>
 800c38c:	e7db      	b.n	800c346 <_fflush_r+0xe>

0800c38e <__swbuf_r>:
 800c38e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c390:	0006      	movs	r6, r0
 800c392:	000d      	movs	r5, r1
 800c394:	0014      	movs	r4, r2
 800c396:	2800      	cmp	r0, #0
 800c398:	d004      	beq.n	800c3a4 <__swbuf_r+0x16>
 800c39a:	6a03      	ldr	r3, [r0, #32]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d101      	bne.n	800c3a4 <__swbuf_r+0x16>
 800c3a0:	f7ff fa50 	bl	800b844 <__sinit>
 800c3a4:	69a3      	ldr	r3, [r4, #24]
 800c3a6:	60a3      	str	r3, [r4, #8]
 800c3a8:	89a3      	ldrh	r3, [r4, #12]
 800c3aa:	071b      	lsls	r3, r3, #28
 800c3ac:	d528      	bpl.n	800c400 <__swbuf_r+0x72>
 800c3ae:	6923      	ldr	r3, [r4, #16]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d025      	beq.n	800c400 <__swbuf_r+0x72>
 800c3b4:	6923      	ldr	r3, [r4, #16]
 800c3b6:	6820      	ldr	r0, [r4, #0]
 800c3b8:	b2ef      	uxtb	r7, r5
 800c3ba:	1ac0      	subs	r0, r0, r3
 800c3bc:	6963      	ldr	r3, [r4, #20]
 800c3be:	b2ed      	uxtb	r5, r5
 800c3c0:	4283      	cmp	r3, r0
 800c3c2:	dc05      	bgt.n	800c3d0 <__swbuf_r+0x42>
 800c3c4:	0021      	movs	r1, r4
 800c3c6:	0030      	movs	r0, r6
 800c3c8:	f7ff ffb6 	bl	800c338 <_fflush_r>
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	d11d      	bne.n	800c40c <__swbuf_r+0x7e>
 800c3d0:	68a3      	ldr	r3, [r4, #8]
 800c3d2:	3001      	adds	r0, #1
 800c3d4:	3b01      	subs	r3, #1
 800c3d6:	60a3      	str	r3, [r4, #8]
 800c3d8:	6823      	ldr	r3, [r4, #0]
 800c3da:	1c5a      	adds	r2, r3, #1
 800c3dc:	6022      	str	r2, [r4, #0]
 800c3de:	701f      	strb	r7, [r3, #0]
 800c3e0:	6963      	ldr	r3, [r4, #20]
 800c3e2:	4283      	cmp	r3, r0
 800c3e4:	d004      	beq.n	800c3f0 <__swbuf_r+0x62>
 800c3e6:	89a3      	ldrh	r3, [r4, #12]
 800c3e8:	07db      	lsls	r3, r3, #31
 800c3ea:	d507      	bpl.n	800c3fc <__swbuf_r+0x6e>
 800c3ec:	2d0a      	cmp	r5, #10
 800c3ee:	d105      	bne.n	800c3fc <__swbuf_r+0x6e>
 800c3f0:	0021      	movs	r1, r4
 800c3f2:	0030      	movs	r0, r6
 800c3f4:	f7ff ffa0 	bl	800c338 <_fflush_r>
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	d107      	bne.n	800c40c <__swbuf_r+0x7e>
 800c3fc:	0028      	movs	r0, r5
 800c3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c400:	0021      	movs	r1, r4
 800c402:	0030      	movs	r0, r6
 800c404:	f000 f806 	bl	800c414 <__swsetup_r>
 800c408:	2800      	cmp	r0, #0
 800c40a:	d0d3      	beq.n	800c3b4 <__swbuf_r+0x26>
 800c40c:	2501      	movs	r5, #1
 800c40e:	426d      	negs	r5, r5
 800c410:	e7f4      	b.n	800c3fc <__swbuf_r+0x6e>
	...

0800c414 <__swsetup_r>:
 800c414:	4b30      	ldr	r3, [pc, #192]	; (800c4d8 <__swsetup_r+0xc4>)
 800c416:	b570      	push	{r4, r5, r6, lr}
 800c418:	0005      	movs	r5, r0
 800c41a:	6818      	ldr	r0, [r3, #0]
 800c41c:	000c      	movs	r4, r1
 800c41e:	2800      	cmp	r0, #0
 800c420:	d004      	beq.n	800c42c <__swsetup_r+0x18>
 800c422:	6a03      	ldr	r3, [r0, #32]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d101      	bne.n	800c42c <__swsetup_r+0x18>
 800c428:	f7ff fa0c 	bl	800b844 <__sinit>
 800c42c:	230c      	movs	r3, #12
 800c42e:	5ee2      	ldrsh	r2, [r4, r3]
 800c430:	b293      	uxth	r3, r2
 800c432:	0711      	lsls	r1, r2, #28
 800c434:	d423      	bmi.n	800c47e <__swsetup_r+0x6a>
 800c436:	06d9      	lsls	r1, r3, #27
 800c438:	d407      	bmi.n	800c44a <__swsetup_r+0x36>
 800c43a:	2309      	movs	r3, #9
 800c43c:	2001      	movs	r0, #1
 800c43e:	602b      	str	r3, [r5, #0]
 800c440:	3337      	adds	r3, #55	; 0x37
 800c442:	4313      	orrs	r3, r2
 800c444:	81a3      	strh	r3, [r4, #12]
 800c446:	4240      	negs	r0, r0
 800c448:	bd70      	pop	{r4, r5, r6, pc}
 800c44a:	075b      	lsls	r3, r3, #29
 800c44c:	d513      	bpl.n	800c476 <__swsetup_r+0x62>
 800c44e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c450:	2900      	cmp	r1, #0
 800c452:	d008      	beq.n	800c466 <__swsetup_r+0x52>
 800c454:	0023      	movs	r3, r4
 800c456:	3344      	adds	r3, #68	; 0x44
 800c458:	4299      	cmp	r1, r3
 800c45a:	d002      	beq.n	800c462 <__swsetup_r+0x4e>
 800c45c:	0028      	movs	r0, r5
 800c45e:	f7ff fb1f 	bl	800baa0 <_free_r>
 800c462:	2300      	movs	r3, #0
 800c464:	6363      	str	r3, [r4, #52]	; 0x34
 800c466:	2224      	movs	r2, #36	; 0x24
 800c468:	89a3      	ldrh	r3, [r4, #12]
 800c46a:	4393      	bics	r3, r2
 800c46c:	81a3      	strh	r3, [r4, #12]
 800c46e:	2300      	movs	r3, #0
 800c470:	6063      	str	r3, [r4, #4]
 800c472:	6923      	ldr	r3, [r4, #16]
 800c474:	6023      	str	r3, [r4, #0]
 800c476:	2308      	movs	r3, #8
 800c478:	89a2      	ldrh	r2, [r4, #12]
 800c47a:	4313      	orrs	r3, r2
 800c47c:	81a3      	strh	r3, [r4, #12]
 800c47e:	6923      	ldr	r3, [r4, #16]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d10b      	bne.n	800c49c <__swsetup_r+0x88>
 800c484:	21a0      	movs	r1, #160	; 0xa0
 800c486:	2280      	movs	r2, #128	; 0x80
 800c488:	89a3      	ldrh	r3, [r4, #12]
 800c48a:	0089      	lsls	r1, r1, #2
 800c48c:	0092      	lsls	r2, r2, #2
 800c48e:	400b      	ands	r3, r1
 800c490:	4293      	cmp	r3, r2
 800c492:	d003      	beq.n	800c49c <__swsetup_r+0x88>
 800c494:	0021      	movs	r1, r4
 800c496:	0028      	movs	r0, r5
 800c498:	f000 f866 	bl	800c568 <__smakebuf_r>
 800c49c:	220c      	movs	r2, #12
 800c49e:	5ea3      	ldrsh	r3, [r4, r2]
 800c4a0:	2001      	movs	r0, #1
 800c4a2:	001a      	movs	r2, r3
 800c4a4:	b299      	uxth	r1, r3
 800c4a6:	4002      	ands	r2, r0
 800c4a8:	4203      	tst	r3, r0
 800c4aa:	d00f      	beq.n	800c4cc <__swsetup_r+0xb8>
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	60a2      	str	r2, [r4, #8]
 800c4b0:	6962      	ldr	r2, [r4, #20]
 800c4b2:	4252      	negs	r2, r2
 800c4b4:	61a2      	str	r2, [r4, #24]
 800c4b6:	2000      	movs	r0, #0
 800c4b8:	6922      	ldr	r2, [r4, #16]
 800c4ba:	4282      	cmp	r2, r0
 800c4bc:	d1c4      	bne.n	800c448 <__swsetup_r+0x34>
 800c4be:	0609      	lsls	r1, r1, #24
 800c4c0:	d5c2      	bpl.n	800c448 <__swsetup_r+0x34>
 800c4c2:	2240      	movs	r2, #64	; 0x40
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	81a3      	strh	r3, [r4, #12]
 800c4c8:	3801      	subs	r0, #1
 800c4ca:	e7bd      	b.n	800c448 <__swsetup_r+0x34>
 800c4cc:	0788      	lsls	r0, r1, #30
 800c4ce:	d400      	bmi.n	800c4d2 <__swsetup_r+0xbe>
 800c4d0:	6962      	ldr	r2, [r4, #20]
 800c4d2:	60a2      	str	r2, [r4, #8]
 800c4d4:	e7ef      	b.n	800c4b6 <__swsetup_r+0xa2>
 800c4d6:	46c0      	nop			; (mov r8, r8)
 800c4d8:	20000068 	.word	0x20000068

0800c4dc <_sbrk_r>:
 800c4dc:	2300      	movs	r3, #0
 800c4de:	b570      	push	{r4, r5, r6, lr}
 800c4e0:	4d06      	ldr	r5, [pc, #24]	; (800c4fc <_sbrk_r+0x20>)
 800c4e2:	0004      	movs	r4, r0
 800c4e4:	0008      	movs	r0, r1
 800c4e6:	602b      	str	r3, [r5, #0]
 800c4e8:	f7f7 f86a 	bl	80035c0 <_sbrk>
 800c4ec:	1c43      	adds	r3, r0, #1
 800c4ee:	d103      	bne.n	800c4f8 <_sbrk_r+0x1c>
 800c4f0:	682b      	ldr	r3, [r5, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d000      	beq.n	800c4f8 <_sbrk_r+0x1c>
 800c4f6:	6023      	str	r3, [r4, #0]
 800c4f8:	bd70      	pop	{r4, r5, r6, pc}
 800c4fa:	46c0      	nop			; (mov r8, r8)
 800c4fc:	20001678 	.word	0x20001678

0800c500 <memchr>:
 800c500:	b2c9      	uxtb	r1, r1
 800c502:	1882      	adds	r2, r0, r2
 800c504:	4290      	cmp	r0, r2
 800c506:	d101      	bne.n	800c50c <memchr+0xc>
 800c508:	2000      	movs	r0, #0
 800c50a:	4770      	bx	lr
 800c50c:	7803      	ldrb	r3, [r0, #0]
 800c50e:	428b      	cmp	r3, r1
 800c510:	d0fb      	beq.n	800c50a <memchr+0xa>
 800c512:	3001      	adds	r0, #1
 800c514:	e7f6      	b.n	800c504 <memchr+0x4>
	...

0800c518 <__swhatbuf_r>:
 800c518:	b570      	push	{r4, r5, r6, lr}
 800c51a:	000e      	movs	r6, r1
 800c51c:	001d      	movs	r5, r3
 800c51e:	230e      	movs	r3, #14
 800c520:	5ec9      	ldrsh	r1, [r1, r3]
 800c522:	0014      	movs	r4, r2
 800c524:	b096      	sub	sp, #88	; 0x58
 800c526:	2900      	cmp	r1, #0
 800c528:	da0c      	bge.n	800c544 <__swhatbuf_r+0x2c>
 800c52a:	89b2      	ldrh	r2, [r6, #12]
 800c52c:	2380      	movs	r3, #128	; 0x80
 800c52e:	0011      	movs	r1, r2
 800c530:	4019      	ands	r1, r3
 800c532:	421a      	tst	r2, r3
 800c534:	d013      	beq.n	800c55e <__swhatbuf_r+0x46>
 800c536:	2100      	movs	r1, #0
 800c538:	3b40      	subs	r3, #64	; 0x40
 800c53a:	2000      	movs	r0, #0
 800c53c:	6029      	str	r1, [r5, #0]
 800c53e:	6023      	str	r3, [r4, #0]
 800c540:	b016      	add	sp, #88	; 0x58
 800c542:	bd70      	pop	{r4, r5, r6, pc}
 800c544:	466a      	mov	r2, sp
 800c546:	f000 f84d 	bl	800c5e4 <_fstat_r>
 800c54a:	2800      	cmp	r0, #0
 800c54c:	dbed      	blt.n	800c52a <__swhatbuf_r+0x12>
 800c54e:	23f0      	movs	r3, #240	; 0xf0
 800c550:	9901      	ldr	r1, [sp, #4]
 800c552:	021b      	lsls	r3, r3, #8
 800c554:	4019      	ands	r1, r3
 800c556:	4b03      	ldr	r3, [pc, #12]	; (800c564 <__swhatbuf_r+0x4c>)
 800c558:	18c9      	adds	r1, r1, r3
 800c55a:	424b      	negs	r3, r1
 800c55c:	4159      	adcs	r1, r3
 800c55e:	2380      	movs	r3, #128	; 0x80
 800c560:	00db      	lsls	r3, r3, #3
 800c562:	e7ea      	b.n	800c53a <__swhatbuf_r+0x22>
 800c564:	ffffe000 	.word	0xffffe000

0800c568 <__smakebuf_r>:
 800c568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c56a:	2602      	movs	r6, #2
 800c56c:	898b      	ldrh	r3, [r1, #12]
 800c56e:	0005      	movs	r5, r0
 800c570:	000c      	movs	r4, r1
 800c572:	4233      	tst	r3, r6
 800c574:	d006      	beq.n	800c584 <__smakebuf_r+0x1c>
 800c576:	0023      	movs	r3, r4
 800c578:	3347      	adds	r3, #71	; 0x47
 800c57a:	6023      	str	r3, [r4, #0]
 800c57c:	6123      	str	r3, [r4, #16]
 800c57e:	2301      	movs	r3, #1
 800c580:	6163      	str	r3, [r4, #20]
 800c582:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c584:	466a      	mov	r2, sp
 800c586:	ab01      	add	r3, sp, #4
 800c588:	f7ff ffc6 	bl	800c518 <__swhatbuf_r>
 800c58c:	9900      	ldr	r1, [sp, #0]
 800c58e:	0007      	movs	r7, r0
 800c590:	0028      	movs	r0, r5
 800c592:	f7ff faf1 	bl	800bb78 <_malloc_r>
 800c596:	2800      	cmp	r0, #0
 800c598:	d108      	bne.n	800c5ac <__smakebuf_r+0x44>
 800c59a:	220c      	movs	r2, #12
 800c59c:	5ea3      	ldrsh	r3, [r4, r2]
 800c59e:	059a      	lsls	r2, r3, #22
 800c5a0:	d4ef      	bmi.n	800c582 <__smakebuf_r+0x1a>
 800c5a2:	2203      	movs	r2, #3
 800c5a4:	4393      	bics	r3, r2
 800c5a6:	431e      	orrs	r6, r3
 800c5a8:	81a6      	strh	r6, [r4, #12]
 800c5aa:	e7e4      	b.n	800c576 <__smakebuf_r+0xe>
 800c5ac:	2380      	movs	r3, #128	; 0x80
 800c5ae:	89a2      	ldrh	r2, [r4, #12]
 800c5b0:	6020      	str	r0, [r4, #0]
 800c5b2:	4313      	orrs	r3, r2
 800c5b4:	81a3      	strh	r3, [r4, #12]
 800c5b6:	9b00      	ldr	r3, [sp, #0]
 800c5b8:	6120      	str	r0, [r4, #16]
 800c5ba:	6163      	str	r3, [r4, #20]
 800c5bc:	9b01      	ldr	r3, [sp, #4]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d00c      	beq.n	800c5dc <__smakebuf_r+0x74>
 800c5c2:	0028      	movs	r0, r5
 800c5c4:	230e      	movs	r3, #14
 800c5c6:	5ee1      	ldrsh	r1, [r4, r3]
 800c5c8:	f000 f81e 	bl	800c608 <_isatty_r>
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	d005      	beq.n	800c5dc <__smakebuf_r+0x74>
 800c5d0:	2303      	movs	r3, #3
 800c5d2:	89a2      	ldrh	r2, [r4, #12]
 800c5d4:	439a      	bics	r2, r3
 800c5d6:	3b02      	subs	r3, #2
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	81a3      	strh	r3, [r4, #12]
 800c5dc:	89a3      	ldrh	r3, [r4, #12]
 800c5de:	433b      	orrs	r3, r7
 800c5e0:	81a3      	strh	r3, [r4, #12]
 800c5e2:	e7ce      	b.n	800c582 <__smakebuf_r+0x1a>

0800c5e4 <_fstat_r>:
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	b570      	push	{r4, r5, r6, lr}
 800c5e8:	4d06      	ldr	r5, [pc, #24]	; (800c604 <_fstat_r+0x20>)
 800c5ea:	0004      	movs	r4, r0
 800c5ec:	0008      	movs	r0, r1
 800c5ee:	0011      	movs	r1, r2
 800c5f0:	602b      	str	r3, [r5, #0]
 800c5f2:	f7f6 ffc2 	bl	800357a <_fstat>
 800c5f6:	1c43      	adds	r3, r0, #1
 800c5f8:	d103      	bne.n	800c602 <_fstat_r+0x1e>
 800c5fa:	682b      	ldr	r3, [r5, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d000      	beq.n	800c602 <_fstat_r+0x1e>
 800c600:	6023      	str	r3, [r4, #0]
 800c602:	bd70      	pop	{r4, r5, r6, pc}
 800c604:	20001678 	.word	0x20001678

0800c608 <_isatty_r>:
 800c608:	2300      	movs	r3, #0
 800c60a:	b570      	push	{r4, r5, r6, lr}
 800c60c:	4d06      	ldr	r5, [pc, #24]	; (800c628 <_isatty_r+0x20>)
 800c60e:	0004      	movs	r4, r0
 800c610:	0008      	movs	r0, r1
 800c612:	602b      	str	r3, [r5, #0]
 800c614:	f7f6 ffbf 	bl	8003596 <_isatty>
 800c618:	1c43      	adds	r3, r0, #1
 800c61a:	d103      	bne.n	800c624 <_isatty_r+0x1c>
 800c61c:	682b      	ldr	r3, [r5, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d000      	beq.n	800c624 <_isatty_r+0x1c>
 800c622:	6023      	str	r3, [r4, #0]
 800c624:	bd70      	pop	{r4, r5, r6, pc}
 800c626:	46c0      	nop			; (mov r8, r8)
 800c628:	20001678 	.word	0x20001678

0800c62c <atan>:
 800c62c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c62e:	4b98      	ldr	r3, [pc, #608]	; (800c890 <atan+0x264>)
 800c630:	b085      	sub	sp, #20
 800c632:	004e      	lsls	r6, r1, #1
 800c634:	0004      	movs	r4, r0
 800c636:	000d      	movs	r5, r1
 800c638:	9103      	str	r1, [sp, #12]
 800c63a:	0876      	lsrs	r6, r6, #1
 800c63c:	429e      	cmp	r6, r3
 800c63e:	dd18      	ble.n	800c672 <atan+0x46>
 800c640:	4b94      	ldr	r3, [pc, #592]	; (800c894 <atan+0x268>)
 800c642:	429e      	cmp	r6, r3
 800c644:	dc02      	bgt.n	800c64c <atan+0x20>
 800c646:	d10a      	bne.n	800c65e <atan+0x32>
 800c648:	2800      	cmp	r0, #0
 800c64a:	d008      	beq.n	800c65e <atan+0x32>
 800c64c:	0022      	movs	r2, r4
 800c64e:	002b      	movs	r3, r5
 800c650:	0020      	movs	r0, r4
 800c652:	0029      	movs	r1, r5
 800c654:	f7f4 fdfa 	bl	800124c <__aeabi_dadd>
 800c658:	0004      	movs	r4, r0
 800c65a:	000d      	movs	r5, r1
 800c65c:	e005      	b.n	800c66a <atan+0x3e>
 800c65e:	9b03      	ldr	r3, [sp, #12]
 800c660:	4c8d      	ldr	r4, [pc, #564]	; (800c898 <atan+0x26c>)
 800c662:	2b00      	cmp	r3, #0
 800c664:	dd00      	ble.n	800c668 <atan+0x3c>
 800c666:	e110      	b.n	800c88a <atan+0x25e>
 800c668:	4d8c      	ldr	r5, [pc, #560]	; (800c89c <atan+0x270>)
 800c66a:	0020      	movs	r0, r4
 800c66c:	0029      	movs	r1, r5
 800c66e:	b005      	add	sp, #20
 800c670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c672:	4b8b      	ldr	r3, [pc, #556]	; (800c8a0 <atan+0x274>)
 800c674:	429e      	cmp	r6, r3
 800c676:	dc0f      	bgt.n	800c698 <atan+0x6c>
 800c678:	4b8a      	ldr	r3, [pc, #552]	; (800c8a4 <atan+0x278>)
 800c67a:	429e      	cmp	r6, r3
 800c67c:	dc09      	bgt.n	800c692 <atan+0x66>
 800c67e:	4a8a      	ldr	r2, [pc, #552]	; (800c8a8 <atan+0x27c>)
 800c680:	4b8a      	ldr	r3, [pc, #552]	; (800c8ac <atan+0x280>)
 800c682:	f7f4 fde3 	bl	800124c <__aeabi_dadd>
 800c686:	2200      	movs	r2, #0
 800c688:	4b89      	ldr	r3, [pc, #548]	; (800c8b0 <atan+0x284>)
 800c68a:	f7f3 fee7 	bl	800045c <__aeabi_dcmpgt>
 800c68e:	2800      	cmp	r0, #0
 800c690:	d1eb      	bne.n	800c66a <atan+0x3e>
 800c692:	2301      	movs	r3, #1
 800c694:	425b      	negs	r3, r3
 800c696:	e025      	b.n	800c6e4 <atan+0xb8>
 800c698:	f000 f948 	bl	800c92c <fabs>
 800c69c:	4b85      	ldr	r3, [pc, #532]	; (800c8b4 <atan+0x288>)
 800c69e:	0004      	movs	r4, r0
 800c6a0:	000d      	movs	r5, r1
 800c6a2:	429e      	cmp	r6, r3
 800c6a4:	dd00      	ble.n	800c6a8 <atan+0x7c>
 800c6a6:	e0aa      	b.n	800c7fe <atan+0x1d2>
 800c6a8:	4b83      	ldr	r3, [pc, #524]	; (800c8b8 <atan+0x28c>)
 800c6aa:	429e      	cmp	r6, r3
 800c6ac:	dd00      	ble.n	800c6b0 <atan+0x84>
 800c6ae:	e090      	b.n	800c7d2 <atan+0x1a6>
 800c6b0:	0002      	movs	r2, r0
 800c6b2:	000b      	movs	r3, r1
 800c6b4:	f7f4 fdca 	bl	800124c <__aeabi_dadd>
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	4b7d      	ldr	r3, [pc, #500]	; (800c8b0 <atan+0x284>)
 800c6bc:	f7f5 ffe2 	bl	8002684 <__aeabi_dsub>
 800c6c0:	2380      	movs	r3, #128	; 0x80
 800c6c2:	0006      	movs	r6, r0
 800c6c4:	000f      	movs	r7, r1
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	0020      	movs	r0, r4
 800c6ca:	0029      	movs	r1, r5
 800c6cc:	05db      	lsls	r3, r3, #23
 800c6ce:	f7f4 fdbd 	bl	800124c <__aeabi_dadd>
 800c6d2:	000b      	movs	r3, r1
 800c6d4:	0002      	movs	r2, r0
 800c6d6:	0039      	movs	r1, r7
 800c6d8:	0030      	movs	r0, r6
 800c6da:	f7f5 f917 	bl	800190c <__aeabi_ddiv>
 800c6de:	2300      	movs	r3, #0
 800c6e0:	0004      	movs	r4, r0
 800c6e2:	000d      	movs	r5, r1
 800c6e4:	0022      	movs	r2, r4
 800c6e6:	9302      	str	r3, [sp, #8]
 800c6e8:	0020      	movs	r0, r4
 800c6ea:	002b      	movs	r3, r5
 800c6ec:	0029      	movs	r1, r5
 800c6ee:	f7f5 fd07 	bl	8002100 <__aeabi_dmul>
 800c6f2:	0002      	movs	r2, r0
 800c6f4:	000b      	movs	r3, r1
 800c6f6:	9000      	str	r0, [sp, #0]
 800c6f8:	9101      	str	r1, [sp, #4]
 800c6fa:	f7f5 fd01 	bl	8002100 <__aeabi_dmul>
 800c6fe:	0006      	movs	r6, r0
 800c700:	000f      	movs	r7, r1
 800c702:	4a6e      	ldr	r2, [pc, #440]	; (800c8bc <atan+0x290>)
 800c704:	4b6e      	ldr	r3, [pc, #440]	; (800c8c0 <atan+0x294>)
 800c706:	f7f5 fcfb 	bl	8002100 <__aeabi_dmul>
 800c70a:	4a6e      	ldr	r2, [pc, #440]	; (800c8c4 <atan+0x298>)
 800c70c:	4b6e      	ldr	r3, [pc, #440]	; (800c8c8 <atan+0x29c>)
 800c70e:	f7f4 fd9d 	bl	800124c <__aeabi_dadd>
 800c712:	0032      	movs	r2, r6
 800c714:	003b      	movs	r3, r7
 800c716:	f7f5 fcf3 	bl	8002100 <__aeabi_dmul>
 800c71a:	4a6c      	ldr	r2, [pc, #432]	; (800c8cc <atan+0x2a0>)
 800c71c:	4b6c      	ldr	r3, [pc, #432]	; (800c8d0 <atan+0x2a4>)
 800c71e:	f7f4 fd95 	bl	800124c <__aeabi_dadd>
 800c722:	0032      	movs	r2, r6
 800c724:	003b      	movs	r3, r7
 800c726:	f7f5 fceb 	bl	8002100 <__aeabi_dmul>
 800c72a:	4a6a      	ldr	r2, [pc, #424]	; (800c8d4 <atan+0x2a8>)
 800c72c:	4b6a      	ldr	r3, [pc, #424]	; (800c8d8 <atan+0x2ac>)
 800c72e:	f7f4 fd8d 	bl	800124c <__aeabi_dadd>
 800c732:	0032      	movs	r2, r6
 800c734:	003b      	movs	r3, r7
 800c736:	f7f5 fce3 	bl	8002100 <__aeabi_dmul>
 800c73a:	4a68      	ldr	r2, [pc, #416]	; (800c8dc <atan+0x2b0>)
 800c73c:	4b68      	ldr	r3, [pc, #416]	; (800c8e0 <atan+0x2b4>)
 800c73e:	f7f4 fd85 	bl	800124c <__aeabi_dadd>
 800c742:	0032      	movs	r2, r6
 800c744:	003b      	movs	r3, r7
 800c746:	f7f5 fcdb 	bl	8002100 <__aeabi_dmul>
 800c74a:	4a66      	ldr	r2, [pc, #408]	; (800c8e4 <atan+0x2b8>)
 800c74c:	4b66      	ldr	r3, [pc, #408]	; (800c8e8 <atan+0x2bc>)
 800c74e:	f7f4 fd7d 	bl	800124c <__aeabi_dadd>
 800c752:	9a00      	ldr	r2, [sp, #0]
 800c754:	9b01      	ldr	r3, [sp, #4]
 800c756:	f7f5 fcd3 	bl	8002100 <__aeabi_dmul>
 800c75a:	4a64      	ldr	r2, [pc, #400]	; (800c8ec <atan+0x2c0>)
 800c75c:	9000      	str	r0, [sp, #0]
 800c75e:	9101      	str	r1, [sp, #4]
 800c760:	4b63      	ldr	r3, [pc, #396]	; (800c8f0 <atan+0x2c4>)
 800c762:	0030      	movs	r0, r6
 800c764:	0039      	movs	r1, r7
 800c766:	f7f5 fccb 	bl	8002100 <__aeabi_dmul>
 800c76a:	4a62      	ldr	r2, [pc, #392]	; (800c8f4 <atan+0x2c8>)
 800c76c:	4b62      	ldr	r3, [pc, #392]	; (800c8f8 <atan+0x2cc>)
 800c76e:	f7f5 ff89 	bl	8002684 <__aeabi_dsub>
 800c772:	0032      	movs	r2, r6
 800c774:	003b      	movs	r3, r7
 800c776:	f7f5 fcc3 	bl	8002100 <__aeabi_dmul>
 800c77a:	4a60      	ldr	r2, [pc, #384]	; (800c8fc <atan+0x2d0>)
 800c77c:	4b60      	ldr	r3, [pc, #384]	; (800c900 <atan+0x2d4>)
 800c77e:	f7f5 ff81 	bl	8002684 <__aeabi_dsub>
 800c782:	0032      	movs	r2, r6
 800c784:	003b      	movs	r3, r7
 800c786:	f7f5 fcbb 	bl	8002100 <__aeabi_dmul>
 800c78a:	4a5e      	ldr	r2, [pc, #376]	; (800c904 <atan+0x2d8>)
 800c78c:	4b5e      	ldr	r3, [pc, #376]	; (800c908 <atan+0x2dc>)
 800c78e:	f7f5 ff79 	bl	8002684 <__aeabi_dsub>
 800c792:	0032      	movs	r2, r6
 800c794:	003b      	movs	r3, r7
 800c796:	f7f5 fcb3 	bl	8002100 <__aeabi_dmul>
 800c79a:	4a5c      	ldr	r2, [pc, #368]	; (800c90c <atan+0x2e0>)
 800c79c:	4b5c      	ldr	r3, [pc, #368]	; (800c910 <atan+0x2e4>)
 800c79e:	f7f5 ff71 	bl	8002684 <__aeabi_dsub>
 800c7a2:	0032      	movs	r2, r6
 800c7a4:	003b      	movs	r3, r7
 800c7a6:	f7f5 fcab 	bl	8002100 <__aeabi_dmul>
 800c7aa:	0002      	movs	r2, r0
 800c7ac:	000b      	movs	r3, r1
 800c7ae:	9800      	ldr	r0, [sp, #0]
 800c7b0:	9901      	ldr	r1, [sp, #4]
 800c7b2:	f7f4 fd4b 	bl	800124c <__aeabi_dadd>
 800c7b6:	002b      	movs	r3, r5
 800c7b8:	0022      	movs	r2, r4
 800c7ba:	f7f5 fca1 	bl	8002100 <__aeabi_dmul>
 800c7be:	9b02      	ldr	r3, [sp, #8]
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	d143      	bne.n	800c84c <atan+0x220>
 800c7c4:	0002      	movs	r2, r0
 800c7c6:	000b      	movs	r3, r1
 800c7c8:	0020      	movs	r0, r4
 800c7ca:	0029      	movs	r1, r5
 800c7cc:	f7f5 ff5a 	bl	8002684 <__aeabi_dsub>
 800c7d0:	e742      	b.n	800c658 <atan+0x2c>
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	4b36      	ldr	r3, [pc, #216]	; (800c8b0 <atan+0x284>)
 800c7d6:	f7f5 ff55 	bl	8002684 <__aeabi_dsub>
 800c7da:	2200      	movs	r2, #0
 800c7dc:	0006      	movs	r6, r0
 800c7de:	000f      	movs	r7, r1
 800c7e0:	0020      	movs	r0, r4
 800c7e2:	0029      	movs	r1, r5
 800c7e4:	4b32      	ldr	r3, [pc, #200]	; (800c8b0 <atan+0x284>)
 800c7e6:	f7f4 fd31 	bl	800124c <__aeabi_dadd>
 800c7ea:	000b      	movs	r3, r1
 800c7ec:	0002      	movs	r2, r0
 800c7ee:	0039      	movs	r1, r7
 800c7f0:	0030      	movs	r0, r6
 800c7f2:	f7f5 f88b 	bl	800190c <__aeabi_ddiv>
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	0004      	movs	r4, r0
 800c7fa:	000d      	movs	r5, r1
 800c7fc:	e772      	b.n	800c6e4 <atan+0xb8>
 800c7fe:	4b45      	ldr	r3, [pc, #276]	; (800c914 <atan+0x2e8>)
 800c800:	429e      	cmp	r6, r3
 800c802:	dc19      	bgt.n	800c838 <atan+0x20c>
 800c804:	2200      	movs	r2, #0
 800c806:	4b44      	ldr	r3, [pc, #272]	; (800c918 <atan+0x2ec>)
 800c808:	f7f5 ff3c 	bl	8002684 <__aeabi_dsub>
 800c80c:	2200      	movs	r2, #0
 800c80e:	0006      	movs	r6, r0
 800c810:	000f      	movs	r7, r1
 800c812:	0020      	movs	r0, r4
 800c814:	0029      	movs	r1, r5
 800c816:	4b40      	ldr	r3, [pc, #256]	; (800c918 <atan+0x2ec>)
 800c818:	f7f5 fc72 	bl	8002100 <__aeabi_dmul>
 800c81c:	2200      	movs	r2, #0
 800c81e:	4b24      	ldr	r3, [pc, #144]	; (800c8b0 <atan+0x284>)
 800c820:	f7f4 fd14 	bl	800124c <__aeabi_dadd>
 800c824:	000b      	movs	r3, r1
 800c826:	0002      	movs	r2, r0
 800c828:	0039      	movs	r1, r7
 800c82a:	0030      	movs	r0, r6
 800c82c:	f7f5 f86e 	bl	800190c <__aeabi_ddiv>
 800c830:	2302      	movs	r3, #2
 800c832:	0004      	movs	r4, r0
 800c834:	000d      	movs	r5, r1
 800c836:	e755      	b.n	800c6e4 <atan+0xb8>
 800c838:	000b      	movs	r3, r1
 800c83a:	0002      	movs	r2, r0
 800c83c:	4937      	ldr	r1, [pc, #220]	; (800c91c <atan+0x2f0>)
 800c83e:	2000      	movs	r0, #0
 800c840:	f7f5 f864 	bl	800190c <__aeabi_ddiv>
 800c844:	2303      	movs	r3, #3
 800c846:	0004      	movs	r4, r0
 800c848:	000d      	movs	r5, r1
 800c84a:	e74b      	b.n	800c6e4 <atan+0xb8>
 800c84c:	9b02      	ldr	r3, [sp, #8]
 800c84e:	4e34      	ldr	r6, [pc, #208]	; (800c920 <atan+0x2f4>)
 800c850:	00db      	lsls	r3, r3, #3
 800c852:	4f34      	ldr	r7, [pc, #208]	; (800c924 <atan+0x2f8>)
 800c854:	18f6      	adds	r6, r6, r3
 800c856:	18ff      	adds	r7, r7, r3
 800c858:	6832      	ldr	r2, [r6, #0]
 800c85a:	6873      	ldr	r3, [r6, #4]
 800c85c:	f7f5 ff12 	bl	8002684 <__aeabi_dsub>
 800c860:	0022      	movs	r2, r4
 800c862:	002b      	movs	r3, r5
 800c864:	f7f5 ff0e 	bl	8002684 <__aeabi_dsub>
 800c868:	000b      	movs	r3, r1
 800c86a:	0002      	movs	r2, r0
 800c86c:	6838      	ldr	r0, [r7, #0]
 800c86e:	6879      	ldr	r1, [r7, #4]
 800c870:	f7f5 ff08 	bl	8002684 <__aeabi_dsub>
 800c874:	9b03      	ldr	r3, [sp, #12]
 800c876:	0004      	movs	r4, r0
 800c878:	000d      	movs	r5, r1
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	db00      	blt.n	800c880 <atan+0x254>
 800c87e:	e6f4      	b.n	800c66a <atan+0x3e>
 800c880:	2180      	movs	r1, #128	; 0x80
 800c882:	0609      	lsls	r1, r1, #24
 800c884:	186b      	adds	r3, r5, r1
 800c886:	001d      	movs	r5, r3
 800c888:	e6ef      	b.n	800c66a <atan+0x3e>
 800c88a:	4d27      	ldr	r5, [pc, #156]	; (800c928 <atan+0x2fc>)
 800c88c:	e6ed      	b.n	800c66a <atan+0x3e>
 800c88e:	46c0      	nop			; (mov r8, r8)
 800c890:	440fffff 	.word	0x440fffff
 800c894:	7ff00000 	.word	0x7ff00000
 800c898:	54442d18 	.word	0x54442d18
 800c89c:	bff921fb 	.word	0xbff921fb
 800c8a0:	3fdbffff 	.word	0x3fdbffff
 800c8a4:	3e1fffff 	.word	0x3e1fffff
 800c8a8:	8800759c 	.word	0x8800759c
 800c8ac:	7e37e43c 	.word	0x7e37e43c
 800c8b0:	3ff00000 	.word	0x3ff00000
 800c8b4:	3ff2ffff 	.word	0x3ff2ffff
 800c8b8:	3fe5ffff 	.word	0x3fe5ffff
 800c8bc:	e322da11 	.word	0xe322da11
 800c8c0:	3f90ad3a 	.word	0x3f90ad3a
 800c8c4:	24760deb 	.word	0x24760deb
 800c8c8:	3fa97b4b 	.word	0x3fa97b4b
 800c8cc:	a0d03d51 	.word	0xa0d03d51
 800c8d0:	3fb10d66 	.word	0x3fb10d66
 800c8d4:	c54c206e 	.word	0xc54c206e
 800c8d8:	3fb745cd 	.word	0x3fb745cd
 800c8dc:	920083ff 	.word	0x920083ff
 800c8e0:	3fc24924 	.word	0x3fc24924
 800c8e4:	5555550d 	.word	0x5555550d
 800c8e8:	3fd55555 	.word	0x3fd55555
 800c8ec:	2c6a6c2f 	.word	0x2c6a6c2f
 800c8f0:	bfa2b444 	.word	0xbfa2b444
 800c8f4:	52defd9a 	.word	0x52defd9a
 800c8f8:	3fadde2d 	.word	0x3fadde2d
 800c8fc:	af749a6d 	.word	0xaf749a6d
 800c900:	3fb3b0f2 	.word	0x3fb3b0f2
 800c904:	fe231671 	.word	0xfe231671
 800c908:	3fbc71c6 	.word	0x3fbc71c6
 800c90c:	9998ebc4 	.word	0x9998ebc4
 800c910:	3fc99999 	.word	0x3fc99999
 800c914:	40037fff 	.word	0x40037fff
 800c918:	3ff80000 	.word	0x3ff80000
 800c91c:	bff00000 	.word	0xbff00000
 800c920:	0800d020 	.word	0x0800d020
 800c924:	0800d000 	.word	0x0800d000
 800c928:	3ff921fb 	.word	0x3ff921fb

0800c92c <fabs>:
 800c92c:	0049      	lsls	r1, r1, #1
 800c92e:	084b      	lsrs	r3, r1, #1
 800c930:	0019      	movs	r1, r3
 800c932:	4770      	bx	lr

0800c934 <_init>:
 800c934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c936:	46c0      	nop			; (mov r8, r8)
 800c938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c93a:	bc08      	pop	{r3}
 800c93c:	469e      	mov	lr, r3
 800c93e:	4770      	bx	lr

0800c940 <_fini>:
 800c940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c942:	46c0      	nop			; (mov r8, r8)
 800c944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c946:	bc08      	pop	{r3}
 800c948:	469e      	mov	lr, r3
 800c94a:	4770      	bx	lr
