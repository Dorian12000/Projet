
PROJET_ESE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dec  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  08009eac  08009eac  00019eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2dc  0800a2dc  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  0800a2dc  0800a2dc  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a2dc  0800a2dc  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2dc  0800a2dc  0001a2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2e0  0800a2e0  0001a2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800a2e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000499c  20000094  0800a378  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a30  0800a378  00024a30  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b2bf  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b21  00000000  00000000  0003b3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d8  00000000  00000000  0003fee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001259  00000000  00000000  000416b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af5f  00000000  00000000  00042911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f50f  00000000  00000000  0005d870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ae31  00000000  00000000  0007cd7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b40  00000000  00000000  00117bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0011d6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000094 	.word	0x20000094
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009e94 	.word	0x08009e94

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000098 	.word	0x20000098
 8000104:	08009e94 	.word	0x08009e94

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_fadd>:
 8000408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040a:	4647      	mov	r7, r8
 800040c:	46ce      	mov	lr, r9
 800040e:	024a      	lsls	r2, r1, #9
 8000410:	0243      	lsls	r3, r0, #9
 8000412:	0045      	lsls	r5, r0, #1
 8000414:	0fc4      	lsrs	r4, r0, #31
 8000416:	0a50      	lsrs	r0, r2, #9
 8000418:	4680      	mov	r8, r0
 800041a:	0048      	lsls	r0, r1, #1
 800041c:	0a5b      	lsrs	r3, r3, #9
 800041e:	0e00      	lsrs	r0, r0, #24
 8000420:	0992      	lsrs	r2, r2, #6
 8000422:	4694      	mov	ip, r2
 8000424:	b580      	push	{r7, lr}
 8000426:	001e      	movs	r6, r3
 8000428:	4681      	mov	r9, r0
 800042a:	0002      	movs	r2, r0
 800042c:	0e2d      	lsrs	r5, r5, #24
 800042e:	00df      	lsls	r7, r3, #3
 8000430:	0fc9      	lsrs	r1, r1, #31
 8000432:	428c      	cmp	r4, r1
 8000434:	d024      	beq.n	8000480 <__aeabi_fadd+0x78>
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	2800      	cmp	r0, #0
 800043a:	dd0e      	ble.n	800045a <__aeabi_fadd+0x52>
 800043c:	2a00      	cmp	r2, #0
 800043e:	d13e      	bne.n	80004be <__aeabi_fadd+0xb6>
 8000440:	4662      	mov	r2, ip
 8000442:	2a00      	cmp	r2, #0
 8000444:	d100      	bne.n	8000448 <__aeabi_fadd+0x40>
 8000446:	e0fd      	b.n	8000644 <__aeabi_fadd+0x23c>
 8000448:	1e42      	subs	r2, r0, #1
 800044a:	2801      	cmp	r0, #1
 800044c:	d100      	bne.n	8000450 <__aeabi_fadd+0x48>
 800044e:	e137      	b.n	80006c0 <__aeabi_fadd+0x2b8>
 8000450:	28ff      	cmp	r0, #255	; 0xff
 8000452:	d100      	bne.n	8000456 <__aeabi_fadd+0x4e>
 8000454:	e0a9      	b.n	80005aa <__aeabi_fadd+0x1a2>
 8000456:	0010      	movs	r0, r2
 8000458:	e039      	b.n	80004ce <__aeabi_fadd+0xc6>
 800045a:	2800      	cmp	r0, #0
 800045c:	d063      	beq.n	8000526 <__aeabi_fadd+0x11e>
 800045e:	464b      	mov	r3, r9
 8000460:	1b52      	subs	r2, r2, r5
 8000462:	2d00      	cmp	r5, #0
 8000464:	d000      	beq.n	8000468 <__aeabi_fadd+0x60>
 8000466:	e0e0      	b.n	800062a <__aeabi_fadd+0x222>
 8000468:	2f00      	cmp	r7, #0
 800046a:	d100      	bne.n	800046e <__aeabi_fadd+0x66>
 800046c:	e0ce      	b.n	800060c <__aeabi_fadd+0x204>
 800046e:	1e53      	subs	r3, r2, #1
 8000470:	2a01      	cmp	r2, #1
 8000472:	d100      	bne.n	8000476 <__aeabi_fadd+0x6e>
 8000474:	e155      	b.n	8000722 <__aeabi_fadd+0x31a>
 8000476:	2aff      	cmp	r2, #255	; 0xff
 8000478:	d100      	bne.n	800047c <__aeabi_fadd+0x74>
 800047a:	e094      	b.n	80005a6 <__aeabi_fadd+0x19e>
 800047c:	001a      	movs	r2, r3
 800047e:	e0d9      	b.n	8000634 <__aeabi_fadd+0x22c>
 8000480:	1a2a      	subs	r2, r5, r0
 8000482:	2a00      	cmp	r2, #0
 8000484:	dc00      	bgt.n	8000488 <__aeabi_fadd+0x80>
 8000486:	e099      	b.n	80005bc <__aeabi_fadd+0x1b4>
 8000488:	2800      	cmp	r0, #0
 800048a:	d062      	beq.n	8000552 <__aeabi_fadd+0x14a>
 800048c:	2dff      	cmp	r5, #255	; 0xff
 800048e:	d100      	bne.n	8000492 <__aeabi_fadd+0x8a>
 8000490:	e08b      	b.n	80005aa <__aeabi_fadd+0x1a2>
 8000492:	2380      	movs	r3, #128	; 0x80
 8000494:	4661      	mov	r1, ip
 8000496:	04db      	lsls	r3, r3, #19
 8000498:	4319      	orrs	r1, r3
 800049a:	468c      	mov	ip, r1
 800049c:	2a1b      	cmp	r2, #27
 800049e:	dc00      	bgt.n	80004a2 <__aeabi_fadd+0x9a>
 80004a0:	e0d2      	b.n	8000648 <__aeabi_fadd+0x240>
 80004a2:	2301      	movs	r3, #1
 80004a4:	19db      	adds	r3, r3, r7
 80004a6:	015a      	lsls	r2, r3, #5
 80004a8:	d56a      	bpl.n	8000580 <__aeabi_fadd+0x178>
 80004aa:	3501      	adds	r5, #1
 80004ac:	2dff      	cmp	r5, #255	; 0xff
 80004ae:	d05b      	beq.n	8000568 <__aeabi_fadd+0x160>
 80004b0:	2201      	movs	r2, #1
 80004b2:	49a3      	ldr	r1, [pc, #652]	; (8000740 <__aeabi_fadd+0x338>)
 80004b4:	401a      	ands	r2, r3
 80004b6:	085b      	lsrs	r3, r3, #1
 80004b8:	400b      	ands	r3, r1
 80004ba:	4313      	orrs	r3, r2
 80004bc:	e01c      	b.n	80004f8 <__aeabi_fadd+0xf0>
 80004be:	2dff      	cmp	r5, #255	; 0xff
 80004c0:	d100      	bne.n	80004c4 <__aeabi_fadd+0xbc>
 80004c2:	e072      	b.n	80005aa <__aeabi_fadd+0x1a2>
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	4662      	mov	r2, ip
 80004c8:	04db      	lsls	r3, r3, #19
 80004ca:	431a      	orrs	r2, r3
 80004cc:	4694      	mov	ip, r2
 80004ce:	281b      	cmp	r0, #27
 80004d0:	dc00      	bgt.n	80004d4 <__aeabi_fadd+0xcc>
 80004d2:	e090      	b.n	80005f6 <__aeabi_fadd+0x1ee>
 80004d4:	2301      	movs	r3, #1
 80004d6:	1afb      	subs	r3, r7, r3
 80004d8:	015a      	lsls	r2, r3, #5
 80004da:	d551      	bpl.n	8000580 <__aeabi_fadd+0x178>
 80004dc:	019b      	lsls	r3, r3, #6
 80004de:	099e      	lsrs	r6, r3, #6
 80004e0:	0030      	movs	r0, r6
 80004e2:	f000 fb99 	bl	8000c18 <__clzsi2>
 80004e6:	0033      	movs	r3, r6
 80004e8:	3805      	subs	r0, #5
 80004ea:	4083      	lsls	r3, r0
 80004ec:	4285      	cmp	r5, r0
 80004ee:	dc00      	bgt.n	80004f2 <__aeabi_fadd+0xea>
 80004f0:	e075      	b.n	80005de <__aeabi_fadd+0x1d6>
 80004f2:	4a94      	ldr	r2, [pc, #592]	; (8000744 <__aeabi_fadd+0x33c>)
 80004f4:	1a2d      	subs	r5, r5, r0
 80004f6:	4013      	ands	r3, r2
 80004f8:	075a      	lsls	r2, r3, #29
 80004fa:	d004      	beq.n	8000506 <__aeabi_fadd+0xfe>
 80004fc:	220f      	movs	r2, #15
 80004fe:	401a      	ands	r2, r3
 8000500:	2a04      	cmp	r2, #4
 8000502:	d000      	beq.n	8000506 <__aeabi_fadd+0xfe>
 8000504:	3304      	adds	r3, #4
 8000506:	015a      	lsls	r2, r3, #5
 8000508:	d53c      	bpl.n	8000584 <__aeabi_fadd+0x17c>
 800050a:	1c68      	adds	r0, r5, #1
 800050c:	2dfe      	cmp	r5, #254	; 0xfe
 800050e:	d02b      	beq.n	8000568 <__aeabi_fadd+0x160>
 8000510:	019b      	lsls	r3, r3, #6
 8000512:	0a5e      	lsrs	r6, r3, #9
 8000514:	b2c0      	uxtb	r0, r0
 8000516:	05c0      	lsls	r0, r0, #23
 8000518:	4330      	orrs	r0, r6
 800051a:	07e4      	lsls	r4, r4, #31
 800051c:	4320      	orrs	r0, r4
 800051e:	bcc0      	pop	{r6, r7}
 8000520:	46b9      	mov	r9, r7
 8000522:	46b0      	mov	r8, r6
 8000524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000526:	20fe      	movs	r0, #254	; 0xfe
 8000528:	1c6a      	adds	r2, r5, #1
 800052a:	4210      	tst	r0, r2
 800052c:	d172      	bne.n	8000614 <__aeabi_fadd+0x20c>
 800052e:	2d00      	cmp	r5, #0
 8000530:	d000      	beq.n	8000534 <__aeabi_fadd+0x12c>
 8000532:	e0ae      	b.n	8000692 <__aeabi_fadd+0x28a>
 8000534:	2f00      	cmp	r7, #0
 8000536:	d100      	bne.n	800053a <__aeabi_fadd+0x132>
 8000538:	e0ec      	b.n	8000714 <__aeabi_fadd+0x30c>
 800053a:	4663      	mov	r3, ip
 800053c:	2000      	movs	r0, #0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d0e9      	beq.n	8000516 <__aeabi_fadd+0x10e>
 8000542:	1afb      	subs	r3, r7, r3
 8000544:	015a      	lsls	r2, r3, #5
 8000546:	d400      	bmi.n	800054a <__aeabi_fadd+0x142>
 8000548:	e0f3      	b.n	8000732 <__aeabi_fadd+0x32a>
 800054a:	4663      	mov	r3, ip
 800054c:	000c      	movs	r4, r1
 800054e:	1bdb      	subs	r3, r3, r7
 8000550:	e7d2      	b.n	80004f8 <__aeabi_fadd+0xf0>
 8000552:	4661      	mov	r1, ip
 8000554:	2900      	cmp	r1, #0
 8000556:	d05b      	beq.n	8000610 <__aeabi_fadd+0x208>
 8000558:	1e51      	subs	r1, r2, #1
 800055a:	2a01      	cmp	r2, #1
 800055c:	d100      	bne.n	8000560 <__aeabi_fadd+0x158>
 800055e:	e0a7      	b.n	80006b0 <__aeabi_fadd+0x2a8>
 8000560:	2aff      	cmp	r2, #255	; 0xff
 8000562:	d022      	beq.n	80005aa <__aeabi_fadd+0x1a2>
 8000564:	000a      	movs	r2, r1
 8000566:	e799      	b.n	800049c <__aeabi_fadd+0x94>
 8000568:	20ff      	movs	r0, #255	; 0xff
 800056a:	2600      	movs	r6, #0
 800056c:	e7d3      	b.n	8000516 <__aeabi_fadd+0x10e>
 800056e:	21fe      	movs	r1, #254	; 0xfe
 8000570:	1c6a      	adds	r2, r5, #1
 8000572:	4211      	tst	r1, r2
 8000574:	d073      	beq.n	800065e <__aeabi_fadd+0x256>
 8000576:	2aff      	cmp	r2, #255	; 0xff
 8000578:	d0f6      	beq.n	8000568 <__aeabi_fadd+0x160>
 800057a:	0015      	movs	r5, r2
 800057c:	4467      	add	r7, ip
 800057e:	087b      	lsrs	r3, r7, #1
 8000580:	075a      	lsls	r2, r3, #29
 8000582:	d1bb      	bne.n	80004fc <__aeabi_fadd+0xf4>
 8000584:	08db      	lsrs	r3, r3, #3
 8000586:	2dff      	cmp	r5, #255	; 0xff
 8000588:	d00f      	beq.n	80005aa <__aeabi_fadd+0x1a2>
 800058a:	025b      	lsls	r3, r3, #9
 800058c:	0a5e      	lsrs	r6, r3, #9
 800058e:	b2e8      	uxtb	r0, r5
 8000590:	e7c1      	b.n	8000516 <__aeabi_fadd+0x10e>
 8000592:	4662      	mov	r2, ip
 8000594:	2a00      	cmp	r2, #0
 8000596:	d008      	beq.n	80005aa <__aeabi_fadd+0x1a2>
 8000598:	2280      	movs	r2, #128	; 0x80
 800059a:	03d2      	lsls	r2, r2, #15
 800059c:	4213      	tst	r3, r2
 800059e:	d004      	beq.n	80005aa <__aeabi_fadd+0x1a2>
 80005a0:	4640      	mov	r0, r8
 80005a2:	4210      	tst	r0, r2
 80005a4:	d101      	bne.n	80005aa <__aeabi_fadd+0x1a2>
 80005a6:	000c      	movs	r4, r1
 80005a8:	4643      	mov	r3, r8
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d0dc      	beq.n	8000568 <__aeabi_fadd+0x160>
 80005ae:	2680      	movs	r6, #128	; 0x80
 80005b0:	03f6      	lsls	r6, r6, #15
 80005b2:	431e      	orrs	r6, r3
 80005b4:	0276      	lsls	r6, r6, #9
 80005b6:	20ff      	movs	r0, #255	; 0xff
 80005b8:	0a76      	lsrs	r6, r6, #9
 80005ba:	e7ac      	b.n	8000516 <__aeabi_fadd+0x10e>
 80005bc:	2a00      	cmp	r2, #0
 80005be:	d0d6      	beq.n	800056e <__aeabi_fadd+0x166>
 80005c0:	1b42      	subs	r2, r0, r5
 80005c2:	2d00      	cmp	r5, #0
 80005c4:	d05c      	beq.n	8000680 <__aeabi_fadd+0x278>
 80005c6:	28ff      	cmp	r0, #255	; 0xff
 80005c8:	d0ee      	beq.n	80005a8 <__aeabi_fadd+0x1a0>
 80005ca:	2380      	movs	r3, #128	; 0x80
 80005cc:	04db      	lsls	r3, r3, #19
 80005ce:	431f      	orrs	r7, r3
 80005d0:	2a1b      	cmp	r2, #27
 80005d2:	dc00      	bgt.n	80005d6 <__aeabi_fadd+0x1ce>
 80005d4:	e082      	b.n	80006dc <__aeabi_fadd+0x2d4>
 80005d6:	2301      	movs	r3, #1
 80005d8:	464d      	mov	r5, r9
 80005da:	4463      	add	r3, ip
 80005dc:	e763      	b.n	80004a6 <__aeabi_fadd+0x9e>
 80005de:	2220      	movs	r2, #32
 80005e0:	1b40      	subs	r0, r0, r5
 80005e2:	3001      	adds	r0, #1
 80005e4:	1a12      	subs	r2, r2, r0
 80005e6:	0019      	movs	r1, r3
 80005e8:	4093      	lsls	r3, r2
 80005ea:	40c1      	lsrs	r1, r0
 80005ec:	1e5a      	subs	r2, r3, #1
 80005ee:	4193      	sbcs	r3, r2
 80005f0:	2500      	movs	r5, #0
 80005f2:	430b      	orrs	r3, r1
 80005f4:	e780      	b.n	80004f8 <__aeabi_fadd+0xf0>
 80005f6:	2320      	movs	r3, #32
 80005f8:	4661      	mov	r1, ip
 80005fa:	1a1b      	subs	r3, r3, r0
 80005fc:	4099      	lsls	r1, r3
 80005fe:	4662      	mov	r2, ip
 8000600:	000b      	movs	r3, r1
 8000602:	40c2      	lsrs	r2, r0
 8000604:	1e59      	subs	r1, r3, #1
 8000606:	418b      	sbcs	r3, r1
 8000608:	4313      	orrs	r3, r2
 800060a:	e764      	b.n	80004d6 <__aeabi_fadd+0xce>
 800060c:	000c      	movs	r4, r1
 800060e:	4643      	mov	r3, r8
 8000610:	0015      	movs	r5, r2
 8000612:	e7b8      	b.n	8000586 <__aeabi_fadd+0x17e>
 8000614:	4663      	mov	r3, ip
 8000616:	1afe      	subs	r6, r7, r3
 8000618:	0173      	lsls	r3, r6, #5
 800061a:	d445      	bmi.n	80006a8 <__aeabi_fadd+0x2a0>
 800061c:	2e00      	cmp	r6, #0
 800061e:	d000      	beq.n	8000622 <__aeabi_fadd+0x21a>
 8000620:	e75e      	b.n	80004e0 <__aeabi_fadd+0xd8>
 8000622:	2400      	movs	r4, #0
 8000624:	2000      	movs	r0, #0
 8000626:	2600      	movs	r6, #0
 8000628:	e775      	b.n	8000516 <__aeabi_fadd+0x10e>
 800062a:	2bff      	cmp	r3, #255	; 0xff
 800062c:	d0bb      	beq.n	80005a6 <__aeabi_fadd+0x19e>
 800062e:	2380      	movs	r3, #128	; 0x80
 8000630:	04db      	lsls	r3, r3, #19
 8000632:	431f      	orrs	r7, r3
 8000634:	2a1b      	cmp	r2, #27
 8000636:	dd47      	ble.n	80006c8 <__aeabi_fadd+0x2c0>
 8000638:	2301      	movs	r3, #1
 800063a:	4662      	mov	r2, ip
 800063c:	000c      	movs	r4, r1
 800063e:	464d      	mov	r5, r9
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	e749      	b.n	80004d8 <__aeabi_fadd+0xd0>
 8000644:	0005      	movs	r5, r0
 8000646:	e79e      	b.n	8000586 <__aeabi_fadd+0x17e>
 8000648:	4661      	mov	r1, ip
 800064a:	2320      	movs	r3, #32
 800064c:	40d1      	lsrs	r1, r2
 800064e:	1a9b      	subs	r3, r3, r2
 8000650:	4662      	mov	r2, ip
 8000652:	409a      	lsls	r2, r3
 8000654:	0013      	movs	r3, r2
 8000656:	1e5a      	subs	r2, r3, #1
 8000658:	4193      	sbcs	r3, r2
 800065a:	430b      	orrs	r3, r1
 800065c:	e722      	b.n	80004a4 <__aeabi_fadd+0x9c>
 800065e:	2d00      	cmp	r5, #0
 8000660:	d146      	bne.n	80006f0 <__aeabi_fadd+0x2e8>
 8000662:	2f00      	cmp	r7, #0
 8000664:	d062      	beq.n	800072c <__aeabi_fadd+0x324>
 8000666:	4663      	mov	r3, ip
 8000668:	2000      	movs	r0, #0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d100      	bne.n	8000670 <__aeabi_fadd+0x268>
 800066e:	e752      	b.n	8000516 <__aeabi_fadd+0x10e>
 8000670:	003b      	movs	r3, r7
 8000672:	4463      	add	r3, ip
 8000674:	015a      	lsls	r2, r3, #5
 8000676:	d583      	bpl.n	8000580 <__aeabi_fadd+0x178>
 8000678:	4a32      	ldr	r2, [pc, #200]	; (8000744 <__aeabi_fadd+0x33c>)
 800067a:	3501      	adds	r5, #1
 800067c:	4013      	ands	r3, r2
 800067e:	e77f      	b.n	8000580 <__aeabi_fadd+0x178>
 8000680:	2f00      	cmp	r7, #0
 8000682:	d0c4      	beq.n	800060e <__aeabi_fadd+0x206>
 8000684:	1e53      	subs	r3, r2, #1
 8000686:	2a01      	cmp	r2, #1
 8000688:	d012      	beq.n	80006b0 <__aeabi_fadd+0x2a8>
 800068a:	2aff      	cmp	r2, #255	; 0xff
 800068c:	d08c      	beq.n	80005a8 <__aeabi_fadd+0x1a0>
 800068e:	001a      	movs	r2, r3
 8000690:	e79e      	b.n	80005d0 <__aeabi_fadd+0x1c8>
 8000692:	2f00      	cmp	r7, #0
 8000694:	d000      	beq.n	8000698 <__aeabi_fadd+0x290>
 8000696:	e77c      	b.n	8000592 <__aeabi_fadd+0x18a>
 8000698:	4663      	mov	r3, ip
 800069a:	2b00      	cmp	r3, #0
 800069c:	d183      	bne.n	80005a6 <__aeabi_fadd+0x19e>
 800069e:	2680      	movs	r6, #128	; 0x80
 80006a0:	2400      	movs	r4, #0
 80006a2:	20ff      	movs	r0, #255	; 0xff
 80006a4:	03f6      	lsls	r6, r6, #15
 80006a6:	e736      	b.n	8000516 <__aeabi_fadd+0x10e>
 80006a8:	4663      	mov	r3, ip
 80006aa:	000c      	movs	r4, r1
 80006ac:	1bde      	subs	r6, r3, r7
 80006ae:	e717      	b.n	80004e0 <__aeabi_fadd+0xd8>
 80006b0:	003b      	movs	r3, r7
 80006b2:	4463      	add	r3, ip
 80006b4:	2501      	movs	r5, #1
 80006b6:	015a      	lsls	r2, r3, #5
 80006b8:	d400      	bmi.n	80006bc <__aeabi_fadd+0x2b4>
 80006ba:	e761      	b.n	8000580 <__aeabi_fadd+0x178>
 80006bc:	2502      	movs	r5, #2
 80006be:	e6f7      	b.n	80004b0 <__aeabi_fadd+0xa8>
 80006c0:	4663      	mov	r3, ip
 80006c2:	2501      	movs	r5, #1
 80006c4:	1afb      	subs	r3, r7, r3
 80006c6:	e707      	b.n	80004d8 <__aeabi_fadd+0xd0>
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	0038      	movs	r0, r7
 80006ce:	409f      	lsls	r7, r3
 80006d0:	003b      	movs	r3, r7
 80006d2:	40d0      	lsrs	r0, r2
 80006d4:	1e5a      	subs	r2, r3, #1
 80006d6:	4193      	sbcs	r3, r2
 80006d8:	4303      	orrs	r3, r0
 80006da:	e7ae      	b.n	800063a <__aeabi_fadd+0x232>
 80006dc:	2320      	movs	r3, #32
 80006de:	1a9b      	subs	r3, r3, r2
 80006e0:	0039      	movs	r1, r7
 80006e2:	409f      	lsls	r7, r3
 80006e4:	003b      	movs	r3, r7
 80006e6:	40d1      	lsrs	r1, r2
 80006e8:	1e5a      	subs	r2, r3, #1
 80006ea:	4193      	sbcs	r3, r2
 80006ec:	430b      	orrs	r3, r1
 80006ee:	e773      	b.n	80005d8 <__aeabi_fadd+0x1d0>
 80006f0:	2f00      	cmp	r7, #0
 80006f2:	d100      	bne.n	80006f6 <__aeabi_fadd+0x2ee>
 80006f4:	e758      	b.n	80005a8 <__aeabi_fadd+0x1a0>
 80006f6:	4662      	mov	r2, ip
 80006f8:	2a00      	cmp	r2, #0
 80006fa:	d100      	bne.n	80006fe <__aeabi_fadd+0x2f6>
 80006fc:	e755      	b.n	80005aa <__aeabi_fadd+0x1a2>
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	03d2      	lsls	r2, r2, #15
 8000702:	4213      	tst	r3, r2
 8000704:	d100      	bne.n	8000708 <__aeabi_fadd+0x300>
 8000706:	e750      	b.n	80005aa <__aeabi_fadd+0x1a2>
 8000708:	4641      	mov	r1, r8
 800070a:	4211      	tst	r1, r2
 800070c:	d000      	beq.n	8000710 <__aeabi_fadd+0x308>
 800070e:	e74c      	b.n	80005aa <__aeabi_fadd+0x1a2>
 8000710:	4643      	mov	r3, r8
 8000712:	e74a      	b.n	80005aa <__aeabi_fadd+0x1a2>
 8000714:	4663      	mov	r3, ip
 8000716:	2b00      	cmp	r3, #0
 8000718:	d083      	beq.n	8000622 <__aeabi_fadd+0x21a>
 800071a:	000c      	movs	r4, r1
 800071c:	4646      	mov	r6, r8
 800071e:	2000      	movs	r0, #0
 8000720:	e6f9      	b.n	8000516 <__aeabi_fadd+0x10e>
 8000722:	4663      	mov	r3, ip
 8000724:	000c      	movs	r4, r1
 8000726:	1bdb      	subs	r3, r3, r7
 8000728:	3501      	adds	r5, #1
 800072a:	e6d5      	b.n	80004d8 <__aeabi_fadd+0xd0>
 800072c:	4646      	mov	r6, r8
 800072e:	2000      	movs	r0, #0
 8000730:	e6f1      	b.n	8000516 <__aeabi_fadd+0x10e>
 8000732:	2b00      	cmp	r3, #0
 8000734:	d000      	beq.n	8000738 <__aeabi_fadd+0x330>
 8000736:	e723      	b.n	8000580 <__aeabi_fadd+0x178>
 8000738:	2400      	movs	r4, #0
 800073a:	2600      	movs	r6, #0
 800073c:	e6eb      	b.n	8000516 <__aeabi_fadd+0x10e>
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	7dffffff 	.word	0x7dffffff
 8000744:	fbffffff 	.word	0xfbffffff

08000748 <__aeabi_fdiv>:
 8000748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800074a:	464f      	mov	r7, r9
 800074c:	4646      	mov	r6, r8
 800074e:	46d6      	mov	lr, sl
 8000750:	0245      	lsls	r5, r0, #9
 8000752:	b5c0      	push	{r6, r7, lr}
 8000754:	0047      	lsls	r7, r0, #1
 8000756:	1c0c      	adds	r4, r1, #0
 8000758:	0a6d      	lsrs	r5, r5, #9
 800075a:	0e3f      	lsrs	r7, r7, #24
 800075c:	0fc6      	lsrs	r6, r0, #31
 800075e:	2f00      	cmp	r7, #0
 8000760:	d100      	bne.n	8000764 <__aeabi_fdiv+0x1c>
 8000762:	e06f      	b.n	8000844 <__aeabi_fdiv+0xfc>
 8000764:	2fff      	cmp	r7, #255	; 0xff
 8000766:	d100      	bne.n	800076a <__aeabi_fdiv+0x22>
 8000768:	e074      	b.n	8000854 <__aeabi_fdiv+0x10c>
 800076a:	2300      	movs	r3, #0
 800076c:	2280      	movs	r2, #128	; 0x80
 800076e:	4699      	mov	r9, r3
 8000770:	469a      	mov	sl, r3
 8000772:	00ed      	lsls	r5, r5, #3
 8000774:	04d2      	lsls	r2, r2, #19
 8000776:	4315      	orrs	r5, r2
 8000778:	3f7f      	subs	r7, #127	; 0x7f
 800077a:	0263      	lsls	r3, r4, #9
 800077c:	0a5b      	lsrs	r3, r3, #9
 800077e:	4698      	mov	r8, r3
 8000780:	0063      	lsls	r3, r4, #1
 8000782:	0e1b      	lsrs	r3, r3, #24
 8000784:	0fe4      	lsrs	r4, r4, #31
 8000786:	2b00      	cmp	r3, #0
 8000788:	d04d      	beq.n	8000826 <__aeabi_fdiv+0xde>
 800078a:	2bff      	cmp	r3, #255	; 0xff
 800078c:	d045      	beq.n	800081a <__aeabi_fdiv+0xd2>
 800078e:	4642      	mov	r2, r8
 8000790:	2180      	movs	r1, #128	; 0x80
 8000792:	00d2      	lsls	r2, r2, #3
 8000794:	04c9      	lsls	r1, r1, #19
 8000796:	4311      	orrs	r1, r2
 8000798:	4688      	mov	r8, r1
 800079a:	2200      	movs	r2, #0
 800079c:	3b7f      	subs	r3, #127	; 0x7f
 800079e:	0031      	movs	r1, r6
 80007a0:	1aff      	subs	r7, r7, r3
 80007a2:	464b      	mov	r3, r9
 80007a4:	4061      	eors	r1, r4
 80007a6:	b2c9      	uxtb	r1, r1
 80007a8:	2b0f      	cmp	r3, #15
 80007aa:	d900      	bls.n	80007ae <__aeabi_fdiv+0x66>
 80007ac:	e0b8      	b.n	8000920 <__aeabi_fdiv+0x1d8>
 80007ae:	4870      	ldr	r0, [pc, #448]	; (8000970 <__aeabi_fdiv+0x228>)
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	58c3      	ldr	r3, [r0, r3]
 80007b4:	469f      	mov	pc, r3
 80007b6:	2300      	movs	r3, #0
 80007b8:	4698      	mov	r8, r3
 80007ba:	0026      	movs	r6, r4
 80007bc:	4645      	mov	r5, r8
 80007be:	4692      	mov	sl, r2
 80007c0:	4653      	mov	r3, sl
 80007c2:	2b02      	cmp	r3, #2
 80007c4:	d100      	bne.n	80007c8 <__aeabi_fdiv+0x80>
 80007c6:	e08d      	b.n	80008e4 <__aeabi_fdiv+0x19c>
 80007c8:	2b03      	cmp	r3, #3
 80007ca:	d100      	bne.n	80007ce <__aeabi_fdiv+0x86>
 80007cc:	e0a1      	b.n	8000912 <__aeabi_fdiv+0x1ca>
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d018      	beq.n	8000804 <__aeabi_fdiv+0xbc>
 80007d2:	003b      	movs	r3, r7
 80007d4:	337f      	adds	r3, #127	; 0x7f
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	dd6d      	ble.n	80008b6 <__aeabi_fdiv+0x16e>
 80007da:	076a      	lsls	r2, r5, #29
 80007dc:	d004      	beq.n	80007e8 <__aeabi_fdiv+0xa0>
 80007de:	220f      	movs	r2, #15
 80007e0:	402a      	ands	r2, r5
 80007e2:	2a04      	cmp	r2, #4
 80007e4:	d000      	beq.n	80007e8 <__aeabi_fdiv+0xa0>
 80007e6:	3504      	adds	r5, #4
 80007e8:	012a      	lsls	r2, r5, #4
 80007ea:	d503      	bpl.n	80007f4 <__aeabi_fdiv+0xac>
 80007ec:	4b61      	ldr	r3, [pc, #388]	; (8000974 <__aeabi_fdiv+0x22c>)
 80007ee:	401d      	ands	r5, r3
 80007f0:	003b      	movs	r3, r7
 80007f2:	3380      	adds	r3, #128	; 0x80
 80007f4:	2bfe      	cmp	r3, #254	; 0xfe
 80007f6:	dd00      	ble.n	80007fa <__aeabi_fdiv+0xb2>
 80007f8:	e074      	b.n	80008e4 <__aeabi_fdiv+0x19c>
 80007fa:	01aa      	lsls	r2, r5, #6
 80007fc:	0a52      	lsrs	r2, r2, #9
 80007fe:	b2d8      	uxtb	r0, r3
 8000800:	e002      	b.n	8000808 <__aeabi_fdiv+0xc0>
 8000802:	000e      	movs	r6, r1
 8000804:	2000      	movs	r0, #0
 8000806:	2200      	movs	r2, #0
 8000808:	05c0      	lsls	r0, r0, #23
 800080a:	07f6      	lsls	r6, r6, #31
 800080c:	4310      	orrs	r0, r2
 800080e:	4330      	orrs	r0, r6
 8000810:	bce0      	pop	{r5, r6, r7}
 8000812:	46ba      	mov	sl, r7
 8000814:	46b1      	mov	r9, r6
 8000816:	46a8      	mov	r8, r5
 8000818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800081a:	4643      	mov	r3, r8
 800081c:	2b00      	cmp	r3, #0
 800081e:	d13f      	bne.n	80008a0 <__aeabi_fdiv+0x158>
 8000820:	2202      	movs	r2, #2
 8000822:	3fff      	subs	r7, #255	; 0xff
 8000824:	e003      	b.n	800082e <__aeabi_fdiv+0xe6>
 8000826:	4643      	mov	r3, r8
 8000828:	2b00      	cmp	r3, #0
 800082a:	d12d      	bne.n	8000888 <__aeabi_fdiv+0x140>
 800082c:	2201      	movs	r2, #1
 800082e:	0031      	movs	r1, r6
 8000830:	464b      	mov	r3, r9
 8000832:	4061      	eors	r1, r4
 8000834:	b2c9      	uxtb	r1, r1
 8000836:	4313      	orrs	r3, r2
 8000838:	2b0f      	cmp	r3, #15
 800083a:	d838      	bhi.n	80008ae <__aeabi_fdiv+0x166>
 800083c:	484e      	ldr	r0, [pc, #312]	; (8000978 <__aeabi_fdiv+0x230>)
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	58c3      	ldr	r3, [r0, r3]
 8000842:	469f      	mov	pc, r3
 8000844:	2d00      	cmp	r5, #0
 8000846:	d113      	bne.n	8000870 <__aeabi_fdiv+0x128>
 8000848:	2304      	movs	r3, #4
 800084a:	4699      	mov	r9, r3
 800084c:	3b03      	subs	r3, #3
 800084e:	2700      	movs	r7, #0
 8000850:	469a      	mov	sl, r3
 8000852:	e792      	b.n	800077a <__aeabi_fdiv+0x32>
 8000854:	2d00      	cmp	r5, #0
 8000856:	d105      	bne.n	8000864 <__aeabi_fdiv+0x11c>
 8000858:	2308      	movs	r3, #8
 800085a:	4699      	mov	r9, r3
 800085c:	3b06      	subs	r3, #6
 800085e:	27ff      	movs	r7, #255	; 0xff
 8000860:	469a      	mov	sl, r3
 8000862:	e78a      	b.n	800077a <__aeabi_fdiv+0x32>
 8000864:	230c      	movs	r3, #12
 8000866:	4699      	mov	r9, r3
 8000868:	3b09      	subs	r3, #9
 800086a:	27ff      	movs	r7, #255	; 0xff
 800086c:	469a      	mov	sl, r3
 800086e:	e784      	b.n	800077a <__aeabi_fdiv+0x32>
 8000870:	0028      	movs	r0, r5
 8000872:	f000 f9d1 	bl	8000c18 <__clzsi2>
 8000876:	2776      	movs	r7, #118	; 0x76
 8000878:	1f43      	subs	r3, r0, #5
 800087a:	409d      	lsls	r5, r3
 800087c:	2300      	movs	r3, #0
 800087e:	427f      	negs	r7, r7
 8000880:	4699      	mov	r9, r3
 8000882:	469a      	mov	sl, r3
 8000884:	1a3f      	subs	r7, r7, r0
 8000886:	e778      	b.n	800077a <__aeabi_fdiv+0x32>
 8000888:	4640      	mov	r0, r8
 800088a:	f000 f9c5 	bl	8000c18 <__clzsi2>
 800088e:	4642      	mov	r2, r8
 8000890:	1f43      	subs	r3, r0, #5
 8000892:	409a      	lsls	r2, r3
 8000894:	2376      	movs	r3, #118	; 0x76
 8000896:	425b      	negs	r3, r3
 8000898:	4690      	mov	r8, r2
 800089a:	1a1b      	subs	r3, r3, r0
 800089c:	2200      	movs	r2, #0
 800089e:	e77e      	b.n	800079e <__aeabi_fdiv+0x56>
 80008a0:	2303      	movs	r3, #3
 80008a2:	464a      	mov	r2, r9
 80008a4:	431a      	orrs	r2, r3
 80008a6:	4691      	mov	r9, r2
 80008a8:	33fc      	adds	r3, #252	; 0xfc
 80008aa:	2203      	movs	r2, #3
 80008ac:	e777      	b.n	800079e <__aeabi_fdiv+0x56>
 80008ae:	000e      	movs	r6, r1
 80008b0:	20ff      	movs	r0, #255	; 0xff
 80008b2:	2200      	movs	r2, #0
 80008b4:	e7a8      	b.n	8000808 <__aeabi_fdiv+0xc0>
 80008b6:	2201      	movs	r2, #1
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	2b1b      	cmp	r3, #27
 80008bc:	dca2      	bgt.n	8000804 <__aeabi_fdiv+0xbc>
 80008be:	379e      	adds	r7, #158	; 0x9e
 80008c0:	002a      	movs	r2, r5
 80008c2:	40bd      	lsls	r5, r7
 80008c4:	40da      	lsrs	r2, r3
 80008c6:	1e6b      	subs	r3, r5, #1
 80008c8:	419d      	sbcs	r5, r3
 80008ca:	4315      	orrs	r5, r2
 80008cc:	076a      	lsls	r2, r5, #29
 80008ce:	d004      	beq.n	80008da <__aeabi_fdiv+0x192>
 80008d0:	220f      	movs	r2, #15
 80008d2:	402a      	ands	r2, r5
 80008d4:	2a04      	cmp	r2, #4
 80008d6:	d000      	beq.n	80008da <__aeabi_fdiv+0x192>
 80008d8:	3504      	adds	r5, #4
 80008da:	016a      	lsls	r2, r5, #5
 80008dc:	d544      	bpl.n	8000968 <__aeabi_fdiv+0x220>
 80008de:	2001      	movs	r0, #1
 80008e0:	2200      	movs	r2, #0
 80008e2:	e791      	b.n	8000808 <__aeabi_fdiv+0xc0>
 80008e4:	20ff      	movs	r0, #255	; 0xff
 80008e6:	2200      	movs	r2, #0
 80008e8:	e78e      	b.n	8000808 <__aeabi_fdiv+0xc0>
 80008ea:	2280      	movs	r2, #128	; 0x80
 80008ec:	2600      	movs	r6, #0
 80008ee:	20ff      	movs	r0, #255	; 0xff
 80008f0:	03d2      	lsls	r2, r2, #15
 80008f2:	e789      	b.n	8000808 <__aeabi_fdiv+0xc0>
 80008f4:	2300      	movs	r3, #0
 80008f6:	4698      	mov	r8, r3
 80008f8:	2280      	movs	r2, #128	; 0x80
 80008fa:	03d2      	lsls	r2, r2, #15
 80008fc:	4215      	tst	r5, r2
 80008fe:	d008      	beq.n	8000912 <__aeabi_fdiv+0x1ca>
 8000900:	4643      	mov	r3, r8
 8000902:	4213      	tst	r3, r2
 8000904:	d105      	bne.n	8000912 <__aeabi_fdiv+0x1ca>
 8000906:	431a      	orrs	r2, r3
 8000908:	0252      	lsls	r2, r2, #9
 800090a:	0026      	movs	r6, r4
 800090c:	20ff      	movs	r0, #255	; 0xff
 800090e:	0a52      	lsrs	r2, r2, #9
 8000910:	e77a      	b.n	8000808 <__aeabi_fdiv+0xc0>
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	03d2      	lsls	r2, r2, #15
 8000916:	432a      	orrs	r2, r5
 8000918:	0252      	lsls	r2, r2, #9
 800091a:	20ff      	movs	r0, #255	; 0xff
 800091c:	0a52      	lsrs	r2, r2, #9
 800091e:	e773      	b.n	8000808 <__aeabi_fdiv+0xc0>
 8000920:	4642      	mov	r2, r8
 8000922:	016b      	lsls	r3, r5, #5
 8000924:	0155      	lsls	r5, r2, #5
 8000926:	42ab      	cmp	r3, r5
 8000928:	d21a      	bcs.n	8000960 <__aeabi_fdiv+0x218>
 800092a:	201b      	movs	r0, #27
 800092c:	2200      	movs	r2, #0
 800092e:	3f01      	subs	r7, #1
 8000930:	2601      	movs	r6, #1
 8000932:	001c      	movs	r4, r3
 8000934:	0052      	lsls	r2, r2, #1
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	2c00      	cmp	r4, #0
 800093a:	db01      	blt.n	8000940 <__aeabi_fdiv+0x1f8>
 800093c:	429d      	cmp	r5, r3
 800093e:	d801      	bhi.n	8000944 <__aeabi_fdiv+0x1fc>
 8000940:	1b5b      	subs	r3, r3, r5
 8000942:	4332      	orrs	r2, r6
 8000944:	3801      	subs	r0, #1
 8000946:	2800      	cmp	r0, #0
 8000948:	d1f3      	bne.n	8000932 <__aeabi_fdiv+0x1ea>
 800094a:	1e58      	subs	r0, r3, #1
 800094c:	4183      	sbcs	r3, r0
 800094e:	4313      	orrs	r3, r2
 8000950:	001d      	movs	r5, r3
 8000952:	003b      	movs	r3, r7
 8000954:	337f      	adds	r3, #127	; 0x7f
 8000956:	000e      	movs	r6, r1
 8000958:	2b00      	cmp	r3, #0
 800095a:	dd00      	ble.n	800095e <__aeabi_fdiv+0x216>
 800095c:	e73d      	b.n	80007da <__aeabi_fdiv+0x92>
 800095e:	e7aa      	b.n	80008b6 <__aeabi_fdiv+0x16e>
 8000960:	201a      	movs	r0, #26
 8000962:	2201      	movs	r2, #1
 8000964:	1b5b      	subs	r3, r3, r5
 8000966:	e7e3      	b.n	8000930 <__aeabi_fdiv+0x1e8>
 8000968:	01aa      	lsls	r2, r5, #6
 800096a:	2000      	movs	r0, #0
 800096c:	0a52      	lsrs	r2, r2, #9
 800096e:	e74b      	b.n	8000808 <__aeabi_fdiv+0xc0>
 8000970:	0800a08c 	.word	0x0800a08c
 8000974:	f7ffffff 	.word	0xf7ffffff
 8000978:	0800a0cc 	.word	0x0800a0cc

0800097c <__aeabi_fmul>:
 800097c:	0243      	lsls	r3, r0, #9
 800097e:	0a5b      	lsrs	r3, r3, #9
 8000980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000982:	464f      	mov	r7, r9
 8000984:	4646      	mov	r6, r8
 8000986:	4699      	mov	r9, r3
 8000988:	46d6      	mov	lr, sl
 800098a:	0fc3      	lsrs	r3, r0, #31
 800098c:	0045      	lsls	r5, r0, #1
 800098e:	4698      	mov	r8, r3
 8000990:	b5c0      	push	{r6, r7, lr}
 8000992:	464b      	mov	r3, r9
 8000994:	1c0f      	adds	r7, r1, #0
 8000996:	0e2d      	lsrs	r5, r5, #24
 8000998:	d100      	bne.n	800099c <__aeabi_fmul+0x20>
 800099a:	e0cb      	b.n	8000b34 <__aeabi_fmul+0x1b8>
 800099c:	2dff      	cmp	r5, #255	; 0xff
 800099e:	d100      	bne.n	80009a2 <__aeabi_fmul+0x26>
 80009a0:	e0cf      	b.n	8000b42 <__aeabi_fmul+0x1c6>
 80009a2:	2280      	movs	r2, #128	; 0x80
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	04d2      	lsls	r2, r2, #19
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2300      	movs	r3, #0
 80009ac:	4691      	mov	r9, r2
 80009ae:	2600      	movs	r6, #0
 80009b0:	469a      	mov	sl, r3
 80009b2:	3d7f      	subs	r5, #127	; 0x7f
 80009b4:	027c      	lsls	r4, r7, #9
 80009b6:	007b      	lsls	r3, r7, #1
 80009b8:	0a64      	lsrs	r4, r4, #9
 80009ba:	0e1b      	lsrs	r3, r3, #24
 80009bc:	0fff      	lsrs	r7, r7, #31
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d100      	bne.n	80009c4 <__aeabi_fmul+0x48>
 80009c2:	e0a9      	b.n	8000b18 <__aeabi_fmul+0x19c>
 80009c4:	2bff      	cmp	r3, #255	; 0xff
 80009c6:	d011      	beq.n	80009ec <__aeabi_fmul+0x70>
 80009c8:	2280      	movs	r2, #128	; 0x80
 80009ca:	00e4      	lsls	r4, r4, #3
 80009cc:	04d2      	lsls	r2, r2, #19
 80009ce:	4314      	orrs	r4, r2
 80009d0:	4642      	mov	r2, r8
 80009d2:	3b7f      	subs	r3, #127	; 0x7f
 80009d4:	195b      	adds	r3, r3, r5
 80009d6:	407a      	eors	r2, r7
 80009d8:	2000      	movs	r0, #0
 80009da:	b2d2      	uxtb	r2, r2
 80009dc:	1c5d      	adds	r5, r3, #1
 80009de:	2e0a      	cmp	r6, #10
 80009e0:	dd13      	ble.n	8000a0a <__aeabi_fmul+0x8e>
 80009e2:	003a      	movs	r2, r7
 80009e4:	2e0b      	cmp	r6, #11
 80009e6:	d047      	beq.n	8000a78 <__aeabi_fmul+0xfc>
 80009e8:	4647      	mov	r7, r8
 80009ea:	e03f      	b.n	8000a6c <__aeabi_fmul+0xf0>
 80009ec:	002b      	movs	r3, r5
 80009ee:	33ff      	adds	r3, #255	; 0xff
 80009f0:	2c00      	cmp	r4, #0
 80009f2:	d11e      	bne.n	8000a32 <__aeabi_fmul+0xb6>
 80009f4:	2202      	movs	r2, #2
 80009f6:	4316      	orrs	r6, r2
 80009f8:	4642      	mov	r2, r8
 80009fa:	3501      	adds	r5, #1
 80009fc:	407a      	eors	r2, r7
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	35ff      	adds	r5, #255	; 0xff
 8000a02:	2e0a      	cmp	r6, #10
 8000a04:	dd00      	ble.n	8000a08 <__aeabi_fmul+0x8c>
 8000a06:	e0e4      	b.n	8000bd2 <__aeabi_fmul+0x256>
 8000a08:	2002      	movs	r0, #2
 8000a0a:	2e02      	cmp	r6, #2
 8000a0c:	dc1c      	bgt.n	8000a48 <__aeabi_fmul+0xcc>
 8000a0e:	3e01      	subs	r6, #1
 8000a10:	2e01      	cmp	r6, #1
 8000a12:	d842      	bhi.n	8000a9a <__aeabi_fmul+0x11e>
 8000a14:	2802      	cmp	r0, #2
 8000a16:	d03d      	beq.n	8000a94 <__aeabi_fmul+0x118>
 8000a18:	2801      	cmp	r0, #1
 8000a1a:	d166      	bne.n	8000aea <__aeabi_fmul+0x16e>
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	05c0      	lsls	r0, r0, #23
 8000a22:	4308      	orrs	r0, r1
 8000a24:	07d2      	lsls	r2, r2, #31
 8000a26:	4310      	orrs	r0, r2
 8000a28:	bce0      	pop	{r5, r6, r7}
 8000a2a:	46ba      	mov	sl, r7
 8000a2c:	46b1      	mov	r9, r6
 8000a2e:	46a8      	mov	r8, r5
 8000a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a32:	2203      	movs	r2, #3
 8000a34:	4316      	orrs	r6, r2
 8000a36:	4642      	mov	r2, r8
 8000a38:	3501      	adds	r5, #1
 8000a3a:	407a      	eors	r2, r7
 8000a3c:	b2d2      	uxtb	r2, r2
 8000a3e:	35ff      	adds	r5, #255	; 0xff
 8000a40:	2e0a      	cmp	r6, #10
 8000a42:	dd00      	ble.n	8000a46 <__aeabi_fmul+0xca>
 8000a44:	e0e4      	b.n	8000c10 <__aeabi_fmul+0x294>
 8000a46:	2003      	movs	r0, #3
 8000a48:	2101      	movs	r1, #1
 8000a4a:	40b1      	lsls	r1, r6
 8000a4c:	26a6      	movs	r6, #166	; 0xa6
 8000a4e:	00f6      	lsls	r6, r6, #3
 8000a50:	4231      	tst	r1, r6
 8000a52:	d10a      	bne.n	8000a6a <__aeabi_fmul+0xee>
 8000a54:	2690      	movs	r6, #144	; 0x90
 8000a56:	00b6      	lsls	r6, r6, #2
 8000a58:	4231      	tst	r1, r6
 8000a5a:	d116      	bne.n	8000a8a <__aeabi_fmul+0x10e>
 8000a5c:	3eb9      	subs	r6, #185	; 0xb9
 8000a5e:	3eff      	subs	r6, #255	; 0xff
 8000a60:	420e      	tst	r6, r1
 8000a62:	d01a      	beq.n	8000a9a <__aeabi_fmul+0x11e>
 8000a64:	46a1      	mov	r9, r4
 8000a66:	4682      	mov	sl, r0
 8000a68:	e000      	b.n	8000a6c <__aeabi_fmul+0xf0>
 8000a6a:	0017      	movs	r7, r2
 8000a6c:	4653      	mov	r3, sl
 8000a6e:	003a      	movs	r2, r7
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d00f      	beq.n	8000a94 <__aeabi_fmul+0x118>
 8000a74:	464c      	mov	r4, r9
 8000a76:	4650      	mov	r0, sl
 8000a78:	2803      	cmp	r0, #3
 8000a7a:	d1cd      	bne.n	8000a18 <__aeabi_fmul+0x9c>
 8000a7c:	2180      	movs	r1, #128	; 0x80
 8000a7e:	03c9      	lsls	r1, r1, #15
 8000a80:	4321      	orrs	r1, r4
 8000a82:	0249      	lsls	r1, r1, #9
 8000a84:	20ff      	movs	r0, #255	; 0xff
 8000a86:	0a49      	lsrs	r1, r1, #9
 8000a88:	e7ca      	b.n	8000a20 <__aeabi_fmul+0xa4>
 8000a8a:	2180      	movs	r1, #128	; 0x80
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	20ff      	movs	r0, #255	; 0xff
 8000a90:	03c9      	lsls	r1, r1, #15
 8000a92:	e7c5      	b.n	8000a20 <__aeabi_fmul+0xa4>
 8000a94:	20ff      	movs	r0, #255	; 0xff
 8000a96:	2100      	movs	r1, #0
 8000a98:	e7c2      	b.n	8000a20 <__aeabi_fmul+0xa4>
 8000a9a:	0c20      	lsrs	r0, r4, #16
 8000a9c:	4649      	mov	r1, r9
 8000a9e:	0424      	lsls	r4, r4, #16
 8000aa0:	0c24      	lsrs	r4, r4, #16
 8000aa2:	0027      	movs	r7, r4
 8000aa4:	0c0e      	lsrs	r6, r1, #16
 8000aa6:	0409      	lsls	r1, r1, #16
 8000aa8:	0c09      	lsrs	r1, r1, #16
 8000aaa:	4374      	muls	r4, r6
 8000aac:	434f      	muls	r7, r1
 8000aae:	4346      	muls	r6, r0
 8000ab0:	4348      	muls	r0, r1
 8000ab2:	0c39      	lsrs	r1, r7, #16
 8000ab4:	1900      	adds	r0, r0, r4
 8000ab6:	1809      	adds	r1, r1, r0
 8000ab8:	428c      	cmp	r4, r1
 8000aba:	d903      	bls.n	8000ac4 <__aeabi_fmul+0x148>
 8000abc:	2080      	movs	r0, #128	; 0x80
 8000abe:	0240      	lsls	r0, r0, #9
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4466      	add	r6, ip
 8000ac4:	043f      	lsls	r7, r7, #16
 8000ac6:	0408      	lsls	r0, r1, #16
 8000ac8:	0c3f      	lsrs	r7, r7, #16
 8000aca:	19c0      	adds	r0, r0, r7
 8000acc:	0184      	lsls	r4, r0, #6
 8000ace:	1e67      	subs	r7, r4, #1
 8000ad0:	41bc      	sbcs	r4, r7
 8000ad2:	0c09      	lsrs	r1, r1, #16
 8000ad4:	0e80      	lsrs	r0, r0, #26
 8000ad6:	1989      	adds	r1, r1, r6
 8000ad8:	4304      	orrs	r4, r0
 8000ada:	0189      	lsls	r1, r1, #6
 8000adc:	430c      	orrs	r4, r1
 8000ade:	0109      	lsls	r1, r1, #4
 8000ae0:	d571      	bpl.n	8000bc6 <__aeabi_fmul+0x24a>
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	0861      	lsrs	r1, r4, #1
 8000ae6:	401c      	ands	r4, r3
 8000ae8:	430c      	orrs	r4, r1
 8000aea:	002b      	movs	r3, r5
 8000aec:	337f      	adds	r3, #127	; 0x7f
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	dd51      	ble.n	8000b96 <__aeabi_fmul+0x21a>
 8000af2:	0761      	lsls	r1, r4, #29
 8000af4:	d004      	beq.n	8000b00 <__aeabi_fmul+0x184>
 8000af6:	210f      	movs	r1, #15
 8000af8:	4021      	ands	r1, r4
 8000afa:	2904      	cmp	r1, #4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_fmul+0x184>
 8000afe:	3404      	adds	r4, #4
 8000b00:	0121      	lsls	r1, r4, #4
 8000b02:	d503      	bpl.n	8000b0c <__aeabi_fmul+0x190>
 8000b04:	4b43      	ldr	r3, [pc, #268]	; (8000c14 <__aeabi_fmul+0x298>)
 8000b06:	401c      	ands	r4, r3
 8000b08:	002b      	movs	r3, r5
 8000b0a:	3380      	adds	r3, #128	; 0x80
 8000b0c:	2bfe      	cmp	r3, #254	; 0xfe
 8000b0e:	dcc1      	bgt.n	8000a94 <__aeabi_fmul+0x118>
 8000b10:	01a1      	lsls	r1, r4, #6
 8000b12:	0a49      	lsrs	r1, r1, #9
 8000b14:	b2d8      	uxtb	r0, r3
 8000b16:	e783      	b.n	8000a20 <__aeabi_fmul+0xa4>
 8000b18:	2c00      	cmp	r4, #0
 8000b1a:	d12c      	bne.n	8000b76 <__aeabi_fmul+0x1fa>
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	4642      	mov	r2, r8
 8000b20:	431e      	orrs	r6, r3
 8000b22:	002b      	movs	r3, r5
 8000b24:	407a      	eors	r2, r7
 8000b26:	2001      	movs	r0, #1
 8000b28:	b2d2      	uxtb	r2, r2
 8000b2a:	1c5d      	adds	r5, r3, #1
 8000b2c:	2e0a      	cmp	r6, #10
 8000b2e:	dd00      	ble.n	8000b32 <__aeabi_fmul+0x1b6>
 8000b30:	e757      	b.n	80009e2 <__aeabi_fmul+0x66>
 8000b32:	e76a      	b.n	8000a0a <__aeabi_fmul+0x8e>
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d110      	bne.n	8000b5a <__aeabi_fmul+0x1de>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	2604      	movs	r6, #4
 8000b3c:	2500      	movs	r5, #0
 8000b3e:	469a      	mov	sl, r3
 8000b40:	e738      	b.n	80009b4 <__aeabi_fmul+0x38>
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d104      	bne.n	8000b50 <__aeabi_fmul+0x1d4>
 8000b46:	2302      	movs	r3, #2
 8000b48:	2608      	movs	r6, #8
 8000b4a:	25ff      	movs	r5, #255	; 0xff
 8000b4c:	469a      	mov	sl, r3
 8000b4e:	e731      	b.n	80009b4 <__aeabi_fmul+0x38>
 8000b50:	2303      	movs	r3, #3
 8000b52:	260c      	movs	r6, #12
 8000b54:	25ff      	movs	r5, #255	; 0xff
 8000b56:	469a      	mov	sl, r3
 8000b58:	e72c      	b.n	80009b4 <__aeabi_fmul+0x38>
 8000b5a:	4648      	mov	r0, r9
 8000b5c:	f000 f85c 	bl	8000c18 <__clzsi2>
 8000b60:	464a      	mov	r2, r9
 8000b62:	1f43      	subs	r3, r0, #5
 8000b64:	2576      	movs	r5, #118	; 0x76
 8000b66:	409a      	lsls	r2, r3
 8000b68:	2300      	movs	r3, #0
 8000b6a:	426d      	negs	r5, r5
 8000b6c:	4691      	mov	r9, r2
 8000b6e:	2600      	movs	r6, #0
 8000b70:	469a      	mov	sl, r3
 8000b72:	1a2d      	subs	r5, r5, r0
 8000b74:	e71e      	b.n	80009b4 <__aeabi_fmul+0x38>
 8000b76:	0020      	movs	r0, r4
 8000b78:	f000 f84e 	bl	8000c18 <__clzsi2>
 8000b7c:	4642      	mov	r2, r8
 8000b7e:	1f43      	subs	r3, r0, #5
 8000b80:	409c      	lsls	r4, r3
 8000b82:	1a2b      	subs	r3, r5, r0
 8000b84:	3b76      	subs	r3, #118	; 0x76
 8000b86:	407a      	eors	r2, r7
 8000b88:	2000      	movs	r0, #0
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	1c5d      	adds	r5, r3, #1
 8000b8e:	2e0a      	cmp	r6, #10
 8000b90:	dd00      	ble.n	8000b94 <__aeabi_fmul+0x218>
 8000b92:	e726      	b.n	80009e2 <__aeabi_fmul+0x66>
 8000b94:	e739      	b.n	8000a0a <__aeabi_fmul+0x8e>
 8000b96:	2101      	movs	r1, #1
 8000b98:	1acb      	subs	r3, r1, r3
 8000b9a:	2b1b      	cmp	r3, #27
 8000b9c:	dd00      	ble.n	8000ba0 <__aeabi_fmul+0x224>
 8000b9e:	e73d      	b.n	8000a1c <__aeabi_fmul+0xa0>
 8000ba0:	359e      	adds	r5, #158	; 0x9e
 8000ba2:	0021      	movs	r1, r4
 8000ba4:	40ac      	lsls	r4, r5
 8000ba6:	40d9      	lsrs	r1, r3
 8000ba8:	1e63      	subs	r3, r4, #1
 8000baa:	419c      	sbcs	r4, r3
 8000bac:	4321      	orrs	r1, r4
 8000bae:	074b      	lsls	r3, r1, #29
 8000bb0:	d004      	beq.n	8000bbc <__aeabi_fmul+0x240>
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	400b      	ands	r3, r1
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	d000      	beq.n	8000bbc <__aeabi_fmul+0x240>
 8000bba:	3104      	adds	r1, #4
 8000bbc:	014b      	lsls	r3, r1, #5
 8000bbe:	d504      	bpl.n	8000bca <__aeabi_fmul+0x24e>
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	e72c      	b.n	8000a20 <__aeabi_fmul+0xa4>
 8000bc6:	001d      	movs	r5, r3
 8000bc8:	e78f      	b.n	8000aea <__aeabi_fmul+0x16e>
 8000bca:	0189      	lsls	r1, r1, #6
 8000bcc:	2000      	movs	r0, #0
 8000bce:	0a49      	lsrs	r1, r1, #9
 8000bd0:	e726      	b.n	8000a20 <__aeabi_fmul+0xa4>
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	2e0f      	cmp	r6, #15
 8000bd6:	d10c      	bne.n	8000bf2 <__aeabi_fmul+0x276>
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	464b      	mov	r3, r9
 8000bdc:	03c9      	lsls	r1, r1, #15
 8000bde:	420b      	tst	r3, r1
 8000be0:	d00d      	beq.n	8000bfe <__aeabi_fmul+0x282>
 8000be2:	420c      	tst	r4, r1
 8000be4:	d10b      	bne.n	8000bfe <__aeabi_fmul+0x282>
 8000be6:	4321      	orrs	r1, r4
 8000be8:	0249      	lsls	r1, r1, #9
 8000bea:	003a      	movs	r2, r7
 8000bec:	20ff      	movs	r0, #255	; 0xff
 8000bee:	0a49      	lsrs	r1, r1, #9
 8000bf0:	e716      	b.n	8000a20 <__aeabi_fmul+0xa4>
 8000bf2:	2e0b      	cmp	r6, #11
 8000bf4:	d000      	beq.n	8000bf8 <__aeabi_fmul+0x27c>
 8000bf6:	e6f7      	b.n	80009e8 <__aeabi_fmul+0x6c>
 8000bf8:	46a1      	mov	r9, r4
 8000bfa:	469a      	mov	sl, r3
 8000bfc:	e736      	b.n	8000a6c <__aeabi_fmul+0xf0>
 8000bfe:	2180      	movs	r1, #128	; 0x80
 8000c00:	464b      	mov	r3, r9
 8000c02:	03c9      	lsls	r1, r1, #15
 8000c04:	4319      	orrs	r1, r3
 8000c06:	0249      	lsls	r1, r1, #9
 8000c08:	4642      	mov	r2, r8
 8000c0a:	20ff      	movs	r0, #255	; 0xff
 8000c0c:	0a49      	lsrs	r1, r1, #9
 8000c0e:	e707      	b.n	8000a20 <__aeabi_fmul+0xa4>
 8000c10:	2303      	movs	r3, #3
 8000c12:	e7df      	b.n	8000bd4 <__aeabi_fmul+0x258>
 8000c14:	f7ffffff 	.word	0xf7ffffff

08000c18 <__clzsi2>:
 8000c18:	211c      	movs	r1, #28
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	041b      	lsls	r3, r3, #16
 8000c1e:	4298      	cmp	r0, r3
 8000c20:	d301      	bcc.n	8000c26 <__clzsi2+0xe>
 8000c22:	0c00      	lsrs	r0, r0, #16
 8000c24:	3910      	subs	r1, #16
 8000c26:	0a1b      	lsrs	r3, r3, #8
 8000c28:	4298      	cmp	r0, r3
 8000c2a:	d301      	bcc.n	8000c30 <__clzsi2+0x18>
 8000c2c:	0a00      	lsrs	r0, r0, #8
 8000c2e:	3908      	subs	r1, #8
 8000c30:	091b      	lsrs	r3, r3, #4
 8000c32:	4298      	cmp	r0, r3
 8000c34:	d301      	bcc.n	8000c3a <__clzsi2+0x22>
 8000c36:	0900      	lsrs	r0, r0, #4
 8000c38:	3904      	subs	r1, #4
 8000c3a:	a202      	add	r2, pc, #8	; (adr r2, 8000c44 <__clzsi2+0x2c>)
 8000c3c:	5c10      	ldrb	r0, [r2, r0]
 8000c3e:	1840      	adds	r0, r0, r1
 8000c40:	4770      	bx	lr
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	02020304 	.word	0x02020304
 8000c48:	01010101 	.word	0x01010101
	...

08000c54 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0

}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	af00      	add	r7, sp, #0
return 0;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	0018      	movs	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b087      	sub	sp, #28
 8000c70:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <MX_FREERTOS_Init+0x2c>)
 8000c76:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c78:	c313      	stmia	r3!, {r0, r1, r4}
 8000c7a:	ca03      	ldmia	r2!, {r0, r1}
 8000c7c:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	2100      	movs	r1, #0
 8000c82:	0018      	movs	r0, r3
 8000c84:	f005 ff21 	bl	8006aca <osThreadCreate>
 8000c88:	0002      	movs	r2, r0
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <MX_FREERTOS_Init+0x30>)
 8000c8c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b007      	add	sp, #28
 8000c94:	bd90      	pop	{r4, r7, pc}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	08009eb8 	.word	0x08009eb8
 8000c9c:	200000b0 	.word	0x200000b0

08000ca0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f005 ff36 	bl	8006b1a <osDelay>
 8000cae:	e7fb      	b.n	8000ca8 <StartDefaultTask+0x8>

08000cb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <MX_DMA_Init+0x48>)
 8000cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_DMA_Init+0x48>)
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	639a      	str	r2, [r3, #56]	; 0x38
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <MX_DMA_Init+0x48>)
 8000cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4013      	ands	r3, r2
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2103      	movs	r1, #3
 8000cd2:	2009      	movs	r0, #9
 8000cd4:	f001 fe64 	bl	80029a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cd8:	2009      	movs	r0, #9
 8000cda:	f001 fe76 	bl	80029ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2103      	movs	r1, #3
 8000ce2:	200a      	movs	r0, #10
 8000ce4:	f001 fe5c 	bl	80029a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000ce8:	200a      	movs	r0, #10
 8000cea:	f001 fe6e 	bl	80029ca <HAL_NVIC_EnableIRQ>

}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	40021000 	.word	0x40021000

08000cfc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b08b      	sub	sp, #44	; 0x2c
 8000d00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	2414      	movs	r4, #20
 8000d04:	193b      	adds	r3, r7, r4
 8000d06:	0018      	movs	r0, r3
 8000d08:	2314      	movs	r3, #20
 8000d0a:	001a      	movs	r2, r3
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	f008 fb15 	bl	800933c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d12:	4b58      	ldr	r3, [pc, #352]	; (8000e74 <MX_GPIO_Init+0x178>)
 8000d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d16:	4b57      	ldr	r3, [pc, #348]	; (8000e74 <MX_GPIO_Init+0x178>)
 8000d18:	2120      	movs	r1, #32
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d1e:	4b55      	ldr	r3, [pc, #340]	; (8000e74 <MX_GPIO_Init+0x178>)
 8000d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d22:	2220      	movs	r2, #32
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b52      	ldr	r3, [pc, #328]	; (8000e74 <MX_GPIO_Init+0x178>)
 8000d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d2e:	4b51      	ldr	r3, [pc, #324]	; (8000e74 <MX_GPIO_Init+0x178>)
 8000d30:	2101      	movs	r1, #1
 8000d32:	430a      	orrs	r2, r1
 8000d34:	635a      	str	r2, [r3, #52]	; 0x34
 8000d36:	4b4f      	ldr	r3, [pc, #316]	; (8000e74 <MX_GPIO_Init+0x178>)
 8000d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d42:	4b4c      	ldr	r3, [pc, #304]	; (8000e74 <MX_GPIO_Init+0x178>)
 8000d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d46:	4b4b      	ldr	r3, [pc, #300]	; (8000e74 <MX_GPIO_Init+0x178>)
 8000d48:	2104      	movs	r1, #4
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d4e:	4b49      	ldr	r3, [pc, #292]	; (8000e74 <MX_GPIO_Init+0x178>)
 8000d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d52:	2204      	movs	r2, #4
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	4b46      	ldr	r3, [pc, #280]	; (8000e74 <MX_GPIO_Init+0x178>)
 8000d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d5e:	4b45      	ldr	r3, [pc, #276]	; (8000e74 <MX_GPIO_Init+0x178>)
 8000d60:	2102      	movs	r1, #2
 8000d62:	430a      	orrs	r2, r1
 8000d64:	635a      	str	r2, [r3, #52]	; 0x34
 8000d66:	4b43      	ldr	r3, [pc, #268]	; (8000e74 <MX_GPIO_Init+0x178>)
 8000d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d72:	4b40      	ldr	r3, [pc, #256]	; (8000e74 <MX_GPIO_Init+0x178>)
 8000d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d76:	4b3f      	ldr	r3, [pc, #252]	; (8000e74 <MX_GPIO_Init+0x178>)
 8000d78:	2108      	movs	r1, #8
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d7e:	4b3d      	ldr	r3, [pc, #244]	; (8000e74 <MX_GPIO_Init+0x178>)
 8000d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d82:	2208      	movs	r2, #8
 8000d84:	4013      	ands	r3, r2
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LIDAR_M_EN_Pin|LIDAR_DEV_EN_Pin, GPIO_PIN_RESET);
 8000d8a:	4b3b      	ldr	r3, [pc, #236]	; (8000e78 <MX_GPIO_Init+0x17c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2130      	movs	r1, #48	; 0x30
 8000d90:	0018      	movs	r0, r3
 8000d92:	f002 f9e7 	bl	8003164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_ORANGE_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000d96:	23e0      	movs	r3, #224	; 0xe0
 8000d98:	019b      	lsls	r3, r3, #6
 8000d9a:	4838      	ldr	r0, [pc, #224]	; (8000e7c <MX_GPIO_Init+0x180>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	0019      	movs	r1, r3
 8000da0:	f002 f9e0 	bl	8003164 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LIDAR_M_EN_Pin|LIDAR_DEV_EN_Pin;
 8000da4:	193b      	adds	r3, r7, r4
 8000da6:	2230      	movs	r2, #48	; 0x30
 8000da8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000daa:	193b      	adds	r3, r7, r4
 8000dac:	2201      	movs	r2, #1
 8000dae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db0:	193b      	adds	r3, r7, r4
 8000db2:	2201      	movs	r2, #1
 8000db4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbc:	193b      	adds	r3, r7, r4
 8000dbe:	4a2e      	ldr	r2, [pc, #184]	; (8000e78 <MX_GPIO_Init+0x17c>)
 8000dc0:	0019      	movs	r1, r3
 8000dc2:	0010      	movs	r0, r2
 8000dc4:	f002 f86a 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_ORANGE_Pin|LED_GREEN_Pin;
 8000dc8:	0021      	movs	r1, r4
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	22e0      	movs	r2, #224	; 0xe0
 8000dce:	0192      	lsls	r2, r2, #6
 8000dd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	000c      	movs	r4, r1
 8000dd4:	193b      	adds	r3, r7, r4
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	193b      	adds	r3, r7, r4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	193b      	adds	r3, r7, r4
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de6:	193b      	adds	r3, r7, r4
 8000de8:	4a24      	ldr	r2, [pc, #144]	; (8000e7c <MX_GPIO_Init+0x180>)
 8000dea:	0019      	movs	r1, r3
 8000dec:	0010      	movs	r0, r2
 8000dee:	f002 f855 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BORDER_BACK_Pin;
 8000df2:	0021      	movs	r1, r4
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	2204      	movs	r2, #4
 8000df8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	2288      	movs	r2, #136	; 0x88
 8000dfe:	0352      	lsls	r2, r2, #13
 8000e00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	2201      	movs	r2, #1
 8000e06:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BORDER_BACK_GPIO_Port, &GPIO_InitStruct);
 8000e08:	000c      	movs	r4, r1
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	4a1c      	ldr	r2, [pc, #112]	; (8000e80 <MX_GPIO_Init+0x184>)
 8000e0e:	0019      	movs	r1, r3
 8000e10:	0010      	movs	r0, r2
 8000e12:	f002 f843 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BORDER_FRONT_Pin;
 8000e16:	0021      	movs	r1, r4
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	2288      	movs	r2, #136	; 0x88
 8000e22:	0352      	lsls	r2, r2, #13
 8000e24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2202      	movs	r2, #2
 8000e2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BORDER_FRONT_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	000c      	movs	r4, r1
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <MX_GPIO_Init+0x184>)
 8000e32:	0019      	movs	r1, r3
 8000e34:	0010      	movs	r0, r2
 8000e36:	f002 f831 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BUMPER_L_Pin|BUMPER_R_Pin|BUMPER_B_Pin|BUMPER_F_Pin;
 8000e3a:	0021      	movs	r1, r4
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	22f0      	movs	r2, #240	; 0xf0
 8000e40:	0092      	lsls	r2, r2, #2
 8000e42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2200      	movs	r2, #0
 8000e48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <MX_GPIO_Init+0x180>)
 8000e54:	0019      	movs	r1, r3
 8000e56:	0010      	movs	r0, r2
 8000e58:	f002 f820 	bl	8002e9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2103      	movs	r1, #3
 8000e60:	2006      	movs	r0, #6
 8000e62:	f001 fd9d 	bl	80029a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000e66:	2006      	movs	r0, #6
 8000e68:	f001 fdaf 	bl	80029ca <HAL_NVIC_EnableIRQ>

}
 8000e6c:	46c0      	nop			; (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b00b      	add	sp, #44	; 0x2c
 8000e72:	bd90      	pop	{r4, r7, pc}
 8000e74:	40021000 	.word	0x40021000
 8000e78:	50000800 	.word	0x50000800
 8000e7c:	50000400 	.word	0x50000400
 8000e80:	50000c00 	.word	0x50000c00

08000e84 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	425b      	negs	r3, r3
 8000e90:	1d39      	adds	r1, r7, #4
 8000e92:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <__io_putchar+0x20>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	f004 fccf 	bl	8005838 <HAL_UART_Transmit>
	return chr;
 8000e9a:	687b      	ldr	r3, [r7, #4]
}
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b002      	add	sp, #8
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000354 	.word	0x20000354

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f001 fcb3 	bl	8002818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 f8b9 	bl	8001028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f7ff ff21 	bl	8000cfc <MX_GPIO_Init>
  MX_DMA_Init();
 8000eba:	f7ff fef9 	bl	8000cb0 <MX_DMA_Init>
  MX_TIM1_Init();
 8000ebe:	f000 fe65 	bl	8001b8c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ec2:	f000 fecd 	bl	8001c60 <MX_TIM3_Init>
  MX_TIM14_Init();
 8000ec6:	f000 ff2f 	bl	8001d28 <MX_TIM14_Init>
  MX_TIM15_Init();
 8000eca:	f000 ff7b 	bl	8001dc4 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000ece:	f001 f83d 	bl	8001f4c <MX_TIM16_Init>
  MX_TIM17_Init();
 8000ed2:	f001 f8c3 	bl	800205c <MX_TIM17_Init>
  MX_USART2_UART_Init();
 8000ed6:	f001 faed 	bl	80024b4 <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 8000eda:	f001 fb3d 	bl	8002558 <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */
	printf("================== boot ================\n");
 8000ede:	4b42      	ldr	r3, [pc, #264]	; (8000fe8 <main+0x140>)
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f008 f92f 	bl	8009144 <puts>

	// TIMER PWM LIDAR
	if(START_PWM(pwm_lidar) != HAL_OK)
 8000ee6:	4b41      	ldr	r3, [pc, #260]	; (8000fec <main+0x144>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	4b40      	ldr	r3, [pc, #256]	; (8000fec <main+0x144>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	0019      	movs	r1, r3
 8000ef0:	0010      	movs	r0, r2
 8000ef2:	f003 f973 	bl	80041dc <HAL_TIM_PWM_Start>
 8000ef6:	1e03      	subs	r3, r0, #0
 8000ef8:	d005      	beq.n	8000f06 <main+0x5e>
	{
		printf("ERROR: PWM Start LIDAR\r\n");
 8000efa:	4b3d      	ldr	r3, [pc, #244]	; (8000ff0 <main+0x148>)
 8000efc:	0018      	movs	r0, r3
 8000efe:	f008 f921 	bl	8009144 <puts>
		Error_Handler();
 8000f02:	f000 f8fd 	bl	8001100 <Error_Handler>
	}

	// TIMER PWM MOTORS
	if((START_PWM(pwm_rev_left) != HAL_OK) || (START_PWM(pwm_fwd_left) != HAL_OK) ||
 8000f06:	4b3b      	ldr	r3, [pc, #236]	; (8000ff4 <main+0x14c>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ff4 <main+0x14c>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	0019      	movs	r1, r3
 8000f10:	0010      	movs	r0, r2
 8000f12:	f003 f963 	bl	80041dc <HAL_TIM_PWM_Start>
 8000f16:	1e03      	subs	r3, r0, #0
 8000f18:	d11d      	bne.n	8000f56 <main+0xae>
 8000f1a:	4b37      	ldr	r3, [pc, #220]	; (8000ff8 <main+0x150>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <main+0x150>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	0019      	movs	r1, r3
 8000f24:	0010      	movs	r0, r2
 8000f26:	f003 f959 	bl	80041dc <HAL_TIM_PWM_Start>
 8000f2a:	1e03      	subs	r3, r0, #0
 8000f2c:	d113      	bne.n	8000f56 <main+0xae>
			(START_PWM(pwm_rev_right) != HAL_OK) || (START_PWM(pwm_fwd_right) != HAL_OK))
 8000f2e:	4b33      	ldr	r3, [pc, #204]	; (8000ffc <main+0x154>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	4b32      	ldr	r3, [pc, #200]	; (8000ffc <main+0x154>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	0019      	movs	r1, r3
 8000f38:	0010      	movs	r0, r2
 8000f3a:	f003 f94f 	bl	80041dc <HAL_TIM_PWM_Start>
 8000f3e:	1e03      	subs	r3, r0, #0
	if((START_PWM(pwm_rev_left) != HAL_OK) || (START_PWM(pwm_fwd_left) != HAL_OK) ||
 8000f40:	d109      	bne.n	8000f56 <main+0xae>
			(START_PWM(pwm_rev_right) != HAL_OK) || (START_PWM(pwm_fwd_right) != HAL_OK))
 8000f42:	4b2f      	ldr	r3, [pc, #188]	; (8001000 <main+0x158>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4b2e      	ldr	r3, [pc, #184]	; (8001000 <main+0x158>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	0019      	movs	r1, r3
 8000f4c:	0010      	movs	r0, r2
 8000f4e:	f003 f945 	bl	80041dc <HAL_TIM_PWM_Start>
 8000f52:	1e03      	subs	r3, r0, #0
 8000f54:	d005      	beq.n	8000f62 <main+0xba>
	{
		printf("ERROR: PWM Start MOTORS\r\n");
 8000f56:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <main+0x15c>)
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f008 f8f3 	bl	8009144 <puts>
		Error_Handler();
 8000f5e:	f000 f8cf 	bl	8001100 <Error_Handler>
	}

	// TIMER ENCODEUR MOTORS
	if((HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL) != HAL_OK) ||
 8000f62:	4b29      	ldr	r3, [pc, #164]	; (8001008 <main+0x160>)
 8000f64:	213c      	movs	r1, #60	; 0x3c
 8000f66:	0018      	movs	r0, r3
 8000f68:	f003 fac4 	bl	80044f4 <HAL_TIM_Encoder_Start>
 8000f6c:	1e03      	subs	r3, r0, #0
 8000f6e:	d106      	bne.n	8000f7e <main+0xd6>
			(HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL) != HAL_OK))
 8000f70:	4b26      	ldr	r3, [pc, #152]	; (800100c <main+0x164>)
 8000f72:	213c      	movs	r1, #60	; 0x3c
 8000f74:	0018      	movs	r0, r3
 8000f76:	f003 fabd 	bl	80044f4 <HAL_TIM_Encoder_Start>
 8000f7a:	1e03      	subs	r3, r0, #0
	if((HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL) != HAL_OK) ||
 8000f7c:	d005      	beq.n	8000f8a <main+0xe2>
	{
		printf("ERROR: ENCODEUR Start MOTORS\r\n");
 8000f7e:	4b24      	ldr	r3, [pc, #144]	; (8001010 <main+0x168>)
 8000f80:	0018      	movs	r0, r3
 8000f82:	f008 f8df 	bl	8009144 <puts>
		Error_Handler();
 8000f86:	f000 f8bb 	bl	8001100 <Error_Handler>
	}

	// PID struct init
	initPID(&pid_motor_left, 0.5, 1.0, 1.0, TE);
 8000f8a:	24fe      	movs	r4, #254	; 0xfe
 8000f8c:	05a4      	lsls	r4, r4, #22
 8000f8e:	22fe      	movs	r2, #254	; 0xfe
 8000f90:	0592      	lsls	r2, r2, #22
 8000f92:	21fc      	movs	r1, #252	; 0xfc
 8000f94:	0589      	lsls	r1, r1, #22
 8000f96:	481f      	ldr	r0, [pc, #124]	; (8001014 <main+0x16c>)
 8000f98:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <main+0x170>)
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	1c23      	adds	r3, r4, #0
 8000f9e:	f000 faf0 	bl	8001582 <initPID>
	initPID(&pid_motor_right, 0.5, 1.0, 1.0, TE);
 8000fa2:	24fe      	movs	r4, #254	; 0xfe
 8000fa4:	05a4      	lsls	r4, r4, #22
 8000fa6:	22fe      	movs	r2, #254	; 0xfe
 8000fa8:	0592      	lsls	r2, r2, #22
 8000faa:	21fc      	movs	r1, #252	; 0xfc
 8000fac:	0589      	lsls	r1, r1, #22
 8000fae:	481b      	ldr	r0, [pc, #108]	; (800101c <main+0x174>)
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <main+0x170>)
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	1c23      	adds	r3, r4, #0
 8000fb6:	f000 fae4 	bl	8001582 <initPID>

	// Motor struct init
	initMotor(&motor_left, &pwm_fwd_left, &pwm_rev_left, &htim3);
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <main+0x164>)
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <main+0x14c>)
 8000fbe:	490e      	ldr	r1, [pc, #56]	; (8000ff8 <main+0x150>)
 8000fc0:	4817      	ldr	r0, [pc, #92]	; (8001020 <main+0x178>)
 8000fc2:	f000 fa2d 	bl	8001420 <initMotor>
	initMotor(&motor_right, &pwm_fwd_right, &pwm_rev_right, &htim1);
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <main+0x160>)
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <main+0x154>)
 8000fca:	490d      	ldr	r1, [pc, #52]	; (8001000 <main+0x158>)
 8000fcc:	4815      	ldr	r0, [pc, #84]	; (8001024 <main+0x17c>)
 8000fce:	f000 fa27 	bl	8001420 <initMotor>

	//__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1 ,85);

	bool ret = createMainTask();
 8000fd2:	1dfc      	adds	r4, r7, #7
 8000fd4:	f000 f9f4 	bl	80013c0 <createMainTask>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	7023      	strb	r3, [r4, #0]

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000fdc:	f7ff fe46 	bl	8000c6c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000fe0:	f005 fd6b 	bl	8006aba <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  

  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <main+0x13c>
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	08009ecc 	.word	0x08009ecc
 8000fec:	20000020 	.word	0x20000020
 8000ff0:	08009ef8 	.word	0x08009ef8
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	20000010 	.word	0x20000010
 8001000:	20000018 	.word	0x20000018
 8001004:	08009f10 	.word	0x08009f10
 8001008:	2000018c 	.word	0x2000018c
 800100c:	200001d8 	.word	0x200001d8
 8001010:	08009f2c 	.word	0x08009f2c
 8001014:	200000e0 	.word	0x200000e0
 8001018:	41200000 	.word	0x41200000
 800101c:	20000108 	.word	0x20000108
 8001020:	200000c0 	.word	0x200000c0
 8001024:	200000d0 	.word	0x200000d0

08001028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b093      	sub	sp, #76	; 0x4c
 800102c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102e:	2414      	movs	r4, #20
 8001030:	193b      	adds	r3, r7, r4
 8001032:	0018      	movs	r0, r3
 8001034:	2334      	movs	r3, #52	; 0x34
 8001036:	001a      	movs	r2, r3
 8001038:	2100      	movs	r1, #0
 800103a:	f008 f97f 	bl	800933c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	0018      	movs	r0, r3
 8001042:	2310      	movs	r3, #16
 8001044:	001a      	movs	r2, r3
 8001046:	2100      	movs	r1, #0
 8001048:	f008 f978 	bl	800933c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	0018      	movs	r0, r3
 8001052:	f002 f8f3 	bl	800323c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001056:	193b      	adds	r3, r7, r4
 8001058:	2202      	movs	r2, #2
 800105a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105c:	193b      	adds	r3, r7, r4
 800105e:	2280      	movs	r2, #128	; 0x80
 8001060:	0052      	lsls	r2, r2, #1
 8001062:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001064:	0021      	movs	r1, r4
 8001066:	187b      	adds	r3, r7, r1
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800106c:	187b      	adds	r3, r7, r1
 800106e:	2240      	movs	r2, #64	; 0x40
 8001070:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001072:	187b      	adds	r3, r7, r1
 8001074:	2202      	movs	r2, #2
 8001076:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001078:	187b      	adds	r3, r7, r1
 800107a:	2202      	movs	r2, #2
 800107c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800107e:	187b      	adds	r3, r7, r1
 8001080:	2200      	movs	r2, #0
 8001082:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2208      	movs	r2, #8
 8001088:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800108a:	187b      	adds	r3, r7, r1
 800108c:	2280      	movs	r2, #128	; 0x80
 800108e:	0292      	lsls	r2, r2, #10
 8001090:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001092:	187b      	adds	r3, r7, r1
 8001094:	2280      	movs	r2, #128	; 0x80
 8001096:	0592      	lsls	r2, r2, #22
 8001098:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109a:	187b      	adds	r3, r7, r1
 800109c:	0018      	movs	r0, r3
 800109e:	f002 f919 	bl	80032d4 <HAL_RCC_OscConfig>
 80010a2:	1e03      	subs	r3, r0, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010a6:	f000 f82b 	bl	8001100 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2207      	movs	r2, #7
 80010ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2202      	movs	r2, #2
 80010b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2102      	movs	r1, #2
 80010c6:	0018      	movs	r0, r3
 80010c8:	f002 fc14 	bl	80038f4 <HAL_RCC_ClockConfig>
 80010cc:	1e03      	subs	r3, r0, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80010d0:	f000 f816 	bl	8001100 <Error_Handler>
  }
}
 80010d4:	46c0      	nop			; (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b013      	add	sp, #76	; 0x4c
 80010da:	bd90      	pop	{r4, r7, pc}

080010dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d101      	bne.n	80010f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ee:	f001 fbb3 	bl	8002858 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	46bd      	mov	sp, r7
 80010f6:	b002      	add	sp, #8
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	40001000 	.word	0x40001000

08001100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001104:	b672      	cpsid	i
}
 8001106:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001108:	e7fe      	b.n	8001108 <Error_Handler+0x8>
	...

0800110c <HAL_GPIO_EXTI_Rising_Callback>:
}mainHandle_t;

TaskHandle_t h_task_main;
mainHandle_t mainHandle;

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af02      	add	r7, sp, #8
 8001112:	0002      	movs	r2, r0
 8001114:	1dbb      	adds	r3, r7, #6
 8001116:	801a      	strh	r2, [r3, #0]
	LOG_MAIN_ENTER();
 8001118:	4a3b      	ldr	r2, [pc, #236]	; (8001208 <HAL_GPIO_EXTI_Rising_Callback+0xfc>)
 800111a:	4b3c      	ldr	r3, [pc, #240]	; (800120c <HAL_GPIO_EXTI_Rising_Callback+0x100>)
 800111c:	0011      	movs	r1, r2
 800111e:	0018      	movs	r0, r3
 8001120:	f007 ffaa 	bl	8009078 <iprintf>
	HAL_GPIO_TogglePin(GPIOB, LED_GREEN_Pin);
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	019b      	lsls	r3, r3, #6
 8001128:	4a39      	ldr	r2, [pc, #228]	; (8001210 <HAL_GPIO_EXTI_Rising_Callback+0x104>)
 800112a:	0019      	movs	r1, r3
 800112c:	0010      	movs	r0, r2
 800112e:	f002 f836 	bl	800319e <HAL_GPIO_TogglePin>
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
	if(GPIO_Pin == BUMPER_F_Pin) {
 8001136:	1dbb      	adds	r3, r7, #6
 8001138:	881a      	ldrh	r2, [r3, #0]
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	429a      	cmp	r2, r3
 8001140:	d10a      	bne.n	8001158 <HAL_GPIO_EXTI_Rising_Callback+0x4c>
		xTaskNotifyFromISR(h_task_main, BUMPER_F_NOTIFY, eSetBits, &xHigherPriorityTaskWoken);
 8001142:	4b34      	ldr	r3, [pc, #208]	; (8001214 <HAL_GPIO_EXTI_Rising_Callback+0x108>)
 8001144:	6818      	ldr	r0, [r3, #0]
 8001146:	230c      	movs	r3, #12
 8001148:	18fb      	adds	r3, r7, r3
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2300      	movs	r3, #0
 800114e:	2201      	movs	r2, #1
 8001150:	2100      	movs	r1, #0
 8001152:	f006 ff9f 	bl	8008094 <xTaskGenericNotifyFromISR>
 8001156:	e04b      	b.n	80011f0 <HAL_GPIO_EXTI_Rising_Callback+0xe4>
	} else if(GPIO_Pin == BUMPER_B_Pin) {
 8001158:	1dbb      	adds	r3, r7, #6
 800115a:	881a      	ldrh	r2, [r3, #0]
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	429a      	cmp	r2, r3
 8001162:	d10a      	bne.n	800117a <HAL_GPIO_EXTI_Rising_Callback+0x6e>
		xTaskNotifyFromISR(h_task_main, BUMPER_B_NOTIFY, eSetBits, &xHigherPriorityTaskWoken );
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <HAL_GPIO_EXTI_Rising_Callback+0x108>)
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	230c      	movs	r3, #12
 800116a:	18fb      	adds	r3, r7, r3
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2300      	movs	r3, #0
 8001170:	2201      	movs	r2, #1
 8001172:	2101      	movs	r1, #1
 8001174:	f006 ff8e 	bl	8008094 <xTaskGenericNotifyFromISR>
 8001178:	e03a      	b.n	80011f0 <HAL_GPIO_EXTI_Rising_Callback+0xe4>
	} else if(GPIO_Pin == BUMPER_R_Pin) {
 800117a:	1dbb      	adds	r3, r7, #6
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	2b80      	cmp	r3, #128	; 0x80
 8001180:	d10a      	bne.n	8001198 <HAL_GPIO_EXTI_Rising_Callback+0x8c>
		xTaskNotifyFromISR(h_task_main, BUMPER_R_NOTIFY, eSetBits, &xHigherPriorityTaskWoken );
 8001182:	4b24      	ldr	r3, [pc, #144]	; (8001214 <HAL_GPIO_EXTI_Rising_Callback+0x108>)
 8001184:	6818      	ldr	r0, [r3, #0]
 8001186:	230c      	movs	r3, #12
 8001188:	18fb      	adds	r3, r7, r3
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2300      	movs	r3, #0
 800118e:	2201      	movs	r2, #1
 8001190:	2102      	movs	r1, #2
 8001192:	f006 ff7f 	bl	8008094 <xTaskGenericNotifyFromISR>
 8001196:	e02b      	b.n	80011f0 <HAL_GPIO_EXTI_Rising_Callback+0xe4>
	} else if(GPIO_Pin == BUMPER_L_Pin) {
 8001198:	1dbb      	adds	r3, r7, #6
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	2b40      	cmp	r3, #64	; 0x40
 800119e:	d10a      	bne.n	80011b6 <HAL_GPIO_EXTI_Rising_Callback+0xaa>
		xTaskNotifyFromISR(h_task_main, BUMPER_L_NOTIFY, eSetBits, &xHigherPriorityTaskWoken );
 80011a0:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <HAL_GPIO_EXTI_Rising_Callback+0x108>)
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	230c      	movs	r3, #12
 80011a6:	18fb      	adds	r3, r7, r3
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2300      	movs	r3, #0
 80011ac:	2201      	movs	r2, #1
 80011ae:	2103      	movs	r1, #3
 80011b0:	f006 ff70 	bl	8008094 <xTaskGenericNotifyFromISR>
 80011b4:	e01c      	b.n	80011f0 <HAL_GPIO_EXTI_Rising_Callback+0xe4>
	} else if(GPIO_Pin == BORDER_FRONT_Pin) {
 80011b6:	1dbb      	adds	r3, r7, #6
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	2b08      	cmp	r3, #8
 80011bc:	d10a      	bne.n	80011d4 <HAL_GPIO_EXTI_Rising_Callback+0xc8>
		xTaskNotifyFromISR(getPositionMotorTaskHandle(), BORDER_F_NOTIFY, eSetBits, &xHigherPriorityTaskWoken );
 80011be:	f000 fcdb 	bl	8001b78 <getPositionMotorTaskHandle>
 80011c2:	230c      	movs	r3, #12
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2300      	movs	r3, #0
 80011ca:	2201      	movs	r2, #1
 80011cc:	2104      	movs	r1, #4
 80011ce:	f006 ff61 	bl	8008094 <xTaskGenericNotifyFromISR>
 80011d2:	e00d      	b.n	80011f0 <HAL_GPIO_EXTI_Rising_Callback+0xe4>
	} else if(GPIO_Pin == BORDER_BACK_Pin) {
 80011d4:	1dbb      	adds	r3, r7, #6
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	2b04      	cmp	r3, #4
 80011da:	d109      	bne.n	80011f0 <HAL_GPIO_EXTI_Rising_Callback+0xe4>
		xTaskNotifyFromISR(getPositionMotorTaskHandle(), BORDER_B_NOTIFY, eSetBits, &xHigherPriorityTaskWoken );
 80011dc:	f000 fccc 	bl	8001b78 <getPositionMotorTaskHandle>
 80011e0:	230c      	movs	r3, #12
 80011e2:	18fb      	adds	r3, r7, r3
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2300      	movs	r3, #0
 80011e8:	2201      	movs	r2, #1
 80011ea:	2105      	movs	r1, #5
 80011ec:	f006 ff52 	bl	8008094 <xTaskGenericNotifyFromISR>
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_EXTI_Rising_Callback+0xf2>
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_GPIO_EXTI_Rising_Callback+0x10c>)
 80011f8:	2280      	movs	r2, #128	; 0x80
 80011fa:	0552      	lsls	r2, r2, #21
 80011fc:	601a      	str	r2, [r3, #0]
}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	46bd      	mov	sp, r7
 8001202:	b004      	add	sp, #16
 8001204:	bd80      	pop	{r7, pc}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	0800a10c 	.word	0x0800a10c
 800120c:	08009f4c 	.word	0x08009f4c
 8001210:	50000400 	.word	0x50000400
 8001214:	200000b4 	.word	0x200000b4
 8001218:	e000ed04 	.word	0xe000ed04

0800121c <setMainState>:
 * @brief Toggles the main system state between CAT and MOUSE.
 *
 * This function toggles the main system state between CAT and MOUSE. If the
 * current state is CAT, it switches to MOUSE, and vice versa.
 */
void setMainState(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	if(mainHandle.state == MAIN_CAT) {
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <setMainState+0x28>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d103      	bne.n	8001230 <setMainState+0x14>
		mainHandle.state = MAIN_MOUSE;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <setMainState+0x28>)
 800122a:	2202      	movs	r2, #2
 800122c:	701a      	strb	r2, [r3, #0]
	} else if(mainHandle.state == MAIN_MOUSE) {
		mainHandle.state = MAIN_CAT;
	}
}
 800122e:	e006      	b.n	800123e <setMainState+0x22>
	} else if(mainHandle.state == MAIN_MOUSE) {
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <setMainState+0x28>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d102      	bne.n	800123e <setMainState+0x22>
		mainHandle.state = MAIN_CAT;
 8001238:	4b02      	ldr	r3, [pc, #8]	; (8001244 <setMainState+0x28>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200000b8 	.word	0x200000b8

08001248 <mainTask>:
 * This task is responsible for managing the overall behavior of the system.
 * It transitions between different states and performs actions based on the
 * current state. Additionally, it toggles LEDs, processes notifications, and
 * handles timeouts using a timer.
 */
void mainTask(void *param) {
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b087      	sub	sp, #28
 800124c:	af02      	add	r7, sp, #8
 800124e:	6078      	str	r0, [r7, #4]
	returncode_t status;
	uint32_t ulNotifiedValue;

	mainHandle.state = MAIN_INIT;
 8001250:	4b57      	ldr	r3, [pc, #348]	; (80013b0 <mainTask+0x168>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
	mainHandle.lastState = mainHandle.state;
 8001256:	4b56      	ldr	r3, [pc, #344]	; (80013b0 <mainTask+0x168>)
 8001258:	781a      	ldrb	r2, [r3, #0]
 800125a:	4b55      	ldr	r3, [pc, #340]	; (80013b0 <mainTask+0x168>)
 800125c:	705a      	strb	r2, [r3, #1]
	mainHandle.timer = xTimerCreate("Main Timer", 100, pdTRUE, NULL, NULL);
 800125e:	4855      	ldr	r0, [pc, #340]	; (80013b4 <mainTask+0x16c>)
 8001260:	2300      	movs	r3, #0
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2300      	movs	r3, #0
 8001266:	2201      	movs	r2, #1
 8001268:	2164      	movs	r1, #100	; 0x64
 800126a:	f007 f843 	bl	80082f4 <xTimerCreate>
 800126e:	0002      	movs	r2, r0
 8001270:	4b4f      	ldr	r3, [pc, #316]	; (80013b0 <mainTask+0x168>)
 8001272:	605a      	str	r2, [r3, #4]

	while(1) {
		switch (mainHandle.state) {
 8001274:	4b4e      	ldr	r3, [pc, #312]	; (80013b0 <mainTask+0x168>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b03      	cmp	r3, #3
 800127a:	d050      	beq.n	800131e <mainTask+0xd6>
 800127c:	dc63      	bgt.n	8001346 <mainTask+0xfe>
 800127e:	2b02      	cmp	r3, #2
 8001280:	d039      	beq.n	80012f6 <mainTask+0xae>
 8001282:	dc60      	bgt.n	8001346 <mainTask+0xfe>
 8001284:	2b00      	cmp	r3, #0
 8001286:	d002      	beq.n	800128e <mainTask+0x46>
 8001288:	2b01      	cmp	r3, #1
 800128a:	d020      	beq.n	80012ce <mainTask+0x86>
 800128c:	e05b      	b.n	8001346 <mainTask+0xfe>
			case MAIN_INIT: {
				if(xTimerIsTimerActive(mainHandle.timer) == pdFALSE) {
 800128e:	4b48      	ldr	r3, [pc, #288]	; (80013b0 <mainTask+0x168>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	0018      	movs	r0, r3
 8001294:	f007 fb3a 	bl	800890c <xTimerIsTimerActive>
 8001298:	1e03      	subs	r3, r0, #0
 800129a:	d114      	bne.n	80012c6 <mainTask+0x7e>
					xTimerStart(mainHandle.timer, 0);
 800129c:	4b44      	ldr	r3, [pc, #272]	; (80013b0 <mainTask+0x168>)
 800129e:	685c      	ldr	r4, [r3, #4]
 80012a0:	f006 fb40 	bl	8007924 <xTaskGetTickCount>
 80012a4:	0002      	movs	r2, r0
 80012a6:	2300      	movs	r3, #0
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2300      	movs	r3, #0
 80012ac:	2101      	movs	r1, #1
 80012ae:	0020      	movs	r0, r4
 80012b0:	f007 f876 	bl	80083a0 <xTimerGenericCommand>
					//TODO create task
					//positionMotorTaskCreate();
					asservMotorTaskCreate();
 80012b4:	f000 fbd4 	bl	8001a60 <asservMotorTaskCreate>
					//createLidarTask();
					HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_SET);
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	483e      	ldr	r0, [pc, #248]	; (80013b8 <mainTask+0x170>)
 80012be:	2201      	movs	r2, #1
 80012c0:	0019      	movs	r1, r3
 80012c2:	f001 ff4f 	bl	8003164 <HAL_GPIO_WritePin>
				}
				mainHandle.state = MAIN_MOUSE;
 80012c6:	4b3a      	ldr	r3, [pc, #232]	; (80013b0 <mainTask+0x168>)
 80012c8:	2202      	movs	r2, #2
 80012ca:	701a      	strb	r2, [r3, #0]
				break;
 80012cc:	e044      	b.n	8001358 <mainTask+0x110>
			}
			case MAIN_CAT: {
				if(xTimerIsTimerActive(mainHandle.timer) == pdFALSE) {
 80012ce:	4b38      	ldr	r3, [pc, #224]	; (80013b0 <mainTask+0x168>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	0018      	movs	r0, r3
 80012d4:	f007 fb1a 	bl	800890c <xTimerIsTimerActive>
 80012d8:	1e03      	subs	r3, r0, #0
 80012da:	d138      	bne.n	800134e <mainTask+0x106>
					xTimerStart(mainHandle.timer, 0);
 80012dc:	4b34      	ldr	r3, [pc, #208]	; (80013b0 <mainTask+0x168>)
 80012de:	685c      	ldr	r4, [r3, #4]
 80012e0:	f006 fb20 	bl	8007924 <xTaskGetTickCount>
 80012e4:	0002      	movs	r2, r0
 80012e6:	2300      	movs	r3, #0
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2300      	movs	r3, #0
 80012ec:	2101      	movs	r1, #1
 80012ee:	0020      	movs	r0, r4
 80012f0:	f007 f856 	bl	80083a0 <xTimerGenericCommand>
					
				}
				break;
 80012f4:	e02b      	b.n	800134e <mainTask+0x106>
			}
			case MAIN_MOUSE: {
				if(xTimerIsTimerActive(mainHandle.timer) == pdFALSE) {
 80012f6:	4b2e      	ldr	r3, [pc, #184]	; (80013b0 <mainTask+0x168>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	0018      	movs	r0, r3
 80012fc:	f007 fb06 	bl	800890c <xTimerIsTimerActive>
 8001300:	1e03      	subs	r3, r0, #0
 8001302:	d126      	bne.n	8001352 <mainTask+0x10a>
					xTimerStart(mainHandle.timer, 0);
 8001304:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <mainTask+0x168>)
 8001306:	685c      	ldr	r4, [r3, #4]
 8001308:	f006 fb0c 	bl	8007924 <xTaskGetTickCount>
 800130c:	0002      	movs	r2, r0
 800130e:	2300      	movs	r3, #0
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2300      	movs	r3, #0
 8001314:	2101      	movs	r1, #1
 8001316:	0020      	movs	r0, r4
 8001318:	f007 f842 	bl	80083a0 <xTimerGenericCommand>
					
				}
				break;
 800131c:	e019      	b.n	8001352 <mainTask+0x10a>
			}
			case MAIN_ERROR : {
				if(xTimerIsTimerActive(mainHandle.timer) == pdFALSE) {
 800131e:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <mainTask+0x168>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	0018      	movs	r0, r3
 8001324:	f007 faf2 	bl	800890c <xTimerIsTimerActive>
 8001328:	1e03      	subs	r3, r0, #0
 800132a:	d114      	bne.n	8001356 <mainTask+0x10e>
					xTimerStart(mainHandle.timer, 0);
 800132c:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <mainTask+0x168>)
 800132e:	685c      	ldr	r4, [r3, #4]
 8001330:	f006 faf8 	bl	8007924 <xTaskGetTickCount>
 8001334:	0002      	movs	r2, r0
 8001336:	2300      	movs	r3, #0
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2300      	movs	r3, #0
 800133c:	2101      	movs	r1, #1
 800133e:	0020      	movs	r0, r4
 8001340:	f007 f82e 	bl	80083a0 <xTimerGenericCommand>
					
				}
				break;
 8001344:	e007      	b.n	8001356 <mainTask+0x10e>
			}
			default:
				mainHandle.state = MAIN_INIT;
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <mainTask+0x168>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
				break;
 800134c:	e004      	b.n	8001358 <mainTask+0x110>
				break;
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	e002      	b.n	8001358 <mainTask+0x110>
				break;
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	e000      	b.n	8001358 <mainTask+0x110>
				break;
 8001356:	46c0      	nop			; (mov r8, r8)
		}
		if(mainHandle.lastState != mainHandle.state) {
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <mainTask+0x168>)
 800135a:	785a      	ldrb	r2, [r3, #1]
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <mainTask+0x168>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d00c      	beq.n	800137e <mainTask+0x136>
			xTimerStop(mainHandle.timer, 0);
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <mainTask+0x168>)
 8001366:	6858      	ldr	r0, [r3, #4]
 8001368:	2300      	movs	r3, #0
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2300      	movs	r3, #0
 800136e:	2200      	movs	r2, #0
 8001370:	2103      	movs	r1, #3
 8001372:	f007 f815 	bl	80083a0 <xTimerGenericCommand>
			mainHandle.lastState = mainHandle.state;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <mainTask+0x168>)
 8001378:	781a      	ldrb	r2, [r3, #0]
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <mainTask+0x168>)
 800137c:	705a      	strb	r2, [r3, #1]
		}
		if(xTaskNotifyWait(0, ULONG_MAX, &ulNotifiedValue, 5000) == pdTRUE) {
 800137e:	480f      	ldr	r0, [pc, #60]	; (80013bc <mainTask+0x174>)
 8001380:	230c      	movs	r3, #12
 8001382:	18fa      	adds	r2, r7, r3
 8001384:	2301      	movs	r3, #1
 8001386:	4259      	negs	r1, r3
 8001388:	0003      	movs	r3, r0
 800138a:	2000      	movs	r0, #0
 800138c:	f006 fe2e 	bl	8007fec <xTaskNotifyWait>
 8001390:	0003      	movs	r3, r0
 8001392:	2b01      	cmp	r3, #1
 8001394:	d000      	beq.n	8001398 <mainTask+0x150>
 8001396:	e76d      	b.n	8001274 <mainTask+0x2c>
			setMainState();
 8001398:	f7ff ff40 	bl	800121c <setMainState>
//			HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
//			HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
			//xTaskNotify(lidarHandle, &ulNotifiedValue, eSetBits); //TODO notify side that has beed affected
			taskENTER_CRITICAL();
 800139c:	f007 fb70 	bl	8008a80 <vPortEnterCritical>
			vTaskDelay(2000);
 80013a0:	23fa      	movs	r3, #250	; 0xfa
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	0018      	movs	r0, r3
 80013a6:	f006 f9c1 	bl	800772c <vTaskDelay>
			taskEXIT_CRITICAL();
 80013aa:	f007 fb7b 	bl	8008aa4 <vPortExitCritical>
		switch (mainHandle.state) {
 80013ae:	e761      	b.n	8001274 <mainTask+0x2c>
 80013b0:	200000b8 	.word	0x200000b8
 80013b4:	08009f68 	.word	0x08009f68
 80013b8:	50000400 	.word	0x50000400
 80013bc:	00001388 	.word	0x00001388

080013c0 <createMainTask>:
 * This function creates and initializes the main task, which is responsible
 * for managing the overall behavior of the system.
 *
 * @return Returns true if the task creation is successful; otherwise, returns false.
 */
uint8_t createMainTask(void) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af02      	add	r7, sp, #8
	if (xTaskCreate(mainTask, "Main", TASK_MAIN_STACK_DEPTH, NULL, TASK_MAIN_PRIORITY, &h_task_main) != pdPASS) {
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	009a      	lsls	r2, r3, #2
 80013ca:	490f      	ldr	r1, [pc, #60]	; (8001408 <createMainTask+0x48>)
 80013cc:	480f      	ldr	r0, [pc, #60]	; (800140c <createMainTask+0x4c>)
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <createMainTask+0x50>)
 80013d0:	9301      	str	r3, [sp, #4]
 80013d2:	2363      	movs	r3, #99	; 0x63
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	2300      	movs	r3, #0
 80013d8:	f006 f86b 	bl	80074b2 <xTaskCreate>
 80013dc:	0003      	movs	r3, r0
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d007      	beq.n	80013f2 <createMainTask+0x32>
		LOG_RTOS_ERROR("Error creating task Main");
 80013e2:	4a0c      	ldr	r2, [pc, #48]	; (8001414 <createMainTask+0x54>)
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <createMainTask+0x58>)
 80013e6:	0011      	movs	r1, r2
 80013e8:	0018      	movs	r0, r3
 80013ea:	f007 fe45 	bl	8009078 <iprintf>
		return false;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e006      	b.n	8001400 <createMainTask+0x40>
	}
	else {
		LOG_RTOS_INFO(COLOR_GREEN"Main task create");
 80013f2:	4a08      	ldr	r2, [pc, #32]	; (8001414 <createMainTask+0x54>)
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <createMainTask+0x5c>)
 80013f6:	0011      	movs	r1, r2
 80013f8:	0018      	movs	r0, r3
 80013fa:	f007 fe3d 	bl	8009078 <iprintf>
		return true;
 80013fe:	2301      	movs	r3, #1
	}
}
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	08009f74 	.word	0x08009f74
 800140c:	08001249 	.word	0x08001249
 8001410:	200000b4 	.word	0x200000b4
 8001414:	0800a12c 	.word	0x0800a12c
 8001418:	08009f7c 	.word	0x08009f7c
 800141c:	08009fb8 	.word	0x08009fb8

08001420 <initMotor>:

h_motor_t motor_left;
h_motor_t motor_right;

void initMotor(h_motor_t *motor, PWM *fwd, PWM *rev, TIM_HandleTypeDef *htim_enc)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	603b      	str	r3, [r7, #0]
	motor->state = STOP;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2202      	movs	r2, #2
 8001432:	701a      	strb	r2, [r3, #0]
	motor->fwd = fwd;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	605a      	str	r2, [r3, #4]
	motor->rev = rev;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	609a      	str	r2, [r3, #8]
	motor->htim_enc = htim_enc;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	60da      	str	r2, [r3, #12]
}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	46bd      	mov	sp, r7
 800144a:	b004      	add	sp, #16
 800144c:	bd80      	pop	{r7, pc}

0800144e <setMotorSpeedFwd>:

void setMotorSpeedFwd(h_motor_t *motor, uint8_t speed)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	000a      	movs	r2, r1
 8001458:	1cfb      	adds	r3, r7, #3
 800145a:	701a      	strb	r2, [r3, #0]
	if(motor->state == REV)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d107      	bne.n	8001474 <setMotorSpeedFwd+0x26>
	{
		setPwmDutyCycle(motor->rev, 0, MAX_DUTY_CYCLE_MOTOR);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	22a0      	movs	r2, #160	; 0xa0
 800146a:	0112      	lsls	r2, r2, #4
 800146c:	2100      	movs	r1, #0
 800146e:	0018      	movs	r0, r3
 8001470:	f000 f8f8 	bl	8001664 <setPwmDutyCycle>
	}

	motor->state = FWD;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
	setPwmDutyCycle(motor->fwd, speed, MAX_DUTY_CYCLE_MOTOR);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6858      	ldr	r0, [r3, #4]
 800147e:	23a0      	movs	r3, #160	; 0xa0
 8001480:	011a      	lsls	r2, r3, #4
 8001482:	1cfb      	adds	r3, r7, #3
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	0019      	movs	r1, r3
 8001488:	f000 f8ec 	bl	8001664 <setPwmDutyCycle>
}
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b002      	add	sp, #8
 8001492:	bd80      	pop	{r7, pc}

08001494 <setMotorSpeedRev>:

void setMotorSpeedRev(h_motor_t *motor, uint8_t speed)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	000a      	movs	r2, r1
 800149e:	1cfb      	adds	r3, r7, #3
 80014a0:	701a      	strb	r2, [r3, #0]
	if(motor->state == FWD)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d107      	bne.n	80014ba <setMotorSpeedRev+0x26>
	{
		setPwmDutyCycle(motor->fwd, 0, MAX_DUTY_CYCLE_MOTOR);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	22a0      	movs	r2, #160	; 0xa0
 80014b0:	0112      	lsls	r2, r2, #4
 80014b2:	2100      	movs	r1, #0
 80014b4:	0018      	movs	r0, r3
 80014b6:	f000 f8d5 	bl	8001664 <setPwmDutyCycle>
	}

	motor->state = REV;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
	setPwmDutyCycle(motor->rev, speed, MAX_DUTY_CYCLE_MOTOR);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6898      	ldr	r0, [r3, #8]
 80014c4:	23a0      	movs	r3, #160	; 0xa0
 80014c6:	011a      	lsls	r2, r3, #4
 80014c8:	1cfb      	adds	r3, r7, #3
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	0019      	movs	r1, r3
 80014ce:	f000 f8c9 	bl	8001664 <setPwmDutyCycle>
}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b002      	add	sp, #8
 80014d8:	bd80      	pop	{r7, pc}

080014da <stopMotor>:

void stopMotor(h_motor_t *motor)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
	if(motor->state == REV)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d108      	bne.n	80014fc <stopMotor+0x22>
	{
		setPwmDutyCycle(motor->rev, 0, MAX_DUTY_CYCLE_MOTOR);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	22a0      	movs	r2, #160	; 0xa0
 80014f0:	0112      	lsls	r2, r2, #4
 80014f2:	2100      	movs	r1, #0
 80014f4:	0018      	movs	r0, r3
 80014f6:	f000 f8b5 	bl	8001664 <setPwmDutyCycle>
 80014fa:	e00b      	b.n	8001514 <stopMotor+0x3a>
	}
	else if(motor->state == FWD)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d107      	bne.n	8001514 <stopMotor+0x3a>
	{
		setPwmDutyCycle(motor->fwd, 0, MAX_DUTY_CYCLE_MOTOR);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	22a0      	movs	r2, #160	; 0xa0
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	2100      	movs	r1, #0
 800150e:	0018      	movs	r0, r3
 8001510:	f000 f8a8 	bl	8001664 <setPwmDutyCycle>
	}
	motor->state = STOP;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2202      	movs	r2, #2
 8001518:	701a      	strb	r2, [r3, #0]
}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	46bd      	mov	sp, r7
 800151e:	b002      	add	sp, #8
 8001520:	bd80      	pop	{r7, pc}

08001522 <setMotorSpeed>:

void setMotorSpeed(h_motor_t *motor, uint8_t speed, h_motor_state dir)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	0008      	movs	r0, r1
 800152c:	0011      	movs	r1, r2
 800152e:	1cfb      	adds	r3, r7, #3
 8001530:	1c02      	adds	r2, r0, #0
 8001532:	701a      	strb	r2, [r3, #0]
 8001534:	1cbb      	adds	r3, r7, #2
 8001536:	1c0a      	adds	r2, r1, #0
 8001538:	701a      	strb	r2, [r3, #0]
	if(dir == REV)
 800153a:	1cbb      	adds	r3, r7, #2
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d107      	bne.n	8001552 <setMotorSpeed+0x30>
	{
		setMotorSpeedRev(motor, speed);
 8001542:	1cfb      	adds	r3, r7, #3
 8001544:	781a      	ldrb	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	0011      	movs	r1, r2
 800154a:	0018      	movs	r0, r3
 800154c:	f7ff ffa2 	bl	8001494 <setMotorSpeedRev>
	}
	else if(dir == STOP)
	{
		stopMotor(motor);
	}
}
 8001550:	e013      	b.n	800157a <setMotorSpeed+0x58>
	else if(dir == FWD)
 8001552:	1cbb      	adds	r3, r7, #2
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d107      	bne.n	800156a <setMotorSpeed+0x48>
		setMotorSpeedFwd(motor, speed);
 800155a:	1cfb      	adds	r3, r7, #3
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	0011      	movs	r1, r2
 8001562:	0018      	movs	r0, r3
 8001564:	f7ff ff73 	bl	800144e <setMotorSpeedFwd>
}
 8001568:	e007      	b.n	800157a <setMotorSpeed+0x58>
	else if(dir == STOP)
 800156a:	1cbb      	adds	r3, r7, #2
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d103      	bne.n	800157a <setMotorSpeed+0x58>
		stopMotor(motor);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	0018      	movs	r0, r3
 8001576:	f7ff ffb0 	bl	80014da <stopMotor>
}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	b002      	add	sp, #8
 8001580:	bd80      	pop	{r7, pc}

08001582 <initPID>:
PID pid_motor_left;
PID pid_motor_right;


void initPID(PID *pid, float kp, float ki, float kd, float Te)
{
 8001582:	b590      	push	{r4, r7, lr}
 8001584:	b087      	sub	sp, #28
 8001586:	af00      	add	r7, sp, #0
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	603b      	str	r3, [r7, #0]
	float a = Te / 2;
 8001590:	2180      	movs	r1, #128	; 0x80
 8001592:	05c9      	lsls	r1, r1, #23
 8001594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001596:	f7ff f8d7 	bl	8000748 <__aeabi_fdiv>
 800159a:	1c03      	adds	r3, r0, #0
 800159c:	613b      	str	r3, [r7, #16]

	pid->b0 = kp + ki*a + kd*a;
 800159e:	6939      	ldr	r1, [r7, #16]
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff f9eb 	bl	800097c <__aeabi_fmul>
 80015a6:	1c03      	adds	r3, r0, #0
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	1c18      	adds	r0, r3, #0
 80015ac:	f7fe ff2c 	bl	8000408 <__aeabi_fadd>
 80015b0:	1c03      	adds	r3, r0, #0
 80015b2:	1c1c      	adds	r4, r3, #0
 80015b4:	6939      	ldr	r1, [r7, #16]
 80015b6:	6838      	ldr	r0, [r7, #0]
 80015b8:	f7ff f9e0 	bl	800097c <__aeabi_fmul>
 80015bc:	1c03      	adds	r3, r0, #0
 80015be:	1c19      	adds	r1, r3, #0
 80015c0:	1c20      	adds	r0, r4, #0
 80015c2:	f7fe ff21 	bl	8000408 <__aeabi_fadd>
 80015c6:	1c03      	adds	r3, r0, #0
 80015c8:	1c1a      	adds	r2, r3, #0
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	601a      	str	r2, [r3, #0]
	pid->b1 = ki*Te + kd*Te;
 80015ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff f9d3 	bl	800097c <__aeabi_fmul>
 80015d6:	1c03      	adds	r3, r0, #0
 80015d8:	1c1c      	adds	r4, r3, #0
 80015da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015dc:	6838      	ldr	r0, [r7, #0]
 80015de:	f7ff f9cd 	bl	800097c <__aeabi_fmul>
 80015e2:	1c03      	adds	r3, r0, #0
 80015e4:	1c19      	adds	r1, r3, #0
 80015e6:	1c20      	adds	r0, r4, #0
 80015e8:	f7fe ff0e 	bl	8000408 <__aeabi_fadd>
 80015ec:	1c03      	adds	r3, r0, #0
 80015ee:	1c1a      	adds	r2, r3, #0
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	605a      	str	r2, [r3, #4]
	pid->b2 = kp + ki*a + kd*a;
 80015f4:	6939      	ldr	r1, [r7, #16]
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff f9c0 	bl	800097c <__aeabi_fmul>
 80015fc:	1c03      	adds	r3, r0, #0
 80015fe:	68b9      	ldr	r1, [r7, #8]
 8001600:	1c18      	adds	r0, r3, #0
 8001602:	f7fe ff01 	bl	8000408 <__aeabi_fadd>
 8001606:	1c03      	adds	r3, r0, #0
 8001608:	1c1c      	adds	r4, r3, #0
 800160a:	6939      	ldr	r1, [r7, #16]
 800160c:	6838      	ldr	r0, [r7, #0]
 800160e:	f7ff f9b5 	bl	800097c <__aeabi_fmul>
 8001612:	1c03      	adds	r3, r0, #0
 8001614:	1c19      	adds	r1, r3, #0
 8001616:	1c20      	adds	r0, r4, #0
 8001618:	f7fe fef6 	bl	8000408 <__aeabi_fadd>
 800161c:	1c03      	adds	r3, r0, #0
 800161e:	1c1a      	adds	r2, r3, #0
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	609a      	str	r2, [r3, #8]
	pid->index = 0;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2224      	movs	r2, #36	; 0x24
 8001628:	2100      	movs	r1, #0
 800162a:	5499      	strb	r1, [r3, r2]

	for(int i = 0; i < PID_ORDRE; i++)
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	e010      	b.n	8001654 <initPID+0xd2>
	{
		pid->inputs[i]  = 0.0;
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	3302      	adds	r3, #2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	18d3      	adds	r3, r2, r3
 800163c:	3304      	adds	r3, #4
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
		pid->outputs[i] = 0.0;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	3206      	adds	r2, #6
 8001648:	0092      	lsls	r2, r2, #2
 800164a:	2100      	movs	r1, #0
 800164c:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < PID_ORDRE; i++)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2b02      	cmp	r3, #2
 8001658:	ddeb      	ble.n	8001632 <initPID+0xb0>
	}
}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	46c0      	nop			; (mov r8, r8)
 800165e:	46bd      	mov	sp, r7
 8001660:	b007      	add	sp, #28
 8001662:	bd90      	pop	{r4, r7, pc}

08001664 <setPwmDutyCycle>:

#include "pwm.h"

// Change le
void setPwmDutyCycle(PWM *pwm, uint8_t duty_cycle, uint16_t max_duty_cycle)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	0008      	movs	r0, r1
 800166e:	0011      	movs	r1, r2
 8001670:	1cfb      	adds	r3, r7, #3
 8001672:	1c02      	adds	r2, r0, #0
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	003b      	movs	r3, r7
 8001678:	1c0a      	adds	r2, r1, #0
 800167a:	801a      	strh	r2, [r3, #0]
	uint16_t duty_cycle16 = duty_cycle * MAX_DUTY_CYCLE_MOTOR / 100;
 800167c:	1cfb      	adds	r3, r7, #3
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	0013      	movs	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	189b      	adds	r3, r3, r2
 8001686:	025b      	lsls	r3, r3, #9
 8001688:	2164      	movs	r1, #100	; 0x64
 800168a:	0018      	movs	r0, r3
 800168c:	f7fe fdd0 	bl	8000230 <__divsi3>
 8001690:	0003      	movs	r3, r0
 8001692:	001a      	movs	r2, r3
 8001694:	210e      	movs	r1, #14
 8001696:	187b      	adds	r3, r7, r1
 8001698:	801a      	strh	r2, [r3, #0]

    if (duty_cycle16 < 0)
    {
    	duty_cycle16 = 0;
    }
    else if (duty_cycle16 > max_duty_cycle)
 800169a:	187a      	adds	r2, r7, r1
 800169c:	003b      	movs	r3, r7
 800169e:	8812      	ldrh	r2, [r2, #0]
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d903      	bls.n	80016ae <setPwmDutyCycle+0x4a>
    {
    	duty_cycle16 = max_duty_cycle;
 80016a6:	187b      	adds	r3, r7, r1
 80016a8:	003a      	movs	r2, r7
 80016aa:	8812      	ldrh	r2, [r2, #0]
 80016ac:	801a      	strh	r2, [r3, #0]
    }

    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, duty_cycle16);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d107      	bne.n	80016c6 <setPwmDutyCycle+0x62>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	220e      	movs	r2, #14
 80016be:	18ba      	adds	r2, r7, r2
 80016c0:	8812      	ldrh	r2, [r2, #0]
 80016c2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016c4:	e036      	b.n	8001734 <setPwmDutyCycle+0xd0>
    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, duty_cycle16);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	d107      	bne.n	80016de <setPwmDutyCycle+0x7a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	230e      	movs	r3, #14
 80016d6:	18fb      	adds	r3, r7, r3
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	6393      	str	r3, [r2, #56]	; 0x38
}
 80016dc:	e02a      	b.n	8001734 <setPwmDutyCycle+0xd0>
    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, duty_cycle16);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d107      	bne.n	80016f6 <setPwmDutyCycle+0x92>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	230e      	movs	r3, #14
 80016ee:	18fb      	adds	r3, r7, r3
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80016f4:	e01e      	b.n	8001734 <setPwmDutyCycle+0xd0>
    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, duty_cycle16);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b0c      	cmp	r3, #12
 80016fc:	d107      	bne.n	800170e <setPwmDutyCycle+0xaa>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	230e      	movs	r3, #14
 8001706:	18fb      	adds	r3, r7, r3
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800170c:	e012      	b.n	8001734 <setPwmDutyCycle+0xd0>
    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, duty_cycle16);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b10      	cmp	r3, #16
 8001714:	d107      	bne.n	8001726 <setPwmDutyCycle+0xc2>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	230e      	movs	r3, #14
 800171e:	18fb      	adds	r3, r7, r3
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001724:	e006      	b.n	8001734 <setPwmDutyCycle+0xd0>
    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, duty_cycle16);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	230e      	movs	r3, #14
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001734:	46c0      	nop			; (mov r8, r8)
 8001736:	46bd      	mov	sp, r7
 8001738:	b004      	add	sp, #16
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_MspInit+0x50>)
 8001744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <HAL_MspInit+0x50>)
 8001748:	2101      	movs	r1, #1
 800174a:	430a      	orrs	r2, r1
 800174c:	641a      	str	r2, [r3, #64]	; 0x40
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <HAL_MspInit+0x50>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	2201      	movs	r2, #1
 8001754:	4013      	ands	r3, r2
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <HAL_MspInit+0x50>)
 800175c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_MspInit+0x50>)
 8001760:	2180      	movs	r1, #128	; 0x80
 8001762:	0549      	lsls	r1, r1, #21
 8001764:	430a      	orrs	r2, r1
 8001766:	63da      	str	r2, [r3, #60]	; 0x3c
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_MspInit+0x50>)
 800176a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	055b      	lsls	r3, r3, #21
 8001770:	4013      	ands	r3, r2
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8001776:	2302      	movs	r3, #2
 8001778:	425b      	negs	r3, r3
 800177a:	2200      	movs	r2, #0
 800177c:	2103      	movs	r1, #3
 800177e:	0018      	movs	r0, r3
 8001780:	f001 f90e 	bl	80029a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001784:	46c0      	nop			; (mov r8, r8)
 8001786:	46bd      	mov	sp, r7
 8001788:	b002      	add	sp, #8
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40021000 	.word	0x40021000

08001790 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b5b0      	push	{r4, r5, r7, lr}
 8001792:	b08c      	sub	sp, #48	; 0x30
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001798:	232b      	movs	r3, #43	; 0x2b
 800179a:	18fb      	adds	r3, r7, r3
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017a0:	4b37      	ldr	r3, [pc, #220]	; (8001880 <HAL_InitTick+0xf0>)
 80017a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017a4:	4b36      	ldr	r3, [pc, #216]	; (8001880 <HAL_InitTick+0xf0>)
 80017a6:	2110      	movs	r1, #16
 80017a8:	430a      	orrs	r2, r1
 80017aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80017ac:	4b34      	ldr	r3, [pc, #208]	; (8001880 <HAL_InitTick+0xf0>)
 80017ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b0:	2210      	movs	r2, #16
 80017b2:	4013      	ands	r3, r2
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017b8:	230c      	movs	r3, #12
 80017ba:	18fa      	adds	r2, r7, r3
 80017bc:	2410      	movs	r4, #16
 80017be:	193b      	adds	r3, r7, r4
 80017c0:	0011      	movs	r1, r2
 80017c2:	0018      	movs	r0, r3
 80017c4:	f002 fa3e 	bl	8003c44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017c8:	193b      	adds	r3, r7, r4
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d104      	bne.n	80017de <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017d4:	f002 fa20 	bl	8003c18 <HAL_RCC_GetPCLK1Freq>
 80017d8:	0003      	movs	r3, r0
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017dc:	e004      	b.n	80017e8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017de:	f002 fa1b 	bl	8003c18 <HAL_RCC_GetPCLK1Freq>
 80017e2:	0003      	movs	r3, r0
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ea:	4926      	ldr	r1, [pc, #152]	; (8001884 <HAL_InitTick+0xf4>)
 80017ec:	0018      	movs	r0, r3
 80017ee:	f7fe fc95 	bl	800011c <__udivsi3>
 80017f2:	0003      	movs	r3, r0
 80017f4:	3b01      	subs	r3, #1
 80017f6:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017f8:	4b23      	ldr	r3, [pc, #140]	; (8001888 <HAL_InitTick+0xf8>)
 80017fa:	4a24      	ldr	r2, [pc, #144]	; (800188c <HAL_InitTick+0xfc>)
 80017fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017fe:	4b22      	ldr	r3, [pc, #136]	; (8001888 <HAL_InitTick+0xf8>)
 8001800:	4a23      	ldr	r2, [pc, #140]	; (8001890 <HAL_InitTick+0x100>)
 8001802:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001804:	4b20      	ldr	r3, [pc, #128]	; (8001888 <HAL_InitTick+0xf8>)
 8001806:	6a3a      	ldr	r2, [r7, #32]
 8001808:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 800180a:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <HAL_InitTick+0xf8>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001810:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <HAL_InitTick+0xf8>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001816:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <HAL_InitTick+0xf8>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800181c:	252b      	movs	r5, #43	; 0x2b
 800181e:	197c      	adds	r4, r7, r5
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_InitTick+0xf8>)
 8001822:	0018      	movs	r0, r3
 8001824:	f002 fb6c 	bl	8003f00 <HAL_TIM_Base_Init>
 8001828:	0003      	movs	r3, r0
 800182a:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 800182c:	197b      	adds	r3, r7, r5
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d11e      	bne.n	8001872 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001834:	197c      	adds	r4, r7, r5
 8001836:	4b14      	ldr	r3, [pc, #80]	; (8001888 <HAL_InitTick+0xf8>)
 8001838:	0018      	movs	r0, r3
 800183a:	f002 fbb9 	bl	8003fb0 <HAL_TIM_Base_Start_IT>
 800183e:	0003      	movs	r3, r0
 8001840:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8001842:	197b      	adds	r3, r7, r5
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d113      	bne.n	8001872 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800184a:	2011      	movs	r0, #17
 800184c:	f001 f8bd 	bl	80029ca <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b03      	cmp	r3, #3
 8001854:	d809      	bhi.n	800186a <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	0019      	movs	r1, r3
 800185c:	2011      	movs	r0, #17
 800185e:	f001 f89f 	bl	80029a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <HAL_InitTick+0x104>)
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	e003      	b.n	8001872 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 800186a:	232b      	movs	r3, #43	; 0x2b
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8001872:	232b      	movs	r3, #43	; 0x2b
 8001874:	18fb      	adds	r3, r7, r3
 8001876:	781b      	ldrb	r3, [r3, #0]
}
 8001878:	0018      	movs	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	b00c      	add	sp, #48	; 0x30
 800187e:	bdb0      	pop	{r4, r5, r7, pc}
 8001880:	40021000 	.word	0x40021000
 8001884:	000f4240 	.word	0x000f4240
 8001888:	20000130 	.word	0x20000130
 800188c:	40001000 	.word	0x40001000
 8001890:	000003e7 	.word	0x000003e7
 8001894:	2000002c 	.word	0x2000002c

08001898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800189c:	e7fe      	b.n	800189c <NMI_Handler+0x4>

0800189e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <HardFault_Handler+0x4>

080018a4 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BORDER_BACK_Pin);
 80018a8:	2004      	movs	r0, #4
 80018aa:	f001 fc93 	bl	80031d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BORDER_FRONT_Pin);
 80018ae:	2008      	movs	r0, #8
 80018b0:	f001 fc90 	bl	80031d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80018b4:	46c0      	nop			; (mov r8, r8)
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <DMA1_Channel1_IRQHandler+0x14>)
 80018c2:	0018      	movs	r0, r3
 80018c4:	f001 f9e8 	bl	8002c98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018c8:	46c0      	nop			; (mov r8, r8)
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	2000047c 	.word	0x2000047c

080018d4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <DMA1_Channel2_3_IRQHandler+0x14>)
 80018da:	0018      	movs	r0, r3
 80018dc:	f001 f9dc 	bl	8002c98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80018e0:	46c0      	nop			; (mov r8, r8)
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	200004d8 	.word	0x200004d8

080018ec <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018f0:	4b03      	ldr	r3, [pc, #12]	; (8001900 <TIM6_IRQHandler+0x14>)
 80018f2:	0018      	movs	r0, r3
 80018f4:	f002 fea2 	bl	800463c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80018f8:	46c0      	nop			; (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	20000130 	.word	0x20000130

08001904 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <USART3_4_IRQHandler+0x14>)
 800190a:	0018      	movs	r0, r3
 800190c:	f004 f830 	bl	8005970 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8001910:	46c0      	nop			; (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	200003e8 	.word	0x200003e8

0800191c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	e00a      	b.n	8001944 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800192e:	e000      	b.n	8001932 <_read+0x16>
 8001930:	bf00      	nop
 8001932:	0001      	movs	r1, r0
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	1c5a      	adds	r2, r3, #1
 8001938:	60ba      	str	r2, [r7, #8]
 800193a:	b2ca      	uxtb	r2, r1
 800193c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	3301      	adds	r3, #1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	429a      	cmp	r2, r3
 800194a:	dbf0      	blt.n	800192e <_read+0x12>
  }

  return len;
 800194c:	687b      	ldr	r3, [r7, #4]
}
 800194e:	0018      	movs	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	b006      	add	sp, #24
 8001954:	bd80      	pop	{r7, pc}

08001956 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	e009      	b.n	800197c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	60ba      	str	r2, [r7, #8]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	0018      	movs	r0, r3
 8001972:	f7ff fa87 	bl	8000e84 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3301      	adds	r3, #1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	429a      	cmp	r2, r3
 8001982:	dbf1      	blt.n	8001968 <_write+0x12>
  }
  return len;
 8001984:	687b      	ldr	r3, [r7, #4]
}
 8001986:	0018      	movs	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	b006      	add	sp, #24
 800198c:	bd80      	pop	{r7, pc}

0800198e <_close>:

int _close(int file)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001996:	2301      	movs	r3, #1
 8001998:	425b      	negs	r3, r3
}
 800199a:	0018      	movs	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	b002      	add	sp, #8
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	2280      	movs	r2, #128	; 0x80
 80019b0:	0192      	lsls	r2, r2, #6
 80019b2:	605a      	str	r2, [r3, #4]
  return 0;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	0018      	movs	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b002      	add	sp, #8
 80019bc:	bd80      	pop	{r7, pc}

080019be <_isatty>:

int _isatty(int file)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019c6:	2301      	movs	r3, #1
}
 80019c8:	0018      	movs	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b002      	add	sp, #8
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	0018      	movs	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b004      	add	sp, #16
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f0:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <_sbrk+0x5c>)
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <_sbrk+0x60>)
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d102      	bne.n	8001a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <_sbrk+0x64>)
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <_sbrk+0x68>)
 8001a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	18d3      	adds	r3, r2, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d207      	bcs.n	8001a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a18:	f007 fce6 	bl	80093e8 <__errno>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	220c      	movs	r2, #12
 8001a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a22:	2301      	movs	r3, #1
 8001a24:	425b      	negs	r3, r3
 8001a26:	e009      	b.n	8001a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	18d2      	adds	r2, r2, r3
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <_sbrk+0x64>)
 8001a38:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b006      	add	sp, #24
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20009000 	.word	0x20009000
 8001a48:	00000400 	.word	0x00000400
 8001a4c:	2000017c 	.word	0x2000017c
 8001a50:	20004a30 	.word	0x20004a30

08001a54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a58:	46c0      	nop			; (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <asservMotorTaskCreate>:

TaskHandle_t asserv_motor_task_h = NULL;
TimerHandle_t timer_asserv_h;

void asservMotorTaskCreate(void)
{
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af02      	add	r7, sp, #8
	if(xTaskCreate(vTaskAsservMotor, "Motor Asserv Task", STACK_SIZE_ASSERV_MOTOR, NULL, TASK_PRIORITY_ASSERV_MOTOR, &asserv_motor_task_h) != pdPASS)
 8001a66:	23fa      	movs	r3, #250	; 0xfa
 8001a68:	009a      	lsls	r2, r3, #2
 8001a6a:	4920      	ldr	r1, [pc, #128]	; (8001aec <asservMotorTaskCreate+0x8c>)
 8001a6c:	4820      	ldr	r0, [pc, #128]	; (8001af0 <asservMotorTaskCreate+0x90>)
 8001a6e:	4b21      	ldr	r3, [pc, #132]	; (8001af4 <asservMotorTaskCreate+0x94>)
 8001a70:	9301      	str	r3, [sp, #4]
 8001a72:	233c      	movs	r3, #60	; 0x3c
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2300      	movs	r3, #0
 8001a78:	f005 fd1b 	bl	80074b2 <xTaskCreate>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d005      	beq.n	8001a8e <asservMotorTaskCreate+0x2e>
	{
		printf("ERROR: Asserv Motor Task Creation\r\n");
 8001a82:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <asservMotorTaskCreate+0x98>)
 8001a84:	0018      	movs	r0, r3
 8001a86:	f007 fb5d 	bl	8009144 <puts>
		Error_Handler();
 8001a8a:	f7ff fb39 	bl	8001100 <Error_Handler>
	}

	timer_asserv_h = xTimerCreate("Asserv Timer", pdMS_TO_TICKS(TE), pdTRUE, NULL, vTaskAsservMotor);
 8001a8e:	481b      	ldr	r0, [pc, #108]	; (8001afc <asservMotorTaskCreate+0x9c>)
 8001a90:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <asservMotorTaskCreate+0x90>)
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	2300      	movs	r3, #0
 8001a96:	2201      	movs	r2, #1
 8001a98:	210a      	movs	r1, #10
 8001a9a:	f006 fc2b 	bl	80082f4 <xTimerCreate>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <asservMotorTaskCreate+0xa0>)
 8001aa2:	601a      	str	r2, [r3, #0]
	if(timer_asserv_h == NULL)
 8001aa4:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <asservMotorTaskCreate+0xa0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d105      	bne.n	8001ab8 <asservMotorTaskCreate+0x58>
	{
		printf("EROR: Asserv Timer Creation\r\n");
 8001aac:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <asservMotorTaskCreate+0xa4>)
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f007 fb48 	bl	8009144 <puts>
		Error_Handler();
 8001ab4:	f7ff fb24 	bl	8001100 <Error_Handler>
	}

	if(xTimerStart(timer_asserv_h, 0) != pdPASS)
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <asservMotorTaskCreate+0xa0>)
 8001aba:	681c      	ldr	r4, [r3, #0]
 8001abc:	f005 ff32 	bl	8007924 <xTaskGetTickCount>
 8001ac0:	0002      	movs	r2, r0
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	2101      	movs	r1, #1
 8001aca:	0020      	movs	r0, r4
 8001acc:	f006 fc68 	bl	80083a0 <xTimerGenericCommand>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d005      	beq.n	8001ae2 <asservMotorTaskCreate+0x82>
	{
		printf("Error Asserv Timer Start\r\n");
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <asservMotorTaskCreate+0xa8>)
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f007 fb33 	bl	8009144 <puts>
		Error_Handler();
 8001ade:	f7ff fb0f 	bl	8001100 <Error_Handler>
	}
}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b001      	add	sp, #4
 8001ae8:	bd90      	pop	{r4, r7, pc}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	08009ff0 	.word	0x08009ff0
 8001af0:	08001b0d 	.word	0x08001b0d
 8001af4:	20000180 	.word	0x20000180
 8001af8:	0800a004 	.word	0x0800a004
 8001afc:	0800a028 	.word	0x0800a028
 8001b00:	20000184 	.word	0x20000184
 8001b04:	0800a038 	.word	0x0800a038
 8001b08:	0800a058 	.word	0x0800a058

08001b0c <vTaskAsservMotor>:
	return asserv_motor_task_h;
}


void vTaskAsservMotor(void *param)
{
 8001b0c:	b5b0      	push	{r4, r5, r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	uint32_t current_pos_motor_left  = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
	uint32_t current_pos_motor_right = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61bb      	str	r3, [r7, #24]
	uint32_t last_pos_motor_left  = READ_MOTOR_ENCODER(motor_left);
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <vTaskAsservMotor+0x64>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	617b      	str	r3, [r7, #20]
	uint32_t last_pos_motor_right = READ_MOTOR_ENCODER(motor_right);
 8001b26:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <vTaskAsservMotor+0x68>)
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	613b      	str	r3, [r7, #16]
//		uint8_t speed_cmd_motor_left  = command_motor_left.speed;
//		uint8_t speed_cmd_motor_right = command_motor_right.speed;
//		h_motor_state dir_cmd_motor_left = command_motor_left.dir;
//		h_motor_state dir_cmd_motor_right = command_motor_right.dir;

		uint8_t speed_cmd_motor_left  = 50;
 8001b30:	230f      	movs	r3, #15
 8001b32:	18fb      	adds	r3, r7, r3
 8001b34:	2232      	movs	r2, #50	; 0x32
 8001b36:	701a      	strb	r2, [r3, #0]
		uint8_t speed_cmd_motor_right = 50;
 8001b38:	240e      	movs	r4, #14
 8001b3a:	193b      	adds	r3, r7, r4
 8001b3c:	2232      	movs	r2, #50	; 0x32
 8001b3e:	701a      	strb	r2, [r3, #0]
		h_motor_state dir_cmd_motor_left = REV;
 8001b40:	230d      	movs	r3, #13
 8001b42:	18fb      	adds	r3, r7, r3
 8001b44:	2201      	movs	r2, #1
 8001b46:	701a      	strb	r2, [r3, #0]
		h_motor_state dir_cmd_motor_right = FWD;
 8001b48:	250c      	movs	r5, #12
 8001b4a:	197b      	adds	r3, r7, r5
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]

		setMotorSpeed(&motor_left, 50, FWD);
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <vTaskAsservMotor+0x64>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	2132      	movs	r1, #50	; 0x32
 8001b56:	0018      	movs	r0, r3
 8001b58:	f7ff fce3 	bl	8001522 <setMotorSpeed>
		//setMotorSpeed(&motor_left, (uint8_t)speed_cmd_motor_left, dir_cmd_motor_left);
		setMotorSpeed(&motor_right, (uint8_t)speed_cmd_motor_right, dir_cmd_motor_right);
 8001b5c:	197b      	adds	r3, r7, r5
 8001b5e:	781a      	ldrb	r2, [r3, #0]
 8001b60:	193b      	adds	r3, r7, r4
 8001b62:	7819      	ldrb	r1, [r3, #0]
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <vTaskAsservMotor+0x68>)
 8001b66:	0018      	movs	r0, r3
 8001b68:	f7ff fcdb 	bl	8001522 <setMotorSpeed>
	{
 8001b6c:	e7e0      	b.n	8001b30 <vTaskAsservMotor+0x24>
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	200000c0 	.word	0x200000c0
 8001b74:	200000d0 	.word	0x200000d0

08001b78 <getPositionMotorTaskHandle>:
	}
}


TaskHandle_t getPositionMotorTaskHandle(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
	return position_motor_task_h;
 8001b7c:	4b02      	ldr	r3, [pc, #8]	; (8001b88 <getPositionMotorTaskHandle+0x10>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	0018      	movs	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	20000188 	.word	0x20000188

08001b8c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b08d      	sub	sp, #52	; 0x34
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b92:	240c      	movs	r4, #12
 8001b94:	193b      	adds	r3, r7, r4
 8001b96:	0018      	movs	r0, r3
 8001b98:	2324      	movs	r3, #36	; 0x24
 8001b9a:	001a      	movs	r2, r3
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	f007 fbcd 	bl	800933c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba2:	003b      	movs	r3, r7
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	230c      	movs	r3, #12
 8001ba8:	001a      	movs	r2, r3
 8001baa:	2100      	movs	r1, #0
 8001bac:	f007 fbc6 	bl	800933c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bb0:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <MX_TIM1_Init+0xc8>)
 8001bb2:	4a29      	ldr	r2, [pc, #164]	; (8001c58 <MX_TIM1_Init+0xcc>)
 8001bb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bb6:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <MX_TIM1_Init+0xc8>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbc:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <MX_TIM1_Init+0xc8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bc2:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <MX_TIM1_Init+0xc8>)
 8001bc4:	4a25      	ldr	r2, [pc, #148]	; (8001c5c <MX_TIM1_Init+0xd0>)
 8001bc6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <MX_TIM1_Init+0xc8>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bce:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <MX_TIM1_Init+0xc8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd4:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <MX_TIM1_Init+0xc8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001bda:	0021      	movs	r1, r4
 8001bdc:	187b      	adds	r3, r7, r1
 8001bde:	2201      	movs	r2, #1
 8001be0:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001be2:	187b      	adds	r3, r7, r1
 8001be4:	2200      	movs	r2, #0
 8001be6:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	2201      	movs	r2, #1
 8001bec:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bee:	187b      	adds	r3, r7, r1
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8001bf4:	187b      	adds	r3, r7, r1
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bfa:	187b      	adds	r3, r7, r1
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c00:	187b      	adds	r3, r7, r1
 8001c02:	2201      	movs	r2, #1
 8001c04:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c06:	187b      	adds	r3, r7, r1
 8001c08:	2200      	movs	r2, #0
 8001c0a:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8001c0c:	187b      	adds	r3, r7, r1
 8001c0e:	2200      	movs	r2, #0
 8001c10:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001c12:	187a      	adds	r2, r7, r1
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <MX_TIM1_Init+0xc8>)
 8001c16:	0011      	movs	r1, r2
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f002 fbc3 	bl	80043a4 <HAL_TIM_Encoder_Init>
 8001c1e:	1e03      	subs	r3, r0, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001c22:	f7ff fa6d 	bl	8001100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c26:	003b      	movs	r3, r7
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c2c:	003b      	movs	r3, r7
 8001c2e:	2200      	movs	r2, #0
 8001c30:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c32:	003b      	movs	r3, r7
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c38:	003a      	movs	r2, r7
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_TIM1_Init+0xc8>)
 8001c3c:	0011      	movs	r1, r2
 8001c3e:	0018      	movs	r0, r3
 8001c40:	f003 fc7e 	bl	8005540 <HAL_TIMEx_MasterConfigSynchronization>
 8001c44:	1e03      	subs	r3, r0, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001c48:	f7ff fa5a 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c4c:	46c0      	nop			; (mov r8, r8)
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b00d      	add	sp, #52	; 0x34
 8001c52:	bd90      	pop	{r4, r7, pc}
 8001c54:	2000018c 	.word	0x2000018c
 8001c58:	40012c00 	.word	0x40012c00
 8001c5c:	0000ffff 	.word	0x0000ffff

08001c60 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b08d      	sub	sp, #52	; 0x34
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c66:	240c      	movs	r4, #12
 8001c68:	193b      	adds	r3, r7, r4
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	2324      	movs	r3, #36	; 0x24
 8001c6e:	001a      	movs	r2, r3
 8001c70:	2100      	movs	r1, #0
 8001c72:	f007 fb63 	bl	800933c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c76:	003b      	movs	r3, r7
 8001c78:	0018      	movs	r0, r3
 8001c7a:	230c      	movs	r3, #12
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	2100      	movs	r1, #0
 8001c80:	f007 fb5c 	bl	800933c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c84:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <MX_TIM3_Init+0xbc>)
 8001c86:	4a26      	ldr	r2, [pc, #152]	; (8001d20 <MX_TIM3_Init+0xc0>)
 8001c88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c8a:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <MX_TIM3_Init+0xbc>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c90:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <MX_TIM3_Init+0xbc>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c96:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <MX_TIM3_Init+0xbc>)
 8001c98:	4a22      	ldr	r2, [pc, #136]	; (8001d24 <MX_TIM3_Init+0xc4>)
 8001c9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9c:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <MX_TIM3_Init+0xbc>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <MX_TIM3_Init+0xbc>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ca8:	0021      	movs	r1, r4
 8001caa:	187b      	adds	r3, r7, r1
 8001cac:	2201      	movs	r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cb0:	187b      	adds	r3, r7, r1
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cb6:	187b      	adds	r3, r7, r1
 8001cb8:	2201      	movs	r2, #1
 8001cba:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cbc:	187b      	adds	r3, r7, r1
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8001cc2:	187b      	adds	r3, r7, r1
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cc8:	187b      	adds	r3, r7, r1
 8001cca:	2200      	movs	r2, #0
 8001ccc:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cce:	187b      	adds	r3, r7, r1
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cd4:	187b      	adds	r3, r7, r1
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8001cda:	187b      	adds	r3, r7, r1
 8001cdc:	2200      	movs	r2, #0
 8001cde:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001ce0:	187a      	adds	r2, r7, r1
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <MX_TIM3_Init+0xbc>)
 8001ce4:	0011      	movs	r1, r2
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f002 fb5c 	bl	80043a4 <HAL_TIM_Encoder_Init>
 8001cec:	1e03      	subs	r3, r0, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001cf0:	f7ff fa06 	bl	8001100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf4:	003b      	movs	r3, r7
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfa:	003b      	movs	r3, r7
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d00:	003a      	movs	r2, r7
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <MX_TIM3_Init+0xbc>)
 8001d04:	0011      	movs	r1, r2
 8001d06:	0018      	movs	r0, r3
 8001d08:	f003 fc1a 	bl	8005540 <HAL_TIMEx_MasterConfigSynchronization>
 8001d0c:	1e03      	subs	r3, r0, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001d10:	f7ff f9f6 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d14:	46c0      	nop			; (mov r8, r8)
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b00d      	add	sp, #52	; 0x34
 8001d1a:	bd90      	pop	{r4, r7, pc}
 8001d1c:	200001d8 	.word	0x200001d8
 8001d20:	40000400 	.word	0x40000400
 8001d24:	0000ffff 	.word	0x0000ffff

08001d28 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	0018      	movs	r0, r3
 8001d32:	231c      	movs	r3, #28
 8001d34:	001a      	movs	r2, r3
 8001d36:	2100      	movs	r1, #0
 8001d38:	f007 fb00 	bl	800933c <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <MX_TIM14_Init+0x94>)
 8001d3e:	4a20      	ldr	r2, [pc, #128]	; (8001dc0 <MX_TIM14_Init+0x98>)
 8001d40:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 63;
 8001d42:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <MX_TIM14_Init+0x94>)
 8001d44:	223f      	movs	r2, #63	; 0x3f
 8001d46:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d48:	4b1c      	ldr	r3, [pc, #112]	; (8001dbc <MX_TIM14_Init+0x94>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <MX_TIM14_Init+0x94>)
 8001d50:	2263      	movs	r2, #99	; 0x63
 8001d52:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d54:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <MX_TIM14_Init+0x94>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <MX_TIM14_Init+0x94>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001d60:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <MX_TIM14_Init+0x94>)
 8001d62:	0018      	movs	r0, r3
 8001d64:	f002 f8cc 	bl	8003f00 <HAL_TIM_Base_Init>
 8001d68:	1e03      	subs	r3, r0, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001d6c:	f7ff f9c8 	bl	8001100 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001d70:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <MX_TIM14_Init+0x94>)
 8001d72:	0018      	movs	r0, r3
 8001d74:	f002 f9d2 	bl	800411c <HAL_TIM_PWM_Init>
 8001d78:	1e03      	subs	r3, r0, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8001d7c:	f7ff f9c0 	bl	8001100 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	2260      	movs	r2, #96	; 0x60
 8001d84:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	2200      	movs	r2, #0
 8001d8a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d98:	1d39      	adds	r1, r7, #4
 8001d9a:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <MX_TIM14_Init+0x94>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f002 fdde 	bl	8004960 <HAL_TIM_PWM_ConfigChannel>
 8001da4:	1e03      	subs	r3, r0, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001da8:	f7ff f9aa 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001dac:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <MX_TIM14_Init+0x94>)
 8001dae:	0018      	movs	r0, r3
 8001db0:	f000 fac2 	bl	8002338 <HAL_TIM_MspPostInit>

}
 8001db4:	46c0      	nop			; (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b008      	add	sp, #32
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000224 	.word	0x20000224
 8001dc0:	40002000 	.word	0x40002000

08001dc4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b09c      	sub	sp, #112	; 0x70
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dca:	2360      	movs	r3, #96	; 0x60
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	0018      	movs	r0, r3
 8001dd0:	2310      	movs	r3, #16
 8001dd2:	001a      	movs	r2, r3
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	f007 fab1 	bl	800933c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dda:	2354      	movs	r3, #84	; 0x54
 8001ddc:	18fb      	adds	r3, r7, r3
 8001dde:	0018      	movs	r0, r3
 8001de0:	230c      	movs	r3, #12
 8001de2:	001a      	movs	r2, r3
 8001de4:	2100      	movs	r1, #0
 8001de6:	f007 faa9 	bl	800933c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dea:	2338      	movs	r3, #56	; 0x38
 8001dec:	18fb      	adds	r3, r7, r3
 8001dee:	0018      	movs	r0, r3
 8001df0:	231c      	movs	r3, #28
 8001df2:	001a      	movs	r2, r3
 8001df4:	2100      	movs	r1, #0
 8001df6:	f007 faa1 	bl	800933c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	2334      	movs	r3, #52	; 0x34
 8001e00:	001a      	movs	r2, r3
 8001e02:	2100      	movs	r1, #0
 8001e04:	f007 fa9a 	bl	800933c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001e08:	4b4d      	ldr	r3, [pc, #308]	; (8001f40 <MX_TIM15_Init+0x17c>)
 8001e0a:	4a4e      	ldr	r2, [pc, #312]	; (8001f44 <MX_TIM15_Init+0x180>)
 8001e0c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001e0e:	4b4c      	ldr	r3, [pc, #304]	; (8001f40 <MX_TIM15_Init+0x17c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e14:	4b4a      	ldr	r3, [pc, #296]	; (8001f40 <MX_TIM15_Init+0x17c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2559;
 8001e1a:	4b49      	ldr	r3, [pc, #292]	; (8001f40 <MX_TIM15_Init+0x17c>)
 8001e1c:	4a4a      	ldr	r2, [pc, #296]	; (8001f48 <MX_TIM15_Init+0x184>)
 8001e1e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e20:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <MX_TIM15_Init+0x17c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001e26:	4b46      	ldr	r3, [pc, #280]	; (8001f40 <MX_TIM15_Init+0x17c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2c:	4b44      	ldr	r3, [pc, #272]	; (8001f40 <MX_TIM15_Init+0x17c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001e32:	4b43      	ldr	r3, [pc, #268]	; (8001f40 <MX_TIM15_Init+0x17c>)
 8001e34:	0018      	movs	r0, r3
 8001e36:	f002 f863 	bl	8003f00 <HAL_TIM_Base_Init>
 8001e3a:	1e03      	subs	r3, r0, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8001e3e:	f7ff f95f 	bl	8001100 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e42:	2160      	movs	r1, #96	; 0x60
 8001e44:	187b      	adds	r3, r7, r1
 8001e46:	2280      	movs	r2, #128	; 0x80
 8001e48:	0152      	lsls	r2, r2, #5
 8001e4a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001e4c:	187a      	adds	r2, r7, r1
 8001e4e:	4b3c      	ldr	r3, [pc, #240]	; (8001f40 <MX_TIM15_Init+0x17c>)
 8001e50:	0011      	movs	r1, r2
 8001e52:	0018      	movs	r0, r3
 8001e54:	f002 fe84 	bl	8004b60 <HAL_TIM_ConfigClockSource>
 8001e58:	1e03      	subs	r3, r0, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8001e5c:	f7ff f950 	bl	8001100 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001e60:	4b37      	ldr	r3, [pc, #220]	; (8001f40 <MX_TIM15_Init+0x17c>)
 8001e62:	0018      	movs	r0, r3
 8001e64:	f002 f95a 	bl	800411c <HAL_TIM_PWM_Init>
 8001e68:	1e03      	subs	r3, r0, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8001e6c:	f7ff f948 	bl	8001100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e70:	2154      	movs	r1, #84	; 0x54
 8001e72:	187b      	adds	r3, r7, r1
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e78:	187b      	adds	r3, r7, r1
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001e7e:	187a      	adds	r2, r7, r1
 8001e80:	4b2f      	ldr	r3, [pc, #188]	; (8001f40 <MX_TIM15_Init+0x17c>)
 8001e82:	0011      	movs	r1, r2
 8001e84:	0018      	movs	r0, r3
 8001e86:	f003 fb5b 	bl	8005540 <HAL_TIMEx_MasterConfigSynchronization>
 8001e8a:	1e03      	subs	r3, r0, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8001e8e:	f7ff f937 	bl	8001100 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e92:	2138      	movs	r1, #56	; 0x38
 8001e94:	187b      	adds	r3, r7, r1
 8001e96:	2260      	movs	r2, #96	; 0x60
 8001e98:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001e9a:	187b      	adds	r3, r7, r1
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ea0:	187b      	adds	r3, r7, r1
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ea6:	187b      	adds	r3, r7, r1
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eac:	187b      	adds	r3, r7, r1
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001eb2:	187b      	adds	r3, r7, r1
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001eb8:	187b      	adds	r3, r7, r1
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ebe:	1879      	adds	r1, r7, r1
 8001ec0:	4b1f      	ldr	r3, [pc, #124]	; (8001f40 <MX_TIM15_Init+0x17c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f002 fd4b 	bl	8004960 <HAL_TIM_PWM_ConfigChannel>
 8001eca:	1e03      	subs	r3, r0, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001ece:	f7ff f917 	bl	8001100 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ed2:	2338      	movs	r3, #56	; 0x38
 8001ed4:	18f9      	adds	r1, r7, r3
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <MX_TIM15_Init+0x17c>)
 8001ed8:	2204      	movs	r2, #4
 8001eda:	0018      	movs	r0, r3
 8001edc:	f002 fd40 	bl	8004960 <HAL_TIM_PWM_ConfigChannel>
 8001ee0:	1e03      	subs	r3, r0, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 8001ee4:	f7ff f90c 	bl	8001100 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	2200      	movs	r2, #0
 8001efe:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	2280      	movs	r2, #128	; 0x80
 8001f0a:	0192      	lsls	r2, r2, #6
 8001f0c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	2200      	movs	r2, #0
 8001f18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001f1a:	1d3a      	adds	r2, r7, #4
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <MX_TIM15_Init+0x17c>)
 8001f1e:	0011      	movs	r1, r2
 8001f20:	0018      	movs	r0, r3
 8001f22:	f003 fb75 	bl	8005610 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f26:	1e03      	subs	r3, r0, #0
 8001f28:	d001      	beq.n	8001f2e <MX_TIM15_Init+0x16a>
  {
    Error_Handler();
 8001f2a:	f7ff f8e9 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001f2e:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <MX_TIM15_Init+0x17c>)
 8001f30:	0018      	movs	r0, r3
 8001f32:	f000 fa01 	bl	8002338 <HAL_TIM_MspPostInit>

}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b01c      	add	sp, #112	; 0x70
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	20000270 	.word	0x20000270
 8001f44:	40014000 	.word	0x40014000
 8001f48:	000009ff 	.word	0x000009ff

08001f4c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b094      	sub	sp, #80	; 0x50
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f52:	2334      	movs	r3, #52	; 0x34
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	0018      	movs	r0, r3
 8001f58:	231c      	movs	r3, #28
 8001f5a:	001a      	movs	r2, r3
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	f007 f9ed 	bl	800933c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f62:	003b      	movs	r3, r7
 8001f64:	0018      	movs	r0, r3
 8001f66:	2334      	movs	r3, #52	; 0x34
 8001f68:	001a      	movs	r2, r3
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	f007 f9e6 	bl	800933c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001f70:	4b37      	ldr	r3, [pc, #220]	; (8002050 <MX_TIM16_Init+0x104>)
 8001f72:	4a38      	ldr	r2, [pc, #224]	; (8002054 <MX_TIM16_Init+0x108>)
 8001f74:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001f76:	4b36      	ldr	r3, [pc, #216]	; (8002050 <MX_TIM16_Init+0x104>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7c:	4b34      	ldr	r3, [pc, #208]	; (8002050 <MX_TIM16_Init+0x104>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2559;
 8001f82:	4b33      	ldr	r3, [pc, #204]	; (8002050 <MX_TIM16_Init+0x104>)
 8001f84:	4a34      	ldr	r2, [pc, #208]	; (8002058 <MX_TIM16_Init+0x10c>)
 8001f86:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f88:	4b31      	ldr	r3, [pc, #196]	; (8002050 <MX_TIM16_Init+0x104>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001f8e:	4b30      	ldr	r3, [pc, #192]	; (8002050 <MX_TIM16_Init+0x104>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f94:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <MX_TIM16_Init+0x104>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001f9a:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <MX_TIM16_Init+0x104>)
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f001 ffaf 	bl	8003f00 <HAL_TIM_Base_Init>
 8001fa2:	1e03      	subs	r3, r0, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8001fa6:	f7ff f8ab 	bl	8001100 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001faa:	4b29      	ldr	r3, [pc, #164]	; (8002050 <MX_TIM16_Init+0x104>)
 8001fac:	0018      	movs	r0, r3
 8001fae:	f002 f855 	bl	800405c <HAL_TIM_OC_Init>
 8001fb2:	1e03      	subs	r3, r0, #0
 8001fb4:	d001      	beq.n	8001fba <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8001fb6:	f7ff f8a3 	bl	8001100 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001fba:	2134      	movs	r1, #52	; 0x34
 8001fbc:	187b      	adds	r3, r7, r1
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001fc2:	187b      	adds	r3, r7, r1
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fc8:	187b      	adds	r3, r7, r1
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fce:	187b      	adds	r3, r7, r1
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fd4:	187b      	adds	r3, r7, r1
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fda:	187b      	adds	r3, r7, r1
 8001fdc:	2200      	movs	r2, #0
 8001fde:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fe0:	187b      	adds	r3, r7, r1
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fe6:	1879      	adds	r1, r7, r1
 8001fe8:	4b19      	ldr	r3, [pc, #100]	; (8002050 <MX_TIM16_Init+0x104>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	0018      	movs	r0, r3
 8001fee:	f002 fc57 	bl	80048a0 <HAL_TIM_OC_ConfigChannel>
 8001ff2:	1e03      	subs	r3, r0, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8001ff6:	f7ff f883 	bl	8001100 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ffa:	003b      	movs	r3, r7
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002000:	003b      	movs	r3, r7
 8002002:	2200      	movs	r2, #0
 8002004:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002006:	003b      	movs	r3, r7
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800200c:	003b      	movs	r3, r7
 800200e:	2200      	movs	r2, #0
 8002010:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002012:	003b      	movs	r3, r7
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002018:	003b      	movs	r3, r7
 800201a:	2280      	movs	r2, #128	; 0x80
 800201c:	0192      	lsls	r2, r2, #6
 800201e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002020:	003b      	movs	r3, r7
 8002022:	2200      	movs	r2, #0
 8002024:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002026:	003b      	movs	r3, r7
 8002028:	2200      	movs	r2, #0
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800202c:	003a      	movs	r2, r7
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <MX_TIM16_Init+0x104>)
 8002030:	0011      	movs	r1, r2
 8002032:	0018      	movs	r0, r3
 8002034:	f003 faec 	bl	8005610 <HAL_TIMEx_ConfigBreakDeadTime>
 8002038:	1e03      	subs	r3, r0, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 800203c:	f7ff f860 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002040:	4b03      	ldr	r3, [pc, #12]	; (8002050 <MX_TIM16_Init+0x104>)
 8002042:	0018      	movs	r0, r3
 8002044:	f000 f978 	bl	8002338 <HAL_TIM_MspPostInit>

}
 8002048:	46c0      	nop			; (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	b014      	add	sp, #80	; 0x50
 800204e:	bd80      	pop	{r7, pc}
 8002050:	200002bc 	.word	0x200002bc
 8002054:	40014400 	.word	0x40014400
 8002058:	000009ff 	.word	0x000009ff

0800205c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b094      	sub	sp, #80	; 0x50
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002062:	2334      	movs	r3, #52	; 0x34
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	0018      	movs	r0, r3
 8002068:	231c      	movs	r3, #28
 800206a:	001a      	movs	r2, r3
 800206c:	2100      	movs	r1, #0
 800206e:	f007 f965 	bl	800933c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002072:	003b      	movs	r3, r7
 8002074:	0018      	movs	r0, r3
 8002076:	2334      	movs	r3, #52	; 0x34
 8002078:	001a      	movs	r2, r3
 800207a:	2100      	movs	r1, #0
 800207c:	f007 f95e 	bl	800933c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002080:	4b37      	ldr	r3, [pc, #220]	; (8002160 <MX_TIM17_Init+0x104>)
 8002082:	4a38      	ldr	r2, [pc, #224]	; (8002164 <MX_TIM17_Init+0x108>)
 8002084:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002086:	4b36      	ldr	r3, [pc, #216]	; (8002160 <MX_TIM17_Init+0x104>)
 8002088:	2200      	movs	r2, #0
 800208a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208c:	4b34      	ldr	r3, [pc, #208]	; (8002160 <MX_TIM17_Init+0x104>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2559;
 8002092:	4b33      	ldr	r3, [pc, #204]	; (8002160 <MX_TIM17_Init+0x104>)
 8002094:	4a34      	ldr	r2, [pc, #208]	; (8002168 <MX_TIM17_Init+0x10c>)
 8002096:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002098:	4b31      	ldr	r3, [pc, #196]	; (8002160 <MX_TIM17_Init+0x104>)
 800209a:	2200      	movs	r2, #0
 800209c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800209e:	4b30      	ldr	r3, [pc, #192]	; (8002160 <MX_TIM17_Init+0x104>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a4:	4b2e      	ldr	r3, [pc, #184]	; (8002160 <MX_TIM17_Init+0x104>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80020aa:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <MX_TIM17_Init+0x104>)
 80020ac:	0018      	movs	r0, r3
 80020ae:	f001 ff27 	bl	8003f00 <HAL_TIM_Base_Init>
 80020b2:	1e03      	subs	r3, r0, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80020b6:	f7ff f823 	bl	8001100 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 80020ba:	4b29      	ldr	r3, [pc, #164]	; (8002160 <MX_TIM17_Init+0x104>)
 80020bc:	0018      	movs	r0, r3
 80020be:	f001 ffcd 	bl	800405c <HAL_TIM_OC_Init>
 80020c2:	1e03      	subs	r3, r0, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80020c6:	f7ff f81b 	bl	8001100 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80020ca:	2134      	movs	r1, #52	; 0x34
 80020cc:	187b      	adds	r3, r7, r1
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80020d2:	187b      	adds	r3, r7, r1
 80020d4:	2200      	movs	r2, #0
 80020d6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d8:	187b      	adds	r3, r7, r1
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020de:	187b      	adds	r3, r7, r1
 80020e0:	2200      	movs	r2, #0
 80020e2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e4:	187b      	adds	r3, r7, r1
 80020e6:	2200      	movs	r2, #0
 80020e8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020ea:	187b      	adds	r3, r7, r1
 80020ec:	2200      	movs	r2, #0
 80020ee:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020f0:	187b      	adds	r3, r7, r1
 80020f2:	2200      	movs	r2, #0
 80020f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020f6:	1879      	adds	r1, r7, r1
 80020f8:	4b19      	ldr	r3, [pc, #100]	; (8002160 <MX_TIM17_Init+0x104>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	0018      	movs	r0, r3
 80020fe:	f002 fbcf 	bl	80048a0 <HAL_TIM_OC_ConfigChannel>
 8002102:	1e03      	subs	r3, r0, #0
 8002104:	d001      	beq.n	800210a <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8002106:	f7fe fffb 	bl	8001100 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800210a:	003b      	movs	r3, r7
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002110:	003b      	movs	r3, r7
 8002112:	2200      	movs	r2, #0
 8002114:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002116:	003b      	movs	r3, r7
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800211c:	003b      	movs	r3, r7
 800211e:	2200      	movs	r2, #0
 8002120:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002122:	003b      	movs	r3, r7
 8002124:	2200      	movs	r2, #0
 8002126:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002128:	003b      	movs	r3, r7
 800212a:	2280      	movs	r2, #128	; 0x80
 800212c:	0192      	lsls	r2, r2, #6
 800212e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002130:	003b      	movs	r3, r7
 8002132:	2200      	movs	r2, #0
 8002134:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002136:	003b      	movs	r3, r7
 8002138:	2200      	movs	r2, #0
 800213a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800213c:	003a      	movs	r2, r7
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <MX_TIM17_Init+0x104>)
 8002140:	0011      	movs	r1, r2
 8002142:	0018      	movs	r0, r3
 8002144:	f003 fa64 	bl	8005610 <HAL_TIMEx_ConfigBreakDeadTime>
 8002148:	1e03      	subs	r3, r0, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 800214c:	f7fe ffd8 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <MX_TIM17_Init+0x104>)
 8002152:	0018      	movs	r0, r3
 8002154:	f000 f8f0 	bl	8002338 <HAL_TIM_MspPostInit>

}
 8002158:	46c0      	nop			; (mov r8, r8)
 800215a:	46bd      	mov	sp, r7
 800215c:	b014      	add	sp, #80	; 0x50
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000308 	.word	0x20000308
 8002164:	40014800 	.word	0x40014800
 8002168:	000009ff 	.word	0x000009ff

0800216c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800216c:	b590      	push	{r4, r7, lr}
 800216e:	b08d      	sub	sp, #52	; 0x34
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	241c      	movs	r4, #28
 8002176:	193b      	adds	r3, r7, r4
 8002178:	0018      	movs	r0, r3
 800217a:	2314      	movs	r3, #20
 800217c:	001a      	movs	r2, r3
 800217e:	2100      	movs	r1, #0
 8002180:	f007 f8dc 	bl	800933c <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a36      	ldr	r2, [pc, #216]	; (8002264 <HAL_TIM_Encoder_MspInit+0xf8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d132      	bne.n	80021f4 <HAL_TIM_Encoder_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800218e:	4b36      	ldr	r3, [pc, #216]	; (8002268 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002192:	4b35      	ldr	r3, [pc, #212]	; (8002268 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	0109      	lsls	r1, r1, #4
 8002198:	430a      	orrs	r2, r1
 800219a:	641a      	str	r2, [r3, #64]	; 0x40
 800219c:	4b32      	ldr	r3, [pc, #200]	; (8002268 <HAL_TIM_Encoder_MspInit+0xfc>)
 800219e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
 80021a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	4b2f      	ldr	r3, [pc, #188]	; (8002268 <HAL_TIM_Encoder_MspInit+0xfc>)
 80021ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ae:	4b2e      	ldr	r3, [pc, #184]	; (8002268 <HAL_TIM_Encoder_MspInit+0xfc>)
 80021b0:	2101      	movs	r1, #1
 80021b2:	430a      	orrs	r2, r1
 80021b4:	635a      	str	r2, [r3, #52]	; 0x34
 80021b6:	4b2c      	ldr	r3, [pc, #176]	; (8002268 <HAL_TIM_Encoder_MspInit+0xfc>)
 80021b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ba:	2201      	movs	r2, #1
 80021bc:	4013      	ands	r3, r2
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MR_ENC_B_Pin|MR_ENC_A_Pin;
 80021c2:	193b      	adds	r3, r7, r4
 80021c4:	22c0      	movs	r2, #192	; 0xc0
 80021c6:	0092      	lsls	r2, r2, #2
 80021c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	0021      	movs	r1, r4
 80021cc:	187b      	adds	r3, r7, r1
 80021ce:	2202      	movs	r2, #2
 80021d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	187b      	adds	r3, r7, r1
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	187b      	adds	r3, r7, r1
 80021da:	2200      	movs	r2, #0
 80021dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80021de:	187b      	adds	r3, r7, r1
 80021e0:	2202      	movs	r2, #2
 80021e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e4:	187a      	adds	r2, r7, r1
 80021e6:	23a0      	movs	r3, #160	; 0xa0
 80021e8:	05db      	lsls	r3, r3, #23
 80021ea:	0011      	movs	r1, r2
 80021ec:	0018      	movs	r0, r3
 80021ee:	f000 fe55 	bl	8002e9c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80021f2:	e032      	b.n	800225a <HAL_TIM_Encoder_MspInit+0xee>
  else if(tim_encoderHandle->Instance==TIM3)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1c      	ldr	r2, [pc, #112]	; (800226c <HAL_TIM_Encoder_MspInit+0x100>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d12d      	bne.n	800225a <HAL_TIM_Encoder_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021fe:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002202:	4b19      	ldr	r3, [pc, #100]	; (8002268 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002204:	2102      	movs	r1, #2
 8002206:	430a      	orrs	r2, r1
 8002208:	63da      	str	r2, [r3, #60]	; 0x3c
 800220a:	4b17      	ldr	r3, [pc, #92]	; (8002268 <HAL_TIM_Encoder_MspInit+0xfc>)
 800220c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220e:	2202      	movs	r2, #2
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002216:	4b14      	ldr	r3, [pc, #80]	; (8002268 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800221a:	4b13      	ldr	r3, [pc, #76]	; (8002268 <HAL_TIM_Encoder_MspInit+0xfc>)
 800221c:	2104      	movs	r1, #4
 800221e:	430a      	orrs	r2, r1
 8002220:	635a      	str	r2, [r3, #52]	; 0x34
 8002222:	4b11      	ldr	r3, [pc, #68]	; (8002268 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002226:	2204      	movs	r2, #4
 8002228:	4013      	ands	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ML_ENC_B_Pin|ML_ENC_A_Pin;
 800222e:	211c      	movs	r1, #28
 8002230:	187b      	adds	r3, r7, r1
 8002232:	22c0      	movs	r2, #192	; 0xc0
 8002234:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	187b      	adds	r3, r7, r1
 8002238:	2202      	movs	r2, #2
 800223a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	187b      	adds	r3, r7, r1
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	187b      	adds	r3, r7, r1
 8002244:	2200      	movs	r2, #0
 8002246:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002248:	187b      	adds	r3, r7, r1
 800224a:	2201      	movs	r2, #1
 800224c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800224e:	187b      	adds	r3, r7, r1
 8002250:	4a07      	ldr	r2, [pc, #28]	; (8002270 <HAL_TIM_Encoder_MspInit+0x104>)
 8002252:	0019      	movs	r1, r3
 8002254:	0010      	movs	r0, r2
 8002256:	f000 fe21 	bl	8002e9c <HAL_GPIO_Init>
}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	46bd      	mov	sp, r7
 800225e:	b00d      	add	sp, #52	; 0x34
 8002260:	bd90      	pop	{r4, r7, pc}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	40012c00 	.word	0x40012c00
 8002268:	40021000 	.word	0x40021000
 800226c:	40000400 	.word	0x40000400
 8002270:	50000800 	.word	0x50000800

08002274 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a28      	ldr	r2, [pc, #160]	; (8002324 <HAL_TIM_Base_MspInit+0xb0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d10e      	bne.n	80022a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002286:	4b28      	ldr	r3, [pc, #160]	; (8002328 <HAL_TIM_Base_MspInit+0xb4>)
 8002288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800228a:	4b27      	ldr	r3, [pc, #156]	; (8002328 <HAL_TIM_Base_MspInit+0xb4>)
 800228c:	2180      	movs	r1, #128	; 0x80
 800228e:	0209      	lsls	r1, r1, #8
 8002290:	430a      	orrs	r2, r1
 8002292:	641a      	str	r2, [r3, #64]	; 0x40
 8002294:	4b24      	ldr	r3, [pc, #144]	; (8002328 <HAL_TIM_Base_MspInit+0xb4>)
 8002296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	021b      	lsls	r3, r3, #8
 800229c:	4013      	ands	r3, r2
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80022a2:	e03a      	b.n	800231a <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM15)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a20      	ldr	r2, [pc, #128]	; (800232c <HAL_TIM_Base_MspInit+0xb8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d10e      	bne.n	80022cc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80022ae:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <HAL_TIM_Base_MspInit+0xb4>)
 80022b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022b2:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_TIM_Base_MspInit+0xb4>)
 80022b4:	2180      	movs	r1, #128	; 0x80
 80022b6:	0249      	lsls	r1, r1, #9
 80022b8:	430a      	orrs	r2, r1
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40
 80022bc:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <HAL_TIM_Base_MspInit+0xb4>)
 80022be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	025b      	lsls	r3, r3, #9
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]
}
 80022ca:	e026      	b.n	800231a <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM16)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a17      	ldr	r2, [pc, #92]	; (8002330 <HAL_TIM_Base_MspInit+0xbc>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d10e      	bne.n	80022f4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80022d6:	4b14      	ldr	r3, [pc, #80]	; (8002328 <HAL_TIM_Base_MspInit+0xb4>)
 80022d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022da:	4b13      	ldr	r3, [pc, #76]	; (8002328 <HAL_TIM_Base_MspInit+0xb4>)
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	0289      	lsls	r1, r1, #10
 80022e0:	430a      	orrs	r2, r1
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40
 80022e4:	4b10      	ldr	r3, [pc, #64]	; (8002328 <HAL_TIM_Base_MspInit+0xb4>)
 80022e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	029b      	lsls	r3, r3, #10
 80022ec:	4013      	ands	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
}
 80022f2:	e012      	b.n	800231a <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM17)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <HAL_TIM_Base_MspInit+0xc0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d10d      	bne.n	800231a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <HAL_TIM_Base_MspInit+0xb4>)
 8002300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_TIM_Base_MspInit+0xb4>)
 8002304:	2180      	movs	r1, #128	; 0x80
 8002306:	02c9      	lsls	r1, r1, #11
 8002308:	430a      	orrs	r2, r1
 800230a:	641a      	str	r2, [r3, #64]	; 0x40
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_TIM_Base_MspInit+0xb4>)
 800230e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002310:	2380      	movs	r3, #128	; 0x80
 8002312:	02db      	lsls	r3, r3, #11
 8002314:	4013      	ands	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	46bd      	mov	sp, r7
 800231e:	b006      	add	sp, #24
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	40002000 	.word	0x40002000
 8002328:	40021000 	.word	0x40021000
 800232c:	40014000 	.word	0x40014000
 8002330:	40014400 	.word	0x40014400
 8002334:	40014800 	.word	0x40014800

08002338 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002338:	b590      	push	{r4, r7, lr}
 800233a:	b08d      	sub	sp, #52	; 0x34
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	241c      	movs	r4, #28
 8002342:	193b      	adds	r3, r7, r4
 8002344:	0018      	movs	r0, r3
 8002346:	2314      	movs	r3, #20
 8002348:	001a      	movs	r2, r3
 800234a:	2100      	movs	r1, #0
 800234c:	f006 fff6 	bl	800933c <memset>
  if(timHandle->Instance==TIM14)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a50      	ldr	r2, [pc, #320]	; (8002498 <HAL_TIM_MspPostInit+0x160>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d122      	bne.n	80023a0 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235a:	4b50      	ldr	r3, [pc, #320]	; (800249c <HAL_TIM_MspPostInit+0x164>)
 800235c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800235e:	4b4f      	ldr	r3, [pc, #316]	; (800249c <HAL_TIM_MspPostInit+0x164>)
 8002360:	2102      	movs	r1, #2
 8002362:	430a      	orrs	r2, r1
 8002364:	635a      	str	r2, [r3, #52]	; 0x34
 8002366:	4b4d      	ldr	r3, [pc, #308]	; (800249c <HAL_TIM_MspPostInit+0x164>)
 8002368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236a:	2202      	movs	r2, #2
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	69bb      	ldr	r3, [r7, #24]
    /**TIM14 GPIO Configuration
    PB1     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = LIDAR_M_SCTR_Pin;
 8002372:	0021      	movs	r1, r4
 8002374:	187b      	adds	r3, r7, r1
 8002376:	2202      	movs	r2, #2
 8002378:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	187b      	adds	r3, r7, r1
 800237c:	2202      	movs	r2, #2
 800237e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	187b      	adds	r3, r7, r1
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	187b      	adds	r3, r7, r1
 8002388:	2200      	movs	r2, #0
 800238a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM14;
 800238c:	187b      	adds	r3, r7, r1
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LIDAR_M_SCTR_GPIO_Port, &GPIO_InitStruct);
 8002392:	187b      	adds	r3, r7, r1
 8002394:	4a42      	ldr	r2, [pc, #264]	; (80024a0 <HAL_TIM_MspPostInit+0x168>)
 8002396:	0019      	movs	r1, r3
 8002398:	0010      	movs	r0, r2
 800239a:	f000 fd7f 	bl	8002e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800239e:	e077      	b.n	8002490 <HAL_TIM_MspPostInit+0x158>
  else if(timHandle->Instance==TIM15)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a3f      	ldr	r2, [pc, #252]	; (80024a4 <HAL_TIM_MspPostInit+0x16c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d123      	bne.n	80023f2 <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023aa:	4b3c      	ldr	r3, [pc, #240]	; (800249c <HAL_TIM_MspPostInit+0x164>)
 80023ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ae:	4b3b      	ldr	r3, [pc, #236]	; (800249c <HAL_TIM_MspPostInit+0x164>)
 80023b0:	2102      	movs	r1, #2
 80023b2:	430a      	orrs	r2, r1
 80023b4:	635a      	str	r2, [r3, #52]	; 0x34
 80023b6:	4b39      	ldr	r3, [pc, #228]	; (800249c <HAL_TIM_MspPostInit+0x164>)
 80023b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ba:	2202      	movs	r2, #2
 80023bc:	4013      	ands	r3, r2
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MR_REV_Pin|MR_FWD_Pin;
 80023c2:	211c      	movs	r1, #28
 80023c4:	187b      	adds	r3, r7, r1
 80023c6:	22c0      	movs	r2, #192	; 0xc0
 80023c8:	0212      	lsls	r2, r2, #8
 80023ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023cc:	187b      	adds	r3, r7, r1
 80023ce:	2202      	movs	r2, #2
 80023d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	187b      	adds	r3, r7, r1
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d8:	187b      	adds	r3, r7, r1
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 80023de:	187b      	adds	r3, r7, r1
 80023e0:	2205      	movs	r2, #5
 80023e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e4:	187b      	adds	r3, r7, r1
 80023e6:	4a2e      	ldr	r2, [pc, #184]	; (80024a0 <HAL_TIM_MspPostInit+0x168>)
 80023e8:	0019      	movs	r1, r3
 80023ea:	0010      	movs	r0, r2
 80023ec:	f000 fd56 	bl	8002e9c <HAL_GPIO_Init>
}
 80023f0:	e04e      	b.n	8002490 <HAL_TIM_MspPostInit+0x158>
  else if(timHandle->Instance==TIM16)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a2c      	ldr	r2, [pc, #176]	; (80024a8 <HAL_TIM_MspPostInit+0x170>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d122      	bne.n	8002442 <HAL_TIM_MspPostInit+0x10a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023fc:	4b27      	ldr	r3, [pc, #156]	; (800249c <HAL_TIM_MspPostInit+0x164>)
 80023fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002400:	4b26      	ldr	r3, [pc, #152]	; (800249c <HAL_TIM_MspPostInit+0x164>)
 8002402:	2108      	movs	r1, #8
 8002404:	430a      	orrs	r2, r1
 8002406:	635a      	str	r2, [r3, #52]	; 0x34
 8002408:	4b24      	ldr	r3, [pc, #144]	; (800249c <HAL_TIM_MspPostInit+0x164>)
 800240a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240c:	2208      	movs	r2, #8
 800240e:	4013      	ands	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ML_REV_Pin;
 8002414:	211c      	movs	r1, #28
 8002416:	187b      	adds	r3, r7, r1
 8002418:	2201      	movs	r2, #1
 800241a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	187b      	adds	r3, r7, r1
 800241e:	2202      	movs	r2, #2
 8002420:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	187b      	adds	r3, r7, r1
 8002424:	2200      	movs	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002428:	187b      	adds	r3, r7, r1
 800242a:	2200      	movs	r2, #0
 800242c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 800242e:	187b      	adds	r3, r7, r1
 8002430:	2202      	movs	r2, #2
 8002432:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ML_REV_GPIO_Port, &GPIO_InitStruct);
 8002434:	187b      	adds	r3, r7, r1
 8002436:	4a1d      	ldr	r2, [pc, #116]	; (80024ac <HAL_TIM_MspPostInit+0x174>)
 8002438:	0019      	movs	r1, r3
 800243a:	0010      	movs	r0, r2
 800243c:	f000 fd2e 	bl	8002e9c <HAL_GPIO_Init>
}
 8002440:	e026      	b.n	8002490 <HAL_TIM_MspPostInit+0x158>
  else if(timHandle->Instance==TIM17)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a1a      	ldr	r2, [pc, #104]	; (80024b0 <HAL_TIM_MspPostInit+0x178>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d121      	bne.n	8002490 <HAL_TIM_MspPostInit+0x158>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800244c:	4b13      	ldr	r3, [pc, #76]	; (800249c <HAL_TIM_MspPostInit+0x164>)
 800244e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <HAL_TIM_MspPostInit+0x164>)
 8002452:	2108      	movs	r1, #8
 8002454:	430a      	orrs	r2, r1
 8002456:	635a      	str	r2, [r3, #52]	; 0x34
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <HAL_TIM_MspPostInit+0x164>)
 800245a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245c:	2208      	movs	r2, #8
 800245e:	4013      	ands	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ML_FWD_Pin;
 8002464:	211c      	movs	r1, #28
 8002466:	187b      	adds	r3, r7, r1
 8002468:	2202      	movs	r2, #2
 800246a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246c:	187b      	adds	r3, r7, r1
 800246e:	2202      	movs	r2, #2
 8002470:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	187b      	adds	r3, r7, r1
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	187b      	adds	r3, r7, r1
 800247a:	2200      	movs	r2, #0
 800247c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 800247e:	187b      	adds	r3, r7, r1
 8002480:	2202      	movs	r2, #2
 8002482:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ML_FWD_GPIO_Port, &GPIO_InitStruct);
 8002484:	187b      	adds	r3, r7, r1
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <HAL_TIM_MspPostInit+0x174>)
 8002488:	0019      	movs	r1, r3
 800248a:	0010      	movs	r0, r2
 800248c:	f000 fd06 	bl	8002e9c <HAL_GPIO_Init>
}
 8002490:	46c0      	nop			; (mov r8, r8)
 8002492:	46bd      	mov	sp, r7
 8002494:	b00d      	add	sp, #52	; 0x34
 8002496:	bd90      	pop	{r4, r7, pc}
 8002498:	40002000 	.word	0x40002000
 800249c:	40021000 	.word	0x40021000
 80024a0:	50000400 	.word	0x50000400
 80024a4:	40014000 	.word	0x40014000
 80024a8:	40014400 	.word	0x40014400
 80024ac:	50000c00 	.word	0x50000c00
 80024b0:	40014800 	.word	0x40014800

080024b4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart4_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024b8:	4b25      	ldr	r3, [pc, #148]	; (8002550 <MX_USART2_UART_Init+0x9c>)
 80024ba:	4a26      	ldr	r2, [pc, #152]	; (8002554 <MX_USART2_UART_Init+0xa0>)
 80024bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024be:	4b24      	ldr	r3, [pc, #144]	; (8002550 <MX_USART2_UART_Init+0x9c>)
 80024c0:	22e1      	movs	r2, #225	; 0xe1
 80024c2:	0252      	lsls	r2, r2, #9
 80024c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024c6:	4b22      	ldr	r3, [pc, #136]	; (8002550 <MX_USART2_UART_Init+0x9c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024cc:	4b20      	ldr	r3, [pc, #128]	; (8002550 <MX_USART2_UART_Init+0x9c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024d2:	4b1f      	ldr	r3, [pc, #124]	; (8002550 <MX_USART2_UART_Init+0x9c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <MX_USART2_UART_Init+0x9c>)
 80024da:	220c      	movs	r2, #12
 80024dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024de:	4b1c      	ldr	r3, [pc, #112]	; (8002550 <MX_USART2_UART_Init+0x9c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e4:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <MX_USART2_UART_Init+0x9c>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ea:	4b19      	ldr	r3, [pc, #100]	; (8002550 <MX_USART2_UART_Init+0x9c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024f0:	4b17      	ldr	r3, [pc, #92]	; (8002550 <MX_USART2_UART_Init+0x9c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80024f6:	4b16      	ldr	r3, [pc, #88]	; (8002550 <MX_USART2_UART_Init+0x9c>)
 80024f8:	2208      	movs	r2, #8
 80024fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80024fc:	4b14      	ldr	r3, [pc, #80]	; (8002550 <MX_USART2_UART_Init+0x9c>)
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	0212      	lsls	r2, r2, #8
 8002502:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002504:	4b12      	ldr	r3, [pc, #72]	; (8002550 <MX_USART2_UART_Init+0x9c>)
 8002506:	0018      	movs	r0, r3
 8002508:	f003 f940 	bl	800578c <HAL_UART_Init>
 800250c:	1e03      	subs	r3, r0, #0
 800250e:	d001      	beq.n	8002514 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8002510:	f7fe fdf6 	bl	8001100 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002514:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <MX_USART2_UART_Init+0x9c>)
 8002516:	2100      	movs	r1, #0
 8002518:	0018      	movs	r0, r3
 800251a:	f004 f9d5 	bl	80068c8 <HAL_UARTEx_SetTxFifoThreshold>
 800251e:	1e03      	subs	r3, r0, #0
 8002520:	d001      	beq.n	8002526 <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 8002522:	f7fe fded 	bl	8001100 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002526:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <MX_USART2_UART_Init+0x9c>)
 8002528:	2100      	movs	r1, #0
 800252a:	0018      	movs	r0, r3
 800252c:	f004 fa0c 	bl	8006948 <HAL_UARTEx_SetRxFifoThreshold>
 8002530:	1e03      	subs	r3, r0, #0
 8002532:	d001      	beq.n	8002538 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 8002534:	f7fe fde4 	bl	8001100 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002538:	4b05      	ldr	r3, [pc, #20]	; (8002550 <MX_USART2_UART_Init+0x9c>)
 800253a:	0018      	movs	r0, r3
 800253c:	f004 f98a 	bl	8006854 <HAL_UARTEx_DisableFifoMode>
 8002540:	1e03      	subs	r3, r0, #0
 8002542:	d001      	beq.n	8002548 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 8002544:	f7fe fddc 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002548:	46c0      	nop			; (mov r8, r8)
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	20000354 	.word	0x20000354
 8002554:	40004400 	.word	0x40004400

08002558 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800255c:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <MX_USART4_UART_Init+0x68>)
 800255e:	4a19      	ldr	r2, [pc, #100]	; (80025c4 <MX_USART4_UART_Init+0x6c>)
 8002560:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 128000;
 8002562:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <MX_USART4_UART_Init+0x68>)
 8002564:	22fa      	movs	r2, #250	; 0xfa
 8002566:	0252      	lsls	r2, r2, #9
 8002568:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800256a:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <MX_USART4_UART_Init+0x68>)
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002570:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <MX_USART4_UART_Init+0x68>)
 8002572:	2200      	movs	r2, #0
 8002574:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002576:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <MX_USART4_UART_Init+0x68>)
 8002578:	2200      	movs	r2, #0
 800257a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800257c:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <MX_USART4_UART_Init+0x68>)
 800257e:	220c      	movs	r2, #12
 8002580:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002582:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <MX_USART4_UART_Init+0x68>)
 8002584:	2200      	movs	r2, #0
 8002586:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002588:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <MX_USART4_UART_Init+0x68>)
 800258a:	2200      	movs	r2, #0
 800258c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800258e:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <MX_USART4_UART_Init+0x68>)
 8002590:	2200      	movs	r2, #0
 8002592:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002594:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <MX_USART4_UART_Init+0x68>)
 8002596:	2200      	movs	r2, #0
 8002598:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800259a:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <MX_USART4_UART_Init+0x68>)
 800259c:	2208      	movs	r2, #8
 800259e:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80025a0:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <MX_USART4_UART_Init+0x68>)
 80025a2:	2280      	movs	r2, #128	; 0x80
 80025a4:	0212      	lsls	r2, r2, #8
 80025a6:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <MX_USART4_UART_Init+0x68>)
 80025aa:	0018      	movs	r0, r3
 80025ac:	f003 f8ee 	bl	800578c <HAL_UART_Init>
 80025b0:	1e03      	subs	r3, r0, #0
 80025b2:	d001      	beq.n	80025b8 <MX_USART4_UART_Init+0x60>
  {
    Error_Handler();
 80025b4:	f7fe fda4 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80025b8:	46c0      	nop			; (mov r8, r8)
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	200003e8 	.word	0x200003e8
 80025c4:	40004c00 	.word	0x40004c00

080025c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b093      	sub	sp, #76	; 0x4c
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d0:	2334      	movs	r3, #52	; 0x34
 80025d2:	18fb      	adds	r3, r7, r3
 80025d4:	0018      	movs	r0, r3
 80025d6:	2314      	movs	r3, #20
 80025d8:	001a      	movs	r2, r3
 80025da:	2100      	movs	r1, #0
 80025dc:	f006 feae 	bl	800933c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025e0:	2418      	movs	r4, #24
 80025e2:	193b      	adds	r3, r7, r4
 80025e4:	0018      	movs	r0, r3
 80025e6:	231c      	movs	r3, #28
 80025e8:	001a      	movs	r2, r3
 80025ea:	2100      	movs	r1, #0
 80025ec:	f006 fea6 	bl	800933c <memset>
  if(uartHandle->Instance==USART2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a6b      	ldr	r2, [pc, #428]	; (80027a4 <HAL_UART_MspInit+0x1dc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d13e      	bne.n	8002678 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025fa:	193b      	adds	r3, r7, r4
 80025fc:	2202      	movs	r2, #2
 80025fe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002600:	193b      	adds	r3, r7, r4
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002606:	193b      	adds	r3, r7, r4
 8002608:	0018      	movs	r0, r3
 800260a:	f001 fb45 	bl	8003c98 <HAL_RCCEx_PeriphCLKConfig>
 800260e:	1e03      	subs	r3, r0, #0
 8002610:	d001      	beq.n	8002616 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002612:	f7fe fd75 	bl	8001100 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002616:	4b64      	ldr	r3, [pc, #400]	; (80027a8 <HAL_UART_MspInit+0x1e0>)
 8002618:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800261a:	4b63      	ldr	r3, [pc, #396]	; (80027a8 <HAL_UART_MspInit+0x1e0>)
 800261c:	2180      	movs	r1, #128	; 0x80
 800261e:	0289      	lsls	r1, r1, #10
 8002620:	430a      	orrs	r2, r1
 8002622:	63da      	str	r2, [r3, #60]	; 0x3c
 8002624:	4b60      	ldr	r3, [pc, #384]	; (80027a8 <HAL_UART_MspInit+0x1e0>)
 8002626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002628:	2380      	movs	r3, #128	; 0x80
 800262a:	029b      	lsls	r3, r3, #10
 800262c:	4013      	ands	r3, r2
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002632:	4b5d      	ldr	r3, [pc, #372]	; (80027a8 <HAL_UART_MspInit+0x1e0>)
 8002634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002636:	4b5c      	ldr	r3, [pc, #368]	; (80027a8 <HAL_UART_MspInit+0x1e0>)
 8002638:	2108      	movs	r1, #8
 800263a:	430a      	orrs	r2, r1
 800263c:	635a      	str	r2, [r3, #52]	; 0x34
 800263e:	4b5a      	ldr	r3, [pc, #360]	; (80027a8 <HAL_UART_MspInit+0x1e0>)
 8002640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002642:	2208      	movs	r2, #8
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
 800264a:	2134      	movs	r1, #52	; 0x34
 800264c:	187b      	adds	r3, r7, r1
 800264e:	2260      	movs	r2, #96	; 0x60
 8002650:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	187b      	adds	r3, r7, r1
 8002654:	2202      	movs	r2, #2
 8002656:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	187b      	adds	r3, r7, r1
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	187b      	adds	r3, r7, r1
 8002660:	2200      	movs	r2, #0
 8002662:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8002664:	187b      	adds	r3, r7, r1
 8002666:	2200      	movs	r2, #0
 8002668:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800266a:	187b      	adds	r3, r7, r1
 800266c:	4a4f      	ldr	r2, [pc, #316]	; (80027ac <HAL_UART_MspInit+0x1e4>)
 800266e:	0019      	movs	r1, r3
 8002670:	0010      	movs	r0, r2
 8002672:	f000 fc13 	bl	8002e9c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8002676:	e091      	b.n	800279c <HAL_UART_MspInit+0x1d4>
  else if(uartHandle->Instance==USART4)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a4c      	ldr	r2, [pc, #304]	; (80027b0 <HAL_UART_MspInit+0x1e8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d000      	beq.n	8002684 <HAL_UART_MspInit+0xbc>
 8002682:	e08b      	b.n	800279c <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART4_CLK_ENABLE();
 8002684:	4b48      	ldr	r3, [pc, #288]	; (80027a8 <HAL_UART_MspInit+0x1e0>)
 8002686:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002688:	4b47      	ldr	r3, [pc, #284]	; (80027a8 <HAL_UART_MspInit+0x1e0>)
 800268a:	2180      	movs	r1, #128	; 0x80
 800268c:	0309      	lsls	r1, r1, #12
 800268e:	430a      	orrs	r2, r1
 8002690:	63da      	str	r2, [r3, #60]	; 0x3c
 8002692:	4b45      	ldr	r3, [pc, #276]	; (80027a8 <HAL_UART_MspInit+0x1e0>)
 8002694:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	031b      	lsls	r3, r3, #12
 800269a:	4013      	ands	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a0:	4b41      	ldr	r3, [pc, #260]	; (80027a8 <HAL_UART_MspInit+0x1e0>)
 80026a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026a4:	4b40      	ldr	r3, [pc, #256]	; (80027a8 <HAL_UART_MspInit+0x1e0>)
 80026a6:	2101      	movs	r1, #1
 80026a8:	430a      	orrs	r2, r1
 80026aa:	635a      	str	r2, [r3, #52]	; 0x34
 80026ac:	4b3e      	ldr	r3, [pc, #248]	; (80027a8 <HAL_UART_MspInit+0x1e0>)
 80026ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b0:	2201      	movs	r2, #1
 80026b2:	4013      	ands	r3, r2
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026b8:	2134      	movs	r1, #52	; 0x34
 80026ba:	187b      	adds	r3, r7, r1
 80026bc:	2203      	movs	r2, #3
 80026be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	187b      	adds	r3, r7, r1
 80026c2:	2202      	movs	r2, #2
 80026c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	187b      	adds	r3, r7, r1
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026cc:	187b      	adds	r3, r7, r1
 80026ce:	2200      	movs	r2, #0
 80026d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 80026d2:	187b      	adds	r3, r7, r1
 80026d4:	2204      	movs	r2, #4
 80026d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d8:	187a      	adds	r2, r7, r1
 80026da:	23a0      	movs	r3, #160	; 0xa0
 80026dc:	05db      	lsls	r3, r3, #23
 80026de:	0011      	movs	r1, r2
 80026e0:	0018      	movs	r0, r3
 80026e2:	f000 fbdb 	bl	8002e9c <HAL_GPIO_Init>
    hdma_usart4_tx.Instance = DMA1_Channel1;
 80026e6:	4b33      	ldr	r3, [pc, #204]	; (80027b4 <HAL_UART_MspInit+0x1ec>)
 80026e8:	4a33      	ldr	r2, [pc, #204]	; (80027b8 <HAL_UART_MspInit+0x1f0>)
 80026ea:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_USART4_TX;
 80026ec:	4b31      	ldr	r3, [pc, #196]	; (80027b4 <HAL_UART_MspInit+0x1ec>)
 80026ee:	2239      	movs	r2, #57	; 0x39
 80026f0:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026f2:	4b30      	ldr	r3, [pc, #192]	; (80027b4 <HAL_UART_MspInit+0x1ec>)
 80026f4:	2210      	movs	r2, #16
 80026f6:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f8:	4b2e      	ldr	r3, [pc, #184]	; (80027b4 <HAL_UART_MspInit+0x1ec>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026fe:	4b2d      	ldr	r3, [pc, #180]	; (80027b4 <HAL_UART_MspInit+0x1ec>)
 8002700:	2280      	movs	r2, #128	; 0x80
 8002702:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002704:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <HAL_UART_MspInit+0x1ec>)
 8002706:	2200      	movs	r2, #0
 8002708:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800270a:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <HAL_UART_MspInit+0x1ec>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8002710:	4b28      	ldr	r3, [pc, #160]	; (80027b4 <HAL_UART_MspInit+0x1ec>)
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002716:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_UART_MspInit+0x1ec>)
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800271c:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <HAL_UART_MspInit+0x1ec>)
 800271e:	0018      	movs	r0, r3
 8002720:	f000 f964 	bl	80029ec <HAL_DMA_Init>
 8002724:	1e03      	subs	r3, r0, #0
 8002726:	d001      	beq.n	800272c <HAL_UART_MspInit+0x164>
      Error_Handler();
 8002728:	f7fe fcea 	bl	8001100 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a21      	ldr	r2, [pc, #132]	; (80027b4 <HAL_UART_MspInit+0x1ec>)
 8002730:	67da      	str	r2, [r3, #124]	; 0x7c
 8002732:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <HAL_UART_MspInit+0x1ec>)
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart4_rx.Instance = DMA1_Channel2;
 8002738:	4b20      	ldr	r3, [pc, #128]	; (80027bc <HAL_UART_MspInit+0x1f4>)
 800273a:	4a21      	ldr	r2, [pc, #132]	; (80027c0 <HAL_UART_MspInit+0x1f8>)
 800273c:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_USART4_RX;
 800273e:	4b1f      	ldr	r3, [pc, #124]	; (80027bc <HAL_UART_MspInit+0x1f4>)
 8002740:	2238      	movs	r2, #56	; 0x38
 8002742:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002744:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <HAL_UART_MspInit+0x1f4>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800274a:	4b1c      	ldr	r3, [pc, #112]	; (80027bc <HAL_UART_MspInit+0x1f4>)
 800274c:	2200      	movs	r2, #0
 800274e:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002750:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <HAL_UART_MspInit+0x1f4>)
 8002752:	2280      	movs	r2, #128	; 0x80
 8002754:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002756:	4b19      	ldr	r3, [pc, #100]	; (80027bc <HAL_UART_MspInit+0x1f4>)
 8002758:	2200      	movs	r2, #0
 800275a:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800275c:	4b17      	ldr	r3, [pc, #92]	; (80027bc <HAL_UART_MspInit+0x1f4>)
 800275e:	2200      	movs	r2, #0
 8002760:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 8002762:	4b16      	ldr	r3, [pc, #88]	; (80027bc <HAL_UART_MspInit+0x1f4>)
 8002764:	2200      	movs	r2, #0
 8002766:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002768:	4b14      	ldr	r3, [pc, #80]	; (80027bc <HAL_UART_MspInit+0x1f4>)
 800276a:	2200      	movs	r2, #0
 800276c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800276e:	4b13      	ldr	r3, [pc, #76]	; (80027bc <HAL_UART_MspInit+0x1f4>)
 8002770:	0018      	movs	r0, r3
 8002772:	f000 f93b 	bl	80029ec <HAL_DMA_Init>
 8002776:	1e03      	subs	r3, r0, #0
 8002778:	d001      	beq.n	800277e <HAL_UART_MspInit+0x1b6>
      Error_Handler();
 800277a:	f7fe fcc1 	bl	8001100 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2180      	movs	r1, #128	; 0x80
 8002782:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <HAL_UART_MspInit+0x1f4>)
 8002784:	505a      	str	r2, [r3, r1]
 8002786:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <HAL_UART_MspInit+0x1f4>)
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 800278c:	2200      	movs	r2, #0
 800278e:	2103      	movs	r1, #3
 8002790:	201d      	movs	r0, #29
 8002792:	f000 f905 	bl	80029a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8002796:	201d      	movs	r0, #29
 8002798:	f000 f917 	bl	80029ca <HAL_NVIC_EnableIRQ>
}
 800279c:	46c0      	nop			; (mov r8, r8)
 800279e:	46bd      	mov	sp, r7
 80027a0:	b013      	add	sp, #76	; 0x4c
 80027a2:	bd90      	pop	{r4, r7, pc}
 80027a4:	40004400 	.word	0x40004400
 80027a8:	40021000 	.word	0x40021000
 80027ac:	50000c00 	.word	0x50000c00
 80027b0:	40004c00 	.word	0x40004c00
 80027b4:	2000047c 	.word	0x2000047c
 80027b8:	40020008 	.word	0x40020008
 80027bc:	200004d8 	.word	0x200004d8
 80027c0:	4002001c 	.word	0x4002001c

080027c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027c4:	480d      	ldr	r0, [pc, #52]	; (80027fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027c8:	f7ff f944 	bl	8001a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027cc:	480c      	ldr	r0, [pc, #48]	; (8002800 <LoopForever+0x6>)
  ldr r1, =_edata
 80027ce:	490d      	ldr	r1, [pc, #52]	; (8002804 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027d0:	4a0d      	ldr	r2, [pc, #52]	; (8002808 <LoopForever+0xe>)
  movs r3, #0
 80027d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027d4:	e002      	b.n	80027dc <LoopCopyDataInit>

080027d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027da:	3304      	adds	r3, #4

080027dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e0:	d3f9      	bcc.n	80027d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027e2:	4a0a      	ldr	r2, [pc, #40]	; (800280c <LoopForever+0x12>)
  ldr r4, =_ebss
 80027e4:	4c0a      	ldr	r4, [pc, #40]	; (8002810 <LoopForever+0x16>)
  movs r3, #0
 80027e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027e8:	e001      	b.n	80027ee <LoopFillZerobss>

080027ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027ec:	3204      	adds	r2, #4

080027ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f0:	d3fb      	bcc.n	80027ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80027f2:	f006 fdff 	bl	80093f4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80027f6:	f7fe fb57 	bl	8000ea8 <main>

080027fa <LoopForever>:

LoopForever:
  b LoopForever
 80027fa:	e7fe      	b.n	80027fa <LoopForever>
  ldr   r0, =_estack
 80027fc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002804:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002808:	0800a2e4 	.word	0x0800a2e4
  ldr r2, =_sbss
 800280c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002810:	20004a30 	.word	0x20004a30

08002814 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002814:	e7fe      	b.n	8002814 <ADC1_IRQHandler>
	...

08002818 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800281e:	1dfb      	adds	r3, r7, #7
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HAL_Init+0x3c>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_Init+0x3c>)
 800282a:	2180      	movs	r1, #128	; 0x80
 800282c:	0049      	lsls	r1, r1, #1
 800282e:	430a      	orrs	r2, r1
 8002830:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002832:	2003      	movs	r0, #3
 8002834:	f7fe ffac 	bl	8001790 <HAL_InitTick>
 8002838:	1e03      	subs	r3, r0, #0
 800283a:	d003      	beq.n	8002844 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800283c:	1dfb      	adds	r3, r7, #7
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]
 8002842:	e001      	b.n	8002848 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002844:	f7fe ff7a 	bl	800173c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002848:	1dfb      	adds	r3, r7, #7
 800284a:	781b      	ldrb	r3, [r3, #0]
}
 800284c:	0018      	movs	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	b002      	add	sp, #8
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40022000 	.word	0x40022000

08002858 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_IncTick+0x1c>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	001a      	movs	r2, r3
 8002862:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_IncTick+0x20>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	18d2      	adds	r2, r2, r3
 8002868:	4b03      	ldr	r3, [pc, #12]	; (8002878 <HAL_IncTick+0x20>)
 800286a:	601a      	str	r2, [r3, #0]
}
 800286c:	46c0      	nop			; (mov r8, r8)
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	20000030 	.word	0x20000030
 8002878:	20000534 	.word	0x20000534

0800287c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  return uwTick;
 8002880:	4b02      	ldr	r3, [pc, #8]	; (800288c <HAL_GetTick+0x10>)
 8002882:	681b      	ldr	r3, [r3, #0]
}
 8002884:	0018      	movs	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	20000534 	.word	0x20000534

08002890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	0002      	movs	r2, r0
 8002898:	1dfb      	adds	r3, r7, #7
 800289a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800289c:	1dfb      	adds	r3, r7, #7
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b7f      	cmp	r3, #127	; 0x7f
 80028a2:	d809      	bhi.n	80028b8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028a4:	1dfb      	adds	r3, r7, #7
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	001a      	movs	r2, r3
 80028aa:	231f      	movs	r3, #31
 80028ac:	401a      	ands	r2, r3
 80028ae:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <__NVIC_EnableIRQ+0x30>)
 80028b0:	2101      	movs	r1, #1
 80028b2:	4091      	lsls	r1, r2
 80028b4:	000a      	movs	r2, r1
 80028b6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80028b8:	46c0      	nop			; (mov r8, r8)
 80028ba:	46bd      	mov	sp, r7
 80028bc:	b002      	add	sp, #8
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	e000e100 	.word	0xe000e100

080028c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	0002      	movs	r2, r0
 80028cc:	6039      	str	r1, [r7, #0]
 80028ce:	1dfb      	adds	r3, r7, #7
 80028d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028d2:	1dfb      	adds	r3, r7, #7
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b7f      	cmp	r3, #127	; 0x7f
 80028d8:	d828      	bhi.n	800292c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028da:	4a2f      	ldr	r2, [pc, #188]	; (8002998 <__NVIC_SetPriority+0xd4>)
 80028dc:	1dfb      	adds	r3, r7, #7
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	b25b      	sxtb	r3, r3
 80028e2:	089b      	lsrs	r3, r3, #2
 80028e4:	33c0      	adds	r3, #192	; 0xc0
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	589b      	ldr	r3, [r3, r2]
 80028ea:	1dfa      	adds	r2, r7, #7
 80028ec:	7812      	ldrb	r2, [r2, #0]
 80028ee:	0011      	movs	r1, r2
 80028f0:	2203      	movs	r2, #3
 80028f2:	400a      	ands	r2, r1
 80028f4:	00d2      	lsls	r2, r2, #3
 80028f6:	21ff      	movs	r1, #255	; 0xff
 80028f8:	4091      	lsls	r1, r2
 80028fa:	000a      	movs	r2, r1
 80028fc:	43d2      	mvns	r2, r2
 80028fe:	401a      	ands	r2, r3
 8002900:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	019b      	lsls	r3, r3, #6
 8002906:	22ff      	movs	r2, #255	; 0xff
 8002908:	401a      	ands	r2, r3
 800290a:	1dfb      	adds	r3, r7, #7
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	0018      	movs	r0, r3
 8002910:	2303      	movs	r3, #3
 8002912:	4003      	ands	r3, r0
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002918:	481f      	ldr	r0, [pc, #124]	; (8002998 <__NVIC_SetPriority+0xd4>)
 800291a:	1dfb      	adds	r3, r7, #7
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	b25b      	sxtb	r3, r3
 8002920:	089b      	lsrs	r3, r3, #2
 8002922:	430a      	orrs	r2, r1
 8002924:	33c0      	adds	r3, #192	; 0xc0
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800292a:	e031      	b.n	8002990 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800292c:	4a1b      	ldr	r2, [pc, #108]	; (800299c <__NVIC_SetPriority+0xd8>)
 800292e:	1dfb      	adds	r3, r7, #7
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	0019      	movs	r1, r3
 8002934:	230f      	movs	r3, #15
 8002936:	400b      	ands	r3, r1
 8002938:	3b08      	subs	r3, #8
 800293a:	089b      	lsrs	r3, r3, #2
 800293c:	3306      	adds	r3, #6
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	18d3      	adds	r3, r2, r3
 8002942:	3304      	adds	r3, #4
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	1dfa      	adds	r2, r7, #7
 8002948:	7812      	ldrb	r2, [r2, #0]
 800294a:	0011      	movs	r1, r2
 800294c:	2203      	movs	r2, #3
 800294e:	400a      	ands	r2, r1
 8002950:	00d2      	lsls	r2, r2, #3
 8002952:	21ff      	movs	r1, #255	; 0xff
 8002954:	4091      	lsls	r1, r2
 8002956:	000a      	movs	r2, r1
 8002958:	43d2      	mvns	r2, r2
 800295a:	401a      	ands	r2, r3
 800295c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	019b      	lsls	r3, r3, #6
 8002962:	22ff      	movs	r2, #255	; 0xff
 8002964:	401a      	ands	r2, r3
 8002966:	1dfb      	adds	r3, r7, #7
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	0018      	movs	r0, r3
 800296c:	2303      	movs	r3, #3
 800296e:	4003      	ands	r3, r0
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002974:	4809      	ldr	r0, [pc, #36]	; (800299c <__NVIC_SetPriority+0xd8>)
 8002976:	1dfb      	adds	r3, r7, #7
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	001c      	movs	r4, r3
 800297c:	230f      	movs	r3, #15
 800297e:	4023      	ands	r3, r4
 8002980:	3b08      	subs	r3, #8
 8002982:	089b      	lsrs	r3, r3, #2
 8002984:	430a      	orrs	r2, r1
 8002986:	3306      	adds	r3, #6
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	18c3      	adds	r3, r0, r3
 800298c:	3304      	adds	r3, #4
 800298e:	601a      	str	r2, [r3, #0]
}
 8002990:	46c0      	nop			; (mov r8, r8)
 8002992:	46bd      	mov	sp, r7
 8002994:	b003      	add	sp, #12
 8002996:	bd90      	pop	{r4, r7, pc}
 8002998:	e000e100 	.word	0xe000e100
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
 80029aa:	210f      	movs	r1, #15
 80029ac:	187b      	adds	r3, r7, r1
 80029ae:	1c02      	adds	r2, r0, #0
 80029b0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	187b      	adds	r3, r7, r1
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	b25b      	sxtb	r3, r3
 80029ba:	0011      	movs	r1, r2
 80029bc:	0018      	movs	r0, r3
 80029be:	f7ff ff81 	bl	80028c4 <__NVIC_SetPriority>
}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	46bd      	mov	sp, r7
 80029c6:	b004      	add	sp, #16
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	0002      	movs	r2, r0
 80029d2:	1dfb      	adds	r3, r7, #7
 80029d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d6:	1dfb      	adds	r3, r7, #7
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	b25b      	sxtb	r3, r3
 80029dc:	0018      	movs	r0, r3
 80029de:	f7ff ff57 	bl	8002890 <__NVIC_EnableIRQ>
}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b002      	add	sp, #8
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e077      	b.n	8002aee <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a3d      	ldr	r2, [pc, #244]	; (8002af8 <HAL_DMA_Init+0x10c>)
 8002a04:	4694      	mov	ip, r2
 8002a06:	4463      	add	r3, ip
 8002a08:	2114      	movs	r1, #20
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f7fd fb86 	bl	800011c <__udivsi3>
 8002a10:	0003      	movs	r3, r0
 8002a12:	009a      	lsls	r2, r3, #2
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2225      	movs	r2, #37	; 0x25
 8002a1c:	2102      	movs	r1, #2
 8002a1e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4934      	ldr	r1, [pc, #208]	; (8002afc <HAL_DMA_Init+0x110>)
 8002a2c:	400a      	ands	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6819      	ldr	r1, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f000 f9c7 	bl	8002dfc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	01db      	lsls	r3, r3, #7
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d102      	bne.n	8002a80 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a88:	213f      	movs	r1, #63	; 0x3f
 8002a8a:	400a      	ands	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a96:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d011      	beq.n	8002ac4 <HAL_DMA_Init+0xd8>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d80d      	bhi.n	8002ac4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f000 f9d2 	bl	8002e54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	e008      	b.n	8002ad6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2225      	movs	r2, #37	; 0x25
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2224      	movs	r2, #36	; 0x24
 8002ae8:	2100      	movs	r1, #0
 8002aea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	0018      	movs	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b002      	add	sp, #8
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	bffdfff8 	.word	0xbffdfff8
 8002afc:	ffff800f 	.word	0xffff800f

08002b00 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e050      	b.n	8002bb4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2225      	movs	r2, #37	; 0x25
 8002b16:	5c9b      	ldrb	r3, [r3, r2]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d008      	beq.n	8002b30 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2204      	movs	r2, #4
 8002b22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2224      	movs	r2, #36	; 0x24
 8002b28:	2100      	movs	r1, #0
 8002b2a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e041      	b.n	8002bb4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	210e      	movs	r1, #14
 8002b3c:	438a      	bics	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	491c      	ldr	r1, [pc, #112]	; (8002bbc <HAL_DMA_Abort+0xbc>)
 8002b4c:	400a      	ands	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	438a      	bics	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002b60:	4b17      	ldr	r3, [pc, #92]	; (8002bc0 <HAL_DMA_Abort+0xc0>)
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	221c      	movs	r2, #28
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <HAL_DMA_Abort+0xc0>)
 8002b72:	430a      	orrs	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002b7e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00c      	beq.n	8002ba2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b92:	490a      	ldr	r1, [pc, #40]	; (8002bbc <HAL_DMA_Abort+0xbc>)
 8002b94:	400a      	ands	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002ba0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2225      	movs	r2, #37	; 0x25
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2224      	movs	r2, #36	; 0x24
 8002bae:	2100      	movs	r1, #0
 8002bb0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b002      	add	sp, #8
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	fffffeff 	.word	0xfffffeff
 8002bc0:	40020000 	.word	0x40020000

08002bc4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bcc:	210f      	movs	r1, #15
 8002bce:	187b      	adds	r3, r7, r1
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2225      	movs	r2, #37	; 0x25
 8002bd8:	5c9b      	ldrb	r3, [r3, r2]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d006      	beq.n	8002bee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2204      	movs	r2, #4
 8002be4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002be6:	187b      	adds	r3, r7, r1
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]
 8002bec:	e049      	b.n	8002c82 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	210e      	movs	r1, #14
 8002bfa:	438a      	bics	r2, r1
 8002bfc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2101      	movs	r1, #1
 8002c0a:	438a      	bics	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c18:	491d      	ldr	r1, [pc, #116]	; (8002c90 <HAL_DMA_Abort_IT+0xcc>)
 8002c1a:	400a      	ands	r2, r1
 8002c1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <HAL_DMA_Abort_IT+0xd0>)
 8002c20:	6859      	ldr	r1, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	221c      	movs	r2, #28
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	409a      	lsls	r2, r3
 8002c2e:	4b19      	ldr	r3, [pc, #100]	; (8002c94 <HAL_DMA_Abort_IT+0xd0>)
 8002c30:	430a      	orrs	r2, r1
 8002c32:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002c3c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00c      	beq.n	8002c60 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c50:	490f      	ldr	r1, [pc, #60]	; (8002c90 <HAL_DMA_Abort_IT+0xcc>)
 8002c52:	400a      	ands	r2, r1
 8002c54:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002c5e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2225      	movs	r2, #37	; 0x25
 8002c64:	2101      	movs	r1, #1
 8002c66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2224      	movs	r2, #36	; 0x24
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d004      	beq.n	8002c82 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	0010      	movs	r0, r2
 8002c80:	4798      	blx	r3
    }
  }
  return status;
 8002c82:	230f      	movs	r3, #15
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	781b      	ldrb	r3, [r3, #0]
}
 8002c88:	0018      	movs	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b004      	add	sp, #16
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	fffffeff 	.word	0xfffffeff
 8002c94:	40020000 	.word	0x40020000

08002c98 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002ca0:	4b55      	ldr	r3, [pc, #340]	; (8002df8 <HAL_DMA_IRQHandler+0x160>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	221c      	movs	r2, #28
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2204      	movs	r2, #4
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	0013      	movs	r3, r2
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d027      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x7a>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2204      	movs	r2, #4
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d023      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d107      	bne.n	8002ce6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2104      	movs	r1, #4
 8002ce2:	438a      	bics	r2, r1
 8002ce4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002ce6:	4b44      	ldr	r3, [pc, #272]	; (8002df8 <HAL_DMA_IRQHandler+0x160>)
 8002ce8:	6859      	ldr	r1, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	221c      	movs	r2, #28
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2204      	movs	r2, #4
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	4b40      	ldr	r3, [pc, #256]	; (8002df8 <HAL_DMA_IRQHandler+0x160>)
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d100      	bne.n	8002d06 <HAL_DMA_IRQHandler+0x6e>
 8002d04:	e073      	b.n	8002dee <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	0010      	movs	r0, r2
 8002d0e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002d10:	e06d      	b.n	8002dee <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	221c      	movs	r2, #28
 8002d18:	4013      	ands	r3, r2
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	0013      	movs	r3, r2
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4013      	ands	r3, r2
 8002d24:	d02e      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xec>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2202      	movs	r2, #2
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d02a      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2220      	movs	r2, #32
 8002d36:	4013      	ands	r3, r2
 8002d38:	d10b      	bne.n	8002d52 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	210a      	movs	r1, #10
 8002d46:	438a      	bics	r2, r1
 8002d48:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2225      	movs	r2, #37	; 0x25
 8002d4e:	2101      	movs	r1, #1
 8002d50:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002d52:	4b29      	ldr	r3, [pc, #164]	; (8002df8 <HAL_DMA_IRQHandler+0x160>)
 8002d54:	6859      	ldr	r1, [r3, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	221c      	movs	r2, #28
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2202      	movs	r2, #2
 8002d60:	409a      	lsls	r2, r3
 8002d62:	4b25      	ldr	r3, [pc, #148]	; (8002df8 <HAL_DMA_IRQHandler+0x160>)
 8002d64:	430a      	orrs	r2, r1
 8002d66:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2224      	movs	r2, #36	; 0x24
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d03a      	beq.n	8002dee <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	0010      	movs	r0, r2
 8002d80:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002d82:	e034      	b.n	8002dee <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	221c      	movs	r2, #28
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2208      	movs	r2, #8
 8002d8e:	409a      	lsls	r2, r3
 8002d90:	0013      	movs	r3, r2
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4013      	ands	r3, r2
 8002d96:	d02b      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x158>
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2208      	movs	r2, #8
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d027      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	210e      	movs	r1, #14
 8002dac:	438a      	bics	r2, r1
 8002dae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002db0:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <HAL_DMA_IRQHandler+0x160>)
 8002db2:	6859      	ldr	r1, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	221c      	movs	r2, #28
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <HAL_DMA_IRQHandler+0x160>)
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2225      	movs	r2, #37	; 0x25
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2224      	movs	r2, #36	; 0x24
 8002dd8:	2100      	movs	r1, #0
 8002dda:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	0010      	movs	r0, r2
 8002dec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	46c0      	nop			; (mov r8, r8)
}
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b004      	add	sp, #16
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40020000 	.word	0x40020000

08002dfc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	089b      	lsrs	r3, r3, #2
 8002e0a:	4a10      	ldr	r2, [pc, #64]	; (8002e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002e0c:	4694      	mov	ip, r2
 8002e0e:	4463      	add	r3, ip
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	001a      	movs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	001a      	movs	r2, r3
 8002e1e:	23ff      	movs	r3, #255	; 0xff
 8002e20:	4013      	ands	r3, r2
 8002e22:	3b08      	subs	r3, #8
 8002e24:	2114      	movs	r1, #20
 8002e26:	0018      	movs	r0, r3
 8002e28:	f7fd f978 	bl	800011c <__udivsi3>
 8002e2c:	0003      	movs	r3, r0
 8002e2e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a07      	ldr	r2, [pc, #28]	; (8002e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002e34:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	221f      	movs	r2, #31
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	409a      	lsls	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002e44:	46c0      	nop			; (mov r8, r8)
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b004      	add	sp, #16
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	10008200 	.word	0x10008200
 8002e50:	40020880 	.word	0x40020880

08002e54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	223f      	movs	r2, #63	; 0x3f
 8002e62:	4013      	ands	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002e6a:	4694      	mov	ip, r2
 8002e6c:	4463      	add	r3, ip
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	001a      	movs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a07      	ldr	r2, [pc, #28]	; (8002e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	2203      	movs	r2, #3
 8002e82:	4013      	ands	r3, r2
 8002e84:	2201      	movs	r2, #1
 8002e86:	409a      	lsls	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002e8c:	46c0      	nop			; (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b004      	add	sp, #16
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	1000823f 	.word	0x1000823f
 8002e98:	40020940 	.word	0x40020940

08002e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eaa:	e147      	b.n	800313c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4091      	lsls	r1, r2
 8002eb6:	000a      	movs	r2, r1
 8002eb8:	4013      	ands	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d100      	bne.n	8002ec4 <HAL_GPIO_Init+0x28>
 8002ec2:	e138      	b.n	8003136 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2203      	movs	r2, #3
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d005      	beq.n	8002edc <HAL_GPIO_Init+0x40>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d130      	bne.n	8002f3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	0013      	movs	r3, r2
 8002eec:	43da      	mvns	r2, r3
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	409a      	lsls	r2, r3
 8002efe:	0013      	movs	r3, r2
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f12:	2201      	movs	r2, #1
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	409a      	lsls	r2, r3
 8002f18:	0013      	movs	r3, r2
 8002f1a:	43da      	mvns	r2, r3
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	091b      	lsrs	r3, r3, #4
 8002f28:	2201      	movs	r2, #1
 8002f2a:	401a      	ands	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	0013      	movs	r3, r2
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2203      	movs	r2, #3
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b03      	cmp	r3, #3
 8002f48:	d017      	beq.n	8002f7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	2203      	movs	r2, #3
 8002f56:	409a      	lsls	r2, r3
 8002f58:	0013      	movs	r3, r2
 8002f5a:	43da      	mvns	r2, r3
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	0013      	movs	r3, r2
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2203      	movs	r2, #3
 8002f80:	4013      	ands	r3, r2
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d123      	bne.n	8002fce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	08da      	lsrs	r2, r3, #3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3208      	adds	r2, #8
 8002f8e:	0092      	lsls	r2, r2, #2
 8002f90:	58d3      	ldr	r3, [r2, r3]
 8002f92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2207      	movs	r2, #7
 8002f98:	4013      	ands	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	220f      	movs	r2, #15
 8002f9e:	409a      	lsls	r2, r3
 8002fa0:	0013      	movs	r3, r2
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2107      	movs	r1, #7
 8002fb2:	400b      	ands	r3, r1
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	0013      	movs	r3, r2
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	08da      	lsrs	r2, r3, #3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3208      	adds	r2, #8
 8002fc8:	0092      	lsls	r2, r2, #2
 8002fca:	6939      	ldr	r1, [r7, #16]
 8002fcc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	2203      	movs	r2, #3
 8002fda:	409a      	lsls	r2, r3
 8002fdc:	0013      	movs	r3, r2
 8002fde:	43da      	mvns	r2, r3
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2203      	movs	r2, #3
 8002fec:	401a      	ands	r2, r3
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	0013      	movs	r3, r2
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	23c0      	movs	r3, #192	; 0xc0
 8003008:	029b      	lsls	r3, r3, #10
 800300a:	4013      	ands	r3, r2
 800300c:	d100      	bne.n	8003010 <HAL_GPIO_Init+0x174>
 800300e:	e092      	b.n	8003136 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003010:	4a50      	ldr	r2, [pc, #320]	; (8003154 <HAL_GPIO_Init+0x2b8>)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	089b      	lsrs	r3, r3, #2
 8003016:	3318      	adds	r3, #24
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	589b      	ldr	r3, [r3, r2]
 800301c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2203      	movs	r2, #3
 8003022:	4013      	ands	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	220f      	movs	r2, #15
 8003028:	409a      	lsls	r2, r3
 800302a:	0013      	movs	r3, r2
 800302c:	43da      	mvns	r2, r3
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4013      	ands	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	23a0      	movs	r3, #160	; 0xa0
 8003038:	05db      	lsls	r3, r3, #23
 800303a:	429a      	cmp	r2, r3
 800303c:	d013      	beq.n	8003066 <HAL_GPIO_Init+0x1ca>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a45      	ldr	r2, [pc, #276]	; (8003158 <HAL_GPIO_Init+0x2bc>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00d      	beq.n	8003062 <HAL_GPIO_Init+0x1c6>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a44      	ldr	r2, [pc, #272]	; (800315c <HAL_GPIO_Init+0x2c0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d007      	beq.n	800305e <HAL_GPIO_Init+0x1c2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a43      	ldr	r2, [pc, #268]	; (8003160 <HAL_GPIO_Init+0x2c4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d101      	bne.n	800305a <HAL_GPIO_Init+0x1be>
 8003056:	2303      	movs	r3, #3
 8003058:	e006      	b.n	8003068 <HAL_GPIO_Init+0x1cc>
 800305a:	2305      	movs	r3, #5
 800305c:	e004      	b.n	8003068 <HAL_GPIO_Init+0x1cc>
 800305e:	2302      	movs	r3, #2
 8003060:	e002      	b.n	8003068 <HAL_GPIO_Init+0x1cc>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <HAL_GPIO_Init+0x1cc>
 8003066:	2300      	movs	r3, #0
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	2103      	movs	r1, #3
 800306c:	400a      	ands	r2, r1
 800306e:	00d2      	lsls	r2, r2, #3
 8003070:	4093      	lsls	r3, r2
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003078:	4936      	ldr	r1, [pc, #216]	; (8003154 <HAL_GPIO_Init+0x2b8>)
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	089b      	lsrs	r3, r3, #2
 800307e:	3318      	adds	r3, #24
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003086:	4b33      	ldr	r3, [pc, #204]	; (8003154 <HAL_GPIO_Init+0x2b8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	43da      	mvns	r2, r3
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4013      	ands	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	035b      	lsls	r3, r3, #13
 800309e:	4013      	ands	r3, r2
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030aa:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <HAL_GPIO_Init+0x2b8>)
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80030b0:	4b28      	ldr	r3, [pc, #160]	; (8003154 <HAL_GPIO_Init+0x2b8>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	43da      	mvns	r2, r3
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4013      	ands	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	039b      	lsls	r3, r3, #14
 80030c8:	4013      	ands	r3, r2
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030d4:	4b1f      	ldr	r3, [pc, #124]	; (8003154 <HAL_GPIO_Init+0x2b8>)
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030da:	4a1e      	ldr	r2, [pc, #120]	; (8003154 <HAL_GPIO_Init+0x2b8>)
 80030dc:	2384      	movs	r3, #132	; 0x84
 80030de:	58d3      	ldr	r3, [r2, r3]
 80030e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	43da      	mvns	r2, r3
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4013      	ands	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	2380      	movs	r3, #128	; 0x80
 80030f2:	029b      	lsls	r3, r3, #10
 80030f4:	4013      	ands	r3, r2
 80030f6:	d003      	beq.n	8003100 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003100:	4914      	ldr	r1, [pc, #80]	; (8003154 <HAL_GPIO_Init+0x2b8>)
 8003102:	2284      	movs	r2, #132	; 0x84
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003108:	4a12      	ldr	r2, [pc, #72]	; (8003154 <HAL_GPIO_Init+0x2b8>)
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	58d3      	ldr	r3, [r2, r3]
 800310e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	43da      	mvns	r2, r3
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4013      	ands	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	025b      	lsls	r3, r3, #9
 8003122:	4013      	ands	r3, r2
 8003124:	d003      	beq.n	800312e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800312e:	4909      	ldr	r1, [pc, #36]	; (8003154 <HAL_GPIO_Init+0x2b8>)
 8003130:	2280      	movs	r2, #128	; 0x80
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	3301      	adds	r3, #1
 800313a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	40da      	lsrs	r2, r3
 8003144:	1e13      	subs	r3, r2, #0
 8003146:	d000      	beq.n	800314a <HAL_GPIO_Init+0x2ae>
 8003148:	e6b0      	b.n	8002eac <HAL_GPIO_Init+0x10>
  }
}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	46c0      	nop			; (mov r8, r8)
 800314e:	46bd      	mov	sp, r7
 8003150:	b006      	add	sp, #24
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40021800 	.word	0x40021800
 8003158:	50000400 	.word	0x50000400
 800315c:	50000800 	.word	0x50000800
 8003160:	50000c00 	.word	0x50000c00

08003164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	0008      	movs	r0, r1
 800316e:	0011      	movs	r1, r2
 8003170:	1cbb      	adds	r3, r7, #2
 8003172:	1c02      	adds	r2, r0, #0
 8003174:	801a      	strh	r2, [r3, #0]
 8003176:	1c7b      	adds	r3, r7, #1
 8003178:	1c0a      	adds	r2, r1, #0
 800317a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800317c:	1c7b      	adds	r3, r7, #1
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d004      	beq.n	800318e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003184:	1cbb      	adds	r3, r7, #2
 8003186:	881a      	ldrh	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800318c:	e003      	b.n	8003196 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800318e:	1cbb      	adds	r3, r7, #2
 8003190:	881a      	ldrh	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	46bd      	mov	sp, r7
 800319a:	b002      	add	sp, #8
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	000a      	movs	r2, r1
 80031a8:	1cbb      	adds	r3, r7, #2
 80031aa:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031b2:	1cbb      	adds	r3, r7, #2
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4013      	ands	r3, r2
 80031ba:	041a      	lsls	r2, r3, #16
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	43db      	mvns	r3, r3
 80031c0:	1cb9      	adds	r1, r7, #2
 80031c2:	8809      	ldrh	r1, [r1, #0]
 80031c4:	400b      	ands	r3, r1
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	619a      	str	r2, [r3, #24]
}
 80031cc:	46c0      	nop			; (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b004      	add	sp, #16
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	0002      	movs	r2, r0
 80031dc:	1dbb      	adds	r3, r7, #6
 80031de:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80031e0:	4b10      	ldr	r3, [pc, #64]	; (8003224 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	1dba      	adds	r2, r7, #6
 80031e6:	8812      	ldrh	r2, [r2, #0]
 80031e8:	4013      	ands	r3, r2
 80031ea:	d008      	beq.n	80031fe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80031ec:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80031ee:	1dba      	adds	r2, r7, #6
 80031f0:	8812      	ldrh	r2, [r2, #0]
 80031f2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80031f4:	1dbb      	adds	r3, r7, #6
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	0018      	movs	r0, r3
 80031fa:	f7fd ff87 	bl	800110c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	1dba      	adds	r2, r7, #6
 8003204:	8812      	ldrh	r2, [r2, #0]
 8003206:	4013      	ands	r3, r2
 8003208:	d008      	beq.n	800321c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800320a:	4b06      	ldr	r3, [pc, #24]	; (8003224 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800320c:	1dba      	adds	r2, r7, #6
 800320e:	8812      	ldrh	r2, [r2, #0]
 8003210:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003212:	1dbb      	adds	r3, r7, #6
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	0018      	movs	r0, r3
 8003218:	f000 f806 	bl	8003228 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	46bd      	mov	sp, r7
 8003220:	b002      	add	sp, #8
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40021800 	.word	0x40021800

08003228 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	0002      	movs	r2, r0
 8003230:	1dbb      	adds	r3, r7, #6
 8003232:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b002      	add	sp, #8
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003244:	4b19      	ldr	r3, [pc, #100]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a19      	ldr	r2, [pc, #100]	; (80032b0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800324a:	4013      	ands	r3, r2
 800324c:	0019      	movs	r1, r3
 800324e:	4b17      	ldr	r3, [pc, #92]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	430a      	orrs	r2, r1
 8003254:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	2380      	movs	r3, #128	; 0x80
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	429a      	cmp	r2, r3
 800325e:	d11f      	bne.n	80032a0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003260:	4b14      	ldr	r3, [pc, #80]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	0013      	movs	r3, r2
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	189b      	adds	r3, r3, r2
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	4912      	ldr	r1, [pc, #72]	; (80032b8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800326e:	0018      	movs	r0, r3
 8003270:	f7fc ff54 	bl	800011c <__udivsi3>
 8003274:	0003      	movs	r3, r0
 8003276:	3301      	adds	r3, #1
 8003278:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800327a:	e008      	b.n	800328e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	3b01      	subs	r3, #1
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	e001      	b.n	800328e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e009      	b.n	80032a2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800328e:	4b07      	ldr	r3, [pc, #28]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	401a      	ands	r2, r3
 8003298:	2380      	movs	r3, #128	; 0x80
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	429a      	cmp	r2, r3
 800329e:	d0ed      	beq.n	800327c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	0018      	movs	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b004      	add	sp, #16
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	40007000 	.word	0x40007000
 80032b0:	fffff9ff 	.word	0xfffff9ff
 80032b4:	20000028 	.word	0x20000028
 80032b8:	000f4240 	.word	0x000f4240

080032bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80032c0:	4b03      	ldr	r3, [pc, #12]	; (80032d0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	23e0      	movs	r3, #224	; 0xe0
 80032c6:	01db      	lsls	r3, r3, #7
 80032c8:	4013      	ands	r3, r2
}
 80032ca:	0018      	movs	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000

080032d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e2f3      	b.n	80038ce <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2201      	movs	r2, #1
 80032ec:	4013      	ands	r3, r2
 80032ee:	d100      	bne.n	80032f2 <HAL_RCC_OscConfig+0x1e>
 80032f0:	e07c      	b.n	80033ec <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032f2:	4bc3      	ldr	r3, [pc, #780]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2238      	movs	r2, #56	; 0x38
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032fc:	4bc0      	ldr	r3, [pc, #768]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2203      	movs	r2, #3
 8003302:	4013      	ands	r3, r2
 8003304:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	2b10      	cmp	r3, #16
 800330a:	d102      	bne.n	8003312 <HAL_RCC_OscConfig+0x3e>
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2b03      	cmp	r3, #3
 8003310:	d002      	beq.n	8003318 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	2b08      	cmp	r3, #8
 8003316:	d10b      	bne.n	8003330 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003318:	4bb9      	ldr	r3, [pc, #740]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	2380      	movs	r3, #128	; 0x80
 800331e:	029b      	lsls	r3, r3, #10
 8003320:	4013      	ands	r3, r2
 8003322:	d062      	beq.n	80033ea <HAL_RCC_OscConfig+0x116>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d15e      	bne.n	80033ea <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e2ce      	b.n	80038ce <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	025b      	lsls	r3, r3, #9
 8003338:	429a      	cmp	r2, r3
 800333a:	d107      	bne.n	800334c <HAL_RCC_OscConfig+0x78>
 800333c:	4bb0      	ldr	r3, [pc, #704]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4baf      	ldr	r3, [pc, #700]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 8003342:	2180      	movs	r1, #128	; 0x80
 8003344:	0249      	lsls	r1, r1, #9
 8003346:	430a      	orrs	r2, r1
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	e020      	b.n	800338e <HAL_RCC_OscConfig+0xba>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	23a0      	movs	r3, #160	; 0xa0
 8003352:	02db      	lsls	r3, r3, #11
 8003354:	429a      	cmp	r2, r3
 8003356:	d10e      	bne.n	8003376 <HAL_RCC_OscConfig+0xa2>
 8003358:	4ba9      	ldr	r3, [pc, #676]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	4ba8      	ldr	r3, [pc, #672]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 800335e:	2180      	movs	r1, #128	; 0x80
 8003360:	02c9      	lsls	r1, r1, #11
 8003362:	430a      	orrs	r2, r1
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	4ba6      	ldr	r3, [pc, #664]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	4ba5      	ldr	r3, [pc, #660]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 800336c:	2180      	movs	r1, #128	; 0x80
 800336e:	0249      	lsls	r1, r1, #9
 8003370:	430a      	orrs	r2, r1
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	e00b      	b.n	800338e <HAL_RCC_OscConfig+0xba>
 8003376:	4ba2      	ldr	r3, [pc, #648]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	4ba1      	ldr	r3, [pc, #644]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 800337c:	49a1      	ldr	r1, [pc, #644]	; (8003604 <HAL_RCC_OscConfig+0x330>)
 800337e:	400a      	ands	r2, r1
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	4b9f      	ldr	r3, [pc, #636]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4b9e      	ldr	r3, [pc, #632]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 8003388:	499f      	ldr	r1, [pc, #636]	; (8003608 <HAL_RCC_OscConfig+0x334>)
 800338a:	400a      	ands	r2, r1
 800338c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d014      	beq.n	80033c0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003396:	f7ff fa71 	bl	800287c <HAL_GetTick>
 800339a:	0003      	movs	r3, r0
 800339c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a0:	f7ff fa6c 	bl	800287c <HAL_GetTick>
 80033a4:	0002      	movs	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	; 0x64
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e28d      	b.n	80038ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033b2:	4b93      	ldr	r3, [pc, #588]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	2380      	movs	r3, #128	; 0x80
 80033b8:	029b      	lsls	r3, r3, #10
 80033ba:	4013      	ands	r3, r2
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0xcc>
 80033be:	e015      	b.n	80033ec <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7ff fa5c 	bl	800287c <HAL_GetTick>
 80033c4:	0003      	movs	r3, r0
 80033c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ca:	f7ff fa57 	bl	800287c <HAL_GetTick>
 80033ce:	0002      	movs	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b64      	cmp	r3, #100	; 0x64
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e278      	b.n	80038ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033dc:	4b88      	ldr	r3, [pc, #544]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	029b      	lsls	r3, r3, #10
 80033e4:	4013      	ands	r3, r2
 80033e6:	d1f0      	bne.n	80033ca <HAL_RCC_OscConfig+0xf6>
 80033e8:	e000      	b.n	80033ec <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2202      	movs	r2, #2
 80033f2:	4013      	ands	r3, r2
 80033f4:	d100      	bne.n	80033f8 <HAL_RCC_OscConfig+0x124>
 80033f6:	e099      	b.n	800352c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f8:	4b81      	ldr	r3, [pc, #516]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2238      	movs	r2, #56	; 0x38
 80033fe:	4013      	ands	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003402:	4b7f      	ldr	r3, [pc, #508]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	2203      	movs	r2, #3
 8003408:	4013      	ands	r3, r2
 800340a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2b10      	cmp	r3, #16
 8003410:	d102      	bne.n	8003418 <HAL_RCC_OscConfig+0x144>
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b02      	cmp	r3, #2
 8003416:	d002      	beq.n	800341e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d135      	bne.n	800348a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800341e:	4b78      	ldr	r3, [pc, #480]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	2380      	movs	r3, #128	; 0x80
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	4013      	ands	r3, r2
 8003428:	d005      	beq.n	8003436 <HAL_RCC_OscConfig+0x162>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e24b      	b.n	80038ce <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003436:	4b72      	ldr	r3, [pc, #456]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	4a74      	ldr	r2, [pc, #464]	; (800360c <HAL_RCC_OscConfig+0x338>)
 800343c:	4013      	ands	r3, r2
 800343e:	0019      	movs	r1, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	021a      	lsls	r2, r3, #8
 8003446:	4b6e      	ldr	r3, [pc, #440]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 8003448:	430a      	orrs	r2, r1
 800344a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d112      	bne.n	8003478 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003452:	4b6b      	ldr	r3, [pc, #428]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a6e      	ldr	r2, [pc, #440]	; (8003610 <HAL_RCC_OscConfig+0x33c>)
 8003458:	4013      	ands	r3, r2
 800345a:	0019      	movs	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	4b67      	ldr	r3, [pc, #412]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 8003462:	430a      	orrs	r2, r1
 8003464:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003466:	4b66      	ldr	r3, [pc, #408]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	0adb      	lsrs	r3, r3, #11
 800346c:	2207      	movs	r2, #7
 800346e:	4013      	ands	r3, r2
 8003470:	4a68      	ldr	r2, [pc, #416]	; (8003614 <HAL_RCC_OscConfig+0x340>)
 8003472:	40da      	lsrs	r2, r3
 8003474:	4b68      	ldr	r3, [pc, #416]	; (8003618 <HAL_RCC_OscConfig+0x344>)
 8003476:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003478:	4b68      	ldr	r3, [pc, #416]	; (800361c <HAL_RCC_OscConfig+0x348>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	0018      	movs	r0, r3
 800347e:	f7fe f987 	bl	8001790 <HAL_InitTick>
 8003482:	1e03      	subs	r3, r0, #0
 8003484:	d051      	beq.n	800352a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e221      	b.n	80038ce <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d030      	beq.n	80034f4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003492:	4b5b      	ldr	r3, [pc, #364]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a5e      	ldr	r2, [pc, #376]	; (8003610 <HAL_RCC_OscConfig+0x33c>)
 8003498:	4013      	ands	r3, r2
 800349a:	0019      	movs	r1, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	4b57      	ldr	r3, [pc, #348]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 80034a2:	430a      	orrs	r2, r1
 80034a4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80034a6:	4b56      	ldr	r3, [pc, #344]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4b55      	ldr	r3, [pc, #340]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 80034ac:	2180      	movs	r1, #128	; 0x80
 80034ae:	0049      	lsls	r1, r1, #1
 80034b0:	430a      	orrs	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7ff f9e2 	bl	800287c <HAL_GetTick>
 80034b8:	0003      	movs	r3, r0
 80034ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034be:	f7ff f9dd 	bl	800287c <HAL_GetTick>
 80034c2:	0002      	movs	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e1fe      	b.n	80038ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d0:	4b4b      	ldr	r3, [pc, #300]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	2380      	movs	r3, #128	; 0x80
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4013      	ands	r3, r2
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034dc:	4b48      	ldr	r3, [pc, #288]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	4a4a      	ldr	r2, [pc, #296]	; (800360c <HAL_RCC_OscConfig+0x338>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	0019      	movs	r1, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	021a      	lsls	r2, r3, #8
 80034ec:	4b44      	ldr	r3, [pc, #272]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	e01b      	b.n	800352c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80034f4:	4b42      	ldr	r3, [pc, #264]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4b41      	ldr	r3, [pc, #260]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 80034fa:	4949      	ldr	r1, [pc, #292]	; (8003620 <HAL_RCC_OscConfig+0x34c>)
 80034fc:	400a      	ands	r2, r1
 80034fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7ff f9bc 	bl	800287c <HAL_GetTick>
 8003504:	0003      	movs	r3, r0
 8003506:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800350a:	f7ff f9b7 	bl	800287c <HAL_GetTick>
 800350e:	0002      	movs	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e1d8      	b.n	80038ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800351c:	4b38      	ldr	r3, [pc, #224]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	2380      	movs	r3, #128	; 0x80
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4013      	ands	r3, r2
 8003526:	d1f0      	bne.n	800350a <HAL_RCC_OscConfig+0x236>
 8003528:	e000      	b.n	800352c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800352a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2208      	movs	r2, #8
 8003532:	4013      	ands	r3, r2
 8003534:	d047      	beq.n	80035c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003536:	4b32      	ldr	r3, [pc, #200]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2238      	movs	r2, #56	; 0x38
 800353c:	4013      	ands	r3, r2
 800353e:	2b18      	cmp	r3, #24
 8003540:	d10a      	bne.n	8003558 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003542:	4b2f      	ldr	r3, [pc, #188]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 8003544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003546:	2202      	movs	r2, #2
 8003548:	4013      	ands	r3, r2
 800354a:	d03c      	beq.n	80035c6 <HAL_RCC_OscConfig+0x2f2>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d138      	bne.n	80035c6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e1ba      	b.n	80038ce <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d019      	beq.n	8003594 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003560:	4b27      	ldr	r3, [pc, #156]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 8003562:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003564:	4b26      	ldr	r3, [pc, #152]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 8003566:	2101      	movs	r1, #1
 8003568:	430a      	orrs	r2, r1
 800356a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7ff f986 	bl	800287c <HAL_GetTick>
 8003570:	0003      	movs	r3, r0
 8003572:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003576:	f7ff f981 	bl	800287c <HAL_GetTick>
 800357a:	0002      	movs	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e1a2      	b.n	80038ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003588:	4b1d      	ldr	r3, [pc, #116]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 800358a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358c:	2202      	movs	r2, #2
 800358e:	4013      	ands	r3, r2
 8003590:	d0f1      	beq.n	8003576 <HAL_RCC_OscConfig+0x2a2>
 8003592:	e018      	b.n	80035c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003594:	4b1a      	ldr	r3, [pc, #104]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 8003596:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003598:	4b19      	ldr	r3, [pc, #100]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 800359a:	2101      	movs	r1, #1
 800359c:	438a      	bics	r2, r1
 800359e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7ff f96c 	bl	800287c <HAL_GetTick>
 80035a4:	0003      	movs	r3, r0
 80035a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035aa:	f7ff f967 	bl	800287c <HAL_GetTick>
 80035ae:	0002      	movs	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e188      	b.n	80038ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035bc:	4b10      	ldr	r3, [pc, #64]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 80035be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c0:	2202      	movs	r2, #2
 80035c2:	4013      	ands	r3, r2
 80035c4:	d1f1      	bne.n	80035aa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2204      	movs	r2, #4
 80035cc:	4013      	ands	r3, r2
 80035ce:	d100      	bne.n	80035d2 <HAL_RCC_OscConfig+0x2fe>
 80035d0:	e0c6      	b.n	8003760 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d2:	231f      	movs	r3, #31
 80035d4:	18fb      	adds	r3, r7, r3
 80035d6:	2200      	movs	r2, #0
 80035d8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	2238      	movs	r2, #56	; 0x38
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d11e      	bne.n	8003624 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80035e6:	4b06      	ldr	r3, [pc, #24]	; (8003600 <HAL_RCC_OscConfig+0x32c>)
 80035e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ea:	2202      	movs	r2, #2
 80035ec:	4013      	ands	r3, r2
 80035ee:	d100      	bne.n	80035f2 <HAL_RCC_OscConfig+0x31e>
 80035f0:	e0b6      	b.n	8003760 <HAL_RCC_OscConfig+0x48c>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d000      	beq.n	80035fc <HAL_RCC_OscConfig+0x328>
 80035fa:	e0b1      	b.n	8003760 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e166      	b.n	80038ce <HAL_RCC_OscConfig+0x5fa>
 8003600:	40021000 	.word	0x40021000
 8003604:	fffeffff 	.word	0xfffeffff
 8003608:	fffbffff 	.word	0xfffbffff
 800360c:	ffff80ff 	.word	0xffff80ff
 8003610:	ffffc7ff 	.word	0xffffc7ff
 8003614:	00f42400 	.word	0x00f42400
 8003618:	20000028 	.word	0x20000028
 800361c:	2000002c 	.word	0x2000002c
 8003620:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003624:	4bac      	ldr	r3, [pc, #688]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 8003626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003628:	2380      	movs	r3, #128	; 0x80
 800362a:	055b      	lsls	r3, r3, #21
 800362c:	4013      	ands	r3, r2
 800362e:	d101      	bne.n	8003634 <HAL_RCC_OscConfig+0x360>
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <HAL_RCC_OscConfig+0x362>
 8003634:	2300      	movs	r3, #0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d011      	beq.n	800365e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800363a:	4ba7      	ldr	r3, [pc, #668]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 800363c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800363e:	4ba6      	ldr	r3, [pc, #664]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 8003640:	2180      	movs	r1, #128	; 0x80
 8003642:	0549      	lsls	r1, r1, #21
 8003644:	430a      	orrs	r2, r1
 8003646:	63da      	str	r2, [r3, #60]	; 0x3c
 8003648:	4ba3      	ldr	r3, [pc, #652]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 800364a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	055b      	lsls	r3, r3, #21
 8003650:	4013      	ands	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003656:	231f      	movs	r3, #31
 8003658:	18fb      	adds	r3, r7, r3
 800365a:	2201      	movs	r2, #1
 800365c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800365e:	4b9f      	ldr	r3, [pc, #636]	; (80038dc <HAL_RCC_OscConfig+0x608>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	2380      	movs	r3, #128	; 0x80
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	4013      	ands	r3, r2
 8003668:	d11a      	bne.n	80036a0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800366a:	4b9c      	ldr	r3, [pc, #624]	; (80038dc <HAL_RCC_OscConfig+0x608>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	4b9b      	ldr	r3, [pc, #620]	; (80038dc <HAL_RCC_OscConfig+0x608>)
 8003670:	2180      	movs	r1, #128	; 0x80
 8003672:	0049      	lsls	r1, r1, #1
 8003674:	430a      	orrs	r2, r1
 8003676:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003678:	f7ff f900 	bl	800287c <HAL_GetTick>
 800367c:	0003      	movs	r3, r0
 800367e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003682:	f7ff f8fb 	bl	800287c <HAL_GetTick>
 8003686:	0002      	movs	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e11c      	b.n	80038ce <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003694:	4b91      	ldr	r3, [pc, #580]	; (80038dc <HAL_RCC_OscConfig+0x608>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	2380      	movs	r3, #128	; 0x80
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	4013      	ands	r3, r2
 800369e:	d0f0      	beq.n	8003682 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d106      	bne.n	80036b6 <HAL_RCC_OscConfig+0x3e2>
 80036a8:	4b8b      	ldr	r3, [pc, #556]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 80036aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036ac:	4b8a      	ldr	r3, [pc, #552]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 80036ae:	2101      	movs	r1, #1
 80036b0:	430a      	orrs	r2, r1
 80036b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80036b4:	e01c      	b.n	80036f0 <HAL_RCC_OscConfig+0x41c>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2b05      	cmp	r3, #5
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x404>
 80036be:	4b86      	ldr	r3, [pc, #536]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 80036c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036c2:	4b85      	ldr	r3, [pc, #532]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 80036c4:	2104      	movs	r1, #4
 80036c6:	430a      	orrs	r2, r1
 80036c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80036ca:	4b83      	ldr	r3, [pc, #524]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 80036cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036ce:	4b82      	ldr	r3, [pc, #520]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 80036d0:	2101      	movs	r1, #1
 80036d2:	430a      	orrs	r2, r1
 80036d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80036d6:	e00b      	b.n	80036f0 <HAL_RCC_OscConfig+0x41c>
 80036d8:	4b7f      	ldr	r3, [pc, #508]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 80036da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036dc:	4b7e      	ldr	r3, [pc, #504]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 80036de:	2101      	movs	r1, #1
 80036e0:	438a      	bics	r2, r1
 80036e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80036e4:	4b7c      	ldr	r3, [pc, #496]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 80036e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036e8:	4b7b      	ldr	r3, [pc, #492]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 80036ea:	2104      	movs	r1, #4
 80036ec:	438a      	bics	r2, r1
 80036ee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d014      	beq.n	8003722 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f8:	f7ff f8c0 	bl	800287c <HAL_GetTick>
 80036fc:	0003      	movs	r3, r0
 80036fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003700:	e009      	b.n	8003716 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003702:	f7ff f8bb 	bl	800287c <HAL_GetTick>
 8003706:	0002      	movs	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	4a74      	ldr	r2, [pc, #464]	; (80038e0 <HAL_RCC_OscConfig+0x60c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e0db      	b.n	80038ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003716:	4b70      	ldr	r3, [pc, #448]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 8003718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371a:	2202      	movs	r2, #2
 800371c:	4013      	ands	r3, r2
 800371e:	d0f0      	beq.n	8003702 <HAL_RCC_OscConfig+0x42e>
 8003720:	e013      	b.n	800374a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003722:	f7ff f8ab 	bl	800287c <HAL_GetTick>
 8003726:	0003      	movs	r3, r0
 8003728:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800372a:	e009      	b.n	8003740 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372c:	f7ff f8a6 	bl	800287c <HAL_GetTick>
 8003730:	0002      	movs	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	4a6a      	ldr	r2, [pc, #424]	; (80038e0 <HAL_RCC_OscConfig+0x60c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e0c6      	b.n	80038ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003740:	4b65      	ldr	r3, [pc, #404]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 8003742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003744:	2202      	movs	r2, #2
 8003746:	4013      	ands	r3, r2
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800374a:	231f      	movs	r3, #31
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d105      	bne.n	8003760 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003754:	4b60      	ldr	r3, [pc, #384]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 8003756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003758:	4b5f      	ldr	r3, [pc, #380]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 800375a:	4962      	ldr	r1, [pc, #392]	; (80038e4 <HAL_RCC_OscConfig+0x610>)
 800375c:	400a      	ands	r2, r1
 800375e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d100      	bne.n	800376a <HAL_RCC_OscConfig+0x496>
 8003768:	e0b0      	b.n	80038cc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800376a:	4b5b      	ldr	r3, [pc, #364]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2238      	movs	r2, #56	; 0x38
 8003770:	4013      	ands	r3, r2
 8003772:	2b10      	cmp	r3, #16
 8003774:	d100      	bne.n	8003778 <HAL_RCC_OscConfig+0x4a4>
 8003776:	e078      	b.n	800386a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	2b02      	cmp	r3, #2
 800377e:	d153      	bne.n	8003828 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003780:	4b55      	ldr	r3, [pc, #340]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	4b54      	ldr	r3, [pc, #336]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 8003786:	4958      	ldr	r1, [pc, #352]	; (80038e8 <HAL_RCC_OscConfig+0x614>)
 8003788:	400a      	ands	r2, r1
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7ff f876 	bl	800287c <HAL_GetTick>
 8003790:	0003      	movs	r3, r0
 8003792:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003796:	f7ff f871 	bl	800287c <HAL_GetTick>
 800379a:	0002      	movs	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e092      	b.n	80038ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037a8:	4b4b      	ldr	r3, [pc, #300]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	2380      	movs	r3, #128	; 0x80
 80037ae:	049b      	lsls	r3, r3, #18
 80037b0:	4013      	ands	r3, r2
 80037b2:	d1f0      	bne.n	8003796 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037b4:	4b48      	ldr	r3, [pc, #288]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4a4c      	ldr	r2, [pc, #304]	; (80038ec <HAL_RCC_OscConfig+0x618>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	0019      	movs	r1, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1a      	ldr	r2, [r3, #32]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	431a      	orrs	r2, r3
 80037dc:	4b3e      	ldr	r3, [pc, #248]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 80037de:	430a      	orrs	r2, r1
 80037e0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037e2:	4b3d      	ldr	r3, [pc, #244]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	4b3c      	ldr	r3, [pc, #240]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 80037e8:	2180      	movs	r1, #128	; 0x80
 80037ea:	0449      	lsls	r1, r1, #17
 80037ec:	430a      	orrs	r2, r1
 80037ee:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80037f0:	4b39      	ldr	r3, [pc, #228]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	4b38      	ldr	r3, [pc, #224]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 80037f6:	2180      	movs	r1, #128	; 0x80
 80037f8:	0549      	lsls	r1, r1, #21
 80037fa:	430a      	orrs	r2, r1
 80037fc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fe:	f7ff f83d 	bl	800287c <HAL_GetTick>
 8003802:	0003      	movs	r3, r0
 8003804:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003808:	f7ff f838 	bl	800287c <HAL_GetTick>
 800380c:	0002      	movs	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e059      	b.n	80038ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800381a:	4b2f      	ldr	r3, [pc, #188]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	2380      	movs	r3, #128	; 0x80
 8003820:	049b      	lsls	r3, r3, #18
 8003822:	4013      	ands	r3, r2
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0x534>
 8003826:	e051      	b.n	80038cc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003828:	4b2b      	ldr	r3, [pc, #172]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	4b2a      	ldr	r3, [pc, #168]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 800382e:	492e      	ldr	r1, [pc, #184]	; (80038e8 <HAL_RCC_OscConfig+0x614>)
 8003830:	400a      	ands	r2, r1
 8003832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7ff f822 	bl	800287c <HAL_GetTick>
 8003838:	0003      	movs	r3, r0
 800383a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383e:	f7ff f81d 	bl	800287c <HAL_GetTick>
 8003842:	0002      	movs	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e03e      	b.n	80038ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003850:	4b21      	ldr	r3, [pc, #132]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	2380      	movs	r3, #128	; 0x80
 8003856:	049b      	lsls	r3, r3, #18
 8003858:	4013      	ands	r3, r2
 800385a:	d1f0      	bne.n	800383e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800385c:	4b1e      	ldr	r3, [pc, #120]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	4b1d      	ldr	r3, [pc, #116]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 8003862:	4923      	ldr	r1, [pc, #140]	; (80038f0 <HAL_RCC_OscConfig+0x61c>)
 8003864:	400a      	ands	r2, r1
 8003866:	60da      	str	r2, [r3, #12]
 8003868:	e030      	b.n	80038cc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e02b      	b.n	80038ce <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003876:	4b18      	ldr	r3, [pc, #96]	; (80038d8 <HAL_RCC_OscConfig+0x604>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2203      	movs	r2, #3
 8003880:	401a      	ands	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	429a      	cmp	r2, r3
 8003888:	d11e      	bne.n	80038c8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2270      	movs	r2, #112	; 0x70
 800388e:	401a      	ands	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003894:	429a      	cmp	r2, r3
 8003896:	d117      	bne.n	80038c8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	23fe      	movs	r3, #254	; 0xfe
 800389c:	01db      	lsls	r3, r3, #7
 800389e:	401a      	ands	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d10e      	bne.n	80038c8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	23f8      	movs	r3, #248	; 0xf8
 80038ae:	039b      	lsls	r3, r3, #14
 80038b0:	401a      	ands	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d106      	bne.n	80038c8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	0f5b      	lsrs	r3, r3, #29
 80038be:	075a      	lsls	r2, r3, #29
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d001      	beq.n	80038cc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	0018      	movs	r0, r3
 80038d0:	46bd      	mov	sp, r7
 80038d2:	b008      	add	sp, #32
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	40021000 	.word	0x40021000
 80038dc:	40007000 	.word	0x40007000
 80038e0:	00001388 	.word	0x00001388
 80038e4:	efffffff 	.word	0xefffffff
 80038e8:	feffffff 	.word	0xfeffffff
 80038ec:	1fc1808c 	.word	0x1fc1808c
 80038f0:	effefffc 	.word	0xeffefffc

080038f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e0e9      	b.n	8003adc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003908:	4b76      	ldr	r3, [pc, #472]	; (8003ae4 <HAL_RCC_ClockConfig+0x1f0>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2207      	movs	r2, #7
 800390e:	4013      	ands	r3, r2
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d91e      	bls.n	8003954 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	4b73      	ldr	r3, [pc, #460]	; (8003ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2207      	movs	r2, #7
 800391c:	4393      	bics	r3, r2
 800391e:	0019      	movs	r1, r3
 8003920:	4b70      	ldr	r3, [pc, #448]	; (8003ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003928:	f7fe ffa8 	bl	800287c <HAL_GetTick>
 800392c:	0003      	movs	r3, r0
 800392e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003930:	e009      	b.n	8003946 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003932:	f7fe ffa3 	bl	800287c <HAL_GetTick>
 8003936:	0002      	movs	r2, r0
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	4a6a      	ldr	r2, [pc, #424]	; (8003ae8 <HAL_RCC_ClockConfig+0x1f4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e0ca      	b.n	8003adc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003946:	4b67      	ldr	r3, [pc, #412]	; (8003ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2207      	movs	r2, #7
 800394c:	4013      	ands	r3, r2
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d1ee      	bne.n	8003932 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2202      	movs	r2, #2
 800395a:	4013      	ands	r3, r2
 800395c:	d015      	beq.n	800398a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2204      	movs	r2, #4
 8003964:	4013      	ands	r3, r2
 8003966:	d006      	beq.n	8003976 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003968:	4b60      	ldr	r3, [pc, #384]	; (8003aec <HAL_RCC_ClockConfig+0x1f8>)
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	4b5f      	ldr	r3, [pc, #380]	; (8003aec <HAL_RCC_ClockConfig+0x1f8>)
 800396e:	21e0      	movs	r1, #224	; 0xe0
 8003970:	01c9      	lsls	r1, r1, #7
 8003972:	430a      	orrs	r2, r1
 8003974:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003976:	4b5d      	ldr	r3, [pc, #372]	; (8003aec <HAL_RCC_ClockConfig+0x1f8>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	4a5d      	ldr	r2, [pc, #372]	; (8003af0 <HAL_RCC_ClockConfig+0x1fc>)
 800397c:	4013      	ands	r3, r2
 800397e:	0019      	movs	r1, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	4b59      	ldr	r3, [pc, #356]	; (8003aec <HAL_RCC_ClockConfig+0x1f8>)
 8003986:	430a      	orrs	r2, r1
 8003988:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2201      	movs	r2, #1
 8003990:	4013      	ands	r3, r2
 8003992:	d057      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d107      	bne.n	80039ac <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800399c:	4b53      	ldr	r3, [pc, #332]	; (8003aec <HAL_RCC_ClockConfig+0x1f8>)
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	029b      	lsls	r3, r3, #10
 80039a4:	4013      	ands	r3, r2
 80039a6:	d12b      	bne.n	8003a00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e097      	b.n	8003adc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d107      	bne.n	80039c4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039b4:	4b4d      	ldr	r3, [pc, #308]	; (8003aec <HAL_RCC_ClockConfig+0x1f8>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	2380      	movs	r3, #128	; 0x80
 80039ba:	049b      	lsls	r3, r3, #18
 80039bc:	4013      	ands	r3, r2
 80039be:	d11f      	bne.n	8003a00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e08b      	b.n	8003adc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d107      	bne.n	80039dc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039cc:	4b47      	ldr	r3, [pc, #284]	; (8003aec <HAL_RCC_ClockConfig+0x1f8>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	2380      	movs	r3, #128	; 0x80
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	4013      	ands	r3, r2
 80039d6:	d113      	bne.n	8003a00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e07f      	b.n	8003adc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d106      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039e4:	4b41      	ldr	r3, [pc, #260]	; (8003aec <HAL_RCC_ClockConfig+0x1f8>)
 80039e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e8:	2202      	movs	r2, #2
 80039ea:	4013      	ands	r3, r2
 80039ec:	d108      	bne.n	8003a00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e074      	b.n	8003adc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039f2:	4b3e      	ldr	r3, [pc, #248]	; (8003aec <HAL_RCC_ClockConfig+0x1f8>)
 80039f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f6:	2202      	movs	r2, #2
 80039f8:	4013      	ands	r3, r2
 80039fa:	d101      	bne.n	8003a00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e06d      	b.n	8003adc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a00:	4b3a      	ldr	r3, [pc, #232]	; (8003aec <HAL_RCC_ClockConfig+0x1f8>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2207      	movs	r2, #7
 8003a06:	4393      	bics	r3, r2
 8003a08:	0019      	movs	r1, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	4b37      	ldr	r3, [pc, #220]	; (8003aec <HAL_RCC_ClockConfig+0x1f8>)
 8003a10:	430a      	orrs	r2, r1
 8003a12:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a14:	f7fe ff32 	bl	800287c <HAL_GetTick>
 8003a18:	0003      	movs	r3, r0
 8003a1a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1c:	e009      	b.n	8003a32 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a1e:	f7fe ff2d 	bl	800287c <HAL_GetTick>
 8003a22:	0002      	movs	r2, r0
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	4a2f      	ldr	r2, [pc, #188]	; (8003ae8 <HAL_RCC_ClockConfig+0x1f4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e054      	b.n	8003adc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a32:	4b2e      	ldr	r3, [pc, #184]	; (8003aec <HAL_RCC_ClockConfig+0x1f8>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	2238      	movs	r2, #56	; 0x38
 8003a38:	401a      	ands	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d1ec      	bne.n	8003a1e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a44:	4b27      	ldr	r3, [pc, #156]	; (8003ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2207      	movs	r2, #7
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d21e      	bcs.n	8003a90 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a52:	4b24      	ldr	r3, [pc, #144]	; (8003ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2207      	movs	r2, #7
 8003a58:	4393      	bics	r3, r2
 8003a5a:	0019      	movs	r1, r3
 8003a5c:	4b21      	ldr	r3, [pc, #132]	; (8003ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a64:	f7fe ff0a 	bl	800287c <HAL_GetTick>
 8003a68:	0003      	movs	r3, r0
 8003a6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a6c:	e009      	b.n	8003a82 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a6e:	f7fe ff05 	bl	800287c <HAL_GetTick>
 8003a72:	0002      	movs	r2, r0
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	4a1b      	ldr	r2, [pc, #108]	; (8003ae8 <HAL_RCC_ClockConfig+0x1f4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e02c      	b.n	8003adc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a82:	4b18      	ldr	r3, [pc, #96]	; (8003ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2207      	movs	r2, #7
 8003a88:	4013      	ands	r3, r2
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d1ee      	bne.n	8003a6e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2204      	movs	r2, #4
 8003a96:	4013      	ands	r3, r2
 8003a98:	d009      	beq.n	8003aae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003a9a:	4b14      	ldr	r3, [pc, #80]	; (8003aec <HAL_RCC_ClockConfig+0x1f8>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	4a15      	ldr	r2, [pc, #84]	; (8003af4 <HAL_RCC_ClockConfig+0x200>)
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	0019      	movs	r1, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	4b10      	ldr	r3, [pc, #64]	; (8003aec <HAL_RCC_ClockConfig+0x1f8>)
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003aae:	f000 f829 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8003ab2:	0001      	movs	r1, r0
 8003ab4:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <HAL_RCC_ClockConfig+0x1f8>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	0a1b      	lsrs	r3, r3, #8
 8003aba:	220f      	movs	r2, #15
 8003abc:	401a      	ands	r2, r3
 8003abe:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <HAL_RCC_ClockConfig+0x204>)
 8003ac0:	0092      	lsls	r2, r2, #2
 8003ac2:	58d3      	ldr	r3, [r2, r3]
 8003ac4:	221f      	movs	r2, #31
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	000a      	movs	r2, r1
 8003aca:	40da      	lsrs	r2, r3
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <HAL_RCC_ClockConfig+0x208>)
 8003ace:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_RCC_ClockConfig+0x20c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f7fd fe5b 	bl	8001790 <HAL_InitTick>
 8003ada:	0003      	movs	r3, r0
}
 8003adc:	0018      	movs	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b004      	add	sp, #16
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40022000 	.word	0x40022000
 8003ae8:	00001388 	.word	0x00001388
 8003aec:	40021000 	.word	0x40021000
 8003af0:	fffff0ff 	.word	0xfffff0ff
 8003af4:	ffff8fff 	.word	0xffff8fff
 8003af8:	0800a13c 	.word	0x0800a13c
 8003afc:	20000028 	.word	0x20000028
 8003b00:	2000002c 	.word	0x2000002c

08003b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b0a:	4b3c      	ldr	r3, [pc, #240]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2238      	movs	r2, #56	; 0x38
 8003b10:	4013      	ands	r3, r2
 8003b12:	d10f      	bne.n	8003b34 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003b14:	4b39      	ldr	r3, [pc, #228]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	0adb      	lsrs	r3, r3, #11
 8003b1a:	2207      	movs	r2, #7
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2201      	movs	r2, #1
 8003b20:	409a      	lsls	r2, r3
 8003b22:	0013      	movs	r3, r2
 8003b24:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003b26:	6839      	ldr	r1, [r7, #0]
 8003b28:	4835      	ldr	r0, [pc, #212]	; (8003c00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003b2a:	f7fc faf7 	bl	800011c <__udivsi3>
 8003b2e:	0003      	movs	r3, r0
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	e05d      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b34:	4b31      	ldr	r3, [pc, #196]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2238      	movs	r2, #56	; 0x38
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d102      	bne.n	8003b46 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b40:	4b2f      	ldr	r3, [pc, #188]	; (8003c00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	e054      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b46:	4b2d      	ldr	r3, [pc, #180]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2238      	movs	r2, #56	; 0x38
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b10      	cmp	r3, #16
 8003b50:	d138      	bne.n	8003bc4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003b52:	4b2a      	ldr	r3, [pc, #168]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2203      	movs	r2, #3
 8003b58:	4013      	ands	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b5c:	4b27      	ldr	r3, [pc, #156]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	2207      	movs	r2, #7
 8003b64:	4013      	ands	r3, r2
 8003b66:	3301      	adds	r3, #1
 8003b68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d10d      	bne.n	8003b8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	4823      	ldr	r0, [pc, #140]	; (8003c00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003b74:	f7fc fad2 	bl	800011c <__udivsi3>
 8003b78:	0003      	movs	r3, r0
 8003b7a:	0019      	movs	r1, r3
 8003b7c:	4b1f      	ldr	r3, [pc, #124]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	0a1b      	lsrs	r3, r3, #8
 8003b82:	227f      	movs	r2, #127	; 0x7f
 8003b84:	4013      	ands	r3, r2
 8003b86:	434b      	muls	r3, r1
 8003b88:	617b      	str	r3, [r7, #20]
        break;
 8003b8a:	e00d      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	481c      	ldr	r0, [pc, #112]	; (8003c00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003b90:	f7fc fac4 	bl	800011c <__udivsi3>
 8003b94:	0003      	movs	r3, r0
 8003b96:	0019      	movs	r1, r3
 8003b98:	4b18      	ldr	r3, [pc, #96]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	0a1b      	lsrs	r3, r3, #8
 8003b9e:	227f      	movs	r2, #127	; 0x7f
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	434b      	muls	r3, r1
 8003ba4:	617b      	str	r3, [r7, #20]
        break;
 8003ba6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003ba8:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	0f5b      	lsrs	r3, r3, #29
 8003bae:	2207      	movs	r2, #7
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	6978      	ldr	r0, [r7, #20]
 8003bba:	f7fc faaf 	bl	800011c <__udivsi3>
 8003bbe:	0003      	movs	r3, r0
 8003bc0:	613b      	str	r3, [r7, #16]
 8003bc2:	e015      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003bc4:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2238      	movs	r2, #56	; 0x38
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b20      	cmp	r3, #32
 8003bce:	d103      	bne.n	8003bd8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003bd0:	2380      	movs	r3, #128	; 0x80
 8003bd2:	021b      	lsls	r3, r3, #8
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	e00b      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003bd8:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2238      	movs	r2, #56	; 0x38
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b18      	cmp	r3, #24
 8003be2:	d103      	bne.n	8003bec <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003be4:	23fa      	movs	r3, #250	; 0xfa
 8003be6:	01db      	lsls	r3, r3, #7
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	e001      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003bf0:	693b      	ldr	r3, [r7, #16]
}
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	b006      	add	sp, #24
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	00f42400 	.word	0x00f42400

08003c04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c08:	4b02      	ldr	r3, [pc, #8]	; (8003c14 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
}
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	20000028 	.word	0x20000028

08003c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c18:	b5b0      	push	{r4, r5, r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003c1c:	f7ff fff2 	bl	8003c04 <HAL_RCC_GetHCLKFreq>
 8003c20:	0004      	movs	r4, r0
 8003c22:	f7ff fb4b 	bl	80032bc <LL_RCC_GetAPB1Prescaler>
 8003c26:	0003      	movs	r3, r0
 8003c28:	0b1a      	lsrs	r2, r3, #12
 8003c2a:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c2c:	0092      	lsls	r2, r2, #2
 8003c2e:	58d3      	ldr	r3, [r2, r3]
 8003c30:	221f      	movs	r2, #31
 8003c32:	4013      	ands	r3, r2
 8003c34:	40dc      	lsrs	r4, r3
 8003c36:	0023      	movs	r3, r4
}
 8003c38:	0018      	movs	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	0800a17c 	.word	0x0800a17c

08003c44 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2207      	movs	r2, #7
 8003c52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c54:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <HAL_RCC_GetClockConfig+0x4c>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2207      	movs	r2, #7
 8003c5a:	401a      	ands	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c60:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <HAL_RCC_GetClockConfig+0x4c>)
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	23f0      	movs	r3, #240	; 0xf0
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	401a      	ands	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8003c6e:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <HAL_RCC_GetClockConfig+0x4c>)
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	23e0      	movs	r3, #224	; 0xe0
 8003c74:	01db      	lsls	r3, r3, #7
 8003c76:	401a      	ands	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <HAL_RCC_GetClockConfig+0x50>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2207      	movs	r2, #7
 8003c82:	401a      	ands	r2, r3
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	601a      	str	r2, [r3, #0]
}
 8003c88:	46c0      	nop			; (mov r8, r8)
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b002      	add	sp, #8
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40021000 	.word	0x40021000
 8003c94:	40022000 	.word	0x40022000

08003c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003ca0:	2313      	movs	r3, #19
 8003ca2:	18fb      	adds	r3, r7, r3
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ca8:	2312      	movs	r3, #18
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	029b      	lsls	r3, r3, #10
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d100      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003cbc:	e0a3      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cbe:	2011      	movs	r0, #17
 8003cc0:	183b      	adds	r3, r7, r0
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cc6:	4b86      	ldr	r3, [pc, #536]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003cc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cca:	2380      	movs	r3, #128	; 0x80
 8003ccc:	055b      	lsls	r3, r3, #21
 8003cce:	4013      	ands	r3, r2
 8003cd0:	d110      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd2:	4b83      	ldr	r3, [pc, #524]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003cd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cd6:	4b82      	ldr	r3, [pc, #520]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003cd8:	2180      	movs	r1, #128	; 0x80
 8003cda:	0549      	lsls	r1, r1, #21
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ce0:	4b7f      	ldr	r3, [pc, #508]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	055b      	lsls	r3, r3, #21
 8003ce8:	4013      	ands	r3, r2
 8003cea:	60bb      	str	r3, [r7, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cee:	183b      	adds	r3, r7, r0
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cf4:	4b7b      	ldr	r3, [pc, #492]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	4b7a      	ldr	r3, [pc, #488]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003cfa:	2180      	movs	r1, #128	; 0x80
 8003cfc:	0049      	lsls	r1, r1, #1
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d02:	f7fe fdbb 	bl	800287c <HAL_GetTick>
 8003d06:	0003      	movs	r3, r0
 8003d08:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d0a:	e00b      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d0c:	f7fe fdb6 	bl	800287c <HAL_GetTick>
 8003d10:	0002      	movs	r2, r0
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d904      	bls.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003d1a:	2313      	movs	r3, #19
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	2203      	movs	r2, #3
 8003d20:	701a      	strb	r2, [r3, #0]
        break;
 8003d22:	e005      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d24:	4b6f      	ldr	r3, [pc, #444]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	2380      	movs	r3, #128	; 0x80
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d0ed      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003d30:	2313      	movs	r3, #19
 8003d32:	18fb      	adds	r3, r7, r3
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d154      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d3a:	4b69      	ldr	r3, [pc, #420]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d3e:	23c0      	movs	r3, #192	; 0xc0
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4013      	ands	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d019      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d014      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d56:	4b62      	ldr	r3, [pc, #392]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5a:	4a63      	ldr	r2, [pc, #396]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d60:	4b5f      	ldr	r3, [pc, #380]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d64:	4b5e      	ldr	r3, [pc, #376]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d66:	2180      	movs	r1, #128	; 0x80
 8003d68:	0249      	lsls	r1, r1, #9
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d6e:	4b5c      	ldr	r3, [pc, #368]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d72:	4b5b      	ldr	r3, [pc, #364]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d74:	495d      	ldr	r1, [pc, #372]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d76:	400a      	ands	r2, r1
 8003d78:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d7a:	4b59      	ldr	r3, [pc, #356]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2201      	movs	r2, #1
 8003d84:	4013      	ands	r3, r2
 8003d86:	d016      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d88:	f7fe fd78 	bl	800287c <HAL_GetTick>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d90:	e00c      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d92:	f7fe fd73 	bl	800287c <HAL_GetTick>
 8003d96:	0002      	movs	r2, r0
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	4a54      	ldr	r2, [pc, #336]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d904      	bls.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003da2:	2313      	movs	r3, #19
 8003da4:	18fb      	adds	r3, r7, r3
 8003da6:	2203      	movs	r2, #3
 8003da8:	701a      	strb	r2, [r3, #0]
            break;
 8003daa:	e004      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dac:	4b4c      	ldr	r3, [pc, #304]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	2202      	movs	r2, #2
 8003db2:	4013      	ands	r3, r2
 8003db4:	d0ed      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003db6:	2313      	movs	r3, #19
 8003db8:	18fb      	adds	r3, r7, r3
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10a      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dc0:	4b47      	ldr	r3, [pc, #284]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc4:	4a48      	ldr	r2, [pc, #288]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	0019      	movs	r1, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	4b44      	ldr	r3, [pc, #272]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dd4:	e00c      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dd6:	2312      	movs	r3, #18
 8003dd8:	18fb      	adds	r3, r7, r3
 8003dda:	2213      	movs	r2, #19
 8003ddc:	18ba      	adds	r2, r7, r2
 8003dde:	7812      	ldrb	r2, [r2, #0]
 8003de0:	701a      	strb	r2, [r3, #0]
 8003de2:	e005      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de4:	2312      	movs	r3, #18
 8003de6:	18fb      	adds	r3, r7, r3
 8003de8:	2213      	movs	r2, #19
 8003dea:	18ba      	adds	r2, r7, r2
 8003dec:	7812      	ldrb	r2, [r2, #0]
 8003dee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003df0:	2311      	movs	r3, #17
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d105      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dfa:	4b39      	ldr	r3, [pc, #228]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003dfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dfe:	4b38      	ldr	r3, [pc, #224]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e00:	493c      	ldr	r1, [pc, #240]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e02:	400a      	ands	r2, r1
 8003e04:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	d009      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e10:	4b33      	ldr	r3, [pc, #204]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e14:	2203      	movs	r2, #3
 8003e16:	4393      	bics	r3, r2
 8003e18:	0019      	movs	r1, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	4b30      	ldr	r3, [pc, #192]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e20:	430a      	orrs	r2, r1
 8003e22:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2202      	movs	r2, #2
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d009      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e32:	220c      	movs	r2, #12
 8003e34:	4393      	bics	r3, r2
 8003e36:	0019      	movs	r1, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	4b28      	ldr	r3, [pc, #160]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2220      	movs	r2, #32
 8003e48:	4013      	ands	r3, r2
 8003e4a:	d009      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e4c:	4b24      	ldr	r3, [pc, #144]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e50:	4a29      	ldr	r2, [pc, #164]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	0019      	movs	r1, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	4b21      	ldr	r3, [pc, #132]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	01db      	lsls	r3, r3, #7
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d015      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	0899      	lsrs	r1, r3, #2
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	695a      	ldr	r2, [r3, #20]
 8003e78:	4b19      	ldr	r3, [pc, #100]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695a      	ldr	r2, [r3, #20]
 8003e82:	2380      	movs	r3, #128	; 0x80
 8003e84:	05db      	lsls	r3, r3, #23
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d106      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003e8a:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	4b14      	ldr	r3, [pc, #80]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e90:	2180      	movs	r1, #128	; 0x80
 8003e92:	0249      	lsls	r1, r1, #9
 8003e94:	430a      	orrs	r2, r1
 8003e96:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	2380      	movs	r3, #128	; 0x80
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d016      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003ea4:	4b0e      	ldr	r3, [pc, #56]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea8:	4a14      	ldr	r2, [pc, #80]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003eaa:	4013      	ands	r3, r2
 8003eac:	0019      	movs	r1, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	2380      	movs	r3, #128	; 0x80
 8003ebe:	01db      	lsls	r3, r3, #7
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d106      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003ec4:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003eca:	2180      	movs	r1, #128	; 0x80
 8003ecc:	0249      	lsls	r1, r1, #9
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003ed2:	2312      	movs	r3, #18
 8003ed4:	18fb      	adds	r3, r7, r3
 8003ed6:	781b      	ldrb	r3, [r3, #0]
}
 8003ed8:	0018      	movs	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b006      	add	sp, #24
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	40007000 	.word	0x40007000
 8003ee8:	fffffcff 	.word	0xfffffcff
 8003eec:	fffeffff 	.word	0xfffeffff
 8003ef0:	00001388 	.word	0x00001388
 8003ef4:	efffffff 	.word	0xefffffff
 8003ef8:	ffffcfff 	.word	0xffffcfff
 8003efc:	ffff3fff 	.word	0xffff3fff

08003f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e04a      	b.n	8003fa8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	223d      	movs	r2, #61	; 0x3d
 8003f16:	5c9b      	ldrb	r3, [r3, r2]
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d107      	bne.n	8003f2e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	223c      	movs	r2, #60	; 0x3c
 8003f22:	2100      	movs	r1, #0
 8003f24:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f7fe f9a3 	bl	8002274 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	223d      	movs	r2, #61	; 0x3d
 8003f32:	2102      	movs	r1, #2
 8003f34:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	0019      	movs	r1, r3
 8003f40:	0010      	movs	r0, r2
 8003f42:	f000 ff03 	bl	8004d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2248      	movs	r2, #72	; 0x48
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	223e      	movs	r2, #62	; 0x3e
 8003f52:	2101      	movs	r1, #1
 8003f54:	5499      	strb	r1, [r3, r2]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	223f      	movs	r2, #63	; 0x3f
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	5499      	strb	r1, [r3, r2]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2240      	movs	r2, #64	; 0x40
 8003f62:	2101      	movs	r1, #1
 8003f64:	5499      	strb	r1, [r3, r2]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2241      	movs	r2, #65	; 0x41
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	5499      	strb	r1, [r3, r2]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2242      	movs	r2, #66	; 0x42
 8003f72:	2101      	movs	r1, #1
 8003f74:	5499      	strb	r1, [r3, r2]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2243      	movs	r2, #67	; 0x43
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2244      	movs	r2, #68	; 0x44
 8003f82:	2101      	movs	r1, #1
 8003f84:	5499      	strb	r1, [r3, r2]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2245      	movs	r2, #69	; 0x45
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	5499      	strb	r1, [r3, r2]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2246      	movs	r2, #70	; 0x46
 8003f92:	2101      	movs	r1, #1
 8003f94:	5499      	strb	r1, [r3, r2]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2247      	movs	r2, #71	; 0x47
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	223d      	movs	r2, #61	; 0x3d
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	0018      	movs	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b002      	add	sp, #8
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	223d      	movs	r2, #61	; 0x3d
 8003fbc:	5c9b      	ldrb	r3, [r3, r2]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d001      	beq.n	8003fc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e03c      	b.n	8004042 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	223d      	movs	r2, #61	; 0x3d
 8003fcc:	2102      	movs	r1, #2
 8003fce:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2101      	movs	r1, #1
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a19      	ldr	r2, [pc, #100]	; (800404c <HAL_TIM_Base_Start_IT+0x9c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d009      	beq.n	8003ffe <HAL_TIM_Base_Start_IT+0x4e>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a18      	ldr	r2, [pc, #96]	; (8004050 <HAL_TIM_Base_Start_IT+0xa0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d004      	beq.n	8003ffe <HAL_TIM_Base_Start_IT+0x4e>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a16      	ldr	r2, [pc, #88]	; (8004054 <HAL_TIM_Base_Start_IT+0xa4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d116      	bne.n	800402c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	4a14      	ldr	r2, [pc, #80]	; (8004058 <HAL_TIM_Base_Start_IT+0xa8>)
 8004006:	4013      	ands	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b06      	cmp	r3, #6
 800400e:	d016      	beq.n	800403e <HAL_TIM_Base_Start_IT+0x8e>
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	025b      	lsls	r3, r3, #9
 8004016:	429a      	cmp	r2, r3
 8004018:	d011      	beq.n	800403e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2101      	movs	r1, #1
 8004026:	430a      	orrs	r2, r1
 8004028:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402a:	e008      	b.n	800403e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2101      	movs	r1, #1
 8004038:	430a      	orrs	r2, r1
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	e000      	b.n	8004040 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	0018      	movs	r0, r3
 8004044:	46bd      	mov	sp, r7
 8004046:	b004      	add	sp, #16
 8004048:	bd80      	pop	{r7, pc}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	40012c00 	.word	0x40012c00
 8004050:	40000400 	.word	0x40000400
 8004054:	40014000 	.word	0x40014000
 8004058:	00010007 	.word	0x00010007

0800405c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e04a      	b.n	8004104 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	223d      	movs	r2, #61	; 0x3d
 8004072:	5c9b      	ldrb	r3, [r3, r2]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d107      	bne.n	800408a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	223c      	movs	r2, #60	; 0x3c
 800407e:	2100      	movs	r1, #0
 8004080:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	0018      	movs	r0, r3
 8004086:	f000 f841 	bl	800410c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	223d      	movs	r2, #61	; 0x3d
 800408e:	2102      	movs	r1, #2
 8004090:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3304      	adds	r3, #4
 800409a:	0019      	movs	r1, r3
 800409c:	0010      	movs	r0, r2
 800409e:	f000 fe55 	bl	8004d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2248      	movs	r2, #72	; 0x48
 80040a6:	2101      	movs	r1, #1
 80040a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	223e      	movs	r2, #62	; 0x3e
 80040ae:	2101      	movs	r1, #1
 80040b0:	5499      	strb	r1, [r3, r2]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	223f      	movs	r2, #63	; 0x3f
 80040b6:	2101      	movs	r1, #1
 80040b8:	5499      	strb	r1, [r3, r2]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2240      	movs	r2, #64	; 0x40
 80040be:	2101      	movs	r1, #1
 80040c0:	5499      	strb	r1, [r3, r2]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2241      	movs	r2, #65	; 0x41
 80040c6:	2101      	movs	r1, #1
 80040c8:	5499      	strb	r1, [r3, r2]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2242      	movs	r2, #66	; 0x42
 80040ce:	2101      	movs	r1, #1
 80040d0:	5499      	strb	r1, [r3, r2]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2243      	movs	r2, #67	; 0x43
 80040d6:	2101      	movs	r1, #1
 80040d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2244      	movs	r2, #68	; 0x44
 80040de:	2101      	movs	r1, #1
 80040e0:	5499      	strb	r1, [r3, r2]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2245      	movs	r2, #69	; 0x45
 80040e6:	2101      	movs	r1, #1
 80040e8:	5499      	strb	r1, [r3, r2]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2246      	movs	r2, #70	; 0x46
 80040ee:	2101      	movs	r1, #1
 80040f0:	5499      	strb	r1, [r3, r2]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2247      	movs	r2, #71	; 0x47
 80040f6:	2101      	movs	r1, #1
 80040f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	223d      	movs	r2, #61	; 0x3d
 80040fe:	2101      	movs	r1, #1
 8004100:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	0018      	movs	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	b002      	add	sp, #8
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004114:	46c0      	nop			; (mov r8, r8)
 8004116:	46bd      	mov	sp, r7
 8004118:	b002      	add	sp, #8
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e04a      	b.n	80041c4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	223d      	movs	r2, #61	; 0x3d
 8004132:	5c9b      	ldrb	r3, [r3, r2]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d107      	bne.n	800414a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	223c      	movs	r2, #60	; 0x3c
 800413e:	2100      	movs	r1, #0
 8004140:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	0018      	movs	r0, r3
 8004146:	f000 f841 	bl	80041cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	223d      	movs	r2, #61	; 0x3d
 800414e:	2102      	movs	r1, #2
 8004150:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3304      	adds	r3, #4
 800415a:	0019      	movs	r1, r3
 800415c:	0010      	movs	r0, r2
 800415e:	f000 fdf5 	bl	8004d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2248      	movs	r2, #72	; 0x48
 8004166:	2101      	movs	r1, #1
 8004168:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	223e      	movs	r2, #62	; 0x3e
 800416e:	2101      	movs	r1, #1
 8004170:	5499      	strb	r1, [r3, r2]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	223f      	movs	r2, #63	; 0x3f
 8004176:	2101      	movs	r1, #1
 8004178:	5499      	strb	r1, [r3, r2]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2240      	movs	r2, #64	; 0x40
 800417e:	2101      	movs	r1, #1
 8004180:	5499      	strb	r1, [r3, r2]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2241      	movs	r2, #65	; 0x41
 8004186:	2101      	movs	r1, #1
 8004188:	5499      	strb	r1, [r3, r2]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2242      	movs	r2, #66	; 0x42
 800418e:	2101      	movs	r1, #1
 8004190:	5499      	strb	r1, [r3, r2]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2243      	movs	r2, #67	; 0x43
 8004196:	2101      	movs	r1, #1
 8004198:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2244      	movs	r2, #68	; 0x44
 800419e:	2101      	movs	r1, #1
 80041a0:	5499      	strb	r1, [r3, r2]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2245      	movs	r2, #69	; 0x45
 80041a6:	2101      	movs	r1, #1
 80041a8:	5499      	strb	r1, [r3, r2]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2246      	movs	r2, #70	; 0x46
 80041ae:	2101      	movs	r1, #1
 80041b0:	5499      	strb	r1, [r3, r2]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2247      	movs	r2, #71	; 0x47
 80041b6:	2101      	movs	r1, #1
 80041b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	223d      	movs	r2, #61	; 0x3d
 80041be:	2101      	movs	r1, #1
 80041c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	0018      	movs	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	b002      	add	sp, #8
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b002      	add	sp, #8
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d108      	bne.n	80041fe <HAL_TIM_PWM_Start+0x22>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	223e      	movs	r2, #62	; 0x3e
 80041f0:	5c9b      	ldrb	r3, [r3, r2]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	1e5a      	subs	r2, r3, #1
 80041f8:	4193      	sbcs	r3, r2
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	e037      	b.n	800426e <HAL_TIM_PWM_Start+0x92>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b04      	cmp	r3, #4
 8004202:	d108      	bne.n	8004216 <HAL_TIM_PWM_Start+0x3a>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	223f      	movs	r2, #63	; 0x3f
 8004208:	5c9b      	ldrb	r3, [r3, r2]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	1e5a      	subs	r2, r3, #1
 8004210:	4193      	sbcs	r3, r2
 8004212:	b2db      	uxtb	r3, r3
 8004214:	e02b      	b.n	800426e <HAL_TIM_PWM_Start+0x92>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b08      	cmp	r3, #8
 800421a:	d108      	bne.n	800422e <HAL_TIM_PWM_Start+0x52>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2240      	movs	r2, #64	; 0x40
 8004220:	5c9b      	ldrb	r3, [r3, r2]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	1e5a      	subs	r2, r3, #1
 8004228:	4193      	sbcs	r3, r2
 800422a:	b2db      	uxtb	r3, r3
 800422c:	e01f      	b.n	800426e <HAL_TIM_PWM_Start+0x92>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b0c      	cmp	r3, #12
 8004232:	d108      	bne.n	8004246 <HAL_TIM_PWM_Start+0x6a>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2241      	movs	r2, #65	; 0x41
 8004238:	5c9b      	ldrb	r3, [r3, r2]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	1e5a      	subs	r2, r3, #1
 8004240:	4193      	sbcs	r3, r2
 8004242:	b2db      	uxtb	r3, r3
 8004244:	e013      	b.n	800426e <HAL_TIM_PWM_Start+0x92>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b10      	cmp	r3, #16
 800424a:	d108      	bne.n	800425e <HAL_TIM_PWM_Start+0x82>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2242      	movs	r2, #66	; 0x42
 8004250:	5c9b      	ldrb	r3, [r3, r2]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	1e5a      	subs	r2, r3, #1
 8004258:	4193      	sbcs	r3, r2
 800425a:	b2db      	uxtb	r3, r3
 800425c:	e007      	b.n	800426e <HAL_TIM_PWM_Start+0x92>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2243      	movs	r2, #67	; 0x43
 8004262:	5c9b      	ldrb	r3, [r3, r2]
 8004264:	b2db      	uxtb	r3, r3
 8004266:	3b01      	subs	r3, #1
 8004268:	1e5a      	subs	r2, r3, #1
 800426a:	4193      	sbcs	r3, r2
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e085      	b.n	8004382 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d104      	bne.n	8004286 <HAL_TIM_PWM_Start+0xaa>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	223e      	movs	r2, #62	; 0x3e
 8004280:	2102      	movs	r1, #2
 8004282:	5499      	strb	r1, [r3, r2]
 8004284:	e023      	b.n	80042ce <HAL_TIM_PWM_Start+0xf2>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b04      	cmp	r3, #4
 800428a:	d104      	bne.n	8004296 <HAL_TIM_PWM_Start+0xba>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	223f      	movs	r2, #63	; 0x3f
 8004290:	2102      	movs	r1, #2
 8004292:	5499      	strb	r1, [r3, r2]
 8004294:	e01b      	b.n	80042ce <HAL_TIM_PWM_Start+0xf2>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b08      	cmp	r3, #8
 800429a:	d104      	bne.n	80042a6 <HAL_TIM_PWM_Start+0xca>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2240      	movs	r2, #64	; 0x40
 80042a0:	2102      	movs	r1, #2
 80042a2:	5499      	strb	r1, [r3, r2]
 80042a4:	e013      	b.n	80042ce <HAL_TIM_PWM_Start+0xf2>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b0c      	cmp	r3, #12
 80042aa:	d104      	bne.n	80042b6 <HAL_TIM_PWM_Start+0xda>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2241      	movs	r2, #65	; 0x41
 80042b0:	2102      	movs	r1, #2
 80042b2:	5499      	strb	r1, [r3, r2]
 80042b4:	e00b      	b.n	80042ce <HAL_TIM_PWM_Start+0xf2>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b10      	cmp	r3, #16
 80042ba:	d104      	bne.n	80042c6 <HAL_TIM_PWM_Start+0xea>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2242      	movs	r2, #66	; 0x42
 80042c0:	2102      	movs	r1, #2
 80042c2:	5499      	strb	r1, [r3, r2]
 80042c4:	e003      	b.n	80042ce <HAL_TIM_PWM_Start+0xf2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2243      	movs	r2, #67	; 0x43
 80042ca:	2102      	movs	r1, #2
 80042cc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6839      	ldr	r1, [r7, #0]
 80042d4:	2201      	movs	r2, #1
 80042d6:	0018      	movs	r0, r3
 80042d8:	f001 f90e 	bl	80054f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a2a      	ldr	r2, [pc, #168]	; (800438c <HAL_TIM_PWM_Start+0x1b0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d00e      	beq.n	8004304 <HAL_TIM_PWM_Start+0x128>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a29      	ldr	r2, [pc, #164]	; (8004390 <HAL_TIM_PWM_Start+0x1b4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d009      	beq.n	8004304 <HAL_TIM_PWM_Start+0x128>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a27      	ldr	r2, [pc, #156]	; (8004394 <HAL_TIM_PWM_Start+0x1b8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d004      	beq.n	8004304 <HAL_TIM_PWM_Start+0x128>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a26      	ldr	r2, [pc, #152]	; (8004398 <HAL_TIM_PWM_Start+0x1bc>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d101      	bne.n	8004308 <HAL_TIM_PWM_Start+0x12c>
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <HAL_TIM_PWM_Start+0x12e>
 8004308:	2300      	movs	r3, #0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d008      	beq.n	8004320 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2180      	movs	r1, #128	; 0x80
 800431a:	0209      	lsls	r1, r1, #8
 800431c:	430a      	orrs	r2, r1
 800431e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a19      	ldr	r2, [pc, #100]	; (800438c <HAL_TIM_PWM_Start+0x1b0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d009      	beq.n	800433e <HAL_TIM_PWM_Start+0x162>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a1b      	ldr	r2, [pc, #108]	; (800439c <HAL_TIM_PWM_Start+0x1c0>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d004      	beq.n	800433e <HAL_TIM_PWM_Start+0x162>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a15      	ldr	r2, [pc, #84]	; (8004390 <HAL_TIM_PWM_Start+0x1b4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d116      	bne.n	800436c <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	4a16      	ldr	r2, [pc, #88]	; (80043a0 <HAL_TIM_PWM_Start+0x1c4>)
 8004346:	4013      	ands	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b06      	cmp	r3, #6
 800434e:	d016      	beq.n	800437e <HAL_TIM_PWM_Start+0x1a2>
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	025b      	lsls	r3, r3, #9
 8004356:	429a      	cmp	r2, r3
 8004358:	d011      	beq.n	800437e <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2101      	movs	r1, #1
 8004366:	430a      	orrs	r2, r1
 8004368:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436a:	e008      	b.n	800437e <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2101      	movs	r1, #1
 8004378:	430a      	orrs	r2, r1
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	e000      	b.n	8004380 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800437e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	0018      	movs	r0, r3
 8004384:	46bd      	mov	sp, r7
 8004386:	b004      	add	sp, #16
 8004388:	bd80      	pop	{r7, pc}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	40012c00 	.word	0x40012c00
 8004390:	40014000 	.word	0x40014000
 8004394:	40014400 	.word	0x40014400
 8004398:	40014800 	.word	0x40014800
 800439c:	40000400 	.word	0x40000400
 80043a0:	00010007 	.word	0x00010007

080043a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e090      	b.n	80044da <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	223d      	movs	r2, #61	; 0x3d
 80043bc:	5c9b      	ldrb	r3, [r3, r2]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d107      	bne.n	80043d4 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	223c      	movs	r2, #60	; 0x3c
 80043c8:	2100      	movs	r1, #0
 80043ca:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	0018      	movs	r0, r3
 80043d0:	f7fd fecc 	bl	800216c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	223d      	movs	r2, #61	; 0x3d
 80043d8:	2102      	movs	r1, #2
 80043da:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	493f      	ldr	r1, [pc, #252]	; (80044e4 <HAL_TIM_Encoder_Init+0x140>)
 80043e8:	400a      	ands	r2, r1
 80043ea:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3304      	adds	r3, #4
 80043f4:	0019      	movs	r1, r3
 80043f6:	0010      	movs	r0, r2
 80043f8:	f000 fca8 	bl	8004d4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4a31      	ldr	r2, [pc, #196]	; (80044e8 <HAL_TIM_Encoder_Init+0x144>)
 8004422:	4013      	ands	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	021b      	lsls	r3, r3, #8
 8004430:	4313      	orrs	r3, r2
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	4a2c      	ldr	r2, [pc, #176]	; (80044ec <HAL_TIM_Encoder_Init+0x148>)
 800443c:	4013      	ands	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	4a2b      	ldr	r2, [pc, #172]	; (80044f0 <HAL_TIM_Encoder_Init+0x14c>)
 8004444:	4013      	ands	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	021b      	lsls	r3, r3, #8
 8004452:	4313      	orrs	r3, r2
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4313      	orrs	r3, r2
 8004458:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	011a      	lsls	r2, r3, #4
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	031b      	lsls	r3, r3, #12
 8004466:	4313      	orrs	r3, r2
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4313      	orrs	r3, r2
 800446c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2222      	movs	r2, #34	; 0x22
 8004472:	4393      	bics	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2288      	movs	r2, #136	; 0x88
 800447a:	4393      	bics	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	4313      	orrs	r3, r2
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	4313      	orrs	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2248      	movs	r2, #72	; 0x48
 80044ac:	2101      	movs	r1, #1
 80044ae:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	223e      	movs	r2, #62	; 0x3e
 80044b4:	2101      	movs	r1, #1
 80044b6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	223f      	movs	r2, #63	; 0x3f
 80044bc:	2101      	movs	r1, #1
 80044be:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2244      	movs	r2, #68	; 0x44
 80044c4:	2101      	movs	r1, #1
 80044c6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2245      	movs	r2, #69	; 0x45
 80044cc:	2101      	movs	r1, #1
 80044ce:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	223d      	movs	r2, #61	; 0x3d
 80044d4:	2101      	movs	r1, #1
 80044d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	0018      	movs	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	b006      	add	sp, #24
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	46c0      	nop			; (mov r8, r8)
 80044e4:	fffebff8 	.word	0xfffebff8
 80044e8:	fffffcfc 	.word	0xfffffcfc
 80044ec:	fffff3f3 	.word	0xfffff3f3
 80044f0:	ffff0f0f 	.word	0xffff0f0f

080044f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044f4:	b590      	push	{r4, r7, lr}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80044fe:	200f      	movs	r0, #15
 8004500:	183b      	adds	r3, r7, r0
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	213e      	movs	r1, #62	; 0x3e
 8004506:	5c52      	ldrb	r2, [r2, r1]
 8004508:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800450a:	230e      	movs	r3, #14
 800450c:	18fb      	adds	r3, r7, r3
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	213f      	movs	r1, #63	; 0x3f
 8004512:	5c52      	ldrb	r2, [r2, r1]
 8004514:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004516:	240d      	movs	r4, #13
 8004518:	193b      	adds	r3, r7, r4
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	2144      	movs	r1, #68	; 0x44
 800451e:	5c52      	ldrb	r2, [r2, r1]
 8004520:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004522:	230c      	movs	r3, #12
 8004524:	18fb      	adds	r3, r7, r3
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	2145      	movs	r1, #69	; 0x45
 800452a:	5c52      	ldrb	r2, [r2, r1]
 800452c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d112      	bne.n	800455a <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004534:	183b      	adds	r3, r7, r0
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d103      	bne.n	8004544 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800453c:	193b      	adds	r3, r7, r4
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d001      	beq.n	8004548 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e075      	b.n	8004634 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	223e      	movs	r2, #62	; 0x3e
 800454c:	2102      	movs	r1, #2
 800454e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2244      	movs	r2, #68	; 0x44
 8004554:	2102      	movs	r1, #2
 8004556:	5499      	strb	r1, [r3, r2]
 8004558:	e03d      	b.n	80045d6 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b04      	cmp	r3, #4
 800455e:	d114      	bne.n	800458a <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004560:	230e      	movs	r3, #14
 8004562:	18fb      	adds	r3, r7, r3
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d104      	bne.n	8004574 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800456a:	230c      	movs	r3, #12
 800456c:	18fb      	adds	r3, r7, r3
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d001      	beq.n	8004578 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e05d      	b.n	8004634 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	223f      	movs	r2, #63	; 0x3f
 800457c:	2102      	movs	r1, #2
 800457e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2245      	movs	r2, #69	; 0x45
 8004584:	2102      	movs	r1, #2
 8004586:	5499      	strb	r1, [r3, r2]
 8004588:	e025      	b.n	80045d6 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800458a:	230f      	movs	r3, #15
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d10e      	bne.n	80045b2 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004594:	230e      	movs	r3, #14
 8004596:	18fb      	adds	r3, r7, r3
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d109      	bne.n	80045b2 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800459e:	230d      	movs	r3, #13
 80045a0:	18fb      	adds	r3, r7, r3
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d104      	bne.n	80045b2 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80045a8:	230c      	movs	r3, #12
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d001      	beq.n	80045b6 <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e03e      	b.n	8004634 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	223e      	movs	r2, #62	; 0x3e
 80045ba:	2102      	movs	r1, #2
 80045bc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	223f      	movs	r2, #63	; 0x3f
 80045c2:	2102      	movs	r1, #2
 80045c4:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2244      	movs	r2, #68	; 0x44
 80045ca:	2102      	movs	r1, #2
 80045cc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2245      	movs	r2, #69	; 0x45
 80045d2:	2102      	movs	r1, #2
 80045d4:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_TIM_Encoder_Start+0xf0>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d008      	beq.n	80045f4 <HAL_TIM_Encoder_Start+0x100>
 80045e2:	e00f      	b.n	8004604 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2201      	movs	r2, #1
 80045ea:	2100      	movs	r1, #0
 80045ec:	0018      	movs	r0, r3
 80045ee:	f000 ff83 	bl	80054f8 <TIM_CCxChannelCmd>
      break;
 80045f2:	e016      	b.n	8004622 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2201      	movs	r2, #1
 80045fa:	2104      	movs	r1, #4
 80045fc:	0018      	movs	r0, r3
 80045fe:	f000 ff7b 	bl	80054f8 <TIM_CCxChannelCmd>
      break;
 8004602:	e00e      	b.n	8004622 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2201      	movs	r2, #1
 800460a:	2100      	movs	r1, #0
 800460c:	0018      	movs	r0, r3
 800460e:	f000 ff73 	bl	80054f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2201      	movs	r2, #1
 8004618:	2104      	movs	r1, #4
 800461a:	0018      	movs	r0, r3
 800461c:	f000 ff6c 	bl	80054f8 <TIM_CCxChannelCmd>
      break;
 8004620:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2101      	movs	r1, #1
 800462e:	430a      	orrs	r2, r1
 8004630:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	0018      	movs	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	b005      	add	sp, #20
 800463a:	bd90      	pop	{r4, r7, pc}

0800463c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2202      	movs	r2, #2
 800464c:	4013      	ands	r3, r2
 800464e:	2b02      	cmp	r3, #2
 8004650:	d124      	bne.n	800469c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	2202      	movs	r2, #2
 800465a:	4013      	ands	r3, r2
 800465c:	2b02      	cmp	r3, #2
 800465e:	d11d      	bne.n	800469c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2203      	movs	r2, #3
 8004666:	4252      	negs	r2, r2
 8004668:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	2203      	movs	r2, #3
 8004678:	4013      	ands	r3, r2
 800467a:	d004      	beq.n	8004686 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	0018      	movs	r0, r3
 8004680:	f000 fb4c 	bl	8004d1c <HAL_TIM_IC_CaptureCallback>
 8004684:	e007      	b.n	8004696 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	0018      	movs	r0, r3
 800468a:	f000 fb3f 	bl	8004d0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	0018      	movs	r0, r3
 8004692:	f000 fb4b 	bl	8004d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	2204      	movs	r2, #4
 80046a4:	4013      	ands	r3, r2
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d125      	bne.n	80046f6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	2204      	movs	r2, #4
 80046b2:	4013      	ands	r3, r2
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d11e      	bne.n	80046f6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2205      	movs	r2, #5
 80046be:	4252      	negs	r2, r2
 80046c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	23c0      	movs	r3, #192	; 0xc0
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4013      	ands	r3, r2
 80046d4:	d004      	beq.n	80046e0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	0018      	movs	r0, r3
 80046da:	f000 fb1f 	bl	8004d1c <HAL_TIM_IC_CaptureCallback>
 80046de:	e007      	b.n	80046f0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	0018      	movs	r0, r3
 80046e4:	f000 fb12 	bl	8004d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	0018      	movs	r0, r3
 80046ec:	f000 fb1e 	bl	8004d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	2208      	movs	r2, #8
 80046fe:	4013      	ands	r3, r2
 8004700:	2b08      	cmp	r3, #8
 8004702:	d124      	bne.n	800474e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	2208      	movs	r2, #8
 800470c:	4013      	ands	r3, r2
 800470e:	2b08      	cmp	r3, #8
 8004710:	d11d      	bne.n	800474e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2209      	movs	r2, #9
 8004718:	4252      	negs	r2, r2
 800471a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2204      	movs	r2, #4
 8004720:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	2203      	movs	r2, #3
 800472a:	4013      	ands	r3, r2
 800472c:	d004      	beq.n	8004738 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	0018      	movs	r0, r3
 8004732:	f000 faf3 	bl	8004d1c <HAL_TIM_IC_CaptureCallback>
 8004736:	e007      	b.n	8004748 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	0018      	movs	r0, r3
 800473c:	f000 fae6 	bl	8004d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	0018      	movs	r0, r3
 8004744:	f000 faf2 	bl	8004d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2210      	movs	r2, #16
 8004756:	4013      	ands	r3, r2
 8004758:	2b10      	cmp	r3, #16
 800475a:	d125      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	2210      	movs	r2, #16
 8004764:	4013      	ands	r3, r2
 8004766:	2b10      	cmp	r3, #16
 8004768:	d11e      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2211      	movs	r2, #17
 8004770:	4252      	negs	r2, r2
 8004772:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2208      	movs	r2, #8
 8004778:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	23c0      	movs	r3, #192	; 0xc0
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4013      	ands	r3, r2
 8004786:	d004      	beq.n	8004792 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	0018      	movs	r0, r3
 800478c:	f000 fac6 	bl	8004d1c <HAL_TIM_IC_CaptureCallback>
 8004790:	e007      	b.n	80047a2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	0018      	movs	r0, r3
 8004796:	f000 fab9 	bl	8004d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	0018      	movs	r0, r3
 800479e:	f000 fac5 	bl	8004d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2201      	movs	r2, #1
 80047b0:	4013      	ands	r3, r2
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d10f      	bne.n	80047d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	4013      	ands	r3, r2
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d108      	bne.n	80047d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2202      	movs	r2, #2
 80047ca:	4252      	negs	r2, r2
 80047cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	0018      	movs	r0, r3
 80047d2:	f7fc fc83 	bl	80010dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2280      	movs	r2, #128	; 0x80
 80047de:	4013      	ands	r3, r2
 80047e0:	2b80      	cmp	r3, #128	; 0x80
 80047e2:	d10f      	bne.n	8004804 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	2280      	movs	r2, #128	; 0x80
 80047ec:	4013      	ands	r3, r2
 80047ee:	2b80      	cmp	r3, #128	; 0x80
 80047f0:	d108      	bne.n	8004804 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2281      	movs	r2, #129	; 0x81
 80047f8:	4252      	negs	r2, r2
 80047fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	0018      	movs	r0, r3
 8004800:	f000 ffb4 	bl	800576c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691a      	ldr	r2, [r3, #16]
 800480a:	2380      	movs	r3, #128	; 0x80
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	401a      	ands	r2, r3
 8004810:	2380      	movs	r3, #128	; 0x80
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	429a      	cmp	r2, r3
 8004816:	d10e      	bne.n	8004836 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	2280      	movs	r2, #128	; 0x80
 8004820:	4013      	ands	r3, r2
 8004822:	2b80      	cmp	r3, #128	; 0x80
 8004824:	d107      	bne.n	8004836 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a1c      	ldr	r2, [pc, #112]	; (800489c <HAL_TIM_IRQHandler+0x260>)
 800482c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	0018      	movs	r0, r3
 8004832:	f000 ffa3 	bl	800577c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	2240      	movs	r2, #64	; 0x40
 800483e:	4013      	ands	r3, r2
 8004840:	2b40      	cmp	r3, #64	; 0x40
 8004842:	d10f      	bne.n	8004864 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	2240      	movs	r2, #64	; 0x40
 800484c:	4013      	ands	r3, r2
 800484e:	2b40      	cmp	r3, #64	; 0x40
 8004850:	d108      	bne.n	8004864 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2241      	movs	r2, #65	; 0x41
 8004858:	4252      	negs	r2, r2
 800485a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	0018      	movs	r0, r3
 8004860:	f000 fa6c 	bl	8004d3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	2220      	movs	r2, #32
 800486c:	4013      	ands	r3, r2
 800486e:	2b20      	cmp	r3, #32
 8004870:	d10f      	bne.n	8004892 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	4013      	ands	r3, r2
 800487c:	2b20      	cmp	r3, #32
 800487e:	d108      	bne.n	8004892 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2221      	movs	r2, #33	; 0x21
 8004886:	4252      	negs	r2, r2
 8004888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	0018      	movs	r0, r3
 800488e:	f000 ff65 	bl	800575c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	46bd      	mov	sp, r7
 8004896:	b002      	add	sp, #8
 8004898:	bd80      	pop	{r7, pc}
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	fffffeff 	.word	0xfffffeff

080048a0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048ac:	2317      	movs	r3, #23
 80048ae:	18fb      	adds	r3, r7, r3
 80048b0:	2200      	movs	r2, #0
 80048b2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	223c      	movs	r2, #60	; 0x3c
 80048b8:	5c9b      	ldrb	r3, [r3, r2]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d101      	bne.n	80048c2 <HAL_TIM_OC_ConfigChannel+0x22>
 80048be:	2302      	movs	r3, #2
 80048c0:	e048      	b.n	8004954 <HAL_TIM_OC_ConfigChannel+0xb4>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	223c      	movs	r2, #60	; 0x3c
 80048c6:	2101      	movs	r1, #1
 80048c8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b14      	cmp	r3, #20
 80048ce:	d835      	bhi.n	800493c <HAL_TIM_OC_ConfigChannel+0x9c>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	009a      	lsls	r2, r3, #2
 80048d4:	4b21      	ldr	r3, [pc, #132]	; (800495c <HAL_TIM_OC_ConfigChannel+0xbc>)
 80048d6:	18d3      	adds	r3, r2, r3
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	0011      	movs	r1, r2
 80048e4:	0018      	movs	r0, r3
 80048e6:	f000 faa7 	bl	8004e38 <TIM_OC1_SetConfig>
      break;
 80048ea:	e02c      	b.n	8004946 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	0011      	movs	r1, r2
 80048f4:	0018      	movs	r0, r3
 80048f6:	f000 fb29 	bl	8004f4c <TIM_OC2_SetConfig>
      break;
 80048fa:	e024      	b.n	8004946 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	0011      	movs	r1, r2
 8004904:	0018      	movs	r0, r3
 8004906:	f000 fba5 	bl	8005054 <TIM_OC3_SetConfig>
      break;
 800490a:	e01c      	b.n	8004946 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	0011      	movs	r1, r2
 8004914:	0018      	movs	r0, r3
 8004916:	f000 fc25 	bl	8005164 <TIM_OC4_SetConfig>
      break;
 800491a:	e014      	b.n	8004946 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	0011      	movs	r1, r2
 8004924:	0018      	movs	r0, r3
 8004926:	f000 fc87 	bl	8005238 <TIM_OC5_SetConfig>
      break;
 800492a:	e00c      	b.n	8004946 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	0011      	movs	r1, r2
 8004934:	0018      	movs	r0, r3
 8004936:	f000 fcdf 	bl	80052f8 <TIM_OC6_SetConfig>
      break;
 800493a:	e004      	b.n	8004946 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800493c:	2317      	movs	r3, #23
 800493e:	18fb      	adds	r3, r7, r3
 8004940:	2201      	movs	r2, #1
 8004942:	701a      	strb	r2, [r3, #0]
      break;
 8004944:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	223c      	movs	r2, #60	; 0x3c
 800494a:	2100      	movs	r1, #0
 800494c:	5499      	strb	r1, [r3, r2]

  return status;
 800494e:	2317      	movs	r3, #23
 8004950:	18fb      	adds	r3, r7, r3
 8004952:	781b      	ldrb	r3, [r3, #0]
}
 8004954:	0018      	movs	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	b006      	add	sp, #24
 800495a:	bd80      	pop	{r7, pc}
 800495c:	0800a19c 	.word	0x0800a19c

08004960 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800496c:	2317      	movs	r3, #23
 800496e:	18fb      	adds	r3, r7, r3
 8004970:	2200      	movs	r2, #0
 8004972:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	223c      	movs	r2, #60	; 0x3c
 8004978:	5c9b      	ldrb	r3, [r3, r2]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d101      	bne.n	8004982 <HAL_TIM_PWM_ConfigChannel+0x22>
 800497e:	2302      	movs	r3, #2
 8004980:	e0e5      	b.n	8004b4e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	223c      	movs	r2, #60	; 0x3c
 8004986:	2101      	movs	r1, #1
 8004988:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b14      	cmp	r3, #20
 800498e:	d900      	bls.n	8004992 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004990:	e0d1      	b.n	8004b36 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	009a      	lsls	r2, r3, #2
 8004996:	4b70      	ldr	r3, [pc, #448]	; (8004b58 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004998:	18d3      	adds	r3, r2, r3
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	0011      	movs	r1, r2
 80049a6:	0018      	movs	r0, r3
 80049a8:	f000 fa46 	bl	8004e38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699a      	ldr	r2, [r3, #24]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2108      	movs	r1, #8
 80049b8:	430a      	orrs	r2, r1
 80049ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699a      	ldr	r2, [r3, #24]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2104      	movs	r1, #4
 80049c8:	438a      	bics	r2, r1
 80049ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6999      	ldr	r1, [r3, #24]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	691a      	ldr	r2, [r3, #16]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	619a      	str	r2, [r3, #24]
      break;
 80049de:	e0af      	b.n	8004b40 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	0011      	movs	r1, r2
 80049e8:	0018      	movs	r0, r3
 80049ea:	f000 faaf 	bl	8004f4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	699a      	ldr	r2, [r3, #24]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2180      	movs	r1, #128	; 0x80
 80049fa:	0109      	lsls	r1, r1, #4
 80049fc:	430a      	orrs	r2, r1
 80049fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699a      	ldr	r2, [r3, #24]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4954      	ldr	r1, [pc, #336]	; (8004b5c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004a0c:	400a      	ands	r2, r1
 8004a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6999      	ldr	r1, [r3, #24]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	021a      	lsls	r2, r3, #8
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	619a      	str	r2, [r3, #24]
      break;
 8004a24:	e08c      	b.n	8004b40 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	0011      	movs	r1, r2
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f000 fb10 	bl	8005054 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	69da      	ldr	r2, [r3, #28]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2108      	movs	r1, #8
 8004a40:	430a      	orrs	r2, r1
 8004a42:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	69da      	ldr	r2, [r3, #28]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2104      	movs	r1, #4
 8004a50:	438a      	bics	r2, r1
 8004a52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	69d9      	ldr	r1, [r3, #28]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	61da      	str	r2, [r3, #28]
      break;
 8004a66:	e06b      	b.n	8004b40 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	0011      	movs	r1, r2
 8004a70:	0018      	movs	r0, r3
 8004a72:	f000 fb77 	bl	8005164 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69da      	ldr	r2, [r3, #28]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2180      	movs	r1, #128	; 0x80
 8004a82:	0109      	lsls	r1, r1, #4
 8004a84:	430a      	orrs	r2, r1
 8004a86:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	69da      	ldr	r2, [r3, #28]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4932      	ldr	r1, [pc, #200]	; (8004b5c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004a94:	400a      	ands	r2, r1
 8004a96:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69d9      	ldr	r1, [r3, #28]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	021a      	lsls	r2, r3, #8
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	61da      	str	r2, [r3, #28]
      break;
 8004aac:	e048      	b.n	8004b40 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	0011      	movs	r1, r2
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	f000 fbbe 	bl	8005238 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2108      	movs	r1, #8
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2104      	movs	r1, #4
 8004ad8:	438a      	bics	r2, r1
 8004ada:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004aee:	e027      	b.n	8004b40 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	0011      	movs	r1, r2
 8004af8:	0018      	movs	r0, r3
 8004afa:	f000 fbfd 	bl	80052f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2180      	movs	r1, #128	; 0x80
 8004b0a:	0109      	lsls	r1, r1, #4
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4910      	ldr	r1, [pc, #64]	; (8004b5c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004b1c:	400a      	ands	r2, r1
 8004b1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	021a      	lsls	r2, r3, #8
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b34:	e004      	b.n	8004b40 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004b36:	2317      	movs	r3, #23
 8004b38:	18fb      	adds	r3, r7, r3
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	701a      	strb	r2, [r3, #0]
      break;
 8004b3e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	223c      	movs	r2, #60	; 0x3c
 8004b44:	2100      	movs	r1, #0
 8004b46:	5499      	strb	r1, [r3, r2]

  return status;
 8004b48:	2317      	movs	r3, #23
 8004b4a:	18fb      	adds	r3, r7, r3
 8004b4c:	781b      	ldrb	r3, [r3, #0]
}
 8004b4e:	0018      	movs	r0, r3
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b006      	add	sp, #24
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	0800a1f0 	.word	0x0800a1f0
 8004b5c:	fffffbff 	.word	0xfffffbff

08004b60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b6a:	230f      	movs	r3, #15
 8004b6c:	18fb      	adds	r3, r7, r3
 8004b6e:	2200      	movs	r2, #0
 8004b70:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	223c      	movs	r2, #60	; 0x3c
 8004b76:	5c9b      	ldrb	r3, [r3, r2]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_TIM_ConfigClockSource+0x20>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e0bc      	b.n	8004cfa <HAL_TIM_ConfigClockSource+0x19a>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	223c      	movs	r2, #60	; 0x3c
 8004b84:	2101      	movs	r1, #1
 8004b86:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	223d      	movs	r2, #61	; 0x3d
 8004b8c:	2102      	movs	r1, #2
 8004b8e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	4a5a      	ldr	r2, [pc, #360]	; (8004d04 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4a59      	ldr	r2, [pc, #356]	; (8004d08 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2280      	movs	r2, #128	; 0x80
 8004bb6:	0192      	lsls	r2, r2, #6
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d040      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0xde>
 8004bbc:	2280      	movs	r2, #128	; 0x80
 8004bbe:	0192      	lsls	r2, r2, #6
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d900      	bls.n	8004bc6 <HAL_TIM_ConfigClockSource+0x66>
 8004bc4:	e088      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x178>
 8004bc6:	2280      	movs	r2, #128	; 0x80
 8004bc8:	0152      	lsls	r2, r2, #5
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d100      	bne.n	8004bd0 <HAL_TIM_ConfigClockSource+0x70>
 8004bce:	e088      	b.n	8004ce2 <HAL_TIM_ConfigClockSource+0x182>
 8004bd0:	2280      	movs	r2, #128	; 0x80
 8004bd2:	0152      	lsls	r2, r2, #5
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d900      	bls.n	8004bda <HAL_TIM_ConfigClockSource+0x7a>
 8004bd8:	e07e      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x178>
 8004bda:	2b70      	cmp	r3, #112	; 0x70
 8004bdc:	d018      	beq.n	8004c10 <HAL_TIM_ConfigClockSource+0xb0>
 8004bde:	d900      	bls.n	8004be2 <HAL_TIM_ConfigClockSource+0x82>
 8004be0:	e07a      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x178>
 8004be2:	2b60      	cmp	r3, #96	; 0x60
 8004be4:	d04f      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x126>
 8004be6:	d900      	bls.n	8004bea <HAL_TIM_ConfigClockSource+0x8a>
 8004be8:	e076      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x178>
 8004bea:	2b50      	cmp	r3, #80	; 0x50
 8004bec:	d03b      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x106>
 8004bee:	d900      	bls.n	8004bf2 <HAL_TIM_ConfigClockSource+0x92>
 8004bf0:	e072      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x178>
 8004bf2:	2b40      	cmp	r3, #64	; 0x40
 8004bf4:	d057      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0x146>
 8004bf6:	d900      	bls.n	8004bfa <HAL_TIM_ConfigClockSource+0x9a>
 8004bf8:	e06e      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x178>
 8004bfa:	2b30      	cmp	r3, #48	; 0x30
 8004bfc:	d063      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0x166>
 8004bfe:	d86b      	bhi.n	8004cd8 <HAL_TIM_ConfigClockSource+0x178>
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d060      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0x166>
 8004c04:	d868      	bhi.n	8004cd8 <HAL_TIM_ConfigClockSource+0x178>
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d05d      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0x166>
 8004c0a:	2b10      	cmp	r3, #16
 8004c0c:	d05b      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0x166>
 8004c0e:	e063      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c20:	f000 fc4a 	bl	80054b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2277      	movs	r2, #119	; 0x77
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	609a      	str	r2, [r3, #8]
      break;
 8004c3c:	e052      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c4e:	f000 fc33 	bl	80054b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	689a      	ldr	r2, [r3, #8]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2180      	movs	r1, #128	; 0x80
 8004c5e:	01c9      	lsls	r1, r1, #7
 8004c60:	430a      	orrs	r2, r1
 8004c62:	609a      	str	r2, [r3, #8]
      break;
 8004c64:	e03e      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c72:	001a      	movs	r2, r3
 8004c74:	f000 fba4 	bl	80053c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2150      	movs	r1, #80	; 0x50
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f000 fbfe 	bl	8005480 <TIM_ITRx_SetConfig>
      break;
 8004c84:	e02e      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c92:	001a      	movs	r2, r3
 8004c94:	f000 fbc2 	bl	800541c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2160      	movs	r1, #96	; 0x60
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	f000 fbee 	bl	8005480 <TIM_ITRx_SetConfig>
      break;
 8004ca4:	e01e      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb2:	001a      	movs	r2, r3
 8004cb4:	f000 fb84 	bl	80053c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2140      	movs	r1, #64	; 0x40
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	f000 fbde 	bl	8005480 <TIM_ITRx_SetConfig>
      break;
 8004cc4:	e00e      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	0019      	movs	r1, r3
 8004cd0:	0010      	movs	r0, r2
 8004cd2:	f000 fbd5 	bl	8005480 <TIM_ITRx_SetConfig>
      break;
 8004cd6:	e005      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004cd8:	230f      	movs	r3, #15
 8004cda:	18fb      	adds	r3, r7, r3
 8004cdc:	2201      	movs	r2, #1
 8004cde:	701a      	strb	r2, [r3, #0]
      break;
 8004ce0:	e000      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004ce2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	223d      	movs	r2, #61	; 0x3d
 8004ce8:	2101      	movs	r1, #1
 8004cea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	223c      	movs	r2, #60	; 0x3c
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	5499      	strb	r1, [r3, r2]

  return status;
 8004cf4:	230f      	movs	r3, #15
 8004cf6:	18fb      	adds	r3, r7, r3
 8004cf8:	781b      	ldrb	r3, [r3, #0]
}
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b004      	add	sp, #16
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	ffceff88 	.word	0xffceff88
 8004d08:	ffff00ff 	.word	0xffff00ff

08004d0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d14:	46c0      	nop			; (mov r8, r8)
 8004d16:	46bd      	mov	sp, r7
 8004d18:	b002      	add	sp, #8
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d24:	46c0      	nop			; (mov r8, r8)
 8004d26:	46bd      	mov	sp, r7
 8004d28:	b002      	add	sp, #8
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d34:	46c0      	nop			; (mov r8, r8)
 8004d36:	46bd      	mov	sp, r7
 8004d38:	b002      	add	sp, #8
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d44:	46c0      	nop			; (mov r8, r8)
 8004d46:	46bd      	mov	sp, r7
 8004d48:	b002      	add	sp, #8
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a2f      	ldr	r2, [pc, #188]	; (8004e1c <TIM_Base_SetConfig+0xd0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d003      	beq.n	8004d6c <TIM_Base_SetConfig+0x20>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a2e      	ldr	r2, [pc, #184]	; (8004e20 <TIM_Base_SetConfig+0xd4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d108      	bne.n	8004d7e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2270      	movs	r2, #112	; 0x70
 8004d70:	4393      	bics	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a26      	ldr	r2, [pc, #152]	; (8004e1c <TIM_Base_SetConfig+0xd0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d013      	beq.n	8004dae <TIM_Base_SetConfig+0x62>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a25      	ldr	r2, [pc, #148]	; (8004e20 <TIM_Base_SetConfig+0xd4>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00f      	beq.n	8004dae <TIM_Base_SetConfig+0x62>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a24      	ldr	r2, [pc, #144]	; (8004e24 <TIM_Base_SetConfig+0xd8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00b      	beq.n	8004dae <TIM_Base_SetConfig+0x62>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a23      	ldr	r2, [pc, #140]	; (8004e28 <TIM_Base_SetConfig+0xdc>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d007      	beq.n	8004dae <TIM_Base_SetConfig+0x62>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a22      	ldr	r2, [pc, #136]	; (8004e2c <TIM_Base_SetConfig+0xe0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d003      	beq.n	8004dae <TIM_Base_SetConfig+0x62>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a21      	ldr	r2, [pc, #132]	; (8004e30 <TIM_Base_SetConfig+0xe4>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d108      	bne.n	8004dc0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4a20      	ldr	r2, [pc, #128]	; (8004e34 <TIM_Base_SetConfig+0xe8>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2280      	movs	r2, #128	; 0x80
 8004dc4:	4393      	bics	r3, r2
 8004dc6:	001a      	movs	r2, r3
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a0c      	ldr	r2, [pc, #48]	; (8004e1c <TIM_Base_SetConfig+0xd0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00b      	beq.n	8004e06 <TIM_Base_SetConfig+0xba>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a0d      	ldr	r2, [pc, #52]	; (8004e28 <TIM_Base_SetConfig+0xdc>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d007      	beq.n	8004e06 <TIM_Base_SetConfig+0xba>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a0c      	ldr	r2, [pc, #48]	; (8004e2c <TIM_Base_SetConfig+0xe0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d003      	beq.n	8004e06 <TIM_Base_SetConfig+0xba>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a0b      	ldr	r2, [pc, #44]	; (8004e30 <TIM_Base_SetConfig+0xe4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d103      	bne.n	8004e0e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	615a      	str	r2, [r3, #20]
}
 8004e14:	46c0      	nop			; (mov r8, r8)
 8004e16:	46bd      	mov	sp, r7
 8004e18:	b004      	add	sp, #16
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40012c00 	.word	0x40012c00
 8004e20:	40000400 	.word	0x40000400
 8004e24:	40002000 	.word	0x40002000
 8004e28:	40014000 	.word	0x40014000
 8004e2c:	40014400 	.word	0x40014400
 8004e30:	40014800 	.word	0x40014800
 8004e34:	fffffcff 	.word	0xfffffcff

08004e38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	2201      	movs	r2, #1
 8004e48:	4393      	bics	r3, r2
 8004e4a:	001a      	movs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4a32      	ldr	r2, [pc, #200]	; (8004f30 <TIM_OC1_SetConfig+0xf8>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2203      	movs	r2, #3
 8004e6e:	4393      	bics	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	4393      	bics	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a28      	ldr	r2, [pc, #160]	; (8004f34 <TIM_OC1_SetConfig+0xfc>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00b      	beq.n	8004eae <TIM_OC1_SetConfig+0x76>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a27      	ldr	r2, [pc, #156]	; (8004f38 <TIM_OC1_SetConfig+0x100>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d007      	beq.n	8004eae <TIM_OC1_SetConfig+0x76>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a26      	ldr	r2, [pc, #152]	; (8004f3c <TIM_OC1_SetConfig+0x104>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d003      	beq.n	8004eae <TIM_OC1_SetConfig+0x76>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a25      	ldr	r2, [pc, #148]	; (8004f40 <TIM_OC1_SetConfig+0x108>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d10c      	bne.n	8004ec8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2208      	movs	r2, #8
 8004eb2:	4393      	bics	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2204      	movs	r2, #4
 8004ec4:	4393      	bics	r3, r2
 8004ec6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a1a      	ldr	r2, [pc, #104]	; (8004f34 <TIM_OC1_SetConfig+0xfc>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00b      	beq.n	8004ee8 <TIM_OC1_SetConfig+0xb0>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a19      	ldr	r2, [pc, #100]	; (8004f38 <TIM_OC1_SetConfig+0x100>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d007      	beq.n	8004ee8 <TIM_OC1_SetConfig+0xb0>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a18      	ldr	r2, [pc, #96]	; (8004f3c <TIM_OC1_SetConfig+0x104>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d003      	beq.n	8004ee8 <TIM_OC1_SetConfig+0xb0>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a17      	ldr	r2, [pc, #92]	; (8004f40 <TIM_OC1_SetConfig+0x108>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d111      	bne.n	8004f0c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	4a16      	ldr	r2, [pc, #88]	; (8004f44 <TIM_OC1_SetConfig+0x10c>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	4a15      	ldr	r2, [pc, #84]	; (8004f48 <TIM_OC1_SetConfig+0x110>)
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	621a      	str	r2, [r3, #32]
}
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b006      	add	sp, #24
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	fffeff8f 	.word	0xfffeff8f
 8004f34:	40012c00 	.word	0x40012c00
 8004f38:	40014000 	.word	0x40014000
 8004f3c:	40014400 	.word	0x40014400
 8004f40:	40014800 	.word	0x40014800
 8004f44:	fffffeff 	.word	0xfffffeff
 8004f48:	fffffdff 	.word	0xfffffdff

08004f4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	2210      	movs	r2, #16
 8004f5c:	4393      	bics	r3, r2
 8004f5e:	001a      	movs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4a2e      	ldr	r2, [pc, #184]	; (8005034 <TIM_OC2_SetConfig+0xe8>)
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4a2d      	ldr	r2, [pc, #180]	; (8005038 <TIM_OC2_SetConfig+0xec>)
 8004f82:	4013      	ands	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	021b      	lsls	r3, r3, #8
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2220      	movs	r2, #32
 8004f96:	4393      	bics	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a24      	ldr	r2, [pc, #144]	; (800503c <TIM_OC2_SetConfig+0xf0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d10d      	bne.n	8004fca <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2280      	movs	r2, #128	; 0x80
 8004fb2:	4393      	bics	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2240      	movs	r2, #64	; 0x40
 8004fc6:	4393      	bics	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a1b      	ldr	r2, [pc, #108]	; (800503c <TIM_OC2_SetConfig+0xf0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00b      	beq.n	8004fea <TIM_OC2_SetConfig+0x9e>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a1a      	ldr	r2, [pc, #104]	; (8005040 <TIM_OC2_SetConfig+0xf4>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d007      	beq.n	8004fea <TIM_OC2_SetConfig+0x9e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a19      	ldr	r2, [pc, #100]	; (8005044 <TIM_OC2_SetConfig+0xf8>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d003      	beq.n	8004fea <TIM_OC2_SetConfig+0x9e>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a18      	ldr	r2, [pc, #96]	; (8005048 <TIM_OC2_SetConfig+0xfc>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d113      	bne.n	8005012 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	4a17      	ldr	r2, [pc, #92]	; (800504c <TIM_OC2_SetConfig+0x100>)
 8004fee:	4013      	ands	r3, r2
 8004ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	4a16      	ldr	r2, [pc, #88]	; (8005050 <TIM_OC2_SetConfig+0x104>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4313      	orrs	r3, r2
 8005010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	621a      	str	r2, [r3, #32]
}
 800502c:	46c0      	nop			; (mov r8, r8)
 800502e:	46bd      	mov	sp, r7
 8005030:	b006      	add	sp, #24
 8005032:	bd80      	pop	{r7, pc}
 8005034:	feff8fff 	.word	0xfeff8fff
 8005038:	fffffcff 	.word	0xfffffcff
 800503c:	40012c00 	.word	0x40012c00
 8005040:	40014000 	.word	0x40014000
 8005044:	40014400 	.word	0x40014400
 8005048:	40014800 	.word	0x40014800
 800504c:	fffffbff 	.word	0xfffffbff
 8005050:	fffff7ff 	.word	0xfffff7ff

08005054 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	4a35      	ldr	r2, [pc, #212]	; (8005138 <TIM_OC3_SetConfig+0xe4>)
 8005064:	401a      	ands	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4a2f      	ldr	r2, [pc, #188]	; (800513c <TIM_OC3_SetConfig+0xe8>)
 8005080:	4013      	ands	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2203      	movs	r2, #3
 8005088:	4393      	bics	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	4a29      	ldr	r2, [pc, #164]	; (8005140 <TIM_OC3_SetConfig+0xec>)
 800509a:	4013      	ands	r3, r2
 800509c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	021b      	lsls	r3, r3, #8
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a25      	ldr	r2, [pc, #148]	; (8005144 <TIM_OC3_SetConfig+0xf0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d10d      	bne.n	80050ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	4a24      	ldr	r2, [pc, #144]	; (8005148 <TIM_OC3_SetConfig+0xf4>)
 80050b6:	4013      	ands	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	4a20      	ldr	r2, [pc, #128]	; (800514c <TIM_OC3_SetConfig+0xf8>)
 80050ca:	4013      	ands	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a1c      	ldr	r2, [pc, #112]	; (8005144 <TIM_OC3_SetConfig+0xf0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d00b      	beq.n	80050ee <TIM_OC3_SetConfig+0x9a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a1d      	ldr	r2, [pc, #116]	; (8005150 <TIM_OC3_SetConfig+0xfc>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d007      	beq.n	80050ee <TIM_OC3_SetConfig+0x9a>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a1c      	ldr	r2, [pc, #112]	; (8005154 <TIM_OC3_SetConfig+0x100>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d003      	beq.n	80050ee <TIM_OC3_SetConfig+0x9a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a1b      	ldr	r2, [pc, #108]	; (8005158 <TIM_OC3_SetConfig+0x104>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d113      	bne.n	8005116 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	4a1a      	ldr	r2, [pc, #104]	; (800515c <TIM_OC3_SetConfig+0x108>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	4a19      	ldr	r2, [pc, #100]	; (8005160 <TIM_OC3_SetConfig+0x10c>)
 80050fa:	4013      	ands	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	621a      	str	r2, [r3, #32]
}
 8005130:	46c0      	nop			; (mov r8, r8)
 8005132:	46bd      	mov	sp, r7
 8005134:	b006      	add	sp, #24
 8005136:	bd80      	pop	{r7, pc}
 8005138:	fffffeff 	.word	0xfffffeff
 800513c:	fffeff8f 	.word	0xfffeff8f
 8005140:	fffffdff 	.word	0xfffffdff
 8005144:	40012c00 	.word	0x40012c00
 8005148:	fffff7ff 	.word	0xfffff7ff
 800514c:	fffffbff 	.word	0xfffffbff
 8005150:	40014000 	.word	0x40014000
 8005154:	40014400 	.word	0x40014400
 8005158:	40014800 	.word	0x40014800
 800515c:	ffffefff 	.word	0xffffefff
 8005160:	ffffdfff 	.word	0xffffdfff

08005164 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	4a28      	ldr	r2, [pc, #160]	; (8005214 <TIM_OC4_SetConfig+0xb0>)
 8005174:	401a      	ands	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4a22      	ldr	r2, [pc, #136]	; (8005218 <TIM_OC4_SetConfig+0xb4>)
 8005190:	4013      	ands	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4a21      	ldr	r2, [pc, #132]	; (800521c <TIM_OC4_SetConfig+0xb8>)
 8005198:	4013      	ands	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	021b      	lsls	r3, r3, #8
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	4a1d      	ldr	r2, [pc, #116]	; (8005220 <TIM_OC4_SetConfig+0xbc>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	031b      	lsls	r3, r3, #12
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a19      	ldr	r2, [pc, #100]	; (8005224 <TIM_OC4_SetConfig+0xc0>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d00b      	beq.n	80051dc <TIM_OC4_SetConfig+0x78>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a18      	ldr	r2, [pc, #96]	; (8005228 <TIM_OC4_SetConfig+0xc4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d007      	beq.n	80051dc <TIM_OC4_SetConfig+0x78>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a17      	ldr	r2, [pc, #92]	; (800522c <TIM_OC4_SetConfig+0xc8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d003      	beq.n	80051dc <TIM_OC4_SetConfig+0x78>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a16      	ldr	r2, [pc, #88]	; (8005230 <TIM_OC4_SetConfig+0xcc>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d109      	bne.n	80051f0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	4a15      	ldr	r2, [pc, #84]	; (8005234 <TIM_OC4_SetConfig+0xd0>)
 80051e0:	4013      	ands	r3, r2
 80051e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	019b      	lsls	r3, r3, #6
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	621a      	str	r2, [r3, #32]
}
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	46bd      	mov	sp, r7
 800520e:	b006      	add	sp, #24
 8005210:	bd80      	pop	{r7, pc}
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	ffffefff 	.word	0xffffefff
 8005218:	feff8fff 	.word	0xfeff8fff
 800521c:	fffffcff 	.word	0xfffffcff
 8005220:	ffffdfff 	.word	0xffffdfff
 8005224:	40012c00 	.word	0x40012c00
 8005228:	40014000 	.word	0x40014000
 800522c:	40014400 	.word	0x40014400
 8005230:	40014800 	.word	0x40014800
 8005234:	ffffbfff 	.word	0xffffbfff

08005238 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	4a25      	ldr	r2, [pc, #148]	; (80052dc <TIM_OC5_SetConfig+0xa4>)
 8005248:	401a      	ands	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4a1f      	ldr	r2, [pc, #124]	; (80052e0 <TIM_OC5_SetConfig+0xa8>)
 8005264:	4013      	ands	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	4a1b      	ldr	r2, [pc, #108]	; (80052e4 <TIM_OC5_SetConfig+0xac>)
 8005276:	4013      	ands	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	041b      	lsls	r3, r3, #16
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a17      	ldr	r2, [pc, #92]	; (80052e8 <TIM_OC5_SetConfig+0xb0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00b      	beq.n	80052a6 <TIM_OC5_SetConfig+0x6e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a16      	ldr	r2, [pc, #88]	; (80052ec <TIM_OC5_SetConfig+0xb4>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d007      	beq.n	80052a6 <TIM_OC5_SetConfig+0x6e>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a15      	ldr	r2, [pc, #84]	; (80052f0 <TIM_OC5_SetConfig+0xb8>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d003      	beq.n	80052a6 <TIM_OC5_SetConfig+0x6e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a14      	ldr	r2, [pc, #80]	; (80052f4 <TIM_OC5_SetConfig+0xbc>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d109      	bne.n	80052ba <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	4a0c      	ldr	r2, [pc, #48]	; (80052dc <TIM_OC5_SetConfig+0xa4>)
 80052aa:	4013      	ands	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	021b      	lsls	r3, r3, #8
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	621a      	str	r2, [r3, #32]
}
 80052d4:	46c0      	nop			; (mov r8, r8)
 80052d6:	46bd      	mov	sp, r7
 80052d8:	b006      	add	sp, #24
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	fffeffff 	.word	0xfffeffff
 80052e0:	fffeff8f 	.word	0xfffeff8f
 80052e4:	fffdffff 	.word	0xfffdffff
 80052e8:	40012c00 	.word	0x40012c00
 80052ec:	40014000 	.word	0x40014000
 80052f0:	40014400 	.word	0x40014400
 80052f4:	40014800 	.word	0x40014800

080052f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	4a26      	ldr	r2, [pc, #152]	; (80053a0 <TIM_OC6_SetConfig+0xa8>)
 8005308:	401a      	ands	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4a20      	ldr	r2, [pc, #128]	; (80053a4 <TIM_OC6_SetConfig+0xac>)
 8005324:	4013      	ands	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	021b      	lsls	r3, r3, #8
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4313      	orrs	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	4a1c      	ldr	r2, [pc, #112]	; (80053a8 <TIM_OC6_SetConfig+0xb0>)
 8005338:	4013      	ands	r3, r2
 800533a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	051b      	lsls	r3, r3, #20
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a18      	ldr	r2, [pc, #96]	; (80053ac <TIM_OC6_SetConfig+0xb4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00b      	beq.n	8005368 <TIM_OC6_SetConfig+0x70>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a17      	ldr	r2, [pc, #92]	; (80053b0 <TIM_OC6_SetConfig+0xb8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d007      	beq.n	8005368 <TIM_OC6_SetConfig+0x70>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a16      	ldr	r2, [pc, #88]	; (80053b4 <TIM_OC6_SetConfig+0xbc>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d003      	beq.n	8005368 <TIM_OC6_SetConfig+0x70>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a15      	ldr	r2, [pc, #84]	; (80053b8 <TIM_OC6_SetConfig+0xc0>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d109      	bne.n	800537c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	4a14      	ldr	r2, [pc, #80]	; (80053bc <TIM_OC6_SetConfig+0xc4>)
 800536c:	4013      	ands	r3, r2
 800536e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	029b      	lsls	r3, r3, #10
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	621a      	str	r2, [r3, #32]
}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	46bd      	mov	sp, r7
 800539a:	b006      	add	sp, #24
 800539c:	bd80      	pop	{r7, pc}
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	ffefffff 	.word	0xffefffff
 80053a4:	feff8fff 	.word	0xfeff8fff
 80053a8:	ffdfffff 	.word	0xffdfffff
 80053ac:	40012c00 	.word	0x40012c00
 80053b0:	40014000 	.word	0x40014000
 80053b4:	40014400 	.word	0x40014400
 80053b8:	40014800 	.word	0x40014800
 80053bc:	fffbffff 	.word	0xfffbffff

080053c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	2201      	movs	r2, #1
 80053d8:	4393      	bics	r3, r2
 80053da:	001a      	movs	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	22f0      	movs	r2, #240	; 0xf0
 80053ea:	4393      	bics	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	220a      	movs	r2, #10
 80053fc:	4393      	bics	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	4313      	orrs	r3, r2
 8005406:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	621a      	str	r2, [r3, #32]
}
 8005414:	46c0      	nop			; (mov r8, r8)
 8005416:	46bd      	mov	sp, r7
 8005418:	b006      	add	sp, #24
 800541a:	bd80      	pop	{r7, pc}

0800541c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	2210      	movs	r2, #16
 800542e:	4393      	bics	r3, r2
 8005430:	001a      	movs	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	4a0d      	ldr	r2, [pc, #52]	; (800547c <TIM_TI2_ConfigInputStage+0x60>)
 8005446:	4013      	ands	r3, r2
 8005448:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	031b      	lsls	r3, r3, #12
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	22a0      	movs	r2, #160	; 0xa0
 8005458:	4393      	bics	r3, r2
 800545a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	011b      	lsls	r3, r3, #4
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	4313      	orrs	r3, r2
 8005464:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	621a      	str	r2, [r3, #32]
}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	46bd      	mov	sp, r7
 8005476:	b006      	add	sp, #24
 8005478:	bd80      	pop	{r7, pc}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	ffff0fff 	.word	0xffff0fff

08005480 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4a08      	ldr	r2, [pc, #32]	; (80054b4 <TIM_ITRx_SetConfig+0x34>)
 8005494:	4013      	ands	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4313      	orrs	r3, r2
 800549e:	2207      	movs	r2, #7
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	609a      	str	r2, [r3, #8]
}
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	46bd      	mov	sp, r7
 80054ae:	b004      	add	sp, #16
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	ffcfff8f 	.word	0xffcfff8f

080054b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	4a09      	ldr	r2, [pc, #36]	; (80054f4 <TIM_ETR_SetConfig+0x3c>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	021a      	lsls	r2, r3, #8
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	431a      	orrs	r2, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4313      	orrs	r3, r2
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	609a      	str	r2, [r3, #8]
}
 80054ec:	46c0      	nop			; (mov r8, r8)
 80054ee:	46bd      	mov	sp, r7
 80054f0:	b006      	add	sp, #24
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	ffff00ff 	.word	0xffff00ff

080054f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	221f      	movs	r2, #31
 8005508:	4013      	ands	r3, r2
 800550a:	2201      	movs	r2, #1
 800550c:	409a      	lsls	r2, r3
 800550e:	0013      	movs	r3, r2
 8005510:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	43d2      	mvns	r2, r2
 800551a:	401a      	ands	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a1a      	ldr	r2, [r3, #32]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	211f      	movs	r1, #31
 8005528:	400b      	ands	r3, r1
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	4099      	lsls	r1, r3
 800552e:	000b      	movs	r3, r1
 8005530:	431a      	orrs	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	46c0      	nop			; (mov r8, r8)
 8005538:	46bd      	mov	sp, r7
 800553a:	b006      	add	sp, #24
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	223c      	movs	r2, #60	; 0x3c
 800554e:	5c9b      	ldrb	r3, [r3, r2]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d101      	bne.n	8005558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005554:	2302      	movs	r3, #2
 8005556:	e04f      	b.n	80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	223c      	movs	r2, #60	; 0x3c
 800555c:	2101      	movs	r1, #1
 800555e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	223d      	movs	r2, #61	; 0x3d
 8005564:	2102      	movs	r1, #2
 8005566:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a20      	ldr	r2, [pc, #128]	; (8005600 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d108      	bne.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4a1f      	ldr	r2, [pc, #124]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005586:	4013      	ands	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4313      	orrs	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2270      	movs	r2, #112	; 0x70
 8005598:	4393      	bics	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a13      	ldr	r2, [pc, #76]	; (8005600 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d009      	beq.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a12      	ldr	r2, [pc, #72]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d004      	beq.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a11      	ldr	r2, [pc, #68]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d10c      	bne.n	80055e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2280      	movs	r2, #128	; 0x80
 80055d0:	4393      	bics	r3, r2
 80055d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	223d      	movs	r2, #61	; 0x3d
 80055ea:	2101      	movs	r1, #1
 80055ec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	223c      	movs	r2, #60	; 0x3c
 80055f2:	2100      	movs	r1, #0
 80055f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	0018      	movs	r0, r3
 80055fa:	46bd      	mov	sp, r7
 80055fc:	b004      	add	sp, #16
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40012c00 	.word	0x40012c00
 8005604:	ff0fffff 	.word	0xff0fffff
 8005608:	40000400 	.word	0x40000400
 800560c:	40014000 	.word	0x40014000

08005610 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	223c      	movs	r2, #60	; 0x3c
 8005622:	5c9b      	ldrb	r3, [r3, r2]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d101      	bne.n	800562c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005628:	2302      	movs	r3, #2
 800562a:	e079      	b.n	8005720 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	223c      	movs	r2, #60	; 0x3c
 8005630:	2101      	movs	r1, #1
 8005632:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	22ff      	movs	r2, #255	; 0xff
 8005638:	4393      	bics	r3, r2
 800563a:	001a      	movs	r2, r3
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	4313      	orrs	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4a38      	ldr	r2, [pc, #224]	; (8005728 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005648:	401a      	ands	r2, r3
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	4313      	orrs	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4a35      	ldr	r2, [pc, #212]	; (800572c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005656:	401a      	ands	r2, r3
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4a33      	ldr	r2, [pc, #204]	; (8005730 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005664:	401a      	ands	r2, r3
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4a30      	ldr	r2, [pc, #192]	; (8005734 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005672:	401a      	ands	r2, r3
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4a2e      	ldr	r2, [pc, #184]	; (8005738 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005680:	401a      	ands	r2, r3
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4a2b      	ldr	r2, [pc, #172]	; (800573c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800568e:	401a      	ands	r2, r3
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	4313      	orrs	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4a29      	ldr	r2, [pc, #164]	; (8005740 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800569c:	401a      	ands	r2, r3
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	041b      	lsls	r3, r3, #16
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a25      	ldr	r2, [pc, #148]	; (8005744 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d106      	bne.n	80056c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4a24      	ldr	r2, [pc, #144]	; (8005748 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80056b6:	401a      	ands	r2, r3
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	4313      	orrs	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a1f      	ldr	r2, [pc, #124]	; (8005744 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d121      	bne.n	800570e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4a1f      	ldr	r2, [pc, #124]	; (800574c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80056ce:	401a      	ands	r2, r3
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d4:	051b      	lsls	r3, r3, #20
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4a1c      	ldr	r2, [pc, #112]	; (8005750 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80056de:	401a      	ands	r2, r3
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4a1a      	ldr	r2, [pc, #104]	; (8005754 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80056ec:	401a      	ands	r2, r3
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	4313      	orrs	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a12      	ldr	r2, [pc, #72]	; (8005744 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d106      	bne.n	800570e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4a15      	ldr	r2, [pc, #84]	; (8005758 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8005704:	401a      	ands	r2, r3
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	223c      	movs	r2, #60	; 0x3c
 800571a:	2100      	movs	r1, #0
 800571c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	0018      	movs	r0, r3
 8005722:	46bd      	mov	sp, r7
 8005724:	b004      	add	sp, #16
 8005726:	bd80      	pop	{r7, pc}
 8005728:	fffffcff 	.word	0xfffffcff
 800572c:	fffffbff 	.word	0xfffffbff
 8005730:	fffff7ff 	.word	0xfffff7ff
 8005734:	ffffefff 	.word	0xffffefff
 8005738:	ffffdfff 	.word	0xffffdfff
 800573c:	ffffbfff 	.word	0xffffbfff
 8005740:	fff0ffff 	.word	0xfff0ffff
 8005744:	40012c00 	.word	0x40012c00
 8005748:	efffffff 	.word	0xefffffff
 800574c:	ff0fffff 	.word	0xff0fffff
 8005750:	feffffff 	.word	0xfeffffff
 8005754:	fdffffff 	.word	0xfdffffff
 8005758:	dfffffff 	.word	0xdfffffff

0800575c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005764:	46c0      	nop			; (mov r8, r8)
 8005766:	46bd      	mov	sp, r7
 8005768:	b002      	add	sp, #8
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005774:	46c0      	nop			; (mov r8, r8)
 8005776:	46bd      	mov	sp, r7
 8005778:	b002      	add	sp, #8
 800577a:	bd80      	pop	{r7, pc}

0800577c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005784:	46c0      	nop			; (mov r8, r8)
 8005786:	46bd      	mov	sp, r7
 8005788:	b002      	add	sp, #8
 800578a:	bd80      	pop	{r7, pc}

0800578c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e046      	b.n	800582c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2288      	movs	r2, #136	; 0x88
 80057a2:	589b      	ldr	r3, [r3, r2]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d107      	bne.n	80057b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2284      	movs	r2, #132	; 0x84
 80057ac:	2100      	movs	r1, #0
 80057ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	0018      	movs	r0, r3
 80057b4:	f7fc ff08 	bl	80025c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2288      	movs	r2, #136	; 0x88
 80057bc:	2124      	movs	r1, #36	; 0x24
 80057be:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2101      	movs	r1, #1
 80057cc:	438a      	bics	r2, r1
 80057ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	0018      	movs	r0, r3
 80057d4:	f000 fc0e 	bl	8005ff4 <UART_SetConfig>
 80057d8:	0003      	movs	r3, r0
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d101      	bne.n	80057e2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e024      	b.n	800582c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	0018      	movs	r0, r3
 80057ee:	f000 fda5 	bl	800633c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	490d      	ldr	r1, [pc, #52]	; (8005834 <HAL_UART_Init+0xa8>)
 80057fe:	400a      	ands	r2, r1
 8005800:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	212a      	movs	r1, #42	; 0x2a
 800580e:	438a      	bics	r2, r1
 8005810:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2101      	movs	r1, #1
 800581e:	430a      	orrs	r2, r1
 8005820:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	0018      	movs	r0, r3
 8005826:	f000 fe3d 	bl	80064a4 <UART_CheckIdleState>
 800582a:	0003      	movs	r3, r0
}
 800582c:	0018      	movs	r0, r3
 800582e:	46bd      	mov	sp, r7
 8005830:	b002      	add	sp, #8
 8005832:	bd80      	pop	{r7, pc}
 8005834:	ffffb7ff 	.word	0xffffb7ff

08005838 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08a      	sub	sp, #40	; 0x28
 800583c:	af02      	add	r7, sp, #8
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	603b      	str	r3, [r7, #0]
 8005844:	1dbb      	adds	r3, r7, #6
 8005846:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2288      	movs	r2, #136	; 0x88
 800584c:	589b      	ldr	r3, [r3, r2]
 800584e:	2b20      	cmp	r3, #32
 8005850:	d000      	beq.n	8005854 <HAL_UART_Transmit+0x1c>
 8005852:	e088      	b.n	8005966 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_UART_Transmit+0x2a>
 800585a:	1dbb      	adds	r3, r7, #6
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e080      	b.n	8005968 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	2380      	movs	r3, #128	; 0x80
 800586c:	015b      	lsls	r3, r3, #5
 800586e:	429a      	cmp	r2, r3
 8005870:	d109      	bne.n	8005886 <HAL_UART_Transmit+0x4e>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d105      	bne.n	8005886 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2201      	movs	r2, #1
 800587e:	4013      	ands	r3, r2
 8005880:	d001      	beq.n	8005886 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e070      	b.n	8005968 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2290      	movs	r2, #144	; 0x90
 800588a:	2100      	movs	r1, #0
 800588c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2288      	movs	r2, #136	; 0x88
 8005892:	2121      	movs	r1, #33	; 0x21
 8005894:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005896:	f7fc fff1 	bl	800287c <HAL_GetTick>
 800589a:	0003      	movs	r3, r0
 800589c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	1dba      	adds	r2, r7, #6
 80058a2:	2154      	movs	r1, #84	; 0x54
 80058a4:	8812      	ldrh	r2, [r2, #0]
 80058a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	1dba      	adds	r2, r7, #6
 80058ac:	2156      	movs	r1, #86	; 0x56
 80058ae:	8812      	ldrh	r2, [r2, #0]
 80058b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	2380      	movs	r3, #128	; 0x80
 80058b8:	015b      	lsls	r3, r3, #5
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d108      	bne.n	80058d0 <HAL_UART_Transmit+0x98>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d104      	bne.n	80058d0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80058c6:	2300      	movs	r3, #0
 80058c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	61bb      	str	r3, [r7, #24]
 80058ce:	e003      	b.n	80058d8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058d4:	2300      	movs	r3, #0
 80058d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058d8:	e02c      	b.n	8005934 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	0013      	movs	r3, r2
 80058e4:	2200      	movs	r2, #0
 80058e6:	2180      	movs	r1, #128	; 0x80
 80058e8:	f000 fe2a 	bl	8006540 <UART_WaitOnFlagUntilTimeout>
 80058ec:	1e03      	subs	r3, r0, #0
 80058ee:	d001      	beq.n	80058f4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e039      	b.n	8005968 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10b      	bne.n	8005912 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	001a      	movs	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	05d2      	lsls	r2, r2, #23
 8005906:	0dd2      	lsrs	r2, r2, #23
 8005908:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	3302      	adds	r3, #2
 800590e:	61bb      	str	r3, [r7, #24]
 8005910:	e007      	b.n	8005922 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	781a      	ldrb	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	3301      	adds	r3, #1
 8005920:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2256      	movs	r2, #86	; 0x56
 8005926:	5a9b      	ldrh	r3, [r3, r2]
 8005928:	b29b      	uxth	r3, r3
 800592a:	3b01      	subs	r3, #1
 800592c:	b299      	uxth	r1, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2256      	movs	r2, #86	; 0x56
 8005932:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2256      	movs	r2, #86	; 0x56
 8005938:	5a9b      	ldrh	r3, [r3, r2]
 800593a:	b29b      	uxth	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1cc      	bne.n	80058da <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	0013      	movs	r3, r2
 800594a:	2200      	movs	r2, #0
 800594c:	2140      	movs	r1, #64	; 0x40
 800594e:	f000 fdf7 	bl	8006540 <UART_WaitOnFlagUntilTimeout>
 8005952:	1e03      	subs	r3, r0, #0
 8005954:	d001      	beq.n	800595a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e006      	b.n	8005968 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2288      	movs	r2, #136	; 0x88
 800595e:	2120      	movs	r1, #32
 8005960:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	e000      	b.n	8005968 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8005966:	2302      	movs	r3, #2
  }
}
 8005968:	0018      	movs	r0, r3
 800596a:	46bd      	mov	sp, r7
 800596c:	b008      	add	sp, #32
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005970:	b5b0      	push	{r4, r5, r7, lr}
 8005972:	b0aa      	sub	sp, #168	; 0xa8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	22a4      	movs	r2, #164	; 0xa4
 8005980:	18b9      	adds	r1, r7, r2
 8005982:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	20a0      	movs	r0, #160	; 0xa0
 800598c:	1839      	adds	r1, r7, r0
 800598e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	249c      	movs	r4, #156	; 0x9c
 8005998:	1939      	adds	r1, r7, r4
 800599a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800599c:	0011      	movs	r1, r2
 800599e:	18bb      	adds	r3, r7, r2
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4aa2      	ldr	r2, [pc, #648]	; (8005c2c <HAL_UART_IRQHandler+0x2bc>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	2298      	movs	r2, #152	; 0x98
 80059a8:	18bd      	adds	r5, r7, r2
 80059aa:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80059ac:	18bb      	adds	r3, r7, r2
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d11a      	bne.n	80059ea <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80059b4:	187b      	adds	r3, r7, r1
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2220      	movs	r2, #32
 80059ba:	4013      	ands	r3, r2
 80059bc:	d015      	beq.n	80059ea <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80059be:	183b      	adds	r3, r7, r0
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2220      	movs	r2, #32
 80059c4:	4013      	ands	r3, r2
 80059c6:	d105      	bne.n	80059d4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80059c8:	193b      	adds	r3, r7, r4
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	2380      	movs	r3, #128	; 0x80
 80059ce:	055b      	lsls	r3, r3, #21
 80059d0:	4013      	ands	r3, r2
 80059d2:	d00a      	beq.n	80059ea <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d100      	bne.n	80059de <HAL_UART_IRQHandler+0x6e>
 80059dc:	e2dc      	b.n	8005f98 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	0010      	movs	r0, r2
 80059e6:	4798      	blx	r3
      }
      return;
 80059e8:	e2d6      	b.n	8005f98 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80059ea:	2398      	movs	r3, #152	; 0x98
 80059ec:	18fb      	adds	r3, r7, r3
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d100      	bne.n	80059f6 <HAL_UART_IRQHandler+0x86>
 80059f4:	e122      	b.n	8005c3c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80059f6:	239c      	movs	r3, #156	; 0x9c
 80059f8:	18fb      	adds	r3, r7, r3
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a8c      	ldr	r2, [pc, #560]	; (8005c30 <HAL_UART_IRQHandler+0x2c0>)
 80059fe:	4013      	ands	r3, r2
 8005a00:	d106      	bne.n	8005a10 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005a02:	23a0      	movs	r3, #160	; 0xa0
 8005a04:	18fb      	adds	r3, r7, r3
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a8a      	ldr	r2, [pc, #552]	; (8005c34 <HAL_UART_IRQHandler+0x2c4>)
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	d100      	bne.n	8005a10 <HAL_UART_IRQHandler+0xa0>
 8005a0e:	e115      	b.n	8005c3c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a10:	23a4      	movs	r3, #164	; 0xa4
 8005a12:	18fb      	adds	r3, r7, r3
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2201      	movs	r2, #1
 8005a18:	4013      	ands	r3, r2
 8005a1a:	d012      	beq.n	8005a42 <HAL_UART_IRQHandler+0xd2>
 8005a1c:	23a0      	movs	r3, #160	; 0xa0
 8005a1e:	18fb      	adds	r3, r7, r3
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	2380      	movs	r3, #128	; 0x80
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	4013      	ands	r3, r2
 8005a28:	d00b      	beq.n	8005a42 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2290      	movs	r2, #144	; 0x90
 8005a36:	589b      	ldr	r3, [r3, r2]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2190      	movs	r1, #144	; 0x90
 8005a40:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a42:	23a4      	movs	r3, #164	; 0xa4
 8005a44:	18fb      	adds	r3, r7, r3
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2202      	movs	r2, #2
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	d011      	beq.n	8005a72 <HAL_UART_IRQHandler+0x102>
 8005a4e:	239c      	movs	r3, #156	; 0x9c
 8005a50:	18fb      	adds	r3, r7, r3
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2201      	movs	r2, #1
 8005a56:	4013      	ands	r3, r2
 8005a58:	d00b      	beq.n	8005a72 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2290      	movs	r2, #144	; 0x90
 8005a66:	589b      	ldr	r3, [r3, r2]
 8005a68:	2204      	movs	r2, #4
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2190      	movs	r1, #144	; 0x90
 8005a70:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a72:	23a4      	movs	r3, #164	; 0xa4
 8005a74:	18fb      	adds	r3, r7, r3
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2204      	movs	r2, #4
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	d011      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x132>
 8005a7e:	239c      	movs	r3, #156	; 0x9c
 8005a80:	18fb      	adds	r3, r7, r3
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2201      	movs	r2, #1
 8005a86:	4013      	ands	r3, r2
 8005a88:	d00b      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2204      	movs	r2, #4
 8005a90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2290      	movs	r2, #144	; 0x90
 8005a96:	589b      	ldr	r3, [r3, r2]
 8005a98:	2202      	movs	r2, #2
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2190      	movs	r1, #144	; 0x90
 8005aa0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005aa2:	23a4      	movs	r3, #164	; 0xa4
 8005aa4:	18fb      	adds	r3, r7, r3
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	4013      	ands	r3, r2
 8005aac:	d017      	beq.n	8005ade <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005aae:	23a0      	movs	r3, #160	; 0xa0
 8005ab0:	18fb      	adds	r3, r7, r3
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	d105      	bne.n	8005ac6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005aba:	239c      	movs	r3, #156	; 0x9c
 8005abc:	18fb      	adds	r3, r7, r3
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a5b      	ldr	r2, [pc, #364]	; (8005c30 <HAL_UART_IRQHandler+0x2c0>)
 8005ac2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ac4:	d00b      	beq.n	8005ade <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2208      	movs	r2, #8
 8005acc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2290      	movs	r2, #144	; 0x90
 8005ad2:	589b      	ldr	r3, [r3, r2]
 8005ad4:	2208      	movs	r2, #8
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2190      	movs	r1, #144	; 0x90
 8005adc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ade:	23a4      	movs	r3, #164	; 0xa4
 8005ae0:	18fb      	adds	r3, r7, r3
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	2380      	movs	r3, #128	; 0x80
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	4013      	ands	r3, r2
 8005aea:	d013      	beq.n	8005b14 <HAL_UART_IRQHandler+0x1a4>
 8005aec:	23a0      	movs	r3, #160	; 0xa0
 8005aee:	18fb      	adds	r3, r7, r3
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	2380      	movs	r3, #128	; 0x80
 8005af4:	04db      	lsls	r3, r3, #19
 8005af6:	4013      	ands	r3, r2
 8005af8:	d00c      	beq.n	8005b14 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2280      	movs	r2, #128	; 0x80
 8005b00:	0112      	lsls	r2, r2, #4
 8005b02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2290      	movs	r2, #144	; 0x90
 8005b08:	589b      	ldr	r3, [r3, r2]
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2190      	movs	r1, #144	; 0x90
 8005b12:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2290      	movs	r2, #144	; 0x90
 8005b18:	589b      	ldr	r3, [r3, r2]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d100      	bne.n	8005b20 <HAL_UART_IRQHandler+0x1b0>
 8005b1e:	e23d      	b.n	8005f9c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b20:	23a4      	movs	r3, #164	; 0xa4
 8005b22:	18fb      	adds	r3, r7, r3
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2220      	movs	r2, #32
 8005b28:	4013      	ands	r3, r2
 8005b2a:	d015      	beq.n	8005b58 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b2c:	23a0      	movs	r3, #160	; 0xa0
 8005b2e:	18fb      	adds	r3, r7, r3
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2220      	movs	r2, #32
 8005b34:	4013      	ands	r3, r2
 8005b36:	d106      	bne.n	8005b46 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b38:	239c      	movs	r3, #156	; 0x9c
 8005b3a:	18fb      	adds	r3, r7, r3
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	2380      	movs	r3, #128	; 0x80
 8005b40:	055b      	lsls	r3, r3, #21
 8005b42:	4013      	ands	r3, r2
 8005b44:	d008      	beq.n	8005b58 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d004      	beq.n	8005b58 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	0010      	movs	r0, r2
 8005b56:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2290      	movs	r2, #144	; 0x90
 8005b5c:	589b      	ldr	r3, [r3, r2]
 8005b5e:	2194      	movs	r1, #148	; 0x94
 8005b60:	187a      	adds	r2, r7, r1
 8005b62:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	2240      	movs	r2, #64	; 0x40
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	2b40      	cmp	r3, #64	; 0x40
 8005b70:	d004      	beq.n	8005b7c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b72:	187b      	adds	r3, r7, r1
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2228      	movs	r2, #40	; 0x28
 8005b78:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b7a:	d04c      	beq.n	8005c16 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	0018      	movs	r0, r3
 8005b80:	f000 fda6 	bl	80066d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	2240      	movs	r2, #64	; 0x40
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	2b40      	cmp	r3, #64	; 0x40
 8005b90:	d13c      	bne.n	8005c0c <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b92:	f3ef 8310 	mrs	r3, PRIMASK
 8005b96:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005b98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b9a:	2090      	movs	r0, #144	; 0x90
 8005b9c:	183a      	adds	r2, r7, r0
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ba6:	f383 8810 	msr	PRIMASK, r3
}
 8005baa:	46c0      	nop			; (mov r8, r8)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689a      	ldr	r2, [r3, #8]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2140      	movs	r1, #64	; 0x40
 8005bb8:	438a      	bics	r2, r1
 8005bba:	609a      	str	r2, [r3, #8]
 8005bbc:	183b      	adds	r3, r7, r0
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bc4:	f383 8810 	msr	PRIMASK, r3
}
 8005bc8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2280      	movs	r2, #128	; 0x80
 8005bce:	589b      	ldr	r3, [r3, r2]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d016      	beq.n	8005c02 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2280      	movs	r2, #128	; 0x80
 8005bd8:	589b      	ldr	r3, [r3, r2]
 8005bda:	4a17      	ldr	r2, [pc, #92]	; (8005c38 <HAL_UART_IRQHandler+0x2c8>)
 8005bdc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2280      	movs	r2, #128	; 0x80
 8005be2:	589b      	ldr	r3, [r3, r2]
 8005be4:	0018      	movs	r0, r3
 8005be6:	f7fc ffed 	bl	8002bc4 <HAL_DMA_Abort_IT>
 8005bea:	1e03      	subs	r3, r0, #0
 8005bec:	d01c      	beq.n	8005c28 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2280      	movs	r2, #128	; 0x80
 8005bf2:	589b      	ldr	r3, [r3, r2]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	2180      	movs	r1, #128	; 0x80
 8005bfa:	5852      	ldr	r2, [r2, r1]
 8005bfc:	0010      	movs	r0, r2
 8005bfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c00:	e012      	b.n	8005c28 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	0018      	movs	r0, r3
 8005c06:	f000 f9e1 	bl	8005fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c0a:	e00d      	b.n	8005c28 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	0018      	movs	r0, r3
 8005c10:	f000 f9dc 	bl	8005fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c14:	e008      	b.n	8005c28 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	0018      	movs	r0, r3
 8005c1a:	f000 f9d7 	bl	8005fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2290      	movs	r2, #144	; 0x90
 8005c22:	2100      	movs	r1, #0
 8005c24:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005c26:	e1b9      	b.n	8005f9c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c28:	46c0      	nop			; (mov r8, r8)
    return;
 8005c2a:	e1b7      	b.n	8005f9c <HAL_UART_IRQHandler+0x62c>
 8005c2c:	0000080f 	.word	0x0000080f
 8005c30:	10000001 	.word	0x10000001
 8005c34:	04000120 	.word	0x04000120
 8005c38:	0800679d 	.word	0x0800679d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d000      	beq.n	8005c46 <HAL_UART_IRQHandler+0x2d6>
 8005c44:	e13e      	b.n	8005ec4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c46:	23a4      	movs	r3, #164	; 0xa4
 8005c48:	18fb      	adds	r3, r7, r3
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2210      	movs	r2, #16
 8005c4e:	4013      	ands	r3, r2
 8005c50:	d100      	bne.n	8005c54 <HAL_UART_IRQHandler+0x2e4>
 8005c52:	e137      	b.n	8005ec4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c54:	23a0      	movs	r3, #160	; 0xa0
 8005c56:	18fb      	adds	r3, r7, r3
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2210      	movs	r2, #16
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	d100      	bne.n	8005c62 <HAL_UART_IRQHandler+0x2f2>
 8005c60:	e130      	b.n	8005ec4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2210      	movs	r2, #16
 8005c68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	2240      	movs	r2, #64	; 0x40
 8005c72:	4013      	ands	r3, r2
 8005c74:	2b40      	cmp	r3, #64	; 0x40
 8005c76:	d000      	beq.n	8005c7a <HAL_UART_IRQHandler+0x30a>
 8005c78:	e0a4      	b.n	8005dc4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2280      	movs	r2, #128	; 0x80
 8005c7e:	589b      	ldr	r3, [r3, r2]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	217e      	movs	r1, #126	; 0x7e
 8005c86:	187b      	adds	r3, r7, r1
 8005c88:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005c8a:	187b      	adds	r3, r7, r1
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d100      	bne.n	8005c94 <HAL_UART_IRQHandler+0x324>
 8005c92:	e185      	b.n	8005fa0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	225c      	movs	r2, #92	; 0x5c
 8005c98:	5a9b      	ldrh	r3, [r3, r2]
 8005c9a:	187a      	adds	r2, r7, r1
 8005c9c:	8812      	ldrh	r2, [r2, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d300      	bcc.n	8005ca4 <HAL_UART_IRQHandler+0x334>
 8005ca2:	e17d      	b.n	8005fa0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	187a      	adds	r2, r7, r1
 8005ca8:	215e      	movs	r1, #94	; 0x5e
 8005caa:	8812      	ldrh	r2, [r2, #0]
 8005cac:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2280      	movs	r2, #128	; 0x80
 8005cb2:	589b      	ldr	r3, [r3, r2]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d170      	bne.n	8005da0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cbe:	f3ef 8310 	mrs	r3, PRIMASK
 8005cc2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cc6:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cc8:	2301      	movs	r3, #1
 8005cca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cce:	f383 8810 	msr	PRIMASK, r3
}
 8005cd2:	46c0      	nop			; (mov r8, r8)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	49b4      	ldr	r1, [pc, #720]	; (8005fb0 <HAL_UART_IRQHandler+0x640>)
 8005ce0:	400a      	ands	r2, r1
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cea:	f383 8810 	msr	PRIMASK, r3
}
 8005cee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8005cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf8:	677b      	str	r3, [r7, #116]	; 0x74
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d00:	f383 8810 	msr	PRIMASK, r3
}
 8005d04:	46c0      	nop			; (mov r8, r8)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2101      	movs	r1, #1
 8005d12:	438a      	bics	r2, r1
 8005d14:	609a      	str	r2, [r3, #8]
 8005d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d18:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d1c:	f383 8810 	msr	PRIMASK, r3
}
 8005d20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d22:	f3ef 8310 	mrs	r3, PRIMASK
 8005d26:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d2a:	673b      	str	r3, [r7, #112]	; 0x70
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d32:	f383 8810 	msr	PRIMASK, r3
}
 8005d36:	46c0      	nop			; (mov r8, r8)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689a      	ldr	r2, [r3, #8]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2140      	movs	r1, #64	; 0x40
 8005d44:	438a      	bics	r2, r1
 8005d46:	609a      	str	r2, [r3, #8]
 8005d48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d4a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d4e:	f383 8810 	msr	PRIMASK, r3
}
 8005d52:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	228c      	movs	r2, #140	; 0x8c
 8005d58:	2120      	movs	r1, #32
 8005d5a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d62:	f3ef 8310 	mrs	r3, PRIMASK
 8005d66:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d72:	f383 8810 	msr	PRIMASK, r3
}
 8005d76:	46c0      	nop			; (mov r8, r8)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2110      	movs	r1, #16
 8005d84:	438a      	bics	r2, r1
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d8e:	f383 8810 	msr	PRIMASK, r3
}
 8005d92:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2280      	movs	r2, #128	; 0x80
 8005d98:	589b      	ldr	r3, [r3, r2]
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	f7fc feb0 	bl	8002b00 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	225c      	movs	r2, #92	; 0x5c
 8005daa:	5a9a      	ldrh	r2, [r3, r2]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	215e      	movs	r1, #94	; 0x5e
 8005db0:	5a5b      	ldrh	r3, [r3, r1]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	0011      	movs	r1, r2
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	f000 f90d 	bl	8005fdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005dc2:	e0ed      	b.n	8005fa0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	225c      	movs	r2, #92	; 0x5c
 8005dc8:	5a99      	ldrh	r1, [r3, r2]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	225e      	movs	r2, #94	; 0x5e
 8005dce:	5a9b      	ldrh	r3, [r3, r2]
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	208e      	movs	r0, #142	; 0x8e
 8005dd4:	183b      	adds	r3, r7, r0
 8005dd6:	1a8a      	subs	r2, r1, r2
 8005dd8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	225e      	movs	r2, #94	; 0x5e
 8005dde:	5a9b      	ldrh	r3, [r3, r2]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d100      	bne.n	8005de8 <HAL_UART_IRQHandler+0x478>
 8005de6:	e0dd      	b.n	8005fa4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8005de8:	183b      	adds	r3, r7, r0
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d100      	bne.n	8005df2 <HAL_UART_IRQHandler+0x482>
 8005df0:	e0d8      	b.n	8005fa4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005df2:	f3ef 8310 	mrs	r3, PRIMASK
 8005df6:	60fb      	str	r3, [r7, #12]
  return(result);
 8005df8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dfa:	2488      	movs	r4, #136	; 0x88
 8005dfc:	193a      	adds	r2, r7, r4
 8005dfe:	6013      	str	r3, [r2, #0]
 8005e00:	2301      	movs	r3, #1
 8005e02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f383 8810 	msr	PRIMASK, r3
}
 8005e0a:	46c0      	nop			; (mov r8, r8)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4967      	ldr	r1, [pc, #412]	; (8005fb4 <HAL_UART_IRQHandler+0x644>)
 8005e18:	400a      	ands	r2, r1
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	193b      	adds	r3, r7, r4
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f383 8810 	msr	PRIMASK, r3
}
 8005e28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e30:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e32:	2484      	movs	r4, #132	; 0x84
 8005e34:	193a      	adds	r2, r7, r4
 8005e36:	6013      	str	r3, [r2, #0]
 8005e38:	2301      	movs	r3, #1
 8005e3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	f383 8810 	msr	PRIMASK, r3
}
 8005e42:	46c0      	nop			; (mov r8, r8)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689a      	ldr	r2, [r3, #8]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	495a      	ldr	r1, [pc, #360]	; (8005fb8 <HAL_UART_IRQHandler+0x648>)
 8005e50:	400a      	ands	r2, r1
 8005e52:	609a      	str	r2, [r3, #8]
 8005e54:	193b      	adds	r3, r7, r4
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	f383 8810 	msr	PRIMASK, r3
}
 8005e60:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	228c      	movs	r2, #140	; 0x8c
 8005e66:	2120      	movs	r1, #32
 8005e68:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e76:	f3ef 8310 	mrs	r3, PRIMASK
 8005e7a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e7e:	2480      	movs	r4, #128	; 0x80
 8005e80:	193a      	adds	r2, r7, r4
 8005e82:	6013      	str	r3, [r2, #0]
 8005e84:	2301      	movs	r3, #1
 8005e86:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8a:	f383 8810 	msr	PRIMASK, r3
}
 8005e8e:	46c0      	nop			; (mov r8, r8)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2110      	movs	r1, #16
 8005e9c:	438a      	bics	r2, r1
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	193b      	adds	r3, r7, r4
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea8:	f383 8810 	msr	PRIMASK, r3
}
 8005eac:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005eb4:	183b      	adds	r3, r7, r0
 8005eb6:	881a      	ldrh	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	0011      	movs	r1, r2
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	f000 f88d 	bl	8005fdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ec2:	e06f      	b.n	8005fa4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ec4:	23a4      	movs	r3, #164	; 0xa4
 8005ec6:	18fb      	adds	r3, r7, r3
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	2380      	movs	r3, #128	; 0x80
 8005ecc:	035b      	lsls	r3, r3, #13
 8005ece:	4013      	ands	r3, r2
 8005ed0:	d010      	beq.n	8005ef4 <HAL_UART_IRQHandler+0x584>
 8005ed2:	239c      	movs	r3, #156	; 0x9c
 8005ed4:	18fb      	adds	r3, r7, r3
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	2380      	movs	r3, #128	; 0x80
 8005eda:	03db      	lsls	r3, r3, #15
 8005edc:	4013      	ands	r3, r2
 8005ede:	d009      	beq.n	8005ef4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2280      	movs	r2, #128	; 0x80
 8005ee6:	0352      	lsls	r2, r2, #13
 8005ee8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	0018      	movs	r0, r3
 8005eee:	f000 fc98 	bl	8006822 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ef2:	e05a      	b.n	8005faa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005ef4:	23a4      	movs	r3, #164	; 0xa4
 8005ef6:	18fb      	adds	r3, r7, r3
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2280      	movs	r2, #128	; 0x80
 8005efc:	4013      	ands	r3, r2
 8005efe:	d016      	beq.n	8005f2e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005f00:	23a0      	movs	r3, #160	; 0xa0
 8005f02:	18fb      	adds	r3, r7, r3
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2280      	movs	r2, #128	; 0x80
 8005f08:	4013      	ands	r3, r2
 8005f0a:	d106      	bne.n	8005f1a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005f0c:	239c      	movs	r3, #156	; 0x9c
 8005f0e:	18fb      	adds	r3, r7, r3
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	2380      	movs	r3, #128	; 0x80
 8005f14:	041b      	lsls	r3, r3, #16
 8005f16:	4013      	ands	r3, r2
 8005f18:	d009      	beq.n	8005f2e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d042      	beq.n	8005fa8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	0010      	movs	r0, r2
 8005f2a:	4798      	blx	r3
    }
    return;
 8005f2c:	e03c      	b.n	8005fa8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f2e:	23a4      	movs	r3, #164	; 0xa4
 8005f30:	18fb      	adds	r3, r7, r3
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2240      	movs	r2, #64	; 0x40
 8005f36:	4013      	ands	r3, r2
 8005f38:	d00a      	beq.n	8005f50 <HAL_UART_IRQHandler+0x5e0>
 8005f3a:	23a0      	movs	r3, #160	; 0xa0
 8005f3c:	18fb      	adds	r3, r7, r3
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2240      	movs	r2, #64	; 0x40
 8005f42:	4013      	ands	r3, r2
 8005f44:	d004      	beq.n	8005f50 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	0018      	movs	r0, r3
 8005f4a:	f000 fc3e 	bl	80067ca <UART_EndTransmit_IT>
    return;
 8005f4e:	e02c      	b.n	8005faa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005f50:	23a4      	movs	r3, #164	; 0xa4
 8005f52:	18fb      	adds	r3, r7, r3
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	2380      	movs	r3, #128	; 0x80
 8005f58:	041b      	lsls	r3, r3, #16
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	d00b      	beq.n	8005f76 <HAL_UART_IRQHandler+0x606>
 8005f5e:	23a0      	movs	r3, #160	; 0xa0
 8005f60:	18fb      	adds	r3, r7, r3
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	2380      	movs	r3, #128	; 0x80
 8005f66:	05db      	lsls	r3, r3, #23
 8005f68:	4013      	ands	r3, r2
 8005f6a:	d004      	beq.n	8005f76 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f000 fc67 	bl	8006842 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f74:	e019      	b.n	8005faa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005f76:	23a4      	movs	r3, #164	; 0xa4
 8005f78:	18fb      	adds	r3, r7, r3
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	2380      	movs	r3, #128	; 0x80
 8005f7e:	045b      	lsls	r3, r3, #17
 8005f80:	4013      	ands	r3, r2
 8005f82:	d012      	beq.n	8005faa <HAL_UART_IRQHandler+0x63a>
 8005f84:	23a0      	movs	r3, #160	; 0xa0
 8005f86:	18fb      	adds	r3, r7, r3
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	da0d      	bge.n	8005faa <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	0018      	movs	r0, r3
 8005f92:	f000 fc4e 	bl	8006832 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f96:	e008      	b.n	8005faa <HAL_UART_IRQHandler+0x63a>
      return;
 8005f98:	46c0      	nop			; (mov r8, r8)
 8005f9a:	e006      	b.n	8005faa <HAL_UART_IRQHandler+0x63a>
    return;
 8005f9c:	46c0      	nop			; (mov r8, r8)
 8005f9e:	e004      	b.n	8005faa <HAL_UART_IRQHandler+0x63a>
      return;
 8005fa0:	46c0      	nop			; (mov r8, r8)
 8005fa2:	e002      	b.n	8005faa <HAL_UART_IRQHandler+0x63a>
      return;
 8005fa4:	46c0      	nop			; (mov r8, r8)
 8005fa6:	e000      	b.n	8005faa <HAL_UART_IRQHandler+0x63a>
    return;
 8005fa8:	46c0      	nop			; (mov r8, r8)
  }
}
 8005faa:	46bd      	mov	sp, r7
 8005fac:	b02a      	add	sp, #168	; 0xa8
 8005fae:	bdb0      	pop	{r4, r5, r7, pc}
 8005fb0:	fffffeff 	.word	0xfffffeff
 8005fb4:	fffffedf 	.word	0xfffffedf
 8005fb8:	effffffe 	.word	0xeffffffe

08005fbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005fc4:	46c0      	nop			; (mov r8, r8)
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	b002      	add	sp, #8
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005fd4:	46c0      	nop			; (mov r8, r8)
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	b002      	add	sp, #8
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	000a      	movs	r2, r1
 8005fe6:	1cbb      	adds	r3, r7, #2
 8005fe8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fea:	46c0      	nop			; (mov r8, r8)
 8005fec:	46bd      	mov	sp, r7
 8005fee:	b002      	add	sp, #8
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b088      	sub	sp, #32
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ffc:	231a      	movs	r3, #26
 8005ffe:	18fb      	adds	r3, r7, r3
 8006000:	2200      	movs	r2, #0
 8006002:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	431a      	orrs	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	4313      	orrs	r3, r2
 800601a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4abc      	ldr	r2, [pc, #752]	; (8006314 <UART_SetConfig+0x320>)
 8006024:	4013      	ands	r3, r2
 8006026:	0019      	movs	r1, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	69fa      	ldr	r2, [r7, #28]
 800602e:	430a      	orrs	r2, r1
 8006030:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	4ab7      	ldr	r2, [pc, #732]	; (8006318 <UART_SetConfig+0x324>)
 800603a:	4013      	ands	r3, r2
 800603c:	0019      	movs	r1, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	69fa      	ldr	r2, [r7, #28]
 8006056:	4313      	orrs	r3, r2
 8006058:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	4aae      	ldr	r2, [pc, #696]	; (800631c <UART_SetConfig+0x328>)
 8006062:	4013      	ands	r3, r2
 8006064:	0019      	movs	r1, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	430a      	orrs	r2, r1
 800606e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006076:	220f      	movs	r2, #15
 8006078:	4393      	bics	r3, r2
 800607a:	0019      	movs	r1, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4aa4      	ldr	r2, [pc, #656]	; (8006320 <UART_SetConfig+0x32c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d127      	bne.n	80060e2 <UART_SetConfig+0xee>
 8006092:	4ba4      	ldr	r3, [pc, #656]	; (8006324 <UART_SetConfig+0x330>)
 8006094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006096:	2203      	movs	r2, #3
 8006098:	4013      	ands	r3, r2
 800609a:	2b03      	cmp	r3, #3
 800609c:	d017      	beq.n	80060ce <UART_SetConfig+0xda>
 800609e:	d81b      	bhi.n	80060d8 <UART_SetConfig+0xe4>
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d00a      	beq.n	80060ba <UART_SetConfig+0xc6>
 80060a4:	d818      	bhi.n	80060d8 <UART_SetConfig+0xe4>
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <UART_SetConfig+0xbc>
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d00a      	beq.n	80060c4 <UART_SetConfig+0xd0>
 80060ae:	e013      	b.n	80060d8 <UART_SetConfig+0xe4>
 80060b0:	231b      	movs	r3, #27
 80060b2:	18fb      	adds	r3, r7, r3
 80060b4:	2200      	movs	r2, #0
 80060b6:	701a      	strb	r2, [r3, #0]
 80060b8:	e058      	b.n	800616c <UART_SetConfig+0x178>
 80060ba:	231b      	movs	r3, #27
 80060bc:	18fb      	adds	r3, r7, r3
 80060be:	2202      	movs	r2, #2
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	e053      	b.n	800616c <UART_SetConfig+0x178>
 80060c4:	231b      	movs	r3, #27
 80060c6:	18fb      	adds	r3, r7, r3
 80060c8:	2204      	movs	r2, #4
 80060ca:	701a      	strb	r2, [r3, #0]
 80060cc:	e04e      	b.n	800616c <UART_SetConfig+0x178>
 80060ce:	231b      	movs	r3, #27
 80060d0:	18fb      	adds	r3, r7, r3
 80060d2:	2208      	movs	r2, #8
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	e049      	b.n	800616c <UART_SetConfig+0x178>
 80060d8:	231b      	movs	r3, #27
 80060da:	18fb      	adds	r3, r7, r3
 80060dc:	2210      	movs	r2, #16
 80060de:	701a      	strb	r2, [r3, #0]
 80060e0:	e044      	b.n	800616c <UART_SetConfig+0x178>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a90      	ldr	r2, [pc, #576]	; (8006328 <UART_SetConfig+0x334>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d127      	bne.n	800613c <UART_SetConfig+0x148>
 80060ec:	4b8d      	ldr	r3, [pc, #564]	; (8006324 <UART_SetConfig+0x330>)
 80060ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f0:	220c      	movs	r2, #12
 80060f2:	4013      	ands	r3, r2
 80060f4:	2b0c      	cmp	r3, #12
 80060f6:	d017      	beq.n	8006128 <UART_SetConfig+0x134>
 80060f8:	d81b      	bhi.n	8006132 <UART_SetConfig+0x13e>
 80060fa:	2b08      	cmp	r3, #8
 80060fc:	d00a      	beq.n	8006114 <UART_SetConfig+0x120>
 80060fe:	d818      	bhi.n	8006132 <UART_SetConfig+0x13e>
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <UART_SetConfig+0x116>
 8006104:	2b04      	cmp	r3, #4
 8006106:	d00a      	beq.n	800611e <UART_SetConfig+0x12a>
 8006108:	e013      	b.n	8006132 <UART_SetConfig+0x13e>
 800610a:	231b      	movs	r3, #27
 800610c:	18fb      	adds	r3, r7, r3
 800610e:	2200      	movs	r2, #0
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	e02b      	b.n	800616c <UART_SetConfig+0x178>
 8006114:	231b      	movs	r3, #27
 8006116:	18fb      	adds	r3, r7, r3
 8006118:	2202      	movs	r2, #2
 800611a:	701a      	strb	r2, [r3, #0]
 800611c:	e026      	b.n	800616c <UART_SetConfig+0x178>
 800611e:	231b      	movs	r3, #27
 8006120:	18fb      	adds	r3, r7, r3
 8006122:	2204      	movs	r2, #4
 8006124:	701a      	strb	r2, [r3, #0]
 8006126:	e021      	b.n	800616c <UART_SetConfig+0x178>
 8006128:	231b      	movs	r3, #27
 800612a:	18fb      	adds	r3, r7, r3
 800612c:	2208      	movs	r2, #8
 800612e:	701a      	strb	r2, [r3, #0]
 8006130:	e01c      	b.n	800616c <UART_SetConfig+0x178>
 8006132:	231b      	movs	r3, #27
 8006134:	18fb      	adds	r3, r7, r3
 8006136:	2210      	movs	r2, #16
 8006138:	701a      	strb	r2, [r3, #0]
 800613a:	e017      	b.n	800616c <UART_SetConfig+0x178>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a7a      	ldr	r2, [pc, #488]	; (800632c <UART_SetConfig+0x338>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d104      	bne.n	8006150 <UART_SetConfig+0x15c>
 8006146:	231b      	movs	r3, #27
 8006148:	18fb      	adds	r3, r7, r3
 800614a:	2200      	movs	r2, #0
 800614c:	701a      	strb	r2, [r3, #0]
 800614e:	e00d      	b.n	800616c <UART_SetConfig+0x178>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a76      	ldr	r2, [pc, #472]	; (8006330 <UART_SetConfig+0x33c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d104      	bne.n	8006164 <UART_SetConfig+0x170>
 800615a:	231b      	movs	r3, #27
 800615c:	18fb      	adds	r3, r7, r3
 800615e:	2200      	movs	r2, #0
 8006160:	701a      	strb	r2, [r3, #0]
 8006162:	e003      	b.n	800616c <UART_SetConfig+0x178>
 8006164:	231b      	movs	r3, #27
 8006166:	18fb      	adds	r3, r7, r3
 8006168:	2210      	movs	r2, #16
 800616a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	69da      	ldr	r2, [r3, #28]
 8006170:	2380      	movs	r3, #128	; 0x80
 8006172:	021b      	lsls	r3, r3, #8
 8006174:	429a      	cmp	r2, r3
 8006176:	d000      	beq.n	800617a <UART_SetConfig+0x186>
 8006178:	e065      	b.n	8006246 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800617a:	231b      	movs	r3, #27
 800617c:	18fb      	adds	r3, r7, r3
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2b08      	cmp	r3, #8
 8006182:	d015      	beq.n	80061b0 <UART_SetConfig+0x1bc>
 8006184:	dc18      	bgt.n	80061b8 <UART_SetConfig+0x1c4>
 8006186:	2b04      	cmp	r3, #4
 8006188:	d00d      	beq.n	80061a6 <UART_SetConfig+0x1b2>
 800618a:	dc15      	bgt.n	80061b8 <UART_SetConfig+0x1c4>
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <UART_SetConfig+0x1a2>
 8006190:	2b02      	cmp	r3, #2
 8006192:	d005      	beq.n	80061a0 <UART_SetConfig+0x1ac>
 8006194:	e010      	b.n	80061b8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006196:	f7fd fd3f 	bl	8003c18 <HAL_RCC_GetPCLK1Freq>
 800619a:	0003      	movs	r3, r0
 800619c:	617b      	str	r3, [r7, #20]
        break;
 800619e:	e012      	b.n	80061c6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061a0:	4b64      	ldr	r3, [pc, #400]	; (8006334 <UART_SetConfig+0x340>)
 80061a2:	617b      	str	r3, [r7, #20]
        break;
 80061a4:	e00f      	b.n	80061c6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061a6:	f7fd fcad 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 80061aa:	0003      	movs	r3, r0
 80061ac:	617b      	str	r3, [r7, #20]
        break;
 80061ae:	e00a      	b.n	80061c6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061b0:	2380      	movs	r3, #128	; 0x80
 80061b2:	021b      	lsls	r3, r3, #8
 80061b4:	617b      	str	r3, [r7, #20]
        break;
 80061b6:	e006      	b.n	80061c6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80061bc:	231a      	movs	r3, #26
 80061be:	18fb      	adds	r3, r7, r3
 80061c0:	2201      	movs	r2, #1
 80061c2:	701a      	strb	r2, [r3, #0]
        break;
 80061c4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d100      	bne.n	80061ce <UART_SetConfig+0x1da>
 80061cc:	e08d      	b.n	80062ea <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061d2:	4b59      	ldr	r3, [pc, #356]	; (8006338 <UART_SetConfig+0x344>)
 80061d4:	0052      	lsls	r2, r2, #1
 80061d6:	5ad3      	ldrh	r3, [r2, r3]
 80061d8:	0019      	movs	r1, r3
 80061da:	6978      	ldr	r0, [r7, #20]
 80061dc:	f7f9 ff9e 	bl	800011c <__udivsi3>
 80061e0:	0003      	movs	r3, r0
 80061e2:	005a      	lsls	r2, r3, #1
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	085b      	lsrs	r3, r3, #1
 80061ea:	18d2      	adds	r2, r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	0019      	movs	r1, r3
 80061f2:	0010      	movs	r0, r2
 80061f4:	f7f9 ff92 	bl	800011c <__udivsi3>
 80061f8:	0003      	movs	r3, r0
 80061fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	2b0f      	cmp	r3, #15
 8006200:	d91c      	bls.n	800623c <UART_SetConfig+0x248>
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	2380      	movs	r3, #128	; 0x80
 8006206:	025b      	lsls	r3, r3, #9
 8006208:	429a      	cmp	r2, r3
 800620a:	d217      	bcs.n	800623c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	b29a      	uxth	r2, r3
 8006210:	200e      	movs	r0, #14
 8006212:	183b      	adds	r3, r7, r0
 8006214:	210f      	movs	r1, #15
 8006216:	438a      	bics	r2, r1
 8006218:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	085b      	lsrs	r3, r3, #1
 800621e:	b29b      	uxth	r3, r3
 8006220:	2207      	movs	r2, #7
 8006222:	4013      	ands	r3, r2
 8006224:	b299      	uxth	r1, r3
 8006226:	183b      	adds	r3, r7, r0
 8006228:	183a      	adds	r2, r7, r0
 800622a:	8812      	ldrh	r2, [r2, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	183a      	adds	r2, r7, r0
 8006236:	8812      	ldrh	r2, [r2, #0]
 8006238:	60da      	str	r2, [r3, #12]
 800623a:	e056      	b.n	80062ea <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800623c:	231a      	movs	r3, #26
 800623e:	18fb      	adds	r3, r7, r3
 8006240:	2201      	movs	r2, #1
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	e051      	b.n	80062ea <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006246:	231b      	movs	r3, #27
 8006248:	18fb      	adds	r3, r7, r3
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	2b08      	cmp	r3, #8
 800624e:	d015      	beq.n	800627c <UART_SetConfig+0x288>
 8006250:	dc18      	bgt.n	8006284 <UART_SetConfig+0x290>
 8006252:	2b04      	cmp	r3, #4
 8006254:	d00d      	beq.n	8006272 <UART_SetConfig+0x27e>
 8006256:	dc15      	bgt.n	8006284 <UART_SetConfig+0x290>
 8006258:	2b00      	cmp	r3, #0
 800625a:	d002      	beq.n	8006262 <UART_SetConfig+0x26e>
 800625c:	2b02      	cmp	r3, #2
 800625e:	d005      	beq.n	800626c <UART_SetConfig+0x278>
 8006260:	e010      	b.n	8006284 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006262:	f7fd fcd9 	bl	8003c18 <HAL_RCC_GetPCLK1Freq>
 8006266:	0003      	movs	r3, r0
 8006268:	617b      	str	r3, [r7, #20]
        break;
 800626a:	e012      	b.n	8006292 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800626c:	4b31      	ldr	r3, [pc, #196]	; (8006334 <UART_SetConfig+0x340>)
 800626e:	617b      	str	r3, [r7, #20]
        break;
 8006270:	e00f      	b.n	8006292 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006272:	f7fd fc47 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8006276:	0003      	movs	r3, r0
 8006278:	617b      	str	r3, [r7, #20]
        break;
 800627a:	e00a      	b.n	8006292 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800627c:	2380      	movs	r3, #128	; 0x80
 800627e:	021b      	lsls	r3, r3, #8
 8006280:	617b      	str	r3, [r7, #20]
        break;
 8006282:	e006      	b.n	8006292 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8006284:	2300      	movs	r3, #0
 8006286:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006288:	231a      	movs	r3, #26
 800628a:	18fb      	adds	r3, r7, r3
 800628c:	2201      	movs	r2, #1
 800628e:	701a      	strb	r2, [r3, #0]
        break;
 8006290:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d028      	beq.n	80062ea <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800629c:	4b26      	ldr	r3, [pc, #152]	; (8006338 <UART_SetConfig+0x344>)
 800629e:	0052      	lsls	r2, r2, #1
 80062a0:	5ad3      	ldrh	r3, [r2, r3]
 80062a2:	0019      	movs	r1, r3
 80062a4:	6978      	ldr	r0, [r7, #20]
 80062a6:	f7f9 ff39 	bl	800011c <__udivsi3>
 80062aa:	0003      	movs	r3, r0
 80062ac:	001a      	movs	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	085b      	lsrs	r3, r3, #1
 80062b4:	18d2      	adds	r2, r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	0019      	movs	r1, r3
 80062bc:	0010      	movs	r0, r2
 80062be:	f7f9 ff2d 	bl	800011c <__udivsi3>
 80062c2:	0003      	movs	r3, r0
 80062c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	2b0f      	cmp	r3, #15
 80062ca:	d90a      	bls.n	80062e2 <UART_SetConfig+0x2ee>
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	2380      	movs	r3, #128	; 0x80
 80062d0:	025b      	lsls	r3, r3, #9
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d205      	bcs.n	80062e2 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	b29a      	uxth	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	60da      	str	r2, [r3, #12]
 80062e0:	e003      	b.n	80062ea <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80062e2:	231a      	movs	r3, #26
 80062e4:	18fb      	adds	r3, r7, r3
 80062e6:	2201      	movs	r2, #1
 80062e8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	226a      	movs	r2, #106	; 0x6a
 80062ee:	2101      	movs	r1, #1
 80062f0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2268      	movs	r2, #104	; 0x68
 80062f6:	2101      	movs	r1, #1
 80062f8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006306:	231a      	movs	r3, #26
 8006308:	18fb      	adds	r3, r7, r3
 800630a:	781b      	ldrb	r3, [r3, #0]
}
 800630c:	0018      	movs	r0, r3
 800630e:	46bd      	mov	sp, r7
 8006310:	b008      	add	sp, #32
 8006312:	bd80      	pop	{r7, pc}
 8006314:	cfff69f3 	.word	0xcfff69f3
 8006318:	ffffcfff 	.word	0xffffcfff
 800631c:	11fff4ff 	.word	0x11fff4ff
 8006320:	40013800 	.word	0x40013800
 8006324:	40021000 	.word	0x40021000
 8006328:	40004400 	.word	0x40004400
 800632c:	40004800 	.word	0x40004800
 8006330:	40004c00 	.word	0x40004c00
 8006334:	00f42400 	.word	0x00f42400
 8006338:	0800a244 	.word	0x0800a244

0800633c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006348:	2201      	movs	r2, #1
 800634a:	4013      	ands	r3, r2
 800634c:	d00b      	beq.n	8006366 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	4a4a      	ldr	r2, [pc, #296]	; (8006480 <UART_AdvFeatureConfig+0x144>)
 8006356:	4013      	ands	r3, r2
 8006358:	0019      	movs	r1, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636a:	2202      	movs	r2, #2
 800636c:	4013      	ands	r3, r2
 800636e:	d00b      	beq.n	8006388 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	4a43      	ldr	r2, [pc, #268]	; (8006484 <UART_AdvFeatureConfig+0x148>)
 8006378:	4013      	ands	r3, r2
 800637a:	0019      	movs	r1, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638c:	2204      	movs	r2, #4
 800638e:	4013      	ands	r3, r2
 8006390:	d00b      	beq.n	80063aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	4a3b      	ldr	r2, [pc, #236]	; (8006488 <UART_AdvFeatureConfig+0x14c>)
 800639a:	4013      	ands	r3, r2
 800639c:	0019      	movs	r1, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ae:	2208      	movs	r2, #8
 80063b0:	4013      	ands	r3, r2
 80063b2:	d00b      	beq.n	80063cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	4a34      	ldr	r2, [pc, #208]	; (800648c <UART_AdvFeatureConfig+0x150>)
 80063bc:	4013      	ands	r3, r2
 80063be:	0019      	movs	r1, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d0:	2210      	movs	r2, #16
 80063d2:	4013      	ands	r3, r2
 80063d4:	d00b      	beq.n	80063ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	4a2c      	ldr	r2, [pc, #176]	; (8006490 <UART_AdvFeatureConfig+0x154>)
 80063de:	4013      	ands	r3, r2
 80063e0:	0019      	movs	r1, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f2:	2220      	movs	r2, #32
 80063f4:	4013      	ands	r3, r2
 80063f6:	d00b      	beq.n	8006410 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	4a25      	ldr	r2, [pc, #148]	; (8006494 <UART_AdvFeatureConfig+0x158>)
 8006400:	4013      	ands	r3, r2
 8006402:	0019      	movs	r1, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006414:	2240      	movs	r2, #64	; 0x40
 8006416:	4013      	ands	r3, r2
 8006418:	d01d      	beq.n	8006456 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	4a1d      	ldr	r2, [pc, #116]	; (8006498 <UART_AdvFeatureConfig+0x15c>)
 8006422:	4013      	ands	r3, r2
 8006424:	0019      	movs	r1, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006436:	2380      	movs	r3, #128	; 0x80
 8006438:	035b      	lsls	r3, r3, #13
 800643a:	429a      	cmp	r2, r3
 800643c:	d10b      	bne.n	8006456 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	4a15      	ldr	r2, [pc, #84]	; (800649c <UART_AdvFeatureConfig+0x160>)
 8006446:	4013      	ands	r3, r2
 8006448:	0019      	movs	r1, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645a:	2280      	movs	r2, #128	; 0x80
 800645c:	4013      	ands	r3, r2
 800645e:	d00b      	beq.n	8006478 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	4a0e      	ldr	r2, [pc, #56]	; (80064a0 <UART_AdvFeatureConfig+0x164>)
 8006468:	4013      	ands	r3, r2
 800646a:	0019      	movs	r1, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	605a      	str	r2, [r3, #4]
  }
}
 8006478:	46c0      	nop			; (mov r8, r8)
 800647a:	46bd      	mov	sp, r7
 800647c:	b002      	add	sp, #8
 800647e:	bd80      	pop	{r7, pc}
 8006480:	fffdffff 	.word	0xfffdffff
 8006484:	fffeffff 	.word	0xfffeffff
 8006488:	fffbffff 	.word	0xfffbffff
 800648c:	ffff7fff 	.word	0xffff7fff
 8006490:	ffffefff 	.word	0xffffefff
 8006494:	ffffdfff 	.word	0xffffdfff
 8006498:	ffefffff 	.word	0xffefffff
 800649c:	ff9fffff 	.word	0xff9fffff
 80064a0:	fff7ffff 	.word	0xfff7ffff

080064a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af02      	add	r7, sp, #8
 80064aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2290      	movs	r2, #144	; 0x90
 80064b0:	2100      	movs	r1, #0
 80064b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064b4:	f7fc f9e2 	bl	800287c <HAL_GetTick>
 80064b8:	0003      	movs	r3, r0
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2208      	movs	r2, #8
 80064c4:	4013      	ands	r3, r2
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	d10c      	bne.n	80064e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2280      	movs	r2, #128	; 0x80
 80064ce:	0391      	lsls	r1, r2, #14
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	4a1a      	ldr	r2, [pc, #104]	; (800653c <UART_CheckIdleState+0x98>)
 80064d4:	9200      	str	r2, [sp, #0]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f000 f832 	bl	8006540 <UART_WaitOnFlagUntilTimeout>
 80064dc:	1e03      	subs	r3, r0, #0
 80064de:	d001      	beq.n	80064e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e026      	b.n	8006532 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2204      	movs	r2, #4
 80064ec:	4013      	ands	r3, r2
 80064ee:	2b04      	cmp	r3, #4
 80064f0:	d10c      	bne.n	800650c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2280      	movs	r2, #128	; 0x80
 80064f6:	03d1      	lsls	r1, r2, #15
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	4a10      	ldr	r2, [pc, #64]	; (800653c <UART_CheckIdleState+0x98>)
 80064fc:	9200      	str	r2, [sp, #0]
 80064fe:	2200      	movs	r2, #0
 8006500:	f000 f81e 	bl	8006540 <UART_WaitOnFlagUntilTimeout>
 8006504:	1e03      	subs	r3, r0, #0
 8006506:	d001      	beq.n	800650c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e012      	b.n	8006532 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2288      	movs	r2, #136	; 0x88
 8006510:	2120      	movs	r1, #32
 8006512:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	228c      	movs	r2, #140	; 0x8c
 8006518:	2120      	movs	r1, #32
 800651a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2284      	movs	r2, #132	; 0x84
 800652c:	2100      	movs	r1, #0
 800652e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	0018      	movs	r0, r3
 8006534:	46bd      	mov	sp, r7
 8006536:	b004      	add	sp, #16
 8006538:	bd80      	pop	{r7, pc}
 800653a:	46c0      	nop			; (mov r8, r8)
 800653c:	01ffffff 	.word	0x01ffffff

08006540 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b094      	sub	sp, #80	; 0x50
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	603b      	str	r3, [r7, #0]
 800654c:	1dfb      	adds	r3, r7, #7
 800654e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006550:	e0a7      	b.n	80066a2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006552:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006554:	3301      	adds	r3, #1
 8006556:	d100      	bne.n	800655a <UART_WaitOnFlagUntilTimeout+0x1a>
 8006558:	e0a3      	b.n	80066a2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800655a:	f7fc f98f 	bl	800287c <HAL_GetTick>
 800655e:	0002      	movs	r2, r0
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006566:	429a      	cmp	r2, r3
 8006568:	d302      	bcc.n	8006570 <UART_WaitOnFlagUntilTimeout+0x30>
 800656a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800656c:	2b00      	cmp	r3, #0
 800656e:	d13f      	bne.n	80065f0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006570:	f3ef 8310 	mrs	r3, PRIMASK
 8006574:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006576:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006578:	647b      	str	r3, [r7, #68]	; 0x44
 800657a:	2301      	movs	r3, #1
 800657c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800657e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006580:	f383 8810 	msr	PRIMASK, r3
}
 8006584:	46c0      	nop			; (mov r8, r8)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	494e      	ldr	r1, [pc, #312]	; (80066cc <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006592:	400a      	ands	r2, r1
 8006594:	601a      	str	r2, [r3, #0]
 8006596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006598:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	f383 8810 	msr	PRIMASK, r3
}
 80065a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065a2:	f3ef 8310 	mrs	r3, PRIMASK
 80065a6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80065a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065aa:	643b      	str	r3, [r7, #64]	; 0x40
 80065ac:	2301      	movs	r3, #1
 80065ae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b2:	f383 8810 	msr	PRIMASK, r3
}
 80065b6:	46c0      	nop			; (mov r8, r8)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689a      	ldr	r2, [r3, #8]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2101      	movs	r1, #1
 80065c4:	438a      	bics	r2, r1
 80065c6:	609a      	str	r2, [r3, #8]
 80065c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ce:	f383 8810 	msr	PRIMASK, r3
}
 80065d2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2288      	movs	r2, #136	; 0x88
 80065d8:	2120      	movs	r1, #32
 80065da:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	228c      	movs	r2, #140	; 0x8c
 80065e0:	2120      	movs	r1, #32
 80065e2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2284      	movs	r2, #132	; 0x84
 80065e8:	2100      	movs	r1, #0
 80065ea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e069      	b.n	80066c4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2204      	movs	r2, #4
 80065f8:	4013      	ands	r3, r2
 80065fa:	d052      	beq.n	80066a2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	69da      	ldr	r2, [r3, #28]
 8006602:	2380      	movs	r3, #128	; 0x80
 8006604:	011b      	lsls	r3, r3, #4
 8006606:	401a      	ands	r2, r3
 8006608:	2380      	movs	r3, #128	; 0x80
 800660a:	011b      	lsls	r3, r3, #4
 800660c:	429a      	cmp	r2, r3
 800660e:	d148      	bne.n	80066a2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2280      	movs	r2, #128	; 0x80
 8006616:	0112      	lsls	r2, r2, #4
 8006618:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800661a:	f3ef 8310 	mrs	r3, PRIMASK
 800661e:	613b      	str	r3, [r7, #16]
  return(result);
 8006620:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006624:	2301      	movs	r3, #1
 8006626:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f383 8810 	msr	PRIMASK, r3
}
 800662e:	46c0      	nop			; (mov r8, r8)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4924      	ldr	r1, [pc, #144]	; (80066cc <UART_WaitOnFlagUntilTimeout+0x18c>)
 800663c:	400a      	ands	r2, r1
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006642:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	f383 8810 	msr	PRIMASK, r3
}
 800664a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800664c:	f3ef 8310 	mrs	r3, PRIMASK
 8006650:	61fb      	str	r3, [r7, #28]
  return(result);
 8006652:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006654:	64bb      	str	r3, [r7, #72]	; 0x48
 8006656:	2301      	movs	r3, #1
 8006658:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	f383 8810 	msr	PRIMASK, r3
}
 8006660:	46c0      	nop			; (mov r8, r8)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689a      	ldr	r2, [r3, #8]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2101      	movs	r1, #1
 800666e:	438a      	bics	r2, r1
 8006670:	609a      	str	r2, [r3, #8]
 8006672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006674:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	f383 8810 	msr	PRIMASK, r3
}
 800667c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2288      	movs	r2, #136	; 0x88
 8006682:	2120      	movs	r1, #32
 8006684:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	228c      	movs	r2, #140	; 0x8c
 800668a:	2120      	movs	r1, #32
 800668c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2290      	movs	r2, #144	; 0x90
 8006692:	2120      	movs	r1, #32
 8006694:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2284      	movs	r2, #132	; 0x84
 800669a:	2100      	movs	r1, #0
 800669c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e010      	b.n	80066c4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	4013      	ands	r3, r2
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	425a      	negs	r2, r3
 80066b2:	4153      	adcs	r3, r2
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	001a      	movs	r2, r3
 80066b8:	1dfb      	adds	r3, r7, #7
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d100      	bne.n	80066c2 <UART_WaitOnFlagUntilTimeout+0x182>
 80066c0:	e747      	b.n	8006552 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	0018      	movs	r0, r3
 80066c6:	46bd      	mov	sp, r7
 80066c8:	b014      	add	sp, #80	; 0x50
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	fffffe5f 	.word	0xfffffe5f

080066d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08e      	sub	sp, #56	; 0x38
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066d8:	f3ef 8310 	mrs	r3, PRIMASK
 80066dc:	617b      	str	r3, [r7, #20]
  return(result);
 80066de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066e0:	637b      	str	r3, [r7, #52]	; 0x34
 80066e2:	2301      	movs	r3, #1
 80066e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	f383 8810 	msr	PRIMASK, r3
}
 80066ec:	46c0      	nop			; (mov r8, r8)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4926      	ldr	r1, [pc, #152]	; (8006794 <UART_EndRxTransfer+0xc4>)
 80066fa:	400a      	ands	r2, r1
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006700:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	f383 8810 	msr	PRIMASK, r3
}
 8006708:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800670a:	f3ef 8310 	mrs	r3, PRIMASK
 800670e:	623b      	str	r3, [r7, #32]
  return(result);
 8006710:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006712:	633b      	str	r3, [r7, #48]	; 0x30
 8006714:	2301      	movs	r3, #1
 8006716:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	f383 8810 	msr	PRIMASK, r3
}
 800671e:	46c0      	nop			; (mov r8, r8)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689a      	ldr	r2, [r3, #8]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	491b      	ldr	r1, [pc, #108]	; (8006798 <UART_EndRxTransfer+0xc8>)
 800672c:	400a      	ands	r2, r1
 800672e:	609a      	str	r2, [r3, #8]
 8006730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006732:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	f383 8810 	msr	PRIMASK, r3
}
 800673a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006740:	2b01      	cmp	r3, #1
 8006742:	d118      	bne.n	8006776 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006744:	f3ef 8310 	mrs	r3, PRIMASK
 8006748:	60bb      	str	r3, [r7, #8]
  return(result);
 800674a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800674c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800674e:	2301      	movs	r3, #1
 8006750:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f383 8810 	msr	PRIMASK, r3
}
 8006758:	46c0      	nop			; (mov r8, r8)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2110      	movs	r1, #16
 8006766:	438a      	bics	r2, r1
 8006768:	601a      	str	r2, [r3, #0]
 800676a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f383 8810 	msr	PRIMASK, r3
}
 8006774:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	228c      	movs	r2, #140	; 0x8c
 800677a:	2120      	movs	r1, #32
 800677c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	675a      	str	r2, [r3, #116]	; 0x74
}
 800678a:	46c0      	nop			; (mov r8, r8)
 800678c:	46bd      	mov	sp, r7
 800678e:	b00e      	add	sp, #56	; 0x38
 8006790:	bd80      	pop	{r7, pc}
 8006792:	46c0      	nop			; (mov r8, r8)
 8006794:	fffffedf 	.word	0xfffffedf
 8006798:	effffffe 	.word	0xeffffffe

0800679c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	225e      	movs	r2, #94	; 0x5e
 80067ae:	2100      	movs	r1, #0
 80067b0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2256      	movs	r2, #86	; 0x56
 80067b6:	2100      	movs	r1, #0
 80067b8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	0018      	movs	r0, r3
 80067be:	f7ff fc05 	bl	8005fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067c2:	46c0      	nop			; (mov r8, r8)
 80067c4:	46bd      	mov	sp, r7
 80067c6:	b004      	add	sp, #16
 80067c8:	bd80      	pop	{r7, pc}

080067ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b086      	sub	sp, #24
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067d2:	f3ef 8310 	mrs	r3, PRIMASK
 80067d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80067d8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067da:	617b      	str	r3, [r7, #20]
 80067dc:	2301      	movs	r3, #1
 80067de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f383 8810 	msr	PRIMASK, r3
}
 80067e6:	46c0      	nop			; (mov r8, r8)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2140      	movs	r1, #64	; 0x40
 80067f4:	438a      	bics	r2, r1
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f383 8810 	msr	PRIMASK, r3
}
 8006802:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2288      	movs	r2, #136	; 0x88
 8006808:	2120      	movs	r1, #32
 800680a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	0018      	movs	r0, r3
 8006816:	f7ff fbd1 	bl	8005fbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800681a:	46c0      	nop			; (mov r8, r8)
 800681c:	46bd      	mov	sp, r7
 800681e:	b006      	add	sp, #24
 8006820:	bd80      	pop	{r7, pc}

08006822 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b082      	sub	sp, #8
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800682a:	46c0      	nop			; (mov r8, r8)
 800682c:	46bd      	mov	sp, r7
 800682e:	b002      	add	sp, #8
 8006830:	bd80      	pop	{r7, pc}

08006832 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b082      	sub	sp, #8
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800683a:	46c0      	nop			; (mov r8, r8)
 800683c:	46bd      	mov	sp, r7
 800683e:	b002      	add	sp, #8
 8006840:	bd80      	pop	{r7, pc}

08006842 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b082      	sub	sp, #8
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800684a:	46c0      	nop			; (mov r8, r8)
 800684c:	46bd      	mov	sp, r7
 800684e:	b002      	add	sp, #8
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2284      	movs	r2, #132	; 0x84
 8006860:	5c9b      	ldrb	r3, [r3, r2]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d101      	bne.n	800686a <HAL_UARTEx_DisableFifoMode+0x16>
 8006866:	2302      	movs	r3, #2
 8006868:	e027      	b.n	80068ba <HAL_UARTEx_DisableFifoMode+0x66>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2284      	movs	r2, #132	; 0x84
 800686e:	2101      	movs	r1, #1
 8006870:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2288      	movs	r2, #136	; 0x88
 8006876:	2124      	movs	r1, #36	; 0x24
 8006878:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2101      	movs	r1, #1
 800688e:	438a      	bics	r2, r1
 8006890:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	4a0b      	ldr	r2, [pc, #44]	; (80068c4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006896:	4013      	ands	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2288      	movs	r2, #136	; 0x88
 80068ac:	2120      	movs	r1, #32
 80068ae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2284      	movs	r2, #132	; 0x84
 80068b4:	2100      	movs	r1, #0
 80068b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	0018      	movs	r0, r3
 80068bc:	46bd      	mov	sp, r7
 80068be:	b004      	add	sp, #16
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	46c0      	nop			; (mov r8, r8)
 80068c4:	dfffffff 	.word	0xdfffffff

080068c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2284      	movs	r2, #132	; 0x84
 80068d6:	5c9b      	ldrb	r3, [r3, r2]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d101      	bne.n	80068e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80068dc:	2302      	movs	r3, #2
 80068de:	e02e      	b.n	800693e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2284      	movs	r2, #132	; 0x84
 80068e4:	2101      	movs	r1, #1
 80068e6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2288      	movs	r2, #136	; 0x88
 80068ec:	2124      	movs	r1, #36	; 0x24
 80068ee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2101      	movs	r1, #1
 8006904:	438a      	bics	r2, r1
 8006906:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	08d9      	lsrs	r1, r3, #3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	0018      	movs	r0, r3
 8006920:	f000 f854 	bl	80069cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2288      	movs	r2, #136	; 0x88
 8006930:	2120      	movs	r1, #32
 8006932:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2284      	movs	r2, #132	; 0x84
 8006938:	2100      	movs	r1, #0
 800693a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	0018      	movs	r0, r3
 8006940:	46bd      	mov	sp, r7
 8006942:	b004      	add	sp, #16
 8006944:	bd80      	pop	{r7, pc}
	...

08006948 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2284      	movs	r2, #132	; 0x84
 8006956:	5c9b      	ldrb	r3, [r3, r2]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800695c:	2302      	movs	r3, #2
 800695e:	e02f      	b.n	80069c0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2284      	movs	r2, #132	; 0x84
 8006964:	2101      	movs	r1, #1
 8006966:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2288      	movs	r2, #136	; 0x88
 800696c:	2124      	movs	r1, #36	; 0x24
 800696e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2101      	movs	r1, #1
 8006984:	438a      	bics	r2, r1
 8006986:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	4a0e      	ldr	r2, [pc, #56]	; (80069c8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006990:	4013      	ands	r3, r2
 8006992:	0019      	movs	r1, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	0018      	movs	r0, r3
 80069a2:	f000 f813 	bl	80069cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2288      	movs	r2, #136	; 0x88
 80069b2:	2120      	movs	r1, #32
 80069b4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2284      	movs	r2, #132	; 0x84
 80069ba:	2100      	movs	r1, #0
 80069bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	0018      	movs	r0, r3
 80069c2:	46bd      	mov	sp, r7
 80069c4:	b004      	add	sp, #16
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	f1ffffff 	.word	0xf1ffffff

080069cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80069cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d108      	bne.n	80069ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	226a      	movs	r2, #106	; 0x6a
 80069e0:	2101      	movs	r1, #1
 80069e2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2268      	movs	r2, #104	; 0x68
 80069e8:	2101      	movs	r1, #1
 80069ea:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80069ec:	e043      	b.n	8006a76 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80069ee:	260f      	movs	r6, #15
 80069f0:	19bb      	adds	r3, r7, r6
 80069f2:	2208      	movs	r2, #8
 80069f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80069f6:	200e      	movs	r0, #14
 80069f8:	183b      	adds	r3, r7, r0
 80069fa:	2208      	movs	r2, #8
 80069fc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	0e5b      	lsrs	r3, r3, #25
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	240d      	movs	r4, #13
 8006a0a:	193b      	adds	r3, r7, r4
 8006a0c:	2107      	movs	r1, #7
 8006a0e:	400a      	ands	r2, r1
 8006a10:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	0f5b      	lsrs	r3, r3, #29
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	250c      	movs	r5, #12
 8006a1e:	197b      	adds	r3, r7, r5
 8006a20:	2107      	movs	r1, #7
 8006a22:	400a      	ands	r2, r1
 8006a24:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a26:	183b      	adds	r3, r7, r0
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	197a      	adds	r2, r7, r5
 8006a2c:	7812      	ldrb	r2, [r2, #0]
 8006a2e:	4914      	ldr	r1, [pc, #80]	; (8006a80 <UARTEx_SetNbDataToProcess+0xb4>)
 8006a30:	5c8a      	ldrb	r2, [r1, r2]
 8006a32:	435a      	muls	r2, r3
 8006a34:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a36:	197b      	adds	r3, r7, r5
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	4a12      	ldr	r2, [pc, #72]	; (8006a84 <UARTEx_SetNbDataToProcess+0xb8>)
 8006a3c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a3e:	0019      	movs	r1, r3
 8006a40:	f7f9 fbf6 	bl	8000230 <__divsi3>
 8006a44:	0003      	movs	r3, r0
 8006a46:	b299      	uxth	r1, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	226a      	movs	r2, #106	; 0x6a
 8006a4c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a4e:	19bb      	adds	r3, r7, r6
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	193a      	adds	r2, r7, r4
 8006a54:	7812      	ldrb	r2, [r2, #0]
 8006a56:	490a      	ldr	r1, [pc, #40]	; (8006a80 <UARTEx_SetNbDataToProcess+0xb4>)
 8006a58:	5c8a      	ldrb	r2, [r1, r2]
 8006a5a:	435a      	muls	r2, r3
 8006a5c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a5e:	193b      	adds	r3, r7, r4
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	4a08      	ldr	r2, [pc, #32]	; (8006a84 <UARTEx_SetNbDataToProcess+0xb8>)
 8006a64:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a66:	0019      	movs	r1, r3
 8006a68:	f7f9 fbe2 	bl	8000230 <__divsi3>
 8006a6c:	0003      	movs	r3, r0
 8006a6e:	b299      	uxth	r1, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2268      	movs	r2, #104	; 0x68
 8006a74:	5299      	strh	r1, [r3, r2]
}
 8006a76:	46c0      	nop			; (mov r8, r8)
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	b005      	add	sp, #20
 8006a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a7e:	46c0      	nop			; (mov r8, r8)
 8006a80:	0800a25c 	.word	0x0800a25c
 8006a84:	0800a264 	.word	0x0800a264

08006a88 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	0002      	movs	r2, r0
 8006a90:	1dbb      	adds	r3, r7, #6
 8006a92:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006a94:	2300      	movs	r3, #0
 8006a96:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006a98:	1dbb      	adds	r3, r7, #6
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	5e9b      	ldrsh	r3, [r3, r2]
 8006a9e:	2b84      	cmp	r3, #132	; 0x84
 8006aa0:	d006      	beq.n	8006ab0 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8006aa2:	1dbb      	adds	r3, r7, #6
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	5e9a      	ldrsh	r2, [r3, r2]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	18d3      	adds	r3, r2, r3
 8006aac:	3303      	adds	r3, #3
 8006aae:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
}
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	b004      	add	sp, #16
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006abe:	f000 fe5b 	bl	8007778 <vTaskStartScheduler>
  
  return osOK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	0018      	movs	r0, r3
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006acc:	b087      	sub	sp, #28
 8006ace:	af02      	add	r7, sp, #8
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685c      	ldr	r4, [r3, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ae0:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2208      	movs	r2, #8
 8006ae6:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ae8:	0018      	movs	r0, r3
 8006aea:	f7ff ffcd 	bl	8006a88 <makeFreeRtosPriority>
 8006aee:	0001      	movs	r1, r0
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	230c      	movs	r3, #12
 8006af4:	18fb      	adds	r3, r7, r3
 8006af6:	9301      	str	r3, [sp, #4]
 8006af8:	9100      	str	r1, [sp, #0]
 8006afa:	0013      	movs	r3, r2
 8006afc:	0032      	movs	r2, r6
 8006afe:	0029      	movs	r1, r5
 8006b00:	0020      	movs	r0, r4
 8006b02:	f000 fcd6 	bl	80074b2 <xTaskCreate>
 8006b06:	0003      	movs	r3, r0
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d001      	beq.n	8006b10 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	e000      	b.n	8006b12 <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8006b10:	68fb      	ldr	r3, [r7, #12]
}
 8006b12:	0018      	movs	r0, r3
 8006b14:	46bd      	mov	sp, r7
 8006b16:	b005      	add	sp, #20
 8006b18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b1a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b084      	sub	sp, #16
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <osDelay+0x16>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	e000      	b.n	8006b32 <osDelay+0x18>
 8006b30:	2301      	movs	r3, #1
 8006b32:	0018      	movs	r0, r3
 8006b34:	f000 fdfa 	bl	800772c <vTaskDelay>
  
  return osOK;
 8006b38:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006b3a:	0018      	movs	r0, r3
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	b004      	add	sp, #16
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b082      	sub	sp, #8
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	3308      	adds	r3, #8
 8006b4e:	001a      	movs	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	4252      	negs	r2, r2
 8006b5a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	3308      	adds	r3, #8
 8006b60:	001a      	movs	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	3308      	adds	r3, #8
 8006b6a:	001a      	movs	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b76:	46c0      	nop			; (mov r8, r8)
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	b002      	add	sp, #8
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b082      	sub	sp, #8
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b8c:	46c0      	nop			; (mov r8, r8)
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	b002      	add	sp, #8
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	689a      	ldr	r2, [r3, #8]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	601a      	str	r2, [r3, #0]
}
 8006bd0:	46c0      	nop			; (mov r8, r8)
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	b004      	add	sp, #16
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	3301      	adds	r3, #1
 8006bec:	d103      	bne.n	8006bf6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	60fb      	str	r3, [r7, #12]
 8006bf4:	e00c      	b.n	8006c10 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	3308      	adds	r3, #8
 8006bfa:	60fb      	str	r3, [r7, #12]
 8006bfc:	e002      	b.n	8006c04 <vListInsert+0x2c>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d2f6      	bcs.n	8006bfe <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	1c5a      	adds	r2, r3, #1
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	601a      	str	r2, [r3, #0]
}
 8006c3c:	46c0      	nop			; (mov r8, r8)
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	b004      	add	sp, #16
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	6892      	ldr	r2, [r2, #8]
 8006c5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	6852      	ldr	r2, [r2, #4]
 8006c64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d103      	bne.n	8006c78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	689a      	ldr	r2, [r3, #8]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	1e5a      	subs	r2, r3, #1
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
}
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	b004      	add	sp, #16
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <xQueueGenericReset+0x18>
 8006ca8:	b672      	cpsid	i
 8006caa:	e7fe      	b.n	8006caa <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8006cac:	f001 fee8 	bl	8008a80 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbc:	434b      	muls	r3, r1
 8006cbe:	18d2      	adds	r2, r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cda:	1e59      	subs	r1, r3, #1
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	434b      	muls	r3, r1
 8006ce2:	18d2      	adds	r2, r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2244      	movs	r2, #68	; 0x44
 8006cec:	21ff      	movs	r1, #255	; 0xff
 8006cee:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2245      	movs	r2, #69	; 0x45
 8006cf4:	21ff      	movs	r1, #255	; 0xff
 8006cf6:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10d      	bne.n	8006d1a <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d013      	beq.n	8006d2e <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	3310      	adds	r3, #16
 8006d0a:	0018      	movs	r0, r3
 8006d0c:	f000 ff7a 	bl	8007c04 <xTaskRemoveFromEventList>
 8006d10:	1e03      	subs	r3, r0, #0
 8006d12:	d00c      	beq.n	8006d2e <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d14:	f001 fea4 	bl	8008a60 <vPortYield>
 8006d18:	e009      	b.n	8006d2e <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3310      	adds	r3, #16
 8006d1e:	0018      	movs	r0, r3
 8006d20:	f7ff ff0f 	bl	8006b42 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	3324      	adds	r3, #36	; 0x24
 8006d28:	0018      	movs	r0, r3
 8006d2a:	f7ff ff0a 	bl	8006b42 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d2e:	f001 feb9 	bl	8008aa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d32:	2301      	movs	r3, #1
}
 8006d34:	0018      	movs	r0, r3
 8006d36:	46bd      	mov	sp, r7
 8006d38:	b004      	add	sp, #16
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006d3c:	b590      	push	{r4, r7, lr}
 8006d3e:	b08b      	sub	sp, #44	; 0x2c
 8006d40:	af02      	add	r7, sp, #8
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	1dfb      	adds	r3, r7, #7
 8006d48:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <xQueueGenericCreate+0x18>
 8006d50:	b672      	cpsid	i
 8006d52:	e7fe      	b.n	8006d52 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	4353      	muls	r3, r2
 8006d5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	3350      	adds	r3, #80	; 0x50
 8006d60:	0018      	movs	r0, r3
 8006d62:	f001 ff25 	bl	8008bb0 <pvPortMalloc>
 8006d66:	0003      	movs	r3, r0
 8006d68:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00e      	beq.n	8006d8e <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	3350      	adds	r3, #80	; 0x50
 8006d78:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d7a:	1dfb      	adds	r3, r7, #7
 8006d7c:	781c      	ldrb	r4, [r3, #0]
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	68b9      	ldr	r1, [r7, #8]
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	0023      	movs	r3, r4
 8006d8a:	f000 f805 	bl	8006d98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d8e:	69bb      	ldr	r3, [r7, #24]
	}
 8006d90:	0018      	movs	r0, r3
 8006d92:	46bd      	mov	sp, r7
 8006d94:	b009      	add	sp, #36	; 0x24
 8006d96:	bd90      	pop	{r4, r7, pc}

08006d98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
 8006da4:	001a      	movs	r2, r3
 8006da6:	1cfb      	adds	r3, r7, #3
 8006da8:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d103      	bne.n	8006db8 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	69ba      	ldr	r2, [r7, #24]
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	e002      	b.n	8006dbe <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	2101      	movs	r1, #1
 8006dce:	0018      	movs	r0, r3
 8006dd0:	f7ff ff60 	bl	8006c94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	1cfa      	adds	r2, r7, #3
 8006dd8:	214c      	movs	r1, #76	; 0x4c
 8006dda:	7812      	ldrb	r2, [r2, #0]
 8006ddc:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006dde:	46c0      	nop			; (mov r8, r8)
 8006de0:	46bd      	mov	sp, r7
 8006de2:	b004      	add	sp, #16
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b08a      	sub	sp, #40	; 0x28
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	60f8      	str	r0, [r7, #12]
 8006dee:	60b9      	str	r1, [r7, #8]
 8006df0:	607a      	str	r2, [r7, #4]
 8006df2:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006df4:	2300      	movs	r3, #0
 8006df6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <xQueueGenericSend+0x20>
 8006e02:	b672      	cpsid	i
 8006e04:	e7fe      	b.n	8006e04 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d103      	bne.n	8006e14 <xQueueGenericSend+0x2e>
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <xQueueGenericSend+0x32>
 8006e14:	2301      	movs	r3, #1
 8006e16:	e000      	b.n	8006e1a <xQueueGenericSend+0x34>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <xQueueGenericSend+0x3c>
 8006e1e:	b672      	cpsid	i
 8006e20:	e7fe      	b.n	8006e20 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d103      	bne.n	8006e30 <xQueueGenericSend+0x4a>
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d101      	bne.n	8006e34 <xQueueGenericSend+0x4e>
 8006e30:	2301      	movs	r3, #1
 8006e32:	e000      	b.n	8006e36 <xQueueGenericSend+0x50>
 8006e34:	2300      	movs	r3, #0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <xQueueGenericSend+0x58>
 8006e3a:	b672      	cpsid	i
 8006e3c:	e7fe      	b.n	8006e3c <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e3e:	f001 f85d 	bl	8007efc <xTaskGetSchedulerState>
 8006e42:	1e03      	subs	r3, r0, #0
 8006e44:	d102      	bne.n	8006e4c <xQueueGenericSend+0x66>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <xQueueGenericSend+0x6a>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e000      	b.n	8006e52 <xQueueGenericSend+0x6c>
 8006e50:	2300      	movs	r3, #0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <xQueueGenericSend+0x74>
 8006e56:	b672      	cpsid	i
 8006e58:	e7fe      	b.n	8006e58 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e5a:	f001 fe11 	bl	8008a80 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e5e:	6a3b      	ldr	r3, [r7, #32]
 8006e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d302      	bcc.n	8006e70 <xQueueGenericSend+0x8a>
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d11e      	bne.n	8006eae <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	68b9      	ldr	r1, [r7, #8]
 8006e74:	6a3b      	ldr	r3, [r7, #32]
 8006e76:	0018      	movs	r0, r3
 8006e78:	f000 f9a2 	bl	80071c0 <prvCopyDataToQueue>
 8006e7c:	0003      	movs	r3, r0
 8006e7e:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e80:	6a3b      	ldr	r3, [r7, #32]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d009      	beq.n	8006e9c <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e88:	6a3b      	ldr	r3, [r7, #32]
 8006e8a:	3324      	adds	r3, #36	; 0x24
 8006e8c:	0018      	movs	r0, r3
 8006e8e:	f000 feb9 	bl	8007c04 <xTaskRemoveFromEventList>
 8006e92:	1e03      	subs	r3, r0, #0
 8006e94:	d007      	beq.n	8006ea6 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e96:	f001 fde3 	bl	8008a60 <vPortYield>
 8006e9a:	e004      	b.n	8006ea6 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ea2:	f001 fddd 	bl	8008a60 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ea6:	f001 fdfd 	bl	8008aa4 <vPortExitCritical>
				return pdPASS;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e05b      	b.n	8006f66 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d103      	bne.n	8006ebc <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006eb4:	f001 fdf6 	bl	8008aa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	e054      	b.n	8006f66 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d106      	bne.n	8006ed0 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ec2:	2314      	movs	r3, #20
 8006ec4:	18fb      	adds	r3, r7, r3
 8006ec6:	0018      	movs	r0, r3
 8006ec8:	f000 fef8 	bl	8007cbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ed0:	f001 fde8 	bl	8008aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ed4:	f000 fc8e 	bl	80077f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ed8:	f001 fdd2 	bl	8008a80 <vPortEnterCritical>
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	2244      	movs	r2, #68	; 0x44
 8006ee0:	5c9b      	ldrb	r3, [r3, r2]
 8006ee2:	b25b      	sxtb	r3, r3
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	d103      	bne.n	8006ef0 <xQueueGenericSend+0x10a>
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	2244      	movs	r2, #68	; 0x44
 8006eec:	2100      	movs	r1, #0
 8006eee:	5499      	strb	r1, [r3, r2]
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	2245      	movs	r2, #69	; 0x45
 8006ef4:	5c9b      	ldrb	r3, [r3, r2]
 8006ef6:	b25b      	sxtb	r3, r3
 8006ef8:	3301      	adds	r3, #1
 8006efa:	d103      	bne.n	8006f04 <xQueueGenericSend+0x11e>
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	2245      	movs	r2, #69	; 0x45
 8006f00:	2100      	movs	r1, #0
 8006f02:	5499      	strb	r1, [r3, r2]
 8006f04:	f001 fdce 	bl	8008aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f08:	1d3a      	adds	r2, r7, #4
 8006f0a:	2314      	movs	r3, #20
 8006f0c:	18fb      	adds	r3, r7, r3
 8006f0e:	0011      	movs	r1, r2
 8006f10:	0018      	movs	r0, r3
 8006f12:	f000 fee7 	bl	8007ce4 <xTaskCheckForTimeOut>
 8006f16:	1e03      	subs	r3, r0, #0
 8006f18:	d11e      	bne.n	8006f58 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
 8006f1c:	0018      	movs	r0, r3
 8006f1e:	f000 fa54 	bl	80073ca <prvIsQueueFull>
 8006f22:	1e03      	subs	r3, r0, #0
 8006f24:	d011      	beq.n	8006f4a <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	3310      	adds	r3, #16
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	0011      	movs	r1, r2
 8006f2e:	0018      	movs	r0, r3
 8006f30:	f000 fe24 	bl	8007b7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	0018      	movs	r0, r3
 8006f38:	f000 f9d3 	bl	80072e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f3c:	f000 fc66 	bl	800780c <xTaskResumeAll>
 8006f40:	1e03      	subs	r3, r0, #0
 8006f42:	d18a      	bne.n	8006e5a <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8006f44:	f001 fd8c 	bl	8008a60 <vPortYield>
 8006f48:	e787      	b.n	8006e5a <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	0018      	movs	r0, r3
 8006f4e:	f000 f9c8 	bl	80072e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f52:	f000 fc5b 	bl	800780c <xTaskResumeAll>
 8006f56:	e780      	b.n	8006e5a <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	0018      	movs	r0, r3
 8006f5c:	f000 f9c1 	bl	80072e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f60:	f000 fc54 	bl	800780c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f64:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006f66:	0018      	movs	r0, r3
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	b00a      	add	sp, #40	; 0x28
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f6e:	b590      	push	{r4, r7, lr}
 8006f70:	b08b      	sub	sp, #44	; 0x2c
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	60f8      	str	r0, [r7, #12]
 8006f76:	60b9      	str	r1, [r7, #8]
 8006f78:	607a      	str	r2, [r7, #4]
 8006f7a:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8006f80:	6a3b      	ldr	r3, [r7, #32]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <xQueueGenericSendFromISR+0x1c>
 8006f86:	b672      	cpsid	i
 8006f88:	e7fe      	b.n	8006f88 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d103      	bne.n	8006f98 <xQueueGenericSendFromISR+0x2a>
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <xQueueGenericSendFromISR+0x2e>
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e000      	b.n	8006f9e <xQueueGenericSendFromISR+0x30>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <xQueueGenericSendFromISR+0x38>
 8006fa2:	b672      	cpsid	i
 8006fa4:	e7fe      	b.n	8006fa4 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d103      	bne.n	8006fb4 <xQueueGenericSendFromISR+0x46>
 8006fac:	6a3b      	ldr	r3, [r7, #32]
 8006fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d101      	bne.n	8006fb8 <xQueueGenericSendFromISR+0x4a>
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e000      	b.n	8006fba <xQueueGenericSendFromISR+0x4c>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <xQueueGenericSendFromISR+0x54>
 8006fbe:	b672      	cpsid	i
 8006fc0:	e7fe      	b.n	8006fc0 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fc2:	f001 fd87 	bl	8008ad4 <ulSetInterruptMaskFromISR>
 8006fc6:	0003      	movs	r3, r0
 8006fc8:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d302      	bcc.n	8006fdc <xQueueGenericSendFromISR+0x6e>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d131      	bne.n	8007040 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fdc:	241b      	movs	r4, #27
 8006fde:	193b      	adds	r3, r7, r4
 8006fe0:	6a3a      	ldr	r2, [r7, #32]
 8006fe2:	2145      	movs	r1, #69	; 0x45
 8006fe4:	5c52      	ldrb	r2, [r2, r1]
 8006fe6:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fec:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	68b9      	ldr	r1, [r7, #8]
 8006ff2:	6a3b      	ldr	r3, [r7, #32]
 8006ff4:	0018      	movs	r0, r3
 8006ff6:	f000 f8e3 	bl	80071c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ffa:	193b      	adds	r3, r7, r4
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	b25b      	sxtb	r3, r3
 8007000:	3301      	adds	r3, #1
 8007002:	d111      	bne.n	8007028 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007008:	2b00      	cmp	r3, #0
 800700a:	d016      	beq.n	800703a <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	3324      	adds	r3, #36	; 0x24
 8007010:	0018      	movs	r0, r3
 8007012:	f000 fdf7 	bl	8007c04 <xTaskRemoveFromEventList>
 8007016:	1e03      	subs	r3, r0, #0
 8007018:	d00f      	beq.n	800703a <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00c      	beq.n	800703a <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	601a      	str	r2, [r3, #0]
 8007026:	e008      	b.n	800703a <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007028:	231b      	movs	r3, #27
 800702a:	18fb      	adds	r3, r7, r3
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	3301      	adds	r3, #1
 8007030:	b2db      	uxtb	r3, r3
 8007032:	b259      	sxtb	r1, r3
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	2245      	movs	r2, #69	; 0x45
 8007038:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800703a:	2301      	movs	r3, #1
 800703c:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800703e:	e001      	b.n	8007044 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007040:	2300      	movs	r3, #0
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	0018      	movs	r0, r3
 8007048:	f001 fd4a 	bl	8008ae0 <vClearInterruptMaskFromISR>

	return xReturn;
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800704e:	0018      	movs	r0, r3
 8007050:	46bd      	mov	sp, r7
 8007052:	b00b      	add	sp, #44	; 0x2c
 8007054:	bd90      	pop	{r4, r7, pc}

08007056 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b08a      	sub	sp, #40	; 0x28
 800705a:	af00      	add	r7, sp, #0
 800705c:	60f8      	str	r0, [r7, #12]
 800705e:	60b9      	str	r1, [r7, #8]
 8007060:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007062:	2300      	movs	r3, #0
 8007064:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d101      	bne.n	8007074 <xQueueReceive+0x1e>
 8007070:	b672      	cpsid	i
 8007072:	e7fe      	b.n	8007072 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d103      	bne.n	8007082 <xQueueReceive+0x2c>
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <xQueueReceive+0x30>
 8007082:	2301      	movs	r3, #1
 8007084:	e000      	b.n	8007088 <xQueueReceive+0x32>
 8007086:	2300      	movs	r3, #0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <xQueueReceive+0x3a>
 800708c:	b672      	cpsid	i
 800708e:	e7fe      	b.n	800708e <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007090:	f000 ff34 	bl	8007efc <xTaskGetSchedulerState>
 8007094:	1e03      	subs	r3, r0, #0
 8007096:	d102      	bne.n	800709e <xQueueReceive+0x48>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <xQueueReceive+0x4c>
 800709e:	2301      	movs	r3, #1
 80070a0:	e000      	b.n	80070a4 <xQueueReceive+0x4e>
 80070a2:	2300      	movs	r3, #0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d101      	bne.n	80070ac <xQueueReceive+0x56>
 80070a8:	b672      	cpsid	i
 80070aa:	e7fe      	b.n	80070aa <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070ac:	f001 fce8 	bl	8008a80 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b4:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d01a      	beq.n	80070f2 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	0011      	movs	r1, r2
 80070c2:	0018      	movs	r0, r3
 80070c4:	f000 f8e7 	bl	8007296 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	1e5a      	subs	r2, r3, #1
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d008      	beq.n	80070ea <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	3310      	adds	r3, #16
 80070dc:	0018      	movs	r0, r3
 80070de:	f000 fd91 	bl	8007c04 <xTaskRemoveFromEventList>
 80070e2:	1e03      	subs	r3, r0, #0
 80070e4:	d001      	beq.n	80070ea <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070e6:	f001 fcbb 	bl	8008a60 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070ea:	f001 fcdb 	bl	8008aa4 <vPortExitCritical>
				return pdPASS;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e062      	b.n	80071b8 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d103      	bne.n	8007100 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070f8:	f001 fcd4 	bl	8008aa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070fc:	2300      	movs	r3, #0
 80070fe:	e05b      	b.n	80071b8 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	2b00      	cmp	r3, #0
 8007104:	d106      	bne.n	8007114 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007106:	2314      	movs	r3, #20
 8007108:	18fb      	adds	r3, r7, r3
 800710a:	0018      	movs	r0, r3
 800710c:	f000 fdd6 	bl	8007cbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007110:	2301      	movs	r3, #1
 8007112:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007114:	f001 fcc6 	bl	8008aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007118:	f000 fb6c 	bl	80077f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800711c:	f001 fcb0 	bl	8008a80 <vPortEnterCritical>
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	2244      	movs	r2, #68	; 0x44
 8007124:	5c9b      	ldrb	r3, [r3, r2]
 8007126:	b25b      	sxtb	r3, r3
 8007128:	3301      	adds	r3, #1
 800712a:	d103      	bne.n	8007134 <xQueueReceive+0xde>
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	2244      	movs	r2, #68	; 0x44
 8007130:	2100      	movs	r1, #0
 8007132:	5499      	strb	r1, [r3, r2]
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	2245      	movs	r2, #69	; 0x45
 8007138:	5c9b      	ldrb	r3, [r3, r2]
 800713a:	b25b      	sxtb	r3, r3
 800713c:	3301      	adds	r3, #1
 800713e:	d103      	bne.n	8007148 <xQueueReceive+0xf2>
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	2245      	movs	r2, #69	; 0x45
 8007144:	2100      	movs	r1, #0
 8007146:	5499      	strb	r1, [r3, r2]
 8007148:	f001 fcac 	bl	8008aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800714c:	1d3a      	adds	r2, r7, #4
 800714e:	2314      	movs	r3, #20
 8007150:	18fb      	adds	r3, r7, r3
 8007152:	0011      	movs	r1, r2
 8007154:	0018      	movs	r0, r3
 8007156:	f000 fdc5 	bl	8007ce4 <xTaskCheckForTimeOut>
 800715a:	1e03      	subs	r3, r0, #0
 800715c:	d11e      	bne.n	800719c <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	0018      	movs	r0, r3
 8007162:	f000 f91c 	bl	800739e <prvIsQueueEmpty>
 8007166:	1e03      	subs	r3, r0, #0
 8007168:	d011      	beq.n	800718e <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	3324      	adds	r3, #36	; 0x24
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	0011      	movs	r1, r2
 8007172:	0018      	movs	r0, r3
 8007174:	f000 fd02 	bl	8007b7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	0018      	movs	r0, r3
 800717c:	f000 f8b1 	bl	80072e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007180:	f000 fb44 	bl	800780c <xTaskResumeAll>
 8007184:	1e03      	subs	r3, r0, #0
 8007186:	d191      	bne.n	80070ac <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8007188:	f001 fc6a 	bl	8008a60 <vPortYield>
 800718c:	e78e      	b.n	80070ac <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	0018      	movs	r0, r3
 8007192:	f000 f8a6 	bl	80072e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007196:	f000 fb39 	bl	800780c <xTaskResumeAll>
 800719a:	e787      	b.n	80070ac <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	0018      	movs	r0, r3
 80071a0:	f000 f89f 	bl	80072e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071a4:	f000 fb32 	bl	800780c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	0018      	movs	r0, r3
 80071ac:	f000 f8f7 	bl	800739e <prvIsQueueEmpty>
 80071b0:	1e03      	subs	r3, r0, #0
 80071b2:	d100      	bne.n	80071b6 <xQueueReceive+0x160>
 80071b4:	e77a      	b.n	80070ac <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80071b8:	0018      	movs	r0, r3
 80071ba:	46bd      	mov	sp, r7
 80071bc:	b00a      	add	sp, #40	; 0x28
 80071be:	bd80      	pop	{r7, pc}

080071c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80071cc:	2300      	movs	r3, #0
 80071ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10e      	bne.n	80071fc <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d14e      	bne.n	8007284 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	0018      	movs	r0, r3
 80071ec:	f000 fea2 	bl	8007f34 <xTaskPriorityDisinherit>
 80071f0:	0003      	movs	r3, r0
 80071f2:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	609a      	str	r2, [r3, #8]
 80071fa:	e043      	b.n	8007284 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d119      	bne.n	8007236 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6858      	ldr	r0, [r3, #4]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	0019      	movs	r1, r3
 800720e:	f002 f917 	bl	8009440 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	685a      	ldr	r2, [r3, #4]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721a:	18d2      	adds	r2, r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	429a      	cmp	r2, r3
 800722a:	d32b      	bcc.n	8007284 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	605a      	str	r2, [r3, #4]
 8007234:	e026      	b.n	8007284 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	68d8      	ldr	r0, [r3, #12]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	0019      	movs	r1, r3
 8007242:	f002 f8fd 	bl	8009440 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	68da      	ldr	r2, [r3, #12]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724e:	425b      	negs	r3, r3
 8007250:	18d2      	adds	r2, r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	429a      	cmp	r2, r3
 8007260:	d207      	bcs.n	8007272 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	689a      	ldr	r2, [r3, #8]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	425b      	negs	r3, r3
 800726c:	18d2      	adds	r2, r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2b02      	cmp	r3, #2
 8007276:	d105      	bne.n	8007284 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d002      	beq.n	8007284 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	3b01      	subs	r3, #1
 8007282:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	1c5a      	adds	r2, r3, #1
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800728c:	697b      	ldr	r3, [r7, #20]
}
 800728e:	0018      	movs	r0, r3
 8007290:	46bd      	mov	sp, r7
 8007292:	b006      	add	sp, #24
 8007294:	bd80      	pop	{r7, pc}

08007296 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b082      	sub	sp, #8
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d018      	beq.n	80072da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68da      	ldr	r2, [r3, #12]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b0:	18d2      	adds	r2, r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d303      	bcc.n	80072ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68d9      	ldr	r1, [r3, #12]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	0018      	movs	r0, r3
 80072d6:	f002 f8b3 	bl	8009440 <memcpy>
	}
}
 80072da:	46c0      	nop			; (mov r8, r8)
 80072dc:	46bd      	mov	sp, r7
 80072de:	b002      	add	sp, #8
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b084      	sub	sp, #16
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80072ea:	f001 fbc9 	bl	8008a80 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80072ee:	230f      	movs	r3, #15
 80072f0:	18fb      	adds	r3, r7, r3
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	2145      	movs	r1, #69	; 0x45
 80072f6:	5c52      	ldrb	r2, [r2, r1]
 80072f8:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072fa:	e013      	b.n	8007324 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007300:	2b00      	cmp	r3, #0
 8007302:	d016      	beq.n	8007332 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3324      	adds	r3, #36	; 0x24
 8007308:	0018      	movs	r0, r3
 800730a:	f000 fc7b 	bl	8007c04 <xTaskRemoveFromEventList>
 800730e:	1e03      	subs	r3, r0, #0
 8007310:	d001      	beq.n	8007316 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007312:	f000 fd37 	bl	8007d84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007316:	210f      	movs	r1, #15
 8007318:	187b      	adds	r3, r7, r1
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	3b01      	subs	r3, #1
 800731e:	b2da      	uxtb	r2, r3
 8007320:	187b      	adds	r3, r7, r1
 8007322:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007324:	230f      	movs	r3, #15
 8007326:	18fb      	adds	r3, r7, r3
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	b25b      	sxtb	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	dce5      	bgt.n	80072fc <prvUnlockQueue+0x1a>
 8007330:	e000      	b.n	8007334 <prvUnlockQueue+0x52>
					break;
 8007332:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2245      	movs	r2, #69	; 0x45
 8007338:	21ff      	movs	r1, #255	; 0xff
 800733a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800733c:	f001 fbb2 	bl	8008aa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007340:	f001 fb9e 	bl	8008a80 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007344:	230e      	movs	r3, #14
 8007346:	18fb      	adds	r3, r7, r3
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	2144      	movs	r1, #68	; 0x44
 800734c:	5c52      	ldrb	r2, [r2, r1]
 800734e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007350:	e013      	b.n	800737a <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d016      	beq.n	8007388 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3310      	adds	r3, #16
 800735e:	0018      	movs	r0, r3
 8007360:	f000 fc50 	bl	8007c04 <xTaskRemoveFromEventList>
 8007364:	1e03      	subs	r3, r0, #0
 8007366:	d001      	beq.n	800736c <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8007368:	f000 fd0c 	bl	8007d84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800736c:	210e      	movs	r1, #14
 800736e:	187b      	adds	r3, r7, r1
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	3b01      	subs	r3, #1
 8007374:	b2da      	uxtb	r2, r3
 8007376:	187b      	adds	r3, r7, r1
 8007378:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800737a:	230e      	movs	r3, #14
 800737c:	18fb      	adds	r3, r7, r3
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	b25b      	sxtb	r3, r3
 8007382:	2b00      	cmp	r3, #0
 8007384:	dce5      	bgt.n	8007352 <prvUnlockQueue+0x70>
 8007386:	e000      	b.n	800738a <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8007388:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2244      	movs	r2, #68	; 0x44
 800738e:	21ff      	movs	r1, #255	; 0xff
 8007390:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8007392:	f001 fb87 	bl	8008aa4 <vPortExitCritical>
}
 8007396:	46c0      	nop			; (mov r8, r8)
 8007398:	46bd      	mov	sp, r7
 800739a:	b004      	add	sp, #16
 800739c:	bd80      	pop	{r7, pc}

0800739e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b084      	sub	sp, #16
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073a6:	f001 fb6b 	bl	8008a80 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d102      	bne.n	80073b8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073b2:	2301      	movs	r3, #1
 80073b4:	60fb      	str	r3, [r7, #12]
 80073b6:	e001      	b.n	80073bc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80073b8:	2300      	movs	r3, #0
 80073ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073bc:	f001 fb72 	bl	8008aa4 <vPortExitCritical>

	return xReturn;
 80073c0:	68fb      	ldr	r3, [r7, #12]
}
 80073c2:	0018      	movs	r0, r3
 80073c4:	46bd      	mov	sp, r7
 80073c6:	b004      	add	sp, #16
 80073c8:	bd80      	pop	{r7, pc}

080073ca <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b084      	sub	sp, #16
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073d2:	f001 fb55 	bl	8008a80 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073de:	429a      	cmp	r2, r3
 80073e0:	d102      	bne.n	80073e8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80073e2:	2301      	movs	r3, #1
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	e001      	b.n	80073ec <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80073e8:	2300      	movs	r3, #0
 80073ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073ec:	f001 fb5a 	bl	8008aa4 <vPortExitCritical>

	return xReturn;
 80073f0:	68fb      	ldr	r3, [r7, #12]
}
 80073f2:	0018      	movs	r0, r3
 80073f4:	46bd      	mov	sp, r7
 80073f6:	b004      	add	sp, #16
 80073f8:	bd80      	pop	{r7, pc}
	...

080073fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007406:	2300      	movs	r3, #0
 8007408:	60fb      	str	r3, [r7, #12]
 800740a:	e015      	b.n	8007438 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800740c:	4b0e      	ldr	r3, [pc, #56]	; (8007448 <vQueueAddToRegistry+0x4c>)
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	00d2      	lsls	r2, r2, #3
 8007412:	58d3      	ldr	r3, [r2, r3]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10c      	bne.n	8007432 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007418:	4b0b      	ldr	r3, [pc, #44]	; (8007448 <vQueueAddToRegistry+0x4c>)
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	00d2      	lsls	r2, r2, #3
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007422:	4a09      	ldr	r2, [pc, #36]	; (8007448 <vQueueAddToRegistry+0x4c>)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	00db      	lsls	r3, r3, #3
 8007428:	18d3      	adds	r3, r2, r3
 800742a:	3304      	adds	r3, #4
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007430:	e006      	b.n	8007440 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3301      	adds	r3, #1
 8007436:	60fb      	str	r3, [r7, #12]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2b07      	cmp	r3, #7
 800743c:	d9e6      	bls.n	800740c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800743e:	46c0      	nop			; (mov r8, r8)
 8007440:	46c0      	nop			; (mov r8, r8)
 8007442:	46bd      	mov	sp, r7
 8007444:	b004      	add	sp, #16
 8007446:	bd80      	pop	{r7, pc}
 8007448:	20000538 	.word	0x20000538

0800744c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800745c:	f001 fb10 	bl	8008a80 <vPortEnterCritical>
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	2244      	movs	r2, #68	; 0x44
 8007464:	5c9b      	ldrb	r3, [r3, r2]
 8007466:	b25b      	sxtb	r3, r3
 8007468:	3301      	adds	r3, #1
 800746a:	d103      	bne.n	8007474 <vQueueWaitForMessageRestricted+0x28>
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	2244      	movs	r2, #68	; 0x44
 8007470:	2100      	movs	r1, #0
 8007472:	5499      	strb	r1, [r3, r2]
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	2245      	movs	r2, #69	; 0x45
 8007478:	5c9b      	ldrb	r3, [r3, r2]
 800747a:	b25b      	sxtb	r3, r3
 800747c:	3301      	adds	r3, #1
 800747e:	d103      	bne.n	8007488 <vQueueWaitForMessageRestricted+0x3c>
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	2245      	movs	r2, #69	; 0x45
 8007484:	2100      	movs	r1, #0
 8007486:	5499      	strb	r1, [r3, r2]
 8007488:	f001 fb0c 	bl	8008aa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007490:	2b00      	cmp	r3, #0
 8007492:	d106      	bne.n	80074a2 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	3324      	adds	r3, #36	; 0x24
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	68b9      	ldr	r1, [r7, #8]
 800749c:	0018      	movs	r0, r3
 800749e:	f000 fb8b 	bl	8007bb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	0018      	movs	r0, r3
 80074a6:	f7ff ff1c 	bl	80072e2 <prvUnlockQueue>
	}
 80074aa:	46c0      	nop			; (mov r8, r8)
 80074ac:	46bd      	mov	sp, r7
 80074ae:	b006      	add	sp, #24
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80074b2:	b590      	push	{r4, r7, lr}
 80074b4:	b08d      	sub	sp, #52	; 0x34
 80074b6:	af04      	add	r7, sp, #16
 80074b8:	60f8      	str	r0, [r7, #12]
 80074ba:	60b9      	str	r1, [r7, #8]
 80074bc:	603b      	str	r3, [r7, #0]
 80074be:	1dbb      	adds	r3, r7, #6
 80074c0:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074c2:	1dbb      	adds	r3, r7, #6
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	0018      	movs	r0, r3
 80074ca:	f001 fb71 	bl	8008bb0 <pvPortMalloc>
 80074ce:	0003      	movs	r3, r0
 80074d0:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d010      	beq.n	80074fa <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074d8:	2060      	movs	r0, #96	; 0x60
 80074da:	f001 fb69 	bl	8008bb0 <pvPortMalloc>
 80074de:	0003      	movs	r3, r0
 80074e0:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d003      	beq.n	80074f0 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	631a      	str	r2, [r3, #48]	; 0x30
 80074ee:	e006      	b.n	80074fe <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	0018      	movs	r0, r3
 80074f4:	f001 fc08 	bl	8008d08 <vPortFree>
 80074f8:	e001      	b.n	80074fe <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d016      	beq.n	8007532 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007504:	1dbb      	adds	r3, r7, #6
 8007506:	881a      	ldrh	r2, [r3, #0]
 8007508:	683c      	ldr	r4, [r7, #0]
 800750a:	68b9      	ldr	r1, [r7, #8]
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	2300      	movs	r3, #0
 8007510:	9303      	str	r3, [sp, #12]
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	9302      	str	r3, [sp, #8]
 8007516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007518:	9301      	str	r3, [sp, #4]
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	0023      	movs	r3, r4
 8007520:	f000 f810 	bl	8007544 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	0018      	movs	r0, r3
 8007528:	f000 f898 	bl	800765c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800752c:	2301      	movs	r3, #1
 800752e:	61bb      	str	r3, [r7, #24]
 8007530:	e002      	b.n	8007538 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007532:	2301      	movs	r3, #1
 8007534:	425b      	negs	r3, r3
 8007536:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007538:	69bb      	ldr	r3, [r7, #24]
	}
 800753a:	0018      	movs	r0, r3
 800753c:	46bd      	mov	sp, r7
 800753e:	b009      	add	sp, #36	; 0x24
 8007540:	bd90      	pop	{r4, r7, pc}
	...

08007544 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
 8007550:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007554:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	001a      	movs	r2, r3
 800755c:	21a5      	movs	r1, #165	; 0xa5
 800755e:	f001 feed 	bl	800933c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	493b      	ldr	r1, [pc, #236]	; (8007658 <prvInitialiseNewTask+0x114>)
 800756a:	468c      	mov	ip, r1
 800756c:	4463      	add	r3, ip
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	18d3      	adds	r3, r2, r3
 8007572:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	2207      	movs	r2, #7
 8007578:	4393      	bics	r3, r2
 800757a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	2207      	movs	r2, #7
 8007580:	4013      	ands	r3, r2
 8007582:	d001      	beq.n	8007588 <prvInitialiseNewTask+0x44>
 8007584:	b672      	cpsid	i
 8007586:	e7fe      	b.n	8007586 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d020      	beq.n	80075d0 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800758e:	2300      	movs	r3, #0
 8007590:	617b      	str	r3, [r7, #20]
 8007592:	e013      	b.n	80075bc <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	18d3      	adds	r3, r2, r3
 800759a:	7818      	ldrb	r0, [r3, #0]
 800759c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800759e:	2134      	movs	r1, #52	; 0x34
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	18d3      	adds	r3, r2, r3
 80075a4:	185b      	adds	r3, r3, r1
 80075a6:	1c02      	adds	r2, r0, #0
 80075a8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	18d3      	adds	r3, r2, r3
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d006      	beq.n	80075c4 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	3301      	adds	r3, #1
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	2b0f      	cmp	r3, #15
 80075c0:	d9e8      	bls.n	8007594 <prvInitialiseNewTask+0x50>
 80075c2:	e000      	b.n	80075c6 <prvInitialiseNewTask+0x82>
			{
				break;
 80075c4:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c8:	2243      	movs	r2, #67	; 0x43
 80075ca:	2100      	movs	r1, #0
 80075cc:	5499      	strb	r1, [r3, r2]
 80075ce:	e003      	b.n	80075d8 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d2:	2234      	movs	r2, #52	; 0x34
 80075d4:	2100      	movs	r1, #0
 80075d6:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075d8:	6a3b      	ldr	r3, [r7, #32]
 80075da:	2b63      	cmp	r3, #99	; 0x63
 80075dc:	d901      	bls.n	80075e2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075de:	2363      	movs	r3, #99	; 0x63
 80075e0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e4:	6a3a      	ldr	r2, [r7, #32]
 80075e6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ea:	6a3a      	ldr	r2, [r7, #32]
 80075ec:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80075ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f0:	2200      	movs	r2, #0
 80075f2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f6:	3304      	adds	r3, #4
 80075f8:	0018      	movs	r0, r3
 80075fa:	f7ff fac0 	bl	8006b7e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007600:	3318      	adds	r3, #24
 8007602:	0018      	movs	r0, r3
 8007604:	f7ff fabb 	bl	8006b7e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800760c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	2264      	movs	r2, #100	; 0x64
 8007612:	1ad2      	subs	r2, r2, r3
 8007614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007616:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800761c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800761e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007620:	2200      	movs	r2, #0
 8007622:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007626:	2200      	movs	r2, #0
 8007628:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800762a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762c:	225c      	movs	r2, #92	; 0x5c
 800762e:	2100      	movs	r1, #0
 8007630:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	68f9      	ldr	r1, [r7, #12]
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	0018      	movs	r0, r3
 800763a:	f001 f987 	bl	800894c <pxPortInitialiseStack>
 800763e:	0002      	movs	r2, r0
 8007640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007642:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	2b00      	cmp	r3, #0
 8007648:	d002      	beq.n	8007650 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800764e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007650:	46c0      	nop			; (mov r8, r8)
 8007652:	46bd      	mov	sp, r7
 8007654:	b006      	add	sp, #24
 8007656:	bd80      	pop	{r7, pc}
 8007658:	3fffffff 	.word	0x3fffffff

0800765c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007664:	f001 fa0c 	bl	8008a80 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007668:	4b2a      	ldr	r3, [pc, #168]	; (8007714 <prvAddNewTaskToReadyList+0xb8>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	1c5a      	adds	r2, r3, #1
 800766e:	4b29      	ldr	r3, [pc, #164]	; (8007714 <prvAddNewTaskToReadyList+0xb8>)
 8007670:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8007672:	4b29      	ldr	r3, [pc, #164]	; (8007718 <prvAddNewTaskToReadyList+0xbc>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d109      	bne.n	800768e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800767a:	4b27      	ldr	r3, [pc, #156]	; (8007718 <prvAddNewTaskToReadyList+0xbc>)
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007680:	4b24      	ldr	r3, [pc, #144]	; (8007714 <prvAddNewTaskToReadyList+0xb8>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d110      	bne.n	80076aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007688:	f000 fb96 	bl	8007db8 <prvInitialiseTaskLists>
 800768c:	e00d      	b.n	80076aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800768e:	4b23      	ldr	r3, [pc, #140]	; (800771c <prvAddNewTaskToReadyList+0xc0>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d109      	bne.n	80076aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007696:	4b20      	ldr	r3, [pc, #128]	; (8007718 <prvAddNewTaskToReadyList+0xbc>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d802      	bhi.n	80076aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80076a4:	4b1c      	ldr	r3, [pc, #112]	; (8007718 <prvAddNewTaskToReadyList+0xbc>)
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076aa:	4b1d      	ldr	r3, [pc, #116]	; (8007720 <prvAddNewTaskToReadyList+0xc4>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	4b1b      	ldr	r3, [pc, #108]	; (8007720 <prvAddNewTaskToReadyList+0xc4>)
 80076b2:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80076b4:	4b1a      	ldr	r3, [pc, #104]	; (8007720 <prvAddNewTaskToReadyList+0xc4>)
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c0:	4b18      	ldr	r3, [pc, #96]	; (8007724 <prvAddNewTaskToReadyList+0xc8>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d903      	bls.n	80076d0 <prvAddNewTaskToReadyList+0x74>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076cc:	4b15      	ldr	r3, [pc, #84]	; (8007724 <prvAddNewTaskToReadyList+0xc8>)
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d4:	0013      	movs	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	189b      	adds	r3, r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4a12      	ldr	r2, [pc, #72]	; (8007728 <prvAddNewTaskToReadyList+0xcc>)
 80076de:	189a      	adds	r2, r3, r2
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	3304      	adds	r3, #4
 80076e4:	0019      	movs	r1, r3
 80076e6:	0010      	movs	r0, r2
 80076e8:	f7ff fa54 	bl	8006b94 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076ec:	f001 f9da 	bl	8008aa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076f0:	4b0a      	ldr	r3, [pc, #40]	; (800771c <prvAddNewTaskToReadyList+0xc0>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d008      	beq.n	800770a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076f8:	4b07      	ldr	r3, [pc, #28]	; (8007718 <prvAddNewTaskToReadyList+0xbc>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007702:	429a      	cmp	r2, r3
 8007704:	d201      	bcs.n	800770a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007706:	f001 f9ab 	bl	8008a60 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800770a:	46c0      	nop			; (mov r8, r8)
 800770c:	46bd      	mov	sp, r7
 800770e:	b002      	add	sp, #8
 8007710:	bd80      	pop	{r7, pc}
 8007712:	46c0      	nop			; (mov r8, r8)
 8007714:	20000dbc 	.word	0x20000dbc
 8007718:	20000578 	.word	0x20000578
 800771c:	20000dc8 	.word	0x20000dc8
 8007720:	20000dd8 	.word	0x20000dd8
 8007724:	20000dc4 	.word	0x20000dc4
 8007728:	2000057c 	.word	0x2000057c

0800772c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007734:	2300      	movs	r3, #0
 8007736:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d010      	beq.n	8007760 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800773e:	4b0d      	ldr	r3, [pc, #52]	; (8007774 <vTaskDelay+0x48>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <vTaskDelay+0x1e>
 8007746:	b672      	cpsid	i
 8007748:	e7fe      	b.n	8007748 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800774a:	f000 f853 	bl	80077f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2100      	movs	r1, #0
 8007752:	0018      	movs	r0, r3
 8007754:	f000 fd50 	bl	80081f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007758:	f000 f858 	bl	800780c <xTaskResumeAll>
 800775c:	0003      	movs	r3, r0
 800775e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8007766:	f001 f97b 	bl	8008a60 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800776a:	46c0      	nop			; (mov r8, r8)
 800776c:	46bd      	mov	sp, r7
 800776e:	b004      	add	sp, #16
 8007770:	bd80      	pop	{r7, pc}
 8007772:	46c0      	nop			; (mov r8, r8)
 8007774:	20000de4 	.word	0x20000de4

08007778 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800777e:	4917      	ldr	r1, [pc, #92]	; (80077dc <vTaskStartScheduler+0x64>)
 8007780:	4817      	ldr	r0, [pc, #92]	; (80077e0 <vTaskStartScheduler+0x68>)
 8007782:	4b18      	ldr	r3, [pc, #96]	; (80077e4 <vTaskStartScheduler+0x6c>)
 8007784:	9301      	str	r3, [sp, #4]
 8007786:	2300      	movs	r3, #0
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	2300      	movs	r3, #0
 800778c:	2280      	movs	r2, #128	; 0x80
 800778e:	f7ff fe90 	bl	80074b2 <xTaskCreate>
 8007792:	0003      	movs	r3, r0
 8007794:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d103      	bne.n	80077a4 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
 800779c:	f000 fd80 	bl	80082a0 <xTimerCreateTimerTask>
 80077a0:	0003      	movs	r3, r0
 80077a2:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d10f      	bne.n	80077ca <vTaskStartScheduler+0x52>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80077aa:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077ac:	4b0e      	ldr	r3, [pc, #56]	; (80077e8 <vTaskStartScheduler+0x70>)
 80077ae:	2201      	movs	r2, #1
 80077b0:	4252      	negs	r2, r2
 80077b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077b4:	4b0d      	ldr	r3, [pc, #52]	; (80077ec <vTaskStartScheduler+0x74>)
 80077b6:	2201      	movs	r2, #1
 80077b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80077ba:	4b0d      	ldr	r3, [pc, #52]	; (80077f0 <vTaskStartScheduler+0x78>)
 80077bc:	2200      	movs	r2, #0
 80077be:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80077c0:	f7f9 fa48 	bl	8000c54 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077c4:	f001 f928 	bl	8008a18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077c8:	e004      	b.n	80077d4 <vTaskStartScheduler+0x5c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	3301      	adds	r3, #1
 80077ce:	d101      	bne.n	80077d4 <vTaskStartScheduler+0x5c>
 80077d0:	b672      	cpsid	i
 80077d2:	e7fe      	b.n	80077d2 <vTaskStartScheduler+0x5a>
}
 80077d4:	46c0      	nop			; (mov r8, r8)
 80077d6:	46bd      	mov	sp, r7
 80077d8:	b002      	add	sp, #8
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	0800a074 	.word	0x0800a074
 80077e0:	08007d99 	.word	0x08007d99
 80077e4:	20000de0 	.word	0x20000de0
 80077e8:	20000ddc 	.word	0x20000ddc
 80077ec:	20000dc8 	.word	0x20000dc8
 80077f0:	20000dc0 	.word	0x20000dc0

080077f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80077f8:	4b03      	ldr	r3, [pc, #12]	; (8007808 <vTaskSuspendAll+0x14>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	4b02      	ldr	r3, [pc, #8]	; (8007808 <vTaskSuspendAll+0x14>)
 8007800:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007802:	46c0      	nop			; (mov r8, r8)
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	20000de4 	.word	0x20000de4

0800780c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007812:	2300      	movs	r3, #0
 8007814:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007816:	2300      	movs	r3, #0
 8007818:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800781a:	4b3a      	ldr	r3, [pc, #232]	; (8007904 <xTaskResumeAll+0xf8>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d101      	bne.n	8007826 <xTaskResumeAll+0x1a>
 8007822:	b672      	cpsid	i
 8007824:	e7fe      	b.n	8007824 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007826:	f001 f92b 	bl	8008a80 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800782a:	4b36      	ldr	r3, [pc, #216]	; (8007904 <xTaskResumeAll+0xf8>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	1e5a      	subs	r2, r3, #1
 8007830:	4b34      	ldr	r3, [pc, #208]	; (8007904 <xTaskResumeAll+0xf8>)
 8007832:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007834:	4b33      	ldr	r3, [pc, #204]	; (8007904 <xTaskResumeAll+0xf8>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d15b      	bne.n	80078f4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800783c:	4b32      	ldr	r3, [pc, #200]	; (8007908 <xTaskResumeAll+0xfc>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d057      	beq.n	80078f4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007844:	e02f      	b.n	80078a6 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007846:	4b31      	ldr	r3, [pc, #196]	; (800790c <xTaskResumeAll+0x100>)
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	3318      	adds	r3, #24
 8007852:	0018      	movs	r0, r3
 8007854:	f7ff f9f6 	bl	8006c44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	3304      	adds	r3, #4
 800785c:	0018      	movs	r0, r3
 800785e:	f7ff f9f1 	bl	8006c44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007866:	4b2a      	ldr	r3, [pc, #168]	; (8007910 <xTaskResumeAll+0x104>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	429a      	cmp	r2, r3
 800786c:	d903      	bls.n	8007876 <xTaskResumeAll+0x6a>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007872:	4b27      	ldr	r3, [pc, #156]	; (8007910 <xTaskResumeAll+0x104>)
 8007874:	601a      	str	r2, [r3, #0]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800787a:	0013      	movs	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	189b      	adds	r3, r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4a24      	ldr	r2, [pc, #144]	; (8007914 <xTaskResumeAll+0x108>)
 8007884:	189a      	adds	r2, r3, r2
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	3304      	adds	r3, #4
 800788a:	0019      	movs	r1, r3
 800788c:	0010      	movs	r0, r2
 800788e:	f7ff f981 	bl	8006b94 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007896:	4b20      	ldr	r3, [pc, #128]	; (8007918 <xTaskResumeAll+0x10c>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789c:	429a      	cmp	r2, r3
 800789e:	d302      	bcc.n	80078a6 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80078a0:	4b1e      	ldr	r3, [pc, #120]	; (800791c <xTaskResumeAll+0x110>)
 80078a2:	2201      	movs	r2, #1
 80078a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078a6:	4b19      	ldr	r3, [pc, #100]	; (800790c <xTaskResumeAll+0x100>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1cb      	bne.n	8007846 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80078b4:	f000 fb04 	bl	8007ec0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80078b8:	4b19      	ldr	r3, [pc, #100]	; (8007920 <xTaskResumeAll+0x114>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00f      	beq.n	80078e4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80078c4:	f000 f83c 	bl	8007940 <xTaskIncrementTick>
 80078c8:	1e03      	subs	r3, r0, #0
 80078ca:	d002      	beq.n	80078d2 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80078cc:	4b13      	ldr	r3, [pc, #76]	; (800791c <xTaskResumeAll+0x110>)
 80078ce:	2201      	movs	r2, #1
 80078d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	3b01      	subs	r3, #1
 80078d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1f2      	bne.n	80078c4 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 80078de:	4b10      	ldr	r3, [pc, #64]	; (8007920 <xTaskResumeAll+0x114>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80078e4:	4b0d      	ldr	r3, [pc, #52]	; (800791c <xTaskResumeAll+0x110>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d003      	beq.n	80078f4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80078ec:	2301      	movs	r3, #1
 80078ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80078f0:	f001 f8b6 	bl	8008a60 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078f4:	f001 f8d6 	bl	8008aa4 <vPortExitCritical>

	return xAlreadyYielded;
 80078f8:	68bb      	ldr	r3, [r7, #8]
}
 80078fa:	0018      	movs	r0, r3
 80078fc:	46bd      	mov	sp, r7
 80078fe:	b004      	add	sp, #16
 8007900:	bd80      	pop	{r7, pc}
 8007902:	46c0      	nop			; (mov r8, r8)
 8007904:	20000de4 	.word	0x20000de4
 8007908:	20000dbc 	.word	0x20000dbc
 800790c:	20000d7c 	.word	0x20000d7c
 8007910:	20000dc4 	.word	0x20000dc4
 8007914:	2000057c 	.word	0x2000057c
 8007918:	20000578 	.word	0x20000578
 800791c:	20000dd0 	.word	0x20000dd0
 8007920:	20000dcc 	.word	0x20000dcc

08007924 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800792a:	4b04      	ldr	r3, [pc, #16]	; (800793c <xTaskGetTickCount+0x18>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007930:	687b      	ldr	r3, [r7, #4]
}
 8007932:	0018      	movs	r0, r3
 8007934:	46bd      	mov	sp, r7
 8007936:	b002      	add	sp, #8
 8007938:	bd80      	pop	{r7, pc}
 800793a:	46c0      	nop			; (mov r8, r8)
 800793c:	20000dc0 	.word	0x20000dc0

08007940 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007946:	2300      	movs	r3, #0
 8007948:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800794a:	4b4a      	ldr	r3, [pc, #296]	; (8007a74 <xTaskIncrementTick+0x134>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d000      	beq.n	8007954 <xTaskIncrementTick+0x14>
 8007952:	e084      	b.n	8007a5e <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007954:	4b48      	ldr	r3, [pc, #288]	; (8007a78 <xTaskIncrementTick+0x138>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	3301      	adds	r3, #1
 800795a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800795c:	4b46      	ldr	r3, [pc, #280]	; (8007a78 <xTaskIncrementTick+0x138>)
 800795e:	693a      	ldr	r2, [r7, #16]
 8007960:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d117      	bne.n	8007998 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8007968:	4b44      	ldr	r3, [pc, #272]	; (8007a7c <xTaskIncrementTick+0x13c>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <xTaskIncrementTick+0x36>
 8007972:	b672      	cpsid	i
 8007974:	e7fe      	b.n	8007974 <xTaskIncrementTick+0x34>
 8007976:	4b41      	ldr	r3, [pc, #260]	; (8007a7c <xTaskIncrementTick+0x13c>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	60fb      	str	r3, [r7, #12]
 800797c:	4b40      	ldr	r3, [pc, #256]	; (8007a80 <xTaskIncrementTick+0x140>)
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	4b3e      	ldr	r3, [pc, #248]	; (8007a7c <xTaskIncrementTick+0x13c>)
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	4b3e      	ldr	r3, [pc, #248]	; (8007a80 <xTaskIncrementTick+0x140>)
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	601a      	str	r2, [r3, #0]
 800798a:	4b3e      	ldr	r3, [pc, #248]	; (8007a84 <xTaskIncrementTick+0x144>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	1c5a      	adds	r2, r3, #1
 8007990:	4b3c      	ldr	r3, [pc, #240]	; (8007a84 <xTaskIncrementTick+0x144>)
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	f000 fa94 	bl	8007ec0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007998:	4b3b      	ldr	r3, [pc, #236]	; (8007a88 <xTaskIncrementTick+0x148>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d349      	bcc.n	8007a36 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079a2:	4b36      	ldr	r3, [pc, #216]	; (8007a7c <xTaskIncrementTick+0x13c>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d104      	bne.n	80079b6 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079ac:	4b36      	ldr	r3, [pc, #216]	; (8007a88 <xTaskIncrementTick+0x148>)
 80079ae:	2201      	movs	r2, #1
 80079b0:	4252      	negs	r2, r2
 80079b2:	601a      	str	r2, [r3, #0]
					break;
 80079b4:	e03f      	b.n	8007a36 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079b6:	4b31      	ldr	r3, [pc, #196]	; (8007a7c <xTaskIncrementTick+0x13c>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d203      	bcs.n	80079d6 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80079ce:	4b2e      	ldr	r3, [pc, #184]	; (8007a88 <xTaskIncrementTick+0x148>)
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80079d4:	e02f      	b.n	8007a36 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	3304      	adds	r3, #4
 80079da:	0018      	movs	r0, r3
 80079dc:	f7ff f932 	bl	8006c44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d004      	beq.n	80079f2 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	3318      	adds	r3, #24
 80079ec:	0018      	movs	r0, r3
 80079ee:	f7ff f929 	bl	8006c44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f6:	4b25      	ldr	r3, [pc, #148]	; (8007a8c <xTaskIncrementTick+0x14c>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d903      	bls.n	8007a06 <xTaskIncrementTick+0xc6>
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a02:	4b22      	ldr	r3, [pc, #136]	; (8007a8c <xTaskIncrementTick+0x14c>)
 8007a04:	601a      	str	r2, [r3, #0]
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a0a:	0013      	movs	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	189b      	adds	r3, r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4a1f      	ldr	r2, [pc, #124]	; (8007a90 <xTaskIncrementTick+0x150>)
 8007a14:	189a      	adds	r2, r3, r2
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	3304      	adds	r3, #4
 8007a1a:	0019      	movs	r1, r3
 8007a1c:	0010      	movs	r0, r2
 8007a1e:	f7ff f8b9 	bl	8006b94 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a26:	4b1b      	ldr	r3, [pc, #108]	; (8007a94 <xTaskIncrementTick+0x154>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d3b8      	bcc.n	80079a2 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8007a30:	2301      	movs	r3, #1
 8007a32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a34:	e7b5      	b.n	80079a2 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a36:	4b17      	ldr	r3, [pc, #92]	; (8007a94 <xTaskIncrementTick+0x154>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a3c:	4914      	ldr	r1, [pc, #80]	; (8007a90 <xTaskIncrementTick+0x150>)
 8007a3e:	0013      	movs	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	189b      	adds	r3, r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	585b      	ldr	r3, [r3, r1]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d901      	bls.n	8007a50 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007a50:	4b11      	ldr	r3, [pc, #68]	; (8007a98 <xTaskIncrementTick+0x158>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d007      	beq.n	8007a68 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	617b      	str	r3, [r7, #20]
 8007a5c:	e004      	b.n	8007a68 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a5e:	4b0f      	ldr	r3, [pc, #60]	; (8007a9c <xTaskIncrementTick+0x15c>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	1c5a      	adds	r2, r3, #1
 8007a64:	4b0d      	ldr	r3, [pc, #52]	; (8007a9c <xTaskIncrementTick+0x15c>)
 8007a66:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a68:	697b      	ldr	r3, [r7, #20]
}
 8007a6a:	0018      	movs	r0, r3
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	b006      	add	sp, #24
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	46c0      	nop			; (mov r8, r8)
 8007a74:	20000de4 	.word	0x20000de4
 8007a78:	20000dc0 	.word	0x20000dc0
 8007a7c:	20000d74 	.word	0x20000d74
 8007a80:	20000d78 	.word	0x20000d78
 8007a84:	20000dd4 	.word	0x20000dd4
 8007a88:	20000ddc 	.word	0x20000ddc
 8007a8c:	20000dc4 	.word	0x20000dc4
 8007a90:	2000057c 	.word	0x2000057c
 8007a94:	20000578 	.word	0x20000578
 8007a98:	20000dd0 	.word	0x20000dd0
 8007a9c:	20000dcc 	.word	0x20000dcc

08007aa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007aa6:	4b2e      	ldr	r3, [pc, #184]	; (8007b60 <vTaskSwitchContext+0xc0>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007aae:	4b2d      	ldr	r3, [pc, #180]	; (8007b64 <vTaskSwitchContext+0xc4>)
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ab4:	e050      	b.n	8007b58 <vTaskSwitchContext+0xb8>
		xYieldPending = pdFALSE;
 8007ab6:	4b2b      	ldr	r3, [pc, #172]	; (8007b64 <vTaskSwitchContext+0xc4>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007abc:	f7f9 f8cf 	bl	8000c5e <getRunTimeCounterValue>
 8007ac0:	0002      	movs	r2, r0
 8007ac2:	4b29      	ldr	r3, [pc, #164]	; (8007b68 <vTaskSwitchContext+0xc8>)
 8007ac4:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8007ac6:	4b28      	ldr	r3, [pc, #160]	; (8007b68 <vTaskSwitchContext+0xc8>)
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	4b28      	ldr	r3, [pc, #160]	; (8007b6c <vTaskSwitchContext+0xcc>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d909      	bls.n	8007ae6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8007ad2:	4b27      	ldr	r3, [pc, #156]	; (8007b70 <vTaskSwitchContext+0xd0>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ad8:	4a23      	ldr	r2, [pc, #140]	; (8007b68 <vTaskSwitchContext+0xc8>)
 8007ada:	6810      	ldr	r0, [r2, #0]
 8007adc:	4a23      	ldr	r2, [pc, #140]	; (8007b6c <vTaskSwitchContext+0xcc>)
 8007ade:	6812      	ldr	r2, [r2, #0]
 8007ae0:	1a82      	subs	r2, r0, r2
 8007ae2:	188a      	adds	r2, r1, r2
 8007ae4:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8007ae6:	4b20      	ldr	r3, [pc, #128]	; (8007b68 <vTaskSwitchContext+0xc8>)
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	4b20      	ldr	r3, [pc, #128]	; (8007b6c <vTaskSwitchContext+0xcc>)
 8007aec:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aee:	4b21      	ldr	r3, [pc, #132]	; (8007b74 <vTaskSwitchContext+0xd4>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	607b      	str	r3, [r7, #4]
 8007af4:	e007      	b.n	8007b06 <vTaskSwitchContext+0x66>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d101      	bne.n	8007b00 <vTaskSwitchContext+0x60>
 8007afc:	b672      	cpsid	i
 8007afe:	e7fe      	b.n	8007afe <vTaskSwitchContext+0x5e>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	3b01      	subs	r3, #1
 8007b04:	607b      	str	r3, [r7, #4]
 8007b06:	491c      	ldr	r1, [pc, #112]	; (8007b78 <vTaskSwitchContext+0xd8>)
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	0013      	movs	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	189b      	adds	r3, r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	585b      	ldr	r3, [r3, r1]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0ee      	beq.n	8007af6 <vTaskSwitchContext+0x56>
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	0013      	movs	r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	189b      	adds	r3, r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4a15      	ldr	r2, [pc, #84]	; (8007b78 <vTaskSwitchContext+0xd8>)
 8007b24:	189b      	adds	r3, r3, r2
 8007b26:	603b      	str	r3, [r7, #0]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	685a      	ldr	r2, [r3, #4]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	605a      	str	r2, [r3, #4]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	685a      	ldr	r2, [r3, #4]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	3308      	adds	r3, #8
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d104      	bne.n	8007b48 <vTaskSwitchContext+0xa8>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	605a      	str	r2, [r3, #4]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	68da      	ldr	r2, [r3, #12]
 8007b4e:	4b08      	ldr	r3, [pc, #32]	; (8007b70 <vTaskSwitchContext+0xd0>)
 8007b50:	601a      	str	r2, [r3, #0]
 8007b52:	4b08      	ldr	r3, [pc, #32]	; (8007b74 <vTaskSwitchContext+0xd4>)
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	601a      	str	r2, [r3, #0]
}
 8007b58:	46c0      	nop			; (mov r8, r8)
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	b002      	add	sp, #8
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	20000de4 	.word	0x20000de4
 8007b64:	20000dd0 	.word	0x20000dd0
 8007b68:	20000dec 	.word	0x20000dec
 8007b6c:	20000de8 	.word	0x20000de8
 8007b70:	20000578 	.word	0x20000578
 8007b74:	20000dc4 	.word	0x20000dc4
 8007b78:	2000057c 	.word	0x2000057c

08007b7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d101      	bne.n	8007b90 <vTaskPlaceOnEventList+0x14>
 8007b8c:	b672      	cpsid	i
 8007b8e:	e7fe      	b.n	8007b8e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b90:	4b08      	ldr	r3, [pc, #32]	; (8007bb4 <vTaskPlaceOnEventList+0x38>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3318      	adds	r3, #24
 8007b96:	001a      	movs	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	0011      	movs	r1, r2
 8007b9c:	0018      	movs	r0, r3
 8007b9e:	f7ff f81b 	bl	8006bd8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2101      	movs	r1, #1
 8007ba6:	0018      	movs	r0, r3
 8007ba8:	f000 fb26 	bl	80081f8 <prvAddCurrentTaskToDelayedList>
}
 8007bac:	46c0      	nop			; (mov r8, r8)
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	b002      	add	sp, #8
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	20000578 	.word	0x20000578

08007bb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <vTaskPlaceOnEventListRestricted+0x16>
 8007bca:	b672      	cpsid	i
 8007bcc:	e7fe      	b.n	8007bcc <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bce:	4b0c      	ldr	r3, [pc, #48]	; (8007c00 <vTaskPlaceOnEventListRestricted+0x48>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3318      	adds	r3, #24
 8007bd4:	001a      	movs	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	0011      	movs	r1, r2
 8007bda:	0018      	movs	r0, r3
 8007bdc:	f7fe ffda 	bl	8006b94 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d002      	beq.n	8007bec <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8007be6:	2301      	movs	r3, #1
 8007be8:	425b      	negs	r3, r3
 8007bea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	0011      	movs	r1, r2
 8007bf2:	0018      	movs	r0, r3
 8007bf4:	f000 fb00 	bl	80081f8 <prvAddCurrentTaskToDelayedList>
	}
 8007bf8:	46c0      	nop			; (mov r8, r8)
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	b004      	add	sp, #16
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	20000578 	.word	0x20000578

08007c04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d101      	bne.n	8007c1e <xTaskRemoveFromEventList+0x1a>
 8007c1a:	b672      	cpsid	i
 8007c1c:	e7fe      	b.n	8007c1c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	3318      	adds	r3, #24
 8007c22:	0018      	movs	r0, r3
 8007c24:	f7ff f80e 	bl	8006c44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c28:	4b1e      	ldr	r3, [pc, #120]	; (8007ca4 <xTaskRemoveFromEventList+0xa0>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d11d      	bne.n	8007c6c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	3304      	adds	r3, #4
 8007c34:	0018      	movs	r0, r3
 8007c36:	f7ff f805 	bl	8006c44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3e:	4b1a      	ldr	r3, [pc, #104]	; (8007ca8 <xTaskRemoveFromEventList+0xa4>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d903      	bls.n	8007c4e <xTaskRemoveFromEventList+0x4a>
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c4a:	4b17      	ldr	r3, [pc, #92]	; (8007ca8 <xTaskRemoveFromEventList+0xa4>)
 8007c4c:	601a      	str	r2, [r3, #0]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c52:	0013      	movs	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	189b      	adds	r3, r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4a14      	ldr	r2, [pc, #80]	; (8007cac <xTaskRemoveFromEventList+0xa8>)
 8007c5c:	189a      	adds	r2, r3, r2
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	3304      	adds	r3, #4
 8007c62:	0019      	movs	r1, r3
 8007c64:	0010      	movs	r0, r2
 8007c66:	f7fe ff95 	bl	8006b94 <vListInsertEnd>
 8007c6a:	e007      	b.n	8007c7c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	3318      	adds	r3, #24
 8007c70:	001a      	movs	r2, r3
 8007c72:	4b0f      	ldr	r3, [pc, #60]	; (8007cb0 <xTaskRemoveFromEventList+0xac>)
 8007c74:	0011      	movs	r1, r2
 8007c76:	0018      	movs	r0, r3
 8007c78:	f7fe ff8c 	bl	8006b94 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c80:	4b0c      	ldr	r3, [pc, #48]	; (8007cb4 <xTaskRemoveFromEventList+0xb0>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d905      	bls.n	8007c96 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c8e:	4b0a      	ldr	r3, [pc, #40]	; (8007cb8 <xTaskRemoveFromEventList+0xb4>)
 8007c90:	2201      	movs	r2, #1
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	e001      	b.n	8007c9a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8007c96:	2300      	movs	r3, #0
 8007c98:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
}
 8007c9c:	0018      	movs	r0, r3
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	b004      	add	sp, #16
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	20000de4 	.word	0x20000de4
 8007ca8:	20000dc4 	.word	0x20000dc4
 8007cac:	2000057c 	.word	0x2000057c
 8007cb0:	20000d7c 	.word	0x20000d7c
 8007cb4:	20000578 	.word	0x20000578
 8007cb8:	20000dd0 	.word	0x20000dd0

08007cbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007cc4:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <vTaskInternalSetTimeOutState+0x20>)
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ccc:	4b04      	ldr	r3, [pc, #16]	; (8007ce0 <vTaskInternalSetTimeOutState+0x24>)
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	605a      	str	r2, [r3, #4]
}
 8007cd4:	46c0      	nop			; (mov r8, r8)
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	b002      	add	sp, #8
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	20000dd4 	.word	0x20000dd4
 8007ce0:	20000dc0 	.word	0x20000dc0

08007ce4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <xTaskCheckForTimeOut+0x14>
 8007cf4:	b672      	cpsid	i
 8007cf6:	e7fe      	b.n	8007cf6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <xTaskCheckForTimeOut+0x1e>
 8007cfe:	b672      	cpsid	i
 8007d00:	e7fe      	b.n	8007d00 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8007d02:	f000 febd 	bl	8008a80 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d06:	4b1d      	ldr	r3, [pc, #116]	; (8007d7c <xTaskCheckForTimeOut+0x98>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	d102      	bne.n	8007d24 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	617b      	str	r3, [r7, #20]
 8007d22:	e024      	b.n	8007d6e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	4b15      	ldr	r3, [pc, #84]	; (8007d80 <xTaskCheckForTimeOut+0x9c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d007      	beq.n	8007d40 <xTaskCheckForTimeOut+0x5c>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d302      	bcc.n	8007d40 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	617b      	str	r3, [r7, #20]
 8007d3e:	e016      	b.n	8007d6e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d20c      	bcs.n	8007d64 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	1ad2      	subs	r2, r2, r3
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	0018      	movs	r0, r3
 8007d5a:	f7ff ffaf 	bl	8007cbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	617b      	str	r3, [r7, #20]
 8007d62:	e004      	b.n	8007d6e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	2200      	movs	r2, #0
 8007d68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8007d6e:	f000 fe99 	bl	8008aa4 <vPortExitCritical>

	return xReturn;
 8007d72:	697b      	ldr	r3, [r7, #20]
}
 8007d74:	0018      	movs	r0, r3
 8007d76:	46bd      	mov	sp, r7
 8007d78:	b006      	add	sp, #24
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	20000dc0 	.word	0x20000dc0
 8007d80:	20000dd4 	.word	0x20000dd4

08007d84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d88:	4b02      	ldr	r3, [pc, #8]	; (8007d94 <vTaskMissedYield+0x10>)
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	601a      	str	r2, [r3, #0]
}
 8007d8e:	46c0      	nop			; (mov r8, r8)
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	20000dd0 	.word	0x20000dd0

08007d98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007da0:	f000 f84e 	bl	8007e40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007da4:	4b03      	ldr	r3, [pc, #12]	; (8007db4 <prvIdleTask+0x1c>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d9f9      	bls.n	8007da0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007dac:	f000 fe58 	bl	8008a60 <vPortYield>
		prvCheckTasksWaitingTermination();
 8007db0:	e7f6      	b.n	8007da0 <prvIdleTask+0x8>
 8007db2:	46c0      	nop			; (mov r8, r8)
 8007db4:	2000057c 	.word	0x2000057c

08007db8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	607b      	str	r3, [r7, #4]
 8007dc2:	e00c      	b.n	8007dde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	0013      	movs	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	189b      	adds	r3, r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4a14      	ldr	r2, [pc, #80]	; (8007e20 <prvInitialiseTaskLists+0x68>)
 8007dd0:	189b      	adds	r3, r3, r2
 8007dd2:	0018      	movs	r0, r3
 8007dd4:	f7fe feb5 	bl	8006b42 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	607b      	str	r3, [r7, #4]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b63      	cmp	r3, #99	; 0x63
 8007de2:	d9ef      	bls.n	8007dc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007de4:	4b0f      	ldr	r3, [pc, #60]	; (8007e24 <prvInitialiseTaskLists+0x6c>)
 8007de6:	0018      	movs	r0, r3
 8007de8:	f7fe feab 	bl	8006b42 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007dec:	4b0e      	ldr	r3, [pc, #56]	; (8007e28 <prvInitialiseTaskLists+0x70>)
 8007dee:	0018      	movs	r0, r3
 8007df0:	f7fe fea7 	bl	8006b42 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007df4:	4b0d      	ldr	r3, [pc, #52]	; (8007e2c <prvInitialiseTaskLists+0x74>)
 8007df6:	0018      	movs	r0, r3
 8007df8:	f7fe fea3 	bl	8006b42 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007dfc:	4b0c      	ldr	r3, [pc, #48]	; (8007e30 <prvInitialiseTaskLists+0x78>)
 8007dfe:	0018      	movs	r0, r3
 8007e00:	f7fe fe9f 	bl	8006b42 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e04:	4b0b      	ldr	r3, [pc, #44]	; (8007e34 <prvInitialiseTaskLists+0x7c>)
 8007e06:	0018      	movs	r0, r3
 8007e08:	f7fe fe9b 	bl	8006b42 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e0c:	4b0a      	ldr	r3, [pc, #40]	; (8007e38 <prvInitialiseTaskLists+0x80>)
 8007e0e:	4a05      	ldr	r2, [pc, #20]	; (8007e24 <prvInitialiseTaskLists+0x6c>)
 8007e10:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e12:	4b0a      	ldr	r3, [pc, #40]	; (8007e3c <prvInitialiseTaskLists+0x84>)
 8007e14:	4a04      	ldr	r2, [pc, #16]	; (8007e28 <prvInitialiseTaskLists+0x70>)
 8007e16:	601a      	str	r2, [r3, #0]
}
 8007e18:	46c0      	nop			; (mov r8, r8)
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	b002      	add	sp, #8
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	2000057c 	.word	0x2000057c
 8007e24:	20000d4c 	.word	0x20000d4c
 8007e28:	20000d60 	.word	0x20000d60
 8007e2c:	20000d7c 	.word	0x20000d7c
 8007e30:	20000d90 	.word	0x20000d90
 8007e34:	20000da8 	.word	0x20000da8
 8007e38:	20000d74 	.word	0x20000d74
 8007e3c:	20000d78 	.word	0x20000d78

08007e40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e46:	e01a      	b.n	8007e7e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8007e48:	f000 fe1a 	bl	8008a80 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e4c:	4b10      	ldr	r3, [pc, #64]	; (8007e90 <prvCheckTasksWaitingTermination+0x50>)
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	3304      	adds	r3, #4
 8007e58:	0018      	movs	r0, r3
 8007e5a:	f7fe fef3 	bl	8006c44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e5e:	4b0d      	ldr	r3, [pc, #52]	; (8007e94 <prvCheckTasksWaitingTermination+0x54>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	1e5a      	subs	r2, r3, #1
 8007e64:	4b0b      	ldr	r3, [pc, #44]	; (8007e94 <prvCheckTasksWaitingTermination+0x54>)
 8007e66:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e68:	4b0b      	ldr	r3, [pc, #44]	; (8007e98 <prvCheckTasksWaitingTermination+0x58>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	1e5a      	subs	r2, r3, #1
 8007e6e:	4b0a      	ldr	r3, [pc, #40]	; (8007e98 <prvCheckTasksWaitingTermination+0x58>)
 8007e70:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8007e72:	f000 fe17 	bl	8008aa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	0018      	movs	r0, r3
 8007e7a:	f000 f80f 	bl	8007e9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e7e:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <prvCheckTasksWaitingTermination+0x58>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1e0      	bne.n	8007e48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e86:	46c0      	nop			; (mov r8, r8)
 8007e88:	46c0      	nop			; (mov r8, r8)
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	b002      	add	sp, #8
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	20000d90 	.word	0x20000d90
 8007e94:	20000dbc 	.word	0x20000dbc
 8007e98:	20000da4 	.word	0x20000da4

08007e9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea8:	0018      	movs	r0, r3
 8007eaa:	f000 ff2d 	bl	8008d08 <vPortFree>
			vPortFree( pxTCB );
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	0018      	movs	r0, r3
 8007eb2:	f000 ff29 	bl	8008d08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007eb6:	46c0      	nop			; (mov r8, r8)
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	b002      	add	sp, #8
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ec6:	4b0b      	ldr	r3, [pc, #44]	; (8007ef4 <prvResetNextTaskUnblockTime+0x34>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d104      	bne.n	8007eda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ed0:	4b09      	ldr	r3, [pc, #36]	; (8007ef8 <prvResetNextTaskUnblockTime+0x38>)
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	4252      	negs	r2, r2
 8007ed6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ed8:	e008      	b.n	8007eec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eda:	4b06      	ldr	r3, [pc, #24]	; (8007ef4 <prvResetNextTaskUnblockTime+0x34>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	4b03      	ldr	r3, [pc, #12]	; (8007ef8 <prvResetNextTaskUnblockTime+0x38>)
 8007eea:	601a      	str	r2, [r3, #0]
}
 8007eec:	46c0      	nop			; (mov r8, r8)
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	b002      	add	sp, #8
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	20000d74 	.word	0x20000d74
 8007ef8:	20000ddc 	.word	0x20000ddc

08007efc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f02:	4b0a      	ldr	r3, [pc, #40]	; (8007f2c <xTaskGetSchedulerState+0x30>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d102      	bne.n	8007f10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	607b      	str	r3, [r7, #4]
 8007f0e:	e008      	b.n	8007f22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f10:	4b07      	ldr	r3, [pc, #28]	; (8007f30 <xTaskGetSchedulerState+0x34>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d102      	bne.n	8007f1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f18:	2302      	movs	r3, #2
 8007f1a:	607b      	str	r3, [r7, #4]
 8007f1c:	e001      	b.n	8007f22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f22:	687b      	ldr	r3, [r7, #4]
	}
 8007f24:	0018      	movs	r0, r3
 8007f26:	46bd      	mov	sp, r7
 8007f28:	b002      	add	sp, #8
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20000dc8 	.word	0x20000dc8
 8007f30:	20000de4 	.word	0x20000de4

08007f34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007f40:	2300      	movs	r3, #0
 8007f42:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d044      	beq.n	8007fd4 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f4a:	4b25      	ldr	r3, [pc, #148]	; (8007fe0 <xTaskPriorityDisinherit+0xac>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d001      	beq.n	8007f58 <xTaskPriorityDisinherit+0x24>
 8007f54:	b672      	cpsid	i
 8007f56:	e7fe      	b.n	8007f56 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d101      	bne.n	8007f64 <xTaskPriorityDisinherit+0x30>
 8007f60:	b672      	cpsid	i
 8007f62:	e7fe      	b.n	8007f62 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f68:	1e5a      	subs	r2, r3, #1
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d02c      	beq.n	8007fd4 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d128      	bne.n	8007fd4 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	3304      	adds	r3, #4
 8007f86:	0018      	movs	r0, r3
 8007f88:	f7fe fe5c 	bl	8006c44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f98:	2264      	movs	r2, #100	; 0x64
 8007f9a:	1ad2      	subs	r2, r2, r3
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa4:	4b0f      	ldr	r3, [pc, #60]	; (8007fe4 <xTaskPriorityDisinherit+0xb0>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d903      	bls.n	8007fb4 <xTaskPriorityDisinherit+0x80>
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb0:	4b0c      	ldr	r3, [pc, #48]	; (8007fe4 <xTaskPriorityDisinherit+0xb0>)
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb8:	0013      	movs	r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	189b      	adds	r3, r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4a09      	ldr	r2, [pc, #36]	; (8007fe8 <xTaskPriorityDisinherit+0xb4>)
 8007fc2:	189a      	adds	r2, r3, r2
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	0019      	movs	r1, r3
 8007fca:	0010      	movs	r0, r2
 8007fcc:	f7fe fde2 	bl	8006b94 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
	}
 8007fd6:	0018      	movs	r0, r3
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	b004      	add	sp, #16
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	46c0      	nop			; (mov r8, r8)
 8007fe0:	20000578 	.word	0x20000578
 8007fe4:	20000dc4 	.word	0x20000dc4
 8007fe8:	2000057c 	.word	0x2000057c

08007fec <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b086      	sub	sp, #24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
 8007ff8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007ffa:	f000 fd41 	bl	8008a80 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007ffe:	4b24      	ldr	r3, [pc, #144]	; (8008090 <xTaskNotifyWait+0xa4>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	225c      	movs	r2, #92	; 0x5c
 8008004:	5c9b      	ldrb	r3, [r3, r2]
 8008006:	b2db      	uxtb	r3, r3
 8008008:	2b02      	cmp	r3, #2
 800800a:	d015      	beq.n	8008038 <xTaskNotifyWait+0x4c>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800800c:	4b20      	ldr	r3, [pc, #128]	; (8008090 <xTaskNotifyWait+0xa4>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008012:	68f9      	ldr	r1, [r7, #12]
 8008014:	43c9      	mvns	r1, r1
 8008016:	400a      	ands	r2, r1
 8008018:	659a      	str	r2, [r3, #88]	; 0x58

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800801a:	4b1d      	ldr	r3, [pc, #116]	; (8008090 <xTaskNotifyWait+0xa4>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	225c      	movs	r2, #92	; 0x5c
 8008020:	2101      	movs	r1, #1
 8008022:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d006      	beq.n	8008038 <xTaskNotifyWait+0x4c>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2101      	movs	r1, #1
 800802e:	0018      	movs	r0, r3
 8008030:	f000 f8e2 	bl	80081f8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008034:	f000 fd14 	bl	8008a60 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008038:	f000 fd34 	bl	8008aa4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800803c:	f000 fd20 	bl	8008a80 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d004      	beq.n	8008050 <xTaskNotifyWait+0x64>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008046:	4b12      	ldr	r3, [pc, #72]	; (8008090 <xTaskNotifyWait+0xa4>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008050:	4b0f      	ldr	r3, [pc, #60]	; (8008090 <xTaskNotifyWait+0xa4>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	225c      	movs	r2, #92	; 0x5c
 8008056:	5c9b      	ldrb	r3, [r3, r2]
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b02      	cmp	r3, #2
 800805c:	d002      	beq.n	8008064 <xTaskNotifyWait+0x78>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800805e:	2300      	movs	r3, #0
 8008060:	617b      	str	r3, [r7, #20]
 8008062:	e008      	b.n	8008076 <xTaskNotifyWait+0x8a>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008064:	4b0a      	ldr	r3, [pc, #40]	; (8008090 <xTaskNotifyWait+0xa4>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800806a:	68b9      	ldr	r1, [r7, #8]
 800806c:	43c9      	mvns	r1, r1
 800806e:	400a      	ands	r2, r1
 8008070:	659a      	str	r2, [r3, #88]	; 0x58
				xReturn = pdTRUE;
 8008072:	2301      	movs	r3, #1
 8008074:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008076:	4b06      	ldr	r3, [pc, #24]	; (8008090 <xTaskNotifyWait+0xa4>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	225c      	movs	r2, #92	; 0x5c
 800807c:	2100      	movs	r1, #0
 800807e:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 8008080:	f000 fd10 	bl	8008aa4 <vPortExitCritical>

		return xReturn;
 8008084:	697b      	ldr	r3, [r7, #20]
	}
 8008086:	0018      	movs	r0, r3
 8008088:	46bd      	mov	sp, r7
 800808a:	b006      	add	sp, #24
 800808c:	bd80      	pop	{r7, pc}
 800808e:	46c0      	nop			; (mov r8, r8)
 8008090:	20000578 	.word	0x20000578

08008094 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008094:	b580      	push	{r7, lr}
 8008096:	b088      	sub	sp, #32
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	603b      	str	r3, [r7, #0]
 80080a0:	1dfb      	adds	r3, r7, #7
 80080a2:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80080a4:	2301      	movs	r3, #1
 80080a6:	61fb      	str	r3, [r7, #28]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <xTaskGenericNotifyFromISR+0x1e>
 80080ae:	b672      	cpsid	i
 80080b0:	e7fe      	b.n	80080b0 <xTaskGenericNotifyFromISR+0x1c>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	61bb      	str	r3, [r7, #24]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80080b6:	f000 fd0d 	bl	8008ad4 <ulSetInterruptMaskFromISR>
 80080ba:	0003      	movs	r3, r0
 80080bc:	617b      	str	r3, [r7, #20]
		{
			if( pulPreviousNotificationValue != NULL )
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <xTaskGenericNotifyFromISR+0x38>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80080cc:	2313      	movs	r3, #19
 80080ce:	18fb      	adds	r3, r7, r3
 80080d0:	69ba      	ldr	r2, [r7, #24]
 80080d2:	215c      	movs	r1, #92	; 0x5c
 80080d4:	5c52      	ldrb	r2, [r2, r1]
 80080d6:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	225c      	movs	r2, #92	; 0x5c
 80080dc:	2102      	movs	r1, #2
 80080de:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 80080e0:	1dfb      	adds	r3, r7, #7
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	2b04      	cmp	r3, #4
 80080e6:	d821      	bhi.n	800812c <xTaskGenericNotifyFromISR+0x98>
 80080e8:	009a      	lsls	r2, r3, #2
 80080ea:	4b3c      	ldr	r3, [pc, #240]	; (80081dc <xTaskGenericNotifyFromISR+0x148>)
 80080ec:	18d3      	adds	r3, r2, r3
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	431a      	orrs	r2, r3
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 80080fe:	e01e      	b.n	800813e <xTaskGenericNotifyFromISR+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008104:	1c5a      	adds	r2, r3, #1
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 800810a:	e018      	b.n	800813e <xTaskGenericNotifyFromISR+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 8008112:	e014      	b.n	800813e <xTaskGenericNotifyFromISR+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008114:	2313      	movs	r3, #19
 8008116:	18fb      	adds	r3, r7, r3
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	2b02      	cmp	r3, #2
 800811c:	d003      	beq.n	8008126 <xTaskGenericNotifyFromISR+0x92>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	659a      	str	r2, [r3, #88]	; 0x58
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008124:	e00b      	b.n	800813e <xTaskGenericNotifyFromISR+0xaa>
						xReturn = pdFAIL;
 8008126:	2300      	movs	r3, #0
 8008128:	61fb      	str	r3, [r7, #28]
					break;
 800812a:	e008      	b.n	800813e <xTaskGenericNotifyFromISR+0xaa>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008130:	3301      	adds	r3, #1
 8008132:	d003      	beq.n	800813c <xTaskGenericNotifyFromISR+0xa8>
 8008134:	b672      	cpsid	i
 8008136:	e7fe      	b.n	8008136 <xTaskGenericNotifyFromISR+0xa2>
					break;
 8008138:	46c0      	nop			; (mov r8, r8)
 800813a:	e000      	b.n	800813e <xTaskGenericNotifyFromISR+0xaa>
					break;
 800813c:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800813e:	2313      	movs	r3, #19
 8008140:	18fb      	adds	r3, r7, r3
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d13f      	bne.n	80081c8 <xTaskGenericNotifyFromISR+0x134>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <xTaskGenericNotifyFromISR+0xc0>
 8008150:	b672      	cpsid	i
 8008152:	e7fe      	b.n	8008152 <xTaskGenericNotifyFromISR+0xbe>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008154:	4b22      	ldr	r3, [pc, #136]	; (80081e0 <xTaskGenericNotifyFromISR+0x14c>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d11d      	bne.n	8008198 <xTaskGenericNotifyFromISR+0x104>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	3304      	adds	r3, #4
 8008160:	0018      	movs	r0, r3
 8008162:	f7fe fd6f 	bl	8006c44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800816a:	4b1e      	ldr	r3, [pc, #120]	; (80081e4 <xTaskGenericNotifyFromISR+0x150>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	429a      	cmp	r2, r3
 8008170:	d903      	bls.n	800817a <xTaskGenericNotifyFromISR+0xe6>
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008176:	4b1b      	ldr	r3, [pc, #108]	; (80081e4 <xTaskGenericNotifyFromISR+0x150>)
 8008178:	601a      	str	r2, [r3, #0]
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800817e:	0013      	movs	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	189b      	adds	r3, r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4a18      	ldr	r2, [pc, #96]	; (80081e8 <xTaskGenericNotifyFromISR+0x154>)
 8008188:	189a      	adds	r2, r3, r2
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	3304      	adds	r3, #4
 800818e:	0019      	movs	r1, r3
 8008190:	0010      	movs	r0, r2
 8008192:	f7fe fcff 	bl	8006b94 <vListInsertEnd>
 8008196:	e007      	b.n	80081a8 <xTaskGenericNotifyFromISR+0x114>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	3318      	adds	r3, #24
 800819c:	001a      	movs	r2, r3
 800819e:	4b13      	ldr	r3, [pc, #76]	; (80081ec <xTaskGenericNotifyFromISR+0x158>)
 80081a0:	0011      	movs	r1, r2
 80081a2:	0018      	movs	r0, r3
 80081a4:	f7fe fcf6 	bl	8006b94 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ac:	4b10      	ldr	r3, [pc, #64]	; (80081f0 <xTaskGenericNotifyFromISR+0x15c>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d908      	bls.n	80081c8 <xTaskGenericNotifyFromISR+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d002      	beq.n	80081c2 <xTaskGenericNotifyFromISR+0x12e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80081bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081be:	2201      	movs	r2, #1
 80081c0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80081c2:	4b0c      	ldr	r3, [pc, #48]	; (80081f4 <xTaskGenericNotifyFromISR+0x160>)
 80081c4:	2201      	movs	r2, #1
 80081c6:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	0018      	movs	r0, r3
 80081cc:	f000 fc88 	bl	8008ae0 <vClearInterruptMaskFromISR>

		return xReturn;
 80081d0:	69fb      	ldr	r3, [r7, #28]
	}
 80081d2:	0018      	movs	r0, r3
 80081d4:	46bd      	mov	sp, r7
 80081d6:	b008      	add	sp, #32
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	46c0      	nop			; (mov r8, r8)
 80081dc:	0800a26c 	.word	0x0800a26c
 80081e0:	20000de4 	.word	0x20000de4
 80081e4:	20000dc4 	.word	0x20000dc4
 80081e8:	2000057c 	.word	0x2000057c
 80081ec:	20000d7c 	.word	0x20000d7c
 80081f0:	20000578 	.word	0x20000578
 80081f4:	20000dd0 	.word	0x20000dd0

080081f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008202:	4b21      	ldr	r3, [pc, #132]	; (8008288 <prvAddCurrentTaskToDelayedList+0x90>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008208:	4b20      	ldr	r3, [pc, #128]	; (800828c <prvAddCurrentTaskToDelayedList+0x94>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	3304      	adds	r3, #4
 800820e:	0018      	movs	r0, r3
 8008210:	f7fe fd18 	bl	8006c44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	3301      	adds	r3, #1
 8008218:	d10b      	bne.n	8008232 <prvAddCurrentTaskToDelayedList+0x3a>
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d008      	beq.n	8008232 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008220:	4b1a      	ldr	r3, [pc, #104]	; (800828c <prvAddCurrentTaskToDelayedList+0x94>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	1d1a      	adds	r2, r3, #4
 8008226:	4b1a      	ldr	r3, [pc, #104]	; (8008290 <prvAddCurrentTaskToDelayedList+0x98>)
 8008228:	0011      	movs	r1, r2
 800822a:	0018      	movs	r0, r3
 800822c:	f7fe fcb2 	bl	8006b94 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008230:	e026      	b.n	8008280 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	18d3      	adds	r3, r2, r3
 8008238:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800823a:	4b14      	ldr	r3, [pc, #80]	; (800828c <prvAddCurrentTaskToDelayedList+0x94>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	429a      	cmp	r2, r3
 8008248:	d209      	bcs.n	800825e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800824a:	4b12      	ldr	r3, [pc, #72]	; (8008294 <prvAddCurrentTaskToDelayedList+0x9c>)
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	4b0f      	ldr	r3, [pc, #60]	; (800828c <prvAddCurrentTaskToDelayedList+0x94>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	3304      	adds	r3, #4
 8008254:	0019      	movs	r1, r3
 8008256:	0010      	movs	r0, r2
 8008258:	f7fe fcbe 	bl	8006bd8 <vListInsert>
}
 800825c:	e010      	b.n	8008280 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800825e:	4b0e      	ldr	r3, [pc, #56]	; (8008298 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	4b0a      	ldr	r3, [pc, #40]	; (800828c <prvAddCurrentTaskToDelayedList+0x94>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	3304      	adds	r3, #4
 8008268:	0019      	movs	r1, r3
 800826a:	0010      	movs	r0, r2
 800826c:	f7fe fcb4 	bl	8006bd8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008270:	4b0a      	ldr	r3, [pc, #40]	; (800829c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	429a      	cmp	r2, r3
 8008278:	d202      	bcs.n	8008280 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800827a:	4b08      	ldr	r3, [pc, #32]	; (800829c <prvAddCurrentTaskToDelayedList+0xa4>)
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	601a      	str	r2, [r3, #0]
}
 8008280:	46c0      	nop			; (mov r8, r8)
 8008282:	46bd      	mov	sp, r7
 8008284:	b004      	add	sp, #16
 8008286:	bd80      	pop	{r7, pc}
 8008288:	20000dc0 	.word	0x20000dc0
 800828c:	20000578 	.word	0x20000578
 8008290:	20000da8 	.word	0x20000da8
 8008294:	20000d78 	.word	0x20000d78
 8008298:	20000d74 	.word	0x20000d74
 800829c:	20000ddc 	.word	0x20000ddc

080082a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80082a6:	2300      	movs	r3, #0
 80082a8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80082aa:	f000 faf5 	bl	8008898 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80082ae:	4b0d      	ldr	r3, [pc, #52]	; (80082e4 <xTimerCreateTimerTask+0x44>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00c      	beq.n	80082d0 <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80082b6:	2380      	movs	r3, #128	; 0x80
 80082b8:	005a      	lsls	r2, r3, #1
 80082ba:	490b      	ldr	r1, [pc, #44]	; (80082e8 <xTimerCreateTimerTask+0x48>)
 80082bc:	480b      	ldr	r0, [pc, #44]	; (80082ec <xTimerCreateTimerTask+0x4c>)
 80082be:	4b0c      	ldr	r3, [pc, #48]	; (80082f0 <xTimerCreateTimerTask+0x50>)
 80082c0:	9301      	str	r3, [sp, #4]
 80082c2:	2302      	movs	r3, #2
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	2300      	movs	r3, #0
 80082c8:	f7ff f8f3 	bl	80074b2 <xTaskCreate>
 80082cc:	0003      	movs	r3, r0
 80082ce:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d101      	bne.n	80082da <xTimerCreateTimerTask+0x3a>
 80082d6:	b672      	cpsid	i
 80082d8:	e7fe      	b.n	80082d8 <xTimerCreateTimerTask+0x38>
	return xReturn;
 80082da:	687b      	ldr	r3, [r7, #4]
}
 80082dc:	0018      	movs	r0, r3
 80082de:	46bd      	mov	sp, r7
 80082e0:	b002      	add	sp, #8
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	20000e20 	.word	0x20000e20
 80082e8:	0800a07c 	.word	0x0800a07c
 80082ec:	080084bd 	.word	0x080084bd
 80082f0:	20000e24 	.word	0x20000e24

080082f4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80082f4:	b590      	push	{r4, r7, lr}
 80082f6:	b089      	sub	sp, #36	; 0x24
 80082f8:	af02      	add	r7, sp, #8
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
 8008300:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008302:	202c      	movs	r0, #44	; 0x2c
 8008304:	f000 fc54 	bl	8008bb0 <pvPortMalloc>
 8008308:	0003      	movs	r3, r0
 800830a:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00e      	beq.n	8008330 <xTimerCreate+0x3c>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	2228      	movs	r2, #40	; 0x28
 8008316:	2100      	movs	r1, #0
 8008318:	5499      	strb	r1, [r3, r2]
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800831a:	683c      	ldr	r4, [r7, #0]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	68b9      	ldr	r1, [r7, #8]
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	9301      	str	r3, [sp, #4]
 8008326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	0023      	movs	r3, r4
 800832c:	f000 f805 	bl	800833a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008330:	697b      	ldr	r3, [r7, #20]
	}
 8008332:	0018      	movs	r0, r3
 8008334:	46bd      	mov	sp, r7
 8008336:	b007      	add	sp, #28
 8008338:	bd90      	pop	{r4, r7, pc}

0800833a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b084      	sub	sp, #16
 800833e:	af00      	add	r7, sp, #0
 8008340:	60f8      	str	r0, [r7, #12]
 8008342:	60b9      	str	r1, [r7, #8]
 8008344:	607a      	str	r2, [r7, #4]
 8008346:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d101      	bne.n	8008352 <prvInitialiseNewTimer+0x18>
 800834e:	b672      	cpsid	i
 8008350:	e7fe      	b.n	8008350 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d01e      	beq.n	8008396 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008358:	f000 fa9e 	bl	8008898 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	683a      	ldr	r2, [r7, #0]
 800836c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	69ba      	ldr	r2, [r7, #24]
 8008372:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	3304      	adds	r3, #4
 8008378:	0018      	movs	r0, r3
 800837a:	f7fe fc00 	bl	8006b7e <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d008      	beq.n	8008396 <prvInitialiseNewTimer+0x5c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	2228      	movs	r2, #40	; 0x28
 8008388:	5c9b      	ldrb	r3, [r3, r2]
 800838a:	2204      	movs	r2, #4
 800838c:	4313      	orrs	r3, r2
 800838e:	b2d9      	uxtb	r1, r3
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	2228      	movs	r2, #40	; 0x28
 8008394:	5499      	strb	r1, [r3, r2]
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008396:	46c0      	nop			; (mov r8, r8)
 8008398:	46bd      	mov	sp, r7
 800839a:	b004      	add	sp, #16
 800839c:	bd80      	pop	{r7, pc}
	...

080083a0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80083a0:	b590      	push	{r4, r7, lr}
 80083a2:	b089      	sub	sp, #36	; 0x24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
 80083ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80083ae:	2300      	movs	r3, #0
 80083b0:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d101      	bne.n	80083bc <xTimerGenericCommand+0x1c>
 80083b8:	b672      	cpsid	i
 80083ba:	e7fe      	b.n	80083ba <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083bc:	4b1c      	ldr	r3, [pc, #112]	; (8008430 <xTimerGenericCommand+0x90>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d030      	beq.n	8008426 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083c4:	2410      	movs	r4, #16
 80083c6:	193b      	adds	r3, r7, r4
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083cc:	193b      	adds	r3, r7, r4
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80083d2:	193b      	adds	r3, r7, r4
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	2b05      	cmp	r3, #5
 80083dc:	dc19      	bgt.n	8008412 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083de:	f7ff fd8d 	bl	8007efc <xTaskGetSchedulerState>
 80083e2:	0003      	movs	r3, r0
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d109      	bne.n	80083fc <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80083e8:	4b11      	ldr	r3, [pc, #68]	; (8008430 <xTimerGenericCommand+0x90>)
 80083ea:	6818      	ldr	r0, [r3, #0]
 80083ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ee:	1939      	adds	r1, r7, r4
 80083f0:	2300      	movs	r3, #0
 80083f2:	f7fe fcf8 	bl	8006de6 <xQueueGenericSend>
 80083f6:	0003      	movs	r3, r0
 80083f8:	61fb      	str	r3, [r7, #28]
 80083fa:	e014      	b.n	8008426 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083fc:	4b0c      	ldr	r3, [pc, #48]	; (8008430 <xTimerGenericCommand+0x90>)
 80083fe:	6818      	ldr	r0, [r3, #0]
 8008400:	2310      	movs	r3, #16
 8008402:	18f9      	adds	r1, r7, r3
 8008404:	2300      	movs	r3, #0
 8008406:	2200      	movs	r2, #0
 8008408:	f7fe fced 	bl	8006de6 <xQueueGenericSend>
 800840c:	0003      	movs	r3, r0
 800840e:	61fb      	str	r3, [r7, #28]
 8008410:	e009      	b.n	8008426 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008412:	4b07      	ldr	r3, [pc, #28]	; (8008430 <xTimerGenericCommand+0x90>)
 8008414:	6818      	ldr	r0, [r3, #0]
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	2310      	movs	r3, #16
 800841a:	18f9      	adds	r1, r7, r3
 800841c:	2300      	movs	r3, #0
 800841e:	f7fe fda6 	bl	8006f6e <xQueueGenericSendFromISR>
 8008422:	0003      	movs	r3, r0
 8008424:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008426:	69fb      	ldr	r3, [r7, #28]
}
 8008428:	0018      	movs	r0, r3
 800842a:	46bd      	mov	sp, r7
 800842c:	b009      	add	sp, #36	; 0x24
 800842e:	bd90      	pop	{r4, r7, pc}
 8008430:	20000e20 	.word	0x20000e20

08008434 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b086      	sub	sp, #24
 8008438:	af02      	add	r7, sp, #8
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800843e:	4b1e      	ldr	r3, [pc, #120]	; (80084b8 <prvProcessExpiredTimer+0x84>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3304      	adds	r3, #4
 800844c:	0018      	movs	r0, r3
 800844e:	f7fe fbf9 	bl	8006c44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2228      	movs	r2, #40	; 0x28
 8008456:	5c9b      	ldrb	r3, [r3, r2]
 8008458:	001a      	movs	r2, r3
 800845a:	2304      	movs	r3, #4
 800845c:	4013      	ands	r3, r2
 800845e:	d019      	beq.n	8008494 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	699a      	ldr	r2, [r3, #24]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	18d1      	adds	r1, r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f000 f8c3 	bl	80085f8 <prvInsertTimerInActiveList>
 8008472:	1e03      	subs	r3, r0, #0
 8008474:	d017      	beq.n	80084a6 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	2300      	movs	r3, #0
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	2300      	movs	r3, #0
 8008480:	2100      	movs	r1, #0
 8008482:	f7ff ff8d 	bl	80083a0 <xTimerGenericCommand>
 8008486:	0003      	movs	r3, r0
 8008488:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10a      	bne.n	80084a6 <prvProcessExpiredTimer+0x72>
 8008490:	b672      	cpsid	i
 8008492:	e7fe      	b.n	8008492 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2228      	movs	r2, #40	; 0x28
 8008498:	5c9b      	ldrb	r3, [r3, r2]
 800849a:	2201      	movs	r2, #1
 800849c:	4393      	bics	r3, r2
 800849e:	b2d9      	uxtb	r1, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2228      	movs	r2, #40	; 0x28
 80084a4:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	0010      	movs	r0, r2
 80084ae:	4798      	blx	r3
}
 80084b0:	46c0      	nop			; (mov r8, r8)
 80084b2:	46bd      	mov	sp, r7
 80084b4:	b004      	add	sp, #16
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	20000e18 	.word	0x20000e18

080084bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084c4:	2308      	movs	r3, #8
 80084c6:	18fb      	adds	r3, r7, r3
 80084c8:	0018      	movs	r0, r3
 80084ca:	f000 f853 	bl	8008574 <prvGetNextExpireTime>
 80084ce:	0003      	movs	r3, r0
 80084d0:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	0011      	movs	r1, r2
 80084d8:	0018      	movs	r0, r3
 80084da:	f000 f803 	bl	80084e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084de:	f000 f8cd 	bl	800867c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084e2:	e7ef      	b.n	80084c4 <prvTimerTask+0x8>

080084e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084ee:	f7ff f981 	bl	80077f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084f2:	2308      	movs	r3, #8
 80084f4:	18fb      	adds	r3, r7, r3
 80084f6:	0018      	movs	r0, r3
 80084f8:	f000 f85e 	bl	80085b8 <prvSampleTimeNow>
 80084fc:	0003      	movs	r3, r0
 80084fe:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d12b      	bne.n	800855e <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10c      	bne.n	8008526 <prvProcessTimerOrBlockTask+0x42>
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	429a      	cmp	r2, r3
 8008512:	d808      	bhi.n	8008526 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8008514:	f7ff f97a 	bl	800780c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	0011      	movs	r1, r2
 800851e:	0018      	movs	r0, r3
 8008520:	f7ff ff88 	bl	8008434 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008524:	e01d      	b.n	8008562 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d008      	beq.n	800853e <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800852c:	4b0f      	ldr	r3, [pc, #60]	; (800856c <prvProcessTimerOrBlockTask+0x88>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d101      	bne.n	800853a <prvProcessTimerOrBlockTask+0x56>
 8008536:	2301      	movs	r3, #1
 8008538:	e000      	b.n	800853c <prvProcessTimerOrBlockTask+0x58>
 800853a:	2300      	movs	r3, #0
 800853c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800853e:	4b0c      	ldr	r3, [pc, #48]	; (8008570 <prvProcessTimerOrBlockTask+0x8c>)
 8008540:	6818      	ldr	r0, [r3, #0]
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	0019      	movs	r1, r3
 800854c:	f7fe ff7e 	bl	800744c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008550:	f7ff f95c 	bl	800780c <xTaskResumeAll>
 8008554:	1e03      	subs	r3, r0, #0
 8008556:	d104      	bne.n	8008562 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8008558:	f000 fa82 	bl	8008a60 <vPortYield>
}
 800855c:	e001      	b.n	8008562 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800855e:	f7ff f955 	bl	800780c <xTaskResumeAll>
}
 8008562:	46c0      	nop			; (mov r8, r8)
 8008564:	46bd      	mov	sp, r7
 8008566:	b004      	add	sp, #16
 8008568:	bd80      	pop	{r7, pc}
 800856a:	46c0      	nop			; (mov r8, r8)
 800856c:	20000e1c 	.word	0x20000e1c
 8008570:	20000e20 	.word	0x20000e20

08008574 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800857c:	4b0d      	ldr	r3, [pc, #52]	; (80085b4 <prvGetNextExpireTime+0x40>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <prvGetNextExpireTime+0x16>
 8008586:	2201      	movs	r2, #1
 8008588:	e000      	b.n	800858c <prvGetNextExpireTime+0x18>
 800858a:	2200      	movs	r2, #0
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d105      	bne.n	80085a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008598:	4b06      	ldr	r3, [pc, #24]	; (80085b4 <prvGetNextExpireTime+0x40>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	60fb      	str	r3, [r7, #12]
 80085a2:	e001      	b.n	80085a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085a8:	68fb      	ldr	r3, [r7, #12]
}
 80085aa:	0018      	movs	r0, r3
 80085ac:	46bd      	mov	sp, r7
 80085ae:	b004      	add	sp, #16
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	46c0      	nop			; (mov r8, r8)
 80085b4:	20000e18 	.word	0x20000e18

080085b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085c0:	f7ff f9b0 	bl	8007924 <xTaskGetTickCount>
 80085c4:	0003      	movs	r3, r0
 80085c6:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 80085c8:	4b0a      	ldr	r3, [pc, #40]	; (80085f4 <prvSampleTimeNow+0x3c>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d205      	bcs.n	80085de <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 80085d2:	f000 f903 	bl	80087dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	601a      	str	r2, [r3, #0]
 80085dc:	e002      	b.n	80085e4 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085e4:	4b03      	ldr	r3, [pc, #12]	; (80085f4 <prvSampleTimeNow+0x3c>)
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80085ea:	68fb      	ldr	r3, [r7, #12]
}
 80085ec:	0018      	movs	r0, r3
 80085ee:	46bd      	mov	sp, r7
 80085f0:	b004      	add	sp, #16
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	20000e28 	.word	0x20000e28

080085f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
 8008604:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008606:	2300      	movs	r3, #0
 8008608:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	429a      	cmp	r2, r3
 800861c:	d812      	bhi.n	8008644 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	1ad2      	subs	r2, r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	429a      	cmp	r2, r3
 800862a:	d302      	bcc.n	8008632 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800862c:	2301      	movs	r3, #1
 800862e:	617b      	str	r3, [r7, #20]
 8008630:	e01b      	b.n	800866a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008632:	4b10      	ldr	r3, [pc, #64]	; (8008674 <prvInsertTimerInActiveList+0x7c>)
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	3304      	adds	r3, #4
 800863a:	0019      	movs	r1, r3
 800863c:	0010      	movs	r0, r2
 800863e:	f7fe facb 	bl	8006bd8 <vListInsert>
 8008642:	e012      	b.n	800866a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	429a      	cmp	r2, r3
 800864a:	d206      	bcs.n	800865a <prvInsertTimerInActiveList+0x62>
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	429a      	cmp	r2, r3
 8008652:	d302      	bcc.n	800865a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008654:	2301      	movs	r3, #1
 8008656:	617b      	str	r3, [r7, #20]
 8008658:	e007      	b.n	800866a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800865a:	4b07      	ldr	r3, [pc, #28]	; (8008678 <prvInsertTimerInActiveList+0x80>)
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	3304      	adds	r3, #4
 8008662:	0019      	movs	r1, r3
 8008664:	0010      	movs	r0, r2
 8008666:	f7fe fab7 	bl	8006bd8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800866a:	697b      	ldr	r3, [r7, #20]
}
 800866c:	0018      	movs	r0, r3
 800866e:	46bd      	mov	sp, r7
 8008670:	b006      	add	sp, #24
 8008672:	bd80      	pop	{r7, pc}
 8008674:	20000e1c 	.word	0x20000e1c
 8008678:	20000e18 	.word	0x20000e18

0800867c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800867c:	b590      	push	{r4, r7, lr}
 800867e:	b08b      	sub	sp, #44	; 0x2c
 8008680:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008682:	e097      	b.n	80087b4 <prvProcessReceivedCommands+0x138>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008684:	2208      	movs	r2, #8
 8008686:	18bb      	adds	r3, r7, r2
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	da00      	bge.n	8008690 <prvProcessReceivedCommands+0x14>
 800868e:	e091      	b.n	80087b4 <prvProcessReceivedCommands+0x138>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008690:	18bb      	adds	r3, r7, r2
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d004      	beq.n	80086a8 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	3304      	adds	r3, #4
 80086a2:	0018      	movs	r0, r3
 80086a4:	f7fe face 	bl	8006c44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086a8:	1d3b      	adds	r3, r7, #4
 80086aa:	0018      	movs	r0, r3
 80086ac:	f7ff ff84 	bl	80085b8 <prvSampleTimeNow>
 80086b0:	0003      	movs	r3, r0
 80086b2:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
 80086b4:	2308      	movs	r3, #8
 80086b6:	18fb      	adds	r3, r7, r3
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2b09      	cmp	r3, #9
 80086bc:	d900      	bls.n	80086c0 <prvProcessReceivedCommands+0x44>
 80086be:	e078      	b.n	80087b2 <prvProcessReceivedCommands+0x136>
 80086c0:	009a      	lsls	r2, r3, #2
 80086c2:	4b44      	ldr	r3, [pc, #272]	; (80087d4 <prvProcessReceivedCommands+0x158>)
 80086c4:	18d3      	adds	r3, r2, r3
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	2228      	movs	r2, #40	; 0x28
 80086ce:	5c9b      	ldrb	r3, [r3, r2]
 80086d0:	2201      	movs	r2, #1
 80086d2:	4313      	orrs	r3, r2
 80086d4:	b2d9      	uxtb	r1, r3
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	2228      	movs	r2, #40	; 0x28
 80086da:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80086dc:	2408      	movs	r4, #8
 80086de:	193b      	adds	r3, r7, r4
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	18d1      	adds	r1, r2, r3
 80086e8:	193b      	adds	r3, r7, r4
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	69ba      	ldr	r2, [r7, #24]
 80086ee:	69f8      	ldr	r0, [r7, #28]
 80086f0:	f7ff ff82 	bl	80085f8 <prvInsertTimerInActiveList>
 80086f4:	1e03      	subs	r3, r0, #0
 80086f6:	d05d      	beq.n	80087b4 <prvProcessReceivedCommands+0x138>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	6a1b      	ldr	r3, [r3, #32]
 80086fc:	69fa      	ldr	r2, [r7, #28]
 80086fe:	0010      	movs	r0, r2
 8008700:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	2228      	movs	r2, #40	; 0x28
 8008706:	5c9b      	ldrb	r3, [r3, r2]
 8008708:	001a      	movs	r2, r3
 800870a:	2304      	movs	r3, #4
 800870c:	4013      	ands	r3, r2
 800870e:	d051      	beq.n	80087b4 <prvProcessReceivedCommands+0x138>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008710:	193b      	adds	r3, r7, r4
 8008712:	685a      	ldr	r2, [r3, #4]
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	699b      	ldr	r3, [r3, #24]
 8008718:	18d2      	adds	r2, r2, r3
 800871a:	69f8      	ldr	r0, [r7, #28]
 800871c:	2300      	movs	r3, #0
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	2300      	movs	r3, #0
 8008722:	2100      	movs	r1, #0
 8008724:	f7ff fe3c 	bl	80083a0 <xTimerGenericCommand>
 8008728:	0003      	movs	r3, r0
 800872a:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d140      	bne.n	80087b4 <prvProcessReceivedCommands+0x138>
 8008732:	b672      	cpsid	i
 8008734:	e7fe      	b.n	8008734 <prvProcessReceivedCommands+0xb8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	2228      	movs	r2, #40	; 0x28
 800873a:	5c9b      	ldrb	r3, [r3, r2]
 800873c:	2201      	movs	r2, #1
 800873e:	4393      	bics	r3, r2
 8008740:	b2d9      	uxtb	r1, r3
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	2228      	movs	r2, #40	; 0x28
 8008746:	5499      	strb	r1, [r3, r2]
					break;
 8008748:	e034      	b.n	80087b4 <prvProcessReceivedCommands+0x138>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	2228      	movs	r2, #40	; 0x28
 800874e:	5c9b      	ldrb	r3, [r3, r2]
 8008750:	2201      	movs	r2, #1
 8008752:	4313      	orrs	r3, r2
 8008754:	b2d9      	uxtb	r1, r3
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	2228      	movs	r2, #40	; 0x28
 800875a:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800875c:	2308      	movs	r3, #8
 800875e:	18fb      	adds	r3, r7, r3
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d101      	bne.n	8008772 <prvProcessReceivedCommands+0xf6>
 800876e:	b672      	cpsid	i
 8008770:	e7fe      	b.n	8008770 <prvProcessReceivedCommands+0xf4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	699a      	ldr	r2, [r3, #24]
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	18d1      	adds	r1, r2, r3
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	69ba      	ldr	r2, [r7, #24]
 800877e:	69f8      	ldr	r0, [r7, #28]
 8008780:	f7ff ff3a 	bl	80085f8 <prvInsertTimerInActiveList>
					break;
 8008784:	e016      	b.n	80087b4 <prvProcessReceivedCommands+0x138>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	2228      	movs	r2, #40	; 0x28
 800878a:	5c9b      	ldrb	r3, [r3, r2]
 800878c:	001a      	movs	r2, r3
 800878e:	2302      	movs	r3, #2
 8008790:	4013      	ands	r3, r2
 8008792:	d104      	bne.n	800879e <prvProcessReceivedCommands+0x122>
						{
							vPortFree( pxTimer );
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	0018      	movs	r0, r3
 8008798:	f000 fab6 	bl	8008d08 <vPortFree>
 800879c:	e00a      	b.n	80087b4 <prvProcessReceivedCommands+0x138>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	2228      	movs	r2, #40	; 0x28
 80087a2:	5c9b      	ldrb	r3, [r3, r2]
 80087a4:	2201      	movs	r2, #1
 80087a6:	4393      	bics	r3, r2
 80087a8:	b2d9      	uxtb	r1, r3
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	2228      	movs	r2, #40	; 0x28
 80087ae:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087b0:	e000      	b.n	80087b4 <prvProcessReceivedCommands+0x138>

				default	:
					/* Don't expect to get here. */
					break;
 80087b2:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087b4:	4b08      	ldr	r3, [pc, #32]	; (80087d8 <prvProcessReceivedCommands+0x15c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2208      	movs	r2, #8
 80087ba:	18b9      	adds	r1, r7, r2
 80087bc:	2200      	movs	r2, #0
 80087be:	0018      	movs	r0, r3
 80087c0:	f7fe fc49 	bl	8007056 <xQueueReceive>
 80087c4:	1e03      	subs	r3, r0, #0
 80087c6:	d000      	beq.n	80087ca <prvProcessReceivedCommands+0x14e>
 80087c8:	e75c      	b.n	8008684 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80087ca:	46c0      	nop			; (mov r8, r8)
 80087cc:	46c0      	nop			; (mov r8, r8)
 80087ce:	46bd      	mov	sp, r7
 80087d0:	b009      	add	sp, #36	; 0x24
 80087d2:	bd90      	pop	{r4, r7, pc}
 80087d4:	0800a280 	.word	0x0800a280
 80087d8:	20000e20 	.word	0x20000e20

080087dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b088      	sub	sp, #32
 80087e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087e2:	e041      	b.n	8008868 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087e4:	4b2a      	ldr	r3, [pc, #168]	; (8008890 <prvSwitchTimerLists+0xb4>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087ee:	4b28      	ldr	r3, [pc, #160]	; (8008890 <prvSwitchTimerLists+0xb4>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	3304      	adds	r3, #4
 80087fc:	0018      	movs	r0, r3
 80087fe:	f7fe fa21 	bl	8006c44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6a1b      	ldr	r3, [r3, #32]
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	0010      	movs	r0, r2
 800880a:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2228      	movs	r2, #40	; 0x28
 8008810:	5c9b      	ldrb	r3, [r3, r2]
 8008812:	001a      	movs	r2, r3
 8008814:	2304      	movs	r3, #4
 8008816:	4013      	ands	r3, r2
 8008818:	d026      	beq.n	8008868 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	18d3      	adds	r3, r2, r3
 8008822:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	429a      	cmp	r2, r3
 800882a:	d90e      	bls.n	800884a <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008838:	4b15      	ldr	r3, [pc, #84]	; (8008890 <prvSwitchTimerLists+0xb4>)
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3304      	adds	r3, #4
 8008840:	0019      	movs	r1, r3
 8008842:	0010      	movs	r0, r2
 8008844:	f7fe f9c8 	bl	8006bd8 <vListInsert>
 8008848:	e00e      	b.n	8008868 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	2300      	movs	r3, #0
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	2300      	movs	r3, #0
 8008854:	2100      	movs	r1, #0
 8008856:	f7ff fda3 	bl	80083a0 <xTimerGenericCommand>
 800885a:	0003      	movs	r3, r0
 800885c:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d101      	bne.n	8008868 <prvSwitchTimerLists+0x8c>
 8008864:	b672      	cpsid	i
 8008866:	e7fe      	b.n	8008866 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008868:	4b09      	ldr	r3, [pc, #36]	; (8008890 <prvSwitchTimerLists+0xb4>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1b8      	bne.n	80087e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008872:	4b07      	ldr	r3, [pc, #28]	; (8008890 <prvSwitchTimerLists+0xb4>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008878:	4b06      	ldr	r3, [pc, #24]	; (8008894 <prvSwitchTimerLists+0xb8>)
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	4b04      	ldr	r3, [pc, #16]	; (8008890 <prvSwitchTimerLists+0xb4>)
 800887e:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8008880:	4b04      	ldr	r3, [pc, #16]	; (8008894 <prvSwitchTimerLists+0xb8>)
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	601a      	str	r2, [r3, #0]
}
 8008886:	46c0      	nop			; (mov r8, r8)
 8008888:	46bd      	mov	sp, r7
 800888a:	b006      	add	sp, #24
 800888c:	bd80      	pop	{r7, pc}
 800888e:	46c0      	nop			; (mov r8, r8)
 8008890:	20000e18 	.word	0x20000e18
 8008894:	20000e1c 	.word	0x20000e1c

08008898 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800889c:	f000 f8f0 	bl	8008a80 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088a0:	4b14      	ldr	r3, [pc, #80]	; (80088f4 <prvCheckForValidListAndQueue+0x5c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d120      	bne.n	80088ea <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
 80088a8:	4b13      	ldr	r3, [pc, #76]	; (80088f8 <prvCheckForValidListAndQueue+0x60>)
 80088aa:	0018      	movs	r0, r3
 80088ac:	f7fe f949 	bl	8006b42 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088b0:	4b12      	ldr	r3, [pc, #72]	; (80088fc <prvCheckForValidListAndQueue+0x64>)
 80088b2:	0018      	movs	r0, r3
 80088b4:	f7fe f945 	bl	8006b42 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088b8:	4b11      	ldr	r3, [pc, #68]	; (8008900 <prvCheckForValidListAndQueue+0x68>)
 80088ba:	4a0f      	ldr	r2, [pc, #60]	; (80088f8 <prvCheckForValidListAndQueue+0x60>)
 80088bc:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80088be:	4b11      	ldr	r3, [pc, #68]	; (8008904 <prvCheckForValidListAndQueue+0x6c>)
 80088c0:	4a0e      	ldr	r2, [pc, #56]	; (80088fc <prvCheckForValidListAndQueue+0x64>)
 80088c2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80088c4:	2200      	movs	r2, #0
 80088c6:	210c      	movs	r1, #12
 80088c8:	200a      	movs	r0, #10
 80088ca:	f7fe fa37 	bl	8006d3c <xQueueGenericCreate>
 80088ce:	0002      	movs	r2, r0
 80088d0:	4b08      	ldr	r3, [pc, #32]	; (80088f4 <prvCheckForValidListAndQueue+0x5c>)
 80088d2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80088d4:	4b07      	ldr	r3, [pc, #28]	; (80088f4 <prvCheckForValidListAndQueue+0x5c>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d006      	beq.n	80088ea <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80088dc:	4b05      	ldr	r3, [pc, #20]	; (80088f4 <prvCheckForValidListAndQueue+0x5c>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a09      	ldr	r2, [pc, #36]	; (8008908 <prvCheckForValidListAndQueue+0x70>)
 80088e2:	0011      	movs	r1, r2
 80088e4:	0018      	movs	r0, r3
 80088e6:	f7fe fd89 	bl	80073fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088ea:	f000 f8db 	bl	8008aa4 <vPortExitCritical>
}
 80088ee:	46c0      	nop			; (mov r8, r8)
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	20000e20 	.word	0x20000e20
 80088f8:	20000df0 	.word	0x20000df0
 80088fc:	20000e04 	.word	0x20000e04
 8008900:	20000e18 	.word	0x20000e18
 8008904:	20000e1c 	.word	0x20000e1c
 8008908:	0800a084 	.word	0x0800a084

0800890c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	60bb      	str	r3, [r7, #8]

	configASSERT( xTimer );
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <xTimerIsTimerActive+0x16>
 800891e:	b672      	cpsid	i
 8008920:	e7fe      	b.n	8008920 <xTimerIsTimerActive+0x14>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8008922:	f000 f8ad 	bl	8008a80 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2228      	movs	r2, #40	; 0x28
 800892a:	5c9b      	ldrb	r3, [r3, r2]
 800892c:	001a      	movs	r2, r3
 800892e:	2301      	movs	r3, #1
 8008930:	4013      	ands	r3, r2
 8008932:	d102      	bne.n	800893a <xTimerIsTimerActive+0x2e>
		{
			xReturn = pdFALSE;
 8008934:	2300      	movs	r3, #0
 8008936:	60fb      	str	r3, [r7, #12]
 8008938:	e001      	b.n	800893e <xTimerIsTimerActive+0x32>
		}
		else
		{
			xReturn = pdTRUE;
 800893a:	2301      	movs	r3, #1
 800893c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800893e:	f000 f8b1 	bl	8008aa4 <vPortExitCritical>

	return xReturn;
 8008942:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8008944:	0018      	movs	r0, r3
 8008946:	46bd      	mov	sp, r7
 8008948:	b004      	add	sp, #16
 800894a:	bd80      	pop	{r7, pc}

0800894c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	3b04      	subs	r3, #4
 800895c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2280      	movs	r2, #128	; 0x80
 8008962:	0452      	lsls	r2, r2, #17
 8008964:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	3b04      	subs	r3, #4
 800896a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	3b04      	subs	r3, #4
 8008976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008978:	4a08      	ldr	r2, [pc, #32]	; (800899c <pxPortInitialiseStack+0x50>)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3b14      	subs	r3, #20
 8008982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	3b20      	subs	r3, #32
 800898e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008990:	68fb      	ldr	r3, [r7, #12]
}
 8008992:	0018      	movs	r0, r3
 8008994:	46bd      	mov	sp, r7
 8008996:	b004      	add	sp, #16
 8008998:	bd80      	pop	{r7, pc}
 800899a:	46c0      	nop			; (mov r8, r8)
 800899c:	080089a1 	.word	0x080089a1

080089a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80089a6:	2300      	movs	r3, #0
 80089a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089aa:	4b08      	ldr	r3, [pc, #32]	; (80089cc <prvTaskExitError+0x2c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	3301      	adds	r3, #1
 80089b0:	d001      	beq.n	80089b6 <prvTaskExitError+0x16>
 80089b2:	b672      	cpsid	i
 80089b4:	e7fe      	b.n	80089b4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80089b6:	b672      	cpsid	i
	while( ulDummy == 0 )
 80089b8:	46c0      	nop			; (mov r8, r8)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d0fc      	beq.n	80089ba <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089c0:	46c0      	nop			; (mov r8, r8)
 80089c2:	46c0      	nop			; (mov r8, r8)
 80089c4:	46bd      	mov	sp, r7
 80089c6:	b002      	add	sp, #8
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	46c0      	nop			; (mov r8, r8)
 80089cc:	20000034 	.word	0x20000034

080089d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80089d4:	46c0      	nop			; (mov r8, r8)
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	0000      	movs	r0, r0
 80089dc:	0000      	movs	r0, r0
	...

080089e0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80089e0:	4a0b      	ldr	r2, [pc, #44]	; (8008a10 <pxCurrentTCBConst2>)
 80089e2:	6813      	ldr	r3, [r2, #0]
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	3020      	adds	r0, #32
 80089e8:	f380 8809 	msr	PSP, r0
 80089ec:	2002      	movs	r0, #2
 80089ee:	f380 8814 	msr	CONTROL, r0
 80089f2:	f3bf 8f6f 	isb	sy
 80089f6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80089f8:	46ae      	mov	lr, r5
 80089fa:	bc08      	pop	{r3}
 80089fc:	bc04      	pop	{r2}
 80089fe:	b662      	cpsie	i
 8008a00:	4718      	bx	r3
 8008a02:	46c0      	nop			; (mov r8, r8)
 8008a04:	46c0      	nop			; (mov r8, r8)
 8008a06:	46c0      	nop			; (mov r8, r8)
 8008a08:	46c0      	nop			; (mov r8, r8)
 8008a0a:	46c0      	nop			; (mov r8, r8)
 8008a0c:	46c0      	nop			; (mov r8, r8)
 8008a0e:	46c0      	nop			; (mov r8, r8)

08008a10 <pxCurrentTCBConst2>:
 8008a10:	20000578 	.word	0x20000578
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8008a14:	46c0      	nop			; (mov r8, r8)
 8008a16:	46c0      	nop			; (mov r8, r8)

08008a18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a1c:	4b0e      	ldr	r3, [pc, #56]	; (8008a58 <xPortStartScheduler+0x40>)
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	4b0d      	ldr	r3, [pc, #52]	; (8008a58 <xPortStartScheduler+0x40>)
 8008a22:	21ff      	movs	r1, #255	; 0xff
 8008a24:	0409      	lsls	r1, r1, #16
 8008a26:	430a      	orrs	r2, r1
 8008a28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a2a:	4b0b      	ldr	r3, [pc, #44]	; (8008a58 <xPortStartScheduler+0x40>)
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	4b0a      	ldr	r3, [pc, #40]	; (8008a58 <xPortStartScheduler+0x40>)
 8008a30:	21ff      	movs	r1, #255	; 0xff
 8008a32:	0609      	lsls	r1, r1, #24
 8008a34:	430a      	orrs	r2, r1
 8008a36:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a38:	f000 f898 	bl	8008b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a3c:	4b07      	ldr	r3, [pc, #28]	; (8008a5c <xPortStartScheduler+0x44>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8008a42:	f7ff ffcd 	bl	80089e0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a46:	f7ff f82b 	bl	8007aa0 <vTaskSwitchContext>
	prvTaskExitError();
 8008a4a:	f7ff ffa9 	bl	80089a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	0018      	movs	r0, r3
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	46c0      	nop			; (mov r8, r8)
 8008a58:	e000ed20 	.word	0xe000ed20
 8008a5c:	20000034 	.word	0x20000034

08008a60 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a64:	4b05      	ldr	r3, [pc, #20]	; (8008a7c <vPortYield+0x1c>)
 8008a66:	2280      	movs	r2, #128	; 0x80
 8008a68:	0552      	lsls	r2, r2, #21
 8008a6a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8008a6c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008a70:	f3bf 8f6f 	isb	sy
}
 8008a74:	46c0      	nop			; (mov r8, r8)
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	46c0      	nop			; (mov r8, r8)
 8008a7c:	e000ed04 	.word	0xe000ed04

08008a80 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8008a84:	b672      	cpsid	i
	uxCriticalNesting++;
 8008a86:	4b06      	ldr	r3, [pc, #24]	; (8008aa0 <vPortEnterCritical+0x20>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	1c5a      	adds	r2, r3, #1
 8008a8c:	4b04      	ldr	r3, [pc, #16]	; (8008aa0 <vPortEnterCritical+0x20>)
 8008a8e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8008a90:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008a94:	f3bf 8f6f 	isb	sy
}
 8008a98:	46c0      	nop			; (mov r8, r8)
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	46c0      	nop			; (mov r8, r8)
 8008aa0:	20000034 	.word	0x20000034

08008aa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008aa8:	4b09      	ldr	r3, [pc, #36]	; (8008ad0 <vPortExitCritical+0x2c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d101      	bne.n	8008ab4 <vPortExitCritical+0x10>
 8008ab0:	b672      	cpsid	i
 8008ab2:	e7fe      	b.n	8008ab2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8008ab4:	4b06      	ldr	r3, [pc, #24]	; (8008ad0 <vPortExitCritical+0x2c>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	1e5a      	subs	r2, r3, #1
 8008aba:	4b05      	ldr	r3, [pc, #20]	; (8008ad0 <vPortExitCritical+0x2c>)
 8008abc:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8008abe:	4b04      	ldr	r3, [pc, #16]	; (8008ad0 <vPortExitCritical+0x2c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d100      	bne.n	8008ac8 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8008ac6:	b662      	cpsie	i
	}
}
 8008ac8:	46c0      	nop			; (mov r8, r8)
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	46c0      	nop			; (mov r8, r8)
 8008ad0:	20000034 	.word	0x20000034

08008ad4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8008ad4:	f3ef 8010 	mrs	r0, PRIMASK
 8008ad8:	b672      	cpsid	i
 8008ada:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8008adc:	46c0      	nop			; (mov r8, r8)
 8008ade:	0018      	movs	r0, r3

08008ae0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8008ae0:	f380 8810 	msr	PRIMASK, r0
 8008ae4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8008ae6:	46c0      	nop			; (mov r8, r8)
	...

08008af0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008af0:	f3ef 8009 	mrs	r0, PSP
 8008af4:	4b0e      	ldr	r3, [pc, #56]	; (8008b30 <pxCurrentTCBConst>)
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	3820      	subs	r0, #32
 8008afa:	6010      	str	r0, [r2, #0]
 8008afc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008afe:	4644      	mov	r4, r8
 8008b00:	464d      	mov	r5, r9
 8008b02:	4656      	mov	r6, sl
 8008b04:	465f      	mov	r7, fp
 8008b06:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008b08:	b508      	push	{r3, lr}
 8008b0a:	b672      	cpsid	i
 8008b0c:	f7fe ffc8 	bl	8007aa0 <vTaskSwitchContext>
 8008b10:	b662      	cpsie	i
 8008b12:	bc0c      	pop	{r2, r3}
 8008b14:	6811      	ldr	r1, [r2, #0]
 8008b16:	6808      	ldr	r0, [r1, #0]
 8008b18:	3010      	adds	r0, #16
 8008b1a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8008b1c:	46a0      	mov	r8, r4
 8008b1e:	46a9      	mov	r9, r5
 8008b20:	46b2      	mov	sl, r6
 8008b22:	46bb      	mov	fp, r7
 8008b24:	f380 8809 	msr	PSP, r0
 8008b28:	3820      	subs	r0, #32
 8008b2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8008b2c:	4718      	bx	r3
 8008b2e:	46c0      	nop			; (mov r8, r8)

08008b30 <pxCurrentTCBConst>:
 8008b30:	20000578 	.word	0x20000578
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8008b34:	46c0      	nop			; (mov r8, r8)
 8008b36:	46c0      	nop			; (mov r8, r8)

08008b38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b3e:	f7ff ffc9 	bl	8008ad4 <ulSetInterruptMaskFromISR>
 8008b42:	0003      	movs	r3, r0
 8008b44:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b46:	f7fe fefb 	bl	8007940 <xTaskIncrementTick>
 8008b4a:	1e03      	subs	r3, r0, #0
 8008b4c:	d003      	beq.n	8008b56 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b4e:	4b06      	ldr	r3, [pc, #24]	; (8008b68 <SysTick_Handler+0x30>)
 8008b50:	2280      	movs	r2, #128	; 0x80
 8008b52:	0552      	lsls	r2, r2, #21
 8008b54:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	0018      	movs	r0, r3
 8008b5a:	f7ff ffc1 	bl	8008ae0 <vClearInterruptMaskFromISR>
}
 8008b5e:	46c0      	nop			; (mov r8, r8)
 8008b60:	46bd      	mov	sp, r7
 8008b62:	b002      	add	sp, #8
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	46c0      	nop			; (mov r8, r8)
 8008b68:	e000ed04 	.word	0xe000ed04

08008b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b70:	4b0b      	ldr	r3, [pc, #44]	; (8008ba0 <vPortSetupTimerInterrupt+0x34>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b76:	4b0b      	ldr	r3, [pc, #44]	; (8008ba4 <vPortSetupTimerInterrupt+0x38>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b7c:	4b0a      	ldr	r3, [pc, #40]	; (8008ba8 <vPortSetupTimerInterrupt+0x3c>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	22fa      	movs	r2, #250	; 0xfa
 8008b82:	0091      	lsls	r1, r2, #2
 8008b84:	0018      	movs	r0, r3
 8008b86:	f7f7 fac9 	bl	800011c <__udivsi3>
 8008b8a:	0003      	movs	r3, r0
 8008b8c:	001a      	movs	r2, r3
 8008b8e:	4b07      	ldr	r3, [pc, #28]	; (8008bac <vPortSetupTimerInterrupt+0x40>)
 8008b90:	3a01      	subs	r2, #1
 8008b92:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8008b94:	4b02      	ldr	r3, [pc, #8]	; (8008ba0 <vPortSetupTimerInterrupt+0x34>)
 8008b96:	2207      	movs	r2, #7
 8008b98:	601a      	str	r2, [r3, #0]
}
 8008b9a:	46c0      	nop			; (mov r8, r8)
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	e000e010 	.word	0xe000e010
 8008ba4:	e000e018 	.word	0xe000e018
 8008ba8:	20000028 	.word	0x20000028
 8008bac:	e000e014 	.word	0xe000e014

08008bb0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8008bbc:	f7fe fe1a 	bl	80077f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008bc0:	4b4b      	ldr	r3, [pc, #300]	; (8008cf0 <pvPortMalloc+0x140>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d101      	bne.n	8008bcc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008bc8:	f000 f8ec 	bl	8008da4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008bcc:	4b49      	ldr	r3, [pc, #292]	; (8008cf4 <pvPortMalloc+0x144>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	4013      	ands	r3, r2
 8008bd4:	d000      	beq.n	8008bd8 <pvPortMalloc+0x28>
 8008bd6:	e07e      	b.n	8008cd6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d012      	beq.n	8008c04 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8008bde:	2208      	movs	r2, #8
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	189b      	adds	r3, r3, r2
 8008be4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2207      	movs	r2, #7
 8008bea:	4013      	ands	r3, r2
 8008bec:	d00a      	beq.n	8008c04 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2207      	movs	r2, #7
 8008bf2:	4393      	bics	r3, r2
 8008bf4:	3308      	adds	r3, #8
 8008bf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2207      	movs	r2, #7
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	d001      	beq.n	8008c04 <pvPortMalloc+0x54>
 8008c00:	b672      	cpsid	i
 8008c02:	e7fe      	b.n	8008c02 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d065      	beq.n	8008cd6 <pvPortMalloc+0x126>
 8008c0a:	4b3b      	ldr	r3, [pc, #236]	; (8008cf8 <pvPortMalloc+0x148>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d860      	bhi.n	8008cd6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c14:	4b39      	ldr	r3, [pc, #228]	; (8008cfc <pvPortMalloc+0x14c>)
 8008c16:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8008c18:	4b38      	ldr	r3, [pc, #224]	; (8008cfc <pvPortMalloc+0x14c>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c1e:	e004      	b.n	8008c2a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d903      	bls.n	8008c3c <pvPortMalloc+0x8c>
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1f1      	bne.n	8008c20 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c3c:	4b2c      	ldr	r3, [pc, #176]	; (8008cf0 <pvPortMalloc+0x140>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d047      	beq.n	8008cd6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2208      	movs	r2, #8
 8008c4c:	189b      	adds	r3, r3, r2
 8008c4e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	1ad2      	subs	r2, r2, r3
 8008c60:	2308      	movs	r3, #8
 8008c62:	005b      	lsls	r3, r3, #1
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d916      	bls.n	8008c96 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	18d3      	adds	r3, r2, r3
 8008c6e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2207      	movs	r2, #7
 8008c74:	4013      	ands	r3, r2
 8008c76:	d001      	beq.n	8008c7c <pvPortMalloc+0xcc>
 8008c78:	b672      	cpsid	i
 8008c7a:	e7fe      	b.n	8008c7a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	685a      	ldr	r2, [r3, #4]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	1ad2      	subs	r2, r2, r3
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	0018      	movs	r0, r3
 8008c92:	f000 f8e7 	bl	8008e64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c96:	4b18      	ldr	r3, [pc, #96]	; (8008cf8 <pvPortMalloc+0x148>)
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	1ad2      	subs	r2, r2, r3
 8008ca0:	4b15      	ldr	r3, [pc, #84]	; (8008cf8 <pvPortMalloc+0x148>)
 8008ca2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008ca4:	4b14      	ldr	r3, [pc, #80]	; (8008cf8 <pvPortMalloc+0x148>)
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	4b15      	ldr	r3, [pc, #84]	; (8008d00 <pvPortMalloc+0x150>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d203      	bcs.n	8008cb8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008cb0:	4b11      	ldr	r3, [pc, #68]	; (8008cf8 <pvPortMalloc+0x148>)
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	4b12      	ldr	r3, [pc, #72]	; (8008d00 <pvPortMalloc+0x150>)
 8008cb6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	685a      	ldr	r2, [r3, #4]
 8008cbc:	4b0d      	ldr	r3, [pc, #52]	; (8008cf4 <pvPortMalloc+0x144>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	431a      	orrs	r2, r3
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008ccc:	4b0d      	ldr	r3, [pc, #52]	; (8008d04 <pvPortMalloc+0x154>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	1c5a      	adds	r2, r3, #1
 8008cd2:	4b0c      	ldr	r3, [pc, #48]	; (8008d04 <pvPortMalloc+0x154>)
 8008cd4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008cd6:	f7fe fd99 	bl	800780c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2207      	movs	r2, #7
 8008cde:	4013      	ands	r3, r2
 8008ce0:	d001      	beq.n	8008ce6 <pvPortMalloc+0x136>
 8008ce2:	b672      	cpsid	i
 8008ce4:	e7fe      	b.n	8008ce4 <pvPortMalloc+0x134>
	return pvReturn;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
}
 8008ce8:	0018      	movs	r0, r3
 8008cea:	46bd      	mov	sp, r7
 8008cec:	b006      	add	sp, #24
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	200048cc 	.word	0x200048cc
 8008cf4:	200048e0 	.word	0x200048e0
 8008cf8:	200048d0 	.word	0x200048d0
 8008cfc:	200048c4 	.word	0x200048c4
 8008d00:	200048d4 	.word	0x200048d4
 8008d04:	200048d8 	.word	0x200048d8

08008d08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d03a      	beq.n	8008d90 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008d1a:	2308      	movs	r3, #8
 8008d1c:	425b      	negs	r3, r3
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	18d3      	adds	r3, r2, r3
 8008d22:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	4b1a      	ldr	r3, [pc, #104]	; (8008d98 <vPortFree+0x90>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4013      	ands	r3, r2
 8008d32:	d101      	bne.n	8008d38 <vPortFree+0x30>
 8008d34:	b672      	cpsid	i
 8008d36:	e7fe      	b.n	8008d36 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d001      	beq.n	8008d44 <vPortFree+0x3c>
 8008d40:	b672      	cpsid	i
 8008d42:	e7fe      	b.n	8008d42 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	685a      	ldr	r2, [r3, #4]
 8008d48:	4b13      	ldr	r3, [pc, #76]	; (8008d98 <vPortFree+0x90>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	d01f      	beq.n	8008d90 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d11b      	bne.n	8008d90 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	4b0e      	ldr	r3, [pc, #56]	; (8008d98 <vPortFree+0x90>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	43db      	mvns	r3, r3
 8008d62:	401a      	ands	r2, r3
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d68:	f7fe fd44 	bl	80077f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	685a      	ldr	r2, [r3, #4]
 8008d70:	4b0a      	ldr	r3, [pc, #40]	; (8008d9c <vPortFree+0x94>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	18d2      	adds	r2, r2, r3
 8008d76:	4b09      	ldr	r3, [pc, #36]	; (8008d9c <vPortFree+0x94>)
 8008d78:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	0018      	movs	r0, r3
 8008d7e:	f000 f871 	bl	8008e64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008d82:	4b07      	ldr	r3, [pc, #28]	; (8008da0 <vPortFree+0x98>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	1c5a      	adds	r2, r3, #1
 8008d88:	4b05      	ldr	r3, [pc, #20]	; (8008da0 <vPortFree+0x98>)
 8008d8a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8008d8c:	f7fe fd3e 	bl	800780c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d90:	46c0      	nop			; (mov r8, r8)
 8008d92:	46bd      	mov	sp, r7
 8008d94:	b004      	add	sp, #16
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	200048e0 	.word	0x200048e0
 8008d9c:	200048d0 	.word	0x200048d0
 8008da0:	200048dc 	.word	0x200048dc

08008da4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008daa:	4b27      	ldr	r3, [pc, #156]	; (8008e48 <prvHeapInit+0xa4>)
 8008dac:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008dae:	4b27      	ldr	r3, [pc, #156]	; (8008e4c <prvHeapInit+0xa8>)
 8008db0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2207      	movs	r2, #7
 8008db6:	4013      	ands	r3, r2
 8008db8:	d00c      	beq.n	8008dd4 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3307      	adds	r3, #7
 8008dbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2207      	movs	r2, #7
 8008dc4:	4393      	bics	r3, r2
 8008dc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008dc8:	68ba      	ldr	r2, [r7, #8]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	1ad2      	subs	r2, r2, r3
 8008dce:	4b1f      	ldr	r3, [pc, #124]	; (8008e4c <prvHeapInit+0xa8>)
 8008dd0:	18d3      	adds	r3, r2, r3
 8008dd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008dd8:	4b1d      	ldr	r3, [pc, #116]	; (8008e50 <prvHeapInit+0xac>)
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008dde:	4b1c      	ldr	r3, [pc, #112]	; (8008e50 <prvHeapInit+0xac>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	18d3      	adds	r3, r2, r3
 8008dea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008dec:	2208      	movs	r2, #8
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	1a9b      	subs	r3, r3, r2
 8008df2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2207      	movs	r2, #7
 8008df8:	4393      	bics	r3, r2
 8008dfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	4b15      	ldr	r3, [pc, #84]	; (8008e54 <prvHeapInit+0xb0>)
 8008e00:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8008e02:	4b14      	ldr	r3, [pc, #80]	; (8008e54 <prvHeapInit+0xb0>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2200      	movs	r2, #0
 8008e08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008e0a:	4b12      	ldr	r3, [pc, #72]	; (8008e54 <prvHeapInit+0xb0>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	1ad2      	subs	r2, r2, r3
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e20:	4b0c      	ldr	r3, [pc, #48]	; (8008e54 <prvHeapInit+0xb0>)
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	4b0a      	ldr	r3, [pc, #40]	; (8008e58 <prvHeapInit+0xb4>)
 8008e2e:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	685a      	ldr	r2, [r3, #4]
 8008e34:	4b09      	ldr	r3, [pc, #36]	; (8008e5c <prvHeapInit+0xb8>)
 8008e36:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e38:	4b09      	ldr	r3, [pc, #36]	; (8008e60 <prvHeapInit+0xbc>)
 8008e3a:	2280      	movs	r2, #128	; 0x80
 8008e3c:	0612      	lsls	r2, r2, #24
 8008e3e:	601a      	str	r2, [r3, #0]
}
 8008e40:	46c0      	nop			; (mov r8, r8)
 8008e42:	46bd      	mov	sp, r7
 8008e44:	b004      	add	sp, #16
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	00003a98 	.word	0x00003a98
 8008e4c:	20000e2c 	.word	0x20000e2c
 8008e50:	200048c4 	.word	0x200048c4
 8008e54:	200048cc 	.word	0x200048cc
 8008e58:	200048d4 	.word	0x200048d4
 8008e5c:	200048d0 	.word	0x200048d0
 8008e60:	200048e0 	.word	0x200048e0

08008e64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e6c:	4b27      	ldr	r3, [pc, #156]	; (8008f0c <prvInsertBlockIntoFreeList+0xa8>)
 8008e6e:	60fb      	str	r3, [r7, #12]
 8008e70:	e002      	b.n	8008e78 <prvInsertBlockIntoFreeList+0x14>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	60fb      	str	r3, [r7, #12]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d8f7      	bhi.n	8008e72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	18d3      	adds	r3, r2, r3
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d108      	bne.n	8008ea6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	685a      	ldr	r2, [r3, #4]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	18d2      	adds	r2, r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	18d2      	adds	r2, r2, r3
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d118      	bne.n	8008eec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	4b14      	ldr	r3, [pc, #80]	; (8008f10 <prvInsertBlockIntoFreeList+0xac>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d00d      	beq.n	8008ee2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	685a      	ldr	r2, [r3, #4]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	18d2      	adds	r2, r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	601a      	str	r2, [r3, #0]
 8008ee0:	e008      	b.n	8008ef4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ee2:	4b0b      	ldr	r3, [pc, #44]	; (8008f10 <prvInsertBlockIntoFreeList+0xac>)
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	601a      	str	r2, [r3, #0]
 8008eea:	e003      	b.n	8008ef4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d002      	beq.n	8008f02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f02:	46c0      	nop			; (mov r8, r8)
 8008f04:	46bd      	mov	sp, r7
 8008f06:	b004      	add	sp, #16
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	46c0      	nop			; (mov r8, r8)
 8008f0c:	200048c4 	.word	0x200048c4
 8008f10:	200048cc 	.word	0x200048cc

08008f14 <std>:
 8008f14:	2300      	movs	r3, #0
 8008f16:	b510      	push	{r4, lr}
 8008f18:	0004      	movs	r4, r0
 8008f1a:	6003      	str	r3, [r0, #0]
 8008f1c:	6043      	str	r3, [r0, #4]
 8008f1e:	6083      	str	r3, [r0, #8]
 8008f20:	8181      	strh	r1, [r0, #12]
 8008f22:	6643      	str	r3, [r0, #100]	; 0x64
 8008f24:	0019      	movs	r1, r3
 8008f26:	81c2      	strh	r2, [r0, #14]
 8008f28:	6103      	str	r3, [r0, #16]
 8008f2a:	6143      	str	r3, [r0, #20]
 8008f2c:	6183      	str	r3, [r0, #24]
 8008f2e:	2208      	movs	r2, #8
 8008f30:	305c      	adds	r0, #92	; 0x5c
 8008f32:	f000 fa03 	bl	800933c <memset>
 8008f36:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <std+0x38>)
 8008f38:	6224      	str	r4, [r4, #32]
 8008f3a:	6263      	str	r3, [r4, #36]	; 0x24
 8008f3c:	4b04      	ldr	r3, [pc, #16]	; (8008f50 <std+0x3c>)
 8008f3e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f40:	4b04      	ldr	r3, [pc, #16]	; (8008f54 <std+0x40>)
 8008f42:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f44:	4b04      	ldr	r3, [pc, #16]	; (8008f58 <std+0x44>)
 8008f46:	6323      	str	r3, [r4, #48]	; 0x30
 8008f48:	bd10      	pop	{r4, pc}
 8008f4a:	46c0      	nop			; (mov r8, r8)
 8008f4c:	08009159 	.word	0x08009159
 8008f50:	08009181 	.word	0x08009181
 8008f54:	080091b9 	.word	0x080091b9
 8008f58:	080091e5 	.word	0x080091e5

08008f5c <stdio_exit_handler>:
 8008f5c:	b510      	push	{r4, lr}
 8008f5e:	4a03      	ldr	r2, [pc, #12]	; (8008f6c <stdio_exit_handler+0x10>)
 8008f60:	4903      	ldr	r1, [pc, #12]	; (8008f70 <stdio_exit_handler+0x14>)
 8008f62:	4804      	ldr	r0, [pc, #16]	; (8008f74 <stdio_exit_handler+0x18>)
 8008f64:	f000 f86c 	bl	8009040 <_fwalk_sglue>
 8008f68:	bd10      	pop	{r4, pc}
 8008f6a:	46c0      	nop			; (mov r8, r8)
 8008f6c:	20000038 	.word	0x20000038
 8008f70:	08009ced 	.word	0x08009ced
 8008f74:	20000044 	.word	0x20000044

08008f78 <cleanup_stdio>:
 8008f78:	6841      	ldr	r1, [r0, #4]
 8008f7a:	4b0b      	ldr	r3, [pc, #44]	; (8008fa8 <cleanup_stdio+0x30>)
 8008f7c:	b510      	push	{r4, lr}
 8008f7e:	0004      	movs	r4, r0
 8008f80:	4299      	cmp	r1, r3
 8008f82:	d001      	beq.n	8008f88 <cleanup_stdio+0x10>
 8008f84:	f000 feb2 	bl	8009cec <_fflush_r>
 8008f88:	68a1      	ldr	r1, [r4, #8]
 8008f8a:	4b08      	ldr	r3, [pc, #32]	; (8008fac <cleanup_stdio+0x34>)
 8008f8c:	4299      	cmp	r1, r3
 8008f8e:	d002      	beq.n	8008f96 <cleanup_stdio+0x1e>
 8008f90:	0020      	movs	r0, r4
 8008f92:	f000 feab 	bl	8009cec <_fflush_r>
 8008f96:	68e1      	ldr	r1, [r4, #12]
 8008f98:	4b05      	ldr	r3, [pc, #20]	; (8008fb0 <cleanup_stdio+0x38>)
 8008f9a:	4299      	cmp	r1, r3
 8008f9c:	d002      	beq.n	8008fa4 <cleanup_stdio+0x2c>
 8008f9e:	0020      	movs	r0, r4
 8008fa0:	f000 fea4 	bl	8009cec <_fflush_r>
 8008fa4:	bd10      	pop	{r4, pc}
 8008fa6:	46c0      	nop			; (mov r8, r8)
 8008fa8:	200048e4 	.word	0x200048e4
 8008fac:	2000494c 	.word	0x2000494c
 8008fb0:	200049b4 	.word	0x200049b4

08008fb4 <global_stdio_init.part.0>:
 8008fb4:	b510      	push	{r4, lr}
 8008fb6:	4b09      	ldr	r3, [pc, #36]	; (8008fdc <global_stdio_init.part.0+0x28>)
 8008fb8:	4a09      	ldr	r2, [pc, #36]	; (8008fe0 <global_stdio_init.part.0+0x2c>)
 8008fba:	2104      	movs	r1, #4
 8008fbc:	601a      	str	r2, [r3, #0]
 8008fbe:	4809      	ldr	r0, [pc, #36]	; (8008fe4 <global_stdio_init.part.0+0x30>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f7ff ffa7 	bl	8008f14 <std>
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	2109      	movs	r1, #9
 8008fca:	4807      	ldr	r0, [pc, #28]	; (8008fe8 <global_stdio_init.part.0+0x34>)
 8008fcc:	f7ff ffa2 	bl	8008f14 <std>
 8008fd0:	2202      	movs	r2, #2
 8008fd2:	2112      	movs	r1, #18
 8008fd4:	4805      	ldr	r0, [pc, #20]	; (8008fec <global_stdio_init.part.0+0x38>)
 8008fd6:	f7ff ff9d 	bl	8008f14 <std>
 8008fda:	bd10      	pop	{r4, pc}
 8008fdc:	20004a1c 	.word	0x20004a1c
 8008fe0:	08008f5d 	.word	0x08008f5d
 8008fe4:	200048e4 	.word	0x200048e4
 8008fe8:	2000494c 	.word	0x2000494c
 8008fec:	200049b4 	.word	0x200049b4

08008ff0 <__sfp_lock_acquire>:
 8008ff0:	b510      	push	{r4, lr}
 8008ff2:	4802      	ldr	r0, [pc, #8]	; (8008ffc <__sfp_lock_acquire+0xc>)
 8008ff4:	f000 fa22 	bl	800943c <__retarget_lock_acquire_recursive>
 8008ff8:	bd10      	pop	{r4, pc}
 8008ffa:	46c0      	nop			; (mov r8, r8)
 8008ffc:	20004a25 	.word	0x20004a25

08009000 <__sfp_lock_release>:
 8009000:	b510      	push	{r4, lr}
 8009002:	4802      	ldr	r0, [pc, #8]	; (800900c <__sfp_lock_release+0xc>)
 8009004:	f000 fa1b 	bl	800943e <__retarget_lock_release_recursive>
 8009008:	bd10      	pop	{r4, pc}
 800900a:	46c0      	nop			; (mov r8, r8)
 800900c:	20004a25 	.word	0x20004a25

08009010 <__sinit>:
 8009010:	b510      	push	{r4, lr}
 8009012:	0004      	movs	r4, r0
 8009014:	f7ff ffec 	bl	8008ff0 <__sfp_lock_acquire>
 8009018:	6a23      	ldr	r3, [r4, #32]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d002      	beq.n	8009024 <__sinit+0x14>
 800901e:	f7ff ffef 	bl	8009000 <__sfp_lock_release>
 8009022:	bd10      	pop	{r4, pc}
 8009024:	4b04      	ldr	r3, [pc, #16]	; (8009038 <__sinit+0x28>)
 8009026:	6223      	str	r3, [r4, #32]
 8009028:	4b04      	ldr	r3, [pc, #16]	; (800903c <__sinit+0x2c>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1f6      	bne.n	800901e <__sinit+0xe>
 8009030:	f7ff ffc0 	bl	8008fb4 <global_stdio_init.part.0>
 8009034:	e7f3      	b.n	800901e <__sinit+0xe>
 8009036:	46c0      	nop			; (mov r8, r8)
 8009038:	08008f79 	.word	0x08008f79
 800903c:	20004a1c 	.word	0x20004a1c

08009040 <_fwalk_sglue>:
 8009040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009042:	0014      	movs	r4, r2
 8009044:	2600      	movs	r6, #0
 8009046:	9000      	str	r0, [sp, #0]
 8009048:	9101      	str	r1, [sp, #4]
 800904a:	68a5      	ldr	r5, [r4, #8]
 800904c:	6867      	ldr	r7, [r4, #4]
 800904e:	3f01      	subs	r7, #1
 8009050:	d504      	bpl.n	800905c <_fwalk_sglue+0x1c>
 8009052:	6824      	ldr	r4, [r4, #0]
 8009054:	2c00      	cmp	r4, #0
 8009056:	d1f8      	bne.n	800904a <_fwalk_sglue+0xa>
 8009058:	0030      	movs	r0, r6
 800905a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800905c:	89ab      	ldrh	r3, [r5, #12]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d908      	bls.n	8009074 <_fwalk_sglue+0x34>
 8009062:	220e      	movs	r2, #14
 8009064:	5eab      	ldrsh	r3, [r5, r2]
 8009066:	3301      	adds	r3, #1
 8009068:	d004      	beq.n	8009074 <_fwalk_sglue+0x34>
 800906a:	0029      	movs	r1, r5
 800906c:	9800      	ldr	r0, [sp, #0]
 800906e:	9b01      	ldr	r3, [sp, #4]
 8009070:	4798      	blx	r3
 8009072:	4306      	orrs	r6, r0
 8009074:	3568      	adds	r5, #104	; 0x68
 8009076:	e7ea      	b.n	800904e <_fwalk_sglue+0xe>

08009078 <iprintf>:
 8009078:	b40f      	push	{r0, r1, r2, r3}
 800907a:	b507      	push	{r0, r1, r2, lr}
 800907c:	4905      	ldr	r1, [pc, #20]	; (8009094 <iprintf+0x1c>)
 800907e:	ab04      	add	r3, sp, #16
 8009080:	6808      	ldr	r0, [r1, #0]
 8009082:	cb04      	ldmia	r3!, {r2}
 8009084:	6881      	ldr	r1, [r0, #8]
 8009086:	9301      	str	r3, [sp, #4]
 8009088:	f000 fb0a 	bl	80096a0 <_vfiprintf_r>
 800908c:	b003      	add	sp, #12
 800908e:	bc08      	pop	{r3}
 8009090:	b004      	add	sp, #16
 8009092:	4718      	bx	r3
 8009094:	20000090 	.word	0x20000090

08009098 <_puts_r>:
 8009098:	6a03      	ldr	r3, [r0, #32]
 800909a:	b570      	push	{r4, r5, r6, lr}
 800909c:	0005      	movs	r5, r0
 800909e:	000e      	movs	r6, r1
 80090a0:	6884      	ldr	r4, [r0, #8]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d101      	bne.n	80090aa <_puts_r+0x12>
 80090a6:	f7ff ffb3 	bl	8009010 <__sinit>
 80090aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090ac:	07db      	lsls	r3, r3, #31
 80090ae:	d405      	bmi.n	80090bc <_puts_r+0x24>
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	059b      	lsls	r3, r3, #22
 80090b4:	d402      	bmi.n	80090bc <_puts_r+0x24>
 80090b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090b8:	f000 f9c0 	bl	800943c <__retarget_lock_acquire_recursive>
 80090bc:	89a3      	ldrh	r3, [r4, #12]
 80090be:	071b      	lsls	r3, r3, #28
 80090c0:	d502      	bpl.n	80090c8 <_puts_r+0x30>
 80090c2:	6923      	ldr	r3, [r4, #16]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d11f      	bne.n	8009108 <_puts_r+0x70>
 80090c8:	0021      	movs	r1, r4
 80090ca:	0028      	movs	r0, r5
 80090cc:	f000 f8d2 	bl	8009274 <__swsetup_r>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d019      	beq.n	8009108 <_puts_r+0x70>
 80090d4:	2501      	movs	r5, #1
 80090d6:	426d      	negs	r5, r5
 80090d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090da:	07db      	lsls	r3, r3, #31
 80090dc:	d405      	bmi.n	80090ea <_puts_r+0x52>
 80090de:	89a3      	ldrh	r3, [r4, #12]
 80090e0:	059b      	lsls	r3, r3, #22
 80090e2:	d402      	bmi.n	80090ea <_puts_r+0x52>
 80090e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090e6:	f000 f9aa 	bl	800943e <__retarget_lock_release_recursive>
 80090ea:	0028      	movs	r0, r5
 80090ec:	bd70      	pop	{r4, r5, r6, pc}
 80090ee:	3601      	adds	r6, #1
 80090f0:	60a3      	str	r3, [r4, #8]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	da04      	bge.n	8009100 <_puts_r+0x68>
 80090f6:	69a2      	ldr	r2, [r4, #24]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	dc16      	bgt.n	800912a <_puts_r+0x92>
 80090fc:	290a      	cmp	r1, #10
 80090fe:	d014      	beq.n	800912a <_puts_r+0x92>
 8009100:	6823      	ldr	r3, [r4, #0]
 8009102:	1c5a      	adds	r2, r3, #1
 8009104:	6022      	str	r2, [r4, #0]
 8009106:	7019      	strb	r1, [r3, #0]
 8009108:	68a3      	ldr	r3, [r4, #8]
 800910a:	7831      	ldrb	r1, [r6, #0]
 800910c:	3b01      	subs	r3, #1
 800910e:	2900      	cmp	r1, #0
 8009110:	d1ed      	bne.n	80090ee <_puts_r+0x56>
 8009112:	60a3      	str	r3, [r4, #8]
 8009114:	2b00      	cmp	r3, #0
 8009116:	da0f      	bge.n	8009138 <_puts_r+0xa0>
 8009118:	0028      	movs	r0, r5
 800911a:	0022      	movs	r2, r4
 800911c:	310a      	adds	r1, #10
 800911e:	f000 f867 	bl	80091f0 <__swbuf_r>
 8009122:	250a      	movs	r5, #10
 8009124:	3001      	adds	r0, #1
 8009126:	d1d7      	bne.n	80090d8 <_puts_r+0x40>
 8009128:	e7d4      	b.n	80090d4 <_puts_r+0x3c>
 800912a:	0022      	movs	r2, r4
 800912c:	0028      	movs	r0, r5
 800912e:	f000 f85f 	bl	80091f0 <__swbuf_r>
 8009132:	3001      	adds	r0, #1
 8009134:	d1e8      	bne.n	8009108 <_puts_r+0x70>
 8009136:	e7cd      	b.n	80090d4 <_puts_r+0x3c>
 8009138:	250a      	movs	r5, #10
 800913a:	6823      	ldr	r3, [r4, #0]
 800913c:	1c5a      	adds	r2, r3, #1
 800913e:	6022      	str	r2, [r4, #0]
 8009140:	701d      	strb	r5, [r3, #0]
 8009142:	e7c9      	b.n	80090d8 <_puts_r+0x40>

08009144 <puts>:
 8009144:	b510      	push	{r4, lr}
 8009146:	4b03      	ldr	r3, [pc, #12]	; (8009154 <puts+0x10>)
 8009148:	0001      	movs	r1, r0
 800914a:	6818      	ldr	r0, [r3, #0]
 800914c:	f7ff ffa4 	bl	8009098 <_puts_r>
 8009150:	bd10      	pop	{r4, pc}
 8009152:	46c0      	nop			; (mov r8, r8)
 8009154:	20000090 	.word	0x20000090

08009158 <__sread>:
 8009158:	b570      	push	{r4, r5, r6, lr}
 800915a:	000c      	movs	r4, r1
 800915c:	250e      	movs	r5, #14
 800915e:	5f49      	ldrsh	r1, [r1, r5]
 8009160:	f000 f91a 	bl	8009398 <_read_r>
 8009164:	2800      	cmp	r0, #0
 8009166:	db03      	blt.n	8009170 <__sread+0x18>
 8009168:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800916a:	181b      	adds	r3, r3, r0
 800916c:	6563      	str	r3, [r4, #84]	; 0x54
 800916e:	bd70      	pop	{r4, r5, r6, pc}
 8009170:	89a3      	ldrh	r3, [r4, #12]
 8009172:	4a02      	ldr	r2, [pc, #8]	; (800917c <__sread+0x24>)
 8009174:	4013      	ands	r3, r2
 8009176:	81a3      	strh	r3, [r4, #12]
 8009178:	e7f9      	b.n	800916e <__sread+0x16>
 800917a:	46c0      	nop			; (mov r8, r8)
 800917c:	ffffefff 	.word	0xffffefff

08009180 <__swrite>:
 8009180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009182:	001f      	movs	r7, r3
 8009184:	898b      	ldrh	r3, [r1, #12]
 8009186:	0005      	movs	r5, r0
 8009188:	000c      	movs	r4, r1
 800918a:	0016      	movs	r6, r2
 800918c:	05db      	lsls	r3, r3, #23
 800918e:	d505      	bpl.n	800919c <__swrite+0x1c>
 8009190:	230e      	movs	r3, #14
 8009192:	5ec9      	ldrsh	r1, [r1, r3]
 8009194:	2200      	movs	r2, #0
 8009196:	2302      	movs	r3, #2
 8009198:	f000 f8ea 	bl	8009370 <_lseek_r>
 800919c:	89a3      	ldrh	r3, [r4, #12]
 800919e:	4a05      	ldr	r2, [pc, #20]	; (80091b4 <__swrite+0x34>)
 80091a0:	0028      	movs	r0, r5
 80091a2:	4013      	ands	r3, r2
 80091a4:	81a3      	strh	r3, [r4, #12]
 80091a6:	0032      	movs	r2, r6
 80091a8:	230e      	movs	r3, #14
 80091aa:	5ee1      	ldrsh	r1, [r4, r3]
 80091ac:	003b      	movs	r3, r7
 80091ae:	f000 f907 	bl	80093c0 <_write_r>
 80091b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091b4:	ffffefff 	.word	0xffffefff

080091b8 <__sseek>:
 80091b8:	b570      	push	{r4, r5, r6, lr}
 80091ba:	000c      	movs	r4, r1
 80091bc:	250e      	movs	r5, #14
 80091be:	5f49      	ldrsh	r1, [r1, r5]
 80091c0:	f000 f8d6 	bl	8009370 <_lseek_r>
 80091c4:	89a3      	ldrh	r3, [r4, #12]
 80091c6:	1c42      	adds	r2, r0, #1
 80091c8:	d103      	bne.n	80091d2 <__sseek+0x1a>
 80091ca:	4a05      	ldr	r2, [pc, #20]	; (80091e0 <__sseek+0x28>)
 80091cc:	4013      	ands	r3, r2
 80091ce:	81a3      	strh	r3, [r4, #12]
 80091d0:	bd70      	pop	{r4, r5, r6, pc}
 80091d2:	2280      	movs	r2, #128	; 0x80
 80091d4:	0152      	lsls	r2, r2, #5
 80091d6:	4313      	orrs	r3, r2
 80091d8:	81a3      	strh	r3, [r4, #12]
 80091da:	6560      	str	r0, [r4, #84]	; 0x54
 80091dc:	e7f8      	b.n	80091d0 <__sseek+0x18>
 80091de:	46c0      	nop			; (mov r8, r8)
 80091e0:	ffffefff 	.word	0xffffefff

080091e4 <__sclose>:
 80091e4:	b510      	push	{r4, lr}
 80091e6:	230e      	movs	r3, #14
 80091e8:	5ec9      	ldrsh	r1, [r1, r3]
 80091ea:	f000 f8af 	bl	800934c <_close_r>
 80091ee:	bd10      	pop	{r4, pc}

080091f0 <__swbuf_r>:
 80091f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f2:	0006      	movs	r6, r0
 80091f4:	000d      	movs	r5, r1
 80091f6:	0014      	movs	r4, r2
 80091f8:	2800      	cmp	r0, #0
 80091fa:	d004      	beq.n	8009206 <__swbuf_r+0x16>
 80091fc:	6a03      	ldr	r3, [r0, #32]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d101      	bne.n	8009206 <__swbuf_r+0x16>
 8009202:	f7ff ff05 	bl	8009010 <__sinit>
 8009206:	69a3      	ldr	r3, [r4, #24]
 8009208:	60a3      	str	r3, [r4, #8]
 800920a:	89a3      	ldrh	r3, [r4, #12]
 800920c:	071b      	lsls	r3, r3, #28
 800920e:	d528      	bpl.n	8009262 <__swbuf_r+0x72>
 8009210:	6923      	ldr	r3, [r4, #16]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d025      	beq.n	8009262 <__swbuf_r+0x72>
 8009216:	6923      	ldr	r3, [r4, #16]
 8009218:	6820      	ldr	r0, [r4, #0]
 800921a:	b2ef      	uxtb	r7, r5
 800921c:	1ac0      	subs	r0, r0, r3
 800921e:	6963      	ldr	r3, [r4, #20]
 8009220:	b2ed      	uxtb	r5, r5
 8009222:	4283      	cmp	r3, r0
 8009224:	dc05      	bgt.n	8009232 <__swbuf_r+0x42>
 8009226:	0021      	movs	r1, r4
 8009228:	0030      	movs	r0, r6
 800922a:	f000 fd5f 	bl	8009cec <_fflush_r>
 800922e:	2800      	cmp	r0, #0
 8009230:	d11d      	bne.n	800926e <__swbuf_r+0x7e>
 8009232:	68a3      	ldr	r3, [r4, #8]
 8009234:	3001      	adds	r0, #1
 8009236:	3b01      	subs	r3, #1
 8009238:	60a3      	str	r3, [r4, #8]
 800923a:	6823      	ldr	r3, [r4, #0]
 800923c:	1c5a      	adds	r2, r3, #1
 800923e:	6022      	str	r2, [r4, #0]
 8009240:	701f      	strb	r7, [r3, #0]
 8009242:	6963      	ldr	r3, [r4, #20]
 8009244:	4283      	cmp	r3, r0
 8009246:	d004      	beq.n	8009252 <__swbuf_r+0x62>
 8009248:	89a3      	ldrh	r3, [r4, #12]
 800924a:	07db      	lsls	r3, r3, #31
 800924c:	d507      	bpl.n	800925e <__swbuf_r+0x6e>
 800924e:	2d0a      	cmp	r5, #10
 8009250:	d105      	bne.n	800925e <__swbuf_r+0x6e>
 8009252:	0021      	movs	r1, r4
 8009254:	0030      	movs	r0, r6
 8009256:	f000 fd49 	bl	8009cec <_fflush_r>
 800925a:	2800      	cmp	r0, #0
 800925c:	d107      	bne.n	800926e <__swbuf_r+0x7e>
 800925e:	0028      	movs	r0, r5
 8009260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009262:	0021      	movs	r1, r4
 8009264:	0030      	movs	r0, r6
 8009266:	f000 f805 	bl	8009274 <__swsetup_r>
 800926a:	2800      	cmp	r0, #0
 800926c:	d0d3      	beq.n	8009216 <__swbuf_r+0x26>
 800926e:	2501      	movs	r5, #1
 8009270:	426d      	negs	r5, r5
 8009272:	e7f4      	b.n	800925e <__swbuf_r+0x6e>

08009274 <__swsetup_r>:
 8009274:	4b30      	ldr	r3, [pc, #192]	; (8009338 <__swsetup_r+0xc4>)
 8009276:	b570      	push	{r4, r5, r6, lr}
 8009278:	0005      	movs	r5, r0
 800927a:	6818      	ldr	r0, [r3, #0]
 800927c:	000c      	movs	r4, r1
 800927e:	2800      	cmp	r0, #0
 8009280:	d004      	beq.n	800928c <__swsetup_r+0x18>
 8009282:	6a03      	ldr	r3, [r0, #32]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d101      	bne.n	800928c <__swsetup_r+0x18>
 8009288:	f7ff fec2 	bl	8009010 <__sinit>
 800928c:	230c      	movs	r3, #12
 800928e:	5ee2      	ldrsh	r2, [r4, r3]
 8009290:	b293      	uxth	r3, r2
 8009292:	0711      	lsls	r1, r2, #28
 8009294:	d423      	bmi.n	80092de <__swsetup_r+0x6a>
 8009296:	06d9      	lsls	r1, r3, #27
 8009298:	d407      	bmi.n	80092aa <__swsetup_r+0x36>
 800929a:	2309      	movs	r3, #9
 800929c:	2001      	movs	r0, #1
 800929e:	602b      	str	r3, [r5, #0]
 80092a0:	3337      	adds	r3, #55	; 0x37
 80092a2:	4313      	orrs	r3, r2
 80092a4:	81a3      	strh	r3, [r4, #12]
 80092a6:	4240      	negs	r0, r0
 80092a8:	bd70      	pop	{r4, r5, r6, pc}
 80092aa:	075b      	lsls	r3, r3, #29
 80092ac:	d513      	bpl.n	80092d6 <__swsetup_r+0x62>
 80092ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092b0:	2900      	cmp	r1, #0
 80092b2:	d008      	beq.n	80092c6 <__swsetup_r+0x52>
 80092b4:	0023      	movs	r3, r4
 80092b6:	3344      	adds	r3, #68	; 0x44
 80092b8:	4299      	cmp	r1, r3
 80092ba:	d002      	beq.n	80092c2 <__swsetup_r+0x4e>
 80092bc:	0028      	movs	r0, r5
 80092be:	f000 f8c9 	bl	8009454 <_free_r>
 80092c2:	2300      	movs	r3, #0
 80092c4:	6363      	str	r3, [r4, #52]	; 0x34
 80092c6:	2224      	movs	r2, #36	; 0x24
 80092c8:	89a3      	ldrh	r3, [r4, #12]
 80092ca:	4393      	bics	r3, r2
 80092cc:	81a3      	strh	r3, [r4, #12]
 80092ce:	2300      	movs	r3, #0
 80092d0:	6063      	str	r3, [r4, #4]
 80092d2:	6923      	ldr	r3, [r4, #16]
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	2308      	movs	r3, #8
 80092d8:	89a2      	ldrh	r2, [r4, #12]
 80092da:	4313      	orrs	r3, r2
 80092dc:	81a3      	strh	r3, [r4, #12]
 80092de:	6923      	ldr	r3, [r4, #16]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10b      	bne.n	80092fc <__swsetup_r+0x88>
 80092e4:	21a0      	movs	r1, #160	; 0xa0
 80092e6:	2280      	movs	r2, #128	; 0x80
 80092e8:	89a3      	ldrh	r3, [r4, #12]
 80092ea:	0089      	lsls	r1, r1, #2
 80092ec:	0092      	lsls	r2, r2, #2
 80092ee:	400b      	ands	r3, r1
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d003      	beq.n	80092fc <__swsetup_r+0x88>
 80092f4:	0021      	movs	r1, r4
 80092f6:	0028      	movs	r0, r5
 80092f8:	f000 fd4c 	bl	8009d94 <__smakebuf_r>
 80092fc:	220c      	movs	r2, #12
 80092fe:	5ea3      	ldrsh	r3, [r4, r2]
 8009300:	2001      	movs	r0, #1
 8009302:	001a      	movs	r2, r3
 8009304:	b299      	uxth	r1, r3
 8009306:	4002      	ands	r2, r0
 8009308:	4203      	tst	r3, r0
 800930a:	d00f      	beq.n	800932c <__swsetup_r+0xb8>
 800930c:	2200      	movs	r2, #0
 800930e:	60a2      	str	r2, [r4, #8]
 8009310:	6962      	ldr	r2, [r4, #20]
 8009312:	4252      	negs	r2, r2
 8009314:	61a2      	str	r2, [r4, #24]
 8009316:	2000      	movs	r0, #0
 8009318:	6922      	ldr	r2, [r4, #16]
 800931a:	4282      	cmp	r2, r0
 800931c:	d1c4      	bne.n	80092a8 <__swsetup_r+0x34>
 800931e:	0609      	lsls	r1, r1, #24
 8009320:	d5c2      	bpl.n	80092a8 <__swsetup_r+0x34>
 8009322:	2240      	movs	r2, #64	; 0x40
 8009324:	4313      	orrs	r3, r2
 8009326:	81a3      	strh	r3, [r4, #12]
 8009328:	3801      	subs	r0, #1
 800932a:	e7bd      	b.n	80092a8 <__swsetup_r+0x34>
 800932c:	0788      	lsls	r0, r1, #30
 800932e:	d400      	bmi.n	8009332 <__swsetup_r+0xbe>
 8009330:	6962      	ldr	r2, [r4, #20]
 8009332:	60a2      	str	r2, [r4, #8]
 8009334:	e7ef      	b.n	8009316 <__swsetup_r+0xa2>
 8009336:	46c0      	nop			; (mov r8, r8)
 8009338:	20000090 	.word	0x20000090

0800933c <memset>:
 800933c:	0003      	movs	r3, r0
 800933e:	1882      	adds	r2, r0, r2
 8009340:	4293      	cmp	r3, r2
 8009342:	d100      	bne.n	8009346 <memset+0xa>
 8009344:	4770      	bx	lr
 8009346:	7019      	strb	r1, [r3, #0]
 8009348:	3301      	adds	r3, #1
 800934a:	e7f9      	b.n	8009340 <memset+0x4>

0800934c <_close_r>:
 800934c:	2300      	movs	r3, #0
 800934e:	b570      	push	{r4, r5, r6, lr}
 8009350:	4d06      	ldr	r5, [pc, #24]	; (800936c <_close_r+0x20>)
 8009352:	0004      	movs	r4, r0
 8009354:	0008      	movs	r0, r1
 8009356:	602b      	str	r3, [r5, #0]
 8009358:	f7f8 fb19 	bl	800198e <_close>
 800935c:	1c43      	adds	r3, r0, #1
 800935e:	d103      	bne.n	8009368 <_close_r+0x1c>
 8009360:	682b      	ldr	r3, [r5, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d000      	beq.n	8009368 <_close_r+0x1c>
 8009366:	6023      	str	r3, [r4, #0]
 8009368:	bd70      	pop	{r4, r5, r6, pc}
 800936a:	46c0      	nop			; (mov r8, r8)
 800936c:	20004a20 	.word	0x20004a20

08009370 <_lseek_r>:
 8009370:	b570      	push	{r4, r5, r6, lr}
 8009372:	0004      	movs	r4, r0
 8009374:	0008      	movs	r0, r1
 8009376:	0011      	movs	r1, r2
 8009378:	001a      	movs	r2, r3
 800937a:	2300      	movs	r3, #0
 800937c:	4d05      	ldr	r5, [pc, #20]	; (8009394 <_lseek_r+0x24>)
 800937e:	602b      	str	r3, [r5, #0]
 8009380:	f7f8 fb26 	bl	80019d0 <_lseek>
 8009384:	1c43      	adds	r3, r0, #1
 8009386:	d103      	bne.n	8009390 <_lseek_r+0x20>
 8009388:	682b      	ldr	r3, [r5, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d000      	beq.n	8009390 <_lseek_r+0x20>
 800938e:	6023      	str	r3, [r4, #0]
 8009390:	bd70      	pop	{r4, r5, r6, pc}
 8009392:	46c0      	nop			; (mov r8, r8)
 8009394:	20004a20 	.word	0x20004a20

08009398 <_read_r>:
 8009398:	b570      	push	{r4, r5, r6, lr}
 800939a:	0004      	movs	r4, r0
 800939c:	0008      	movs	r0, r1
 800939e:	0011      	movs	r1, r2
 80093a0:	001a      	movs	r2, r3
 80093a2:	2300      	movs	r3, #0
 80093a4:	4d05      	ldr	r5, [pc, #20]	; (80093bc <_read_r+0x24>)
 80093a6:	602b      	str	r3, [r5, #0]
 80093a8:	f7f8 fab8 	bl	800191c <_read>
 80093ac:	1c43      	adds	r3, r0, #1
 80093ae:	d103      	bne.n	80093b8 <_read_r+0x20>
 80093b0:	682b      	ldr	r3, [r5, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d000      	beq.n	80093b8 <_read_r+0x20>
 80093b6:	6023      	str	r3, [r4, #0]
 80093b8:	bd70      	pop	{r4, r5, r6, pc}
 80093ba:	46c0      	nop			; (mov r8, r8)
 80093bc:	20004a20 	.word	0x20004a20

080093c0 <_write_r>:
 80093c0:	b570      	push	{r4, r5, r6, lr}
 80093c2:	0004      	movs	r4, r0
 80093c4:	0008      	movs	r0, r1
 80093c6:	0011      	movs	r1, r2
 80093c8:	001a      	movs	r2, r3
 80093ca:	2300      	movs	r3, #0
 80093cc:	4d05      	ldr	r5, [pc, #20]	; (80093e4 <_write_r+0x24>)
 80093ce:	602b      	str	r3, [r5, #0]
 80093d0:	f7f8 fac1 	bl	8001956 <_write>
 80093d4:	1c43      	adds	r3, r0, #1
 80093d6:	d103      	bne.n	80093e0 <_write_r+0x20>
 80093d8:	682b      	ldr	r3, [r5, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d000      	beq.n	80093e0 <_write_r+0x20>
 80093de:	6023      	str	r3, [r4, #0]
 80093e0:	bd70      	pop	{r4, r5, r6, pc}
 80093e2:	46c0      	nop			; (mov r8, r8)
 80093e4:	20004a20 	.word	0x20004a20

080093e8 <__errno>:
 80093e8:	4b01      	ldr	r3, [pc, #4]	; (80093f0 <__errno+0x8>)
 80093ea:	6818      	ldr	r0, [r3, #0]
 80093ec:	4770      	bx	lr
 80093ee:	46c0      	nop			; (mov r8, r8)
 80093f0:	20000090 	.word	0x20000090

080093f4 <__libc_init_array>:
 80093f4:	b570      	push	{r4, r5, r6, lr}
 80093f6:	2600      	movs	r6, #0
 80093f8:	4c0c      	ldr	r4, [pc, #48]	; (800942c <__libc_init_array+0x38>)
 80093fa:	4d0d      	ldr	r5, [pc, #52]	; (8009430 <__libc_init_array+0x3c>)
 80093fc:	1b64      	subs	r4, r4, r5
 80093fe:	10a4      	asrs	r4, r4, #2
 8009400:	42a6      	cmp	r6, r4
 8009402:	d109      	bne.n	8009418 <__libc_init_array+0x24>
 8009404:	2600      	movs	r6, #0
 8009406:	f000 fd45 	bl	8009e94 <_init>
 800940a:	4c0a      	ldr	r4, [pc, #40]	; (8009434 <__libc_init_array+0x40>)
 800940c:	4d0a      	ldr	r5, [pc, #40]	; (8009438 <__libc_init_array+0x44>)
 800940e:	1b64      	subs	r4, r4, r5
 8009410:	10a4      	asrs	r4, r4, #2
 8009412:	42a6      	cmp	r6, r4
 8009414:	d105      	bne.n	8009422 <__libc_init_array+0x2e>
 8009416:	bd70      	pop	{r4, r5, r6, pc}
 8009418:	00b3      	lsls	r3, r6, #2
 800941a:	58eb      	ldr	r3, [r5, r3]
 800941c:	4798      	blx	r3
 800941e:	3601      	adds	r6, #1
 8009420:	e7ee      	b.n	8009400 <__libc_init_array+0xc>
 8009422:	00b3      	lsls	r3, r6, #2
 8009424:	58eb      	ldr	r3, [r5, r3]
 8009426:	4798      	blx	r3
 8009428:	3601      	adds	r6, #1
 800942a:	e7f2      	b.n	8009412 <__libc_init_array+0x1e>
 800942c:	0800a2dc 	.word	0x0800a2dc
 8009430:	0800a2dc 	.word	0x0800a2dc
 8009434:	0800a2e0 	.word	0x0800a2e0
 8009438:	0800a2dc 	.word	0x0800a2dc

0800943c <__retarget_lock_acquire_recursive>:
 800943c:	4770      	bx	lr

0800943e <__retarget_lock_release_recursive>:
 800943e:	4770      	bx	lr

08009440 <memcpy>:
 8009440:	2300      	movs	r3, #0
 8009442:	b510      	push	{r4, lr}
 8009444:	429a      	cmp	r2, r3
 8009446:	d100      	bne.n	800944a <memcpy+0xa>
 8009448:	bd10      	pop	{r4, pc}
 800944a:	5ccc      	ldrb	r4, [r1, r3]
 800944c:	54c4      	strb	r4, [r0, r3]
 800944e:	3301      	adds	r3, #1
 8009450:	e7f8      	b.n	8009444 <memcpy+0x4>
	...

08009454 <_free_r>:
 8009454:	b570      	push	{r4, r5, r6, lr}
 8009456:	0005      	movs	r5, r0
 8009458:	2900      	cmp	r1, #0
 800945a:	d010      	beq.n	800947e <_free_r+0x2a>
 800945c:	1f0c      	subs	r4, r1, #4
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	da00      	bge.n	8009466 <_free_r+0x12>
 8009464:	18e4      	adds	r4, r4, r3
 8009466:	0028      	movs	r0, r5
 8009468:	f000 f8e2 	bl	8009630 <__malloc_lock>
 800946c:	4a1d      	ldr	r2, [pc, #116]	; (80094e4 <_free_r+0x90>)
 800946e:	6813      	ldr	r3, [r2, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d105      	bne.n	8009480 <_free_r+0x2c>
 8009474:	6063      	str	r3, [r4, #4]
 8009476:	6014      	str	r4, [r2, #0]
 8009478:	0028      	movs	r0, r5
 800947a:	f000 f8e1 	bl	8009640 <__malloc_unlock>
 800947e:	bd70      	pop	{r4, r5, r6, pc}
 8009480:	42a3      	cmp	r3, r4
 8009482:	d908      	bls.n	8009496 <_free_r+0x42>
 8009484:	6820      	ldr	r0, [r4, #0]
 8009486:	1821      	adds	r1, r4, r0
 8009488:	428b      	cmp	r3, r1
 800948a:	d1f3      	bne.n	8009474 <_free_r+0x20>
 800948c:	6819      	ldr	r1, [r3, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	1809      	adds	r1, r1, r0
 8009492:	6021      	str	r1, [r4, #0]
 8009494:	e7ee      	b.n	8009474 <_free_r+0x20>
 8009496:	001a      	movs	r2, r3
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <_free_r+0x4e>
 800949e:	42a3      	cmp	r3, r4
 80094a0:	d9f9      	bls.n	8009496 <_free_r+0x42>
 80094a2:	6811      	ldr	r1, [r2, #0]
 80094a4:	1850      	adds	r0, r2, r1
 80094a6:	42a0      	cmp	r0, r4
 80094a8:	d10b      	bne.n	80094c2 <_free_r+0x6e>
 80094aa:	6820      	ldr	r0, [r4, #0]
 80094ac:	1809      	adds	r1, r1, r0
 80094ae:	1850      	adds	r0, r2, r1
 80094b0:	6011      	str	r1, [r2, #0]
 80094b2:	4283      	cmp	r3, r0
 80094b4:	d1e0      	bne.n	8009478 <_free_r+0x24>
 80094b6:	6818      	ldr	r0, [r3, #0]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	1841      	adds	r1, r0, r1
 80094bc:	6011      	str	r1, [r2, #0]
 80094be:	6053      	str	r3, [r2, #4]
 80094c0:	e7da      	b.n	8009478 <_free_r+0x24>
 80094c2:	42a0      	cmp	r0, r4
 80094c4:	d902      	bls.n	80094cc <_free_r+0x78>
 80094c6:	230c      	movs	r3, #12
 80094c8:	602b      	str	r3, [r5, #0]
 80094ca:	e7d5      	b.n	8009478 <_free_r+0x24>
 80094cc:	6820      	ldr	r0, [r4, #0]
 80094ce:	1821      	adds	r1, r4, r0
 80094d0:	428b      	cmp	r3, r1
 80094d2:	d103      	bne.n	80094dc <_free_r+0x88>
 80094d4:	6819      	ldr	r1, [r3, #0]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	1809      	adds	r1, r1, r0
 80094da:	6021      	str	r1, [r4, #0]
 80094dc:	6063      	str	r3, [r4, #4]
 80094de:	6054      	str	r4, [r2, #4]
 80094e0:	e7ca      	b.n	8009478 <_free_r+0x24>
 80094e2:	46c0      	nop			; (mov r8, r8)
 80094e4:	20004a28 	.word	0x20004a28

080094e8 <sbrk_aligned>:
 80094e8:	b570      	push	{r4, r5, r6, lr}
 80094ea:	4e0f      	ldr	r6, [pc, #60]	; (8009528 <sbrk_aligned+0x40>)
 80094ec:	000d      	movs	r5, r1
 80094ee:	6831      	ldr	r1, [r6, #0]
 80094f0:	0004      	movs	r4, r0
 80094f2:	2900      	cmp	r1, #0
 80094f4:	d102      	bne.n	80094fc <sbrk_aligned+0x14>
 80094f6:	f000 fcaf 	bl	8009e58 <_sbrk_r>
 80094fa:	6030      	str	r0, [r6, #0]
 80094fc:	0029      	movs	r1, r5
 80094fe:	0020      	movs	r0, r4
 8009500:	f000 fcaa 	bl	8009e58 <_sbrk_r>
 8009504:	1c43      	adds	r3, r0, #1
 8009506:	d00a      	beq.n	800951e <sbrk_aligned+0x36>
 8009508:	2303      	movs	r3, #3
 800950a:	1cc5      	adds	r5, r0, #3
 800950c:	439d      	bics	r5, r3
 800950e:	42a8      	cmp	r0, r5
 8009510:	d007      	beq.n	8009522 <sbrk_aligned+0x3a>
 8009512:	1a29      	subs	r1, r5, r0
 8009514:	0020      	movs	r0, r4
 8009516:	f000 fc9f 	bl	8009e58 <_sbrk_r>
 800951a:	3001      	adds	r0, #1
 800951c:	d101      	bne.n	8009522 <sbrk_aligned+0x3a>
 800951e:	2501      	movs	r5, #1
 8009520:	426d      	negs	r5, r5
 8009522:	0028      	movs	r0, r5
 8009524:	bd70      	pop	{r4, r5, r6, pc}
 8009526:	46c0      	nop			; (mov r8, r8)
 8009528:	20004a2c 	.word	0x20004a2c

0800952c <_malloc_r>:
 800952c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800952e:	2203      	movs	r2, #3
 8009530:	1ccb      	adds	r3, r1, #3
 8009532:	4393      	bics	r3, r2
 8009534:	3308      	adds	r3, #8
 8009536:	0006      	movs	r6, r0
 8009538:	001f      	movs	r7, r3
 800953a:	2b0c      	cmp	r3, #12
 800953c:	d238      	bcs.n	80095b0 <_malloc_r+0x84>
 800953e:	270c      	movs	r7, #12
 8009540:	42b9      	cmp	r1, r7
 8009542:	d837      	bhi.n	80095b4 <_malloc_r+0x88>
 8009544:	0030      	movs	r0, r6
 8009546:	f000 f873 	bl	8009630 <__malloc_lock>
 800954a:	4b38      	ldr	r3, [pc, #224]	; (800962c <_malloc_r+0x100>)
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	001c      	movs	r4, r3
 8009552:	2c00      	cmp	r4, #0
 8009554:	d133      	bne.n	80095be <_malloc_r+0x92>
 8009556:	0039      	movs	r1, r7
 8009558:	0030      	movs	r0, r6
 800955a:	f7ff ffc5 	bl	80094e8 <sbrk_aligned>
 800955e:	0004      	movs	r4, r0
 8009560:	1c43      	adds	r3, r0, #1
 8009562:	d15e      	bne.n	8009622 <_malloc_r+0xf6>
 8009564:	9b00      	ldr	r3, [sp, #0]
 8009566:	681c      	ldr	r4, [r3, #0]
 8009568:	0025      	movs	r5, r4
 800956a:	2d00      	cmp	r5, #0
 800956c:	d14e      	bne.n	800960c <_malloc_r+0xe0>
 800956e:	2c00      	cmp	r4, #0
 8009570:	d051      	beq.n	8009616 <_malloc_r+0xea>
 8009572:	6823      	ldr	r3, [r4, #0]
 8009574:	0029      	movs	r1, r5
 8009576:	18e3      	adds	r3, r4, r3
 8009578:	0030      	movs	r0, r6
 800957a:	9301      	str	r3, [sp, #4]
 800957c:	f000 fc6c 	bl	8009e58 <_sbrk_r>
 8009580:	9b01      	ldr	r3, [sp, #4]
 8009582:	4283      	cmp	r3, r0
 8009584:	d147      	bne.n	8009616 <_malloc_r+0xea>
 8009586:	6823      	ldr	r3, [r4, #0]
 8009588:	0030      	movs	r0, r6
 800958a:	1aff      	subs	r7, r7, r3
 800958c:	0039      	movs	r1, r7
 800958e:	f7ff ffab 	bl	80094e8 <sbrk_aligned>
 8009592:	3001      	adds	r0, #1
 8009594:	d03f      	beq.n	8009616 <_malloc_r+0xea>
 8009596:	6823      	ldr	r3, [r4, #0]
 8009598:	19db      	adds	r3, r3, r7
 800959a:	6023      	str	r3, [r4, #0]
 800959c:	9b00      	ldr	r3, [sp, #0]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d040      	beq.n	8009626 <_malloc_r+0xfa>
 80095a4:	685a      	ldr	r2, [r3, #4]
 80095a6:	42a2      	cmp	r2, r4
 80095a8:	d133      	bne.n	8009612 <_malloc_r+0xe6>
 80095aa:	2200      	movs	r2, #0
 80095ac:	605a      	str	r2, [r3, #4]
 80095ae:	e014      	b.n	80095da <_malloc_r+0xae>
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	dac5      	bge.n	8009540 <_malloc_r+0x14>
 80095b4:	230c      	movs	r3, #12
 80095b6:	2500      	movs	r5, #0
 80095b8:	6033      	str	r3, [r6, #0]
 80095ba:	0028      	movs	r0, r5
 80095bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095be:	6821      	ldr	r1, [r4, #0]
 80095c0:	1bc9      	subs	r1, r1, r7
 80095c2:	d420      	bmi.n	8009606 <_malloc_r+0xda>
 80095c4:	290b      	cmp	r1, #11
 80095c6:	d918      	bls.n	80095fa <_malloc_r+0xce>
 80095c8:	19e2      	adds	r2, r4, r7
 80095ca:	6027      	str	r7, [r4, #0]
 80095cc:	42a3      	cmp	r3, r4
 80095ce:	d112      	bne.n	80095f6 <_malloc_r+0xca>
 80095d0:	9b00      	ldr	r3, [sp, #0]
 80095d2:	601a      	str	r2, [r3, #0]
 80095d4:	6863      	ldr	r3, [r4, #4]
 80095d6:	6011      	str	r1, [r2, #0]
 80095d8:	6053      	str	r3, [r2, #4]
 80095da:	0030      	movs	r0, r6
 80095dc:	0025      	movs	r5, r4
 80095de:	f000 f82f 	bl	8009640 <__malloc_unlock>
 80095e2:	2207      	movs	r2, #7
 80095e4:	350b      	adds	r5, #11
 80095e6:	1d23      	adds	r3, r4, #4
 80095e8:	4395      	bics	r5, r2
 80095ea:	1aea      	subs	r2, r5, r3
 80095ec:	429d      	cmp	r5, r3
 80095ee:	d0e4      	beq.n	80095ba <_malloc_r+0x8e>
 80095f0:	1b5b      	subs	r3, r3, r5
 80095f2:	50a3      	str	r3, [r4, r2]
 80095f4:	e7e1      	b.n	80095ba <_malloc_r+0x8e>
 80095f6:	605a      	str	r2, [r3, #4]
 80095f8:	e7ec      	b.n	80095d4 <_malloc_r+0xa8>
 80095fa:	6862      	ldr	r2, [r4, #4]
 80095fc:	42a3      	cmp	r3, r4
 80095fe:	d1d5      	bne.n	80095ac <_malloc_r+0x80>
 8009600:	9b00      	ldr	r3, [sp, #0]
 8009602:	601a      	str	r2, [r3, #0]
 8009604:	e7e9      	b.n	80095da <_malloc_r+0xae>
 8009606:	0023      	movs	r3, r4
 8009608:	6864      	ldr	r4, [r4, #4]
 800960a:	e7a2      	b.n	8009552 <_malloc_r+0x26>
 800960c:	002c      	movs	r4, r5
 800960e:	686d      	ldr	r5, [r5, #4]
 8009610:	e7ab      	b.n	800956a <_malloc_r+0x3e>
 8009612:	0013      	movs	r3, r2
 8009614:	e7c4      	b.n	80095a0 <_malloc_r+0x74>
 8009616:	230c      	movs	r3, #12
 8009618:	0030      	movs	r0, r6
 800961a:	6033      	str	r3, [r6, #0]
 800961c:	f000 f810 	bl	8009640 <__malloc_unlock>
 8009620:	e7cb      	b.n	80095ba <_malloc_r+0x8e>
 8009622:	6027      	str	r7, [r4, #0]
 8009624:	e7d9      	b.n	80095da <_malloc_r+0xae>
 8009626:	605b      	str	r3, [r3, #4]
 8009628:	deff      	udf	#255	; 0xff
 800962a:	46c0      	nop			; (mov r8, r8)
 800962c:	20004a28 	.word	0x20004a28

08009630 <__malloc_lock>:
 8009630:	b510      	push	{r4, lr}
 8009632:	4802      	ldr	r0, [pc, #8]	; (800963c <__malloc_lock+0xc>)
 8009634:	f7ff ff02 	bl	800943c <__retarget_lock_acquire_recursive>
 8009638:	bd10      	pop	{r4, pc}
 800963a:	46c0      	nop			; (mov r8, r8)
 800963c:	20004a24 	.word	0x20004a24

08009640 <__malloc_unlock>:
 8009640:	b510      	push	{r4, lr}
 8009642:	4802      	ldr	r0, [pc, #8]	; (800964c <__malloc_unlock+0xc>)
 8009644:	f7ff fefb 	bl	800943e <__retarget_lock_release_recursive>
 8009648:	bd10      	pop	{r4, pc}
 800964a:	46c0      	nop			; (mov r8, r8)
 800964c:	20004a24 	.word	0x20004a24

08009650 <__sfputc_r>:
 8009650:	6893      	ldr	r3, [r2, #8]
 8009652:	b510      	push	{r4, lr}
 8009654:	3b01      	subs	r3, #1
 8009656:	6093      	str	r3, [r2, #8]
 8009658:	2b00      	cmp	r3, #0
 800965a:	da04      	bge.n	8009666 <__sfputc_r+0x16>
 800965c:	6994      	ldr	r4, [r2, #24]
 800965e:	42a3      	cmp	r3, r4
 8009660:	db07      	blt.n	8009672 <__sfputc_r+0x22>
 8009662:	290a      	cmp	r1, #10
 8009664:	d005      	beq.n	8009672 <__sfputc_r+0x22>
 8009666:	6813      	ldr	r3, [r2, #0]
 8009668:	1c58      	adds	r0, r3, #1
 800966a:	6010      	str	r0, [r2, #0]
 800966c:	7019      	strb	r1, [r3, #0]
 800966e:	0008      	movs	r0, r1
 8009670:	bd10      	pop	{r4, pc}
 8009672:	f7ff fdbd 	bl	80091f0 <__swbuf_r>
 8009676:	0001      	movs	r1, r0
 8009678:	e7f9      	b.n	800966e <__sfputc_r+0x1e>

0800967a <__sfputs_r>:
 800967a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800967c:	0006      	movs	r6, r0
 800967e:	000f      	movs	r7, r1
 8009680:	0014      	movs	r4, r2
 8009682:	18d5      	adds	r5, r2, r3
 8009684:	42ac      	cmp	r4, r5
 8009686:	d101      	bne.n	800968c <__sfputs_r+0x12>
 8009688:	2000      	movs	r0, #0
 800968a:	e007      	b.n	800969c <__sfputs_r+0x22>
 800968c:	7821      	ldrb	r1, [r4, #0]
 800968e:	003a      	movs	r2, r7
 8009690:	0030      	movs	r0, r6
 8009692:	f7ff ffdd 	bl	8009650 <__sfputc_r>
 8009696:	3401      	adds	r4, #1
 8009698:	1c43      	adds	r3, r0, #1
 800969a:	d1f3      	bne.n	8009684 <__sfputs_r+0xa>
 800969c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096a0 <_vfiprintf_r>:
 80096a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096a2:	b0a1      	sub	sp, #132	; 0x84
 80096a4:	000f      	movs	r7, r1
 80096a6:	0015      	movs	r5, r2
 80096a8:	001e      	movs	r6, r3
 80096aa:	9003      	str	r0, [sp, #12]
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d004      	beq.n	80096ba <_vfiprintf_r+0x1a>
 80096b0:	6a03      	ldr	r3, [r0, #32]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d101      	bne.n	80096ba <_vfiprintf_r+0x1a>
 80096b6:	f7ff fcab 	bl	8009010 <__sinit>
 80096ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096bc:	07db      	lsls	r3, r3, #31
 80096be:	d405      	bmi.n	80096cc <_vfiprintf_r+0x2c>
 80096c0:	89bb      	ldrh	r3, [r7, #12]
 80096c2:	059b      	lsls	r3, r3, #22
 80096c4:	d402      	bmi.n	80096cc <_vfiprintf_r+0x2c>
 80096c6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80096c8:	f7ff feb8 	bl	800943c <__retarget_lock_acquire_recursive>
 80096cc:	89bb      	ldrh	r3, [r7, #12]
 80096ce:	071b      	lsls	r3, r3, #28
 80096d0:	d502      	bpl.n	80096d8 <_vfiprintf_r+0x38>
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d113      	bne.n	8009700 <_vfiprintf_r+0x60>
 80096d8:	0039      	movs	r1, r7
 80096da:	9803      	ldr	r0, [sp, #12]
 80096dc:	f7ff fdca 	bl	8009274 <__swsetup_r>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d00d      	beq.n	8009700 <_vfiprintf_r+0x60>
 80096e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096e6:	07db      	lsls	r3, r3, #31
 80096e8:	d503      	bpl.n	80096f2 <_vfiprintf_r+0x52>
 80096ea:	2001      	movs	r0, #1
 80096ec:	4240      	negs	r0, r0
 80096ee:	b021      	add	sp, #132	; 0x84
 80096f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096f2:	89bb      	ldrh	r3, [r7, #12]
 80096f4:	059b      	lsls	r3, r3, #22
 80096f6:	d4f8      	bmi.n	80096ea <_vfiprintf_r+0x4a>
 80096f8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80096fa:	f7ff fea0 	bl	800943e <__retarget_lock_release_recursive>
 80096fe:	e7f4      	b.n	80096ea <_vfiprintf_r+0x4a>
 8009700:	2300      	movs	r3, #0
 8009702:	ac08      	add	r4, sp, #32
 8009704:	6163      	str	r3, [r4, #20]
 8009706:	3320      	adds	r3, #32
 8009708:	7663      	strb	r3, [r4, #25]
 800970a:	3310      	adds	r3, #16
 800970c:	76a3      	strb	r3, [r4, #26]
 800970e:	9607      	str	r6, [sp, #28]
 8009710:	002e      	movs	r6, r5
 8009712:	7833      	ldrb	r3, [r6, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <_vfiprintf_r+0x7c>
 8009718:	2b25      	cmp	r3, #37	; 0x25
 800971a:	d148      	bne.n	80097ae <_vfiprintf_r+0x10e>
 800971c:	1b73      	subs	r3, r6, r5
 800971e:	9305      	str	r3, [sp, #20]
 8009720:	42ae      	cmp	r6, r5
 8009722:	d00b      	beq.n	800973c <_vfiprintf_r+0x9c>
 8009724:	002a      	movs	r2, r5
 8009726:	0039      	movs	r1, r7
 8009728:	9803      	ldr	r0, [sp, #12]
 800972a:	f7ff ffa6 	bl	800967a <__sfputs_r>
 800972e:	3001      	adds	r0, #1
 8009730:	d100      	bne.n	8009734 <_vfiprintf_r+0x94>
 8009732:	e0af      	b.n	8009894 <_vfiprintf_r+0x1f4>
 8009734:	6963      	ldr	r3, [r4, #20]
 8009736:	9a05      	ldr	r2, [sp, #20]
 8009738:	189b      	adds	r3, r3, r2
 800973a:	6163      	str	r3, [r4, #20]
 800973c:	7833      	ldrb	r3, [r6, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d100      	bne.n	8009744 <_vfiprintf_r+0xa4>
 8009742:	e0a7      	b.n	8009894 <_vfiprintf_r+0x1f4>
 8009744:	2201      	movs	r2, #1
 8009746:	2300      	movs	r3, #0
 8009748:	4252      	negs	r2, r2
 800974a:	6062      	str	r2, [r4, #4]
 800974c:	a904      	add	r1, sp, #16
 800974e:	3254      	adds	r2, #84	; 0x54
 8009750:	1852      	adds	r2, r2, r1
 8009752:	1c75      	adds	r5, r6, #1
 8009754:	6023      	str	r3, [r4, #0]
 8009756:	60e3      	str	r3, [r4, #12]
 8009758:	60a3      	str	r3, [r4, #8]
 800975a:	7013      	strb	r3, [r2, #0]
 800975c:	65a3      	str	r3, [r4, #88]	; 0x58
 800975e:	4b59      	ldr	r3, [pc, #356]	; (80098c4 <_vfiprintf_r+0x224>)
 8009760:	2205      	movs	r2, #5
 8009762:	0018      	movs	r0, r3
 8009764:	7829      	ldrb	r1, [r5, #0]
 8009766:	9305      	str	r3, [sp, #20]
 8009768:	f000 fb88 	bl	8009e7c <memchr>
 800976c:	1c6e      	adds	r6, r5, #1
 800976e:	2800      	cmp	r0, #0
 8009770:	d11f      	bne.n	80097b2 <_vfiprintf_r+0x112>
 8009772:	6822      	ldr	r2, [r4, #0]
 8009774:	06d3      	lsls	r3, r2, #27
 8009776:	d504      	bpl.n	8009782 <_vfiprintf_r+0xe2>
 8009778:	2353      	movs	r3, #83	; 0x53
 800977a:	a904      	add	r1, sp, #16
 800977c:	185b      	adds	r3, r3, r1
 800977e:	2120      	movs	r1, #32
 8009780:	7019      	strb	r1, [r3, #0]
 8009782:	0713      	lsls	r3, r2, #28
 8009784:	d504      	bpl.n	8009790 <_vfiprintf_r+0xf0>
 8009786:	2353      	movs	r3, #83	; 0x53
 8009788:	a904      	add	r1, sp, #16
 800978a:	185b      	adds	r3, r3, r1
 800978c:	212b      	movs	r1, #43	; 0x2b
 800978e:	7019      	strb	r1, [r3, #0]
 8009790:	782b      	ldrb	r3, [r5, #0]
 8009792:	2b2a      	cmp	r3, #42	; 0x2a
 8009794:	d016      	beq.n	80097c4 <_vfiprintf_r+0x124>
 8009796:	002e      	movs	r6, r5
 8009798:	2100      	movs	r1, #0
 800979a:	200a      	movs	r0, #10
 800979c:	68e3      	ldr	r3, [r4, #12]
 800979e:	7832      	ldrb	r2, [r6, #0]
 80097a0:	1c75      	adds	r5, r6, #1
 80097a2:	3a30      	subs	r2, #48	; 0x30
 80097a4:	2a09      	cmp	r2, #9
 80097a6:	d94e      	bls.n	8009846 <_vfiprintf_r+0x1a6>
 80097a8:	2900      	cmp	r1, #0
 80097aa:	d111      	bne.n	80097d0 <_vfiprintf_r+0x130>
 80097ac:	e017      	b.n	80097de <_vfiprintf_r+0x13e>
 80097ae:	3601      	adds	r6, #1
 80097b0:	e7af      	b.n	8009712 <_vfiprintf_r+0x72>
 80097b2:	9b05      	ldr	r3, [sp, #20]
 80097b4:	6822      	ldr	r2, [r4, #0]
 80097b6:	1ac0      	subs	r0, r0, r3
 80097b8:	2301      	movs	r3, #1
 80097ba:	4083      	lsls	r3, r0
 80097bc:	4313      	orrs	r3, r2
 80097be:	0035      	movs	r5, r6
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	e7cc      	b.n	800975e <_vfiprintf_r+0xbe>
 80097c4:	9b07      	ldr	r3, [sp, #28]
 80097c6:	1d19      	adds	r1, r3, #4
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	9107      	str	r1, [sp, #28]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	db01      	blt.n	80097d4 <_vfiprintf_r+0x134>
 80097d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80097d2:	e004      	b.n	80097de <_vfiprintf_r+0x13e>
 80097d4:	425b      	negs	r3, r3
 80097d6:	60e3      	str	r3, [r4, #12]
 80097d8:	2302      	movs	r3, #2
 80097da:	4313      	orrs	r3, r2
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	7833      	ldrb	r3, [r6, #0]
 80097e0:	2b2e      	cmp	r3, #46	; 0x2e
 80097e2:	d10a      	bne.n	80097fa <_vfiprintf_r+0x15a>
 80097e4:	7873      	ldrb	r3, [r6, #1]
 80097e6:	2b2a      	cmp	r3, #42	; 0x2a
 80097e8:	d135      	bne.n	8009856 <_vfiprintf_r+0x1b6>
 80097ea:	9b07      	ldr	r3, [sp, #28]
 80097ec:	3602      	adds	r6, #2
 80097ee:	1d1a      	adds	r2, r3, #4
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	9207      	str	r2, [sp, #28]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	db2b      	blt.n	8009850 <_vfiprintf_r+0x1b0>
 80097f8:	9309      	str	r3, [sp, #36]	; 0x24
 80097fa:	4d33      	ldr	r5, [pc, #204]	; (80098c8 <_vfiprintf_r+0x228>)
 80097fc:	2203      	movs	r2, #3
 80097fe:	0028      	movs	r0, r5
 8009800:	7831      	ldrb	r1, [r6, #0]
 8009802:	f000 fb3b 	bl	8009e7c <memchr>
 8009806:	2800      	cmp	r0, #0
 8009808:	d006      	beq.n	8009818 <_vfiprintf_r+0x178>
 800980a:	2340      	movs	r3, #64	; 0x40
 800980c:	1b40      	subs	r0, r0, r5
 800980e:	4083      	lsls	r3, r0
 8009810:	6822      	ldr	r2, [r4, #0]
 8009812:	3601      	adds	r6, #1
 8009814:	4313      	orrs	r3, r2
 8009816:	6023      	str	r3, [r4, #0]
 8009818:	7831      	ldrb	r1, [r6, #0]
 800981a:	2206      	movs	r2, #6
 800981c:	482b      	ldr	r0, [pc, #172]	; (80098cc <_vfiprintf_r+0x22c>)
 800981e:	1c75      	adds	r5, r6, #1
 8009820:	7621      	strb	r1, [r4, #24]
 8009822:	f000 fb2b 	bl	8009e7c <memchr>
 8009826:	2800      	cmp	r0, #0
 8009828:	d043      	beq.n	80098b2 <_vfiprintf_r+0x212>
 800982a:	4b29      	ldr	r3, [pc, #164]	; (80098d0 <_vfiprintf_r+0x230>)
 800982c:	2b00      	cmp	r3, #0
 800982e:	d125      	bne.n	800987c <_vfiprintf_r+0x1dc>
 8009830:	2207      	movs	r2, #7
 8009832:	9b07      	ldr	r3, [sp, #28]
 8009834:	3307      	adds	r3, #7
 8009836:	4393      	bics	r3, r2
 8009838:	3308      	adds	r3, #8
 800983a:	9307      	str	r3, [sp, #28]
 800983c:	6963      	ldr	r3, [r4, #20]
 800983e:	9a04      	ldr	r2, [sp, #16]
 8009840:	189b      	adds	r3, r3, r2
 8009842:	6163      	str	r3, [r4, #20]
 8009844:	e764      	b.n	8009710 <_vfiprintf_r+0x70>
 8009846:	4343      	muls	r3, r0
 8009848:	002e      	movs	r6, r5
 800984a:	2101      	movs	r1, #1
 800984c:	189b      	adds	r3, r3, r2
 800984e:	e7a6      	b.n	800979e <_vfiprintf_r+0xfe>
 8009850:	2301      	movs	r3, #1
 8009852:	425b      	negs	r3, r3
 8009854:	e7d0      	b.n	80097f8 <_vfiprintf_r+0x158>
 8009856:	2300      	movs	r3, #0
 8009858:	200a      	movs	r0, #10
 800985a:	001a      	movs	r2, r3
 800985c:	3601      	adds	r6, #1
 800985e:	6063      	str	r3, [r4, #4]
 8009860:	7831      	ldrb	r1, [r6, #0]
 8009862:	1c75      	adds	r5, r6, #1
 8009864:	3930      	subs	r1, #48	; 0x30
 8009866:	2909      	cmp	r1, #9
 8009868:	d903      	bls.n	8009872 <_vfiprintf_r+0x1d2>
 800986a:	2b00      	cmp	r3, #0
 800986c:	d0c5      	beq.n	80097fa <_vfiprintf_r+0x15a>
 800986e:	9209      	str	r2, [sp, #36]	; 0x24
 8009870:	e7c3      	b.n	80097fa <_vfiprintf_r+0x15a>
 8009872:	4342      	muls	r2, r0
 8009874:	002e      	movs	r6, r5
 8009876:	2301      	movs	r3, #1
 8009878:	1852      	adds	r2, r2, r1
 800987a:	e7f1      	b.n	8009860 <_vfiprintf_r+0x1c0>
 800987c:	aa07      	add	r2, sp, #28
 800987e:	9200      	str	r2, [sp, #0]
 8009880:	0021      	movs	r1, r4
 8009882:	003a      	movs	r2, r7
 8009884:	4b13      	ldr	r3, [pc, #76]	; (80098d4 <_vfiprintf_r+0x234>)
 8009886:	9803      	ldr	r0, [sp, #12]
 8009888:	e000      	b.n	800988c <_vfiprintf_r+0x1ec>
 800988a:	bf00      	nop
 800988c:	9004      	str	r0, [sp, #16]
 800988e:	9b04      	ldr	r3, [sp, #16]
 8009890:	3301      	adds	r3, #1
 8009892:	d1d3      	bne.n	800983c <_vfiprintf_r+0x19c>
 8009894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009896:	07db      	lsls	r3, r3, #31
 8009898:	d405      	bmi.n	80098a6 <_vfiprintf_r+0x206>
 800989a:	89bb      	ldrh	r3, [r7, #12]
 800989c:	059b      	lsls	r3, r3, #22
 800989e:	d402      	bmi.n	80098a6 <_vfiprintf_r+0x206>
 80098a0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80098a2:	f7ff fdcc 	bl	800943e <__retarget_lock_release_recursive>
 80098a6:	89bb      	ldrh	r3, [r7, #12]
 80098a8:	065b      	lsls	r3, r3, #25
 80098aa:	d500      	bpl.n	80098ae <_vfiprintf_r+0x20e>
 80098ac:	e71d      	b.n	80096ea <_vfiprintf_r+0x4a>
 80098ae:	980d      	ldr	r0, [sp, #52]	; 0x34
 80098b0:	e71d      	b.n	80096ee <_vfiprintf_r+0x4e>
 80098b2:	aa07      	add	r2, sp, #28
 80098b4:	9200      	str	r2, [sp, #0]
 80098b6:	0021      	movs	r1, r4
 80098b8:	003a      	movs	r2, r7
 80098ba:	4b06      	ldr	r3, [pc, #24]	; (80098d4 <_vfiprintf_r+0x234>)
 80098bc:	9803      	ldr	r0, [sp, #12]
 80098be:	f000 f87b 	bl	80099b8 <_printf_i>
 80098c2:	e7e3      	b.n	800988c <_vfiprintf_r+0x1ec>
 80098c4:	0800a2a8 	.word	0x0800a2a8
 80098c8:	0800a2ae 	.word	0x0800a2ae
 80098cc:	0800a2b2 	.word	0x0800a2b2
 80098d0:	00000000 	.word	0x00000000
 80098d4:	0800967b 	.word	0x0800967b

080098d8 <_printf_common>:
 80098d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098da:	0016      	movs	r6, r2
 80098dc:	9301      	str	r3, [sp, #4]
 80098de:	688a      	ldr	r2, [r1, #8]
 80098e0:	690b      	ldr	r3, [r1, #16]
 80098e2:	000c      	movs	r4, r1
 80098e4:	9000      	str	r0, [sp, #0]
 80098e6:	4293      	cmp	r3, r2
 80098e8:	da00      	bge.n	80098ec <_printf_common+0x14>
 80098ea:	0013      	movs	r3, r2
 80098ec:	0022      	movs	r2, r4
 80098ee:	6033      	str	r3, [r6, #0]
 80098f0:	3243      	adds	r2, #67	; 0x43
 80098f2:	7812      	ldrb	r2, [r2, #0]
 80098f4:	2a00      	cmp	r2, #0
 80098f6:	d001      	beq.n	80098fc <_printf_common+0x24>
 80098f8:	3301      	adds	r3, #1
 80098fa:	6033      	str	r3, [r6, #0]
 80098fc:	6823      	ldr	r3, [r4, #0]
 80098fe:	069b      	lsls	r3, r3, #26
 8009900:	d502      	bpl.n	8009908 <_printf_common+0x30>
 8009902:	6833      	ldr	r3, [r6, #0]
 8009904:	3302      	adds	r3, #2
 8009906:	6033      	str	r3, [r6, #0]
 8009908:	6822      	ldr	r2, [r4, #0]
 800990a:	2306      	movs	r3, #6
 800990c:	0015      	movs	r5, r2
 800990e:	401d      	ands	r5, r3
 8009910:	421a      	tst	r2, r3
 8009912:	d027      	beq.n	8009964 <_printf_common+0x8c>
 8009914:	0023      	movs	r3, r4
 8009916:	3343      	adds	r3, #67	; 0x43
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	1e5a      	subs	r2, r3, #1
 800991c:	4193      	sbcs	r3, r2
 800991e:	6822      	ldr	r2, [r4, #0]
 8009920:	0692      	lsls	r2, r2, #26
 8009922:	d430      	bmi.n	8009986 <_printf_common+0xae>
 8009924:	0022      	movs	r2, r4
 8009926:	9901      	ldr	r1, [sp, #4]
 8009928:	9800      	ldr	r0, [sp, #0]
 800992a:	9d08      	ldr	r5, [sp, #32]
 800992c:	3243      	adds	r2, #67	; 0x43
 800992e:	47a8      	blx	r5
 8009930:	3001      	adds	r0, #1
 8009932:	d025      	beq.n	8009980 <_printf_common+0xa8>
 8009934:	2206      	movs	r2, #6
 8009936:	6823      	ldr	r3, [r4, #0]
 8009938:	2500      	movs	r5, #0
 800993a:	4013      	ands	r3, r2
 800993c:	2b04      	cmp	r3, #4
 800993e:	d105      	bne.n	800994c <_printf_common+0x74>
 8009940:	6833      	ldr	r3, [r6, #0]
 8009942:	68e5      	ldr	r5, [r4, #12]
 8009944:	1aed      	subs	r5, r5, r3
 8009946:	43eb      	mvns	r3, r5
 8009948:	17db      	asrs	r3, r3, #31
 800994a:	401d      	ands	r5, r3
 800994c:	68a3      	ldr	r3, [r4, #8]
 800994e:	6922      	ldr	r2, [r4, #16]
 8009950:	4293      	cmp	r3, r2
 8009952:	dd01      	ble.n	8009958 <_printf_common+0x80>
 8009954:	1a9b      	subs	r3, r3, r2
 8009956:	18ed      	adds	r5, r5, r3
 8009958:	2600      	movs	r6, #0
 800995a:	42b5      	cmp	r5, r6
 800995c:	d120      	bne.n	80099a0 <_printf_common+0xc8>
 800995e:	2000      	movs	r0, #0
 8009960:	e010      	b.n	8009984 <_printf_common+0xac>
 8009962:	3501      	adds	r5, #1
 8009964:	68e3      	ldr	r3, [r4, #12]
 8009966:	6832      	ldr	r2, [r6, #0]
 8009968:	1a9b      	subs	r3, r3, r2
 800996a:	42ab      	cmp	r3, r5
 800996c:	ddd2      	ble.n	8009914 <_printf_common+0x3c>
 800996e:	0022      	movs	r2, r4
 8009970:	2301      	movs	r3, #1
 8009972:	9901      	ldr	r1, [sp, #4]
 8009974:	9800      	ldr	r0, [sp, #0]
 8009976:	9f08      	ldr	r7, [sp, #32]
 8009978:	3219      	adds	r2, #25
 800997a:	47b8      	blx	r7
 800997c:	3001      	adds	r0, #1
 800997e:	d1f0      	bne.n	8009962 <_printf_common+0x8a>
 8009980:	2001      	movs	r0, #1
 8009982:	4240      	negs	r0, r0
 8009984:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009986:	2030      	movs	r0, #48	; 0x30
 8009988:	18e1      	adds	r1, r4, r3
 800998a:	3143      	adds	r1, #67	; 0x43
 800998c:	7008      	strb	r0, [r1, #0]
 800998e:	0021      	movs	r1, r4
 8009990:	1c5a      	adds	r2, r3, #1
 8009992:	3145      	adds	r1, #69	; 0x45
 8009994:	7809      	ldrb	r1, [r1, #0]
 8009996:	18a2      	adds	r2, r4, r2
 8009998:	3243      	adds	r2, #67	; 0x43
 800999a:	3302      	adds	r3, #2
 800999c:	7011      	strb	r1, [r2, #0]
 800999e:	e7c1      	b.n	8009924 <_printf_common+0x4c>
 80099a0:	0022      	movs	r2, r4
 80099a2:	2301      	movs	r3, #1
 80099a4:	9901      	ldr	r1, [sp, #4]
 80099a6:	9800      	ldr	r0, [sp, #0]
 80099a8:	9f08      	ldr	r7, [sp, #32]
 80099aa:	321a      	adds	r2, #26
 80099ac:	47b8      	blx	r7
 80099ae:	3001      	adds	r0, #1
 80099b0:	d0e6      	beq.n	8009980 <_printf_common+0xa8>
 80099b2:	3601      	adds	r6, #1
 80099b4:	e7d1      	b.n	800995a <_printf_common+0x82>
	...

080099b8 <_printf_i>:
 80099b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ba:	b08b      	sub	sp, #44	; 0x2c
 80099bc:	9206      	str	r2, [sp, #24]
 80099be:	000a      	movs	r2, r1
 80099c0:	3243      	adds	r2, #67	; 0x43
 80099c2:	9307      	str	r3, [sp, #28]
 80099c4:	9005      	str	r0, [sp, #20]
 80099c6:	9204      	str	r2, [sp, #16]
 80099c8:	7e0a      	ldrb	r2, [r1, #24]
 80099ca:	000c      	movs	r4, r1
 80099cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099ce:	2a78      	cmp	r2, #120	; 0x78
 80099d0:	d809      	bhi.n	80099e6 <_printf_i+0x2e>
 80099d2:	2a62      	cmp	r2, #98	; 0x62
 80099d4:	d80b      	bhi.n	80099ee <_printf_i+0x36>
 80099d6:	2a00      	cmp	r2, #0
 80099d8:	d100      	bne.n	80099dc <_printf_i+0x24>
 80099da:	e0be      	b.n	8009b5a <_printf_i+0x1a2>
 80099dc:	497c      	ldr	r1, [pc, #496]	; (8009bd0 <_printf_i+0x218>)
 80099de:	9103      	str	r1, [sp, #12]
 80099e0:	2a58      	cmp	r2, #88	; 0x58
 80099e2:	d100      	bne.n	80099e6 <_printf_i+0x2e>
 80099e4:	e093      	b.n	8009b0e <_printf_i+0x156>
 80099e6:	0026      	movs	r6, r4
 80099e8:	3642      	adds	r6, #66	; 0x42
 80099ea:	7032      	strb	r2, [r6, #0]
 80099ec:	e022      	b.n	8009a34 <_printf_i+0x7c>
 80099ee:	0010      	movs	r0, r2
 80099f0:	3863      	subs	r0, #99	; 0x63
 80099f2:	2815      	cmp	r0, #21
 80099f4:	d8f7      	bhi.n	80099e6 <_printf_i+0x2e>
 80099f6:	f7f6 fb87 	bl	8000108 <__gnu_thumb1_case_shi>
 80099fa:	0016      	.short	0x0016
 80099fc:	fff6001f 	.word	0xfff6001f
 8009a00:	fff6fff6 	.word	0xfff6fff6
 8009a04:	001ffff6 	.word	0x001ffff6
 8009a08:	fff6fff6 	.word	0xfff6fff6
 8009a0c:	fff6fff6 	.word	0xfff6fff6
 8009a10:	003600a3 	.word	0x003600a3
 8009a14:	fff60083 	.word	0xfff60083
 8009a18:	00b4fff6 	.word	0x00b4fff6
 8009a1c:	0036fff6 	.word	0x0036fff6
 8009a20:	fff6fff6 	.word	0xfff6fff6
 8009a24:	0087      	.short	0x0087
 8009a26:	0026      	movs	r6, r4
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	3642      	adds	r6, #66	; 0x42
 8009a2c:	1d11      	adds	r1, r2, #4
 8009a2e:	6019      	str	r1, [r3, #0]
 8009a30:	6813      	ldr	r3, [r2, #0]
 8009a32:	7033      	strb	r3, [r6, #0]
 8009a34:	2301      	movs	r3, #1
 8009a36:	e0a2      	b.n	8009b7e <_printf_i+0x1c6>
 8009a38:	6818      	ldr	r0, [r3, #0]
 8009a3a:	6809      	ldr	r1, [r1, #0]
 8009a3c:	1d02      	adds	r2, r0, #4
 8009a3e:	060d      	lsls	r5, r1, #24
 8009a40:	d50b      	bpl.n	8009a5a <_printf_i+0xa2>
 8009a42:	6805      	ldr	r5, [r0, #0]
 8009a44:	601a      	str	r2, [r3, #0]
 8009a46:	2d00      	cmp	r5, #0
 8009a48:	da03      	bge.n	8009a52 <_printf_i+0x9a>
 8009a4a:	232d      	movs	r3, #45	; 0x2d
 8009a4c:	9a04      	ldr	r2, [sp, #16]
 8009a4e:	426d      	negs	r5, r5
 8009a50:	7013      	strb	r3, [r2, #0]
 8009a52:	4b5f      	ldr	r3, [pc, #380]	; (8009bd0 <_printf_i+0x218>)
 8009a54:	270a      	movs	r7, #10
 8009a56:	9303      	str	r3, [sp, #12]
 8009a58:	e01b      	b.n	8009a92 <_printf_i+0xda>
 8009a5a:	6805      	ldr	r5, [r0, #0]
 8009a5c:	601a      	str	r2, [r3, #0]
 8009a5e:	0649      	lsls	r1, r1, #25
 8009a60:	d5f1      	bpl.n	8009a46 <_printf_i+0x8e>
 8009a62:	b22d      	sxth	r5, r5
 8009a64:	e7ef      	b.n	8009a46 <_printf_i+0x8e>
 8009a66:	680d      	ldr	r5, [r1, #0]
 8009a68:	6819      	ldr	r1, [r3, #0]
 8009a6a:	1d08      	adds	r0, r1, #4
 8009a6c:	6018      	str	r0, [r3, #0]
 8009a6e:	062e      	lsls	r6, r5, #24
 8009a70:	d501      	bpl.n	8009a76 <_printf_i+0xbe>
 8009a72:	680d      	ldr	r5, [r1, #0]
 8009a74:	e003      	b.n	8009a7e <_printf_i+0xc6>
 8009a76:	066d      	lsls	r5, r5, #25
 8009a78:	d5fb      	bpl.n	8009a72 <_printf_i+0xba>
 8009a7a:	680d      	ldr	r5, [r1, #0]
 8009a7c:	b2ad      	uxth	r5, r5
 8009a7e:	4b54      	ldr	r3, [pc, #336]	; (8009bd0 <_printf_i+0x218>)
 8009a80:	2708      	movs	r7, #8
 8009a82:	9303      	str	r3, [sp, #12]
 8009a84:	2a6f      	cmp	r2, #111	; 0x6f
 8009a86:	d000      	beq.n	8009a8a <_printf_i+0xd2>
 8009a88:	3702      	adds	r7, #2
 8009a8a:	0023      	movs	r3, r4
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	3343      	adds	r3, #67	; 0x43
 8009a90:	701a      	strb	r2, [r3, #0]
 8009a92:	6863      	ldr	r3, [r4, #4]
 8009a94:	60a3      	str	r3, [r4, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	db03      	blt.n	8009aa2 <_printf_i+0xea>
 8009a9a:	2104      	movs	r1, #4
 8009a9c:	6822      	ldr	r2, [r4, #0]
 8009a9e:	438a      	bics	r2, r1
 8009aa0:	6022      	str	r2, [r4, #0]
 8009aa2:	2d00      	cmp	r5, #0
 8009aa4:	d102      	bne.n	8009aac <_printf_i+0xf4>
 8009aa6:	9e04      	ldr	r6, [sp, #16]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00c      	beq.n	8009ac6 <_printf_i+0x10e>
 8009aac:	9e04      	ldr	r6, [sp, #16]
 8009aae:	0028      	movs	r0, r5
 8009ab0:	0039      	movs	r1, r7
 8009ab2:	f7f6 fbb9 	bl	8000228 <__aeabi_uidivmod>
 8009ab6:	9b03      	ldr	r3, [sp, #12]
 8009ab8:	3e01      	subs	r6, #1
 8009aba:	5c5b      	ldrb	r3, [r3, r1]
 8009abc:	7033      	strb	r3, [r6, #0]
 8009abe:	002b      	movs	r3, r5
 8009ac0:	0005      	movs	r5, r0
 8009ac2:	429f      	cmp	r7, r3
 8009ac4:	d9f3      	bls.n	8009aae <_printf_i+0xf6>
 8009ac6:	2f08      	cmp	r7, #8
 8009ac8:	d109      	bne.n	8009ade <_printf_i+0x126>
 8009aca:	6823      	ldr	r3, [r4, #0]
 8009acc:	07db      	lsls	r3, r3, #31
 8009ace:	d506      	bpl.n	8009ade <_printf_i+0x126>
 8009ad0:	6862      	ldr	r2, [r4, #4]
 8009ad2:	6923      	ldr	r3, [r4, #16]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	dc02      	bgt.n	8009ade <_printf_i+0x126>
 8009ad8:	2330      	movs	r3, #48	; 0x30
 8009ada:	3e01      	subs	r6, #1
 8009adc:	7033      	strb	r3, [r6, #0]
 8009ade:	9b04      	ldr	r3, [sp, #16]
 8009ae0:	1b9b      	subs	r3, r3, r6
 8009ae2:	6123      	str	r3, [r4, #16]
 8009ae4:	9b07      	ldr	r3, [sp, #28]
 8009ae6:	0021      	movs	r1, r4
 8009ae8:	9300      	str	r3, [sp, #0]
 8009aea:	9805      	ldr	r0, [sp, #20]
 8009aec:	9b06      	ldr	r3, [sp, #24]
 8009aee:	aa09      	add	r2, sp, #36	; 0x24
 8009af0:	f7ff fef2 	bl	80098d8 <_printf_common>
 8009af4:	3001      	adds	r0, #1
 8009af6:	d147      	bne.n	8009b88 <_printf_i+0x1d0>
 8009af8:	2001      	movs	r0, #1
 8009afa:	4240      	negs	r0, r0
 8009afc:	b00b      	add	sp, #44	; 0x2c
 8009afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b00:	2220      	movs	r2, #32
 8009b02:	6809      	ldr	r1, [r1, #0]
 8009b04:	430a      	orrs	r2, r1
 8009b06:	6022      	str	r2, [r4, #0]
 8009b08:	2278      	movs	r2, #120	; 0x78
 8009b0a:	4932      	ldr	r1, [pc, #200]	; (8009bd4 <_printf_i+0x21c>)
 8009b0c:	9103      	str	r1, [sp, #12]
 8009b0e:	0021      	movs	r1, r4
 8009b10:	3145      	adds	r1, #69	; 0x45
 8009b12:	700a      	strb	r2, [r1, #0]
 8009b14:	6819      	ldr	r1, [r3, #0]
 8009b16:	6822      	ldr	r2, [r4, #0]
 8009b18:	c920      	ldmia	r1!, {r5}
 8009b1a:	0610      	lsls	r0, r2, #24
 8009b1c:	d402      	bmi.n	8009b24 <_printf_i+0x16c>
 8009b1e:	0650      	lsls	r0, r2, #25
 8009b20:	d500      	bpl.n	8009b24 <_printf_i+0x16c>
 8009b22:	b2ad      	uxth	r5, r5
 8009b24:	6019      	str	r1, [r3, #0]
 8009b26:	07d3      	lsls	r3, r2, #31
 8009b28:	d502      	bpl.n	8009b30 <_printf_i+0x178>
 8009b2a:	2320      	movs	r3, #32
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	6023      	str	r3, [r4, #0]
 8009b30:	2710      	movs	r7, #16
 8009b32:	2d00      	cmp	r5, #0
 8009b34:	d1a9      	bne.n	8009a8a <_printf_i+0xd2>
 8009b36:	2220      	movs	r2, #32
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	4393      	bics	r3, r2
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	e7a4      	b.n	8009a8a <_printf_i+0xd2>
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	680d      	ldr	r5, [r1, #0]
 8009b44:	1d10      	adds	r0, r2, #4
 8009b46:	6949      	ldr	r1, [r1, #20]
 8009b48:	6018      	str	r0, [r3, #0]
 8009b4a:	6813      	ldr	r3, [r2, #0]
 8009b4c:	062e      	lsls	r6, r5, #24
 8009b4e:	d501      	bpl.n	8009b54 <_printf_i+0x19c>
 8009b50:	6019      	str	r1, [r3, #0]
 8009b52:	e002      	b.n	8009b5a <_printf_i+0x1a2>
 8009b54:	066d      	lsls	r5, r5, #25
 8009b56:	d5fb      	bpl.n	8009b50 <_printf_i+0x198>
 8009b58:	8019      	strh	r1, [r3, #0]
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	9e04      	ldr	r6, [sp, #16]
 8009b5e:	6123      	str	r3, [r4, #16]
 8009b60:	e7c0      	b.n	8009ae4 <_printf_i+0x12c>
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	1d11      	adds	r1, r2, #4
 8009b66:	6019      	str	r1, [r3, #0]
 8009b68:	6816      	ldr	r6, [r2, #0]
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	0030      	movs	r0, r6
 8009b6e:	6862      	ldr	r2, [r4, #4]
 8009b70:	f000 f984 	bl	8009e7c <memchr>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d001      	beq.n	8009b7c <_printf_i+0x1c4>
 8009b78:	1b80      	subs	r0, r0, r6
 8009b7a:	6060      	str	r0, [r4, #4]
 8009b7c:	6863      	ldr	r3, [r4, #4]
 8009b7e:	6123      	str	r3, [r4, #16]
 8009b80:	2300      	movs	r3, #0
 8009b82:	9a04      	ldr	r2, [sp, #16]
 8009b84:	7013      	strb	r3, [r2, #0]
 8009b86:	e7ad      	b.n	8009ae4 <_printf_i+0x12c>
 8009b88:	0032      	movs	r2, r6
 8009b8a:	6923      	ldr	r3, [r4, #16]
 8009b8c:	9906      	ldr	r1, [sp, #24]
 8009b8e:	9805      	ldr	r0, [sp, #20]
 8009b90:	9d07      	ldr	r5, [sp, #28]
 8009b92:	47a8      	blx	r5
 8009b94:	3001      	adds	r0, #1
 8009b96:	d0af      	beq.n	8009af8 <_printf_i+0x140>
 8009b98:	6823      	ldr	r3, [r4, #0]
 8009b9a:	079b      	lsls	r3, r3, #30
 8009b9c:	d415      	bmi.n	8009bca <_printf_i+0x212>
 8009b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ba0:	68e0      	ldr	r0, [r4, #12]
 8009ba2:	4298      	cmp	r0, r3
 8009ba4:	daaa      	bge.n	8009afc <_printf_i+0x144>
 8009ba6:	0018      	movs	r0, r3
 8009ba8:	e7a8      	b.n	8009afc <_printf_i+0x144>
 8009baa:	0022      	movs	r2, r4
 8009bac:	2301      	movs	r3, #1
 8009bae:	9906      	ldr	r1, [sp, #24]
 8009bb0:	9805      	ldr	r0, [sp, #20]
 8009bb2:	9e07      	ldr	r6, [sp, #28]
 8009bb4:	3219      	adds	r2, #25
 8009bb6:	47b0      	blx	r6
 8009bb8:	3001      	adds	r0, #1
 8009bba:	d09d      	beq.n	8009af8 <_printf_i+0x140>
 8009bbc:	3501      	adds	r5, #1
 8009bbe:	68e3      	ldr	r3, [r4, #12]
 8009bc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bc2:	1a9b      	subs	r3, r3, r2
 8009bc4:	42ab      	cmp	r3, r5
 8009bc6:	dcf0      	bgt.n	8009baa <_printf_i+0x1f2>
 8009bc8:	e7e9      	b.n	8009b9e <_printf_i+0x1e6>
 8009bca:	2500      	movs	r5, #0
 8009bcc:	e7f7      	b.n	8009bbe <_printf_i+0x206>
 8009bce:	46c0      	nop			; (mov r8, r8)
 8009bd0:	0800a2b9 	.word	0x0800a2b9
 8009bd4:	0800a2ca 	.word	0x0800a2ca

08009bd8 <__sflush_r>:
 8009bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bda:	898b      	ldrh	r3, [r1, #12]
 8009bdc:	0005      	movs	r5, r0
 8009bde:	000c      	movs	r4, r1
 8009be0:	071a      	lsls	r2, r3, #28
 8009be2:	d45c      	bmi.n	8009c9e <__sflush_r+0xc6>
 8009be4:	684a      	ldr	r2, [r1, #4]
 8009be6:	2a00      	cmp	r2, #0
 8009be8:	dc04      	bgt.n	8009bf4 <__sflush_r+0x1c>
 8009bea:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009bec:	2a00      	cmp	r2, #0
 8009bee:	dc01      	bgt.n	8009bf4 <__sflush_r+0x1c>
 8009bf0:	2000      	movs	r0, #0
 8009bf2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009bf4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009bf6:	2f00      	cmp	r7, #0
 8009bf8:	d0fa      	beq.n	8009bf0 <__sflush_r+0x18>
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	2080      	movs	r0, #128	; 0x80
 8009bfe:	682e      	ldr	r6, [r5, #0]
 8009c00:	602a      	str	r2, [r5, #0]
 8009c02:	001a      	movs	r2, r3
 8009c04:	0140      	lsls	r0, r0, #5
 8009c06:	6a21      	ldr	r1, [r4, #32]
 8009c08:	4002      	ands	r2, r0
 8009c0a:	4203      	tst	r3, r0
 8009c0c:	d034      	beq.n	8009c78 <__sflush_r+0xa0>
 8009c0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c10:	89a3      	ldrh	r3, [r4, #12]
 8009c12:	075b      	lsls	r3, r3, #29
 8009c14:	d506      	bpl.n	8009c24 <__sflush_r+0x4c>
 8009c16:	6863      	ldr	r3, [r4, #4]
 8009c18:	1ac0      	subs	r0, r0, r3
 8009c1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d001      	beq.n	8009c24 <__sflush_r+0x4c>
 8009c20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c22:	1ac0      	subs	r0, r0, r3
 8009c24:	0002      	movs	r2, r0
 8009c26:	2300      	movs	r3, #0
 8009c28:	0028      	movs	r0, r5
 8009c2a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009c2c:	6a21      	ldr	r1, [r4, #32]
 8009c2e:	47b8      	blx	r7
 8009c30:	89a2      	ldrh	r2, [r4, #12]
 8009c32:	1c43      	adds	r3, r0, #1
 8009c34:	d106      	bne.n	8009c44 <__sflush_r+0x6c>
 8009c36:	6829      	ldr	r1, [r5, #0]
 8009c38:	291d      	cmp	r1, #29
 8009c3a:	d82c      	bhi.n	8009c96 <__sflush_r+0xbe>
 8009c3c:	4b2a      	ldr	r3, [pc, #168]	; (8009ce8 <__sflush_r+0x110>)
 8009c3e:	410b      	asrs	r3, r1
 8009c40:	07db      	lsls	r3, r3, #31
 8009c42:	d428      	bmi.n	8009c96 <__sflush_r+0xbe>
 8009c44:	2300      	movs	r3, #0
 8009c46:	6063      	str	r3, [r4, #4]
 8009c48:	6923      	ldr	r3, [r4, #16]
 8009c4a:	6023      	str	r3, [r4, #0]
 8009c4c:	04d2      	lsls	r2, r2, #19
 8009c4e:	d505      	bpl.n	8009c5c <__sflush_r+0x84>
 8009c50:	1c43      	adds	r3, r0, #1
 8009c52:	d102      	bne.n	8009c5a <__sflush_r+0x82>
 8009c54:	682b      	ldr	r3, [r5, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d100      	bne.n	8009c5c <__sflush_r+0x84>
 8009c5a:	6560      	str	r0, [r4, #84]	; 0x54
 8009c5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c5e:	602e      	str	r6, [r5, #0]
 8009c60:	2900      	cmp	r1, #0
 8009c62:	d0c5      	beq.n	8009bf0 <__sflush_r+0x18>
 8009c64:	0023      	movs	r3, r4
 8009c66:	3344      	adds	r3, #68	; 0x44
 8009c68:	4299      	cmp	r1, r3
 8009c6a:	d002      	beq.n	8009c72 <__sflush_r+0x9a>
 8009c6c:	0028      	movs	r0, r5
 8009c6e:	f7ff fbf1 	bl	8009454 <_free_r>
 8009c72:	2000      	movs	r0, #0
 8009c74:	6360      	str	r0, [r4, #52]	; 0x34
 8009c76:	e7bc      	b.n	8009bf2 <__sflush_r+0x1a>
 8009c78:	2301      	movs	r3, #1
 8009c7a:	0028      	movs	r0, r5
 8009c7c:	47b8      	blx	r7
 8009c7e:	1c43      	adds	r3, r0, #1
 8009c80:	d1c6      	bne.n	8009c10 <__sflush_r+0x38>
 8009c82:	682b      	ldr	r3, [r5, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d0c3      	beq.n	8009c10 <__sflush_r+0x38>
 8009c88:	2b1d      	cmp	r3, #29
 8009c8a:	d001      	beq.n	8009c90 <__sflush_r+0xb8>
 8009c8c:	2b16      	cmp	r3, #22
 8009c8e:	d101      	bne.n	8009c94 <__sflush_r+0xbc>
 8009c90:	602e      	str	r6, [r5, #0]
 8009c92:	e7ad      	b.n	8009bf0 <__sflush_r+0x18>
 8009c94:	89a2      	ldrh	r2, [r4, #12]
 8009c96:	2340      	movs	r3, #64	; 0x40
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	81a3      	strh	r3, [r4, #12]
 8009c9c:	e7a9      	b.n	8009bf2 <__sflush_r+0x1a>
 8009c9e:	690e      	ldr	r6, [r1, #16]
 8009ca0:	2e00      	cmp	r6, #0
 8009ca2:	d0a5      	beq.n	8009bf0 <__sflush_r+0x18>
 8009ca4:	680f      	ldr	r7, [r1, #0]
 8009ca6:	600e      	str	r6, [r1, #0]
 8009ca8:	1bba      	subs	r2, r7, r6
 8009caa:	9201      	str	r2, [sp, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	079b      	lsls	r3, r3, #30
 8009cb0:	d100      	bne.n	8009cb4 <__sflush_r+0xdc>
 8009cb2:	694a      	ldr	r2, [r1, #20]
 8009cb4:	60a2      	str	r2, [r4, #8]
 8009cb6:	9b01      	ldr	r3, [sp, #4]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	dd99      	ble.n	8009bf0 <__sflush_r+0x18>
 8009cbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009cbe:	0032      	movs	r2, r6
 8009cc0:	001f      	movs	r7, r3
 8009cc2:	0028      	movs	r0, r5
 8009cc4:	9b01      	ldr	r3, [sp, #4]
 8009cc6:	6a21      	ldr	r1, [r4, #32]
 8009cc8:	47b8      	blx	r7
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	dc06      	bgt.n	8009cdc <__sflush_r+0x104>
 8009cce:	2340      	movs	r3, #64	; 0x40
 8009cd0:	2001      	movs	r0, #1
 8009cd2:	89a2      	ldrh	r2, [r4, #12]
 8009cd4:	4240      	negs	r0, r0
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	81a3      	strh	r3, [r4, #12]
 8009cda:	e78a      	b.n	8009bf2 <__sflush_r+0x1a>
 8009cdc:	9b01      	ldr	r3, [sp, #4]
 8009cde:	1836      	adds	r6, r6, r0
 8009ce0:	1a1b      	subs	r3, r3, r0
 8009ce2:	9301      	str	r3, [sp, #4]
 8009ce4:	e7e7      	b.n	8009cb6 <__sflush_r+0xde>
 8009ce6:	46c0      	nop			; (mov r8, r8)
 8009ce8:	dfbffffe 	.word	0xdfbffffe

08009cec <_fflush_r>:
 8009cec:	690b      	ldr	r3, [r1, #16]
 8009cee:	b570      	push	{r4, r5, r6, lr}
 8009cf0:	0005      	movs	r5, r0
 8009cf2:	000c      	movs	r4, r1
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d102      	bne.n	8009cfe <_fflush_r+0x12>
 8009cf8:	2500      	movs	r5, #0
 8009cfa:	0028      	movs	r0, r5
 8009cfc:	bd70      	pop	{r4, r5, r6, pc}
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	d004      	beq.n	8009d0c <_fflush_r+0x20>
 8009d02:	6a03      	ldr	r3, [r0, #32]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d101      	bne.n	8009d0c <_fflush_r+0x20>
 8009d08:	f7ff f982 	bl	8009010 <__sinit>
 8009d0c:	220c      	movs	r2, #12
 8009d0e:	5ea3      	ldrsh	r3, [r4, r2]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d0f1      	beq.n	8009cf8 <_fflush_r+0xc>
 8009d14:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d16:	07d2      	lsls	r2, r2, #31
 8009d18:	d404      	bmi.n	8009d24 <_fflush_r+0x38>
 8009d1a:	059b      	lsls	r3, r3, #22
 8009d1c:	d402      	bmi.n	8009d24 <_fflush_r+0x38>
 8009d1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d20:	f7ff fb8c 	bl	800943c <__retarget_lock_acquire_recursive>
 8009d24:	0028      	movs	r0, r5
 8009d26:	0021      	movs	r1, r4
 8009d28:	f7ff ff56 	bl	8009bd8 <__sflush_r>
 8009d2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d2e:	0005      	movs	r5, r0
 8009d30:	07db      	lsls	r3, r3, #31
 8009d32:	d4e2      	bmi.n	8009cfa <_fflush_r+0xe>
 8009d34:	89a3      	ldrh	r3, [r4, #12]
 8009d36:	059b      	lsls	r3, r3, #22
 8009d38:	d4df      	bmi.n	8009cfa <_fflush_r+0xe>
 8009d3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d3c:	f7ff fb7f 	bl	800943e <__retarget_lock_release_recursive>
 8009d40:	e7db      	b.n	8009cfa <_fflush_r+0xe>
	...

08009d44 <__swhatbuf_r>:
 8009d44:	b570      	push	{r4, r5, r6, lr}
 8009d46:	000e      	movs	r6, r1
 8009d48:	001d      	movs	r5, r3
 8009d4a:	230e      	movs	r3, #14
 8009d4c:	5ec9      	ldrsh	r1, [r1, r3]
 8009d4e:	0014      	movs	r4, r2
 8009d50:	b096      	sub	sp, #88	; 0x58
 8009d52:	2900      	cmp	r1, #0
 8009d54:	da0c      	bge.n	8009d70 <__swhatbuf_r+0x2c>
 8009d56:	89b2      	ldrh	r2, [r6, #12]
 8009d58:	2380      	movs	r3, #128	; 0x80
 8009d5a:	0011      	movs	r1, r2
 8009d5c:	4019      	ands	r1, r3
 8009d5e:	421a      	tst	r2, r3
 8009d60:	d013      	beq.n	8009d8a <__swhatbuf_r+0x46>
 8009d62:	2100      	movs	r1, #0
 8009d64:	3b40      	subs	r3, #64	; 0x40
 8009d66:	2000      	movs	r0, #0
 8009d68:	6029      	str	r1, [r5, #0]
 8009d6a:	6023      	str	r3, [r4, #0]
 8009d6c:	b016      	add	sp, #88	; 0x58
 8009d6e:	bd70      	pop	{r4, r5, r6, pc}
 8009d70:	466a      	mov	r2, sp
 8009d72:	f000 f84d 	bl	8009e10 <_fstat_r>
 8009d76:	2800      	cmp	r0, #0
 8009d78:	dbed      	blt.n	8009d56 <__swhatbuf_r+0x12>
 8009d7a:	23f0      	movs	r3, #240	; 0xf0
 8009d7c:	9901      	ldr	r1, [sp, #4]
 8009d7e:	021b      	lsls	r3, r3, #8
 8009d80:	4019      	ands	r1, r3
 8009d82:	4b03      	ldr	r3, [pc, #12]	; (8009d90 <__swhatbuf_r+0x4c>)
 8009d84:	18c9      	adds	r1, r1, r3
 8009d86:	424b      	negs	r3, r1
 8009d88:	4159      	adcs	r1, r3
 8009d8a:	2380      	movs	r3, #128	; 0x80
 8009d8c:	00db      	lsls	r3, r3, #3
 8009d8e:	e7ea      	b.n	8009d66 <__swhatbuf_r+0x22>
 8009d90:	ffffe000 	.word	0xffffe000

08009d94 <__smakebuf_r>:
 8009d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d96:	2602      	movs	r6, #2
 8009d98:	898b      	ldrh	r3, [r1, #12]
 8009d9a:	0005      	movs	r5, r0
 8009d9c:	000c      	movs	r4, r1
 8009d9e:	4233      	tst	r3, r6
 8009da0:	d006      	beq.n	8009db0 <__smakebuf_r+0x1c>
 8009da2:	0023      	movs	r3, r4
 8009da4:	3347      	adds	r3, #71	; 0x47
 8009da6:	6023      	str	r3, [r4, #0]
 8009da8:	6123      	str	r3, [r4, #16]
 8009daa:	2301      	movs	r3, #1
 8009dac:	6163      	str	r3, [r4, #20]
 8009dae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009db0:	466a      	mov	r2, sp
 8009db2:	ab01      	add	r3, sp, #4
 8009db4:	f7ff ffc6 	bl	8009d44 <__swhatbuf_r>
 8009db8:	9900      	ldr	r1, [sp, #0]
 8009dba:	0007      	movs	r7, r0
 8009dbc:	0028      	movs	r0, r5
 8009dbe:	f7ff fbb5 	bl	800952c <_malloc_r>
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	d108      	bne.n	8009dd8 <__smakebuf_r+0x44>
 8009dc6:	220c      	movs	r2, #12
 8009dc8:	5ea3      	ldrsh	r3, [r4, r2]
 8009dca:	059a      	lsls	r2, r3, #22
 8009dcc:	d4ef      	bmi.n	8009dae <__smakebuf_r+0x1a>
 8009dce:	2203      	movs	r2, #3
 8009dd0:	4393      	bics	r3, r2
 8009dd2:	431e      	orrs	r6, r3
 8009dd4:	81a6      	strh	r6, [r4, #12]
 8009dd6:	e7e4      	b.n	8009da2 <__smakebuf_r+0xe>
 8009dd8:	2380      	movs	r3, #128	; 0x80
 8009dda:	89a2      	ldrh	r2, [r4, #12]
 8009ddc:	6020      	str	r0, [r4, #0]
 8009dde:	4313      	orrs	r3, r2
 8009de0:	81a3      	strh	r3, [r4, #12]
 8009de2:	9b00      	ldr	r3, [sp, #0]
 8009de4:	6120      	str	r0, [r4, #16]
 8009de6:	6163      	str	r3, [r4, #20]
 8009de8:	9b01      	ldr	r3, [sp, #4]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00c      	beq.n	8009e08 <__smakebuf_r+0x74>
 8009dee:	0028      	movs	r0, r5
 8009df0:	230e      	movs	r3, #14
 8009df2:	5ee1      	ldrsh	r1, [r4, r3]
 8009df4:	f000 f81e 	bl	8009e34 <_isatty_r>
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	d005      	beq.n	8009e08 <__smakebuf_r+0x74>
 8009dfc:	2303      	movs	r3, #3
 8009dfe:	89a2      	ldrh	r2, [r4, #12]
 8009e00:	439a      	bics	r2, r3
 8009e02:	3b02      	subs	r3, #2
 8009e04:	4313      	orrs	r3, r2
 8009e06:	81a3      	strh	r3, [r4, #12]
 8009e08:	89a3      	ldrh	r3, [r4, #12]
 8009e0a:	433b      	orrs	r3, r7
 8009e0c:	81a3      	strh	r3, [r4, #12]
 8009e0e:	e7ce      	b.n	8009dae <__smakebuf_r+0x1a>

08009e10 <_fstat_r>:
 8009e10:	2300      	movs	r3, #0
 8009e12:	b570      	push	{r4, r5, r6, lr}
 8009e14:	4d06      	ldr	r5, [pc, #24]	; (8009e30 <_fstat_r+0x20>)
 8009e16:	0004      	movs	r4, r0
 8009e18:	0008      	movs	r0, r1
 8009e1a:	0011      	movs	r1, r2
 8009e1c:	602b      	str	r3, [r5, #0]
 8009e1e:	f7f7 fdc0 	bl	80019a2 <_fstat>
 8009e22:	1c43      	adds	r3, r0, #1
 8009e24:	d103      	bne.n	8009e2e <_fstat_r+0x1e>
 8009e26:	682b      	ldr	r3, [r5, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d000      	beq.n	8009e2e <_fstat_r+0x1e>
 8009e2c:	6023      	str	r3, [r4, #0]
 8009e2e:	bd70      	pop	{r4, r5, r6, pc}
 8009e30:	20004a20 	.word	0x20004a20

08009e34 <_isatty_r>:
 8009e34:	2300      	movs	r3, #0
 8009e36:	b570      	push	{r4, r5, r6, lr}
 8009e38:	4d06      	ldr	r5, [pc, #24]	; (8009e54 <_isatty_r+0x20>)
 8009e3a:	0004      	movs	r4, r0
 8009e3c:	0008      	movs	r0, r1
 8009e3e:	602b      	str	r3, [r5, #0]
 8009e40:	f7f7 fdbd 	bl	80019be <_isatty>
 8009e44:	1c43      	adds	r3, r0, #1
 8009e46:	d103      	bne.n	8009e50 <_isatty_r+0x1c>
 8009e48:	682b      	ldr	r3, [r5, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d000      	beq.n	8009e50 <_isatty_r+0x1c>
 8009e4e:	6023      	str	r3, [r4, #0]
 8009e50:	bd70      	pop	{r4, r5, r6, pc}
 8009e52:	46c0      	nop			; (mov r8, r8)
 8009e54:	20004a20 	.word	0x20004a20

08009e58 <_sbrk_r>:
 8009e58:	2300      	movs	r3, #0
 8009e5a:	b570      	push	{r4, r5, r6, lr}
 8009e5c:	4d06      	ldr	r5, [pc, #24]	; (8009e78 <_sbrk_r+0x20>)
 8009e5e:	0004      	movs	r4, r0
 8009e60:	0008      	movs	r0, r1
 8009e62:	602b      	str	r3, [r5, #0]
 8009e64:	f7f7 fdc0 	bl	80019e8 <_sbrk>
 8009e68:	1c43      	adds	r3, r0, #1
 8009e6a:	d103      	bne.n	8009e74 <_sbrk_r+0x1c>
 8009e6c:	682b      	ldr	r3, [r5, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d000      	beq.n	8009e74 <_sbrk_r+0x1c>
 8009e72:	6023      	str	r3, [r4, #0]
 8009e74:	bd70      	pop	{r4, r5, r6, pc}
 8009e76:	46c0      	nop			; (mov r8, r8)
 8009e78:	20004a20 	.word	0x20004a20

08009e7c <memchr>:
 8009e7c:	b2c9      	uxtb	r1, r1
 8009e7e:	1882      	adds	r2, r0, r2
 8009e80:	4290      	cmp	r0, r2
 8009e82:	d101      	bne.n	8009e88 <memchr+0xc>
 8009e84:	2000      	movs	r0, #0
 8009e86:	4770      	bx	lr
 8009e88:	7803      	ldrb	r3, [r0, #0]
 8009e8a:	428b      	cmp	r3, r1
 8009e8c:	d0fb      	beq.n	8009e86 <memchr+0xa>
 8009e8e:	3001      	adds	r0, #1
 8009e90:	e7f6      	b.n	8009e80 <memchr+0x4>
	...

08009e94 <_init>:
 8009e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e96:	46c0      	nop			; (mov r8, r8)
 8009e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e9a:	bc08      	pop	{r3}
 8009e9c:	469e      	mov	lr, r3
 8009e9e:	4770      	bx	lr

08009ea0 <_fini>:
 8009ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea2:	46c0      	nop			; (mov r8, r8)
 8009ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ea6:	bc08      	pop	{r3}
 8009ea8:	469e      	mov	lr, r3
 8009eaa:	4770      	bx	lr
