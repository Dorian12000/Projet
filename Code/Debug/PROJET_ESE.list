
PROJET_ESE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088fc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  080089bc  080089bc  000189bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cdc  08008cdc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08008cdc  08008cdc  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008cdc  08008cdc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cdc  08008cdc  00018cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ce0  08008ce0  00018ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08008ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000121c  2000006c  08008d50  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001288  08008d50  00021288  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017387  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b9d  00000000  00000000  0003745e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001690  00000000  00000000  0003b000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001179  00000000  00000000  0003c690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ae62  00000000  00000000  0003d809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bd28  00000000  00000000  0005866b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3bdf  00000000  00000000  00074393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000593c  00000000  00000000  00117f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0011d8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080089a4 	.word	0x080089a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	080089a4 	.word	0x080089a4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0010      	movs	r0, r2
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	0019      	movs	r1, r3
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f000 fa3d 	bl	8000898 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 f98d 	bl	8000748 <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fa2f 	bl	8000898 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fa25 	bl	8000898 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 f9b5 	bl	80007cc <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 f9ab 	bl	80007cc <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_fdiv>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	464f      	mov	r7, r9
 8000488:	4646      	mov	r6, r8
 800048a:	46d6      	mov	lr, sl
 800048c:	0245      	lsls	r5, r0, #9
 800048e:	b5c0      	push	{r6, r7, lr}
 8000490:	0047      	lsls	r7, r0, #1
 8000492:	1c0c      	adds	r4, r1, #0
 8000494:	0a6d      	lsrs	r5, r5, #9
 8000496:	0e3f      	lsrs	r7, r7, #24
 8000498:	0fc6      	lsrs	r6, r0, #31
 800049a:	2f00      	cmp	r7, #0
 800049c:	d100      	bne.n	80004a0 <__aeabi_fdiv+0x1c>
 800049e:	e06f      	b.n	8000580 <__aeabi_fdiv+0xfc>
 80004a0:	2fff      	cmp	r7, #255	; 0xff
 80004a2:	d100      	bne.n	80004a6 <__aeabi_fdiv+0x22>
 80004a4:	e074      	b.n	8000590 <__aeabi_fdiv+0x10c>
 80004a6:	2300      	movs	r3, #0
 80004a8:	2280      	movs	r2, #128	; 0x80
 80004aa:	4699      	mov	r9, r3
 80004ac:	469a      	mov	sl, r3
 80004ae:	00ed      	lsls	r5, r5, #3
 80004b0:	04d2      	lsls	r2, r2, #19
 80004b2:	4315      	orrs	r5, r2
 80004b4:	3f7f      	subs	r7, #127	; 0x7f
 80004b6:	0263      	lsls	r3, r4, #9
 80004b8:	0a5b      	lsrs	r3, r3, #9
 80004ba:	4698      	mov	r8, r3
 80004bc:	0063      	lsls	r3, r4, #1
 80004be:	0e1b      	lsrs	r3, r3, #24
 80004c0:	0fe4      	lsrs	r4, r4, #31
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d04d      	beq.n	8000562 <__aeabi_fdiv+0xde>
 80004c6:	2bff      	cmp	r3, #255	; 0xff
 80004c8:	d045      	beq.n	8000556 <__aeabi_fdiv+0xd2>
 80004ca:	4642      	mov	r2, r8
 80004cc:	2180      	movs	r1, #128	; 0x80
 80004ce:	00d2      	lsls	r2, r2, #3
 80004d0:	04c9      	lsls	r1, r1, #19
 80004d2:	4311      	orrs	r1, r2
 80004d4:	4688      	mov	r8, r1
 80004d6:	2200      	movs	r2, #0
 80004d8:	3b7f      	subs	r3, #127	; 0x7f
 80004da:	0031      	movs	r1, r6
 80004dc:	1aff      	subs	r7, r7, r3
 80004de:	464b      	mov	r3, r9
 80004e0:	4061      	eors	r1, r4
 80004e2:	b2c9      	uxtb	r1, r1
 80004e4:	2b0f      	cmp	r3, #15
 80004e6:	d900      	bls.n	80004ea <__aeabi_fdiv+0x66>
 80004e8:	e0b8      	b.n	800065c <__aeabi_fdiv+0x1d8>
 80004ea:	4870      	ldr	r0, [pc, #448]	; (80006ac <__aeabi_fdiv+0x228>)
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	58c3      	ldr	r3, [r0, r3]
 80004f0:	469f      	mov	pc, r3
 80004f2:	2300      	movs	r3, #0
 80004f4:	4698      	mov	r8, r3
 80004f6:	0026      	movs	r6, r4
 80004f8:	4645      	mov	r5, r8
 80004fa:	4692      	mov	sl, r2
 80004fc:	4653      	mov	r3, sl
 80004fe:	2b02      	cmp	r3, #2
 8000500:	d100      	bne.n	8000504 <__aeabi_fdiv+0x80>
 8000502:	e08d      	b.n	8000620 <__aeabi_fdiv+0x19c>
 8000504:	2b03      	cmp	r3, #3
 8000506:	d100      	bne.n	800050a <__aeabi_fdiv+0x86>
 8000508:	e0a1      	b.n	800064e <__aeabi_fdiv+0x1ca>
 800050a:	2b01      	cmp	r3, #1
 800050c:	d018      	beq.n	8000540 <__aeabi_fdiv+0xbc>
 800050e:	003b      	movs	r3, r7
 8000510:	337f      	adds	r3, #127	; 0x7f
 8000512:	2b00      	cmp	r3, #0
 8000514:	dd6d      	ble.n	80005f2 <__aeabi_fdiv+0x16e>
 8000516:	076a      	lsls	r2, r5, #29
 8000518:	d004      	beq.n	8000524 <__aeabi_fdiv+0xa0>
 800051a:	220f      	movs	r2, #15
 800051c:	402a      	ands	r2, r5
 800051e:	2a04      	cmp	r2, #4
 8000520:	d000      	beq.n	8000524 <__aeabi_fdiv+0xa0>
 8000522:	3504      	adds	r5, #4
 8000524:	012a      	lsls	r2, r5, #4
 8000526:	d503      	bpl.n	8000530 <__aeabi_fdiv+0xac>
 8000528:	4b61      	ldr	r3, [pc, #388]	; (80006b0 <__aeabi_fdiv+0x22c>)
 800052a:	401d      	ands	r5, r3
 800052c:	003b      	movs	r3, r7
 800052e:	3380      	adds	r3, #128	; 0x80
 8000530:	2bfe      	cmp	r3, #254	; 0xfe
 8000532:	dd00      	ble.n	8000536 <__aeabi_fdiv+0xb2>
 8000534:	e074      	b.n	8000620 <__aeabi_fdiv+0x19c>
 8000536:	01aa      	lsls	r2, r5, #6
 8000538:	0a52      	lsrs	r2, r2, #9
 800053a:	b2d8      	uxtb	r0, r3
 800053c:	e002      	b.n	8000544 <__aeabi_fdiv+0xc0>
 800053e:	000e      	movs	r6, r1
 8000540:	2000      	movs	r0, #0
 8000542:	2200      	movs	r2, #0
 8000544:	05c0      	lsls	r0, r0, #23
 8000546:	07f6      	lsls	r6, r6, #31
 8000548:	4310      	orrs	r0, r2
 800054a:	4330      	orrs	r0, r6
 800054c:	bce0      	pop	{r5, r6, r7}
 800054e:	46ba      	mov	sl, r7
 8000550:	46b1      	mov	r9, r6
 8000552:	46a8      	mov	r8, r5
 8000554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000556:	4643      	mov	r3, r8
 8000558:	2b00      	cmp	r3, #0
 800055a:	d13f      	bne.n	80005dc <__aeabi_fdiv+0x158>
 800055c:	2202      	movs	r2, #2
 800055e:	3fff      	subs	r7, #255	; 0xff
 8000560:	e003      	b.n	800056a <__aeabi_fdiv+0xe6>
 8000562:	4643      	mov	r3, r8
 8000564:	2b00      	cmp	r3, #0
 8000566:	d12d      	bne.n	80005c4 <__aeabi_fdiv+0x140>
 8000568:	2201      	movs	r2, #1
 800056a:	0031      	movs	r1, r6
 800056c:	464b      	mov	r3, r9
 800056e:	4061      	eors	r1, r4
 8000570:	b2c9      	uxtb	r1, r1
 8000572:	4313      	orrs	r3, r2
 8000574:	2b0f      	cmp	r3, #15
 8000576:	d838      	bhi.n	80005ea <__aeabi_fdiv+0x166>
 8000578:	484e      	ldr	r0, [pc, #312]	; (80006b4 <__aeabi_fdiv+0x230>)
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	58c3      	ldr	r3, [r0, r3]
 800057e:	469f      	mov	pc, r3
 8000580:	2d00      	cmp	r5, #0
 8000582:	d113      	bne.n	80005ac <__aeabi_fdiv+0x128>
 8000584:	2304      	movs	r3, #4
 8000586:	4699      	mov	r9, r3
 8000588:	3b03      	subs	r3, #3
 800058a:	2700      	movs	r7, #0
 800058c:	469a      	mov	sl, r3
 800058e:	e792      	b.n	80004b6 <__aeabi_fdiv+0x32>
 8000590:	2d00      	cmp	r5, #0
 8000592:	d105      	bne.n	80005a0 <__aeabi_fdiv+0x11c>
 8000594:	2308      	movs	r3, #8
 8000596:	4699      	mov	r9, r3
 8000598:	3b06      	subs	r3, #6
 800059a:	27ff      	movs	r7, #255	; 0xff
 800059c:	469a      	mov	sl, r3
 800059e:	e78a      	b.n	80004b6 <__aeabi_fdiv+0x32>
 80005a0:	230c      	movs	r3, #12
 80005a2:	4699      	mov	r9, r3
 80005a4:	3b09      	subs	r3, #9
 80005a6:	27ff      	movs	r7, #255	; 0xff
 80005a8:	469a      	mov	sl, r3
 80005aa:	e784      	b.n	80004b6 <__aeabi_fdiv+0x32>
 80005ac:	0028      	movs	r0, r5
 80005ae:	f000 fd67 	bl	8001080 <__clzsi2>
 80005b2:	2776      	movs	r7, #118	; 0x76
 80005b4:	1f43      	subs	r3, r0, #5
 80005b6:	409d      	lsls	r5, r3
 80005b8:	2300      	movs	r3, #0
 80005ba:	427f      	negs	r7, r7
 80005bc:	4699      	mov	r9, r3
 80005be:	469a      	mov	sl, r3
 80005c0:	1a3f      	subs	r7, r7, r0
 80005c2:	e778      	b.n	80004b6 <__aeabi_fdiv+0x32>
 80005c4:	4640      	mov	r0, r8
 80005c6:	f000 fd5b 	bl	8001080 <__clzsi2>
 80005ca:	4642      	mov	r2, r8
 80005cc:	1f43      	subs	r3, r0, #5
 80005ce:	409a      	lsls	r2, r3
 80005d0:	2376      	movs	r3, #118	; 0x76
 80005d2:	425b      	negs	r3, r3
 80005d4:	4690      	mov	r8, r2
 80005d6:	1a1b      	subs	r3, r3, r0
 80005d8:	2200      	movs	r2, #0
 80005da:	e77e      	b.n	80004da <__aeabi_fdiv+0x56>
 80005dc:	2303      	movs	r3, #3
 80005de:	464a      	mov	r2, r9
 80005e0:	431a      	orrs	r2, r3
 80005e2:	4691      	mov	r9, r2
 80005e4:	33fc      	adds	r3, #252	; 0xfc
 80005e6:	2203      	movs	r2, #3
 80005e8:	e777      	b.n	80004da <__aeabi_fdiv+0x56>
 80005ea:	000e      	movs	r6, r1
 80005ec:	20ff      	movs	r0, #255	; 0xff
 80005ee:	2200      	movs	r2, #0
 80005f0:	e7a8      	b.n	8000544 <__aeabi_fdiv+0xc0>
 80005f2:	2201      	movs	r2, #1
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	2b1b      	cmp	r3, #27
 80005f8:	dca2      	bgt.n	8000540 <__aeabi_fdiv+0xbc>
 80005fa:	379e      	adds	r7, #158	; 0x9e
 80005fc:	002a      	movs	r2, r5
 80005fe:	40bd      	lsls	r5, r7
 8000600:	40da      	lsrs	r2, r3
 8000602:	1e6b      	subs	r3, r5, #1
 8000604:	419d      	sbcs	r5, r3
 8000606:	4315      	orrs	r5, r2
 8000608:	076a      	lsls	r2, r5, #29
 800060a:	d004      	beq.n	8000616 <__aeabi_fdiv+0x192>
 800060c:	220f      	movs	r2, #15
 800060e:	402a      	ands	r2, r5
 8000610:	2a04      	cmp	r2, #4
 8000612:	d000      	beq.n	8000616 <__aeabi_fdiv+0x192>
 8000614:	3504      	adds	r5, #4
 8000616:	016a      	lsls	r2, r5, #5
 8000618:	d544      	bpl.n	80006a4 <__aeabi_fdiv+0x220>
 800061a:	2001      	movs	r0, #1
 800061c:	2200      	movs	r2, #0
 800061e:	e791      	b.n	8000544 <__aeabi_fdiv+0xc0>
 8000620:	20ff      	movs	r0, #255	; 0xff
 8000622:	2200      	movs	r2, #0
 8000624:	e78e      	b.n	8000544 <__aeabi_fdiv+0xc0>
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	2600      	movs	r6, #0
 800062a:	20ff      	movs	r0, #255	; 0xff
 800062c:	03d2      	lsls	r2, r2, #15
 800062e:	e789      	b.n	8000544 <__aeabi_fdiv+0xc0>
 8000630:	2300      	movs	r3, #0
 8000632:	4698      	mov	r8, r3
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	03d2      	lsls	r2, r2, #15
 8000638:	4215      	tst	r5, r2
 800063a:	d008      	beq.n	800064e <__aeabi_fdiv+0x1ca>
 800063c:	4643      	mov	r3, r8
 800063e:	4213      	tst	r3, r2
 8000640:	d105      	bne.n	800064e <__aeabi_fdiv+0x1ca>
 8000642:	431a      	orrs	r2, r3
 8000644:	0252      	lsls	r2, r2, #9
 8000646:	0026      	movs	r6, r4
 8000648:	20ff      	movs	r0, #255	; 0xff
 800064a:	0a52      	lsrs	r2, r2, #9
 800064c:	e77a      	b.n	8000544 <__aeabi_fdiv+0xc0>
 800064e:	2280      	movs	r2, #128	; 0x80
 8000650:	03d2      	lsls	r2, r2, #15
 8000652:	432a      	orrs	r2, r5
 8000654:	0252      	lsls	r2, r2, #9
 8000656:	20ff      	movs	r0, #255	; 0xff
 8000658:	0a52      	lsrs	r2, r2, #9
 800065a:	e773      	b.n	8000544 <__aeabi_fdiv+0xc0>
 800065c:	4642      	mov	r2, r8
 800065e:	016b      	lsls	r3, r5, #5
 8000660:	0155      	lsls	r5, r2, #5
 8000662:	42ab      	cmp	r3, r5
 8000664:	d21a      	bcs.n	800069c <__aeabi_fdiv+0x218>
 8000666:	201b      	movs	r0, #27
 8000668:	2200      	movs	r2, #0
 800066a:	3f01      	subs	r7, #1
 800066c:	2601      	movs	r6, #1
 800066e:	001c      	movs	r4, r3
 8000670:	0052      	lsls	r2, r2, #1
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	2c00      	cmp	r4, #0
 8000676:	db01      	blt.n	800067c <__aeabi_fdiv+0x1f8>
 8000678:	429d      	cmp	r5, r3
 800067a:	d801      	bhi.n	8000680 <__aeabi_fdiv+0x1fc>
 800067c:	1b5b      	subs	r3, r3, r5
 800067e:	4332      	orrs	r2, r6
 8000680:	3801      	subs	r0, #1
 8000682:	2800      	cmp	r0, #0
 8000684:	d1f3      	bne.n	800066e <__aeabi_fdiv+0x1ea>
 8000686:	1e58      	subs	r0, r3, #1
 8000688:	4183      	sbcs	r3, r0
 800068a:	4313      	orrs	r3, r2
 800068c:	001d      	movs	r5, r3
 800068e:	003b      	movs	r3, r7
 8000690:	337f      	adds	r3, #127	; 0x7f
 8000692:	000e      	movs	r6, r1
 8000694:	2b00      	cmp	r3, #0
 8000696:	dd00      	ble.n	800069a <__aeabi_fdiv+0x216>
 8000698:	e73d      	b.n	8000516 <__aeabi_fdiv+0x92>
 800069a:	e7aa      	b.n	80005f2 <__aeabi_fdiv+0x16e>
 800069c:	201a      	movs	r0, #26
 800069e:	2201      	movs	r2, #1
 80006a0:	1b5b      	subs	r3, r3, r5
 80006a2:	e7e3      	b.n	800066c <__aeabi_fdiv+0x1e8>
 80006a4:	01aa      	lsls	r2, r5, #6
 80006a6:	2000      	movs	r0, #0
 80006a8:	0a52      	lsrs	r2, r2, #9
 80006aa:	e74b      	b.n	8000544 <__aeabi_fdiv+0xc0>
 80006ac:	08008b18 	.word	0x08008b18
 80006b0:	f7ffffff 	.word	0xf7ffffff
 80006b4:	08008b58 	.word	0x08008b58

080006b8 <__aeabi_ui2f>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	1e04      	subs	r4, r0, #0
 80006bc:	d00e      	beq.n	80006dc <__aeabi_ui2f+0x24>
 80006be:	f000 fcdf 	bl	8001080 <__clzsi2>
 80006c2:	239e      	movs	r3, #158	; 0x9e
 80006c4:	0001      	movs	r1, r0
 80006c6:	1a1b      	subs	r3, r3, r0
 80006c8:	2b96      	cmp	r3, #150	; 0x96
 80006ca:	dc0c      	bgt.n	80006e6 <__aeabi_ui2f+0x2e>
 80006cc:	2808      	cmp	r0, #8
 80006ce:	d02c      	beq.n	800072a <__aeabi_ui2f+0x72>
 80006d0:	3908      	subs	r1, #8
 80006d2:	408c      	lsls	r4, r1
 80006d4:	0264      	lsls	r4, r4, #9
 80006d6:	0a64      	lsrs	r4, r4, #9
 80006d8:	b2d8      	uxtb	r0, r3
 80006da:	e001      	b.n	80006e0 <__aeabi_ui2f+0x28>
 80006dc:	2000      	movs	r0, #0
 80006de:	2400      	movs	r4, #0
 80006e0:	05c0      	lsls	r0, r0, #23
 80006e2:	4320      	orrs	r0, r4
 80006e4:	bd70      	pop	{r4, r5, r6, pc}
 80006e6:	2b99      	cmp	r3, #153	; 0x99
 80006e8:	dd0a      	ble.n	8000700 <__aeabi_ui2f+0x48>
 80006ea:	0002      	movs	r2, r0
 80006ec:	0020      	movs	r0, r4
 80006ee:	321b      	adds	r2, #27
 80006f0:	4090      	lsls	r0, r2
 80006f2:	0002      	movs	r2, r0
 80006f4:	1e50      	subs	r0, r2, #1
 80006f6:	4182      	sbcs	r2, r0
 80006f8:	2005      	movs	r0, #5
 80006fa:	1a40      	subs	r0, r0, r1
 80006fc:	40c4      	lsrs	r4, r0
 80006fe:	4314      	orrs	r4, r2
 8000700:	2905      	cmp	r1, #5
 8000702:	dc16      	bgt.n	8000732 <__aeabi_ui2f+0x7a>
 8000704:	0022      	movs	r2, r4
 8000706:	480f      	ldr	r0, [pc, #60]	; (8000744 <__aeabi_ui2f+0x8c>)
 8000708:	4002      	ands	r2, r0
 800070a:	0765      	lsls	r5, r4, #29
 800070c:	d009      	beq.n	8000722 <__aeabi_ui2f+0x6a>
 800070e:	250f      	movs	r5, #15
 8000710:	402c      	ands	r4, r5
 8000712:	2c04      	cmp	r4, #4
 8000714:	d005      	beq.n	8000722 <__aeabi_ui2f+0x6a>
 8000716:	3204      	adds	r2, #4
 8000718:	0154      	lsls	r4, r2, #5
 800071a:	d502      	bpl.n	8000722 <__aeabi_ui2f+0x6a>
 800071c:	239f      	movs	r3, #159	; 0x9f
 800071e:	4002      	ands	r2, r0
 8000720:	1a5b      	subs	r3, r3, r1
 8000722:	0192      	lsls	r2, r2, #6
 8000724:	0a54      	lsrs	r4, r2, #9
 8000726:	b2d8      	uxtb	r0, r3
 8000728:	e7da      	b.n	80006e0 <__aeabi_ui2f+0x28>
 800072a:	0264      	lsls	r4, r4, #9
 800072c:	2096      	movs	r0, #150	; 0x96
 800072e:	0a64      	lsrs	r4, r4, #9
 8000730:	e7d6      	b.n	80006e0 <__aeabi_ui2f+0x28>
 8000732:	1f4a      	subs	r2, r1, #5
 8000734:	4094      	lsls	r4, r2
 8000736:	0022      	movs	r2, r4
 8000738:	4802      	ldr	r0, [pc, #8]	; (8000744 <__aeabi_ui2f+0x8c>)
 800073a:	4002      	ands	r2, r0
 800073c:	0765      	lsls	r5, r4, #29
 800073e:	d0f0      	beq.n	8000722 <__aeabi_ui2f+0x6a>
 8000740:	e7e5      	b.n	800070e <__aeabi_ui2f+0x56>
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	fbffffff 	.word	0xfbffffff

08000748 <__eqdf2>:
 8000748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800074a:	464e      	mov	r6, r9
 800074c:	4645      	mov	r5, r8
 800074e:	46de      	mov	lr, fp
 8000750:	4657      	mov	r7, sl
 8000752:	4690      	mov	r8, r2
 8000754:	b5e0      	push	{r5, r6, r7, lr}
 8000756:	0017      	movs	r7, r2
 8000758:	031a      	lsls	r2, r3, #12
 800075a:	0b12      	lsrs	r2, r2, #12
 800075c:	0005      	movs	r5, r0
 800075e:	4684      	mov	ip, r0
 8000760:	4819      	ldr	r0, [pc, #100]	; (80007c8 <__eqdf2+0x80>)
 8000762:	030e      	lsls	r6, r1, #12
 8000764:	004c      	lsls	r4, r1, #1
 8000766:	4691      	mov	r9, r2
 8000768:	005a      	lsls	r2, r3, #1
 800076a:	0fdb      	lsrs	r3, r3, #31
 800076c:	469b      	mov	fp, r3
 800076e:	0b36      	lsrs	r6, r6, #12
 8000770:	0d64      	lsrs	r4, r4, #21
 8000772:	0fc9      	lsrs	r1, r1, #31
 8000774:	0d52      	lsrs	r2, r2, #21
 8000776:	4284      	cmp	r4, r0
 8000778:	d019      	beq.n	80007ae <__eqdf2+0x66>
 800077a:	4282      	cmp	r2, r0
 800077c:	d010      	beq.n	80007a0 <__eqdf2+0x58>
 800077e:	2001      	movs	r0, #1
 8000780:	4294      	cmp	r4, r2
 8000782:	d10e      	bne.n	80007a2 <__eqdf2+0x5a>
 8000784:	454e      	cmp	r6, r9
 8000786:	d10c      	bne.n	80007a2 <__eqdf2+0x5a>
 8000788:	2001      	movs	r0, #1
 800078a:	45c4      	cmp	ip, r8
 800078c:	d109      	bne.n	80007a2 <__eqdf2+0x5a>
 800078e:	4559      	cmp	r1, fp
 8000790:	d017      	beq.n	80007c2 <__eqdf2+0x7a>
 8000792:	2c00      	cmp	r4, #0
 8000794:	d105      	bne.n	80007a2 <__eqdf2+0x5a>
 8000796:	0030      	movs	r0, r6
 8000798:	4328      	orrs	r0, r5
 800079a:	1e43      	subs	r3, r0, #1
 800079c:	4198      	sbcs	r0, r3
 800079e:	e000      	b.n	80007a2 <__eqdf2+0x5a>
 80007a0:	2001      	movs	r0, #1
 80007a2:	bcf0      	pop	{r4, r5, r6, r7}
 80007a4:	46bb      	mov	fp, r7
 80007a6:	46b2      	mov	sl, r6
 80007a8:	46a9      	mov	r9, r5
 80007aa:	46a0      	mov	r8, r4
 80007ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ae:	0033      	movs	r3, r6
 80007b0:	2001      	movs	r0, #1
 80007b2:	432b      	orrs	r3, r5
 80007b4:	d1f5      	bne.n	80007a2 <__eqdf2+0x5a>
 80007b6:	42a2      	cmp	r2, r4
 80007b8:	d1f3      	bne.n	80007a2 <__eqdf2+0x5a>
 80007ba:	464b      	mov	r3, r9
 80007bc:	433b      	orrs	r3, r7
 80007be:	d1f0      	bne.n	80007a2 <__eqdf2+0x5a>
 80007c0:	e7e2      	b.n	8000788 <__eqdf2+0x40>
 80007c2:	2000      	movs	r0, #0
 80007c4:	e7ed      	b.n	80007a2 <__eqdf2+0x5a>
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	000007ff 	.word	0x000007ff

080007cc <__gedf2>:
 80007cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ce:	4647      	mov	r7, r8
 80007d0:	46ce      	mov	lr, r9
 80007d2:	0004      	movs	r4, r0
 80007d4:	0018      	movs	r0, r3
 80007d6:	0016      	movs	r6, r2
 80007d8:	031b      	lsls	r3, r3, #12
 80007da:	0b1b      	lsrs	r3, r3, #12
 80007dc:	4d2d      	ldr	r5, [pc, #180]	; (8000894 <__gedf2+0xc8>)
 80007de:	004a      	lsls	r2, r1, #1
 80007e0:	4699      	mov	r9, r3
 80007e2:	b580      	push	{r7, lr}
 80007e4:	0043      	lsls	r3, r0, #1
 80007e6:	030f      	lsls	r7, r1, #12
 80007e8:	46a4      	mov	ip, r4
 80007ea:	46b0      	mov	r8, r6
 80007ec:	0b3f      	lsrs	r7, r7, #12
 80007ee:	0d52      	lsrs	r2, r2, #21
 80007f0:	0fc9      	lsrs	r1, r1, #31
 80007f2:	0d5b      	lsrs	r3, r3, #21
 80007f4:	0fc0      	lsrs	r0, r0, #31
 80007f6:	42aa      	cmp	r2, r5
 80007f8:	d021      	beq.n	800083e <__gedf2+0x72>
 80007fa:	42ab      	cmp	r3, r5
 80007fc:	d013      	beq.n	8000826 <__gedf2+0x5a>
 80007fe:	2a00      	cmp	r2, #0
 8000800:	d122      	bne.n	8000848 <__gedf2+0x7c>
 8000802:	433c      	orrs	r4, r7
 8000804:	2b00      	cmp	r3, #0
 8000806:	d102      	bne.n	800080e <__gedf2+0x42>
 8000808:	464d      	mov	r5, r9
 800080a:	432e      	orrs	r6, r5
 800080c:	d022      	beq.n	8000854 <__gedf2+0x88>
 800080e:	2c00      	cmp	r4, #0
 8000810:	d010      	beq.n	8000834 <__gedf2+0x68>
 8000812:	4281      	cmp	r1, r0
 8000814:	d022      	beq.n	800085c <__gedf2+0x90>
 8000816:	2002      	movs	r0, #2
 8000818:	3901      	subs	r1, #1
 800081a:	4008      	ands	r0, r1
 800081c:	3801      	subs	r0, #1
 800081e:	bcc0      	pop	{r6, r7}
 8000820:	46b9      	mov	r9, r7
 8000822:	46b0      	mov	r8, r6
 8000824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000826:	464d      	mov	r5, r9
 8000828:	432e      	orrs	r6, r5
 800082a:	d129      	bne.n	8000880 <__gedf2+0xb4>
 800082c:	2a00      	cmp	r2, #0
 800082e:	d1f0      	bne.n	8000812 <__gedf2+0x46>
 8000830:	433c      	orrs	r4, r7
 8000832:	d1ee      	bne.n	8000812 <__gedf2+0x46>
 8000834:	2800      	cmp	r0, #0
 8000836:	d1f2      	bne.n	800081e <__gedf2+0x52>
 8000838:	2001      	movs	r0, #1
 800083a:	4240      	negs	r0, r0
 800083c:	e7ef      	b.n	800081e <__gedf2+0x52>
 800083e:	003d      	movs	r5, r7
 8000840:	4325      	orrs	r5, r4
 8000842:	d11d      	bne.n	8000880 <__gedf2+0xb4>
 8000844:	4293      	cmp	r3, r2
 8000846:	d0ee      	beq.n	8000826 <__gedf2+0x5a>
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1e2      	bne.n	8000812 <__gedf2+0x46>
 800084c:	464c      	mov	r4, r9
 800084e:	4326      	orrs	r6, r4
 8000850:	d1df      	bne.n	8000812 <__gedf2+0x46>
 8000852:	e7e0      	b.n	8000816 <__gedf2+0x4a>
 8000854:	2000      	movs	r0, #0
 8000856:	2c00      	cmp	r4, #0
 8000858:	d0e1      	beq.n	800081e <__gedf2+0x52>
 800085a:	e7dc      	b.n	8000816 <__gedf2+0x4a>
 800085c:	429a      	cmp	r2, r3
 800085e:	dc0a      	bgt.n	8000876 <__gedf2+0xaa>
 8000860:	dbe8      	blt.n	8000834 <__gedf2+0x68>
 8000862:	454f      	cmp	r7, r9
 8000864:	d8d7      	bhi.n	8000816 <__gedf2+0x4a>
 8000866:	d00e      	beq.n	8000886 <__gedf2+0xba>
 8000868:	2000      	movs	r0, #0
 800086a:	454f      	cmp	r7, r9
 800086c:	d2d7      	bcs.n	800081e <__gedf2+0x52>
 800086e:	2900      	cmp	r1, #0
 8000870:	d0e2      	beq.n	8000838 <__gedf2+0x6c>
 8000872:	0008      	movs	r0, r1
 8000874:	e7d3      	b.n	800081e <__gedf2+0x52>
 8000876:	4243      	negs	r3, r0
 8000878:	4158      	adcs	r0, r3
 800087a:	0040      	lsls	r0, r0, #1
 800087c:	3801      	subs	r0, #1
 800087e:	e7ce      	b.n	800081e <__gedf2+0x52>
 8000880:	2002      	movs	r0, #2
 8000882:	4240      	negs	r0, r0
 8000884:	e7cb      	b.n	800081e <__gedf2+0x52>
 8000886:	45c4      	cmp	ip, r8
 8000888:	d8c5      	bhi.n	8000816 <__gedf2+0x4a>
 800088a:	2000      	movs	r0, #0
 800088c:	45c4      	cmp	ip, r8
 800088e:	d2c6      	bcs.n	800081e <__gedf2+0x52>
 8000890:	e7ed      	b.n	800086e <__gedf2+0xa2>
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	000007ff 	.word	0x000007ff

08000898 <__ledf2>:
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	4647      	mov	r7, r8
 800089c:	46ce      	mov	lr, r9
 800089e:	0004      	movs	r4, r0
 80008a0:	0018      	movs	r0, r3
 80008a2:	0016      	movs	r6, r2
 80008a4:	031b      	lsls	r3, r3, #12
 80008a6:	0b1b      	lsrs	r3, r3, #12
 80008a8:	4d2c      	ldr	r5, [pc, #176]	; (800095c <__ledf2+0xc4>)
 80008aa:	004a      	lsls	r2, r1, #1
 80008ac:	4699      	mov	r9, r3
 80008ae:	b580      	push	{r7, lr}
 80008b0:	0043      	lsls	r3, r0, #1
 80008b2:	030f      	lsls	r7, r1, #12
 80008b4:	46a4      	mov	ip, r4
 80008b6:	46b0      	mov	r8, r6
 80008b8:	0b3f      	lsrs	r7, r7, #12
 80008ba:	0d52      	lsrs	r2, r2, #21
 80008bc:	0fc9      	lsrs	r1, r1, #31
 80008be:	0d5b      	lsrs	r3, r3, #21
 80008c0:	0fc0      	lsrs	r0, r0, #31
 80008c2:	42aa      	cmp	r2, r5
 80008c4:	d00d      	beq.n	80008e2 <__ledf2+0x4a>
 80008c6:	42ab      	cmp	r3, r5
 80008c8:	d010      	beq.n	80008ec <__ledf2+0x54>
 80008ca:	2a00      	cmp	r2, #0
 80008cc:	d127      	bne.n	800091e <__ledf2+0x86>
 80008ce:	433c      	orrs	r4, r7
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d111      	bne.n	80008f8 <__ledf2+0x60>
 80008d4:	464d      	mov	r5, r9
 80008d6:	432e      	orrs	r6, r5
 80008d8:	d10e      	bne.n	80008f8 <__ledf2+0x60>
 80008da:	2000      	movs	r0, #0
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d015      	beq.n	800090c <__ledf2+0x74>
 80008e0:	e00e      	b.n	8000900 <__ledf2+0x68>
 80008e2:	003d      	movs	r5, r7
 80008e4:	4325      	orrs	r5, r4
 80008e6:	d110      	bne.n	800090a <__ledf2+0x72>
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d118      	bne.n	800091e <__ledf2+0x86>
 80008ec:	464d      	mov	r5, r9
 80008ee:	432e      	orrs	r6, r5
 80008f0:	d10b      	bne.n	800090a <__ledf2+0x72>
 80008f2:	2a00      	cmp	r2, #0
 80008f4:	d102      	bne.n	80008fc <__ledf2+0x64>
 80008f6:	433c      	orrs	r4, r7
 80008f8:	2c00      	cmp	r4, #0
 80008fa:	d00b      	beq.n	8000914 <__ledf2+0x7c>
 80008fc:	4281      	cmp	r1, r0
 80008fe:	d014      	beq.n	800092a <__ledf2+0x92>
 8000900:	2002      	movs	r0, #2
 8000902:	3901      	subs	r1, #1
 8000904:	4008      	ands	r0, r1
 8000906:	3801      	subs	r0, #1
 8000908:	e000      	b.n	800090c <__ledf2+0x74>
 800090a:	2002      	movs	r0, #2
 800090c:	bcc0      	pop	{r6, r7}
 800090e:	46b9      	mov	r9, r7
 8000910:	46b0      	mov	r8, r6
 8000912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000914:	2800      	cmp	r0, #0
 8000916:	d1f9      	bne.n	800090c <__ledf2+0x74>
 8000918:	2001      	movs	r0, #1
 800091a:	4240      	negs	r0, r0
 800091c:	e7f6      	b.n	800090c <__ledf2+0x74>
 800091e:	2b00      	cmp	r3, #0
 8000920:	d1ec      	bne.n	80008fc <__ledf2+0x64>
 8000922:	464c      	mov	r4, r9
 8000924:	4326      	orrs	r6, r4
 8000926:	d1e9      	bne.n	80008fc <__ledf2+0x64>
 8000928:	e7ea      	b.n	8000900 <__ledf2+0x68>
 800092a:	429a      	cmp	r2, r3
 800092c:	dd04      	ble.n	8000938 <__ledf2+0xa0>
 800092e:	4243      	negs	r3, r0
 8000930:	4158      	adcs	r0, r3
 8000932:	0040      	lsls	r0, r0, #1
 8000934:	3801      	subs	r0, #1
 8000936:	e7e9      	b.n	800090c <__ledf2+0x74>
 8000938:	429a      	cmp	r2, r3
 800093a:	dbeb      	blt.n	8000914 <__ledf2+0x7c>
 800093c:	454f      	cmp	r7, r9
 800093e:	d8df      	bhi.n	8000900 <__ledf2+0x68>
 8000940:	d006      	beq.n	8000950 <__ledf2+0xb8>
 8000942:	2000      	movs	r0, #0
 8000944:	454f      	cmp	r7, r9
 8000946:	d2e1      	bcs.n	800090c <__ledf2+0x74>
 8000948:	2900      	cmp	r1, #0
 800094a:	d0e5      	beq.n	8000918 <__ledf2+0x80>
 800094c:	0008      	movs	r0, r1
 800094e:	e7dd      	b.n	800090c <__ledf2+0x74>
 8000950:	45c4      	cmp	ip, r8
 8000952:	d8d5      	bhi.n	8000900 <__ledf2+0x68>
 8000954:	2000      	movs	r0, #0
 8000956:	45c4      	cmp	ip, r8
 8000958:	d2d8      	bcs.n	800090c <__ledf2+0x74>
 800095a:	e7f5      	b.n	8000948 <__ledf2+0xb0>
 800095c:	000007ff 	.word	0x000007ff

08000960 <__aeabi_dmul>:
 8000960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000962:	4645      	mov	r5, r8
 8000964:	46de      	mov	lr, fp
 8000966:	4657      	mov	r7, sl
 8000968:	464e      	mov	r6, r9
 800096a:	b5e0      	push	{r5, r6, r7, lr}
 800096c:	001f      	movs	r7, r3
 800096e:	030b      	lsls	r3, r1, #12
 8000970:	0b1b      	lsrs	r3, r3, #12
 8000972:	469b      	mov	fp, r3
 8000974:	004d      	lsls	r5, r1, #1
 8000976:	0fcb      	lsrs	r3, r1, #31
 8000978:	0004      	movs	r4, r0
 800097a:	4691      	mov	r9, r2
 800097c:	4698      	mov	r8, r3
 800097e:	b087      	sub	sp, #28
 8000980:	0d6d      	lsrs	r5, r5, #21
 8000982:	d100      	bne.n	8000986 <__aeabi_dmul+0x26>
 8000984:	e1cd      	b.n	8000d22 <__aeabi_dmul+0x3c2>
 8000986:	4bce      	ldr	r3, [pc, #824]	; (8000cc0 <__aeabi_dmul+0x360>)
 8000988:	429d      	cmp	r5, r3
 800098a:	d100      	bne.n	800098e <__aeabi_dmul+0x2e>
 800098c:	e1e9      	b.n	8000d62 <__aeabi_dmul+0x402>
 800098e:	465a      	mov	r2, fp
 8000990:	0f43      	lsrs	r3, r0, #29
 8000992:	00d2      	lsls	r2, r2, #3
 8000994:	4313      	orrs	r3, r2
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	0412      	lsls	r2, r2, #16
 800099a:	431a      	orrs	r2, r3
 800099c:	00c3      	lsls	r3, r0, #3
 800099e:	469a      	mov	sl, r3
 80009a0:	4bc8      	ldr	r3, [pc, #800]	; (8000cc4 <__aeabi_dmul+0x364>)
 80009a2:	4693      	mov	fp, r2
 80009a4:	469c      	mov	ip, r3
 80009a6:	2300      	movs	r3, #0
 80009a8:	2600      	movs	r6, #0
 80009aa:	4465      	add	r5, ip
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	033c      	lsls	r4, r7, #12
 80009b0:	007b      	lsls	r3, r7, #1
 80009b2:	4648      	mov	r0, r9
 80009b4:	0b24      	lsrs	r4, r4, #12
 80009b6:	0d5b      	lsrs	r3, r3, #21
 80009b8:	0fff      	lsrs	r7, r7, #31
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d100      	bne.n	80009c0 <__aeabi_dmul+0x60>
 80009be:	e189      	b.n	8000cd4 <__aeabi_dmul+0x374>
 80009c0:	4abf      	ldr	r2, [pc, #764]	; (8000cc0 <__aeabi_dmul+0x360>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d019      	beq.n	80009fa <__aeabi_dmul+0x9a>
 80009c6:	0f42      	lsrs	r2, r0, #29
 80009c8:	00e4      	lsls	r4, r4, #3
 80009ca:	4322      	orrs	r2, r4
 80009cc:	2480      	movs	r4, #128	; 0x80
 80009ce:	0424      	lsls	r4, r4, #16
 80009d0:	4314      	orrs	r4, r2
 80009d2:	4abc      	ldr	r2, [pc, #752]	; (8000cc4 <__aeabi_dmul+0x364>)
 80009d4:	2100      	movs	r1, #0
 80009d6:	4694      	mov	ip, r2
 80009d8:	4642      	mov	r2, r8
 80009da:	4463      	add	r3, ip
 80009dc:	195b      	adds	r3, r3, r5
 80009de:	9301      	str	r3, [sp, #4]
 80009e0:	9b01      	ldr	r3, [sp, #4]
 80009e2:	407a      	eors	r2, r7
 80009e4:	3301      	adds	r3, #1
 80009e6:	00c0      	lsls	r0, r0, #3
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	9302      	str	r3, [sp, #8]
 80009ec:	2e0a      	cmp	r6, #10
 80009ee:	dd1c      	ble.n	8000a2a <__aeabi_dmul+0xca>
 80009f0:	003a      	movs	r2, r7
 80009f2:	2e0b      	cmp	r6, #11
 80009f4:	d05e      	beq.n	8000ab4 <__aeabi_dmul+0x154>
 80009f6:	4647      	mov	r7, r8
 80009f8:	e056      	b.n	8000aa8 <__aeabi_dmul+0x148>
 80009fa:	4649      	mov	r1, r9
 80009fc:	4bb0      	ldr	r3, [pc, #704]	; (8000cc0 <__aeabi_dmul+0x360>)
 80009fe:	4321      	orrs	r1, r4
 8000a00:	18eb      	adds	r3, r5, r3
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	2900      	cmp	r1, #0
 8000a06:	d12a      	bne.n	8000a5e <__aeabi_dmul+0xfe>
 8000a08:	2080      	movs	r0, #128	; 0x80
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	0100      	lsls	r0, r0, #4
 8000a0e:	002b      	movs	r3, r5
 8000a10:	4684      	mov	ip, r0
 8000a12:	4316      	orrs	r6, r2
 8000a14:	4642      	mov	r2, r8
 8000a16:	4463      	add	r3, ip
 8000a18:	407a      	eors	r2, r7
 8000a1a:	b2d2      	uxtb	r2, r2
 8000a1c:	9302      	str	r3, [sp, #8]
 8000a1e:	2e0a      	cmp	r6, #10
 8000a20:	dd00      	ble.n	8000a24 <__aeabi_dmul+0xc4>
 8000a22:	e231      	b.n	8000e88 <__aeabi_dmul+0x528>
 8000a24:	2000      	movs	r0, #0
 8000a26:	2400      	movs	r4, #0
 8000a28:	2102      	movs	r1, #2
 8000a2a:	2e02      	cmp	r6, #2
 8000a2c:	dc26      	bgt.n	8000a7c <__aeabi_dmul+0x11c>
 8000a2e:	3e01      	subs	r6, #1
 8000a30:	2e01      	cmp	r6, #1
 8000a32:	d852      	bhi.n	8000ada <__aeabi_dmul+0x17a>
 8000a34:	2902      	cmp	r1, #2
 8000a36:	d04c      	beq.n	8000ad2 <__aeabi_dmul+0x172>
 8000a38:	2901      	cmp	r1, #1
 8000a3a:	d000      	beq.n	8000a3e <__aeabi_dmul+0xde>
 8000a3c:	e118      	b.n	8000c70 <__aeabi_dmul+0x310>
 8000a3e:	2300      	movs	r3, #0
 8000a40:	2400      	movs	r4, #0
 8000a42:	2500      	movs	r5, #0
 8000a44:	051b      	lsls	r3, r3, #20
 8000a46:	4323      	orrs	r3, r4
 8000a48:	07d2      	lsls	r2, r2, #31
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	0028      	movs	r0, r5
 8000a4e:	0019      	movs	r1, r3
 8000a50:	b007      	add	sp, #28
 8000a52:	bcf0      	pop	{r4, r5, r6, r7}
 8000a54:	46bb      	mov	fp, r7
 8000a56:	46b2      	mov	sl, r6
 8000a58:	46a9      	mov	r9, r5
 8000a5a:	46a0      	mov	r8, r4
 8000a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	2203      	movs	r2, #3
 8000a62:	0109      	lsls	r1, r1, #4
 8000a64:	002b      	movs	r3, r5
 8000a66:	468c      	mov	ip, r1
 8000a68:	4316      	orrs	r6, r2
 8000a6a:	4642      	mov	r2, r8
 8000a6c:	4463      	add	r3, ip
 8000a6e:	407a      	eors	r2, r7
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	9302      	str	r3, [sp, #8]
 8000a74:	2e0a      	cmp	r6, #10
 8000a76:	dd00      	ble.n	8000a7a <__aeabi_dmul+0x11a>
 8000a78:	e228      	b.n	8000ecc <__aeabi_dmul+0x56c>
 8000a7a:	2103      	movs	r1, #3
 8000a7c:	2501      	movs	r5, #1
 8000a7e:	40b5      	lsls	r5, r6
 8000a80:	46ac      	mov	ip, r5
 8000a82:	26a6      	movs	r6, #166	; 0xa6
 8000a84:	4663      	mov	r3, ip
 8000a86:	00f6      	lsls	r6, r6, #3
 8000a88:	4035      	ands	r5, r6
 8000a8a:	4233      	tst	r3, r6
 8000a8c:	d10b      	bne.n	8000aa6 <__aeabi_dmul+0x146>
 8000a8e:	2690      	movs	r6, #144	; 0x90
 8000a90:	00b6      	lsls	r6, r6, #2
 8000a92:	4233      	tst	r3, r6
 8000a94:	d118      	bne.n	8000ac8 <__aeabi_dmul+0x168>
 8000a96:	3eb9      	subs	r6, #185	; 0xb9
 8000a98:	3eff      	subs	r6, #255	; 0xff
 8000a9a:	421e      	tst	r6, r3
 8000a9c:	d01d      	beq.n	8000ada <__aeabi_dmul+0x17a>
 8000a9e:	46a3      	mov	fp, r4
 8000aa0:	4682      	mov	sl, r0
 8000aa2:	9100      	str	r1, [sp, #0]
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_dmul+0x148>
 8000aa6:	0017      	movs	r7, r2
 8000aa8:	9900      	ldr	r1, [sp, #0]
 8000aaa:	003a      	movs	r2, r7
 8000aac:	2902      	cmp	r1, #2
 8000aae:	d010      	beq.n	8000ad2 <__aeabi_dmul+0x172>
 8000ab0:	465c      	mov	r4, fp
 8000ab2:	4650      	mov	r0, sl
 8000ab4:	2903      	cmp	r1, #3
 8000ab6:	d1bf      	bne.n	8000a38 <__aeabi_dmul+0xd8>
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	031b      	lsls	r3, r3, #12
 8000abc:	431c      	orrs	r4, r3
 8000abe:	0324      	lsls	r4, r4, #12
 8000ac0:	0005      	movs	r5, r0
 8000ac2:	4b7f      	ldr	r3, [pc, #508]	; (8000cc0 <__aeabi_dmul+0x360>)
 8000ac4:	0b24      	lsrs	r4, r4, #12
 8000ac6:	e7bd      	b.n	8000a44 <__aeabi_dmul+0xe4>
 8000ac8:	2480      	movs	r4, #128	; 0x80
 8000aca:	2200      	movs	r2, #0
 8000acc:	4b7c      	ldr	r3, [pc, #496]	; (8000cc0 <__aeabi_dmul+0x360>)
 8000ace:	0324      	lsls	r4, r4, #12
 8000ad0:	e7b8      	b.n	8000a44 <__aeabi_dmul+0xe4>
 8000ad2:	2400      	movs	r4, #0
 8000ad4:	2500      	movs	r5, #0
 8000ad6:	4b7a      	ldr	r3, [pc, #488]	; (8000cc0 <__aeabi_dmul+0x360>)
 8000ad8:	e7b4      	b.n	8000a44 <__aeabi_dmul+0xe4>
 8000ada:	4653      	mov	r3, sl
 8000adc:	041e      	lsls	r6, r3, #16
 8000ade:	0c36      	lsrs	r6, r6, #16
 8000ae0:	0c1f      	lsrs	r7, r3, #16
 8000ae2:	0033      	movs	r3, r6
 8000ae4:	0c01      	lsrs	r1, r0, #16
 8000ae6:	0400      	lsls	r0, r0, #16
 8000ae8:	0c00      	lsrs	r0, r0, #16
 8000aea:	4343      	muls	r3, r0
 8000aec:	4698      	mov	r8, r3
 8000aee:	0003      	movs	r3, r0
 8000af0:	437b      	muls	r3, r7
 8000af2:	4699      	mov	r9, r3
 8000af4:	0033      	movs	r3, r6
 8000af6:	434b      	muls	r3, r1
 8000af8:	469c      	mov	ip, r3
 8000afa:	4643      	mov	r3, r8
 8000afc:	000d      	movs	r5, r1
 8000afe:	0c1b      	lsrs	r3, r3, #16
 8000b00:	469a      	mov	sl, r3
 8000b02:	437d      	muls	r5, r7
 8000b04:	44cc      	add	ip, r9
 8000b06:	44d4      	add	ip, sl
 8000b08:	9500      	str	r5, [sp, #0]
 8000b0a:	45e1      	cmp	r9, ip
 8000b0c:	d904      	bls.n	8000b18 <__aeabi_dmul+0x1b8>
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	025b      	lsls	r3, r3, #9
 8000b12:	4699      	mov	r9, r3
 8000b14:	444d      	add	r5, r9
 8000b16:	9500      	str	r5, [sp, #0]
 8000b18:	4663      	mov	r3, ip
 8000b1a:	0c1b      	lsrs	r3, r3, #16
 8000b1c:	001d      	movs	r5, r3
 8000b1e:	4663      	mov	r3, ip
 8000b20:	041b      	lsls	r3, r3, #16
 8000b22:	469c      	mov	ip, r3
 8000b24:	4643      	mov	r3, r8
 8000b26:	041b      	lsls	r3, r3, #16
 8000b28:	0c1b      	lsrs	r3, r3, #16
 8000b2a:	4698      	mov	r8, r3
 8000b2c:	4663      	mov	r3, ip
 8000b2e:	4443      	add	r3, r8
 8000b30:	9303      	str	r3, [sp, #12]
 8000b32:	0c23      	lsrs	r3, r4, #16
 8000b34:	4698      	mov	r8, r3
 8000b36:	0033      	movs	r3, r6
 8000b38:	0424      	lsls	r4, r4, #16
 8000b3a:	0c24      	lsrs	r4, r4, #16
 8000b3c:	4363      	muls	r3, r4
 8000b3e:	469c      	mov	ip, r3
 8000b40:	0023      	movs	r3, r4
 8000b42:	437b      	muls	r3, r7
 8000b44:	4699      	mov	r9, r3
 8000b46:	4643      	mov	r3, r8
 8000b48:	435e      	muls	r6, r3
 8000b4a:	435f      	muls	r7, r3
 8000b4c:	444e      	add	r6, r9
 8000b4e:	4663      	mov	r3, ip
 8000b50:	46b2      	mov	sl, r6
 8000b52:	0c1e      	lsrs	r6, r3, #16
 8000b54:	4456      	add	r6, sl
 8000b56:	45b1      	cmp	r9, r6
 8000b58:	d903      	bls.n	8000b62 <__aeabi_dmul+0x202>
 8000b5a:	2380      	movs	r3, #128	; 0x80
 8000b5c:	025b      	lsls	r3, r3, #9
 8000b5e:	4699      	mov	r9, r3
 8000b60:	444f      	add	r7, r9
 8000b62:	0c33      	lsrs	r3, r6, #16
 8000b64:	4699      	mov	r9, r3
 8000b66:	003b      	movs	r3, r7
 8000b68:	444b      	add	r3, r9
 8000b6a:	9305      	str	r3, [sp, #20]
 8000b6c:	4663      	mov	r3, ip
 8000b6e:	46ac      	mov	ip, r5
 8000b70:	041f      	lsls	r7, r3, #16
 8000b72:	0c3f      	lsrs	r7, r7, #16
 8000b74:	0436      	lsls	r6, r6, #16
 8000b76:	19f6      	adds	r6, r6, r7
 8000b78:	44b4      	add	ip, r6
 8000b7a:	4663      	mov	r3, ip
 8000b7c:	9304      	str	r3, [sp, #16]
 8000b7e:	465b      	mov	r3, fp
 8000b80:	0c1b      	lsrs	r3, r3, #16
 8000b82:	469c      	mov	ip, r3
 8000b84:	465b      	mov	r3, fp
 8000b86:	041f      	lsls	r7, r3, #16
 8000b88:	0c3f      	lsrs	r7, r7, #16
 8000b8a:	003b      	movs	r3, r7
 8000b8c:	4343      	muls	r3, r0
 8000b8e:	4699      	mov	r9, r3
 8000b90:	4663      	mov	r3, ip
 8000b92:	4343      	muls	r3, r0
 8000b94:	469a      	mov	sl, r3
 8000b96:	464b      	mov	r3, r9
 8000b98:	4660      	mov	r0, ip
 8000b9a:	0c1b      	lsrs	r3, r3, #16
 8000b9c:	469b      	mov	fp, r3
 8000b9e:	4348      	muls	r0, r1
 8000ba0:	4379      	muls	r1, r7
 8000ba2:	4451      	add	r1, sl
 8000ba4:	4459      	add	r1, fp
 8000ba6:	458a      	cmp	sl, r1
 8000ba8:	d903      	bls.n	8000bb2 <__aeabi_dmul+0x252>
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	025b      	lsls	r3, r3, #9
 8000bae:	469a      	mov	sl, r3
 8000bb0:	4450      	add	r0, sl
 8000bb2:	0c0b      	lsrs	r3, r1, #16
 8000bb4:	469a      	mov	sl, r3
 8000bb6:	464b      	mov	r3, r9
 8000bb8:	041b      	lsls	r3, r3, #16
 8000bba:	0c1b      	lsrs	r3, r3, #16
 8000bbc:	4699      	mov	r9, r3
 8000bbe:	003b      	movs	r3, r7
 8000bc0:	4363      	muls	r3, r4
 8000bc2:	0409      	lsls	r1, r1, #16
 8000bc4:	4645      	mov	r5, r8
 8000bc6:	4449      	add	r1, r9
 8000bc8:	4699      	mov	r9, r3
 8000bca:	4663      	mov	r3, ip
 8000bcc:	435c      	muls	r4, r3
 8000bce:	436b      	muls	r3, r5
 8000bd0:	469c      	mov	ip, r3
 8000bd2:	464b      	mov	r3, r9
 8000bd4:	0c1b      	lsrs	r3, r3, #16
 8000bd6:	4698      	mov	r8, r3
 8000bd8:	436f      	muls	r7, r5
 8000bda:	193f      	adds	r7, r7, r4
 8000bdc:	4447      	add	r7, r8
 8000bde:	4450      	add	r0, sl
 8000be0:	42bc      	cmp	r4, r7
 8000be2:	d903      	bls.n	8000bec <__aeabi_dmul+0x28c>
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	025b      	lsls	r3, r3, #9
 8000be8:	4698      	mov	r8, r3
 8000bea:	44c4      	add	ip, r8
 8000bec:	9b04      	ldr	r3, [sp, #16]
 8000bee:	9d00      	ldr	r5, [sp, #0]
 8000bf0:	4698      	mov	r8, r3
 8000bf2:	4445      	add	r5, r8
 8000bf4:	42b5      	cmp	r5, r6
 8000bf6:	41b6      	sbcs	r6, r6
 8000bf8:	4273      	negs	r3, r6
 8000bfa:	4698      	mov	r8, r3
 8000bfc:	464b      	mov	r3, r9
 8000bfe:	041e      	lsls	r6, r3, #16
 8000c00:	9b05      	ldr	r3, [sp, #20]
 8000c02:	043c      	lsls	r4, r7, #16
 8000c04:	4699      	mov	r9, r3
 8000c06:	0c36      	lsrs	r6, r6, #16
 8000c08:	19a4      	adds	r4, r4, r6
 8000c0a:	444c      	add	r4, r9
 8000c0c:	46a1      	mov	r9, r4
 8000c0e:	4683      	mov	fp, r0
 8000c10:	186e      	adds	r6, r5, r1
 8000c12:	44c1      	add	r9, r8
 8000c14:	428e      	cmp	r6, r1
 8000c16:	4189      	sbcs	r1, r1
 8000c18:	44cb      	add	fp, r9
 8000c1a:	465d      	mov	r5, fp
 8000c1c:	4249      	negs	r1, r1
 8000c1e:	186d      	adds	r5, r5, r1
 8000c20:	429c      	cmp	r4, r3
 8000c22:	41a4      	sbcs	r4, r4
 8000c24:	45c1      	cmp	r9, r8
 8000c26:	419b      	sbcs	r3, r3
 8000c28:	4583      	cmp	fp, r0
 8000c2a:	4180      	sbcs	r0, r0
 8000c2c:	428d      	cmp	r5, r1
 8000c2e:	4189      	sbcs	r1, r1
 8000c30:	425b      	negs	r3, r3
 8000c32:	4264      	negs	r4, r4
 8000c34:	431c      	orrs	r4, r3
 8000c36:	4240      	negs	r0, r0
 8000c38:	9b03      	ldr	r3, [sp, #12]
 8000c3a:	4249      	negs	r1, r1
 8000c3c:	4301      	orrs	r1, r0
 8000c3e:	0270      	lsls	r0, r6, #9
 8000c40:	0c3f      	lsrs	r7, r7, #16
 8000c42:	4318      	orrs	r0, r3
 8000c44:	19e4      	adds	r4, r4, r7
 8000c46:	1e47      	subs	r7, r0, #1
 8000c48:	41b8      	sbcs	r0, r7
 8000c4a:	1864      	adds	r4, r4, r1
 8000c4c:	4464      	add	r4, ip
 8000c4e:	0df6      	lsrs	r6, r6, #23
 8000c50:	0261      	lsls	r1, r4, #9
 8000c52:	4330      	orrs	r0, r6
 8000c54:	0dec      	lsrs	r4, r5, #23
 8000c56:	026e      	lsls	r6, r5, #9
 8000c58:	430c      	orrs	r4, r1
 8000c5a:	4330      	orrs	r0, r6
 8000c5c:	01c9      	lsls	r1, r1, #7
 8000c5e:	d400      	bmi.n	8000c62 <__aeabi_dmul+0x302>
 8000c60:	e0f1      	b.n	8000e46 <__aeabi_dmul+0x4e6>
 8000c62:	2101      	movs	r1, #1
 8000c64:	0843      	lsrs	r3, r0, #1
 8000c66:	4001      	ands	r1, r0
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	07e0      	lsls	r0, r4, #31
 8000c6c:	4318      	orrs	r0, r3
 8000c6e:	0864      	lsrs	r4, r4, #1
 8000c70:	4915      	ldr	r1, [pc, #84]	; (8000cc8 <__aeabi_dmul+0x368>)
 8000c72:	9b02      	ldr	r3, [sp, #8]
 8000c74:	468c      	mov	ip, r1
 8000c76:	4463      	add	r3, ip
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	dc00      	bgt.n	8000c7e <__aeabi_dmul+0x31e>
 8000c7c:	e097      	b.n	8000dae <__aeabi_dmul+0x44e>
 8000c7e:	0741      	lsls	r1, r0, #29
 8000c80:	d009      	beq.n	8000c96 <__aeabi_dmul+0x336>
 8000c82:	210f      	movs	r1, #15
 8000c84:	4001      	ands	r1, r0
 8000c86:	2904      	cmp	r1, #4
 8000c88:	d005      	beq.n	8000c96 <__aeabi_dmul+0x336>
 8000c8a:	1d01      	adds	r1, r0, #4
 8000c8c:	4281      	cmp	r1, r0
 8000c8e:	4180      	sbcs	r0, r0
 8000c90:	4240      	negs	r0, r0
 8000c92:	1824      	adds	r4, r4, r0
 8000c94:	0008      	movs	r0, r1
 8000c96:	01e1      	lsls	r1, r4, #7
 8000c98:	d506      	bpl.n	8000ca8 <__aeabi_dmul+0x348>
 8000c9a:	2180      	movs	r1, #128	; 0x80
 8000c9c:	00c9      	lsls	r1, r1, #3
 8000c9e:	468c      	mov	ip, r1
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <__aeabi_dmul+0x36c>)
 8000ca2:	401c      	ands	r4, r3
 8000ca4:	9b02      	ldr	r3, [sp, #8]
 8000ca6:	4463      	add	r3, ip
 8000ca8:	4909      	ldr	r1, [pc, #36]	; (8000cd0 <__aeabi_dmul+0x370>)
 8000caa:	428b      	cmp	r3, r1
 8000cac:	dd00      	ble.n	8000cb0 <__aeabi_dmul+0x350>
 8000cae:	e710      	b.n	8000ad2 <__aeabi_dmul+0x172>
 8000cb0:	0761      	lsls	r1, r4, #29
 8000cb2:	08c5      	lsrs	r5, r0, #3
 8000cb4:	0264      	lsls	r4, r4, #9
 8000cb6:	055b      	lsls	r3, r3, #21
 8000cb8:	430d      	orrs	r5, r1
 8000cba:	0b24      	lsrs	r4, r4, #12
 8000cbc:	0d5b      	lsrs	r3, r3, #21
 8000cbe:	e6c1      	b.n	8000a44 <__aeabi_dmul+0xe4>
 8000cc0:	000007ff 	.word	0x000007ff
 8000cc4:	fffffc01 	.word	0xfffffc01
 8000cc8:	000003ff 	.word	0x000003ff
 8000ccc:	feffffff 	.word	0xfeffffff
 8000cd0:	000007fe 	.word	0x000007fe
 8000cd4:	464b      	mov	r3, r9
 8000cd6:	4323      	orrs	r3, r4
 8000cd8:	d059      	beq.n	8000d8e <__aeabi_dmul+0x42e>
 8000cda:	2c00      	cmp	r4, #0
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_dmul+0x380>
 8000cde:	e0a3      	b.n	8000e28 <__aeabi_dmul+0x4c8>
 8000ce0:	0020      	movs	r0, r4
 8000ce2:	f000 f9cd 	bl	8001080 <__clzsi2>
 8000ce6:	0001      	movs	r1, r0
 8000ce8:	0003      	movs	r3, r0
 8000cea:	390b      	subs	r1, #11
 8000cec:	221d      	movs	r2, #29
 8000cee:	1a52      	subs	r2, r2, r1
 8000cf0:	4649      	mov	r1, r9
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	40d1      	lsrs	r1, r2
 8000cf6:	464a      	mov	r2, r9
 8000cf8:	3808      	subs	r0, #8
 8000cfa:	4082      	lsls	r2, r0
 8000cfc:	4084      	lsls	r4, r0
 8000cfe:	0010      	movs	r0, r2
 8000d00:	430c      	orrs	r4, r1
 8000d02:	4a74      	ldr	r2, [pc, #464]	; (8000ed4 <__aeabi_dmul+0x574>)
 8000d04:	1aeb      	subs	r3, r5, r3
 8000d06:	4694      	mov	ip, r2
 8000d08:	4642      	mov	r2, r8
 8000d0a:	4463      	add	r3, ip
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	9b01      	ldr	r3, [sp, #4]
 8000d10:	407a      	eors	r2, r7
 8000d12:	3301      	adds	r3, #1
 8000d14:	2100      	movs	r1, #0
 8000d16:	b2d2      	uxtb	r2, r2
 8000d18:	9302      	str	r3, [sp, #8]
 8000d1a:	2e0a      	cmp	r6, #10
 8000d1c:	dd00      	ble.n	8000d20 <__aeabi_dmul+0x3c0>
 8000d1e:	e667      	b.n	80009f0 <__aeabi_dmul+0x90>
 8000d20:	e683      	b.n	8000a2a <__aeabi_dmul+0xca>
 8000d22:	465b      	mov	r3, fp
 8000d24:	4303      	orrs	r3, r0
 8000d26:	469a      	mov	sl, r3
 8000d28:	d02a      	beq.n	8000d80 <__aeabi_dmul+0x420>
 8000d2a:	465b      	mov	r3, fp
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d06d      	beq.n	8000e0c <__aeabi_dmul+0x4ac>
 8000d30:	4658      	mov	r0, fp
 8000d32:	f000 f9a5 	bl	8001080 <__clzsi2>
 8000d36:	0001      	movs	r1, r0
 8000d38:	0003      	movs	r3, r0
 8000d3a:	390b      	subs	r1, #11
 8000d3c:	221d      	movs	r2, #29
 8000d3e:	1a52      	subs	r2, r2, r1
 8000d40:	0021      	movs	r1, r4
 8000d42:	0018      	movs	r0, r3
 8000d44:	465d      	mov	r5, fp
 8000d46:	40d1      	lsrs	r1, r2
 8000d48:	3808      	subs	r0, #8
 8000d4a:	4085      	lsls	r5, r0
 8000d4c:	000a      	movs	r2, r1
 8000d4e:	4084      	lsls	r4, r0
 8000d50:	432a      	orrs	r2, r5
 8000d52:	4693      	mov	fp, r2
 8000d54:	46a2      	mov	sl, r4
 8000d56:	4d5f      	ldr	r5, [pc, #380]	; (8000ed4 <__aeabi_dmul+0x574>)
 8000d58:	2600      	movs	r6, #0
 8000d5a:	1aed      	subs	r5, r5, r3
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	e625      	b.n	80009ae <__aeabi_dmul+0x4e>
 8000d62:	465b      	mov	r3, fp
 8000d64:	4303      	orrs	r3, r0
 8000d66:	469a      	mov	sl, r3
 8000d68:	d105      	bne.n	8000d76 <__aeabi_dmul+0x416>
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	469b      	mov	fp, r3
 8000d6e:	3302      	adds	r3, #2
 8000d70:	2608      	movs	r6, #8
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	e61b      	b.n	80009ae <__aeabi_dmul+0x4e>
 8000d76:	2303      	movs	r3, #3
 8000d78:	4682      	mov	sl, r0
 8000d7a:	260c      	movs	r6, #12
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	e616      	b.n	80009ae <__aeabi_dmul+0x4e>
 8000d80:	2300      	movs	r3, #0
 8000d82:	469b      	mov	fp, r3
 8000d84:	3301      	adds	r3, #1
 8000d86:	2604      	movs	r6, #4
 8000d88:	2500      	movs	r5, #0
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	e60f      	b.n	80009ae <__aeabi_dmul+0x4e>
 8000d8e:	4642      	mov	r2, r8
 8000d90:	3301      	adds	r3, #1
 8000d92:	9501      	str	r5, [sp, #4]
 8000d94:	431e      	orrs	r6, r3
 8000d96:	9b01      	ldr	r3, [sp, #4]
 8000d98:	407a      	eors	r2, r7
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	2400      	movs	r4, #0
 8000d9e:	2000      	movs	r0, #0
 8000da0:	2101      	movs	r1, #1
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	9302      	str	r3, [sp, #8]
 8000da6:	2e0a      	cmp	r6, #10
 8000da8:	dd00      	ble.n	8000dac <__aeabi_dmul+0x44c>
 8000daa:	e621      	b.n	80009f0 <__aeabi_dmul+0x90>
 8000dac:	e63d      	b.n	8000a2a <__aeabi_dmul+0xca>
 8000dae:	2101      	movs	r1, #1
 8000db0:	1ac9      	subs	r1, r1, r3
 8000db2:	2938      	cmp	r1, #56	; 0x38
 8000db4:	dd00      	ble.n	8000db8 <__aeabi_dmul+0x458>
 8000db6:	e642      	b.n	8000a3e <__aeabi_dmul+0xde>
 8000db8:	291f      	cmp	r1, #31
 8000dba:	dd47      	ble.n	8000e4c <__aeabi_dmul+0x4ec>
 8000dbc:	261f      	movs	r6, #31
 8000dbe:	0025      	movs	r5, r4
 8000dc0:	4276      	negs	r6, r6
 8000dc2:	1af3      	subs	r3, r6, r3
 8000dc4:	40dd      	lsrs	r5, r3
 8000dc6:	002b      	movs	r3, r5
 8000dc8:	2920      	cmp	r1, #32
 8000dca:	d005      	beq.n	8000dd8 <__aeabi_dmul+0x478>
 8000dcc:	4942      	ldr	r1, [pc, #264]	; (8000ed8 <__aeabi_dmul+0x578>)
 8000dce:	9d02      	ldr	r5, [sp, #8]
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	4465      	add	r5, ip
 8000dd4:	40ac      	lsls	r4, r5
 8000dd6:	4320      	orrs	r0, r4
 8000dd8:	1e41      	subs	r1, r0, #1
 8000dda:	4188      	sbcs	r0, r1
 8000ddc:	4318      	orrs	r0, r3
 8000dde:	2307      	movs	r3, #7
 8000de0:	001d      	movs	r5, r3
 8000de2:	2400      	movs	r4, #0
 8000de4:	4005      	ands	r5, r0
 8000de6:	4203      	tst	r3, r0
 8000de8:	d04a      	beq.n	8000e80 <__aeabi_dmul+0x520>
 8000dea:	230f      	movs	r3, #15
 8000dec:	2400      	movs	r4, #0
 8000dee:	4003      	ands	r3, r0
 8000df0:	2b04      	cmp	r3, #4
 8000df2:	d042      	beq.n	8000e7a <__aeabi_dmul+0x51a>
 8000df4:	1d03      	adds	r3, r0, #4
 8000df6:	4283      	cmp	r3, r0
 8000df8:	4180      	sbcs	r0, r0
 8000dfa:	4240      	negs	r0, r0
 8000dfc:	1824      	adds	r4, r4, r0
 8000dfe:	0018      	movs	r0, r3
 8000e00:	0223      	lsls	r3, r4, #8
 8000e02:	d53a      	bpl.n	8000e7a <__aeabi_dmul+0x51a>
 8000e04:	2301      	movs	r3, #1
 8000e06:	2400      	movs	r4, #0
 8000e08:	2500      	movs	r5, #0
 8000e0a:	e61b      	b.n	8000a44 <__aeabi_dmul+0xe4>
 8000e0c:	f000 f938 	bl	8001080 <__clzsi2>
 8000e10:	0001      	movs	r1, r0
 8000e12:	0003      	movs	r3, r0
 8000e14:	3115      	adds	r1, #21
 8000e16:	3320      	adds	r3, #32
 8000e18:	291c      	cmp	r1, #28
 8000e1a:	dd8f      	ble.n	8000d3c <__aeabi_dmul+0x3dc>
 8000e1c:	3808      	subs	r0, #8
 8000e1e:	2200      	movs	r2, #0
 8000e20:	4084      	lsls	r4, r0
 8000e22:	4692      	mov	sl, r2
 8000e24:	46a3      	mov	fp, r4
 8000e26:	e796      	b.n	8000d56 <__aeabi_dmul+0x3f6>
 8000e28:	f000 f92a 	bl	8001080 <__clzsi2>
 8000e2c:	0001      	movs	r1, r0
 8000e2e:	0003      	movs	r3, r0
 8000e30:	3115      	adds	r1, #21
 8000e32:	3320      	adds	r3, #32
 8000e34:	291c      	cmp	r1, #28
 8000e36:	dc00      	bgt.n	8000e3a <__aeabi_dmul+0x4da>
 8000e38:	e758      	b.n	8000cec <__aeabi_dmul+0x38c>
 8000e3a:	0002      	movs	r2, r0
 8000e3c:	464c      	mov	r4, r9
 8000e3e:	3a08      	subs	r2, #8
 8000e40:	2000      	movs	r0, #0
 8000e42:	4094      	lsls	r4, r2
 8000e44:	e75d      	b.n	8000d02 <__aeabi_dmul+0x3a2>
 8000e46:	9b01      	ldr	r3, [sp, #4]
 8000e48:	9302      	str	r3, [sp, #8]
 8000e4a:	e711      	b.n	8000c70 <__aeabi_dmul+0x310>
 8000e4c:	4b23      	ldr	r3, [pc, #140]	; (8000edc <__aeabi_dmul+0x57c>)
 8000e4e:	0026      	movs	r6, r4
 8000e50:	469c      	mov	ip, r3
 8000e52:	0003      	movs	r3, r0
 8000e54:	9d02      	ldr	r5, [sp, #8]
 8000e56:	40cb      	lsrs	r3, r1
 8000e58:	4465      	add	r5, ip
 8000e5a:	40ae      	lsls	r6, r5
 8000e5c:	431e      	orrs	r6, r3
 8000e5e:	0003      	movs	r3, r0
 8000e60:	40ab      	lsls	r3, r5
 8000e62:	1e58      	subs	r0, r3, #1
 8000e64:	4183      	sbcs	r3, r0
 8000e66:	0030      	movs	r0, r6
 8000e68:	4318      	orrs	r0, r3
 8000e6a:	40cc      	lsrs	r4, r1
 8000e6c:	0743      	lsls	r3, r0, #29
 8000e6e:	d0c7      	beq.n	8000e00 <__aeabi_dmul+0x4a0>
 8000e70:	230f      	movs	r3, #15
 8000e72:	4003      	ands	r3, r0
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	d1bd      	bne.n	8000df4 <__aeabi_dmul+0x494>
 8000e78:	e7c2      	b.n	8000e00 <__aeabi_dmul+0x4a0>
 8000e7a:	0765      	lsls	r5, r4, #29
 8000e7c:	0264      	lsls	r4, r4, #9
 8000e7e:	0b24      	lsrs	r4, r4, #12
 8000e80:	08c0      	lsrs	r0, r0, #3
 8000e82:	2300      	movs	r3, #0
 8000e84:	4305      	orrs	r5, r0
 8000e86:	e5dd      	b.n	8000a44 <__aeabi_dmul+0xe4>
 8000e88:	2500      	movs	r5, #0
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	2e0f      	cmp	r6, #15
 8000e8e:	d10c      	bne.n	8000eaa <__aeabi_dmul+0x54a>
 8000e90:	2480      	movs	r4, #128	; 0x80
 8000e92:	465b      	mov	r3, fp
 8000e94:	0324      	lsls	r4, r4, #12
 8000e96:	4223      	tst	r3, r4
 8000e98:	d00e      	beq.n	8000eb8 <__aeabi_dmul+0x558>
 8000e9a:	4221      	tst	r1, r4
 8000e9c:	d10c      	bne.n	8000eb8 <__aeabi_dmul+0x558>
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	0324      	lsls	r4, r4, #12
 8000ea2:	003a      	movs	r2, r7
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <__aeabi_dmul+0x580>)
 8000ea6:	0b24      	lsrs	r4, r4, #12
 8000ea8:	e5cc      	b.n	8000a44 <__aeabi_dmul+0xe4>
 8000eaa:	2e0b      	cmp	r6, #11
 8000eac:	d000      	beq.n	8000eb0 <__aeabi_dmul+0x550>
 8000eae:	e5a2      	b.n	80009f6 <__aeabi_dmul+0x96>
 8000eb0:	468b      	mov	fp, r1
 8000eb2:	46aa      	mov	sl, r5
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	e5f7      	b.n	8000aa8 <__aeabi_dmul+0x148>
 8000eb8:	2480      	movs	r4, #128	; 0x80
 8000eba:	465b      	mov	r3, fp
 8000ebc:	0324      	lsls	r4, r4, #12
 8000ebe:	431c      	orrs	r4, r3
 8000ec0:	0324      	lsls	r4, r4, #12
 8000ec2:	4642      	mov	r2, r8
 8000ec4:	4655      	mov	r5, sl
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <__aeabi_dmul+0x580>)
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	e5bb      	b.n	8000a44 <__aeabi_dmul+0xe4>
 8000ecc:	464d      	mov	r5, r9
 8000ece:	0021      	movs	r1, r4
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e7db      	b.n	8000e8c <__aeabi_dmul+0x52c>
 8000ed4:	fffffc0d 	.word	0xfffffc0d
 8000ed8:	0000043e 	.word	0x0000043e
 8000edc:	0000041e 	.word	0x0000041e
 8000ee0:	000007ff 	.word	0x000007ff

08000ee4 <__aeabi_f2d>:
 8000ee4:	b570      	push	{r4, r5, r6, lr}
 8000ee6:	0242      	lsls	r2, r0, #9
 8000ee8:	0043      	lsls	r3, r0, #1
 8000eea:	0fc4      	lsrs	r4, r0, #31
 8000eec:	20fe      	movs	r0, #254	; 0xfe
 8000eee:	0e1b      	lsrs	r3, r3, #24
 8000ef0:	1c59      	adds	r1, r3, #1
 8000ef2:	0a55      	lsrs	r5, r2, #9
 8000ef4:	4208      	tst	r0, r1
 8000ef6:	d00c      	beq.n	8000f12 <__aeabi_f2d+0x2e>
 8000ef8:	21e0      	movs	r1, #224	; 0xe0
 8000efa:	0089      	lsls	r1, r1, #2
 8000efc:	468c      	mov	ip, r1
 8000efe:	076d      	lsls	r5, r5, #29
 8000f00:	0b12      	lsrs	r2, r2, #12
 8000f02:	4463      	add	r3, ip
 8000f04:	051b      	lsls	r3, r3, #20
 8000f06:	4313      	orrs	r3, r2
 8000f08:	07e4      	lsls	r4, r4, #31
 8000f0a:	4323      	orrs	r3, r4
 8000f0c:	0028      	movs	r0, r5
 8000f0e:	0019      	movs	r1, r3
 8000f10:	bd70      	pop	{r4, r5, r6, pc}
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d114      	bne.n	8000f40 <__aeabi_f2d+0x5c>
 8000f16:	2d00      	cmp	r5, #0
 8000f18:	d01b      	beq.n	8000f52 <__aeabi_f2d+0x6e>
 8000f1a:	0028      	movs	r0, r5
 8000f1c:	f000 f8b0 	bl	8001080 <__clzsi2>
 8000f20:	280a      	cmp	r0, #10
 8000f22:	dc1c      	bgt.n	8000f5e <__aeabi_f2d+0x7a>
 8000f24:	230b      	movs	r3, #11
 8000f26:	002a      	movs	r2, r5
 8000f28:	1a1b      	subs	r3, r3, r0
 8000f2a:	40da      	lsrs	r2, r3
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	3315      	adds	r3, #21
 8000f30:	409d      	lsls	r5, r3
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <__aeabi_f2d+0x88>)
 8000f34:	0312      	lsls	r2, r2, #12
 8000f36:	1a1b      	subs	r3, r3, r0
 8000f38:	055b      	lsls	r3, r3, #21
 8000f3a:	0b12      	lsrs	r2, r2, #12
 8000f3c:	0d5b      	lsrs	r3, r3, #21
 8000f3e:	e7e1      	b.n	8000f04 <__aeabi_f2d+0x20>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d009      	beq.n	8000f58 <__aeabi_f2d+0x74>
 8000f44:	0b13      	lsrs	r3, r2, #12
 8000f46:	2280      	movs	r2, #128	; 0x80
 8000f48:	0312      	lsls	r2, r2, #12
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	076d      	lsls	r5, r5, #29
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <__aeabi_f2d+0x8c>)
 8000f50:	e7d8      	b.n	8000f04 <__aeabi_f2d+0x20>
 8000f52:	2300      	movs	r3, #0
 8000f54:	2200      	movs	r2, #0
 8000f56:	e7d5      	b.n	8000f04 <__aeabi_f2d+0x20>
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <__aeabi_f2d+0x8c>)
 8000f5c:	e7d2      	b.n	8000f04 <__aeabi_f2d+0x20>
 8000f5e:	0003      	movs	r3, r0
 8000f60:	002a      	movs	r2, r5
 8000f62:	3b0b      	subs	r3, #11
 8000f64:	409a      	lsls	r2, r3
 8000f66:	2500      	movs	r5, #0
 8000f68:	e7e3      	b.n	8000f32 <__aeabi_f2d+0x4e>
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	00000389 	.word	0x00000389
 8000f70:	000007ff 	.word	0x000007ff

08000f74 <__aeabi_d2f>:
 8000f74:	0002      	movs	r2, r0
 8000f76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f78:	004b      	lsls	r3, r1, #1
 8000f7a:	030d      	lsls	r5, r1, #12
 8000f7c:	0f40      	lsrs	r0, r0, #29
 8000f7e:	0d5b      	lsrs	r3, r3, #21
 8000f80:	0fcc      	lsrs	r4, r1, #31
 8000f82:	0a6d      	lsrs	r5, r5, #9
 8000f84:	493a      	ldr	r1, [pc, #232]	; (8001070 <__aeabi_d2f+0xfc>)
 8000f86:	4305      	orrs	r5, r0
 8000f88:	1c58      	adds	r0, r3, #1
 8000f8a:	00d7      	lsls	r7, r2, #3
 8000f8c:	4208      	tst	r0, r1
 8000f8e:	d00a      	beq.n	8000fa6 <__aeabi_d2f+0x32>
 8000f90:	4938      	ldr	r1, [pc, #224]	; (8001074 <__aeabi_d2f+0x100>)
 8000f92:	1859      	adds	r1, r3, r1
 8000f94:	29fe      	cmp	r1, #254	; 0xfe
 8000f96:	dd16      	ble.n	8000fc6 <__aeabi_d2f+0x52>
 8000f98:	20ff      	movs	r0, #255	; 0xff
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	05c0      	lsls	r0, r0, #23
 8000f9e:	4310      	orrs	r0, r2
 8000fa0:	07e4      	lsls	r4, r4, #31
 8000fa2:	4320      	orrs	r0, r4
 8000fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d106      	bne.n	8000fb8 <__aeabi_d2f+0x44>
 8000faa:	433d      	orrs	r5, r7
 8000fac:	d026      	beq.n	8000ffc <__aeabi_d2f+0x88>
 8000fae:	2205      	movs	r2, #5
 8000fb0:	0192      	lsls	r2, r2, #6
 8000fb2:	0a52      	lsrs	r2, r2, #9
 8000fb4:	b2d8      	uxtb	r0, r3
 8000fb6:	e7f1      	b.n	8000f9c <__aeabi_d2f+0x28>
 8000fb8:	432f      	orrs	r7, r5
 8000fba:	d0ed      	beq.n	8000f98 <__aeabi_d2f+0x24>
 8000fbc:	2280      	movs	r2, #128	; 0x80
 8000fbe:	03d2      	lsls	r2, r2, #15
 8000fc0:	20ff      	movs	r0, #255	; 0xff
 8000fc2:	432a      	orrs	r2, r5
 8000fc4:	e7ea      	b.n	8000f9c <__aeabi_d2f+0x28>
 8000fc6:	2900      	cmp	r1, #0
 8000fc8:	dd1b      	ble.n	8001002 <__aeabi_d2f+0x8e>
 8000fca:	0192      	lsls	r2, r2, #6
 8000fcc:	1e50      	subs	r0, r2, #1
 8000fce:	4182      	sbcs	r2, r0
 8000fd0:	00ed      	lsls	r5, r5, #3
 8000fd2:	0f7f      	lsrs	r7, r7, #29
 8000fd4:	432a      	orrs	r2, r5
 8000fd6:	433a      	orrs	r2, r7
 8000fd8:	0753      	lsls	r3, r2, #29
 8000fda:	d047      	beq.n	800106c <__aeabi_d2f+0xf8>
 8000fdc:	230f      	movs	r3, #15
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	d000      	beq.n	8000fe6 <__aeabi_d2f+0x72>
 8000fe4:	3204      	adds	r2, #4
 8000fe6:	2380      	movs	r3, #128	; 0x80
 8000fe8:	04db      	lsls	r3, r3, #19
 8000fea:	4013      	ands	r3, r2
 8000fec:	d03e      	beq.n	800106c <__aeabi_d2f+0xf8>
 8000fee:	1c48      	adds	r0, r1, #1
 8000ff0:	29fe      	cmp	r1, #254	; 0xfe
 8000ff2:	d0d1      	beq.n	8000f98 <__aeabi_d2f+0x24>
 8000ff4:	0192      	lsls	r2, r2, #6
 8000ff6:	0a52      	lsrs	r2, r2, #9
 8000ff8:	b2c0      	uxtb	r0, r0
 8000ffa:	e7cf      	b.n	8000f9c <__aeabi_d2f+0x28>
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	2200      	movs	r2, #0
 8001000:	e7cc      	b.n	8000f9c <__aeabi_d2f+0x28>
 8001002:	000a      	movs	r2, r1
 8001004:	3217      	adds	r2, #23
 8001006:	db2f      	blt.n	8001068 <__aeabi_d2f+0xf4>
 8001008:	2680      	movs	r6, #128	; 0x80
 800100a:	0436      	lsls	r6, r6, #16
 800100c:	432e      	orrs	r6, r5
 800100e:	251e      	movs	r5, #30
 8001010:	1a6d      	subs	r5, r5, r1
 8001012:	2d1f      	cmp	r5, #31
 8001014:	dd11      	ble.n	800103a <__aeabi_d2f+0xc6>
 8001016:	2202      	movs	r2, #2
 8001018:	4252      	negs	r2, r2
 800101a:	1a52      	subs	r2, r2, r1
 800101c:	0031      	movs	r1, r6
 800101e:	40d1      	lsrs	r1, r2
 8001020:	2d20      	cmp	r5, #32
 8001022:	d004      	beq.n	800102e <__aeabi_d2f+0xba>
 8001024:	4a14      	ldr	r2, [pc, #80]	; (8001078 <__aeabi_d2f+0x104>)
 8001026:	4694      	mov	ip, r2
 8001028:	4463      	add	r3, ip
 800102a:	409e      	lsls	r6, r3
 800102c:	4337      	orrs	r7, r6
 800102e:	003a      	movs	r2, r7
 8001030:	1e53      	subs	r3, r2, #1
 8001032:	419a      	sbcs	r2, r3
 8001034:	430a      	orrs	r2, r1
 8001036:	2100      	movs	r1, #0
 8001038:	e7ce      	b.n	8000fd8 <__aeabi_d2f+0x64>
 800103a:	4a10      	ldr	r2, [pc, #64]	; (800107c <__aeabi_d2f+0x108>)
 800103c:	0038      	movs	r0, r7
 800103e:	4694      	mov	ip, r2
 8001040:	4463      	add	r3, ip
 8001042:	4098      	lsls	r0, r3
 8001044:	003a      	movs	r2, r7
 8001046:	1e41      	subs	r1, r0, #1
 8001048:	4188      	sbcs	r0, r1
 800104a:	409e      	lsls	r6, r3
 800104c:	40ea      	lsrs	r2, r5
 800104e:	4330      	orrs	r0, r6
 8001050:	4302      	orrs	r2, r0
 8001052:	2100      	movs	r1, #0
 8001054:	0753      	lsls	r3, r2, #29
 8001056:	d1c1      	bne.n	8000fdc <__aeabi_d2f+0x68>
 8001058:	2180      	movs	r1, #128	; 0x80
 800105a:	0013      	movs	r3, r2
 800105c:	04c9      	lsls	r1, r1, #19
 800105e:	2001      	movs	r0, #1
 8001060:	400b      	ands	r3, r1
 8001062:	420a      	tst	r2, r1
 8001064:	d1c6      	bne.n	8000ff4 <__aeabi_d2f+0x80>
 8001066:	e7a3      	b.n	8000fb0 <__aeabi_d2f+0x3c>
 8001068:	2300      	movs	r3, #0
 800106a:	e7a0      	b.n	8000fae <__aeabi_d2f+0x3a>
 800106c:	000b      	movs	r3, r1
 800106e:	e79f      	b.n	8000fb0 <__aeabi_d2f+0x3c>
 8001070:	000007fe 	.word	0x000007fe
 8001074:	fffffc80 	.word	0xfffffc80
 8001078:	fffffca2 	.word	0xfffffca2
 800107c:	fffffc82 	.word	0xfffffc82

08001080 <__clzsi2>:
 8001080:	211c      	movs	r1, #28
 8001082:	2301      	movs	r3, #1
 8001084:	041b      	lsls	r3, r3, #16
 8001086:	4298      	cmp	r0, r3
 8001088:	d301      	bcc.n	800108e <__clzsi2+0xe>
 800108a:	0c00      	lsrs	r0, r0, #16
 800108c:	3910      	subs	r1, #16
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	4298      	cmp	r0, r3
 8001092:	d301      	bcc.n	8001098 <__clzsi2+0x18>
 8001094:	0a00      	lsrs	r0, r0, #8
 8001096:	3908      	subs	r1, #8
 8001098:	091b      	lsrs	r3, r3, #4
 800109a:	4298      	cmp	r0, r3
 800109c:	d301      	bcc.n	80010a2 <__clzsi2+0x22>
 800109e:	0900      	lsrs	r0, r0, #4
 80010a0:	3904      	subs	r1, #4
 80010a2:	a202      	add	r2, pc, #8	; (adr r2, 80010ac <__clzsi2+0x2c>)
 80010a4:	5c10      	ldrb	r0, [r2, r0]
 80010a6:	1840      	adds	r0, r0, r1
 80010a8:	4770      	bx	lr
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	02020304 	.word	0x02020304
 80010b0:	01010101 	.word	0x01010101
	...

080010bc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	0018      	movs	r0, r3
 80010c6:	230c      	movs	r3, #12
 80010c8:	001a      	movs	r2, r3
 80010ca:	2100      	movs	r1, #0
 80010cc:	f006 fe18 	bl	8007d00 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010d0:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010d2:	4a2e      	ldr	r2, [pc, #184]	; (800118c <MX_ADC1_Init+0xd0>)
 80010d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010d6:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010d8:	2280      	movs	r2, #128	; 0x80
 80010da:	05d2      	lsls	r2, r2, #23
 80010dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010de:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e4:	4b28      	ldr	r3, [pc, #160]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ea:	4b27      	ldr	r3, [pc, #156]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f0:	4b25      	ldr	r3, [pc, #148]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010f2:	2204      	movs	r2, #4
 80010f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010f6:	4b24      	ldr	r3, [pc, #144]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80010fc:	4b22      	ldr	r3, [pc, #136]	; (8001188 <MX_ADC1_Init+0xcc>)
 80010fe:	2200      	movs	r2, #0
 8001100:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <MX_ADC1_Init+0xcc>)
 8001104:	2200      	movs	r2, #0
 8001106:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <MX_ADC1_Init+0xcc>)
 800110a:	2201      	movs	r2, #1
 800110c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800110e:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <MX_ADC1_Init+0xcc>)
 8001110:	2220      	movs	r2, #32
 8001112:	2100      	movs	r1, #0
 8001114:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001116:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <MX_ADC1_Init+0xcc>)
 8001118:	2200      	movs	r2, #0
 800111a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800111c:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <MX_ADC1_Init+0xcc>)
 800111e:	2200      	movs	r2, #0
 8001120:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <MX_ADC1_Init+0xcc>)
 8001124:	222c      	movs	r2, #44	; 0x2c
 8001126:	2100      	movs	r1, #0
 8001128:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <MX_ADC1_Init+0xcc>)
 800112c:	2200      	movs	r2, #0
 800112e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <MX_ADC1_Init+0xcc>)
 8001132:	2200      	movs	r2, #0
 8001134:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <MX_ADC1_Init+0xcc>)
 8001138:	2200      	movs	r2, #0
 800113a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <MX_ADC1_Init+0xcc>)
 800113e:	223c      	movs	r2, #60	; 0x3c
 8001140:	2100      	movs	r1, #0
 8001142:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001144:	4b10      	ldr	r3, [pc, #64]	; (8001188 <MX_ADC1_Init+0xcc>)
 8001146:	2200      	movs	r2, #0
 8001148:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_ADC1_Init+0xcc>)
 800114c:	0018      	movs	r0, r3
 800114e:	f001 fb43 	bl	80027d8 <HAL_ADC_Init>
 8001152:	1e03      	subs	r3, r0, #0
 8001154:	d001      	beq.n	800115a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001156:	f000 fa40 	bl	80015da <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2201      	movs	r2, #1
 800115e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116c:	1d3a      	adds	r2, r7, #4
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_ADC1_Init+0xcc>)
 8001170:	0011      	movs	r1, r2
 8001172:	0018      	movs	r0, r3
 8001174:	f001 fe02 	bl	8002d7c <HAL_ADC_ConfigChannel>
 8001178:	1e03      	subs	r3, r0, #0
 800117a:	d001      	beq.n	8001180 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 800117c:	f000 fa2d 	bl	80015da <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	b004      	add	sp, #16
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000088 	.word	0x20000088
 800118c:	40012400 	.word	0x40012400

08001190 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b08b      	sub	sp, #44	; 0x2c
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	2414      	movs	r4, #20
 800119a:	193b      	adds	r3, r7, r4
 800119c:	0018      	movs	r0, r3
 800119e:	2314      	movs	r3, #20
 80011a0:	001a      	movs	r2, r3
 80011a2:	2100      	movs	r1, #0
 80011a4:	f006 fdac 	bl	8007d00 <memset>
  if(adcHandle->Instance==ADC1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a18      	ldr	r2, [pc, #96]	; (8001210 <HAL_ADC_MspInit+0x80>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d129      	bne.n	8001206 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <HAL_ADC_MspInit+0x84>)
 80011b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <HAL_ADC_MspInit+0x84>)
 80011b8:	2180      	movs	r1, #128	; 0x80
 80011ba:	0349      	lsls	r1, r1, #13
 80011bc:	430a      	orrs	r2, r1
 80011be:	641a      	str	r2, [r3, #64]	; 0x40
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <HAL_ADC_MspInit+0x84>)
 80011c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	035b      	lsls	r3, r3, #13
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_ADC_MspInit+0x84>)
 80011d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_ADC_MspInit+0x84>)
 80011d4:	2101      	movs	r1, #1
 80011d6:	430a      	orrs	r2, r1
 80011d8:	635a      	str	r2, [r3, #52]	; 0x34
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <HAL_ADC_MspInit+0x84>)
 80011dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011de:	2201      	movs	r2, #1
 80011e0:	4013      	ands	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_IN0_BAT_LVL_Pin;
 80011e6:	193b      	adds	r3, r7, r4
 80011e8:	2201      	movs	r2, #1
 80011ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ec:	193b      	adds	r3, r7, r4
 80011ee:	2203      	movs	r2, #3
 80011f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	193b      	adds	r3, r7, r4
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC1_IN0_BAT_LVL_GPIO_Port, &GPIO_InitStruct);
 80011f8:	193a      	adds	r2, r7, r4
 80011fa:	23a0      	movs	r3, #160	; 0xa0
 80011fc:	05db      	lsls	r3, r3, #23
 80011fe:	0011      	movs	r1, r2
 8001200:	0018      	movs	r0, r3
 8001202:	f002 f96d 	bl	80034e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b00b      	add	sp, #44	; 0x2c
 800120c:	bd90      	pop	{r4, r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	40012400 	.word	0x40012400
 8001214:	40021000 	.word	0x40021000

08001218 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b087      	sub	sp, #28
 800121c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	4a08      	ldr	r2, [pc, #32]	; (8001244 <MX_FREERTOS_Init+0x2c>)
 8001222:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001224:	c313      	stmia	r3!, {r0, r1, r4}
 8001226:	ca03      	ldmia	r2!, {r0, r1}
 8001228:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2100      	movs	r1, #0
 800122e:	0018      	movs	r0, r3
 8001230:	f004 fec7 	bl	8005fc2 <osThreadCreate>
 8001234:	0002      	movs	r2, r0
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <MX_FREERTOS_Init+0x30>)
 8001238:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	b007      	add	sp, #28
 8001240:	bd90      	pop	{r4, r7, pc}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	080089c8 	.word	0x080089c8
 8001248:	200000ec 	.word	0x200000ec

0800124c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001254:	2001      	movs	r0, #1
 8001256:	f004 fedc 	bl	8006012 <osDelay>
 800125a:	e7fb      	b.n	8001254 <StartDefaultTask+0x8>

0800125c <auxiliaryInit>:


SemaphoreHandle_t xBatterySemaphore = NULL;
TaskHandle_t h_task_batteryLevel = NULL;

void auxiliaryInit(){
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	xBatterySemaphore=xSemaphoreCreateBinary();
 8001260:	2203      	movs	r2, #3
 8001262:	2100      	movs	r1, #0
 8001264:	2001      	movs	r0, #1
 8001266:	f004 ffe5 	bl	8006234 <xQueueGenericCreate>
 800126a:	0002      	movs	r2, r0
 800126c:	4b02      	ldr	r3, [pc, #8]	; (8001278 <auxiliaryInit+0x1c>)
 800126e:	601a      	str	r2, [r3, #0]
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	200000f0 	.word	0x200000f0

0800127c <auxiliaryTask>:
void auxiliaryTask(){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
	float batteryLevel;

	while (1) {
		batteryLevel = getBatteryLevel();
 8001282:	f000 f84b 	bl	800131c <getBatteryLevel>
 8001286:	1c03      	adds	r3, r0, #0
 8001288:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&huart1, "battery ok\n",13, 1);
 800128a:	491b      	ldr	r1, [pc, #108]	; (80012f8 <auxiliaryTask+0x7c>)
 800128c:	481b      	ldr	r0, [pc, #108]	; (80012fc <auxiliaryTask+0x80>)
 800128e:	2301      	movs	r3, #1
 8001290:	220d      	movs	r2, #13
 8001292:	f004 f951 	bl	8005538 <HAL_UART_Transmit>
		LOG_LED_DEBUG("Battery OK : %f ", batteryLevel);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fe24 	bl	8000ee4 <__aeabi_f2d>
 800129c:	0002      	movs	r2, r0
 800129e:	000b      	movs	r3, r1
 80012a0:	4917      	ldr	r1, [pc, #92]	; (8001300 <auxiliaryTask+0x84>)
 80012a2:	4818      	ldr	r0, [pc, #96]	; (8001304 <auxiliaryTask+0x88>)
 80012a4:	f006 fcd0 	bl	8007c48 <iprintf>
		if (batteryLevel < BATTERY_THRESHOLD) {
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff fe1b 	bl	8000ee4 <__aeabi_f2d>
 80012ae:	4a16      	ldr	r2, [pc, #88]	; (8001308 <auxiliaryTask+0x8c>)
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <auxiliaryTask+0x90>)
 80012b2:	f7ff f8bf 	bl	8000434 <__aeabi_dcmplt>
 80012b6:	1e03      	subs	r3, r0, #0
 80012b8:	d01a      	beq.n	80012f0 <auxiliaryTask+0x74>
			HAL_UART_Transmit(&huart1, "battery no ok\n",16, 1);
 80012ba:	4915      	ldr	r1, [pc, #84]	; (8001310 <auxiliaryTask+0x94>)
 80012bc:	480f      	ldr	r0, [pc, #60]	; (80012fc <auxiliaryTask+0x80>)
 80012be:	2301      	movs	r3, #1
 80012c0:	2210      	movs	r2, #16
 80012c2:	f004 f939 	bl	8005538 <HAL_UART_Transmit>
			xSemaphoreTake(xBatterySemaphore, portMAX_DELAY);
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <auxiliaryTask+0x98>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2201      	movs	r2, #1
 80012cc:	4252      	negs	r2, r2
 80012ce:	0011      	movs	r1, r2
 80012d0:	0018      	movs	r0, r3
 80012d2:	f005 f8c3 	bl	800645c <xQueueSemaphoreTake>
			LOG_LED_DEBUG("Low battery");
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <auxiliaryTask+0x84>)
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <auxiliaryTask+0x9c>)
 80012da:	0011      	movs	r1, r2
 80012dc:	0018      	movs	r0, r3
 80012de:	f006 fcb3 	bl	8007c48 <iprintf>
			xSemaphoreGive(xBatterySemaphore);
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <auxiliaryTask+0x98>)
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	2300      	movs	r3, #0
 80012e8:	2200      	movs	r2, #0
 80012ea:	2100      	movs	r1, #0
 80012ec:	f004 fff2 	bl	80062d4 <xQueueGenericSend>
		}
		vTaskDelay(1);
 80012f0:	2001      	movs	r0, #1
 80012f2:	f005 fbc9 	bl	8006a88 <vTaskDelay>
		batteryLevel = getBatteryLevel();
 80012f6:	e7c4      	b.n	8001282 <auxiliaryTask+0x6>
 80012f8:	080089dc 	.word	0x080089dc
 80012fc:	200002c4 	.word	0x200002c4
 8001300:	08008b98 	.word	0x08008b98
 8001304:	080089e8 	.word	0x080089e8
 8001308:	9999999a 	.word	0x9999999a
 800130c:	40199999 	.word	0x40199999
 8001310:	08008a18 	.word	0x08008a18
 8001314:	200000f0 	.word	0x200000f0
 8001318:	08008a28 	.word	0x08008a28

0800131c <getBatteryLevel>:
	}
}
float getBatteryLevel() {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <getBatteryLevel+0x84>)
 8001324:	0018      	movs	r0, r3
 8001326:	f001 fbff 	bl	8002b28 <HAL_ADC_Start>
	float batteryLevel;
	if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK){
 800132a:	2301      	movs	r3, #1
 800132c:	425a      	negs	r2, r3
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <getBatteryLevel+0x84>)
 8001330:	0011      	movs	r1, r2
 8001332:	0018      	movs	r0, r3
 8001334:	f001 fc82 	bl	8002c3c <HAL_ADC_PollForConversion>
 8001338:	1e03      	subs	r3, r0, #0
 800133a:	d126      	bne.n	800138a <getBatteryLevel+0x6e>
		uint16_t adcValue = HAL_ADC_GetValue(&hadc1);
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <getBatteryLevel+0x84>)
 800133e:	0018      	movs	r0, r3
 8001340:	f001 fd10 	bl	8002d64 <HAL_ADC_GetValue>
 8001344:	0002      	movs	r2, r0
 8001346:	1cbb      	adds	r3, r7, #2
 8001348:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <getBatteryLevel+0x84>)
 800134c:	0018      	movs	r0, r3
 800134e:	f001 fc39 	bl	8002bc4 <HAL_ADC_Stop>
		batteryLevel = (float)adcValue / RESOLUTION_ADC * BATTERY_SUPPLY;
 8001352:	1cbb      	adds	r3, r7, #2
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	0018      	movs	r0, r3
 8001358:	f7ff f9ae 	bl	80006b8 <__aeabi_ui2f>
 800135c:	1c03      	adds	r3, r0, #0
 800135e:	218b      	movs	r1, #139	; 0x8b
 8001360:	05c9      	lsls	r1, r1, #23
 8001362:	1c18      	adds	r0, r3, #0
 8001364:	f7ff f88e 	bl	8000484 <__aeabi_fdiv>
 8001368:	1c03      	adds	r3, r0, #0
 800136a:	1c18      	adds	r0, r3, #0
 800136c:	f7ff fdba 	bl	8000ee4 <__aeabi_f2d>
 8001370:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <getBatteryLevel+0x88>)
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <getBatteryLevel+0x8c>)
 8001374:	f7ff faf4 	bl	8000960 <__aeabi_dmul>
 8001378:	0002      	movs	r2, r0
 800137a:	000b      	movs	r3, r1
 800137c:	0010      	movs	r0, r2
 800137e:	0019      	movs	r1, r3
 8001380:	f7ff fdf8 	bl	8000f74 <__aeabi_d2f>
 8001384:	1c03      	adds	r3, r0, #0
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	e005      	b.n	8001396 <getBatteryLevel+0x7a>
	}
	else{
		LOG_LED_ERROR("Get battery error");
 800138a:	4a08      	ldr	r2, [pc, #32]	; (80013ac <getBatteryLevel+0x90>)
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <getBatteryLevel+0x94>)
 800138e:	0011      	movs	r1, r2
 8001390:	0018      	movs	r0, r3
 8001392:	f006 fc59 	bl	8007c48 <iprintf>
	}
	return batteryLevel;
 8001396:	687b      	ldr	r3, [r7, #4]
}
 8001398:	1c18      	adds	r0, r3, #0
 800139a:	46bd      	mov	sp, r7
 800139c:	b002      	add	sp, #8
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000088 	.word	0x20000088
 80013a4:	cccccccd 	.word	0xcccccccd
 80013a8:	401ccccc 	.word	0x401ccccc
 80013ac:	08008ba8 	.word	0x08008ba8
 80013b0:	08008a54 	.word	0x08008a54

080013b4 <createAuxiliaryTask>:

void createAuxiliaryTask() {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af02      	add	r7, sp, #8
	if 	(xTaskCreate(auxiliaryTask, "Auxiliary", TASK_AUXILIARY_STACK_DEPTH, NULL,
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	009a      	lsls	r2, r3, #2
 80013be:	490e      	ldr	r1, [pc, #56]	; (80013f8 <createAuxiliaryTask+0x44>)
 80013c0:	480e      	ldr	r0, [pc, #56]	; (80013fc <createAuxiliaryTask+0x48>)
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <createAuxiliaryTask+0x4c>)
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	2301      	movs	r3, #1
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	2300      	movs	r3, #0
 80013cc:	f005 fa2d 	bl	800682a <xTaskCreate>
 80013d0:	0003      	movs	r3, r0
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d006      	beq.n	80013e4 <createAuxiliaryTask+0x30>
			TASK_AUXILIARY_PRIORITY, &h_task_batteryLevel)!= pdPASS){
		LOG_LED_ERROR("Error creating task auxiliary");
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <createAuxiliaryTask+0x50>)
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <createAuxiliaryTask+0x54>)
 80013da:	0011      	movs	r1, r2
 80013dc:	0018      	movs	r0, r3
 80013de:	f006 fc33 	bl	8007c48 <iprintf>

	}
	else
		LOG_LED_DEBUG(COLOR_GREEN"Auxiliary task create");
}
 80013e2:	e005      	b.n	80013f0 <createAuxiliaryTask+0x3c>
		LOG_LED_DEBUG(COLOR_GREEN"Auxiliary task create");
 80013e4:	4a07      	ldr	r2, [pc, #28]	; (8001404 <createAuxiliaryTask+0x50>)
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <createAuxiliaryTask+0x58>)
 80013e8:	0011      	movs	r1, r2
 80013ea:	0018      	movs	r0, r3
 80013ec:	f006 fc2c 	bl	8007c48 <iprintf>
}
 80013f0:	46c0      	nop			; (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	08008a88 	.word	0x08008a88
 80013fc:	0800127d 	.word	0x0800127d
 8001400:	200000f4 	.word	0x200000f4
 8001404:	08008bb8 	.word	0x08008bb8
 8001408:	08008a94 	.word	0x08008a94
 800140c:	08008ad4 	.word	0x08008ad4

08001410 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b08b      	sub	sp, #44	; 0x2c
 8001414:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001416:	2414      	movs	r4, #20
 8001418:	193b      	adds	r3, r7, r4
 800141a:	0018      	movs	r0, r3
 800141c:	2314      	movs	r3, #20
 800141e:	001a      	movs	r2, r3
 8001420:	2100      	movs	r1, #0
 8001422:	f006 fc6d 	bl	8007d00 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001426:	4b34      	ldr	r3, [pc, #208]	; (80014f8 <MX_GPIO_Init+0xe8>)
 8001428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800142a:	4b33      	ldr	r3, [pc, #204]	; (80014f8 <MX_GPIO_Init+0xe8>)
 800142c:	2120      	movs	r1, #32
 800142e:	430a      	orrs	r2, r1
 8001430:	635a      	str	r2, [r3, #52]	; 0x34
 8001432:	4b31      	ldr	r3, [pc, #196]	; (80014f8 <MX_GPIO_Init+0xe8>)
 8001434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001436:	2220      	movs	r2, #32
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	4b2e      	ldr	r3, [pc, #184]	; (80014f8 <MX_GPIO_Init+0xe8>)
 8001440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001442:	4b2d      	ldr	r3, [pc, #180]	; (80014f8 <MX_GPIO_Init+0xe8>)
 8001444:	2104      	movs	r1, #4
 8001446:	430a      	orrs	r2, r1
 8001448:	635a      	str	r2, [r3, #52]	; 0x34
 800144a:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <MX_GPIO_Init+0xe8>)
 800144c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144e:	2204      	movs	r2, #4
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <MX_GPIO_Init+0xe8>)
 8001458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800145a:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <MX_GPIO_Init+0xe8>)
 800145c:	2101      	movs	r1, #1
 800145e:	430a      	orrs	r2, r1
 8001460:	635a      	str	r2, [r3, #52]	; 0x34
 8001462:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <MX_GPIO_Init+0xe8>)
 8001464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001466:	2201      	movs	r2, #1
 8001468:	4013      	ands	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <MX_GPIO_Init+0xe8>)
 8001470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001472:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <MX_GPIO_Init+0xe8>)
 8001474:	2102      	movs	r1, #2
 8001476:	430a      	orrs	r2, r1
 8001478:	635a      	str	r2, [r3, #52]	; 0x34
 800147a:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <MX_GPIO_Init+0xe8>)
 800147c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147e:	2202      	movs	r2, #2
 8001480:	4013      	ands	r3, r2
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001486:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <MX_GPIO_Init+0xe8>)
 8001488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800148a:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <MX_GPIO_Init+0xe8>)
 800148c:	2108      	movs	r1, #8
 800148e:	430a      	orrs	r2, r1
 8001490:	635a      	str	r2, [r3, #52]	; 0x34
 8001492:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <MX_GPIO_Init+0xe8>)
 8001494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001496:	2208      	movs	r2, #8
 8001498:	4013      	ands	r3, r2
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEV_EN_Pin|M_EN_Pin|LED_R_Pin|LED_B_Pin, GPIO_PIN_RESET);
 800149e:	4b17      	ldr	r3, [pc, #92]	; (80014fc <MX_GPIO_Init+0xec>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	211e      	movs	r1, #30
 80014a4:	0018      	movs	r0, r3
 80014a6:	f002 f97f 	bl	80037a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = V_BORDURE_R_Pin|BUMPER_F_Pin|BUMPER_B_Pin|BUMPER_R_Pin
 80014aa:	193b      	adds	r3, r7, r4
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <MX_GPIO_Init+0xf0>)
 80014ae:	601a      	str	r2, [r3, #0]
                          |BUMPER_L_Pin|V_BORDURE_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b0:	193b      	adds	r3, r7, r4
 80014b2:	2200      	movs	r2, #0
 80014b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014b6:	193b      	adds	r3, r7, r4
 80014b8:	2202      	movs	r2, #2
 80014ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	193b      	adds	r3, r7, r4
 80014be:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <MX_GPIO_Init+0xec>)
 80014c0:	0019      	movs	r1, r3
 80014c2:	0010      	movs	r0, r2
 80014c4:	f002 f80c 	bl	80034e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DEV_EN_Pin|M_EN_Pin|LED_R_Pin|LED_B_Pin;
 80014c8:	0021      	movs	r1, r4
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	221e      	movs	r2, #30
 80014ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	2201      	movs	r2, #1
 80014d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	187b      	adds	r3, r7, r1
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	187b      	adds	r3, r7, r1
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e2:	187b      	adds	r3, r7, r1
 80014e4:	4a05      	ldr	r2, [pc, #20]	; (80014fc <MX_GPIO_Init+0xec>)
 80014e6:	0019      	movs	r1, r3
 80014e8:	0010      	movs	r0, r2
 80014ea:	f001 fff9 	bl	80034e0 <HAL_GPIO_Init>

}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b00b      	add	sp, #44	; 0x2c
 80014f4:	bd90      	pop	{r4, r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	40021000 	.word	0x40021000
 80014fc:	50000400 	.word	0x50000400
 8001500:	000003e1 	.word	0x000003e1

08001504 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001508:	f000 ff76 	bl	80023f8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800150c:	f000 f81d 	bl	800154a <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001510:	f7ff ff7e 	bl	8001410 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001514:	f7ff fdd2 	bl	80010bc <MX_ADC1_Init>
	MX_TIM1_Init();
 8001518:	f000 f944 	bl	80017a4 <MX_TIM1_Init>
	MX_TIM3_Init();
 800151c:	f000 f9ac 	bl	8001878 <MX_TIM3_Init>
	MX_TIM14_Init();
 8001520:	f000 fa0e 	bl	8001940 <MX_TIM14_Init>
	MX_TIM15_Init();
 8001524:	f000 fa5c 	bl	80019e0 <MX_TIM15_Init>
	MX_TIM16_Init();
 8001528:	f000 fb1e 	bl	8001b68 <MX_TIM16_Init>
	MX_TIM17_Init();
 800152c:	f000 fba4 	bl	8001c78 <MX_TIM17_Init>
	MX_USART1_UART_Init();
 8001530:	f000 fdf2 	bl	8002118 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001534:	f000 fe3e 	bl	80021b4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	auxiliaryInit();
 8001538:	f7ff fe90 	bl	800125c <auxiliaryInit>
	createAuxiliaryTask();
 800153c:	f7ff ff3a 	bl	80013b4 <createAuxiliaryTask>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8001540:	f7ff fe6a 	bl	8001218 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8001544:	f004 fd35 	bl	8005fb2 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001548:	e7fe      	b.n	8001548 <main+0x44>

0800154a <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800154a:	b590      	push	{r4, r7, lr}
 800154c:	b093      	sub	sp, #76	; 0x4c
 800154e:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001550:	2414      	movs	r4, #20
 8001552:	193b      	adds	r3, r7, r4
 8001554:	0018      	movs	r0, r3
 8001556:	2334      	movs	r3, #52	; 0x34
 8001558:	001a      	movs	r2, r3
 800155a:	2100      	movs	r1, #0
 800155c:	f006 fbd0 	bl	8007d00 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	0018      	movs	r0, r3
 8001564:	2310      	movs	r3, #16
 8001566:	001a      	movs	r2, r3
 8001568:	2100      	movs	r1, #0
 800156a:	f006 fbc9 	bl	8007d00 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	0018      	movs	r0, r3
 8001574:	f002 f936 	bl	80037e4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001578:	193b      	adds	r3, r7, r4
 800157a:	2202      	movs	r2, #2
 800157c:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800157e:	193b      	adds	r3, r7, r4
 8001580:	2280      	movs	r2, #128	; 0x80
 8001582:	0052      	lsls	r2, r2, #1
 8001584:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001586:	193b      	adds	r3, r7, r4
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800158c:	193b      	adds	r3, r7, r4
 800158e:	2240      	movs	r2, #64	; 0x40
 8001590:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001592:	193b      	adds	r3, r7, r4
 8001594:	2200      	movs	r2, #0
 8001596:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001598:	193b      	adds	r3, r7, r4
 800159a:	0018      	movs	r0, r3
 800159c:	f002 f96e 	bl	800387c <HAL_RCC_OscConfig>
 80015a0:	1e03      	subs	r3, r0, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0x5e>
	{
		Error_Handler();
 80015a4:	f000 f819 	bl	80015da <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	2207      	movs	r2, #7
 80015ac:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2200      	movs	r2, #0
 80015b2:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2200      	movs	r2, #0
 80015be:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	2100      	movs	r1, #0
 80015c4:	0018      	movs	r0, r3
 80015c6:	f002 fc69 	bl	8003e9c <HAL_RCC_ClockConfig>
 80015ca:	1e03      	subs	r3, r0, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0x88>
	{
		Error_Handler();
 80015ce:	f000 f804 	bl	80015da <Error_Handler>
	}
}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b013      	add	sp, #76	; 0x4c
 80015d8:	bd90      	pop	{r4, r7, pc}

080015da <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015de:	b672      	cpsid	i
}
 80015e0:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80015e2:	e7fe      	b.n	80015e2 <Error_Handler+0x8>

080015e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_MspInit+0x50>)
 80015ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <HAL_MspInit+0x50>)
 80015f0:	2101      	movs	r1, #1
 80015f2:	430a      	orrs	r2, r1
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <HAL_MspInit+0x50>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	2201      	movs	r2, #1
 80015fc:	4013      	ands	r3, r2
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_MspInit+0x50>)
 8001604:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_MspInit+0x50>)
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	0549      	lsls	r1, r1, #21
 800160c:	430a      	orrs	r2, r1
 800160e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_MspInit+0x50>)
 8001612:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	055b      	lsls	r3, r3, #21
 8001618:	4013      	ands	r3, r2
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800161e:	2302      	movs	r3, #2
 8001620:	425b      	negs	r3, r3
 8001622:	2200      	movs	r2, #0
 8001624:	2103      	movs	r1, #3
 8001626:	0018      	movs	r0, r3
 8001628:	f001 ff38 	bl	800349c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162c:	46c0      	nop			; (mov r8, r8)
 800162e:	46bd      	mov	sp, r7
 8001630:	b002      	add	sp, #8
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40021000 	.word	0x40021000

08001638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800163c:	e7fe      	b.n	800163c <NMI_Handler+0x4>

0800163e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001642:	e7fe      	b.n	8001642 <HardFault_Handler+0x4>

08001644 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001648:	f000 ff40 	bl	80024cc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800164c:	f005 fdac 	bl	80071a8 <xTaskGetSchedulerState>
 8001650:	0003      	movs	r3, r0
 8001652:	2b01      	cmp	r3, #1
 8001654:	d001      	beq.n	800165a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001656:	f006 f857 	bl	8007708 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	e00a      	b.n	8001688 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001672:	e000      	b.n	8001676 <_read+0x16>
 8001674:	bf00      	nop
 8001676:	0001      	movs	r1, r0
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	60ba      	str	r2, [r7, #8]
 800167e:	b2ca      	uxtb	r2, r1
 8001680:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	3301      	adds	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	429a      	cmp	r2, r3
 800168e:	dbf0      	blt.n	8001672 <_read+0x12>
  }

  return len;
 8001690:	687b      	ldr	r3, [r7, #4]
}
 8001692:	0018      	movs	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	b006      	add	sp, #24
 8001698:	bd80      	pop	{r7, pc}

0800169a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	e009      	b.n	80016c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	60ba      	str	r2, [r7, #8]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	0018      	movs	r0, r3
 80016b6:	e000      	b.n	80016ba <_write+0x20>
 80016b8:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dbf1      	blt.n	80016ac <_write+0x12>
  }
  return len;
 80016c8:	687b      	ldr	r3, [r7, #4]
}
 80016ca:	0018      	movs	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b006      	add	sp, #24
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_close>:

int _close(int file)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016da:	2301      	movs	r3, #1
 80016dc:	425b      	negs	r3, r3
}
 80016de:	0018      	movs	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b002      	add	sp, #8
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	2280      	movs	r2, #128	; 0x80
 80016f4:	0192      	lsls	r2, r2, #6
 80016f6:	605a      	str	r2, [r3, #4]
  return 0;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	0018      	movs	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b002      	add	sp, #8
 8001700:	bd80      	pop	{r7, pc}

08001702 <_isatty>:

int _isatty(int file)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800170a:	2301      	movs	r3, #1
}
 800170c:	0018      	movs	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	b002      	add	sp, #8
 8001712:	bd80      	pop	{r7, pc}

08001714 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001720:	2300      	movs	r3, #0
}
 8001722:	0018      	movs	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	b004      	add	sp, #16
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001734:	4a14      	ldr	r2, [pc, #80]	; (8001788 <_sbrk+0x5c>)
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <_sbrk+0x60>)
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d102      	bne.n	800174e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <_sbrk+0x64>)
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <_sbrk+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	18d3      	adds	r3, r2, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	429a      	cmp	r2, r3
 800175a:	d207      	bcs.n	800176c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800175c:	f006 fb26 	bl	8007dac <__errno>
 8001760:	0003      	movs	r3, r0
 8001762:	220c      	movs	r2, #12
 8001764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001766:	2301      	movs	r3, #1
 8001768:	425b      	negs	r3, r3
 800176a:	e009      	b.n	8001780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	18d2      	adds	r2, r2, r3
 800177a:	4b05      	ldr	r3, [pc, #20]	; (8001790 <_sbrk+0x64>)
 800177c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800177e:	68fb      	ldr	r3, [r7, #12]
}
 8001780:	0018      	movs	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	b006      	add	sp, #24
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20009000 	.word	0x20009000
 800178c:	00000400 	.word	0x00000400
 8001790:	200000f8 	.word	0x200000f8
 8001794:	20001288 	.word	0x20001288

08001798 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800179c:	46c0      	nop			; (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b08d      	sub	sp, #52	; 0x34
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017aa:	240c      	movs	r4, #12
 80017ac:	193b      	adds	r3, r7, r4
 80017ae:	0018      	movs	r0, r3
 80017b0:	2324      	movs	r3, #36	; 0x24
 80017b2:	001a      	movs	r2, r3
 80017b4:	2100      	movs	r1, #0
 80017b6:	f006 faa3 	bl	8007d00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ba:	003b      	movs	r3, r7
 80017bc:	0018      	movs	r0, r3
 80017be:	230c      	movs	r3, #12
 80017c0:	001a      	movs	r2, r3
 80017c2:	2100      	movs	r1, #0
 80017c4:	f006 fa9c 	bl	8007d00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017c8:	4b28      	ldr	r3, [pc, #160]	; (800186c <MX_TIM1_Init+0xc8>)
 80017ca:	4a29      	ldr	r2, [pc, #164]	; (8001870 <MX_TIM1_Init+0xcc>)
 80017cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017ce:	4b27      	ldr	r3, [pc, #156]	; (800186c <MX_TIM1_Init+0xc8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	4b25      	ldr	r3, [pc, #148]	; (800186c <MX_TIM1_Init+0xc8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80017da:	4b24      	ldr	r3, [pc, #144]	; (800186c <MX_TIM1_Init+0xc8>)
 80017dc:	4a25      	ldr	r2, [pc, #148]	; (8001874 <MX_TIM1_Init+0xd0>)
 80017de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e0:	4b22      	ldr	r3, [pc, #136]	; (800186c <MX_TIM1_Init+0xc8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017e6:	4b21      	ldr	r3, [pc, #132]	; (800186c <MX_TIM1_Init+0xc8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ec:	4b1f      	ldr	r3, [pc, #124]	; (800186c <MX_TIM1_Init+0xc8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80017f2:	0021      	movs	r1, r4
 80017f4:	187b      	adds	r3, r7, r1
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017fa:	187b      	adds	r3, r7, r1
 80017fc:	2200      	movs	r2, #0
 80017fe:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001800:	187b      	adds	r3, r7, r1
 8001802:	2201      	movs	r2, #1
 8001804:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001806:	187b      	adds	r3, r7, r1
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 800180c:	187b      	adds	r3, r7, r1
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001812:	187b      	adds	r3, r7, r1
 8001814:	2200      	movs	r2, #0
 8001816:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001818:	187b      	adds	r3, r7, r1
 800181a:	2201      	movs	r2, #1
 800181c:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800181e:	187b      	adds	r3, r7, r1
 8001820:	2200      	movs	r2, #0
 8001822:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8001824:	187b      	adds	r3, r7, r1
 8001826:	2200      	movs	r2, #0
 8001828:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800182a:	187a      	adds	r2, r7, r1
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <MX_TIM1_Init+0xc8>)
 800182e:	0011      	movs	r1, r2
 8001830:	0018      	movs	r0, r3
 8001832:	f002 fec9 	bl	80045c8 <HAL_TIM_Encoder_Init>
 8001836:	1e03      	subs	r3, r0, #0
 8001838:	d001      	beq.n	800183e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800183a:	f7ff fece 	bl	80015da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183e:	003b      	movs	r3, r7
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001844:	003b      	movs	r3, r7
 8001846:	2200      	movs	r2, #0
 8001848:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184a:	003b      	movs	r3, r7
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001850:	003a      	movs	r2, r7
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <MX_TIM1_Init+0xc8>)
 8001854:	0011      	movs	r1, r2
 8001856:	0018      	movs	r0, r3
 8001858:	f003 fd0a 	bl	8005270 <HAL_TIMEx_MasterConfigSynchronization>
 800185c:	1e03      	subs	r3, r0, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001860:	f7ff febb 	bl	80015da <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001864:	46c0      	nop			; (mov r8, r8)
 8001866:	46bd      	mov	sp, r7
 8001868:	b00d      	add	sp, #52	; 0x34
 800186a:	bd90      	pop	{r4, r7, pc}
 800186c:	200000fc 	.word	0x200000fc
 8001870:	40012c00 	.word	0x40012c00
 8001874:	0000ffff 	.word	0x0000ffff

08001878 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b08d      	sub	sp, #52	; 0x34
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800187e:	240c      	movs	r4, #12
 8001880:	193b      	adds	r3, r7, r4
 8001882:	0018      	movs	r0, r3
 8001884:	2324      	movs	r3, #36	; 0x24
 8001886:	001a      	movs	r2, r3
 8001888:	2100      	movs	r1, #0
 800188a:	f006 fa39 	bl	8007d00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188e:	003b      	movs	r3, r7
 8001890:	0018      	movs	r0, r3
 8001892:	230c      	movs	r3, #12
 8001894:	001a      	movs	r2, r3
 8001896:	2100      	movs	r1, #0
 8001898:	f006 fa32 	bl	8007d00 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800189c:	4b25      	ldr	r3, [pc, #148]	; (8001934 <MX_TIM3_Init+0xbc>)
 800189e:	4a26      	ldr	r2, [pc, #152]	; (8001938 <MX_TIM3_Init+0xc0>)
 80018a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018a2:	4b24      	ldr	r3, [pc, #144]	; (8001934 <MX_TIM3_Init+0xbc>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a8:	4b22      	ldr	r3, [pc, #136]	; (8001934 <MX_TIM3_Init+0xbc>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018ae:	4b21      	ldr	r3, [pc, #132]	; (8001934 <MX_TIM3_Init+0xbc>)
 80018b0:	4a22      	ldr	r2, [pc, #136]	; (800193c <MX_TIM3_Init+0xc4>)
 80018b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <MX_TIM3_Init+0xbc>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ba:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <MX_TIM3_Init+0xbc>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80018c0:	0021      	movs	r1, r4
 80018c2:	187b      	adds	r3, r7, r1
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	2200      	movs	r2, #0
 80018cc:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018ce:	187b      	adds	r3, r7, r1
 80018d0:	2201      	movs	r2, #1
 80018d2:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018d4:	187b      	adds	r3, r7, r1
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	2200      	movs	r2, #0
 80018e4:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	2201      	movs	r2, #1
 80018ea:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	2200      	movs	r2, #0
 80018f0:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	2200      	movs	r2, #0
 80018f6:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80018f8:	187a      	adds	r2, r7, r1
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <MX_TIM3_Init+0xbc>)
 80018fc:	0011      	movs	r1, r2
 80018fe:	0018      	movs	r0, r3
 8001900:	f002 fe62 	bl	80045c8 <HAL_TIM_Encoder_Init>
 8001904:	1e03      	subs	r3, r0, #0
 8001906:	d001      	beq.n	800190c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001908:	f7ff fe67 	bl	80015da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800190c:	003b      	movs	r3, r7
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001912:	003b      	movs	r3, r7
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001918:	003a      	movs	r2, r7
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <MX_TIM3_Init+0xbc>)
 800191c:	0011      	movs	r1, r2
 800191e:	0018      	movs	r0, r3
 8001920:	f003 fca6 	bl	8005270 <HAL_TIMEx_MasterConfigSynchronization>
 8001924:	1e03      	subs	r3, r0, #0
 8001926:	d001      	beq.n	800192c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001928:	f7ff fe57 	bl	80015da <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800192c:	46c0      	nop			; (mov r8, r8)
 800192e:	46bd      	mov	sp, r7
 8001930:	b00d      	add	sp, #52	; 0x34
 8001932:	bd90      	pop	{r4, r7, pc}
 8001934:	20000148 	.word	0x20000148
 8001938:	40000400 	.word	0x40000400
 800193c:	0000ffff 	.word	0x0000ffff

08001940 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	0018      	movs	r0, r3
 800194a:	231c      	movs	r3, #28
 800194c:	001a      	movs	r2, r3
 800194e:	2100      	movs	r1, #0
 8001950:	f006 f9d6 	bl	8007d00 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001954:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <MX_TIM14_Init+0x94>)
 8001956:	4a20      	ldr	r2, [pc, #128]	; (80019d8 <MX_TIM14_Init+0x98>)
 8001958:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800195a:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <MX_TIM14_Init+0x94>)
 800195c:	2200      	movs	r2, #0
 800195e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001960:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <MX_TIM14_Init+0x94>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <MX_TIM14_Init+0x94>)
 8001968:	4a1c      	ldr	r2, [pc, #112]	; (80019dc <MX_TIM14_Init+0x9c>)
 800196a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <MX_TIM14_Init+0x94>)
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001972:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <MX_TIM14_Init+0x94>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001978:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <MX_TIM14_Init+0x94>)
 800197a:	0018      	movs	r0, r3
 800197c:	f002 fd6c 	bl	8004458 <HAL_TIM_Base_Init>
 8001980:	1e03      	subs	r3, r0, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001984:	f7ff fe29 	bl	80015da <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <MX_TIM14_Init+0x94>)
 800198a:	0018      	movs	r0, r3
 800198c:	f002 fdbc 	bl	8004508 <HAL_TIM_PWM_Init>
 8001990:	1e03      	subs	r3, r0, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8001994:	f7ff fe21 	bl	80015da <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	2260      	movs	r2, #96	; 0x60
 800199c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	2200      	movs	r2, #0
 80019a2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019b0:	1d39      	adds	r1, r7, #4
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <MX_TIM14_Init+0x94>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	0018      	movs	r0, r3
 80019b8:	f002 feae 	bl	8004718 <HAL_TIM_PWM_ConfigChannel>
 80019bc:	1e03      	subs	r3, r0, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80019c0:	f7ff fe0b 	bl	80015da <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <MX_TIM14_Init+0x94>)
 80019c6:	0018      	movs	r0, r3
 80019c8:	f000 fac4 	bl	8001f54 <HAL_TIM_MspPostInit>

}
 80019cc:	46c0      	nop			; (mov r8, r8)
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b008      	add	sp, #32
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000194 	.word	0x20000194
 80019d8:	40002000 	.word	0x40002000
 80019dc:	0000ffff 	.word	0x0000ffff

080019e0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b09c      	sub	sp, #112	; 0x70
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e6:	2360      	movs	r3, #96	; 0x60
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	0018      	movs	r0, r3
 80019ec:	2310      	movs	r3, #16
 80019ee:	001a      	movs	r2, r3
 80019f0:	2100      	movs	r1, #0
 80019f2:	f006 f985 	bl	8007d00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f6:	2354      	movs	r3, #84	; 0x54
 80019f8:	18fb      	adds	r3, r7, r3
 80019fa:	0018      	movs	r0, r3
 80019fc:	230c      	movs	r3, #12
 80019fe:	001a      	movs	r2, r3
 8001a00:	2100      	movs	r1, #0
 8001a02:	f006 f97d 	bl	8007d00 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a06:	2338      	movs	r3, #56	; 0x38
 8001a08:	18fb      	adds	r3, r7, r3
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	231c      	movs	r3, #28
 8001a0e:	001a      	movs	r2, r3
 8001a10:	2100      	movs	r1, #0
 8001a12:	f006 f975 	bl	8007d00 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	0018      	movs	r0, r3
 8001a1a:	2334      	movs	r3, #52	; 0x34
 8001a1c:	001a      	movs	r2, r3
 8001a1e:	2100      	movs	r1, #0
 8001a20:	f006 f96e 	bl	8007d00 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001a24:	4b4d      	ldr	r3, [pc, #308]	; (8001b5c <MX_TIM15_Init+0x17c>)
 8001a26:	4a4e      	ldr	r2, [pc, #312]	; (8001b60 <MX_TIM15_Init+0x180>)
 8001a28:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001a2a:	4b4c      	ldr	r3, [pc, #304]	; (8001b5c <MX_TIM15_Init+0x17c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a30:	4b4a      	ldr	r3, [pc, #296]	; (8001b5c <MX_TIM15_Init+0x17c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001a36:	4b49      	ldr	r3, [pc, #292]	; (8001b5c <MX_TIM15_Init+0x17c>)
 8001a38:	4a4a      	ldr	r2, [pc, #296]	; (8001b64 <MX_TIM15_Init+0x184>)
 8001a3a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3c:	4b47      	ldr	r3, [pc, #284]	; (8001b5c <MX_TIM15_Init+0x17c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001a42:	4b46      	ldr	r3, [pc, #280]	; (8001b5c <MX_TIM15_Init+0x17c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a48:	4b44      	ldr	r3, [pc, #272]	; (8001b5c <MX_TIM15_Init+0x17c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001a4e:	4b43      	ldr	r3, [pc, #268]	; (8001b5c <MX_TIM15_Init+0x17c>)
 8001a50:	0018      	movs	r0, r3
 8001a52:	f002 fd01 	bl	8004458 <HAL_TIM_Base_Init>
 8001a56:	1e03      	subs	r3, r0, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8001a5a:	f7ff fdbe 	bl	80015da <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a5e:	2160      	movs	r1, #96	; 0x60
 8001a60:	187b      	adds	r3, r7, r1
 8001a62:	2280      	movs	r2, #128	; 0x80
 8001a64:	0152      	lsls	r2, r2, #5
 8001a66:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001a68:	187a      	adds	r2, r7, r1
 8001a6a:	4b3c      	ldr	r3, [pc, #240]	; (8001b5c <MX_TIM15_Init+0x17c>)
 8001a6c:	0011      	movs	r1, r2
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f002 ff52 	bl	8004918 <HAL_TIM_ConfigClockSource>
 8001a74:	1e03      	subs	r3, r0, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8001a78:	f7ff fdaf 	bl	80015da <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001a7c:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <MX_TIM15_Init+0x17c>)
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f002 fd42 	bl	8004508 <HAL_TIM_PWM_Init>
 8001a84:	1e03      	subs	r3, r0, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8001a88:	f7ff fda7 	bl	80015da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8c:	2154      	movs	r1, #84	; 0x54
 8001a8e:	187b      	adds	r3, r7, r1
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a94:	187b      	adds	r3, r7, r1
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001a9a:	187a      	adds	r2, r7, r1
 8001a9c:	4b2f      	ldr	r3, [pc, #188]	; (8001b5c <MX_TIM15_Init+0x17c>)
 8001a9e:	0011      	movs	r1, r2
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f003 fbe5 	bl	8005270 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa6:	1e03      	subs	r3, r0, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8001aaa:	f7ff fd96 	bl	80015da <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aae:	2138      	movs	r1, #56	; 0x38
 8001ab0:	187b      	adds	r3, r7, r1
 8001ab2:	2260      	movs	r2, #96	; 0x60
 8001ab4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001ab6:	187b      	adds	r3, r7, r1
 8001ab8:	2200      	movs	r2, #0
 8001aba:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ac2:	187b      	adds	r3, r7, r1
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ac8:	187b      	adds	r3, r7, r1
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ace:	187b      	adds	r3, r7, r1
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ada:	1879      	adds	r1, r7, r1
 8001adc:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <MX_TIM15_Init+0x17c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f002 fe19 	bl	8004718 <HAL_TIM_PWM_ConfigChannel>
 8001ae6:	1e03      	subs	r3, r0, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001aea:	f7ff fd76 	bl	80015da <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aee:	2338      	movs	r3, #56	; 0x38
 8001af0:	18f9      	adds	r1, r7, r3
 8001af2:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <MX_TIM15_Init+0x17c>)
 8001af4:	2204      	movs	r2, #4
 8001af6:	0018      	movs	r0, r3
 8001af8:	f002 fe0e 	bl	8004718 <HAL_TIM_PWM_ConfigChannel>
 8001afc:	1e03      	subs	r3, r0, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 8001b00:	f7ff fd6b 	bl	80015da <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	2200      	movs	r2, #0
 8001b1a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	2200      	movs	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	2280      	movs	r2, #128	; 0x80
 8001b26:	0192      	lsls	r2, r2, #6
 8001b28:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	2200      	movs	r2, #0
 8001b34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001b36:	1d3a      	adds	r2, r7, #4
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <MX_TIM15_Init+0x17c>)
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f003 fbff 	bl	8005340 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b42:	1e03      	subs	r3, r0, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM15_Init+0x16a>
  {
    Error_Handler();
 8001b46:	f7ff fd48 	bl	80015da <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001b4a:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <MX_TIM15_Init+0x17c>)
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f000 fa01 	bl	8001f54 <HAL_TIM_MspPostInit>

}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b01c      	add	sp, #112	; 0x70
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	200001e0 	.word	0x200001e0
 8001b60:	40014000 	.word	0x40014000
 8001b64:	0000ffff 	.word	0x0000ffff

08001b68 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b094      	sub	sp, #80	; 0x50
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b6e:	2334      	movs	r3, #52	; 0x34
 8001b70:	18fb      	adds	r3, r7, r3
 8001b72:	0018      	movs	r0, r3
 8001b74:	231c      	movs	r3, #28
 8001b76:	001a      	movs	r2, r3
 8001b78:	2100      	movs	r1, #0
 8001b7a:	f006 f8c1 	bl	8007d00 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b7e:	003b      	movs	r3, r7
 8001b80:	0018      	movs	r0, r3
 8001b82:	2334      	movs	r3, #52	; 0x34
 8001b84:	001a      	movs	r2, r3
 8001b86:	2100      	movs	r1, #0
 8001b88:	f006 f8ba 	bl	8007d00 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001b8c:	4b37      	ldr	r3, [pc, #220]	; (8001c6c <MX_TIM16_Init+0x104>)
 8001b8e:	4a38      	ldr	r2, [pc, #224]	; (8001c70 <MX_TIM16_Init+0x108>)
 8001b90:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001b92:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <MX_TIM16_Init+0x104>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b98:	4b34      	ldr	r3, [pc, #208]	; (8001c6c <MX_TIM16_Init+0x104>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001b9e:	4b33      	ldr	r3, [pc, #204]	; (8001c6c <MX_TIM16_Init+0x104>)
 8001ba0:	4a34      	ldr	r2, [pc, #208]	; (8001c74 <MX_TIM16_Init+0x10c>)
 8001ba2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba4:	4b31      	ldr	r3, [pc, #196]	; (8001c6c <MX_TIM16_Init+0x104>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001baa:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <MX_TIM16_Init+0x104>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb0:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <MX_TIM16_Init+0x104>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001bb6:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <MX_TIM16_Init+0x104>)
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f002 fc4d 	bl	8004458 <HAL_TIM_Base_Init>
 8001bbe:	1e03      	subs	r3, r0, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8001bc2:	f7ff fd0a 	bl	80015da <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001bc6:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <MX_TIM16_Init+0x104>)
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f002 fc9d 	bl	8004508 <HAL_TIM_PWM_Init>
 8001bce:	1e03      	subs	r3, r0, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8001bd2:	f7ff fd02 	bl	80015da <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bd6:	2134      	movs	r1, #52	; 0x34
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	2260      	movs	r2, #96	; 0x60
 8001bdc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001bde:	187b      	adds	r3, r7, r1
 8001be0:	2200      	movs	r2, #0
 8001be2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001be4:	187b      	adds	r3, r7, r1
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bea:	187b      	adds	r3, r7, r1
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bf6:	187b      	adds	r3, r7, r1
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bfc:	187b      	adds	r3, r7, r1
 8001bfe:	2200      	movs	r2, #0
 8001c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c02:	1879      	adds	r1, r7, r1
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <MX_TIM16_Init+0x104>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f002 fd85 	bl	8004718 <HAL_TIM_PWM_ConfigChannel>
 8001c0e:	1e03      	subs	r3, r0, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8001c12:	f7ff fce2 	bl	80015da <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c16:	003b      	movs	r3, r7
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c1c:	003b      	movs	r3, r7
 8001c1e:	2200      	movs	r2, #0
 8001c20:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c22:	003b      	movs	r3, r7
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c28:	003b      	movs	r3, r7
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c2e:	003b      	movs	r3, r7
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c34:	003b      	movs	r3, r7
 8001c36:	2280      	movs	r2, #128	; 0x80
 8001c38:	0192      	lsls	r2, r2, #6
 8001c3a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c3c:	003b      	movs	r3, r7
 8001c3e:	2200      	movs	r2, #0
 8001c40:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c42:	003b      	movs	r3, r7
 8001c44:	2200      	movs	r2, #0
 8001c46:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001c48:	003a      	movs	r2, r7
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <MX_TIM16_Init+0x104>)
 8001c4c:	0011      	movs	r1, r2
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f003 fb76 	bl	8005340 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c54:	1e03      	subs	r3, r0, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8001c58:	f7ff fcbf 	bl	80015da <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <MX_TIM16_Init+0x104>)
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f000 f978 	bl	8001f54 <HAL_TIM_MspPostInit>

}
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b014      	add	sp, #80	; 0x50
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	2000022c 	.word	0x2000022c
 8001c70:	40014400 	.word	0x40014400
 8001c74:	0000ffff 	.word	0x0000ffff

08001c78 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b094      	sub	sp, #80	; 0x50
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c7e:	2334      	movs	r3, #52	; 0x34
 8001c80:	18fb      	adds	r3, r7, r3
 8001c82:	0018      	movs	r0, r3
 8001c84:	231c      	movs	r3, #28
 8001c86:	001a      	movs	r2, r3
 8001c88:	2100      	movs	r1, #0
 8001c8a:	f006 f839 	bl	8007d00 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c8e:	003b      	movs	r3, r7
 8001c90:	0018      	movs	r0, r3
 8001c92:	2334      	movs	r3, #52	; 0x34
 8001c94:	001a      	movs	r2, r3
 8001c96:	2100      	movs	r1, #0
 8001c98:	f006 f832 	bl	8007d00 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001c9c:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <MX_TIM17_Init+0x104>)
 8001c9e:	4a38      	ldr	r2, [pc, #224]	; (8001d80 <MX_TIM17_Init+0x108>)
 8001ca0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001ca2:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <MX_TIM17_Init+0x104>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca8:	4b34      	ldr	r3, [pc, #208]	; (8001d7c <MX_TIM17_Init+0x104>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001cae:	4b33      	ldr	r3, [pc, #204]	; (8001d7c <MX_TIM17_Init+0x104>)
 8001cb0:	4a34      	ldr	r2, [pc, #208]	; (8001d84 <MX_TIM17_Init+0x10c>)
 8001cb2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb4:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <MX_TIM17_Init+0x104>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001cba:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <MX_TIM17_Init+0x104>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <MX_TIM17_Init+0x104>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <MX_TIM17_Init+0x104>)
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f002 fbc5 	bl	8004458 <HAL_TIM_Base_Init>
 8001cce:	1e03      	subs	r3, r0, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8001cd2:	f7ff fc82 	bl	80015da <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001cd6:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <MX_TIM17_Init+0x104>)
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f002 fc15 	bl	8004508 <HAL_TIM_PWM_Init>
 8001cde:	1e03      	subs	r3, r0, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8001ce2:	f7ff fc7a 	bl	80015da <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ce6:	2134      	movs	r1, #52	; 0x34
 8001ce8:	187b      	adds	r3, r7, r1
 8001cea:	2260      	movs	r2, #96	; 0x60
 8001cec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001cee:	187b      	adds	r3, r7, r1
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cfa:	187b      	adds	r3, r7, r1
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d06:	187b      	adds	r3, r7, r1
 8001d08:	2200      	movs	r2, #0
 8001d0a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d0c:	187b      	adds	r3, r7, r1
 8001d0e:	2200      	movs	r2, #0
 8001d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d12:	1879      	adds	r1, r7, r1
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <MX_TIM17_Init+0x104>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f002 fcfd 	bl	8004718 <HAL_TIM_PWM_ConfigChannel>
 8001d1e:	1e03      	subs	r3, r0, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8001d22:	f7ff fc5a 	bl	80015da <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d26:	003b      	movs	r3, r7
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d2c:	003b      	movs	r3, r7
 8001d2e:	2200      	movs	r2, #0
 8001d30:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d32:	003b      	movs	r3, r7
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d38:	003b      	movs	r3, r7
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d3e:	003b      	movs	r3, r7
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d44:	003b      	movs	r3, r7
 8001d46:	2280      	movs	r2, #128	; 0x80
 8001d48:	0192      	lsls	r2, r2, #6
 8001d4a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d4c:	003b      	movs	r3, r7
 8001d4e:	2200      	movs	r2, #0
 8001d50:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d52:	003b      	movs	r3, r7
 8001d54:	2200      	movs	r2, #0
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001d58:	003a      	movs	r2, r7
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <MX_TIM17_Init+0x104>)
 8001d5c:	0011      	movs	r1, r2
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f003 faee 	bl	8005340 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d64:	1e03      	subs	r3, r0, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8001d68:	f7ff fc37 	bl	80015da <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <MX_TIM17_Init+0x104>)
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f000 f8f0 	bl	8001f54 <HAL_TIM_MspPostInit>

}
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b014      	add	sp, #80	; 0x50
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000278 	.word	0x20000278
 8001d80:	40014800 	.word	0x40014800
 8001d84:	0000ffff 	.word	0x0000ffff

08001d88 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b08d      	sub	sp, #52	; 0x34
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	241c      	movs	r4, #28
 8001d92:	193b      	adds	r3, r7, r4
 8001d94:	0018      	movs	r0, r3
 8001d96:	2314      	movs	r3, #20
 8001d98:	001a      	movs	r2, r3
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	f005 ffb0 	bl	8007d00 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a36      	ldr	r2, [pc, #216]	; (8001e80 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d131      	bne.n	8001e0e <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001daa:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dae:	4b35      	ldr	r3, [pc, #212]	; (8001e84 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001db0:	2180      	movs	r1, #128	; 0x80
 8001db2:	0109      	lsls	r1, r1, #4
 8001db4:	430a      	orrs	r2, r1
 8001db6:	641a      	str	r2, [r3, #64]	; 0x40
 8001db8:	4b32      	ldr	r3, [pc, #200]	; (8001e84 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001dba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	011b      	lsls	r3, r3, #4
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
 8001dc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc6:	4b2f      	ldr	r3, [pc, #188]	; (8001e84 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dca:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001dcc:	2104      	movs	r1, #4
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	635a      	str	r2, [r3, #52]	; 0x34
 8001dd2:	4b2c      	ldr	r3, [pc, #176]	; (8001e84 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	4013      	ands	r3, r2
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC8     ------> TIM1_CH1
    PC9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH1_ENCODER_RB_Pin|TIM1_CH2_ENCODER_RA_Pin;
 8001dde:	193b      	adds	r3, r7, r4
 8001de0:	22c0      	movs	r2, #192	; 0xc0
 8001de2:	0092      	lsls	r2, r2, #2
 8001de4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	0021      	movs	r1, r4
 8001de8:	187b      	adds	r3, r7, r1
 8001dea:	2202      	movs	r2, #2
 8001dec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	187b      	adds	r3, r7, r1
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	187b      	adds	r3, r7, r1
 8001df6:	2200      	movs	r2, #0
 8001df8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001dfa:	187b      	adds	r3, r7, r1
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e00:	187b      	adds	r3, r7, r1
 8001e02:	4a21      	ldr	r2, [pc, #132]	; (8001e88 <HAL_TIM_Encoder_MspInit+0x100>)
 8001e04:	0019      	movs	r1, r3
 8001e06:	0010      	movs	r0, r2
 8001e08:	f001 fb6a 	bl	80034e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e0c:	e033      	b.n	8001e76 <HAL_TIM_Encoder_MspInit+0xee>
  else if(tim_encoderHandle->Instance==TIM3)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x104>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d12e      	bne.n	8001e76 <HAL_TIM_Encoder_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e18:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001e1e:	2102      	movs	r1, #2
 8001e20:	430a      	orrs	r2, r1
 8001e22:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e24:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e28:	2202      	movs	r2, #2
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e30:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e34:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001e36:	2101      	movs	r1, #1
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	635a      	str	r2, [r3, #52]	; 0x34
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e40:	2201      	movs	r2, #1
 8001e42:	4013      	ands	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_ENCODER_LA_Pin|TIM3_CH2_ENCODER_LB_Pin;
 8001e48:	211c      	movs	r1, #28
 8001e4a:	187b      	adds	r3, r7, r1
 8001e4c:	22c0      	movs	r2, #192	; 0xc0
 8001e4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	187b      	adds	r3, r7, r1
 8001e52:	2202      	movs	r2, #2
 8001e54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	187b      	adds	r3, r7, r1
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	187b      	adds	r3, r7, r1
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001e62:	187b      	adds	r3, r7, r1
 8001e64:	2201      	movs	r2, #1
 8001e66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	187a      	adds	r2, r7, r1
 8001e6a:	23a0      	movs	r3, #160	; 0xa0
 8001e6c:	05db      	lsls	r3, r3, #23
 8001e6e:	0011      	movs	r1, r2
 8001e70:	0018      	movs	r0, r3
 8001e72:	f001 fb35 	bl	80034e0 <HAL_GPIO_Init>
}
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	b00d      	add	sp, #52	; 0x34
 8001e7c:	bd90      	pop	{r4, r7, pc}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	40012c00 	.word	0x40012c00
 8001e84:	40021000 	.word	0x40021000
 8001e88:	50000800 	.word	0x50000800
 8001e8c:	40000400 	.word	0x40000400

08001e90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a28      	ldr	r2, [pc, #160]	; (8001f40 <HAL_TIM_Base_MspInit+0xb0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d10e      	bne.n	8001ec0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001ea2:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <HAL_TIM_Base_MspInit+0xb4>)
 8001ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ea6:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <HAL_TIM_Base_MspInit+0xb4>)
 8001ea8:	2180      	movs	r1, #128	; 0x80
 8001eaa:	0209      	lsls	r1, r1, #8
 8001eac:	430a      	orrs	r2, r1
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40
 8001eb0:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <HAL_TIM_Base_MspInit+0xb4>)
 8001eb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	021b      	lsls	r3, r3, #8
 8001eb8:	4013      	ands	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001ebe:	e03a      	b.n	8001f36 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM15)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a20      	ldr	r2, [pc, #128]	; (8001f48 <HAL_TIM_Base_MspInit+0xb8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d10e      	bne.n	8001ee8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001eca:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <HAL_TIM_Base_MspInit+0xb4>)
 8001ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ece:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <HAL_TIM_Base_MspInit+0xb4>)
 8001ed0:	2180      	movs	r1, #128	; 0x80
 8001ed2:	0249      	lsls	r1, r1, #9
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	641a      	str	r2, [r3, #64]	; 0x40
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <HAL_TIM_Base_MspInit+0xb4>)
 8001eda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	025b      	lsls	r3, r3, #9
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	693b      	ldr	r3, [r7, #16]
}
 8001ee6:	e026      	b.n	8001f36 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM16)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a17      	ldr	r2, [pc, #92]	; (8001f4c <HAL_TIM_Base_MspInit+0xbc>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d10e      	bne.n	8001f10 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ef2:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <HAL_TIM_Base_MspInit+0xb4>)
 8001ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ef6:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <HAL_TIM_Base_MspInit+0xb4>)
 8001ef8:	2180      	movs	r1, #128	; 0x80
 8001efa:	0289      	lsls	r1, r1, #10
 8001efc:	430a      	orrs	r2, r1
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40
 8001f00:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <HAL_TIM_Base_MspInit+0xb4>)
 8001f02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	029b      	lsls	r3, r3, #10
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
}
 8001f0e:	e012      	b.n	8001f36 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM17)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0e      	ldr	r2, [pc, #56]	; (8001f50 <HAL_TIM_Base_MspInit+0xc0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d10d      	bne.n	8001f36 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <HAL_TIM_Base_MspInit+0xb4>)
 8001f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_TIM_Base_MspInit+0xb4>)
 8001f20:	2180      	movs	r1, #128	; 0x80
 8001f22:	02c9      	lsls	r1, r1, #11
 8001f24:	430a      	orrs	r2, r1
 8001f26:	641a      	str	r2, [r3, #64]	; 0x40
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_TIM_Base_MspInit+0xb4>)
 8001f2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	02db      	lsls	r3, r3, #11
 8001f30:	4013      	ands	r3, r2
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b006      	add	sp, #24
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	40002000 	.word	0x40002000
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40014000 	.word	0x40014000
 8001f4c:	40014400 	.word	0x40014400
 8001f50:	40014800 	.word	0x40014800

08001f54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b08d      	sub	sp, #52	; 0x34
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	241c      	movs	r4, #28
 8001f5e:	193b      	adds	r3, r7, r4
 8001f60:	0018      	movs	r0, r3
 8001f62:	2314      	movs	r3, #20
 8001f64:	001a      	movs	r2, r3
 8001f66:	2100      	movs	r1, #0
 8001f68:	f005 feca 	bl	8007d00 <memset>
  if(timHandle->Instance==TIM14)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a62      	ldr	r2, [pc, #392]	; (80020fc <HAL_TIM_MspPostInit+0x1a8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d123      	bne.n	8001fbe <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f76:	4b62      	ldr	r3, [pc, #392]	; (8002100 <HAL_TIM_MspPostInit+0x1ac>)
 8001f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f7a:	4b61      	ldr	r3, [pc, #388]	; (8002100 <HAL_TIM_MspPostInit+0x1ac>)
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	635a      	str	r2, [r3, #52]	; 0x34
 8001f82:	4b5f      	ldr	r3, [pc, #380]	; (8002100 <HAL_TIM_MspPostInit+0x1ac>)
 8001f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f86:	2201      	movs	r2, #1
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
 8001f8c:	69bb      	ldr	r3, [r7, #24]
    /**TIM14 GPIO Configuration
    PA4     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = TIM14_CH1_M_SCTR_Pin;
 8001f8e:	0021      	movs	r1, r4
 8001f90:	187b      	adds	r3, r7, r1
 8001f92:	2210      	movs	r2, #16
 8001f94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	187b      	adds	r3, r7, r1
 8001f98:	2202      	movs	r2, #2
 8001f9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	187b      	adds	r3, r7, r1
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa2:	187b      	adds	r3, r7, r1
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8001fa8:	187b      	adds	r3, r7, r1
 8001faa:	2204      	movs	r2, #4
 8001fac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM14_CH1_M_SCTR_GPIO_Port, &GPIO_InitStruct);
 8001fae:	187a      	adds	r2, r7, r1
 8001fb0:	23a0      	movs	r3, #160	; 0xa0
 8001fb2:	05db      	lsls	r3, r3, #23
 8001fb4:	0011      	movs	r1, r2
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f001 fa92 	bl	80034e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001fbc:	e099      	b.n	80020f2 <HAL_TIM_MspPostInit+0x19e>
  else if(timHandle->Instance==TIM15)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a50      	ldr	r2, [pc, #320]	; (8002104 <HAL_TIM_MspPostInit+0x1b0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d145      	bne.n	8002054 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc8:	4b4d      	ldr	r3, [pc, #308]	; (8002100 <HAL_TIM_MspPostInit+0x1ac>)
 8001fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fcc:	4b4c      	ldr	r3, [pc, #304]	; (8002100 <HAL_TIM_MspPostInit+0x1ac>)
 8001fce:	2104      	movs	r1, #4
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	635a      	str	r2, [r3, #52]	; 0x34
 8001fd4:	4b4a      	ldr	r3, [pc, #296]	; (8002100 <HAL_TIM_MspPostInit+0x1ac>)
 8001fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd8:	2204      	movs	r2, #4
 8001fda:	4013      	ands	r3, r2
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe0:	4b47      	ldr	r3, [pc, #284]	; (8002100 <HAL_TIM_MspPostInit+0x1ac>)
 8001fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fe4:	4b46      	ldr	r3, [pc, #280]	; (8002100 <HAL_TIM_MspPostInit+0x1ac>)
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	635a      	str	r2, [r3, #52]	; 0x34
 8001fec:	4b44      	ldr	r3, [pc, #272]	; (8002100 <HAL_TIM_MspPostInit+0x1ac>)
 8001fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM15_CH2_REV_MR_Pin;
 8001ff8:	241c      	movs	r4, #28
 8001ffa:	193b      	adds	r3, r7, r4
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	193b      	adds	r3, r7, r4
 8002002:	2202      	movs	r2, #2
 8002004:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	193b      	adds	r3, r7, r4
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	193b      	adds	r3, r7, r4
 800200e:	2200      	movs	r2, #0
 8002010:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 8002012:	193b      	adds	r3, r7, r4
 8002014:	2202      	movs	r2, #2
 8002016:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM15_CH2_REV_MR_GPIO_Port, &GPIO_InitStruct);
 8002018:	193b      	adds	r3, r7, r4
 800201a:	4a3b      	ldr	r2, [pc, #236]	; (8002108 <HAL_TIM_MspPostInit+0x1b4>)
 800201c:	0019      	movs	r1, r3
 800201e:	0010      	movs	r0, r2
 8002020:	f001 fa5e 	bl	80034e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM15_CH1_REV_ML_Pin;
 8002024:	0021      	movs	r1, r4
 8002026:	187b      	adds	r3, r7, r1
 8002028:	2204      	movs	r2, #4
 800202a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202c:	187b      	adds	r3, r7, r1
 800202e:	2202      	movs	r2, #2
 8002030:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	187b      	adds	r3, r7, r1
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	187b      	adds	r3, r7, r1
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 800203e:	187b      	adds	r3, r7, r1
 8002040:	2205      	movs	r2, #5
 8002042:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM15_CH1_REV_ML_GPIO_Port, &GPIO_InitStruct);
 8002044:	187a      	adds	r2, r7, r1
 8002046:	23a0      	movs	r3, #160	; 0xa0
 8002048:	05db      	lsls	r3, r3, #23
 800204a:	0011      	movs	r1, r2
 800204c:	0018      	movs	r0, r3
 800204e:	f001 fa47 	bl	80034e0 <HAL_GPIO_Init>
}
 8002052:	e04e      	b.n	80020f2 <HAL_TIM_MspPostInit+0x19e>
  else if(timHandle->Instance==TIM16)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a2c      	ldr	r2, [pc, #176]	; (800210c <HAL_TIM_MspPostInit+0x1b8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d122      	bne.n	80020a4 <HAL_TIM_MspPostInit+0x150>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800205e:	4b28      	ldr	r3, [pc, #160]	; (8002100 <HAL_TIM_MspPostInit+0x1ac>)
 8002060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002062:	4b27      	ldr	r3, [pc, #156]	; (8002100 <HAL_TIM_MspPostInit+0x1ac>)
 8002064:	2108      	movs	r1, #8
 8002066:	430a      	orrs	r2, r1
 8002068:	635a      	str	r2, [r3, #52]	; 0x34
 800206a:	4b25      	ldr	r3, [pc, #148]	; (8002100 <HAL_TIM_MspPostInit+0x1ac>)
 800206c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206e:	2208      	movs	r2, #8
 8002070:	4013      	ands	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM16_CH1_FWD_ML_Pin;
 8002076:	211c      	movs	r1, #28
 8002078:	187b      	adds	r3, r7, r1
 800207a:	2201      	movs	r2, #1
 800207c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	187b      	adds	r3, r7, r1
 8002080:	2202      	movs	r2, #2
 8002082:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	187b      	adds	r3, r7, r1
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	187b      	adds	r3, r7, r1
 800208c:	2200      	movs	r2, #0
 800208e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8002090:	187b      	adds	r3, r7, r1
 8002092:	2202      	movs	r2, #2
 8002094:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM16_CH1_FWD_ML_GPIO_Port, &GPIO_InitStruct);
 8002096:	187b      	adds	r3, r7, r1
 8002098:	4a1d      	ldr	r2, [pc, #116]	; (8002110 <HAL_TIM_MspPostInit+0x1bc>)
 800209a:	0019      	movs	r1, r3
 800209c:	0010      	movs	r0, r2
 800209e:	f001 fa1f 	bl	80034e0 <HAL_GPIO_Init>
}
 80020a2:	e026      	b.n	80020f2 <HAL_TIM_MspPostInit+0x19e>
  else if(timHandle->Instance==TIM17)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a1a      	ldr	r2, [pc, #104]	; (8002114 <HAL_TIM_MspPostInit+0x1c0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d121      	bne.n	80020f2 <HAL_TIM_MspPostInit+0x19e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ae:	4b14      	ldr	r3, [pc, #80]	; (8002100 <HAL_TIM_MspPostInit+0x1ac>)
 80020b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <HAL_TIM_MspPostInit+0x1ac>)
 80020b4:	2108      	movs	r1, #8
 80020b6:	430a      	orrs	r2, r1
 80020b8:	635a      	str	r2, [r3, #52]	; 0x34
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_TIM_MspPostInit+0x1ac>)
 80020bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020be:	2208      	movs	r2, #8
 80020c0:	4013      	ands	r3, r2
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM17_CH1_FWD_MR_Pin;
 80020c6:	211c      	movs	r1, #28
 80020c8:	187b      	adds	r3, r7, r1
 80020ca:	2202      	movs	r2, #2
 80020cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	187b      	adds	r3, r7, r1
 80020d0:	2202      	movs	r2, #2
 80020d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	187b      	adds	r3, r7, r1
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	187b      	adds	r3, r7, r1
 80020dc:	2200      	movs	r2, #0
 80020de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 80020e0:	187b      	adds	r3, r7, r1
 80020e2:	2202      	movs	r2, #2
 80020e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM17_CH1_FWD_MR_GPIO_Port, &GPIO_InitStruct);
 80020e6:	187b      	adds	r3, r7, r1
 80020e8:	4a09      	ldr	r2, [pc, #36]	; (8002110 <HAL_TIM_MspPostInit+0x1bc>)
 80020ea:	0019      	movs	r1, r3
 80020ec:	0010      	movs	r0, r2
 80020ee:	f001 f9f7 	bl	80034e0 <HAL_GPIO_Init>
}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	46bd      	mov	sp, r7
 80020f6:	b00d      	add	sp, #52	; 0x34
 80020f8:	bd90      	pop	{r4, r7, pc}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	40002000 	.word	0x40002000
 8002100:	40021000 	.word	0x40021000
 8002104:	40014000 	.word	0x40014000
 8002108:	50000800 	.word	0x50000800
 800210c:	40014400 	.word	0x40014400
 8002110:	50000c00 	.word	0x50000c00
 8002114:	40014800 	.word	0x40014800

08002118 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800211c:	4b23      	ldr	r3, [pc, #140]	; (80021ac <MX_USART1_UART_Init+0x94>)
 800211e:	4a24      	ldr	r2, [pc, #144]	; (80021b0 <MX_USART1_UART_Init+0x98>)
 8002120:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002122:	4b22      	ldr	r3, [pc, #136]	; (80021ac <MX_USART1_UART_Init+0x94>)
 8002124:	22e1      	movs	r2, #225	; 0xe1
 8002126:	0252      	lsls	r2, r2, #9
 8002128:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800212a:	4b20      	ldr	r3, [pc, #128]	; (80021ac <MX_USART1_UART_Init+0x94>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002130:	4b1e      	ldr	r3, [pc, #120]	; (80021ac <MX_USART1_UART_Init+0x94>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002136:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <MX_USART1_UART_Init+0x94>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800213c:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <MX_USART1_UART_Init+0x94>)
 800213e:	220c      	movs	r2, #12
 8002140:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002142:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <MX_USART1_UART_Init+0x94>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002148:	4b18      	ldr	r3, [pc, #96]	; (80021ac <MX_USART1_UART_Init+0x94>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800214e:	4b17      	ldr	r3, [pc, #92]	; (80021ac <MX_USART1_UART_Init+0x94>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002154:	4b15      	ldr	r3, [pc, #84]	; (80021ac <MX_USART1_UART_Init+0x94>)
 8002156:	2200      	movs	r2, #0
 8002158:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800215a:	4b14      	ldr	r3, [pc, #80]	; (80021ac <MX_USART1_UART_Init+0x94>)
 800215c:	2200      	movs	r2, #0
 800215e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <MX_USART1_UART_Init+0x94>)
 8002162:	0018      	movs	r0, r3
 8002164:	f003 f992 	bl	800548c <HAL_UART_Init>
 8002168:	1e03      	subs	r3, r0, #0
 800216a:	d001      	beq.n	8002170 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800216c:	f7ff fa35 	bl	80015da <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002170:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <MX_USART1_UART_Init+0x94>)
 8002172:	2100      	movs	r1, #0
 8002174:	0018      	movs	r0, r3
 8002176:	f003 fe23 	bl	8005dc0 <HAL_UARTEx_SetTxFifoThreshold>
 800217a:	1e03      	subs	r3, r0, #0
 800217c:	d001      	beq.n	8002182 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800217e:	f7ff fa2c 	bl	80015da <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <MX_USART1_UART_Init+0x94>)
 8002184:	2100      	movs	r1, #0
 8002186:	0018      	movs	r0, r3
 8002188:	f003 fe5a 	bl	8005e40 <HAL_UARTEx_SetRxFifoThreshold>
 800218c:	1e03      	subs	r3, r0, #0
 800218e:	d001      	beq.n	8002194 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002190:	f7ff fa23 	bl	80015da <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <MX_USART1_UART_Init+0x94>)
 8002196:	0018      	movs	r0, r3
 8002198:	f003 fdd8 	bl	8005d4c <HAL_UARTEx_DisableFifoMode>
 800219c:	1e03      	subs	r3, r0, #0
 800219e:	d001      	beq.n	80021a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80021a0:	f7ff fa1b 	bl	80015da <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021a4:	46c0      	nop			; (mov r8, r8)
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	200002c4 	.word	0x200002c4
 80021b0:	40013800 	.word	0x40013800

080021b4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021b8:	4b23      	ldr	r3, [pc, #140]	; (8002248 <MX_USART2_UART_Init+0x94>)
 80021ba:	4a24      	ldr	r2, [pc, #144]	; (800224c <MX_USART2_UART_Init+0x98>)
 80021bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021be:	4b22      	ldr	r3, [pc, #136]	; (8002248 <MX_USART2_UART_Init+0x94>)
 80021c0:	22e1      	movs	r2, #225	; 0xe1
 80021c2:	0252      	lsls	r2, r2, #9
 80021c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <MX_USART2_UART_Init+0x94>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021cc:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <MX_USART2_UART_Init+0x94>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <MX_USART2_UART_Init+0x94>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021d8:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <MX_USART2_UART_Init+0x94>)
 80021da:	220c      	movs	r2, #12
 80021dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021de:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <MX_USART2_UART_Init+0x94>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e4:	4b18      	ldr	r3, [pc, #96]	; (8002248 <MX_USART2_UART_Init+0x94>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ea:	4b17      	ldr	r3, [pc, #92]	; (8002248 <MX_USART2_UART_Init+0x94>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021f0:	4b15      	ldr	r3, [pc, #84]	; (8002248 <MX_USART2_UART_Init+0x94>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021f6:	4b14      	ldr	r3, [pc, #80]	; (8002248 <MX_USART2_UART_Init+0x94>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <MX_USART2_UART_Init+0x94>)
 80021fe:	0018      	movs	r0, r3
 8002200:	f003 f944 	bl	800548c <HAL_UART_Init>
 8002204:	1e03      	subs	r3, r0, #0
 8002206:	d001      	beq.n	800220c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002208:	f7ff f9e7 	bl	80015da <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800220c:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <MX_USART2_UART_Init+0x94>)
 800220e:	2100      	movs	r1, #0
 8002210:	0018      	movs	r0, r3
 8002212:	f003 fdd5 	bl	8005dc0 <HAL_UARTEx_SetTxFifoThreshold>
 8002216:	1e03      	subs	r3, r0, #0
 8002218:	d001      	beq.n	800221e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800221a:	f7ff f9de 	bl	80015da <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800221e:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <MX_USART2_UART_Init+0x94>)
 8002220:	2100      	movs	r1, #0
 8002222:	0018      	movs	r0, r3
 8002224:	f003 fe0c 	bl	8005e40 <HAL_UARTEx_SetRxFifoThreshold>
 8002228:	1e03      	subs	r3, r0, #0
 800222a:	d001      	beq.n	8002230 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800222c:	f7ff f9d5 	bl	80015da <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <MX_USART2_UART_Init+0x94>)
 8002232:	0018      	movs	r0, r3
 8002234:	f003 fd8a 	bl	8005d4c <HAL_UARTEx_DisableFifoMode>
 8002238:	1e03      	subs	r3, r0, #0
 800223a:	d001      	beq.n	8002240 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800223c:	f7ff f9cd 	bl	80015da <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	20000358 	.word	0x20000358
 800224c:	40004400 	.word	0x40004400

08002250 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b093      	sub	sp, #76	; 0x4c
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	2334      	movs	r3, #52	; 0x34
 800225a:	18fb      	adds	r3, r7, r3
 800225c:	0018      	movs	r0, r3
 800225e:	2314      	movs	r3, #20
 8002260:	001a      	movs	r2, r3
 8002262:	2100      	movs	r1, #0
 8002264:	f005 fd4c 	bl	8007d00 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002268:	2418      	movs	r4, #24
 800226a:	193b      	adds	r3, r7, r4
 800226c:	0018      	movs	r0, r3
 800226e:	231c      	movs	r3, #28
 8002270:	001a      	movs	r2, r3
 8002272:	2100      	movs	r1, #0
 8002274:	f005 fd44 	bl	8007d00 <memset>
  if(uartHandle->Instance==USART1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a44      	ldr	r2, [pc, #272]	; (8002390 <HAL_UART_MspInit+0x140>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d13e      	bne.n	8002300 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002282:	193b      	adds	r3, r7, r4
 8002284:	2201      	movs	r2, #1
 8002286:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002288:	193b      	adds	r3, r7, r4
 800228a:	2200      	movs	r2, #0
 800228c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800228e:	193b      	adds	r3, r7, r4
 8002290:	0018      	movs	r0, r3
 8002292:	f001 ffad 	bl	80041f0 <HAL_RCCEx_PeriphCLKConfig>
 8002296:	1e03      	subs	r3, r0, #0
 8002298:	d001      	beq.n	800229e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800229a:	f7ff f99e 	bl	80015da <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800229e:	4b3d      	ldr	r3, [pc, #244]	; (8002394 <HAL_UART_MspInit+0x144>)
 80022a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022a2:	4b3c      	ldr	r3, [pc, #240]	; (8002394 <HAL_UART_MspInit+0x144>)
 80022a4:	2180      	movs	r1, #128	; 0x80
 80022a6:	01c9      	lsls	r1, r1, #7
 80022a8:	430a      	orrs	r2, r1
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40
 80022ac:	4b39      	ldr	r3, [pc, #228]	; (8002394 <HAL_UART_MspInit+0x144>)
 80022ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	01db      	lsls	r3, r3, #7
 80022b4:	4013      	ands	r3, r2
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ba:	4b36      	ldr	r3, [pc, #216]	; (8002394 <HAL_UART_MspInit+0x144>)
 80022bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022be:	4b35      	ldr	r3, [pc, #212]	; (8002394 <HAL_UART_MspInit+0x144>)
 80022c0:	2104      	movs	r1, #4
 80022c2:	430a      	orrs	r2, r1
 80022c4:	635a      	str	r2, [r3, #52]	; 0x34
 80022c6:	4b33      	ldr	r3, [pc, #204]	; (8002394 <HAL_UART_MspInit+0x144>)
 80022c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ca:	2204      	movs	r2, #4
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_VCP_TX_Pin|USART1_RX_VCP_RX_Pin;
 80022d2:	2134      	movs	r1, #52	; 0x34
 80022d4:	187b      	adds	r3, r7, r1
 80022d6:	2230      	movs	r2, #48	; 0x30
 80022d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	187b      	adds	r3, r7, r1
 80022dc:	2202      	movs	r2, #2
 80022de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	187b      	adds	r3, r7, r1
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e6:	187b      	adds	r3, r7, r1
 80022e8:	2200      	movs	r2, #0
 80022ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80022ec:	187b      	adds	r3, r7, r1
 80022ee:	2201      	movs	r2, #1
 80022f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f2:	187b      	adds	r3, r7, r1
 80022f4:	4a28      	ldr	r2, [pc, #160]	; (8002398 <HAL_UART_MspInit+0x148>)
 80022f6:	0019      	movs	r1, r3
 80022f8:	0010      	movs	r0, r2
 80022fa:	f001 f8f1 	bl	80034e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022fe:	e043      	b.n	8002388 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a25      	ldr	r2, [pc, #148]	; (800239c <HAL_UART_MspInit+0x14c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d13e      	bne.n	8002388 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800230a:	2118      	movs	r1, #24
 800230c:	187b      	adds	r3, r7, r1
 800230e:	2202      	movs	r2, #2
 8002310:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002312:	187b      	adds	r3, r7, r1
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002318:	187b      	adds	r3, r7, r1
 800231a:	0018      	movs	r0, r3
 800231c:	f001 ff68 	bl	80041f0 <HAL_RCCEx_PeriphCLKConfig>
 8002320:	1e03      	subs	r3, r0, #0
 8002322:	d001      	beq.n	8002328 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002324:	f7ff f959 	bl	80015da <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002328:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <HAL_UART_MspInit+0x144>)
 800232a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800232c:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_UART_MspInit+0x144>)
 800232e:	2180      	movs	r1, #128	; 0x80
 8002330:	0289      	lsls	r1, r1, #10
 8002332:	430a      	orrs	r2, r1
 8002334:	63da      	str	r2, [r3, #60]	; 0x3c
 8002336:	4b17      	ldr	r3, [pc, #92]	; (8002394 <HAL_UART_MspInit+0x144>)
 8002338:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	029b      	lsls	r3, r3, #10
 800233e:	4013      	ands	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002344:	4b13      	ldr	r3, [pc, #76]	; (8002394 <HAL_UART_MspInit+0x144>)
 8002346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_UART_MspInit+0x144>)
 800234a:	2108      	movs	r1, #8
 800234c:	430a      	orrs	r2, r1
 800234e:	635a      	str	r2, [r3, #52]	; 0x34
 8002350:	4b10      	ldr	r3, [pc, #64]	; (8002394 <HAL_UART_MspInit+0x144>)
 8002352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002354:	2208      	movs	r2, #8
 8002356:	4013      	ands	r3, r2
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_LIDAR_TX_Pin|USART2_RX_LIDAR_RX_Pin;
 800235c:	2134      	movs	r1, #52	; 0x34
 800235e:	187b      	adds	r3, r7, r1
 8002360:	2260      	movs	r2, #96	; 0x60
 8002362:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	187b      	adds	r3, r7, r1
 8002366:	2202      	movs	r2, #2
 8002368:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	187b      	adds	r3, r7, r1
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	187b      	adds	r3, r7, r1
 8002372:	2200      	movs	r2, #0
 8002374:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8002376:	187b      	adds	r3, r7, r1
 8002378:	2200      	movs	r2, #0
 800237a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800237c:	187b      	adds	r3, r7, r1
 800237e:	4a08      	ldr	r2, [pc, #32]	; (80023a0 <HAL_UART_MspInit+0x150>)
 8002380:	0019      	movs	r1, r3
 8002382:	0010      	movs	r0, r2
 8002384:	f001 f8ac 	bl	80034e0 <HAL_GPIO_Init>
}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	b013      	add	sp, #76	; 0x4c
 800238e:	bd90      	pop	{r4, r7, pc}
 8002390:	40013800 	.word	0x40013800
 8002394:	40021000 	.word	0x40021000
 8002398:	50000800 	.word	0x50000800
 800239c:	40004400 	.word	0x40004400
 80023a0:	50000c00 	.word	0x50000c00

080023a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023a4:	480d      	ldr	r0, [pc, #52]	; (80023dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80023a8:	f7ff f9f6 	bl	8001798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023ac:	480c      	ldr	r0, [pc, #48]	; (80023e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80023ae:	490d      	ldr	r1, [pc, #52]	; (80023e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023b0:	4a0d      	ldr	r2, [pc, #52]	; (80023e8 <LoopForever+0xe>)
  movs r3, #0
 80023b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023b4:	e002      	b.n	80023bc <LoopCopyDataInit>

080023b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ba:	3304      	adds	r3, #4

080023bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023c0:	d3f9      	bcc.n	80023b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023c2:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80023c4:	4c0a      	ldr	r4, [pc, #40]	; (80023f0 <LoopForever+0x16>)
  movs r3, #0
 80023c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023c8:	e001      	b.n	80023ce <LoopFillZerobss>

080023ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023cc:	3204      	adds	r2, #4

080023ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023d0:	d3fb      	bcc.n	80023ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80023d2:	f005 fcf1 	bl	8007db8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80023d6:	f7ff f895 	bl	8001504 <main>

080023da <LoopForever>:

LoopForever:
  b LoopForever
 80023da:	e7fe      	b.n	80023da <LoopForever>
  ldr   r0, =_estack
 80023dc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80023e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023e4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80023e8:	08008ce4 	.word	0x08008ce4
  ldr r2, =_sbss
 80023ec:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80023f0:	20001288 	.word	0x20001288

080023f4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023f4:	e7fe      	b.n	80023f4 <ADC1_IRQHandler>
	...

080023f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023fe:	1dfb      	adds	r3, r7, #7
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002404:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_Init+0x3c>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_Init+0x3c>)
 800240a:	2180      	movs	r1, #128	; 0x80
 800240c:	0049      	lsls	r1, r1, #1
 800240e:	430a      	orrs	r2, r1
 8002410:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002412:	2003      	movs	r0, #3
 8002414:	f000 f810 	bl	8002438 <HAL_InitTick>
 8002418:	1e03      	subs	r3, r0, #0
 800241a:	d003      	beq.n	8002424 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800241c:	1dfb      	adds	r3, r7, #7
 800241e:	2201      	movs	r2, #1
 8002420:	701a      	strb	r2, [r3, #0]
 8002422:	e001      	b.n	8002428 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002424:	f7ff f8de 	bl	80015e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002428:	1dfb      	adds	r3, r7, #7
 800242a:	781b      	ldrb	r3, [r3, #0]
}
 800242c:	0018      	movs	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	b002      	add	sp, #8
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40022000 	.word	0x40022000

08002438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002438:	b590      	push	{r4, r7, lr}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002440:	230f      	movs	r3, #15
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002448:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <HAL_InitTick+0x88>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d02b      	beq.n	80024a8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002450:	4b1c      	ldr	r3, [pc, #112]	; (80024c4 <HAL_InitTick+0x8c>)
 8002452:	681c      	ldr	r4, [r3, #0]
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <HAL_InitTick+0x88>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	0019      	movs	r1, r3
 800245a:	23fa      	movs	r3, #250	; 0xfa
 800245c:	0098      	lsls	r0, r3, #2
 800245e:	f7fd fe5d 	bl	800011c <__udivsi3>
 8002462:	0003      	movs	r3, r0
 8002464:	0019      	movs	r1, r3
 8002466:	0020      	movs	r0, r4
 8002468:	f7fd fe58 	bl	800011c <__udivsi3>
 800246c:	0003      	movs	r3, r0
 800246e:	0018      	movs	r0, r3
 8002470:	f001 f829 	bl	80034c6 <HAL_SYSTICK_Config>
 8002474:	1e03      	subs	r3, r0, #0
 8002476:	d112      	bne.n	800249e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b03      	cmp	r3, #3
 800247c:	d80a      	bhi.n	8002494 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	2301      	movs	r3, #1
 8002482:	425b      	negs	r3, r3
 8002484:	2200      	movs	r2, #0
 8002486:	0018      	movs	r0, r3
 8002488:	f001 f808 	bl	800349c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800248c:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <HAL_InitTick+0x90>)
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e00d      	b.n	80024b0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002494:	230f      	movs	r3, #15
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	2201      	movs	r2, #1
 800249a:	701a      	strb	r2, [r3, #0]
 800249c:	e008      	b.n	80024b0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800249e:	230f      	movs	r3, #15
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	2201      	movs	r2, #1
 80024a4:	701a      	strb	r2, [r3, #0]
 80024a6:	e003      	b.n	80024b0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024a8:	230f      	movs	r3, #15
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80024b0:	230f      	movs	r3, #15
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	781b      	ldrb	r3, [r3, #0]
}
 80024b6:	0018      	movs	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b005      	add	sp, #20
 80024bc:	bd90      	pop	{r4, r7, pc}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	20000008 	.word	0x20000008
 80024c4:	20000000 	.word	0x20000000
 80024c8:	20000004 	.word	0x20000004

080024cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <HAL_IncTick+0x1c>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	001a      	movs	r2, r3
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_IncTick+0x20>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	18d2      	adds	r2, r2, r3
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <HAL_IncTick+0x20>)
 80024de:	601a      	str	r2, [r3, #0]
}
 80024e0:	46c0      	nop			; (mov r8, r8)
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	20000008 	.word	0x20000008
 80024ec:	200003ec 	.word	0x200003ec

080024f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  return uwTick;
 80024f4:	4b02      	ldr	r3, [pc, #8]	; (8002500 <HAL_GetTick+0x10>)
 80024f6:	681b      	ldr	r3, [r3, #0]
}
 80024f8:	0018      	movs	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	200003ec 	.word	0x200003ec

08002504 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a05      	ldr	r2, [pc, #20]	; (8002528 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002514:	401a      	ands	r2, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	601a      	str	r2, [r3, #0]
}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	46bd      	mov	sp, r7
 8002522:	b002      	add	sp, #8
 8002524:	bd80      	pop	{r7, pc}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	fe3fffff 	.word	0xfe3fffff

0800252c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	23e0      	movs	r3, #224	; 0xe0
 800253a:	045b      	lsls	r3, r3, #17
 800253c:	4013      	ands	r3, r2
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b002      	add	sp, #8
 8002544:	bd80      	pop	{r7, pc}

08002546 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	60f8      	str	r0, [r7, #12]
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	2104      	movs	r1, #4
 800255a:	400a      	ands	r2, r1
 800255c:	2107      	movs	r1, #7
 800255e:	4091      	lsls	r1, r2
 8002560:	000a      	movs	r2, r1
 8002562:	43d2      	mvns	r2, r2
 8002564:	401a      	ands	r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2104      	movs	r1, #4
 800256a:	400b      	ands	r3, r1
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4099      	lsls	r1, r3
 8002570:	000b      	movs	r3, r1
 8002572:	431a      	orrs	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002578:	46c0      	nop			; (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	b004      	add	sp, #16
 800257e:	bd80      	pop	{r7, pc}

08002580 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	2104      	movs	r1, #4
 8002592:	400a      	ands	r2, r1
 8002594:	2107      	movs	r1, #7
 8002596:	4091      	lsls	r1, r2
 8002598:	000a      	movs	r2, r1
 800259a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2104      	movs	r1, #4
 80025a0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80025a2:	40da      	lsrs	r2, r3
 80025a4:	0013      	movs	r3, r2
}
 80025a6:	0018      	movs	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	b002      	add	sp, #8
 80025ac:	bd80      	pop	{r7, pc}

080025ae <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	23c0      	movs	r3, #192	; 0xc0
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	4013      	ands	r3, r2
 80025c0:	d101      	bne.n	80025c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	0018      	movs	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b002      	add	sp, #8
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	211f      	movs	r1, #31
 80025e4:	400a      	ands	r2, r1
 80025e6:	210f      	movs	r1, #15
 80025e8:	4091      	lsls	r1, r2
 80025ea:	000a      	movs	r2, r1
 80025ec:	43d2      	mvns	r2, r2
 80025ee:	401a      	ands	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	0e9b      	lsrs	r3, r3, #26
 80025f4:	210f      	movs	r1, #15
 80025f6:	4019      	ands	r1, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	201f      	movs	r0, #31
 80025fc:	4003      	ands	r3, r0
 80025fe:	4099      	lsls	r1, r3
 8002600:	000b      	movs	r3, r1
 8002602:	431a      	orrs	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002608:	46c0      	nop			; (mov r8, r8)
 800260a:	46bd      	mov	sp, r7
 800260c:	b004      	add	sp, #16
 800260e:	bd80      	pop	{r7, pc}

08002610 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	035b      	lsls	r3, r3, #13
 8002622:	0b5b      	lsrs	r3, r3, #13
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	629a      	str	r2, [r3, #40]	; 0x28
}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	46bd      	mov	sp, r7
 800262e:	b002      	add	sp, #8
 8002630:	bd80      	pop	{r7, pc}

08002632 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	0352      	lsls	r2, r2, #13
 8002644:	0b52      	lsrs	r2, r2, #13
 8002646:	43d2      	mvns	r2, r2
 8002648:	401a      	ands	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	46bd      	mov	sp, r7
 8002652:	b002      	add	sp, #8
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	0212      	lsls	r2, r2, #8
 800266c:	43d2      	mvns	r2, r2
 800266e:	401a      	ands	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	021b      	lsls	r3, r3, #8
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	400b      	ands	r3, r1
 8002678:	4904      	ldr	r1, [pc, #16]	; (800268c <LL_ADC_SetChannelSamplingTime+0x34>)
 800267a:	400b      	ands	r3, r1
 800267c:	431a      	orrs	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	46bd      	mov	sp, r7
 8002686:	b004      	add	sp, #16
 8002688:	bd80      	pop	{r7, pc}
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	07ffff00 	.word	0x07ffff00

08002690 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	4a05      	ldr	r2, [pc, #20]	; (80026b4 <LL_ADC_EnableInternalRegulator+0x24>)
 800269e:	4013      	ands	r3, r2
 80026a0:	2280      	movs	r2, #128	; 0x80
 80026a2:	0552      	lsls	r2, r2, #21
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b002      	add	sp, #8
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	6fffffe8 	.word	0x6fffffe8

080026b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	055b      	lsls	r3, r3, #21
 80026c8:	401a      	ands	r2, r3
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	055b      	lsls	r3, r3, #21
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d101      	bne.n	80026d6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	0018      	movs	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	b002      	add	sp, #8
 80026de:	bd80      	pop	{r7, pc}

080026e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	4a04      	ldr	r2, [pc, #16]	; (8002700 <LL_ADC_Enable+0x20>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	2201      	movs	r2, #1
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80026f8:	46c0      	nop			; (mov r8, r8)
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b002      	add	sp, #8
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	7fffffe8 	.word	0x7fffffe8

08002704 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4a04      	ldr	r2, [pc, #16]	; (8002724 <LL_ADC_Disable+0x20>)
 8002712:	4013      	ands	r3, r2
 8002714:	2202      	movs	r2, #2
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800271c:	46c0      	nop			; (mov r8, r8)
 800271e:	46bd      	mov	sp, r7
 8002720:	b002      	add	sp, #8
 8002722:	bd80      	pop	{r7, pc}
 8002724:	7fffffe8 	.word	0x7fffffe8

08002728 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2201      	movs	r2, #1
 8002736:	4013      	ands	r3, r2
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <LL_ADC_IsEnabled+0x18>
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <LL_ADC_IsEnabled+0x1a>
 8002740:	2300      	movs	r3, #0
}
 8002742:	0018      	movs	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	b002      	add	sp, #8
 8002748:	bd80      	pop	{r7, pc}

0800274a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2202      	movs	r2, #2
 8002758:	4013      	ands	r3, r2
 800275a:	2b02      	cmp	r3, #2
 800275c:	d101      	bne.n	8002762 <LL_ADC_IsDisableOngoing+0x18>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <LL_ADC_IsDisableOngoing+0x1a>
 8002762:	2300      	movs	r3, #0
}
 8002764:	0018      	movs	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	b002      	add	sp, #8
 800276a:	bd80      	pop	{r7, pc}

0800276c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	4a04      	ldr	r2, [pc, #16]	; (800278c <LL_ADC_REG_StartConversion+0x20>)
 800277a:	4013      	ands	r3, r2
 800277c:	2204      	movs	r2, #4
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002784:	46c0      	nop			; (mov r8, r8)
 8002786:	46bd      	mov	sp, r7
 8002788:	b002      	add	sp, #8
 800278a:	bd80      	pop	{r7, pc}
 800278c:	7fffffe8 	.word	0x7fffffe8

08002790 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <LL_ADC_REG_StopConversion+0x20>)
 800279e:	4013      	ands	r3, r2
 80027a0:	2210      	movs	r2, #16
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b002      	add	sp, #8
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	7fffffe8 	.word	0x7fffffe8

080027b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2204      	movs	r2, #4
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d101      	bne.n	80027cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	0018      	movs	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b002      	add	sp, #8
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e0:	231f      	movs	r3, #31
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e17f      	b.n	8002afe <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10a      	bne.n	800281c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	0018      	movs	r0, r3
 800280a:	f7fe fcc1 	bl	8001190 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2254      	movs	r2, #84	; 0x54
 8002818:	2100      	movs	r1, #0
 800281a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	0018      	movs	r0, r3
 8002822:	f7ff ff49 	bl	80026b8 <LL_ADC_IsInternalRegulatorEnabled>
 8002826:	1e03      	subs	r3, r0, #0
 8002828:	d115      	bne.n	8002856 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	0018      	movs	r0, r3
 8002830:	f7ff ff2e 	bl	8002690 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002834:	4bb4      	ldr	r3, [pc, #720]	; (8002b08 <HAL_ADC_Init+0x330>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	49b4      	ldr	r1, [pc, #720]	; (8002b0c <HAL_ADC_Init+0x334>)
 800283a:	0018      	movs	r0, r3
 800283c:	f7fd fc6e 	bl	800011c <__udivsi3>
 8002840:	0003      	movs	r3, r0
 8002842:	3301      	adds	r3, #1
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002848:	e002      	b.n	8002850 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	3b01      	subs	r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f9      	bne.n	800284a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	0018      	movs	r0, r3
 800285c:	f7ff ff2c 	bl	80026b8 <LL_ADC_IsInternalRegulatorEnabled>
 8002860:	1e03      	subs	r3, r0, #0
 8002862:	d10f      	bne.n	8002884 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002868:	2210      	movs	r2, #16
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002874:	2201      	movs	r2, #1
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800287c:	231f      	movs	r3, #31
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	2201      	movs	r2, #1
 8002882:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	0018      	movs	r0, r3
 800288a:	f7ff ff93 	bl	80027b4 <LL_ADC_REG_IsConversionOngoing>
 800288e:	0003      	movs	r3, r0
 8002890:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002896:	2210      	movs	r2, #16
 8002898:	4013      	ands	r3, r2
 800289a:	d000      	beq.n	800289e <HAL_ADC_Init+0xc6>
 800289c:	e122      	b.n	8002ae4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d000      	beq.n	80028a6 <HAL_ADC_Init+0xce>
 80028a4:	e11e      	b.n	8002ae4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028aa:	4a99      	ldr	r2, [pc, #612]	; (8002b10 <HAL_ADC_Init+0x338>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	2202      	movs	r2, #2
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	0018      	movs	r0, r3
 80028bc:	f7ff ff34 	bl	8002728 <LL_ADC_IsEnabled>
 80028c0:	1e03      	subs	r3, r0, #0
 80028c2:	d000      	beq.n	80028c6 <HAL_ADC_Init+0xee>
 80028c4:	e0ad      	b.n	8002a22 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	7e1b      	ldrb	r3, [r3, #24]
 80028ce:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80028d0:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	7e5b      	ldrb	r3, [r3, #25]
 80028d6:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80028d8:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	7e9b      	ldrb	r3, [r3, #26]
 80028de:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80028e0:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <HAL_ADC_Init+0x118>
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	015b      	lsls	r3, r3, #5
 80028ee:	e000      	b.n	80028f2 <HAL_ADC_Init+0x11a>
 80028f0:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80028f2:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80028f8:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	da04      	bge.n	800290c <HAL_ADC_Init+0x134>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	085b      	lsrs	r3, r3, #1
 800290a:	e001      	b.n	8002910 <HAL_ADC_Init+0x138>
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002910:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	212c      	movs	r1, #44	; 0x2c
 8002916:	5c5b      	ldrb	r3, [r3, r1]
 8002918:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800291a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2220      	movs	r2, #32
 8002926:	5c9b      	ldrb	r3, [r3, r2]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d115      	bne.n	8002958 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	7e9b      	ldrb	r3, [r3, #26]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d105      	bne.n	8002940 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2280      	movs	r2, #128	; 0x80
 8002938:	0252      	lsls	r2, r2, #9
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	e00b      	b.n	8002958 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002944:	2220      	movs	r2, #32
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002950:	2201      	movs	r2, #1
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00a      	beq.n	8002976 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002964:	23e0      	movs	r3, #224	; 0xe0
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800296e:	4313      	orrs	r3, r2
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4a65      	ldr	r2, [pc, #404]	; (8002b14 <HAL_ADC_Init+0x33c>)
 800297e:	4013      	ands	r3, r2
 8002980:	0019      	movs	r1, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	430a      	orrs	r2, r1
 800298a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	0f9b      	lsrs	r3, r3, #30
 8002992:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002998:	4313      	orrs	r3, r2
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	4313      	orrs	r3, r2
 800299e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	223c      	movs	r2, #60	; 0x3c
 80029a4:	5c9b      	ldrb	r3, [r3, r2]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d111      	bne.n	80029ce <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	0f9b      	lsrs	r3, r3, #30
 80029b0:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029b6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80029bc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80029c2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	2201      	movs	r2, #1
 80029ca:	4313      	orrs	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	4a50      	ldr	r2, [pc, #320]	; (8002b18 <HAL_ADC_Init+0x340>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	0019      	movs	r1, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	23c0      	movs	r3, #192	; 0xc0
 80029ea:	061b      	lsls	r3, r3, #24
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d018      	beq.n	8002a22 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80029f4:	2380      	movs	r3, #128	; 0x80
 80029f6:	05db      	lsls	r3, r3, #23
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d012      	beq.n	8002a22 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	061b      	lsls	r3, r3, #24
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d00c      	beq.n	8002a22 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002a08:	4b44      	ldr	r3, [pc, #272]	; (8002b1c <HAL_ADC_Init+0x344>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a44      	ldr	r2, [pc, #272]	; (8002b20 <HAL_ADC_Init+0x348>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	0019      	movs	r1, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	23f0      	movs	r3, #240	; 0xf0
 8002a18:	039b      	lsls	r3, r3, #14
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	4b3f      	ldr	r3, [pc, #252]	; (8002b1c <HAL_ADC_Init+0x344>)
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2a:	001a      	movs	r2, r3
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	f7ff fd8a 	bl	8002546 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3a:	493a      	ldr	r1, [pc, #232]	; (8002b24 <HAL_ADC_Init+0x34c>)
 8002a3c:	001a      	movs	r2, r3
 8002a3e:	f7ff fd82 	bl	8002546 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d109      	bne.n	8002a5e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2110      	movs	r1, #16
 8002a56:	4249      	negs	r1, r1
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	629a      	str	r2, [r3, #40]	; 0x28
 8002a5c:	e018      	b.n	8002a90 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	039b      	lsls	r3, r3, #14
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d112      	bne.n	8002a90 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	221c      	movs	r2, #28
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2210      	movs	r2, #16
 8002a7e:	4252      	negs	r2, r2
 8002a80:	409a      	lsls	r2, r3
 8002a82:	0011      	movs	r1, r2
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2100      	movs	r1, #0
 8002a96:	0018      	movs	r0, r3
 8002a98:	f7ff fd72 	bl	8002580 <LL_ADC_GetSamplingTimeCommonChannels>
 8002a9c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d10b      	bne.n	8002abe <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	4393      	bics	r3, r2
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002abc:	e01c      	b.n	8002af8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	2212      	movs	r2, #18
 8002ac4:	4393      	bics	r3, r2
 8002ac6:	2210      	movs	r2, #16
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002ada:	231f      	movs	r3, #31
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	2201      	movs	r2, #1
 8002ae0:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002ae2:	e009      	b.n	8002af8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae8:	2210      	movs	r2, #16
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002af0:	231f      	movs	r3, #31
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	2201      	movs	r2, #1
 8002af6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002af8:	231f      	movs	r3, #31
 8002afa:	18fb      	adds	r3, r7, r3
 8002afc:	781b      	ldrb	r3, [r3, #0]
}
 8002afe:	0018      	movs	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b008      	add	sp, #32
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	00030d40 	.word	0x00030d40
 8002b10:	fffffefd 	.word	0xfffffefd
 8002b14:	fffe0201 	.word	0xfffe0201
 8002b18:	1ffffc02 	.word	0x1ffffc02
 8002b1c:	40012708 	.word	0x40012708
 8002b20:	ffc3ffff 	.word	0xffc3ffff
 8002b24:	07ffff04 	.word	0x07ffff04

08002b28 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002b28:	b5b0      	push	{r4, r5, r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	0018      	movs	r0, r3
 8002b36:	f7ff fe3d 	bl	80027b4 <LL_ADC_REG_IsConversionOngoing>
 8002b3a:	1e03      	subs	r3, r0, #0
 8002b3c:	d135      	bne.n	8002baa <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2254      	movs	r2, #84	; 0x54
 8002b42:	5c9b      	ldrb	r3, [r3, r2]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_ADC_Start+0x24>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e035      	b.n	8002bb8 <HAL_ADC_Start+0x90>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2254      	movs	r2, #84	; 0x54
 8002b50:	2101      	movs	r1, #1
 8002b52:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b54:	250f      	movs	r5, #15
 8002b56:	197c      	adds	r4, r7, r5
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f000 fb28 	bl	80031b0 <ADC_Enable>
 8002b60:	0003      	movs	r3, r0
 8002b62:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b64:	197b      	adds	r3, r7, r5
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d119      	bne.n	8002ba0 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b70:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <HAL_ADC_Start+0x98>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	2280      	movs	r2, #128	; 0x80
 8002b76:	0052      	lsls	r2, r2, #1
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	221c      	movs	r2, #28
 8002b8a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2254      	movs	r2, #84	; 0x54
 8002b90:	2100      	movs	r1, #0
 8002b92:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f7ff fde7 	bl	800276c <LL_ADC_REG_StartConversion>
 8002b9e:	e008      	b.n	8002bb2 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2254      	movs	r2, #84	; 0x54
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	5499      	strb	r1, [r3, r2]
 8002ba8:	e003      	b.n	8002bb2 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002baa:	230f      	movs	r3, #15
 8002bac:	18fb      	adds	r3, r7, r3
 8002bae:	2202      	movs	r2, #2
 8002bb0:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002bb2:	230f      	movs	r3, #15
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	781b      	ldrb	r3, [r3, #0]
}
 8002bb8:	0018      	movs	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b004      	add	sp, #16
 8002bbe:	bdb0      	pop	{r4, r5, r7, pc}
 8002bc0:	fffff0fe 	.word	0xfffff0fe

08002bc4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002bc4:	b5b0      	push	{r4, r5, r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2254      	movs	r2, #84	; 0x54
 8002bd0:	5c9b      	ldrb	r3, [r3, r2]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_ADC_Stop+0x16>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e029      	b.n	8002c2e <HAL_ADC_Stop+0x6a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2254      	movs	r2, #84	; 0x54
 8002bde:	2101      	movs	r1, #1
 8002be0:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002be2:	250f      	movs	r5, #15
 8002be4:	197c      	adds	r4, r7, r5
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f000 fa9f 	bl	800312c <ADC_ConversionStop>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002bf2:	197b      	adds	r3, r7, r5
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d112      	bne.n	8002c20 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002bfa:	197c      	adds	r4, r7, r5
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f000 fb5c 	bl	80032bc <ADC_Disable>
 8002c04:	0003      	movs	r3, r0
 8002c06:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002c08:	197b      	adds	r3, r7, r5
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d107      	bne.n	8002c20 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c14:	4a08      	ldr	r2, [pc, #32]	; (8002c38 <HAL_ADC_Stop+0x74>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	2201      	movs	r2, #1
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2254      	movs	r2, #84	; 0x54
 8002c24:	2100      	movs	r1, #0
 8002c26:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002c28:	230f      	movs	r3, #15
 8002c2a:	18fb      	adds	r3, r7, r3
 8002c2c:	781b      	ldrb	r3, [r3, #0]
}
 8002c2e:	0018      	movs	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b004      	add	sp, #16
 8002c34:	bdb0      	pop	{r4, r5, r7, pc}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	fffffefe 	.word	0xfffffefe

08002c3c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d102      	bne.n	8002c54 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002c4e:	2308      	movs	r3, #8
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	e00f      	b.n	8002c74 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d007      	beq.n	8002c70 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c64:	2220      	movs	r2, #32
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e072      	b.n	8002d56 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002c70:	2304      	movs	r3, #4
 8002c72:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002c74:	f7ff fc3c 	bl	80024f0 <HAL_GetTick>
 8002c78:	0003      	movs	r3, r0
 8002c7a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002c7c:	e01f      	b.n	8002cbe <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	3301      	adds	r3, #1
 8002c82:	d01c      	beq.n	8002cbe <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002c84:	f7ff fc34 	bl	80024f0 <HAL_GetTick>
 8002c88:	0002      	movs	r2, r0
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d302      	bcc.n	8002c9a <HAL_ADC_PollForConversion+0x5e>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d111      	bne.n	8002cbe <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d10b      	bne.n	8002cbe <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002caa:	2204      	movs	r2, #4
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2254      	movs	r2, #84	; 0x54
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e04b      	b.n	8002d56 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d0d9      	beq.n	8002c7e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cce:	2280      	movs	r2, #128	; 0x80
 8002cd0:	0092      	lsls	r2, r2, #2
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f7ff fc66 	bl	80025ae <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ce2:	1e03      	subs	r3, r0, #0
 8002ce4:	d02e      	beq.n	8002d44 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7e9b      	ldrb	r3, [r3, #26]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d12a      	bne.n	8002d44 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2208      	movs	r2, #8
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d123      	bne.n	8002d44 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	0018      	movs	r0, r3
 8002d02:	f7ff fd57 	bl	80027b4 <LL_ADC_REG_IsConversionOngoing>
 8002d06:	1e03      	subs	r3, r0, #0
 8002d08:	d110      	bne.n	8002d2c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	210c      	movs	r1, #12
 8002d16:	438a      	bics	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1e:	4a10      	ldr	r2, [pc, #64]	; (8002d60 <HAL_ADC_PollForConversion+0x124>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	2201      	movs	r2, #1
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	659a      	str	r2, [r3, #88]	; 0x58
 8002d2a:	e00b      	b.n	8002d44 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d30:	2220      	movs	r2, #32
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	7e1b      	ldrb	r3, [r3, #24]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d103      	bne.n	8002d54 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	220c      	movs	r2, #12
 8002d52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	0018      	movs	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b004      	add	sp, #16
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	fffffefe 	.word	0xfffffefe

08002d64 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002d72:	0018      	movs	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b002      	add	sp, #8
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d86:	2317      	movs	r3, #23
 8002d88:	18fb      	adds	r3, r7, r3
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2254      	movs	r2, #84	; 0x54
 8002d96:	5c9b      	ldrb	r3, [r3, r2]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x24>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e1c0      	b.n	8003122 <HAL_ADC_ConfigChannel+0x3a6>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2254      	movs	r2, #84	; 0x54
 8002da4:	2101      	movs	r1, #1
 8002da6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	0018      	movs	r0, r3
 8002dae:	f7ff fd01 	bl	80027b4 <LL_ADC_REG_IsConversionOngoing>
 8002db2:	1e03      	subs	r3, r0, #0
 8002db4:	d000      	beq.n	8002db8 <HAL_ADC_ConfigChannel+0x3c>
 8002db6:	e1a3      	b.n	8003100 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d100      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x46>
 8002dc0:	e143      	b.n	800304a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691a      	ldr	r2, [r3, #16]
 8002dc6:	2380      	movs	r3, #128	; 0x80
 8002dc8:	061b      	lsls	r3, r3, #24
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d004      	beq.n	8002dd8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002dd2:	4ac1      	ldr	r2, [pc, #772]	; (80030d8 <HAL_ADC_ConfigChannel+0x35c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d108      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	0019      	movs	r1, r3
 8002de2:	0010      	movs	r0, r2
 8002de4:	f7ff fc14 	bl	8002610 <LL_ADC_REG_SetSequencerChAdd>
 8002de8:	e0c9      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	211f      	movs	r1, #31
 8002df4:	400b      	ands	r3, r1
 8002df6:	210f      	movs	r1, #15
 8002df8:	4099      	lsls	r1, r3
 8002dfa:	000b      	movs	r3, r1
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	4013      	ands	r3, r2
 8002e00:	0019      	movs	r1, r3
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	035b      	lsls	r3, r3, #13
 8002e08:	0b5b      	lsrs	r3, r3, #13
 8002e0a:	d105      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x9c>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	0e9b      	lsrs	r3, r3, #26
 8002e12:	221f      	movs	r2, #31
 8002e14:	4013      	ands	r3, r2
 8002e16:	e098      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x1ce>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d000      	beq.n	8002e24 <HAL_ADC_ConfigChannel+0xa8>
 8002e22:	e091      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x1cc>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d000      	beq.n	8002e30 <HAL_ADC_ConfigChannel+0xb4>
 8002e2e:	e089      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x1c8>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2204      	movs	r2, #4
 8002e36:	4013      	ands	r3, r2
 8002e38:	d000      	beq.n	8002e3c <HAL_ADC_ConfigChannel+0xc0>
 8002e3a:	e081      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x1c4>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2208      	movs	r2, #8
 8002e42:	4013      	ands	r3, r2
 8002e44:	d000      	beq.n	8002e48 <HAL_ADC_ConfigChannel+0xcc>
 8002e46:	e079      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x1c0>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2210      	movs	r2, #16
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d000      	beq.n	8002e54 <HAL_ADC_ConfigChannel+0xd8>
 8002e52:	e071      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x1bc>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d000      	beq.n	8002e60 <HAL_ADC_ConfigChannel+0xe4>
 8002e5e:	e069      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x1b8>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2240      	movs	r2, #64	; 0x40
 8002e66:	4013      	ands	r3, r2
 8002e68:	d000      	beq.n	8002e6c <HAL_ADC_ConfigChannel+0xf0>
 8002e6a:	e061      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x1b4>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2280      	movs	r2, #128	; 0x80
 8002e72:	4013      	ands	r3, r2
 8002e74:	d000      	beq.n	8002e78 <HAL_ADC_ConfigChannel+0xfc>
 8002e76:	e059      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x1b0>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4013      	ands	r3, r2
 8002e82:	d151      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x1ac>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d149      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x1a8>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d141      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x1a4>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	2380      	movs	r3, #128	; 0x80
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d139      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x1a0>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	015b      	lsls	r3, r3, #5
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d131      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x19c>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	019b      	lsls	r3, r3, #6
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d129      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x198>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	2380      	movs	r3, #128	; 0x80
 8002ec6:	01db      	lsls	r3, r3, #7
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d121      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x194>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	2380      	movs	r3, #128	; 0x80
 8002ed2:	021b      	lsls	r3, r3, #8
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d119      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x190>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	2380      	movs	r3, #128	; 0x80
 8002ede:	025b      	lsls	r3, r3, #9
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d111      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x18c>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	029b      	lsls	r3, r3, #10
 8002eec:	4013      	ands	r3, r2
 8002eee:	d109      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x188>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	2380      	movs	r3, #128	; 0x80
 8002ef6:	02db      	lsls	r3, r3, #11
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d001      	beq.n	8002f00 <HAL_ADC_ConfigChannel+0x184>
 8002efc:	2312      	movs	r3, #18
 8002efe:	e024      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x1ce>
 8002f00:	2300      	movs	r3, #0
 8002f02:	e022      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x1ce>
 8002f04:	2311      	movs	r3, #17
 8002f06:	e020      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x1ce>
 8002f08:	2310      	movs	r3, #16
 8002f0a:	e01e      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x1ce>
 8002f0c:	230f      	movs	r3, #15
 8002f0e:	e01c      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x1ce>
 8002f10:	230e      	movs	r3, #14
 8002f12:	e01a      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x1ce>
 8002f14:	230d      	movs	r3, #13
 8002f16:	e018      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x1ce>
 8002f18:	230c      	movs	r3, #12
 8002f1a:	e016      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x1ce>
 8002f1c:	230b      	movs	r3, #11
 8002f1e:	e014      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x1ce>
 8002f20:	230a      	movs	r3, #10
 8002f22:	e012      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x1ce>
 8002f24:	2309      	movs	r3, #9
 8002f26:	e010      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x1ce>
 8002f28:	2308      	movs	r3, #8
 8002f2a:	e00e      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x1ce>
 8002f2c:	2307      	movs	r3, #7
 8002f2e:	e00c      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x1ce>
 8002f30:	2306      	movs	r3, #6
 8002f32:	e00a      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x1ce>
 8002f34:	2305      	movs	r3, #5
 8002f36:	e008      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x1ce>
 8002f38:	2304      	movs	r3, #4
 8002f3a:	e006      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x1ce>
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e004      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x1ce>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e002      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x1ce>
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x1ce>
 8002f48:	2300      	movs	r3, #0
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	6852      	ldr	r2, [r2, #4]
 8002f4e:	201f      	movs	r0, #31
 8002f50:	4002      	ands	r2, r0
 8002f52:	4093      	lsls	r3, r2
 8002f54:	000a      	movs	r2, r1
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	089b      	lsrs	r3, r3, #2
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d808      	bhi.n	8002f7e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	001a      	movs	r2, r3
 8002f7a:	f7ff fb29 	bl	80025d0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	6819      	ldr	r1, [r3, #0]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	001a      	movs	r2, r3
 8002f8c:	f7ff fb64 	bl	8002658 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	db00      	blt.n	8002f9a <HAL_ADC_ConfigChannel+0x21e>
 8002f98:	e0bc      	b.n	8003114 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f9a:	4b50      	ldr	r3, [pc, #320]	; (80030dc <HAL_ADC_ConfigChannel+0x360>)
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f7ff fac5 	bl	800252c <LL_ADC_GetCommonPathInternalCh>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a4d      	ldr	r2, [pc, #308]	; (80030e0 <HAL_ADC_ConfigChannel+0x364>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d122      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	041b      	lsls	r3, r3, #16
 8002fb6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002fb8:	d11d      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	2280      	movs	r2, #128	; 0x80
 8002fbe:	0412      	lsls	r2, r2, #16
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	4a46      	ldr	r2, [pc, #280]	; (80030dc <HAL_ADC_ConfigChannel+0x360>)
 8002fc4:	0019      	movs	r1, r3
 8002fc6:	0010      	movs	r0, r2
 8002fc8:	f7ff fa9c 	bl	8002504 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fcc:	4b45      	ldr	r3, [pc, #276]	; (80030e4 <HAL_ADC_ConfigChannel+0x368>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4945      	ldr	r1, [pc, #276]	; (80030e8 <HAL_ADC_ConfigChannel+0x36c>)
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f7fd f8a2 	bl	800011c <__udivsi3>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	0013      	movs	r3, r2
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	189b      	adds	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fe6:	e002      	b.n	8002fee <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f9      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ff4:	e08e      	b.n	8003114 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a3c      	ldr	r2, [pc, #240]	; (80030ec <HAL_ADC_ConfigChannel+0x370>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d10e      	bne.n	800301e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	2380      	movs	r3, #128	; 0x80
 8003004:	045b      	lsls	r3, r3, #17
 8003006:	4013      	ands	r3, r2
 8003008:	d109      	bne.n	800301e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	2280      	movs	r2, #128	; 0x80
 800300e:	0452      	lsls	r2, r2, #17
 8003010:	4313      	orrs	r3, r2
 8003012:	4a32      	ldr	r2, [pc, #200]	; (80030dc <HAL_ADC_ConfigChannel+0x360>)
 8003014:	0019      	movs	r1, r3
 8003016:	0010      	movs	r0, r2
 8003018:	f7ff fa74 	bl	8002504 <LL_ADC_SetCommonPathInternalCh>
 800301c:	e07a      	b.n	8003114 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a33      	ldr	r2, [pc, #204]	; (80030f0 <HAL_ADC_ConfigChannel+0x374>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d000      	beq.n	800302a <HAL_ADC_ConfigChannel+0x2ae>
 8003028:	e074      	b.n	8003114 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	03db      	lsls	r3, r3, #15
 8003030:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003032:	d000      	beq.n	8003036 <HAL_ADC_ConfigChannel+0x2ba>
 8003034:	e06e      	b.n	8003114 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	2280      	movs	r2, #128	; 0x80
 800303a:	03d2      	lsls	r2, r2, #15
 800303c:	4313      	orrs	r3, r2
 800303e:	4a27      	ldr	r2, [pc, #156]	; (80030dc <HAL_ADC_ConfigChannel+0x360>)
 8003040:	0019      	movs	r1, r3
 8003042:	0010      	movs	r0, r2
 8003044:	f7ff fa5e 	bl	8002504 <LL_ADC_SetCommonPathInternalCh>
 8003048:	e064      	b.n	8003114 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691a      	ldr	r2, [r3, #16]
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	061b      	lsls	r3, r3, #24
 8003052:	429a      	cmp	r2, r3
 8003054:	d004      	beq.n	8003060 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800305a:	4a1f      	ldr	r2, [pc, #124]	; (80030d8 <HAL_ADC_ConfigChannel+0x35c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d107      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	0019      	movs	r1, r3
 800306a:	0010      	movs	r0, r2
 800306c:	f7ff fae1 	bl	8002632 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	da4d      	bge.n	8003114 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003078:	4b18      	ldr	r3, [pc, #96]	; (80030dc <HAL_ADC_ConfigChannel+0x360>)
 800307a:	0018      	movs	r0, r3
 800307c:	f7ff fa56 	bl	800252c <LL_ADC_GetCommonPathInternalCh>
 8003080:	0003      	movs	r3, r0
 8003082:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a15      	ldr	r2, [pc, #84]	; (80030e0 <HAL_ADC_ConfigChannel+0x364>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d108      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4a18      	ldr	r2, [pc, #96]	; (80030f4 <HAL_ADC_ConfigChannel+0x378>)
 8003092:	4013      	ands	r3, r2
 8003094:	4a11      	ldr	r2, [pc, #68]	; (80030dc <HAL_ADC_ConfigChannel+0x360>)
 8003096:	0019      	movs	r1, r3
 8003098:	0010      	movs	r0, r2
 800309a:	f7ff fa33 	bl	8002504 <LL_ADC_SetCommonPathInternalCh>
 800309e:	e039      	b.n	8003114 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a11      	ldr	r2, [pc, #68]	; (80030ec <HAL_ADC_ConfigChannel+0x370>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d108      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4a12      	ldr	r2, [pc, #72]	; (80030f8 <HAL_ADC_ConfigChannel+0x37c>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <HAL_ADC_ConfigChannel+0x360>)
 80030b2:	0019      	movs	r1, r3
 80030b4:	0010      	movs	r0, r2
 80030b6:	f7ff fa25 	bl	8002504 <LL_ADC_SetCommonPathInternalCh>
 80030ba:	e02b      	b.n	8003114 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a0b      	ldr	r2, [pc, #44]	; (80030f0 <HAL_ADC_ConfigChannel+0x374>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d126      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	4a0c      	ldr	r2, [pc, #48]	; (80030fc <HAL_ADC_ConfigChannel+0x380>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	4a03      	ldr	r2, [pc, #12]	; (80030dc <HAL_ADC_ConfigChannel+0x360>)
 80030ce:	0019      	movs	r1, r3
 80030d0:	0010      	movs	r0, r2
 80030d2:	f7ff fa17 	bl	8002504 <LL_ADC_SetCommonPathInternalCh>
 80030d6:	e01d      	b.n	8003114 <HAL_ADC_ConfigChannel+0x398>
 80030d8:	80000004 	.word	0x80000004
 80030dc:	40012708 	.word	0x40012708
 80030e0:	b0001000 	.word	0xb0001000
 80030e4:	20000000 	.word	0x20000000
 80030e8:	00030d40 	.word	0x00030d40
 80030ec:	b8004000 	.word	0xb8004000
 80030f0:	b4002000 	.word	0xb4002000
 80030f4:	ff7fffff 	.word	0xff7fffff
 80030f8:	feffffff 	.word	0xfeffffff
 80030fc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003104:	2220      	movs	r2, #32
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800310c:	2317      	movs	r3, #23
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	2201      	movs	r2, #1
 8003112:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2254      	movs	r2, #84	; 0x54
 8003118:	2100      	movs	r1, #0
 800311a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800311c:	2317      	movs	r3, #23
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	781b      	ldrb	r3, [r3, #0]
}
 8003122:	0018      	movs	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	b006      	add	sp, #24
 8003128:	bd80      	pop	{r7, pc}
 800312a:	46c0      	nop			; (mov r8, r8)

0800312c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	0018      	movs	r0, r3
 800313a:	f7ff fb3b 	bl	80027b4 <LL_ADC_REG_IsConversionOngoing>
 800313e:	1e03      	subs	r3, r0, #0
 8003140:	d031      	beq.n	80031a6 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	0018      	movs	r0, r3
 8003148:	f7ff faff 	bl	800274a <LL_ADC_IsDisableOngoing>
 800314c:	1e03      	subs	r3, r0, #0
 800314e:	d104      	bne.n	800315a <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	0018      	movs	r0, r3
 8003156:	f7ff fb1b 	bl	8002790 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800315a:	f7ff f9c9 	bl	80024f0 <HAL_GetTick>
 800315e:	0003      	movs	r3, r0
 8003160:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003162:	e01a      	b.n	800319a <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003164:	f7ff f9c4 	bl	80024f0 <HAL_GetTick>
 8003168:	0002      	movs	r2, r0
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d913      	bls.n	800319a <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2204      	movs	r2, #4
 800317a:	4013      	ands	r3, r2
 800317c:	d00d      	beq.n	800319a <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003182:	2210      	movs	r2, #16
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318e:	2201      	movs	r2, #1
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e006      	b.n	80031a8 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2204      	movs	r2, #4
 80031a2:	4013      	ands	r3, r2
 80031a4:	d1de      	bne.n	8003164 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	0018      	movs	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b004      	add	sp, #16
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	0018      	movs	r0, r3
 80031c2:	f7ff fab1 	bl	8002728 <LL_ADC_IsEnabled>
 80031c6:	1e03      	subs	r3, r0, #0
 80031c8:	d000      	beq.n	80031cc <ADC_Enable+0x1c>
 80031ca:	e069      	b.n	80032a0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	4a36      	ldr	r2, [pc, #216]	; (80032ac <ADC_Enable+0xfc>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	d00d      	beq.n	80031f4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031dc:	2210      	movs	r2, #16
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e8:	2201      	movs	r2, #1
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e056      	b.n	80032a2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	0018      	movs	r0, r3
 80031fa:	f7ff fa71 	bl	80026e0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80031fe:	4b2c      	ldr	r3, [pc, #176]	; (80032b0 <ADC_Enable+0x100>)
 8003200:	0018      	movs	r0, r3
 8003202:	f7ff f993 	bl	800252c <LL_ADC_GetCommonPathInternalCh>
 8003206:	0002      	movs	r2, r0
 8003208:	2380      	movs	r3, #128	; 0x80
 800320a:	041b      	lsls	r3, r3, #16
 800320c:	4013      	ands	r3, r2
 800320e:	d00f      	beq.n	8003230 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003210:	4b28      	ldr	r3, [pc, #160]	; (80032b4 <ADC_Enable+0x104>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4928      	ldr	r1, [pc, #160]	; (80032b8 <ADC_Enable+0x108>)
 8003216:	0018      	movs	r0, r3
 8003218:	f7fc ff80 	bl	800011c <__udivsi3>
 800321c:	0003      	movs	r3, r0
 800321e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003220:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003222:	e002      	b.n	800322a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	3b01      	subs	r3, #1
 8003228:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f9      	bne.n	8003224 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	7e5b      	ldrb	r3, [r3, #25]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d033      	beq.n	80032a0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003238:	f7ff f95a 	bl	80024f0 <HAL_GetTick>
 800323c:	0003      	movs	r3, r0
 800323e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003240:	e027      	b.n	8003292 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	0018      	movs	r0, r3
 8003248:	f7ff fa6e 	bl	8002728 <LL_ADC_IsEnabled>
 800324c:	1e03      	subs	r3, r0, #0
 800324e:	d104      	bne.n	800325a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	0018      	movs	r0, r3
 8003256:	f7ff fa43 	bl	80026e0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800325a:	f7ff f949 	bl	80024f0 <HAL_GetTick>
 800325e:	0002      	movs	r2, r0
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d914      	bls.n	8003292 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2201      	movs	r2, #1
 8003270:	4013      	ands	r3, r2
 8003272:	2b01      	cmp	r3, #1
 8003274:	d00d      	beq.n	8003292 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327a:	2210      	movs	r2, #16
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003286:	2201      	movs	r2, #1
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e007      	b.n	80032a2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2201      	movs	r2, #1
 800329a:	4013      	ands	r3, r2
 800329c:	2b01      	cmp	r3, #1
 800329e:	d1d0      	bne.n	8003242 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	0018      	movs	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b004      	add	sp, #16
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	80000017 	.word	0x80000017
 80032b0:	40012708 	.word	0x40012708
 80032b4:	20000000 	.word	0x20000000
 80032b8:	00030d40 	.word	0x00030d40

080032bc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	0018      	movs	r0, r3
 80032ca:	f7ff fa3e 	bl	800274a <LL_ADC_IsDisableOngoing>
 80032ce:	0003      	movs	r3, r0
 80032d0:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	0018      	movs	r0, r3
 80032d8:	f7ff fa26 	bl	8002728 <LL_ADC_IsEnabled>
 80032dc:	1e03      	subs	r3, r0, #0
 80032de:	d046      	beq.n	800336e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d143      	bne.n	800336e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2205      	movs	r2, #5
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d10d      	bne.n	8003310 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	0018      	movs	r0, r3
 80032fa:	f7ff fa03 	bl	8002704 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2203      	movs	r2, #3
 8003304:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003306:	f7ff f8f3 	bl	80024f0 <HAL_GetTick>
 800330a:	0003      	movs	r3, r0
 800330c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800330e:	e028      	b.n	8003362 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003314:	2210      	movs	r2, #16
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003320:	2201      	movs	r2, #1
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e021      	b.n	8003370 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800332c:	f7ff f8e0 	bl	80024f0 <HAL_GetTick>
 8003330:	0002      	movs	r2, r0
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d913      	bls.n	8003362 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2201      	movs	r2, #1
 8003342:	4013      	ands	r3, r2
 8003344:	d00d      	beq.n	8003362 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334a:	2210      	movs	r2, #16
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003356:	2201      	movs	r2, #1
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e006      	b.n	8003370 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2201      	movs	r2, #1
 800336a:	4013      	ands	r3, r2
 800336c:	d1de      	bne.n	800332c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	0018      	movs	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	b004      	add	sp, #16
 8003376:	bd80      	pop	{r7, pc}

08003378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	0002      	movs	r2, r0
 8003380:	6039      	str	r1, [r7, #0]
 8003382:	1dfb      	adds	r3, r7, #7
 8003384:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003386:	1dfb      	adds	r3, r7, #7
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b7f      	cmp	r3, #127	; 0x7f
 800338c:	d828      	bhi.n	80033e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800338e:	4a2f      	ldr	r2, [pc, #188]	; (800344c <__NVIC_SetPriority+0xd4>)
 8003390:	1dfb      	adds	r3, r7, #7
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	b25b      	sxtb	r3, r3
 8003396:	089b      	lsrs	r3, r3, #2
 8003398:	33c0      	adds	r3, #192	; 0xc0
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	589b      	ldr	r3, [r3, r2]
 800339e:	1dfa      	adds	r2, r7, #7
 80033a0:	7812      	ldrb	r2, [r2, #0]
 80033a2:	0011      	movs	r1, r2
 80033a4:	2203      	movs	r2, #3
 80033a6:	400a      	ands	r2, r1
 80033a8:	00d2      	lsls	r2, r2, #3
 80033aa:	21ff      	movs	r1, #255	; 0xff
 80033ac:	4091      	lsls	r1, r2
 80033ae:	000a      	movs	r2, r1
 80033b0:	43d2      	mvns	r2, r2
 80033b2:	401a      	ands	r2, r3
 80033b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	019b      	lsls	r3, r3, #6
 80033ba:	22ff      	movs	r2, #255	; 0xff
 80033bc:	401a      	ands	r2, r3
 80033be:	1dfb      	adds	r3, r7, #7
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	0018      	movs	r0, r3
 80033c4:	2303      	movs	r3, #3
 80033c6:	4003      	ands	r3, r0
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033cc:	481f      	ldr	r0, [pc, #124]	; (800344c <__NVIC_SetPriority+0xd4>)
 80033ce:	1dfb      	adds	r3, r7, #7
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	b25b      	sxtb	r3, r3
 80033d4:	089b      	lsrs	r3, r3, #2
 80033d6:	430a      	orrs	r2, r1
 80033d8:	33c0      	adds	r3, #192	; 0xc0
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80033de:	e031      	b.n	8003444 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033e0:	4a1b      	ldr	r2, [pc, #108]	; (8003450 <__NVIC_SetPriority+0xd8>)
 80033e2:	1dfb      	adds	r3, r7, #7
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	0019      	movs	r1, r3
 80033e8:	230f      	movs	r3, #15
 80033ea:	400b      	ands	r3, r1
 80033ec:	3b08      	subs	r3, #8
 80033ee:	089b      	lsrs	r3, r3, #2
 80033f0:	3306      	adds	r3, #6
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	18d3      	adds	r3, r2, r3
 80033f6:	3304      	adds	r3, #4
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	1dfa      	adds	r2, r7, #7
 80033fc:	7812      	ldrb	r2, [r2, #0]
 80033fe:	0011      	movs	r1, r2
 8003400:	2203      	movs	r2, #3
 8003402:	400a      	ands	r2, r1
 8003404:	00d2      	lsls	r2, r2, #3
 8003406:	21ff      	movs	r1, #255	; 0xff
 8003408:	4091      	lsls	r1, r2
 800340a:	000a      	movs	r2, r1
 800340c:	43d2      	mvns	r2, r2
 800340e:	401a      	ands	r2, r3
 8003410:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	019b      	lsls	r3, r3, #6
 8003416:	22ff      	movs	r2, #255	; 0xff
 8003418:	401a      	ands	r2, r3
 800341a:	1dfb      	adds	r3, r7, #7
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	0018      	movs	r0, r3
 8003420:	2303      	movs	r3, #3
 8003422:	4003      	ands	r3, r0
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003428:	4809      	ldr	r0, [pc, #36]	; (8003450 <__NVIC_SetPriority+0xd8>)
 800342a:	1dfb      	adds	r3, r7, #7
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	001c      	movs	r4, r3
 8003430:	230f      	movs	r3, #15
 8003432:	4023      	ands	r3, r4
 8003434:	3b08      	subs	r3, #8
 8003436:	089b      	lsrs	r3, r3, #2
 8003438:	430a      	orrs	r2, r1
 800343a:	3306      	adds	r3, #6
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	18c3      	adds	r3, r0, r3
 8003440:	3304      	adds	r3, #4
 8003442:	601a      	str	r2, [r3, #0]
}
 8003444:	46c0      	nop			; (mov r8, r8)
 8003446:	46bd      	mov	sp, r7
 8003448:	b003      	add	sp, #12
 800344a:	bd90      	pop	{r4, r7, pc}
 800344c:	e000e100 	.word	0xe000e100
 8003450:	e000ed00 	.word	0xe000ed00

08003454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	1e5a      	subs	r2, r3, #1
 8003460:	2380      	movs	r3, #128	; 0x80
 8003462:	045b      	lsls	r3, r3, #17
 8003464:	429a      	cmp	r2, r3
 8003466:	d301      	bcc.n	800346c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003468:	2301      	movs	r3, #1
 800346a:	e010      	b.n	800348e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800346c:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <SysTick_Config+0x44>)
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	3a01      	subs	r2, #1
 8003472:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003474:	2301      	movs	r3, #1
 8003476:	425b      	negs	r3, r3
 8003478:	2103      	movs	r1, #3
 800347a:	0018      	movs	r0, r3
 800347c:	f7ff ff7c 	bl	8003378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <SysTick_Config+0x44>)
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003486:	4b04      	ldr	r3, [pc, #16]	; (8003498 <SysTick_Config+0x44>)
 8003488:	2207      	movs	r2, #7
 800348a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800348c:	2300      	movs	r3, #0
}
 800348e:	0018      	movs	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	b002      	add	sp, #8
 8003494:	bd80      	pop	{r7, pc}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	e000e010 	.word	0xe000e010

0800349c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	607a      	str	r2, [r7, #4]
 80034a6:	210f      	movs	r1, #15
 80034a8:	187b      	adds	r3, r7, r1
 80034aa:	1c02      	adds	r2, r0, #0
 80034ac:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	187b      	adds	r3, r7, r1
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	b25b      	sxtb	r3, r3
 80034b6:	0011      	movs	r1, r2
 80034b8:	0018      	movs	r0, r3
 80034ba:	f7ff ff5d 	bl	8003378 <__NVIC_SetPriority>
}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b004      	add	sp, #16
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b082      	sub	sp, #8
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	0018      	movs	r0, r3
 80034d2:	f7ff ffbf 	bl	8003454 <SysTick_Config>
 80034d6:	0003      	movs	r3, r0
}
 80034d8:	0018      	movs	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	b002      	add	sp, #8
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ee:	e147      	b.n	8003780 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2101      	movs	r1, #1
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4091      	lsls	r1, r2
 80034fa:	000a      	movs	r2, r1
 80034fc:	4013      	ands	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d100      	bne.n	8003508 <HAL_GPIO_Init+0x28>
 8003506:	e138      	b.n	800377a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2203      	movs	r2, #3
 800350e:	4013      	ands	r3, r2
 8003510:	2b01      	cmp	r3, #1
 8003512:	d005      	beq.n	8003520 <HAL_GPIO_Init+0x40>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2203      	movs	r2, #3
 800351a:	4013      	ands	r3, r2
 800351c:	2b02      	cmp	r3, #2
 800351e:	d130      	bne.n	8003582 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	2203      	movs	r2, #3
 800352c:	409a      	lsls	r2, r3
 800352e:	0013      	movs	r3, r2
 8003530:	43da      	mvns	r2, r3
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	409a      	lsls	r2, r3
 8003542:	0013      	movs	r3, r2
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003556:	2201      	movs	r2, #1
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	409a      	lsls	r2, r3
 800355c:	0013      	movs	r3, r2
 800355e:	43da      	mvns	r2, r3
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4013      	ands	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	091b      	lsrs	r3, r3, #4
 800356c:	2201      	movs	r2, #1
 800356e:	401a      	ands	r2, r3
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	409a      	lsls	r2, r3
 8003574:	0013      	movs	r3, r2
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2203      	movs	r2, #3
 8003588:	4013      	ands	r3, r2
 800358a:	2b03      	cmp	r3, #3
 800358c:	d017      	beq.n	80035be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	2203      	movs	r2, #3
 800359a:	409a      	lsls	r2, r3
 800359c:	0013      	movs	r3, r2
 800359e:	43da      	mvns	r2, r3
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4013      	ands	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	409a      	lsls	r2, r3
 80035b0:	0013      	movs	r3, r2
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2203      	movs	r2, #3
 80035c4:	4013      	ands	r3, r2
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d123      	bne.n	8003612 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	08da      	lsrs	r2, r3, #3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3208      	adds	r2, #8
 80035d2:	0092      	lsls	r2, r2, #2
 80035d4:	58d3      	ldr	r3, [r2, r3]
 80035d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	2207      	movs	r2, #7
 80035dc:	4013      	ands	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	220f      	movs	r2, #15
 80035e2:	409a      	lsls	r2, r3
 80035e4:	0013      	movs	r3, r2
 80035e6:	43da      	mvns	r2, r3
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4013      	ands	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2107      	movs	r1, #7
 80035f6:	400b      	ands	r3, r1
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	409a      	lsls	r2, r3
 80035fc:	0013      	movs	r3, r2
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	08da      	lsrs	r2, r3, #3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3208      	adds	r2, #8
 800360c:	0092      	lsls	r2, r2, #2
 800360e:	6939      	ldr	r1, [r7, #16]
 8003610:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	2203      	movs	r2, #3
 800361e:	409a      	lsls	r2, r3
 8003620:	0013      	movs	r3, r2
 8003622:	43da      	mvns	r2, r3
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4013      	ands	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2203      	movs	r2, #3
 8003630:	401a      	ands	r2, r3
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	409a      	lsls	r2, r3
 8003638:	0013      	movs	r3, r2
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	23c0      	movs	r3, #192	; 0xc0
 800364c:	029b      	lsls	r3, r3, #10
 800364e:	4013      	ands	r3, r2
 8003650:	d100      	bne.n	8003654 <HAL_GPIO_Init+0x174>
 8003652:	e092      	b.n	800377a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003654:	4a50      	ldr	r2, [pc, #320]	; (8003798 <HAL_GPIO_Init+0x2b8>)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	089b      	lsrs	r3, r3, #2
 800365a:	3318      	adds	r3, #24
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	589b      	ldr	r3, [r3, r2]
 8003660:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2203      	movs	r2, #3
 8003666:	4013      	ands	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	220f      	movs	r2, #15
 800366c:	409a      	lsls	r2, r3
 800366e:	0013      	movs	r3, r2
 8003670:	43da      	mvns	r2, r3
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4013      	ands	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	23a0      	movs	r3, #160	; 0xa0
 800367c:	05db      	lsls	r3, r3, #23
 800367e:	429a      	cmp	r2, r3
 8003680:	d013      	beq.n	80036aa <HAL_GPIO_Init+0x1ca>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a45      	ldr	r2, [pc, #276]	; (800379c <HAL_GPIO_Init+0x2bc>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00d      	beq.n	80036a6 <HAL_GPIO_Init+0x1c6>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a44      	ldr	r2, [pc, #272]	; (80037a0 <HAL_GPIO_Init+0x2c0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d007      	beq.n	80036a2 <HAL_GPIO_Init+0x1c2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a43      	ldr	r2, [pc, #268]	; (80037a4 <HAL_GPIO_Init+0x2c4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d101      	bne.n	800369e <HAL_GPIO_Init+0x1be>
 800369a:	2303      	movs	r3, #3
 800369c:	e006      	b.n	80036ac <HAL_GPIO_Init+0x1cc>
 800369e:	2305      	movs	r3, #5
 80036a0:	e004      	b.n	80036ac <HAL_GPIO_Init+0x1cc>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e002      	b.n	80036ac <HAL_GPIO_Init+0x1cc>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <HAL_GPIO_Init+0x1cc>
 80036aa:	2300      	movs	r3, #0
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	2103      	movs	r1, #3
 80036b0:	400a      	ands	r2, r1
 80036b2:	00d2      	lsls	r2, r2, #3
 80036b4:	4093      	lsls	r3, r2
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80036bc:	4936      	ldr	r1, [pc, #216]	; (8003798 <HAL_GPIO_Init+0x2b8>)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	089b      	lsrs	r3, r3, #2
 80036c2:	3318      	adds	r3, #24
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036ca:	4b33      	ldr	r3, [pc, #204]	; (8003798 <HAL_GPIO_Init+0x2b8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	43da      	mvns	r2, r3
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4013      	ands	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	2380      	movs	r3, #128	; 0x80
 80036e0:	035b      	lsls	r3, r3, #13
 80036e2:	4013      	ands	r3, r2
 80036e4:	d003      	beq.n	80036ee <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036ee:	4b2a      	ldr	r3, [pc, #168]	; (8003798 <HAL_GPIO_Init+0x2b8>)
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80036f4:	4b28      	ldr	r3, [pc, #160]	; (8003798 <HAL_GPIO_Init+0x2b8>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	43da      	mvns	r2, r3
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4013      	ands	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	039b      	lsls	r3, r3, #14
 800370c:	4013      	ands	r3, r2
 800370e:	d003      	beq.n	8003718 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003718:	4b1f      	ldr	r3, [pc, #124]	; (8003798 <HAL_GPIO_Init+0x2b8>)
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800371e:	4a1e      	ldr	r2, [pc, #120]	; (8003798 <HAL_GPIO_Init+0x2b8>)
 8003720:	2384      	movs	r3, #132	; 0x84
 8003722:	58d3      	ldr	r3, [r2, r3]
 8003724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	43da      	mvns	r2, r3
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4013      	ands	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	2380      	movs	r3, #128	; 0x80
 8003736:	029b      	lsls	r3, r3, #10
 8003738:	4013      	ands	r3, r2
 800373a:	d003      	beq.n	8003744 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003744:	4914      	ldr	r1, [pc, #80]	; (8003798 <HAL_GPIO_Init+0x2b8>)
 8003746:	2284      	movs	r2, #132	; 0x84
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800374c:	4a12      	ldr	r2, [pc, #72]	; (8003798 <HAL_GPIO_Init+0x2b8>)
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	58d3      	ldr	r3, [r2, r3]
 8003752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	43da      	mvns	r2, r3
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	4013      	ands	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	2380      	movs	r3, #128	; 0x80
 8003764:	025b      	lsls	r3, r3, #9
 8003766:	4013      	ands	r3, r2
 8003768:	d003      	beq.n	8003772 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003772:	4909      	ldr	r1, [pc, #36]	; (8003798 <HAL_GPIO_Init+0x2b8>)
 8003774:	2280      	movs	r2, #128	; 0x80
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	3301      	adds	r3, #1
 800377e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	40da      	lsrs	r2, r3
 8003788:	1e13      	subs	r3, r2, #0
 800378a:	d000      	beq.n	800378e <HAL_GPIO_Init+0x2ae>
 800378c:	e6b0      	b.n	80034f0 <HAL_GPIO_Init+0x10>
  }
}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	46c0      	nop			; (mov r8, r8)
 8003792:	46bd      	mov	sp, r7
 8003794:	b006      	add	sp, #24
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40021800 	.word	0x40021800
 800379c:	50000400 	.word	0x50000400
 80037a0:	50000800 	.word	0x50000800
 80037a4:	50000c00 	.word	0x50000c00

080037a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	0008      	movs	r0, r1
 80037b2:	0011      	movs	r1, r2
 80037b4:	1cbb      	adds	r3, r7, #2
 80037b6:	1c02      	adds	r2, r0, #0
 80037b8:	801a      	strh	r2, [r3, #0]
 80037ba:	1c7b      	adds	r3, r7, #1
 80037bc:	1c0a      	adds	r2, r1, #0
 80037be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037c0:	1c7b      	adds	r3, r7, #1
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d004      	beq.n	80037d2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037c8:	1cbb      	adds	r3, r7, #2
 80037ca:	881a      	ldrh	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037d0:	e003      	b.n	80037da <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037d2:	1cbb      	adds	r3, r7, #2
 80037d4:	881a      	ldrh	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	46bd      	mov	sp, r7
 80037de:	b002      	add	sp, #8
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80037ec:	4b19      	ldr	r3, [pc, #100]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a19      	ldr	r2, [pc, #100]	; (8003858 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	0019      	movs	r1, r3
 80037f6:	4b17      	ldr	r3, [pc, #92]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	2380      	movs	r3, #128	; 0x80
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	429a      	cmp	r2, r3
 8003806:	d11f      	bne.n	8003848 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003808:	4b14      	ldr	r3, [pc, #80]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	0013      	movs	r3, r2
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	189b      	adds	r3, r3, r2
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	4912      	ldr	r1, [pc, #72]	; (8003860 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003816:	0018      	movs	r0, r3
 8003818:	f7fc fc80 	bl	800011c <__udivsi3>
 800381c:	0003      	movs	r3, r0
 800381e:	3301      	adds	r3, #1
 8003820:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003822:	e008      	b.n	8003836 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	3b01      	subs	r3, #1
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	e001      	b.n	8003836 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e009      	b.n	800384a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003836:	4b07      	ldr	r3, [pc, #28]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003838:	695a      	ldr	r2, [r3, #20]
 800383a:	2380      	movs	r3, #128	; 0x80
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	401a      	ands	r2, r3
 8003840:	2380      	movs	r3, #128	; 0x80
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	429a      	cmp	r2, r3
 8003846:	d0ed      	beq.n	8003824 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	0018      	movs	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	b004      	add	sp, #16
 8003850:	bd80      	pop	{r7, pc}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	40007000 	.word	0x40007000
 8003858:	fffff9ff 	.word	0xfffff9ff
 800385c:	20000000 	.word	0x20000000
 8003860:	000f4240 	.word	0x000f4240

08003864 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003868:	4b03      	ldr	r3, [pc, #12]	; (8003878 <LL_RCC_GetAPB1Prescaler+0x14>)
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	23e0      	movs	r3, #224	; 0xe0
 800386e:	01db      	lsls	r3, r3, #7
 8003870:	4013      	ands	r3, r2
}
 8003872:	0018      	movs	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40021000 	.word	0x40021000

0800387c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e2f3      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2201      	movs	r2, #1
 8003894:	4013      	ands	r3, r2
 8003896:	d100      	bne.n	800389a <HAL_RCC_OscConfig+0x1e>
 8003898:	e07c      	b.n	8003994 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800389a:	4bc3      	ldr	r3, [pc, #780]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	2238      	movs	r2, #56	; 0x38
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038a4:	4bc0      	ldr	r3, [pc, #768]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2203      	movs	r2, #3
 80038aa:	4013      	ands	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d102      	bne.n	80038ba <HAL_RCC_OscConfig+0x3e>
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d002      	beq.n	80038c0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d10b      	bne.n	80038d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c0:	4bb9      	ldr	r3, [pc, #740]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	2380      	movs	r3, #128	; 0x80
 80038c6:	029b      	lsls	r3, r3, #10
 80038c8:	4013      	ands	r3, r2
 80038ca:	d062      	beq.n	8003992 <HAL_RCC_OscConfig+0x116>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d15e      	bne.n	8003992 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e2ce      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	025b      	lsls	r3, r3, #9
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d107      	bne.n	80038f4 <HAL_RCC_OscConfig+0x78>
 80038e4:	4bb0      	ldr	r3, [pc, #704]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4baf      	ldr	r3, [pc, #700]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 80038ea:	2180      	movs	r1, #128	; 0x80
 80038ec:	0249      	lsls	r1, r1, #9
 80038ee:	430a      	orrs	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	e020      	b.n	8003936 <HAL_RCC_OscConfig+0xba>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	23a0      	movs	r3, #160	; 0xa0
 80038fa:	02db      	lsls	r3, r3, #11
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d10e      	bne.n	800391e <HAL_RCC_OscConfig+0xa2>
 8003900:	4ba9      	ldr	r3, [pc, #676]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	4ba8      	ldr	r3, [pc, #672]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003906:	2180      	movs	r1, #128	; 0x80
 8003908:	02c9      	lsls	r1, r1, #11
 800390a:	430a      	orrs	r2, r1
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	4ba6      	ldr	r3, [pc, #664]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4ba5      	ldr	r3, [pc, #660]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003914:	2180      	movs	r1, #128	; 0x80
 8003916:	0249      	lsls	r1, r1, #9
 8003918:	430a      	orrs	r2, r1
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	e00b      	b.n	8003936 <HAL_RCC_OscConfig+0xba>
 800391e:	4ba2      	ldr	r3, [pc, #648]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	4ba1      	ldr	r3, [pc, #644]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003924:	49a1      	ldr	r1, [pc, #644]	; (8003bac <HAL_RCC_OscConfig+0x330>)
 8003926:	400a      	ands	r2, r1
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	4b9f      	ldr	r3, [pc, #636]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	4b9e      	ldr	r3, [pc, #632]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003930:	499f      	ldr	r1, [pc, #636]	; (8003bb0 <HAL_RCC_OscConfig+0x334>)
 8003932:	400a      	ands	r2, r1
 8003934:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d014      	beq.n	8003968 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393e:	f7fe fdd7 	bl	80024f0 <HAL_GetTick>
 8003942:	0003      	movs	r3, r0
 8003944:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003948:	f7fe fdd2 	bl	80024f0 <HAL_GetTick>
 800394c:	0002      	movs	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b64      	cmp	r3, #100	; 0x64
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e28d      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800395a:	4b93      	ldr	r3, [pc, #588]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	2380      	movs	r3, #128	; 0x80
 8003960:	029b      	lsls	r3, r3, #10
 8003962:	4013      	ands	r3, r2
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0xcc>
 8003966:	e015      	b.n	8003994 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7fe fdc2 	bl	80024f0 <HAL_GetTick>
 800396c:	0003      	movs	r3, r0
 800396e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003972:	f7fe fdbd 	bl	80024f0 <HAL_GetTick>
 8003976:	0002      	movs	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b64      	cmp	r3, #100	; 0x64
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e278      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003984:	4b88      	ldr	r3, [pc, #544]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	2380      	movs	r3, #128	; 0x80
 800398a:	029b      	lsls	r3, r3, #10
 800398c:	4013      	ands	r3, r2
 800398e:	d1f0      	bne.n	8003972 <HAL_RCC_OscConfig+0xf6>
 8003990:	e000      	b.n	8003994 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003992:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2202      	movs	r2, #2
 800399a:	4013      	ands	r3, r2
 800399c:	d100      	bne.n	80039a0 <HAL_RCC_OscConfig+0x124>
 800399e:	e099      	b.n	8003ad4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039a0:	4b81      	ldr	r3, [pc, #516]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2238      	movs	r2, #56	; 0x38
 80039a6:	4013      	ands	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039aa:	4b7f      	ldr	r3, [pc, #508]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	2203      	movs	r2, #3
 80039b0:	4013      	ands	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d102      	bne.n	80039c0 <HAL_RCC_OscConfig+0x144>
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d002      	beq.n	80039c6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d135      	bne.n	8003a32 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039c6:	4b78      	ldr	r3, [pc, #480]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	2380      	movs	r3, #128	; 0x80
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4013      	ands	r3, r2
 80039d0:	d005      	beq.n	80039de <HAL_RCC_OscConfig+0x162>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e24b      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039de:	4b72      	ldr	r3, [pc, #456]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	4a74      	ldr	r2, [pc, #464]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	0019      	movs	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	021a      	lsls	r2, r3, #8
 80039ee:	4b6e      	ldr	r3, [pc, #440]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 80039f0:	430a      	orrs	r2, r1
 80039f2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d112      	bne.n	8003a20 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80039fa:	4b6b      	ldr	r3, [pc, #428]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a6e      	ldr	r2, [pc, #440]	; (8003bb8 <HAL_RCC_OscConfig+0x33c>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	0019      	movs	r1, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	4b67      	ldr	r3, [pc, #412]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003a0e:	4b66      	ldr	r3, [pc, #408]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	0adb      	lsrs	r3, r3, #11
 8003a14:	2207      	movs	r2, #7
 8003a16:	4013      	ands	r3, r2
 8003a18:	4a68      	ldr	r2, [pc, #416]	; (8003bbc <HAL_RCC_OscConfig+0x340>)
 8003a1a:	40da      	lsrs	r2, r3
 8003a1c:	4b68      	ldr	r3, [pc, #416]	; (8003bc0 <HAL_RCC_OscConfig+0x344>)
 8003a1e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a20:	4b68      	ldr	r3, [pc, #416]	; (8003bc4 <HAL_RCC_OscConfig+0x348>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	0018      	movs	r0, r3
 8003a26:	f7fe fd07 	bl	8002438 <HAL_InitTick>
 8003a2a:	1e03      	subs	r3, r0, #0
 8003a2c:	d051      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e221      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d030      	beq.n	8003a9c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a3a:	4b5b      	ldr	r3, [pc, #364]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a5e      	ldr	r2, [pc, #376]	; (8003bb8 <HAL_RCC_OscConfig+0x33c>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	0019      	movs	r1, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	4b57      	ldr	r3, [pc, #348]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003a4e:	4b56      	ldr	r3, [pc, #344]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4b55      	ldr	r3, [pc, #340]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003a54:	2180      	movs	r1, #128	; 0x80
 8003a56:	0049      	lsls	r1, r1, #1
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fe fd48 	bl	80024f0 <HAL_GetTick>
 8003a60:	0003      	movs	r3, r0
 8003a62:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a66:	f7fe fd43 	bl	80024f0 <HAL_GetTick>
 8003a6a:	0002      	movs	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e1fe      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a78:	4b4b      	ldr	r3, [pc, #300]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4013      	ands	r3, r2
 8003a82:	d0f0      	beq.n	8003a66 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a84:	4b48      	ldr	r3, [pc, #288]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	4a4a      	ldr	r2, [pc, #296]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	0019      	movs	r1, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	021a      	lsls	r2, r3, #8
 8003a94:	4b44      	ldr	r3, [pc, #272]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003a96:	430a      	orrs	r2, r1
 8003a98:	605a      	str	r2, [r3, #4]
 8003a9a:	e01b      	b.n	8003ad4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003a9c:	4b42      	ldr	r3, [pc, #264]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	4b41      	ldr	r3, [pc, #260]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003aa2:	4949      	ldr	r1, [pc, #292]	; (8003bc8 <HAL_RCC_OscConfig+0x34c>)
 8003aa4:	400a      	ands	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fe fd22 	bl	80024f0 <HAL_GetTick>
 8003aac:	0003      	movs	r3, r0
 8003aae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab2:	f7fe fd1d 	bl	80024f0 <HAL_GetTick>
 8003ab6:	0002      	movs	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e1d8      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ac4:	4b38      	ldr	r3, [pc, #224]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	2380      	movs	r3, #128	; 0x80
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4013      	ands	r3, r2
 8003ace:	d1f0      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x236>
 8003ad0:	e000      	b.n	8003ad4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ad2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2208      	movs	r2, #8
 8003ada:	4013      	ands	r3, r2
 8003adc:	d047      	beq.n	8003b6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003ade:	4b32      	ldr	r3, [pc, #200]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2238      	movs	r2, #56	; 0x38
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b18      	cmp	r3, #24
 8003ae8:	d10a      	bne.n	8003b00 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003aea:	4b2f      	ldr	r3, [pc, #188]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aee:	2202      	movs	r2, #2
 8003af0:	4013      	ands	r3, r2
 8003af2:	d03c      	beq.n	8003b6e <HAL_RCC_OscConfig+0x2f2>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d138      	bne.n	8003b6e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e1ba      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d019      	beq.n	8003b3c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003b08:	4b27      	ldr	r3, [pc, #156]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003b0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b0c:	4b26      	ldr	r3, [pc, #152]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003b0e:	2101      	movs	r1, #1
 8003b10:	430a      	orrs	r2, r1
 8003b12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b14:	f7fe fcec 	bl	80024f0 <HAL_GetTick>
 8003b18:	0003      	movs	r3, r0
 8003b1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b1e:	f7fe fce7 	bl	80024f0 <HAL_GetTick>
 8003b22:	0002      	movs	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e1a2      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b30:	4b1d      	ldr	r3, [pc, #116]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b34:	2202      	movs	r2, #2
 8003b36:	4013      	ands	r3, r2
 8003b38:	d0f1      	beq.n	8003b1e <HAL_RCC_OscConfig+0x2a2>
 8003b3a:	e018      	b.n	8003b6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003b3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003b3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b40:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003b42:	2101      	movs	r1, #1
 8003b44:	438a      	bics	r2, r1
 8003b46:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b48:	f7fe fcd2 	bl	80024f0 <HAL_GetTick>
 8003b4c:	0003      	movs	r3, r0
 8003b4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b52:	f7fe fccd 	bl	80024f0 <HAL_GetTick>
 8003b56:	0002      	movs	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e188      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b64:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b68:	2202      	movs	r2, #2
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d1f1      	bne.n	8003b52 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2204      	movs	r2, #4
 8003b74:	4013      	ands	r3, r2
 8003b76:	d100      	bne.n	8003b7a <HAL_RCC_OscConfig+0x2fe>
 8003b78:	e0c6      	b.n	8003d08 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b7a:	231f      	movs	r3, #31
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	2200      	movs	r2, #0
 8003b80:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003b82:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2238      	movs	r2, #56	; 0x38
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	d11e      	bne.n	8003bcc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003b8e:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b92:	2202      	movs	r2, #2
 8003b94:	4013      	ands	r3, r2
 8003b96:	d100      	bne.n	8003b9a <HAL_RCC_OscConfig+0x31e>
 8003b98:	e0b6      	b.n	8003d08 <HAL_RCC_OscConfig+0x48c>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d000      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x328>
 8003ba2:	e0b1      	b.n	8003d08 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e166      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	fffeffff 	.word	0xfffeffff
 8003bb0:	fffbffff 	.word	0xfffbffff
 8003bb4:	ffff80ff 	.word	0xffff80ff
 8003bb8:	ffffc7ff 	.word	0xffffc7ff
 8003bbc:	00f42400 	.word	0x00f42400
 8003bc0:	20000000 	.word	0x20000000
 8003bc4:	20000004 	.word	0x20000004
 8003bc8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bcc:	4bac      	ldr	r3, [pc, #688]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bd0:	2380      	movs	r3, #128	; 0x80
 8003bd2:	055b      	lsls	r3, r3, #21
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d101      	bne.n	8003bdc <HAL_RCC_OscConfig+0x360>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <HAL_RCC_OscConfig+0x362>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d011      	beq.n	8003c06 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003be2:	4ba7      	ldr	r3, [pc, #668]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003be4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003be6:	4ba6      	ldr	r3, [pc, #664]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003be8:	2180      	movs	r1, #128	; 0x80
 8003bea:	0549      	lsls	r1, r1, #21
 8003bec:	430a      	orrs	r2, r1
 8003bee:	63da      	str	r2, [r3, #60]	; 0x3c
 8003bf0:	4ba3      	ldr	r3, [pc, #652]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf4:	2380      	movs	r3, #128	; 0x80
 8003bf6:	055b      	lsls	r3, r3, #21
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003bfe:	231f      	movs	r3, #31
 8003c00:	18fb      	adds	r3, r7, r3
 8003c02:	2201      	movs	r2, #1
 8003c04:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c06:	4b9f      	ldr	r3, [pc, #636]	; (8003e84 <HAL_RCC_OscConfig+0x608>)
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d11a      	bne.n	8003c48 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c12:	4b9c      	ldr	r3, [pc, #624]	; (8003e84 <HAL_RCC_OscConfig+0x608>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	4b9b      	ldr	r3, [pc, #620]	; (8003e84 <HAL_RCC_OscConfig+0x608>)
 8003c18:	2180      	movs	r1, #128	; 0x80
 8003c1a:	0049      	lsls	r1, r1, #1
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003c20:	f7fe fc66 	bl	80024f0 <HAL_GetTick>
 8003c24:	0003      	movs	r3, r0
 8003c26:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2a:	f7fe fc61 	bl	80024f0 <HAL_GetTick>
 8003c2e:	0002      	movs	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e11c      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c3c:	4b91      	ldr	r3, [pc, #580]	; (8003e84 <HAL_RCC_OscConfig+0x608>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	4013      	ands	r3, r2
 8003c46:	d0f0      	beq.n	8003c2a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d106      	bne.n	8003c5e <HAL_RCC_OscConfig+0x3e2>
 8003c50:	4b8b      	ldr	r3, [pc, #556]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003c52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c54:	4b8a      	ldr	r3, [pc, #552]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003c56:	2101      	movs	r1, #1
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c5c:	e01c      	b.n	8003c98 <HAL_RCC_OscConfig+0x41c>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b05      	cmp	r3, #5
 8003c64:	d10c      	bne.n	8003c80 <HAL_RCC_OscConfig+0x404>
 8003c66:	4b86      	ldr	r3, [pc, #536]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003c68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c6a:	4b85      	ldr	r3, [pc, #532]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003c6c:	2104      	movs	r1, #4
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c72:	4b83      	ldr	r3, [pc, #524]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003c74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c76:	4b82      	ldr	r3, [pc, #520]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003c78:	2101      	movs	r1, #1
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c7e:	e00b      	b.n	8003c98 <HAL_RCC_OscConfig+0x41c>
 8003c80:	4b7f      	ldr	r3, [pc, #508]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003c82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c84:	4b7e      	ldr	r3, [pc, #504]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003c86:	2101      	movs	r1, #1
 8003c88:	438a      	bics	r2, r1
 8003c8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c8c:	4b7c      	ldr	r3, [pc, #496]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003c8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c90:	4b7b      	ldr	r3, [pc, #492]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003c92:	2104      	movs	r1, #4
 8003c94:	438a      	bics	r2, r1
 8003c96:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d014      	beq.n	8003cca <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fe fc26 	bl	80024f0 <HAL_GetTick>
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca8:	e009      	b.n	8003cbe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003caa:	f7fe fc21 	bl	80024f0 <HAL_GetTick>
 8003cae:	0002      	movs	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	4a74      	ldr	r2, [pc, #464]	; (8003e88 <HAL_RCC_OscConfig+0x60c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e0db      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cbe:	4b70      	ldr	r3, [pc, #448]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCC_OscConfig+0x42e>
 8003cc8:	e013      	b.n	8003cf2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7fe fc11 	bl	80024f0 <HAL_GetTick>
 8003cce:	0003      	movs	r3, r0
 8003cd0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cd2:	e009      	b.n	8003ce8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd4:	f7fe fc0c 	bl	80024f0 <HAL_GetTick>
 8003cd8:	0002      	movs	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	4a6a      	ldr	r2, [pc, #424]	; (8003e88 <HAL_RCC_OscConfig+0x60c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e0c6      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ce8:	4b65      	ldr	r3, [pc, #404]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cec:	2202      	movs	r2, #2
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003cf2:	231f      	movs	r3, #31
 8003cf4:	18fb      	adds	r3, r7, r3
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d105      	bne.n	8003d08 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003cfc:	4b60      	ldr	r3, [pc, #384]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d00:	4b5f      	ldr	r3, [pc, #380]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003d02:	4962      	ldr	r1, [pc, #392]	; (8003e8c <HAL_RCC_OscConfig+0x610>)
 8003d04:	400a      	ands	r2, r1
 8003d06:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d100      	bne.n	8003d12 <HAL_RCC_OscConfig+0x496>
 8003d10:	e0b0      	b.n	8003e74 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d12:	4b5b      	ldr	r3, [pc, #364]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2238      	movs	r2, #56	; 0x38
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b10      	cmp	r3, #16
 8003d1c:	d100      	bne.n	8003d20 <HAL_RCC_OscConfig+0x4a4>
 8003d1e:	e078      	b.n	8003e12 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d153      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d28:	4b55      	ldr	r3, [pc, #340]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	4b54      	ldr	r3, [pc, #336]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003d2e:	4958      	ldr	r1, [pc, #352]	; (8003e90 <HAL_RCC_OscConfig+0x614>)
 8003d30:	400a      	ands	r2, r1
 8003d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d34:	f7fe fbdc 	bl	80024f0 <HAL_GetTick>
 8003d38:	0003      	movs	r3, r0
 8003d3a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d3e:	f7fe fbd7 	bl	80024f0 <HAL_GetTick>
 8003d42:	0002      	movs	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e092      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d50:	4b4b      	ldr	r3, [pc, #300]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	2380      	movs	r3, #128	; 0x80
 8003d56:	049b      	lsls	r3, r3, #18
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d1f0      	bne.n	8003d3e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d5c:	4b48      	ldr	r3, [pc, #288]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4a4c      	ldr	r2, [pc, #304]	; (8003e94 <HAL_RCC_OscConfig+0x618>)
 8003d62:	4013      	ands	r3, r2
 8003d64:	0019      	movs	r1, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1a      	ldr	r2, [r3, #32]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	021b      	lsls	r3, r3, #8
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	431a      	orrs	r2, r3
 8003d84:	4b3e      	ldr	r3, [pc, #248]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003d86:	430a      	orrs	r2, r1
 8003d88:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d8a:	4b3d      	ldr	r3, [pc, #244]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4b3c      	ldr	r3, [pc, #240]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003d90:	2180      	movs	r1, #128	; 0x80
 8003d92:	0449      	lsls	r1, r1, #17
 8003d94:	430a      	orrs	r2, r1
 8003d96:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003d98:	4b39      	ldr	r3, [pc, #228]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	4b38      	ldr	r3, [pc, #224]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003d9e:	2180      	movs	r1, #128	; 0x80
 8003da0:	0549      	lsls	r1, r1, #21
 8003da2:	430a      	orrs	r2, r1
 8003da4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da6:	f7fe fba3 	bl	80024f0 <HAL_GetTick>
 8003daa:	0003      	movs	r3, r0
 8003dac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db0:	f7fe fb9e 	bl	80024f0 <HAL_GetTick>
 8003db4:	0002      	movs	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e059      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dc2:	4b2f      	ldr	r3, [pc, #188]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	2380      	movs	r3, #128	; 0x80
 8003dc8:	049b      	lsls	r3, r3, #18
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0x534>
 8003dce:	e051      	b.n	8003e74 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd0:	4b2b      	ldr	r3, [pc, #172]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	4b2a      	ldr	r3, [pc, #168]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003dd6:	492e      	ldr	r1, [pc, #184]	; (8003e90 <HAL_RCC_OscConfig+0x614>)
 8003dd8:	400a      	ands	r2, r1
 8003dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fe fb88 	bl	80024f0 <HAL_GetTick>
 8003de0:	0003      	movs	r3, r0
 8003de2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de6:	f7fe fb83 	bl	80024f0 <HAL_GetTick>
 8003dea:	0002      	movs	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e03e      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df8:	4b21      	ldr	r3, [pc, #132]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	049b      	lsls	r3, r3, #18
 8003e00:	4013      	ands	r3, r2
 8003e02:	d1f0      	bne.n	8003de6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003e04:	4b1e      	ldr	r3, [pc, #120]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003e0a:	4923      	ldr	r1, [pc, #140]	; (8003e98 <HAL_RCC_OscConfig+0x61c>)
 8003e0c:	400a      	ands	r2, r1
 8003e0e:	60da      	str	r2, [r3, #12]
 8003e10:	e030      	b.n	8003e74 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e02b      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003e1e:	4b18      	ldr	r3, [pc, #96]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2203      	movs	r2, #3
 8003e28:	401a      	ands	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d11e      	bne.n	8003e70 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2270      	movs	r2, #112	; 0x70
 8003e36:	401a      	ands	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d117      	bne.n	8003e70 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	23fe      	movs	r3, #254	; 0xfe
 8003e44:	01db      	lsls	r3, r3, #7
 8003e46:	401a      	ands	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d10e      	bne.n	8003e70 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	23f8      	movs	r3, #248	; 0xf8
 8003e56:	039b      	lsls	r3, r3, #14
 8003e58:	401a      	ands	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d106      	bne.n	8003e70 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	0f5b      	lsrs	r3, r3, #29
 8003e66:	075a      	lsls	r2, r3, #29
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e000      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	0018      	movs	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b008      	add	sp, #32
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40007000 	.word	0x40007000
 8003e88:	00001388 	.word	0x00001388
 8003e8c:	efffffff 	.word	0xefffffff
 8003e90:	feffffff 	.word	0xfeffffff
 8003e94:	1fc1808c 	.word	0x1fc1808c
 8003e98:	effefffc 	.word	0xeffefffc

08003e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0e9      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb0:	4b76      	ldr	r3, [pc, #472]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2207      	movs	r2, #7
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d91e      	bls.n	8003efc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ebe:	4b73      	ldr	r3, [pc, #460]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2207      	movs	r2, #7
 8003ec4:	4393      	bics	r3, r2
 8003ec6:	0019      	movs	r1, r3
 8003ec8:	4b70      	ldr	r3, [pc, #448]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ed0:	f7fe fb0e 	bl	80024f0 <HAL_GetTick>
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ed8:	e009      	b.n	8003eee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eda:	f7fe fb09 	bl	80024f0 <HAL_GetTick>
 8003ede:	0002      	movs	r2, r0
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	4a6a      	ldr	r2, [pc, #424]	; (8004090 <HAL_RCC_ClockConfig+0x1f4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e0ca      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003eee:	4b67      	ldr	r3, [pc, #412]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2207      	movs	r2, #7
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d1ee      	bne.n	8003eda <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2202      	movs	r2, #2
 8003f02:	4013      	ands	r3, r2
 8003f04:	d015      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d006      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003f10:	4b60      	ldr	r3, [pc, #384]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	4b5f      	ldr	r3, [pc, #380]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003f16:	21e0      	movs	r1, #224	; 0xe0
 8003f18:	01c9      	lsls	r1, r1, #7
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f1e:	4b5d      	ldr	r3, [pc, #372]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	4a5d      	ldr	r2, [pc, #372]	; (8004098 <HAL_RCC_ClockConfig+0x1fc>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	0019      	movs	r1, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	4b59      	ldr	r3, [pc, #356]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2201      	movs	r2, #1
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d057      	beq.n	8003fec <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d107      	bne.n	8003f54 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f44:	4b53      	ldr	r3, [pc, #332]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	029b      	lsls	r3, r3, #10
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d12b      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e097      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d107      	bne.n	8003f6c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f5c:	4b4d      	ldr	r3, [pc, #308]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	2380      	movs	r3, #128	; 0x80
 8003f62:	049b      	lsls	r3, r3, #18
 8003f64:	4013      	ands	r3, r2
 8003f66:	d11f      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e08b      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d107      	bne.n	8003f84 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f74:	4b47      	ldr	r3, [pc, #284]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	2380      	movs	r3, #128	; 0x80
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d113      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e07f      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d106      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f8c:	4b41      	ldr	r3, [pc, #260]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f90:	2202      	movs	r2, #2
 8003f92:	4013      	ands	r3, r2
 8003f94:	d108      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e074      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f9a:	4b3e      	ldr	r3, [pc, #248]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d101      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e06d      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fa8:	4b3a      	ldr	r3, [pc, #232]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2207      	movs	r2, #7
 8003fae:	4393      	bics	r3, r2
 8003fb0:	0019      	movs	r1, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	4b37      	ldr	r3, [pc, #220]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fbc:	f7fe fa98 	bl	80024f0 <HAL_GetTick>
 8003fc0:	0003      	movs	r3, r0
 8003fc2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc4:	e009      	b.n	8003fda <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc6:	f7fe fa93 	bl	80024f0 <HAL_GetTick>
 8003fca:	0002      	movs	r2, r0
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	4a2f      	ldr	r2, [pc, #188]	; (8004090 <HAL_RCC_ClockConfig+0x1f4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e054      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fda:	4b2e      	ldr	r3, [pc, #184]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2238      	movs	r2, #56	; 0x38
 8003fe0:	401a      	ands	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d1ec      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fec:	4b27      	ldr	r3, [pc, #156]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2207      	movs	r2, #7
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d21e      	bcs.n	8004038 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffa:	4b24      	ldr	r3, [pc, #144]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2207      	movs	r2, #7
 8004000:	4393      	bics	r3, r2
 8004002:	0019      	movs	r1, r3
 8004004:	4b21      	ldr	r3, [pc, #132]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800400c:	f7fe fa70 	bl	80024f0 <HAL_GetTick>
 8004010:	0003      	movs	r3, r0
 8004012:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004014:	e009      	b.n	800402a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004016:	f7fe fa6b 	bl	80024f0 <HAL_GetTick>
 800401a:	0002      	movs	r2, r0
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	4a1b      	ldr	r2, [pc, #108]	; (8004090 <HAL_RCC_ClockConfig+0x1f4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e02c      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800402a:	4b18      	ldr	r3, [pc, #96]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2207      	movs	r2, #7
 8004030:	4013      	ands	r3, r2
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d1ee      	bne.n	8004016 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2204      	movs	r2, #4
 800403e:	4013      	ands	r3, r2
 8004040:	d009      	beq.n	8004056 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004042:	4b14      	ldr	r3, [pc, #80]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	4a15      	ldr	r2, [pc, #84]	; (800409c <HAL_RCC_ClockConfig+0x200>)
 8004048:	4013      	ands	r3, r2
 800404a:	0019      	movs	r1, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	4b10      	ldr	r3, [pc, #64]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8004052:	430a      	orrs	r2, r1
 8004054:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004056:	f000 f829 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 800405a:	0001      	movs	r1, r0
 800405c:	4b0d      	ldr	r3, [pc, #52]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	0a1b      	lsrs	r3, r3, #8
 8004062:	220f      	movs	r2, #15
 8004064:	401a      	ands	r2, r3
 8004066:	4b0e      	ldr	r3, [pc, #56]	; (80040a0 <HAL_RCC_ClockConfig+0x204>)
 8004068:	0092      	lsls	r2, r2, #2
 800406a:	58d3      	ldr	r3, [r2, r3]
 800406c:	221f      	movs	r2, #31
 800406e:	4013      	ands	r3, r2
 8004070:	000a      	movs	r2, r1
 8004072:	40da      	lsrs	r2, r3
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_RCC_ClockConfig+0x208>)
 8004076:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004078:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <HAL_RCC_ClockConfig+0x20c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	0018      	movs	r0, r3
 800407e:	f7fe f9db 	bl	8002438 <HAL_InitTick>
 8004082:	0003      	movs	r3, r0
}
 8004084:	0018      	movs	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	b004      	add	sp, #16
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40022000 	.word	0x40022000
 8004090:	00001388 	.word	0x00001388
 8004094:	40021000 	.word	0x40021000
 8004098:	fffff0ff 	.word	0xfffff0ff
 800409c:	ffff8fff 	.word	0xffff8fff
 80040a0:	08008bcc 	.word	0x08008bcc
 80040a4:	20000000 	.word	0x20000000
 80040a8:	20000004 	.word	0x20000004

080040ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040b2:	4b3c      	ldr	r3, [pc, #240]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2238      	movs	r2, #56	; 0x38
 80040b8:	4013      	ands	r3, r2
 80040ba:	d10f      	bne.n	80040dc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80040bc:	4b39      	ldr	r3, [pc, #228]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	0adb      	lsrs	r3, r3, #11
 80040c2:	2207      	movs	r2, #7
 80040c4:	4013      	ands	r3, r2
 80040c6:	2201      	movs	r2, #1
 80040c8:	409a      	lsls	r2, r3
 80040ca:	0013      	movs	r3, r2
 80040cc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80040ce:	6839      	ldr	r1, [r7, #0]
 80040d0:	4835      	ldr	r0, [pc, #212]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80040d2:	f7fc f823 	bl	800011c <__udivsi3>
 80040d6:	0003      	movs	r3, r0
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	e05d      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040dc:	4b31      	ldr	r3, [pc, #196]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	2238      	movs	r2, #56	; 0x38
 80040e2:	4013      	ands	r3, r2
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d102      	bne.n	80040ee <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040e8:	4b30      	ldr	r3, [pc, #192]	; (80041ac <HAL_RCC_GetSysClockFreq+0x100>)
 80040ea:	613b      	str	r3, [r7, #16]
 80040ec:	e054      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040ee:	4b2d      	ldr	r3, [pc, #180]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2238      	movs	r2, #56	; 0x38
 80040f4:	4013      	ands	r3, r2
 80040f6:	2b10      	cmp	r3, #16
 80040f8:	d138      	bne.n	800416c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80040fa:	4b2a      	ldr	r3, [pc, #168]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	2203      	movs	r2, #3
 8004100:	4013      	ands	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004104:	4b27      	ldr	r3, [pc, #156]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	2207      	movs	r2, #7
 800410c:	4013      	ands	r3, r2
 800410e:	3301      	adds	r3, #1
 8004110:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b03      	cmp	r3, #3
 8004116:	d10d      	bne.n	8004134 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	4824      	ldr	r0, [pc, #144]	; (80041ac <HAL_RCC_GetSysClockFreq+0x100>)
 800411c:	f7fb fffe 	bl	800011c <__udivsi3>
 8004120:	0003      	movs	r3, r0
 8004122:	0019      	movs	r1, r3
 8004124:	4b1f      	ldr	r3, [pc, #124]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	0a1b      	lsrs	r3, r3, #8
 800412a:	227f      	movs	r2, #127	; 0x7f
 800412c:	4013      	ands	r3, r2
 800412e:	434b      	muls	r3, r1
 8004130:	617b      	str	r3, [r7, #20]
        break;
 8004132:	e00d      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	481c      	ldr	r0, [pc, #112]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004138:	f7fb fff0 	bl	800011c <__udivsi3>
 800413c:	0003      	movs	r3, r0
 800413e:	0019      	movs	r1, r3
 8004140:	4b18      	ldr	r3, [pc, #96]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	0a1b      	lsrs	r3, r3, #8
 8004146:	227f      	movs	r2, #127	; 0x7f
 8004148:	4013      	ands	r3, r2
 800414a:	434b      	muls	r3, r1
 800414c:	617b      	str	r3, [r7, #20]
        break;
 800414e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004150:	4b14      	ldr	r3, [pc, #80]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	0f5b      	lsrs	r3, r3, #29
 8004156:	2207      	movs	r2, #7
 8004158:	4013      	ands	r3, r2
 800415a:	3301      	adds	r3, #1
 800415c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	6978      	ldr	r0, [r7, #20]
 8004162:	f7fb ffdb 	bl	800011c <__udivsi3>
 8004166:	0003      	movs	r3, r0
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	e015      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800416c:	4b0d      	ldr	r3, [pc, #52]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2238      	movs	r2, #56	; 0x38
 8004172:	4013      	ands	r3, r2
 8004174:	2b20      	cmp	r3, #32
 8004176:	d103      	bne.n	8004180 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	e00b      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004180:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2238      	movs	r2, #56	; 0x38
 8004186:	4013      	ands	r3, r2
 8004188:	2b18      	cmp	r3, #24
 800418a:	d103      	bne.n	8004194 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800418c:	23fa      	movs	r3, #250	; 0xfa
 800418e:	01db      	lsls	r3, r3, #7
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	e001      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004198:	693b      	ldr	r3, [r7, #16]
}
 800419a:	0018      	movs	r0, r3
 800419c:	46bd      	mov	sp, r7
 800419e:	b006      	add	sp, #24
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	40021000 	.word	0x40021000
 80041a8:	00f42400 	.word	0x00f42400
 80041ac:	007a1200 	.word	0x007a1200

080041b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041b4:	4b02      	ldr	r3, [pc, #8]	; (80041c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80041b6:	681b      	ldr	r3, [r3, #0]
}
 80041b8:	0018      	movs	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	20000000 	.word	0x20000000

080041c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c4:	b5b0      	push	{r4, r5, r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80041c8:	f7ff fff2 	bl	80041b0 <HAL_RCC_GetHCLKFreq>
 80041cc:	0004      	movs	r4, r0
 80041ce:	f7ff fb49 	bl	8003864 <LL_RCC_GetAPB1Prescaler>
 80041d2:	0003      	movs	r3, r0
 80041d4:	0b1a      	lsrs	r2, r3, #12
 80041d6:	4b05      	ldr	r3, [pc, #20]	; (80041ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80041d8:	0092      	lsls	r2, r2, #2
 80041da:	58d3      	ldr	r3, [r2, r3]
 80041dc:	221f      	movs	r2, #31
 80041de:	4013      	ands	r3, r2
 80041e0:	40dc      	lsrs	r4, r3
 80041e2:	0023      	movs	r3, r4
}
 80041e4:	0018      	movs	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bdb0      	pop	{r4, r5, r7, pc}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	08008c0c 	.word	0x08008c0c

080041f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80041f8:	2313      	movs	r3, #19
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	2200      	movs	r2, #0
 80041fe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004200:	2312      	movs	r3, #18
 8004202:	18fb      	adds	r3, r7, r3
 8004204:	2200      	movs	r2, #0
 8004206:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	2380      	movs	r3, #128	; 0x80
 800420e:	029b      	lsls	r3, r3, #10
 8004210:	4013      	ands	r3, r2
 8004212:	d100      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004214:	e0a3      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004216:	2011      	movs	r0, #17
 8004218:	183b      	adds	r3, r7, r0
 800421a:	2200      	movs	r2, #0
 800421c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800421e:	4b86      	ldr	r3, [pc, #536]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004220:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004222:	2380      	movs	r3, #128	; 0x80
 8004224:	055b      	lsls	r3, r3, #21
 8004226:	4013      	ands	r3, r2
 8004228:	d110      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800422a:	4b83      	ldr	r3, [pc, #524]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800422c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800422e:	4b82      	ldr	r3, [pc, #520]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004230:	2180      	movs	r1, #128	; 0x80
 8004232:	0549      	lsls	r1, r1, #21
 8004234:	430a      	orrs	r2, r1
 8004236:	63da      	str	r2, [r3, #60]	; 0x3c
 8004238:	4b7f      	ldr	r3, [pc, #508]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800423a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800423c:	2380      	movs	r3, #128	; 0x80
 800423e:	055b      	lsls	r3, r3, #21
 8004240:	4013      	ands	r3, r2
 8004242:	60bb      	str	r3, [r7, #8]
 8004244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004246:	183b      	adds	r3, r7, r0
 8004248:	2201      	movs	r2, #1
 800424a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800424c:	4b7b      	ldr	r3, [pc, #492]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	4b7a      	ldr	r3, [pc, #488]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004252:	2180      	movs	r1, #128	; 0x80
 8004254:	0049      	lsls	r1, r1, #1
 8004256:	430a      	orrs	r2, r1
 8004258:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800425a:	f7fe f949 	bl	80024f0 <HAL_GetTick>
 800425e:	0003      	movs	r3, r0
 8004260:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004262:	e00b      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004264:	f7fe f944 	bl	80024f0 <HAL_GetTick>
 8004268:	0002      	movs	r2, r0
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d904      	bls.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004272:	2313      	movs	r3, #19
 8004274:	18fb      	adds	r3, r7, r3
 8004276:	2203      	movs	r2, #3
 8004278:	701a      	strb	r2, [r3, #0]
        break;
 800427a:	e005      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800427c:	4b6f      	ldr	r3, [pc, #444]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	2380      	movs	r3, #128	; 0x80
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	4013      	ands	r3, r2
 8004286:	d0ed      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004288:	2313      	movs	r3, #19
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d154      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004292:	4b69      	ldr	r3, [pc, #420]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004294:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004296:	23c0      	movs	r3, #192	; 0xc0
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4013      	ands	r3, r2
 800429c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d019      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d014      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042ae:	4b62      	ldr	r3, [pc, #392]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80042b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b2:	4a63      	ldr	r2, [pc, #396]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042b8:	4b5f      	ldr	r3, [pc, #380]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80042ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042bc:	4b5e      	ldr	r3, [pc, #376]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80042be:	2180      	movs	r1, #128	; 0x80
 80042c0:	0249      	lsls	r1, r1, #9
 80042c2:	430a      	orrs	r2, r1
 80042c4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042c6:	4b5c      	ldr	r3, [pc, #368]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80042c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042ca:	4b5b      	ldr	r3, [pc, #364]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80042cc:	495d      	ldr	r1, [pc, #372]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042ce:	400a      	ands	r2, r1
 80042d0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042d2:	4b59      	ldr	r3, [pc, #356]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2201      	movs	r2, #1
 80042dc:	4013      	ands	r3, r2
 80042de:	d016      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e0:	f7fe f906 	bl	80024f0 <HAL_GetTick>
 80042e4:	0003      	movs	r3, r0
 80042e6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e8:	e00c      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ea:	f7fe f901 	bl	80024f0 <HAL_GetTick>
 80042ee:	0002      	movs	r2, r0
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	4a54      	ldr	r2, [pc, #336]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d904      	bls.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80042fa:	2313      	movs	r3, #19
 80042fc:	18fb      	adds	r3, r7, r3
 80042fe:	2203      	movs	r2, #3
 8004300:	701a      	strb	r2, [r3, #0]
            break;
 8004302:	e004      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004304:	4b4c      	ldr	r3, [pc, #304]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004308:	2202      	movs	r2, #2
 800430a:	4013      	ands	r3, r2
 800430c:	d0ed      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800430e:	2313      	movs	r3, #19
 8004310:	18fb      	adds	r3, r7, r3
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10a      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004318:	4b47      	ldr	r3, [pc, #284]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800431a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431c:	4a48      	ldr	r2, [pc, #288]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800431e:	4013      	ands	r3, r2
 8004320:	0019      	movs	r1, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	4b44      	ldr	r3, [pc, #272]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004328:	430a      	orrs	r2, r1
 800432a:	65da      	str	r2, [r3, #92]	; 0x5c
 800432c:	e00c      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800432e:	2312      	movs	r3, #18
 8004330:	18fb      	adds	r3, r7, r3
 8004332:	2213      	movs	r2, #19
 8004334:	18ba      	adds	r2, r7, r2
 8004336:	7812      	ldrb	r2, [r2, #0]
 8004338:	701a      	strb	r2, [r3, #0]
 800433a:	e005      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433c:	2312      	movs	r3, #18
 800433e:	18fb      	adds	r3, r7, r3
 8004340:	2213      	movs	r2, #19
 8004342:	18ba      	adds	r2, r7, r2
 8004344:	7812      	ldrb	r2, [r2, #0]
 8004346:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004348:	2311      	movs	r3, #17
 800434a:	18fb      	adds	r3, r7, r3
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d105      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004352:	4b39      	ldr	r3, [pc, #228]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004356:	4b38      	ldr	r3, [pc, #224]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004358:	493c      	ldr	r1, [pc, #240]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800435a:	400a      	ands	r2, r1
 800435c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2201      	movs	r2, #1
 8004364:	4013      	ands	r3, r2
 8004366:	d009      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004368:	4b33      	ldr	r3, [pc, #204]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800436a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436c:	2203      	movs	r2, #3
 800436e:	4393      	bics	r3, r2
 8004370:	0019      	movs	r1, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	4b30      	ldr	r3, [pc, #192]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004378:	430a      	orrs	r2, r1
 800437a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2202      	movs	r2, #2
 8004382:	4013      	ands	r3, r2
 8004384:	d009      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004386:	4b2c      	ldr	r3, [pc, #176]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438a:	220c      	movs	r2, #12
 800438c:	4393      	bics	r3, r2
 800438e:	0019      	movs	r1, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	4b28      	ldr	r3, [pc, #160]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004396:	430a      	orrs	r2, r1
 8004398:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2220      	movs	r2, #32
 80043a0:	4013      	ands	r3, r2
 80043a2:	d009      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043a4:	4b24      	ldr	r3, [pc, #144]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a8:	4a29      	ldr	r2, [pc, #164]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	0019      	movs	r1, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	4b21      	ldr	r3, [pc, #132]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043b4:	430a      	orrs	r2, r1
 80043b6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	2380      	movs	r3, #128	; 0x80
 80043be:	01db      	lsls	r3, r3, #7
 80043c0:	4013      	ands	r3, r2
 80043c2:	d015      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043c4:	4b1c      	ldr	r3, [pc, #112]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	0899      	lsrs	r1, r3, #2
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	695a      	ldr	r2, [r3, #20]
 80043d0:	4b19      	ldr	r3, [pc, #100]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043d2:	430a      	orrs	r2, r1
 80043d4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	2380      	movs	r3, #128	; 0x80
 80043dc:	05db      	lsls	r3, r3, #23
 80043de:	429a      	cmp	r2, r3
 80043e0:	d106      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80043e2:	4b15      	ldr	r3, [pc, #84]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	4b14      	ldr	r3, [pc, #80]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043e8:	2180      	movs	r1, #128	; 0x80
 80043ea:	0249      	lsls	r1, r1, #9
 80043ec:	430a      	orrs	r2, r1
 80043ee:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	2380      	movs	r3, #128	; 0x80
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	4013      	ands	r3, r2
 80043fa:	d016      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80043fc:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004400:	4a14      	ldr	r2, [pc, #80]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004402:	4013      	ands	r3, r2
 8004404:	0019      	movs	r1, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691a      	ldr	r2, [r3, #16]
 800440a:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800440c:	430a      	orrs	r2, r1
 800440e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	01db      	lsls	r3, r3, #7
 8004418:	429a      	cmp	r2, r3
 800441a:	d106      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800441c:	4b06      	ldr	r3, [pc, #24]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	4b05      	ldr	r3, [pc, #20]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004422:	2180      	movs	r1, #128	; 0x80
 8004424:	0249      	lsls	r1, r1, #9
 8004426:	430a      	orrs	r2, r1
 8004428:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800442a:	2312      	movs	r3, #18
 800442c:	18fb      	adds	r3, r7, r3
 800442e:	781b      	ldrb	r3, [r3, #0]
}
 8004430:	0018      	movs	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	b006      	add	sp, #24
 8004436:	bd80      	pop	{r7, pc}
 8004438:	40021000 	.word	0x40021000
 800443c:	40007000 	.word	0x40007000
 8004440:	fffffcff 	.word	0xfffffcff
 8004444:	fffeffff 	.word	0xfffeffff
 8004448:	00001388 	.word	0x00001388
 800444c:	efffffff 	.word	0xefffffff
 8004450:	ffffcfff 	.word	0xffffcfff
 8004454:	ffff3fff 	.word	0xffff3fff

08004458 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e04a      	b.n	8004500 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	223d      	movs	r2, #61	; 0x3d
 800446e:	5c9b      	ldrb	r3, [r3, r2]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d107      	bne.n	8004486 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	223c      	movs	r2, #60	; 0x3c
 800447a:	2100      	movs	r1, #0
 800447c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	0018      	movs	r0, r3
 8004482:	f7fd fd05 	bl	8001e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	223d      	movs	r2, #61	; 0x3d
 800448a:	2102      	movs	r1, #2
 800448c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3304      	adds	r3, #4
 8004496:	0019      	movs	r1, r3
 8004498:	0010      	movs	r0, r2
 800449a:	f000 fb13 	bl	8004ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2248      	movs	r2, #72	; 0x48
 80044a2:	2101      	movs	r1, #1
 80044a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	223e      	movs	r2, #62	; 0x3e
 80044aa:	2101      	movs	r1, #1
 80044ac:	5499      	strb	r1, [r3, r2]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	223f      	movs	r2, #63	; 0x3f
 80044b2:	2101      	movs	r1, #1
 80044b4:	5499      	strb	r1, [r3, r2]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2240      	movs	r2, #64	; 0x40
 80044ba:	2101      	movs	r1, #1
 80044bc:	5499      	strb	r1, [r3, r2]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2241      	movs	r2, #65	; 0x41
 80044c2:	2101      	movs	r1, #1
 80044c4:	5499      	strb	r1, [r3, r2]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2242      	movs	r2, #66	; 0x42
 80044ca:	2101      	movs	r1, #1
 80044cc:	5499      	strb	r1, [r3, r2]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2243      	movs	r2, #67	; 0x43
 80044d2:	2101      	movs	r1, #1
 80044d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2244      	movs	r2, #68	; 0x44
 80044da:	2101      	movs	r1, #1
 80044dc:	5499      	strb	r1, [r3, r2]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2245      	movs	r2, #69	; 0x45
 80044e2:	2101      	movs	r1, #1
 80044e4:	5499      	strb	r1, [r3, r2]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2246      	movs	r2, #70	; 0x46
 80044ea:	2101      	movs	r1, #1
 80044ec:	5499      	strb	r1, [r3, r2]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2247      	movs	r2, #71	; 0x47
 80044f2:	2101      	movs	r1, #1
 80044f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	223d      	movs	r2, #61	; 0x3d
 80044fa:	2101      	movs	r1, #1
 80044fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	0018      	movs	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	b002      	add	sp, #8
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e04a      	b.n	80045b0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	223d      	movs	r2, #61	; 0x3d
 800451e:	5c9b      	ldrb	r3, [r3, r2]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d107      	bne.n	8004536 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	223c      	movs	r2, #60	; 0x3c
 800452a:	2100      	movs	r1, #0
 800452c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0018      	movs	r0, r3
 8004532:	f000 f841 	bl	80045b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	223d      	movs	r2, #61	; 0x3d
 800453a:	2102      	movs	r1, #2
 800453c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3304      	adds	r3, #4
 8004546:	0019      	movs	r1, r3
 8004548:	0010      	movs	r0, r2
 800454a:	f000 fabb 	bl	8004ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2248      	movs	r2, #72	; 0x48
 8004552:	2101      	movs	r1, #1
 8004554:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	223e      	movs	r2, #62	; 0x3e
 800455a:	2101      	movs	r1, #1
 800455c:	5499      	strb	r1, [r3, r2]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	223f      	movs	r2, #63	; 0x3f
 8004562:	2101      	movs	r1, #1
 8004564:	5499      	strb	r1, [r3, r2]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2240      	movs	r2, #64	; 0x40
 800456a:	2101      	movs	r1, #1
 800456c:	5499      	strb	r1, [r3, r2]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2241      	movs	r2, #65	; 0x41
 8004572:	2101      	movs	r1, #1
 8004574:	5499      	strb	r1, [r3, r2]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2242      	movs	r2, #66	; 0x42
 800457a:	2101      	movs	r1, #1
 800457c:	5499      	strb	r1, [r3, r2]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2243      	movs	r2, #67	; 0x43
 8004582:	2101      	movs	r1, #1
 8004584:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2244      	movs	r2, #68	; 0x44
 800458a:	2101      	movs	r1, #1
 800458c:	5499      	strb	r1, [r3, r2]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2245      	movs	r2, #69	; 0x45
 8004592:	2101      	movs	r1, #1
 8004594:	5499      	strb	r1, [r3, r2]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2246      	movs	r2, #70	; 0x46
 800459a:	2101      	movs	r1, #1
 800459c:	5499      	strb	r1, [r3, r2]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2247      	movs	r2, #71	; 0x47
 80045a2:	2101      	movs	r1, #1
 80045a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	223d      	movs	r2, #61	; 0x3d
 80045aa:	2101      	movs	r1, #1
 80045ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	0018      	movs	r0, r3
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b002      	add	sp, #8
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045c0:	46c0      	nop			; (mov r8, r8)
 80045c2:	46bd      	mov	sp, r7
 80045c4:	b002      	add	sp, #8
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e090      	b.n	80046fe <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	223d      	movs	r2, #61	; 0x3d
 80045e0:	5c9b      	ldrb	r3, [r3, r2]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d107      	bne.n	80045f8 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	223c      	movs	r2, #60	; 0x3c
 80045ec:	2100      	movs	r1, #0
 80045ee:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	0018      	movs	r0, r3
 80045f4:	f7fd fbc8 	bl	8001d88 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	223d      	movs	r2, #61	; 0x3d
 80045fc:	2102      	movs	r1, #2
 80045fe:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	493f      	ldr	r1, [pc, #252]	; (8004708 <HAL_TIM_Encoder_Init+0x140>)
 800460c:	400a      	ands	r2, r1
 800460e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3304      	adds	r3, #4
 8004618:	0019      	movs	r1, r3
 800461a:	0010      	movs	r0, r2
 800461c:	f000 fa52 	bl	8004ac4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	4a31      	ldr	r2, [pc, #196]	; (800470c <HAL_TIM_Encoder_Init+0x144>)
 8004646:	4013      	ands	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	4313      	orrs	r3, r2
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	4a2c      	ldr	r2, [pc, #176]	; (8004710 <HAL_TIM_Encoder_Init+0x148>)
 8004660:	4013      	ands	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	4a2b      	ldr	r2, [pc, #172]	; (8004714 <HAL_TIM_Encoder_Init+0x14c>)
 8004668:	4013      	ands	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	4313      	orrs	r3, r2
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	011a      	lsls	r2, r3, #4
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	031b      	lsls	r3, r3, #12
 800468a:	4313      	orrs	r3, r2
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2222      	movs	r2, #34	; 0x22
 8004696:	4393      	bics	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2288      	movs	r2, #136	; 0x88
 800469e:	4393      	bics	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	4313      	orrs	r3, r2
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2248      	movs	r2, #72	; 0x48
 80046d0:	2101      	movs	r1, #1
 80046d2:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	223e      	movs	r2, #62	; 0x3e
 80046d8:	2101      	movs	r1, #1
 80046da:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	223f      	movs	r2, #63	; 0x3f
 80046e0:	2101      	movs	r1, #1
 80046e2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2244      	movs	r2, #68	; 0x44
 80046e8:	2101      	movs	r1, #1
 80046ea:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2245      	movs	r2, #69	; 0x45
 80046f0:	2101      	movs	r1, #1
 80046f2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	223d      	movs	r2, #61	; 0x3d
 80046f8:	2101      	movs	r1, #1
 80046fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	0018      	movs	r0, r3
 8004700:	46bd      	mov	sp, r7
 8004702:	b006      	add	sp, #24
 8004704:	bd80      	pop	{r7, pc}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	fffebff8 	.word	0xfffebff8
 800470c:	fffffcfc 	.word	0xfffffcfc
 8004710:	fffff3f3 	.word	0xfffff3f3
 8004714:	ffff0f0f 	.word	0xffff0f0f

08004718 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004724:	2317      	movs	r3, #23
 8004726:	18fb      	adds	r3, r7, r3
 8004728:	2200      	movs	r2, #0
 800472a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	223c      	movs	r2, #60	; 0x3c
 8004730:	5c9b      	ldrb	r3, [r3, r2]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004736:	2302      	movs	r3, #2
 8004738:	e0e5      	b.n	8004906 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	223c      	movs	r2, #60	; 0x3c
 800473e:	2101      	movs	r1, #1
 8004740:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b14      	cmp	r3, #20
 8004746:	d900      	bls.n	800474a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004748:	e0d1      	b.n	80048ee <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	009a      	lsls	r2, r3, #2
 800474e:	4b70      	ldr	r3, [pc, #448]	; (8004910 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004750:	18d3      	adds	r3, r2, r3
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	0011      	movs	r1, r2
 800475e:	0018      	movs	r0, r3
 8004760:	f000 fa26 	bl	8004bb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2108      	movs	r1, #8
 8004770:	430a      	orrs	r2, r1
 8004772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2104      	movs	r1, #4
 8004780:	438a      	bics	r2, r1
 8004782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6999      	ldr	r1, [r3, #24]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	619a      	str	r2, [r3, #24]
      break;
 8004796:	e0af      	b.n	80048f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	0011      	movs	r1, r2
 80047a0:	0018      	movs	r0, r3
 80047a2:	f000 fa8f 	bl	8004cc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	699a      	ldr	r2, [r3, #24]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2180      	movs	r1, #128	; 0x80
 80047b2:	0109      	lsls	r1, r1, #4
 80047b4:	430a      	orrs	r2, r1
 80047b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4954      	ldr	r1, [pc, #336]	; (8004914 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80047c4:	400a      	ands	r2, r1
 80047c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6999      	ldr	r1, [r3, #24]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	021a      	lsls	r2, r3, #8
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	619a      	str	r2, [r3, #24]
      break;
 80047dc:	e08c      	b.n	80048f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	0011      	movs	r1, r2
 80047e6:	0018      	movs	r0, r3
 80047e8:	f000 faf0 	bl	8004dcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	69da      	ldr	r2, [r3, #28]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2108      	movs	r1, #8
 80047f8:	430a      	orrs	r2, r1
 80047fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	69da      	ldr	r2, [r3, #28]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2104      	movs	r1, #4
 8004808:	438a      	bics	r2, r1
 800480a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	69d9      	ldr	r1, [r3, #28]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	61da      	str	r2, [r3, #28]
      break;
 800481e:	e06b      	b.n	80048f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	0011      	movs	r1, r2
 8004828:	0018      	movs	r0, r3
 800482a:	f000 fb57 	bl	8004edc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69da      	ldr	r2, [r3, #28]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2180      	movs	r1, #128	; 0x80
 800483a:	0109      	lsls	r1, r1, #4
 800483c:	430a      	orrs	r2, r1
 800483e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	69da      	ldr	r2, [r3, #28]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4932      	ldr	r1, [pc, #200]	; (8004914 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800484c:	400a      	ands	r2, r1
 800484e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	69d9      	ldr	r1, [r3, #28]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	021a      	lsls	r2, r3, #8
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	61da      	str	r2, [r3, #28]
      break;
 8004864:	e048      	b.n	80048f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	0011      	movs	r1, r2
 800486e:	0018      	movs	r0, r3
 8004870:	f000 fb9e 	bl	8004fb0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2108      	movs	r1, #8
 8004880:	430a      	orrs	r2, r1
 8004882:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2104      	movs	r1, #4
 8004890:	438a      	bics	r2, r1
 8004892:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80048a6:	e027      	b.n	80048f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	0011      	movs	r1, r2
 80048b0:	0018      	movs	r0, r3
 80048b2:	f000 fbdd 	bl	8005070 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2180      	movs	r1, #128	; 0x80
 80048c2:	0109      	lsls	r1, r1, #4
 80048c4:	430a      	orrs	r2, r1
 80048c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4910      	ldr	r1, [pc, #64]	; (8004914 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80048d4:	400a      	ands	r2, r1
 80048d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	021a      	lsls	r2, r3, #8
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80048ec:	e004      	b.n	80048f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80048ee:	2317      	movs	r3, #23
 80048f0:	18fb      	adds	r3, r7, r3
 80048f2:	2201      	movs	r2, #1
 80048f4:	701a      	strb	r2, [r3, #0]
      break;
 80048f6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	223c      	movs	r2, #60	; 0x3c
 80048fc:	2100      	movs	r1, #0
 80048fe:	5499      	strb	r1, [r3, r2]

  return status;
 8004900:	2317      	movs	r3, #23
 8004902:	18fb      	adds	r3, r7, r3
 8004904:	781b      	ldrb	r3, [r3, #0]
}
 8004906:	0018      	movs	r0, r3
 8004908:	46bd      	mov	sp, r7
 800490a:	b006      	add	sp, #24
 800490c:	bd80      	pop	{r7, pc}
 800490e:	46c0      	nop			; (mov r8, r8)
 8004910:	08008c2c 	.word	0x08008c2c
 8004914:	fffffbff 	.word	0xfffffbff

08004918 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004922:	230f      	movs	r3, #15
 8004924:	18fb      	adds	r3, r7, r3
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	223c      	movs	r2, #60	; 0x3c
 800492e:	5c9b      	ldrb	r3, [r3, r2]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_TIM_ConfigClockSource+0x20>
 8004934:	2302      	movs	r3, #2
 8004936:	e0bc      	b.n	8004ab2 <HAL_TIM_ConfigClockSource+0x19a>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	223c      	movs	r2, #60	; 0x3c
 800493c:	2101      	movs	r1, #1
 800493e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	223d      	movs	r2, #61	; 0x3d
 8004944:	2102      	movs	r1, #2
 8004946:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4a5a      	ldr	r2, [pc, #360]	; (8004abc <HAL_TIM_ConfigClockSource+0x1a4>)
 8004954:	4013      	ands	r3, r2
 8004956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	4a59      	ldr	r2, [pc, #356]	; (8004ac0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800495c:	4013      	ands	r3, r2
 800495e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2280      	movs	r2, #128	; 0x80
 800496e:	0192      	lsls	r2, r2, #6
 8004970:	4293      	cmp	r3, r2
 8004972:	d040      	beq.n	80049f6 <HAL_TIM_ConfigClockSource+0xde>
 8004974:	2280      	movs	r2, #128	; 0x80
 8004976:	0192      	lsls	r2, r2, #6
 8004978:	4293      	cmp	r3, r2
 800497a:	d900      	bls.n	800497e <HAL_TIM_ConfigClockSource+0x66>
 800497c:	e088      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x178>
 800497e:	2280      	movs	r2, #128	; 0x80
 8004980:	0152      	lsls	r2, r2, #5
 8004982:	4293      	cmp	r3, r2
 8004984:	d100      	bne.n	8004988 <HAL_TIM_ConfigClockSource+0x70>
 8004986:	e088      	b.n	8004a9a <HAL_TIM_ConfigClockSource+0x182>
 8004988:	2280      	movs	r2, #128	; 0x80
 800498a:	0152      	lsls	r2, r2, #5
 800498c:	4293      	cmp	r3, r2
 800498e:	d900      	bls.n	8004992 <HAL_TIM_ConfigClockSource+0x7a>
 8004990:	e07e      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x178>
 8004992:	2b70      	cmp	r3, #112	; 0x70
 8004994:	d018      	beq.n	80049c8 <HAL_TIM_ConfigClockSource+0xb0>
 8004996:	d900      	bls.n	800499a <HAL_TIM_ConfigClockSource+0x82>
 8004998:	e07a      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x178>
 800499a:	2b60      	cmp	r3, #96	; 0x60
 800499c:	d04f      	beq.n	8004a3e <HAL_TIM_ConfigClockSource+0x126>
 800499e:	d900      	bls.n	80049a2 <HAL_TIM_ConfigClockSource+0x8a>
 80049a0:	e076      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x178>
 80049a2:	2b50      	cmp	r3, #80	; 0x50
 80049a4:	d03b      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0x106>
 80049a6:	d900      	bls.n	80049aa <HAL_TIM_ConfigClockSource+0x92>
 80049a8:	e072      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x178>
 80049aa:	2b40      	cmp	r3, #64	; 0x40
 80049ac:	d057      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0x146>
 80049ae:	d900      	bls.n	80049b2 <HAL_TIM_ConfigClockSource+0x9a>
 80049b0:	e06e      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x178>
 80049b2:	2b30      	cmp	r3, #48	; 0x30
 80049b4:	d063      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x166>
 80049b6:	d86b      	bhi.n	8004a90 <HAL_TIM_ConfigClockSource+0x178>
 80049b8:	2b20      	cmp	r3, #32
 80049ba:	d060      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x166>
 80049bc:	d868      	bhi.n	8004a90 <HAL_TIM_ConfigClockSource+0x178>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d05d      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x166>
 80049c2:	2b10      	cmp	r3, #16
 80049c4:	d05b      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x166>
 80049c6:	e063      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049d8:	f000 fc2a 	bl	8005230 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2277      	movs	r2, #119	; 0x77
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	609a      	str	r2, [r3, #8]
      break;
 80049f4:	e052      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a06:	f000 fc13 	bl	8005230 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2180      	movs	r1, #128	; 0x80
 8004a16:	01c9      	lsls	r1, r1, #7
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	609a      	str	r2, [r3, #8]
      break;
 8004a1c:	e03e      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a2a:	001a      	movs	r2, r3
 8004a2c:	f000 fb84 	bl	8005138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2150      	movs	r1, #80	; 0x50
 8004a36:	0018      	movs	r0, r3
 8004a38:	f000 fbde 	bl	80051f8 <TIM_ITRx_SetConfig>
      break;
 8004a3c:	e02e      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a4a:	001a      	movs	r2, r3
 8004a4c:	f000 fba2 	bl	8005194 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2160      	movs	r1, #96	; 0x60
 8004a56:	0018      	movs	r0, r3
 8004a58:	f000 fbce 	bl	80051f8 <TIM_ITRx_SetConfig>
      break;
 8004a5c:	e01e      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6a:	001a      	movs	r2, r3
 8004a6c:	f000 fb64 	bl	8005138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2140      	movs	r1, #64	; 0x40
 8004a76:	0018      	movs	r0, r3
 8004a78:	f000 fbbe 	bl	80051f8 <TIM_ITRx_SetConfig>
      break;
 8004a7c:	e00e      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	0019      	movs	r1, r3
 8004a88:	0010      	movs	r0, r2
 8004a8a:	f000 fbb5 	bl	80051f8 <TIM_ITRx_SetConfig>
      break;
 8004a8e:	e005      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004a90:	230f      	movs	r3, #15
 8004a92:	18fb      	adds	r3, r7, r3
 8004a94:	2201      	movs	r2, #1
 8004a96:	701a      	strb	r2, [r3, #0]
      break;
 8004a98:	e000      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004a9a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	223d      	movs	r2, #61	; 0x3d
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	223c      	movs	r2, #60	; 0x3c
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	5499      	strb	r1, [r3, r2]

  return status;
 8004aac:	230f      	movs	r3, #15
 8004aae:	18fb      	adds	r3, r7, r3
 8004ab0:	781b      	ldrb	r3, [r3, #0]
}
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	b004      	add	sp, #16
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	46c0      	nop			; (mov r8, r8)
 8004abc:	ffceff88 	.word	0xffceff88
 8004ac0:	ffff00ff 	.word	0xffff00ff

08004ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a2f      	ldr	r2, [pc, #188]	; (8004b94 <TIM_Base_SetConfig+0xd0>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d003      	beq.n	8004ae4 <TIM_Base_SetConfig+0x20>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a2e      	ldr	r2, [pc, #184]	; (8004b98 <TIM_Base_SetConfig+0xd4>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d108      	bne.n	8004af6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2270      	movs	r2, #112	; 0x70
 8004ae8:	4393      	bics	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a26      	ldr	r2, [pc, #152]	; (8004b94 <TIM_Base_SetConfig+0xd0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d013      	beq.n	8004b26 <TIM_Base_SetConfig+0x62>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a25      	ldr	r2, [pc, #148]	; (8004b98 <TIM_Base_SetConfig+0xd4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00f      	beq.n	8004b26 <TIM_Base_SetConfig+0x62>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a24      	ldr	r2, [pc, #144]	; (8004b9c <TIM_Base_SetConfig+0xd8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00b      	beq.n	8004b26 <TIM_Base_SetConfig+0x62>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a23      	ldr	r2, [pc, #140]	; (8004ba0 <TIM_Base_SetConfig+0xdc>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d007      	beq.n	8004b26 <TIM_Base_SetConfig+0x62>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a22      	ldr	r2, [pc, #136]	; (8004ba4 <TIM_Base_SetConfig+0xe0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d003      	beq.n	8004b26 <TIM_Base_SetConfig+0x62>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a21      	ldr	r2, [pc, #132]	; (8004ba8 <TIM_Base_SetConfig+0xe4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d108      	bne.n	8004b38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4a20      	ldr	r2, [pc, #128]	; (8004bac <TIM_Base_SetConfig+0xe8>)
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2280      	movs	r2, #128	; 0x80
 8004b3c:	4393      	bics	r3, r2
 8004b3e:	001a      	movs	r2, r3
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a0c      	ldr	r2, [pc, #48]	; (8004b94 <TIM_Base_SetConfig+0xd0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d00b      	beq.n	8004b7e <TIM_Base_SetConfig+0xba>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a0d      	ldr	r2, [pc, #52]	; (8004ba0 <TIM_Base_SetConfig+0xdc>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d007      	beq.n	8004b7e <TIM_Base_SetConfig+0xba>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a0c      	ldr	r2, [pc, #48]	; (8004ba4 <TIM_Base_SetConfig+0xe0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d003      	beq.n	8004b7e <TIM_Base_SetConfig+0xba>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a0b      	ldr	r2, [pc, #44]	; (8004ba8 <TIM_Base_SetConfig+0xe4>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d103      	bne.n	8004b86 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	691a      	ldr	r2, [r3, #16]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	615a      	str	r2, [r3, #20]
}
 8004b8c:	46c0      	nop			; (mov r8, r8)
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b004      	add	sp, #16
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40012c00 	.word	0x40012c00
 8004b98:	40000400 	.word	0x40000400
 8004b9c:	40002000 	.word	0x40002000
 8004ba0:	40014000 	.word	0x40014000
 8004ba4:	40014400 	.word	0x40014400
 8004ba8:	40014800 	.word	0x40014800
 8004bac:	fffffcff 	.word	0xfffffcff

08004bb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	4393      	bics	r3, r2
 8004bc2:	001a      	movs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4a32      	ldr	r2, [pc, #200]	; (8004ca8 <TIM_OC1_SetConfig+0xf8>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2203      	movs	r2, #3
 8004be6:	4393      	bics	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	4393      	bics	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a28      	ldr	r2, [pc, #160]	; (8004cac <TIM_OC1_SetConfig+0xfc>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00b      	beq.n	8004c26 <TIM_OC1_SetConfig+0x76>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a27      	ldr	r2, [pc, #156]	; (8004cb0 <TIM_OC1_SetConfig+0x100>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d007      	beq.n	8004c26 <TIM_OC1_SetConfig+0x76>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a26      	ldr	r2, [pc, #152]	; (8004cb4 <TIM_OC1_SetConfig+0x104>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d003      	beq.n	8004c26 <TIM_OC1_SetConfig+0x76>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a25      	ldr	r2, [pc, #148]	; (8004cb8 <TIM_OC1_SetConfig+0x108>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d10c      	bne.n	8004c40 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2208      	movs	r2, #8
 8004c2a:	4393      	bics	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	2204      	movs	r2, #4
 8004c3c:	4393      	bics	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a1a      	ldr	r2, [pc, #104]	; (8004cac <TIM_OC1_SetConfig+0xfc>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d00b      	beq.n	8004c60 <TIM_OC1_SetConfig+0xb0>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a19      	ldr	r2, [pc, #100]	; (8004cb0 <TIM_OC1_SetConfig+0x100>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d007      	beq.n	8004c60 <TIM_OC1_SetConfig+0xb0>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a18      	ldr	r2, [pc, #96]	; (8004cb4 <TIM_OC1_SetConfig+0x104>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d003      	beq.n	8004c60 <TIM_OC1_SetConfig+0xb0>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a17      	ldr	r2, [pc, #92]	; (8004cb8 <TIM_OC1_SetConfig+0x108>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d111      	bne.n	8004c84 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	4a16      	ldr	r2, [pc, #88]	; (8004cbc <TIM_OC1_SetConfig+0x10c>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4a15      	ldr	r2, [pc, #84]	; (8004cc0 <TIM_OC1_SetConfig+0x110>)
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	621a      	str	r2, [r3, #32]
}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	b006      	add	sp, #24
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	fffeff8f 	.word	0xfffeff8f
 8004cac:	40012c00 	.word	0x40012c00
 8004cb0:	40014000 	.word	0x40014000
 8004cb4:	40014400 	.word	0x40014400
 8004cb8:	40014800 	.word	0x40014800
 8004cbc:	fffffeff 	.word	0xfffffeff
 8004cc0:	fffffdff 	.word	0xfffffdff

08004cc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	2210      	movs	r2, #16
 8004cd4:	4393      	bics	r3, r2
 8004cd6:	001a      	movs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4a2e      	ldr	r2, [pc, #184]	; (8004dac <TIM_OC2_SetConfig+0xe8>)
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4a2d      	ldr	r2, [pc, #180]	; (8004db0 <TIM_OC2_SetConfig+0xec>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	021b      	lsls	r3, r3, #8
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	4393      	bics	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a24      	ldr	r2, [pc, #144]	; (8004db4 <TIM_OC2_SetConfig+0xf0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d10d      	bne.n	8004d42 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2280      	movs	r2, #128	; 0x80
 8004d2a:	4393      	bics	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2240      	movs	r2, #64	; 0x40
 8004d3e:	4393      	bics	r3, r2
 8004d40:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a1b      	ldr	r2, [pc, #108]	; (8004db4 <TIM_OC2_SetConfig+0xf0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d00b      	beq.n	8004d62 <TIM_OC2_SetConfig+0x9e>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a1a      	ldr	r2, [pc, #104]	; (8004db8 <TIM_OC2_SetConfig+0xf4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d007      	beq.n	8004d62 <TIM_OC2_SetConfig+0x9e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a19      	ldr	r2, [pc, #100]	; (8004dbc <TIM_OC2_SetConfig+0xf8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d003      	beq.n	8004d62 <TIM_OC2_SetConfig+0x9e>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a18      	ldr	r2, [pc, #96]	; (8004dc0 <TIM_OC2_SetConfig+0xfc>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d113      	bne.n	8004d8a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	4a17      	ldr	r2, [pc, #92]	; (8004dc4 <TIM_OC2_SetConfig+0x100>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	4a16      	ldr	r2, [pc, #88]	; (8004dc8 <TIM_OC2_SetConfig+0x104>)
 8004d6e:	4013      	ands	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	621a      	str	r2, [r3, #32]
}
 8004da4:	46c0      	nop			; (mov r8, r8)
 8004da6:	46bd      	mov	sp, r7
 8004da8:	b006      	add	sp, #24
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	feff8fff 	.word	0xfeff8fff
 8004db0:	fffffcff 	.word	0xfffffcff
 8004db4:	40012c00 	.word	0x40012c00
 8004db8:	40014000 	.word	0x40014000
 8004dbc:	40014400 	.word	0x40014400
 8004dc0:	40014800 	.word	0x40014800
 8004dc4:	fffffbff 	.word	0xfffffbff
 8004dc8:	fffff7ff 	.word	0xfffff7ff

08004dcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	4a35      	ldr	r2, [pc, #212]	; (8004eb0 <TIM_OC3_SetConfig+0xe4>)
 8004ddc:	401a      	ands	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4a2f      	ldr	r2, [pc, #188]	; (8004eb4 <TIM_OC3_SetConfig+0xe8>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2203      	movs	r2, #3
 8004e00:	4393      	bics	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	4a29      	ldr	r2, [pc, #164]	; (8004eb8 <TIM_OC3_SetConfig+0xec>)
 8004e12:	4013      	ands	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	021b      	lsls	r3, r3, #8
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a25      	ldr	r2, [pc, #148]	; (8004ebc <TIM_OC3_SetConfig+0xf0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d10d      	bne.n	8004e46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	4a24      	ldr	r2, [pc, #144]	; (8004ec0 <TIM_OC3_SetConfig+0xf4>)
 8004e2e:	4013      	ands	r3, r2
 8004e30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	021b      	lsls	r3, r3, #8
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	4a20      	ldr	r2, [pc, #128]	; (8004ec4 <TIM_OC3_SetConfig+0xf8>)
 8004e42:	4013      	ands	r3, r2
 8004e44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a1c      	ldr	r2, [pc, #112]	; (8004ebc <TIM_OC3_SetConfig+0xf0>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00b      	beq.n	8004e66 <TIM_OC3_SetConfig+0x9a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a1d      	ldr	r2, [pc, #116]	; (8004ec8 <TIM_OC3_SetConfig+0xfc>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d007      	beq.n	8004e66 <TIM_OC3_SetConfig+0x9a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a1c      	ldr	r2, [pc, #112]	; (8004ecc <TIM_OC3_SetConfig+0x100>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d003      	beq.n	8004e66 <TIM_OC3_SetConfig+0x9a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a1b      	ldr	r2, [pc, #108]	; (8004ed0 <TIM_OC3_SetConfig+0x104>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d113      	bne.n	8004e8e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	4a1a      	ldr	r2, [pc, #104]	; (8004ed4 <TIM_OC3_SetConfig+0x108>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	4a19      	ldr	r2, [pc, #100]	; (8004ed8 <TIM_OC3_SetConfig+0x10c>)
 8004e72:	4013      	ands	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	621a      	str	r2, [r3, #32]
}
 8004ea8:	46c0      	nop			; (mov r8, r8)
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	b006      	add	sp, #24
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	fffffeff 	.word	0xfffffeff
 8004eb4:	fffeff8f 	.word	0xfffeff8f
 8004eb8:	fffffdff 	.word	0xfffffdff
 8004ebc:	40012c00 	.word	0x40012c00
 8004ec0:	fffff7ff 	.word	0xfffff7ff
 8004ec4:	fffffbff 	.word	0xfffffbff
 8004ec8:	40014000 	.word	0x40014000
 8004ecc:	40014400 	.word	0x40014400
 8004ed0:	40014800 	.word	0x40014800
 8004ed4:	ffffefff 	.word	0xffffefff
 8004ed8:	ffffdfff 	.word	0xffffdfff

08004edc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	4a28      	ldr	r2, [pc, #160]	; (8004f8c <TIM_OC4_SetConfig+0xb0>)
 8004eec:	401a      	ands	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4a22      	ldr	r2, [pc, #136]	; (8004f90 <TIM_OC4_SetConfig+0xb4>)
 8004f08:	4013      	ands	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4a21      	ldr	r2, [pc, #132]	; (8004f94 <TIM_OC4_SetConfig+0xb8>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	021b      	lsls	r3, r3, #8
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	4a1d      	ldr	r2, [pc, #116]	; (8004f98 <TIM_OC4_SetConfig+0xbc>)
 8004f24:	4013      	ands	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	031b      	lsls	r3, r3, #12
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a19      	ldr	r2, [pc, #100]	; (8004f9c <TIM_OC4_SetConfig+0xc0>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00b      	beq.n	8004f54 <TIM_OC4_SetConfig+0x78>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a18      	ldr	r2, [pc, #96]	; (8004fa0 <TIM_OC4_SetConfig+0xc4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d007      	beq.n	8004f54 <TIM_OC4_SetConfig+0x78>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a17      	ldr	r2, [pc, #92]	; (8004fa4 <TIM_OC4_SetConfig+0xc8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_OC4_SetConfig+0x78>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a16      	ldr	r2, [pc, #88]	; (8004fa8 <TIM_OC4_SetConfig+0xcc>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d109      	bne.n	8004f68 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	4a15      	ldr	r2, [pc, #84]	; (8004fac <TIM_OC4_SetConfig+0xd0>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	019b      	lsls	r3, r3, #6
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	621a      	str	r2, [r3, #32]
}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	46bd      	mov	sp, r7
 8004f86:	b006      	add	sp, #24
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	ffffefff 	.word	0xffffefff
 8004f90:	feff8fff 	.word	0xfeff8fff
 8004f94:	fffffcff 	.word	0xfffffcff
 8004f98:	ffffdfff 	.word	0xffffdfff
 8004f9c:	40012c00 	.word	0x40012c00
 8004fa0:	40014000 	.word	0x40014000
 8004fa4:	40014400 	.word	0x40014400
 8004fa8:	40014800 	.word	0x40014800
 8004fac:	ffffbfff 	.word	0xffffbfff

08004fb0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	4a25      	ldr	r2, [pc, #148]	; (8005054 <TIM_OC5_SetConfig+0xa4>)
 8004fc0:	401a      	ands	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4a1f      	ldr	r2, [pc, #124]	; (8005058 <TIM_OC5_SetConfig+0xa8>)
 8004fdc:	4013      	ands	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	4a1b      	ldr	r2, [pc, #108]	; (800505c <TIM_OC5_SetConfig+0xac>)
 8004fee:	4013      	ands	r3, r2
 8004ff0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	041b      	lsls	r3, r3, #16
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a17      	ldr	r2, [pc, #92]	; (8005060 <TIM_OC5_SetConfig+0xb0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00b      	beq.n	800501e <TIM_OC5_SetConfig+0x6e>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a16      	ldr	r2, [pc, #88]	; (8005064 <TIM_OC5_SetConfig+0xb4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d007      	beq.n	800501e <TIM_OC5_SetConfig+0x6e>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a15      	ldr	r2, [pc, #84]	; (8005068 <TIM_OC5_SetConfig+0xb8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d003      	beq.n	800501e <TIM_OC5_SetConfig+0x6e>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a14      	ldr	r2, [pc, #80]	; (800506c <TIM_OC5_SetConfig+0xbc>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d109      	bne.n	8005032 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	4a0c      	ldr	r2, [pc, #48]	; (8005054 <TIM_OC5_SetConfig+0xa4>)
 8005022:	4013      	ands	r3, r2
 8005024:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	021b      	lsls	r3, r3, #8
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	621a      	str	r2, [r3, #32]
}
 800504c:	46c0      	nop			; (mov r8, r8)
 800504e:	46bd      	mov	sp, r7
 8005050:	b006      	add	sp, #24
 8005052:	bd80      	pop	{r7, pc}
 8005054:	fffeffff 	.word	0xfffeffff
 8005058:	fffeff8f 	.word	0xfffeff8f
 800505c:	fffdffff 	.word	0xfffdffff
 8005060:	40012c00 	.word	0x40012c00
 8005064:	40014000 	.word	0x40014000
 8005068:	40014400 	.word	0x40014400
 800506c:	40014800 	.word	0x40014800

08005070 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	4a26      	ldr	r2, [pc, #152]	; (8005118 <TIM_OC6_SetConfig+0xa8>)
 8005080:	401a      	ands	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4a20      	ldr	r2, [pc, #128]	; (800511c <TIM_OC6_SetConfig+0xac>)
 800509c:	4013      	ands	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	021b      	lsls	r3, r3, #8
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	4a1c      	ldr	r2, [pc, #112]	; (8005120 <TIM_OC6_SetConfig+0xb0>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	051b      	lsls	r3, r3, #20
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4313      	orrs	r3, r2
 80050be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a18      	ldr	r2, [pc, #96]	; (8005124 <TIM_OC6_SetConfig+0xb4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00b      	beq.n	80050e0 <TIM_OC6_SetConfig+0x70>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a17      	ldr	r2, [pc, #92]	; (8005128 <TIM_OC6_SetConfig+0xb8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d007      	beq.n	80050e0 <TIM_OC6_SetConfig+0x70>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a16      	ldr	r2, [pc, #88]	; (800512c <TIM_OC6_SetConfig+0xbc>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d003      	beq.n	80050e0 <TIM_OC6_SetConfig+0x70>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a15      	ldr	r2, [pc, #84]	; (8005130 <TIM_OC6_SetConfig+0xc0>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d109      	bne.n	80050f4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	4a14      	ldr	r2, [pc, #80]	; (8005134 <TIM_OC6_SetConfig+0xc4>)
 80050e4:	4013      	ands	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	029b      	lsls	r3, r3, #10
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	621a      	str	r2, [r3, #32]
}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	46bd      	mov	sp, r7
 8005112:	b006      	add	sp, #24
 8005114:	bd80      	pop	{r7, pc}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	ffefffff 	.word	0xffefffff
 800511c:	feff8fff 	.word	0xfeff8fff
 8005120:	ffdfffff 	.word	0xffdfffff
 8005124:	40012c00 	.word	0x40012c00
 8005128:	40014000 	.word	0x40014000
 800512c:	40014400 	.word	0x40014400
 8005130:	40014800 	.word	0x40014800
 8005134:	fffbffff 	.word	0xfffbffff

08005138 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	2201      	movs	r2, #1
 8005150:	4393      	bics	r3, r2
 8005152:	001a      	movs	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	22f0      	movs	r2, #240	; 0xf0
 8005162:	4393      	bics	r3, r2
 8005164:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	220a      	movs	r2, #10
 8005174:	4393      	bics	r3, r2
 8005176:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4313      	orrs	r3, r2
 800517e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	621a      	str	r2, [r3, #32]
}
 800518c:	46c0      	nop			; (mov r8, r8)
 800518e:	46bd      	mov	sp, r7
 8005190:	b006      	add	sp, #24
 8005192:	bd80      	pop	{r7, pc}

08005194 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	2210      	movs	r2, #16
 80051a6:	4393      	bics	r3, r2
 80051a8:	001a      	movs	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	4a0d      	ldr	r2, [pc, #52]	; (80051f4 <TIM_TI2_ConfigInputStage+0x60>)
 80051be:	4013      	ands	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	031b      	lsls	r3, r3, #12
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	22a0      	movs	r2, #160	; 0xa0
 80051d0:	4393      	bics	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	621a      	str	r2, [r3, #32]
}
 80051ea:	46c0      	nop			; (mov r8, r8)
 80051ec:	46bd      	mov	sp, r7
 80051ee:	b006      	add	sp, #24
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	46c0      	nop			; (mov r8, r8)
 80051f4:	ffff0fff 	.word	0xffff0fff

080051f8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4a08      	ldr	r2, [pc, #32]	; (800522c <TIM_ITRx_SetConfig+0x34>)
 800520c:	4013      	ands	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4313      	orrs	r3, r2
 8005216:	2207      	movs	r2, #7
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	609a      	str	r2, [r3, #8]
}
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	46bd      	mov	sp, r7
 8005226:	b004      	add	sp, #16
 8005228:	bd80      	pop	{r7, pc}
 800522a:	46c0      	nop			; (mov r8, r8)
 800522c:	ffcfff8f 	.word	0xffcfff8f

08005230 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	4a09      	ldr	r2, [pc, #36]	; (800526c <TIM_ETR_SetConfig+0x3c>)
 8005248:	4013      	ands	r3, r2
 800524a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	021a      	lsls	r2, r3, #8
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	431a      	orrs	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4313      	orrs	r3, r2
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	4313      	orrs	r3, r2
 800525c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	609a      	str	r2, [r3, #8]
}
 8005264:	46c0      	nop			; (mov r8, r8)
 8005266:	46bd      	mov	sp, r7
 8005268:	b006      	add	sp, #24
 800526a:	bd80      	pop	{r7, pc}
 800526c:	ffff00ff 	.word	0xffff00ff

08005270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	223c      	movs	r2, #60	; 0x3c
 800527e:	5c9b      	ldrb	r3, [r3, r2]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d101      	bne.n	8005288 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005284:	2302      	movs	r3, #2
 8005286:	e04f      	b.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	223c      	movs	r2, #60	; 0x3c
 800528c:	2101      	movs	r1, #1
 800528e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	223d      	movs	r2, #61	; 0x3d
 8005294:	2102      	movs	r1, #2
 8005296:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a20      	ldr	r2, [pc, #128]	; (8005330 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d108      	bne.n	80052c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	4a1f      	ldr	r2, [pc, #124]	; (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80052b6:	4013      	ands	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2270      	movs	r2, #112	; 0x70
 80052c8:	4393      	bics	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a13      	ldr	r2, [pc, #76]	; (8005330 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d009      	beq.n	80052fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a12      	ldr	r2, [pc, #72]	; (8005338 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d004      	beq.n	80052fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a11      	ldr	r2, [pc, #68]	; (800533c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d10c      	bne.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2280      	movs	r2, #128	; 0x80
 8005300:	4393      	bics	r3, r2
 8005302:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	4313      	orrs	r3, r2
 800530c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	223d      	movs	r2, #61	; 0x3d
 800531a:	2101      	movs	r1, #1
 800531c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	223c      	movs	r2, #60	; 0x3c
 8005322:	2100      	movs	r1, #0
 8005324:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	0018      	movs	r0, r3
 800532a:	46bd      	mov	sp, r7
 800532c:	b004      	add	sp, #16
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40012c00 	.word	0x40012c00
 8005334:	ff0fffff 	.word	0xff0fffff
 8005338:	40000400 	.word	0x40000400
 800533c:	40014000 	.word	0x40014000

08005340 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	223c      	movs	r2, #60	; 0x3c
 8005352:	5c9b      	ldrb	r3, [r3, r2]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005358:	2302      	movs	r3, #2
 800535a:	e079      	b.n	8005450 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	223c      	movs	r2, #60	; 0x3c
 8005360:	2101      	movs	r1, #1
 8005362:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	22ff      	movs	r2, #255	; 0xff
 8005368:	4393      	bics	r3, r2
 800536a:	001a      	movs	r2, r3
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	4313      	orrs	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4a38      	ldr	r2, [pc, #224]	; (8005458 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005378:	401a      	ands	r2, r3
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	4313      	orrs	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4a35      	ldr	r2, [pc, #212]	; (800545c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005386:	401a      	ands	r2, r3
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4a33      	ldr	r2, [pc, #204]	; (8005460 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005394:	401a      	ands	r2, r3
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4a30      	ldr	r2, [pc, #192]	; (8005464 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80053a2:	401a      	ands	r2, r3
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4a2e      	ldr	r2, [pc, #184]	; (8005468 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80053b0:	401a      	ands	r2, r3
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	4a2b      	ldr	r2, [pc, #172]	; (800546c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80053be:	401a      	ands	r2, r3
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c4:	4313      	orrs	r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4a29      	ldr	r2, [pc, #164]	; (8005470 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80053cc:	401a      	ands	r2, r3
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	041b      	lsls	r3, r3, #16
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a25      	ldr	r2, [pc, #148]	; (8005474 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d106      	bne.n	80053f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	4a24      	ldr	r2, [pc, #144]	; (8005478 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80053e6:	401a      	ands	r2, r3
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a1f      	ldr	r2, [pc, #124]	; (8005474 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d121      	bne.n	800543e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4a1f      	ldr	r2, [pc, #124]	; (800547c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80053fe:	401a      	ands	r2, r3
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005404:	051b      	lsls	r3, r3, #20
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4a1c      	ldr	r2, [pc, #112]	; (8005480 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800540e:	401a      	ands	r2, r3
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	4313      	orrs	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4a1a      	ldr	r2, [pc, #104]	; (8005484 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800541c:	401a      	ands	r2, r3
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a12      	ldr	r2, [pc, #72]	; (8005474 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d106      	bne.n	800543e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4a15      	ldr	r2, [pc, #84]	; (8005488 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8005434:	401a      	ands	r2, r3
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	223c      	movs	r2, #60	; 0x3c
 800544a:	2100      	movs	r1, #0
 800544c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	0018      	movs	r0, r3
 8005452:	46bd      	mov	sp, r7
 8005454:	b004      	add	sp, #16
 8005456:	bd80      	pop	{r7, pc}
 8005458:	fffffcff 	.word	0xfffffcff
 800545c:	fffffbff 	.word	0xfffffbff
 8005460:	fffff7ff 	.word	0xfffff7ff
 8005464:	ffffefff 	.word	0xffffefff
 8005468:	ffffdfff 	.word	0xffffdfff
 800546c:	ffffbfff 	.word	0xffffbfff
 8005470:	fff0ffff 	.word	0xfff0ffff
 8005474:	40012c00 	.word	0x40012c00
 8005478:	efffffff 	.word	0xefffffff
 800547c:	ff0fffff 	.word	0xff0fffff
 8005480:	feffffff 	.word	0xfeffffff
 8005484:	fdffffff 	.word	0xfdffffff
 8005488:	dfffffff 	.word	0xdfffffff

0800548c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e046      	b.n	800552c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2288      	movs	r2, #136	; 0x88
 80054a2:	589b      	ldr	r3, [r3, r2]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d107      	bne.n	80054b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2284      	movs	r2, #132	; 0x84
 80054ac:	2100      	movs	r1, #0
 80054ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	0018      	movs	r0, r3
 80054b4:	f7fc fecc 	bl	8002250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2288      	movs	r2, #136	; 0x88
 80054bc:	2124      	movs	r1, #36	; 0x24
 80054be:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2101      	movs	r1, #1
 80054cc:	438a      	bics	r2, r1
 80054ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	0018      	movs	r0, r3
 80054d4:	f000 f8cc 	bl	8005670 <UART_SetConfig>
 80054d8:	0003      	movs	r3, r0
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e024      	b.n	800552c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	0018      	movs	r0, r3
 80054ee:	f000 fa63 	bl	80059b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	490d      	ldr	r1, [pc, #52]	; (8005534 <HAL_UART_Init+0xa8>)
 80054fe:	400a      	ands	r2, r1
 8005500:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	212a      	movs	r1, #42	; 0x2a
 800550e:	438a      	bics	r2, r1
 8005510:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2101      	movs	r1, #1
 800551e:	430a      	orrs	r2, r1
 8005520:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	0018      	movs	r0, r3
 8005526:	f000 fafb 	bl	8005b20 <UART_CheckIdleState>
 800552a:	0003      	movs	r3, r0
}
 800552c:	0018      	movs	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	b002      	add	sp, #8
 8005532:	bd80      	pop	{r7, pc}
 8005534:	ffffb7ff 	.word	0xffffb7ff

08005538 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08a      	sub	sp, #40	; 0x28
 800553c:	af02      	add	r7, sp, #8
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	1dbb      	adds	r3, r7, #6
 8005546:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2288      	movs	r2, #136	; 0x88
 800554c:	589b      	ldr	r3, [r3, r2]
 800554e:	2b20      	cmp	r3, #32
 8005550:	d000      	beq.n	8005554 <HAL_UART_Transmit+0x1c>
 8005552:	e088      	b.n	8005666 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_UART_Transmit+0x2a>
 800555a:	1dbb      	adds	r3, r7, #6
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e080      	b.n	8005668 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	2380      	movs	r3, #128	; 0x80
 800556c:	015b      	lsls	r3, r3, #5
 800556e:	429a      	cmp	r2, r3
 8005570:	d109      	bne.n	8005586 <HAL_UART_Transmit+0x4e>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d105      	bne.n	8005586 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2201      	movs	r2, #1
 800557e:	4013      	ands	r3, r2
 8005580:	d001      	beq.n	8005586 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e070      	b.n	8005668 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2290      	movs	r2, #144	; 0x90
 800558a:	2100      	movs	r1, #0
 800558c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2288      	movs	r2, #136	; 0x88
 8005592:	2121      	movs	r1, #33	; 0x21
 8005594:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005596:	f7fc ffab 	bl	80024f0 <HAL_GetTick>
 800559a:	0003      	movs	r3, r0
 800559c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1dba      	adds	r2, r7, #6
 80055a2:	2154      	movs	r1, #84	; 0x54
 80055a4:	8812      	ldrh	r2, [r2, #0]
 80055a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	1dba      	adds	r2, r7, #6
 80055ac:	2156      	movs	r1, #86	; 0x56
 80055ae:	8812      	ldrh	r2, [r2, #0]
 80055b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	2380      	movs	r3, #128	; 0x80
 80055b8:	015b      	lsls	r3, r3, #5
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d108      	bne.n	80055d0 <HAL_UART_Transmit+0x98>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d104      	bne.n	80055d0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	61bb      	str	r3, [r7, #24]
 80055ce:	e003      	b.n	80055d8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055d8:	e02c      	b.n	8005634 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	0013      	movs	r3, r2
 80055e4:	2200      	movs	r2, #0
 80055e6:	2180      	movs	r1, #128	; 0x80
 80055e8:	f000 fae8 	bl	8005bbc <UART_WaitOnFlagUntilTimeout>
 80055ec:	1e03      	subs	r3, r0, #0
 80055ee:	d001      	beq.n	80055f4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e039      	b.n	8005668 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10b      	bne.n	8005612 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	001a      	movs	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	05d2      	lsls	r2, r2, #23
 8005606:	0dd2      	lsrs	r2, r2, #23
 8005608:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	3302      	adds	r3, #2
 800560e:	61bb      	str	r3, [r7, #24]
 8005610:	e007      	b.n	8005622 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	781a      	ldrb	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	3301      	adds	r3, #1
 8005620:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2256      	movs	r2, #86	; 0x56
 8005626:	5a9b      	ldrh	r3, [r3, r2]
 8005628:	b29b      	uxth	r3, r3
 800562a:	3b01      	subs	r3, #1
 800562c:	b299      	uxth	r1, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2256      	movs	r2, #86	; 0x56
 8005632:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2256      	movs	r2, #86	; 0x56
 8005638:	5a9b      	ldrh	r3, [r3, r2]
 800563a:	b29b      	uxth	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1cc      	bne.n	80055da <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	0013      	movs	r3, r2
 800564a:	2200      	movs	r2, #0
 800564c:	2140      	movs	r1, #64	; 0x40
 800564e:	f000 fab5 	bl	8005bbc <UART_WaitOnFlagUntilTimeout>
 8005652:	1e03      	subs	r3, r0, #0
 8005654:	d001      	beq.n	800565a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e006      	b.n	8005668 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2288      	movs	r2, #136	; 0x88
 800565e:	2120      	movs	r1, #32
 8005660:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	e000      	b.n	8005668 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8005666:	2302      	movs	r3, #2
  }
}
 8005668:	0018      	movs	r0, r3
 800566a:	46bd      	mov	sp, r7
 800566c:	b008      	add	sp, #32
 800566e:	bd80      	pop	{r7, pc}

08005670 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b088      	sub	sp, #32
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005678:	231a      	movs	r3, #26
 800567a:	18fb      	adds	r3, r7, r3
 800567c:	2200      	movs	r2, #0
 800567e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	431a      	orrs	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	4313      	orrs	r3, r2
 8005696:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4abc      	ldr	r2, [pc, #752]	; (8005990 <UART_SetConfig+0x320>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	0019      	movs	r1, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	69fa      	ldr	r2, [r7, #28]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	4ab7      	ldr	r2, [pc, #732]	; (8005994 <UART_SetConfig+0x324>)
 80056b6:	4013      	ands	r3, r2
 80056b8:	0019      	movs	r1, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	69fa      	ldr	r2, [r7, #28]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	4aae      	ldr	r2, [pc, #696]	; (8005998 <UART_SetConfig+0x328>)
 80056de:	4013      	ands	r3, r2
 80056e0:	0019      	movs	r1, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f2:	220f      	movs	r2, #15
 80056f4:	4393      	bics	r3, r2
 80056f6:	0019      	movs	r1, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4aa4      	ldr	r2, [pc, #656]	; (800599c <UART_SetConfig+0x32c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d127      	bne.n	800575e <UART_SetConfig+0xee>
 800570e:	4ba4      	ldr	r3, [pc, #656]	; (80059a0 <UART_SetConfig+0x330>)
 8005710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005712:	2203      	movs	r2, #3
 8005714:	4013      	ands	r3, r2
 8005716:	2b03      	cmp	r3, #3
 8005718:	d017      	beq.n	800574a <UART_SetConfig+0xda>
 800571a:	d81b      	bhi.n	8005754 <UART_SetConfig+0xe4>
 800571c:	2b02      	cmp	r3, #2
 800571e:	d00a      	beq.n	8005736 <UART_SetConfig+0xc6>
 8005720:	d818      	bhi.n	8005754 <UART_SetConfig+0xe4>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <UART_SetConfig+0xbc>
 8005726:	2b01      	cmp	r3, #1
 8005728:	d00a      	beq.n	8005740 <UART_SetConfig+0xd0>
 800572a:	e013      	b.n	8005754 <UART_SetConfig+0xe4>
 800572c:	231b      	movs	r3, #27
 800572e:	18fb      	adds	r3, r7, r3
 8005730:	2200      	movs	r2, #0
 8005732:	701a      	strb	r2, [r3, #0]
 8005734:	e058      	b.n	80057e8 <UART_SetConfig+0x178>
 8005736:	231b      	movs	r3, #27
 8005738:	18fb      	adds	r3, r7, r3
 800573a:	2202      	movs	r2, #2
 800573c:	701a      	strb	r2, [r3, #0]
 800573e:	e053      	b.n	80057e8 <UART_SetConfig+0x178>
 8005740:	231b      	movs	r3, #27
 8005742:	18fb      	adds	r3, r7, r3
 8005744:	2204      	movs	r2, #4
 8005746:	701a      	strb	r2, [r3, #0]
 8005748:	e04e      	b.n	80057e8 <UART_SetConfig+0x178>
 800574a:	231b      	movs	r3, #27
 800574c:	18fb      	adds	r3, r7, r3
 800574e:	2208      	movs	r2, #8
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	e049      	b.n	80057e8 <UART_SetConfig+0x178>
 8005754:	231b      	movs	r3, #27
 8005756:	18fb      	adds	r3, r7, r3
 8005758:	2210      	movs	r2, #16
 800575a:	701a      	strb	r2, [r3, #0]
 800575c:	e044      	b.n	80057e8 <UART_SetConfig+0x178>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a90      	ldr	r2, [pc, #576]	; (80059a4 <UART_SetConfig+0x334>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d127      	bne.n	80057b8 <UART_SetConfig+0x148>
 8005768:	4b8d      	ldr	r3, [pc, #564]	; (80059a0 <UART_SetConfig+0x330>)
 800576a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576c:	220c      	movs	r2, #12
 800576e:	4013      	ands	r3, r2
 8005770:	2b0c      	cmp	r3, #12
 8005772:	d017      	beq.n	80057a4 <UART_SetConfig+0x134>
 8005774:	d81b      	bhi.n	80057ae <UART_SetConfig+0x13e>
 8005776:	2b08      	cmp	r3, #8
 8005778:	d00a      	beq.n	8005790 <UART_SetConfig+0x120>
 800577a:	d818      	bhi.n	80057ae <UART_SetConfig+0x13e>
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <UART_SetConfig+0x116>
 8005780:	2b04      	cmp	r3, #4
 8005782:	d00a      	beq.n	800579a <UART_SetConfig+0x12a>
 8005784:	e013      	b.n	80057ae <UART_SetConfig+0x13e>
 8005786:	231b      	movs	r3, #27
 8005788:	18fb      	adds	r3, r7, r3
 800578a:	2200      	movs	r2, #0
 800578c:	701a      	strb	r2, [r3, #0]
 800578e:	e02b      	b.n	80057e8 <UART_SetConfig+0x178>
 8005790:	231b      	movs	r3, #27
 8005792:	18fb      	adds	r3, r7, r3
 8005794:	2202      	movs	r2, #2
 8005796:	701a      	strb	r2, [r3, #0]
 8005798:	e026      	b.n	80057e8 <UART_SetConfig+0x178>
 800579a:	231b      	movs	r3, #27
 800579c:	18fb      	adds	r3, r7, r3
 800579e:	2204      	movs	r2, #4
 80057a0:	701a      	strb	r2, [r3, #0]
 80057a2:	e021      	b.n	80057e8 <UART_SetConfig+0x178>
 80057a4:	231b      	movs	r3, #27
 80057a6:	18fb      	adds	r3, r7, r3
 80057a8:	2208      	movs	r2, #8
 80057aa:	701a      	strb	r2, [r3, #0]
 80057ac:	e01c      	b.n	80057e8 <UART_SetConfig+0x178>
 80057ae:	231b      	movs	r3, #27
 80057b0:	18fb      	adds	r3, r7, r3
 80057b2:	2210      	movs	r2, #16
 80057b4:	701a      	strb	r2, [r3, #0]
 80057b6:	e017      	b.n	80057e8 <UART_SetConfig+0x178>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a7a      	ldr	r2, [pc, #488]	; (80059a8 <UART_SetConfig+0x338>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d104      	bne.n	80057cc <UART_SetConfig+0x15c>
 80057c2:	231b      	movs	r3, #27
 80057c4:	18fb      	adds	r3, r7, r3
 80057c6:	2200      	movs	r2, #0
 80057c8:	701a      	strb	r2, [r3, #0]
 80057ca:	e00d      	b.n	80057e8 <UART_SetConfig+0x178>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a76      	ldr	r2, [pc, #472]	; (80059ac <UART_SetConfig+0x33c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d104      	bne.n	80057e0 <UART_SetConfig+0x170>
 80057d6:	231b      	movs	r3, #27
 80057d8:	18fb      	adds	r3, r7, r3
 80057da:	2200      	movs	r2, #0
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	e003      	b.n	80057e8 <UART_SetConfig+0x178>
 80057e0:	231b      	movs	r3, #27
 80057e2:	18fb      	adds	r3, r7, r3
 80057e4:	2210      	movs	r2, #16
 80057e6:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	69da      	ldr	r2, [r3, #28]
 80057ec:	2380      	movs	r3, #128	; 0x80
 80057ee:	021b      	lsls	r3, r3, #8
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d000      	beq.n	80057f6 <UART_SetConfig+0x186>
 80057f4:	e065      	b.n	80058c2 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80057f6:	231b      	movs	r3, #27
 80057f8:	18fb      	adds	r3, r7, r3
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d015      	beq.n	800582c <UART_SetConfig+0x1bc>
 8005800:	dc18      	bgt.n	8005834 <UART_SetConfig+0x1c4>
 8005802:	2b04      	cmp	r3, #4
 8005804:	d00d      	beq.n	8005822 <UART_SetConfig+0x1b2>
 8005806:	dc15      	bgt.n	8005834 <UART_SetConfig+0x1c4>
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <UART_SetConfig+0x1a2>
 800580c:	2b02      	cmp	r3, #2
 800580e:	d005      	beq.n	800581c <UART_SetConfig+0x1ac>
 8005810:	e010      	b.n	8005834 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005812:	f7fe fcd7 	bl	80041c4 <HAL_RCC_GetPCLK1Freq>
 8005816:	0003      	movs	r3, r0
 8005818:	617b      	str	r3, [r7, #20]
        break;
 800581a:	e012      	b.n	8005842 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800581c:	4b64      	ldr	r3, [pc, #400]	; (80059b0 <UART_SetConfig+0x340>)
 800581e:	617b      	str	r3, [r7, #20]
        break;
 8005820:	e00f      	b.n	8005842 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005822:	f7fe fc43 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 8005826:	0003      	movs	r3, r0
 8005828:	617b      	str	r3, [r7, #20]
        break;
 800582a:	e00a      	b.n	8005842 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800582c:	2380      	movs	r3, #128	; 0x80
 800582e:	021b      	lsls	r3, r3, #8
 8005830:	617b      	str	r3, [r7, #20]
        break;
 8005832:	e006      	b.n	8005842 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005834:	2300      	movs	r3, #0
 8005836:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005838:	231a      	movs	r3, #26
 800583a:	18fb      	adds	r3, r7, r3
 800583c:	2201      	movs	r2, #1
 800583e:	701a      	strb	r2, [r3, #0]
        break;
 8005840:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d100      	bne.n	800584a <UART_SetConfig+0x1da>
 8005848:	e08d      	b.n	8005966 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800584e:	4b59      	ldr	r3, [pc, #356]	; (80059b4 <UART_SetConfig+0x344>)
 8005850:	0052      	lsls	r2, r2, #1
 8005852:	5ad3      	ldrh	r3, [r2, r3]
 8005854:	0019      	movs	r1, r3
 8005856:	6978      	ldr	r0, [r7, #20]
 8005858:	f7fa fc60 	bl	800011c <__udivsi3>
 800585c:	0003      	movs	r3, r0
 800585e:	005a      	lsls	r2, r3, #1
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	085b      	lsrs	r3, r3, #1
 8005866:	18d2      	adds	r2, r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	0019      	movs	r1, r3
 800586e:	0010      	movs	r0, r2
 8005870:	f7fa fc54 	bl	800011c <__udivsi3>
 8005874:	0003      	movs	r3, r0
 8005876:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	2b0f      	cmp	r3, #15
 800587c:	d91c      	bls.n	80058b8 <UART_SetConfig+0x248>
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	2380      	movs	r3, #128	; 0x80
 8005882:	025b      	lsls	r3, r3, #9
 8005884:	429a      	cmp	r2, r3
 8005886:	d217      	bcs.n	80058b8 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	b29a      	uxth	r2, r3
 800588c:	200e      	movs	r0, #14
 800588e:	183b      	adds	r3, r7, r0
 8005890:	210f      	movs	r1, #15
 8005892:	438a      	bics	r2, r1
 8005894:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	085b      	lsrs	r3, r3, #1
 800589a:	b29b      	uxth	r3, r3
 800589c:	2207      	movs	r2, #7
 800589e:	4013      	ands	r3, r2
 80058a0:	b299      	uxth	r1, r3
 80058a2:	183b      	adds	r3, r7, r0
 80058a4:	183a      	adds	r2, r7, r0
 80058a6:	8812      	ldrh	r2, [r2, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	183a      	adds	r2, r7, r0
 80058b2:	8812      	ldrh	r2, [r2, #0]
 80058b4:	60da      	str	r2, [r3, #12]
 80058b6:	e056      	b.n	8005966 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80058b8:	231a      	movs	r3, #26
 80058ba:	18fb      	adds	r3, r7, r3
 80058bc:	2201      	movs	r2, #1
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	e051      	b.n	8005966 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058c2:	231b      	movs	r3, #27
 80058c4:	18fb      	adds	r3, r7, r3
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d015      	beq.n	80058f8 <UART_SetConfig+0x288>
 80058cc:	dc18      	bgt.n	8005900 <UART_SetConfig+0x290>
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d00d      	beq.n	80058ee <UART_SetConfig+0x27e>
 80058d2:	dc15      	bgt.n	8005900 <UART_SetConfig+0x290>
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <UART_SetConfig+0x26e>
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d005      	beq.n	80058e8 <UART_SetConfig+0x278>
 80058dc:	e010      	b.n	8005900 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058de:	f7fe fc71 	bl	80041c4 <HAL_RCC_GetPCLK1Freq>
 80058e2:	0003      	movs	r3, r0
 80058e4:	617b      	str	r3, [r7, #20]
        break;
 80058e6:	e012      	b.n	800590e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058e8:	4b31      	ldr	r3, [pc, #196]	; (80059b0 <UART_SetConfig+0x340>)
 80058ea:	617b      	str	r3, [r7, #20]
        break;
 80058ec:	e00f      	b.n	800590e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ee:	f7fe fbdd 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 80058f2:	0003      	movs	r3, r0
 80058f4:	617b      	str	r3, [r7, #20]
        break;
 80058f6:	e00a      	b.n	800590e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058f8:	2380      	movs	r3, #128	; 0x80
 80058fa:	021b      	lsls	r3, r3, #8
 80058fc:	617b      	str	r3, [r7, #20]
        break;
 80058fe:	e006      	b.n	800590e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005904:	231a      	movs	r3, #26
 8005906:	18fb      	adds	r3, r7, r3
 8005908:	2201      	movs	r2, #1
 800590a:	701a      	strb	r2, [r3, #0]
        break;
 800590c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d028      	beq.n	8005966 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005918:	4b26      	ldr	r3, [pc, #152]	; (80059b4 <UART_SetConfig+0x344>)
 800591a:	0052      	lsls	r2, r2, #1
 800591c:	5ad3      	ldrh	r3, [r2, r3]
 800591e:	0019      	movs	r1, r3
 8005920:	6978      	ldr	r0, [r7, #20]
 8005922:	f7fa fbfb 	bl	800011c <__udivsi3>
 8005926:	0003      	movs	r3, r0
 8005928:	001a      	movs	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	085b      	lsrs	r3, r3, #1
 8005930:	18d2      	adds	r2, r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	0019      	movs	r1, r3
 8005938:	0010      	movs	r0, r2
 800593a:	f7fa fbef 	bl	800011c <__udivsi3>
 800593e:	0003      	movs	r3, r0
 8005940:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	2b0f      	cmp	r3, #15
 8005946:	d90a      	bls.n	800595e <UART_SetConfig+0x2ee>
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	2380      	movs	r3, #128	; 0x80
 800594c:	025b      	lsls	r3, r3, #9
 800594e:	429a      	cmp	r2, r3
 8005950:	d205      	bcs.n	800595e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	b29a      	uxth	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60da      	str	r2, [r3, #12]
 800595c:	e003      	b.n	8005966 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800595e:	231a      	movs	r3, #26
 8005960:	18fb      	adds	r3, r7, r3
 8005962:	2201      	movs	r2, #1
 8005964:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	226a      	movs	r2, #106	; 0x6a
 800596a:	2101      	movs	r1, #1
 800596c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2268      	movs	r2, #104	; 0x68
 8005972:	2101      	movs	r1, #1
 8005974:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005982:	231a      	movs	r3, #26
 8005984:	18fb      	adds	r3, r7, r3
 8005986:	781b      	ldrb	r3, [r3, #0]
}
 8005988:	0018      	movs	r0, r3
 800598a:	46bd      	mov	sp, r7
 800598c:	b008      	add	sp, #32
 800598e:	bd80      	pop	{r7, pc}
 8005990:	cfff69f3 	.word	0xcfff69f3
 8005994:	ffffcfff 	.word	0xffffcfff
 8005998:	11fff4ff 	.word	0x11fff4ff
 800599c:	40013800 	.word	0x40013800
 80059a0:	40021000 	.word	0x40021000
 80059a4:	40004400 	.word	0x40004400
 80059a8:	40004800 	.word	0x40004800
 80059ac:	40004c00 	.word	0x40004c00
 80059b0:	00f42400 	.word	0x00f42400
 80059b4:	08008c80 	.word	0x08008c80

080059b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c4:	2201      	movs	r2, #1
 80059c6:	4013      	ands	r3, r2
 80059c8:	d00b      	beq.n	80059e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	4a4a      	ldr	r2, [pc, #296]	; (8005afc <UART_AdvFeatureConfig+0x144>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	0019      	movs	r1, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e6:	2202      	movs	r2, #2
 80059e8:	4013      	ands	r3, r2
 80059ea:	d00b      	beq.n	8005a04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	4a43      	ldr	r2, [pc, #268]	; (8005b00 <UART_AdvFeatureConfig+0x148>)
 80059f4:	4013      	ands	r3, r2
 80059f6:	0019      	movs	r1, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a08:	2204      	movs	r2, #4
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	d00b      	beq.n	8005a26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	4a3b      	ldr	r2, [pc, #236]	; (8005b04 <UART_AdvFeatureConfig+0x14c>)
 8005a16:	4013      	ands	r3, r2
 8005a18:	0019      	movs	r1, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	2208      	movs	r2, #8
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	d00b      	beq.n	8005a48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	4a34      	ldr	r2, [pc, #208]	; (8005b08 <UART_AdvFeatureConfig+0x150>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	0019      	movs	r1, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4c:	2210      	movs	r2, #16
 8005a4e:	4013      	ands	r3, r2
 8005a50:	d00b      	beq.n	8005a6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	4a2c      	ldr	r2, [pc, #176]	; (8005b0c <UART_AdvFeatureConfig+0x154>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	0019      	movs	r1, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6e:	2220      	movs	r2, #32
 8005a70:	4013      	ands	r3, r2
 8005a72:	d00b      	beq.n	8005a8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	4a25      	ldr	r2, [pc, #148]	; (8005b10 <UART_AdvFeatureConfig+0x158>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	0019      	movs	r1, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a90:	2240      	movs	r2, #64	; 0x40
 8005a92:	4013      	ands	r3, r2
 8005a94:	d01d      	beq.n	8005ad2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	4a1d      	ldr	r2, [pc, #116]	; (8005b14 <UART_AdvFeatureConfig+0x15c>)
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	0019      	movs	r1, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ab2:	2380      	movs	r3, #128	; 0x80
 8005ab4:	035b      	lsls	r3, r3, #13
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d10b      	bne.n	8005ad2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	4a15      	ldr	r2, [pc, #84]	; (8005b18 <UART_AdvFeatureConfig+0x160>)
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	0019      	movs	r1, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad6:	2280      	movs	r2, #128	; 0x80
 8005ad8:	4013      	ands	r3, r2
 8005ada:	d00b      	beq.n	8005af4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	4a0e      	ldr	r2, [pc, #56]	; (8005b1c <UART_AdvFeatureConfig+0x164>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	0019      	movs	r1, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	605a      	str	r2, [r3, #4]
  }
}
 8005af4:	46c0      	nop			; (mov r8, r8)
 8005af6:	46bd      	mov	sp, r7
 8005af8:	b002      	add	sp, #8
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	fffdffff 	.word	0xfffdffff
 8005b00:	fffeffff 	.word	0xfffeffff
 8005b04:	fffbffff 	.word	0xfffbffff
 8005b08:	ffff7fff 	.word	0xffff7fff
 8005b0c:	ffffefff 	.word	0xffffefff
 8005b10:	ffffdfff 	.word	0xffffdfff
 8005b14:	ffefffff 	.word	0xffefffff
 8005b18:	ff9fffff 	.word	0xff9fffff
 8005b1c:	fff7ffff 	.word	0xfff7ffff

08005b20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af02      	add	r7, sp, #8
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2290      	movs	r2, #144	; 0x90
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b30:	f7fc fcde 	bl	80024f0 <HAL_GetTick>
 8005b34:	0003      	movs	r3, r0
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2208      	movs	r2, #8
 8005b40:	4013      	ands	r3, r2
 8005b42:	2b08      	cmp	r3, #8
 8005b44:	d10c      	bne.n	8005b60 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2280      	movs	r2, #128	; 0x80
 8005b4a:	0391      	lsls	r1, r2, #14
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	4a1a      	ldr	r2, [pc, #104]	; (8005bb8 <UART_CheckIdleState+0x98>)
 8005b50:	9200      	str	r2, [sp, #0]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f000 f832 	bl	8005bbc <UART_WaitOnFlagUntilTimeout>
 8005b58:	1e03      	subs	r3, r0, #0
 8005b5a:	d001      	beq.n	8005b60 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e026      	b.n	8005bae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2204      	movs	r2, #4
 8005b68:	4013      	ands	r3, r2
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d10c      	bne.n	8005b88 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2280      	movs	r2, #128	; 0x80
 8005b72:	03d1      	lsls	r1, r2, #15
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	4a10      	ldr	r2, [pc, #64]	; (8005bb8 <UART_CheckIdleState+0x98>)
 8005b78:	9200      	str	r2, [sp, #0]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f000 f81e 	bl	8005bbc <UART_WaitOnFlagUntilTimeout>
 8005b80:	1e03      	subs	r3, r0, #0
 8005b82:	d001      	beq.n	8005b88 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e012      	b.n	8005bae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2288      	movs	r2, #136	; 0x88
 8005b8c:	2120      	movs	r1, #32
 8005b8e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	228c      	movs	r2, #140	; 0x8c
 8005b94:	2120      	movs	r1, #32
 8005b96:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2284      	movs	r2, #132	; 0x84
 8005ba8:	2100      	movs	r1, #0
 8005baa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	0018      	movs	r0, r3
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	b004      	add	sp, #16
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	46c0      	nop			; (mov r8, r8)
 8005bb8:	01ffffff 	.word	0x01ffffff

08005bbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b094      	sub	sp, #80	; 0x50
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	1dfb      	adds	r3, r7, #7
 8005bca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bcc:	e0a7      	b.n	8005d1e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	d100      	bne.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005bd4:	e0a3      	b.n	8005d1e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd6:	f7fc fc8b 	bl	80024f0 <HAL_GetTick>
 8005bda:	0002      	movs	r2, r0
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d302      	bcc.n	8005bec <UART_WaitOnFlagUntilTimeout+0x30>
 8005be6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d13f      	bne.n	8005c6c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bec:	f3ef 8310 	mrs	r3, PRIMASK
 8005bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfc:	f383 8810 	msr	PRIMASK, r3
}
 8005c00:	46c0      	nop			; (mov r8, r8)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	494e      	ldr	r1, [pc, #312]	; (8005d48 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005c0e:	400a      	ands	r2, r1
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c14:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c18:	f383 8810 	msr	PRIMASK, r3
}
 8005c1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c1e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c22:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c26:	643b      	str	r3, [r7, #64]	; 0x40
 8005c28:	2301      	movs	r3, #1
 8005c2a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2e:	f383 8810 	msr	PRIMASK, r3
}
 8005c32:	46c0      	nop			; (mov r8, r8)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689a      	ldr	r2, [r3, #8]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2101      	movs	r1, #1
 8005c40:	438a      	bics	r2, r1
 8005c42:	609a      	str	r2, [r3, #8]
 8005c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c4a:	f383 8810 	msr	PRIMASK, r3
}
 8005c4e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2288      	movs	r2, #136	; 0x88
 8005c54:	2120      	movs	r1, #32
 8005c56:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	228c      	movs	r2, #140	; 0x8c
 8005c5c:	2120      	movs	r1, #32
 8005c5e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2284      	movs	r2, #132	; 0x84
 8005c64:	2100      	movs	r1, #0
 8005c66:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e069      	b.n	8005d40 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2204      	movs	r2, #4
 8005c74:	4013      	ands	r3, r2
 8005c76:	d052      	beq.n	8005d1e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	69da      	ldr	r2, [r3, #28]
 8005c7e:	2380      	movs	r3, #128	; 0x80
 8005c80:	011b      	lsls	r3, r3, #4
 8005c82:	401a      	ands	r2, r3
 8005c84:	2380      	movs	r3, #128	; 0x80
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d148      	bne.n	8005d1e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2280      	movs	r2, #128	; 0x80
 8005c92:	0112      	lsls	r2, r2, #4
 8005c94:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c96:	f3ef 8310 	mrs	r3, PRIMASK
 8005c9a:	613b      	str	r3, [r7, #16]
  return(result);
 8005c9c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f383 8810 	msr	PRIMASK, r3
}
 8005caa:	46c0      	nop			; (mov r8, r8)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4924      	ldr	r1, [pc, #144]	; (8005d48 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005cb8:	400a      	ands	r2, r1
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cbe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	f383 8810 	msr	PRIMASK, r3
}
 8005cc6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8005ccc:	61fb      	str	r3, [r7, #28]
  return(result);
 8005cce:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	f383 8810 	msr	PRIMASK, r3
}
 8005cdc:	46c0      	nop			; (mov r8, r8)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2101      	movs	r1, #1
 8005cea:	438a      	bics	r2, r1
 8005cec:	609a      	str	r2, [r3, #8]
 8005cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	f383 8810 	msr	PRIMASK, r3
}
 8005cf8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2288      	movs	r2, #136	; 0x88
 8005cfe:	2120      	movs	r1, #32
 8005d00:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	228c      	movs	r2, #140	; 0x8c
 8005d06:	2120      	movs	r1, #32
 8005d08:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2290      	movs	r2, #144	; 0x90
 8005d0e:	2120      	movs	r1, #32
 8005d10:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2284      	movs	r2, #132	; 0x84
 8005d16:	2100      	movs	r1, #0
 8005d18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e010      	b.n	8005d40 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69db      	ldr	r3, [r3, #28]
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	4013      	ands	r3, r2
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	425a      	negs	r2, r3
 8005d2e:	4153      	adcs	r3, r2
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	001a      	movs	r2, r3
 8005d34:	1dfb      	adds	r3, r7, #7
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d100      	bne.n	8005d3e <UART_WaitOnFlagUntilTimeout+0x182>
 8005d3c:	e747      	b.n	8005bce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	0018      	movs	r0, r3
 8005d42:	46bd      	mov	sp, r7
 8005d44:	b014      	add	sp, #80	; 0x50
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	fffffe5f 	.word	0xfffffe5f

08005d4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2284      	movs	r2, #132	; 0x84
 8005d58:	5c9b      	ldrb	r3, [r3, r2]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d101      	bne.n	8005d62 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	e027      	b.n	8005db2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2284      	movs	r2, #132	; 0x84
 8005d66:	2101      	movs	r1, #1
 8005d68:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2288      	movs	r2, #136	; 0x88
 8005d6e:	2124      	movs	r1, #36	; 0x24
 8005d70:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2101      	movs	r1, #1
 8005d86:	438a      	bics	r2, r1
 8005d88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4a0b      	ldr	r2, [pc, #44]	; (8005dbc <HAL_UARTEx_DisableFifoMode+0x70>)
 8005d8e:	4013      	ands	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2288      	movs	r2, #136	; 0x88
 8005da4:	2120      	movs	r1, #32
 8005da6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2284      	movs	r2, #132	; 0x84
 8005dac:	2100      	movs	r1, #0
 8005dae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	0018      	movs	r0, r3
 8005db4:	46bd      	mov	sp, r7
 8005db6:	b004      	add	sp, #16
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	46c0      	nop			; (mov r8, r8)
 8005dbc:	dfffffff 	.word	0xdfffffff

08005dc0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2284      	movs	r2, #132	; 0x84
 8005dce:	5c9b      	ldrb	r3, [r3, r2]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e02e      	b.n	8005e36 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2284      	movs	r2, #132	; 0x84
 8005ddc:	2101      	movs	r1, #1
 8005dde:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2288      	movs	r2, #136	; 0x88
 8005de4:	2124      	movs	r1, #36	; 0x24
 8005de6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	438a      	bics	r2, r1
 8005dfe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	08d9      	lsrs	r1, r3, #3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	0018      	movs	r0, r3
 8005e18:	f000 f854 	bl	8005ec4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2288      	movs	r2, #136	; 0x88
 8005e28:	2120      	movs	r1, #32
 8005e2a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2284      	movs	r2, #132	; 0x84
 8005e30:	2100      	movs	r1, #0
 8005e32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	0018      	movs	r0, r3
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	b004      	add	sp, #16
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2284      	movs	r2, #132	; 0x84
 8005e4e:	5c9b      	ldrb	r3, [r3, r2]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e54:	2302      	movs	r3, #2
 8005e56:	e02f      	b.n	8005eb8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2284      	movs	r2, #132	; 0x84
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2288      	movs	r2, #136	; 0x88
 8005e64:	2124      	movs	r1, #36	; 0x24
 8005e66:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	438a      	bics	r2, r1
 8005e7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	4a0e      	ldr	r2, [pc, #56]	; (8005ec0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005e88:	4013      	ands	r3, r2
 8005e8a:	0019      	movs	r1, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f000 f813 	bl	8005ec4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2288      	movs	r2, #136	; 0x88
 8005eaa:	2120      	movs	r1, #32
 8005eac:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2284      	movs	r2, #132	; 0x84
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	0018      	movs	r0, r3
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	b004      	add	sp, #16
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	f1ffffff 	.word	0xf1ffffff

08005ec4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d108      	bne.n	8005ee6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	226a      	movs	r2, #106	; 0x6a
 8005ed8:	2101      	movs	r1, #1
 8005eda:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2268      	movs	r2, #104	; 0x68
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ee4:	e043      	b.n	8005f6e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ee6:	260f      	movs	r6, #15
 8005ee8:	19bb      	adds	r3, r7, r6
 8005eea:	2208      	movs	r2, #8
 8005eec:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005eee:	200e      	movs	r0, #14
 8005ef0:	183b      	adds	r3, r7, r0
 8005ef2:	2208      	movs	r2, #8
 8005ef4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	0e5b      	lsrs	r3, r3, #25
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	240d      	movs	r4, #13
 8005f02:	193b      	adds	r3, r7, r4
 8005f04:	2107      	movs	r1, #7
 8005f06:	400a      	ands	r2, r1
 8005f08:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	0f5b      	lsrs	r3, r3, #29
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	250c      	movs	r5, #12
 8005f16:	197b      	adds	r3, r7, r5
 8005f18:	2107      	movs	r1, #7
 8005f1a:	400a      	ands	r2, r1
 8005f1c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f1e:	183b      	adds	r3, r7, r0
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	197a      	adds	r2, r7, r5
 8005f24:	7812      	ldrb	r2, [r2, #0]
 8005f26:	4914      	ldr	r1, [pc, #80]	; (8005f78 <UARTEx_SetNbDataToProcess+0xb4>)
 8005f28:	5c8a      	ldrb	r2, [r1, r2]
 8005f2a:	435a      	muls	r2, r3
 8005f2c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f2e:	197b      	adds	r3, r7, r5
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	4a12      	ldr	r2, [pc, #72]	; (8005f7c <UARTEx_SetNbDataToProcess+0xb8>)
 8005f34:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f36:	0019      	movs	r1, r3
 8005f38:	f7fa f97a 	bl	8000230 <__divsi3>
 8005f3c:	0003      	movs	r3, r0
 8005f3e:	b299      	uxth	r1, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	226a      	movs	r2, #106	; 0x6a
 8005f44:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f46:	19bb      	adds	r3, r7, r6
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	193a      	adds	r2, r7, r4
 8005f4c:	7812      	ldrb	r2, [r2, #0]
 8005f4e:	490a      	ldr	r1, [pc, #40]	; (8005f78 <UARTEx_SetNbDataToProcess+0xb4>)
 8005f50:	5c8a      	ldrb	r2, [r1, r2]
 8005f52:	435a      	muls	r2, r3
 8005f54:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f56:	193b      	adds	r3, r7, r4
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	4a08      	ldr	r2, [pc, #32]	; (8005f7c <UARTEx_SetNbDataToProcess+0xb8>)
 8005f5c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f5e:	0019      	movs	r1, r3
 8005f60:	f7fa f966 	bl	8000230 <__divsi3>
 8005f64:	0003      	movs	r3, r0
 8005f66:	b299      	uxth	r1, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2268      	movs	r2, #104	; 0x68
 8005f6c:	5299      	strh	r1, [r3, r2]
}
 8005f6e:	46c0      	nop			; (mov r8, r8)
 8005f70:	46bd      	mov	sp, r7
 8005f72:	b005      	add	sp, #20
 8005f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f76:	46c0      	nop			; (mov r8, r8)
 8005f78:	08008c98 	.word	0x08008c98
 8005f7c:	08008ca0 	.word	0x08008ca0

08005f80 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	0002      	movs	r2, r0
 8005f88:	1dbb      	adds	r3, r7, #6
 8005f8a:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005f90:	1dbb      	adds	r3, r7, #6
 8005f92:	2200      	movs	r2, #0
 8005f94:	5e9b      	ldrsh	r3, [r3, r2]
 8005f96:	2b84      	cmp	r3, #132	; 0x84
 8005f98:	d006      	beq.n	8005fa8 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8005f9a:	1dbb      	adds	r3, r7, #6
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	5e9a      	ldrsh	r2, [r3, r2]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	18d3      	adds	r3, r2, r3
 8005fa4:	3303      	adds	r3, #3
 8005fa6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
}
 8005faa:	0018      	movs	r0, r3
 8005fac:	46bd      	mov	sp, r7
 8005fae:	b004      	add	sp, #16
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005fb6:	f000 fd8d 	bl	8006ad4 <vTaskStartScheduler>
  
  return osOK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005fc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fc4:	b087      	sub	sp, #28
 8005fc6:	af02      	add	r7, sp, #8
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685c      	ldr	r4, [r3, #4]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fd8:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2208      	movs	r2, #8
 8005fde:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	f7ff ffcd 	bl	8005f80 <makeFreeRtosPriority>
 8005fe6:	0001      	movs	r1, r0
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	230c      	movs	r3, #12
 8005fec:	18fb      	adds	r3, r7, r3
 8005fee:	9301      	str	r3, [sp, #4]
 8005ff0:	9100      	str	r1, [sp, #0]
 8005ff2:	0013      	movs	r3, r2
 8005ff4:	0032      	movs	r2, r6
 8005ff6:	0029      	movs	r1, r5
 8005ff8:	0020      	movs	r0, r4
 8005ffa:	f000 fc16 	bl	800682a <xTaskCreate>
 8005ffe:	0003      	movs	r3, r0
 8006000:	2b01      	cmp	r3, #1
 8006002:	d001      	beq.n	8006008 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8006004:	2300      	movs	r3, #0
 8006006:	e000      	b.n	800600a <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8006008:	68fb      	ldr	r3, [r7, #12]
}
 800600a:	0018      	movs	r0, r3
 800600c:	46bd      	mov	sp, r7
 800600e:	b005      	add	sp, #20
 8006010:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006012 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b084      	sub	sp, #16
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <osDelay+0x16>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	e000      	b.n	800602a <osDelay+0x18>
 8006028:	2301      	movs	r3, #1
 800602a:	0018      	movs	r0, r3
 800602c:	f000 fd2c 	bl	8006a88 <vTaskDelay>
  
  return osOK;
 8006030:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006032:	0018      	movs	r0, r3
 8006034:	46bd      	mov	sp, r7
 8006036:	b004      	add	sp, #16
 8006038:	bd80      	pop	{r7, pc}

0800603a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b082      	sub	sp, #8
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	3308      	adds	r3, #8
 8006046:	001a      	movs	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	4252      	negs	r2, r2
 8006052:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	3308      	adds	r3, #8
 8006058:	001a      	movs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3308      	adds	r3, #8
 8006062:	001a      	movs	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800606e:	46c0      	nop			; (mov r8, r8)
 8006070:	46bd      	mov	sp, r7
 8006072:	b002      	add	sp, #8
 8006074:	bd80      	pop	{r7, pc}

08006076 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b082      	sub	sp, #8
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006084:	46c0      	nop			; (mov r8, r8)
 8006086:	46bd      	mov	sp, r7
 8006088:	b002      	add	sp, #8
 800608a:	bd80      	pop	{r7, pc}

0800608c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	601a      	str	r2, [r3, #0]
}
 80060c8:	46c0      	nop			; (mov r8, r8)
 80060ca:	46bd      	mov	sp, r7
 80060cc:	b004      	add	sp, #16
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	3301      	adds	r3, #1
 80060e4:	d103      	bne.n	80060ee <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	e00c      	b.n	8006108 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	3308      	adds	r3, #8
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	e002      	b.n	80060fc <vListInsert+0x2c>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	429a      	cmp	r2, r3
 8006106:	d2f6      	bcs.n	80060f6 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	1c5a      	adds	r2, r3, #1
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	601a      	str	r2, [r3, #0]
}
 8006134:	46c0      	nop			; (mov r8, r8)
 8006136:	46bd      	mov	sp, r7
 8006138:	b004      	add	sp, #16
 800613a:	bd80      	pop	{r7, pc}

0800613c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	6892      	ldr	r2, [r2, #8]
 8006152:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6852      	ldr	r2, [r2, #4]
 800615c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	429a      	cmp	r2, r3
 8006166:	d103      	bne.n	8006170 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	1e5a      	subs	r2, r3, #1
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
}
 8006184:	0018      	movs	r0, r3
 8006186:	46bd      	mov	sp, r7
 8006188:	b004      	add	sp, #16
 800618a:	bd80      	pop	{r7, pc}

0800618c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <xQueueGenericReset+0x18>
 80061a0:	b672      	cpsid	i
 80061a2:	e7fe      	b.n	80061a2 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80061a4:	f001 fa54 	bl	8007650 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b4:	434b      	muls	r3, r1
 80061b6:	18d2      	adds	r2, r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d2:	1e59      	subs	r1, r3, #1
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d8:	434b      	muls	r3, r1
 80061da:	18d2      	adds	r2, r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2244      	movs	r2, #68	; 0x44
 80061e4:	21ff      	movs	r1, #255	; 0xff
 80061e6:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2245      	movs	r2, #69	; 0x45
 80061ec:	21ff      	movs	r1, #255	; 0xff
 80061ee:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10d      	bne.n	8006212 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d013      	beq.n	8006226 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	3310      	adds	r3, #16
 8006202:	0018      	movs	r0, r3
 8006204:	f000 fe54 	bl	8006eb0 <xTaskRemoveFromEventList>
 8006208:	1e03      	subs	r3, r0, #0
 800620a:	d00c      	beq.n	8006226 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800620c:	f001 fa10 	bl	8007630 <vPortYield>
 8006210:	e009      	b.n	8006226 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	3310      	adds	r3, #16
 8006216:	0018      	movs	r0, r3
 8006218:	f7ff ff0f 	bl	800603a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	3324      	adds	r3, #36	; 0x24
 8006220:	0018      	movs	r0, r3
 8006222:	f7ff ff0a 	bl	800603a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006226:	f001 fa25 	bl	8007674 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800622a:	2301      	movs	r3, #1
}
 800622c:	0018      	movs	r0, r3
 800622e:	46bd      	mov	sp, r7
 8006230:	b004      	add	sp, #16
 8006232:	bd80      	pop	{r7, pc}

08006234 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006234:	b590      	push	{r4, r7, lr}
 8006236:	b08b      	sub	sp, #44	; 0x2c
 8006238:	af02      	add	r7, sp, #8
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	1dfb      	adds	r3, r7, #7
 8006240:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <xQueueGenericCreate+0x18>
 8006248:	b672      	cpsid	i
 800624a:	e7fe      	b.n	800624a <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	4353      	muls	r3, r2
 8006252:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	3348      	adds	r3, #72	; 0x48
 8006258:	0018      	movs	r0, r3
 800625a:	f001 fa91 	bl	8007780 <pvPortMalloc>
 800625e:	0003      	movs	r3, r0
 8006260:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00e      	beq.n	8006286 <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	3348      	adds	r3, #72	; 0x48
 8006270:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006272:	1dfb      	adds	r3, r7, #7
 8006274:	781c      	ldrb	r4, [r3, #0]
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	68b9      	ldr	r1, [r7, #8]
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	0023      	movs	r3, r4
 8006282:	f000 f805 	bl	8006290 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006286:	69bb      	ldr	r3, [r7, #24]
	}
 8006288:	0018      	movs	r0, r3
 800628a:	46bd      	mov	sp, r7
 800628c:	b009      	add	sp, #36	; 0x24
 800628e:	bd90      	pop	{r4, r7, pc}

08006290 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	001a      	movs	r2, r3
 800629e:	1cfb      	adds	r3, r7, #3
 80062a0:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d103      	bne.n	80062b0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	e002      	b.n	80062b6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	2101      	movs	r1, #1
 80062c6:	0018      	movs	r0, r3
 80062c8:	f7ff ff60 	bl	800618c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80062cc:	46c0      	nop			; (mov r8, r8)
 80062ce:	46bd      	mov	sp, r7
 80062d0:	b004      	add	sp, #16
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08a      	sub	sp, #40	; 0x28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
 80062e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80062e2:	2300      	movs	r3, #0
 80062e4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <xQueueGenericSend+0x20>
 80062f0:	b672      	cpsid	i
 80062f2:	e7fe      	b.n	80062f2 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d103      	bne.n	8006302 <xQueueGenericSend+0x2e>
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <xQueueGenericSend+0x32>
 8006302:	2301      	movs	r3, #1
 8006304:	e000      	b.n	8006308 <xQueueGenericSend+0x34>
 8006306:	2300      	movs	r3, #0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d101      	bne.n	8006310 <xQueueGenericSend+0x3c>
 800630c:	b672      	cpsid	i
 800630e:	e7fe      	b.n	800630e <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b02      	cmp	r3, #2
 8006314:	d103      	bne.n	800631e <xQueueGenericSend+0x4a>
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631a:	2b01      	cmp	r3, #1
 800631c:	d101      	bne.n	8006322 <xQueueGenericSend+0x4e>
 800631e:	2301      	movs	r3, #1
 8006320:	e000      	b.n	8006324 <xQueueGenericSend+0x50>
 8006322:	2300      	movs	r3, #0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <xQueueGenericSend+0x58>
 8006328:	b672      	cpsid	i
 800632a:	e7fe      	b.n	800632a <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800632c:	f000 ff3c 	bl	80071a8 <xTaskGetSchedulerState>
 8006330:	1e03      	subs	r3, r0, #0
 8006332:	d102      	bne.n	800633a <xQueueGenericSend+0x66>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <xQueueGenericSend+0x6a>
 800633a:	2301      	movs	r3, #1
 800633c:	e000      	b.n	8006340 <xQueueGenericSend+0x6c>
 800633e:	2300      	movs	r3, #0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <xQueueGenericSend+0x74>
 8006344:	b672      	cpsid	i
 8006346:	e7fe      	b.n	8006346 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006348:	f001 f982 	bl	8007650 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800634c:	6a3b      	ldr	r3, [r7, #32]
 800634e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006354:	429a      	cmp	r2, r3
 8006356:	d302      	bcc.n	800635e <xQueueGenericSend+0x8a>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	2b02      	cmp	r3, #2
 800635c:	d11e      	bne.n	800639c <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	68b9      	ldr	r1, [r7, #8]
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	0018      	movs	r0, r3
 8006366:	f000 f969 	bl	800663c <prvCopyDataToQueue>
 800636a:	0003      	movs	r3, r0
 800636c:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	2b00      	cmp	r3, #0
 8006374:	d009      	beq.n	800638a <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	3324      	adds	r3, #36	; 0x24
 800637a:	0018      	movs	r0, r3
 800637c:	f000 fd98 	bl	8006eb0 <xTaskRemoveFromEventList>
 8006380:	1e03      	subs	r3, r0, #0
 8006382:	d007      	beq.n	8006394 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006384:	f001 f954 	bl	8007630 <vPortYield>
 8006388:	e004      	b.n	8006394 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006390:	f001 f94e 	bl	8007630 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006394:	f001 f96e 	bl	8007674 <vPortExitCritical>
				return pdPASS;
 8006398:	2301      	movs	r3, #1
 800639a:	e05b      	b.n	8006454 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d103      	bne.n	80063aa <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80063a2:	f001 f967 	bl	8007674 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	e054      	b.n	8006454 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d106      	bne.n	80063be <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063b0:	2314      	movs	r3, #20
 80063b2:	18fb      	adds	r3, r7, r3
 80063b4:	0018      	movs	r0, r3
 80063b6:	f000 fdd7 	bl	8006f68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063ba:	2301      	movs	r3, #1
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063be:	f001 f959 	bl	8007674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063c2:	f000 fbbd 	bl	8006b40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063c6:	f001 f943 	bl	8007650 <vPortEnterCritical>
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	2244      	movs	r2, #68	; 0x44
 80063ce:	5c9b      	ldrb	r3, [r3, r2]
 80063d0:	b25b      	sxtb	r3, r3
 80063d2:	3301      	adds	r3, #1
 80063d4:	d103      	bne.n	80063de <xQueueGenericSend+0x10a>
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	2244      	movs	r2, #68	; 0x44
 80063da:	2100      	movs	r1, #0
 80063dc:	5499      	strb	r1, [r3, r2]
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	2245      	movs	r2, #69	; 0x45
 80063e2:	5c9b      	ldrb	r3, [r3, r2]
 80063e4:	b25b      	sxtb	r3, r3
 80063e6:	3301      	adds	r3, #1
 80063e8:	d103      	bne.n	80063f2 <xQueueGenericSend+0x11e>
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	2245      	movs	r2, #69	; 0x45
 80063ee:	2100      	movs	r1, #0
 80063f0:	5499      	strb	r1, [r3, r2]
 80063f2:	f001 f93f 	bl	8007674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063f6:	1d3a      	adds	r2, r7, #4
 80063f8:	2314      	movs	r3, #20
 80063fa:	18fb      	adds	r3, r7, r3
 80063fc:	0011      	movs	r1, r2
 80063fe:	0018      	movs	r0, r3
 8006400:	f000 fdc6 	bl	8006f90 <xTaskCheckForTimeOut>
 8006404:	1e03      	subs	r3, r0, #0
 8006406:	d11e      	bne.n	8006446 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	0018      	movs	r0, r3
 800640c:	f000 f9f5 	bl	80067fa <prvIsQueueFull>
 8006410:	1e03      	subs	r3, r0, #0
 8006412:	d011      	beq.n	8006438 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	3310      	adds	r3, #16
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	0011      	movs	r1, r2
 800641c:	0018      	movs	r0, r3
 800641e:	f000 fd29 	bl	8006e74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	0018      	movs	r0, r3
 8006426:	f000 f974 	bl	8006712 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800642a:	f000 fb95 	bl	8006b58 <xTaskResumeAll>
 800642e:	1e03      	subs	r3, r0, #0
 8006430:	d18a      	bne.n	8006348 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8006432:	f001 f8fd 	bl	8007630 <vPortYield>
 8006436:	e787      	b.n	8006348 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	0018      	movs	r0, r3
 800643c:	f000 f969 	bl	8006712 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006440:	f000 fb8a 	bl	8006b58 <xTaskResumeAll>
 8006444:	e780      	b.n	8006348 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	0018      	movs	r0, r3
 800644a:	f000 f962 	bl	8006712 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800644e:	f000 fb83 	bl	8006b58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006452:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006454:	0018      	movs	r0, r3
 8006456:	46bd      	mov	sp, r7
 8006458:	b00a      	add	sp, #40	; 0x28
 800645a:	bd80      	pop	{r7, pc}

0800645c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08a      	sub	sp, #40	; 0x28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006466:	2300      	movs	r3, #0
 8006468:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800646e:	2300      	movs	r3, #0
 8006470:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <xQueueSemaphoreTake+0x20>
 8006478:	b672      	cpsid	i
 800647a:	e7fe      	b.n	800647a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <xQueueSemaphoreTake+0x2c>
 8006484:	b672      	cpsid	i
 8006486:	e7fe      	b.n	8006486 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006488:	f000 fe8e 	bl	80071a8 <xTaskGetSchedulerState>
 800648c:	1e03      	subs	r3, r0, #0
 800648e:	d102      	bne.n	8006496 <xQueueSemaphoreTake+0x3a>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <xQueueSemaphoreTake+0x3e>
 8006496:	2301      	movs	r3, #1
 8006498:	e000      	b.n	800649c <xQueueSemaphoreTake+0x40>
 800649a:	2300      	movs	r3, #0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <xQueueSemaphoreTake+0x48>
 80064a0:	b672      	cpsid	i
 80064a2:	e7fe      	b.n	80064a2 <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064a4:	f001 f8d4 	bl	8007650 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ac:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01d      	beq.n	80064f0 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	1e5a      	subs	r2, r3, #1
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d104      	bne.n	80064ce <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80064c4:	f000 ffc0 	bl	8007448 <pvTaskIncrementMutexHeldCount>
 80064c8:	0002      	movs	r2, r0
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d008      	beq.n	80064e8 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	3310      	adds	r3, #16
 80064da:	0018      	movs	r0, r3
 80064dc:	f000 fce8 	bl	8006eb0 <xTaskRemoveFromEventList>
 80064e0:	1e03      	subs	r3, r0, #0
 80064e2:	d001      	beq.n	80064e8 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064e4:	f001 f8a4 	bl	8007630 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064e8:	f001 f8c4 	bl	8007674 <vPortExitCritical>
				return pdPASS;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e08b      	b.n	8006608 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d108      	bne.n	8006508 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <xQueueSemaphoreTake+0xa4>
 80064fc:	b672      	cpsid	i
 80064fe:	e7fe      	b.n	80064fe <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006500:	f001 f8b8 	bl	8007674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006504:	2300      	movs	r3, #0
 8006506:	e07f      	b.n	8006608 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	2b00      	cmp	r3, #0
 800650c:	d106      	bne.n	800651c <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800650e:	230c      	movs	r3, #12
 8006510:	18fb      	adds	r3, r7, r3
 8006512:	0018      	movs	r0, r3
 8006514:	f000 fd28 	bl	8006f68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006518:	2301      	movs	r3, #1
 800651a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800651c:	f001 f8aa 	bl	8007674 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006520:	f000 fb0e 	bl	8006b40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006524:	f001 f894 	bl	8007650 <vPortEnterCritical>
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	2244      	movs	r2, #68	; 0x44
 800652c:	5c9b      	ldrb	r3, [r3, r2]
 800652e:	b25b      	sxtb	r3, r3
 8006530:	3301      	adds	r3, #1
 8006532:	d103      	bne.n	800653c <xQueueSemaphoreTake+0xe0>
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	2244      	movs	r2, #68	; 0x44
 8006538:	2100      	movs	r1, #0
 800653a:	5499      	strb	r1, [r3, r2]
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	2245      	movs	r2, #69	; 0x45
 8006540:	5c9b      	ldrb	r3, [r3, r2]
 8006542:	b25b      	sxtb	r3, r3
 8006544:	3301      	adds	r3, #1
 8006546:	d103      	bne.n	8006550 <xQueueSemaphoreTake+0xf4>
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	2245      	movs	r2, #69	; 0x45
 800654c:	2100      	movs	r1, #0
 800654e:	5499      	strb	r1, [r3, r2]
 8006550:	f001 f890 	bl	8007674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006554:	003a      	movs	r2, r7
 8006556:	230c      	movs	r3, #12
 8006558:	18fb      	adds	r3, r7, r3
 800655a:	0011      	movs	r1, r2
 800655c:	0018      	movs	r0, r3
 800655e:	f000 fd17 	bl	8006f90 <xTaskCheckForTimeOut>
 8006562:	1e03      	subs	r3, r0, #0
 8006564:	d12e      	bne.n	80065c4 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	0018      	movs	r0, r3
 800656a:	f000 f930 	bl	80067ce <prvIsQueueEmpty>
 800656e:	1e03      	subs	r3, r0, #0
 8006570:	d021      	beq.n	80065b6 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10a      	bne.n	8006590 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 800657a:	f001 f869 	bl	8007650 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	0018      	movs	r0, r3
 8006584:	f000 fe2c 	bl	80071e0 <xTaskPriorityInherit>
 8006588:	0003      	movs	r3, r0
 800658a:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800658c:	f001 f872 	bl	8007674 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	3324      	adds	r3, #36	; 0x24
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	0011      	movs	r1, r2
 8006598:	0018      	movs	r0, r3
 800659a:	f000 fc6b 	bl	8006e74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	0018      	movs	r0, r3
 80065a2:	f000 f8b6 	bl	8006712 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065a6:	f000 fad7 	bl	8006b58 <xTaskResumeAll>
 80065aa:	1e03      	subs	r3, r0, #0
 80065ac:	d000      	beq.n	80065b0 <xQueueSemaphoreTake+0x154>
 80065ae:	e779      	b.n	80064a4 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 80065b0:	f001 f83e 	bl	8007630 <vPortYield>
 80065b4:	e776      	b.n	80064a4 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	0018      	movs	r0, r3
 80065ba:	f000 f8aa 	bl	8006712 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065be:	f000 facb 	bl	8006b58 <xTaskResumeAll>
 80065c2:	e76f      	b.n	80064a4 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	0018      	movs	r0, r3
 80065c8:	f000 f8a3 	bl	8006712 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065cc:	f000 fac4 	bl	8006b58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	0018      	movs	r0, r3
 80065d4:	f000 f8fb 	bl	80067ce <prvIsQueueEmpty>
 80065d8:	1e03      	subs	r3, r0, #0
 80065da:	d100      	bne.n	80065de <xQueueSemaphoreTake+0x182>
 80065dc:	e762      	b.n	80064a4 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d010      	beq.n	8006606 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 80065e4:	f001 f834 	bl	8007650 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	0018      	movs	r0, r3
 80065ec:	f000 f810 	bl	8006610 <prvGetDisinheritPriorityAfterTimeout>
 80065f0:	0003      	movs	r3, r0
 80065f2:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	0011      	movs	r1, r2
 80065fc:	0018      	movs	r0, r3
 80065fe:	f000 feb3 	bl	8007368 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006602:	f001 f837 	bl	8007674 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006606:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006608:	0018      	movs	r0, r3
 800660a:	46bd      	mov	sp, r7
 800660c:	b00a      	add	sp, #40	; 0x28
 800660e:	bd80      	pop	{r7, pc}

08006610 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	2b00      	cmp	r3, #0
 800661e:	d006      	beq.n	800662e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2207      	movs	r2, #7
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	e001      	b.n	8006632 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800662e:	2300      	movs	r3, #0
 8006630:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006632:	68fb      	ldr	r3, [r7, #12]
	}
 8006634:	0018      	movs	r0, r3
 8006636:	46bd      	mov	sp, r7
 8006638:	b004      	add	sp, #16
 800663a:	bd80      	pop	{r7, pc}

0800663c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006648:	2300      	movs	r3, #0
 800664a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006650:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10e      	bne.n	8006678 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d14e      	bne.n	8006700 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	0018      	movs	r0, r3
 8006668:	f000 fe22 	bl	80072b0 <xTaskPriorityDisinherit>
 800666c:	0003      	movs	r3, r0
 800666e:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	609a      	str	r2, [r3, #8]
 8006676:	e043      	b.n	8006700 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d119      	bne.n	80066b2 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6858      	ldr	r0, [r3, #4]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	0019      	movs	r1, r3
 800668a:	f001 fbbb 	bl	8007e04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	18d2      	adds	r2, r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d32b      	bcc.n	8006700 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	605a      	str	r2, [r3, #4]
 80066b0:	e026      	b.n	8006700 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	68d8      	ldr	r0, [r3, #12]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	0019      	movs	r1, r3
 80066be:	f001 fba1 	bl	8007e04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	425b      	negs	r3, r3
 80066cc:	18d2      	adds	r2, r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d207      	bcs.n	80066ee <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	689a      	ldr	r2, [r3, #8]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	425b      	negs	r3, r3
 80066e8:	18d2      	adds	r2, r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d105      	bne.n	8006700 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	3b01      	subs	r3, #1
 80066fe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006708:	697b      	ldr	r3, [r7, #20]
}
 800670a:	0018      	movs	r0, r3
 800670c:	46bd      	mov	sp, r7
 800670e:	b006      	add	sp, #24
 8006710:	bd80      	pop	{r7, pc}

08006712 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800671a:	f000 ff99 	bl	8007650 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800671e:	230f      	movs	r3, #15
 8006720:	18fb      	adds	r3, r7, r3
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	2145      	movs	r1, #69	; 0x45
 8006726:	5c52      	ldrb	r2, [r2, r1]
 8006728:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800672a:	e013      	b.n	8006754 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	2b00      	cmp	r3, #0
 8006732:	d016      	beq.n	8006762 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	3324      	adds	r3, #36	; 0x24
 8006738:	0018      	movs	r0, r3
 800673a:	f000 fbb9 	bl	8006eb0 <xTaskRemoveFromEventList>
 800673e:	1e03      	subs	r3, r0, #0
 8006740:	d001      	beq.n	8006746 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006742:	f000 fc75 	bl	8007030 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006746:	210f      	movs	r1, #15
 8006748:	187b      	adds	r3, r7, r1
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	3b01      	subs	r3, #1
 800674e:	b2da      	uxtb	r2, r3
 8006750:	187b      	adds	r3, r7, r1
 8006752:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006754:	230f      	movs	r3, #15
 8006756:	18fb      	adds	r3, r7, r3
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	b25b      	sxtb	r3, r3
 800675c:	2b00      	cmp	r3, #0
 800675e:	dce5      	bgt.n	800672c <prvUnlockQueue+0x1a>
 8006760:	e000      	b.n	8006764 <prvUnlockQueue+0x52>
					break;
 8006762:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2245      	movs	r2, #69	; 0x45
 8006768:	21ff      	movs	r1, #255	; 0xff
 800676a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800676c:	f000 ff82 	bl	8007674 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006770:	f000 ff6e 	bl	8007650 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006774:	230e      	movs	r3, #14
 8006776:	18fb      	adds	r3, r7, r3
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	2144      	movs	r1, #68	; 0x44
 800677c:	5c52      	ldrb	r2, [r2, r1]
 800677e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006780:	e013      	b.n	80067aa <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d016      	beq.n	80067b8 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3310      	adds	r3, #16
 800678e:	0018      	movs	r0, r3
 8006790:	f000 fb8e 	bl	8006eb0 <xTaskRemoveFromEventList>
 8006794:	1e03      	subs	r3, r0, #0
 8006796:	d001      	beq.n	800679c <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8006798:	f000 fc4a 	bl	8007030 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800679c:	210e      	movs	r1, #14
 800679e:	187b      	adds	r3, r7, r1
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	187b      	adds	r3, r7, r1
 80067a8:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067aa:	230e      	movs	r3, #14
 80067ac:	18fb      	adds	r3, r7, r3
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	b25b      	sxtb	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	dce5      	bgt.n	8006782 <prvUnlockQueue+0x70>
 80067b6:	e000      	b.n	80067ba <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80067b8:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2244      	movs	r2, #68	; 0x44
 80067be:	21ff      	movs	r1, #255	; 0xff
 80067c0:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80067c2:	f000 ff57 	bl	8007674 <vPortExitCritical>
}
 80067c6:	46c0      	nop			; (mov r8, r8)
 80067c8:	46bd      	mov	sp, r7
 80067ca:	b004      	add	sp, #16
 80067cc:	bd80      	pop	{r7, pc}

080067ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b084      	sub	sp, #16
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067d6:	f000 ff3b 	bl	8007650 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d102      	bne.n	80067e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80067e2:	2301      	movs	r3, #1
 80067e4:	60fb      	str	r3, [r7, #12]
 80067e6:	e001      	b.n	80067ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80067e8:	2300      	movs	r3, #0
 80067ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067ec:	f000 ff42 	bl	8007674 <vPortExitCritical>

	return xReturn;
 80067f0:	68fb      	ldr	r3, [r7, #12]
}
 80067f2:	0018      	movs	r0, r3
 80067f4:	46bd      	mov	sp, r7
 80067f6:	b004      	add	sp, #16
 80067f8:	bd80      	pop	{r7, pc}

080067fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b084      	sub	sp, #16
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006802:	f000 ff25 	bl	8007650 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680e:	429a      	cmp	r2, r3
 8006810:	d102      	bne.n	8006818 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006812:	2301      	movs	r3, #1
 8006814:	60fb      	str	r3, [r7, #12]
 8006816:	e001      	b.n	800681c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006818:	2300      	movs	r3, #0
 800681a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800681c:	f000 ff2a 	bl	8007674 <vPortExitCritical>

	return xReturn;
 8006820:	68fb      	ldr	r3, [r7, #12]
}
 8006822:	0018      	movs	r0, r3
 8006824:	46bd      	mov	sp, r7
 8006826:	b004      	add	sp, #16
 8006828:	bd80      	pop	{r7, pc}

0800682a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800682a:	b590      	push	{r4, r7, lr}
 800682c:	b08d      	sub	sp, #52	; 0x34
 800682e:	af04      	add	r7, sp, #16
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	603b      	str	r3, [r7, #0]
 8006836:	1dbb      	adds	r3, r7, #6
 8006838:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800683a:	1dbb      	adds	r3, r7, #6
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	0018      	movs	r0, r3
 8006842:	f000 ff9d 	bl	8007780 <pvPortMalloc>
 8006846:	0003      	movs	r3, r0
 8006848:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d010      	beq.n	8006872 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006850:	2054      	movs	r0, #84	; 0x54
 8006852:	f000 ff95 	bl	8007780 <pvPortMalloc>
 8006856:	0003      	movs	r3, r0
 8006858:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d003      	beq.n	8006868 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	631a      	str	r2, [r3, #48]	; 0x30
 8006866:	e006      	b.n	8006876 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	0018      	movs	r0, r3
 800686c:	f001 f834 	bl	80078d8 <vPortFree>
 8006870:	e001      	b.n	8006876 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006872:	2300      	movs	r3, #0
 8006874:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d016      	beq.n	80068aa <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800687c:	1dbb      	adds	r3, r7, #6
 800687e:	881a      	ldrh	r2, [r3, #0]
 8006880:	683c      	ldr	r4, [r7, #0]
 8006882:	68b9      	ldr	r1, [r7, #8]
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	2300      	movs	r3, #0
 8006888:	9303      	str	r3, [sp, #12]
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	9302      	str	r3, [sp, #8]
 800688e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006890:	9301      	str	r3, [sp, #4]
 8006892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	0023      	movs	r3, r4
 8006898:	f000 f810 	bl	80068bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	0018      	movs	r0, r3
 80068a0:	f000 f88e 	bl	80069c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80068a4:	2301      	movs	r3, #1
 80068a6:	61bb      	str	r3, [r7, #24]
 80068a8:	e002      	b.n	80068b0 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068aa:	2301      	movs	r3, #1
 80068ac:	425b      	negs	r3, r3
 80068ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80068b0:	69bb      	ldr	r3, [r7, #24]
	}
 80068b2:	0018      	movs	r0, r3
 80068b4:	46bd      	mov	sp, r7
 80068b6:	b009      	add	sp, #36	; 0x24
 80068b8:	bd90      	pop	{r4, r7, pc}
	...

080068bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
 80068c8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80068ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	493a      	ldr	r1, [pc, #232]	; (80069bc <prvInitialiseNewTask+0x100>)
 80068d2:	468c      	mov	ip, r1
 80068d4:	4463      	add	r3, ip
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	18d3      	adds	r3, r2, r3
 80068da:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	2207      	movs	r2, #7
 80068e0:	4393      	bics	r3, r2
 80068e2:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	2207      	movs	r2, #7
 80068e8:	4013      	ands	r3, r2
 80068ea:	d001      	beq.n	80068f0 <prvInitialiseNewTask+0x34>
 80068ec:	b672      	cpsid	i
 80068ee:	e7fe      	b.n	80068ee <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d020      	beq.n	8006938 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068f6:	2300      	movs	r3, #0
 80068f8:	617b      	str	r3, [r7, #20]
 80068fa:	e013      	b.n	8006924 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	18d3      	adds	r3, r2, r3
 8006902:	7818      	ldrb	r0, [r3, #0]
 8006904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006906:	2134      	movs	r1, #52	; 0x34
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	18d3      	adds	r3, r2, r3
 800690c:	185b      	adds	r3, r3, r1
 800690e:	1c02      	adds	r2, r0, #0
 8006910:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	18d3      	adds	r3, r2, r3
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d006      	beq.n	800692c <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	3301      	adds	r3, #1
 8006922:	617b      	str	r3, [r7, #20]
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	2b0f      	cmp	r3, #15
 8006928:	d9e8      	bls.n	80068fc <prvInitialiseNewTask+0x40>
 800692a:	e000      	b.n	800692e <prvInitialiseNewTask+0x72>
			{
				break;
 800692c:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	2243      	movs	r2, #67	; 0x43
 8006932:	2100      	movs	r1, #0
 8006934:	5499      	strb	r1, [r3, r2]
 8006936:	e003      	b.n	8006940 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693a:	2234      	movs	r2, #52	; 0x34
 800693c:	2100      	movs	r1, #0
 800693e:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	2b06      	cmp	r3, #6
 8006944:	d901      	bls.n	800694a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006946:	2306      	movs	r3, #6
 8006948:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800694a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694c:	6a3a      	ldr	r2, [r7, #32]
 800694e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006952:	6a3a      	ldr	r2, [r7, #32]
 8006954:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006958:	2200      	movs	r2, #0
 800695a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800695c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695e:	3304      	adds	r3, #4
 8006960:	0018      	movs	r0, r3
 8006962:	f7ff fb88 	bl	8006076 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006968:	3318      	adds	r3, #24
 800696a:	0018      	movs	r0, r3
 800696c:	f7ff fb83 	bl	8006076 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006974:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	2207      	movs	r2, #7
 800697a:	1ad2      	subs	r2, r2, r3
 800697c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006984:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006988:	2200      	movs	r2, #0
 800698a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	2250      	movs	r2, #80	; 0x50
 8006990:	2100      	movs	r1, #0
 8006992:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	68f9      	ldr	r1, [r7, #12]
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	0018      	movs	r0, r3
 800699c:	f000 fdba 	bl	8007514 <pxPortInitialiseStack>
 80069a0:	0002      	movs	r2, r0
 80069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069b2:	46c0      	nop			; (mov r8, r8)
 80069b4:	46bd      	mov	sp, r7
 80069b6:	b006      	add	sp, #24
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	46c0      	nop			; (mov r8, r8)
 80069bc:	3fffffff 	.word	0x3fffffff

080069c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80069c8:	f000 fe42 	bl	8007650 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80069cc:	4b28      	ldr	r3, [pc, #160]	; (8006a70 <prvAddNewTaskToReadyList+0xb0>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	4b27      	ldr	r3, [pc, #156]	; (8006a70 <prvAddNewTaskToReadyList+0xb0>)
 80069d4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80069d6:	4b27      	ldr	r3, [pc, #156]	; (8006a74 <prvAddNewTaskToReadyList+0xb4>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d109      	bne.n	80069f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80069de:	4b25      	ldr	r3, [pc, #148]	; (8006a74 <prvAddNewTaskToReadyList+0xb4>)
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80069e4:	4b22      	ldr	r3, [pc, #136]	; (8006a70 <prvAddNewTaskToReadyList+0xb0>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d110      	bne.n	8006a0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80069ec:	f000 fb3a 	bl	8007064 <prvInitialiseTaskLists>
 80069f0:	e00d      	b.n	8006a0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80069f2:	4b21      	ldr	r3, [pc, #132]	; (8006a78 <prvAddNewTaskToReadyList+0xb8>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d109      	bne.n	8006a0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069fa:	4b1e      	ldr	r3, [pc, #120]	; (8006a74 <prvAddNewTaskToReadyList+0xb4>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d802      	bhi.n	8006a0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a08:	4b1a      	ldr	r3, [pc, #104]	; (8006a74 <prvAddNewTaskToReadyList+0xb4>)
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a0e:	4b1b      	ldr	r3, [pc, #108]	; (8006a7c <prvAddNewTaskToReadyList+0xbc>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	4b19      	ldr	r3, [pc, #100]	; (8006a7c <prvAddNewTaskToReadyList+0xbc>)
 8006a16:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a1c:	4b18      	ldr	r3, [pc, #96]	; (8006a80 <prvAddNewTaskToReadyList+0xc0>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d903      	bls.n	8006a2c <prvAddNewTaskToReadyList+0x6c>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a28:	4b15      	ldr	r3, [pc, #84]	; (8006a80 <prvAddNewTaskToReadyList+0xc0>)
 8006a2a:	601a      	str	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a30:	0013      	movs	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	189b      	adds	r3, r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4a12      	ldr	r2, [pc, #72]	; (8006a84 <prvAddNewTaskToReadyList+0xc4>)
 8006a3a:	189a      	adds	r2, r3, r2
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3304      	adds	r3, #4
 8006a40:	0019      	movs	r1, r3
 8006a42:	0010      	movs	r0, r2
 8006a44:	f7ff fb22 	bl	800608c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a48:	f000 fe14 	bl	8007674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a4c:	4b0a      	ldr	r3, [pc, #40]	; (8006a78 <prvAddNewTaskToReadyList+0xb8>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d008      	beq.n	8006a66 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a54:	4b07      	ldr	r3, [pc, #28]	; (8006a74 <prvAddNewTaskToReadyList+0xb4>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d201      	bcs.n	8006a66 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a62:	f000 fde5 	bl	8007630 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a66:	46c0      	nop			; (mov r8, r8)
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	b002      	add	sp, #8
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	46c0      	nop			; (mov r8, r8)
 8006a70:	200004f0 	.word	0x200004f0
 8006a74:	200003f0 	.word	0x200003f0
 8006a78:	200004fc 	.word	0x200004fc
 8006a7c:	2000050c 	.word	0x2000050c
 8006a80:	200004f8 	.word	0x200004f8
 8006a84:	200003f4 	.word	0x200003f4

08006a88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a90:	2300      	movs	r3, #0
 8006a92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d010      	beq.n	8006abc <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a9a:	4b0d      	ldr	r3, [pc, #52]	; (8006ad0 <vTaskDelay+0x48>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <vTaskDelay+0x1e>
 8006aa2:	b672      	cpsid	i
 8006aa4:	e7fe      	b.n	8006aa4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006aa6:	f000 f84b 	bl	8006b40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2100      	movs	r1, #0
 8006aae:	0018      	movs	r0, r3
 8006ab0:	f000 fcdc 	bl	800746c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ab4:	f000 f850 	bl	8006b58 <xTaskResumeAll>
 8006ab8:	0003      	movs	r3, r0
 8006aba:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8006ac2:	f000 fdb5 	bl	8007630 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ac6:	46c0      	nop			; (mov r8, r8)
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	b004      	add	sp, #16
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	46c0      	nop			; (mov r8, r8)
 8006ad0:	20000518 	.word	0x20000518

08006ad4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006ada:	4913      	ldr	r1, [pc, #76]	; (8006b28 <vTaskStartScheduler+0x54>)
 8006adc:	4813      	ldr	r0, [pc, #76]	; (8006b2c <vTaskStartScheduler+0x58>)
 8006ade:	4b14      	ldr	r3, [pc, #80]	; (8006b30 <vTaskStartScheduler+0x5c>)
 8006ae0:	9301      	str	r3, [sp, #4]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	2280      	movs	r2, #128	; 0x80
 8006aea:	f7ff fe9e 	bl	800682a <xTaskCreate>
 8006aee:	0003      	movs	r3, r0
 8006af0:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d10d      	bne.n	8006b14 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8006af8:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006afa:	4b0e      	ldr	r3, [pc, #56]	; (8006b34 <vTaskStartScheduler+0x60>)
 8006afc:	2201      	movs	r2, #1
 8006afe:	4252      	negs	r2, r2
 8006b00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b02:	4b0d      	ldr	r3, [pc, #52]	; (8006b38 <vTaskStartScheduler+0x64>)
 8006b04:	2201      	movs	r2, #1
 8006b06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b08:	4b0c      	ldr	r3, [pc, #48]	; (8006b3c <vTaskStartScheduler+0x68>)
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b0e:	f000 fd6b 	bl	80075e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b12:	e004      	b.n	8006b1e <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	3301      	adds	r3, #1
 8006b18:	d101      	bne.n	8006b1e <vTaskStartScheduler+0x4a>
 8006b1a:	b672      	cpsid	i
 8006b1c:	e7fe      	b.n	8006b1c <vTaskStartScheduler+0x48>
}
 8006b1e:	46c0      	nop			; (mov r8, r8)
 8006b20:	46bd      	mov	sp, r7
 8006b22:	b002      	add	sp, #8
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	46c0      	nop			; (mov r8, r8)
 8006b28:	08008b10 	.word	0x08008b10
 8006b2c:	08007045 	.word	0x08007045
 8006b30:	20000514 	.word	0x20000514
 8006b34:	20000510 	.word	0x20000510
 8006b38:	200004fc 	.word	0x200004fc
 8006b3c:	200004f4 	.word	0x200004f4

08006b40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b44:	4b03      	ldr	r3, [pc, #12]	; (8006b54 <vTaskSuspendAll+0x14>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	4b02      	ldr	r3, [pc, #8]	; (8006b54 <vTaskSuspendAll+0x14>)
 8006b4c:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b4e:	46c0      	nop			; (mov r8, r8)
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	20000518 	.word	0x20000518

08006b58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b62:	2300      	movs	r3, #0
 8006b64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b66:	4b3a      	ldr	r3, [pc, #232]	; (8006c50 <xTaskResumeAll+0xf8>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <xTaskResumeAll+0x1a>
 8006b6e:	b672      	cpsid	i
 8006b70:	e7fe      	b.n	8006b70 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b72:	f000 fd6d 	bl	8007650 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b76:	4b36      	ldr	r3, [pc, #216]	; (8006c50 <xTaskResumeAll+0xf8>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	1e5a      	subs	r2, r3, #1
 8006b7c:	4b34      	ldr	r3, [pc, #208]	; (8006c50 <xTaskResumeAll+0xf8>)
 8006b7e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b80:	4b33      	ldr	r3, [pc, #204]	; (8006c50 <xTaskResumeAll+0xf8>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d15b      	bne.n	8006c40 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b88:	4b32      	ldr	r3, [pc, #200]	; (8006c54 <xTaskResumeAll+0xfc>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d057      	beq.n	8006c40 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b90:	e02f      	b.n	8006bf2 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b92:	4b31      	ldr	r3, [pc, #196]	; (8006c58 <xTaskResumeAll+0x100>)
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	3318      	adds	r3, #24
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	f7ff facc 	bl	800613c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	3304      	adds	r3, #4
 8006ba8:	0018      	movs	r0, r3
 8006baa:	f7ff fac7 	bl	800613c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb2:	4b2a      	ldr	r3, [pc, #168]	; (8006c5c <xTaskResumeAll+0x104>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d903      	bls.n	8006bc2 <xTaskResumeAll+0x6a>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bbe:	4b27      	ldr	r3, [pc, #156]	; (8006c5c <xTaskResumeAll+0x104>)
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc6:	0013      	movs	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	189b      	adds	r3, r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4a24      	ldr	r2, [pc, #144]	; (8006c60 <xTaskResumeAll+0x108>)
 8006bd0:	189a      	adds	r2, r3, r2
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	0019      	movs	r1, r3
 8006bd8:	0010      	movs	r0, r2
 8006bda:	f7ff fa57 	bl	800608c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be2:	4b20      	ldr	r3, [pc, #128]	; (8006c64 <xTaskResumeAll+0x10c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d302      	bcc.n	8006bf2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8006bec:	4b1e      	ldr	r3, [pc, #120]	; (8006c68 <xTaskResumeAll+0x110>)
 8006bee:	2201      	movs	r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bf2:	4b19      	ldr	r3, [pc, #100]	; (8006c58 <xTaskResumeAll+0x100>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1cb      	bne.n	8006b92 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c00:	f000 fab4 	bl	800716c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c04:	4b19      	ldr	r3, [pc, #100]	; (8006c6c <xTaskResumeAll+0x114>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00f      	beq.n	8006c30 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c10:	f000 f82e 	bl	8006c70 <xTaskIncrementTick>
 8006c14:	1e03      	subs	r3, r0, #0
 8006c16:	d002      	beq.n	8006c1e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8006c18:	4b13      	ldr	r3, [pc, #76]	; (8006c68 <xTaskResumeAll+0x110>)
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1f2      	bne.n	8006c10 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8006c2a:	4b10      	ldr	r3, [pc, #64]	; (8006c6c <xTaskResumeAll+0x114>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c30:	4b0d      	ldr	r3, [pc, #52]	; (8006c68 <xTaskResumeAll+0x110>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c3c:	f000 fcf8 	bl	8007630 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c40:	f000 fd18 	bl	8007674 <vPortExitCritical>

	return xAlreadyYielded;
 8006c44:	68bb      	ldr	r3, [r7, #8]
}
 8006c46:	0018      	movs	r0, r3
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	b004      	add	sp, #16
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	46c0      	nop			; (mov r8, r8)
 8006c50:	20000518 	.word	0x20000518
 8006c54:	200004f0 	.word	0x200004f0
 8006c58:	200004b0 	.word	0x200004b0
 8006c5c:	200004f8 	.word	0x200004f8
 8006c60:	200003f4 	.word	0x200003f4
 8006c64:	200003f0 	.word	0x200003f0
 8006c68:	20000504 	.word	0x20000504
 8006c6c:	20000500 	.word	0x20000500

08006c70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c76:	2300      	movs	r3, #0
 8006c78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c7a:	4b4a      	ldr	r3, [pc, #296]	; (8006da4 <xTaskIncrementTick+0x134>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d000      	beq.n	8006c84 <xTaskIncrementTick+0x14>
 8006c82:	e084      	b.n	8006d8e <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c84:	4b48      	ldr	r3, [pc, #288]	; (8006da8 <xTaskIncrementTick+0x138>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c8c:	4b46      	ldr	r3, [pc, #280]	; (8006da8 <xTaskIncrementTick+0x138>)
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d117      	bne.n	8006cc8 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c98:	4b44      	ldr	r3, [pc, #272]	; (8006dac <xTaskIncrementTick+0x13c>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d001      	beq.n	8006ca6 <xTaskIncrementTick+0x36>
 8006ca2:	b672      	cpsid	i
 8006ca4:	e7fe      	b.n	8006ca4 <xTaskIncrementTick+0x34>
 8006ca6:	4b41      	ldr	r3, [pc, #260]	; (8006dac <xTaskIncrementTick+0x13c>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	4b40      	ldr	r3, [pc, #256]	; (8006db0 <xTaskIncrementTick+0x140>)
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	4b3e      	ldr	r3, [pc, #248]	; (8006dac <xTaskIncrementTick+0x13c>)
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	4b3e      	ldr	r3, [pc, #248]	; (8006db0 <xTaskIncrementTick+0x140>)
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	601a      	str	r2, [r3, #0]
 8006cba:	4b3e      	ldr	r3, [pc, #248]	; (8006db4 <xTaskIncrementTick+0x144>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	1c5a      	adds	r2, r3, #1
 8006cc0:	4b3c      	ldr	r3, [pc, #240]	; (8006db4 <xTaskIncrementTick+0x144>)
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	f000 fa52 	bl	800716c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cc8:	4b3b      	ldr	r3, [pc, #236]	; (8006db8 <xTaskIncrementTick+0x148>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d349      	bcc.n	8006d66 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cd2:	4b36      	ldr	r3, [pc, #216]	; (8006dac <xTaskIncrementTick+0x13c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d104      	bne.n	8006ce6 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cdc:	4b36      	ldr	r3, [pc, #216]	; (8006db8 <xTaskIncrementTick+0x148>)
 8006cde:	2201      	movs	r2, #1
 8006ce0:	4252      	negs	r2, r2
 8006ce2:	601a      	str	r2, [r3, #0]
					break;
 8006ce4:	e03f      	b.n	8006d66 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ce6:	4b31      	ldr	r3, [pc, #196]	; (8006dac <xTaskIncrementTick+0x13c>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d203      	bcs.n	8006d06 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006cfe:	4b2e      	ldr	r3, [pc, #184]	; (8006db8 <xTaskIncrementTick+0x148>)
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d04:	e02f      	b.n	8006d66 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	3304      	adds	r3, #4
 8006d0a:	0018      	movs	r0, r3
 8006d0c:	f7ff fa16 	bl	800613c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d004      	beq.n	8006d22 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	3318      	adds	r3, #24
 8006d1c:	0018      	movs	r0, r3
 8006d1e:	f7ff fa0d 	bl	800613c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d26:	4b25      	ldr	r3, [pc, #148]	; (8006dbc <xTaskIncrementTick+0x14c>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d903      	bls.n	8006d36 <xTaskIncrementTick+0xc6>
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d32:	4b22      	ldr	r3, [pc, #136]	; (8006dbc <xTaskIncrementTick+0x14c>)
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d3a:	0013      	movs	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	189b      	adds	r3, r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4a1f      	ldr	r2, [pc, #124]	; (8006dc0 <xTaskIncrementTick+0x150>)
 8006d44:	189a      	adds	r2, r3, r2
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	3304      	adds	r3, #4
 8006d4a:	0019      	movs	r1, r3
 8006d4c:	0010      	movs	r0, r2
 8006d4e:	f7ff f99d 	bl	800608c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d56:	4b1b      	ldr	r3, [pc, #108]	; (8006dc4 <xTaskIncrementTick+0x154>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d3b8      	bcc.n	8006cd2 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8006d60:	2301      	movs	r3, #1
 8006d62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d64:	e7b5      	b.n	8006cd2 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d66:	4b17      	ldr	r3, [pc, #92]	; (8006dc4 <xTaskIncrementTick+0x154>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d6c:	4914      	ldr	r1, [pc, #80]	; (8006dc0 <xTaskIncrementTick+0x150>)
 8006d6e:	0013      	movs	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	189b      	adds	r3, r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	585b      	ldr	r3, [r3, r1]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d901      	bls.n	8006d80 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006d80:	4b11      	ldr	r3, [pc, #68]	; (8006dc8 <xTaskIncrementTick+0x158>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d007      	beq.n	8006d98 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	e004      	b.n	8006d98 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006d8e:	4b0f      	ldr	r3, [pc, #60]	; (8006dcc <xTaskIncrementTick+0x15c>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	4b0d      	ldr	r3, [pc, #52]	; (8006dcc <xTaskIncrementTick+0x15c>)
 8006d96:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006d98:	697b      	ldr	r3, [r7, #20]
}
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	b006      	add	sp, #24
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	46c0      	nop			; (mov r8, r8)
 8006da4:	20000518 	.word	0x20000518
 8006da8:	200004f4 	.word	0x200004f4
 8006dac:	200004a8 	.word	0x200004a8
 8006db0:	200004ac 	.word	0x200004ac
 8006db4:	20000508 	.word	0x20000508
 8006db8:	20000510 	.word	0x20000510
 8006dbc:	200004f8 	.word	0x200004f8
 8006dc0:	200003f4 	.word	0x200003f4
 8006dc4:	200003f0 	.word	0x200003f0
 8006dc8:	20000504 	.word	0x20000504
 8006dcc:	20000500 	.word	0x20000500

08006dd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dd6:	4b22      	ldr	r3, [pc, #136]	; (8006e60 <vTaskSwitchContext+0x90>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006dde:	4b21      	ldr	r3, [pc, #132]	; (8006e64 <vTaskSwitchContext+0x94>)
 8006de0:	2201      	movs	r2, #1
 8006de2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006de4:	e037      	b.n	8006e56 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8006de6:	4b1f      	ldr	r3, [pc, #124]	; (8006e64 <vTaskSwitchContext+0x94>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dec:	4b1e      	ldr	r3, [pc, #120]	; (8006e68 <vTaskSwitchContext+0x98>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	607b      	str	r3, [r7, #4]
 8006df2:	e007      	b.n	8006e04 <vTaskSwitchContext+0x34>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <vTaskSwitchContext+0x2e>
 8006dfa:	b672      	cpsid	i
 8006dfc:	e7fe      	b.n	8006dfc <vTaskSwitchContext+0x2c>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	607b      	str	r3, [r7, #4]
 8006e04:	4919      	ldr	r1, [pc, #100]	; (8006e6c <vTaskSwitchContext+0x9c>)
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	0013      	movs	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	189b      	adds	r3, r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	585b      	ldr	r3, [r3, r1]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d0ee      	beq.n	8006df4 <vTaskSwitchContext+0x24>
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	0013      	movs	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	189b      	adds	r3, r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4a12      	ldr	r2, [pc, #72]	; (8006e6c <vTaskSwitchContext+0x9c>)
 8006e22:	189b      	adds	r3, r3, r2
 8006e24:	603b      	str	r3, [r7, #0]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	605a      	str	r2, [r3, #4]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	3308      	adds	r3, #8
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d104      	bne.n	8006e46 <vTaskSwitchContext+0x76>
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	605a      	str	r2, [r3, #4]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	68da      	ldr	r2, [r3, #12]
 8006e4c:	4b08      	ldr	r3, [pc, #32]	; (8006e70 <vTaskSwitchContext+0xa0>)
 8006e4e:	601a      	str	r2, [r3, #0]
 8006e50:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <vTaskSwitchContext+0x98>)
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	601a      	str	r2, [r3, #0]
}
 8006e56:	46c0      	nop			; (mov r8, r8)
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	b002      	add	sp, #8
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	46c0      	nop			; (mov r8, r8)
 8006e60:	20000518 	.word	0x20000518
 8006e64:	20000504 	.word	0x20000504
 8006e68:	200004f8 	.word	0x200004f8
 8006e6c:	200003f4 	.word	0x200003f4
 8006e70:	200003f0 	.word	0x200003f0

08006e74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <vTaskPlaceOnEventList+0x14>
 8006e84:	b672      	cpsid	i
 8006e86:	e7fe      	b.n	8006e86 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e88:	4b08      	ldr	r3, [pc, #32]	; (8006eac <vTaskPlaceOnEventList+0x38>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3318      	adds	r3, #24
 8006e8e:	001a      	movs	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	0011      	movs	r1, r2
 8006e94:	0018      	movs	r0, r3
 8006e96:	f7ff f91b 	bl	80060d0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	0018      	movs	r0, r3
 8006ea0:	f000 fae4 	bl	800746c <prvAddCurrentTaskToDelayedList>
}
 8006ea4:	46c0      	nop			; (mov r8, r8)
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	b002      	add	sp, #8
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	200003f0 	.word	0x200003f0

08006eb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <xTaskRemoveFromEventList+0x1a>
 8006ec6:	b672      	cpsid	i
 8006ec8:	e7fe      	b.n	8006ec8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	3318      	adds	r3, #24
 8006ece:	0018      	movs	r0, r3
 8006ed0:	f7ff f934 	bl	800613c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ed4:	4b1e      	ldr	r3, [pc, #120]	; (8006f50 <xTaskRemoveFromEventList+0xa0>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d11d      	bne.n	8006f18 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	3304      	adds	r3, #4
 8006ee0:	0018      	movs	r0, r3
 8006ee2:	f7ff f92b 	bl	800613c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eea:	4b1a      	ldr	r3, [pc, #104]	; (8006f54 <xTaskRemoveFromEventList+0xa4>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d903      	bls.n	8006efa <xTaskRemoveFromEventList+0x4a>
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef6:	4b17      	ldr	r3, [pc, #92]	; (8006f54 <xTaskRemoveFromEventList+0xa4>)
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efe:	0013      	movs	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	189b      	adds	r3, r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4a14      	ldr	r2, [pc, #80]	; (8006f58 <xTaskRemoveFromEventList+0xa8>)
 8006f08:	189a      	adds	r2, r3, r2
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	0019      	movs	r1, r3
 8006f10:	0010      	movs	r0, r2
 8006f12:	f7ff f8bb 	bl	800608c <vListInsertEnd>
 8006f16:	e007      	b.n	8006f28 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	3318      	adds	r3, #24
 8006f1c:	001a      	movs	r2, r3
 8006f1e:	4b0f      	ldr	r3, [pc, #60]	; (8006f5c <xTaskRemoveFromEventList+0xac>)
 8006f20:	0011      	movs	r1, r2
 8006f22:	0018      	movs	r0, r3
 8006f24:	f7ff f8b2 	bl	800608c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f2c:	4b0c      	ldr	r3, [pc, #48]	; (8006f60 <xTaskRemoveFromEventList+0xb0>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d905      	bls.n	8006f42 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f36:	2301      	movs	r3, #1
 8006f38:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f3a:	4b0a      	ldr	r3, [pc, #40]	; (8006f64 <xTaskRemoveFromEventList+0xb4>)
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	e001      	b.n	8006f46 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8006f46:	68fb      	ldr	r3, [r7, #12]
}
 8006f48:	0018      	movs	r0, r3
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	b004      	add	sp, #16
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	20000518 	.word	0x20000518
 8006f54:	200004f8 	.word	0x200004f8
 8006f58:	200003f4 	.word	0x200003f4
 8006f5c:	200004b0 	.word	0x200004b0
 8006f60:	200003f0 	.word	0x200003f0
 8006f64:	20000504 	.word	0x20000504

08006f68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f70:	4b05      	ldr	r3, [pc, #20]	; (8006f88 <vTaskInternalSetTimeOutState+0x20>)
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f78:	4b04      	ldr	r3, [pc, #16]	; (8006f8c <vTaskInternalSetTimeOutState+0x24>)
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	605a      	str	r2, [r3, #4]
}
 8006f80:	46c0      	nop			; (mov r8, r8)
 8006f82:	46bd      	mov	sp, r7
 8006f84:	b002      	add	sp, #8
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	20000508 	.word	0x20000508
 8006f8c:	200004f4 	.word	0x200004f4

08006f90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d101      	bne.n	8006fa4 <xTaskCheckForTimeOut+0x14>
 8006fa0:	b672      	cpsid	i
 8006fa2:	e7fe      	b.n	8006fa2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <xTaskCheckForTimeOut+0x1e>
 8006faa:	b672      	cpsid	i
 8006fac:	e7fe      	b.n	8006fac <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8006fae:	f000 fb4f 	bl	8007650 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006fb2:	4b1d      	ldr	r3, [pc, #116]	; (8007028 <xTaskCheckForTimeOut+0x98>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	d102      	bne.n	8006fd0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	617b      	str	r3, [r7, #20]
 8006fce:	e024      	b.n	800701a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	4b15      	ldr	r3, [pc, #84]	; (800702c <xTaskCheckForTimeOut+0x9c>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d007      	beq.n	8006fec <xTaskCheckForTimeOut+0x5c>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d302      	bcc.n	8006fec <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	617b      	str	r3, [r7, #20]
 8006fea:	e016      	b.n	800701a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d20c      	bcs.n	8007010 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	1ad2      	subs	r2, r2, r3
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	0018      	movs	r0, r3
 8007006:	f7ff ffaf 	bl	8006f68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800700a:	2300      	movs	r3, #0
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	e004      	b.n	800701a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2200      	movs	r2, #0
 8007014:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007016:	2301      	movs	r3, #1
 8007018:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800701a:	f000 fb2b 	bl	8007674 <vPortExitCritical>

	return xReturn;
 800701e:	697b      	ldr	r3, [r7, #20]
}
 8007020:	0018      	movs	r0, r3
 8007022:	46bd      	mov	sp, r7
 8007024:	b006      	add	sp, #24
 8007026:	bd80      	pop	{r7, pc}
 8007028:	200004f4 	.word	0x200004f4
 800702c:	20000508 	.word	0x20000508

08007030 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007030:	b580      	push	{r7, lr}
 8007032:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007034:	4b02      	ldr	r3, [pc, #8]	; (8007040 <vTaskMissedYield+0x10>)
 8007036:	2201      	movs	r2, #1
 8007038:	601a      	str	r2, [r3, #0]
}
 800703a:	46c0      	nop			; (mov r8, r8)
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	20000504 	.word	0x20000504

08007044 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800704c:	f000 f84e 	bl	80070ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007050:	4b03      	ldr	r3, [pc, #12]	; (8007060 <prvIdleTask+0x1c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d9f9      	bls.n	800704c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007058:	f000 faea 	bl	8007630 <vPortYield>
		prvCheckTasksWaitingTermination();
 800705c:	e7f6      	b.n	800704c <prvIdleTask+0x8>
 800705e:	46c0      	nop			; (mov r8, r8)
 8007060:	200003f4 	.word	0x200003f4

08007064 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800706a:	2300      	movs	r3, #0
 800706c:	607b      	str	r3, [r7, #4]
 800706e:	e00c      	b.n	800708a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	0013      	movs	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	189b      	adds	r3, r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4a14      	ldr	r2, [pc, #80]	; (80070cc <prvInitialiseTaskLists+0x68>)
 800707c:	189b      	adds	r3, r3, r2
 800707e:	0018      	movs	r0, r3
 8007080:	f7fe ffdb 	bl	800603a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	3301      	adds	r3, #1
 8007088:	607b      	str	r3, [r7, #4]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b06      	cmp	r3, #6
 800708e:	d9ef      	bls.n	8007070 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007090:	4b0f      	ldr	r3, [pc, #60]	; (80070d0 <prvInitialiseTaskLists+0x6c>)
 8007092:	0018      	movs	r0, r3
 8007094:	f7fe ffd1 	bl	800603a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007098:	4b0e      	ldr	r3, [pc, #56]	; (80070d4 <prvInitialiseTaskLists+0x70>)
 800709a:	0018      	movs	r0, r3
 800709c:	f7fe ffcd 	bl	800603a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80070a0:	4b0d      	ldr	r3, [pc, #52]	; (80070d8 <prvInitialiseTaskLists+0x74>)
 80070a2:	0018      	movs	r0, r3
 80070a4:	f7fe ffc9 	bl	800603a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80070a8:	4b0c      	ldr	r3, [pc, #48]	; (80070dc <prvInitialiseTaskLists+0x78>)
 80070aa:	0018      	movs	r0, r3
 80070ac:	f7fe ffc5 	bl	800603a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80070b0:	4b0b      	ldr	r3, [pc, #44]	; (80070e0 <prvInitialiseTaskLists+0x7c>)
 80070b2:	0018      	movs	r0, r3
 80070b4:	f7fe ffc1 	bl	800603a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80070b8:	4b0a      	ldr	r3, [pc, #40]	; (80070e4 <prvInitialiseTaskLists+0x80>)
 80070ba:	4a05      	ldr	r2, [pc, #20]	; (80070d0 <prvInitialiseTaskLists+0x6c>)
 80070bc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80070be:	4b0a      	ldr	r3, [pc, #40]	; (80070e8 <prvInitialiseTaskLists+0x84>)
 80070c0:	4a04      	ldr	r2, [pc, #16]	; (80070d4 <prvInitialiseTaskLists+0x70>)
 80070c2:	601a      	str	r2, [r3, #0]
}
 80070c4:	46c0      	nop			; (mov r8, r8)
 80070c6:	46bd      	mov	sp, r7
 80070c8:	b002      	add	sp, #8
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	200003f4 	.word	0x200003f4
 80070d0:	20000480 	.word	0x20000480
 80070d4:	20000494 	.word	0x20000494
 80070d8:	200004b0 	.word	0x200004b0
 80070dc:	200004c4 	.word	0x200004c4
 80070e0:	200004dc 	.word	0x200004dc
 80070e4:	200004a8 	.word	0x200004a8
 80070e8:	200004ac 	.word	0x200004ac

080070ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070f2:	e01a      	b.n	800712a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80070f4:	f000 faac 	bl	8007650 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070f8:	4b10      	ldr	r3, [pc, #64]	; (800713c <prvCheckTasksWaitingTermination+0x50>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	3304      	adds	r3, #4
 8007104:	0018      	movs	r0, r3
 8007106:	f7ff f819 	bl	800613c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800710a:	4b0d      	ldr	r3, [pc, #52]	; (8007140 <prvCheckTasksWaitingTermination+0x54>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	1e5a      	subs	r2, r3, #1
 8007110:	4b0b      	ldr	r3, [pc, #44]	; (8007140 <prvCheckTasksWaitingTermination+0x54>)
 8007112:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007114:	4b0b      	ldr	r3, [pc, #44]	; (8007144 <prvCheckTasksWaitingTermination+0x58>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	1e5a      	subs	r2, r3, #1
 800711a:	4b0a      	ldr	r3, [pc, #40]	; (8007144 <prvCheckTasksWaitingTermination+0x58>)
 800711c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800711e:	f000 faa9 	bl	8007674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	0018      	movs	r0, r3
 8007126:	f000 f80f 	bl	8007148 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800712a:	4b06      	ldr	r3, [pc, #24]	; (8007144 <prvCheckTasksWaitingTermination+0x58>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1e0      	bne.n	80070f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007132:	46c0      	nop			; (mov r8, r8)
 8007134:	46c0      	nop			; (mov r8, r8)
 8007136:	46bd      	mov	sp, r7
 8007138:	b002      	add	sp, #8
 800713a:	bd80      	pop	{r7, pc}
 800713c:	200004c4 	.word	0x200004c4
 8007140:	200004f0 	.word	0x200004f0
 8007144:	200004d8 	.word	0x200004d8

08007148 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007154:	0018      	movs	r0, r3
 8007156:	f000 fbbf 	bl	80078d8 <vPortFree>
			vPortFree( pxTCB );
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	0018      	movs	r0, r3
 800715e:	f000 fbbb 	bl	80078d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007162:	46c0      	nop			; (mov r8, r8)
 8007164:	46bd      	mov	sp, r7
 8007166:	b002      	add	sp, #8
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007172:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <prvResetNextTaskUnblockTime+0x34>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d104      	bne.n	8007186 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800717c:	4b09      	ldr	r3, [pc, #36]	; (80071a4 <prvResetNextTaskUnblockTime+0x38>)
 800717e:	2201      	movs	r2, #1
 8007180:	4252      	negs	r2, r2
 8007182:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007184:	e008      	b.n	8007198 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007186:	4b06      	ldr	r3, [pc, #24]	; (80071a0 <prvResetNextTaskUnblockTime+0x34>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	4b03      	ldr	r3, [pc, #12]	; (80071a4 <prvResetNextTaskUnblockTime+0x38>)
 8007196:	601a      	str	r2, [r3, #0]
}
 8007198:	46c0      	nop			; (mov r8, r8)
 800719a:	46bd      	mov	sp, r7
 800719c:	b002      	add	sp, #8
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	200004a8 	.word	0x200004a8
 80071a4:	20000510 	.word	0x20000510

080071a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80071ae:	4b0a      	ldr	r3, [pc, #40]	; (80071d8 <xTaskGetSchedulerState+0x30>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d102      	bne.n	80071bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80071b6:	2301      	movs	r3, #1
 80071b8:	607b      	str	r3, [r7, #4]
 80071ba:	e008      	b.n	80071ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071bc:	4b07      	ldr	r3, [pc, #28]	; (80071dc <xTaskGetSchedulerState+0x34>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d102      	bne.n	80071ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80071c4:	2302      	movs	r3, #2
 80071c6:	607b      	str	r3, [r7, #4]
 80071c8:	e001      	b.n	80071ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80071ca:	2300      	movs	r3, #0
 80071cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80071ce:	687b      	ldr	r3, [r7, #4]
	}
 80071d0:	0018      	movs	r0, r3
 80071d2:	46bd      	mov	sp, r7
 80071d4:	b002      	add	sp, #8
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	200004fc 	.word	0x200004fc
 80071dc:	20000518 	.word	0x20000518

080071e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80071ec:	2300      	movs	r3, #0
 80071ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d051      	beq.n	800729a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071fa:	4b2a      	ldr	r3, [pc, #168]	; (80072a4 <xTaskPriorityInherit+0xc4>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	429a      	cmp	r2, r3
 8007202:	d241      	bcs.n	8007288 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	2b00      	cmp	r3, #0
 800720a:	db06      	blt.n	800721a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800720c:	4b25      	ldr	r3, [pc, #148]	; (80072a4 <xTaskPriorityInherit+0xc4>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007212:	2207      	movs	r2, #7
 8007214:	1ad2      	subs	r2, r2, r3
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	6959      	ldr	r1, [r3, #20]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007222:	0013      	movs	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	189b      	adds	r3, r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4a1f      	ldr	r2, [pc, #124]	; (80072a8 <xTaskPriorityInherit+0xc8>)
 800722c:	189b      	adds	r3, r3, r2
 800722e:	4299      	cmp	r1, r3
 8007230:	d122      	bne.n	8007278 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	3304      	adds	r3, #4
 8007236:	0018      	movs	r0, r3
 8007238:	f7fe ff80 	bl	800613c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800723c:	4b19      	ldr	r3, [pc, #100]	; (80072a4 <xTaskPriorityInherit+0xc4>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800724a:	4b18      	ldr	r3, [pc, #96]	; (80072ac <xTaskPriorityInherit+0xcc>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	429a      	cmp	r2, r3
 8007250:	d903      	bls.n	800725a <xTaskPriorityInherit+0x7a>
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007256:	4b15      	ldr	r3, [pc, #84]	; (80072ac <xTaskPriorityInherit+0xcc>)
 8007258:	601a      	str	r2, [r3, #0]
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800725e:	0013      	movs	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	189b      	adds	r3, r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4a10      	ldr	r2, [pc, #64]	; (80072a8 <xTaskPriorityInherit+0xc8>)
 8007268:	189a      	adds	r2, r3, r2
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	3304      	adds	r3, #4
 800726e:	0019      	movs	r1, r3
 8007270:	0010      	movs	r0, r2
 8007272:	f7fe ff0b 	bl	800608c <vListInsertEnd>
 8007276:	e004      	b.n	8007282 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007278:	4b0a      	ldr	r3, [pc, #40]	; (80072a4 <xTaskPriorityInherit+0xc4>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007282:	2301      	movs	r3, #1
 8007284:	60fb      	str	r3, [r7, #12]
 8007286:	e008      	b.n	800729a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800728c:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <xTaskPriorityInherit+0xc4>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007292:	429a      	cmp	r2, r3
 8007294:	d201      	bcs.n	800729a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007296:	2301      	movs	r3, #1
 8007298:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800729a:	68fb      	ldr	r3, [r7, #12]
	}
 800729c:	0018      	movs	r0, r3
 800729e:	46bd      	mov	sp, r7
 80072a0:	b004      	add	sp, #16
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	200003f0 	.word	0x200003f0
 80072a8:	200003f4 	.word	0x200003f4
 80072ac:	200004f8 	.word	0x200004f8

080072b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80072bc:	2300      	movs	r3, #0
 80072be:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d044      	beq.n	8007350 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80072c6:	4b25      	ldr	r3, [pc, #148]	; (800735c <xTaskPriorityDisinherit+0xac>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d001      	beq.n	80072d4 <xTaskPriorityDisinherit+0x24>
 80072d0:	b672      	cpsid	i
 80072d2:	e7fe      	b.n	80072d2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <xTaskPriorityDisinherit+0x30>
 80072dc:	b672      	cpsid	i
 80072de:	e7fe      	b.n	80072de <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072e4:	1e5a      	subs	r2, r3, #1
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d02c      	beq.n	8007350 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d128      	bne.n	8007350 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	3304      	adds	r3, #4
 8007302:	0018      	movs	r0, r3
 8007304:	f7fe ff1a 	bl	800613c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007314:	2207      	movs	r2, #7
 8007316:	1ad2      	subs	r2, r2, r3
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007320:	4b0f      	ldr	r3, [pc, #60]	; (8007360 <xTaskPriorityDisinherit+0xb0>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	429a      	cmp	r2, r3
 8007326:	d903      	bls.n	8007330 <xTaskPriorityDisinherit+0x80>
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800732c:	4b0c      	ldr	r3, [pc, #48]	; (8007360 <xTaskPriorityDisinherit+0xb0>)
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007334:	0013      	movs	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	189b      	adds	r3, r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4a09      	ldr	r2, [pc, #36]	; (8007364 <xTaskPriorityDisinherit+0xb4>)
 800733e:	189a      	adds	r2, r3, r2
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	3304      	adds	r3, #4
 8007344:	0019      	movs	r1, r3
 8007346:	0010      	movs	r0, r2
 8007348:	f7fe fea0 	bl	800608c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800734c:	2301      	movs	r3, #1
 800734e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007350:	68fb      	ldr	r3, [r7, #12]
	}
 8007352:	0018      	movs	r0, r3
 8007354:	46bd      	mov	sp, r7
 8007356:	b004      	add	sp, #16
 8007358:	bd80      	pop	{r7, pc}
 800735a:	46c0      	nop			; (mov r8, r8)
 800735c:	200003f0 	.word	0x200003f0
 8007360:	200004f8 	.word	0x200004f8
 8007364:	200003f4 	.word	0x200003f4

08007368 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007376:	2301      	movs	r3, #1
 8007378:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d058      	beq.n	8007432 <vTaskPriorityDisinheritAfterTimeout+0xca>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007384:	2b00      	cmp	r3, #0
 8007386:	d101      	bne.n	800738c <vTaskPriorityDisinheritAfterTimeout+0x24>
 8007388:	b672      	cpsid	i
 800738a:	e7fe      	b.n	800738a <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	429a      	cmp	r2, r3
 8007394:	d902      	bls.n	800739c <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	617b      	str	r3, [r7, #20]
 800739a:	e002      	b.n	80073a2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a0:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d042      	beq.n	8007432 <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d13d      	bne.n	8007432 <vTaskPriorityDisinheritAfterTimeout+0xca>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80073b6:	4b21      	ldr	r3, [pc, #132]	; (800743c <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d101      	bne.n	80073c4 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 80073c0:	b672      	cpsid	i
 80073c2:	e7fe      	b.n	80073c2 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c8:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	db04      	blt.n	80073e2 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	2207      	movs	r2, #7
 80073dc:	1ad2      	subs	r2, r2, r3
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	6959      	ldr	r1, [r3, #20]
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	0013      	movs	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	189b      	adds	r3, r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4a13      	ldr	r2, [pc, #76]	; (8007440 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 80073f2:	189b      	adds	r3, r3, r2
 80073f4:	4299      	cmp	r1, r3
 80073f6:	d11c      	bne.n	8007432 <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	3304      	adds	r3, #4
 80073fc:	0018      	movs	r0, r3
 80073fe:	f7fe fe9d 	bl	800613c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007406:	4b0f      	ldr	r3, [pc, #60]	; (8007444 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	429a      	cmp	r2, r3
 800740c:	d903      	bls.n	8007416 <vTaskPriorityDisinheritAfterTimeout+0xae>
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007412:	4b0c      	ldr	r3, [pc, #48]	; (8007444 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800741a:	0013      	movs	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	189b      	adds	r3, r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4a07      	ldr	r2, [pc, #28]	; (8007440 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8007424:	189a      	adds	r2, r3, r2
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	3304      	adds	r3, #4
 800742a:	0019      	movs	r1, r3
 800742c:	0010      	movs	r0, r2
 800742e:	f7fe fe2d 	bl	800608c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007432:	46c0      	nop			; (mov r8, r8)
 8007434:	46bd      	mov	sp, r7
 8007436:	b006      	add	sp, #24
 8007438:	bd80      	pop	{r7, pc}
 800743a:	46c0      	nop			; (mov r8, r8)
 800743c:	200003f0 	.word	0x200003f0
 8007440:	200003f4 	.word	0x200003f4
 8007444:	200004f8 	.word	0x200004f8

08007448 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007448:	b580      	push	{r7, lr}
 800744a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800744c:	4b06      	ldr	r3, [pc, #24]	; (8007468 <pvTaskIncrementMutexHeldCount+0x20>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d004      	beq.n	800745e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007454:	4b04      	ldr	r3, [pc, #16]	; (8007468 <pvTaskIncrementMutexHeldCount+0x20>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800745a:	3201      	adds	r2, #1
 800745c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800745e:	4b02      	ldr	r3, [pc, #8]	; (8007468 <pvTaskIncrementMutexHeldCount+0x20>)
 8007460:	681b      	ldr	r3, [r3, #0]
	}
 8007462:	0018      	movs	r0, r3
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	200003f0 	.word	0x200003f0

0800746c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007476:	4b21      	ldr	r3, [pc, #132]	; (80074fc <prvAddCurrentTaskToDelayedList+0x90>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800747c:	4b20      	ldr	r3, [pc, #128]	; (8007500 <prvAddCurrentTaskToDelayedList+0x94>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3304      	adds	r3, #4
 8007482:	0018      	movs	r0, r3
 8007484:	f7fe fe5a 	bl	800613c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3301      	adds	r3, #1
 800748c:	d10b      	bne.n	80074a6 <prvAddCurrentTaskToDelayedList+0x3a>
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d008      	beq.n	80074a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007494:	4b1a      	ldr	r3, [pc, #104]	; (8007500 <prvAddCurrentTaskToDelayedList+0x94>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	1d1a      	adds	r2, r3, #4
 800749a:	4b1a      	ldr	r3, [pc, #104]	; (8007504 <prvAddCurrentTaskToDelayedList+0x98>)
 800749c:	0011      	movs	r1, r2
 800749e:	0018      	movs	r0, r3
 80074a0:	f7fe fdf4 	bl	800608c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80074a4:	e026      	b.n	80074f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	18d3      	adds	r3, r2, r3
 80074ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80074ae:	4b14      	ldr	r3, [pc, #80]	; (8007500 <prvAddCurrentTaskToDelayedList+0x94>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d209      	bcs.n	80074d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074be:	4b12      	ldr	r3, [pc, #72]	; (8007508 <prvAddCurrentTaskToDelayedList+0x9c>)
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	4b0f      	ldr	r3, [pc, #60]	; (8007500 <prvAddCurrentTaskToDelayedList+0x94>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3304      	adds	r3, #4
 80074c8:	0019      	movs	r1, r3
 80074ca:	0010      	movs	r0, r2
 80074cc:	f7fe fe00 	bl	80060d0 <vListInsert>
}
 80074d0:	e010      	b.n	80074f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074d2:	4b0e      	ldr	r3, [pc, #56]	; (800750c <prvAddCurrentTaskToDelayedList+0xa0>)
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	4b0a      	ldr	r3, [pc, #40]	; (8007500 <prvAddCurrentTaskToDelayedList+0x94>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3304      	adds	r3, #4
 80074dc:	0019      	movs	r1, r3
 80074de:	0010      	movs	r0, r2
 80074e0:	f7fe fdf6 	bl	80060d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80074e4:	4b0a      	ldr	r3, [pc, #40]	; (8007510 <prvAddCurrentTaskToDelayedList+0xa4>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d202      	bcs.n	80074f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80074ee:	4b08      	ldr	r3, [pc, #32]	; (8007510 <prvAddCurrentTaskToDelayedList+0xa4>)
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	601a      	str	r2, [r3, #0]
}
 80074f4:	46c0      	nop			; (mov r8, r8)
 80074f6:	46bd      	mov	sp, r7
 80074f8:	b004      	add	sp, #16
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	200004f4 	.word	0x200004f4
 8007500:	200003f0 	.word	0x200003f0
 8007504:	200004dc 	.word	0x200004dc
 8007508:	200004ac 	.word	0x200004ac
 800750c:	200004a8 	.word	0x200004a8
 8007510:	20000510 	.word	0x20000510

08007514 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	3b04      	subs	r3, #4
 8007524:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2280      	movs	r2, #128	; 0x80
 800752a:	0452      	lsls	r2, r2, #17
 800752c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	3b04      	subs	r3, #4
 8007532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	3b04      	subs	r3, #4
 800753e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007540:	4a08      	ldr	r2, [pc, #32]	; (8007564 <pxPortInitialiseStack+0x50>)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	3b14      	subs	r3, #20
 800754a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	3b20      	subs	r3, #32
 8007556:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007558:	68fb      	ldr	r3, [r7, #12]
}
 800755a:	0018      	movs	r0, r3
 800755c:	46bd      	mov	sp, r7
 800755e:	b004      	add	sp, #16
 8007560:	bd80      	pop	{r7, pc}
 8007562:	46c0      	nop			; (mov r8, r8)
 8007564:	08007569 	.word	0x08007569

08007568 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800756e:	2300      	movs	r3, #0
 8007570:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007572:	4b08      	ldr	r3, [pc, #32]	; (8007594 <prvTaskExitError+0x2c>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3301      	adds	r3, #1
 8007578:	d001      	beq.n	800757e <prvTaskExitError+0x16>
 800757a:	b672      	cpsid	i
 800757c:	e7fe      	b.n	800757c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800757e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8007580:	46c0      	nop			; (mov r8, r8)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d0fc      	beq.n	8007582 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007588:	46c0      	nop			; (mov r8, r8)
 800758a:	46c0      	nop			; (mov r8, r8)
 800758c:	46bd      	mov	sp, r7
 800758e:	b002      	add	sp, #8
 8007590:	bd80      	pop	{r7, pc}
 8007592:	46c0      	nop			; (mov r8, r8)
 8007594:	2000000c 	.word	0x2000000c

08007598 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800759c:	46c0      	nop			; (mov r8, r8)
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
	...

080075b0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80075b0:	4a0b      	ldr	r2, [pc, #44]	; (80075e0 <pxCurrentTCBConst2>)
 80075b2:	6813      	ldr	r3, [r2, #0]
 80075b4:	6818      	ldr	r0, [r3, #0]
 80075b6:	3020      	adds	r0, #32
 80075b8:	f380 8809 	msr	PSP, r0
 80075bc:	2002      	movs	r0, #2
 80075be:	f380 8814 	msr	CONTROL, r0
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80075c8:	46ae      	mov	lr, r5
 80075ca:	bc08      	pop	{r3}
 80075cc:	bc04      	pop	{r2}
 80075ce:	b662      	cpsie	i
 80075d0:	4718      	bx	r3
 80075d2:	46c0      	nop			; (mov r8, r8)
 80075d4:	46c0      	nop			; (mov r8, r8)
 80075d6:	46c0      	nop			; (mov r8, r8)
 80075d8:	46c0      	nop			; (mov r8, r8)
 80075da:	46c0      	nop			; (mov r8, r8)
 80075dc:	46c0      	nop			; (mov r8, r8)
 80075de:	46c0      	nop			; (mov r8, r8)

080075e0 <pxCurrentTCBConst2>:
 80075e0:	200003f0 	.word	0x200003f0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80075e4:	46c0      	nop			; (mov r8, r8)
 80075e6:	46c0      	nop			; (mov r8, r8)

080075e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075ec:	4b0e      	ldr	r3, [pc, #56]	; (8007628 <xPortStartScheduler+0x40>)
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	4b0d      	ldr	r3, [pc, #52]	; (8007628 <xPortStartScheduler+0x40>)
 80075f2:	21ff      	movs	r1, #255	; 0xff
 80075f4:	0409      	lsls	r1, r1, #16
 80075f6:	430a      	orrs	r2, r1
 80075f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075fa:	4b0b      	ldr	r3, [pc, #44]	; (8007628 <xPortStartScheduler+0x40>)
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <xPortStartScheduler+0x40>)
 8007600:	21ff      	movs	r1, #255	; 0xff
 8007602:	0609      	lsls	r1, r1, #24
 8007604:	430a      	orrs	r2, r1
 8007606:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007608:	f000 f898 	bl	800773c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800760c:	4b07      	ldr	r3, [pc, #28]	; (800762c <xPortStartScheduler+0x44>)
 800760e:	2200      	movs	r2, #0
 8007610:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8007612:	f7ff ffcd 	bl	80075b0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007616:	f7ff fbdb 	bl	8006dd0 <vTaskSwitchContext>
	prvTaskExitError();
 800761a:	f7ff ffa5 	bl	8007568 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800761e:	2300      	movs	r3, #0
}
 8007620:	0018      	movs	r0, r3
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	46c0      	nop			; (mov r8, r8)
 8007628:	e000ed20 	.word	0xe000ed20
 800762c:	2000000c 	.word	0x2000000c

08007630 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007634:	4b05      	ldr	r3, [pc, #20]	; (800764c <vPortYield+0x1c>)
 8007636:	2280      	movs	r2, #128	; 0x80
 8007638:	0552      	lsls	r2, r2, #21
 800763a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800763c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007640:	f3bf 8f6f 	isb	sy
}
 8007644:	46c0      	nop			; (mov r8, r8)
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	46c0      	nop			; (mov r8, r8)
 800764c:	e000ed04 	.word	0xe000ed04

08007650 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8007654:	b672      	cpsid	i
	uxCriticalNesting++;
 8007656:	4b06      	ldr	r3, [pc, #24]	; (8007670 <vPortEnterCritical+0x20>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	1c5a      	adds	r2, r3, #1
 800765c:	4b04      	ldr	r3, [pc, #16]	; (8007670 <vPortEnterCritical+0x20>)
 800765e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8007660:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007664:	f3bf 8f6f 	isb	sy
}
 8007668:	46c0      	nop			; (mov r8, r8)
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	46c0      	nop			; (mov r8, r8)
 8007670:	2000000c 	.word	0x2000000c

08007674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007674:	b580      	push	{r7, lr}
 8007676:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007678:	4b09      	ldr	r3, [pc, #36]	; (80076a0 <vPortExitCritical+0x2c>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <vPortExitCritical+0x10>
 8007680:	b672      	cpsid	i
 8007682:	e7fe      	b.n	8007682 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8007684:	4b06      	ldr	r3, [pc, #24]	; (80076a0 <vPortExitCritical+0x2c>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	1e5a      	subs	r2, r3, #1
 800768a:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <vPortExitCritical+0x2c>)
 800768c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800768e:	4b04      	ldr	r3, [pc, #16]	; (80076a0 <vPortExitCritical+0x2c>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d100      	bne.n	8007698 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8007696:	b662      	cpsie	i
	}
}
 8007698:	46c0      	nop			; (mov r8, r8)
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	46c0      	nop			; (mov r8, r8)
 80076a0:	2000000c 	.word	0x2000000c

080076a4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80076a4:	f3ef 8010 	mrs	r0, PRIMASK
 80076a8:	b672      	cpsid	i
 80076aa:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80076ac:	46c0      	nop			; (mov r8, r8)
 80076ae:	0018      	movs	r0, r3

080076b0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80076b0:	f380 8810 	msr	PRIMASK, r0
 80076b4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80076b6:	46c0      	nop			; (mov r8, r8)
	...

080076c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076c0:	f3ef 8009 	mrs	r0, PSP
 80076c4:	4b0e      	ldr	r3, [pc, #56]	; (8007700 <pxCurrentTCBConst>)
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	3820      	subs	r0, #32
 80076ca:	6010      	str	r0, [r2, #0]
 80076cc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80076ce:	4644      	mov	r4, r8
 80076d0:	464d      	mov	r5, r9
 80076d2:	4656      	mov	r6, sl
 80076d4:	465f      	mov	r7, fp
 80076d6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80076d8:	b508      	push	{r3, lr}
 80076da:	b672      	cpsid	i
 80076dc:	f7ff fb78 	bl	8006dd0 <vTaskSwitchContext>
 80076e0:	b662      	cpsie	i
 80076e2:	bc0c      	pop	{r2, r3}
 80076e4:	6811      	ldr	r1, [r2, #0]
 80076e6:	6808      	ldr	r0, [r1, #0]
 80076e8:	3010      	adds	r0, #16
 80076ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80076ec:	46a0      	mov	r8, r4
 80076ee:	46a9      	mov	r9, r5
 80076f0:	46b2      	mov	sl, r6
 80076f2:	46bb      	mov	fp, r7
 80076f4:	f380 8809 	msr	PSP, r0
 80076f8:	3820      	subs	r0, #32
 80076fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80076fc:	4718      	bx	r3
 80076fe:	46c0      	nop			; (mov r8, r8)

08007700 <pxCurrentTCBConst>:
 8007700:	200003f0 	.word	0x200003f0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8007704:	46c0      	nop			; (mov r8, r8)
 8007706:	46c0      	nop			; (mov r8, r8)

08007708 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800770e:	f7ff ffc9 	bl	80076a4 <ulSetInterruptMaskFromISR>
 8007712:	0003      	movs	r3, r0
 8007714:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007716:	f7ff faab 	bl	8006c70 <xTaskIncrementTick>
 800771a:	1e03      	subs	r3, r0, #0
 800771c:	d003      	beq.n	8007726 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800771e:	4b06      	ldr	r3, [pc, #24]	; (8007738 <xPortSysTickHandler+0x30>)
 8007720:	2280      	movs	r2, #128	; 0x80
 8007722:	0552      	lsls	r2, r2, #21
 8007724:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	0018      	movs	r0, r3
 800772a:	f7ff ffc1 	bl	80076b0 <vClearInterruptMaskFromISR>
}
 800772e:	46c0      	nop			; (mov r8, r8)
 8007730:	46bd      	mov	sp, r7
 8007732:	b002      	add	sp, #8
 8007734:	bd80      	pop	{r7, pc}
 8007736:	46c0      	nop			; (mov r8, r8)
 8007738:	e000ed04 	.word	0xe000ed04

0800773c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007740:	4b0b      	ldr	r3, [pc, #44]	; (8007770 <vPortSetupTimerInterrupt+0x34>)
 8007742:	2200      	movs	r2, #0
 8007744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007746:	4b0b      	ldr	r3, [pc, #44]	; (8007774 <vPortSetupTimerInterrupt+0x38>)
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800774c:	4b0a      	ldr	r3, [pc, #40]	; (8007778 <vPortSetupTimerInterrupt+0x3c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	22fa      	movs	r2, #250	; 0xfa
 8007752:	0091      	lsls	r1, r2, #2
 8007754:	0018      	movs	r0, r3
 8007756:	f7f8 fce1 	bl	800011c <__udivsi3>
 800775a:	0003      	movs	r3, r0
 800775c:	001a      	movs	r2, r3
 800775e:	4b07      	ldr	r3, [pc, #28]	; (800777c <vPortSetupTimerInterrupt+0x40>)
 8007760:	3a01      	subs	r2, #1
 8007762:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8007764:	4b02      	ldr	r3, [pc, #8]	; (8007770 <vPortSetupTimerInterrupt+0x34>)
 8007766:	2207      	movs	r2, #7
 8007768:	601a      	str	r2, [r3, #0]
}
 800776a:	46c0      	nop			; (mov r8, r8)
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	e000e010 	.word	0xe000e010
 8007774:	e000e018 	.word	0xe000e018
 8007778:	20000000 	.word	0x20000000
 800777c:	e000e014 	.word	0xe000e014

08007780 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007788:	2300      	movs	r3, #0
 800778a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800778c:	f7ff f9d8 	bl	8006b40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007790:	4b4b      	ldr	r3, [pc, #300]	; (80078c0 <pvPortMalloc+0x140>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007798:	f000 f8ec 	bl	8007974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800779c:	4b49      	ldr	r3, [pc, #292]	; (80078c4 <pvPortMalloc+0x144>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	4013      	ands	r3, r2
 80077a4:	d000      	beq.n	80077a8 <pvPortMalloc+0x28>
 80077a6:	e07e      	b.n	80078a6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d012      	beq.n	80077d4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80077ae:	2208      	movs	r2, #8
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	189b      	adds	r3, r3, r2
 80077b4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2207      	movs	r2, #7
 80077ba:	4013      	ands	r3, r2
 80077bc:	d00a      	beq.n	80077d4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2207      	movs	r2, #7
 80077c2:	4393      	bics	r3, r2
 80077c4:	3308      	adds	r3, #8
 80077c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2207      	movs	r2, #7
 80077cc:	4013      	ands	r3, r2
 80077ce:	d001      	beq.n	80077d4 <pvPortMalloc+0x54>
 80077d0:	b672      	cpsid	i
 80077d2:	e7fe      	b.n	80077d2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d065      	beq.n	80078a6 <pvPortMalloc+0x126>
 80077da:	4b3b      	ldr	r3, [pc, #236]	; (80078c8 <pvPortMalloc+0x148>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d860      	bhi.n	80078a6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077e4:	4b39      	ldr	r3, [pc, #228]	; (80078cc <pvPortMalloc+0x14c>)
 80077e6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80077e8:	4b38      	ldr	r3, [pc, #224]	; (80078cc <pvPortMalloc+0x14c>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077ee:	e004      	b.n	80077fa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	429a      	cmp	r2, r3
 8007802:	d903      	bls.n	800780c <pvPortMalloc+0x8c>
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1f1      	bne.n	80077f0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800780c:	4b2c      	ldr	r3, [pc, #176]	; (80078c0 <pvPortMalloc+0x140>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	429a      	cmp	r2, r3
 8007814:	d047      	beq.n	80078a6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2208      	movs	r2, #8
 800781c:	189b      	adds	r3, r3, r2
 800781e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	1ad2      	subs	r2, r2, r3
 8007830:	2308      	movs	r3, #8
 8007832:	005b      	lsls	r3, r3, #1
 8007834:	429a      	cmp	r2, r3
 8007836:	d916      	bls.n	8007866 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	18d3      	adds	r3, r2, r3
 800783e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2207      	movs	r2, #7
 8007844:	4013      	ands	r3, r2
 8007846:	d001      	beq.n	800784c <pvPortMalloc+0xcc>
 8007848:	b672      	cpsid	i
 800784a:	e7fe      	b.n	800784a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	685a      	ldr	r2, [r3, #4]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	1ad2      	subs	r2, r2, r3
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	0018      	movs	r0, r3
 8007862:	f000 f8e7 	bl	8007a34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007866:	4b18      	ldr	r3, [pc, #96]	; (80078c8 <pvPortMalloc+0x148>)
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	1ad2      	subs	r2, r2, r3
 8007870:	4b15      	ldr	r3, [pc, #84]	; (80078c8 <pvPortMalloc+0x148>)
 8007872:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007874:	4b14      	ldr	r3, [pc, #80]	; (80078c8 <pvPortMalloc+0x148>)
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	4b15      	ldr	r3, [pc, #84]	; (80078d0 <pvPortMalloc+0x150>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	429a      	cmp	r2, r3
 800787e:	d203      	bcs.n	8007888 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007880:	4b11      	ldr	r3, [pc, #68]	; (80078c8 <pvPortMalloc+0x148>)
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	4b12      	ldr	r3, [pc, #72]	; (80078d0 <pvPortMalloc+0x150>)
 8007886:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	4b0d      	ldr	r3, [pc, #52]	; (80078c4 <pvPortMalloc+0x144>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	431a      	orrs	r2, r3
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	2200      	movs	r2, #0
 800789a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800789c:	4b0d      	ldr	r3, [pc, #52]	; (80078d4 <pvPortMalloc+0x154>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	1c5a      	adds	r2, r3, #1
 80078a2:	4b0c      	ldr	r3, [pc, #48]	; (80078d4 <pvPortMalloc+0x154>)
 80078a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80078a6:	f7ff f957 	bl	8006b58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2207      	movs	r2, #7
 80078ae:	4013      	ands	r3, r2
 80078b0:	d001      	beq.n	80078b6 <pvPortMalloc+0x136>
 80078b2:	b672      	cpsid	i
 80078b4:	e7fe      	b.n	80078b4 <pvPortMalloc+0x134>
	return pvReturn;
 80078b6:	68fb      	ldr	r3, [r7, #12]
}
 80078b8:	0018      	movs	r0, r3
 80078ba:	46bd      	mov	sp, r7
 80078bc:	b006      	add	sp, #24
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	20001124 	.word	0x20001124
 80078c4:	20001138 	.word	0x20001138
 80078c8:	20001128 	.word	0x20001128
 80078cc:	2000111c 	.word	0x2000111c
 80078d0:	2000112c 	.word	0x2000112c
 80078d4:	20001130 	.word	0x20001130

080078d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d03a      	beq.n	8007960 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80078ea:	2308      	movs	r3, #8
 80078ec:	425b      	negs	r3, r3
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	18d3      	adds	r3, r2, r3
 80078f2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	4b1a      	ldr	r3, [pc, #104]	; (8007968 <vPortFree+0x90>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4013      	ands	r3, r2
 8007902:	d101      	bne.n	8007908 <vPortFree+0x30>
 8007904:	b672      	cpsid	i
 8007906:	e7fe      	b.n	8007906 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <vPortFree+0x3c>
 8007910:	b672      	cpsid	i
 8007912:	e7fe      	b.n	8007912 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	4b13      	ldr	r3, [pc, #76]	; (8007968 <vPortFree+0x90>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4013      	ands	r3, r2
 800791e:	d01f      	beq.n	8007960 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d11b      	bne.n	8007960 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	4b0e      	ldr	r3, [pc, #56]	; (8007968 <vPortFree+0x90>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	43db      	mvns	r3, r3
 8007932:	401a      	ands	r2, r3
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007938:	f7ff f902 	bl	8006b40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	685a      	ldr	r2, [r3, #4]
 8007940:	4b0a      	ldr	r3, [pc, #40]	; (800796c <vPortFree+0x94>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	18d2      	adds	r2, r2, r3
 8007946:	4b09      	ldr	r3, [pc, #36]	; (800796c <vPortFree+0x94>)
 8007948:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	0018      	movs	r0, r3
 800794e:	f000 f871 	bl	8007a34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007952:	4b07      	ldr	r3, [pc, #28]	; (8007970 <vPortFree+0x98>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	4b05      	ldr	r3, [pc, #20]	; (8007970 <vPortFree+0x98>)
 800795a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800795c:	f7ff f8fc 	bl	8006b58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007960:	46c0      	nop			; (mov r8, r8)
 8007962:	46bd      	mov	sp, r7
 8007964:	b004      	add	sp, #16
 8007966:	bd80      	pop	{r7, pc}
 8007968:	20001138 	.word	0x20001138
 800796c:	20001128 	.word	0x20001128
 8007970:	20001134 	.word	0x20001134

08007974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800797a:	23c0      	movs	r3, #192	; 0xc0
 800797c:	011b      	lsls	r3, r3, #4
 800797e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007980:	4b26      	ldr	r3, [pc, #152]	; (8007a1c <prvHeapInit+0xa8>)
 8007982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2207      	movs	r2, #7
 8007988:	4013      	ands	r3, r2
 800798a:	d00c      	beq.n	80079a6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	3307      	adds	r3, #7
 8007990:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2207      	movs	r2, #7
 8007996:	4393      	bics	r3, r2
 8007998:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	1ad2      	subs	r2, r2, r3
 80079a0:	4b1e      	ldr	r3, [pc, #120]	; (8007a1c <prvHeapInit+0xa8>)
 80079a2:	18d3      	adds	r3, r2, r3
 80079a4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079aa:	4b1d      	ldr	r3, [pc, #116]	; (8007a20 <prvHeapInit+0xac>)
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079b0:	4b1b      	ldr	r3, [pc, #108]	; (8007a20 <prvHeapInit+0xac>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	18d3      	adds	r3, r2, r3
 80079bc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079be:	2208      	movs	r2, #8
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	1a9b      	subs	r3, r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2207      	movs	r2, #7
 80079ca:	4393      	bics	r3, r2
 80079cc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	4b14      	ldr	r3, [pc, #80]	; (8007a24 <prvHeapInit+0xb0>)
 80079d2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80079d4:	4b13      	ldr	r3, [pc, #76]	; (8007a24 <prvHeapInit+0xb0>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2200      	movs	r2, #0
 80079da:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079dc:	4b11      	ldr	r3, [pc, #68]	; (8007a24 <prvHeapInit+0xb0>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2200      	movs	r2, #0
 80079e2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	1ad2      	subs	r2, r2, r3
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80079f2:	4b0c      	ldr	r3, [pc, #48]	; (8007a24 <prvHeapInit+0xb0>)
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	4b0a      	ldr	r3, [pc, #40]	; (8007a28 <prvHeapInit+0xb4>)
 8007a00:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	685a      	ldr	r2, [r3, #4]
 8007a06:	4b09      	ldr	r3, [pc, #36]	; (8007a2c <prvHeapInit+0xb8>)
 8007a08:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a0a:	4b09      	ldr	r3, [pc, #36]	; (8007a30 <prvHeapInit+0xbc>)
 8007a0c:	2280      	movs	r2, #128	; 0x80
 8007a0e:	0612      	lsls	r2, r2, #24
 8007a10:	601a      	str	r2, [r3, #0]
}
 8007a12:	46c0      	nop			; (mov r8, r8)
 8007a14:	46bd      	mov	sp, r7
 8007a16:	b004      	add	sp, #16
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	46c0      	nop			; (mov r8, r8)
 8007a1c:	2000051c 	.word	0x2000051c
 8007a20:	2000111c 	.word	0x2000111c
 8007a24:	20001124 	.word	0x20001124
 8007a28:	2000112c 	.word	0x2000112c
 8007a2c:	20001128 	.word	0x20001128
 8007a30:	20001138 	.word	0x20001138

08007a34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a3c:	4b27      	ldr	r3, [pc, #156]	; (8007adc <prvInsertBlockIntoFreeList+0xa8>)
 8007a3e:	60fb      	str	r3, [r7, #12]
 8007a40:	e002      	b.n	8007a48 <prvInsertBlockIntoFreeList+0x14>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	60fb      	str	r3, [r7, #12]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d8f7      	bhi.n	8007a42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	18d3      	adds	r3, r2, r3
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d108      	bne.n	8007a76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	18d2      	adds	r2, r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	18d2      	adds	r2, r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d118      	bne.n	8007abc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	4b14      	ldr	r3, [pc, #80]	; (8007ae0 <prvInsertBlockIntoFreeList+0xac>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d00d      	beq.n	8007ab2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685a      	ldr	r2, [r3, #4]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	18d2      	adds	r2, r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	e008      	b.n	8007ac4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ab2:	4b0b      	ldr	r3, [pc, #44]	; (8007ae0 <prvInsertBlockIntoFreeList+0xac>)
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	601a      	str	r2, [r3, #0]
 8007aba:	e003      	b.n	8007ac4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d002      	beq.n	8007ad2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ad2:	46c0      	nop			; (mov r8, r8)
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	b004      	add	sp, #16
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	46c0      	nop			; (mov r8, r8)
 8007adc:	2000111c 	.word	0x2000111c
 8007ae0:	20001124 	.word	0x20001124

08007ae4 <std>:
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	b510      	push	{r4, lr}
 8007ae8:	0004      	movs	r4, r0
 8007aea:	6003      	str	r3, [r0, #0]
 8007aec:	6043      	str	r3, [r0, #4]
 8007aee:	6083      	str	r3, [r0, #8]
 8007af0:	8181      	strh	r1, [r0, #12]
 8007af2:	6643      	str	r3, [r0, #100]	; 0x64
 8007af4:	0019      	movs	r1, r3
 8007af6:	81c2      	strh	r2, [r0, #14]
 8007af8:	6103      	str	r3, [r0, #16]
 8007afa:	6143      	str	r3, [r0, #20]
 8007afc:	6183      	str	r3, [r0, #24]
 8007afe:	2208      	movs	r2, #8
 8007b00:	305c      	adds	r0, #92	; 0x5c
 8007b02:	f000 f8fd 	bl	8007d00 <memset>
 8007b06:	4b05      	ldr	r3, [pc, #20]	; (8007b1c <std+0x38>)
 8007b08:	6224      	str	r4, [r4, #32]
 8007b0a:	6263      	str	r3, [r4, #36]	; 0x24
 8007b0c:	4b04      	ldr	r3, [pc, #16]	; (8007b20 <std+0x3c>)
 8007b0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b10:	4b04      	ldr	r3, [pc, #16]	; (8007b24 <std+0x40>)
 8007b12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b14:	4b04      	ldr	r3, [pc, #16]	; (8007b28 <std+0x44>)
 8007b16:	6323      	str	r3, [r4, #48]	; 0x30
 8007b18:	bd10      	pop	{r4, pc}
 8007b1a:	46c0      	nop			; (mov r8, r8)
 8007b1c:	08007c69 	.word	0x08007c69
 8007b20:	08007c91 	.word	0x08007c91
 8007b24:	08007cc9 	.word	0x08007cc9
 8007b28:	08007cf5 	.word	0x08007cf5

08007b2c <stdio_exit_handler>:
 8007b2c:	b510      	push	{r4, lr}
 8007b2e:	4a03      	ldr	r2, [pc, #12]	; (8007b3c <stdio_exit_handler+0x10>)
 8007b30:	4903      	ldr	r1, [pc, #12]	; (8007b40 <stdio_exit_handler+0x14>)
 8007b32:	4804      	ldr	r0, [pc, #16]	; (8007b44 <stdio_exit_handler+0x18>)
 8007b34:	f000 f86c 	bl	8007c10 <_fwalk_sglue>
 8007b38:	bd10      	pop	{r4, pc}
 8007b3a:	46c0      	nop			; (mov r8, r8)
 8007b3c:	20000010 	.word	0x20000010
 8007b40:	080086b1 	.word	0x080086b1
 8007b44:	2000001c 	.word	0x2000001c

08007b48 <cleanup_stdio>:
 8007b48:	6841      	ldr	r1, [r0, #4]
 8007b4a:	4b0b      	ldr	r3, [pc, #44]	; (8007b78 <cleanup_stdio+0x30>)
 8007b4c:	b510      	push	{r4, lr}
 8007b4e:	0004      	movs	r4, r0
 8007b50:	4299      	cmp	r1, r3
 8007b52:	d001      	beq.n	8007b58 <cleanup_stdio+0x10>
 8007b54:	f000 fdac 	bl	80086b0 <_fflush_r>
 8007b58:	68a1      	ldr	r1, [r4, #8]
 8007b5a:	4b08      	ldr	r3, [pc, #32]	; (8007b7c <cleanup_stdio+0x34>)
 8007b5c:	4299      	cmp	r1, r3
 8007b5e:	d002      	beq.n	8007b66 <cleanup_stdio+0x1e>
 8007b60:	0020      	movs	r0, r4
 8007b62:	f000 fda5 	bl	80086b0 <_fflush_r>
 8007b66:	68e1      	ldr	r1, [r4, #12]
 8007b68:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <cleanup_stdio+0x38>)
 8007b6a:	4299      	cmp	r1, r3
 8007b6c:	d002      	beq.n	8007b74 <cleanup_stdio+0x2c>
 8007b6e:	0020      	movs	r0, r4
 8007b70:	f000 fd9e 	bl	80086b0 <_fflush_r>
 8007b74:	bd10      	pop	{r4, pc}
 8007b76:	46c0      	nop			; (mov r8, r8)
 8007b78:	2000113c 	.word	0x2000113c
 8007b7c:	200011a4 	.word	0x200011a4
 8007b80:	2000120c 	.word	0x2000120c

08007b84 <global_stdio_init.part.0>:
 8007b84:	b510      	push	{r4, lr}
 8007b86:	4b09      	ldr	r3, [pc, #36]	; (8007bac <global_stdio_init.part.0+0x28>)
 8007b88:	4a09      	ldr	r2, [pc, #36]	; (8007bb0 <global_stdio_init.part.0+0x2c>)
 8007b8a:	2104      	movs	r1, #4
 8007b8c:	601a      	str	r2, [r3, #0]
 8007b8e:	4809      	ldr	r0, [pc, #36]	; (8007bb4 <global_stdio_init.part.0+0x30>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	f7ff ffa7 	bl	8007ae4 <std>
 8007b96:	2201      	movs	r2, #1
 8007b98:	2109      	movs	r1, #9
 8007b9a:	4807      	ldr	r0, [pc, #28]	; (8007bb8 <global_stdio_init.part.0+0x34>)
 8007b9c:	f7ff ffa2 	bl	8007ae4 <std>
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	2112      	movs	r1, #18
 8007ba4:	4805      	ldr	r0, [pc, #20]	; (8007bbc <global_stdio_init.part.0+0x38>)
 8007ba6:	f7ff ff9d 	bl	8007ae4 <std>
 8007baa:	bd10      	pop	{r4, pc}
 8007bac:	20001274 	.word	0x20001274
 8007bb0:	08007b2d 	.word	0x08007b2d
 8007bb4:	2000113c 	.word	0x2000113c
 8007bb8:	200011a4 	.word	0x200011a4
 8007bbc:	2000120c 	.word	0x2000120c

08007bc0 <__sfp_lock_acquire>:
 8007bc0:	b510      	push	{r4, lr}
 8007bc2:	4802      	ldr	r0, [pc, #8]	; (8007bcc <__sfp_lock_acquire+0xc>)
 8007bc4:	f000 f91c 	bl	8007e00 <__retarget_lock_acquire_recursive>
 8007bc8:	bd10      	pop	{r4, pc}
 8007bca:	46c0      	nop			; (mov r8, r8)
 8007bcc:	2000127d 	.word	0x2000127d

08007bd0 <__sfp_lock_release>:
 8007bd0:	b510      	push	{r4, lr}
 8007bd2:	4802      	ldr	r0, [pc, #8]	; (8007bdc <__sfp_lock_release+0xc>)
 8007bd4:	f000 f915 	bl	8007e02 <__retarget_lock_release_recursive>
 8007bd8:	bd10      	pop	{r4, pc}
 8007bda:	46c0      	nop			; (mov r8, r8)
 8007bdc:	2000127d 	.word	0x2000127d

08007be0 <__sinit>:
 8007be0:	b510      	push	{r4, lr}
 8007be2:	0004      	movs	r4, r0
 8007be4:	f7ff ffec 	bl	8007bc0 <__sfp_lock_acquire>
 8007be8:	6a23      	ldr	r3, [r4, #32]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d002      	beq.n	8007bf4 <__sinit+0x14>
 8007bee:	f7ff ffef 	bl	8007bd0 <__sfp_lock_release>
 8007bf2:	bd10      	pop	{r4, pc}
 8007bf4:	4b04      	ldr	r3, [pc, #16]	; (8007c08 <__sinit+0x28>)
 8007bf6:	6223      	str	r3, [r4, #32]
 8007bf8:	4b04      	ldr	r3, [pc, #16]	; (8007c0c <__sinit+0x2c>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1f6      	bne.n	8007bee <__sinit+0xe>
 8007c00:	f7ff ffc0 	bl	8007b84 <global_stdio_init.part.0>
 8007c04:	e7f3      	b.n	8007bee <__sinit+0xe>
 8007c06:	46c0      	nop			; (mov r8, r8)
 8007c08:	08007b49 	.word	0x08007b49
 8007c0c:	20001274 	.word	0x20001274

08007c10 <_fwalk_sglue>:
 8007c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c12:	0014      	movs	r4, r2
 8007c14:	2600      	movs	r6, #0
 8007c16:	9000      	str	r0, [sp, #0]
 8007c18:	9101      	str	r1, [sp, #4]
 8007c1a:	68a5      	ldr	r5, [r4, #8]
 8007c1c:	6867      	ldr	r7, [r4, #4]
 8007c1e:	3f01      	subs	r7, #1
 8007c20:	d504      	bpl.n	8007c2c <_fwalk_sglue+0x1c>
 8007c22:	6824      	ldr	r4, [r4, #0]
 8007c24:	2c00      	cmp	r4, #0
 8007c26:	d1f8      	bne.n	8007c1a <_fwalk_sglue+0xa>
 8007c28:	0030      	movs	r0, r6
 8007c2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c2c:	89ab      	ldrh	r3, [r5, #12]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d908      	bls.n	8007c44 <_fwalk_sglue+0x34>
 8007c32:	220e      	movs	r2, #14
 8007c34:	5eab      	ldrsh	r3, [r5, r2]
 8007c36:	3301      	adds	r3, #1
 8007c38:	d004      	beq.n	8007c44 <_fwalk_sglue+0x34>
 8007c3a:	0029      	movs	r1, r5
 8007c3c:	9800      	ldr	r0, [sp, #0]
 8007c3e:	9b01      	ldr	r3, [sp, #4]
 8007c40:	4798      	blx	r3
 8007c42:	4306      	orrs	r6, r0
 8007c44:	3568      	adds	r5, #104	; 0x68
 8007c46:	e7ea      	b.n	8007c1e <_fwalk_sglue+0xe>

08007c48 <iprintf>:
 8007c48:	b40f      	push	{r0, r1, r2, r3}
 8007c4a:	b507      	push	{r0, r1, r2, lr}
 8007c4c:	4905      	ldr	r1, [pc, #20]	; (8007c64 <iprintf+0x1c>)
 8007c4e:	ab04      	add	r3, sp, #16
 8007c50:	6808      	ldr	r0, [r1, #0]
 8007c52:	cb04      	ldmia	r3!, {r2}
 8007c54:	6881      	ldr	r1, [r0, #8]
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	f000 fa04 	bl	8008064 <_vfiprintf_r>
 8007c5c:	b003      	add	sp, #12
 8007c5e:	bc08      	pop	{r3}
 8007c60:	b004      	add	sp, #16
 8007c62:	4718      	bx	r3
 8007c64:	20000068 	.word	0x20000068

08007c68 <__sread>:
 8007c68:	b570      	push	{r4, r5, r6, lr}
 8007c6a:	000c      	movs	r4, r1
 8007c6c:	250e      	movs	r5, #14
 8007c6e:	5f49      	ldrsh	r1, [r1, r5]
 8007c70:	f000 f874 	bl	8007d5c <_read_r>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	db03      	blt.n	8007c80 <__sread+0x18>
 8007c78:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007c7a:	181b      	adds	r3, r3, r0
 8007c7c:	6563      	str	r3, [r4, #84]	; 0x54
 8007c7e:	bd70      	pop	{r4, r5, r6, pc}
 8007c80:	89a3      	ldrh	r3, [r4, #12]
 8007c82:	4a02      	ldr	r2, [pc, #8]	; (8007c8c <__sread+0x24>)
 8007c84:	4013      	ands	r3, r2
 8007c86:	81a3      	strh	r3, [r4, #12]
 8007c88:	e7f9      	b.n	8007c7e <__sread+0x16>
 8007c8a:	46c0      	nop			; (mov r8, r8)
 8007c8c:	ffffefff 	.word	0xffffefff

08007c90 <__swrite>:
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c92:	001f      	movs	r7, r3
 8007c94:	898b      	ldrh	r3, [r1, #12]
 8007c96:	0005      	movs	r5, r0
 8007c98:	000c      	movs	r4, r1
 8007c9a:	0016      	movs	r6, r2
 8007c9c:	05db      	lsls	r3, r3, #23
 8007c9e:	d505      	bpl.n	8007cac <__swrite+0x1c>
 8007ca0:	230e      	movs	r3, #14
 8007ca2:	5ec9      	ldrsh	r1, [r1, r3]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	f000 f844 	bl	8007d34 <_lseek_r>
 8007cac:	89a3      	ldrh	r3, [r4, #12]
 8007cae:	4a05      	ldr	r2, [pc, #20]	; (8007cc4 <__swrite+0x34>)
 8007cb0:	0028      	movs	r0, r5
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	81a3      	strh	r3, [r4, #12]
 8007cb6:	0032      	movs	r2, r6
 8007cb8:	230e      	movs	r3, #14
 8007cba:	5ee1      	ldrsh	r1, [r4, r3]
 8007cbc:	003b      	movs	r3, r7
 8007cbe:	f000 f861 	bl	8007d84 <_write_r>
 8007cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cc4:	ffffefff 	.word	0xffffefff

08007cc8 <__sseek>:
 8007cc8:	b570      	push	{r4, r5, r6, lr}
 8007cca:	000c      	movs	r4, r1
 8007ccc:	250e      	movs	r5, #14
 8007cce:	5f49      	ldrsh	r1, [r1, r5]
 8007cd0:	f000 f830 	bl	8007d34 <_lseek_r>
 8007cd4:	89a3      	ldrh	r3, [r4, #12]
 8007cd6:	1c42      	adds	r2, r0, #1
 8007cd8:	d103      	bne.n	8007ce2 <__sseek+0x1a>
 8007cda:	4a05      	ldr	r2, [pc, #20]	; (8007cf0 <__sseek+0x28>)
 8007cdc:	4013      	ands	r3, r2
 8007cde:	81a3      	strh	r3, [r4, #12]
 8007ce0:	bd70      	pop	{r4, r5, r6, pc}
 8007ce2:	2280      	movs	r2, #128	; 0x80
 8007ce4:	0152      	lsls	r2, r2, #5
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	81a3      	strh	r3, [r4, #12]
 8007cea:	6560      	str	r0, [r4, #84]	; 0x54
 8007cec:	e7f8      	b.n	8007ce0 <__sseek+0x18>
 8007cee:	46c0      	nop			; (mov r8, r8)
 8007cf0:	ffffefff 	.word	0xffffefff

08007cf4 <__sclose>:
 8007cf4:	b510      	push	{r4, lr}
 8007cf6:	230e      	movs	r3, #14
 8007cf8:	5ec9      	ldrsh	r1, [r1, r3]
 8007cfa:	f000 f809 	bl	8007d10 <_close_r>
 8007cfe:	bd10      	pop	{r4, pc}

08007d00 <memset>:
 8007d00:	0003      	movs	r3, r0
 8007d02:	1882      	adds	r2, r0, r2
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d100      	bne.n	8007d0a <memset+0xa>
 8007d08:	4770      	bx	lr
 8007d0a:	7019      	strb	r1, [r3, #0]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	e7f9      	b.n	8007d04 <memset+0x4>

08007d10 <_close_r>:
 8007d10:	2300      	movs	r3, #0
 8007d12:	b570      	push	{r4, r5, r6, lr}
 8007d14:	4d06      	ldr	r5, [pc, #24]	; (8007d30 <_close_r+0x20>)
 8007d16:	0004      	movs	r4, r0
 8007d18:	0008      	movs	r0, r1
 8007d1a:	602b      	str	r3, [r5, #0]
 8007d1c:	f7f9 fcd9 	bl	80016d2 <_close>
 8007d20:	1c43      	adds	r3, r0, #1
 8007d22:	d103      	bne.n	8007d2c <_close_r+0x1c>
 8007d24:	682b      	ldr	r3, [r5, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d000      	beq.n	8007d2c <_close_r+0x1c>
 8007d2a:	6023      	str	r3, [r4, #0]
 8007d2c:	bd70      	pop	{r4, r5, r6, pc}
 8007d2e:	46c0      	nop			; (mov r8, r8)
 8007d30:	20001278 	.word	0x20001278

08007d34 <_lseek_r>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	0004      	movs	r4, r0
 8007d38:	0008      	movs	r0, r1
 8007d3a:	0011      	movs	r1, r2
 8007d3c:	001a      	movs	r2, r3
 8007d3e:	2300      	movs	r3, #0
 8007d40:	4d05      	ldr	r5, [pc, #20]	; (8007d58 <_lseek_r+0x24>)
 8007d42:	602b      	str	r3, [r5, #0]
 8007d44:	f7f9 fce6 	bl	8001714 <_lseek>
 8007d48:	1c43      	adds	r3, r0, #1
 8007d4a:	d103      	bne.n	8007d54 <_lseek_r+0x20>
 8007d4c:	682b      	ldr	r3, [r5, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d000      	beq.n	8007d54 <_lseek_r+0x20>
 8007d52:	6023      	str	r3, [r4, #0]
 8007d54:	bd70      	pop	{r4, r5, r6, pc}
 8007d56:	46c0      	nop			; (mov r8, r8)
 8007d58:	20001278 	.word	0x20001278

08007d5c <_read_r>:
 8007d5c:	b570      	push	{r4, r5, r6, lr}
 8007d5e:	0004      	movs	r4, r0
 8007d60:	0008      	movs	r0, r1
 8007d62:	0011      	movs	r1, r2
 8007d64:	001a      	movs	r2, r3
 8007d66:	2300      	movs	r3, #0
 8007d68:	4d05      	ldr	r5, [pc, #20]	; (8007d80 <_read_r+0x24>)
 8007d6a:	602b      	str	r3, [r5, #0]
 8007d6c:	f7f9 fc78 	bl	8001660 <_read>
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d103      	bne.n	8007d7c <_read_r+0x20>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d000      	beq.n	8007d7c <_read_r+0x20>
 8007d7a:	6023      	str	r3, [r4, #0]
 8007d7c:	bd70      	pop	{r4, r5, r6, pc}
 8007d7e:	46c0      	nop			; (mov r8, r8)
 8007d80:	20001278 	.word	0x20001278

08007d84 <_write_r>:
 8007d84:	b570      	push	{r4, r5, r6, lr}
 8007d86:	0004      	movs	r4, r0
 8007d88:	0008      	movs	r0, r1
 8007d8a:	0011      	movs	r1, r2
 8007d8c:	001a      	movs	r2, r3
 8007d8e:	2300      	movs	r3, #0
 8007d90:	4d05      	ldr	r5, [pc, #20]	; (8007da8 <_write_r+0x24>)
 8007d92:	602b      	str	r3, [r5, #0]
 8007d94:	f7f9 fc81 	bl	800169a <_write>
 8007d98:	1c43      	adds	r3, r0, #1
 8007d9a:	d103      	bne.n	8007da4 <_write_r+0x20>
 8007d9c:	682b      	ldr	r3, [r5, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d000      	beq.n	8007da4 <_write_r+0x20>
 8007da2:	6023      	str	r3, [r4, #0]
 8007da4:	bd70      	pop	{r4, r5, r6, pc}
 8007da6:	46c0      	nop			; (mov r8, r8)
 8007da8:	20001278 	.word	0x20001278

08007dac <__errno>:
 8007dac:	4b01      	ldr	r3, [pc, #4]	; (8007db4 <__errno+0x8>)
 8007dae:	6818      	ldr	r0, [r3, #0]
 8007db0:	4770      	bx	lr
 8007db2:	46c0      	nop			; (mov r8, r8)
 8007db4:	20000068 	.word	0x20000068

08007db8 <__libc_init_array>:
 8007db8:	b570      	push	{r4, r5, r6, lr}
 8007dba:	2600      	movs	r6, #0
 8007dbc:	4c0c      	ldr	r4, [pc, #48]	; (8007df0 <__libc_init_array+0x38>)
 8007dbe:	4d0d      	ldr	r5, [pc, #52]	; (8007df4 <__libc_init_array+0x3c>)
 8007dc0:	1b64      	subs	r4, r4, r5
 8007dc2:	10a4      	asrs	r4, r4, #2
 8007dc4:	42a6      	cmp	r6, r4
 8007dc6:	d109      	bne.n	8007ddc <__libc_init_array+0x24>
 8007dc8:	2600      	movs	r6, #0
 8007dca:	f000 fdeb 	bl	80089a4 <_init>
 8007dce:	4c0a      	ldr	r4, [pc, #40]	; (8007df8 <__libc_init_array+0x40>)
 8007dd0:	4d0a      	ldr	r5, [pc, #40]	; (8007dfc <__libc_init_array+0x44>)
 8007dd2:	1b64      	subs	r4, r4, r5
 8007dd4:	10a4      	asrs	r4, r4, #2
 8007dd6:	42a6      	cmp	r6, r4
 8007dd8:	d105      	bne.n	8007de6 <__libc_init_array+0x2e>
 8007dda:	bd70      	pop	{r4, r5, r6, pc}
 8007ddc:	00b3      	lsls	r3, r6, #2
 8007dde:	58eb      	ldr	r3, [r5, r3]
 8007de0:	4798      	blx	r3
 8007de2:	3601      	adds	r6, #1
 8007de4:	e7ee      	b.n	8007dc4 <__libc_init_array+0xc>
 8007de6:	00b3      	lsls	r3, r6, #2
 8007de8:	58eb      	ldr	r3, [r5, r3]
 8007dea:	4798      	blx	r3
 8007dec:	3601      	adds	r6, #1
 8007dee:	e7f2      	b.n	8007dd6 <__libc_init_array+0x1e>
 8007df0:	08008cdc 	.word	0x08008cdc
 8007df4:	08008cdc 	.word	0x08008cdc
 8007df8:	08008ce0 	.word	0x08008ce0
 8007dfc:	08008cdc 	.word	0x08008cdc

08007e00 <__retarget_lock_acquire_recursive>:
 8007e00:	4770      	bx	lr

08007e02 <__retarget_lock_release_recursive>:
 8007e02:	4770      	bx	lr

08007e04 <memcpy>:
 8007e04:	2300      	movs	r3, #0
 8007e06:	b510      	push	{r4, lr}
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d100      	bne.n	8007e0e <memcpy+0xa>
 8007e0c:	bd10      	pop	{r4, pc}
 8007e0e:	5ccc      	ldrb	r4, [r1, r3]
 8007e10:	54c4      	strb	r4, [r0, r3]
 8007e12:	3301      	adds	r3, #1
 8007e14:	e7f8      	b.n	8007e08 <memcpy+0x4>
	...

08007e18 <_free_r>:
 8007e18:	b570      	push	{r4, r5, r6, lr}
 8007e1a:	0005      	movs	r5, r0
 8007e1c:	2900      	cmp	r1, #0
 8007e1e:	d010      	beq.n	8007e42 <_free_r+0x2a>
 8007e20:	1f0c      	subs	r4, r1, #4
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	da00      	bge.n	8007e2a <_free_r+0x12>
 8007e28:	18e4      	adds	r4, r4, r3
 8007e2a:	0028      	movs	r0, r5
 8007e2c:	f000 f8e2 	bl	8007ff4 <__malloc_lock>
 8007e30:	4a1d      	ldr	r2, [pc, #116]	; (8007ea8 <_free_r+0x90>)
 8007e32:	6813      	ldr	r3, [r2, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d105      	bne.n	8007e44 <_free_r+0x2c>
 8007e38:	6063      	str	r3, [r4, #4]
 8007e3a:	6014      	str	r4, [r2, #0]
 8007e3c:	0028      	movs	r0, r5
 8007e3e:	f000 f8e1 	bl	8008004 <__malloc_unlock>
 8007e42:	bd70      	pop	{r4, r5, r6, pc}
 8007e44:	42a3      	cmp	r3, r4
 8007e46:	d908      	bls.n	8007e5a <_free_r+0x42>
 8007e48:	6820      	ldr	r0, [r4, #0]
 8007e4a:	1821      	adds	r1, r4, r0
 8007e4c:	428b      	cmp	r3, r1
 8007e4e:	d1f3      	bne.n	8007e38 <_free_r+0x20>
 8007e50:	6819      	ldr	r1, [r3, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	1809      	adds	r1, r1, r0
 8007e56:	6021      	str	r1, [r4, #0]
 8007e58:	e7ee      	b.n	8007e38 <_free_r+0x20>
 8007e5a:	001a      	movs	r2, r3
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <_free_r+0x4e>
 8007e62:	42a3      	cmp	r3, r4
 8007e64:	d9f9      	bls.n	8007e5a <_free_r+0x42>
 8007e66:	6811      	ldr	r1, [r2, #0]
 8007e68:	1850      	adds	r0, r2, r1
 8007e6a:	42a0      	cmp	r0, r4
 8007e6c:	d10b      	bne.n	8007e86 <_free_r+0x6e>
 8007e6e:	6820      	ldr	r0, [r4, #0]
 8007e70:	1809      	adds	r1, r1, r0
 8007e72:	1850      	adds	r0, r2, r1
 8007e74:	6011      	str	r1, [r2, #0]
 8007e76:	4283      	cmp	r3, r0
 8007e78:	d1e0      	bne.n	8007e3c <_free_r+0x24>
 8007e7a:	6818      	ldr	r0, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	1841      	adds	r1, r0, r1
 8007e80:	6011      	str	r1, [r2, #0]
 8007e82:	6053      	str	r3, [r2, #4]
 8007e84:	e7da      	b.n	8007e3c <_free_r+0x24>
 8007e86:	42a0      	cmp	r0, r4
 8007e88:	d902      	bls.n	8007e90 <_free_r+0x78>
 8007e8a:	230c      	movs	r3, #12
 8007e8c:	602b      	str	r3, [r5, #0]
 8007e8e:	e7d5      	b.n	8007e3c <_free_r+0x24>
 8007e90:	6820      	ldr	r0, [r4, #0]
 8007e92:	1821      	adds	r1, r4, r0
 8007e94:	428b      	cmp	r3, r1
 8007e96:	d103      	bne.n	8007ea0 <_free_r+0x88>
 8007e98:	6819      	ldr	r1, [r3, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	1809      	adds	r1, r1, r0
 8007e9e:	6021      	str	r1, [r4, #0]
 8007ea0:	6063      	str	r3, [r4, #4]
 8007ea2:	6054      	str	r4, [r2, #4]
 8007ea4:	e7ca      	b.n	8007e3c <_free_r+0x24>
 8007ea6:	46c0      	nop			; (mov r8, r8)
 8007ea8:	20001280 	.word	0x20001280

08007eac <sbrk_aligned>:
 8007eac:	b570      	push	{r4, r5, r6, lr}
 8007eae:	4e0f      	ldr	r6, [pc, #60]	; (8007eec <sbrk_aligned+0x40>)
 8007eb0:	000d      	movs	r5, r1
 8007eb2:	6831      	ldr	r1, [r6, #0]
 8007eb4:	0004      	movs	r4, r0
 8007eb6:	2900      	cmp	r1, #0
 8007eb8:	d102      	bne.n	8007ec0 <sbrk_aligned+0x14>
 8007eba:	f000 fccb 	bl	8008854 <_sbrk_r>
 8007ebe:	6030      	str	r0, [r6, #0]
 8007ec0:	0029      	movs	r1, r5
 8007ec2:	0020      	movs	r0, r4
 8007ec4:	f000 fcc6 	bl	8008854 <_sbrk_r>
 8007ec8:	1c43      	adds	r3, r0, #1
 8007eca:	d00a      	beq.n	8007ee2 <sbrk_aligned+0x36>
 8007ecc:	2303      	movs	r3, #3
 8007ece:	1cc5      	adds	r5, r0, #3
 8007ed0:	439d      	bics	r5, r3
 8007ed2:	42a8      	cmp	r0, r5
 8007ed4:	d007      	beq.n	8007ee6 <sbrk_aligned+0x3a>
 8007ed6:	1a29      	subs	r1, r5, r0
 8007ed8:	0020      	movs	r0, r4
 8007eda:	f000 fcbb 	bl	8008854 <_sbrk_r>
 8007ede:	3001      	adds	r0, #1
 8007ee0:	d101      	bne.n	8007ee6 <sbrk_aligned+0x3a>
 8007ee2:	2501      	movs	r5, #1
 8007ee4:	426d      	negs	r5, r5
 8007ee6:	0028      	movs	r0, r5
 8007ee8:	bd70      	pop	{r4, r5, r6, pc}
 8007eea:	46c0      	nop			; (mov r8, r8)
 8007eec:	20001284 	.word	0x20001284

08007ef0 <_malloc_r>:
 8007ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ef2:	2203      	movs	r2, #3
 8007ef4:	1ccb      	adds	r3, r1, #3
 8007ef6:	4393      	bics	r3, r2
 8007ef8:	3308      	adds	r3, #8
 8007efa:	0006      	movs	r6, r0
 8007efc:	001f      	movs	r7, r3
 8007efe:	2b0c      	cmp	r3, #12
 8007f00:	d238      	bcs.n	8007f74 <_malloc_r+0x84>
 8007f02:	270c      	movs	r7, #12
 8007f04:	42b9      	cmp	r1, r7
 8007f06:	d837      	bhi.n	8007f78 <_malloc_r+0x88>
 8007f08:	0030      	movs	r0, r6
 8007f0a:	f000 f873 	bl	8007ff4 <__malloc_lock>
 8007f0e:	4b38      	ldr	r3, [pc, #224]	; (8007ff0 <_malloc_r+0x100>)
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	001c      	movs	r4, r3
 8007f16:	2c00      	cmp	r4, #0
 8007f18:	d133      	bne.n	8007f82 <_malloc_r+0x92>
 8007f1a:	0039      	movs	r1, r7
 8007f1c:	0030      	movs	r0, r6
 8007f1e:	f7ff ffc5 	bl	8007eac <sbrk_aligned>
 8007f22:	0004      	movs	r4, r0
 8007f24:	1c43      	adds	r3, r0, #1
 8007f26:	d15e      	bne.n	8007fe6 <_malloc_r+0xf6>
 8007f28:	9b00      	ldr	r3, [sp, #0]
 8007f2a:	681c      	ldr	r4, [r3, #0]
 8007f2c:	0025      	movs	r5, r4
 8007f2e:	2d00      	cmp	r5, #0
 8007f30:	d14e      	bne.n	8007fd0 <_malloc_r+0xe0>
 8007f32:	2c00      	cmp	r4, #0
 8007f34:	d051      	beq.n	8007fda <_malloc_r+0xea>
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	0029      	movs	r1, r5
 8007f3a:	18e3      	adds	r3, r4, r3
 8007f3c:	0030      	movs	r0, r6
 8007f3e:	9301      	str	r3, [sp, #4]
 8007f40:	f000 fc88 	bl	8008854 <_sbrk_r>
 8007f44:	9b01      	ldr	r3, [sp, #4]
 8007f46:	4283      	cmp	r3, r0
 8007f48:	d147      	bne.n	8007fda <_malloc_r+0xea>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	0030      	movs	r0, r6
 8007f4e:	1aff      	subs	r7, r7, r3
 8007f50:	0039      	movs	r1, r7
 8007f52:	f7ff ffab 	bl	8007eac <sbrk_aligned>
 8007f56:	3001      	adds	r0, #1
 8007f58:	d03f      	beq.n	8007fda <_malloc_r+0xea>
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	19db      	adds	r3, r3, r7
 8007f5e:	6023      	str	r3, [r4, #0]
 8007f60:	9b00      	ldr	r3, [sp, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d040      	beq.n	8007fea <_malloc_r+0xfa>
 8007f68:	685a      	ldr	r2, [r3, #4]
 8007f6a:	42a2      	cmp	r2, r4
 8007f6c:	d133      	bne.n	8007fd6 <_malloc_r+0xe6>
 8007f6e:	2200      	movs	r2, #0
 8007f70:	605a      	str	r2, [r3, #4]
 8007f72:	e014      	b.n	8007f9e <_malloc_r+0xae>
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	dac5      	bge.n	8007f04 <_malloc_r+0x14>
 8007f78:	230c      	movs	r3, #12
 8007f7a:	2500      	movs	r5, #0
 8007f7c:	6033      	str	r3, [r6, #0]
 8007f7e:	0028      	movs	r0, r5
 8007f80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f82:	6821      	ldr	r1, [r4, #0]
 8007f84:	1bc9      	subs	r1, r1, r7
 8007f86:	d420      	bmi.n	8007fca <_malloc_r+0xda>
 8007f88:	290b      	cmp	r1, #11
 8007f8a:	d918      	bls.n	8007fbe <_malloc_r+0xce>
 8007f8c:	19e2      	adds	r2, r4, r7
 8007f8e:	6027      	str	r7, [r4, #0]
 8007f90:	42a3      	cmp	r3, r4
 8007f92:	d112      	bne.n	8007fba <_malloc_r+0xca>
 8007f94:	9b00      	ldr	r3, [sp, #0]
 8007f96:	601a      	str	r2, [r3, #0]
 8007f98:	6863      	ldr	r3, [r4, #4]
 8007f9a:	6011      	str	r1, [r2, #0]
 8007f9c:	6053      	str	r3, [r2, #4]
 8007f9e:	0030      	movs	r0, r6
 8007fa0:	0025      	movs	r5, r4
 8007fa2:	f000 f82f 	bl	8008004 <__malloc_unlock>
 8007fa6:	2207      	movs	r2, #7
 8007fa8:	350b      	adds	r5, #11
 8007faa:	1d23      	adds	r3, r4, #4
 8007fac:	4395      	bics	r5, r2
 8007fae:	1aea      	subs	r2, r5, r3
 8007fb0:	429d      	cmp	r5, r3
 8007fb2:	d0e4      	beq.n	8007f7e <_malloc_r+0x8e>
 8007fb4:	1b5b      	subs	r3, r3, r5
 8007fb6:	50a3      	str	r3, [r4, r2]
 8007fb8:	e7e1      	b.n	8007f7e <_malloc_r+0x8e>
 8007fba:	605a      	str	r2, [r3, #4]
 8007fbc:	e7ec      	b.n	8007f98 <_malloc_r+0xa8>
 8007fbe:	6862      	ldr	r2, [r4, #4]
 8007fc0:	42a3      	cmp	r3, r4
 8007fc2:	d1d5      	bne.n	8007f70 <_malloc_r+0x80>
 8007fc4:	9b00      	ldr	r3, [sp, #0]
 8007fc6:	601a      	str	r2, [r3, #0]
 8007fc8:	e7e9      	b.n	8007f9e <_malloc_r+0xae>
 8007fca:	0023      	movs	r3, r4
 8007fcc:	6864      	ldr	r4, [r4, #4]
 8007fce:	e7a2      	b.n	8007f16 <_malloc_r+0x26>
 8007fd0:	002c      	movs	r4, r5
 8007fd2:	686d      	ldr	r5, [r5, #4]
 8007fd4:	e7ab      	b.n	8007f2e <_malloc_r+0x3e>
 8007fd6:	0013      	movs	r3, r2
 8007fd8:	e7c4      	b.n	8007f64 <_malloc_r+0x74>
 8007fda:	230c      	movs	r3, #12
 8007fdc:	0030      	movs	r0, r6
 8007fde:	6033      	str	r3, [r6, #0]
 8007fe0:	f000 f810 	bl	8008004 <__malloc_unlock>
 8007fe4:	e7cb      	b.n	8007f7e <_malloc_r+0x8e>
 8007fe6:	6027      	str	r7, [r4, #0]
 8007fe8:	e7d9      	b.n	8007f9e <_malloc_r+0xae>
 8007fea:	605b      	str	r3, [r3, #4]
 8007fec:	deff      	udf	#255	; 0xff
 8007fee:	46c0      	nop			; (mov r8, r8)
 8007ff0:	20001280 	.word	0x20001280

08007ff4 <__malloc_lock>:
 8007ff4:	b510      	push	{r4, lr}
 8007ff6:	4802      	ldr	r0, [pc, #8]	; (8008000 <__malloc_lock+0xc>)
 8007ff8:	f7ff ff02 	bl	8007e00 <__retarget_lock_acquire_recursive>
 8007ffc:	bd10      	pop	{r4, pc}
 8007ffe:	46c0      	nop			; (mov r8, r8)
 8008000:	2000127c 	.word	0x2000127c

08008004 <__malloc_unlock>:
 8008004:	b510      	push	{r4, lr}
 8008006:	4802      	ldr	r0, [pc, #8]	; (8008010 <__malloc_unlock+0xc>)
 8008008:	f7ff fefb 	bl	8007e02 <__retarget_lock_release_recursive>
 800800c:	bd10      	pop	{r4, pc}
 800800e:	46c0      	nop			; (mov r8, r8)
 8008010:	2000127c 	.word	0x2000127c

08008014 <__sfputc_r>:
 8008014:	6893      	ldr	r3, [r2, #8]
 8008016:	b510      	push	{r4, lr}
 8008018:	3b01      	subs	r3, #1
 800801a:	6093      	str	r3, [r2, #8]
 800801c:	2b00      	cmp	r3, #0
 800801e:	da04      	bge.n	800802a <__sfputc_r+0x16>
 8008020:	6994      	ldr	r4, [r2, #24]
 8008022:	42a3      	cmp	r3, r4
 8008024:	db07      	blt.n	8008036 <__sfputc_r+0x22>
 8008026:	290a      	cmp	r1, #10
 8008028:	d005      	beq.n	8008036 <__sfputc_r+0x22>
 800802a:	6813      	ldr	r3, [r2, #0]
 800802c:	1c58      	adds	r0, r3, #1
 800802e:	6010      	str	r0, [r2, #0]
 8008030:	7019      	strb	r1, [r3, #0]
 8008032:	0008      	movs	r0, r1
 8008034:	bd10      	pop	{r4, pc}
 8008036:	f000 fb66 	bl	8008706 <__swbuf_r>
 800803a:	0001      	movs	r1, r0
 800803c:	e7f9      	b.n	8008032 <__sfputc_r+0x1e>

0800803e <__sfputs_r>:
 800803e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008040:	0006      	movs	r6, r0
 8008042:	000f      	movs	r7, r1
 8008044:	0014      	movs	r4, r2
 8008046:	18d5      	adds	r5, r2, r3
 8008048:	42ac      	cmp	r4, r5
 800804a:	d101      	bne.n	8008050 <__sfputs_r+0x12>
 800804c:	2000      	movs	r0, #0
 800804e:	e007      	b.n	8008060 <__sfputs_r+0x22>
 8008050:	7821      	ldrb	r1, [r4, #0]
 8008052:	003a      	movs	r2, r7
 8008054:	0030      	movs	r0, r6
 8008056:	f7ff ffdd 	bl	8008014 <__sfputc_r>
 800805a:	3401      	adds	r4, #1
 800805c:	1c43      	adds	r3, r0, #1
 800805e:	d1f3      	bne.n	8008048 <__sfputs_r+0xa>
 8008060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008064 <_vfiprintf_r>:
 8008064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008066:	b0a1      	sub	sp, #132	; 0x84
 8008068:	000f      	movs	r7, r1
 800806a:	0015      	movs	r5, r2
 800806c:	001e      	movs	r6, r3
 800806e:	9003      	str	r0, [sp, #12]
 8008070:	2800      	cmp	r0, #0
 8008072:	d004      	beq.n	800807e <_vfiprintf_r+0x1a>
 8008074:	6a03      	ldr	r3, [r0, #32]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d101      	bne.n	800807e <_vfiprintf_r+0x1a>
 800807a:	f7ff fdb1 	bl	8007be0 <__sinit>
 800807e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008080:	07db      	lsls	r3, r3, #31
 8008082:	d405      	bmi.n	8008090 <_vfiprintf_r+0x2c>
 8008084:	89bb      	ldrh	r3, [r7, #12]
 8008086:	059b      	lsls	r3, r3, #22
 8008088:	d402      	bmi.n	8008090 <_vfiprintf_r+0x2c>
 800808a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800808c:	f7ff feb8 	bl	8007e00 <__retarget_lock_acquire_recursive>
 8008090:	89bb      	ldrh	r3, [r7, #12]
 8008092:	071b      	lsls	r3, r3, #28
 8008094:	d502      	bpl.n	800809c <_vfiprintf_r+0x38>
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d113      	bne.n	80080c4 <_vfiprintf_r+0x60>
 800809c:	0039      	movs	r1, r7
 800809e:	9803      	ldr	r0, [sp, #12]
 80080a0:	f000 fb74 	bl	800878c <__swsetup_r>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	d00d      	beq.n	80080c4 <_vfiprintf_r+0x60>
 80080a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080aa:	07db      	lsls	r3, r3, #31
 80080ac:	d503      	bpl.n	80080b6 <_vfiprintf_r+0x52>
 80080ae:	2001      	movs	r0, #1
 80080b0:	4240      	negs	r0, r0
 80080b2:	b021      	add	sp, #132	; 0x84
 80080b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080b6:	89bb      	ldrh	r3, [r7, #12]
 80080b8:	059b      	lsls	r3, r3, #22
 80080ba:	d4f8      	bmi.n	80080ae <_vfiprintf_r+0x4a>
 80080bc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80080be:	f7ff fea0 	bl	8007e02 <__retarget_lock_release_recursive>
 80080c2:	e7f4      	b.n	80080ae <_vfiprintf_r+0x4a>
 80080c4:	2300      	movs	r3, #0
 80080c6:	ac08      	add	r4, sp, #32
 80080c8:	6163      	str	r3, [r4, #20]
 80080ca:	3320      	adds	r3, #32
 80080cc:	7663      	strb	r3, [r4, #25]
 80080ce:	3310      	adds	r3, #16
 80080d0:	76a3      	strb	r3, [r4, #26]
 80080d2:	9607      	str	r6, [sp, #28]
 80080d4:	002e      	movs	r6, r5
 80080d6:	7833      	ldrb	r3, [r6, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d001      	beq.n	80080e0 <_vfiprintf_r+0x7c>
 80080dc:	2b25      	cmp	r3, #37	; 0x25
 80080de:	d148      	bne.n	8008172 <_vfiprintf_r+0x10e>
 80080e0:	1b73      	subs	r3, r6, r5
 80080e2:	9305      	str	r3, [sp, #20]
 80080e4:	42ae      	cmp	r6, r5
 80080e6:	d00b      	beq.n	8008100 <_vfiprintf_r+0x9c>
 80080e8:	002a      	movs	r2, r5
 80080ea:	0039      	movs	r1, r7
 80080ec:	9803      	ldr	r0, [sp, #12]
 80080ee:	f7ff ffa6 	bl	800803e <__sfputs_r>
 80080f2:	3001      	adds	r0, #1
 80080f4:	d100      	bne.n	80080f8 <_vfiprintf_r+0x94>
 80080f6:	e0af      	b.n	8008258 <_vfiprintf_r+0x1f4>
 80080f8:	6963      	ldr	r3, [r4, #20]
 80080fa:	9a05      	ldr	r2, [sp, #20]
 80080fc:	189b      	adds	r3, r3, r2
 80080fe:	6163      	str	r3, [r4, #20]
 8008100:	7833      	ldrb	r3, [r6, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d100      	bne.n	8008108 <_vfiprintf_r+0xa4>
 8008106:	e0a7      	b.n	8008258 <_vfiprintf_r+0x1f4>
 8008108:	2201      	movs	r2, #1
 800810a:	2300      	movs	r3, #0
 800810c:	4252      	negs	r2, r2
 800810e:	6062      	str	r2, [r4, #4]
 8008110:	a904      	add	r1, sp, #16
 8008112:	3254      	adds	r2, #84	; 0x54
 8008114:	1852      	adds	r2, r2, r1
 8008116:	1c75      	adds	r5, r6, #1
 8008118:	6023      	str	r3, [r4, #0]
 800811a:	60e3      	str	r3, [r4, #12]
 800811c:	60a3      	str	r3, [r4, #8]
 800811e:	7013      	strb	r3, [r2, #0]
 8008120:	65a3      	str	r3, [r4, #88]	; 0x58
 8008122:	4b59      	ldr	r3, [pc, #356]	; (8008288 <_vfiprintf_r+0x224>)
 8008124:	2205      	movs	r2, #5
 8008126:	0018      	movs	r0, r3
 8008128:	7829      	ldrb	r1, [r5, #0]
 800812a:	9305      	str	r3, [sp, #20]
 800812c:	f000 fba4 	bl	8008878 <memchr>
 8008130:	1c6e      	adds	r6, r5, #1
 8008132:	2800      	cmp	r0, #0
 8008134:	d11f      	bne.n	8008176 <_vfiprintf_r+0x112>
 8008136:	6822      	ldr	r2, [r4, #0]
 8008138:	06d3      	lsls	r3, r2, #27
 800813a:	d504      	bpl.n	8008146 <_vfiprintf_r+0xe2>
 800813c:	2353      	movs	r3, #83	; 0x53
 800813e:	a904      	add	r1, sp, #16
 8008140:	185b      	adds	r3, r3, r1
 8008142:	2120      	movs	r1, #32
 8008144:	7019      	strb	r1, [r3, #0]
 8008146:	0713      	lsls	r3, r2, #28
 8008148:	d504      	bpl.n	8008154 <_vfiprintf_r+0xf0>
 800814a:	2353      	movs	r3, #83	; 0x53
 800814c:	a904      	add	r1, sp, #16
 800814e:	185b      	adds	r3, r3, r1
 8008150:	212b      	movs	r1, #43	; 0x2b
 8008152:	7019      	strb	r1, [r3, #0]
 8008154:	782b      	ldrb	r3, [r5, #0]
 8008156:	2b2a      	cmp	r3, #42	; 0x2a
 8008158:	d016      	beq.n	8008188 <_vfiprintf_r+0x124>
 800815a:	002e      	movs	r6, r5
 800815c:	2100      	movs	r1, #0
 800815e:	200a      	movs	r0, #10
 8008160:	68e3      	ldr	r3, [r4, #12]
 8008162:	7832      	ldrb	r2, [r6, #0]
 8008164:	1c75      	adds	r5, r6, #1
 8008166:	3a30      	subs	r2, #48	; 0x30
 8008168:	2a09      	cmp	r2, #9
 800816a:	d94e      	bls.n	800820a <_vfiprintf_r+0x1a6>
 800816c:	2900      	cmp	r1, #0
 800816e:	d111      	bne.n	8008194 <_vfiprintf_r+0x130>
 8008170:	e017      	b.n	80081a2 <_vfiprintf_r+0x13e>
 8008172:	3601      	adds	r6, #1
 8008174:	e7af      	b.n	80080d6 <_vfiprintf_r+0x72>
 8008176:	9b05      	ldr	r3, [sp, #20]
 8008178:	6822      	ldr	r2, [r4, #0]
 800817a:	1ac0      	subs	r0, r0, r3
 800817c:	2301      	movs	r3, #1
 800817e:	4083      	lsls	r3, r0
 8008180:	4313      	orrs	r3, r2
 8008182:	0035      	movs	r5, r6
 8008184:	6023      	str	r3, [r4, #0]
 8008186:	e7cc      	b.n	8008122 <_vfiprintf_r+0xbe>
 8008188:	9b07      	ldr	r3, [sp, #28]
 800818a:	1d19      	adds	r1, r3, #4
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	9107      	str	r1, [sp, #28]
 8008190:	2b00      	cmp	r3, #0
 8008192:	db01      	blt.n	8008198 <_vfiprintf_r+0x134>
 8008194:	930b      	str	r3, [sp, #44]	; 0x2c
 8008196:	e004      	b.n	80081a2 <_vfiprintf_r+0x13e>
 8008198:	425b      	negs	r3, r3
 800819a:	60e3      	str	r3, [r4, #12]
 800819c:	2302      	movs	r3, #2
 800819e:	4313      	orrs	r3, r2
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	7833      	ldrb	r3, [r6, #0]
 80081a4:	2b2e      	cmp	r3, #46	; 0x2e
 80081a6:	d10a      	bne.n	80081be <_vfiprintf_r+0x15a>
 80081a8:	7873      	ldrb	r3, [r6, #1]
 80081aa:	2b2a      	cmp	r3, #42	; 0x2a
 80081ac:	d135      	bne.n	800821a <_vfiprintf_r+0x1b6>
 80081ae:	9b07      	ldr	r3, [sp, #28]
 80081b0:	3602      	adds	r6, #2
 80081b2:	1d1a      	adds	r2, r3, #4
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	9207      	str	r2, [sp, #28]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	db2b      	blt.n	8008214 <_vfiprintf_r+0x1b0>
 80081bc:	9309      	str	r3, [sp, #36]	; 0x24
 80081be:	4d33      	ldr	r5, [pc, #204]	; (800828c <_vfiprintf_r+0x228>)
 80081c0:	2203      	movs	r2, #3
 80081c2:	0028      	movs	r0, r5
 80081c4:	7831      	ldrb	r1, [r6, #0]
 80081c6:	f000 fb57 	bl	8008878 <memchr>
 80081ca:	2800      	cmp	r0, #0
 80081cc:	d006      	beq.n	80081dc <_vfiprintf_r+0x178>
 80081ce:	2340      	movs	r3, #64	; 0x40
 80081d0:	1b40      	subs	r0, r0, r5
 80081d2:	4083      	lsls	r3, r0
 80081d4:	6822      	ldr	r2, [r4, #0]
 80081d6:	3601      	adds	r6, #1
 80081d8:	4313      	orrs	r3, r2
 80081da:	6023      	str	r3, [r4, #0]
 80081dc:	7831      	ldrb	r1, [r6, #0]
 80081de:	2206      	movs	r2, #6
 80081e0:	482b      	ldr	r0, [pc, #172]	; (8008290 <_vfiprintf_r+0x22c>)
 80081e2:	1c75      	adds	r5, r6, #1
 80081e4:	7621      	strb	r1, [r4, #24]
 80081e6:	f000 fb47 	bl	8008878 <memchr>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d043      	beq.n	8008276 <_vfiprintf_r+0x212>
 80081ee:	4b29      	ldr	r3, [pc, #164]	; (8008294 <_vfiprintf_r+0x230>)
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d125      	bne.n	8008240 <_vfiprintf_r+0x1dc>
 80081f4:	2207      	movs	r2, #7
 80081f6:	9b07      	ldr	r3, [sp, #28]
 80081f8:	3307      	adds	r3, #7
 80081fa:	4393      	bics	r3, r2
 80081fc:	3308      	adds	r3, #8
 80081fe:	9307      	str	r3, [sp, #28]
 8008200:	6963      	ldr	r3, [r4, #20]
 8008202:	9a04      	ldr	r2, [sp, #16]
 8008204:	189b      	adds	r3, r3, r2
 8008206:	6163      	str	r3, [r4, #20]
 8008208:	e764      	b.n	80080d4 <_vfiprintf_r+0x70>
 800820a:	4343      	muls	r3, r0
 800820c:	002e      	movs	r6, r5
 800820e:	2101      	movs	r1, #1
 8008210:	189b      	adds	r3, r3, r2
 8008212:	e7a6      	b.n	8008162 <_vfiprintf_r+0xfe>
 8008214:	2301      	movs	r3, #1
 8008216:	425b      	negs	r3, r3
 8008218:	e7d0      	b.n	80081bc <_vfiprintf_r+0x158>
 800821a:	2300      	movs	r3, #0
 800821c:	200a      	movs	r0, #10
 800821e:	001a      	movs	r2, r3
 8008220:	3601      	adds	r6, #1
 8008222:	6063      	str	r3, [r4, #4]
 8008224:	7831      	ldrb	r1, [r6, #0]
 8008226:	1c75      	adds	r5, r6, #1
 8008228:	3930      	subs	r1, #48	; 0x30
 800822a:	2909      	cmp	r1, #9
 800822c:	d903      	bls.n	8008236 <_vfiprintf_r+0x1d2>
 800822e:	2b00      	cmp	r3, #0
 8008230:	d0c5      	beq.n	80081be <_vfiprintf_r+0x15a>
 8008232:	9209      	str	r2, [sp, #36]	; 0x24
 8008234:	e7c3      	b.n	80081be <_vfiprintf_r+0x15a>
 8008236:	4342      	muls	r2, r0
 8008238:	002e      	movs	r6, r5
 800823a:	2301      	movs	r3, #1
 800823c:	1852      	adds	r2, r2, r1
 800823e:	e7f1      	b.n	8008224 <_vfiprintf_r+0x1c0>
 8008240:	aa07      	add	r2, sp, #28
 8008242:	9200      	str	r2, [sp, #0]
 8008244:	0021      	movs	r1, r4
 8008246:	003a      	movs	r2, r7
 8008248:	4b13      	ldr	r3, [pc, #76]	; (8008298 <_vfiprintf_r+0x234>)
 800824a:	9803      	ldr	r0, [sp, #12]
 800824c:	e000      	b.n	8008250 <_vfiprintf_r+0x1ec>
 800824e:	bf00      	nop
 8008250:	9004      	str	r0, [sp, #16]
 8008252:	9b04      	ldr	r3, [sp, #16]
 8008254:	3301      	adds	r3, #1
 8008256:	d1d3      	bne.n	8008200 <_vfiprintf_r+0x19c>
 8008258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800825a:	07db      	lsls	r3, r3, #31
 800825c:	d405      	bmi.n	800826a <_vfiprintf_r+0x206>
 800825e:	89bb      	ldrh	r3, [r7, #12]
 8008260:	059b      	lsls	r3, r3, #22
 8008262:	d402      	bmi.n	800826a <_vfiprintf_r+0x206>
 8008264:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008266:	f7ff fdcc 	bl	8007e02 <__retarget_lock_release_recursive>
 800826a:	89bb      	ldrh	r3, [r7, #12]
 800826c:	065b      	lsls	r3, r3, #25
 800826e:	d500      	bpl.n	8008272 <_vfiprintf_r+0x20e>
 8008270:	e71d      	b.n	80080ae <_vfiprintf_r+0x4a>
 8008272:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008274:	e71d      	b.n	80080b2 <_vfiprintf_r+0x4e>
 8008276:	aa07      	add	r2, sp, #28
 8008278:	9200      	str	r2, [sp, #0]
 800827a:	0021      	movs	r1, r4
 800827c:	003a      	movs	r2, r7
 800827e:	4b06      	ldr	r3, [pc, #24]	; (8008298 <_vfiprintf_r+0x234>)
 8008280:	9803      	ldr	r0, [sp, #12]
 8008282:	f000 f87b 	bl	800837c <_printf_i>
 8008286:	e7e3      	b.n	8008250 <_vfiprintf_r+0x1ec>
 8008288:	08008ca8 	.word	0x08008ca8
 800828c:	08008cae 	.word	0x08008cae
 8008290:	08008cb2 	.word	0x08008cb2
 8008294:	00000000 	.word	0x00000000
 8008298:	0800803f 	.word	0x0800803f

0800829c <_printf_common>:
 800829c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800829e:	0016      	movs	r6, r2
 80082a0:	9301      	str	r3, [sp, #4]
 80082a2:	688a      	ldr	r2, [r1, #8]
 80082a4:	690b      	ldr	r3, [r1, #16]
 80082a6:	000c      	movs	r4, r1
 80082a8:	9000      	str	r0, [sp, #0]
 80082aa:	4293      	cmp	r3, r2
 80082ac:	da00      	bge.n	80082b0 <_printf_common+0x14>
 80082ae:	0013      	movs	r3, r2
 80082b0:	0022      	movs	r2, r4
 80082b2:	6033      	str	r3, [r6, #0]
 80082b4:	3243      	adds	r2, #67	; 0x43
 80082b6:	7812      	ldrb	r2, [r2, #0]
 80082b8:	2a00      	cmp	r2, #0
 80082ba:	d001      	beq.n	80082c0 <_printf_common+0x24>
 80082bc:	3301      	adds	r3, #1
 80082be:	6033      	str	r3, [r6, #0]
 80082c0:	6823      	ldr	r3, [r4, #0]
 80082c2:	069b      	lsls	r3, r3, #26
 80082c4:	d502      	bpl.n	80082cc <_printf_common+0x30>
 80082c6:	6833      	ldr	r3, [r6, #0]
 80082c8:	3302      	adds	r3, #2
 80082ca:	6033      	str	r3, [r6, #0]
 80082cc:	6822      	ldr	r2, [r4, #0]
 80082ce:	2306      	movs	r3, #6
 80082d0:	0015      	movs	r5, r2
 80082d2:	401d      	ands	r5, r3
 80082d4:	421a      	tst	r2, r3
 80082d6:	d027      	beq.n	8008328 <_printf_common+0x8c>
 80082d8:	0023      	movs	r3, r4
 80082da:	3343      	adds	r3, #67	; 0x43
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	1e5a      	subs	r2, r3, #1
 80082e0:	4193      	sbcs	r3, r2
 80082e2:	6822      	ldr	r2, [r4, #0]
 80082e4:	0692      	lsls	r2, r2, #26
 80082e6:	d430      	bmi.n	800834a <_printf_common+0xae>
 80082e8:	0022      	movs	r2, r4
 80082ea:	9901      	ldr	r1, [sp, #4]
 80082ec:	9800      	ldr	r0, [sp, #0]
 80082ee:	9d08      	ldr	r5, [sp, #32]
 80082f0:	3243      	adds	r2, #67	; 0x43
 80082f2:	47a8      	blx	r5
 80082f4:	3001      	adds	r0, #1
 80082f6:	d025      	beq.n	8008344 <_printf_common+0xa8>
 80082f8:	2206      	movs	r2, #6
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	2500      	movs	r5, #0
 80082fe:	4013      	ands	r3, r2
 8008300:	2b04      	cmp	r3, #4
 8008302:	d105      	bne.n	8008310 <_printf_common+0x74>
 8008304:	6833      	ldr	r3, [r6, #0]
 8008306:	68e5      	ldr	r5, [r4, #12]
 8008308:	1aed      	subs	r5, r5, r3
 800830a:	43eb      	mvns	r3, r5
 800830c:	17db      	asrs	r3, r3, #31
 800830e:	401d      	ands	r5, r3
 8008310:	68a3      	ldr	r3, [r4, #8]
 8008312:	6922      	ldr	r2, [r4, #16]
 8008314:	4293      	cmp	r3, r2
 8008316:	dd01      	ble.n	800831c <_printf_common+0x80>
 8008318:	1a9b      	subs	r3, r3, r2
 800831a:	18ed      	adds	r5, r5, r3
 800831c:	2600      	movs	r6, #0
 800831e:	42b5      	cmp	r5, r6
 8008320:	d120      	bne.n	8008364 <_printf_common+0xc8>
 8008322:	2000      	movs	r0, #0
 8008324:	e010      	b.n	8008348 <_printf_common+0xac>
 8008326:	3501      	adds	r5, #1
 8008328:	68e3      	ldr	r3, [r4, #12]
 800832a:	6832      	ldr	r2, [r6, #0]
 800832c:	1a9b      	subs	r3, r3, r2
 800832e:	42ab      	cmp	r3, r5
 8008330:	ddd2      	ble.n	80082d8 <_printf_common+0x3c>
 8008332:	0022      	movs	r2, r4
 8008334:	2301      	movs	r3, #1
 8008336:	9901      	ldr	r1, [sp, #4]
 8008338:	9800      	ldr	r0, [sp, #0]
 800833a:	9f08      	ldr	r7, [sp, #32]
 800833c:	3219      	adds	r2, #25
 800833e:	47b8      	blx	r7
 8008340:	3001      	adds	r0, #1
 8008342:	d1f0      	bne.n	8008326 <_printf_common+0x8a>
 8008344:	2001      	movs	r0, #1
 8008346:	4240      	negs	r0, r0
 8008348:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800834a:	2030      	movs	r0, #48	; 0x30
 800834c:	18e1      	adds	r1, r4, r3
 800834e:	3143      	adds	r1, #67	; 0x43
 8008350:	7008      	strb	r0, [r1, #0]
 8008352:	0021      	movs	r1, r4
 8008354:	1c5a      	adds	r2, r3, #1
 8008356:	3145      	adds	r1, #69	; 0x45
 8008358:	7809      	ldrb	r1, [r1, #0]
 800835a:	18a2      	adds	r2, r4, r2
 800835c:	3243      	adds	r2, #67	; 0x43
 800835e:	3302      	adds	r3, #2
 8008360:	7011      	strb	r1, [r2, #0]
 8008362:	e7c1      	b.n	80082e8 <_printf_common+0x4c>
 8008364:	0022      	movs	r2, r4
 8008366:	2301      	movs	r3, #1
 8008368:	9901      	ldr	r1, [sp, #4]
 800836a:	9800      	ldr	r0, [sp, #0]
 800836c:	9f08      	ldr	r7, [sp, #32]
 800836e:	321a      	adds	r2, #26
 8008370:	47b8      	blx	r7
 8008372:	3001      	adds	r0, #1
 8008374:	d0e6      	beq.n	8008344 <_printf_common+0xa8>
 8008376:	3601      	adds	r6, #1
 8008378:	e7d1      	b.n	800831e <_printf_common+0x82>
	...

0800837c <_printf_i>:
 800837c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800837e:	b08b      	sub	sp, #44	; 0x2c
 8008380:	9206      	str	r2, [sp, #24]
 8008382:	000a      	movs	r2, r1
 8008384:	3243      	adds	r2, #67	; 0x43
 8008386:	9307      	str	r3, [sp, #28]
 8008388:	9005      	str	r0, [sp, #20]
 800838a:	9204      	str	r2, [sp, #16]
 800838c:	7e0a      	ldrb	r2, [r1, #24]
 800838e:	000c      	movs	r4, r1
 8008390:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008392:	2a78      	cmp	r2, #120	; 0x78
 8008394:	d809      	bhi.n	80083aa <_printf_i+0x2e>
 8008396:	2a62      	cmp	r2, #98	; 0x62
 8008398:	d80b      	bhi.n	80083b2 <_printf_i+0x36>
 800839a:	2a00      	cmp	r2, #0
 800839c:	d100      	bne.n	80083a0 <_printf_i+0x24>
 800839e:	e0be      	b.n	800851e <_printf_i+0x1a2>
 80083a0:	497c      	ldr	r1, [pc, #496]	; (8008594 <_printf_i+0x218>)
 80083a2:	9103      	str	r1, [sp, #12]
 80083a4:	2a58      	cmp	r2, #88	; 0x58
 80083a6:	d100      	bne.n	80083aa <_printf_i+0x2e>
 80083a8:	e093      	b.n	80084d2 <_printf_i+0x156>
 80083aa:	0026      	movs	r6, r4
 80083ac:	3642      	adds	r6, #66	; 0x42
 80083ae:	7032      	strb	r2, [r6, #0]
 80083b0:	e022      	b.n	80083f8 <_printf_i+0x7c>
 80083b2:	0010      	movs	r0, r2
 80083b4:	3863      	subs	r0, #99	; 0x63
 80083b6:	2815      	cmp	r0, #21
 80083b8:	d8f7      	bhi.n	80083aa <_printf_i+0x2e>
 80083ba:	f7f7 fea5 	bl	8000108 <__gnu_thumb1_case_shi>
 80083be:	0016      	.short	0x0016
 80083c0:	fff6001f 	.word	0xfff6001f
 80083c4:	fff6fff6 	.word	0xfff6fff6
 80083c8:	001ffff6 	.word	0x001ffff6
 80083cc:	fff6fff6 	.word	0xfff6fff6
 80083d0:	fff6fff6 	.word	0xfff6fff6
 80083d4:	003600a3 	.word	0x003600a3
 80083d8:	fff60083 	.word	0xfff60083
 80083dc:	00b4fff6 	.word	0x00b4fff6
 80083e0:	0036fff6 	.word	0x0036fff6
 80083e4:	fff6fff6 	.word	0xfff6fff6
 80083e8:	0087      	.short	0x0087
 80083ea:	0026      	movs	r6, r4
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	3642      	adds	r6, #66	; 0x42
 80083f0:	1d11      	adds	r1, r2, #4
 80083f2:	6019      	str	r1, [r3, #0]
 80083f4:	6813      	ldr	r3, [r2, #0]
 80083f6:	7033      	strb	r3, [r6, #0]
 80083f8:	2301      	movs	r3, #1
 80083fa:	e0a2      	b.n	8008542 <_printf_i+0x1c6>
 80083fc:	6818      	ldr	r0, [r3, #0]
 80083fe:	6809      	ldr	r1, [r1, #0]
 8008400:	1d02      	adds	r2, r0, #4
 8008402:	060d      	lsls	r5, r1, #24
 8008404:	d50b      	bpl.n	800841e <_printf_i+0xa2>
 8008406:	6805      	ldr	r5, [r0, #0]
 8008408:	601a      	str	r2, [r3, #0]
 800840a:	2d00      	cmp	r5, #0
 800840c:	da03      	bge.n	8008416 <_printf_i+0x9a>
 800840e:	232d      	movs	r3, #45	; 0x2d
 8008410:	9a04      	ldr	r2, [sp, #16]
 8008412:	426d      	negs	r5, r5
 8008414:	7013      	strb	r3, [r2, #0]
 8008416:	4b5f      	ldr	r3, [pc, #380]	; (8008594 <_printf_i+0x218>)
 8008418:	270a      	movs	r7, #10
 800841a:	9303      	str	r3, [sp, #12]
 800841c:	e01b      	b.n	8008456 <_printf_i+0xda>
 800841e:	6805      	ldr	r5, [r0, #0]
 8008420:	601a      	str	r2, [r3, #0]
 8008422:	0649      	lsls	r1, r1, #25
 8008424:	d5f1      	bpl.n	800840a <_printf_i+0x8e>
 8008426:	b22d      	sxth	r5, r5
 8008428:	e7ef      	b.n	800840a <_printf_i+0x8e>
 800842a:	680d      	ldr	r5, [r1, #0]
 800842c:	6819      	ldr	r1, [r3, #0]
 800842e:	1d08      	adds	r0, r1, #4
 8008430:	6018      	str	r0, [r3, #0]
 8008432:	062e      	lsls	r6, r5, #24
 8008434:	d501      	bpl.n	800843a <_printf_i+0xbe>
 8008436:	680d      	ldr	r5, [r1, #0]
 8008438:	e003      	b.n	8008442 <_printf_i+0xc6>
 800843a:	066d      	lsls	r5, r5, #25
 800843c:	d5fb      	bpl.n	8008436 <_printf_i+0xba>
 800843e:	680d      	ldr	r5, [r1, #0]
 8008440:	b2ad      	uxth	r5, r5
 8008442:	4b54      	ldr	r3, [pc, #336]	; (8008594 <_printf_i+0x218>)
 8008444:	2708      	movs	r7, #8
 8008446:	9303      	str	r3, [sp, #12]
 8008448:	2a6f      	cmp	r2, #111	; 0x6f
 800844a:	d000      	beq.n	800844e <_printf_i+0xd2>
 800844c:	3702      	adds	r7, #2
 800844e:	0023      	movs	r3, r4
 8008450:	2200      	movs	r2, #0
 8008452:	3343      	adds	r3, #67	; 0x43
 8008454:	701a      	strb	r2, [r3, #0]
 8008456:	6863      	ldr	r3, [r4, #4]
 8008458:	60a3      	str	r3, [r4, #8]
 800845a:	2b00      	cmp	r3, #0
 800845c:	db03      	blt.n	8008466 <_printf_i+0xea>
 800845e:	2104      	movs	r1, #4
 8008460:	6822      	ldr	r2, [r4, #0]
 8008462:	438a      	bics	r2, r1
 8008464:	6022      	str	r2, [r4, #0]
 8008466:	2d00      	cmp	r5, #0
 8008468:	d102      	bne.n	8008470 <_printf_i+0xf4>
 800846a:	9e04      	ldr	r6, [sp, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00c      	beq.n	800848a <_printf_i+0x10e>
 8008470:	9e04      	ldr	r6, [sp, #16]
 8008472:	0028      	movs	r0, r5
 8008474:	0039      	movs	r1, r7
 8008476:	f7f7 fed7 	bl	8000228 <__aeabi_uidivmod>
 800847a:	9b03      	ldr	r3, [sp, #12]
 800847c:	3e01      	subs	r6, #1
 800847e:	5c5b      	ldrb	r3, [r3, r1]
 8008480:	7033      	strb	r3, [r6, #0]
 8008482:	002b      	movs	r3, r5
 8008484:	0005      	movs	r5, r0
 8008486:	429f      	cmp	r7, r3
 8008488:	d9f3      	bls.n	8008472 <_printf_i+0xf6>
 800848a:	2f08      	cmp	r7, #8
 800848c:	d109      	bne.n	80084a2 <_printf_i+0x126>
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	07db      	lsls	r3, r3, #31
 8008492:	d506      	bpl.n	80084a2 <_printf_i+0x126>
 8008494:	6862      	ldr	r2, [r4, #4]
 8008496:	6923      	ldr	r3, [r4, #16]
 8008498:	429a      	cmp	r2, r3
 800849a:	dc02      	bgt.n	80084a2 <_printf_i+0x126>
 800849c:	2330      	movs	r3, #48	; 0x30
 800849e:	3e01      	subs	r6, #1
 80084a0:	7033      	strb	r3, [r6, #0]
 80084a2:	9b04      	ldr	r3, [sp, #16]
 80084a4:	1b9b      	subs	r3, r3, r6
 80084a6:	6123      	str	r3, [r4, #16]
 80084a8:	9b07      	ldr	r3, [sp, #28]
 80084aa:	0021      	movs	r1, r4
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	9805      	ldr	r0, [sp, #20]
 80084b0:	9b06      	ldr	r3, [sp, #24]
 80084b2:	aa09      	add	r2, sp, #36	; 0x24
 80084b4:	f7ff fef2 	bl	800829c <_printf_common>
 80084b8:	3001      	adds	r0, #1
 80084ba:	d147      	bne.n	800854c <_printf_i+0x1d0>
 80084bc:	2001      	movs	r0, #1
 80084be:	4240      	negs	r0, r0
 80084c0:	b00b      	add	sp, #44	; 0x2c
 80084c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084c4:	2220      	movs	r2, #32
 80084c6:	6809      	ldr	r1, [r1, #0]
 80084c8:	430a      	orrs	r2, r1
 80084ca:	6022      	str	r2, [r4, #0]
 80084cc:	2278      	movs	r2, #120	; 0x78
 80084ce:	4932      	ldr	r1, [pc, #200]	; (8008598 <_printf_i+0x21c>)
 80084d0:	9103      	str	r1, [sp, #12]
 80084d2:	0021      	movs	r1, r4
 80084d4:	3145      	adds	r1, #69	; 0x45
 80084d6:	700a      	strb	r2, [r1, #0]
 80084d8:	6819      	ldr	r1, [r3, #0]
 80084da:	6822      	ldr	r2, [r4, #0]
 80084dc:	c920      	ldmia	r1!, {r5}
 80084de:	0610      	lsls	r0, r2, #24
 80084e0:	d402      	bmi.n	80084e8 <_printf_i+0x16c>
 80084e2:	0650      	lsls	r0, r2, #25
 80084e4:	d500      	bpl.n	80084e8 <_printf_i+0x16c>
 80084e6:	b2ad      	uxth	r5, r5
 80084e8:	6019      	str	r1, [r3, #0]
 80084ea:	07d3      	lsls	r3, r2, #31
 80084ec:	d502      	bpl.n	80084f4 <_printf_i+0x178>
 80084ee:	2320      	movs	r3, #32
 80084f0:	4313      	orrs	r3, r2
 80084f2:	6023      	str	r3, [r4, #0]
 80084f4:	2710      	movs	r7, #16
 80084f6:	2d00      	cmp	r5, #0
 80084f8:	d1a9      	bne.n	800844e <_printf_i+0xd2>
 80084fa:	2220      	movs	r2, #32
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	4393      	bics	r3, r2
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	e7a4      	b.n	800844e <_printf_i+0xd2>
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	680d      	ldr	r5, [r1, #0]
 8008508:	1d10      	adds	r0, r2, #4
 800850a:	6949      	ldr	r1, [r1, #20]
 800850c:	6018      	str	r0, [r3, #0]
 800850e:	6813      	ldr	r3, [r2, #0]
 8008510:	062e      	lsls	r6, r5, #24
 8008512:	d501      	bpl.n	8008518 <_printf_i+0x19c>
 8008514:	6019      	str	r1, [r3, #0]
 8008516:	e002      	b.n	800851e <_printf_i+0x1a2>
 8008518:	066d      	lsls	r5, r5, #25
 800851a:	d5fb      	bpl.n	8008514 <_printf_i+0x198>
 800851c:	8019      	strh	r1, [r3, #0]
 800851e:	2300      	movs	r3, #0
 8008520:	9e04      	ldr	r6, [sp, #16]
 8008522:	6123      	str	r3, [r4, #16]
 8008524:	e7c0      	b.n	80084a8 <_printf_i+0x12c>
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	1d11      	adds	r1, r2, #4
 800852a:	6019      	str	r1, [r3, #0]
 800852c:	6816      	ldr	r6, [r2, #0]
 800852e:	2100      	movs	r1, #0
 8008530:	0030      	movs	r0, r6
 8008532:	6862      	ldr	r2, [r4, #4]
 8008534:	f000 f9a0 	bl	8008878 <memchr>
 8008538:	2800      	cmp	r0, #0
 800853a:	d001      	beq.n	8008540 <_printf_i+0x1c4>
 800853c:	1b80      	subs	r0, r0, r6
 800853e:	6060      	str	r0, [r4, #4]
 8008540:	6863      	ldr	r3, [r4, #4]
 8008542:	6123      	str	r3, [r4, #16]
 8008544:	2300      	movs	r3, #0
 8008546:	9a04      	ldr	r2, [sp, #16]
 8008548:	7013      	strb	r3, [r2, #0]
 800854a:	e7ad      	b.n	80084a8 <_printf_i+0x12c>
 800854c:	0032      	movs	r2, r6
 800854e:	6923      	ldr	r3, [r4, #16]
 8008550:	9906      	ldr	r1, [sp, #24]
 8008552:	9805      	ldr	r0, [sp, #20]
 8008554:	9d07      	ldr	r5, [sp, #28]
 8008556:	47a8      	blx	r5
 8008558:	3001      	adds	r0, #1
 800855a:	d0af      	beq.n	80084bc <_printf_i+0x140>
 800855c:	6823      	ldr	r3, [r4, #0]
 800855e:	079b      	lsls	r3, r3, #30
 8008560:	d415      	bmi.n	800858e <_printf_i+0x212>
 8008562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008564:	68e0      	ldr	r0, [r4, #12]
 8008566:	4298      	cmp	r0, r3
 8008568:	daaa      	bge.n	80084c0 <_printf_i+0x144>
 800856a:	0018      	movs	r0, r3
 800856c:	e7a8      	b.n	80084c0 <_printf_i+0x144>
 800856e:	0022      	movs	r2, r4
 8008570:	2301      	movs	r3, #1
 8008572:	9906      	ldr	r1, [sp, #24]
 8008574:	9805      	ldr	r0, [sp, #20]
 8008576:	9e07      	ldr	r6, [sp, #28]
 8008578:	3219      	adds	r2, #25
 800857a:	47b0      	blx	r6
 800857c:	3001      	adds	r0, #1
 800857e:	d09d      	beq.n	80084bc <_printf_i+0x140>
 8008580:	3501      	adds	r5, #1
 8008582:	68e3      	ldr	r3, [r4, #12]
 8008584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008586:	1a9b      	subs	r3, r3, r2
 8008588:	42ab      	cmp	r3, r5
 800858a:	dcf0      	bgt.n	800856e <_printf_i+0x1f2>
 800858c:	e7e9      	b.n	8008562 <_printf_i+0x1e6>
 800858e:	2500      	movs	r5, #0
 8008590:	e7f7      	b.n	8008582 <_printf_i+0x206>
 8008592:	46c0      	nop			; (mov r8, r8)
 8008594:	08008cb9 	.word	0x08008cb9
 8008598:	08008cca 	.word	0x08008cca

0800859c <__sflush_r>:
 800859c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800859e:	898b      	ldrh	r3, [r1, #12]
 80085a0:	0005      	movs	r5, r0
 80085a2:	000c      	movs	r4, r1
 80085a4:	071a      	lsls	r2, r3, #28
 80085a6:	d45c      	bmi.n	8008662 <__sflush_r+0xc6>
 80085a8:	684a      	ldr	r2, [r1, #4]
 80085aa:	2a00      	cmp	r2, #0
 80085ac:	dc04      	bgt.n	80085b8 <__sflush_r+0x1c>
 80085ae:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80085b0:	2a00      	cmp	r2, #0
 80085b2:	dc01      	bgt.n	80085b8 <__sflush_r+0x1c>
 80085b4:	2000      	movs	r0, #0
 80085b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80085b8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80085ba:	2f00      	cmp	r7, #0
 80085bc:	d0fa      	beq.n	80085b4 <__sflush_r+0x18>
 80085be:	2200      	movs	r2, #0
 80085c0:	2080      	movs	r0, #128	; 0x80
 80085c2:	682e      	ldr	r6, [r5, #0]
 80085c4:	602a      	str	r2, [r5, #0]
 80085c6:	001a      	movs	r2, r3
 80085c8:	0140      	lsls	r0, r0, #5
 80085ca:	6a21      	ldr	r1, [r4, #32]
 80085cc:	4002      	ands	r2, r0
 80085ce:	4203      	tst	r3, r0
 80085d0:	d034      	beq.n	800863c <__sflush_r+0xa0>
 80085d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80085d4:	89a3      	ldrh	r3, [r4, #12]
 80085d6:	075b      	lsls	r3, r3, #29
 80085d8:	d506      	bpl.n	80085e8 <__sflush_r+0x4c>
 80085da:	6863      	ldr	r3, [r4, #4]
 80085dc:	1ac0      	subs	r0, r0, r3
 80085de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <__sflush_r+0x4c>
 80085e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085e6:	1ac0      	subs	r0, r0, r3
 80085e8:	0002      	movs	r2, r0
 80085ea:	2300      	movs	r3, #0
 80085ec:	0028      	movs	r0, r5
 80085ee:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80085f0:	6a21      	ldr	r1, [r4, #32]
 80085f2:	47b8      	blx	r7
 80085f4:	89a2      	ldrh	r2, [r4, #12]
 80085f6:	1c43      	adds	r3, r0, #1
 80085f8:	d106      	bne.n	8008608 <__sflush_r+0x6c>
 80085fa:	6829      	ldr	r1, [r5, #0]
 80085fc:	291d      	cmp	r1, #29
 80085fe:	d82c      	bhi.n	800865a <__sflush_r+0xbe>
 8008600:	4b2a      	ldr	r3, [pc, #168]	; (80086ac <__sflush_r+0x110>)
 8008602:	410b      	asrs	r3, r1
 8008604:	07db      	lsls	r3, r3, #31
 8008606:	d428      	bmi.n	800865a <__sflush_r+0xbe>
 8008608:	2300      	movs	r3, #0
 800860a:	6063      	str	r3, [r4, #4]
 800860c:	6923      	ldr	r3, [r4, #16]
 800860e:	6023      	str	r3, [r4, #0]
 8008610:	04d2      	lsls	r2, r2, #19
 8008612:	d505      	bpl.n	8008620 <__sflush_r+0x84>
 8008614:	1c43      	adds	r3, r0, #1
 8008616:	d102      	bne.n	800861e <__sflush_r+0x82>
 8008618:	682b      	ldr	r3, [r5, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d100      	bne.n	8008620 <__sflush_r+0x84>
 800861e:	6560      	str	r0, [r4, #84]	; 0x54
 8008620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008622:	602e      	str	r6, [r5, #0]
 8008624:	2900      	cmp	r1, #0
 8008626:	d0c5      	beq.n	80085b4 <__sflush_r+0x18>
 8008628:	0023      	movs	r3, r4
 800862a:	3344      	adds	r3, #68	; 0x44
 800862c:	4299      	cmp	r1, r3
 800862e:	d002      	beq.n	8008636 <__sflush_r+0x9a>
 8008630:	0028      	movs	r0, r5
 8008632:	f7ff fbf1 	bl	8007e18 <_free_r>
 8008636:	2000      	movs	r0, #0
 8008638:	6360      	str	r0, [r4, #52]	; 0x34
 800863a:	e7bc      	b.n	80085b6 <__sflush_r+0x1a>
 800863c:	2301      	movs	r3, #1
 800863e:	0028      	movs	r0, r5
 8008640:	47b8      	blx	r7
 8008642:	1c43      	adds	r3, r0, #1
 8008644:	d1c6      	bne.n	80085d4 <__sflush_r+0x38>
 8008646:	682b      	ldr	r3, [r5, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d0c3      	beq.n	80085d4 <__sflush_r+0x38>
 800864c:	2b1d      	cmp	r3, #29
 800864e:	d001      	beq.n	8008654 <__sflush_r+0xb8>
 8008650:	2b16      	cmp	r3, #22
 8008652:	d101      	bne.n	8008658 <__sflush_r+0xbc>
 8008654:	602e      	str	r6, [r5, #0]
 8008656:	e7ad      	b.n	80085b4 <__sflush_r+0x18>
 8008658:	89a2      	ldrh	r2, [r4, #12]
 800865a:	2340      	movs	r3, #64	; 0x40
 800865c:	4313      	orrs	r3, r2
 800865e:	81a3      	strh	r3, [r4, #12]
 8008660:	e7a9      	b.n	80085b6 <__sflush_r+0x1a>
 8008662:	690e      	ldr	r6, [r1, #16]
 8008664:	2e00      	cmp	r6, #0
 8008666:	d0a5      	beq.n	80085b4 <__sflush_r+0x18>
 8008668:	680f      	ldr	r7, [r1, #0]
 800866a:	600e      	str	r6, [r1, #0]
 800866c:	1bba      	subs	r2, r7, r6
 800866e:	9201      	str	r2, [sp, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	079b      	lsls	r3, r3, #30
 8008674:	d100      	bne.n	8008678 <__sflush_r+0xdc>
 8008676:	694a      	ldr	r2, [r1, #20]
 8008678:	60a2      	str	r2, [r4, #8]
 800867a:	9b01      	ldr	r3, [sp, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	dd99      	ble.n	80085b4 <__sflush_r+0x18>
 8008680:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008682:	0032      	movs	r2, r6
 8008684:	001f      	movs	r7, r3
 8008686:	0028      	movs	r0, r5
 8008688:	9b01      	ldr	r3, [sp, #4]
 800868a:	6a21      	ldr	r1, [r4, #32]
 800868c:	47b8      	blx	r7
 800868e:	2800      	cmp	r0, #0
 8008690:	dc06      	bgt.n	80086a0 <__sflush_r+0x104>
 8008692:	2340      	movs	r3, #64	; 0x40
 8008694:	2001      	movs	r0, #1
 8008696:	89a2      	ldrh	r2, [r4, #12]
 8008698:	4240      	negs	r0, r0
 800869a:	4313      	orrs	r3, r2
 800869c:	81a3      	strh	r3, [r4, #12]
 800869e:	e78a      	b.n	80085b6 <__sflush_r+0x1a>
 80086a0:	9b01      	ldr	r3, [sp, #4]
 80086a2:	1836      	adds	r6, r6, r0
 80086a4:	1a1b      	subs	r3, r3, r0
 80086a6:	9301      	str	r3, [sp, #4]
 80086a8:	e7e7      	b.n	800867a <__sflush_r+0xde>
 80086aa:	46c0      	nop			; (mov r8, r8)
 80086ac:	dfbffffe 	.word	0xdfbffffe

080086b0 <_fflush_r>:
 80086b0:	690b      	ldr	r3, [r1, #16]
 80086b2:	b570      	push	{r4, r5, r6, lr}
 80086b4:	0005      	movs	r5, r0
 80086b6:	000c      	movs	r4, r1
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d102      	bne.n	80086c2 <_fflush_r+0x12>
 80086bc:	2500      	movs	r5, #0
 80086be:	0028      	movs	r0, r5
 80086c0:	bd70      	pop	{r4, r5, r6, pc}
 80086c2:	2800      	cmp	r0, #0
 80086c4:	d004      	beq.n	80086d0 <_fflush_r+0x20>
 80086c6:	6a03      	ldr	r3, [r0, #32]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d101      	bne.n	80086d0 <_fflush_r+0x20>
 80086cc:	f7ff fa88 	bl	8007be0 <__sinit>
 80086d0:	220c      	movs	r2, #12
 80086d2:	5ea3      	ldrsh	r3, [r4, r2]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d0f1      	beq.n	80086bc <_fflush_r+0xc>
 80086d8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086da:	07d2      	lsls	r2, r2, #31
 80086dc:	d404      	bmi.n	80086e8 <_fflush_r+0x38>
 80086de:	059b      	lsls	r3, r3, #22
 80086e0:	d402      	bmi.n	80086e8 <_fflush_r+0x38>
 80086e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086e4:	f7ff fb8c 	bl	8007e00 <__retarget_lock_acquire_recursive>
 80086e8:	0028      	movs	r0, r5
 80086ea:	0021      	movs	r1, r4
 80086ec:	f7ff ff56 	bl	800859c <__sflush_r>
 80086f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086f2:	0005      	movs	r5, r0
 80086f4:	07db      	lsls	r3, r3, #31
 80086f6:	d4e2      	bmi.n	80086be <_fflush_r+0xe>
 80086f8:	89a3      	ldrh	r3, [r4, #12]
 80086fa:	059b      	lsls	r3, r3, #22
 80086fc:	d4df      	bmi.n	80086be <_fflush_r+0xe>
 80086fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008700:	f7ff fb7f 	bl	8007e02 <__retarget_lock_release_recursive>
 8008704:	e7db      	b.n	80086be <_fflush_r+0xe>

08008706 <__swbuf_r>:
 8008706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008708:	0006      	movs	r6, r0
 800870a:	000d      	movs	r5, r1
 800870c:	0014      	movs	r4, r2
 800870e:	2800      	cmp	r0, #0
 8008710:	d004      	beq.n	800871c <__swbuf_r+0x16>
 8008712:	6a03      	ldr	r3, [r0, #32]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d101      	bne.n	800871c <__swbuf_r+0x16>
 8008718:	f7ff fa62 	bl	8007be0 <__sinit>
 800871c:	69a3      	ldr	r3, [r4, #24]
 800871e:	60a3      	str	r3, [r4, #8]
 8008720:	89a3      	ldrh	r3, [r4, #12]
 8008722:	071b      	lsls	r3, r3, #28
 8008724:	d528      	bpl.n	8008778 <__swbuf_r+0x72>
 8008726:	6923      	ldr	r3, [r4, #16]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d025      	beq.n	8008778 <__swbuf_r+0x72>
 800872c:	6923      	ldr	r3, [r4, #16]
 800872e:	6820      	ldr	r0, [r4, #0]
 8008730:	b2ef      	uxtb	r7, r5
 8008732:	1ac0      	subs	r0, r0, r3
 8008734:	6963      	ldr	r3, [r4, #20]
 8008736:	b2ed      	uxtb	r5, r5
 8008738:	4283      	cmp	r3, r0
 800873a:	dc05      	bgt.n	8008748 <__swbuf_r+0x42>
 800873c:	0021      	movs	r1, r4
 800873e:	0030      	movs	r0, r6
 8008740:	f7ff ffb6 	bl	80086b0 <_fflush_r>
 8008744:	2800      	cmp	r0, #0
 8008746:	d11d      	bne.n	8008784 <__swbuf_r+0x7e>
 8008748:	68a3      	ldr	r3, [r4, #8]
 800874a:	3001      	adds	r0, #1
 800874c:	3b01      	subs	r3, #1
 800874e:	60a3      	str	r3, [r4, #8]
 8008750:	6823      	ldr	r3, [r4, #0]
 8008752:	1c5a      	adds	r2, r3, #1
 8008754:	6022      	str	r2, [r4, #0]
 8008756:	701f      	strb	r7, [r3, #0]
 8008758:	6963      	ldr	r3, [r4, #20]
 800875a:	4283      	cmp	r3, r0
 800875c:	d004      	beq.n	8008768 <__swbuf_r+0x62>
 800875e:	89a3      	ldrh	r3, [r4, #12]
 8008760:	07db      	lsls	r3, r3, #31
 8008762:	d507      	bpl.n	8008774 <__swbuf_r+0x6e>
 8008764:	2d0a      	cmp	r5, #10
 8008766:	d105      	bne.n	8008774 <__swbuf_r+0x6e>
 8008768:	0021      	movs	r1, r4
 800876a:	0030      	movs	r0, r6
 800876c:	f7ff ffa0 	bl	80086b0 <_fflush_r>
 8008770:	2800      	cmp	r0, #0
 8008772:	d107      	bne.n	8008784 <__swbuf_r+0x7e>
 8008774:	0028      	movs	r0, r5
 8008776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008778:	0021      	movs	r1, r4
 800877a:	0030      	movs	r0, r6
 800877c:	f000 f806 	bl	800878c <__swsetup_r>
 8008780:	2800      	cmp	r0, #0
 8008782:	d0d3      	beq.n	800872c <__swbuf_r+0x26>
 8008784:	2501      	movs	r5, #1
 8008786:	426d      	negs	r5, r5
 8008788:	e7f4      	b.n	8008774 <__swbuf_r+0x6e>
	...

0800878c <__swsetup_r>:
 800878c:	4b30      	ldr	r3, [pc, #192]	; (8008850 <__swsetup_r+0xc4>)
 800878e:	b570      	push	{r4, r5, r6, lr}
 8008790:	0005      	movs	r5, r0
 8008792:	6818      	ldr	r0, [r3, #0]
 8008794:	000c      	movs	r4, r1
 8008796:	2800      	cmp	r0, #0
 8008798:	d004      	beq.n	80087a4 <__swsetup_r+0x18>
 800879a:	6a03      	ldr	r3, [r0, #32]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d101      	bne.n	80087a4 <__swsetup_r+0x18>
 80087a0:	f7ff fa1e 	bl	8007be0 <__sinit>
 80087a4:	230c      	movs	r3, #12
 80087a6:	5ee2      	ldrsh	r2, [r4, r3]
 80087a8:	b293      	uxth	r3, r2
 80087aa:	0711      	lsls	r1, r2, #28
 80087ac:	d423      	bmi.n	80087f6 <__swsetup_r+0x6a>
 80087ae:	06d9      	lsls	r1, r3, #27
 80087b0:	d407      	bmi.n	80087c2 <__swsetup_r+0x36>
 80087b2:	2309      	movs	r3, #9
 80087b4:	2001      	movs	r0, #1
 80087b6:	602b      	str	r3, [r5, #0]
 80087b8:	3337      	adds	r3, #55	; 0x37
 80087ba:	4313      	orrs	r3, r2
 80087bc:	81a3      	strh	r3, [r4, #12]
 80087be:	4240      	negs	r0, r0
 80087c0:	bd70      	pop	{r4, r5, r6, pc}
 80087c2:	075b      	lsls	r3, r3, #29
 80087c4:	d513      	bpl.n	80087ee <__swsetup_r+0x62>
 80087c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087c8:	2900      	cmp	r1, #0
 80087ca:	d008      	beq.n	80087de <__swsetup_r+0x52>
 80087cc:	0023      	movs	r3, r4
 80087ce:	3344      	adds	r3, #68	; 0x44
 80087d0:	4299      	cmp	r1, r3
 80087d2:	d002      	beq.n	80087da <__swsetup_r+0x4e>
 80087d4:	0028      	movs	r0, r5
 80087d6:	f7ff fb1f 	bl	8007e18 <_free_r>
 80087da:	2300      	movs	r3, #0
 80087dc:	6363      	str	r3, [r4, #52]	; 0x34
 80087de:	2224      	movs	r2, #36	; 0x24
 80087e0:	89a3      	ldrh	r3, [r4, #12]
 80087e2:	4393      	bics	r3, r2
 80087e4:	81a3      	strh	r3, [r4, #12]
 80087e6:	2300      	movs	r3, #0
 80087e8:	6063      	str	r3, [r4, #4]
 80087ea:	6923      	ldr	r3, [r4, #16]
 80087ec:	6023      	str	r3, [r4, #0]
 80087ee:	2308      	movs	r3, #8
 80087f0:	89a2      	ldrh	r2, [r4, #12]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	81a3      	strh	r3, [r4, #12]
 80087f6:	6923      	ldr	r3, [r4, #16]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10b      	bne.n	8008814 <__swsetup_r+0x88>
 80087fc:	21a0      	movs	r1, #160	; 0xa0
 80087fe:	2280      	movs	r2, #128	; 0x80
 8008800:	89a3      	ldrh	r3, [r4, #12]
 8008802:	0089      	lsls	r1, r1, #2
 8008804:	0092      	lsls	r2, r2, #2
 8008806:	400b      	ands	r3, r1
 8008808:	4293      	cmp	r3, r2
 800880a:	d003      	beq.n	8008814 <__swsetup_r+0x88>
 800880c:	0021      	movs	r1, r4
 800880e:	0028      	movs	r0, r5
 8008810:	f000 f866 	bl	80088e0 <__smakebuf_r>
 8008814:	220c      	movs	r2, #12
 8008816:	5ea3      	ldrsh	r3, [r4, r2]
 8008818:	2001      	movs	r0, #1
 800881a:	001a      	movs	r2, r3
 800881c:	b299      	uxth	r1, r3
 800881e:	4002      	ands	r2, r0
 8008820:	4203      	tst	r3, r0
 8008822:	d00f      	beq.n	8008844 <__swsetup_r+0xb8>
 8008824:	2200      	movs	r2, #0
 8008826:	60a2      	str	r2, [r4, #8]
 8008828:	6962      	ldr	r2, [r4, #20]
 800882a:	4252      	negs	r2, r2
 800882c:	61a2      	str	r2, [r4, #24]
 800882e:	2000      	movs	r0, #0
 8008830:	6922      	ldr	r2, [r4, #16]
 8008832:	4282      	cmp	r2, r0
 8008834:	d1c4      	bne.n	80087c0 <__swsetup_r+0x34>
 8008836:	0609      	lsls	r1, r1, #24
 8008838:	d5c2      	bpl.n	80087c0 <__swsetup_r+0x34>
 800883a:	2240      	movs	r2, #64	; 0x40
 800883c:	4313      	orrs	r3, r2
 800883e:	81a3      	strh	r3, [r4, #12]
 8008840:	3801      	subs	r0, #1
 8008842:	e7bd      	b.n	80087c0 <__swsetup_r+0x34>
 8008844:	0788      	lsls	r0, r1, #30
 8008846:	d400      	bmi.n	800884a <__swsetup_r+0xbe>
 8008848:	6962      	ldr	r2, [r4, #20]
 800884a:	60a2      	str	r2, [r4, #8]
 800884c:	e7ef      	b.n	800882e <__swsetup_r+0xa2>
 800884e:	46c0      	nop			; (mov r8, r8)
 8008850:	20000068 	.word	0x20000068

08008854 <_sbrk_r>:
 8008854:	2300      	movs	r3, #0
 8008856:	b570      	push	{r4, r5, r6, lr}
 8008858:	4d06      	ldr	r5, [pc, #24]	; (8008874 <_sbrk_r+0x20>)
 800885a:	0004      	movs	r4, r0
 800885c:	0008      	movs	r0, r1
 800885e:	602b      	str	r3, [r5, #0]
 8008860:	f7f8 ff64 	bl	800172c <_sbrk>
 8008864:	1c43      	adds	r3, r0, #1
 8008866:	d103      	bne.n	8008870 <_sbrk_r+0x1c>
 8008868:	682b      	ldr	r3, [r5, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d000      	beq.n	8008870 <_sbrk_r+0x1c>
 800886e:	6023      	str	r3, [r4, #0]
 8008870:	bd70      	pop	{r4, r5, r6, pc}
 8008872:	46c0      	nop			; (mov r8, r8)
 8008874:	20001278 	.word	0x20001278

08008878 <memchr>:
 8008878:	b2c9      	uxtb	r1, r1
 800887a:	1882      	adds	r2, r0, r2
 800887c:	4290      	cmp	r0, r2
 800887e:	d101      	bne.n	8008884 <memchr+0xc>
 8008880:	2000      	movs	r0, #0
 8008882:	4770      	bx	lr
 8008884:	7803      	ldrb	r3, [r0, #0]
 8008886:	428b      	cmp	r3, r1
 8008888:	d0fb      	beq.n	8008882 <memchr+0xa>
 800888a:	3001      	adds	r0, #1
 800888c:	e7f6      	b.n	800887c <memchr+0x4>
	...

08008890 <__swhatbuf_r>:
 8008890:	b570      	push	{r4, r5, r6, lr}
 8008892:	000e      	movs	r6, r1
 8008894:	001d      	movs	r5, r3
 8008896:	230e      	movs	r3, #14
 8008898:	5ec9      	ldrsh	r1, [r1, r3]
 800889a:	0014      	movs	r4, r2
 800889c:	b096      	sub	sp, #88	; 0x58
 800889e:	2900      	cmp	r1, #0
 80088a0:	da0c      	bge.n	80088bc <__swhatbuf_r+0x2c>
 80088a2:	89b2      	ldrh	r2, [r6, #12]
 80088a4:	2380      	movs	r3, #128	; 0x80
 80088a6:	0011      	movs	r1, r2
 80088a8:	4019      	ands	r1, r3
 80088aa:	421a      	tst	r2, r3
 80088ac:	d013      	beq.n	80088d6 <__swhatbuf_r+0x46>
 80088ae:	2100      	movs	r1, #0
 80088b0:	3b40      	subs	r3, #64	; 0x40
 80088b2:	2000      	movs	r0, #0
 80088b4:	6029      	str	r1, [r5, #0]
 80088b6:	6023      	str	r3, [r4, #0]
 80088b8:	b016      	add	sp, #88	; 0x58
 80088ba:	bd70      	pop	{r4, r5, r6, pc}
 80088bc:	466a      	mov	r2, sp
 80088be:	f000 f84d 	bl	800895c <_fstat_r>
 80088c2:	2800      	cmp	r0, #0
 80088c4:	dbed      	blt.n	80088a2 <__swhatbuf_r+0x12>
 80088c6:	23f0      	movs	r3, #240	; 0xf0
 80088c8:	9901      	ldr	r1, [sp, #4]
 80088ca:	021b      	lsls	r3, r3, #8
 80088cc:	4019      	ands	r1, r3
 80088ce:	4b03      	ldr	r3, [pc, #12]	; (80088dc <__swhatbuf_r+0x4c>)
 80088d0:	18c9      	adds	r1, r1, r3
 80088d2:	424b      	negs	r3, r1
 80088d4:	4159      	adcs	r1, r3
 80088d6:	2380      	movs	r3, #128	; 0x80
 80088d8:	00db      	lsls	r3, r3, #3
 80088da:	e7ea      	b.n	80088b2 <__swhatbuf_r+0x22>
 80088dc:	ffffe000 	.word	0xffffe000

080088e0 <__smakebuf_r>:
 80088e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088e2:	2602      	movs	r6, #2
 80088e4:	898b      	ldrh	r3, [r1, #12]
 80088e6:	0005      	movs	r5, r0
 80088e8:	000c      	movs	r4, r1
 80088ea:	4233      	tst	r3, r6
 80088ec:	d006      	beq.n	80088fc <__smakebuf_r+0x1c>
 80088ee:	0023      	movs	r3, r4
 80088f0:	3347      	adds	r3, #71	; 0x47
 80088f2:	6023      	str	r3, [r4, #0]
 80088f4:	6123      	str	r3, [r4, #16]
 80088f6:	2301      	movs	r3, #1
 80088f8:	6163      	str	r3, [r4, #20]
 80088fa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80088fc:	466a      	mov	r2, sp
 80088fe:	ab01      	add	r3, sp, #4
 8008900:	f7ff ffc6 	bl	8008890 <__swhatbuf_r>
 8008904:	9900      	ldr	r1, [sp, #0]
 8008906:	0007      	movs	r7, r0
 8008908:	0028      	movs	r0, r5
 800890a:	f7ff faf1 	bl	8007ef0 <_malloc_r>
 800890e:	2800      	cmp	r0, #0
 8008910:	d108      	bne.n	8008924 <__smakebuf_r+0x44>
 8008912:	220c      	movs	r2, #12
 8008914:	5ea3      	ldrsh	r3, [r4, r2]
 8008916:	059a      	lsls	r2, r3, #22
 8008918:	d4ef      	bmi.n	80088fa <__smakebuf_r+0x1a>
 800891a:	2203      	movs	r2, #3
 800891c:	4393      	bics	r3, r2
 800891e:	431e      	orrs	r6, r3
 8008920:	81a6      	strh	r6, [r4, #12]
 8008922:	e7e4      	b.n	80088ee <__smakebuf_r+0xe>
 8008924:	2380      	movs	r3, #128	; 0x80
 8008926:	89a2      	ldrh	r2, [r4, #12]
 8008928:	6020      	str	r0, [r4, #0]
 800892a:	4313      	orrs	r3, r2
 800892c:	81a3      	strh	r3, [r4, #12]
 800892e:	9b00      	ldr	r3, [sp, #0]
 8008930:	6120      	str	r0, [r4, #16]
 8008932:	6163      	str	r3, [r4, #20]
 8008934:	9b01      	ldr	r3, [sp, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00c      	beq.n	8008954 <__smakebuf_r+0x74>
 800893a:	0028      	movs	r0, r5
 800893c:	230e      	movs	r3, #14
 800893e:	5ee1      	ldrsh	r1, [r4, r3]
 8008940:	f000 f81e 	bl	8008980 <_isatty_r>
 8008944:	2800      	cmp	r0, #0
 8008946:	d005      	beq.n	8008954 <__smakebuf_r+0x74>
 8008948:	2303      	movs	r3, #3
 800894a:	89a2      	ldrh	r2, [r4, #12]
 800894c:	439a      	bics	r2, r3
 800894e:	3b02      	subs	r3, #2
 8008950:	4313      	orrs	r3, r2
 8008952:	81a3      	strh	r3, [r4, #12]
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	433b      	orrs	r3, r7
 8008958:	81a3      	strh	r3, [r4, #12]
 800895a:	e7ce      	b.n	80088fa <__smakebuf_r+0x1a>

0800895c <_fstat_r>:
 800895c:	2300      	movs	r3, #0
 800895e:	b570      	push	{r4, r5, r6, lr}
 8008960:	4d06      	ldr	r5, [pc, #24]	; (800897c <_fstat_r+0x20>)
 8008962:	0004      	movs	r4, r0
 8008964:	0008      	movs	r0, r1
 8008966:	0011      	movs	r1, r2
 8008968:	602b      	str	r3, [r5, #0]
 800896a:	f7f8 febc 	bl	80016e6 <_fstat>
 800896e:	1c43      	adds	r3, r0, #1
 8008970:	d103      	bne.n	800897a <_fstat_r+0x1e>
 8008972:	682b      	ldr	r3, [r5, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d000      	beq.n	800897a <_fstat_r+0x1e>
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	bd70      	pop	{r4, r5, r6, pc}
 800897c:	20001278 	.word	0x20001278

08008980 <_isatty_r>:
 8008980:	2300      	movs	r3, #0
 8008982:	b570      	push	{r4, r5, r6, lr}
 8008984:	4d06      	ldr	r5, [pc, #24]	; (80089a0 <_isatty_r+0x20>)
 8008986:	0004      	movs	r4, r0
 8008988:	0008      	movs	r0, r1
 800898a:	602b      	str	r3, [r5, #0]
 800898c:	f7f8 feb9 	bl	8001702 <_isatty>
 8008990:	1c43      	adds	r3, r0, #1
 8008992:	d103      	bne.n	800899c <_isatty_r+0x1c>
 8008994:	682b      	ldr	r3, [r5, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d000      	beq.n	800899c <_isatty_r+0x1c>
 800899a:	6023      	str	r3, [r4, #0]
 800899c:	bd70      	pop	{r4, r5, r6, pc}
 800899e:	46c0      	nop			; (mov r8, r8)
 80089a0:	20001278 	.word	0x20001278

080089a4 <_init>:
 80089a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a6:	46c0      	nop			; (mov r8, r8)
 80089a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089aa:	bc08      	pop	{r3}
 80089ac:	469e      	mov	lr, r3
 80089ae:	4770      	bx	lr

080089b0 <_fini>:
 80089b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b2:	46c0      	nop			; (mov r8, r8)
 80089b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089b6:	bc08      	pop	{r3}
 80089b8:	469e      	mov	lr, r3
 80089ba:	4770      	bx	lr
