
PROJET_ESE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a54  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005b0c  08005b0c  00015b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c24  08005c24  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08005c24  08005c24  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c24  08005c24  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c24  08005c24  00015c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c28  08005c28  00015c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  20000068  08005c94  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  08005c94  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012944  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002af6  00000000  00000000  00032a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  00035510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cff  00000000  00000000  000365b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000042b1  00000000  00000000  000372b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001541c  00000000  00000000  0003b568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a232  00000000  00000000  00050984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042ec  00000000  00000000  000eabb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000eeea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000068 	.word	0x20000068
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005af4 	.word	0x08005af4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000006c 	.word	0x2000006c
 80000fc:	08005af4 	.word	0x08005af4

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	0018      	movs	r0, r3
 800040a:	230c      	movs	r3, #12
 800040c:	001a      	movs	r2, r3
 800040e:	2100      	movs	r1, #0
 8000410:	f004 fd28 	bl	8004e64 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000414:	4b2d      	ldr	r3, [pc, #180]	; (80004cc <MX_ADC1_Init+0xcc>)
 8000416:	4a2e      	ldr	r2, [pc, #184]	; (80004d0 <MX_ADC1_Init+0xd0>)
 8000418:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800041a:	4b2c      	ldr	r3, [pc, #176]	; (80004cc <MX_ADC1_Init+0xcc>)
 800041c:	2280      	movs	r2, #128	; 0x80
 800041e:	05d2      	lsls	r2, r2, #23
 8000420:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000422:	4b2a      	ldr	r3, [pc, #168]	; (80004cc <MX_ADC1_Init+0xcc>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000428:	4b28      	ldr	r3, [pc, #160]	; (80004cc <MX_ADC1_Init+0xcc>)
 800042a:	2200      	movs	r2, #0
 800042c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800042e:	4b27      	ldr	r3, [pc, #156]	; (80004cc <MX_ADC1_Init+0xcc>)
 8000430:	2200      	movs	r2, #0
 8000432:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000434:	4b25      	ldr	r3, [pc, #148]	; (80004cc <MX_ADC1_Init+0xcc>)
 8000436:	2204      	movs	r2, #4
 8000438:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800043a:	4b24      	ldr	r3, [pc, #144]	; (80004cc <MX_ADC1_Init+0xcc>)
 800043c:	2200      	movs	r2, #0
 800043e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000440:	4b22      	ldr	r3, [pc, #136]	; (80004cc <MX_ADC1_Init+0xcc>)
 8000442:	2200      	movs	r2, #0
 8000444:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000446:	4b21      	ldr	r3, [pc, #132]	; (80004cc <MX_ADC1_Init+0xcc>)
 8000448:	2200      	movs	r2, #0
 800044a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800044c:	4b1f      	ldr	r3, [pc, #124]	; (80004cc <MX_ADC1_Init+0xcc>)
 800044e:	2201      	movs	r2, #1
 8000450:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000452:	4b1e      	ldr	r3, [pc, #120]	; (80004cc <MX_ADC1_Init+0xcc>)
 8000454:	2220      	movs	r2, #32
 8000456:	2100      	movs	r1, #0
 8000458:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800045a:	4b1c      	ldr	r3, [pc, #112]	; (80004cc <MX_ADC1_Init+0xcc>)
 800045c:	2200      	movs	r2, #0
 800045e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <MX_ADC1_Init+0xcc>)
 8000462:	2200      	movs	r2, #0
 8000464:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000466:	4b19      	ldr	r3, [pc, #100]	; (80004cc <MX_ADC1_Init+0xcc>)
 8000468:	222c      	movs	r2, #44	; 0x2c
 800046a:	2100      	movs	r1, #0
 800046c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800046e:	4b17      	ldr	r3, [pc, #92]	; (80004cc <MX_ADC1_Init+0xcc>)
 8000470:	2200      	movs	r2, #0
 8000472:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000474:	4b15      	ldr	r3, [pc, #84]	; (80004cc <MX_ADC1_Init+0xcc>)
 8000476:	2200      	movs	r2, #0
 8000478:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800047a:	4b14      	ldr	r3, [pc, #80]	; (80004cc <MX_ADC1_Init+0xcc>)
 800047c:	2200      	movs	r2, #0
 800047e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <MX_ADC1_Init+0xcc>)
 8000482:	223c      	movs	r2, #60	; 0x3c
 8000484:	2100      	movs	r1, #0
 8000486:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000488:	4b10      	ldr	r3, [pc, #64]	; (80004cc <MX_ADC1_Init+0xcc>)
 800048a:	2200      	movs	r2, #0
 800048c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800048e:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_ADC1_Init+0xcc>)
 8000490:	0018      	movs	r0, r3
 8000492:	f001 fa3b 	bl	800190c <HAL_ADC_Init>
 8000496:	1e03      	subs	r3, r0, #0
 8000498:	d001      	beq.n	800049e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800049a:	f000 f977 	bl	800078c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2201      	movs	r2, #1
 80004a2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2200      	movs	r2, #0
 80004a8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004b0:	1d3a      	adds	r2, r7, #4
 80004b2:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_ADC1_Init+0xcc>)
 80004b4:	0011      	movs	r1, r2
 80004b6:	0018      	movs	r0, r3
 80004b8:	f001 fbd0 	bl	8001c5c <HAL_ADC_ConfigChannel>
 80004bc:	1e03      	subs	r3, r0, #0
 80004be:	d001      	beq.n	80004c4 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80004c0:	f000 f964 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004c4:	46c0      	nop			; (mov r8, r8)
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b004      	add	sp, #16
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	20000084 	.word	0x20000084
 80004d0:	40012400 	.word	0x40012400

080004d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b08b      	sub	sp, #44	; 0x2c
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004dc:	2414      	movs	r4, #20
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	0018      	movs	r0, r3
 80004e2:	2314      	movs	r3, #20
 80004e4:	001a      	movs	r2, r3
 80004e6:	2100      	movs	r1, #0
 80004e8:	f004 fcbc 	bl	8004e64 <memset>
  if(adcHandle->Instance==ADC1)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a18      	ldr	r2, [pc, #96]	; (8000554 <HAL_ADC_MspInit+0x80>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d129      	bne.n	800054a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80004f6:	4b18      	ldr	r3, [pc, #96]	; (8000558 <HAL_ADC_MspInit+0x84>)
 80004f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <HAL_ADC_MspInit+0x84>)
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	0349      	lsls	r1, r1, #13
 8000500:	430a      	orrs	r2, r1
 8000502:	641a      	str	r2, [r3, #64]	; 0x40
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <HAL_ADC_MspInit+0x84>)
 8000506:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	035b      	lsls	r3, r3, #13
 800050c:	4013      	ands	r3, r2
 800050e:	613b      	str	r3, [r7, #16]
 8000510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <HAL_ADC_MspInit+0x84>)
 8000514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000516:	4b10      	ldr	r3, [pc, #64]	; (8000558 <HAL_ADC_MspInit+0x84>)
 8000518:	2101      	movs	r1, #1
 800051a:	430a      	orrs	r2, r1
 800051c:	635a      	str	r2, [r3, #52]	; 0x34
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <HAL_ADC_MspInit+0x84>)
 8000520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000522:	2201      	movs	r2, #1
 8000524:	4013      	ands	r3, r2
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_IN0_BAT_LVL_Pin;
 800052a:	193b      	adds	r3, r7, r4
 800052c:	2201      	movs	r2, #1
 800052e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000530:	193b      	adds	r3, r7, r4
 8000532:	2203      	movs	r2, #3
 8000534:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	193b      	adds	r3, r7, r4
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC1_IN0_BAT_LVL_GPIO_Port, &GPIO_InitStruct);
 800053c:	193a      	adds	r2, r7, r4
 800053e:	23a0      	movs	r3, #160	; 0xa0
 8000540:	05db      	lsls	r3, r3, #23
 8000542:	0011      	movs	r1, r2
 8000544:	0018      	movs	r0, r3
 8000546:	f001 fe15 	bl	8002174 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b00b      	add	sp, #44	; 0x2c
 8000550:	bd90      	pop	{r4, r7, pc}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	40012400 	.word	0x40012400
 8000558:	40021000 	.word	0x40021000

0800055c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b08b      	sub	sp, #44	; 0x2c
 8000560:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	2414      	movs	r4, #20
 8000564:	193b      	adds	r3, r7, r4
 8000566:	0018      	movs	r0, r3
 8000568:	2314      	movs	r3, #20
 800056a:	001a      	movs	r2, r3
 800056c:	2100      	movs	r1, #0
 800056e:	f004 fc79 	bl	8004e64 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000572:	4b37      	ldr	r3, [pc, #220]	; (8000650 <MX_GPIO_Init+0xf4>)
 8000574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000576:	4b36      	ldr	r3, [pc, #216]	; (8000650 <MX_GPIO_Init+0xf4>)
 8000578:	2120      	movs	r1, #32
 800057a:	430a      	orrs	r2, r1
 800057c:	635a      	str	r2, [r3, #52]	; 0x34
 800057e:	4b34      	ldr	r3, [pc, #208]	; (8000650 <MX_GPIO_Init+0xf4>)
 8000580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000582:	2220      	movs	r2, #32
 8000584:	4013      	ands	r3, r2
 8000586:	613b      	str	r3, [r7, #16]
 8000588:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058a:	4b31      	ldr	r3, [pc, #196]	; (8000650 <MX_GPIO_Init+0xf4>)
 800058c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800058e:	4b30      	ldr	r3, [pc, #192]	; (8000650 <MX_GPIO_Init+0xf4>)
 8000590:	2104      	movs	r1, #4
 8000592:	430a      	orrs	r2, r1
 8000594:	635a      	str	r2, [r3, #52]	; 0x34
 8000596:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <MX_GPIO_Init+0xf4>)
 8000598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800059a:	2204      	movs	r2, #4
 800059c:	4013      	ands	r3, r2
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	4b2b      	ldr	r3, [pc, #172]	; (8000650 <MX_GPIO_Init+0xf4>)
 80005a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005a6:	4b2a      	ldr	r3, [pc, #168]	; (8000650 <MX_GPIO_Init+0xf4>)
 80005a8:	2101      	movs	r1, #1
 80005aa:	430a      	orrs	r2, r1
 80005ac:	635a      	str	r2, [r3, #52]	; 0x34
 80005ae:	4b28      	ldr	r3, [pc, #160]	; (8000650 <MX_GPIO_Init+0xf4>)
 80005b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005b2:	2201      	movs	r2, #1
 80005b4:	4013      	ands	r3, r2
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ba:	4b25      	ldr	r3, [pc, #148]	; (8000650 <MX_GPIO_Init+0xf4>)
 80005bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005be:	4b24      	ldr	r3, [pc, #144]	; (8000650 <MX_GPIO_Init+0xf4>)
 80005c0:	2102      	movs	r1, #2
 80005c2:	430a      	orrs	r2, r1
 80005c4:	635a      	str	r2, [r3, #52]	; 0x34
 80005c6:	4b22      	ldr	r3, [pc, #136]	; (8000650 <MX_GPIO_Init+0xf4>)
 80005c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ca:	2202      	movs	r2, #2
 80005cc:	4013      	ands	r3, r2
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005d2:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <MX_GPIO_Init+0xf4>)
 80005d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005d6:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <MX_GPIO_Init+0xf4>)
 80005d8:	2108      	movs	r1, #8
 80005da:	430a      	orrs	r2, r1
 80005dc:	635a      	str	r2, [r3, #52]	; 0x34
 80005de:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <MX_GPIO_Init+0xf4>)
 80005e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005e2:	2208      	movs	r2, #8
 80005e4:	4013      	ands	r3, r2
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEV_EN_Pin|M_EN_Pin, GPIO_PIN_RESET);
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <MX_GPIO_Init+0xf8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	2106      	movs	r1, #6
 80005f0:	0018      	movs	r0, r3
 80005f2:	f001 ff23 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_B_Pin, GPIO_PIN_SET);
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <MX_GPIO_Init+0xf8>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	2118      	movs	r1, #24
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 ff1d 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = V_BORDURE_R_Pin|BUMPER_F_Pin|BUMPER_B_Pin|BUMPER_R_Pin
 8000602:	193b      	adds	r3, r7, r4
 8000604:	4a14      	ldr	r2, [pc, #80]	; (8000658 <MX_GPIO_Init+0xfc>)
 8000606:	601a      	str	r2, [r3, #0]
                          |BUMPER_L_Pin|V_BORDURE_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000608:	193b      	adds	r3, r7, r4
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800060e:	193b      	adds	r3, r7, r4
 8000610:	2202      	movs	r2, #2
 8000612:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000614:	193b      	adds	r3, r7, r4
 8000616:	4a0f      	ldr	r2, [pc, #60]	; (8000654 <MX_GPIO_Init+0xf8>)
 8000618:	0019      	movs	r1, r3
 800061a:	0010      	movs	r0, r2
 800061c:	f001 fdaa 	bl	8002174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DEV_EN_Pin|M_EN_Pin|LED_R_Pin|LED_B_Pin;
 8000620:	0021      	movs	r1, r4
 8000622:	187b      	adds	r3, r7, r1
 8000624:	221e      	movs	r2, #30
 8000626:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2201      	movs	r2, #1
 800062c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063a:	187b      	adds	r3, r7, r1
 800063c:	4a05      	ldr	r2, [pc, #20]	; (8000654 <MX_GPIO_Init+0xf8>)
 800063e:	0019      	movs	r1, r3
 8000640:	0010      	movs	r0, r2
 8000642:	f001 fd97 	bl	8002174 <HAL_GPIO_Init>

}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b00b      	add	sp, #44	; 0x2c
 800064c:	bd90      	pop	{r4, r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	40021000 	.word	0x40021000
 8000654:	50000400 	.word	0x50000400
 8000658:	000003e1 	.word	0x000003e1

0800065c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000664:	2301      	movs	r3, #1
 8000666:	425b      	negs	r3, r3
 8000668:	1d39      	adds	r1, r7, #4
 800066a:	4804      	ldr	r0, [pc, #16]	; (800067c <__io_putchar+0x20>)
 800066c:	2201      	movs	r2, #1
 800066e:	f003 fdc7 	bl	8004200 <HAL_UART_Transmit>
	return chr;
 8000672:	687b      	ldr	r3, [r7, #4]
}
 8000674:	0018      	movs	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	b002      	add	sp, #8
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200002b4 	.word	0x200002b4

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f000 ff9a 	bl	80015bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f82c 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f7ff ff66 	bl	800055c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000690:	f7ff feb6 	bl	8000400 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000694:	f000 f964 	bl	8000960 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000698:	f000 f9cc 	bl	8000a34 <MX_TIM3_Init>
  MX_TIM14_Init();
 800069c:	f000 fa2e 	bl	8000afc <MX_TIM14_Init>
  MX_TIM15_Init();
 80006a0:	f000 fa7c 	bl	8000b9c <MX_TIM15_Init>
  MX_TIM16_Init();
 80006a4:	f000 fb3e 	bl	8000d24 <MX_TIM16_Init>
  MX_TIM17_Init();
 80006a8:	f000 fbc4 	bl	8000e34 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 80006ac:	f000 fe12 	bl	80012d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006b0:	f000 fe62 	bl	8001378 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //setMotorSpeedFwd(&motor_left, 20);
  //__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2,²&																																																												&																																																																																																																							 800);
  printf("Start\n\r");
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <main+0x5c>)
 80006b6:	0018      	movs	r0, r3
 80006b8:	f004 fb78 	bl	8004dac <iprintf>
//  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
//

  while (1)
  {
	  HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <main+0x60>)
 80006be:	2110      	movs	r1, #16
 80006c0:	0018      	movs	r0, r3
 80006c2:	f001 fed8 	bl	8002476 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <main+0x60>)
 80006c8:	2108      	movs	r1, #8
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 fed3 	bl	8002476 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80006d0:	23fa      	movs	r3, #250	; 0xfa
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f000 fff7 	bl	80016c8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 80006da:	e7ef      	b.n	80006bc <main+0x3c>
 80006dc:	08005b0c 	.word	0x08005b0c
 80006e0:	50000400 	.word	0x50000400

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b093      	sub	sp, #76	; 0x4c
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	2414      	movs	r4, #20
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	0018      	movs	r0, r3
 80006f0:	2334      	movs	r3, #52	; 0x34
 80006f2:	001a      	movs	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f004 fbb5 	bl	8004e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	0018      	movs	r0, r3
 80006fe:	2310      	movs	r3, #16
 8000700:	001a      	movs	r2, r3
 8000702:	2100      	movs	r1, #0
 8000704:	f004 fbae 	bl	8004e64 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	0018      	movs	r0, r3
 800070e:	f001 fecd 	bl	80024ac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000712:	193b      	adds	r3, r7, r4
 8000714:	2201      	movs	r2, #1
 8000716:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	0252      	lsls	r2, r2, #9
 800071e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	0021      	movs	r1, r4
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2202      	movs	r2, #2
 8000726:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2203      	movs	r2, #3
 800072c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2200      	movs	r2, #0
 8000732:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2210      	movs	r2, #16
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	0292      	lsls	r2, r2, #10
 8000740:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	0592      	lsls	r2, r2, #22
 8000748:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	187b      	adds	r3, r7, r1
 800074c:	0018      	movs	r0, r3
 800074e:	f001 fef9 	bl	8002544 <HAL_RCC_OscConfig>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000756:	f000 f819 	bl	800078c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2207      	movs	r2, #7
 800075e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2202      	movs	r2, #2
 8000764:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2102      	movs	r1, #2
 8000776:	0018      	movs	r0, r3
 8000778:	f002 f9f4 	bl	8002b64 <HAL_RCC_ClockConfig>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000780:	f000 f804 	bl	800078c <Error_Handler>
  }
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b013      	add	sp, #76	; 0x4c
 800078a:	bd90      	pop	{r4, r7, pc}

0800078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <Error_Handler+0x18>)
 8000792:	2201      	movs	r2, #1
 8000794:	2108      	movs	r1, #8
 8000796:	0018      	movs	r0, r3
 8000798:	f001 fe50 	bl	800243c <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	46c0      	nop			; (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <Error_Handler+0x14>
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	50000400 	.word	0x50000400

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <HAL_MspInit+0x44>)
 80007b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <HAL_MspInit+0x44>)
 80007b4:	2101      	movs	r1, #1
 80007b6:	430a      	orrs	r2, r1
 80007b8:	641a      	str	r2, [r3, #64]	; 0x40
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <HAL_MspInit+0x44>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	2201      	movs	r2, #1
 80007c0:	4013      	ands	r3, r2
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <HAL_MspInit+0x44>)
 80007c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <HAL_MspInit+0x44>)
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	0549      	lsls	r1, r1, #21
 80007d0:	430a      	orrs	r2, r1
 80007d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_MspInit+0x44>)
 80007d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	055b      	lsls	r3, r3, #21
 80007dc:	4013      	ands	r3, r2
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b002      	add	sp, #8
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	40021000 	.word	0x40021000

080007f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <NMI_Handler+0x4>

080007f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <HardFault_Handler+0x4>

080007fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000814:	f000 ff3c 	bl	8001690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b086      	sub	sp, #24
 8000822:	af00      	add	r7, sp, #0
 8000824:	60f8      	str	r0, [r7, #12]
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	e00a      	b.n	8000846 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000830:	e000      	b.n	8000834 <_read+0x16>
 8000832:	bf00      	nop
 8000834:	0001      	movs	r1, r0
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	1c5a      	adds	r2, r3, #1
 800083a:	60ba      	str	r2, [r7, #8]
 800083c:	b2ca      	uxtb	r2, r1
 800083e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	3301      	adds	r3, #1
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	697a      	ldr	r2, [r7, #20]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	429a      	cmp	r2, r3
 800084c:	dbf0      	blt.n	8000830 <_read+0x12>
  }

  return len;
 800084e:	687b      	ldr	r3, [r7, #4]
}
 8000850:	0018      	movs	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	b006      	add	sp, #24
 8000856:	bd80      	pop	{r7, pc}

08000858 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	e009      	b.n	800087e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	1c5a      	adds	r2, r3, #1
 800086e:	60ba      	str	r2, [r7, #8]
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	0018      	movs	r0, r3
 8000874:	f7ff fef2 	bl	800065c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	3301      	adds	r3, #1
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	697a      	ldr	r2, [r7, #20]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	429a      	cmp	r2, r3
 8000884:	dbf1      	blt.n	800086a <_write+0x12>
  }
  return len;
 8000886:	687b      	ldr	r3, [r7, #4]
}
 8000888:	0018      	movs	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	b006      	add	sp, #24
 800088e:	bd80      	pop	{r7, pc}

08000890 <_close>:

int _close(int file)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000898:	2301      	movs	r3, #1
 800089a:	425b      	negs	r3, r3
}
 800089c:	0018      	movs	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	b002      	add	sp, #8
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	2280      	movs	r2, #128	; 0x80
 80008b2:	0192      	lsls	r2, r2, #6
 80008b4:	605a      	str	r2, [r3, #4]
  return 0;
 80008b6:	2300      	movs	r3, #0
}
 80008b8:	0018      	movs	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b002      	add	sp, #8
 80008be:	bd80      	pop	{r7, pc}

080008c0 <_isatty>:

int _isatty(int file)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008c8:	2301      	movs	r3, #1
}
 80008ca:	0018      	movs	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b002      	add	sp, #8
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b084      	sub	sp, #16
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	60f8      	str	r0, [r7, #12]
 80008da:	60b9      	str	r1, [r7, #8]
 80008dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008de:	2300      	movs	r3, #0
}
 80008e0:	0018      	movs	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b004      	add	sp, #16
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f0:	4a14      	ldr	r2, [pc, #80]	; (8000944 <_sbrk+0x5c>)
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <_sbrk+0x60>)
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d102      	bne.n	800090a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <_sbrk+0x64>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <_sbrk+0x68>)
 8000908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	18d3      	adds	r3, r2, r3
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	429a      	cmp	r2, r3
 8000916:	d207      	bcs.n	8000928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000918:	f004 fafa 	bl	8004f10 <__errno>
 800091c:	0003      	movs	r3, r0
 800091e:	220c      	movs	r2, #12
 8000920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000922:	2301      	movs	r3, #1
 8000924:	425b      	negs	r3, r3
 8000926:	e009      	b.n	800093c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <_sbrk+0x64>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	18d2      	adds	r2, r2, r3
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <_sbrk+0x64>)
 8000938:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800093a:	68fb      	ldr	r3, [r7, #12]
}
 800093c:	0018      	movs	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	b006      	add	sp, #24
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20009000 	.word	0x20009000
 8000948:	00000400 	.word	0x00000400
 800094c:	200000e8 	.word	0x200000e8
 8000950:	20000530 	.word	0x20000530

08000954 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b08d      	sub	sp, #52	; 0x34
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000966:	240c      	movs	r4, #12
 8000968:	193b      	adds	r3, r7, r4
 800096a:	0018      	movs	r0, r3
 800096c:	2324      	movs	r3, #36	; 0x24
 800096e:	001a      	movs	r2, r3
 8000970:	2100      	movs	r1, #0
 8000972:	f004 fa77 	bl	8004e64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000976:	003b      	movs	r3, r7
 8000978:	0018      	movs	r0, r3
 800097a:	230c      	movs	r3, #12
 800097c:	001a      	movs	r2, r3
 800097e:	2100      	movs	r1, #0
 8000980:	f004 fa70 	bl	8004e64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000984:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <MX_TIM1_Init+0xc8>)
 8000986:	4a29      	ldr	r2, [pc, #164]	; (8000a2c <MX_TIM1_Init+0xcc>)
 8000988:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800098a:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <MX_TIM1_Init+0xc8>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000990:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <MX_TIM1_Init+0xc8>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000996:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <MX_TIM1_Init+0xc8>)
 8000998:	4a25      	ldr	r2, [pc, #148]	; (8000a30 <MX_TIM1_Init+0xd0>)
 800099a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099c:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <MX_TIM1_Init+0xc8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009a2:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <MX_TIM1_Init+0xc8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <MX_TIM1_Init+0xc8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009ae:	0021      	movs	r1, r4
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2201      	movs	r2, #1
 80009b4:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2201      	movs	r2, #1
 80009c0:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2201      	movs	r2, #1
 80009d8:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2200      	movs	r2, #0
 80009de:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2200      	movs	r2, #0
 80009e4:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80009e6:	187a      	adds	r2, r7, r1
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_TIM1_Init+0xc8>)
 80009ea:	0011      	movs	r1, r2
 80009ec:	0018      	movs	r0, r3
 80009ee:	f002 fc4f 	bl	8003290 <HAL_TIM_Encoder_Init>
 80009f2:	1e03      	subs	r3, r0, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80009f6:	f7ff fec9 	bl	800078c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fa:	003b      	movs	r3, r7
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a00:	003b      	movs	r3, r7
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a06:	003b      	movs	r3, r7
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a0c:	003a      	movs	r2, r7
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_TIM1_Init+0xc8>)
 8000a10:	0011      	movs	r1, r2
 8000a12:	0018      	movs	r0, r3
 8000a14:	f003 fa90 	bl	8003f38 <HAL_TIMEx_MasterConfigSynchronization>
 8000a18:	1e03      	subs	r3, r0, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000a1c:	f7ff feb6 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b00d      	add	sp, #52	; 0x34
 8000a26:	bd90      	pop	{r4, r7, pc}
 8000a28:	200000ec 	.word	0x200000ec
 8000a2c:	40012c00 	.word	0x40012c00
 8000a30:	0000ffff 	.word	0x0000ffff

08000a34 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b08d      	sub	sp, #52	; 0x34
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a3a:	240c      	movs	r4, #12
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	0018      	movs	r0, r3
 8000a40:	2324      	movs	r3, #36	; 0x24
 8000a42:	001a      	movs	r2, r3
 8000a44:	2100      	movs	r1, #0
 8000a46:	f004 fa0d 	bl	8004e64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4a:	003b      	movs	r3, r7
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	230c      	movs	r3, #12
 8000a50:	001a      	movs	r2, r3
 8000a52:	2100      	movs	r1, #0
 8000a54:	f004 fa06 	bl	8004e64 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a58:	4b25      	ldr	r3, [pc, #148]	; (8000af0 <MX_TIM3_Init+0xbc>)
 8000a5a:	4a26      	ldr	r2, [pc, #152]	; (8000af4 <MX_TIM3_Init+0xc0>)
 8000a5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a5e:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <MX_TIM3_Init+0xbc>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <MX_TIM3_Init+0xbc>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a6a:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <MX_TIM3_Init+0xbc>)
 8000a6c:	4a22      	ldr	r2, [pc, #136]	; (8000af8 <MX_TIM3_Init+0xc4>)
 8000a6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <MX_TIM3_Init+0xbc>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <MX_TIM3_Init+0xbc>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a7c:	0021      	movs	r1, r4
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2201      	movs	r2, #1
 8000a82:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2200      	movs	r2, #0
 8000a88:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000ab4:	187a      	adds	r2, r7, r1
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_TIM3_Init+0xbc>)
 8000ab8:	0011      	movs	r1, r2
 8000aba:	0018      	movs	r0, r3
 8000abc:	f002 fbe8 	bl	8003290 <HAL_TIM_Encoder_Init>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000ac4:	f7ff fe62 	bl	800078c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac8:	003b      	movs	r3, r7
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ace:	003b      	movs	r3, r7
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ad4:	003a      	movs	r2, r7
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_TIM3_Init+0xbc>)
 8000ad8:	0011      	movs	r1, r2
 8000ada:	0018      	movs	r0, r3
 8000adc:	f003 fa2c 	bl	8003f38 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae0:	1e03      	subs	r3, r0, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000ae4:	f7ff fe52 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b00d      	add	sp, #52	; 0x34
 8000aee:	bd90      	pop	{r4, r7, pc}
 8000af0:	20000138 	.word	0x20000138
 8000af4:	40000400 	.word	0x40000400
 8000af8:	0000ffff 	.word	0x0000ffff

08000afc <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	0018      	movs	r0, r3
 8000b06:	231c      	movs	r3, #28
 8000b08:	001a      	movs	r2, r3
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	f004 f9aa 	bl	8004e64 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000b10:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <MX_TIM14_Init+0x94>)
 8000b12:	4a20      	ldr	r2, [pc, #128]	; (8000b94 <MX_TIM14_Init+0x98>)
 8000b14:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000b16:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <MX_TIM14_Init+0x94>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <MX_TIM14_Init+0x94>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000b22:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <MX_TIM14_Init+0x94>)
 8000b24:	4a1c      	ldr	r2, [pc, #112]	; (8000b98 <MX_TIM14_Init+0x9c>)
 8000b26:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b28:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <MX_TIM14_Init+0x94>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2e:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <MX_TIM14_Init+0x94>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000b34:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <MX_TIM14_Init+0x94>)
 8000b36:	0018      	movs	r0, r3
 8000b38:	f002 faf2 	bl	8003120 <HAL_TIM_Base_Init>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000b40:	f7ff fe24 	bl	800078c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <MX_TIM14_Init+0x94>)
 8000b46:	0018      	movs	r0, r3
 8000b48:	f002 fb42 	bl	80031d0 <HAL_TIM_PWM_Init>
 8000b4c:	1e03      	subs	r3, r0, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000b50:	f7ff fe1c 	bl	800078c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2260      	movs	r2, #96	; 0x60
 8000b58:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b6c:	1d39      	adds	r1, r7, #4
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_TIM14_Init+0x94>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	0018      	movs	r0, r3
 8000b74:	f002 fc34 	bl	80033e0 <HAL_TIM_PWM_ConfigChannel>
 8000b78:	1e03      	subs	r3, r0, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000b7c:	f7ff fe06 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <MX_TIM14_Init+0x94>)
 8000b82:	0018      	movs	r0, r3
 8000b84:	f000 fac4 	bl	8001110 <HAL_TIM_MspPostInit>

}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b008      	add	sp, #32
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000184 	.word	0x20000184
 8000b94:	40002000 	.word	0x40002000
 8000b98:	0000ffff 	.word	0x0000ffff

08000b9c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b09c      	sub	sp, #112	; 0x70
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba2:	2360      	movs	r3, #96	; 0x60
 8000ba4:	18fb      	adds	r3, r7, r3
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	2310      	movs	r3, #16
 8000baa:	001a      	movs	r2, r3
 8000bac:	2100      	movs	r1, #0
 8000bae:	f004 f959 	bl	8004e64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb2:	2354      	movs	r3, #84	; 0x54
 8000bb4:	18fb      	adds	r3, r7, r3
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	230c      	movs	r3, #12
 8000bba:	001a      	movs	r2, r3
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	f004 f951 	bl	8004e64 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc2:	2338      	movs	r3, #56	; 0x38
 8000bc4:	18fb      	adds	r3, r7, r3
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	231c      	movs	r3, #28
 8000bca:	001a      	movs	r2, r3
 8000bcc:	2100      	movs	r1, #0
 8000bce:	f004 f949 	bl	8004e64 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	2334      	movs	r3, #52	; 0x34
 8000bd8:	001a      	movs	r2, r3
 8000bda:	2100      	movs	r1, #0
 8000bdc:	f004 f942 	bl	8004e64 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000be0:	4b4d      	ldr	r3, [pc, #308]	; (8000d18 <MX_TIM15_Init+0x17c>)
 8000be2:	4a4e      	ldr	r2, [pc, #312]	; (8000d1c <MX_TIM15_Init+0x180>)
 8000be4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000be6:	4b4c      	ldr	r3, [pc, #304]	; (8000d18 <MX_TIM15_Init+0x17c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bec:	4b4a      	ldr	r3, [pc, #296]	; (8000d18 <MX_TIM15_Init+0x17c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2559;
 8000bf2:	4b49      	ldr	r3, [pc, #292]	; (8000d18 <MX_TIM15_Init+0x17c>)
 8000bf4:	4a4a      	ldr	r2, [pc, #296]	; (8000d20 <MX_TIM15_Init+0x184>)
 8000bf6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf8:	4b47      	ldr	r3, [pc, #284]	; (8000d18 <MX_TIM15_Init+0x17c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000bfe:	4b46      	ldr	r3, [pc, #280]	; (8000d18 <MX_TIM15_Init+0x17c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c04:	4b44      	ldr	r3, [pc, #272]	; (8000d18 <MX_TIM15_Init+0x17c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000c0a:	4b43      	ldr	r3, [pc, #268]	; (8000d18 <MX_TIM15_Init+0x17c>)
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f002 fa87 	bl	8003120 <HAL_TIM_Base_Init>
 8000c12:	1e03      	subs	r3, r0, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8000c16:	f7ff fdb9 	bl	800078c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1a:	2160      	movs	r1, #96	; 0x60
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	2280      	movs	r2, #128	; 0x80
 8000c20:	0152      	lsls	r2, r2, #5
 8000c22:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000c24:	187a      	adds	r2, r7, r1
 8000c26:	4b3c      	ldr	r3, [pc, #240]	; (8000d18 <MX_TIM15_Init+0x17c>)
 8000c28:	0011      	movs	r1, r2
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f002 fcd8 	bl	80035e0 <HAL_TIM_ConfigClockSource>
 8000c30:	1e03      	subs	r3, r0, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8000c34:	f7ff fdaa 	bl	800078c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000c38:	4b37      	ldr	r3, [pc, #220]	; (8000d18 <MX_TIM15_Init+0x17c>)
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f002 fac8 	bl	80031d0 <HAL_TIM_PWM_Init>
 8000c40:	1e03      	subs	r3, r0, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8000c44:	f7ff fda2 	bl	800078c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c48:	2154      	movs	r1, #84	; 0x54
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000c56:	187a      	adds	r2, r7, r1
 8000c58:	4b2f      	ldr	r3, [pc, #188]	; (8000d18 <MX_TIM15_Init+0x17c>)
 8000c5a:	0011      	movs	r1, r2
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f003 f96b 	bl	8003f38 <HAL_TIMEx_MasterConfigSynchronization>
 8000c62:	1e03      	subs	r3, r0, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8000c66:	f7ff fd91 	bl	800078c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c6a:	2138      	movs	r1, #56	; 0x38
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2260      	movs	r2, #96	; 0x60
 8000c70:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	2200      	movs	r2, #0
 8000c76:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c96:	1879      	adds	r1, r7, r1
 8000c98:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <MX_TIM15_Init+0x17c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f002 fb9f 	bl	80033e0 <HAL_TIM_PWM_ConfigChannel>
 8000ca2:	1e03      	subs	r3, r0, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000ca6:	f7ff fd71 	bl	800078c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000caa:	2338      	movs	r3, #56	; 0x38
 8000cac:	18f9      	adds	r1, r7, r3
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_TIM15_Init+0x17c>)
 8000cb0:	2204      	movs	r2, #4
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f002 fb94 	bl	80033e0 <HAL_TIM_PWM_ConfigChannel>
 8000cb8:	1e03      	subs	r3, r0, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 8000cbc:	f7ff fd66 	bl	800078c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2280      	movs	r2, #128	; 0x80
 8000ce2:	0192      	lsls	r2, r2, #6
 8000ce4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000cf2:	1d3a      	adds	r2, r7, #4
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <MX_TIM15_Init+0x17c>)
 8000cf6:	0011      	movs	r1, r2
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f003 f985 	bl	8004008 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cfe:	1e03      	subs	r3, r0, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM15_Init+0x16a>
  {
    Error_Handler();
 8000d02:	f7ff fd43 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000d06:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <MX_TIM15_Init+0x17c>)
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f000 fa01 	bl	8001110 <HAL_TIM_MspPostInit>

}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b01c      	add	sp, #112	; 0x70
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	200001d0 	.word	0x200001d0
 8000d1c:	40014000 	.word	0x40014000
 8000d20:	000009ff 	.word	0x000009ff

08000d24 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b094      	sub	sp, #80	; 0x50
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d2a:	2334      	movs	r3, #52	; 0x34
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	0018      	movs	r0, r3
 8000d30:	231c      	movs	r3, #28
 8000d32:	001a      	movs	r2, r3
 8000d34:	2100      	movs	r1, #0
 8000d36:	f004 f895 	bl	8004e64 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d3a:	003b      	movs	r3, r7
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	2334      	movs	r3, #52	; 0x34
 8000d40:	001a      	movs	r2, r3
 8000d42:	2100      	movs	r1, #0
 8000d44:	f004 f88e 	bl	8004e64 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000d48:	4b37      	ldr	r3, [pc, #220]	; (8000e28 <MX_TIM16_Init+0x104>)
 8000d4a:	4a38      	ldr	r2, [pc, #224]	; (8000e2c <MX_TIM16_Init+0x108>)
 8000d4c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000d4e:	4b36      	ldr	r3, [pc, #216]	; (8000e28 <MX_TIM16_Init+0x104>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d54:	4b34      	ldr	r3, [pc, #208]	; (8000e28 <MX_TIM16_Init+0x104>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2559;
 8000d5a:	4b33      	ldr	r3, [pc, #204]	; (8000e28 <MX_TIM16_Init+0x104>)
 8000d5c:	4a34      	ldr	r2, [pc, #208]	; (8000e30 <MX_TIM16_Init+0x10c>)
 8000d5e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d60:	4b31      	ldr	r3, [pc, #196]	; (8000e28 <MX_TIM16_Init+0x104>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000d66:	4b30      	ldr	r3, [pc, #192]	; (8000e28 <MX_TIM16_Init+0x104>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6c:	4b2e      	ldr	r3, [pc, #184]	; (8000e28 <MX_TIM16_Init+0x104>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000d72:	4b2d      	ldr	r3, [pc, #180]	; (8000e28 <MX_TIM16_Init+0x104>)
 8000d74:	0018      	movs	r0, r3
 8000d76:	f002 f9d3 	bl	8003120 <HAL_TIM_Base_Init>
 8000d7a:	1e03      	subs	r3, r0, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000d7e:	f7ff fd05 	bl	800078c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000d82:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <MX_TIM16_Init+0x104>)
 8000d84:	0018      	movs	r0, r3
 8000d86:	f002 fa23 	bl	80031d0 <HAL_TIM_PWM_Init>
 8000d8a:	1e03      	subs	r3, r0, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8000d8e:	f7ff fcfd 	bl	800078c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d92:	2134      	movs	r1, #52	; 0x34
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2260      	movs	r2, #96	; 0x60
 8000d98:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2200      	movs	r2, #0
 8000daa:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	2200      	movs	r2, #0
 8000db6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	2200      	movs	r2, #0
 8000dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dbe:	1879      	adds	r1, r7, r1
 8000dc0:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <MX_TIM16_Init+0x104>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f002 fb0b 	bl	80033e0 <HAL_TIM_PWM_ConfigChannel>
 8000dca:	1e03      	subs	r3, r0, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8000dce:	f7ff fcdd 	bl	800078c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dd2:	003b      	movs	r3, r7
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dd8:	003b      	movs	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dde:	003b      	movs	r3, r7
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000de4:	003b      	movs	r3, r7
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dea:	003b      	movs	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000df0:	003b      	movs	r3, r7
 8000df2:	2280      	movs	r2, #128	; 0x80
 8000df4:	0192      	lsls	r2, r2, #6
 8000df6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000df8:	003b      	movs	r3, r7
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dfe:	003b      	movs	r3, r7
 8000e00:	2200      	movs	r2, #0
 8000e02:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000e04:	003a      	movs	r2, r7
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <MX_TIM16_Init+0x104>)
 8000e08:	0011      	movs	r1, r2
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f003 f8fc 	bl	8004008 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e10:	1e03      	subs	r3, r0, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8000e14:	f7ff fcba 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <MX_TIM16_Init+0x104>)
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f000 f978 	bl	8001110 <HAL_TIM_MspPostInit>

}
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b014      	add	sp, #80	; 0x50
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	2000021c 	.word	0x2000021c
 8000e2c:	40014400 	.word	0x40014400
 8000e30:	000009ff 	.word	0x000009ff

08000e34 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b094      	sub	sp, #80	; 0x50
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e3a:	2334      	movs	r3, #52	; 0x34
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	0018      	movs	r0, r3
 8000e40:	231c      	movs	r3, #28
 8000e42:	001a      	movs	r2, r3
 8000e44:	2100      	movs	r1, #0
 8000e46:	f004 f80d 	bl	8004e64 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e4a:	003b      	movs	r3, r7
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	2334      	movs	r3, #52	; 0x34
 8000e50:	001a      	movs	r2, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	f004 f806 	bl	8004e64 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000e58:	4b37      	ldr	r3, [pc, #220]	; (8000f38 <MX_TIM17_Init+0x104>)
 8000e5a:	4a38      	ldr	r2, [pc, #224]	; (8000f3c <MX_TIM17_Init+0x108>)
 8000e5c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000e5e:	4b36      	ldr	r3, [pc, #216]	; (8000f38 <MX_TIM17_Init+0x104>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e64:	4b34      	ldr	r3, [pc, #208]	; (8000f38 <MX_TIM17_Init+0x104>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2559;
 8000e6a:	4b33      	ldr	r3, [pc, #204]	; (8000f38 <MX_TIM17_Init+0x104>)
 8000e6c:	4a34      	ldr	r2, [pc, #208]	; (8000f40 <MX_TIM17_Init+0x10c>)
 8000e6e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e70:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <MX_TIM17_Init+0x104>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000e76:	4b30      	ldr	r3, [pc, #192]	; (8000f38 <MX_TIM17_Init+0x104>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7c:	4b2e      	ldr	r3, [pc, #184]	; (8000f38 <MX_TIM17_Init+0x104>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000e82:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <MX_TIM17_Init+0x104>)
 8000e84:	0018      	movs	r0, r3
 8000e86:	f002 f94b 	bl	8003120 <HAL_TIM_Base_Init>
 8000e8a:	1e03      	subs	r3, r0, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8000e8e:	f7ff fc7d 	bl	800078c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000e92:	4b29      	ldr	r3, [pc, #164]	; (8000f38 <MX_TIM17_Init+0x104>)
 8000e94:	0018      	movs	r0, r3
 8000e96:	f002 f99b 	bl	80031d0 <HAL_TIM_PWM_Init>
 8000e9a:	1e03      	subs	r3, r0, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8000e9e:	f7ff fc75 	bl	800078c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea2:	2134      	movs	r1, #52	; 0x34
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	2260      	movs	r2, #96	; 0x60
 8000ea8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2200      	movs	r2, #0
 8000eae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ece:	1879      	adds	r1, r7, r1
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_TIM17_Init+0x104>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f002 fa83 	bl	80033e0 <HAL_TIM_PWM_ConfigChannel>
 8000eda:	1e03      	subs	r3, r0, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8000ede:	f7ff fc55 	bl	800078c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ee2:	003b      	movs	r3, r7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ee8:	003b      	movs	r3, r7
 8000eea:	2200      	movs	r2, #0
 8000eec:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eee:	003b      	movs	r3, r7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ef4:	003b      	movs	r3, r7
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000efa:	003b      	movs	r3, r7
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f00:	003b      	movs	r3, r7
 8000f02:	2280      	movs	r2, #128	; 0x80
 8000f04:	0192      	lsls	r2, r2, #6
 8000f06:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f08:	003b      	movs	r3, r7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f0e:	003b      	movs	r3, r7
 8000f10:	2200      	movs	r2, #0
 8000f12:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000f14:	003a      	movs	r2, r7
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_TIM17_Init+0x104>)
 8000f18:	0011      	movs	r1, r2
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f003 f874 	bl	8004008 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f20:	1e03      	subs	r3, r0, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8000f24:	f7ff fc32 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <MX_TIM17_Init+0x104>)
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f000 f8f0 	bl	8001110 <HAL_TIM_MspPostInit>

}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b014      	add	sp, #80	; 0x50
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000268 	.word	0x20000268
 8000f3c:	40014800 	.word	0x40014800
 8000f40:	000009ff 	.word	0x000009ff

08000f44 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b08d      	sub	sp, #52	; 0x34
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	241c      	movs	r4, #28
 8000f4e:	193b      	adds	r3, r7, r4
 8000f50:	0018      	movs	r0, r3
 8000f52:	2314      	movs	r3, #20
 8000f54:	001a      	movs	r2, r3
 8000f56:	2100      	movs	r1, #0
 8000f58:	f003 ff84 	bl	8004e64 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a36      	ldr	r2, [pc, #216]	; (800103c <HAL_TIM_Encoder_MspInit+0xf8>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d131      	bne.n	8000fca <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f66:	4b36      	ldr	r3, [pc, #216]	; (8001040 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f6a:	4b35      	ldr	r3, [pc, #212]	; (8001040 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000f6c:	2180      	movs	r1, #128	; 0x80
 8000f6e:	0109      	lsls	r1, r1, #4
 8000f70:	430a      	orrs	r2, r1
 8000f72:	641a      	str	r2, [r3, #64]	; 0x40
 8000f74:	4b32      	ldr	r3, [pc, #200]	; (8001040 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000f76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
 8000f80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f86:	4b2e      	ldr	r3, [pc, #184]	; (8001040 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000f88:	2104      	movs	r1, #4
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f92:	2204      	movs	r2, #4
 8000f94:	4013      	ands	r3, r2
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC8     ------> TIM1_CH1
    PC9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH1_ENCODER_RB_Pin|TIM1_CH2_ENCODER_RA_Pin;
 8000f9a:	193b      	adds	r3, r7, r4
 8000f9c:	22c0      	movs	r2, #192	; 0xc0
 8000f9e:	0092      	lsls	r2, r2, #2
 8000fa0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	0021      	movs	r1, r4
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	2202      	movs	r2, #2
 8000fba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	4a21      	ldr	r2, [pc, #132]	; (8001044 <HAL_TIM_Encoder_MspInit+0x100>)
 8000fc0:	0019      	movs	r1, r3
 8000fc2:	0010      	movs	r0, r2
 8000fc4:	f001 f8d6 	bl	8002174 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000fc8:	e033      	b.n	8001032 <HAL_TIM_Encoder_MspInit+0xee>
  else if(tim_encoderHandle->Instance==TIM3)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a1e      	ldr	r2, [pc, #120]	; (8001048 <HAL_TIM_Encoder_MspInit+0x104>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d12e      	bne.n	8001032 <HAL_TIM_Encoder_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000fd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000fda:	2102      	movs	r1, #2
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4013      	ands	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_ENCODER_LA_Pin|TIM3_CH2_ENCODER_LB_Pin;
 8001004:	211c      	movs	r1, #28
 8001006:	187b      	adds	r3, r7, r1
 8001008:	22c0      	movs	r2, #192	; 0xc0
 800100a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	187b      	adds	r3, r7, r1
 800100e:	2202      	movs	r2, #2
 8001010:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	187b      	adds	r3, r7, r1
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	187b      	adds	r3, r7, r1
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800101e:	187b      	adds	r3, r7, r1
 8001020:	2201      	movs	r2, #1
 8001022:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	187a      	adds	r2, r7, r1
 8001026:	23a0      	movs	r3, #160	; 0xa0
 8001028:	05db      	lsls	r3, r3, #23
 800102a:	0011      	movs	r1, r2
 800102c:	0018      	movs	r0, r3
 800102e:	f001 f8a1 	bl	8002174 <HAL_GPIO_Init>
}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	b00d      	add	sp, #52	; 0x34
 8001038:	bd90      	pop	{r4, r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	40012c00 	.word	0x40012c00
 8001040:	40021000 	.word	0x40021000
 8001044:	50000800 	.word	0x50000800
 8001048:	40000400 	.word	0x40000400

0800104c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a28      	ldr	r2, [pc, #160]	; (80010fc <HAL_TIM_Base_MspInit+0xb0>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d10e      	bne.n	800107c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800105e:	4b28      	ldr	r3, [pc, #160]	; (8001100 <HAL_TIM_Base_MspInit+0xb4>)
 8001060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001062:	4b27      	ldr	r3, [pc, #156]	; (8001100 <HAL_TIM_Base_MspInit+0xb4>)
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	0209      	lsls	r1, r1, #8
 8001068:	430a      	orrs	r2, r1
 800106a:	641a      	str	r2, [r3, #64]	; 0x40
 800106c:	4b24      	ldr	r3, [pc, #144]	; (8001100 <HAL_TIM_Base_MspInit+0xb4>)
 800106e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	4013      	ands	r3, r2
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800107a:	e03a      	b.n	80010f2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM15)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a20      	ldr	r2, [pc, #128]	; (8001104 <HAL_TIM_Base_MspInit+0xb8>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d10e      	bne.n	80010a4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001086:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <HAL_TIM_Base_MspInit+0xb4>)
 8001088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_TIM_Base_MspInit+0xb4>)
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	0249      	lsls	r1, r1, #9
 8001090:	430a      	orrs	r2, r1
 8001092:	641a      	str	r2, [r3, #64]	; 0x40
 8001094:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <HAL_TIM_Base_MspInit+0xb4>)
 8001096:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	025b      	lsls	r3, r3, #9
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
}
 80010a2:	e026      	b.n	80010f2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM16)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a17      	ldr	r2, [pc, #92]	; (8001108 <HAL_TIM_Base_MspInit+0xbc>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d10e      	bne.n	80010cc <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <HAL_TIM_Base_MspInit+0xb4>)
 80010b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <HAL_TIM_Base_MspInit+0xb4>)
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	0289      	lsls	r1, r1, #10
 80010b8:	430a      	orrs	r2, r1
 80010ba:	641a      	str	r2, [r3, #64]	; 0x40
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <HAL_TIM_Base_MspInit+0xb4>)
 80010be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	029b      	lsls	r3, r3, #10
 80010c4:	4013      	ands	r3, r2
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
}
 80010ca:	e012      	b.n	80010f2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM17)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0e      	ldr	r2, [pc, #56]	; (800110c <HAL_TIM_Base_MspInit+0xc0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d10d      	bne.n	80010f2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_TIM_Base_MspInit+0xb4>)
 80010d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_TIM_Base_MspInit+0xb4>)
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	02c9      	lsls	r1, r1, #11
 80010e0:	430a      	orrs	r2, r1
 80010e2:	641a      	str	r2, [r3, #64]	; 0x40
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_TIM_Base_MspInit+0xb4>)
 80010e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010e8:	2380      	movs	r3, #128	; 0x80
 80010ea:	02db      	lsls	r3, r3, #11
 80010ec:	4013      	ands	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	46bd      	mov	sp, r7
 80010f6:	b006      	add	sp, #24
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	40002000 	.word	0x40002000
 8001100:	40021000 	.word	0x40021000
 8001104:	40014000 	.word	0x40014000
 8001108:	40014400 	.word	0x40014400
 800110c:	40014800 	.word	0x40014800

08001110 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b08d      	sub	sp, #52	; 0x34
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	241c      	movs	r4, #28
 800111a:	193b      	adds	r3, r7, r4
 800111c:	0018      	movs	r0, r3
 800111e:	2314      	movs	r3, #20
 8001120:	001a      	movs	r2, r3
 8001122:	2100      	movs	r1, #0
 8001124:	f003 fe9e 	bl	8004e64 <memset>
  if(timHandle->Instance==TIM14)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a62      	ldr	r2, [pc, #392]	; (80012b8 <HAL_TIM_MspPostInit+0x1a8>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d123      	bne.n	800117a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4b62      	ldr	r3, [pc, #392]	; (80012bc <HAL_TIM_MspPostInit+0x1ac>)
 8001134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001136:	4b61      	ldr	r3, [pc, #388]	; (80012bc <HAL_TIM_MspPostInit+0x1ac>)
 8001138:	2101      	movs	r1, #1
 800113a:	430a      	orrs	r2, r1
 800113c:	635a      	str	r2, [r3, #52]	; 0x34
 800113e:	4b5f      	ldr	r3, [pc, #380]	; (80012bc <HAL_TIM_MspPostInit+0x1ac>)
 8001140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001142:	2201      	movs	r2, #1
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	69bb      	ldr	r3, [r7, #24]
    /**TIM14 GPIO Configuration
    PA4     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = TIM14_CH1_M_SCTR_Pin;
 800114a:	0021      	movs	r1, r4
 800114c:	187b      	adds	r3, r7, r1
 800114e:	2210      	movs	r2, #16
 8001150:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	187b      	adds	r3, r7, r1
 8001154:	2202      	movs	r2, #2
 8001156:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	187b      	adds	r3, r7, r1
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	187b      	adds	r3, r7, r1
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8001164:	187b      	adds	r3, r7, r1
 8001166:	2204      	movs	r2, #4
 8001168:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM14_CH1_M_SCTR_GPIO_Port, &GPIO_InitStruct);
 800116a:	187a      	adds	r2, r7, r1
 800116c:	23a0      	movs	r3, #160	; 0xa0
 800116e:	05db      	lsls	r3, r3, #23
 8001170:	0011      	movs	r1, r2
 8001172:	0018      	movs	r0, r3
 8001174:	f000 fffe 	bl	8002174 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001178:	e099      	b.n	80012ae <HAL_TIM_MspPostInit+0x19e>
  else if(timHandle->Instance==TIM15)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a50      	ldr	r2, [pc, #320]	; (80012c0 <HAL_TIM_MspPostInit+0x1b0>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d145      	bne.n	8001210 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001184:	4b4d      	ldr	r3, [pc, #308]	; (80012bc <HAL_TIM_MspPostInit+0x1ac>)
 8001186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001188:	4b4c      	ldr	r3, [pc, #304]	; (80012bc <HAL_TIM_MspPostInit+0x1ac>)
 800118a:	2104      	movs	r1, #4
 800118c:	430a      	orrs	r2, r1
 800118e:	635a      	str	r2, [r3, #52]	; 0x34
 8001190:	4b4a      	ldr	r3, [pc, #296]	; (80012bc <HAL_TIM_MspPostInit+0x1ac>)
 8001192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001194:	2204      	movs	r2, #4
 8001196:	4013      	ands	r3, r2
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119c:	4b47      	ldr	r3, [pc, #284]	; (80012bc <HAL_TIM_MspPostInit+0x1ac>)
 800119e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011a0:	4b46      	ldr	r3, [pc, #280]	; (80012bc <HAL_TIM_MspPostInit+0x1ac>)
 80011a2:	2101      	movs	r1, #1
 80011a4:	430a      	orrs	r2, r1
 80011a6:	635a      	str	r2, [r3, #52]	; 0x34
 80011a8:	4b44      	ldr	r3, [pc, #272]	; (80012bc <HAL_TIM_MspPostInit+0x1ac>)
 80011aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ac:	2201      	movs	r2, #1
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM15_CH2_REV_MR_Pin;
 80011b4:	241c      	movs	r4, #28
 80011b6:	193b      	adds	r3, r7, r4
 80011b8:	2204      	movs	r2, #4
 80011ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	193b      	adds	r3, r7, r4
 80011be:	2202      	movs	r2, #2
 80011c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	193b      	adds	r3, r7, r4
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	193b      	adds	r3, r7, r4
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 80011ce:	193b      	adds	r3, r7, r4
 80011d0:	2202      	movs	r2, #2
 80011d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM15_CH2_REV_MR_GPIO_Port, &GPIO_InitStruct);
 80011d4:	193b      	adds	r3, r7, r4
 80011d6:	4a3b      	ldr	r2, [pc, #236]	; (80012c4 <HAL_TIM_MspPostInit+0x1b4>)
 80011d8:	0019      	movs	r1, r3
 80011da:	0010      	movs	r0, r2
 80011dc:	f000 ffca 	bl	8002174 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM15_CH1_REV_ML_Pin;
 80011e0:	0021      	movs	r1, r4
 80011e2:	187b      	adds	r3, r7, r1
 80011e4:	2204      	movs	r2, #4
 80011e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	2202      	movs	r2, #2
 80011ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	187b      	adds	r3, r7, r1
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	2205      	movs	r2, #5
 80011fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM15_CH1_REV_ML_GPIO_Port, &GPIO_InitStruct);
 8001200:	187a      	adds	r2, r7, r1
 8001202:	23a0      	movs	r3, #160	; 0xa0
 8001204:	05db      	lsls	r3, r3, #23
 8001206:	0011      	movs	r1, r2
 8001208:	0018      	movs	r0, r3
 800120a:	f000 ffb3 	bl	8002174 <HAL_GPIO_Init>
}
 800120e:	e04e      	b.n	80012ae <HAL_TIM_MspPostInit+0x19e>
  else if(timHandle->Instance==TIM16)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a2c      	ldr	r2, [pc, #176]	; (80012c8 <HAL_TIM_MspPostInit+0x1b8>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d122      	bne.n	8001260 <HAL_TIM_MspPostInit+0x150>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800121a:	4b28      	ldr	r3, [pc, #160]	; (80012bc <HAL_TIM_MspPostInit+0x1ac>)
 800121c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800121e:	4b27      	ldr	r3, [pc, #156]	; (80012bc <HAL_TIM_MspPostInit+0x1ac>)
 8001220:	2108      	movs	r1, #8
 8001222:	430a      	orrs	r2, r1
 8001224:	635a      	str	r2, [r3, #52]	; 0x34
 8001226:	4b25      	ldr	r3, [pc, #148]	; (80012bc <HAL_TIM_MspPostInit+0x1ac>)
 8001228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800122a:	2208      	movs	r2, #8
 800122c:	4013      	ands	r3, r2
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM16_CH1_FWD_ML_Pin;
 8001232:	211c      	movs	r1, #28
 8001234:	187b      	adds	r3, r7, r1
 8001236:	2201      	movs	r2, #1
 8001238:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	187b      	adds	r3, r7, r1
 800123c:	2202      	movs	r2, #2
 800123e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	187b      	adds	r3, r7, r1
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	187b      	adds	r3, r7, r1
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 800124c:	187b      	adds	r3, r7, r1
 800124e:	2202      	movs	r2, #2
 8001250:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM16_CH1_FWD_ML_GPIO_Port, &GPIO_InitStruct);
 8001252:	187b      	adds	r3, r7, r1
 8001254:	4a1d      	ldr	r2, [pc, #116]	; (80012cc <HAL_TIM_MspPostInit+0x1bc>)
 8001256:	0019      	movs	r1, r3
 8001258:	0010      	movs	r0, r2
 800125a:	f000 ff8b 	bl	8002174 <HAL_GPIO_Init>
}
 800125e:	e026      	b.n	80012ae <HAL_TIM_MspPostInit+0x19e>
  else if(timHandle->Instance==TIM17)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a1a      	ldr	r2, [pc, #104]	; (80012d0 <HAL_TIM_MspPostInit+0x1c0>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d121      	bne.n	80012ae <HAL_TIM_MspPostInit+0x19e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <HAL_TIM_MspPostInit+0x1ac>)
 800126c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_TIM_MspPostInit+0x1ac>)
 8001270:	2108      	movs	r1, #8
 8001272:	430a      	orrs	r2, r1
 8001274:	635a      	str	r2, [r3, #52]	; 0x34
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_TIM_MspPostInit+0x1ac>)
 8001278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800127a:	2208      	movs	r2, #8
 800127c:	4013      	ands	r3, r2
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM17_CH1_FWD_MR_Pin;
 8001282:	211c      	movs	r1, #28
 8001284:	187b      	adds	r3, r7, r1
 8001286:	2202      	movs	r2, #2
 8001288:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	187b      	adds	r3, r7, r1
 800128c:	2202      	movs	r2, #2
 800128e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	187b      	adds	r3, r7, r1
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	187b      	adds	r3, r7, r1
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 800129c:	187b      	adds	r3, r7, r1
 800129e:	2202      	movs	r2, #2
 80012a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM17_CH1_FWD_MR_GPIO_Port, &GPIO_InitStruct);
 80012a2:	187b      	adds	r3, r7, r1
 80012a4:	4a09      	ldr	r2, [pc, #36]	; (80012cc <HAL_TIM_MspPostInit+0x1bc>)
 80012a6:	0019      	movs	r1, r3
 80012a8:	0010      	movs	r0, r2
 80012aa:	f000 ff63 	bl	8002174 <HAL_GPIO_Init>
}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b00d      	add	sp, #52	; 0x34
 80012b4:	bd90      	pop	{r4, r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	40002000 	.word	0x40002000
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40014000 	.word	0x40014000
 80012c4:	50000800 	.word	0x50000800
 80012c8:	40014400 	.word	0x40014400
 80012cc:	50000c00 	.word	0x50000c00
 80012d0:	40014800 	.word	0x40014800

080012d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012d8:	4b25      	ldr	r3, [pc, #148]	; (8001370 <MX_USART1_UART_Init+0x9c>)
 80012da:	4a26      	ldr	r2, [pc, #152]	; (8001374 <MX_USART1_UART_Init+0xa0>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012de:	4b24      	ldr	r3, [pc, #144]	; (8001370 <MX_USART1_UART_Init+0x9c>)
 80012e0:	22e1      	movs	r2, #225	; 0xe1
 80012e2:	0252      	lsls	r2, r2, #9
 80012e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b22      	ldr	r3, [pc, #136]	; (8001370 <MX_USART1_UART_Init+0x9c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b20      	ldr	r3, [pc, #128]	; (8001370 <MX_USART1_UART_Init+0x9c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <MX_USART1_UART_Init+0x9c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_USART1_UART_Init+0x9c>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <MX_USART1_UART_Init+0x9c>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_USART1_UART_Init+0x9c>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <MX_USART1_UART_Init+0x9c>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001310:	4b17      	ldr	r3, [pc, #92]	; (8001370 <MX_USART1_UART_Init+0x9c>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001316:	4b16      	ldr	r3, [pc, #88]	; (8001370 <MX_USART1_UART_Init+0x9c>)
 8001318:	2208      	movs	r2, #8
 800131a:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <MX_USART1_UART_Init+0x9c>)
 800131e:	2280      	movs	r2, #128	; 0x80
 8001320:	0212      	lsls	r2, r2, #8
 8001322:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <MX_USART1_UART_Init+0x9c>)
 8001326:	0018      	movs	r0, r3
 8001328:	f002 ff14 	bl	8004154 <HAL_UART_Init>
 800132c:	1e03      	subs	r3, r0, #0
 800132e:	d001      	beq.n	8001334 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 8001330:	f7ff fa2c 	bl	800078c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_USART1_UART_Init+0x9c>)
 8001336:	2100      	movs	r1, #0
 8001338:	0018      	movs	r0, r3
 800133a:	f003 fba5 	bl	8004a88 <HAL_UARTEx_SetTxFifoThreshold>
 800133e:	1e03      	subs	r3, r0, #0
 8001340:	d001      	beq.n	8001346 <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 8001342:	f7ff fa23 	bl	800078c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <MX_USART1_UART_Init+0x9c>)
 8001348:	2100      	movs	r1, #0
 800134a:	0018      	movs	r0, r3
 800134c:	f003 fbdc 	bl	8004b08 <HAL_UARTEx_SetRxFifoThreshold>
 8001350:	1e03      	subs	r3, r0, #0
 8001352:	d001      	beq.n	8001358 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 8001354:	f7ff fa1a 	bl	800078c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <MX_USART1_UART_Init+0x9c>)
 800135a:	0018      	movs	r0, r3
 800135c:	f003 fb5a 	bl	8004a14 <HAL_UARTEx_DisableFifoMode>
 8001360:	1e03      	subs	r3, r0, #0
 8001362:	d001      	beq.n	8001368 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 8001364:	f7ff fa12 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001368:	46c0      	nop			; (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	200002b4 	.word	0x200002b4
 8001374:	40013800 	.word	0x40013800

08001378 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800137c:	4b23      	ldr	r3, [pc, #140]	; (800140c <MX_USART2_UART_Init+0x94>)
 800137e:	4a24      	ldr	r2, [pc, #144]	; (8001410 <MX_USART2_UART_Init+0x98>)
 8001380:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001382:	4b22      	ldr	r3, [pc, #136]	; (800140c <MX_USART2_UART_Init+0x94>)
 8001384:	22e1      	movs	r2, #225	; 0xe1
 8001386:	0252      	lsls	r2, r2, #9
 8001388:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b20      	ldr	r3, [pc, #128]	; (800140c <MX_USART2_UART_Init+0x94>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b1e      	ldr	r3, [pc, #120]	; (800140c <MX_USART2_UART_Init+0x94>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001396:	4b1d      	ldr	r3, [pc, #116]	; (800140c <MX_USART2_UART_Init+0x94>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <MX_USART2_UART_Init+0x94>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b1a      	ldr	r3, [pc, #104]	; (800140c <MX_USART2_UART_Init+0x94>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b18      	ldr	r3, [pc, #96]	; (800140c <MX_USART2_UART_Init+0x94>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ae:	4b17      	ldr	r3, [pc, #92]	; (800140c <MX_USART2_UART_Init+0x94>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013b4:	4b15      	ldr	r3, [pc, #84]	; (800140c <MX_USART2_UART_Init+0x94>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ba:	4b14      	ldr	r3, [pc, #80]	; (800140c <MX_USART2_UART_Init+0x94>)
 80013bc:	2200      	movs	r2, #0
 80013be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <MX_USART2_UART_Init+0x94>)
 80013c2:	0018      	movs	r0, r3
 80013c4:	f002 fec6 	bl	8004154 <HAL_UART_Init>
 80013c8:	1e03      	subs	r3, r0, #0
 80013ca:	d001      	beq.n	80013d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013cc:	f7ff f9de 	bl	800078c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_USART2_UART_Init+0x94>)
 80013d2:	2100      	movs	r1, #0
 80013d4:	0018      	movs	r0, r3
 80013d6:	f003 fb57 	bl	8004a88 <HAL_UARTEx_SetTxFifoThreshold>
 80013da:	1e03      	subs	r3, r0, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013de:	f7ff f9d5 	bl	800078c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <MX_USART2_UART_Init+0x94>)
 80013e4:	2100      	movs	r1, #0
 80013e6:	0018      	movs	r0, r3
 80013e8:	f003 fb8e 	bl	8004b08 <HAL_UARTEx_SetRxFifoThreshold>
 80013ec:	1e03      	subs	r3, r0, #0
 80013ee:	d001      	beq.n	80013f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80013f0:	f7ff f9cc 	bl	800078c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <MX_USART2_UART_Init+0x94>)
 80013f6:	0018      	movs	r0, r3
 80013f8:	f003 fb0c 	bl	8004a14 <HAL_UARTEx_DisableFifoMode>
 80013fc:	1e03      	subs	r3, r0, #0
 80013fe:	d001      	beq.n	8001404 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001400:	f7ff f9c4 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	20000348 	.word	0x20000348
 8001410:	40004400 	.word	0x40004400

08001414 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b093      	sub	sp, #76	; 0x4c
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	2334      	movs	r3, #52	; 0x34
 800141e:	18fb      	adds	r3, r7, r3
 8001420:	0018      	movs	r0, r3
 8001422:	2314      	movs	r3, #20
 8001424:	001a      	movs	r2, r3
 8001426:	2100      	movs	r1, #0
 8001428:	f003 fd1c 	bl	8004e64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800142c:	2418      	movs	r4, #24
 800142e:	193b      	adds	r3, r7, r4
 8001430:	0018      	movs	r0, r3
 8001432:	231c      	movs	r3, #28
 8001434:	001a      	movs	r2, r3
 8001436:	2100      	movs	r1, #0
 8001438:	f003 fd14 	bl	8004e64 <memset>
  if(uartHandle->Instance==USART1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a44      	ldr	r2, [pc, #272]	; (8001554 <HAL_UART_MspInit+0x140>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d13e      	bne.n	80014c4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001446:	193b      	adds	r3, r7, r4
 8001448:	2201      	movs	r2, #1
 800144a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800144c:	193b      	adds	r3, r7, r4
 800144e:	2200      	movs	r2, #0
 8001450:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001452:	193b      	adds	r3, r7, r4
 8001454:	0018      	movs	r0, r3
 8001456:	f001 fd2f 	bl	8002eb8 <HAL_RCCEx_PeriphCLKConfig>
 800145a:	1e03      	subs	r3, r0, #0
 800145c:	d001      	beq.n	8001462 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800145e:	f7ff f995 	bl	800078c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001462:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <HAL_UART_MspInit+0x144>)
 8001464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001466:	4b3c      	ldr	r3, [pc, #240]	; (8001558 <HAL_UART_MspInit+0x144>)
 8001468:	2180      	movs	r1, #128	; 0x80
 800146a:	01c9      	lsls	r1, r1, #7
 800146c:	430a      	orrs	r2, r1
 800146e:	641a      	str	r2, [r3, #64]	; 0x40
 8001470:	4b39      	ldr	r3, [pc, #228]	; (8001558 <HAL_UART_MspInit+0x144>)
 8001472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	01db      	lsls	r3, r3, #7
 8001478:	4013      	ands	r3, r2
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	4b36      	ldr	r3, [pc, #216]	; (8001558 <HAL_UART_MspInit+0x144>)
 8001480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001482:	4b35      	ldr	r3, [pc, #212]	; (8001558 <HAL_UART_MspInit+0x144>)
 8001484:	2104      	movs	r1, #4
 8001486:	430a      	orrs	r2, r1
 8001488:	635a      	str	r2, [r3, #52]	; 0x34
 800148a:	4b33      	ldr	r3, [pc, #204]	; (8001558 <HAL_UART_MspInit+0x144>)
 800148c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148e:	2204      	movs	r2, #4
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_VCP_TX_Pin|USART1_RX_VCP_RX_Pin;
 8001496:	2134      	movs	r1, #52	; 0x34
 8001498:	187b      	adds	r3, r7, r1
 800149a:	2230      	movs	r2, #48	; 0x30
 800149c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	187b      	adds	r3, r7, r1
 80014a0:	2202      	movs	r2, #2
 80014a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	187b      	adds	r3, r7, r1
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80014b0:	187b      	adds	r3, r7, r1
 80014b2:	2201      	movs	r2, #1
 80014b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b6:	187b      	adds	r3, r7, r1
 80014b8:	4a28      	ldr	r2, [pc, #160]	; (800155c <HAL_UART_MspInit+0x148>)
 80014ba:	0019      	movs	r1, r3
 80014bc:	0010      	movs	r0, r2
 80014be:	f000 fe59 	bl	8002174 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014c2:	e043      	b.n	800154c <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a25      	ldr	r2, [pc, #148]	; (8001560 <HAL_UART_MspInit+0x14c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d13e      	bne.n	800154c <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014ce:	2118      	movs	r1, #24
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	2202      	movs	r2, #2
 80014d4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014d6:	187b      	adds	r3, r7, r1
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014dc:	187b      	adds	r3, r7, r1
 80014de:	0018      	movs	r0, r3
 80014e0:	f001 fcea 	bl	8002eb8 <HAL_RCCEx_PeriphCLKConfig>
 80014e4:	1e03      	subs	r3, r0, #0
 80014e6:	d001      	beq.n	80014ec <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80014e8:	f7ff f950 	bl	800078c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <HAL_UART_MspInit+0x144>)
 80014ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_UART_MspInit+0x144>)
 80014f2:	2180      	movs	r1, #128	; 0x80
 80014f4:	0289      	lsls	r1, r1, #10
 80014f6:	430a      	orrs	r2, r1
 80014f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <HAL_UART_MspInit+0x144>)
 80014fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	029b      	lsls	r3, r3, #10
 8001502:	4013      	ands	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001508:	4b13      	ldr	r3, [pc, #76]	; (8001558 <HAL_UART_MspInit+0x144>)
 800150a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_UART_MspInit+0x144>)
 800150e:	2108      	movs	r1, #8
 8001510:	430a      	orrs	r2, r1
 8001512:	635a      	str	r2, [r3, #52]	; 0x34
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <HAL_UART_MspInit+0x144>)
 8001516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001518:	2208      	movs	r2, #8
 800151a:	4013      	ands	r3, r2
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_LIDAR_TX_Pin|USART2_RX_LIDAR_RX_Pin;
 8001520:	2134      	movs	r1, #52	; 0x34
 8001522:	187b      	adds	r3, r7, r1
 8001524:	2260      	movs	r2, #96	; 0x60
 8001526:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	187b      	adds	r3, r7, r1
 800152a:	2202      	movs	r2, #2
 800152c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	187b      	adds	r3, r7, r1
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	187b      	adds	r3, r7, r1
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 800153a:	187b      	adds	r3, r7, r1
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001540:	187b      	adds	r3, r7, r1
 8001542:	4a08      	ldr	r2, [pc, #32]	; (8001564 <HAL_UART_MspInit+0x150>)
 8001544:	0019      	movs	r1, r3
 8001546:	0010      	movs	r0, r2
 8001548:	f000 fe14 	bl	8002174 <HAL_GPIO_Init>
}
 800154c:	46c0      	nop			; (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	b013      	add	sp, #76	; 0x4c
 8001552:	bd90      	pop	{r4, r7, pc}
 8001554:	40013800 	.word	0x40013800
 8001558:	40021000 	.word	0x40021000
 800155c:	50000800 	.word	0x50000800
 8001560:	40004400 	.word	0x40004400
 8001564:	50000c00 	.word	0x50000c00

08001568 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001568:	480d      	ldr	r0, [pc, #52]	; (80015a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800156a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800156c:	f7ff f9f2 	bl	8000954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001570:	480c      	ldr	r0, [pc, #48]	; (80015a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001572:	490d      	ldr	r1, [pc, #52]	; (80015a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001574:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <LoopForever+0xe>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001578:	e002      	b.n	8001580 <LoopCopyDataInit>

0800157a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800157c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157e:	3304      	adds	r3, #4

08001580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001584:	d3f9      	bcc.n	800157a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001588:	4c0a      	ldr	r4, [pc, #40]	; (80015b4 <LoopForever+0x16>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800158c:	e001      	b.n	8001592 <LoopFillZerobss>

0800158e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001590:	3204      	adds	r2, #4

08001592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001596:	f003 fcc1 	bl	8004f1c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800159a:	f7ff f871 	bl	8000680 <main>

0800159e <LoopForever>:

LoopForever:
  b LoopForever
 800159e:	e7fe      	b.n	800159e <LoopForever>
  ldr   r0, =_estack
 80015a0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80015a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80015ac:	08005c2c 	.word	0x08005c2c
  ldr r2, =_sbss
 80015b0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80015b4:	2000052c 	.word	0x2000052c

080015b8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC1_IRQHandler>
	...

080015bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015c2:	1dfb      	adds	r3, r7, #7
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_Init+0x3c>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_Init+0x3c>)
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	0049      	lsls	r1, r1, #1
 80015d2:	430a      	orrs	r2, r1
 80015d4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015d6:	2003      	movs	r0, #3
 80015d8:	f000 f810 	bl	80015fc <HAL_InitTick>
 80015dc:	1e03      	subs	r3, r0, #0
 80015de:	d003      	beq.n	80015e8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80015e0:	1dfb      	adds	r3, r7, #7
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
 80015e6:	e001      	b.n	80015ec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80015e8:	f7ff f8de 	bl	80007a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015ec:	1dfb      	adds	r3, r7, #7
 80015ee:	781b      	ldrb	r3, [r3, #0]
}
 80015f0:	0018      	movs	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b002      	add	sp, #8
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40022000 	.word	0x40022000

080015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001604:	230f      	movs	r3, #15
 8001606:	18fb      	adds	r3, r7, r3
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800160c:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <HAL_InitTick+0x88>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d02b      	beq.n	800166c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001614:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <HAL_InitTick+0x8c>)
 8001616:	681c      	ldr	r4, [r3, #0]
 8001618:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <HAL_InitTick+0x88>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	0019      	movs	r1, r3
 800161e:	23fa      	movs	r3, #250	; 0xfa
 8001620:	0098      	lsls	r0, r3, #2
 8001622:	f7fe fd77 	bl	8000114 <__udivsi3>
 8001626:	0003      	movs	r3, r0
 8001628:	0019      	movs	r1, r3
 800162a:	0020      	movs	r0, r4
 800162c:	f7fe fd72 	bl	8000114 <__udivsi3>
 8001630:	0003      	movs	r3, r0
 8001632:	0018      	movs	r0, r3
 8001634:	f000 fd91 	bl	800215a <HAL_SYSTICK_Config>
 8001638:	1e03      	subs	r3, r0, #0
 800163a:	d112      	bne.n	8001662 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b03      	cmp	r3, #3
 8001640:	d80a      	bhi.n	8001658 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	2301      	movs	r3, #1
 8001646:	425b      	negs	r3, r3
 8001648:	2200      	movs	r2, #0
 800164a:	0018      	movs	r0, r3
 800164c:	f000 fd70 	bl	8002130 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001650:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_InitTick+0x90>)
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	e00d      	b.n	8001674 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001658:	230f      	movs	r3, #15
 800165a:	18fb      	adds	r3, r7, r3
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
 8001660:	e008      	b.n	8001674 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001662:	230f      	movs	r3, #15
 8001664:	18fb      	adds	r3, r7, r3
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]
 800166a:	e003      	b.n	8001674 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800166c:	230f      	movs	r3, #15
 800166e:	18fb      	adds	r3, r7, r3
 8001670:	2201      	movs	r2, #1
 8001672:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001674:	230f      	movs	r3, #15
 8001676:	18fb      	adds	r3, r7, r3
 8001678:	781b      	ldrb	r3, [r3, #0]
}
 800167a:	0018      	movs	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	b005      	add	sp, #20
 8001680:	bd90      	pop	{r4, r7, pc}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	20000008 	.word	0x20000008
 8001688:	20000000 	.word	0x20000000
 800168c:	20000004 	.word	0x20000004

08001690 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <HAL_IncTick+0x1c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	001a      	movs	r2, r3
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <HAL_IncTick+0x20>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	18d2      	adds	r2, r2, r3
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <HAL_IncTick+0x20>)
 80016a2:	601a      	str	r2, [r3, #0]
}
 80016a4:	46c0      	nop			; (mov r8, r8)
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	20000008 	.word	0x20000008
 80016b0:	200003dc 	.word	0x200003dc

080016b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  return uwTick;
 80016b8:	4b02      	ldr	r3, [pc, #8]	; (80016c4 <HAL_GetTick+0x10>)
 80016ba:	681b      	ldr	r3, [r3, #0]
}
 80016bc:	0018      	movs	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	200003dc 	.word	0x200003dc

080016c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d0:	f7ff fff0 	bl	80016b4 <HAL_GetTick>
 80016d4:	0003      	movs	r3, r0
 80016d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	3301      	adds	r3, #1
 80016e0:	d005      	beq.n	80016ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_Delay+0x44>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	001a      	movs	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	189b      	adds	r3, r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	f7ff ffe0 	bl	80016b4 <HAL_GetTick>
 80016f4:	0002      	movs	r2, r0
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d8f7      	bhi.n	80016f0 <HAL_Delay+0x28>
  {
  }
}
 8001700:	46c0      	nop			; (mov r8, r8)
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	46bd      	mov	sp, r7
 8001706:	b004      	add	sp, #16
 8001708:	bd80      	pop	{r7, pc}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	20000008 	.word	0x20000008

08001710 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001720:	401a      	ands	r2, r3
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	601a      	str	r2, [r3, #0]
}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	46bd      	mov	sp, r7
 800172e:	b002      	add	sp, #8
 8001730:	bd80      	pop	{r7, pc}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	fe3fffff 	.word	0xfe3fffff

08001738 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	23e0      	movs	r3, #224	; 0xe0
 8001746:	045b      	lsls	r3, r3, #17
 8001748:	4013      	ands	r3, r2
}
 800174a:	0018      	movs	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	b002      	add	sp, #8
 8001750:	bd80      	pop	{r7, pc}

08001752 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	2104      	movs	r1, #4
 8001766:	400a      	ands	r2, r1
 8001768:	2107      	movs	r1, #7
 800176a:	4091      	lsls	r1, r2
 800176c:	000a      	movs	r2, r1
 800176e:	43d2      	mvns	r2, r2
 8001770:	401a      	ands	r2, r3
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2104      	movs	r1, #4
 8001776:	400b      	ands	r3, r1
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	4099      	lsls	r1, r3
 800177c:	000b      	movs	r3, r1
 800177e:	431a      	orrs	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001784:	46c0      	nop			; (mov r8, r8)
 8001786:	46bd      	mov	sp, r7
 8001788:	b004      	add	sp, #16
 800178a:	bd80      	pop	{r7, pc}

0800178c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	2104      	movs	r1, #4
 800179e:	400a      	ands	r2, r1
 80017a0:	2107      	movs	r1, #7
 80017a2:	4091      	lsls	r1, r2
 80017a4:	000a      	movs	r2, r1
 80017a6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	2104      	movs	r1, #4
 80017ac:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80017ae:	40da      	lsrs	r2, r3
 80017b0:	0013      	movs	r3, r2
}
 80017b2:	0018      	movs	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b002      	add	sp, #8
 80017b8:	bd80      	pop	{r7, pc}

080017ba <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b084      	sub	sp, #16
 80017be:	af00      	add	r7, sp, #0
 80017c0:	60f8      	str	r0, [r7, #12]
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	211f      	movs	r1, #31
 80017ce:	400a      	ands	r2, r1
 80017d0:	210f      	movs	r1, #15
 80017d2:	4091      	lsls	r1, r2
 80017d4:	000a      	movs	r2, r1
 80017d6:	43d2      	mvns	r2, r2
 80017d8:	401a      	ands	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	0e9b      	lsrs	r3, r3, #26
 80017de:	210f      	movs	r1, #15
 80017e0:	4019      	ands	r1, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	201f      	movs	r0, #31
 80017e6:	4003      	ands	r3, r0
 80017e8:	4099      	lsls	r1, r3
 80017ea:	000b      	movs	r3, r1
 80017ec:	431a      	orrs	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b004      	add	sp, #16
 80017f8:	bd80      	pop	{r7, pc}

080017fa <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	035b      	lsls	r3, r3, #13
 800180c:	0b5b      	lsrs	r3, r3, #13
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001814:	46c0      	nop			; (mov r8, r8)
 8001816:	46bd      	mov	sp, r7
 8001818:	b002      	add	sp, #8
 800181a:	bd80      	pop	{r7, pc}

0800181c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	0352      	lsls	r2, r2, #13
 800182e:	0b52      	lsrs	r2, r2, #13
 8001830:	43d2      	mvns	r2, r2
 8001832:	401a      	ands	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001838:	46c0      	nop			; (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	b002      	add	sp, #8
 800183e:	bd80      	pop	{r7, pc}

08001840 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	0212      	lsls	r2, r2, #8
 8001854:	43d2      	mvns	r2, r2
 8001856:	401a      	ands	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	400b      	ands	r3, r1
 8001860:	4904      	ldr	r1, [pc, #16]	; (8001874 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001862:	400b      	ands	r3, r1
 8001864:	431a      	orrs	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	46bd      	mov	sp, r7
 800186e:	b004      	add	sp, #16
 8001870:	bd80      	pop	{r7, pc}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	07ffff00 	.word	0x07ffff00

08001878 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	4a05      	ldr	r2, [pc, #20]	; (800189c <LL_ADC_EnableInternalRegulator+0x24>)
 8001886:	4013      	ands	r3, r2
 8001888:	2280      	movs	r2, #128	; 0x80
 800188a:	0552      	lsls	r2, r2, #21
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	b002      	add	sp, #8
 8001898:	bd80      	pop	{r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	6fffffe8 	.word	0x6fffffe8

080018a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	055b      	lsls	r3, r3, #21
 80018b0:	401a      	ands	r2, r3
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	055b      	lsls	r3, r3, #21
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d101      	bne.n	80018be <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80018be:	2300      	movs	r3, #0
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b002      	add	sp, #8
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	2201      	movs	r2, #1
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <LL_ADC_IsEnabled+0x18>
 80018dc:	2301      	movs	r3, #1
 80018de:	e000      	b.n	80018e2 <LL_ADC_IsEnabled+0x1a>
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	0018      	movs	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	b002      	add	sp, #8
 80018e8:	bd80      	pop	{r7, pc}

080018ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2204      	movs	r2, #4
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d101      	bne.n	8001902 <LL_ADC_REG_IsConversionOngoing+0x18>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001902:	2300      	movs	r3, #0
}
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b002      	add	sp, #8
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001914:	231f      	movs	r3, #31
 8001916:	18fb      	adds	r3, r7, r3
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800191c:	2300      	movs	r3, #0
 800191e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e17f      	b.n	8001c32 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10a      	bne.n	8001950 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	0018      	movs	r0, r3
 800193e:	f7fe fdc9 	bl	80004d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2254      	movs	r2, #84	; 0x54
 800194c:	2100      	movs	r1, #0
 800194e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	0018      	movs	r0, r3
 8001956:	f7ff ffa3 	bl	80018a0 <LL_ADC_IsInternalRegulatorEnabled>
 800195a:	1e03      	subs	r3, r0, #0
 800195c:	d115      	bne.n	800198a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	0018      	movs	r0, r3
 8001964:	f7ff ff88 	bl	8001878 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001968:	4bb4      	ldr	r3, [pc, #720]	; (8001c3c <HAL_ADC_Init+0x330>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	49b4      	ldr	r1, [pc, #720]	; (8001c40 <HAL_ADC_Init+0x334>)
 800196e:	0018      	movs	r0, r3
 8001970:	f7fe fbd0 	bl	8000114 <__udivsi3>
 8001974:	0003      	movs	r3, r0
 8001976:	3301      	adds	r3, #1
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800197c:	e002      	b.n	8001984 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	3b01      	subs	r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f9      	bne.n	800197e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	0018      	movs	r0, r3
 8001990:	f7ff ff86 	bl	80018a0 <LL_ADC_IsInternalRegulatorEnabled>
 8001994:	1e03      	subs	r3, r0, #0
 8001996:	d10f      	bne.n	80019b8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	2210      	movs	r2, #16
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	2201      	movs	r2, #1
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80019b0:	231f      	movs	r3, #31
 80019b2:	18fb      	adds	r3, r7, r3
 80019b4:	2201      	movs	r2, #1
 80019b6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	0018      	movs	r0, r3
 80019be:	f7ff ff94 	bl	80018ea <LL_ADC_REG_IsConversionOngoing>
 80019c2:	0003      	movs	r3, r0
 80019c4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ca:	2210      	movs	r2, #16
 80019cc:	4013      	ands	r3, r2
 80019ce:	d000      	beq.n	80019d2 <HAL_ADC_Init+0xc6>
 80019d0:	e122      	b.n	8001c18 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d000      	beq.n	80019da <HAL_ADC_Init+0xce>
 80019d8:	e11e      	b.n	8001c18 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019de:	4a99      	ldr	r2, [pc, #612]	; (8001c44 <HAL_ADC_Init+0x338>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	2202      	movs	r2, #2
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	0018      	movs	r0, r3
 80019f0:	f7ff ff6a 	bl	80018c8 <LL_ADC_IsEnabled>
 80019f4:	1e03      	subs	r3, r0, #0
 80019f6:	d000      	beq.n	80019fa <HAL_ADC_Init+0xee>
 80019f8:	e0ad      	b.n	8001b56 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7e1b      	ldrb	r3, [r3, #24]
 8001a02:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001a04:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7e5b      	ldrb	r3, [r3, #25]
 8001a0a:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001a0c:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7e9b      	ldrb	r3, [r3, #26]
 8001a12:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001a14:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <HAL_ADC_Init+0x118>
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	015b      	lsls	r3, r3, #5
 8001a22:	e000      	b.n	8001a26 <HAL_ADC_Init+0x11a>
 8001a24:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001a26:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001a2c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	da04      	bge.n	8001a40 <HAL_ADC_Init+0x134>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	085b      	lsrs	r3, r3, #1
 8001a3e:	e001      	b.n	8001a44 <HAL_ADC_Init+0x138>
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001a44:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	212c      	movs	r1, #44	; 0x2c
 8001a4a:	5c5b      	ldrb	r3, [r3, r1]
 8001a4c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001a4e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2220      	movs	r2, #32
 8001a5a:	5c9b      	ldrb	r3, [r3, r2]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d115      	bne.n	8001a8c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7e9b      	ldrb	r3, [r3, #26]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d105      	bne.n	8001a74 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2280      	movs	r2, #128	; 0x80
 8001a6c:	0252      	lsls	r2, r2, #9
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	e00b      	b.n	8001a8c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a78:	2220      	movs	r2, #32
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a84:	2201      	movs	r2, #1
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00a      	beq.n	8001aaa <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a98:	23e0      	movs	r3, #224	; 0xe0
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	4a65      	ldr	r2, [pc, #404]	; (8001c48 <HAL_ADC_Init+0x33c>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	0019      	movs	r1, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	0f9b      	lsrs	r3, r3, #30
 8001ac6:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001acc:	4313      	orrs	r3, r2
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	223c      	movs	r2, #60	; 0x3c
 8001ad8:	5c9b      	ldrb	r3, [r3, r2]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d111      	bne.n	8001b02 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	0f9b      	lsrs	r3, r3, #30
 8001ae4:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001aea:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001af0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001af6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	2201      	movs	r2, #1
 8001afe:	4313      	orrs	r3, r2
 8001b00:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	4a50      	ldr	r2, [pc, #320]	; (8001c4c <HAL_ADC_Init+0x340>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	0019      	movs	r1, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	23c0      	movs	r3, #192	; 0xc0
 8001b1e:	061b      	lsls	r3, r3, #24
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d018      	beq.n	8001b56 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	05db      	lsls	r3, r3, #23
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d012      	beq.n	8001b56 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	061b      	lsls	r3, r3, #24
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d00c      	beq.n	8001b56 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001b3c:	4b44      	ldr	r3, [pc, #272]	; (8001c50 <HAL_ADC_Init+0x344>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a44      	ldr	r2, [pc, #272]	; (8001c54 <HAL_ADC_Init+0x348>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	0019      	movs	r1, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	23f0      	movs	r3, #240	; 0xf0
 8001b4c:	039b      	lsls	r3, r3, #14
 8001b4e:	401a      	ands	r2, r3
 8001b50:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <HAL_ADC_Init+0x344>)
 8001b52:	430a      	orrs	r2, r1
 8001b54:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6818      	ldr	r0, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b5e:	001a      	movs	r2, r3
 8001b60:	2100      	movs	r1, #0
 8001b62:	f7ff fdf6 	bl	8001752 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6818      	ldr	r0, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6e:	493a      	ldr	r1, [pc, #232]	; (8001c58 <HAL_ADC_Init+0x34c>)
 8001b70:	001a      	movs	r2, r3
 8001b72:	f7ff fdee 	bl	8001752 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d109      	bne.n	8001b92 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2110      	movs	r1, #16
 8001b8a:	4249      	negs	r1, r1
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	629a      	str	r2, [r3, #40]	; 0x28
 8001b90:	e018      	b.n	8001bc4 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691a      	ldr	r2, [r3, #16]
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	039b      	lsls	r3, r3, #14
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d112      	bne.n	8001bc4 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	221c      	movs	r2, #28
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2210      	movs	r2, #16
 8001bb2:	4252      	negs	r2, r2
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	0011      	movs	r1, r2
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2100      	movs	r1, #0
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f7ff fdde 	bl	800178c <LL_ADC_GetSamplingTimeCommonChannels>
 8001bd0:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d10b      	bne.n	8001bf2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be4:	2203      	movs	r2, #3
 8001be6:	4393      	bics	r3, r2
 8001be8:	2201      	movs	r2, #1
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001bf0:	e01c      	b.n	8001c2c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	2212      	movs	r2, #18
 8001bf8:	4393      	bics	r3, r2
 8001bfa:	2210      	movs	r2, #16
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c06:	2201      	movs	r2, #1
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001c0e:	231f      	movs	r3, #31
 8001c10:	18fb      	adds	r3, r7, r3
 8001c12:	2201      	movs	r2, #1
 8001c14:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c16:	e009      	b.n	8001c2c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1c:	2210      	movs	r2, #16
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c24:	231f      	movs	r3, #31
 8001c26:	18fb      	adds	r3, r7, r3
 8001c28:	2201      	movs	r2, #1
 8001c2a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001c2c:	231f      	movs	r3, #31
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	781b      	ldrb	r3, [r3, #0]
}
 8001c32:	0018      	movs	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b008      	add	sp, #32
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	00030d40 	.word	0x00030d40
 8001c44:	fffffefd 	.word	0xfffffefd
 8001c48:	fffe0201 	.word	0xfffe0201
 8001c4c:	1ffffc02 	.word	0x1ffffc02
 8001c50:	40012708 	.word	0x40012708
 8001c54:	ffc3ffff 	.word	0xffc3ffff
 8001c58:	07ffff04 	.word	0x07ffff04

08001c5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c66:	2317      	movs	r3, #23
 8001c68:	18fb      	adds	r3, r7, r3
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2254      	movs	r2, #84	; 0x54
 8001c76:	5c9b      	ldrb	r3, [r3, r2]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x24>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e1c0      	b.n	8002002 <HAL_ADC_ConfigChannel+0x3a6>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2254      	movs	r2, #84	; 0x54
 8001c84:	2101      	movs	r1, #1
 8001c86:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f7ff fe2c 	bl	80018ea <LL_ADC_REG_IsConversionOngoing>
 8001c92:	1e03      	subs	r3, r0, #0
 8001c94:	d000      	beq.n	8001c98 <HAL_ADC_ConfigChannel+0x3c>
 8001c96:	e1a3      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d100      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x46>
 8001ca0:	e143      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691a      	ldr	r2, [r3, #16]
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	061b      	lsls	r3, r3, #24
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d004      	beq.n	8001cb8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001cb2:	4ac1      	ldr	r2, [pc, #772]	; (8001fb8 <HAL_ADC_ConfigChannel+0x35c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d108      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	0019      	movs	r1, r3
 8001cc2:	0010      	movs	r0, r2
 8001cc4:	f7ff fd99 	bl	80017fa <LL_ADC_REG_SetSequencerChAdd>
 8001cc8:	e0c9      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	211f      	movs	r1, #31
 8001cd4:	400b      	ands	r3, r1
 8001cd6:	210f      	movs	r1, #15
 8001cd8:	4099      	lsls	r1, r3
 8001cda:	000b      	movs	r3, r1
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	4013      	ands	r3, r2
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	035b      	lsls	r3, r3, #13
 8001ce8:	0b5b      	lsrs	r3, r3, #13
 8001cea:	d105      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x9c>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	0e9b      	lsrs	r3, r3, #26
 8001cf2:	221f      	movs	r2, #31
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	e098      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x1ce>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d000      	beq.n	8001d04 <HAL_ADC_ConfigChannel+0xa8>
 8001d02:	e091      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x1cc>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d000      	beq.n	8001d10 <HAL_ADC_ConfigChannel+0xb4>
 8001d0e:	e089      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x1c8>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2204      	movs	r2, #4
 8001d16:	4013      	ands	r3, r2
 8001d18:	d000      	beq.n	8001d1c <HAL_ADC_ConfigChannel+0xc0>
 8001d1a:	e081      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x1c4>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2208      	movs	r2, #8
 8001d22:	4013      	ands	r3, r2
 8001d24:	d000      	beq.n	8001d28 <HAL_ADC_ConfigChannel+0xcc>
 8001d26:	e079      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x1c0>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d000      	beq.n	8001d34 <HAL_ADC_ConfigChannel+0xd8>
 8001d32:	e071      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x1bc>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d000      	beq.n	8001d40 <HAL_ADC_ConfigChannel+0xe4>
 8001d3e:	e069      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x1b8>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2240      	movs	r2, #64	; 0x40
 8001d46:	4013      	ands	r3, r2
 8001d48:	d000      	beq.n	8001d4c <HAL_ADC_ConfigChannel+0xf0>
 8001d4a:	e061      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x1b4>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2280      	movs	r2, #128	; 0x80
 8001d52:	4013      	ands	r3, r2
 8001d54:	d000      	beq.n	8001d58 <HAL_ADC_ConfigChannel+0xfc>
 8001d56:	e059      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x1b0>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4013      	ands	r3, r2
 8001d62:	d151      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x1ac>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d149      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x1a8>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d141      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x1a4>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	4013      	ands	r3, r2
 8001d86:	d139      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x1a0>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	015b      	lsls	r3, r3, #5
 8001d90:	4013      	ands	r3, r2
 8001d92:	d131      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x19c>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	019b      	lsls	r3, r3, #6
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d129      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x198>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	01db      	lsls	r3, r3, #7
 8001da8:	4013      	ands	r3, r2
 8001daa:	d121      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x194>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	021b      	lsls	r3, r3, #8
 8001db4:	4013      	ands	r3, r2
 8001db6:	d119      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x190>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	025b      	lsls	r3, r3, #9
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d111      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x18c>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	029b      	lsls	r3, r3, #10
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d109      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x188>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	02db      	lsls	r3, r3, #11
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d001      	beq.n	8001de0 <HAL_ADC_ConfigChannel+0x184>
 8001ddc:	2312      	movs	r3, #18
 8001dde:	e024      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x1ce>
 8001de0:	2300      	movs	r3, #0
 8001de2:	e022      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x1ce>
 8001de4:	2311      	movs	r3, #17
 8001de6:	e020      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x1ce>
 8001de8:	2310      	movs	r3, #16
 8001dea:	e01e      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x1ce>
 8001dec:	230f      	movs	r3, #15
 8001dee:	e01c      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x1ce>
 8001df0:	230e      	movs	r3, #14
 8001df2:	e01a      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x1ce>
 8001df4:	230d      	movs	r3, #13
 8001df6:	e018      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x1ce>
 8001df8:	230c      	movs	r3, #12
 8001dfa:	e016      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x1ce>
 8001dfc:	230b      	movs	r3, #11
 8001dfe:	e014      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x1ce>
 8001e00:	230a      	movs	r3, #10
 8001e02:	e012      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x1ce>
 8001e04:	2309      	movs	r3, #9
 8001e06:	e010      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x1ce>
 8001e08:	2308      	movs	r3, #8
 8001e0a:	e00e      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x1ce>
 8001e0c:	2307      	movs	r3, #7
 8001e0e:	e00c      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x1ce>
 8001e10:	2306      	movs	r3, #6
 8001e12:	e00a      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x1ce>
 8001e14:	2305      	movs	r3, #5
 8001e16:	e008      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x1ce>
 8001e18:	2304      	movs	r3, #4
 8001e1a:	e006      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x1ce>
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e004      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x1ce>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e002      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x1ce>
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x1ce>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	6852      	ldr	r2, [r2, #4]
 8001e2e:	201f      	movs	r0, #31
 8001e30:	4002      	ands	r2, r0
 8001e32:	4093      	lsls	r3, r2
 8001e34:	000a      	movs	r2, r1
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	089b      	lsrs	r3, r3, #2
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d808      	bhi.n	8001e5e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	6859      	ldr	r1, [r3, #4]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	001a      	movs	r2, r3
 8001e5a:	f7ff fcae 	bl	80017ba <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6819      	ldr	r1, [r3, #0]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	001a      	movs	r2, r3
 8001e6c:	f7ff fce8 	bl	8001840 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	db00      	blt.n	8001e7a <HAL_ADC_ConfigChannel+0x21e>
 8001e78:	e0bc      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e7a:	4b50      	ldr	r3, [pc, #320]	; (8001fbc <HAL_ADC_ConfigChannel+0x360>)
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f7ff fc5b 	bl	8001738 <LL_ADC_GetCommonPathInternalCh>
 8001e82:	0003      	movs	r3, r0
 8001e84:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a4d      	ldr	r2, [pc, #308]	; (8001fc0 <HAL_ADC_ConfigChannel+0x364>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d122      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	041b      	lsls	r3, r3, #16
 8001e96:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e98:	d11d      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	2280      	movs	r2, #128	; 0x80
 8001e9e:	0412      	lsls	r2, r2, #16
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	4a46      	ldr	r2, [pc, #280]	; (8001fbc <HAL_ADC_ConfigChannel+0x360>)
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	0010      	movs	r0, r2
 8001ea8:	f7ff fc32 	bl	8001710 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001eac:	4b45      	ldr	r3, [pc, #276]	; (8001fc4 <HAL_ADC_ConfigChannel+0x368>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4945      	ldr	r1, [pc, #276]	; (8001fc8 <HAL_ADC_ConfigChannel+0x36c>)
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f7fe f92e 	bl	8000114 <__udivsi3>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	0013      	movs	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	189b      	adds	r3, r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ec6:	e002      	b.n	8001ece <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f9      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ed4:	e08e      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a3c      	ldr	r2, [pc, #240]	; (8001fcc <HAL_ADC_ConfigChannel+0x370>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d10e      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	045b      	lsls	r3, r3, #17
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d109      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2280      	movs	r2, #128	; 0x80
 8001eee:	0452      	lsls	r2, r2, #17
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	4a32      	ldr	r2, [pc, #200]	; (8001fbc <HAL_ADC_ConfigChannel+0x360>)
 8001ef4:	0019      	movs	r1, r3
 8001ef6:	0010      	movs	r0, r2
 8001ef8:	f7ff fc0a 	bl	8001710 <LL_ADC_SetCommonPathInternalCh>
 8001efc:	e07a      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a33      	ldr	r2, [pc, #204]	; (8001fd0 <HAL_ADC_ConfigChannel+0x374>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d000      	beq.n	8001f0a <HAL_ADC_ConfigChannel+0x2ae>
 8001f08:	e074      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	03db      	lsls	r3, r3, #15
 8001f10:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001f12:	d000      	beq.n	8001f16 <HAL_ADC_ConfigChannel+0x2ba>
 8001f14:	e06e      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	2280      	movs	r2, #128	; 0x80
 8001f1a:	03d2      	lsls	r2, r2, #15
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	4a27      	ldr	r2, [pc, #156]	; (8001fbc <HAL_ADC_ConfigChannel+0x360>)
 8001f20:	0019      	movs	r1, r3
 8001f22:	0010      	movs	r0, r2
 8001f24:	f7ff fbf4 	bl	8001710 <LL_ADC_SetCommonPathInternalCh>
 8001f28:	e064      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691a      	ldr	r2, [r3, #16]
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	061b      	lsls	r3, r3, #24
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d004      	beq.n	8001f40 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001f3a:	4a1f      	ldr	r2, [pc, #124]	; (8001fb8 <HAL_ADC_ConfigChannel+0x35c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d107      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	0019      	movs	r1, r3
 8001f4a:	0010      	movs	r0, r2
 8001f4c:	f7ff fc66 	bl	800181c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	da4d      	bge.n	8001ff4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <HAL_ADC_ConfigChannel+0x360>)
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f7ff fbec 	bl	8001738 <LL_ADC_GetCommonPathInternalCh>
 8001f60:	0003      	movs	r3, r0
 8001f62:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a15      	ldr	r2, [pc, #84]	; (8001fc0 <HAL_ADC_ConfigChannel+0x364>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d108      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4a18      	ldr	r2, [pc, #96]	; (8001fd4 <HAL_ADC_ConfigChannel+0x378>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	4a11      	ldr	r2, [pc, #68]	; (8001fbc <HAL_ADC_ConfigChannel+0x360>)
 8001f76:	0019      	movs	r1, r3
 8001f78:	0010      	movs	r0, r2
 8001f7a:	f7ff fbc9 	bl	8001710 <LL_ADC_SetCommonPathInternalCh>
 8001f7e:	e039      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a11      	ldr	r2, [pc, #68]	; (8001fcc <HAL_ADC_ConfigChannel+0x370>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d108      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <HAL_ADC_ConfigChannel+0x37c>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <HAL_ADC_ConfigChannel+0x360>)
 8001f92:	0019      	movs	r1, r3
 8001f94:	0010      	movs	r0, r2
 8001f96:	f7ff fbbb 	bl	8001710 <LL_ADC_SetCommonPathInternalCh>
 8001f9a:	e02b      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <HAL_ADC_ConfigChannel+0x374>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d126      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4a0c      	ldr	r2, [pc, #48]	; (8001fdc <HAL_ADC_ConfigChannel+0x380>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	4a03      	ldr	r2, [pc, #12]	; (8001fbc <HAL_ADC_ConfigChannel+0x360>)
 8001fae:	0019      	movs	r1, r3
 8001fb0:	0010      	movs	r0, r2
 8001fb2:	f7ff fbad 	bl	8001710 <LL_ADC_SetCommonPathInternalCh>
 8001fb6:	e01d      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x398>
 8001fb8:	80000004 	.word	0x80000004
 8001fbc:	40012708 	.word	0x40012708
 8001fc0:	b0001000 	.word	0xb0001000
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	00030d40 	.word	0x00030d40
 8001fcc:	b8004000 	.word	0xb8004000
 8001fd0:	b4002000 	.word	0xb4002000
 8001fd4:	ff7fffff 	.word	0xff7fffff
 8001fd8:	feffffff 	.word	0xfeffffff
 8001fdc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001fec:	2317      	movs	r3, #23
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2254      	movs	r2, #84	; 0x54
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001ffc:	2317      	movs	r3, #23
 8001ffe:	18fb      	adds	r3, r7, r3
 8002000:	781b      	ldrb	r3, [r3, #0]
}
 8002002:	0018      	movs	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	b006      	add	sp, #24
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			; (mov r8, r8)

0800200c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	0002      	movs	r2, r0
 8002014:	6039      	str	r1, [r7, #0]
 8002016:	1dfb      	adds	r3, r7, #7
 8002018:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800201a:	1dfb      	adds	r3, r7, #7
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b7f      	cmp	r3, #127	; 0x7f
 8002020:	d828      	bhi.n	8002074 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002022:	4a2f      	ldr	r2, [pc, #188]	; (80020e0 <__NVIC_SetPriority+0xd4>)
 8002024:	1dfb      	adds	r3, r7, #7
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	b25b      	sxtb	r3, r3
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	33c0      	adds	r3, #192	; 0xc0
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	589b      	ldr	r3, [r3, r2]
 8002032:	1dfa      	adds	r2, r7, #7
 8002034:	7812      	ldrb	r2, [r2, #0]
 8002036:	0011      	movs	r1, r2
 8002038:	2203      	movs	r2, #3
 800203a:	400a      	ands	r2, r1
 800203c:	00d2      	lsls	r2, r2, #3
 800203e:	21ff      	movs	r1, #255	; 0xff
 8002040:	4091      	lsls	r1, r2
 8002042:	000a      	movs	r2, r1
 8002044:	43d2      	mvns	r2, r2
 8002046:	401a      	ands	r2, r3
 8002048:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	019b      	lsls	r3, r3, #6
 800204e:	22ff      	movs	r2, #255	; 0xff
 8002050:	401a      	ands	r2, r3
 8002052:	1dfb      	adds	r3, r7, #7
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	0018      	movs	r0, r3
 8002058:	2303      	movs	r3, #3
 800205a:	4003      	ands	r3, r0
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002060:	481f      	ldr	r0, [pc, #124]	; (80020e0 <__NVIC_SetPriority+0xd4>)
 8002062:	1dfb      	adds	r3, r7, #7
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	b25b      	sxtb	r3, r3
 8002068:	089b      	lsrs	r3, r3, #2
 800206a:	430a      	orrs	r2, r1
 800206c:	33c0      	adds	r3, #192	; 0xc0
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002072:	e031      	b.n	80020d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002074:	4a1b      	ldr	r2, [pc, #108]	; (80020e4 <__NVIC_SetPriority+0xd8>)
 8002076:	1dfb      	adds	r3, r7, #7
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	0019      	movs	r1, r3
 800207c:	230f      	movs	r3, #15
 800207e:	400b      	ands	r3, r1
 8002080:	3b08      	subs	r3, #8
 8002082:	089b      	lsrs	r3, r3, #2
 8002084:	3306      	adds	r3, #6
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	18d3      	adds	r3, r2, r3
 800208a:	3304      	adds	r3, #4
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	1dfa      	adds	r2, r7, #7
 8002090:	7812      	ldrb	r2, [r2, #0]
 8002092:	0011      	movs	r1, r2
 8002094:	2203      	movs	r2, #3
 8002096:	400a      	ands	r2, r1
 8002098:	00d2      	lsls	r2, r2, #3
 800209a:	21ff      	movs	r1, #255	; 0xff
 800209c:	4091      	lsls	r1, r2
 800209e:	000a      	movs	r2, r1
 80020a0:	43d2      	mvns	r2, r2
 80020a2:	401a      	ands	r2, r3
 80020a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	019b      	lsls	r3, r3, #6
 80020aa:	22ff      	movs	r2, #255	; 0xff
 80020ac:	401a      	ands	r2, r3
 80020ae:	1dfb      	adds	r3, r7, #7
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	0018      	movs	r0, r3
 80020b4:	2303      	movs	r3, #3
 80020b6:	4003      	ands	r3, r0
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020bc:	4809      	ldr	r0, [pc, #36]	; (80020e4 <__NVIC_SetPriority+0xd8>)
 80020be:	1dfb      	adds	r3, r7, #7
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	001c      	movs	r4, r3
 80020c4:	230f      	movs	r3, #15
 80020c6:	4023      	ands	r3, r4
 80020c8:	3b08      	subs	r3, #8
 80020ca:	089b      	lsrs	r3, r3, #2
 80020cc:	430a      	orrs	r2, r1
 80020ce:	3306      	adds	r3, #6
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	18c3      	adds	r3, r0, r3
 80020d4:	3304      	adds	r3, #4
 80020d6:	601a      	str	r2, [r3, #0]
}
 80020d8:	46c0      	nop			; (mov r8, r8)
 80020da:	46bd      	mov	sp, r7
 80020dc:	b003      	add	sp, #12
 80020de:	bd90      	pop	{r4, r7, pc}
 80020e0:	e000e100 	.word	0xe000e100
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	1e5a      	subs	r2, r3, #1
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	045b      	lsls	r3, r3, #17
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d301      	bcc.n	8002100 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fc:	2301      	movs	r3, #1
 80020fe:	e010      	b.n	8002122 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002100:	4b0a      	ldr	r3, [pc, #40]	; (800212c <SysTick_Config+0x44>)
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	3a01      	subs	r2, #1
 8002106:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002108:	2301      	movs	r3, #1
 800210a:	425b      	negs	r3, r3
 800210c:	2103      	movs	r1, #3
 800210e:	0018      	movs	r0, r3
 8002110:	f7ff ff7c 	bl	800200c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <SysTick_Config+0x44>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211a:	4b04      	ldr	r3, [pc, #16]	; (800212c <SysTick_Config+0x44>)
 800211c:	2207      	movs	r2, #7
 800211e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002120:	2300      	movs	r3, #0
}
 8002122:	0018      	movs	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	b002      	add	sp, #8
 8002128:	bd80      	pop	{r7, pc}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	e000e010 	.word	0xe000e010

08002130 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	210f      	movs	r1, #15
 800213c:	187b      	adds	r3, r7, r1
 800213e:	1c02      	adds	r2, r0, #0
 8002140:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	187b      	adds	r3, r7, r1
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	b25b      	sxtb	r3, r3
 800214a:	0011      	movs	r1, r2
 800214c:	0018      	movs	r0, r3
 800214e:	f7ff ff5d 	bl	800200c <__NVIC_SetPriority>
}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	46bd      	mov	sp, r7
 8002156:	b004      	add	sp, #16
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	0018      	movs	r0, r3
 8002166:	f7ff ffbf 	bl	80020e8 <SysTick_Config>
 800216a:	0003      	movs	r3, r0
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	b002      	add	sp, #8
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002182:	e147      	b.n	8002414 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2101      	movs	r1, #1
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4091      	lsls	r1, r2
 800218e:	000a      	movs	r2, r1
 8002190:	4013      	ands	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d100      	bne.n	800219c <HAL_GPIO_Init+0x28>
 800219a:	e138      	b.n	800240e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2203      	movs	r2, #3
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d005      	beq.n	80021b4 <HAL_GPIO_Init+0x40>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2203      	movs	r2, #3
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d130      	bne.n	8002216 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2203      	movs	r2, #3
 80021c0:	409a      	lsls	r2, r3
 80021c2:	0013      	movs	r3, r2
 80021c4:	43da      	mvns	r2, r3
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	409a      	lsls	r2, r3
 80021d6:	0013      	movs	r3, r2
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021ea:	2201      	movs	r2, #1
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	409a      	lsls	r2, r3
 80021f0:	0013      	movs	r3, r2
 80021f2:	43da      	mvns	r2, r3
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	2201      	movs	r2, #1
 8002202:	401a      	ands	r2, r3
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	409a      	lsls	r2, r3
 8002208:	0013      	movs	r3, r2
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2203      	movs	r2, #3
 800221c:	4013      	ands	r3, r2
 800221e:	2b03      	cmp	r3, #3
 8002220:	d017      	beq.n	8002252 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	2203      	movs	r2, #3
 800222e:	409a      	lsls	r2, r3
 8002230:	0013      	movs	r3, r2
 8002232:	43da      	mvns	r2, r3
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	4013      	ands	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	409a      	lsls	r2, r3
 8002244:	0013      	movs	r3, r2
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2203      	movs	r2, #3
 8002258:	4013      	ands	r3, r2
 800225a:	2b02      	cmp	r3, #2
 800225c:	d123      	bne.n	80022a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	08da      	lsrs	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3208      	adds	r2, #8
 8002266:	0092      	lsls	r2, r2, #2
 8002268:	58d3      	ldr	r3, [r2, r3]
 800226a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2207      	movs	r2, #7
 8002270:	4013      	ands	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	220f      	movs	r2, #15
 8002276:	409a      	lsls	r2, r3
 8002278:	0013      	movs	r3, r2
 800227a:	43da      	mvns	r2, r3
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4013      	ands	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2107      	movs	r1, #7
 800228a:	400b      	ands	r3, r1
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	409a      	lsls	r2, r3
 8002290:	0013      	movs	r3, r2
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	08da      	lsrs	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3208      	adds	r2, #8
 80022a0:	0092      	lsls	r2, r2, #2
 80022a2:	6939      	ldr	r1, [r7, #16]
 80022a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	2203      	movs	r2, #3
 80022b2:	409a      	lsls	r2, r3
 80022b4:	0013      	movs	r3, r2
 80022b6:	43da      	mvns	r2, r3
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4013      	ands	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2203      	movs	r2, #3
 80022c4:	401a      	ands	r2, r3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	409a      	lsls	r2, r3
 80022cc:	0013      	movs	r3, r2
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	23c0      	movs	r3, #192	; 0xc0
 80022e0:	029b      	lsls	r3, r3, #10
 80022e2:	4013      	ands	r3, r2
 80022e4:	d100      	bne.n	80022e8 <HAL_GPIO_Init+0x174>
 80022e6:	e092      	b.n	800240e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80022e8:	4a50      	ldr	r2, [pc, #320]	; (800242c <HAL_GPIO_Init+0x2b8>)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	089b      	lsrs	r3, r3, #2
 80022ee:	3318      	adds	r3, #24
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	589b      	ldr	r3, [r3, r2]
 80022f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2203      	movs	r2, #3
 80022fa:	4013      	ands	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	220f      	movs	r2, #15
 8002300:	409a      	lsls	r2, r3
 8002302:	0013      	movs	r3, r2
 8002304:	43da      	mvns	r2, r3
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4013      	ands	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	23a0      	movs	r3, #160	; 0xa0
 8002310:	05db      	lsls	r3, r3, #23
 8002312:	429a      	cmp	r2, r3
 8002314:	d013      	beq.n	800233e <HAL_GPIO_Init+0x1ca>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a45      	ldr	r2, [pc, #276]	; (8002430 <HAL_GPIO_Init+0x2bc>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00d      	beq.n	800233a <HAL_GPIO_Init+0x1c6>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a44      	ldr	r2, [pc, #272]	; (8002434 <HAL_GPIO_Init+0x2c0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d007      	beq.n	8002336 <HAL_GPIO_Init+0x1c2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a43      	ldr	r2, [pc, #268]	; (8002438 <HAL_GPIO_Init+0x2c4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d101      	bne.n	8002332 <HAL_GPIO_Init+0x1be>
 800232e:	2303      	movs	r3, #3
 8002330:	e006      	b.n	8002340 <HAL_GPIO_Init+0x1cc>
 8002332:	2305      	movs	r3, #5
 8002334:	e004      	b.n	8002340 <HAL_GPIO_Init+0x1cc>
 8002336:	2302      	movs	r3, #2
 8002338:	e002      	b.n	8002340 <HAL_GPIO_Init+0x1cc>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <HAL_GPIO_Init+0x1cc>
 800233e:	2300      	movs	r3, #0
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	2103      	movs	r1, #3
 8002344:	400a      	ands	r2, r1
 8002346:	00d2      	lsls	r2, r2, #3
 8002348:	4093      	lsls	r3, r2
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002350:	4936      	ldr	r1, [pc, #216]	; (800242c <HAL_GPIO_Init+0x2b8>)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	3318      	adds	r3, #24
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800235e:	4b33      	ldr	r3, [pc, #204]	; (800242c <HAL_GPIO_Init+0x2b8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	43da      	mvns	r2, r3
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	035b      	lsls	r3, r3, #13
 8002376:	4013      	ands	r3, r2
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002382:	4b2a      	ldr	r3, [pc, #168]	; (800242c <HAL_GPIO_Init+0x2b8>)
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002388:	4b28      	ldr	r3, [pc, #160]	; (800242c <HAL_GPIO_Init+0x2b8>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	43da      	mvns	r2, r3
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4013      	ands	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	039b      	lsls	r3, r3, #14
 80023a0:	4013      	ands	r3, r2
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023ac:	4b1f      	ldr	r3, [pc, #124]	; (800242c <HAL_GPIO_Init+0x2b8>)
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023b2:	4a1e      	ldr	r2, [pc, #120]	; (800242c <HAL_GPIO_Init+0x2b8>)
 80023b4:	2384      	movs	r3, #132	; 0x84
 80023b6:	58d3      	ldr	r3, [r2, r3]
 80023b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	43da      	mvns	r2, r3
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	2380      	movs	r3, #128	; 0x80
 80023ca:	029b      	lsls	r3, r3, #10
 80023cc:	4013      	ands	r3, r2
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023d8:	4914      	ldr	r1, [pc, #80]	; (800242c <HAL_GPIO_Init+0x2b8>)
 80023da:	2284      	movs	r2, #132	; 0x84
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80023e0:	4a12      	ldr	r2, [pc, #72]	; (800242c <HAL_GPIO_Init+0x2b8>)
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	58d3      	ldr	r3, [r2, r3]
 80023e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	43da      	mvns	r2, r3
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	025b      	lsls	r3, r3, #9
 80023fa:	4013      	ands	r3, r2
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002406:	4909      	ldr	r1, [pc, #36]	; (800242c <HAL_GPIO_Init+0x2b8>)
 8002408:	2280      	movs	r2, #128	; 0x80
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	3301      	adds	r3, #1
 8002412:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	40da      	lsrs	r2, r3
 800241c:	1e13      	subs	r3, r2, #0
 800241e:	d000      	beq.n	8002422 <HAL_GPIO_Init+0x2ae>
 8002420:	e6b0      	b.n	8002184 <HAL_GPIO_Init+0x10>
  }
}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	46c0      	nop			; (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b006      	add	sp, #24
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021800 	.word	0x40021800
 8002430:	50000400 	.word	0x50000400
 8002434:	50000800 	.word	0x50000800
 8002438:	50000c00 	.word	0x50000c00

0800243c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	0008      	movs	r0, r1
 8002446:	0011      	movs	r1, r2
 8002448:	1cbb      	adds	r3, r7, #2
 800244a:	1c02      	adds	r2, r0, #0
 800244c:	801a      	strh	r2, [r3, #0]
 800244e:	1c7b      	adds	r3, r7, #1
 8002450:	1c0a      	adds	r2, r1, #0
 8002452:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002454:	1c7b      	adds	r3, r7, #1
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d004      	beq.n	8002466 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800245c:	1cbb      	adds	r3, r7, #2
 800245e:	881a      	ldrh	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002464:	e003      	b.n	800246e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002466:	1cbb      	adds	r3, r7, #2
 8002468:	881a      	ldrh	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	46bd      	mov	sp, r7
 8002472:	b002      	add	sp, #8
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	000a      	movs	r2, r1
 8002480:	1cbb      	adds	r3, r7, #2
 8002482:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800248a:	1cbb      	adds	r3, r7, #2
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4013      	ands	r3, r2
 8002492:	041a      	lsls	r2, r3, #16
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	43db      	mvns	r3, r3
 8002498:	1cb9      	adds	r1, r7, #2
 800249a:	8809      	ldrh	r1, [r1, #0]
 800249c:	400b      	ands	r3, r1
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	619a      	str	r2, [r3, #24]
}
 80024a4:	46c0      	nop			; (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b004      	add	sp, #16
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a19      	ldr	r2, [pc, #100]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	4b17      	ldr	r3, [pc, #92]	; (800251c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d11f      	bne.n	8002510 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80024d0:	4b14      	ldr	r3, [pc, #80]	; (8002524 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	0013      	movs	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	189b      	adds	r3, r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4912      	ldr	r1, [pc, #72]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80024de:	0018      	movs	r0, r3
 80024e0:	f7fd fe18 	bl	8000114 <__udivsi3>
 80024e4:	0003      	movs	r3, r0
 80024e6:	3301      	adds	r3, #1
 80024e8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024ea:	e008      	b.n	80024fe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	3b01      	subs	r3, #1
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	e001      	b.n	80024fe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e009      	b.n	8002512 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024fe:	4b07      	ldr	r3, [pc, #28]	; (800251c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	401a      	ands	r2, r3
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	429a      	cmp	r2, r3
 800250e:	d0ed      	beq.n	80024ec <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	0018      	movs	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	b004      	add	sp, #16
 8002518:	bd80      	pop	{r7, pc}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	40007000 	.word	0x40007000
 8002520:	fffff9ff 	.word	0xfffff9ff
 8002524:	20000000 	.word	0x20000000
 8002528:	000f4240 	.word	0x000f4240

0800252c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002530:	4b03      	ldr	r3, [pc, #12]	; (8002540 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	23e0      	movs	r3, #224	; 0xe0
 8002536:	01db      	lsls	r3, r3, #7
 8002538:	4013      	ands	r3, r2
}
 800253a:	0018      	movs	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000

08002544 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e2f3      	b.n	8002b3e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2201      	movs	r2, #1
 800255c:	4013      	ands	r3, r2
 800255e:	d100      	bne.n	8002562 <HAL_RCC_OscConfig+0x1e>
 8002560:	e07c      	b.n	800265c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002562:	4bc3      	ldr	r3, [pc, #780]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2238      	movs	r2, #56	; 0x38
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800256c:	4bc0      	ldr	r3, [pc, #768]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	2203      	movs	r2, #3
 8002572:	4013      	ands	r3, r2
 8002574:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	2b10      	cmp	r3, #16
 800257a:	d102      	bne.n	8002582 <HAL_RCC_OscConfig+0x3e>
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2b03      	cmp	r3, #3
 8002580:	d002      	beq.n	8002588 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	2b08      	cmp	r3, #8
 8002586:	d10b      	bne.n	80025a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002588:	4bb9      	ldr	r3, [pc, #740]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	029b      	lsls	r3, r3, #10
 8002590:	4013      	ands	r3, r2
 8002592:	d062      	beq.n	800265a <HAL_RCC_OscConfig+0x116>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d15e      	bne.n	800265a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e2ce      	b.n	8002b3e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	025b      	lsls	r3, r3, #9
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d107      	bne.n	80025bc <HAL_RCC_OscConfig+0x78>
 80025ac:	4bb0      	ldr	r3, [pc, #704]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4baf      	ldr	r3, [pc, #700]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 80025b2:	2180      	movs	r1, #128	; 0x80
 80025b4:	0249      	lsls	r1, r1, #9
 80025b6:	430a      	orrs	r2, r1
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	e020      	b.n	80025fe <HAL_RCC_OscConfig+0xba>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	23a0      	movs	r3, #160	; 0xa0
 80025c2:	02db      	lsls	r3, r3, #11
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d10e      	bne.n	80025e6 <HAL_RCC_OscConfig+0xa2>
 80025c8:	4ba9      	ldr	r3, [pc, #676]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4ba8      	ldr	r3, [pc, #672]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 80025ce:	2180      	movs	r1, #128	; 0x80
 80025d0:	02c9      	lsls	r1, r1, #11
 80025d2:	430a      	orrs	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	4ba6      	ldr	r3, [pc, #664]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	4ba5      	ldr	r3, [pc, #660]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 80025dc:	2180      	movs	r1, #128	; 0x80
 80025de:	0249      	lsls	r1, r1, #9
 80025e0:	430a      	orrs	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	e00b      	b.n	80025fe <HAL_RCC_OscConfig+0xba>
 80025e6:	4ba2      	ldr	r3, [pc, #648]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	4ba1      	ldr	r3, [pc, #644]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 80025ec:	49a1      	ldr	r1, [pc, #644]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 80025ee:	400a      	ands	r2, r1
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	4b9f      	ldr	r3, [pc, #636]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	4b9e      	ldr	r3, [pc, #632]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 80025f8:	499f      	ldr	r1, [pc, #636]	; (8002878 <HAL_RCC_OscConfig+0x334>)
 80025fa:	400a      	ands	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d014      	beq.n	8002630 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002606:	f7ff f855 	bl	80016b4 <HAL_GetTick>
 800260a:	0003      	movs	r3, r0
 800260c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002610:	f7ff f850 	bl	80016b4 <HAL_GetTick>
 8002614:	0002      	movs	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	; 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e28d      	b.n	8002b3e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002622:	4b93      	ldr	r3, [pc, #588]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	029b      	lsls	r3, r3, #10
 800262a:	4013      	ands	r3, r2
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0xcc>
 800262e:	e015      	b.n	800265c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7ff f840 	bl	80016b4 <HAL_GetTick>
 8002634:	0003      	movs	r3, r0
 8002636:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800263a:	f7ff f83b 	bl	80016b4 <HAL_GetTick>
 800263e:	0002      	movs	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b64      	cmp	r3, #100	; 0x64
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e278      	b.n	8002b3e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800264c:	4b88      	ldr	r3, [pc, #544]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	029b      	lsls	r3, r3, #10
 8002654:	4013      	ands	r3, r2
 8002656:	d1f0      	bne.n	800263a <HAL_RCC_OscConfig+0xf6>
 8002658:	e000      	b.n	800265c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2202      	movs	r2, #2
 8002662:	4013      	ands	r3, r2
 8002664:	d100      	bne.n	8002668 <HAL_RCC_OscConfig+0x124>
 8002666:	e099      	b.n	800279c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002668:	4b81      	ldr	r3, [pc, #516]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2238      	movs	r2, #56	; 0x38
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002672:	4b7f      	ldr	r3, [pc, #508]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	2203      	movs	r2, #3
 8002678:	4013      	ands	r3, r2
 800267a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	2b10      	cmp	r3, #16
 8002680:	d102      	bne.n	8002688 <HAL_RCC_OscConfig+0x144>
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d002      	beq.n	800268e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d135      	bne.n	80026fa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800268e:	4b78      	ldr	r3, [pc, #480]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4013      	ands	r3, r2
 8002698:	d005      	beq.n	80026a6 <HAL_RCC_OscConfig+0x162>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e24b      	b.n	8002b3e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a6:	4b72      	ldr	r3, [pc, #456]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	4a74      	ldr	r2, [pc, #464]	; (800287c <HAL_RCC_OscConfig+0x338>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	0019      	movs	r1, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	021a      	lsls	r2, r3, #8
 80026b6:	4b6e      	ldr	r3, [pc, #440]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 80026b8:	430a      	orrs	r2, r1
 80026ba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d112      	bne.n	80026e8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80026c2:	4b6b      	ldr	r3, [pc, #428]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a6e      	ldr	r2, [pc, #440]	; (8002880 <HAL_RCC_OscConfig+0x33c>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	0019      	movs	r1, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	4b67      	ldr	r3, [pc, #412]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 80026d2:	430a      	orrs	r2, r1
 80026d4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80026d6:	4b66      	ldr	r3, [pc, #408]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	0adb      	lsrs	r3, r3, #11
 80026dc:	2207      	movs	r2, #7
 80026de:	4013      	ands	r3, r2
 80026e0:	4a68      	ldr	r2, [pc, #416]	; (8002884 <HAL_RCC_OscConfig+0x340>)
 80026e2:	40da      	lsrs	r2, r3
 80026e4:	4b68      	ldr	r3, [pc, #416]	; (8002888 <HAL_RCC_OscConfig+0x344>)
 80026e6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80026e8:	4b68      	ldr	r3, [pc, #416]	; (800288c <HAL_RCC_OscConfig+0x348>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	0018      	movs	r0, r3
 80026ee:	f7fe ff85 	bl	80015fc <HAL_InitTick>
 80026f2:	1e03      	subs	r3, r0, #0
 80026f4:	d051      	beq.n	800279a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e221      	b.n	8002b3e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d030      	beq.n	8002764 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002702:	4b5b      	ldr	r3, [pc, #364]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a5e      	ldr	r2, [pc, #376]	; (8002880 <HAL_RCC_OscConfig+0x33c>)
 8002708:	4013      	ands	r3, r2
 800270a:	0019      	movs	r1, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	4b57      	ldr	r3, [pc, #348]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 8002712:	430a      	orrs	r2, r1
 8002714:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002716:	4b56      	ldr	r3, [pc, #344]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	4b55      	ldr	r3, [pc, #340]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 800271c:	2180      	movs	r1, #128	; 0x80
 800271e:	0049      	lsls	r1, r1, #1
 8002720:	430a      	orrs	r2, r1
 8002722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002724:	f7fe ffc6 	bl	80016b4 <HAL_GetTick>
 8002728:	0003      	movs	r3, r0
 800272a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800272e:	f7fe ffc1 	bl	80016b4 <HAL_GetTick>
 8002732:	0002      	movs	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e1fe      	b.n	8002b3e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002740:	4b4b      	ldr	r3, [pc, #300]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4013      	ands	r3, r2
 800274a:	d0f0      	beq.n	800272e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274c:	4b48      	ldr	r3, [pc, #288]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	4a4a      	ldr	r2, [pc, #296]	; (800287c <HAL_RCC_OscConfig+0x338>)
 8002752:	4013      	ands	r3, r2
 8002754:	0019      	movs	r1, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	021a      	lsls	r2, r3, #8
 800275c:	4b44      	ldr	r3, [pc, #272]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 800275e:	430a      	orrs	r2, r1
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	e01b      	b.n	800279c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002764:	4b42      	ldr	r3, [pc, #264]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b41      	ldr	r3, [pc, #260]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 800276a:	4949      	ldr	r1, [pc, #292]	; (8002890 <HAL_RCC_OscConfig+0x34c>)
 800276c:	400a      	ands	r2, r1
 800276e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7fe ffa0 	bl	80016b4 <HAL_GetTick>
 8002774:	0003      	movs	r3, r0
 8002776:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800277a:	f7fe ff9b 	bl	80016b4 <HAL_GetTick>
 800277e:	0002      	movs	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e1d8      	b.n	8002b3e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800278c:	4b38      	ldr	r3, [pc, #224]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4013      	ands	r3, r2
 8002796:	d1f0      	bne.n	800277a <HAL_RCC_OscConfig+0x236>
 8002798:	e000      	b.n	800279c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800279a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2208      	movs	r2, #8
 80027a2:	4013      	ands	r3, r2
 80027a4:	d047      	beq.n	8002836 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80027a6:	4b32      	ldr	r3, [pc, #200]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2238      	movs	r2, #56	; 0x38
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b18      	cmp	r3, #24
 80027b0:	d10a      	bne.n	80027c8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80027b2:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 80027b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b6:	2202      	movs	r2, #2
 80027b8:	4013      	ands	r3, r2
 80027ba:	d03c      	beq.n	8002836 <HAL_RCC_OscConfig+0x2f2>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d138      	bne.n	8002836 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e1ba      	b.n	8002b3e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d019      	beq.n	8002804 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80027d0:	4b27      	ldr	r3, [pc, #156]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 80027d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027d4:	4b26      	ldr	r3, [pc, #152]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 80027d6:	2101      	movs	r1, #1
 80027d8:	430a      	orrs	r2, r1
 80027da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7fe ff6a 	bl	80016b4 <HAL_GetTick>
 80027e0:	0003      	movs	r3, r0
 80027e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e6:	f7fe ff65 	bl	80016b4 <HAL_GetTick>
 80027ea:	0002      	movs	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e1a2      	b.n	8002b3e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027f8:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 80027fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fc:	2202      	movs	r2, #2
 80027fe:	4013      	ands	r3, r2
 8002800:	d0f1      	beq.n	80027e6 <HAL_RCC_OscConfig+0x2a2>
 8002802:	e018      	b.n	8002836 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002804:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 8002806:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002808:	4b19      	ldr	r3, [pc, #100]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 800280a:	2101      	movs	r1, #1
 800280c:	438a      	bics	r2, r1
 800280e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002810:	f7fe ff50 	bl	80016b4 <HAL_GetTick>
 8002814:	0003      	movs	r3, r0
 8002816:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800281a:	f7fe ff4b 	bl	80016b4 <HAL_GetTick>
 800281e:	0002      	movs	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e188      	b.n	8002b3e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800282c:	4b10      	ldr	r3, [pc, #64]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 800282e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002830:	2202      	movs	r2, #2
 8002832:	4013      	ands	r3, r2
 8002834:	d1f1      	bne.n	800281a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2204      	movs	r2, #4
 800283c:	4013      	ands	r3, r2
 800283e:	d100      	bne.n	8002842 <HAL_RCC_OscConfig+0x2fe>
 8002840:	e0c6      	b.n	80029d0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002842:	231f      	movs	r3, #31
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	2200      	movs	r2, #0
 8002848:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2238      	movs	r2, #56	; 0x38
 8002850:	4013      	ands	r3, r2
 8002852:	2b20      	cmp	r3, #32
 8002854:	d11e      	bne.n	8002894 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_RCC_OscConfig+0x32c>)
 8002858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285a:	2202      	movs	r2, #2
 800285c:	4013      	ands	r3, r2
 800285e:	d100      	bne.n	8002862 <HAL_RCC_OscConfig+0x31e>
 8002860:	e0b6      	b.n	80029d0 <HAL_RCC_OscConfig+0x48c>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d000      	beq.n	800286c <HAL_RCC_OscConfig+0x328>
 800286a:	e0b1      	b.n	80029d0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e166      	b.n	8002b3e <HAL_RCC_OscConfig+0x5fa>
 8002870:	40021000 	.word	0x40021000
 8002874:	fffeffff 	.word	0xfffeffff
 8002878:	fffbffff 	.word	0xfffbffff
 800287c:	ffff80ff 	.word	0xffff80ff
 8002880:	ffffc7ff 	.word	0xffffc7ff
 8002884:	00f42400 	.word	0x00f42400
 8002888:	20000000 	.word	0x20000000
 800288c:	20000004 	.word	0x20000004
 8002890:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002894:	4bac      	ldr	r3, [pc, #688]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 8002896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	055b      	lsls	r3, r3, #21
 800289c:	4013      	ands	r3, r2
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_OscConfig+0x360>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <HAL_RCC_OscConfig+0x362>
 80028a4:	2300      	movs	r3, #0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d011      	beq.n	80028ce <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80028aa:	4ba7      	ldr	r3, [pc, #668]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 80028ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028ae:	4ba6      	ldr	r3, [pc, #664]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 80028b0:	2180      	movs	r1, #128	; 0x80
 80028b2:	0549      	lsls	r1, r1, #21
 80028b4:	430a      	orrs	r2, r1
 80028b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80028b8:	4ba3      	ldr	r3, [pc, #652]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 80028ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	055b      	lsls	r3, r3, #21
 80028c0:	4013      	ands	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80028c6:	231f      	movs	r3, #31
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ce:	4b9f      	ldr	r3, [pc, #636]	; (8002b4c <HAL_RCC_OscConfig+0x608>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	4013      	ands	r3, r2
 80028d8:	d11a      	bne.n	8002910 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028da:	4b9c      	ldr	r3, [pc, #624]	; (8002b4c <HAL_RCC_OscConfig+0x608>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	4b9b      	ldr	r3, [pc, #620]	; (8002b4c <HAL_RCC_OscConfig+0x608>)
 80028e0:	2180      	movs	r1, #128	; 0x80
 80028e2:	0049      	lsls	r1, r1, #1
 80028e4:	430a      	orrs	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80028e8:	f7fe fee4 	bl	80016b4 <HAL_GetTick>
 80028ec:	0003      	movs	r3, r0
 80028ee:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f2:	f7fe fedf 	bl	80016b4 <HAL_GetTick>
 80028f6:	0002      	movs	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e11c      	b.n	8002b3e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002904:	4b91      	ldr	r3, [pc, #580]	; (8002b4c <HAL_RCC_OscConfig+0x608>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	2380      	movs	r3, #128	; 0x80
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4013      	ands	r3, r2
 800290e:	d0f0      	beq.n	80028f2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d106      	bne.n	8002926 <HAL_RCC_OscConfig+0x3e2>
 8002918:	4b8b      	ldr	r3, [pc, #556]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 800291a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800291c:	4b8a      	ldr	r3, [pc, #552]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 800291e:	2101      	movs	r1, #1
 8002920:	430a      	orrs	r2, r1
 8002922:	65da      	str	r2, [r3, #92]	; 0x5c
 8002924:	e01c      	b.n	8002960 <HAL_RCC_OscConfig+0x41c>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b05      	cmp	r3, #5
 800292c:	d10c      	bne.n	8002948 <HAL_RCC_OscConfig+0x404>
 800292e:	4b86      	ldr	r3, [pc, #536]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 8002930:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002932:	4b85      	ldr	r3, [pc, #532]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 8002934:	2104      	movs	r1, #4
 8002936:	430a      	orrs	r2, r1
 8002938:	65da      	str	r2, [r3, #92]	; 0x5c
 800293a:	4b83      	ldr	r3, [pc, #524]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 800293c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800293e:	4b82      	ldr	r3, [pc, #520]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 8002940:	2101      	movs	r1, #1
 8002942:	430a      	orrs	r2, r1
 8002944:	65da      	str	r2, [r3, #92]	; 0x5c
 8002946:	e00b      	b.n	8002960 <HAL_RCC_OscConfig+0x41c>
 8002948:	4b7f      	ldr	r3, [pc, #508]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 800294a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800294c:	4b7e      	ldr	r3, [pc, #504]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 800294e:	2101      	movs	r1, #1
 8002950:	438a      	bics	r2, r1
 8002952:	65da      	str	r2, [r3, #92]	; 0x5c
 8002954:	4b7c      	ldr	r3, [pc, #496]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 8002956:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002958:	4b7b      	ldr	r3, [pc, #492]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 800295a:	2104      	movs	r1, #4
 800295c:	438a      	bics	r2, r1
 800295e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d014      	beq.n	8002992 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002968:	f7fe fea4 	bl	80016b4 <HAL_GetTick>
 800296c:	0003      	movs	r3, r0
 800296e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002970:	e009      	b.n	8002986 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002972:	f7fe fe9f 	bl	80016b4 <HAL_GetTick>
 8002976:	0002      	movs	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	4a74      	ldr	r2, [pc, #464]	; (8002b50 <HAL_RCC_OscConfig+0x60c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e0db      	b.n	8002b3e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002986:	4b70      	ldr	r3, [pc, #448]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 8002988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298a:	2202      	movs	r2, #2
 800298c:	4013      	ands	r3, r2
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0x42e>
 8002990:	e013      	b.n	80029ba <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002992:	f7fe fe8f 	bl	80016b4 <HAL_GetTick>
 8002996:	0003      	movs	r3, r0
 8002998:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800299a:	e009      	b.n	80029b0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299c:	f7fe fe8a 	bl	80016b4 <HAL_GetTick>
 80029a0:	0002      	movs	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	4a6a      	ldr	r2, [pc, #424]	; (8002b50 <HAL_RCC_OscConfig+0x60c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e0c6      	b.n	8002b3e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029b0:	4b65      	ldr	r3, [pc, #404]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 80029b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b4:	2202      	movs	r2, #2
 80029b6:	4013      	ands	r3, r2
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80029ba:	231f      	movs	r3, #31
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d105      	bne.n	80029d0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80029c4:	4b60      	ldr	r3, [pc, #384]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 80029c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029c8:	4b5f      	ldr	r3, [pc, #380]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 80029ca:	4962      	ldr	r1, [pc, #392]	; (8002b54 <HAL_RCC_OscConfig+0x610>)
 80029cc:	400a      	ands	r2, r1
 80029ce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d100      	bne.n	80029da <HAL_RCC_OscConfig+0x496>
 80029d8:	e0b0      	b.n	8002b3c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029da:	4b5b      	ldr	r3, [pc, #364]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2238      	movs	r2, #56	; 0x38
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b10      	cmp	r3, #16
 80029e4:	d100      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4a4>
 80029e6:	e078      	b.n	8002ada <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d153      	bne.n	8002a98 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f0:	4b55      	ldr	r3, [pc, #340]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b54      	ldr	r3, [pc, #336]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 80029f6:	4958      	ldr	r1, [pc, #352]	; (8002b58 <HAL_RCC_OscConfig+0x614>)
 80029f8:	400a      	ands	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fe fe5a 	bl	80016b4 <HAL_GetTick>
 8002a00:	0003      	movs	r3, r0
 8002a02:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a06:	f7fe fe55 	bl	80016b4 <HAL_GetTick>
 8002a0a:	0002      	movs	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e092      	b.n	8002b3e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a18:	4b4b      	ldr	r3, [pc, #300]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	049b      	lsls	r3, r3, #18
 8002a20:	4013      	ands	r3, r2
 8002a22:	d1f0      	bne.n	8002a06 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a24:	4b48      	ldr	r3, [pc, #288]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4a4c      	ldr	r2, [pc, #304]	; (8002b5c <HAL_RCC_OscConfig+0x618>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1a      	ldr	r2, [r3, #32]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	021b      	lsls	r3, r3, #8
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	4b3e      	ldr	r3, [pc, #248]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a52:	4b3d      	ldr	r3, [pc, #244]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4b3c      	ldr	r3, [pc, #240]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 8002a58:	2180      	movs	r1, #128	; 0x80
 8002a5a:	0449      	lsls	r1, r1, #17
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002a60:	4b39      	ldr	r3, [pc, #228]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	4b38      	ldr	r3, [pc, #224]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 8002a66:	2180      	movs	r1, #128	; 0x80
 8002a68:	0549      	lsls	r1, r1, #21
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6e:	f7fe fe21 	bl	80016b4 <HAL_GetTick>
 8002a72:	0003      	movs	r3, r0
 8002a74:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a78:	f7fe fe1c 	bl	80016b4 <HAL_GetTick>
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e059      	b.n	8002b3e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a8a:	4b2f      	ldr	r3, [pc, #188]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	049b      	lsls	r3, r3, #18
 8002a92:	4013      	ands	r3, r2
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0x534>
 8002a96:	e051      	b.n	8002b3c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a98:	4b2b      	ldr	r3, [pc, #172]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4b2a      	ldr	r3, [pc, #168]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 8002a9e:	492e      	ldr	r1, [pc, #184]	; (8002b58 <HAL_RCC_OscConfig+0x614>)
 8002aa0:	400a      	ands	r2, r1
 8002aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa4:	f7fe fe06 	bl	80016b4 <HAL_GetTick>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aae:	f7fe fe01 	bl	80016b4 <HAL_GetTick>
 8002ab2:	0002      	movs	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e03e      	b.n	8002b3e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ac0:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	2380      	movs	r3, #128	; 0x80
 8002ac6:	049b      	lsls	r3, r3, #18
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d1f0      	bne.n	8002aae <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002acc:	4b1e      	ldr	r3, [pc, #120]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 8002ad2:	4923      	ldr	r1, [pc, #140]	; (8002b60 <HAL_RCC_OscConfig+0x61c>)
 8002ad4:	400a      	ands	r2, r1
 8002ad6:	60da      	str	r2, [r3, #12]
 8002ad8:	e030      	b.n	8002b3c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e02b      	b.n	8002b3e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002ae6:	4b18      	ldr	r3, [pc, #96]	; (8002b48 <HAL_RCC_OscConfig+0x604>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2203      	movs	r2, #3
 8002af0:	401a      	ands	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d11e      	bne.n	8002b38 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2270      	movs	r2, #112	; 0x70
 8002afe:	401a      	ands	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d117      	bne.n	8002b38 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	23fe      	movs	r3, #254	; 0xfe
 8002b0c:	01db      	lsls	r3, r3, #7
 8002b0e:	401a      	ands	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b14:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d10e      	bne.n	8002b38 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	23f8      	movs	r3, #248	; 0xf8
 8002b1e:	039b      	lsls	r3, r3, #14
 8002b20:	401a      	ands	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d106      	bne.n	8002b38 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	0f5b      	lsrs	r3, r3, #29
 8002b2e:	075a      	lsls	r2, r3, #29
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	0018      	movs	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b008      	add	sp, #32
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	40007000 	.word	0x40007000
 8002b50:	00001388 	.word	0x00001388
 8002b54:	efffffff 	.word	0xefffffff
 8002b58:	feffffff 	.word	0xfeffffff
 8002b5c:	1fc1808c 	.word	0x1fc1808c
 8002b60:	effefffc 	.word	0xeffefffc

08002b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0e9      	b.n	8002d4c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b78:	4b76      	ldr	r3, [pc, #472]	; (8002d54 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2207      	movs	r2, #7
 8002b7e:	4013      	ands	r3, r2
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d91e      	bls.n	8002bc4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b73      	ldr	r3, [pc, #460]	; (8002d54 <HAL_RCC_ClockConfig+0x1f0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2207      	movs	r2, #7
 8002b8c:	4393      	bics	r3, r2
 8002b8e:	0019      	movs	r1, r3
 8002b90:	4b70      	ldr	r3, [pc, #448]	; (8002d54 <HAL_RCC_ClockConfig+0x1f0>)
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b98:	f7fe fd8c 	bl	80016b4 <HAL_GetTick>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ba0:	e009      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba2:	f7fe fd87 	bl	80016b4 <HAL_GetTick>
 8002ba6:	0002      	movs	r2, r0
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	4a6a      	ldr	r2, [pc, #424]	; (8002d58 <HAL_RCC_ClockConfig+0x1f4>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e0ca      	b.n	8002d4c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bb6:	4b67      	ldr	r3, [pc, #412]	; (8002d54 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2207      	movs	r2, #7
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d1ee      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d015      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2204      	movs	r2, #4
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d006      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002bd8:	4b60      	ldr	r3, [pc, #384]	; (8002d5c <HAL_RCC_ClockConfig+0x1f8>)
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	4b5f      	ldr	r3, [pc, #380]	; (8002d5c <HAL_RCC_ClockConfig+0x1f8>)
 8002bde:	21e0      	movs	r1, #224	; 0xe0
 8002be0:	01c9      	lsls	r1, r1, #7
 8002be2:	430a      	orrs	r2, r1
 8002be4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be6:	4b5d      	ldr	r3, [pc, #372]	; (8002d5c <HAL_RCC_ClockConfig+0x1f8>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	4a5d      	ldr	r2, [pc, #372]	; (8002d60 <HAL_RCC_ClockConfig+0x1fc>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	0019      	movs	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	4b59      	ldr	r3, [pc, #356]	; (8002d5c <HAL_RCC_ClockConfig+0x1f8>)
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	4013      	ands	r3, r2
 8002c02:	d057      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c0c:	4b53      	ldr	r3, [pc, #332]	; (8002d5c <HAL_RCC_ClockConfig+0x1f8>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	029b      	lsls	r3, r3, #10
 8002c14:	4013      	ands	r3, r2
 8002c16:	d12b      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e097      	b.n	8002d4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d107      	bne.n	8002c34 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c24:	4b4d      	ldr	r3, [pc, #308]	; (8002d5c <HAL_RCC_ClockConfig+0x1f8>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	049b      	lsls	r3, r3, #18
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d11f      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e08b      	b.n	8002d4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d107      	bne.n	8002c4c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c3c:	4b47      	ldr	r3, [pc, #284]	; (8002d5c <HAL_RCC_ClockConfig+0x1f8>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	2380      	movs	r3, #128	; 0x80
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4013      	ands	r3, r2
 8002c46:	d113      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e07f      	b.n	8002d4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d106      	bne.n	8002c62 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c54:	4b41      	ldr	r3, [pc, #260]	; (8002d5c <HAL_RCC_ClockConfig+0x1f8>)
 8002c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c58:	2202      	movs	r2, #2
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d108      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e074      	b.n	8002d4c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c62:	4b3e      	ldr	r3, [pc, #248]	; (8002d5c <HAL_RCC_ClockConfig+0x1f8>)
 8002c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c66:	2202      	movs	r2, #2
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e06d      	b.n	8002d4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c70:	4b3a      	ldr	r3, [pc, #232]	; (8002d5c <HAL_RCC_ClockConfig+0x1f8>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2207      	movs	r2, #7
 8002c76:	4393      	bics	r3, r2
 8002c78:	0019      	movs	r1, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	4b37      	ldr	r3, [pc, #220]	; (8002d5c <HAL_RCC_ClockConfig+0x1f8>)
 8002c80:	430a      	orrs	r2, r1
 8002c82:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c84:	f7fe fd16 	bl	80016b4 <HAL_GetTick>
 8002c88:	0003      	movs	r3, r0
 8002c8a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8c:	e009      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c8e:	f7fe fd11 	bl	80016b4 <HAL_GetTick>
 8002c92:	0002      	movs	r2, r0
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	4a2f      	ldr	r2, [pc, #188]	; (8002d58 <HAL_RCC_ClockConfig+0x1f4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e054      	b.n	8002d4c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca2:	4b2e      	ldr	r3, [pc, #184]	; (8002d5c <HAL_RCC_ClockConfig+0x1f8>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2238      	movs	r2, #56	; 0x38
 8002ca8:	401a      	ands	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d1ec      	bne.n	8002c8e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb4:	4b27      	ldr	r3, [pc, #156]	; (8002d54 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2207      	movs	r2, #7
 8002cba:	4013      	ands	r3, r2
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d21e      	bcs.n	8002d00 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc2:	4b24      	ldr	r3, [pc, #144]	; (8002d54 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2207      	movs	r2, #7
 8002cc8:	4393      	bics	r3, r2
 8002cca:	0019      	movs	r1, r3
 8002ccc:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <HAL_RCC_ClockConfig+0x1f0>)
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002cd4:	f7fe fcee 	bl	80016b4 <HAL_GetTick>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cdc:	e009      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cde:	f7fe fce9 	bl	80016b4 <HAL_GetTick>
 8002ce2:	0002      	movs	r2, r0
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	4a1b      	ldr	r2, [pc, #108]	; (8002d58 <HAL_RCC_ClockConfig+0x1f4>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e02c      	b.n	8002d4c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cf2:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2207      	movs	r2, #7
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d1ee      	bne.n	8002cde <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2204      	movs	r2, #4
 8002d06:	4013      	ands	r3, r2
 8002d08:	d009      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d0a:	4b14      	ldr	r3, [pc, #80]	; (8002d5c <HAL_RCC_ClockConfig+0x1f8>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	4a15      	ldr	r2, [pc, #84]	; (8002d64 <HAL_RCC_ClockConfig+0x200>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	0019      	movs	r1, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <HAL_RCC_ClockConfig+0x1f8>)
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002d1e:	f000 f829 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8002d22:	0001      	movs	r1, r0
 8002d24:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <HAL_RCC_ClockConfig+0x1f8>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	0a1b      	lsrs	r3, r3, #8
 8002d2a:	220f      	movs	r2, #15
 8002d2c:	401a      	ands	r2, r3
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <HAL_RCC_ClockConfig+0x204>)
 8002d30:	0092      	lsls	r2, r2, #2
 8002d32:	58d3      	ldr	r3, [r2, r3]
 8002d34:	221f      	movs	r2, #31
 8002d36:	4013      	ands	r3, r2
 8002d38:	000a      	movs	r2, r1
 8002d3a:	40da      	lsrs	r2, r3
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <HAL_RCC_ClockConfig+0x208>)
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_RCC_ClockConfig+0x20c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0018      	movs	r0, r3
 8002d46:	f7fe fc59 	bl	80015fc <HAL_InitTick>
 8002d4a:	0003      	movs	r3, r0
}
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b004      	add	sp, #16
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40022000 	.word	0x40022000
 8002d58:	00001388 	.word	0x00001388
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	fffff0ff 	.word	0xfffff0ff
 8002d64:	ffff8fff 	.word	0xffff8fff
 8002d68:	08005b14 	.word	0x08005b14
 8002d6c:	20000000 	.word	0x20000000
 8002d70:	20000004 	.word	0x20000004

08002d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d7a:	4b3c      	ldr	r3, [pc, #240]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2238      	movs	r2, #56	; 0x38
 8002d80:	4013      	ands	r3, r2
 8002d82:	d10f      	bne.n	8002da4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002d84:	4b39      	ldr	r3, [pc, #228]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	0adb      	lsrs	r3, r3, #11
 8002d8a:	2207      	movs	r2, #7
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2201      	movs	r2, #1
 8002d90:	409a      	lsls	r2, r3
 8002d92:	0013      	movs	r3, r2
 8002d94:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002d96:	6839      	ldr	r1, [r7, #0]
 8002d98:	4835      	ldr	r0, [pc, #212]	; (8002e70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d9a:	f7fd f9bb 	bl	8000114 <__udivsi3>
 8002d9e:	0003      	movs	r3, r0
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	e05d      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002da4:	4b31      	ldr	r3, [pc, #196]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2238      	movs	r2, #56	; 0x38
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d102      	bne.n	8002db6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002db0:	4b30      	ldr	r3, [pc, #192]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x100>)
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	e054      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db6:	4b2d      	ldr	r3, [pc, #180]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2238      	movs	r2, #56	; 0x38
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b10      	cmp	r3, #16
 8002dc0:	d138      	bne.n	8002e34 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002dc2:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	4013      	ands	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dcc:	4b27      	ldr	r3, [pc, #156]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	2207      	movs	r2, #7
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d10d      	bne.n	8002dfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002de0:	68b9      	ldr	r1, [r7, #8]
 8002de2:	4824      	ldr	r0, [pc, #144]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x100>)
 8002de4:	f7fd f996 	bl	8000114 <__udivsi3>
 8002de8:	0003      	movs	r3, r0
 8002dea:	0019      	movs	r1, r3
 8002dec:	4b1f      	ldr	r3, [pc, #124]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	0a1b      	lsrs	r3, r3, #8
 8002df2:	227f      	movs	r2, #127	; 0x7f
 8002df4:	4013      	ands	r3, r2
 8002df6:	434b      	muls	r3, r1
 8002df8:	617b      	str	r3, [r7, #20]
        break;
 8002dfa:	e00d      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	481c      	ldr	r0, [pc, #112]	; (8002e70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e00:	f7fd f988 	bl	8000114 <__udivsi3>
 8002e04:	0003      	movs	r3, r0
 8002e06:	0019      	movs	r1, r3
 8002e08:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	0a1b      	lsrs	r3, r3, #8
 8002e0e:	227f      	movs	r2, #127	; 0x7f
 8002e10:	4013      	ands	r3, r2
 8002e12:	434b      	muls	r3, r1
 8002e14:	617b      	str	r3, [r7, #20]
        break;
 8002e16:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002e18:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	0f5b      	lsrs	r3, r3, #29
 8002e1e:	2207      	movs	r2, #7
 8002e20:	4013      	ands	r3, r2
 8002e22:	3301      	adds	r3, #1
 8002e24:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	6978      	ldr	r0, [r7, #20]
 8002e2a:	f7fd f973 	bl	8000114 <__udivsi3>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	e015      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002e34:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2238      	movs	r2, #56	; 0x38
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d103      	bne.n	8002e48 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	021b      	lsls	r3, r3, #8
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	e00b      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002e48:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2238      	movs	r2, #56	; 0x38
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b18      	cmp	r3, #24
 8002e52:	d103      	bne.n	8002e5c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002e54:	23fa      	movs	r3, #250	; 0xfa
 8002e56:	01db      	lsls	r3, r3, #7
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	e001      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002e60:	693b      	ldr	r3, [r7, #16]
}
 8002e62:	0018      	movs	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	b006      	add	sp, #24
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	00f42400 	.word	0x00f42400
 8002e74:	007a1200 	.word	0x007a1200

08002e78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e7c:	4b02      	ldr	r3, [pc, #8]	; (8002e88 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
}
 8002e80:	0018      	movs	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	20000000 	.word	0x20000000

08002e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e8c:	b5b0      	push	{r4, r5, r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002e90:	f7ff fff2 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002e94:	0004      	movs	r4, r0
 8002e96:	f7ff fb49 	bl	800252c <LL_RCC_GetAPB1Prescaler>
 8002e9a:	0003      	movs	r3, r0
 8002e9c:	0b1a      	lsrs	r2, r3, #12
 8002e9e:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ea0:	0092      	lsls	r2, r2, #2
 8002ea2:	58d3      	ldr	r3, [r2, r3]
 8002ea4:	221f      	movs	r2, #31
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	40dc      	lsrs	r4, r3
 8002eaa:	0023      	movs	r3, r4
}
 8002eac:	0018      	movs	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	08005b54 	.word	0x08005b54

08002eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002ec0:	2313      	movs	r3, #19
 8002ec2:	18fb      	adds	r3, r7, r3
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ec8:	2312      	movs	r3, #18
 8002eca:	18fb      	adds	r3, r7, r3
 8002ecc:	2200      	movs	r2, #0
 8002ece:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	029b      	lsls	r3, r3, #10
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d100      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002edc:	e0a3      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ede:	2011      	movs	r0, #17
 8002ee0:	183b      	adds	r3, r7, r0
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ee6:	4b86      	ldr	r3, [pc, #536]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ee8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	055b      	lsls	r3, r3, #21
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d110      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef2:	4b83      	ldr	r3, [pc, #524]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ef4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ef6:	4b82      	ldr	r3, [pc, #520]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ef8:	2180      	movs	r1, #128	; 0x80
 8002efa:	0549      	lsls	r1, r1, #21
 8002efc:	430a      	orrs	r2, r1
 8002efe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f00:	4b7f      	ldr	r3, [pc, #508]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	055b      	lsls	r3, r3, #21
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f0e:	183b      	adds	r3, r7, r0
 8002f10:	2201      	movs	r2, #1
 8002f12:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f14:	4b7b      	ldr	r3, [pc, #492]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4b7a      	ldr	r3, [pc, #488]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002f1a:	2180      	movs	r1, #128	; 0x80
 8002f1c:	0049      	lsls	r1, r1, #1
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f22:	f7fe fbc7 	bl	80016b4 <HAL_GetTick>
 8002f26:	0003      	movs	r3, r0
 8002f28:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f2a:	e00b      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2c:	f7fe fbc2 	bl	80016b4 <HAL_GetTick>
 8002f30:	0002      	movs	r2, r0
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d904      	bls.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002f3a:	2313      	movs	r3, #19
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	2203      	movs	r2, #3
 8002f40:	701a      	strb	r2, [r3, #0]
        break;
 8002f42:	e005      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f44:	4b6f      	ldr	r3, [pc, #444]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d0ed      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002f50:	2313      	movs	r3, #19
 8002f52:	18fb      	adds	r3, r7, r3
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d154      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f5a:	4b69      	ldr	r3, [pc, #420]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f5e:	23c0      	movs	r3, #192	; 0xc0
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4013      	ands	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d019      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d014      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f76:	4b62      	ldr	r3, [pc, #392]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7a:	4a63      	ldr	r2, [pc, #396]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f80:	4b5f      	ldr	r3, [pc, #380]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f84:	4b5e      	ldr	r3, [pc, #376]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f86:	2180      	movs	r1, #128	; 0x80
 8002f88:	0249      	lsls	r1, r1, #9
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f8e:	4b5c      	ldr	r3, [pc, #368]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f92:	4b5b      	ldr	r3, [pc, #364]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f94:	495d      	ldr	r1, [pc, #372]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002f96:	400a      	ands	r2, r1
 8002f98:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f9a:	4b59      	ldr	r3, [pc, #356]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d016      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fb84 	bl	80016b4 <HAL_GetTick>
 8002fac:	0003      	movs	r3, r0
 8002fae:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb0:	e00c      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb2:	f7fe fb7f 	bl	80016b4 <HAL_GetTick>
 8002fb6:	0002      	movs	r2, r0
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	4a54      	ldr	r2, [pc, #336]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d904      	bls.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002fc2:	2313      	movs	r3, #19
 8002fc4:	18fb      	adds	r3, r7, r3
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	701a      	strb	r2, [r3, #0]
            break;
 8002fca:	e004      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fcc:	4b4c      	ldr	r3, [pc, #304]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d0ed      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002fd6:	2313      	movs	r3, #19
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10a      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fe0:	4b47      	ldr	r3, [pc, #284]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe4:	4a48      	ldr	r2, [pc, #288]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	0019      	movs	r1, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699a      	ldr	r2, [r3, #24]
 8002fee:	4b44      	ldr	r3, [pc, #272]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ff4:	e00c      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ff6:	2312      	movs	r3, #18
 8002ff8:	18fb      	adds	r3, r7, r3
 8002ffa:	2213      	movs	r2, #19
 8002ffc:	18ba      	adds	r2, r7, r2
 8002ffe:	7812      	ldrb	r2, [r2, #0]
 8003000:	701a      	strb	r2, [r3, #0]
 8003002:	e005      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003004:	2312      	movs	r3, #18
 8003006:	18fb      	adds	r3, r7, r3
 8003008:	2213      	movs	r2, #19
 800300a:	18ba      	adds	r2, r7, r2
 800300c:	7812      	ldrb	r2, [r2, #0]
 800300e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003010:	2311      	movs	r3, #17
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d105      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800301a:	4b39      	ldr	r3, [pc, #228]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800301c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800301e:	4b38      	ldr	r3, [pc, #224]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003020:	493c      	ldr	r1, [pc, #240]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003022:	400a      	ands	r2, r1
 8003024:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2201      	movs	r2, #1
 800302c:	4013      	ands	r3, r2
 800302e:	d009      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003030:	4b33      	ldr	r3, [pc, #204]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003034:	2203      	movs	r2, #3
 8003036:	4393      	bics	r3, r2
 8003038:	0019      	movs	r1, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	4b30      	ldr	r3, [pc, #192]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003040:	430a      	orrs	r2, r1
 8003042:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2202      	movs	r2, #2
 800304a:	4013      	ands	r3, r2
 800304c:	d009      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800304e:	4b2c      	ldr	r3, [pc, #176]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003052:	220c      	movs	r2, #12
 8003054:	4393      	bics	r3, r2
 8003056:	0019      	movs	r1, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	4b28      	ldr	r3, [pc, #160]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800305e:	430a      	orrs	r2, r1
 8003060:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2220      	movs	r2, #32
 8003068:	4013      	ands	r3, r2
 800306a:	d009      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800306c:	4b24      	ldr	r3, [pc, #144]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800306e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003070:	4a29      	ldr	r2, [pc, #164]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003072:	4013      	ands	r3, r2
 8003074:	0019      	movs	r1, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	4b21      	ldr	r3, [pc, #132]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800307c:	430a      	orrs	r2, r1
 800307e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	01db      	lsls	r3, r3, #7
 8003088:	4013      	ands	r3, r2
 800308a:	d015      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800308c:	4b1c      	ldr	r3, [pc, #112]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800308e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	0899      	lsrs	r1, r3, #2
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	695a      	ldr	r2, [r3, #20]
 8003098:	4b19      	ldr	r3, [pc, #100]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800309a:	430a      	orrs	r2, r1
 800309c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	2380      	movs	r3, #128	; 0x80
 80030a4:	05db      	lsls	r3, r3, #23
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d106      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80030aa:	4b15      	ldr	r3, [pc, #84]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	4b14      	ldr	r3, [pc, #80]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030b0:	2180      	movs	r1, #128	; 0x80
 80030b2:	0249      	lsls	r1, r1, #9
 80030b4:	430a      	orrs	r2, r1
 80030b6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	2380      	movs	r3, #128	; 0x80
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	4013      	ands	r3, r2
 80030c2:	d016      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80030c4:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c8:	4a14      	ldr	r2, [pc, #80]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	0019      	movs	r1, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030d4:	430a      	orrs	r2, r1
 80030d6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	2380      	movs	r3, #128	; 0x80
 80030de:	01db      	lsls	r3, r3, #7
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d106      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80030e4:	4b06      	ldr	r3, [pc, #24]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030ea:	2180      	movs	r1, #128	; 0x80
 80030ec:	0249      	lsls	r1, r1, #9
 80030ee:	430a      	orrs	r2, r1
 80030f0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80030f2:	2312      	movs	r3, #18
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	781b      	ldrb	r3, [r3, #0]
}
 80030f8:	0018      	movs	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b006      	add	sp, #24
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40021000 	.word	0x40021000
 8003104:	40007000 	.word	0x40007000
 8003108:	fffffcff 	.word	0xfffffcff
 800310c:	fffeffff 	.word	0xfffeffff
 8003110:	00001388 	.word	0x00001388
 8003114:	efffffff 	.word	0xefffffff
 8003118:	ffffcfff 	.word	0xffffcfff
 800311c:	ffff3fff 	.word	0xffff3fff

08003120 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e04a      	b.n	80031c8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	223d      	movs	r2, #61	; 0x3d
 8003136:	5c9b      	ldrb	r3, [r3, r2]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d107      	bne.n	800314e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	223c      	movs	r2, #60	; 0x3c
 8003142:	2100      	movs	r1, #0
 8003144:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	0018      	movs	r0, r3
 800314a:	f7fd ff7f 	bl	800104c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	223d      	movs	r2, #61	; 0x3d
 8003152:	2102      	movs	r1, #2
 8003154:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3304      	adds	r3, #4
 800315e:	0019      	movs	r1, r3
 8003160:	0010      	movs	r0, r2
 8003162:	f000 fb13 	bl	800378c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2248      	movs	r2, #72	; 0x48
 800316a:	2101      	movs	r1, #1
 800316c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	223e      	movs	r2, #62	; 0x3e
 8003172:	2101      	movs	r1, #1
 8003174:	5499      	strb	r1, [r3, r2]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	223f      	movs	r2, #63	; 0x3f
 800317a:	2101      	movs	r1, #1
 800317c:	5499      	strb	r1, [r3, r2]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2240      	movs	r2, #64	; 0x40
 8003182:	2101      	movs	r1, #1
 8003184:	5499      	strb	r1, [r3, r2]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2241      	movs	r2, #65	; 0x41
 800318a:	2101      	movs	r1, #1
 800318c:	5499      	strb	r1, [r3, r2]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2242      	movs	r2, #66	; 0x42
 8003192:	2101      	movs	r1, #1
 8003194:	5499      	strb	r1, [r3, r2]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2243      	movs	r2, #67	; 0x43
 800319a:	2101      	movs	r1, #1
 800319c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2244      	movs	r2, #68	; 0x44
 80031a2:	2101      	movs	r1, #1
 80031a4:	5499      	strb	r1, [r3, r2]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2245      	movs	r2, #69	; 0x45
 80031aa:	2101      	movs	r1, #1
 80031ac:	5499      	strb	r1, [r3, r2]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2246      	movs	r2, #70	; 0x46
 80031b2:	2101      	movs	r1, #1
 80031b4:	5499      	strb	r1, [r3, r2]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2247      	movs	r2, #71	; 0x47
 80031ba:	2101      	movs	r1, #1
 80031bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	223d      	movs	r2, #61	; 0x3d
 80031c2:	2101      	movs	r1, #1
 80031c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	0018      	movs	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b002      	add	sp, #8
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e04a      	b.n	8003278 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	223d      	movs	r2, #61	; 0x3d
 80031e6:	5c9b      	ldrb	r3, [r3, r2]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d107      	bne.n	80031fe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	223c      	movs	r2, #60	; 0x3c
 80031f2:	2100      	movs	r1, #0
 80031f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	0018      	movs	r0, r3
 80031fa:	f000 f841 	bl	8003280 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	223d      	movs	r2, #61	; 0x3d
 8003202:	2102      	movs	r1, #2
 8003204:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3304      	adds	r3, #4
 800320e:	0019      	movs	r1, r3
 8003210:	0010      	movs	r0, r2
 8003212:	f000 fabb 	bl	800378c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2248      	movs	r2, #72	; 0x48
 800321a:	2101      	movs	r1, #1
 800321c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	223e      	movs	r2, #62	; 0x3e
 8003222:	2101      	movs	r1, #1
 8003224:	5499      	strb	r1, [r3, r2]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	223f      	movs	r2, #63	; 0x3f
 800322a:	2101      	movs	r1, #1
 800322c:	5499      	strb	r1, [r3, r2]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2240      	movs	r2, #64	; 0x40
 8003232:	2101      	movs	r1, #1
 8003234:	5499      	strb	r1, [r3, r2]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2241      	movs	r2, #65	; 0x41
 800323a:	2101      	movs	r1, #1
 800323c:	5499      	strb	r1, [r3, r2]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2242      	movs	r2, #66	; 0x42
 8003242:	2101      	movs	r1, #1
 8003244:	5499      	strb	r1, [r3, r2]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2243      	movs	r2, #67	; 0x43
 800324a:	2101      	movs	r1, #1
 800324c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2244      	movs	r2, #68	; 0x44
 8003252:	2101      	movs	r1, #1
 8003254:	5499      	strb	r1, [r3, r2]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2245      	movs	r2, #69	; 0x45
 800325a:	2101      	movs	r1, #1
 800325c:	5499      	strb	r1, [r3, r2]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2246      	movs	r2, #70	; 0x46
 8003262:	2101      	movs	r1, #1
 8003264:	5499      	strb	r1, [r3, r2]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2247      	movs	r2, #71	; 0x47
 800326a:	2101      	movs	r1, #1
 800326c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	223d      	movs	r2, #61	; 0x3d
 8003272:	2101      	movs	r1, #1
 8003274:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	0018      	movs	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	b002      	add	sp, #8
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003288:	46c0      	nop			; (mov r8, r8)
 800328a:	46bd      	mov	sp, r7
 800328c:	b002      	add	sp, #8
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e090      	b.n	80033c6 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	223d      	movs	r2, #61	; 0x3d
 80032a8:	5c9b      	ldrb	r3, [r3, r2]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d107      	bne.n	80032c0 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	223c      	movs	r2, #60	; 0x3c
 80032b4:	2100      	movs	r1, #0
 80032b6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	0018      	movs	r0, r3
 80032bc:	f7fd fe42 	bl	8000f44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	223d      	movs	r2, #61	; 0x3d
 80032c4:	2102      	movs	r1, #2
 80032c6:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	493f      	ldr	r1, [pc, #252]	; (80033d0 <HAL_TIM_Encoder_Init+0x140>)
 80032d4:	400a      	ands	r2, r1
 80032d6:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3304      	adds	r3, #4
 80032e0:	0019      	movs	r1, r3
 80032e2:	0010      	movs	r0, r2
 80032e4:	f000 fa52 	bl	800378c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4a31      	ldr	r2, [pc, #196]	; (80033d4 <HAL_TIM_Encoder_Init+0x144>)
 800330e:	4013      	ands	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	021b      	lsls	r3, r3, #8
 800331c:	4313      	orrs	r3, r2
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4a2c      	ldr	r2, [pc, #176]	; (80033d8 <HAL_TIM_Encoder_Init+0x148>)
 8003328:	4013      	ands	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4a2b      	ldr	r2, [pc, #172]	; (80033dc <HAL_TIM_Encoder_Init+0x14c>)
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	021b      	lsls	r3, r3, #8
 800333e:	4313      	orrs	r3, r2
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	011a      	lsls	r2, r3, #4
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	031b      	lsls	r3, r3, #12
 8003352:	4313      	orrs	r3, r2
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2222      	movs	r2, #34	; 0x22
 800335e:	4393      	bics	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2288      	movs	r2, #136	; 0x88
 8003366:	4393      	bics	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	4313      	orrs	r3, r2
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2248      	movs	r2, #72	; 0x48
 8003398:	2101      	movs	r1, #1
 800339a:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	223e      	movs	r2, #62	; 0x3e
 80033a0:	2101      	movs	r1, #1
 80033a2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	223f      	movs	r2, #63	; 0x3f
 80033a8:	2101      	movs	r1, #1
 80033aa:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2244      	movs	r2, #68	; 0x44
 80033b0:	2101      	movs	r1, #1
 80033b2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2245      	movs	r2, #69	; 0x45
 80033b8:	2101      	movs	r1, #1
 80033ba:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	223d      	movs	r2, #61	; 0x3d
 80033c0:	2101      	movs	r1, #1
 80033c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	0018      	movs	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	b006      	add	sp, #24
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	fffebff8 	.word	0xfffebff8
 80033d4:	fffffcfc 	.word	0xfffffcfc
 80033d8:	fffff3f3 	.word	0xfffff3f3
 80033dc:	ffff0f0f 	.word	0xffff0f0f

080033e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033ec:	2317      	movs	r3, #23
 80033ee:	18fb      	adds	r3, r7, r3
 80033f0:	2200      	movs	r2, #0
 80033f2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	223c      	movs	r2, #60	; 0x3c
 80033f8:	5c9b      	ldrb	r3, [r3, r2]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_TIM_PWM_ConfigChannel+0x22>
 80033fe:	2302      	movs	r3, #2
 8003400:	e0e5      	b.n	80035ce <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	223c      	movs	r2, #60	; 0x3c
 8003406:	2101      	movs	r1, #1
 8003408:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b14      	cmp	r3, #20
 800340e:	d900      	bls.n	8003412 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003410:	e0d1      	b.n	80035b6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	009a      	lsls	r2, r3, #2
 8003416:	4b70      	ldr	r3, [pc, #448]	; (80035d8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003418:	18d3      	adds	r3, r2, r3
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	0011      	movs	r1, r2
 8003426:	0018      	movs	r0, r3
 8003428:	f000 fa26 	bl	8003878 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2108      	movs	r1, #8
 8003438:	430a      	orrs	r2, r1
 800343a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699a      	ldr	r2, [r3, #24]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2104      	movs	r1, #4
 8003448:	438a      	bics	r2, r1
 800344a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6999      	ldr	r1, [r3, #24]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	619a      	str	r2, [r3, #24]
      break;
 800345e:	e0af      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	0011      	movs	r1, r2
 8003468:	0018      	movs	r0, r3
 800346a:	f000 fa8f 	bl	800398c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699a      	ldr	r2, [r3, #24]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2180      	movs	r1, #128	; 0x80
 800347a:	0109      	lsls	r1, r1, #4
 800347c:	430a      	orrs	r2, r1
 800347e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699a      	ldr	r2, [r3, #24]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4954      	ldr	r1, [pc, #336]	; (80035dc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800348c:	400a      	ands	r2, r1
 800348e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6999      	ldr	r1, [r3, #24]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	021a      	lsls	r2, r3, #8
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	619a      	str	r2, [r3, #24]
      break;
 80034a4:	e08c      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	0011      	movs	r1, r2
 80034ae:	0018      	movs	r0, r3
 80034b0:	f000 faf0 	bl	8003a94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	69da      	ldr	r2, [r3, #28]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2108      	movs	r1, #8
 80034c0:	430a      	orrs	r2, r1
 80034c2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	69da      	ldr	r2, [r3, #28]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2104      	movs	r1, #4
 80034d0:	438a      	bics	r2, r1
 80034d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	69d9      	ldr	r1, [r3, #28]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	691a      	ldr	r2, [r3, #16]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	61da      	str	r2, [r3, #28]
      break;
 80034e6:	e06b      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	0011      	movs	r1, r2
 80034f0:	0018      	movs	r0, r3
 80034f2:	f000 fb57 	bl	8003ba4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2180      	movs	r1, #128	; 0x80
 8003502:	0109      	lsls	r1, r1, #4
 8003504:	430a      	orrs	r2, r1
 8003506:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	69da      	ldr	r2, [r3, #28]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4932      	ldr	r1, [pc, #200]	; (80035dc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003514:	400a      	ands	r2, r1
 8003516:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	69d9      	ldr	r1, [r3, #28]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	021a      	lsls	r2, r3, #8
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	61da      	str	r2, [r3, #28]
      break;
 800352c:	e048      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	0011      	movs	r1, r2
 8003536:	0018      	movs	r0, r3
 8003538:	f000 fb9e 	bl	8003c78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2108      	movs	r1, #8
 8003548:	430a      	orrs	r2, r1
 800354a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2104      	movs	r1, #4
 8003558:	438a      	bics	r2, r1
 800355a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	691a      	ldr	r2, [r3, #16]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800356e:	e027      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	0011      	movs	r1, r2
 8003578:	0018      	movs	r0, r3
 800357a:	f000 fbdd 	bl	8003d38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2180      	movs	r1, #128	; 0x80
 800358a:	0109      	lsls	r1, r1, #4
 800358c:	430a      	orrs	r2, r1
 800358e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4910      	ldr	r1, [pc, #64]	; (80035dc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800359c:	400a      	ands	r2, r1
 800359e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	021a      	lsls	r2, r3, #8
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80035b4:	e004      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80035b6:	2317      	movs	r3, #23
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	2201      	movs	r2, #1
 80035bc:	701a      	strb	r2, [r3, #0]
      break;
 80035be:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	223c      	movs	r2, #60	; 0x3c
 80035c4:	2100      	movs	r1, #0
 80035c6:	5499      	strb	r1, [r3, r2]

  return status;
 80035c8:	2317      	movs	r3, #23
 80035ca:	18fb      	adds	r3, r7, r3
 80035cc:	781b      	ldrb	r3, [r3, #0]
}
 80035ce:	0018      	movs	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b006      	add	sp, #24
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	08005b74 	.word	0x08005b74
 80035dc:	fffffbff 	.word	0xfffffbff

080035e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ea:	230f      	movs	r3, #15
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	2200      	movs	r2, #0
 80035f0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	223c      	movs	r2, #60	; 0x3c
 80035f6:	5c9b      	ldrb	r3, [r3, r2]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_TIM_ConfigClockSource+0x20>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e0bc      	b.n	800377a <HAL_TIM_ConfigClockSource+0x19a>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	223c      	movs	r2, #60	; 0x3c
 8003604:	2101      	movs	r1, #1
 8003606:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	223d      	movs	r2, #61	; 0x3d
 800360c:	2102      	movs	r1, #2
 800360e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4a5a      	ldr	r2, [pc, #360]	; (8003784 <HAL_TIM_ConfigClockSource+0x1a4>)
 800361c:	4013      	ands	r3, r2
 800361e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	4a59      	ldr	r2, [pc, #356]	; (8003788 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003624:	4013      	ands	r3, r2
 8003626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2280      	movs	r2, #128	; 0x80
 8003636:	0192      	lsls	r2, r2, #6
 8003638:	4293      	cmp	r3, r2
 800363a:	d040      	beq.n	80036be <HAL_TIM_ConfigClockSource+0xde>
 800363c:	2280      	movs	r2, #128	; 0x80
 800363e:	0192      	lsls	r2, r2, #6
 8003640:	4293      	cmp	r3, r2
 8003642:	d900      	bls.n	8003646 <HAL_TIM_ConfigClockSource+0x66>
 8003644:	e088      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x178>
 8003646:	2280      	movs	r2, #128	; 0x80
 8003648:	0152      	lsls	r2, r2, #5
 800364a:	4293      	cmp	r3, r2
 800364c:	d100      	bne.n	8003650 <HAL_TIM_ConfigClockSource+0x70>
 800364e:	e088      	b.n	8003762 <HAL_TIM_ConfigClockSource+0x182>
 8003650:	2280      	movs	r2, #128	; 0x80
 8003652:	0152      	lsls	r2, r2, #5
 8003654:	4293      	cmp	r3, r2
 8003656:	d900      	bls.n	800365a <HAL_TIM_ConfigClockSource+0x7a>
 8003658:	e07e      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x178>
 800365a:	2b70      	cmp	r3, #112	; 0x70
 800365c:	d018      	beq.n	8003690 <HAL_TIM_ConfigClockSource+0xb0>
 800365e:	d900      	bls.n	8003662 <HAL_TIM_ConfigClockSource+0x82>
 8003660:	e07a      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x178>
 8003662:	2b60      	cmp	r3, #96	; 0x60
 8003664:	d04f      	beq.n	8003706 <HAL_TIM_ConfigClockSource+0x126>
 8003666:	d900      	bls.n	800366a <HAL_TIM_ConfigClockSource+0x8a>
 8003668:	e076      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x178>
 800366a:	2b50      	cmp	r3, #80	; 0x50
 800366c:	d03b      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0x106>
 800366e:	d900      	bls.n	8003672 <HAL_TIM_ConfigClockSource+0x92>
 8003670:	e072      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x178>
 8003672:	2b40      	cmp	r3, #64	; 0x40
 8003674:	d057      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x146>
 8003676:	d900      	bls.n	800367a <HAL_TIM_ConfigClockSource+0x9a>
 8003678:	e06e      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x178>
 800367a:	2b30      	cmp	r3, #48	; 0x30
 800367c:	d063      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x166>
 800367e:	d86b      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x178>
 8003680:	2b20      	cmp	r3, #32
 8003682:	d060      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x166>
 8003684:	d868      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x178>
 8003686:	2b00      	cmp	r3, #0
 8003688:	d05d      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x166>
 800368a:	2b10      	cmp	r3, #16
 800368c:	d05b      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x166>
 800368e:	e063      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036a0:	f000 fc2a 	bl	8003ef8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2277      	movs	r2, #119	; 0x77
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	609a      	str	r2, [r3, #8]
      break;
 80036bc:	e052      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036ce:	f000 fc13 	bl	8003ef8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2180      	movs	r1, #128	; 0x80
 80036de:	01c9      	lsls	r1, r1, #7
 80036e0:	430a      	orrs	r2, r1
 80036e2:	609a      	str	r2, [r3, #8]
      break;
 80036e4:	e03e      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f2:	001a      	movs	r2, r3
 80036f4:	f000 fb84 	bl	8003e00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2150      	movs	r1, #80	; 0x50
 80036fe:	0018      	movs	r0, r3
 8003700:	f000 fbde 	bl	8003ec0 <TIM_ITRx_SetConfig>
      break;
 8003704:	e02e      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003712:	001a      	movs	r2, r3
 8003714:	f000 fba2 	bl	8003e5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2160      	movs	r1, #96	; 0x60
 800371e:	0018      	movs	r0, r3
 8003720:	f000 fbce 	bl	8003ec0 <TIM_ITRx_SetConfig>
      break;
 8003724:	e01e      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003732:	001a      	movs	r2, r3
 8003734:	f000 fb64 	bl	8003e00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2140      	movs	r1, #64	; 0x40
 800373e:	0018      	movs	r0, r3
 8003740:	f000 fbbe 	bl	8003ec0 <TIM_ITRx_SetConfig>
      break;
 8003744:	e00e      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	0019      	movs	r1, r3
 8003750:	0010      	movs	r0, r2
 8003752:	f000 fbb5 	bl	8003ec0 <TIM_ITRx_SetConfig>
      break;
 8003756:	e005      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003758:	230f      	movs	r3, #15
 800375a:	18fb      	adds	r3, r7, r3
 800375c:	2201      	movs	r2, #1
 800375e:	701a      	strb	r2, [r3, #0]
      break;
 8003760:	e000      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003762:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	223d      	movs	r2, #61	; 0x3d
 8003768:	2101      	movs	r1, #1
 800376a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	223c      	movs	r2, #60	; 0x3c
 8003770:	2100      	movs	r1, #0
 8003772:	5499      	strb	r1, [r3, r2]

  return status;
 8003774:	230f      	movs	r3, #15
 8003776:	18fb      	adds	r3, r7, r3
 8003778:	781b      	ldrb	r3, [r3, #0]
}
 800377a:	0018      	movs	r0, r3
 800377c:	46bd      	mov	sp, r7
 800377e:	b004      	add	sp, #16
 8003780:	bd80      	pop	{r7, pc}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	ffceff88 	.word	0xffceff88
 8003788:	ffff00ff 	.word	0xffff00ff

0800378c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a2f      	ldr	r2, [pc, #188]	; (800385c <TIM_Base_SetConfig+0xd0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d003      	beq.n	80037ac <TIM_Base_SetConfig+0x20>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a2e      	ldr	r2, [pc, #184]	; (8003860 <TIM_Base_SetConfig+0xd4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d108      	bne.n	80037be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2270      	movs	r2, #112	; 0x70
 80037b0:	4393      	bics	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a26      	ldr	r2, [pc, #152]	; (800385c <TIM_Base_SetConfig+0xd0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d013      	beq.n	80037ee <TIM_Base_SetConfig+0x62>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a25      	ldr	r2, [pc, #148]	; (8003860 <TIM_Base_SetConfig+0xd4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00f      	beq.n	80037ee <TIM_Base_SetConfig+0x62>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a24      	ldr	r2, [pc, #144]	; (8003864 <TIM_Base_SetConfig+0xd8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00b      	beq.n	80037ee <TIM_Base_SetConfig+0x62>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a23      	ldr	r2, [pc, #140]	; (8003868 <TIM_Base_SetConfig+0xdc>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d007      	beq.n	80037ee <TIM_Base_SetConfig+0x62>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a22      	ldr	r2, [pc, #136]	; (800386c <TIM_Base_SetConfig+0xe0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d003      	beq.n	80037ee <TIM_Base_SetConfig+0x62>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a21      	ldr	r2, [pc, #132]	; (8003870 <TIM_Base_SetConfig+0xe4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d108      	bne.n	8003800 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4a20      	ldr	r2, [pc, #128]	; (8003874 <TIM_Base_SetConfig+0xe8>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2280      	movs	r2, #128	; 0x80
 8003804:	4393      	bics	r3, r2
 8003806:	001a      	movs	r2, r3
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a0c      	ldr	r2, [pc, #48]	; (800385c <TIM_Base_SetConfig+0xd0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00b      	beq.n	8003846 <TIM_Base_SetConfig+0xba>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a0d      	ldr	r2, [pc, #52]	; (8003868 <TIM_Base_SetConfig+0xdc>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d007      	beq.n	8003846 <TIM_Base_SetConfig+0xba>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a0c      	ldr	r2, [pc, #48]	; (800386c <TIM_Base_SetConfig+0xe0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d003      	beq.n	8003846 <TIM_Base_SetConfig+0xba>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a0b      	ldr	r2, [pc, #44]	; (8003870 <TIM_Base_SetConfig+0xe4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d103      	bne.n	800384e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	691a      	ldr	r2, [r3, #16]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	615a      	str	r2, [r3, #20]
}
 8003854:	46c0      	nop			; (mov r8, r8)
 8003856:	46bd      	mov	sp, r7
 8003858:	b004      	add	sp, #16
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40012c00 	.word	0x40012c00
 8003860:	40000400 	.word	0x40000400
 8003864:	40002000 	.word	0x40002000
 8003868:	40014000 	.word	0x40014000
 800386c:	40014400 	.word	0x40014400
 8003870:	40014800 	.word	0x40014800
 8003874:	fffffcff 	.word	0xfffffcff

08003878 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	2201      	movs	r2, #1
 8003888:	4393      	bics	r3, r2
 800388a:	001a      	movs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4a32      	ldr	r2, [pc, #200]	; (8003970 <TIM_OC1_SetConfig+0xf8>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2203      	movs	r2, #3
 80038ae:	4393      	bics	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2202      	movs	r2, #2
 80038c0:	4393      	bics	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a28      	ldr	r2, [pc, #160]	; (8003974 <TIM_OC1_SetConfig+0xfc>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00b      	beq.n	80038ee <TIM_OC1_SetConfig+0x76>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a27      	ldr	r2, [pc, #156]	; (8003978 <TIM_OC1_SetConfig+0x100>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d007      	beq.n	80038ee <TIM_OC1_SetConfig+0x76>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a26      	ldr	r2, [pc, #152]	; (800397c <TIM_OC1_SetConfig+0x104>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d003      	beq.n	80038ee <TIM_OC1_SetConfig+0x76>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a25      	ldr	r2, [pc, #148]	; (8003980 <TIM_OC1_SetConfig+0x108>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d10c      	bne.n	8003908 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2208      	movs	r2, #8
 80038f2:	4393      	bics	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2204      	movs	r2, #4
 8003904:	4393      	bics	r3, r2
 8003906:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a1a      	ldr	r2, [pc, #104]	; (8003974 <TIM_OC1_SetConfig+0xfc>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00b      	beq.n	8003928 <TIM_OC1_SetConfig+0xb0>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a19      	ldr	r2, [pc, #100]	; (8003978 <TIM_OC1_SetConfig+0x100>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d007      	beq.n	8003928 <TIM_OC1_SetConfig+0xb0>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a18      	ldr	r2, [pc, #96]	; (800397c <TIM_OC1_SetConfig+0x104>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_OC1_SetConfig+0xb0>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a17      	ldr	r2, [pc, #92]	; (8003980 <TIM_OC1_SetConfig+0x108>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d111      	bne.n	800394c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	4a16      	ldr	r2, [pc, #88]	; (8003984 <TIM_OC1_SetConfig+0x10c>)
 800392c:	4013      	ands	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4a15      	ldr	r2, [pc, #84]	; (8003988 <TIM_OC1_SetConfig+0x110>)
 8003934:	4013      	ands	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	621a      	str	r2, [r3, #32]
}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	46bd      	mov	sp, r7
 800396a:	b006      	add	sp, #24
 800396c:	bd80      	pop	{r7, pc}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	fffeff8f 	.word	0xfffeff8f
 8003974:	40012c00 	.word	0x40012c00
 8003978:	40014000 	.word	0x40014000
 800397c:	40014400 	.word	0x40014400
 8003980:	40014800 	.word	0x40014800
 8003984:	fffffeff 	.word	0xfffffeff
 8003988:	fffffdff 	.word	0xfffffdff

0800398c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	2210      	movs	r2, #16
 800399c:	4393      	bics	r3, r2
 800399e:	001a      	movs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4a2e      	ldr	r2, [pc, #184]	; (8003a74 <TIM_OC2_SetConfig+0xe8>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4a2d      	ldr	r2, [pc, #180]	; (8003a78 <TIM_OC2_SetConfig+0xec>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	021b      	lsls	r3, r3, #8
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2220      	movs	r2, #32
 80039d6:	4393      	bics	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a24      	ldr	r2, [pc, #144]	; (8003a7c <TIM_OC2_SetConfig+0xf0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d10d      	bne.n	8003a0a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2280      	movs	r2, #128	; 0x80
 80039f2:	4393      	bics	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2240      	movs	r2, #64	; 0x40
 8003a06:	4393      	bics	r3, r2
 8003a08:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a1b      	ldr	r2, [pc, #108]	; (8003a7c <TIM_OC2_SetConfig+0xf0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d00b      	beq.n	8003a2a <TIM_OC2_SetConfig+0x9e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a1a      	ldr	r2, [pc, #104]	; (8003a80 <TIM_OC2_SetConfig+0xf4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d007      	beq.n	8003a2a <TIM_OC2_SetConfig+0x9e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a19      	ldr	r2, [pc, #100]	; (8003a84 <TIM_OC2_SetConfig+0xf8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d003      	beq.n	8003a2a <TIM_OC2_SetConfig+0x9e>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a18      	ldr	r2, [pc, #96]	; (8003a88 <TIM_OC2_SetConfig+0xfc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d113      	bne.n	8003a52 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4a17      	ldr	r2, [pc, #92]	; (8003a8c <TIM_OC2_SetConfig+0x100>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4a16      	ldr	r2, [pc, #88]	; (8003a90 <TIM_OC2_SetConfig+0x104>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	621a      	str	r2, [r3, #32]
}
 8003a6c:	46c0      	nop			; (mov r8, r8)
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	b006      	add	sp, #24
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	feff8fff 	.word	0xfeff8fff
 8003a78:	fffffcff 	.word	0xfffffcff
 8003a7c:	40012c00 	.word	0x40012c00
 8003a80:	40014000 	.word	0x40014000
 8003a84:	40014400 	.word	0x40014400
 8003a88:	40014800 	.word	0x40014800
 8003a8c:	fffffbff 	.word	0xfffffbff
 8003a90:	fffff7ff 	.word	0xfffff7ff

08003a94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	4a35      	ldr	r2, [pc, #212]	; (8003b78 <TIM_OC3_SetConfig+0xe4>)
 8003aa4:	401a      	ands	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4a2f      	ldr	r2, [pc, #188]	; (8003b7c <TIM_OC3_SetConfig+0xe8>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	4393      	bics	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	4a29      	ldr	r2, [pc, #164]	; (8003b80 <TIM_OC3_SetConfig+0xec>)
 8003ada:	4013      	ands	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	021b      	lsls	r3, r3, #8
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a25      	ldr	r2, [pc, #148]	; (8003b84 <TIM_OC3_SetConfig+0xf0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d10d      	bne.n	8003b0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	4a24      	ldr	r2, [pc, #144]	; (8003b88 <TIM_OC3_SetConfig+0xf4>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	021b      	lsls	r3, r3, #8
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	4a20      	ldr	r2, [pc, #128]	; (8003b8c <TIM_OC3_SetConfig+0xf8>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a1c      	ldr	r2, [pc, #112]	; (8003b84 <TIM_OC3_SetConfig+0xf0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00b      	beq.n	8003b2e <TIM_OC3_SetConfig+0x9a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a1d      	ldr	r2, [pc, #116]	; (8003b90 <TIM_OC3_SetConfig+0xfc>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d007      	beq.n	8003b2e <TIM_OC3_SetConfig+0x9a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a1c      	ldr	r2, [pc, #112]	; (8003b94 <TIM_OC3_SetConfig+0x100>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d003      	beq.n	8003b2e <TIM_OC3_SetConfig+0x9a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a1b      	ldr	r2, [pc, #108]	; (8003b98 <TIM_OC3_SetConfig+0x104>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d113      	bne.n	8003b56 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4a1a      	ldr	r2, [pc, #104]	; (8003b9c <TIM_OC3_SetConfig+0x108>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	4a19      	ldr	r2, [pc, #100]	; (8003ba0 <TIM_OC3_SetConfig+0x10c>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	621a      	str	r2, [r3, #32]
}
 8003b70:	46c0      	nop			; (mov r8, r8)
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b006      	add	sp, #24
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	fffffeff 	.word	0xfffffeff
 8003b7c:	fffeff8f 	.word	0xfffeff8f
 8003b80:	fffffdff 	.word	0xfffffdff
 8003b84:	40012c00 	.word	0x40012c00
 8003b88:	fffff7ff 	.word	0xfffff7ff
 8003b8c:	fffffbff 	.word	0xfffffbff
 8003b90:	40014000 	.word	0x40014000
 8003b94:	40014400 	.word	0x40014400
 8003b98:	40014800 	.word	0x40014800
 8003b9c:	ffffefff 	.word	0xffffefff
 8003ba0:	ffffdfff 	.word	0xffffdfff

08003ba4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	4a28      	ldr	r2, [pc, #160]	; (8003c54 <TIM_OC4_SetConfig+0xb0>)
 8003bb4:	401a      	ands	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4a22      	ldr	r2, [pc, #136]	; (8003c58 <TIM_OC4_SetConfig+0xb4>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4a21      	ldr	r2, [pc, #132]	; (8003c5c <TIM_OC4_SetConfig+0xb8>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	021b      	lsls	r3, r3, #8
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	4a1d      	ldr	r2, [pc, #116]	; (8003c60 <TIM_OC4_SetConfig+0xbc>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	031b      	lsls	r3, r3, #12
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a19      	ldr	r2, [pc, #100]	; (8003c64 <TIM_OC4_SetConfig+0xc0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d00b      	beq.n	8003c1c <TIM_OC4_SetConfig+0x78>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a18      	ldr	r2, [pc, #96]	; (8003c68 <TIM_OC4_SetConfig+0xc4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d007      	beq.n	8003c1c <TIM_OC4_SetConfig+0x78>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a17      	ldr	r2, [pc, #92]	; (8003c6c <TIM_OC4_SetConfig+0xc8>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d003      	beq.n	8003c1c <TIM_OC4_SetConfig+0x78>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a16      	ldr	r2, [pc, #88]	; (8003c70 <TIM_OC4_SetConfig+0xcc>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d109      	bne.n	8003c30 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	4a15      	ldr	r2, [pc, #84]	; (8003c74 <TIM_OC4_SetConfig+0xd0>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	019b      	lsls	r3, r3, #6
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	621a      	str	r2, [r3, #32]
}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	b006      	add	sp, #24
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	ffffefff 	.word	0xffffefff
 8003c58:	feff8fff 	.word	0xfeff8fff
 8003c5c:	fffffcff 	.word	0xfffffcff
 8003c60:	ffffdfff 	.word	0xffffdfff
 8003c64:	40012c00 	.word	0x40012c00
 8003c68:	40014000 	.word	0x40014000
 8003c6c:	40014400 	.word	0x40014400
 8003c70:	40014800 	.word	0x40014800
 8003c74:	ffffbfff 	.word	0xffffbfff

08003c78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	4a25      	ldr	r2, [pc, #148]	; (8003d1c <TIM_OC5_SetConfig+0xa4>)
 8003c88:	401a      	ands	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4a1f      	ldr	r2, [pc, #124]	; (8003d20 <TIM_OC5_SetConfig+0xa8>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4a1b      	ldr	r2, [pc, #108]	; (8003d24 <TIM_OC5_SetConfig+0xac>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a17      	ldr	r2, [pc, #92]	; (8003d28 <TIM_OC5_SetConfig+0xb0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00b      	beq.n	8003ce6 <TIM_OC5_SetConfig+0x6e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a16      	ldr	r2, [pc, #88]	; (8003d2c <TIM_OC5_SetConfig+0xb4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d007      	beq.n	8003ce6 <TIM_OC5_SetConfig+0x6e>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a15      	ldr	r2, [pc, #84]	; (8003d30 <TIM_OC5_SetConfig+0xb8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d003      	beq.n	8003ce6 <TIM_OC5_SetConfig+0x6e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a14      	ldr	r2, [pc, #80]	; (8003d34 <TIM_OC5_SetConfig+0xbc>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d109      	bne.n	8003cfa <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	4a0c      	ldr	r2, [pc, #48]	; (8003d1c <TIM_OC5_SetConfig+0xa4>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	621a      	str	r2, [r3, #32]
}
 8003d14:	46c0      	nop			; (mov r8, r8)
 8003d16:	46bd      	mov	sp, r7
 8003d18:	b006      	add	sp, #24
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	fffeffff 	.word	0xfffeffff
 8003d20:	fffeff8f 	.word	0xfffeff8f
 8003d24:	fffdffff 	.word	0xfffdffff
 8003d28:	40012c00 	.word	0x40012c00
 8003d2c:	40014000 	.word	0x40014000
 8003d30:	40014400 	.word	0x40014400
 8003d34:	40014800 	.word	0x40014800

08003d38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	4a26      	ldr	r2, [pc, #152]	; (8003de0 <TIM_OC6_SetConfig+0xa8>)
 8003d48:	401a      	ands	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4a20      	ldr	r2, [pc, #128]	; (8003de4 <TIM_OC6_SetConfig+0xac>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	021b      	lsls	r3, r3, #8
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	4a1c      	ldr	r2, [pc, #112]	; (8003de8 <TIM_OC6_SetConfig+0xb0>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	051b      	lsls	r3, r3, #20
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a18      	ldr	r2, [pc, #96]	; (8003dec <TIM_OC6_SetConfig+0xb4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00b      	beq.n	8003da8 <TIM_OC6_SetConfig+0x70>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a17      	ldr	r2, [pc, #92]	; (8003df0 <TIM_OC6_SetConfig+0xb8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d007      	beq.n	8003da8 <TIM_OC6_SetConfig+0x70>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a16      	ldr	r2, [pc, #88]	; (8003df4 <TIM_OC6_SetConfig+0xbc>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d003      	beq.n	8003da8 <TIM_OC6_SetConfig+0x70>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a15      	ldr	r2, [pc, #84]	; (8003df8 <TIM_OC6_SetConfig+0xc0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d109      	bne.n	8003dbc <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	4a14      	ldr	r2, [pc, #80]	; (8003dfc <TIM_OC6_SetConfig+0xc4>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	029b      	lsls	r3, r3, #10
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	621a      	str	r2, [r3, #32]
}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b006      	add	sp, #24
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	ffefffff 	.word	0xffefffff
 8003de4:	feff8fff 	.word	0xfeff8fff
 8003de8:	ffdfffff 	.word	0xffdfffff
 8003dec:	40012c00 	.word	0x40012c00
 8003df0:	40014000 	.word	0x40014000
 8003df4:	40014400 	.word	0x40014400
 8003df8:	40014800 	.word	0x40014800
 8003dfc:	fffbffff 	.word	0xfffbffff

08003e00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	2201      	movs	r2, #1
 8003e18:	4393      	bics	r3, r2
 8003e1a:	001a      	movs	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	22f0      	movs	r2, #240	; 0xf0
 8003e2a:	4393      	bics	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	220a      	movs	r2, #10
 8003e3c:	4393      	bics	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	621a      	str	r2, [r3, #32]
}
 8003e54:	46c0      	nop			; (mov r8, r8)
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b006      	add	sp, #24
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	2210      	movs	r2, #16
 8003e6e:	4393      	bics	r3, r2
 8003e70:	001a      	movs	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	4a0d      	ldr	r2, [pc, #52]	; (8003ebc <TIM_TI2_ConfigInputStage+0x60>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	031b      	lsls	r3, r3, #12
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	22a0      	movs	r2, #160	; 0xa0
 8003e98:	4393      	bics	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	621a      	str	r2, [r3, #32]
}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	b006      	add	sp, #24
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	ffff0fff 	.word	0xffff0fff

08003ec0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4a08      	ldr	r2, [pc, #32]	; (8003ef4 <TIM_ITRx_SetConfig+0x34>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	2207      	movs	r2, #7
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	609a      	str	r2, [r3, #8]
}
 8003eea:	46c0      	nop			; (mov r8, r8)
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b004      	add	sp, #16
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	ffcfff8f 	.word	0xffcfff8f

08003ef8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	4a09      	ldr	r2, [pc, #36]	; (8003f34 <TIM_ETR_SetConfig+0x3c>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	021a      	lsls	r2, r3, #8
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	609a      	str	r2, [r3, #8]
}
 8003f2c:	46c0      	nop			; (mov r8, r8)
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	b006      	add	sp, #24
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	ffff00ff 	.word	0xffff00ff

08003f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	223c      	movs	r2, #60	; 0x3c
 8003f46:	5c9b      	ldrb	r3, [r3, r2]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e04f      	b.n	8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	223c      	movs	r2, #60	; 0x3c
 8003f54:	2101      	movs	r1, #1
 8003f56:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	223d      	movs	r2, #61	; 0x3d
 8003f5c:	2102      	movs	r1, #2
 8003f5e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a20      	ldr	r2, [pc, #128]	; (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d108      	bne.n	8003f8c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4a1f      	ldr	r2, [pc, #124]	; (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2270      	movs	r2, #112	; 0x70
 8003f90:	4393      	bics	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a13      	ldr	r2, [pc, #76]	; (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d009      	beq.n	8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a12      	ldr	r2, [pc, #72]	; (8004000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d004      	beq.n	8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a11      	ldr	r2, [pc, #68]	; (8004004 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d10c      	bne.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2280      	movs	r2, #128	; 0x80
 8003fc8:	4393      	bics	r3, r2
 8003fca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	223d      	movs	r2, #61	; 0x3d
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	223c      	movs	r2, #60	; 0x3c
 8003fea:	2100      	movs	r1, #0
 8003fec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b004      	add	sp, #16
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40012c00 	.word	0x40012c00
 8003ffc:	ff0fffff 	.word	0xff0fffff
 8004000:	40000400 	.word	0x40000400
 8004004:	40014000 	.word	0x40014000

08004008 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	223c      	movs	r2, #60	; 0x3c
 800401a:	5c9b      	ldrb	r3, [r3, r2]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004020:	2302      	movs	r3, #2
 8004022:	e079      	b.n	8004118 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	223c      	movs	r2, #60	; 0x3c
 8004028:	2101      	movs	r1, #1
 800402a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	22ff      	movs	r2, #255	; 0xff
 8004030:	4393      	bics	r3, r2
 8004032:	001a      	movs	r2, r3
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4a38      	ldr	r2, [pc, #224]	; (8004120 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004040:	401a      	ands	r2, r3
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4a35      	ldr	r2, [pc, #212]	; (8004124 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800404e:	401a      	ands	r2, r3
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4313      	orrs	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4a33      	ldr	r2, [pc, #204]	; (8004128 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800405c:	401a      	ands	r2, r3
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4a30      	ldr	r2, [pc, #192]	; (800412c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800406a:	401a      	ands	r2, r3
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4a2e      	ldr	r2, [pc, #184]	; (8004130 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004078:	401a      	ands	r2, r3
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4a2b      	ldr	r2, [pc, #172]	; (8004134 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004086:	401a      	ands	r2, r3
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4a29      	ldr	r2, [pc, #164]	; (8004138 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004094:	401a      	ands	r2, r3
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	041b      	lsls	r3, r3, #16
 800409c:	4313      	orrs	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a25      	ldr	r2, [pc, #148]	; (800413c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d106      	bne.n	80040b8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4a24      	ldr	r2, [pc, #144]	; (8004140 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80040ae:	401a      	ands	r2, r3
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a1f      	ldr	r2, [pc, #124]	; (800413c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d121      	bne.n	8004106 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4a1f      	ldr	r2, [pc, #124]	; (8004144 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80040c6:	401a      	ands	r2, r3
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040cc:	051b      	lsls	r3, r3, #20
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4a1c      	ldr	r2, [pc, #112]	; (8004148 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80040d6:	401a      	ands	r2, r3
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4a1a      	ldr	r2, [pc, #104]	; (800414c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80040e4:	401a      	ands	r2, r3
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a12      	ldr	r2, [pc, #72]	; (800413c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d106      	bne.n	8004106 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4a15      	ldr	r2, [pc, #84]	; (8004150 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80040fc:	401a      	ands	r2, r3
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	223c      	movs	r2, #60	; 0x3c
 8004112:	2100      	movs	r1, #0
 8004114:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	0018      	movs	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	b004      	add	sp, #16
 800411e:	bd80      	pop	{r7, pc}
 8004120:	fffffcff 	.word	0xfffffcff
 8004124:	fffffbff 	.word	0xfffffbff
 8004128:	fffff7ff 	.word	0xfffff7ff
 800412c:	ffffefff 	.word	0xffffefff
 8004130:	ffffdfff 	.word	0xffffdfff
 8004134:	ffffbfff 	.word	0xffffbfff
 8004138:	fff0ffff 	.word	0xfff0ffff
 800413c:	40012c00 	.word	0x40012c00
 8004140:	efffffff 	.word	0xefffffff
 8004144:	ff0fffff 	.word	0xff0fffff
 8004148:	feffffff 	.word	0xfeffffff
 800414c:	fdffffff 	.word	0xfdffffff
 8004150:	dfffffff 	.word	0xdfffffff

08004154 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e046      	b.n	80041f4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2288      	movs	r2, #136	; 0x88
 800416a:	589b      	ldr	r3, [r3, r2]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d107      	bne.n	8004180 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2284      	movs	r2, #132	; 0x84
 8004174:	2100      	movs	r1, #0
 8004176:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	0018      	movs	r0, r3
 800417c:	f7fd f94a 	bl	8001414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2288      	movs	r2, #136	; 0x88
 8004184:	2124      	movs	r1, #36	; 0x24
 8004186:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2101      	movs	r1, #1
 8004194:	438a      	bics	r2, r1
 8004196:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	0018      	movs	r0, r3
 800419c:	f000 f8cc 	bl	8004338 <UART_SetConfig>
 80041a0:	0003      	movs	r3, r0
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e024      	b.n	80041f4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	0018      	movs	r0, r3
 80041b6:	f000 fa63 	bl	8004680 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	490d      	ldr	r1, [pc, #52]	; (80041fc <HAL_UART_Init+0xa8>)
 80041c6:	400a      	ands	r2, r1
 80041c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	212a      	movs	r1, #42	; 0x2a
 80041d6:	438a      	bics	r2, r1
 80041d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2101      	movs	r1, #1
 80041e6:	430a      	orrs	r2, r1
 80041e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	0018      	movs	r0, r3
 80041ee:	f000 fafb 	bl	80047e8 <UART_CheckIdleState>
 80041f2:	0003      	movs	r3, r0
}
 80041f4:	0018      	movs	r0, r3
 80041f6:	46bd      	mov	sp, r7
 80041f8:	b002      	add	sp, #8
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	ffffb7ff 	.word	0xffffb7ff

08004200 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	; 0x28
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	1dbb      	adds	r3, r7, #6
 800420e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2288      	movs	r2, #136	; 0x88
 8004214:	589b      	ldr	r3, [r3, r2]
 8004216:	2b20      	cmp	r3, #32
 8004218:	d000      	beq.n	800421c <HAL_UART_Transmit+0x1c>
 800421a:	e088      	b.n	800432e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_UART_Transmit+0x2a>
 8004222:	1dbb      	adds	r3, r7, #6
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e080      	b.n	8004330 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	2380      	movs	r3, #128	; 0x80
 8004234:	015b      	lsls	r3, r3, #5
 8004236:	429a      	cmp	r2, r3
 8004238:	d109      	bne.n	800424e <HAL_UART_Transmit+0x4e>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d105      	bne.n	800424e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2201      	movs	r2, #1
 8004246:	4013      	ands	r3, r2
 8004248:	d001      	beq.n	800424e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e070      	b.n	8004330 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2290      	movs	r2, #144	; 0x90
 8004252:	2100      	movs	r1, #0
 8004254:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2288      	movs	r2, #136	; 0x88
 800425a:	2121      	movs	r1, #33	; 0x21
 800425c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800425e:	f7fd fa29 	bl	80016b4 <HAL_GetTick>
 8004262:	0003      	movs	r3, r0
 8004264:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	1dba      	adds	r2, r7, #6
 800426a:	2154      	movs	r1, #84	; 0x54
 800426c:	8812      	ldrh	r2, [r2, #0]
 800426e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	1dba      	adds	r2, r7, #6
 8004274:	2156      	movs	r1, #86	; 0x56
 8004276:	8812      	ldrh	r2, [r2, #0]
 8004278:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	2380      	movs	r3, #128	; 0x80
 8004280:	015b      	lsls	r3, r3, #5
 8004282:	429a      	cmp	r2, r3
 8004284:	d108      	bne.n	8004298 <HAL_UART_Transmit+0x98>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d104      	bne.n	8004298 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800428e:	2300      	movs	r3, #0
 8004290:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	61bb      	str	r3, [r7, #24]
 8004296:	e003      	b.n	80042a0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800429c:	2300      	movs	r3, #0
 800429e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042a0:	e02c      	b.n	80042fc <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	0013      	movs	r3, r2
 80042ac:	2200      	movs	r2, #0
 80042ae:	2180      	movs	r1, #128	; 0x80
 80042b0:	f000 fae8 	bl	8004884 <UART_WaitOnFlagUntilTimeout>
 80042b4:	1e03      	subs	r3, r0, #0
 80042b6:	d001      	beq.n	80042bc <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e039      	b.n	8004330 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10b      	bne.n	80042da <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	001a      	movs	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	05d2      	lsls	r2, r2, #23
 80042ce:	0dd2      	lsrs	r2, r2, #23
 80042d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	3302      	adds	r3, #2
 80042d6:	61bb      	str	r3, [r7, #24]
 80042d8:	e007      	b.n	80042ea <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	781a      	ldrb	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	3301      	adds	r3, #1
 80042e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2256      	movs	r2, #86	; 0x56
 80042ee:	5a9b      	ldrh	r3, [r3, r2]
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b299      	uxth	r1, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2256      	movs	r2, #86	; 0x56
 80042fa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2256      	movs	r2, #86	; 0x56
 8004300:	5a9b      	ldrh	r3, [r3, r2]
 8004302:	b29b      	uxth	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1cc      	bne.n	80042a2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	0013      	movs	r3, r2
 8004312:	2200      	movs	r2, #0
 8004314:	2140      	movs	r1, #64	; 0x40
 8004316:	f000 fab5 	bl	8004884 <UART_WaitOnFlagUntilTimeout>
 800431a:	1e03      	subs	r3, r0, #0
 800431c:	d001      	beq.n	8004322 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e006      	b.n	8004330 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2288      	movs	r2, #136	; 0x88
 8004326:	2120      	movs	r1, #32
 8004328:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	e000      	b.n	8004330 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800432e:	2302      	movs	r3, #2
  }
}
 8004330:	0018      	movs	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	b008      	add	sp, #32
 8004336:	bd80      	pop	{r7, pc}

08004338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004340:	231a      	movs	r3, #26
 8004342:	18fb      	adds	r3, r7, r3
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	4313      	orrs	r3, r2
 800435e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4abc      	ldr	r2, [pc, #752]	; (8004658 <UART_SetConfig+0x320>)
 8004368:	4013      	ands	r3, r2
 800436a:	0019      	movs	r1, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69fa      	ldr	r2, [r7, #28]
 8004372:	430a      	orrs	r2, r1
 8004374:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	4ab7      	ldr	r2, [pc, #732]	; (800465c <UART_SetConfig+0x324>)
 800437e:	4013      	ands	r3, r2
 8004380:	0019      	movs	r1, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	69fa      	ldr	r2, [r7, #28]
 800439a:	4313      	orrs	r3, r2
 800439c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	4aae      	ldr	r2, [pc, #696]	; (8004660 <UART_SetConfig+0x328>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	0019      	movs	r1, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69fa      	ldr	r2, [r7, #28]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ba:	220f      	movs	r2, #15
 80043bc:	4393      	bics	r3, r2
 80043be:	0019      	movs	r1, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4aa4      	ldr	r2, [pc, #656]	; (8004664 <UART_SetConfig+0x32c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d127      	bne.n	8004426 <UART_SetConfig+0xee>
 80043d6:	4ba4      	ldr	r3, [pc, #656]	; (8004668 <UART_SetConfig+0x330>)
 80043d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043da:	2203      	movs	r2, #3
 80043dc:	4013      	ands	r3, r2
 80043de:	2b03      	cmp	r3, #3
 80043e0:	d017      	beq.n	8004412 <UART_SetConfig+0xda>
 80043e2:	d81b      	bhi.n	800441c <UART_SetConfig+0xe4>
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d00a      	beq.n	80043fe <UART_SetConfig+0xc6>
 80043e8:	d818      	bhi.n	800441c <UART_SetConfig+0xe4>
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <UART_SetConfig+0xbc>
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d00a      	beq.n	8004408 <UART_SetConfig+0xd0>
 80043f2:	e013      	b.n	800441c <UART_SetConfig+0xe4>
 80043f4:	231b      	movs	r3, #27
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	2200      	movs	r2, #0
 80043fa:	701a      	strb	r2, [r3, #0]
 80043fc:	e058      	b.n	80044b0 <UART_SetConfig+0x178>
 80043fe:	231b      	movs	r3, #27
 8004400:	18fb      	adds	r3, r7, r3
 8004402:	2202      	movs	r2, #2
 8004404:	701a      	strb	r2, [r3, #0]
 8004406:	e053      	b.n	80044b0 <UART_SetConfig+0x178>
 8004408:	231b      	movs	r3, #27
 800440a:	18fb      	adds	r3, r7, r3
 800440c:	2204      	movs	r2, #4
 800440e:	701a      	strb	r2, [r3, #0]
 8004410:	e04e      	b.n	80044b0 <UART_SetConfig+0x178>
 8004412:	231b      	movs	r3, #27
 8004414:	18fb      	adds	r3, r7, r3
 8004416:	2208      	movs	r2, #8
 8004418:	701a      	strb	r2, [r3, #0]
 800441a:	e049      	b.n	80044b0 <UART_SetConfig+0x178>
 800441c:	231b      	movs	r3, #27
 800441e:	18fb      	adds	r3, r7, r3
 8004420:	2210      	movs	r2, #16
 8004422:	701a      	strb	r2, [r3, #0]
 8004424:	e044      	b.n	80044b0 <UART_SetConfig+0x178>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a90      	ldr	r2, [pc, #576]	; (800466c <UART_SetConfig+0x334>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d127      	bne.n	8004480 <UART_SetConfig+0x148>
 8004430:	4b8d      	ldr	r3, [pc, #564]	; (8004668 <UART_SetConfig+0x330>)
 8004432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004434:	220c      	movs	r2, #12
 8004436:	4013      	ands	r3, r2
 8004438:	2b0c      	cmp	r3, #12
 800443a:	d017      	beq.n	800446c <UART_SetConfig+0x134>
 800443c:	d81b      	bhi.n	8004476 <UART_SetConfig+0x13e>
 800443e:	2b08      	cmp	r3, #8
 8004440:	d00a      	beq.n	8004458 <UART_SetConfig+0x120>
 8004442:	d818      	bhi.n	8004476 <UART_SetConfig+0x13e>
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <UART_SetConfig+0x116>
 8004448:	2b04      	cmp	r3, #4
 800444a:	d00a      	beq.n	8004462 <UART_SetConfig+0x12a>
 800444c:	e013      	b.n	8004476 <UART_SetConfig+0x13e>
 800444e:	231b      	movs	r3, #27
 8004450:	18fb      	adds	r3, r7, r3
 8004452:	2200      	movs	r2, #0
 8004454:	701a      	strb	r2, [r3, #0]
 8004456:	e02b      	b.n	80044b0 <UART_SetConfig+0x178>
 8004458:	231b      	movs	r3, #27
 800445a:	18fb      	adds	r3, r7, r3
 800445c:	2202      	movs	r2, #2
 800445e:	701a      	strb	r2, [r3, #0]
 8004460:	e026      	b.n	80044b0 <UART_SetConfig+0x178>
 8004462:	231b      	movs	r3, #27
 8004464:	18fb      	adds	r3, r7, r3
 8004466:	2204      	movs	r2, #4
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	e021      	b.n	80044b0 <UART_SetConfig+0x178>
 800446c:	231b      	movs	r3, #27
 800446e:	18fb      	adds	r3, r7, r3
 8004470:	2208      	movs	r2, #8
 8004472:	701a      	strb	r2, [r3, #0]
 8004474:	e01c      	b.n	80044b0 <UART_SetConfig+0x178>
 8004476:	231b      	movs	r3, #27
 8004478:	18fb      	adds	r3, r7, r3
 800447a:	2210      	movs	r2, #16
 800447c:	701a      	strb	r2, [r3, #0]
 800447e:	e017      	b.n	80044b0 <UART_SetConfig+0x178>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a7a      	ldr	r2, [pc, #488]	; (8004670 <UART_SetConfig+0x338>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d104      	bne.n	8004494 <UART_SetConfig+0x15c>
 800448a:	231b      	movs	r3, #27
 800448c:	18fb      	adds	r3, r7, r3
 800448e:	2200      	movs	r2, #0
 8004490:	701a      	strb	r2, [r3, #0]
 8004492:	e00d      	b.n	80044b0 <UART_SetConfig+0x178>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a76      	ldr	r2, [pc, #472]	; (8004674 <UART_SetConfig+0x33c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d104      	bne.n	80044a8 <UART_SetConfig+0x170>
 800449e:	231b      	movs	r3, #27
 80044a0:	18fb      	adds	r3, r7, r3
 80044a2:	2200      	movs	r2, #0
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	e003      	b.n	80044b0 <UART_SetConfig+0x178>
 80044a8:	231b      	movs	r3, #27
 80044aa:	18fb      	adds	r3, r7, r3
 80044ac:	2210      	movs	r2, #16
 80044ae:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	2380      	movs	r3, #128	; 0x80
 80044b6:	021b      	lsls	r3, r3, #8
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d000      	beq.n	80044be <UART_SetConfig+0x186>
 80044bc:	e065      	b.n	800458a <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80044be:	231b      	movs	r3, #27
 80044c0:	18fb      	adds	r3, r7, r3
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d015      	beq.n	80044f4 <UART_SetConfig+0x1bc>
 80044c8:	dc18      	bgt.n	80044fc <UART_SetConfig+0x1c4>
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d00d      	beq.n	80044ea <UART_SetConfig+0x1b2>
 80044ce:	dc15      	bgt.n	80044fc <UART_SetConfig+0x1c4>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <UART_SetConfig+0x1a2>
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d005      	beq.n	80044e4 <UART_SetConfig+0x1ac>
 80044d8:	e010      	b.n	80044fc <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044da:	f7fe fcd7 	bl	8002e8c <HAL_RCC_GetPCLK1Freq>
 80044de:	0003      	movs	r3, r0
 80044e0:	617b      	str	r3, [r7, #20]
        break;
 80044e2:	e012      	b.n	800450a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e4:	4b64      	ldr	r3, [pc, #400]	; (8004678 <UART_SetConfig+0x340>)
 80044e6:	617b      	str	r3, [r7, #20]
        break;
 80044e8:	e00f      	b.n	800450a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ea:	f7fe fc43 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 80044ee:	0003      	movs	r3, r0
 80044f0:	617b      	str	r3, [r7, #20]
        break;
 80044f2:	e00a      	b.n	800450a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044f4:	2380      	movs	r3, #128	; 0x80
 80044f6:	021b      	lsls	r3, r3, #8
 80044f8:	617b      	str	r3, [r7, #20]
        break;
 80044fa:	e006      	b.n	800450a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004500:	231a      	movs	r3, #26
 8004502:	18fb      	adds	r3, r7, r3
 8004504:	2201      	movs	r2, #1
 8004506:	701a      	strb	r2, [r3, #0]
        break;
 8004508:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d100      	bne.n	8004512 <UART_SetConfig+0x1da>
 8004510:	e08d      	b.n	800462e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004516:	4b59      	ldr	r3, [pc, #356]	; (800467c <UART_SetConfig+0x344>)
 8004518:	0052      	lsls	r2, r2, #1
 800451a:	5ad3      	ldrh	r3, [r2, r3]
 800451c:	0019      	movs	r1, r3
 800451e:	6978      	ldr	r0, [r7, #20]
 8004520:	f7fb fdf8 	bl	8000114 <__udivsi3>
 8004524:	0003      	movs	r3, r0
 8004526:	005a      	lsls	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	085b      	lsrs	r3, r3, #1
 800452e:	18d2      	adds	r2, r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	0019      	movs	r1, r3
 8004536:	0010      	movs	r0, r2
 8004538:	f7fb fdec 	bl	8000114 <__udivsi3>
 800453c:	0003      	movs	r3, r0
 800453e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b0f      	cmp	r3, #15
 8004544:	d91c      	bls.n	8004580 <UART_SetConfig+0x248>
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	2380      	movs	r3, #128	; 0x80
 800454a:	025b      	lsls	r3, r3, #9
 800454c:	429a      	cmp	r2, r3
 800454e:	d217      	bcs.n	8004580 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	b29a      	uxth	r2, r3
 8004554:	200e      	movs	r0, #14
 8004556:	183b      	adds	r3, r7, r0
 8004558:	210f      	movs	r1, #15
 800455a:	438a      	bics	r2, r1
 800455c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	085b      	lsrs	r3, r3, #1
 8004562:	b29b      	uxth	r3, r3
 8004564:	2207      	movs	r2, #7
 8004566:	4013      	ands	r3, r2
 8004568:	b299      	uxth	r1, r3
 800456a:	183b      	adds	r3, r7, r0
 800456c:	183a      	adds	r2, r7, r0
 800456e:	8812      	ldrh	r2, [r2, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	183a      	adds	r2, r7, r0
 800457a:	8812      	ldrh	r2, [r2, #0]
 800457c:	60da      	str	r2, [r3, #12]
 800457e:	e056      	b.n	800462e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8004580:	231a      	movs	r3, #26
 8004582:	18fb      	adds	r3, r7, r3
 8004584:	2201      	movs	r2, #1
 8004586:	701a      	strb	r2, [r3, #0]
 8004588:	e051      	b.n	800462e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800458a:	231b      	movs	r3, #27
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	2b08      	cmp	r3, #8
 8004592:	d015      	beq.n	80045c0 <UART_SetConfig+0x288>
 8004594:	dc18      	bgt.n	80045c8 <UART_SetConfig+0x290>
 8004596:	2b04      	cmp	r3, #4
 8004598:	d00d      	beq.n	80045b6 <UART_SetConfig+0x27e>
 800459a:	dc15      	bgt.n	80045c8 <UART_SetConfig+0x290>
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <UART_SetConfig+0x26e>
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d005      	beq.n	80045b0 <UART_SetConfig+0x278>
 80045a4:	e010      	b.n	80045c8 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045a6:	f7fe fc71 	bl	8002e8c <HAL_RCC_GetPCLK1Freq>
 80045aa:	0003      	movs	r3, r0
 80045ac:	617b      	str	r3, [r7, #20]
        break;
 80045ae:	e012      	b.n	80045d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045b0:	4b31      	ldr	r3, [pc, #196]	; (8004678 <UART_SetConfig+0x340>)
 80045b2:	617b      	str	r3, [r7, #20]
        break;
 80045b4:	e00f      	b.n	80045d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045b6:	f7fe fbdd 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 80045ba:	0003      	movs	r3, r0
 80045bc:	617b      	str	r3, [r7, #20]
        break;
 80045be:	e00a      	b.n	80045d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045c0:	2380      	movs	r3, #128	; 0x80
 80045c2:	021b      	lsls	r3, r3, #8
 80045c4:	617b      	str	r3, [r7, #20]
        break;
 80045c6:	e006      	b.n	80045d6 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045cc:	231a      	movs	r3, #26
 80045ce:	18fb      	adds	r3, r7, r3
 80045d0:	2201      	movs	r2, #1
 80045d2:	701a      	strb	r2, [r3, #0]
        break;
 80045d4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d028      	beq.n	800462e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045e0:	4b26      	ldr	r3, [pc, #152]	; (800467c <UART_SetConfig+0x344>)
 80045e2:	0052      	lsls	r2, r2, #1
 80045e4:	5ad3      	ldrh	r3, [r2, r3]
 80045e6:	0019      	movs	r1, r3
 80045e8:	6978      	ldr	r0, [r7, #20]
 80045ea:	f7fb fd93 	bl	8000114 <__udivsi3>
 80045ee:	0003      	movs	r3, r0
 80045f0:	001a      	movs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	085b      	lsrs	r3, r3, #1
 80045f8:	18d2      	adds	r2, r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	0019      	movs	r1, r3
 8004600:	0010      	movs	r0, r2
 8004602:	f7fb fd87 	bl	8000114 <__udivsi3>
 8004606:	0003      	movs	r3, r0
 8004608:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	2b0f      	cmp	r3, #15
 800460e:	d90a      	bls.n	8004626 <UART_SetConfig+0x2ee>
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	2380      	movs	r3, #128	; 0x80
 8004614:	025b      	lsls	r3, r3, #9
 8004616:	429a      	cmp	r2, r3
 8004618:	d205      	bcs.n	8004626 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	b29a      	uxth	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60da      	str	r2, [r3, #12]
 8004624:	e003      	b.n	800462e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8004626:	231a      	movs	r3, #26
 8004628:	18fb      	adds	r3, r7, r3
 800462a:	2201      	movs	r2, #1
 800462c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	226a      	movs	r2, #106	; 0x6a
 8004632:	2101      	movs	r1, #1
 8004634:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2268      	movs	r2, #104	; 0x68
 800463a:	2101      	movs	r1, #1
 800463c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800464a:	231a      	movs	r3, #26
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	781b      	ldrb	r3, [r3, #0]
}
 8004650:	0018      	movs	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	b008      	add	sp, #32
 8004656:	bd80      	pop	{r7, pc}
 8004658:	cfff69f3 	.word	0xcfff69f3
 800465c:	ffffcfff 	.word	0xffffcfff
 8004660:	11fff4ff 	.word	0x11fff4ff
 8004664:	40013800 	.word	0x40013800
 8004668:	40021000 	.word	0x40021000
 800466c:	40004400 	.word	0x40004400
 8004670:	40004800 	.word	0x40004800
 8004674:	40004c00 	.word	0x40004c00
 8004678:	00f42400 	.word	0x00f42400
 800467c:	08005bc8 	.word	0x08005bc8

08004680 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	2201      	movs	r2, #1
 800468e:	4013      	ands	r3, r2
 8004690:	d00b      	beq.n	80046aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	4a4a      	ldr	r2, [pc, #296]	; (80047c4 <UART_AdvFeatureConfig+0x144>)
 800469a:	4013      	ands	r3, r2
 800469c:	0019      	movs	r1, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ae:	2202      	movs	r2, #2
 80046b0:	4013      	ands	r3, r2
 80046b2:	d00b      	beq.n	80046cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	4a43      	ldr	r2, [pc, #268]	; (80047c8 <UART_AdvFeatureConfig+0x148>)
 80046bc:	4013      	ands	r3, r2
 80046be:	0019      	movs	r1, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d0:	2204      	movs	r2, #4
 80046d2:	4013      	ands	r3, r2
 80046d4:	d00b      	beq.n	80046ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	4a3b      	ldr	r2, [pc, #236]	; (80047cc <UART_AdvFeatureConfig+0x14c>)
 80046de:	4013      	ands	r3, r2
 80046e0:	0019      	movs	r1, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f2:	2208      	movs	r2, #8
 80046f4:	4013      	ands	r3, r2
 80046f6:	d00b      	beq.n	8004710 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	4a34      	ldr	r2, [pc, #208]	; (80047d0 <UART_AdvFeatureConfig+0x150>)
 8004700:	4013      	ands	r3, r2
 8004702:	0019      	movs	r1, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	2210      	movs	r2, #16
 8004716:	4013      	ands	r3, r2
 8004718:	d00b      	beq.n	8004732 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	4a2c      	ldr	r2, [pc, #176]	; (80047d4 <UART_AdvFeatureConfig+0x154>)
 8004722:	4013      	ands	r3, r2
 8004724:	0019      	movs	r1, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004736:	2220      	movs	r2, #32
 8004738:	4013      	ands	r3, r2
 800473a:	d00b      	beq.n	8004754 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	4a25      	ldr	r2, [pc, #148]	; (80047d8 <UART_AdvFeatureConfig+0x158>)
 8004744:	4013      	ands	r3, r2
 8004746:	0019      	movs	r1, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	2240      	movs	r2, #64	; 0x40
 800475a:	4013      	ands	r3, r2
 800475c:	d01d      	beq.n	800479a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	4a1d      	ldr	r2, [pc, #116]	; (80047dc <UART_AdvFeatureConfig+0x15c>)
 8004766:	4013      	ands	r3, r2
 8004768:	0019      	movs	r1, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800477a:	2380      	movs	r3, #128	; 0x80
 800477c:	035b      	lsls	r3, r3, #13
 800477e:	429a      	cmp	r2, r3
 8004780:	d10b      	bne.n	800479a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	4a15      	ldr	r2, [pc, #84]	; (80047e0 <UART_AdvFeatureConfig+0x160>)
 800478a:	4013      	ands	r3, r2
 800478c:	0019      	movs	r1, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479e:	2280      	movs	r2, #128	; 0x80
 80047a0:	4013      	ands	r3, r2
 80047a2:	d00b      	beq.n	80047bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	4a0e      	ldr	r2, [pc, #56]	; (80047e4 <UART_AdvFeatureConfig+0x164>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	0019      	movs	r1, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	605a      	str	r2, [r3, #4]
  }
}
 80047bc:	46c0      	nop			; (mov r8, r8)
 80047be:	46bd      	mov	sp, r7
 80047c0:	b002      	add	sp, #8
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	fffdffff 	.word	0xfffdffff
 80047c8:	fffeffff 	.word	0xfffeffff
 80047cc:	fffbffff 	.word	0xfffbffff
 80047d0:	ffff7fff 	.word	0xffff7fff
 80047d4:	ffffefff 	.word	0xffffefff
 80047d8:	ffffdfff 	.word	0xffffdfff
 80047dc:	ffefffff 	.word	0xffefffff
 80047e0:	ff9fffff 	.word	0xff9fffff
 80047e4:	fff7ffff 	.word	0xfff7ffff

080047e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af02      	add	r7, sp, #8
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2290      	movs	r2, #144	; 0x90
 80047f4:	2100      	movs	r1, #0
 80047f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047f8:	f7fc ff5c 	bl	80016b4 <HAL_GetTick>
 80047fc:	0003      	movs	r3, r0
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2208      	movs	r2, #8
 8004808:	4013      	ands	r3, r2
 800480a:	2b08      	cmp	r3, #8
 800480c:	d10c      	bne.n	8004828 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2280      	movs	r2, #128	; 0x80
 8004812:	0391      	lsls	r1, r2, #14
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	4a1a      	ldr	r2, [pc, #104]	; (8004880 <UART_CheckIdleState+0x98>)
 8004818:	9200      	str	r2, [sp, #0]
 800481a:	2200      	movs	r2, #0
 800481c:	f000 f832 	bl	8004884 <UART_WaitOnFlagUntilTimeout>
 8004820:	1e03      	subs	r3, r0, #0
 8004822:	d001      	beq.n	8004828 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e026      	b.n	8004876 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2204      	movs	r2, #4
 8004830:	4013      	ands	r3, r2
 8004832:	2b04      	cmp	r3, #4
 8004834:	d10c      	bne.n	8004850 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2280      	movs	r2, #128	; 0x80
 800483a:	03d1      	lsls	r1, r2, #15
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	4a10      	ldr	r2, [pc, #64]	; (8004880 <UART_CheckIdleState+0x98>)
 8004840:	9200      	str	r2, [sp, #0]
 8004842:	2200      	movs	r2, #0
 8004844:	f000 f81e 	bl	8004884 <UART_WaitOnFlagUntilTimeout>
 8004848:	1e03      	subs	r3, r0, #0
 800484a:	d001      	beq.n	8004850 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e012      	b.n	8004876 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2288      	movs	r2, #136	; 0x88
 8004854:	2120      	movs	r1, #32
 8004856:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	228c      	movs	r2, #140	; 0x8c
 800485c:	2120      	movs	r1, #32
 800485e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2284      	movs	r2, #132	; 0x84
 8004870:	2100      	movs	r1, #0
 8004872:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	0018      	movs	r0, r3
 8004878:	46bd      	mov	sp, r7
 800487a:	b004      	add	sp, #16
 800487c:	bd80      	pop	{r7, pc}
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	01ffffff 	.word	0x01ffffff

08004884 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b094      	sub	sp, #80	; 0x50
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	1dfb      	adds	r3, r7, #7
 8004892:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004894:	e0a7      	b.n	80049e6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004898:	3301      	adds	r3, #1
 800489a:	d100      	bne.n	800489e <UART_WaitOnFlagUntilTimeout+0x1a>
 800489c:	e0a3      	b.n	80049e6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489e:	f7fc ff09 	bl	80016b4 <HAL_GetTick>
 80048a2:	0002      	movs	r2, r0
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d302      	bcc.n	80048b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80048ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d13f      	bne.n	8004934 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b4:	f3ef 8310 	mrs	r3, PRIMASK
 80048b8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80048bc:	647b      	str	r3, [r7, #68]	; 0x44
 80048be:	2301      	movs	r3, #1
 80048c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c4:	f383 8810 	msr	PRIMASK, r3
}
 80048c8:	46c0      	nop			; (mov r8, r8)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	494e      	ldr	r1, [pc, #312]	; (8004a10 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80048d6:	400a      	ands	r2, r1
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048dc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e0:	f383 8810 	msr	PRIMASK, r3
}
 80048e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048e6:	f3ef 8310 	mrs	r3, PRIMASK
 80048ea:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80048ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ee:	643b      	str	r3, [r7, #64]	; 0x40
 80048f0:	2301      	movs	r3, #1
 80048f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f6:	f383 8810 	msr	PRIMASK, r3
}
 80048fa:	46c0      	nop			; (mov r8, r8)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2101      	movs	r1, #1
 8004908:	438a      	bics	r2, r1
 800490a:	609a      	str	r2, [r3, #8]
 800490c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800490e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004912:	f383 8810 	msr	PRIMASK, r3
}
 8004916:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2288      	movs	r2, #136	; 0x88
 800491c:	2120      	movs	r1, #32
 800491e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	228c      	movs	r2, #140	; 0x8c
 8004924:	2120      	movs	r1, #32
 8004926:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2284      	movs	r2, #132	; 0x84
 800492c:	2100      	movs	r1, #0
 800492e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e069      	b.n	8004a08 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2204      	movs	r2, #4
 800493c:	4013      	ands	r3, r2
 800493e:	d052      	beq.n	80049e6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69da      	ldr	r2, [r3, #28]
 8004946:	2380      	movs	r3, #128	; 0x80
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	401a      	ands	r2, r3
 800494c:	2380      	movs	r3, #128	; 0x80
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	429a      	cmp	r2, r3
 8004952:	d148      	bne.n	80049e6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2280      	movs	r2, #128	; 0x80
 800495a:	0112      	lsls	r2, r2, #4
 800495c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800495e:	f3ef 8310 	mrs	r3, PRIMASK
 8004962:	613b      	str	r3, [r7, #16]
  return(result);
 8004964:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004968:	2301      	movs	r3, #1
 800496a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f383 8810 	msr	PRIMASK, r3
}
 8004972:	46c0      	nop			; (mov r8, r8)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4924      	ldr	r1, [pc, #144]	; (8004a10 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004980:	400a      	ands	r2, r1
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004986:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	f383 8810 	msr	PRIMASK, r3
}
 800498e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004990:	f3ef 8310 	mrs	r3, PRIMASK
 8004994:	61fb      	str	r3, [r7, #28]
  return(result);
 8004996:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004998:	64bb      	str	r3, [r7, #72]	; 0x48
 800499a:	2301      	movs	r3, #1
 800499c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	f383 8810 	msr	PRIMASK, r3
}
 80049a4:	46c0      	nop			; (mov r8, r8)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2101      	movs	r1, #1
 80049b2:	438a      	bics	r2, r1
 80049b4:	609a      	str	r2, [r3, #8]
 80049b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	f383 8810 	msr	PRIMASK, r3
}
 80049c0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2288      	movs	r2, #136	; 0x88
 80049c6:	2120      	movs	r1, #32
 80049c8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	228c      	movs	r2, #140	; 0x8c
 80049ce:	2120      	movs	r1, #32
 80049d0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2290      	movs	r2, #144	; 0x90
 80049d6:	2120      	movs	r1, #32
 80049d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2284      	movs	r2, #132	; 0x84
 80049de:	2100      	movs	r1, #0
 80049e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e010      	b.n	8004a08 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	4013      	ands	r3, r2
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	425a      	negs	r2, r3
 80049f6:	4153      	adcs	r3, r2
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	001a      	movs	r2, r3
 80049fc:	1dfb      	adds	r3, r7, #7
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d100      	bne.n	8004a06 <UART_WaitOnFlagUntilTimeout+0x182>
 8004a04:	e747      	b.n	8004896 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	0018      	movs	r0, r3
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	b014      	add	sp, #80	; 0x50
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	fffffe5f 	.word	0xfffffe5f

08004a14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2284      	movs	r2, #132	; 0x84
 8004a20:	5c9b      	ldrb	r3, [r3, r2]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d101      	bne.n	8004a2a <HAL_UARTEx_DisableFifoMode+0x16>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e027      	b.n	8004a7a <HAL_UARTEx_DisableFifoMode+0x66>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2284      	movs	r2, #132	; 0x84
 8004a2e:	2101      	movs	r1, #1
 8004a30:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2288      	movs	r2, #136	; 0x88
 8004a36:	2124      	movs	r1, #36	; 0x24
 8004a38:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	438a      	bics	r2, r1
 8004a50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4a0b      	ldr	r2, [pc, #44]	; (8004a84 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004a56:	4013      	ands	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2288      	movs	r2, #136	; 0x88
 8004a6c:	2120      	movs	r1, #32
 8004a6e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2284      	movs	r2, #132	; 0x84
 8004a74:	2100      	movs	r1, #0
 8004a76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	b004      	add	sp, #16
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	dfffffff 	.word	0xdfffffff

08004a88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2284      	movs	r2, #132	; 0x84
 8004a96:	5c9b      	ldrb	r3, [r3, r2]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e02e      	b.n	8004afe <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2284      	movs	r2, #132	; 0x84
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2288      	movs	r2, #136	; 0x88
 8004aac:	2124      	movs	r1, #36	; 0x24
 8004aae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	438a      	bics	r2, r1
 8004ac6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	08d9      	lsrs	r1, r3, #3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	0018      	movs	r0, r3
 8004ae0:	f000 f854 	bl	8004b8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2288      	movs	r2, #136	; 0x88
 8004af0:	2120      	movs	r1, #32
 8004af2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2284      	movs	r2, #132	; 0x84
 8004af8:	2100      	movs	r1, #0
 8004afa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	0018      	movs	r0, r3
 8004b00:	46bd      	mov	sp, r7
 8004b02:	b004      	add	sp, #16
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2284      	movs	r2, #132	; 0x84
 8004b16:	5c9b      	ldrb	r3, [r3, r2]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d101      	bne.n	8004b20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e02f      	b.n	8004b80 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2284      	movs	r2, #132	; 0x84
 8004b24:	2101      	movs	r1, #1
 8004b26:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2288      	movs	r2, #136	; 0x88
 8004b2c:	2124      	movs	r1, #36	; 0x24
 8004b2e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2101      	movs	r1, #1
 8004b44:	438a      	bics	r2, r1
 8004b46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	4a0e      	ldr	r2, [pc, #56]	; (8004b88 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	0019      	movs	r1, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	0018      	movs	r0, r3
 8004b62:	f000 f813 	bl	8004b8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2288      	movs	r2, #136	; 0x88
 8004b72:	2120      	movs	r1, #32
 8004b74:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2284      	movs	r2, #132	; 0x84
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	0018      	movs	r0, r3
 8004b82:	46bd      	mov	sp, r7
 8004b84:	b004      	add	sp, #16
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	f1ffffff 	.word	0xf1ffffff

08004b8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d108      	bne.n	8004bae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	226a      	movs	r2, #106	; 0x6a
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2268      	movs	r2, #104	; 0x68
 8004ba8:	2101      	movs	r1, #1
 8004baa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004bac:	e043      	b.n	8004c36 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004bae:	260f      	movs	r6, #15
 8004bb0:	19bb      	adds	r3, r7, r6
 8004bb2:	2208      	movs	r2, #8
 8004bb4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004bb6:	200e      	movs	r0, #14
 8004bb8:	183b      	adds	r3, r7, r0
 8004bba:	2208      	movs	r2, #8
 8004bbc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	0e5b      	lsrs	r3, r3, #25
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	240d      	movs	r4, #13
 8004bca:	193b      	adds	r3, r7, r4
 8004bcc:	2107      	movs	r1, #7
 8004bce:	400a      	ands	r2, r1
 8004bd0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	0f5b      	lsrs	r3, r3, #29
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	250c      	movs	r5, #12
 8004bde:	197b      	adds	r3, r7, r5
 8004be0:	2107      	movs	r1, #7
 8004be2:	400a      	ands	r2, r1
 8004be4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004be6:	183b      	adds	r3, r7, r0
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	197a      	adds	r2, r7, r5
 8004bec:	7812      	ldrb	r2, [r2, #0]
 8004bee:	4914      	ldr	r1, [pc, #80]	; (8004c40 <UARTEx_SetNbDataToProcess+0xb4>)
 8004bf0:	5c8a      	ldrb	r2, [r1, r2]
 8004bf2:	435a      	muls	r2, r3
 8004bf4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004bf6:	197b      	adds	r3, r7, r5
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	4a12      	ldr	r2, [pc, #72]	; (8004c44 <UARTEx_SetNbDataToProcess+0xb8>)
 8004bfc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bfe:	0019      	movs	r1, r3
 8004c00:	f7fb fb12 	bl	8000228 <__divsi3>
 8004c04:	0003      	movs	r3, r0
 8004c06:	b299      	uxth	r1, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	226a      	movs	r2, #106	; 0x6a
 8004c0c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c0e:	19bb      	adds	r3, r7, r6
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	193a      	adds	r2, r7, r4
 8004c14:	7812      	ldrb	r2, [r2, #0]
 8004c16:	490a      	ldr	r1, [pc, #40]	; (8004c40 <UARTEx_SetNbDataToProcess+0xb4>)
 8004c18:	5c8a      	ldrb	r2, [r1, r2]
 8004c1a:	435a      	muls	r2, r3
 8004c1c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c1e:	193b      	adds	r3, r7, r4
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	4a08      	ldr	r2, [pc, #32]	; (8004c44 <UARTEx_SetNbDataToProcess+0xb8>)
 8004c24:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c26:	0019      	movs	r1, r3
 8004c28:	f7fb fafe 	bl	8000228 <__divsi3>
 8004c2c:	0003      	movs	r3, r0
 8004c2e:	b299      	uxth	r1, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2268      	movs	r2, #104	; 0x68
 8004c34:	5299      	strh	r1, [r3, r2]
}
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	b005      	add	sp, #20
 8004c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	08005be0 	.word	0x08005be0
 8004c44:	08005be8 	.word	0x08005be8

08004c48 <std>:
 8004c48:	2300      	movs	r3, #0
 8004c4a:	b510      	push	{r4, lr}
 8004c4c:	0004      	movs	r4, r0
 8004c4e:	6003      	str	r3, [r0, #0]
 8004c50:	6043      	str	r3, [r0, #4]
 8004c52:	6083      	str	r3, [r0, #8]
 8004c54:	8181      	strh	r1, [r0, #12]
 8004c56:	6643      	str	r3, [r0, #100]	; 0x64
 8004c58:	0019      	movs	r1, r3
 8004c5a:	81c2      	strh	r2, [r0, #14]
 8004c5c:	6103      	str	r3, [r0, #16]
 8004c5e:	6143      	str	r3, [r0, #20]
 8004c60:	6183      	str	r3, [r0, #24]
 8004c62:	2208      	movs	r2, #8
 8004c64:	305c      	adds	r0, #92	; 0x5c
 8004c66:	f000 f8fd 	bl	8004e64 <memset>
 8004c6a:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <std+0x38>)
 8004c6c:	6224      	str	r4, [r4, #32]
 8004c6e:	6263      	str	r3, [r4, #36]	; 0x24
 8004c70:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <std+0x3c>)
 8004c72:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c74:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <std+0x40>)
 8004c76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c78:	4b04      	ldr	r3, [pc, #16]	; (8004c8c <std+0x44>)
 8004c7a:	6323      	str	r3, [r4, #48]	; 0x30
 8004c7c:	bd10      	pop	{r4, pc}
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	08004dcd 	.word	0x08004dcd
 8004c84:	08004df5 	.word	0x08004df5
 8004c88:	08004e2d 	.word	0x08004e2d
 8004c8c:	08004e59 	.word	0x08004e59

08004c90 <stdio_exit_handler>:
 8004c90:	b510      	push	{r4, lr}
 8004c92:	4a03      	ldr	r2, [pc, #12]	; (8004ca0 <stdio_exit_handler+0x10>)
 8004c94:	4903      	ldr	r1, [pc, #12]	; (8004ca4 <stdio_exit_handler+0x14>)
 8004c96:	4804      	ldr	r0, [pc, #16]	; (8004ca8 <stdio_exit_handler+0x18>)
 8004c98:	f000 f86c 	bl	8004d74 <_fwalk_sglue>
 8004c9c:	bd10      	pop	{r4, pc}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	2000000c 	.word	0x2000000c
 8004ca4:	08005801 	.word	0x08005801
 8004ca8:	20000018 	.word	0x20000018

08004cac <cleanup_stdio>:
 8004cac:	6841      	ldr	r1, [r0, #4]
 8004cae:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <cleanup_stdio+0x30>)
 8004cb0:	b510      	push	{r4, lr}
 8004cb2:	0004      	movs	r4, r0
 8004cb4:	4299      	cmp	r1, r3
 8004cb6:	d001      	beq.n	8004cbc <cleanup_stdio+0x10>
 8004cb8:	f000 fda2 	bl	8005800 <_fflush_r>
 8004cbc:	68a1      	ldr	r1, [r4, #8]
 8004cbe:	4b08      	ldr	r3, [pc, #32]	; (8004ce0 <cleanup_stdio+0x34>)
 8004cc0:	4299      	cmp	r1, r3
 8004cc2:	d002      	beq.n	8004cca <cleanup_stdio+0x1e>
 8004cc4:	0020      	movs	r0, r4
 8004cc6:	f000 fd9b 	bl	8005800 <_fflush_r>
 8004cca:	68e1      	ldr	r1, [r4, #12]
 8004ccc:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <cleanup_stdio+0x38>)
 8004cce:	4299      	cmp	r1, r3
 8004cd0:	d002      	beq.n	8004cd8 <cleanup_stdio+0x2c>
 8004cd2:	0020      	movs	r0, r4
 8004cd4:	f000 fd94 	bl	8005800 <_fflush_r>
 8004cd8:	bd10      	pop	{r4, pc}
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	200003e0 	.word	0x200003e0
 8004ce0:	20000448 	.word	0x20000448
 8004ce4:	200004b0 	.word	0x200004b0

08004ce8 <global_stdio_init.part.0>:
 8004ce8:	b510      	push	{r4, lr}
 8004cea:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <global_stdio_init.part.0+0x28>)
 8004cec:	4a09      	ldr	r2, [pc, #36]	; (8004d14 <global_stdio_init.part.0+0x2c>)
 8004cee:	2104      	movs	r1, #4
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	4809      	ldr	r0, [pc, #36]	; (8004d18 <global_stdio_init.part.0+0x30>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f7ff ffa7 	bl	8004c48 <std>
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	2109      	movs	r1, #9
 8004cfe:	4807      	ldr	r0, [pc, #28]	; (8004d1c <global_stdio_init.part.0+0x34>)
 8004d00:	f7ff ffa2 	bl	8004c48 <std>
 8004d04:	2202      	movs	r2, #2
 8004d06:	2112      	movs	r1, #18
 8004d08:	4805      	ldr	r0, [pc, #20]	; (8004d20 <global_stdio_init.part.0+0x38>)
 8004d0a:	f7ff ff9d 	bl	8004c48 <std>
 8004d0e:	bd10      	pop	{r4, pc}
 8004d10:	20000518 	.word	0x20000518
 8004d14:	08004c91 	.word	0x08004c91
 8004d18:	200003e0 	.word	0x200003e0
 8004d1c:	20000448 	.word	0x20000448
 8004d20:	200004b0 	.word	0x200004b0

08004d24 <__sfp_lock_acquire>:
 8004d24:	b510      	push	{r4, lr}
 8004d26:	4802      	ldr	r0, [pc, #8]	; (8004d30 <__sfp_lock_acquire+0xc>)
 8004d28:	f000 f91c 	bl	8004f64 <__retarget_lock_acquire_recursive>
 8004d2c:	bd10      	pop	{r4, pc}
 8004d2e:	46c0      	nop			; (mov r8, r8)
 8004d30:	20000521 	.word	0x20000521

08004d34 <__sfp_lock_release>:
 8004d34:	b510      	push	{r4, lr}
 8004d36:	4802      	ldr	r0, [pc, #8]	; (8004d40 <__sfp_lock_release+0xc>)
 8004d38:	f000 f915 	bl	8004f66 <__retarget_lock_release_recursive>
 8004d3c:	bd10      	pop	{r4, pc}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	20000521 	.word	0x20000521

08004d44 <__sinit>:
 8004d44:	b510      	push	{r4, lr}
 8004d46:	0004      	movs	r4, r0
 8004d48:	f7ff ffec 	bl	8004d24 <__sfp_lock_acquire>
 8004d4c:	6a23      	ldr	r3, [r4, #32]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <__sinit+0x14>
 8004d52:	f7ff ffef 	bl	8004d34 <__sfp_lock_release>
 8004d56:	bd10      	pop	{r4, pc}
 8004d58:	4b04      	ldr	r3, [pc, #16]	; (8004d6c <__sinit+0x28>)
 8004d5a:	6223      	str	r3, [r4, #32]
 8004d5c:	4b04      	ldr	r3, [pc, #16]	; (8004d70 <__sinit+0x2c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1f6      	bne.n	8004d52 <__sinit+0xe>
 8004d64:	f7ff ffc0 	bl	8004ce8 <global_stdio_init.part.0>
 8004d68:	e7f3      	b.n	8004d52 <__sinit+0xe>
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	08004cad 	.word	0x08004cad
 8004d70:	20000518 	.word	0x20000518

08004d74 <_fwalk_sglue>:
 8004d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d76:	0014      	movs	r4, r2
 8004d78:	2600      	movs	r6, #0
 8004d7a:	9000      	str	r0, [sp, #0]
 8004d7c:	9101      	str	r1, [sp, #4]
 8004d7e:	68a5      	ldr	r5, [r4, #8]
 8004d80:	6867      	ldr	r7, [r4, #4]
 8004d82:	3f01      	subs	r7, #1
 8004d84:	d504      	bpl.n	8004d90 <_fwalk_sglue+0x1c>
 8004d86:	6824      	ldr	r4, [r4, #0]
 8004d88:	2c00      	cmp	r4, #0
 8004d8a:	d1f8      	bne.n	8004d7e <_fwalk_sglue+0xa>
 8004d8c:	0030      	movs	r0, r6
 8004d8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d90:	89ab      	ldrh	r3, [r5, #12]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d908      	bls.n	8004da8 <_fwalk_sglue+0x34>
 8004d96:	220e      	movs	r2, #14
 8004d98:	5eab      	ldrsh	r3, [r5, r2]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	d004      	beq.n	8004da8 <_fwalk_sglue+0x34>
 8004d9e:	0029      	movs	r1, r5
 8004da0:	9800      	ldr	r0, [sp, #0]
 8004da2:	9b01      	ldr	r3, [sp, #4]
 8004da4:	4798      	blx	r3
 8004da6:	4306      	orrs	r6, r0
 8004da8:	3568      	adds	r5, #104	; 0x68
 8004daa:	e7ea      	b.n	8004d82 <_fwalk_sglue+0xe>

08004dac <iprintf>:
 8004dac:	b40f      	push	{r0, r1, r2, r3}
 8004dae:	b507      	push	{r0, r1, r2, lr}
 8004db0:	4905      	ldr	r1, [pc, #20]	; (8004dc8 <iprintf+0x1c>)
 8004db2:	ab04      	add	r3, sp, #16
 8004db4:	6808      	ldr	r0, [r1, #0]
 8004db6:	cb04      	ldmia	r3!, {r2}
 8004db8:	6881      	ldr	r1, [r0, #8]
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	f000 f9fa 	bl	80051b4 <_vfiprintf_r>
 8004dc0:	b003      	add	sp, #12
 8004dc2:	bc08      	pop	{r3}
 8004dc4:	b004      	add	sp, #16
 8004dc6:	4718      	bx	r3
 8004dc8:	20000064 	.word	0x20000064

08004dcc <__sread>:
 8004dcc:	b570      	push	{r4, r5, r6, lr}
 8004dce:	000c      	movs	r4, r1
 8004dd0:	250e      	movs	r5, #14
 8004dd2:	5f49      	ldrsh	r1, [r1, r5]
 8004dd4:	f000 f874 	bl	8004ec0 <_read_r>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	db03      	blt.n	8004de4 <__sread+0x18>
 8004ddc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004dde:	181b      	adds	r3, r3, r0
 8004de0:	6563      	str	r3, [r4, #84]	; 0x54
 8004de2:	bd70      	pop	{r4, r5, r6, pc}
 8004de4:	89a3      	ldrh	r3, [r4, #12]
 8004de6:	4a02      	ldr	r2, [pc, #8]	; (8004df0 <__sread+0x24>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	81a3      	strh	r3, [r4, #12]
 8004dec:	e7f9      	b.n	8004de2 <__sread+0x16>
 8004dee:	46c0      	nop			; (mov r8, r8)
 8004df0:	ffffefff 	.word	0xffffefff

08004df4 <__swrite>:
 8004df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df6:	001f      	movs	r7, r3
 8004df8:	898b      	ldrh	r3, [r1, #12]
 8004dfa:	0005      	movs	r5, r0
 8004dfc:	000c      	movs	r4, r1
 8004dfe:	0016      	movs	r6, r2
 8004e00:	05db      	lsls	r3, r3, #23
 8004e02:	d505      	bpl.n	8004e10 <__swrite+0x1c>
 8004e04:	230e      	movs	r3, #14
 8004e06:	5ec9      	ldrsh	r1, [r1, r3]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	f000 f844 	bl	8004e98 <_lseek_r>
 8004e10:	89a3      	ldrh	r3, [r4, #12]
 8004e12:	4a05      	ldr	r2, [pc, #20]	; (8004e28 <__swrite+0x34>)
 8004e14:	0028      	movs	r0, r5
 8004e16:	4013      	ands	r3, r2
 8004e18:	81a3      	strh	r3, [r4, #12]
 8004e1a:	0032      	movs	r2, r6
 8004e1c:	230e      	movs	r3, #14
 8004e1e:	5ee1      	ldrsh	r1, [r4, r3]
 8004e20:	003b      	movs	r3, r7
 8004e22:	f000 f861 	bl	8004ee8 <_write_r>
 8004e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e28:	ffffefff 	.word	0xffffefff

08004e2c <__sseek>:
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	000c      	movs	r4, r1
 8004e30:	250e      	movs	r5, #14
 8004e32:	5f49      	ldrsh	r1, [r1, r5]
 8004e34:	f000 f830 	bl	8004e98 <_lseek_r>
 8004e38:	89a3      	ldrh	r3, [r4, #12]
 8004e3a:	1c42      	adds	r2, r0, #1
 8004e3c:	d103      	bne.n	8004e46 <__sseek+0x1a>
 8004e3e:	4a05      	ldr	r2, [pc, #20]	; (8004e54 <__sseek+0x28>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	81a3      	strh	r3, [r4, #12]
 8004e44:	bd70      	pop	{r4, r5, r6, pc}
 8004e46:	2280      	movs	r2, #128	; 0x80
 8004e48:	0152      	lsls	r2, r2, #5
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	81a3      	strh	r3, [r4, #12]
 8004e4e:	6560      	str	r0, [r4, #84]	; 0x54
 8004e50:	e7f8      	b.n	8004e44 <__sseek+0x18>
 8004e52:	46c0      	nop			; (mov r8, r8)
 8004e54:	ffffefff 	.word	0xffffefff

08004e58 <__sclose>:
 8004e58:	b510      	push	{r4, lr}
 8004e5a:	230e      	movs	r3, #14
 8004e5c:	5ec9      	ldrsh	r1, [r1, r3]
 8004e5e:	f000 f809 	bl	8004e74 <_close_r>
 8004e62:	bd10      	pop	{r4, pc}

08004e64 <memset>:
 8004e64:	0003      	movs	r3, r0
 8004e66:	1882      	adds	r2, r0, r2
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d100      	bne.n	8004e6e <memset+0xa>
 8004e6c:	4770      	bx	lr
 8004e6e:	7019      	strb	r1, [r3, #0]
 8004e70:	3301      	adds	r3, #1
 8004e72:	e7f9      	b.n	8004e68 <memset+0x4>

08004e74 <_close_r>:
 8004e74:	2300      	movs	r3, #0
 8004e76:	b570      	push	{r4, r5, r6, lr}
 8004e78:	4d06      	ldr	r5, [pc, #24]	; (8004e94 <_close_r+0x20>)
 8004e7a:	0004      	movs	r4, r0
 8004e7c:	0008      	movs	r0, r1
 8004e7e:	602b      	str	r3, [r5, #0]
 8004e80:	f7fb fd06 	bl	8000890 <_close>
 8004e84:	1c43      	adds	r3, r0, #1
 8004e86:	d103      	bne.n	8004e90 <_close_r+0x1c>
 8004e88:	682b      	ldr	r3, [r5, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d000      	beq.n	8004e90 <_close_r+0x1c>
 8004e8e:	6023      	str	r3, [r4, #0]
 8004e90:	bd70      	pop	{r4, r5, r6, pc}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	2000051c 	.word	0x2000051c

08004e98 <_lseek_r>:
 8004e98:	b570      	push	{r4, r5, r6, lr}
 8004e9a:	0004      	movs	r4, r0
 8004e9c:	0008      	movs	r0, r1
 8004e9e:	0011      	movs	r1, r2
 8004ea0:	001a      	movs	r2, r3
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	4d05      	ldr	r5, [pc, #20]	; (8004ebc <_lseek_r+0x24>)
 8004ea6:	602b      	str	r3, [r5, #0]
 8004ea8:	f7fb fd13 	bl	80008d2 <_lseek>
 8004eac:	1c43      	adds	r3, r0, #1
 8004eae:	d103      	bne.n	8004eb8 <_lseek_r+0x20>
 8004eb0:	682b      	ldr	r3, [r5, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d000      	beq.n	8004eb8 <_lseek_r+0x20>
 8004eb6:	6023      	str	r3, [r4, #0]
 8004eb8:	bd70      	pop	{r4, r5, r6, pc}
 8004eba:	46c0      	nop			; (mov r8, r8)
 8004ebc:	2000051c 	.word	0x2000051c

08004ec0 <_read_r>:
 8004ec0:	b570      	push	{r4, r5, r6, lr}
 8004ec2:	0004      	movs	r4, r0
 8004ec4:	0008      	movs	r0, r1
 8004ec6:	0011      	movs	r1, r2
 8004ec8:	001a      	movs	r2, r3
 8004eca:	2300      	movs	r3, #0
 8004ecc:	4d05      	ldr	r5, [pc, #20]	; (8004ee4 <_read_r+0x24>)
 8004ece:	602b      	str	r3, [r5, #0]
 8004ed0:	f7fb fca5 	bl	800081e <_read>
 8004ed4:	1c43      	adds	r3, r0, #1
 8004ed6:	d103      	bne.n	8004ee0 <_read_r+0x20>
 8004ed8:	682b      	ldr	r3, [r5, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d000      	beq.n	8004ee0 <_read_r+0x20>
 8004ede:	6023      	str	r3, [r4, #0]
 8004ee0:	bd70      	pop	{r4, r5, r6, pc}
 8004ee2:	46c0      	nop			; (mov r8, r8)
 8004ee4:	2000051c 	.word	0x2000051c

08004ee8 <_write_r>:
 8004ee8:	b570      	push	{r4, r5, r6, lr}
 8004eea:	0004      	movs	r4, r0
 8004eec:	0008      	movs	r0, r1
 8004eee:	0011      	movs	r1, r2
 8004ef0:	001a      	movs	r2, r3
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	4d05      	ldr	r5, [pc, #20]	; (8004f0c <_write_r+0x24>)
 8004ef6:	602b      	str	r3, [r5, #0]
 8004ef8:	f7fb fcae 	bl	8000858 <_write>
 8004efc:	1c43      	adds	r3, r0, #1
 8004efe:	d103      	bne.n	8004f08 <_write_r+0x20>
 8004f00:	682b      	ldr	r3, [r5, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d000      	beq.n	8004f08 <_write_r+0x20>
 8004f06:	6023      	str	r3, [r4, #0]
 8004f08:	bd70      	pop	{r4, r5, r6, pc}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	2000051c 	.word	0x2000051c

08004f10 <__errno>:
 8004f10:	4b01      	ldr	r3, [pc, #4]	; (8004f18 <__errno+0x8>)
 8004f12:	6818      	ldr	r0, [r3, #0]
 8004f14:	4770      	bx	lr
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	20000064 	.word	0x20000064

08004f1c <__libc_init_array>:
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	2600      	movs	r6, #0
 8004f20:	4c0c      	ldr	r4, [pc, #48]	; (8004f54 <__libc_init_array+0x38>)
 8004f22:	4d0d      	ldr	r5, [pc, #52]	; (8004f58 <__libc_init_array+0x3c>)
 8004f24:	1b64      	subs	r4, r4, r5
 8004f26:	10a4      	asrs	r4, r4, #2
 8004f28:	42a6      	cmp	r6, r4
 8004f2a:	d109      	bne.n	8004f40 <__libc_init_array+0x24>
 8004f2c:	2600      	movs	r6, #0
 8004f2e:	f000 fde1 	bl	8005af4 <_init>
 8004f32:	4c0a      	ldr	r4, [pc, #40]	; (8004f5c <__libc_init_array+0x40>)
 8004f34:	4d0a      	ldr	r5, [pc, #40]	; (8004f60 <__libc_init_array+0x44>)
 8004f36:	1b64      	subs	r4, r4, r5
 8004f38:	10a4      	asrs	r4, r4, #2
 8004f3a:	42a6      	cmp	r6, r4
 8004f3c:	d105      	bne.n	8004f4a <__libc_init_array+0x2e>
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}
 8004f40:	00b3      	lsls	r3, r6, #2
 8004f42:	58eb      	ldr	r3, [r5, r3]
 8004f44:	4798      	blx	r3
 8004f46:	3601      	adds	r6, #1
 8004f48:	e7ee      	b.n	8004f28 <__libc_init_array+0xc>
 8004f4a:	00b3      	lsls	r3, r6, #2
 8004f4c:	58eb      	ldr	r3, [r5, r3]
 8004f4e:	4798      	blx	r3
 8004f50:	3601      	adds	r6, #1
 8004f52:	e7f2      	b.n	8004f3a <__libc_init_array+0x1e>
 8004f54:	08005c24 	.word	0x08005c24
 8004f58:	08005c24 	.word	0x08005c24
 8004f5c:	08005c28 	.word	0x08005c28
 8004f60:	08005c24 	.word	0x08005c24

08004f64 <__retarget_lock_acquire_recursive>:
 8004f64:	4770      	bx	lr

08004f66 <__retarget_lock_release_recursive>:
 8004f66:	4770      	bx	lr

08004f68 <_free_r>:
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	0005      	movs	r5, r0
 8004f6c:	2900      	cmp	r1, #0
 8004f6e:	d010      	beq.n	8004f92 <_free_r+0x2a>
 8004f70:	1f0c      	subs	r4, r1, #4
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	da00      	bge.n	8004f7a <_free_r+0x12>
 8004f78:	18e4      	adds	r4, r4, r3
 8004f7a:	0028      	movs	r0, r5
 8004f7c:	f000 f8e2 	bl	8005144 <__malloc_lock>
 8004f80:	4a1d      	ldr	r2, [pc, #116]	; (8004ff8 <_free_r+0x90>)
 8004f82:	6813      	ldr	r3, [r2, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d105      	bne.n	8004f94 <_free_r+0x2c>
 8004f88:	6063      	str	r3, [r4, #4]
 8004f8a:	6014      	str	r4, [r2, #0]
 8004f8c:	0028      	movs	r0, r5
 8004f8e:	f000 f8e1 	bl	8005154 <__malloc_unlock>
 8004f92:	bd70      	pop	{r4, r5, r6, pc}
 8004f94:	42a3      	cmp	r3, r4
 8004f96:	d908      	bls.n	8004faa <_free_r+0x42>
 8004f98:	6820      	ldr	r0, [r4, #0]
 8004f9a:	1821      	adds	r1, r4, r0
 8004f9c:	428b      	cmp	r3, r1
 8004f9e:	d1f3      	bne.n	8004f88 <_free_r+0x20>
 8004fa0:	6819      	ldr	r1, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	1809      	adds	r1, r1, r0
 8004fa6:	6021      	str	r1, [r4, #0]
 8004fa8:	e7ee      	b.n	8004f88 <_free_r+0x20>
 8004faa:	001a      	movs	r2, r3
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <_free_r+0x4e>
 8004fb2:	42a3      	cmp	r3, r4
 8004fb4:	d9f9      	bls.n	8004faa <_free_r+0x42>
 8004fb6:	6811      	ldr	r1, [r2, #0]
 8004fb8:	1850      	adds	r0, r2, r1
 8004fba:	42a0      	cmp	r0, r4
 8004fbc:	d10b      	bne.n	8004fd6 <_free_r+0x6e>
 8004fbe:	6820      	ldr	r0, [r4, #0]
 8004fc0:	1809      	adds	r1, r1, r0
 8004fc2:	1850      	adds	r0, r2, r1
 8004fc4:	6011      	str	r1, [r2, #0]
 8004fc6:	4283      	cmp	r3, r0
 8004fc8:	d1e0      	bne.n	8004f8c <_free_r+0x24>
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	1841      	adds	r1, r0, r1
 8004fd0:	6011      	str	r1, [r2, #0]
 8004fd2:	6053      	str	r3, [r2, #4]
 8004fd4:	e7da      	b.n	8004f8c <_free_r+0x24>
 8004fd6:	42a0      	cmp	r0, r4
 8004fd8:	d902      	bls.n	8004fe0 <_free_r+0x78>
 8004fda:	230c      	movs	r3, #12
 8004fdc:	602b      	str	r3, [r5, #0]
 8004fde:	e7d5      	b.n	8004f8c <_free_r+0x24>
 8004fe0:	6820      	ldr	r0, [r4, #0]
 8004fe2:	1821      	adds	r1, r4, r0
 8004fe4:	428b      	cmp	r3, r1
 8004fe6:	d103      	bne.n	8004ff0 <_free_r+0x88>
 8004fe8:	6819      	ldr	r1, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	1809      	adds	r1, r1, r0
 8004fee:	6021      	str	r1, [r4, #0]
 8004ff0:	6063      	str	r3, [r4, #4]
 8004ff2:	6054      	str	r4, [r2, #4]
 8004ff4:	e7ca      	b.n	8004f8c <_free_r+0x24>
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	20000524 	.word	0x20000524

08004ffc <sbrk_aligned>:
 8004ffc:	b570      	push	{r4, r5, r6, lr}
 8004ffe:	4e0f      	ldr	r6, [pc, #60]	; (800503c <sbrk_aligned+0x40>)
 8005000:	000d      	movs	r5, r1
 8005002:	6831      	ldr	r1, [r6, #0]
 8005004:	0004      	movs	r4, r0
 8005006:	2900      	cmp	r1, #0
 8005008:	d102      	bne.n	8005010 <sbrk_aligned+0x14>
 800500a:	f000 fccb 	bl	80059a4 <_sbrk_r>
 800500e:	6030      	str	r0, [r6, #0]
 8005010:	0029      	movs	r1, r5
 8005012:	0020      	movs	r0, r4
 8005014:	f000 fcc6 	bl	80059a4 <_sbrk_r>
 8005018:	1c43      	adds	r3, r0, #1
 800501a:	d00a      	beq.n	8005032 <sbrk_aligned+0x36>
 800501c:	2303      	movs	r3, #3
 800501e:	1cc5      	adds	r5, r0, #3
 8005020:	439d      	bics	r5, r3
 8005022:	42a8      	cmp	r0, r5
 8005024:	d007      	beq.n	8005036 <sbrk_aligned+0x3a>
 8005026:	1a29      	subs	r1, r5, r0
 8005028:	0020      	movs	r0, r4
 800502a:	f000 fcbb 	bl	80059a4 <_sbrk_r>
 800502e:	3001      	adds	r0, #1
 8005030:	d101      	bne.n	8005036 <sbrk_aligned+0x3a>
 8005032:	2501      	movs	r5, #1
 8005034:	426d      	negs	r5, r5
 8005036:	0028      	movs	r0, r5
 8005038:	bd70      	pop	{r4, r5, r6, pc}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	20000528 	.word	0x20000528

08005040 <_malloc_r>:
 8005040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005042:	2203      	movs	r2, #3
 8005044:	1ccb      	adds	r3, r1, #3
 8005046:	4393      	bics	r3, r2
 8005048:	3308      	adds	r3, #8
 800504a:	0006      	movs	r6, r0
 800504c:	001f      	movs	r7, r3
 800504e:	2b0c      	cmp	r3, #12
 8005050:	d238      	bcs.n	80050c4 <_malloc_r+0x84>
 8005052:	270c      	movs	r7, #12
 8005054:	42b9      	cmp	r1, r7
 8005056:	d837      	bhi.n	80050c8 <_malloc_r+0x88>
 8005058:	0030      	movs	r0, r6
 800505a:	f000 f873 	bl	8005144 <__malloc_lock>
 800505e:	4b38      	ldr	r3, [pc, #224]	; (8005140 <_malloc_r+0x100>)
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	001c      	movs	r4, r3
 8005066:	2c00      	cmp	r4, #0
 8005068:	d133      	bne.n	80050d2 <_malloc_r+0x92>
 800506a:	0039      	movs	r1, r7
 800506c:	0030      	movs	r0, r6
 800506e:	f7ff ffc5 	bl	8004ffc <sbrk_aligned>
 8005072:	0004      	movs	r4, r0
 8005074:	1c43      	adds	r3, r0, #1
 8005076:	d15e      	bne.n	8005136 <_malloc_r+0xf6>
 8005078:	9b00      	ldr	r3, [sp, #0]
 800507a:	681c      	ldr	r4, [r3, #0]
 800507c:	0025      	movs	r5, r4
 800507e:	2d00      	cmp	r5, #0
 8005080:	d14e      	bne.n	8005120 <_malloc_r+0xe0>
 8005082:	2c00      	cmp	r4, #0
 8005084:	d051      	beq.n	800512a <_malloc_r+0xea>
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	0029      	movs	r1, r5
 800508a:	18e3      	adds	r3, r4, r3
 800508c:	0030      	movs	r0, r6
 800508e:	9301      	str	r3, [sp, #4]
 8005090:	f000 fc88 	bl	80059a4 <_sbrk_r>
 8005094:	9b01      	ldr	r3, [sp, #4]
 8005096:	4283      	cmp	r3, r0
 8005098:	d147      	bne.n	800512a <_malloc_r+0xea>
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	0030      	movs	r0, r6
 800509e:	1aff      	subs	r7, r7, r3
 80050a0:	0039      	movs	r1, r7
 80050a2:	f7ff ffab 	bl	8004ffc <sbrk_aligned>
 80050a6:	3001      	adds	r0, #1
 80050a8:	d03f      	beq.n	800512a <_malloc_r+0xea>
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	19db      	adds	r3, r3, r7
 80050ae:	6023      	str	r3, [r4, #0]
 80050b0:	9b00      	ldr	r3, [sp, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d040      	beq.n	800513a <_malloc_r+0xfa>
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	42a2      	cmp	r2, r4
 80050bc:	d133      	bne.n	8005126 <_malloc_r+0xe6>
 80050be:	2200      	movs	r2, #0
 80050c0:	605a      	str	r2, [r3, #4]
 80050c2:	e014      	b.n	80050ee <_malloc_r+0xae>
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	dac5      	bge.n	8005054 <_malloc_r+0x14>
 80050c8:	230c      	movs	r3, #12
 80050ca:	2500      	movs	r5, #0
 80050cc:	6033      	str	r3, [r6, #0]
 80050ce:	0028      	movs	r0, r5
 80050d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80050d2:	6821      	ldr	r1, [r4, #0]
 80050d4:	1bc9      	subs	r1, r1, r7
 80050d6:	d420      	bmi.n	800511a <_malloc_r+0xda>
 80050d8:	290b      	cmp	r1, #11
 80050da:	d918      	bls.n	800510e <_malloc_r+0xce>
 80050dc:	19e2      	adds	r2, r4, r7
 80050de:	6027      	str	r7, [r4, #0]
 80050e0:	42a3      	cmp	r3, r4
 80050e2:	d112      	bne.n	800510a <_malloc_r+0xca>
 80050e4:	9b00      	ldr	r3, [sp, #0]
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	6863      	ldr	r3, [r4, #4]
 80050ea:	6011      	str	r1, [r2, #0]
 80050ec:	6053      	str	r3, [r2, #4]
 80050ee:	0030      	movs	r0, r6
 80050f0:	0025      	movs	r5, r4
 80050f2:	f000 f82f 	bl	8005154 <__malloc_unlock>
 80050f6:	2207      	movs	r2, #7
 80050f8:	350b      	adds	r5, #11
 80050fa:	1d23      	adds	r3, r4, #4
 80050fc:	4395      	bics	r5, r2
 80050fe:	1aea      	subs	r2, r5, r3
 8005100:	429d      	cmp	r5, r3
 8005102:	d0e4      	beq.n	80050ce <_malloc_r+0x8e>
 8005104:	1b5b      	subs	r3, r3, r5
 8005106:	50a3      	str	r3, [r4, r2]
 8005108:	e7e1      	b.n	80050ce <_malloc_r+0x8e>
 800510a:	605a      	str	r2, [r3, #4]
 800510c:	e7ec      	b.n	80050e8 <_malloc_r+0xa8>
 800510e:	6862      	ldr	r2, [r4, #4]
 8005110:	42a3      	cmp	r3, r4
 8005112:	d1d5      	bne.n	80050c0 <_malloc_r+0x80>
 8005114:	9b00      	ldr	r3, [sp, #0]
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	e7e9      	b.n	80050ee <_malloc_r+0xae>
 800511a:	0023      	movs	r3, r4
 800511c:	6864      	ldr	r4, [r4, #4]
 800511e:	e7a2      	b.n	8005066 <_malloc_r+0x26>
 8005120:	002c      	movs	r4, r5
 8005122:	686d      	ldr	r5, [r5, #4]
 8005124:	e7ab      	b.n	800507e <_malloc_r+0x3e>
 8005126:	0013      	movs	r3, r2
 8005128:	e7c4      	b.n	80050b4 <_malloc_r+0x74>
 800512a:	230c      	movs	r3, #12
 800512c:	0030      	movs	r0, r6
 800512e:	6033      	str	r3, [r6, #0]
 8005130:	f000 f810 	bl	8005154 <__malloc_unlock>
 8005134:	e7cb      	b.n	80050ce <_malloc_r+0x8e>
 8005136:	6027      	str	r7, [r4, #0]
 8005138:	e7d9      	b.n	80050ee <_malloc_r+0xae>
 800513a:	605b      	str	r3, [r3, #4]
 800513c:	deff      	udf	#255	; 0xff
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	20000524 	.word	0x20000524

08005144 <__malloc_lock>:
 8005144:	b510      	push	{r4, lr}
 8005146:	4802      	ldr	r0, [pc, #8]	; (8005150 <__malloc_lock+0xc>)
 8005148:	f7ff ff0c 	bl	8004f64 <__retarget_lock_acquire_recursive>
 800514c:	bd10      	pop	{r4, pc}
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	20000520 	.word	0x20000520

08005154 <__malloc_unlock>:
 8005154:	b510      	push	{r4, lr}
 8005156:	4802      	ldr	r0, [pc, #8]	; (8005160 <__malloc_unlock+0xc>)
 8005158:	f7ff ff05 	bl	8004f66 <__retarget_lock_release_recursive>
 800515c:	bd10      	pop	{r4, pc}
 800515e:	46c0      	nop			; (mov r8, r8)
 8005160:	20000520 	.word	0x20000520

08005164 <__sfputc_r>:
 8005164:	6893      	ldr	r3, [r2, #8]
 8005166:	b510      	push	{r4, lr}
 8005168:	3b01      	subs	r3, #1
 800516a:	6093      	str	r3, [r2, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	da04      	bge.n	800517a <__sfputc_r+0x16>
 8005170:	6994      	ldr	r4, [r2, #24]
 8005172:	42a3      	cmp	r3, r4
 8005174:	db07      	blt.n	8005186 <__sfputc_r+0x22>
 8005176:	290a      	cmp	r1, #10
 8005178:	d005      	beq.n	8005186 <__sfputc_r+0x22>
 800517a:	6813      	ldr	r3, [r2, #0]
 800517c:	1c58      	adds	r0, r3, #1
 800517e:	6010      	str	r0, [r2, #0]
 8005180:	7019      	strb	r1, [r3, #0]
 8005182:	0008      	movs	r0, r1
 8005184:	bd10      	pop	{r4, pc}
 8005186:	f000 fb66 	bl	8005856 <__swbuf_r>
 800518a:	0001      	movs	r1, r0
 800518c:	e7f9      	b.n	8005182 <__sfputc_r+0x1e>

0800518e <__sfputs_r>:
 800518e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005190:	0006      	movs	r6, r0
 8005192:	000f      	movs	r7, r1
 8005194:	0014      	movs	r4, r2
 8005196:	18d5      	adds	r5, r2, r3
 8005198:	42ac      	cmp	r4, r5
 800519a:	d101      	bne.n	80051a0 <__sfputs_r+0x12>
 800519c:	2000      	movs	r0, #0
 800519e:	e007      	b.n	80051b0 <__sfputs_r+0x22>
 80051a0:	7821      	ldrb	r1, [r4, #0]
 80051a2:	003a      	movs	r2, r7
 80051a4:	0030      	movs	r0, r6
 80051a6:	f7ff ffdd 	bl	8005164 <__sfputc_r>
 80051aa:	3401      	adds	r4, #1
 80051ac:	1c43      	adds	r3, r0, #1
 80051ae:	d1f3      	bne.n	8005198 <__sfputs_r+0xa>
 80051b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051b4 <_vfiprintf_r>:
 80051b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051b6:	b0a1      	sub	sp, #132	; 0x84
 80051b8:	000f      	movs	r7, r1
 80051ba:	0015      	movs	r5, r2
 80051bc:	001e      	movs	r6, r3
 80051be:	9003      	str	r0, [sp, #12]
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d004      	beq.n	80051ce <_vfiprintf_r+0x1a>
 80051c4:	6a03      	ldr	r3, [r0, #32]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <_vfiprintf_r+0x1a>
 80051ca:	f7ff fdbb 	bl	8004d44 <__sinit>
 80051ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051d0:	07db      	lsls	r3, r3, #31
 80051d2:	d405      	bmi.n	80051e0 <_vfiprintf_r+0x2c>
 80051d4:	89bb      	ldrh	r3, [r7, #12]
 80051d6:	059b      	lsls	r3, r3, #22
 80051d8:	d402      	bmi.n	80051e0 <_vfiprintf_r+0x2c>
 80051da:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80051dc:	f7ff fec2 	bl	8004f64 <__retarget_lock_acquire_recursive>
 80051e0:	89bb      	ldrh	r3, [r7, #12]
 80051e2:	071b      	lsls	r3, r3, #28
 80051e4:	d502      	bpl.n	80051ec <_vfiprintf_r+0x38>
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d113      	bne.n	8005214 <_vfiprintf_r+0x60>
 80051ec:	0039      	movs	r1, r7
 80051ee:	9803      	ldr	r0, [sp, #12]
 80051f0:	f000 fb74 	bl	80058dc <__swsetup_r>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d00d      	beq.n	8005214 <_vfiprintf_r+0x60>
 80051f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051fa:	07db      	lsls	r3, r3, #31
 80051fc:	d503      	bpl.n	8005206 <_vfiprintf_r+0x52>
 80051fe:	2001      	movs	r0, #1
 8005200:	4240      	negs	r0, r0
 8005202:	b021      	add	sp, #132	; 0x84
 8005204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005206:	89bb      	ldrh	r3, [r7, #12]
 8005208:	059b      	lsls	r3, r3, #22
 800520a:	d4f8      	bmi.n	80051fe <_vfiprintf_r+0x4a>
 800520c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800520e:	f7ff feaa 	bl	8004f66 <__retarget_lock_release_recursive>
 8005212:	e7f4      	b.n	80051fe <_vfiprintf_r+0x4a>
 8005214:	2300      	movs	r3, #0
 8005216:	ac08      	add	r4, sp, #32
 8005218:	6163      	str	r3, [r4, #20]
 800521a:	3320      	adds	r3, #32
 800521c:	7663      	strb	r3, [r4, #25]
 800521e:	3310      	adds	r3, #16
 8005220:	76a3      	strb	r3, [r4, #26]
 8005222:	9607      	str	r6, [sp, #28]
 8005224:	002e      	movs	r6, r5
 8005226:	7833      	ldrb	r3, [r6, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <_vfiprintf_r+0x7c>
 800522c:	2b25      	cmp	r3, #37	; 0x25
 800522e:	d148      	bne.n	80052c2 <_vfiprintf_r+0x10e>
 8005230:	1b73      	subs	r3, r6, r5
 8005232:	9305      	str	r3, [sp, #20]
 8005234:	42ae      	cmp	r6, r5
 8005236:	d00b      	beq.n	8005250 <_vfiprintf_r+0x9c>
 8005238:	002a      	movs	r2, r5
 800523a:	0039      	movs	r1, r7
 800523c:	9803      	ldr	r0, [sp, #12]
 800523e:	f7ff ffa6 	bl	800518e <__sfputs_r>
 8005242:	3001      	adds	r0, #1
 8005244:	d100      	bne.n	8005248 <_vfiprintf_r+0x94>
 8005246:	e0af      	b.n	80053a8 <_vfiprintf_r+0x1f4>
 8005248:	6963      	ldr	r3, [r4, #20]
 800524a:	9a05      	ldr	r2, [sp, #20]
 800524c:	189b      	adds	r3, r3, r2
 800524e:	6163      	str	r3, [r4, #20]
 8005250:	7833      	ldrb	r3, [r6, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d100      	bne.n	8005258 <_vfiprintf_r+0xa4>
 8005256:	e0a7      	b.n	80053a8 <_vfiprintf_r+0x1f4>
 8005258:	2201      	movs	r2, #1
 800525a:	2300      	movs	r3, #0
 800525c:	4252      	negs	r2, r2
 800525e:	6062      	str	r2, [r4, #4]
 8005260:	a904      	add	r1, sp, #16
 8005262:	3254      	adds	r2, #84	; 0x54
 8005264:	1852      	adds	r2, r2, r1
 8005266:	1c75      	adds	r5, r6, #1
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	60e3      	str	r3, [r4, #12]
 800526c:	60a3      	str	r3, [r4, #8]
 800526e:	7013      	strb	r3, [r2, #0]
 8005270:	65a3      	str	r3, [r4, #88]	; 0x58
 8005272:	4b59      	ldr	r3, [pc, #356]	; (80053d8 <_vfiprintf_r+0x224>)
 8005274:	2205      	movs	r2, #5
 8005276:	0018      	movs	r0, r3
 8005278:	7829      	ldrb	r1, [r5, #0]
 800527a:	9305      	str	r3, [sp, #20]
 800527c:	f000 fba4 	bl	80059c8 <memchr>
 8005280:	1c6e      	adds	r6, r5, #1
 8005282:	2800      	cmp	r0, #0
 8005284:	d11f      	bne.n	80052c6 <_vfiprintf_r+0x112>
 8005286:	6822      	ldr	r2, [r4, #0]
 8005288:	06d3      	lsls	r3, r2, #27
 800528a:	d504      	bpl.n	8005296 <_vfiprintf_r+0xe2>
 800528c:	2353      	movs	r3, #83	; 0x53
 800528e:	a904      	add	r1, sp, #16
 8005290:	185b      	adds	r3, r3, r1
 8005292:	2120      	movs	r1, #32
 8005294:	7019      	strb	r1, [r3, #0]
 8005296:	0713      	lsls	r3, r2, #28
 8005298:	d504      	bpl.n	80052a4 <_vfiprintf_r+0xf0>
 800529a:	2353      	movs	r3, #83	; 0x53
 800529c:	a904      	add	r1, sp, #16
 800529e:	185b      	adds	r3, r3, r1
 80052a0:	212b      	movs	r1, #43	; 0x2b
 80052a2:	7019      	strb	r1, [r3, #0]
 80052a4:	782b      	ldrb	r3, [r5, #0]
 80052a6:	2b2a      	cmp	r3, #42	; 0x2a
 80052a8:	d016      	beq.n	80052d8 <_vfiprintf_r+0x124>
 80052aa:	002e      	movs	r6, r5
 80052ac:	2100      	movs	r1, #0
 80052ae:	200a      	movs	r0, #10
 80052b0:	68e3      	ldr	r3, [r4, #12]
 80052b2:	7832      	ldrb	r2, [r6, #0]
 80052b4:	1c75      	adds	r5, r6, #1
 80052b6:	3a30      	subs	r2, #48	; 0x30
 80052b8:	2a09      	cmp	r2, #9
 80052ba:	d94e      	bls.n	800535a <_vfiprintf_r+0x1a6>
 80052bc:	2900      	cmp	r1, #0
 80052be:	d111      	bne.n	80052e4 <_vfiprintf_r+0x130>
 80052c0:	e017      	b.n	80052f2 <_vfiprintf_r+0x13e>
 80052c2:	3601      	adds	r6, #1
 80052c4:	e7af      	b.n	8005226 <_vfiprintf_r+0x72>
 80052c6:	9b05      	ldr	r3, [sp, #20]
 80052c8:	6822      	ldr	r2, [r4, #0]
 80052ca:	1ac0      	subs	r0, r0, r3
 80052cc:	2301      	movs	r3, #1
 80052ce:	4083      	lsls	r3, r0
 80052d0:	4313      	orrs	r3, r2
 80052d2:	0035      	movs	r5, r6
 80052d4:	6023      	str	r3, [r4, #0]
 80052d6:	e7cc      	b.n	8005272 <_vfiprintf_r+0xbe>
 80052d8:	9b07      	ldr	r3, [sp, #28]
 80052da:	1d19      	adds	r1, r3, #4
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	9107      	str	r1, [sp, #28]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	db01      	blt.n	80052e8 <_vfiprintf_r+0x134>
 80052e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80052e6:	e004      	b.n	80052f2 <_vfiprintf_r+0x13e>
 80052e8:	425b      	negs	r3, r3
 80052ea:	60e3      	str	r3, [r4, #12]
 80052ec:	2302      	movs	r3, #2
 80052ee:	4313      	orrs	r3, r2
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	7833      	ldrb	r3, [r6, #0]
 80052f4:	2b2e      	cmp	r3, #46	; 0x2e
 80052f6:	d10a      	bne.n	800530e <_vfiprintf_r+0x15a>
 80052f8:	7873      	ldrb	r3, [r6, #1]
 80052fa:	2b2a      	cmp	r3, #42	; 0x2a
 80052fc:	d135      	bne.n	800536a <_vfiprintf_r+0x1b6>
 80052fe:	9b07      	ldr	r3, [sp, #28]
 8005300:	3602      	adds	r6, #2
 8005302:	1d1a      	adds	r2, r3, #4
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	9207      	str	r2, [sp, #28]
 8005308:	2b00      	cmp	r3, #0
 800530a:	db2b      	blt.n	8005364 <_vfiprintf_r+0x1b0>
 800530c:	9309      	str	r3, [sp, #36]	; 0x24
 800530e:	4d33      	ldr	r5, [pc, #204]	; (80053dc <_vfiprintf_r+0x228>)
 8005310:	2203      	movs	r2, #3
 8005312:	0028      	movs	r0, r5
 8005314:	7831      	ldrb	r1, [r6, #0]
 8005316:	f000 fb57 	bl	80059c8 <memchr>
 800531a:	2800      	cmp	r0, #0
 800531c:	d006      	beq.n	800532c <_vfiprintf_r+0x178>
 800531e:	2340      	movs	r3, #64	; 0x40
 8005320:	1b40      	subs	r0, r0, r5
 8005322:	4083      	lsls	r3, r0
 8005324:	6822      	ldr	r2, [r4, #0]
 8005326:	3601      	adds	r6, #1
 8005328:	4313      	orrs	r3, r2
 800532a:	6023      	str	r3, [r4, #0]
 800532c:	7831      	ldrb	r1, [r6, #0]
 800532e:	2206      	movs	r2, #6
 8005330:	482b      	ldr	r0, [pc, #172]	; (80053e0 <_vfiprintf_r+0x22c>)
 8005332:	1c75      	adds	r5, r6, #1
 8005334:	7621      	strb	r1, [r4, #24]
 8005336:	f000 fb47 	bl	80059c8 <memchr>
 800533a:	2800      	cmp	r0, #0
 800533c:	d043      	beq.n	80053c6 <_vfiprintf_r+0x212>
 800533e:	4b29      	ldr	r3, [pc, #164]	; (80053e4 <_vfiprintf_r+0x230>)
 8005340:	2b00      	cmp	r3, #0
 8005342:	d125      	bne.n	8005390 <_vfiprintf_r+0x1dc>
 8005344:	2207      	movs	r2, #7
 8005346:	9b07      	ldr	r3, [sp, #28]
 8005348:	3307      	adds	r3, #7
 800534a:	4393      	bics	r3, r2
 800534c:	3308      	adds	r3, #8
 800534e:	9307      	str	r3, [sp, #28]
 8005350:	6963      	ldr	r3, [r4, #20]
 8005352:	9a04      	ldr	r2, [sp, #16]
 8005354:	189b      	adds	r3, r3, r2
 8005356:	6163      	str	r3, [r4, #20]
 8005358:	e764      	b.n	8005224 <_vfiprintf_r+0x70>
 800535a:	4343      	muls	r3, r0
 800535c:	002e      	movs	r6, r5
 800535e:	2101      	movs	r1, #1
 8005360:	189b      	adds	r3, r3, r2
 8005362:	e7a6      	b.n	80052b2 <_vfiprintf_r+0xfe>
 8005364:	2301      	movs	r3, #1
 8005366:	425b      	negs	r3, r3
 8005368:	e7d0      	b.n	800530c <_vfiprintf_r+0x158>
 800536a:	2300      	movs	r3, #0
 800536c:	200a      	movs	r0, #10
 800536e:	001a      	movs	r2, r3
 8005370:	3601      	adds	r6, #1
 8005372:	6063      	str	r3, [r4, #4]
 8005374:	7831      	ldrb	r1, [r6, #0]
 8005376:	1c75      	adds	r5, r6, #1
 8005378:	3930      	subs	r1, #48	; 0x30
 800537a:	2909      	cmp	r1, #9
 800537c:	d903      	bls.n	8005386 <_vfiprintf_r+0x1d2>
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0c5      	beq.n	800530e <_vfiprintf_r+0x15a>
 8005382:	9209      	str	r2, [sp, #36]	; 0x24
 8005384:	e7c3      	b.n	800530e <_vfiprintf_r+0x15a>
 8005386:	4342      	muls	r2, r0
 8005388:	002e      	movs	r6, r5
 800538a:	2301      	movs	r3, #1
 800538c:	1852      	adds	r2, r2, r1
 800538e:	e7f1      	b.n	8005374 <_vfiprintf_r+0x1c0>
 8005390:	aa07      	add	r2, sp, #28
 8005392:	9200      	str	r2, [sp, #0]
 8005394:	0021      	movs	r1, r4
 8005396:	003a      	movs	r2, r7
 8005398:	4b13      	ldr	r3, [pc, #76]	; (80053e8 <_vfiprintf_r+0x234>)
 800539a:	9803      	ldr	r0, [sp, #12]
 800539c:	e000      	b.n	80053a0 <_vfiprintf_r+0x1ec>
 800539e:	bf00      	nop
 80053a0:	9004      	str	r0, [sp, #16]
 80053a2:	9b04      	ldr	r3, [sp, #16]
 80053a4:	3301      	adds	r3, #1
 80053a6:	d1d3      	bne.n	8005350 <_vfiprintf_r+0x19c>
 80053a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053aa:	07db      	lsls	r3, r3, #31
 80053ac:	d405      	bmi.n	80053ba <_vfiprintf_r+0x206>
 80053ae:	89bb      	ldrh	r3, [r7, #12]
 80053b0:	059b      	lsls	r3, r3, #22
 80053b2:	d402      	bmi.n	80053ba <_vfiprintf_r+0x206>
 80053b4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80053b6:	f7ff fdd6 	bl	8004f66 <__retarget_lock_release_recursive>
 80053ba:	89bb      	ldrh	r3, [r7, #12]
 80053bc:	065b      	lsls	r3, r3, #25
 80053be:	d500      	bpl.n	80053c2 <_vfiprintf_r+0x20e>
 80053c0:	e71d      	b.n	80051fe <_vfiprintf_r+0x4a>
 80053c2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80053c4:	e71d      	b.n	8005202 <_vfiprintf_r+0x4e>
 80053c6:	aa07      	add	r2, sp, #28
 80053c8:	9200      	str	r2, [sp, #0]
 80053ca:	0021      	movs	r1, r4
 80053cc:	003a      	movs	r2, r7
 80053ce:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <_vfiprintf_r+0x234>)
 80053d0:	9803      	ldr	r0, [sp, #12]
 80053d2:	f000 f87b 	bl	80054cc <_printf_i>
 80053d6:	e7e3      	b.n	80053a0 <_vfiprintf_r+0x1ec>
 80053d8:	08005bf0 	.word	0x08005bf0
 80053dc:	08005bf6 	.word	0x08005bf6
 80053e0:	08005bfa 	.word	0x08005bfa
 80053e4:	00000000 	.word	0x00000000
 80053e8:	0800518f 	.word	0x0800518f

080053ec <_printf_common>:
 80053ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053ee:	0016      	movs	r6, r2
 80053f0:	9301      	str	r3, [sp, #4]
 80053f2:	688a      	ldr	r2, [r1, #8]
 80053f4:	690b      	ldr	r3, [r1, #16]
 80053f6:	000c      	movs	r4, r1
 80053f8:	9000      	str	r0, [sp, #0]
 80053fa:	4293      	cmp	r3, r2
 80053fc:	da00      	bge.n	8005400 <_printf_common+0x14>
 80053fe:	0013      	movs	r3, r2
 8005400:	0022      	movs	r2, r4
 8005402:	6033      	str	r3, [r6, #0]
 8005404:	3243      	adds	r2, #67	; 0x43
 8005406:	7812      	ldrb	r2, [r2, #0]
 8005408:	2a00      	cmp	r2, #0
 800540a:	d001      	beq.n	8005410 <_printf_common+0x24>
 800540c:	3301      	adds	r3, #1
 800540e:	6033      	str	r3, [r6, #0]
 8005410:	6823      	ldr	r3, [r4, #0]
 8005412:	069b      	lsls	r3, r3, #26
 8005414:	d502      	bpl.n	800541c <_printf_common+0x30>
 8005416:	6833      	ldr	r3, [r6, #0]
 8005418:	3302      	adds	r3, #2
 800541a:	6033      	str	r3, [r6, #0]
 800541c:	6822      	ldr	r2, [r4, #0]
 800541e:	2306      	movs	r3, #6
 8005420:	0015      	movs	r5, r2
 8005422:	401d      	ands	r5, r3
 8005424:	421a      	tst	r2, r3
 8005426:	d027      	beq.n	8005478 <_printf_common+0x8c>
 8005428:	0023      	movs	r3, r4
 800542a:	3343      	adds	r3, #67	; 0x43
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	1e5a      	subs	r2, r3, #1
 8005430:	4193      	sbcs	r3, r2
 8005432:	6822      	ldr	r2, [r4, #0]
 8005434:	0692      	lsls	r2, r2, #26
 8005436:	d430      	bmi.n	800549a <_printf_common+0xae>
 8005438:	0022      	movs	r2, r4
 800543a:	9901      	ldr	r1, [sp, #4]
 800543c:	9800      	ldr	r0, [sp, #0]
 800543e:	9d08      	ldr	r5, [sp, #32]
 8005440:	3243      	adds	r2, #67	; 0x43
 8005442:	47a8      	blx	r5
 8005444:	3001      	adds	r0, #1
 8005446:	d025      	beq.n	8005494 <_printf_common+0xa8>
 8005448:	2206      	movs	r2, #6
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	2500      	movs	r5, #0
 800544e:	4013      	ands	r3, r2
 8005450:	2b04      	cmp	r3, #4
 8005452:	d105      	bne.n	8005460 <_printf_common+0x74>
 8005454:	6833      	ldr	r3, [r6, #0]
 8005456:	68e5      	ldr	r5, [r4, #12]
 8005458:	1aed      	subs	r5, r5, r3
 800545a:	43eb      	mvns	r3, r5
 800545c:	17db      	asrs	r3, r3, #31
 800545e:	401d      	ands	r5, r3
 8005460:	68a3      	ldr	r3, [r4, #8]
 8005462:	6922      	ldr	r2, [r4, #16]
 8005464:	4293      	cmp	r3, r2
 8005466:	dd01      	ble.n	800546c <_printf_common+0x80>
 8005468:	1a9b      	subs	r3, r3, r2
 800546a:	18ed      	adds	r5, r5, r3
 800546c:	2600      	movs	r6, #0
 800546e:	42b5      	cmp	r5, r6
 8005470:	d120      	bne.n	80054b4 <_printf_common+0xc8>
 8005472:	2000      	movs	r0, #0
 8005474:	e010      	b.n	8005498 <_printf_common+0xac>
 8005476:	3501      	adds	r5, #1
 8005478:	68e3      	ldr	r3, [r4, #12]
 800547a:	6832      	ldr	r2, [r6, #0]
 800547c:	1a9b      	subs	r3, r3, r2
 800547e:	42ab      	cmp	r3, r5
 8005480:	ddd2      	ble.n	8005428 <_printf_common+0x3c>
 8005482:	0022      	movs	r2, r4
 8005484:	2301      	movs	r3, #1
 8005486:	9901      	ldr	r1, [sp, #4]
 8005488:	9800      	ldr	r0, [sp, #0]
 800548a:	9f08      	ldr	r7, [sp, #32]
 800548c:	3219      	adds	r2, #25
 800548e:	47b8      	blx	r7
 8005490:	3001      	adds	r0, #1
 8005492:	d1f0      	bne.n	8005476 <_printf_common+0x8a>
 8005494:	2001      	movs	r0, #1
 8005496:	4240      	negs	r0, r0
 8005498:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800549a:	2030      	movs	r0, #48	; 0x30
 800549c:	18e1      	adds	r1, r4, r3
 800549e:	3143      	adds	r1, #67	; 0x43
 80054a0:	7008      	strb	r0, [r1, #0]
 80054a2:	0021      	movs	r1, r4
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	3145      	adds	r1, #69	; 0x45
 80054a8:	7809      	ldrb	r1, [r1, #0]
 80054aa:	18a2      	adds	r2, r4, r2
 80054ac:	3243      	adds	r2, #67	; 0x43
 80054ae:	3302      	adds	r3, #2
 80054b0:	7011      	strb	r1, [r2, #0]
 80054b2:	e7c1      	b.n	8005438 <_printf_common+0x4c>
 80054b4:	0022      	movs	r2, r4
 80054b6:	2301      	movs	r3, #1
 80054b8:	9901      	ldr	r1, [sp, #4]
 80054ba:	9800      	ldr	r0, [sp, #0]
 80054bc:	9f08      	ldr	r7, [sp, #32]
 80054be:	321a      	adds	r2, #26
 80054c0:	47b8      	blx	r7
 80054c2:	3001      	adds	r0, #1
 80054c4:	d0e6      	beq.n	8005494 <_printf_common+0xa8>
 80054c6:	3601      	adds	r6, #1
 80054c8:	e7d1      	b.n	800546e <_printf_common+0x82>
	...

080054cc <_printf_i>:
 80054cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ce:	b08b      	sub	sp, #44	; 0x2c
 80054d0:	9206      	str	r2, [sp, #24]
 80054d2:	000a      	movs	r2, r1
 80054d4:	3243      	adds	r2, #67	; 0x43
 80054d6:	9307      	str	r3, [sp, #28]
 80054d8:	9005      	str	r0, [sp, #20]
 80054da:	9204      	str	r2, [sp, #16]
 80054dc:	7e0a      	ldrb	r2, [r1, #24]
 80054de:	000c      	movs	r4, r1
 80054e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80054e2:	2a78      	cmp	r2, #120	; 0x78
 80054e4:	d809      	bhi.n	80054fa <_printf_i+0x2e>
 80054e6:	2a62      	cmp	r2, #98	; 0x62
 80054e8:	d80b      	bhi.n	8005502 <_printf_i+0x36>
 80054ea:	2a00      	cmp	r2, #0
 80054ec:	d100      	bne.n	80054f0 <_printf_i+0x24>
 80054ee:	e0be      	b.n	800566e <_printf_i+0x1a2>
 80054f0:	497c      	ldr	r1, [pc, #496]	; (80056e4 <_printf_i+0x218>)
 80054f2:	9103      	str	r1, [sp, #12]
 80054f4:	2a58      	cmp	r2, #88	; 0x58
 80054f6:	d100      	bne.n	80054fa <_printf_i+0x2e>
 80054f8:	e093      	b.n	8005622 <_printf_i+0x156>
 80054fa:	0026      	movs	r6, r4
 80054fc:	3642      	adds	r6, #66	; 0x42
 80054fe:	7032      	strb	r2, [r6, #0]
 8005500:	e022      	b.n	8005548 <_printf_i+0x7c>
 8005502:	0010      	movs	r0, r2
 8005504:	3863      	subs	r0, #99	; 0x63
 8005506:	2815      	cmp	r0, #21
 8005508:	d8f7      	bhi.n	80054fa <_printf_i+0x2e>
 800550a:	f7fa fdf9 	bl	8000100 <__gnu_thumb1_case_shi>
 800550e:	0016      	.short	0x0016
 8005510:	fff6001f 	.word	0xfff6001f
 8005514:	fff6fff6 	.word	0xfff6fff6
 8005518:	001ffff6 	.word	0x001ffff6
 800551c:	fff6fff6 	.word	0xfff6fff6
 8005520:	fff6fff6 	.word	0xfff6fff6
 8005524:	003600a3 	.word	0x003600a3
 8005528:	fff60083 	.word	0xfff60083
 800552c:	00b4fff6 	.word	0x00b4fff6
 8005530:	0036fff6 	.word	0x0036fff6
 8005534:	fff6fff6 	.word	0xfff6fff6
 8005538:	0087      	.short	0x0087
 800553a:	0026      	movs	r6, r4
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	3642      	adds	r6, #66	; 0x42
 8005540:	1d11      	adds	r1, r2, #4
 8005542:	6019      	str	r1, [r3, #0]
 8005544:	6813      	ldr	r3, [r2, #0]
 8005546:	7033      	strb	r3, [r6, #0]
 8005548:	2301      	movs	r3, #1
 800554a:	e0a2      	b.n	8005692 <_printf_i+0x1c6>
 800554c:	6818      	ldr	r0, [r3, #0]
 800554e:	6809      	ldr	r1, [r1, #0]
 8005550:	1d02      	adds	r2, r0, #4
 8005552:	060d      	lsls	r5, r1, #24
 8005554:	d50b      	bpl.n	800556e <_printf_i+0xa2>
 8005556:	6805      	ldr	r5, [r0, #0]
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	2d00      	cmp	r5, #0
 800555c:	da03      	bge.n	8005566 <_printf_i+0x9a>
 800555e:	232d      	movs	r3, #45	; 0x2d
 8005560:	9a04      	ldr	r2, [sp, #16]
 8005562:	426d      	negs	r5, r5
 8005564:	7013      	strb	r3, [r2, #0]
 8005566:	4b5f      	ldr	r3, [pc, #380]	; (80056e4 <_printf_i+0x218>)
 8005568:	270a      	movs	r7, #10
 800556a:	9303      	str	r3, [sp, #12]
 800556c:	e01b      	b.n	80055a6 <_printf_i+0xda>
 800556e:	6805      	ldr	r5, [r0, #0]
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	0649      	lsls	r1, r1, #25
 8005574:	d5f1      	bpl.n	800555a <_printf_i+0x8e>
 8005576:	b22d      	sxth	r5, r5
 8005578:	e7ef      	b.n	800555a <_printf_i+0x8e>
 800557a:	680d      	ldr	r5, [r1, #0]
 800557c:	6819      	ldr	r1, [r3, #0]
 800557e:	1d08      	adds	r0, r1, #4
 8005580:	6018      	str	r0, [r3, #0]
 8005582:	062e      	lsls	r6, r5, #24
 8005584:	d501      	bpl.n	800558a <_printf_i+0xbe>
 8005586:	680d      	ldr	r5, [r1, #0]
 8005588:	e003      	b.n	8005592 <_printf_i+0xc6>
 800558a:	066d      	lsls	r5, r5, #25
 800558c:	d5fb      	bpl.n	8005586 <_printf_i+0xba>
 800558e:	680d      	ldr	r5, [r1, #0]
 8005590:	b2ad      	uxth	r5, r5
 8005592:	4b54      	ldr	r3, [pc, #336]	; (80056e4 <_printf_i+0x218>)
 8005594:	2708      	movs	r7, #8
 8005596:	9303      	str	r3, [sp, #12]
 8005598:	2a6f      	cmp	r2, #111	; 0x6f
 800559a:	d000      	beq.n	800559e <_printf_i+0xd2>
 800559c:	3702      	adds	r7, #2
 800559e:	0023      	movs	r3, r4
 80055a0:	2200      	movs	r2, #0
 80055a2:	3343      	adds	r3, #67	; 0x43
 80055a4:	701a      	strb	r2, [r3, #0]
 80055a6:	6863      	ldr	r3, [r4, #4]
 80055a8:	60a3      	str	r3, [r4, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	db03      	blt.n	80055b6 <_printf_i+0xea>
 80055ae:	2104      	movs	r1, #4
 80055b0:	6822      	ldr	r2, [r4, #0]
 80055b2:	438a      	bics	r2, r1
 80055b4:	6022      	str	r2, [r4, #0]
 80055b6:	2d00      	cmp	r5, #0
 80055b8:	d102      	bne.n	80055c0 <_printf_i+0xf4>
 80055ba:	9e04      	ldr	r6, [sp, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00c      	beq.n	80055da <_printf_i+0x10e>
 80055c0:	9e04      	ldr	r6, [sp, #16]
 80055c2:	0028      	movs	r0, r5
 80055c4:	0039      	movs	r1, r7
 80055c6:	f7fa fe2b 	bl	8000220 <__aeabi_uidivmod>
 80055ca:	9b03      	ldr	r3, [sp, #12]
 80055cc:	3e01      	subs	r6, #1
 80055ce:	5c5b      	ldrb	r3, [r3, r1]
 80055d0:	7033      	strb	r3, [r6, #0]
 80055d2:	002b      	movs	r3, r5
 80055d4:	0005      	movs	r5, r0
 80055d6:	429f      	cmp	r7, r3
 80055d8:	d9f3      	bls.n	80055c2 <_printf_i+0xf6>
 80055da:	2f08      	cmp	r7, #8
 80055dc:	d109      	bne.n	80055f2 <_printf_i+0x126>
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	07db      	lsls	r3, r3, #31
 80055e2:	d506      	bpl.n	80055f2 <_printf_i+0x126>
 80055e4:	6862      	ldr	r2, [r4, #4]
 80055e6:	6923      	ldr	r3, [r4, #16]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	dc02      	bgt.n	80055f2 <_printf_i+0x126>
 80055ec:	2330      	movs	r3, #48	; 0x30
 80055ee:	3e01      	subs	r6, #1
 80055f0:	7033      	strb	r3, [r6, #0]
 80055f2:	9b04      	ldr	r3, [sp, #16]
 80055f4:	1b9b      	subs	r3, r3, r6
 80055f6:	6123      	str	r3, [r4, #16]
 80055f8:	9b07      	ldr	r3, [sp, #28]
 80055fa:	0021      	movs	r1, r4
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	9805      	ldr	r0, [sp, #20]
 8005600:	9b06      	ldr	r3, [sp, #24]
 8005602:	aa09      	add	r2, sp, #36	; 0x24
 8005604:	f7ff fef2 	bl	80053ec <_printf_common>
 8005608:	3001      	adds	r0, #1
 800560a:	d147      	bne.n	800569c <_printf_i+0x1d0>
 800560c:	2001      	movs	r0, #1
 800560e:	4240      	negs	r0, r0
 8005610:	b00b      	add	sp, #44	; 0x2c
 8005612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005614:	2220      	movs	r2, #32
 8005616:	6809      	ldr	r1, [r1, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	6022      	str	r2, [r4, #0]
 800561c:	2278      	movs	r2, #120	; 0x78
 800561e:	4932      	ldr	r1, [pc, #200]	; (80056e8 <_printf_i+0x21c>)
 8005620:	9103      	str	r1, [sp, #12]
 8005622:	0021      	movs	r1, r4
 8005624:	3145      	adds	r1, #69	; 0x45
 8005626:	700a      	strb	r2, [r1, #0]
 8005628:	6819      	ldr	r1, [r3, #0]
 800562a:	6822      	ldr	r2, [r4, #0]
 800562c:	c920      	ldmia	r1!, {r5}
 800562e:	0610      	lsls	r0, r2, #24
 8005630:	d402      	bmi.n	8005638 <_printf_i+0x16c>
 8005632:	0650      	lsls	r0, r2, #25
 8005634:	d500      	bpl.n	8005638 <_printf_i+0x16c>
 8005636:	b2ad      	uxth	r5, r5
 8005638:	6019      	str	r1, [r3, #0]
 800563a:	07d3      	lsls	r3, r2, #31
 800563c:	d502      	bpl.n	8005644 <_printf_i+0x178>
 800563e:	2320      	movs	r3, #32
 8005640:	4313      	orrs	r3, r2
 8005642:	6023      	str	r3, [r4, #0]
 8005644:	2710      	movs	r7, #16
 8005646:	2d00      	cmp	r5, #0
 8005648:	d1a9      	bne.n	800559e <_printf_i+0xd2>
 800564a:	2220      	movs	r2, #32
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	4393      	bics	r3, r2
 8005650:	6023      	str	r3, [r4, #0]
 8005652:	e7a4      	b.n	800559e <_printf_i+0xd2>
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	680d      	ldr	r5, [r1, #0]
 8005658:	1d10      	adds	r0, r2, #4
 800565a:	6949      	ldr	r1, [r1, #20]
 800565c:	6018      	str	r0, [r3, #0]
 800565e:	6813      	ldr	r3, [r2, #0]
 8005660:	062e      	lsls	r6, r5, #24
 8005662:	d501      	bpl.n	8005668 <_printf_i+0x19c>
 8005664:	6019      	str	r1, [r3, #0]
 8005666:	e002      	b.n	800566e <_printf_i+0x1a2>
 8005668:	066d      	lsls	r5, r5, #25
 800566a:	d5fb      	bpl.n	8005664 <_printf_i+0x198>
 800566c:	8019      	strh	r1, [r3, #0]
 800566e:	2300      	movs	r3, #0
 8005670:	9e04      	ldr	r6, [sp, #16]
 8005672:	6123      	str	r3, [r4, #16]
 8005674:	e7c0      	b.n	80055f8 <_printf_i+0x12c>
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	1d11      	adds	r1, r2, #4
 800567a:	6019      	str	r1, [r3, #0]
 800567c:	6816      	ldr	r6, [r2, #0]
 800567e:	2100      	movs	r1, #0
 8005680:	0030      	movs	r0, r6
 8005682:	6862      	ldr	r2, [r4, #4]
 8005684:	f000 f9a0 	bl	80059c8 <memchr>
 8005688:	2800      	cmp	r0, #0
 800568a:	d001      	beq.n	8005690 <_printf_i+0x1c4>
 800568c:	1b80      	subs	r0, r0, r6
 800568e:	6060      	str	r0, [r4, #4]
 8005690:	6863      	ldr	r3, [r4, #4]
 8005692:	6123      	str	r3, [r4, #16]
 8005694:	2300      	movs	r3, #0
 8005696:	9a04      	ldr	r2, [sp, #16]
 8005698:	7013      	strb	r3, [r2, #0]
 800569a:	e7ad      	b.n	80055f8 <_printf_i+0x12c>
 800569c:	0032      	movs	r2, r6
 800569e:	6923      	ldr	r3, [r4, #16]
 80056a0:	9906      	ldr	r1, [sp, #24]
 80056a2:	9805      	ldr	r0, [sp, #20]
 80056a4:	9d07      	ldr	r5, [sp, #28]
 80056a6:	47a8      	blx	r5
 80056a8:	3001      	adds	r0, #1
 80056aa:	d0af      	beq.n	800560c <_printf_i+0x140>
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	079b      	lsls	r3, r3, #30
 80056b0:	d415      	bmi.n	80056de <_printf_i+0x212>
 80056b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056b4:	68e0      	ldr	r0, [r4, #12]
 80056b6:	4298      	cmp	r0, r3
 80056b8:	daaa      	bge.n	8005610 <_printf_i+0x144>
 80056ba:	0018      	movs	r0, r3
 80056bc:	e7a8      	b.n	8005610 <_printf_i+0x144>
 80056be:	0022      	movs	r2, r4
 80056c0:	2301      	movs	r3, #1
 80056c2:	9906      	ldr	r1, [sp, #24]
 80056c4:	9805      	ldr	r0, [sp, #20]
 80056c6:	9e07      	ldr	r6, [sp, #28]
 80056c8:	3219      	adds	r2, #25
 80056ca:	47b0      	blx	r6
 80056cc:	3001      	adds	r0, #1
 80056ce:	d09d      	beq.n	800560c <_printf_i+0x140>
 80056d0:	3501      	adds	r5, #1
 80056d2:	68e3      	ldr	r3, [r4, #12]
 80056d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056d6:	1a9b      	subs	r3, r3, r2
 80056d8:	42ab      	cmp	r3, r5
 80056da:	dcf0      	bgt.n	80056be <_printf_i+0x1f2>
 80056dc:	e7e9      	b.n	80056b2 <_printf_i+0x1e6>
 80056de:	2500      	movs	r5, #0
 80056e0:	e7f7      	b.n	80056d2 <_printf_i+0x206>
 80056e2:	46c0      	nop			; (mov r8, r8)
 80056e4:	08005c01 	.word	0x08005c01
 80056e8:	08005c12 	.word	0x08005c12

080056ec <__sflush_r>:
 80056ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056ee:	898b      	ldrh	r3, [r1, #12]
 80056f0:	0005      	movs	r5, r0
 80056f2:	000c      	movs	r4, r1
 80056f4:	071a      	lsls	r2, r3, #28
 80056f6:	d45c      	bmi.n	80057b2 <__sflush_r+0xc6>
 80056f8:	684a      	ldr	r2, [r1, #4]
 80056fa:	2a00      	cmp	r2, #0
 80056fc:	dc04      	bgt.n	8005708 <__sflush_r+0x1c>
 80056fe:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005700:	2a00      	cmp	r2, #0
 8005702:	dc01      	bgt.n	8005708 <__sflush_r+0x1c>
 8005704:	2000      	movs	r0, #0
 8005706:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005708:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800570a:	2f00      	cmp	r7, #0
 800570c:	d0fa      	beq.n	8005704 <__sflush_r+0x18>
 800570e:	2200      	movs	r2, #0
 8005710:	2080      	movs	r0, #128	; 0x80
 8005712:	682e      	ldr	r6, [r5, #0]
 8005714:	602a      	str	r2, [r5, #0]
 8005716:	001a      	movs	r2, r3
 8005718:	0140      	lsls	r0, r0, #5
 800571a:	6a21      	ldr	r1, [r4, #32]
 800571c:	4002      	ands	r2, r0
 800571e:	4203      	tst	r3, r0
 8005720:	d034      	beq.n	800578c <__sflush_r+0xa0>
 8005722:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005724:	89a3      	ldrh	r3, [r4, #12]
 8005726:	075b      	lsls	r3, r3, #29
 8005728:	d506      	bpl.n	8005738 <__sflush_r+0x4c>
 800572a:	6863      	ldr	r3, [r4, #4]
 800572c:	1ac0      	subs	r0, r0, r3
 800572e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <__sflush_r+0x4c>
 8005734:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005736:	1ac0      	subs	r0, r0, r3
 8005738:	0002      	movs	r2, r0
 800573a:	2300      	movs	r3, #0
 800573c:	0028      	movs	r0, r5
 800573e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005740:	6a21      	ldr	r1, [r4, #32]
 8005742:	47b8      	blx	r7
 8005744:	89a2      	ldrh	r2, [r4, #12]
 8005746:	1c43      	adds	r3, r0, #1
 8005748:	d106      	bne.n	8005758 <__sflush_r+0x6c>
 800574a:	6829      	ldr	r1, [r5, #0]
 800574c:	291d      	cmp	r1, #29
 800574e:	d82c      	bhi.n	80057aa <__sflush_r+0xbe>
 8005750:	4b2a      	ldr	r3, [pc, #168]	; (80057fc <__sflush_r+0x110>)
 8005752:	410b      	asrs	r3, r1
 8005754:	07db      	lsls	r3, r3, #31
 8005756:	d428      	bmi.n	80057aa <__sflush_r+0xbe>
 8005758:	2300      	movs	r3, #0
 800575a:	6063      	str	r3, [r4, #4]
 800575c:	6923      	ldr	r3, [r4, #16]
 800575e:	6023      	str	r3, [r4, #0]
 8005760:	04d2      	lsls	r2, r2, #19
 8005762:	d505      	bpl.n	8005770 <__sflush_r+0x84>
 8005764:	1c43      	adds	r3, r0, #1
 8005766:	d102      	bne.n	800576e <__sflush_r+0x82>
 8005768:	682b      	ldr	r3, [r5, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d100      	bne.n	8005770 <__sflush_r+0x84>
 800576e:	6560      	str	r0, [r4, #84]	; 0x54
 8005770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005772:	602e      	str	r6, [r5, #0]
 8005774:	2900      	cmp	r1, #0
 8005776:	d0c5      	beq.n	8005704 <__sflush_r+0x18>
 8005778:	0023      	movs	r3, r4
 800577a:	3344      	adds	r3, #68	; 0x44
 800577c:	4299      	cmp	r1, r3
 800577e:	d002      	beq.n	8005786 <__sflush_r+0x9a>
 8005780:	0028      	movs	r0, r5
 8005782:	f7ff fbf1 	bl	8004f68 <_free_r>
 8005786:	2000      	movs	r0, #0
 8005788:	6360      	str	r0, [r4, #52]	; 0x34
 800578a:	e7bc      	b.n	8005706 <__sflush_r+0x1a>
 800578c:	2301      	movs	r3, #1
 800578e:	0028      	movs	r0, r5
 8005790:	47b8      	blx	r7
 8005792:	1c43      	adds	r3, r0, #1
 8005794:	d1c6      	bne.n	8005724 <__sflush_r+0x38>
 8005796:	682b      	ldr	r3, [r5, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0c3      	beq.n	8005724 <__sflush_r+0x38>
 800579c:	2b1d      	cmp	r3, #29
 800579e:	d001      	beq.n	80057a4 <__sflush_r+0xb8>
 80057a0:	2b16      	cmp	r3, #22
 80057a2:	d101      	bne.n	80057a8 <__sflush_r+0xbc>
 80057a4:	602e      	str	r6, [r5, #0]
 80057a6:	e7ad      	b.n	8005704 <__sflush_r+0x18>
 80057a8:	89a2      	ldrh	r2, [r4, #12]
 80057aa:	2340      	movs	r3, #64	; 0x40
 80057ac:	4313      	orrs	r3, r2
 80057ae:	81a3      	strh	r3, [r4, #12]
 80057b0:	e7a9      	b.n	8005706 <__sflush_r+0x1a>
 80057b2:	690e      	ldr	r6, [r1, #16]
 80057b4:	2e00      	cmp	r6, #0
 80057b6:	d0a5      	beq.n	8005704 <__sflush_r+0x18>
 80057b8:	680f      	ldr	r7, [r1, #0]
 80057ba:	600e      	str	r6, [r1, #0]
 80057bc:	1bba      	subs	r2, r7, r6
 80057be:	9201      	str	r2, [sp, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	079b      	lsls	r3, r3, #30
 80057c4:	d100      	bne.n	80057c8 <__sflush_r+0xdc>
 80057c6:	694a      	ldr	r2, [r1, #20]
 80057c8:	60a2      	str	r2, [r4, #8]
 80057ca:	9b01      	ldr	r3, [sp, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	dd99      	ble.n	8005704 <__sflush_r+0x18>
 80057d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80057d2:	0032      	movs	r2, r6
 80057d4:	001f      	movs	r7, r3
 80057d6:	0028      	movs	r0, r5
 80057d8:	9b01      	ldr	r3, [sp, #4]
 80057da:	6a21      	ldr	r1, [r4, #32]
 80057dc:	47b8      	blx	r7
 80057de:	2800      	cmp	r0, #0
 80057e0:	dc06      	bgt.n	80057f0 <__sflush_r+0x104>
 80057e2:	2340      	movs	r3, #64	; 0x40
 80057e4:	2001      	movs	r0, #1
 80057e6:	89a2      	ldrh	r2, [r4, #12]
 80057e8:	4240      	negs	r0, r0
 80057ea:	4313      	orrs	r3, r2
 80057ec:	81a3      	strh	r3, [r4, #12]
 80057ee:	e78a      	b.n	8005706 <__sflush_r+0x1a>
 80057f0:	9b01      	ldr	r3, [sp, #4]
 80057f2:	1836      	adds	r6, r6, r0
 80057f4:	1a1b      	subs	r3, r3, r0
 80057f6:	9301      	str	r3, [sp, #4]
 80057f8:	e7e7      	b.n	80057ca <__sflush_r+0xde>
 80057fa:	46c0      	nop			; (mov r8, r8)
 80057fc:	dfbffffe 	.word	0xdfbffffe

08005800 <_fflush_r>:
 8005800:	690b      	ldr	r3, [r1, #16]
 8005802:	b570      	push	{r4, r5, r6, lr}
 8005804:	0005      	movs	r5, r0
 8005806:	000c      	movs	r4, r1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d102      	bne.n	8005812 <_fflush_r+0x12>
 800580c:	2500      	movs	r5, #0
 800580e:	0028      	movs	r0, r5
 8005810:	bd70      	pop	{r4, r5, r6, pc}
 8005812:	2800      	cmp	r0, #0
 8005814:	d004      	beq.n	8005820 <_fflush_r+0x20>
 8005816:	6a03      	ldr	r3, [r0, #32]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <_fflush_r+0x20>
 800581c:	f7ff fa92 	bl	8004d44 <__sinit>
 8005820:	220c      	movs	r2, #12
 8005822:	5ea3      	ldrsh	r3, [r4, r2]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0f1      	beq.n	800580c <_fflush_r+0xc>
 8005828:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800582a:	07d2      	lsls	r2, r2, #31
 800582c:	d404      	bmi.n	8005838 <_fflush_r+0x38>
 800582e:	059b      	lsls	r3, r3, #22
 8005830:	d402      	bmi.n	8005838 <_fflush_r+0x38>
 8005832:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005834:	f7ff fb96 	bl	8004f64 <__retarget_lock_acquire_recursive>
 8005838:	0028      	movs	r0, r5
 800583a:	0021      	movs	r1, r4
 800583c:	f7ff ff56 	bl	80056ec <__sflush_r>
 8005840:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005842:	0005      	movs	r5, r0
 8005844:	07db      	lsls	r3, r3, #31
 8005846:	d4e2      	bmi.n	800580e <_fflush_r+0xe>
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	059b      	lsls	r3, r3, #22
 800584c:	d4df      	bmi.n	800580e <_fflush_r+0xe>
 800584e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005850:	f7ff fb89 	bl	8004f66 <__retarget_lock_release_recursive>
 8005854:	e7db      	b.n	800580e <_fflush_r+0xe>

08005856 <__swbuf_r>:
 8005856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005858:	0006      	movs	r6, r0
 800585a:	000d      	movs	r5, r1
 800585c:	0014      	movs	r4, r2
 800585e:	2800      	cmp	r0, #0
 8005860:	d004      	beq.n	800586c <__swbuf_r+0x16>
 8005862:	6a03      	ldr	r3, [r0, #32]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <__swbuf_r+0x16>
 8005868:	f7ff fa6c 	bl	8004d44 <__sinit>
 800586c:	69a3      	ldr	r3, [r4, #24]
 800586e:	60a3      	str	r3, [r4, #8]
 8005870:	89a3      	ldrh	r3, [r4, #12]
 8005872:	071b      	lsls	r3, r3, #28
 8005874:	d528      	bpl.n	80058c8 <__swbuf_r+0x72>
 8005876:	6923      	ldr	r3, [r4, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d025      	beq.n	80058c8 <__swbuf_r+0x72>
 800587c:	6923      	ldr	r3, [r4, #16]
 800587e:	6820      	ldr	r0, [r4, #0]
 8005880:	b2ef      	uxtb	r7, r5
 8005882:	1ac0      	subs	r0, r0, r3
 8005884:	6963      	ldr	r3, [r4, #20]
 8005886:	b2ed      	uxtb	r5, r5
 8005888:	4283      	cmp	r3, r0
 800588a:	dc05      	bgt.n	8005898 <__swbuf_r+0x42>
 800588c:	0021      	movs	r1, r4
 800588e:	0030      	movs	r0, r6
 8005890:	f7ff ffb6 	bl	8005800 <_fflush_r>
 8005894:	2800      	cmp	r0, #0
 8005896:	d11d      	bne.n	80058d4 <__swbuf_r+0x7e>
 8005898:	68a3      	ldr	r3, [r4, #8]
 800589a:	3001      	adds	r0, #1
 800589c:	3b01      	subs	r3, #1
 800589e:	60a3      	str	r3, [r4, #8]
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	6022      	str	r2, [r4, #0]
 80058a6:	701f      	strb	r7, [r3, #0]
 80058a8:	6963      	ldr	r3, [r4, #20]
 80058aa:	4283      	cmp	r3, r0
 80058ac:	d004      	beq.n	80058b8 <__swbuf_r+0x62>
 80058ae:	89a3      	ldrh	r3, [r4, #12]
 80058b0:	07db      	lsls	r3, r3, #31
 80058b2:	d507      	bpl.n	80058c4 <__swbuf_r+0x6e>
 80058b4:	2d0a      	cmp	r5, #10
 80058b6:	d105      	bne.n	80058c4 <__swbuf_r+0x6e>
 80058b8:	0021      	movs	r1, r4
 80058ba:	0030      	movs	r0, r6
 80058bc:	f7ff ffa0 	bl	8005800 <_fflush_r>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d107      	bne.n	80058d4 <__swbuf_r+0x7e>
 80058c4:	0028      	movs	r0, r5
 80058c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058c8:	0021      	movs	r1, r4
 80058ca:	0030      	movs	r0, r6
 80058cc:	f000 f806 	bl	80058dc <__swsetup_r>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	d0d3      	beq.n	800587c <__swbuf_r+0x26>
 80058d4:	2501      	movs	r5, #1
 80058d6:	426d      	negs	r5, r5
 80058d8:	e7f4      	b.n	80058c4 <__swbuf_r+0x6e>
	...

080058dc <__swsetup_r>:
 80058dc:	4b30      	ldr	r3, [pc, #192]	; (80059a0 <__swsetup_r+0xc4>)
 80058de:	b570      	push	{r4, r5, r6, lr}
 80058e0:	0005      	movs	r5, r0
 80058e2:	6818      	ldr	r0, [r3, #0]
 80058e4:	000c      	movs	r4, r1
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d004      	beq.n	80058f4 <__swsetup_r+0x18>
 80058ea:	6a03      	ldr	r3, [r0, #32]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <__swsetup_r+0x18>
 80058f0:	f7ff fa28 	bl	8004d44 <__sinit>
 80058f4:	230c      	movs	r3, #12
 80058f6:	5ee2      	ldrsh	r2, [r4, r3]
 80058f8:	b293      	uxth	r3, r2
 80058fa:	0711      	lsls	r1, r2, #28
 80058fc:	d423      	bmi.n	8005946 <__swsetup_r+0x6a>
 80058fe:	06d9      	lsls	r1, r3, #27
 8005900:	d407      	bmi.n	8005912 <__swsetup_r+0x36>
 8005902:	2309      	movs	r3, #9
 8005904:	2001      	movs	r0, #1
 8005906:	602b      	str	r3, [r5, #0]
 8005908:	3337      	adds	r3, #55	; 0x37
 800590a:	4313      	orrs	r3, r2
 800590c:	81a3      	strh	r3, [r4, #12]
 800590e:	4240      	negs	r0, r0
 8005910:	bd70      	pop	{r4, r5, r6, pc}
 8005912:	075b      	lsls	r3, r3, #29
 8005914:	d513      	bpl.n	800593e <__swsetup_r+0x62>
 8005916:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005918:	2900      	cmp	r1, #0
 800591a:	d008      	beq.n	800592e <__swsetup_r+0x52>
 800591c:	0023      	movs	r3, r4
 800591e:	3344      	adds	r3, #68	; 0x44
 8005920:	4299      	cmp	r1, r3
 8005922:	d002      	beq.n	800592a <__swsetup_r+0x4e>
 8005924:	0028      	movs	r0, r5
 8005926:	f7ff fb1f 	bl	8004f68 <_free_r>
 800592a:	2300      	movs	r3, #0
 800592c:	6363      	str	r3, [r4, #52]	; 0x34
 800592e:	2224      	movs	r2, #36	; 0x24
 8005930:	89a3      	ldrh	r3, [r4, #12]
 8005932:	4393      	bics	r3, r2
 8005934:	81a3      	strh	r3, [r4, #12]
 8005936:	2300      	movs	r3, #0
 8005938:	6063      	str	r3, [r4, #4]
 800593a:	6923      	ldr	r3, [r4, #16]
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	2308      	movs	r3, #8
 8005940:	89a2      	ldrh	r2, [r4, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	81a3      	strh	r3, [r4, #12]
 8005946:	6923      	ldr	r3, [r4, #16]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10b      	bne.n	8005964 <__swsetup_r+0x88>
 800594c:	21a0      	movs	r1, #160	; 0xa0
 800594e:	2280      	movs	r2, #128	; 0x80
 8005950:	89a3      	ldrh	r3, [r4, #12]
 8005952:	0089      	lsls	r1, r1, #2
 8005954:	0092      	lsls	r2, r2, #2
 8005956:	400b      	ands	r3, r1
 8005958:	4293      	cmp	r3, r2
 800595a:	d003      	beq.n	8005964 <__swsetup_r+0x88>
 800595c:	0021      	movs	r1, r4
 800595e:	0028      	movs	r0, r5
 8005960:	f000 f866 	bl	8005a30 <__smakebuf_r>
 8005964:	220c      	movs	r2, #12
 8005966:	5ea3      	ldrsh	r3, [r4, r2]
 8005968:	2001      	movs	r0, #1
 800596a:	001a      	movs	r2, r3
 800596c:	b299      	uxth	r1, r3
 800596e:	4002      	ands	r2, r0
 8005970:	4203      	tst	r3, r0
 8005972:	d00f      	beq.n	8005994 <__swsetup_r+0xb8>
 8005974:	2200      	movs	r2, #0
 8005976:	60a2      	str	r2, [r4, #8]
 8005978:	6962      	ldr	r2, [r4, #20]
 800597a:	4252      	negs	r2, r2
 800597c:	61a2      	str	r2, [r4, #24]
 800597e:	2000      	movs	r0, #0
 8005980:	6922      	ldr	r2, [r4, #16]
 8005982:	4282      	cmp	r2, r0
 8005984:	d1c4      	bne.n	8005910 <__swsetup_r+0x34>
 8005986:	0609      	lsls	r1, r1, #24
 8005988:	d5c2      	bpl.n	8005910 <__swsetup_r+0x34>
 800598a:	2240      	movs	r2, #64	; 0x40
 800598c:	4313      	orrs	r3, r2
 800598e:	81a3      	strh	r3, [r4, #12]
 8005990:	3801      	subs	r0, #1
 8005992:	e7bd      	b.n	8005910 <__swsetup_r+0x34>
 8005994:	0788      	lsls	r0, r1, #30
 8005996:	d400      	bmi.n	800599a <__swsetup_r+0xbe>
 8005998:	6962      	ldr	r2, [r4, #20]
 800599a:	60a2      	str	r2, [r4, #8]
 800599c:	e7ef      	b.n	800597e <__swsetup_r+0xa2>
 800599e:	46c0      	nop			; (mov r8, r8)
 80059a0:	20000064 	.word	0x20000064

080059a4 <_sbrk_r>:
 80059a4:	2300      	movs	r3, #0
 80059a6:	b570      	push	{r4, r5, r6, lr}
 80059a8:	4d06      	ldr	r5, [pc, #24]	; (80059c4 <_sbrk_r+0x20>)
 80059aa:	0004      	movs	r4, r0
 80059ac:	0008      	movs	r0, r1
 80059ae:	602b      	str	r3, [r5, #0]
 80059b0:	f7fa ff9a 	bl	80008e8 <_sbrk>
 80059b4:	1c43      	adds	r3, r0, #1
 80059b6:	d103      	bne.n	80059c0 <_sbrk_r+0x1c>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d000      	beq.n	80059c0 <_sbrk_r+0x1c>
 80059be:	6023      	str	r3, [r4, #0]
 80059c0:	bd70      	pop	{r4, r5, r6, pc}
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	2000051c 	.word	0x2000051c

080059c8 <memchr>:
 80059c8:	b2c9      	uxtb	r1, r1
 80059ca:	1882      	adds	r2, r0, r2
 80059cc:	4290      	cmp	r0, r2
 80059ce:	d101      	bne.n	80059d4 <memchr+0xc>
 80059d0:	2000      	movs	r0, #0
 80059d2:	4770      	bx	lr
 80059d4:	7803      	ldrb	r3, [r0, #0]
 80059d6:	428b      	cmp	r3, r1
 80059d8:	d0fb      	beq.n	80059d2 <memchr+0xa>
 80059da:	3001      	adds	r0, #1
 80059dc:	e7f6      	b.n	80059cc <memchr+0x4>
	...

080059e0 <__swhatbuf_r>:
 80059e0:	b570      	push	{r4, r5, r6, lr}
 80059e2:	000e      	movs	r6, r1
 80059e4:	001d      	movs	r5, r3
 80059e6:	230e      	movs	r3, #14
 80059e8:	5ec9      	ldrsh	r1, [r1, r3]
 80059ea:	0014      	movs	r4, r2
 80059ec:	b096      	sub	sp, #88	; 0x58
 80059ee:	2900      	cmp	r1, #0
 80059f0:	da0c      	bge.n	8005a0c <__swhatbuf_r+0x2c>
 80059f2:	89b2      	ldrh	r2, [r6, #12]
 80059f4:	2380      	movs	r3, #128	; 0x80
 80059f6:	0011      	movs	r1, r2
 80059f8:	4019      	ands	r1, r3
 80059fa:	421a      	tst	r2, r3
 80059fc:	d013      	beq.n	8005a26 <__swhatbuf_r+0x46>
 80059fe:	2100      	movs	r1, #0
 8005a00:	3b40      	subs	r3, #64	; 0x40
 8005a02:	2000      	movs	r0, #0
 8005a04:	6029      	str	r1, [r5, #0]
 8005a06:	6023      	str	r3, [r4, #0]
 8005a08:	b016      	add	sp, #88	; 0x58
 8005a0a:	bd70      	pop	{r4, r5, r6, pc}
 8005a0c:	466a      	mov	r2, sp
 8005a0e:	f000 f84d 	bl	8005aac <_fstat_r>
 8005a12:	2800      	cmp	r0, #0
 8005a14:	dbed      	blt.n	80059f2 <__swhatbuf_r+0x12>
 8005a16:	23f0      	movs	r3, #240	; 0xf0
 8005a18:	9901      	ldr	r1, [sp, #4]
 8005a1a:	021b      	lsls	r3, r3, #8
 8005a1c:	4019      	ands	r1, r3
 8005a1e:	4b03      	ldr	r3, [pc, #12]	; (8005a2c <__swhatbuf_r+0x4c>)
 8005a20:	18c9      	adds	r1, r1, r3
 8005a22:	424b      	negs	r3, r1
 8005a24:	4159      	adcs	r1, r3
 8005a26:	2380      	movs	r3, #128	; 0x80
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	e7ea      	b.n	8005a02 <__swhatbuf_r+0x22>
 8005a2c:	ffffe000 	.word	0xffffe000

08005a30 <__smakebuf_r>:
 8005a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a32:	2602      	movs	r6, #2
 8005a34:	898b      	ldrh	r3, [r1, #12]
 8005a36:	0005      	movs	r5, r0
 8005a38:	000c      	movs	r4, r1
 8005a3a:	4233      	tst	r3, r6
 8005a3c:	d006      	beq.n	8005a4c <__smakebuf_r+0x1c>
 8005a3e:	0023      	movs	r3, r4
 8005a40:	3347      	adds	r3, #71	; 0x47
 8005a42:	6023      	str	r3, [r4, #0]
 8005a44:	6123      	str	r3, [r4, #16]
 8005a46:	2301      	movs	r3, #1
 8005a48:	6163      	str	r3, [r4, #20]
 8005a4a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005a4c:	466a      	mov	r2, sp
 8005a4e:	ab01      	add	r3, sp, #4
 8005a50:	f7ff ffc6 	bl	80059e0 <__swhatbuf_r>
 8005a54:	9900      	ldr	r1, [sp, #0]
 8005a56:	0007      	movs	r7, r0
 8005a58:	0028      	movs	r0, r5
 8005a5a:	f7ff faf1 	bl	8005040 <_malloc_r>
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	d108      	bne.n	8005a74 <__smakebuf_r+0x44>
 8005a62:	220c      	movs	r2, #12
 8005a64:	5ea3      	ldrsh	r3, [r4, r2]
 8005a66:	059a      	lsls	r2, r3, #22
 8005a68:	d4ef      	bmi.n	8005a4a <__smakebuf_r+0x1a>
 8005a6a:	2203      	movs	r2, #3
 8005a6c:	4393      	bics	r3, r2
 8005a6e:	431e      	orrs	r6, r3
 8005a70:	81a6      	strh	r6, [r4, #12]
 8005a72:	e7e4      	b.n	8005a3e <__smakebuf_r+0xe>
 8005a74:	2380      	movs	r3, #128	; 0x80
 8005a76:	89a2      	ldrh	r2, [r4, #12]
 8005a78:	6020      	str	r0, [r4, #0]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	81a3      	strh	r3, [r4, #12]
 8005a7e:	9b00      	ldr	r3, [sp, #0]
 8005a80:	6120      	str	r0, [r4, #16]
 8005a82:	6163      	str	r3, [r4, #20]
 8005a84:	9b01      	ldr	r3, [sp, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00c      	beq.n	8005aa4 <__smakebuf_r+0x74>
 8005a8a:	0028      	movs	r0, r5
 8005a8c:	230e      	movs	r3, #14
 8005a8e:	5ee1      	ldrsh	r1, [r4, r3]
 8005a90:	f000 f81e 	bl	8005ad0 <_isatty_r>
 8005a94:	2800      	cmp	r0, #0
 8005a96:	d005      	beq.n	8005aa4 <__smakebuf_r+0x74>
 8005a98:	2303      	movs	r3, #3
 8005a9a:	89a2      	ldrh	r2, [r4, #12]
 8005a9c:	439a      	bics	r2, r3
 8005a9e:	3b02      	subs	r3, #2
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	81a3      	strh	r3, [r4, #12]
 8005aa4:	89a3      	ldrh	r3, [r4, #12]
 8005aa6:	433b      	orrs	r3, r7
 8005aa8:	81a3      	strh	r3, [r4, #12]
 8005aaa:	e7ce      	b.n	8005a4a <__smakebuf_r+0x1a>

08005aac <_fstat_r>:
 8005aac:	2300      	movs	r3, #0
 8005aae:	b570      	push	{r4, r5, r6, lr}
 8005ab0:	4d06      	ldr	r5, [pc, #24]	; (8005acc <_fstat_r+0x20>)
 8005ab2:	0004      	movs	r4, r0
 8005ab4:	0008      	movs	r0, r1
 8005ab6:	0011      	movs	r1, r2
 8005ab8:	602b      	str	r3, [r5, #0]
 8005aba:	f7fa fef3 	bl	80008a4 <_fstat>
 8005abe:	1c43      	adds	r3, r0, #1
 8005ac0:	d103      	bne.n	8005aca <_fstat_r+0x1e>
 8005ac2:	682b      	ldr	r3, [r5, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d000      	beq.n	8005aca <_fstat_r+0x1e>
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	bd70      	pop	{r4, r5, r6, pc}
 8005acc:	2000051c 	.word	0x2000051c

08005ad0 <_isatty_r>:
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	b570      	push	{r4, r5, r6, lr}
 8005ad4:	4d06      	ldr	r5, [pc, #24]	; (8005af0 <_isatty_r+0x20>)
 8005ad6:	0004      	movs	r4, r0
 8005ad8:	0008      	movs	r0, r1
 8005ada:	602b      	str	r3, [r5, #0]
 8005adc:	f7fa fef0 	bl	80008c0 <_isatty>
 8005ae0:	1c43      	adds	r3, r0, #1
 8005ae2:	d103      	bne.n	8005aec <_isatty_r+0x1c>
 8005ae4:	682b      	ldr	r3, [r5, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d000      	beq.n	8005aec <_isatty_r+0x1c>
 8005aea:	6023      	str	r3, [r4, #0]
 8005aec:	bd70      	pop	{r4, r5, r6, pc}
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	2000051c 	.word	0x2000051c

08005af4 <_init>:
 8005af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afa:	bc08      	pop	{r3}
 8005afc:	469e      	mov	lr, r3
 8005afe:	4770      	bx	lr

08005b00 <_fini>:
 8005b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b02:	46c0      	nop			; (mov r8, r8)
 8005b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b06:	bc08      	pop	{r3}
 8005b08:	469e      	mov	lr, r3
 8005b0a:	4770      	bx	lr
