
PROJET_ESE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007008  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  080070c8  080070c8  000170c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007208  08007208  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08007208  08007208  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007208  08007208  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007208  08007208  00017208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800720c  0800720c  0001720c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001280  2000006c  0800727c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012ec  0800727c  000212ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001869f  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e6a  00000000  00000000  00038776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f0  00000000  00000000  0003c5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010f1  00000000  00000000  0003dbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019c3f  00000000  00000000  0003ecc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b894  00000000  00000000  00058900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1d20  00000000  00000000  00074194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054ac  00000000  00000000  00115eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0011b360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080070b0 	.word	0x080070b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	080070b0 	.word	0x080070b0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <setPwmDutyCycle>:
 */

#include "pwm.h"

void setPwmDutyCycle(PWM *pwm, uint8_t duty_cycle)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	000a      	movs	r2, r1
 8000412:	1cfb      	adds	r3, r7, #3
 8000414:	701a      	strb	r2, [r3, #0]
	uint16_t duty_cycle16 = duty_cycle * MAX_DUTY_CYCLE_MOTOR / 100;
 8000416:	1cfb      	adds	r3, r7, #3
 8000418:	781a      	ldrb	r2, [r3, #0]
 800041a:	0013      	movs	r3, r2
 800041c:	009b      	lsls	r3, r3, #2
 800041e:	189b      	adds	r3, r3, r2
 8000420:	025b      	lsls	r3, r3, #9
 8000422:	2164      	movs	r1, #100	; 0x64
 8000424:	0018      	movs	r0, r3
 8000426:	f7ff ff03 	bl	8000230 <__divsi3>
 800042a:	0003      	movs	r3, r0
 800042c:	001a      	movs	r2, r3
 800042e:	210e      	movs	r1, #14
 8000430:	187b      	adds	r3, r7, r1
 8000432:	801a      	strh	r2, [r3, #0]

    if (duty_cycle16 < MIN_DUTY_CYCLE_MOTOR)
    {
    	duty_cycle16 = MIN_DUTY_CYCLE_MOTOR;
    }
    else if (duty_cycle16 > MAX_DUTY_CYCLE_MOTOR)
 8000434:	187b      	adds	r3, r7, r1
 8000436:	881a      	ldrh	r2, [r3, #0]
 8000438:	23a0      	movs	r3, #160	; 0xa0
 800043a:	011b      	lsls	r3, r3, #4
 800043c:	429a      	cmp	r2, r3
 800043e:	d903      	bls.n	8000448 <setPwmDutyCycle+0x40>
    {
    	duty_cycle16 = MAX_DUTY_CYCLE_MOTOR;
 8000440:	187b      	adds	r3, r7, r1
 8000442:	22a0      	movs	r2, #160	; 0xa0
 8000444:	0112      	lsls	r2, r2, #4
 8000446:	801a      	strh	r2, [r3, #0]
    }

    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, duty_cycle16);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d107      	bne.n	8000460 <setPwmDutyCycle+0x58>
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	220e      	movs	r2, #14
 8000458:	18ba      	adds	r2, r7, r2
 800045a:	8812      	ldrh	r2, [r2, #0]
 800045c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800045e:	e036      	b.n	80004ce <setPwmDutyCycle+0xc6>
    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, duty_cycle16);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	685b      	ldr	r3, [r3, #4]
 8000464:	2b04      	cmp	r3, #4
 8000466:	d107      	bne.n	8000478 <setPwmDutyCycle+0x70>
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	230e      	movs	r3, #14
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	881b      	ldrh	r3, [r3, #0]
 8000474:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000476:	e02a      	b.n	80004ce <setPwmDutyCycle+0xc6>
    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, duty_cycle16);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	2b08      	cmp	r3, #8
 800047e:	d107      	bne.n	8000490 <setPwmDutyCycle+0x88>
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	230e      	movs	r3, #14
 8000488:	18fb      	adds	r3, r7, r3
 800048a:	881b      	ldrh	r3, [r3, #0]
 800048c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800048e:	e01e      	b.n	80004ce <setPwmDutyCycle+0xc6>
    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, duty_cycle16);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	2b0c      	cmp	r3, #12
 8000496:	d107      	bne.n	80004a8 <setPwmDutyCycle+0xa0>
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	230e      	movs	r3, #14
 80004a0:	18fb      	adds	r3, r7, r3
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80004a6:	e012      	b.n	80004ce <setPwmDutyCycle+0xc6>
    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, duty_cycle16);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	2b10      	cmp	r3, #16
 80004ae:	d107      	bne.n	80004c0 <setPwmDutyCycle+0xb8>
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	230e      	movs	r3, #14
 80004b8:	18fb      	adds	r3, r7, r3
 80004ba:	881b      	ldrh	r3, [r3, #0]
 80004bc:	6593      	str	r3, [r2, #88]	; 0x58
}
 80004be:	e006      	b.n	80004ce <setPwmDutyCycle+0xc6>
    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, duty_cycle16);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	230e      	movs	r3, #14
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	881b      	ldrh	r3, [r3, #0]
 80004cc:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b004      	add	sp, #16
 80004d4:	bd80      	pop	{r7, pc}
	...

080004d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	0018      	movs	r0, r3
 80004e2:	230c      	movs	r3, #12
 80004e4:	001a      	movs	r2, r3
 80004e6:	2100      	movs	r1, #0
 80004e8:	f005 ff9a 	bl	8006420 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ec:	4b2d      	ldr	r3, [pc, #180]	; (80005a4 <MX_ADC1_Init+0xcc>)
 80004ee:	4a2e      	ldr	r2, [pc, #184]	; (80005a8 <MX_ADC1_Init+0xd0>)
 80004f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004f2:	4b2c      	ldr	r3, [pc, #176]	; (80005a4 <MX_ADC1_Init+0xcc>)
 80004f4:	2280      	movs	r2, #128	; 0x80
 80004f6:	05d2      	lsls	r2, r2, #23
 80004f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004fa:	4b2a      	ldr	r3, [pc, #168]	; (80005a4 <MX_ADC1_Init+0xcc>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000500:	4b28      	ldr	r3, [pc, #160]	; (80005a4 <MX_ADC1_Init+0xcc>)
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000506:	4b27      	ldr	r3, [pc, #156]	; (80005a4 <MX_ADC1_Init+0xcc>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800050c:	4b25      	ldr	r3, [pc, #148]	; (80005a4 <MX_ADC1_Init+0xcc>)
 800050e:	2204      	movs	r2, #4
 8000510:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000512:	4b24      	ldr	r3, [pc, #144]	; (80005a4 <MX_ADC1_Init+0xcc>)
 8000514:	2200      	movs	r2, #0
 8000516:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000518:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <MX_ADC1_Init+0xcc>)
 800051a:	2200      	movs	r2, #0
 800051c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800051e:	4b21      	ldr	r3, [pc, #132]	; (80005a4 <MX_ADC1_Init+0xcc>)
 8000520:	2200      	movs	r2, #0
 8000522:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000524:	4b1f      	ldr	r3, [pc, #124]	; (80005a4 <MX_ADC1_Init+0xcc>)
 8000526:	2201      	movs	r2, #1
 8000528:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800052a:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <MX_ADC1_Init+0xcc>)
 800052c:	2220      	movs	r2, #32
 800052e:	2100      	movs	r1, #0
 8000530:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000532:	4b1c      	ldr	r3, [pc, #112]	; (80005a4 <MX_ADC1_Init+0xcc>)
 8000534:	2200      	movs	r2, #0
 8000536:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000538:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <MX_ADC1_Init+0xcc>)
 800053a:	2200      	movs	r2, #0
 800053c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800053e:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <MX_ADC1_Init+0xcc>)
 8000540:	222c      	movs	r2, #44	; 0x2c
 8000542:	2100      	movs	r1, #0
 8000544:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000546:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <MX_ADC1_Init+0xcc>)
 8000548:	2200      	movs	r2, #0
 800054a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800054c:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <MX_ADC1_Init+0xcc>)
 800054e:	2200      	movs	r2, #0
 8000550:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000552:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <MX_ADC1_Init+0xcc>)
 8000554:	2200      	movs	r2, #0
 8000556:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <MX_ADC1_Init+0xcc>)
 800055a:	223c      	movs	r2, #60	; 0x3c
 800055c:	2100      	movs	r1, #0
 800055e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000560:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <MX_ADC1_Init+0xcc>)
 8000562:	2200      	movs	r2, #0
 8000564:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000566:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <MX_ADC1_Init+0xcc>)
 8000568:	0018      	movs	r0, r3
 800056a:	f001 facb 	bl	8001b04 <HAL_ADC_Init>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000572:	f000 f9af 	bl	80008d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2201      	movs	r2, #1
 800057a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000588:	1d3a      	adds	r2, r7, #4
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <MX_ADC1_Init+0xcc>)
 800058c:	0011      	movs	r1, r2
 800058e:	0018      	movs	r0, r3
 8000590:	f001 fc60 	bl	8001e54 <HAL_ADC_ConfigChannel>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d001      	beq.n	800059c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000598:	f000 f99c 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800059c:	46c0      	nop			; (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	b004      	add	sp, #16
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000088 	.word	0x20000088
 80005a8:	40012400 	.word	0x40012400

080005ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b08b      	sub	sp, #44	; 0x2c
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	2414      	movs	r4, #20
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	0018      	movs	r0, r3
 80005ba:	2314      	movs	r3, #20
 80005bc:	001a      	movs	r2, r3
 80005be:	2100      	movs	r1, #0
 80005c0:	f005 ff2e 	bl	8006420 <memset>
  if(adcHandle->Instance==ADC1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a18      	ldr	r2, [pc, #96]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d129      	bne.n	8000622 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005ce:	4b18      	ldr	r3, [pc, #96]	; (8000630 <HAL_ADC_MspInit+0x84>)
 80005d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005d2:	4b17      	ldr	r3, [pc, #92]	; (8000630 <HAL_ADC_MspInit+0x84>)
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	0349      	lsls	r1, r1, #13
 80005d8:	430a      	orrs	r2, r1
 80005da:	641a      	str	r2, [r3, #64]	; 0x40
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <HAL_ADC_MspInit+0x84>)
 80005de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	035b      	lsls	r3, r3, #13
 80005e4:	4013      	ands	r3, r2
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <HAL_ADC_MspInit+0x84>)
 80005ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <HAL_ADC_MspInit+0x84>)
 80005f0:	2101      	movs	r1, #1
 80005f2:	430a      	orrs	r2, r1
 80005f4:	635a      	str	r2, [r3, #52]	; 0x34
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <HAL_ADC_MspInit+0x84>)
 80005f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005fa:	2201      	movs	r2, #1
 80005fc:	4013      	ands	r3, r2
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_IN0_BAT_LVL_Pin;
 8000602:	193b      	adds	r3, r7, r4
 8000604:	2201      	movs	r2, #1
 8000606:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000608:	193b      	adds	r3, r7, r4
 800060a:	2203      	movs	r2, #3
 800060c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	193b      	adds	r3, r7, r4
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC1_IN0_BAT_LVL_GPIO_Port, &GPIO_InitStruct);
 8000614:	193a      	adds	r2, r7, r4
 8000616:	23a0      	movs	r3, #160	; 0xa0
 8000618:	05db      	lsls	r3, r3, #23
 800061a:	0011      	movs	r1, r2
 800061c:	0018      	movs	r0, r3
 800061e:	f001 fe9f 	bl	8002360 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	b00b      	add	sp, #44	; 0x2c
 8000628:	bd90      	pop	{r4, r7, pc}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	40012400 	.word	0x40012400
 8000630:	40021000 	.word	0x40021000

08000634 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b087      	sub	sp, #28
 8000638:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	4a08      	ldr	r2, [pc, #32]	; (8000660 <MX_FREERTOS_Init+0x2c>)
 800063e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000640:	c313      	stmia	r3!, {r0, r1, r4}
 8000642:	ca03      	ldmia	r2!, {r0, r1}
 8000644:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2100      	movs	r1, #0
 800064a:	0018      	movs	r0, r3
 800064c:	f004 fde3 	bl	8005216 <osThreadCreate>
 8000650:	0002      	movs	r2, r0
 8000652:	4b04      	ldr	r3, [pc, #16]	; (8000664 <MX_FREERTOS_Init+0x30>)
 8000654:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b007      	add	sp, #28
 800065c:	bd90      	pop	{r4, r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	080070d4 	.word	0x080070d4
 8000664:	200000ec 	.word	0x200000ec

08000668 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000670:	2001      	movs	r0, #1
 8000672:	f004 fdf8 	bl	8005266 <osDelay>
 8000676:	e7fb      	b.n	8000670 <StartDefaultTask+0x8>

08000678 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b08b      	sub	sp, #44	; 0x2c
 800067c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	2414      	movs	r4, #20
 8000680:	193b      	adds	r3, r7, r4
 8000682:	0018      	movs	r0, r3
 8000684:	2314      	movs	r3, #20
 8000686:	001a      	movs	r2, r3
 8000688:	2100      	movs	r1, #0
 800068a:	f005 fec9 	bl	8006420 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800068e:	4b34      	ldr	r3, [pc, #208]	; (8000760 <MX_GPIO_Init+0xe8>)
 8000690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000692:	4b33      	ldr	r3, [pc, #204]	; (8000760 <MX_GPIO_Init+0xe8>)
 8000694:	2120      	movs	r1, #32
 8000696:	430a      	orrs	r2, r1
 8000698:	635a      	str	r2, [r3, #52]	; 0x34
 800069a:	4b31      	ldr	r3, [pc, #196]	; (8000760 <MX_GPIO_Init+0xe8>)
 800069c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800069e:	2220      	movs	r2, #32
 80006a0:	4013      	ands	r3, r2
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <MX_GPIO_Init+0xe8>)
 80006a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006aa:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <MX_GPIO_Init+0xe8>)
 80006ac:	2104      	movs	r1, #4
 80006ae:	430a      	orrs	r2, r1
 80006b0:	635a      	str	r2, [r3, #52]	; 0x34
 80006b2:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <MX_GPIO_Init+0xe8>)
 80006b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006b6:	2204      	movs	r2, #4
 80006b8:	4013      	ands	r3, r2
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b28      	ldr	r3, [pc, #160]	; (8000760 <MX_GPIO_Init+0xe8>)
 80006c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006c2:	4b27      	ldr	r3, [pc, #156]	; (8000760 <MX_GPIO_Init+0xe8>)
 80006c4:	2101      	movs	r1, #1
 80006c6:	430a      	orrs	r2, r1
 80006c8:	635a      	str	r2, [r3, #52]	; 0x34
 80006ca:	4b25      	ldr	r3, [pc, #148]	; (8000760 <MX_GPIO_Init+0xe8>)
 80006cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ce:	2201      	movs	r2, #1
 80006d0:	4013      	ands	r3, r2
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b22      	ldr	r3, [pc, #136]	; (8000760 <MX_GPIO_Init+0xe8>)
 80006d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006da:	4b21      	ldr	r3, [pc, #132]	; (8000760 <MX_GPIO_Init+0xe8>)
 80006dc:	2102      	movs	r1, #2
 80006de:	430a      	orrs	r2, r1
 80006e0:	635a      	str	r2, [r3, #52]	; 0x34
 80006e2:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <MX_GPIO_Init+0xe8>)
 80006e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006e6:	2202      	movs	r2, #2
 80006e8:	4013      	ands	r3, r2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <MX_GPIO_Init+0xe8>)
 80006f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006f2:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <MX_GPIO_Init+0xe8>)
 80006f4:	2108      	movs	r1, #8
 80006f6:	430a      	orrs	r2, r1
 80006f8:	635a      	str	r2, [r3, #52]	; 0x34
 80006fa:	4b19      	ldr	r3, [pc, #100]	; (8000760 <MX_GPIO_Init+0xe8>)
 80006fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006fe:	2208      	movs	r2, #8
 8000700:	4013      	ands	r3, r2
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEV_EN_Pin|M_EN_Pin|LED_R_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_GPIO_Init+0xec>)
 8000708:	2200      	movs	r2, #0
 800070a:	211e      	movs	r1, #30
 800070c:	0018      	movs	r0, r3
 800070e:	f001 ff8b 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = V_BORDURE_R_Pin|BUMPER_F_Pin|BUMPER_B_Pin|BUMPER_R_Pin
 8000712:	193b      	adds	r3, r7, r4
 8000714:	4a14      	ldr	r2, [pc, #80]	; (8000768 <MX_GPIO_Init+0xf0>)
 8000716:	601a      	str	r2, [r3, #0]
                          |BUMPER_L_Pin|V_BORDURE_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2202      	movs	r2, #2
 8000722:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000724:	193b      	adds	r3, r7, r4
 8000726:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <MX_GPIO_Init+0xec>)
 8000728:	0019      	movs	r1, r3
 800072a:	0010      	movs	r0, r2
 800072c:	f001 fe18 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DEV_EN_Pin|M_EN_Pin|LED_R_Pin|LED_B_Pin;
 8000730:	0021      	movs	r1, r4
 8000732:	187b      	adds	r3, r7, r1
 8000734:	221e      	movs	r2, #30
 8000736:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2201      	movs	r2, #1
 800073c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074a:	187b      	adds	r3, r7, r1
 800074c:	4a05      	ldr	r2, [pc, #20]	; (8000764 <MX_GPIO_Init+0xec>)
 800074e:	0019      	movs	r1, r3
 8000750:	0010      	movs	r0, r2
 8000752:	f001 fe05 	bl	8002360 <HAL_GPIO_Init>

}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	b00b      	add	sp, #44	; 0x2c
 800075c:	bd90      	pop	{r4, r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	40021000 	.word	0x40021000
 8000764:	50000400 	.word	0x50000400
 8000768:	000003e1 	.word	0x000003e1

0800076c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000774:	2301      	movs	r3, #1
 8000776:	425b      	negs	r3, r3
 8000778:	1d39      	adds	r1, r7, #4
 800077a:	4804      	ldr	r0, [pc, #16]	; (800078c <__io_putchar+0x20>)
 800077c:	2201      	movs	r2, #1
 800077e:	f004 f805 	bl	800478c <HAL_UART_Transmit>
	return chr;
 8000782:	687b      	ldr	r3, [r7, #4]
}
 8000784:	0018      	movs	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	b002      	add	sp, #8
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000328 	.word	0x20000328

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000794:	f001 f858 	bl	8001848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000798:	f000 f836 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079c:	f7ff ff6c 	bl	8000678 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007a0:	f7ff fe9a 	bl	80004d8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80007a4:	f000 fa26 	bl	8000bf4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80007a8:	f000 fa8e 	bl	8000cc8 <MX_TIM3_Init>
  MX_TIM14_Init();
 80007ac:	f000 faf0 	bl	8000d90 <MX_TIM14_Init>
  MX_TIM15_Init();
 80007b0:	f000 fb3e 	bl	8000e30 <MX_TIM15_Init>
  MX_TIM16_Init();
 80007b4:	f000 fc00 	bl	8000fb8 <MX_TIM16_Init>
  MX_TIM17_Init();
 80007b8:	f000 fc86 	bl	80010c8 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 80007bc:	f000 fed4 	bl	8001568 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007c0:	f000 ff20 	bl	8001604 <MX_USART2_UART_Init>
//	initMotor(&motor_right, &pwm_fwd_right, &pwm_rev_right, pid_motor_right, &htim1);

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80007c4:	f7ff ff36 	bl	8000634 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007c8:	f004 fd1d 	bl	8005206 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //setMotorSpeedFwd(&motor_left, 20);
  //__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, 800);
  printf("Start\n\r");
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <main+0x6c>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f005 fdca 	bl	8006368 <iprintf>
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <main+0x70>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	2110      	movs	r1, #16
 80007da:	0018      	movs	r0, r3
 80007dc:	f001 ff24 	bl	8002628 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <main+0x70>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	2108      	movs	r1, #8
 80007e6:	0018      	movs	r0, r3
 80007e8:	f001 ff1e 	bl	8002628 <HAL_GPIO_WritePin>

  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(5);
 80007ec:	2005      	movs	r0, #5
 80007ee:	f001 f867 	bl	80018c0 <HAL_Delay>
	  //__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, 0);
	  stopMotor(&motor_left);
 80007f2:	4b04      	ldr	r3, [pc, #16]	; (8000804 <main+0x74>)
 80007f4:	0018      	movs	r0, r3
 80007f6:	f000 f87b 	bl	80008f0 <stopMotor>
	  HAL_Delay(5);
 80007fa:	e7f7      	b.n	80007ec <main+0x5c>
 80007fc:	080070e8 	.word	0x080070e8
 8000800:	50000400 	.word	0x50000400
 8000804:	200000f0 	.word	0x200000f0

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b093      	sub	sp, #76	; 0x4c
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	2414      	movs	r4, #20
 8000810:	193b      	adds	r3, r7, r4
 8000812:	0018      	movs	r0, r3
 8000814:	2334      	movs	r3, #52	; 0x34
 8000816:	001a      	movs	r2, r3
 8000818:	2100      	movs	r1, #0
 800081a:	f005 fe01 	bl	8006420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	0018      	movs	r0, r3
 8000822:	2310      	movs	r3, #16
 8000824:	001a      	movs	r2, r3
 8000826:	2100      	movs	r1, #0
 8000828:	f005 fdfa 	bl	8006420 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	0018      	movs	r0, r3
 8000832:	f001 ff17 	bl	8002664 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000836:	193b      	adds	r3, r7, r4
 8000838:	2201      	movs	r2, #1
 800083a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	2280      	movs	r2, #128	; 0x80
 8000840:	0252      	lsls	r2, r2, #9
 8000842:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000844:	0021      	movs	r1, r4
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2202      	movs	r2, #2
 800084a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2203      	movs	r2, #3
 8000850:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2210      	movs	r2, #16
 800085c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2280      	movs	r2, #128	; 0x80
 8000862:	0292      	lsls	r2, r2, #10
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	0592      	lsls	r2, r2, #22
 800086c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086e:	187b      	adds	r3, r7, r1
 8000870:	0018      	movs	r0, r3
 8000872:	f001 ff43 	bl	80026fc <HAL_RCC_OscConfig>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800087a:	f000 f82b 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2207      	movs	r2, #7
 8000882:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2202      	movs	r2, #2
 8000888:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2102      	movs	r1, #2
 800089a:	0018      	movs	r0, r3
 800089c:	f002 fa3e 	bl	8002d1c <HAL_RCC_ClockConfig>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80008a4:	f000 f816 	bl	80008d4 <Error_Handler>
  }
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b013      	add	sp, #76	; 0x4c
 80008ae:	bd90      	pop	{r4, r7, pc}

080008b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d101      	bne.n	80008c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008c2:	f000 ffe1 	bl	8001888 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b002      	add	sp, #8
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	40001000 	.word	0x40001000

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <Error_Handler+0x18>)
 80008da:	2201      	movs	r2, #1
 80008dc:	2108      	movs	r1, #8
 80008de:	0018      	movs	r0, r3
 80008e0:	f001 fea2 	bl	8002628 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	46c0      	nop			; (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x14>
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	50000400 	.word	0x50000400

080008f0 <stopMotor>:
	motor->state = FWD;
	setPwmDutyCycle(motor->fwd, speed);
}

void stopMotor(h_motor_t *motor)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	if(motor->state == REV)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	785b      	ldrb	r3, [r3, #1]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d106      	bne.n	800090e <stopMotor+0x1e>
	{
		setPwmDutyCycle(motor->rev, 0.0);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	2100      	movs	r1, #0
 8000906:	0018      	movs	r0, r3
 8000908:	f7ff fd7e 	bl	8000408 <setPwmDutyCycle>
 800090c:	e009      	b.n	8000922 <stopMotor+0x32>
	}
	else if(motor->state == FWD)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	785b      	ldrb	r3, [r3, #1]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d105      	bne.n	8000922 <stopMotor+0x32>
	{
		setPwmDutyCycle(motor->fwd, 0.0);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	2100      	movs	r1, #0
 800091c:	0018      	movs	r0, r3
 800091e:	f7ff fd73 	bl	8000408 <setPwmDutyCycle>
	}
	motor->state = STOP;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2202      	movs	r2, #2
 8000926:	705a      	strb	r2, [r3, #1]
}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b002      	add	sp, #8
 800092e:	bd80      	pop	{r7, pc}

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_MspInit+0x50>)
 8000938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <HAL_MspInit+0x50>)
 800093c:	2101      	movs	r1, #1
 800093e:	430a      	orrs	r2, r1
 8000940:	641a      	str	r2, [r3, #64]	; 0x40
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <HAL_MspInit+0x50>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	2201      	movs	r2, #1
 8000948:	4013      	ands	r3, r2
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <HAL_MspInit+0x50>)
 8000950:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <HAL_MspInit+0x50>)
 8000954:	2180      	movs	r1, #128	; 0x80
 8000956:	0549      	lsls	r1, r1, #21
 8000958:	430a      	orrs	r2, r1
 800095a:	63da      	str	r2, [r3, #60]	; 0x3c
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_MspInit+0x50>)
 800095e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000960:	2380      	movs	r3, #128	; 0x80
 8000962:	055b      	lsls	r3, r3, #21
 8000964:	4013      	ands	r3, r2
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800096a:	2302      	movs	r3, #2
 800096c:	425b      	negs	r3, r3
 800096e:	2200      	movs	r2, #0
 8000970:	2103      	movs	r1, #3
 8000972:	0018      	movs	r0, r3
 8000974:	f001 fcce 	bl	8002314 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b002      	add	sp, #8
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40021000 	.word	0x40021000

08000984 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b5b0      	push	{r4, r5, r7, lr}
 8000986:	b08c      	sub	sp, #48	; 0x30
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800098c:	232b      	movs	r3, #43	; 0x2b
 800098e:	18fb      	adds	r3, r7, r3
 8000990:	2200      	movs	r2, #0
 8000992:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000994:	4b37      	ldr	r3, [pc, #220]	; (8000a74 <HAL_InitTick+0xf0>)
 8000996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000998:	4b36      	ldr	r3, [pc, #216]	; (8000a74 <HAL_InitTick+0xf0>)
 800099a:	2110      	movs	r1, #16
 800099c:	430a      	orrs	r2, r1
 800099e:	63da      	str	r2, [r3, #60]	; 0x3c
 80009a0:	4b34      	ldr	r3, [pc, #208]	; (8000a74 <HAL_InitTick+0xf0>)
 80009a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009a4:	2210      	movs	r2, #16
 80009a6:	4013      	ands	r3, r2
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ac:	230c      	movs	r3, #12
 80009ae:	18fa      	adds	r2, r7, r3
 80009b0:	2410      	movs	r4, #16
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	0011      	movs	r1, r2
 80009b6:	0018      	movs	r0, r3
 80009b8:	f002 fb5a 	bl	8003070 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d104      	bne.n	80009d2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009c8:	f002 fb3c 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 80009cc:	0003      	movs	r3, r0
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009d0:	e004      	b.n	80009dc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009d2:	f002 fb37 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 80009d6:	0003      	movs	r3, r0
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009de:	4926      	ldr	r1, [pc, #152]	; (8000a78 <HAL_InitTick+0xf4>)
 80009e0:	0018      	movs	r0, r3
 80009e2:	f7ff fb9b 	bl	800011c <__udivsi3>
 80009e6:	0003      	movs	r3, r0
 80009e8:	3b01      	subs	r3, #1
 80009ea:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009ec:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <HAL_InitTick+0xf8>)
 80009ee:	4a24      	ldr	r2, [pc, #144]	; (8000a80 <HAL_InitTick+0xfc>)
 80009f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009f2:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <HAL_InitTick+0xf8>)
 80009f4:	4a23      	ldr	r2, [pc, #140]	; (8000a84 <HAL_InitTick+0x100>)
 80009f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009f8:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <HAL_InitTick+0xf8>)
 80009fa:	6a3a      	ldr	r2, [r7, #32]
 80009fc:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 80009fe:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <HAL_InitTick+0xf8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <HAL_InitTick+0xf8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <HAL_InitTick+0xf8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a10:	252b      	movs	r5, #43	; 0x2b
 8000a12:	197c      	adds	r4, r7, r5
 8000a14:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <HAL_InitTick+0xf8>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f002 fc88 	bl	800332c <HAL_TIM_Base_Init>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000a20:	197b      	adds	r3, r7, r5
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d11e      	bne.n	8000a66 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a28:	197c      	adds	r4, r7, r5
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <HAL_InitTick+0xf8>)
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f002 fcd5 	bl	80033dc <HAL_TIM_Base_Start_IT>
 8000a32:	0003      	movs	r3, r0
 8000a34:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000a36:	197b      	adds	r3, r7, r5
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d113      	bne.n	8000a66 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000a3e:	2011      	movs	r0, #17
 8000a40:	f001 fc7d 	bl	800233e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d809      	bhi.n	8000a5e <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	0019      	movs	r1, r3
 8000a50:	2011      	movs	r0, #17
 8000a52:	f001 fc5f 	bl	8002314 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_InitTick+0x104>)
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	e003      	b.n	8000a66 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8000a5e:	232b      	movs	r3, #43	; 0x2b
 8000a60:	18fb      	adds	r3, r7, r3
 8000a62:	2201      	movs	r2, #1
 8000a64:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000a66:	232b      	movs	r3, #43	; 0x2b
 8000a68:	18fb      	adds	r3, r7, r3
 8000a6a:	781b      	ldrb	r3, [r3, #0]
}
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b00c      	add	sp, #48	; 0x30
 8000a72:	bdb0      	pop	{r4, r5, r7, pc}
 8000a74:	40021000 	.word	0x40021000
 8000a78:	000f4240 	.word	0x000f4240
 8000a7c:	20000110 	.word	0x20000110
 8000a80:	40001000 	.word	0x40001000
 8000a84:	000003e7 	.word	0x000003e7
 8000a88:	20000004 	.word	0x20000004

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <TIM6_IRQHandler+0x14>)
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f002 fdfa 	bl	8003698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	20000110 	.word	0x20000110

08000ab0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	e00a      	b.n	8000ad8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ac2:	e000      	b.n	8000ac6 <_read+0x16>
 8000ac4:	bf00      	nop
 8000ac6:	0001      	movs	r1, r0
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	60ba      	str	r2, [r7, #8]
 8000ace:	b2ca      	uxtb	r2, r1
 8000ad0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	697a      	ldr	r2, [r7, #20]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	dbf0      	blt.n	8000ac2 <_read+0x12>
  }

  return len;
 8000ae0:	687b      	ldr	r3, [r7, #4]
}
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b006      	add	sp, #24
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	60f8      	str	r0, [r7, #12]
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	e009      	b.n	8000b10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	60ba      	str	r2, [r7, #8]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	0018      	movs	r0, r3
 8000b06:	f7ff fe31 	bl	800076c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dbf1      	blt.n	8000afc <_write+0x12>
  }
  return len;
 8000b18:	687b      	ldr	r3, [r7, #4]
}
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b006      	add	sp, #24
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <_close>:

int _close(int file)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	425b      	negs	r3, r3
}
 8000b2e:	0018      	movs	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b002      	add	sp, #8
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
 8000b3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	2280      	movs	r2, #128	; 0x80
 8000b44:	0192      	lsls	r2, r2, #6
 8000b46:	605a      	str	r2, [r3, #4]
  return 0;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b002      	add	sp, #8
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <_isatty>:

int _isatty(int file)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b002      	add	sp, #8
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	0018      	movs	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b004      	add	sp, #16
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b84:	4a14      	ldr	r2, [pc, #80]	; (8000bd8 <_sbrk+0x5c>)
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <_sbrk+0x60>)
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d102      	bne.n	8000b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <_sbrk+0x64>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <_sbrk+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	18d3      	adds	r3, r2, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d207      	bcs.n	8000bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bac:	f005 fc8e 	bl	80064cc <__errno>
 8000bb0:	0003      	movs	r3, r0
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	425b      	negs	r3, r3
 8000bba:	e009      	b.n	8000bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	18d2      	adds	r2, r2, r3
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <_sbrk+0x64>)
 8000bcc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bce:	68fb      	ldr	r3, [r7, #12]
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b006      	add	sp, #24
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20009000 	.word	0x20009000
 8000bdc:	00000400 	.word	0x00000400
 8000be0:	2000015c 	.word	0x2000015c
 8000be4:	200012f0 	.word	0x200012f0

08000be8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b08d      	sub	sp, #52	; 0x34
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bfa:	240c      	movs	r4, #12
 8000bfc:	193b      	adds	r3, r7, r4
 8000bfe:	0018      	movs	r0, r3
 8000c00:	2324      	movs	r3, #36	; 0x24
 8000c02:	001a      	movs	r2, r3
 8000c04:	2100      	movs	r1, #0
 8000c06:	f005 fc0b 	bl	8006420 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	230c      	movs	r3, #12
 8000c10:	001a      	movs	r2, r3
 8000c12:	2100      	movs	r1, #0
 8000c14:	f005 fc04 	bl	8006420 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c18:	4b28      	ldr	r3, [pc, #160]	; (8000cbc <MX_TIM1_Init+0xc8>)
 8000c1a:	4a29      	ldr	r2, [pc, #164]	; (8000cc0 <MX_TIM1_Init+0xcc>)
 8000c1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c1e:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <MX_TIM1_Init+0xc8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c24:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <MX_TIM1_Init+0xc8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c2a:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <MX_TIM1_Init+0xc8>)
 8000c2c:	4a25      	ldr	r2, [pc, #148]	; (8000cc4 <MX_TIM1_Init+0xd0>)
 8000c2e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c30:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <MX_TIM1_Init+0xc8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <MX_TIM1_Init+0xc8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <MX_TIM1_Init+0xc8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c42:	0021      	movs	r1, r4
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2201      	movs	r2, #1
 8000c48:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2201      	movs	r2, #1
 8000c54:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2200      	movs	r2, #0
 8000c5a:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2200      	movs	r2, #0
 8000c66:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	2200      	movs	r2, #0
 8000c72:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	2200      	movs	r2, #0
 8000c78:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000c7a:	187a      	adds	r2, r7, r1
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_TIM1_Init+0xc8>)
 8000c7e:	0011      	movs	r1, r2
 8000c80:	0018      	movs	r0, r3
 8000c82:	f002 fc61 	bl	8003548 <HAL_TIM_Encoder_Init>
 8000c86:	1e03      	subs	r3, r0, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000c8a:	f7ff fe23 	bl	80008d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8e:	003b      	movs	r3, r7
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c94:	003b      	movs	r3, r7
 8000c96:	2200      	movs	r2, #0
 8000c98:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9a:	003b      	movs	r3, r7
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ca0:	003a      	movs	r2, r7
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_TIM1_Init+0xc8>)
 8000ca4:	0011      	movs	r1, r2
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f003 fbf4 	bl	8004494 <HAL_TIMEx_MasterConfigSynchronization>
 8000cac:	1e03      	subs	r3, r0, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000cb0:	f7ff fe10 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b00d      	add	sp, #52	; 0x34
 8000cba:	bd90      	pop	{r4, r7, pc}
 8000cbc:	20000160 	.word	0x20000160
 8000cc0:	40012c00 	.word	0x40012c00
 8000cc4:	0000ffff 	.word	0x0000ffff

08000cc8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b08d      	sub	sp, #52	; 0x34
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cce:	240c      	movs	r4, #12
 8000cd0:	193b      	adds	r3, r7, r4
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	2324      	movs	r3, #36	; 0x24
 8000cd6:	001a      	movs	r2, r3
 8000cd8:	2100      	movs	r1, #0
 8000cda:	f005 fba1 	bl	8006420 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cde:	003b      	movs	r3, r7
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	230c      	movs	r3, #12
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	f005 fb9a 	bl	8006420 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cec:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <MX_TIM3_Init+0xbc>)
 8000cee:	4a26      	ldr	r2, [pc, #152]	; (8000d88 <MX_TIM3_Init+0xc0>)
 8000cf0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cf2:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <MX_TIM3_Init+0xbc>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf8:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <MX_TIM3_Init+0xbc>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cfe:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <MX_TIM3_Init+0xbc>)
 8000d00:	4a22      	ldr	r2, [pc, #136]	; (8000d8c <MX_TIM3_Init+0xc4>)
 8000d02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d04:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <MX_TIM3_Init+0xbc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0a:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <MX_TIM3_Init+0xbc>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d10:	0021      	movs	r1, r4
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2201      	movs	r2, #1
 8000d16:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	2201      	movs	r2, #1
 8000d22:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2200      	movs	r2, #0
 8000d34:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2201      	movs	r2, #1
 8000d3a:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2200      	movs	r2, #0
 8000d40:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2200      	movs	r2, #0
 8000d46:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d48:	187a      	adds	r2, r7, r1
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_TIM3_Init+0xbc>)
 8000d4c:	0011      	movs	r1, r2
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f002 fbfa 	bl	8003548 <HAL_TIM_Encoder_Init>
 8000d54:	1e03      	subs	r3, r0, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000d58:	f7ff fdbc 	bl	80008d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5c:	003b      	movs	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d62:	003b      	movs	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d68:	003a      	movs	r2, r7
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_TIM3_Init+0xbc>)
 8000d6c:	0011      	movs	r1, r2
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f003 fb90 	bl	8004494 <HAL_TIMEx_MasterConfigSynchronization>
 8000d74:	1e03      	subs	r3, r0, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000d78:	f7ff fdac 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d7c:	46c0      	nop			; (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b00d      	add	sp, #52	; 0x34
 8000d82:	bd90      	pop	{r4, r7, pc}
 8000d84:	200001ac 	.word	0x200001ac
 8000d88:	40000400 	.word	0x40000400
 8000d8c:	0000ffff 	.word	0x0000ffff

08000d90 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	0018      	movs	r0, r3
 8000d9a:	231c      	movs	r3, #28
 8000d9c:	001a      	movs	r2, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	f005 fb3e 	bl	8006420 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000da4:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <MX_TIM14_Init+0x94>)
 8000da6:	4a20      	ldr	r2, [pc, #128]	; (8000e28 <MX_TIM14_Init+0x98>)
 8000da8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000daa:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <MX_TIM14_Init+0x94>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db0:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <MX_TIM14_Init+0x94>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000db6:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <MX_TIM14_Init+0x94>)
 8000db8:	4a1c      	ldr	r2, [pc, #112]	; (8000e2c <MX_TIM14_Init+0x9c>)
 8000dba:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbc:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <MX_TIM14_Init+0x94>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <MX_TIM14_Init+0x94>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000dc8:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <MX_TIM14_Init+0x94>)
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f002 faae 	bl	800332c <HAL_TIM_Base_Init>
 8000dd0:	1e03      	subs	r3, r0, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000dd4:	f7ff fd7e 	bl	80008d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <MX_TIM14_Init+0x94>)
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f002 fb54 	bl	8003488 <HAL_TIM_PWM_Init>
 8000de0:	1e03      	subs	r3, r0, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000de4:	f7ff fd76 	bl	80008d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2260      	movs	r2, #96	; 0x60
 8000dec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2200      	movs	r2, #0
 8000df2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e00:	1d39      	adds	r1, r7, #4
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <MX_TIM14_Init+0x94>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	0018      	movs	r0, r3
 8000e08:	f002 fd78 	bl	80038fc <HAL_TIM_PWM_ConfigChannel>
 8000e0c:	1e03      	subs	r3, r0, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000e10:	f7ff fd60 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <MX_TIM14_Init+0x94>)
 8000e16:	0018      	movs	r0, r3
 8000e18:	f000 fac4 	bl	80013a4 <HAL_TIM_MspPostInit>

}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b008      	add	sp, #32
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200001f8 	.word	0x200001f8
 8000e28:	40002000 	.word	0x40002000
 8000e2c:	0000ffff 	.word	0x0000ffff

08000e30 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b09c      	sub	sp, #112	; 0x70
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e36:	2360      	movs	r3, #96	; 0x60
 8000e38:	18fb      	adds	r3, r7, r3
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	2310      	movs	r3, #16
 8000e3e:	001a      	movs	r2, r3
 8000e40:	2100      	movs	r1, #0
 8000e42:	f005 faed 	bl	8006420 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e46:	2354      	movs	r3, #84	; 0x54
 8000e48:	18fb      	adds	r3, r7, r3
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	230c      	movs	r3, #12
 8000e4e:	001a      	movs	r2, r3
 8000e50:	2100      	movs	r1, #0
 8000e52:	f005 fae5 	bl	8006420 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e56:	2338      	movs	r3, #56	; 0x38
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	231c      	movs	r3, #28
 8000e5e:	001a      	movs	r2, r3
 8000e60:	2100      	movs	r1, #0
 8000e62:	f005 fadd 	bl	8006420 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	0018      	movs	r0, r3
 8000e6a:	2334      	movs	r3, #52	; 0x34
 8000e6c:	001a      	movs	r2, r3
 8000e6e:	2100      	movs	r1, #0
 8000e70:	f005 fad6 	bl	8006420 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000e74:	4b4d      	ldr	r3, [pc, #308]	; (8000fac <MX_TIM15_Init+0x17c>)
 8000e76:	4a4e      	ldr	r2, [pc, #312]	; (8000fb0 <MX_TIM15_Init+0x180>)
 8000e78:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000e7a:	4b4c      	ldr	r3, [pc, #304]	; (8000fac <MX_TIM15_Init+0x17c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e80:	4b4a      	ldr	r3, [pc, #296]	; (8000fac <MX_TIM15_Init+0x17c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2559;
 8000e86:	4b49      	ldr	r3, [pc, #292]	; (8000fac <MX_TIM15_Init+0x17c>)
 8000e88:	4a4a      	ldr	r2, [pc, #296]	; (8000fb4 <MX_TIM15_Init+0x184>)
 8000e8a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8c:	4b47      	ldr	r3, [pc, #284]	; (8000fac <MX_TIM15_Init+0x17c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000e92:	4b46      	ldr	r3, [pc, #280]	; (8000fac <MX_TIM15_Init+0x17c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e98:	4b44      	ldr	r3, [pc, #272]	; (8000fac <MX_TIM15_Init+0x17c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000e9e:	4b43      	ldr	r3, [pc, #268]	; (8000fac <MX_TIM15_Init+0x17c>)
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f002 fa43 	bl	800332c <HAL_TIM_Base_Init>
 8000ea6:	1e03      	subs	r3, r0, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8000eaa:	f7ff fd13 	bl	80008d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eae:	2160      	movs	r1, #96	; 0x60
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	0152      	lsls	r2, r2, #5
 8000eb6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000eb8:	187a      	adds	r2, r7, r1
 8000eba:	4b3c      	ldr	r3, [pc, #240]	; (8000fac <MX_TIM15_Init+0x17c>)
 8000ebc:	0011      	movs	r1, r2
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f002 fe1c 	bl	8003afc <HAL_TIM_ConfigClockSource>
 8000ec4:	1e03      	subs	r3, r0, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8000ec8:	f7ff fd04 	bl	80008d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000ecc:	4b37      	ldr	r3, [pc, #220]	; (8000fac <MX_TIM15_Init+0x17c>)
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f002 fada 	bl	8003488 <HAL_TIM_PWM_Init>
 8000ed4:	1e03      	subs	r3, r0, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8000ed8:	f7ff fcfc 	bl	80008d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000edc:	2154      	movs	r1, #84	; 0x54
 8000ede:	187b      	adds	r3, r7, r1
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000eea:	187a      	adds	r2, r7, r1
 8000eec:	4b2f      	ldr	r3, [pc, #188]	; (8000fac <MX_TIM15_Init+0x17c>)
 8000eee:	0011      	movs	r1, r2
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f003 facf 	bl	8004494 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef6:	1e03      	subs	r3, r0, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8000efa:	f7ff fceb 	bl	80008d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000efe:	2138      	movs	r1, #56	; 0x38
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	2260      	movs	r2, #96	; 0x60
 8000f04:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	2200      	movs	r2, #0
 8000f0a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2200      	movs	r2, #0
 8000f16:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2200      	movs	r2, #0
 8000f22:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	2200      	movs	r2, #0
 8000f28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f2a:	1879      	adds	r1, r7, r1
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <MX_TIM15_Init+0x17c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	0018      	movs	r0, r3
 8000f32:	f002 fce3 	bl	80038fc <HAL_TIM_PWM_ConfigChannel>
 8000f36:	1e03      	subs	r3, r0, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000f3a:	f7ff fccb 	bl	80008d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f3e:	2338      	movs	r3, #56	; 0x38
 8000f40:	18f9      	adds	r1, r7, r3
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <MX_TIM15_Init+0x17c>)
 8000f44:	2204      	movs	r2, #4
 8000f46:	0018      	movs	r0, r3
 8000f48:	f002 fcd8 	bl	80038fc <HAL_TIM_PWM_ConfigChannel>
 8000f4c:	1e03      	subs	r3, r0, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 8000f50:	f7ff fcc0 	bl	80008d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	0192      	lsls	r2, r2, #6
 8000f78:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000f86:	1d3a      	adds	r2, r7, #4
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <MX_TIM15_Init+0x17c>)
 8000f8a:	0011      	movs	r1, r2
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f003 fae9 	bl	8004564 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f92:	1e03      	subs	r3, r0, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM15_Init+0x16a>
  {
    Error_Handler();
 8000f96:	f7ff fc9d 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000f9a:	4b04      	ldr	r3, [pc, #16]	; (8000fac <MX_TIM15_Init+0x17c>)
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f000 fa01 	bl	80013a4 <HAL_TIM_MspPostInit>

}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b01c      	add	sp, #112	; 0x70
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	20000244 	.word	0x20000244
 8000fb0:	40014000 	.word	0x40014000
 8000fb4:	000009ff 	.word	0x000009ff

08000fb8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b094      	sub	sp, #80	; 0x50
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fbe:	2334      	movs	r3, #52	; 0x34
 8000fc0:	18fb      	adds	r3, r7, r3
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	231c      	movs	r3, #28
 8000fc6:	001a      	movs	r2, r3
 8000fc8:	2100      	movs	r1, #0
 8000fca:	f005 fa29 	bl	8006420 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fce:	003b      	movs	r3, r7
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	2334      	movs	r3, #52	; 0x34
 8000fd4:	001a      	movs	r2, r3
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	f005 fa22 	bl	8006420 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000fdc:	4b37      	ldr	r3, [pc, #220]	; (80010bc <MX_TIM16_Init+0x104>)
 8000fde:	4a38      	ldr	r2, [pc, #224]	; (80010c0 <MX_TIM16_Init+0x108>)
 8000fe0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000fe2:	4b36      	ldr	r3, [pc, #216]	; (80010bc <MX_TIM16_Init+0x104>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe8:	4b34      	ldr	r3, [pc, #208]	; (80010bc <MX_TIM16_Init+0x104>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2559;
 8000fee:	4b33      	ldr	r3, [pc, #204]	; (80010bc <MX_TIM16_Init+0x104>)
 8000ff0:	4a34      	ldr	r2, [pc, #208]	; (80010c4 <MX_TIM16_Init+0x10c>)
 8000ff2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff4:	4b31      	ldr	r3, [pc, #196]	; (80010bc <MX_TIM16_Init+0x104>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000ffa:	4b30      	ldr	r3, [pc, #192]	; (80010bc <MX_TIM16_Init+0x104>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001000:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <MX_TIM16_Init+0x104>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001006:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <MX_TIM16_Init+0x104>)
 8001008:	0018      	movs	r0, r3
 800100a:	f002 f98f 	bl	800332c <HAL_TIM_Base_Init>
 800100e:	1e03      	subs	r3, r0, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8001012:	f7ff fc5f 	bl	80008d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001016:	4b29      	ldr	r3, [pc, #164]	; (80010bc <MX_TIM16_Init+0x104>)
 8001018:	0018      	movs	r0, r3
 800101a:	f002 fa35 	bl	8003488 <HAL_TIM_PWM_Init>
 800101e:	1e03      	subs	r3, r0, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8001022:	f7ff fc57 	bl	80008d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001026:	2134      	movs	r1, #52	; 0x34
 8001028:	187b      	adds	r3, r7, r1
 800102a:	2260      	movs	r2, #96	; 0x60
 800102c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800102e:	187b      	adds	r3, r7, r1
 8001030:	2200      	movs	r2, #0
 8001032:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001034:	187b      	adds	r3, r7, r1
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800103a:	187b      	adds	r3, r7, r1
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001040:	187b      	adds	r3, r7, r1
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001046:	187b      	adds	r3, r7, r1
 8001048:	2200      	movs	r2, #0
 800104a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800104c:	187b      	adds	r3, r7, r1
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001052:	1879      	adds	r1, r7, r1
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <MX_TIM16_Init+0x104>)
 8001056:	2200      	movs	r2, #0
 8001058:	0018      	movs	r0, r3
 800105a:	f002 fc4f 	bl	80038fc <HAL_TIM_PWM_ConfigChannel>
 800105e:	1e03      	subs	r3, r0, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8001062:	f7ff fc37 	bl	80008d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001066:	003b      	movs	r3, r7
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800106c:	003b      	movs	r3, r7
 800106e:	2200      	movs	r2, #0
 8001070:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001072:	003b      	movs	r3, r7
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001078:	003b      	movs	r3, r7
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800107e:	003b      	movs	r3, r7
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001084:	003b      	movs	r3, r7
 8001086:	2280      	movs	r2, #128	; 0x80
 8001088:	0192      	lsls	r2, r2, #6
 800108a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800108c:	003b      	movs	r3, r7
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001092:	003b      	movs	r3, r7
 8001094:	2200      	movs	r2, #0
 8001096:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001098:	003a      	movs	r2, r7
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <MX_TIM16_Init+0x104>)
 800109c:	0011      	movs	r1, r2
 800109e:	0018      	movs	r0, r3
 80010a0:	f003 fa60 	bl	8004564 <HAL_TIMEx_ConfigBreakDeadTime>
 80010a4:	1e03      	subs	r3, r0, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 80010a8:	f7ff fc14 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <MX_TIM16_Init+0x104>)
 80010ae:	0018      	movs	r0, r3
 80010b0:	f000 f978 	bl	80013a4 <HAL_TIM_MspPostInit>

}
 80010b4:	46c0      	nop			; (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b014      	add	sp, #80	; 0x50
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000290 	.word	0x20000290
 80010c0:	40014400 	.word	0x40014400
 80010c4:	000009ff 	.word	0x000009ff

080010c8 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b094      	sub	sp, #80	; 0x50
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ce:	2334      	movs	r3, #52	; 0x34
 80010d0:	18fb      	adds	r3, r7, r3
 80010d2:	0018      	movs	r0, r3
 80010d4:	231c      	movs	r3, #28
 80010d6:	001a      	movs	r2, r3
 80010d8:	2100      	movs	r1, #0
 80010da:	f005 f9a1 	bl	8006420 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010de:	003b      	movs	r3, r7
 80010e0:	0018      	movs	r0, r3
 80010e2:	2334      	movs	r3, #52	; 0x34
 80010e4:	001a      	movs	r2, r3
 80010e6:	2100      	movs	r1, #0
 80010e8:	f005 f99a 	bl	8006420 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80010ec:	4b37      	ldr	r3, [pc, #220]	; (80011cc <MX_TIM17_Init+0x104>)
 80010ee:	4a38      	ldr	r2, [pc, #224]	; (80011d0 <MX_TIM17_Init+0x108>)
 80010f0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80010f2:	4b36      	ldr	r3, [pc, #216]	; (80011cc <MX_TIM17_Init+0x104>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f8:	4b34      	ldr	r3, [pc, #208]	; (80011cc <MX_TIM17_Init+0x104>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2559;
 80010fe:	4b33      	ldr	r3, [pc, #204]	; (80011cc <MX_TIM17_Init+0x104>)
 8001100:	4a34      	ldr	r2, [pc, #208]	; (80011d4 <MX_TIM17_Init+0x10c>)
 8001102:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001104:	4b31      	ldr	r3, [pc, #196]	; (80011cc <MX_TIM17_Init+0x104>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800110a:	4b30      	ldr	r3, [pc, #192]	; (80011cc <MX_TIM17_Init+0x104>)
 800110c:	2200      	movs	r2, #0
 800110e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001110:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <MX_TIM17_Init+0x104>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001116:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <MX_TIM17_Init+0x104>)
 8001118:	0018      	movs	r0, r3
 800111a:	f002 f907 	bl	800332c <HAL_TIM_Base_Init>
 800111e:	1e03      	subs	r3, r0, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8001122:	f7ff fbd7 	bl	80008d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001126:	4b29      	ldr	r3, [pc, #164]	; (80011cc <MX_TIM17_Init+0x104>)
 8001128:	0018      	movs	r0, r3
 800112a:	f002 f9ad 	bl	8003488 <HAL_TIM_PWM_Init>
 800112e:	1e03      	subs	r3, r0, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8001132:	f7ff fbcf 	bl	80008d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001136:	2134      	movs	r1, #52	; 0x34
 8001138:	187b      	adds	r3, r7, r1
 800113a:	2260      	movs	r2, #96	; 0x60
 800113c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800113e:	187b      	adds	r3, r7, r1
 8001140:	2200      	movs	r2, #0
 8001142:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001144:	187b      	adds	r3, r7, r1
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800114a:	187b      	adds	r3, r7, r1
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001150:	187b      	adds	r3, r7, r1
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001156:	187b      	adds	r3, r7, r1
 8001158:	2200      	movs	r2, #0
 800115a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800115c:	187b      	adds	r3, r7, r1
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001162:	1879      	adds	r1, r7, r1
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <MX_TIM17_Init+0x104>)
 8001166:	2200      	movs	r2, #0
 8001168:	0018      	movs	r0, r3
 800116a:	f002 fbc7 	bl	80038fc <HAL_TIM_PWM_ConfigChannel>
 800116e:	1e03      	subs	r3, r0, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8001172:	f7ff fbaf 	bl	80008d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001176:	003b      	movs	r3, r7
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800117c:	003b      	movs	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001182:	003b      	movs	r3, r7
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001188:	003b      	movs	r3, r7
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800118e:	003b      	movs	r3, r7
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001194:	003b      	movs	r3, r7
 8001196:	2280      	movs	r2, #128	; 0x80
 8001198:	0192      	lsls	r2, r2, #6
 800119a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800119c:	003b      	movs	r3, r7
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011a2:	003b      	movs	r3, r7
 80011a4:	2200      	movs	r2, #0
 80011a6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80011a8:	003a      	movs	r2, r7
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <MX_TIM17_Init+0x104>)
 80011ac:	0011      	movs	r1, r2
 80011ae:	0018      	movs	r0, r3
 80011b0:	f003 f9d8 	bl	8004564 <HAL_TIMEx_ConfigBreakDeadTime>
 80011b4:	1e03      	subs	r3, r0, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 80011b8:	f7ff fb8c 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <MX_TIM17_Init+0x104>)
 80011be:	0018      	movs	r0, r3
 80011c0:	f000 f8f0 	bl	80013a4 <HAL_TIM_MspPostInit>

}
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b014      	add	sp, #80	; 0x50
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200002dc 	.word	0x200002dc
 80011d0:	40014800 	.word	0x40014800
 80011d4:	000009ff 	.word	0x000009ff

080011d8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b08d      	sub	sp, #52	; 0x34
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	241c      	movs	r4, #28
 80011e2:	193b      	adds	r3, r7, r4
 80011e4:	0018      	movs	r0, r3
 80011e6:	2314      	movs	r3, #20
 80011e8:	001a      	movs	r2, r3
 80011ea:	2100      	movs	r1, #0
 80011ec:	f005 f918 	bl	8006420 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a36      	ldr	r2, [pc, #216]	; (80012d0 <HAL_TIM_Encoder_MspInit+0xf8>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d131      	bne.n	800125e <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011fa:	4b36      	ldr	r3, [pc, #216]	; (80012d4 <HAL_TIM_Encoder_MspInit+0xfc>)
 80011fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011fe:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001200:	2180      	movs	r1, #128	; 0x80
 8001202:	0109      	lsls	r1, r1, #4
 8001204:	430a      	orrs	r2, r1
 8001206:	641a      	str	r2, [r3, #64]	; 0x40
 8001208:	4b32      	ldr	r3, [pc, #200]	; (80012d4 <HAL_TIM_Encoder_MspInit+0xfc>)
 800120a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	011b      	lsls	r3, r3, #4
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	4b2f      	ldr	r3, [pc, #188]	; (80012d4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800121a:	4b2e      	ldr	r3, [pc, #184]	; (80012d4 <HAL_TIM_Encoder_MspInit+0xfc>)
 800121c:	2104      	movs	r1, #4
 800121e:	430a      	orrs	r2, r1
 8001220:	635a      	str	r2, [r3, #52]	; 0x34
 8001222:	4b2c      	ldr	r3, [pc, #176]	; (80012d4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001226:	2204      	movs	r2, #4
 8001228:	4013      	ands	r3, r2
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC8     ------> TIM1_CH1
    PC9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH1_ENCODER_RB_Pin|TIM1_CH2_ENCODER_RA_Pin;
 800122e:	193b      	adds	r3, r7, r4
 8001230:	22c0      	movs	r2, #192	; 0xc0
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	0021      	movs	r1, r4
 8001238:	187b      	adds	r3, r7, r1
 800123a:	2202      	movs	r2, #2
 800123c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	187b      	adds	r3, r7, r1
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	187b      	adds	r3, r7, r1
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800124a:	187b      	adds	r3, r7, r1
 800124c:	2202      	movs	r2, #2
 800124e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001250:	187b      	adds	r3, r7, r1
 8001252:	4a21      	ldr	r2, [pc, #132]	; (80012d8 <HAL_TIM_Encoder_MspInit+0x100>)
 8001254:	0019      	movs	r1, r3
 8001256:	0010      	movs	r0, r2
 8001258:	f001 f882 	bl	8002360 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800125c:	e033      	b.n	80012c6 <HAL_TIM_Encoder_MspInit+0xee>
  else if(tim_encoderHandle->Instance==TIM3)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a1e      	ldr	r2, [pc, #120]	; (80012dc <HAL_TIM_Encoder_MspInit+0x104>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d12e      	bne.n	80012c6 <HAL_TIM_Encoder_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HAL_TIM_Encoder_MspInit+0xfc>)
 800126a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_TIM_Encoder_MspInit+0xfc>)
 800126e:	2102      	movs	r1, #2
 8001270:	430a      	orrs	r2, r1
 8001272:	63da      	str	r2, [r3, #60]	; 0x3c
 8001274:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001278:	2202      	movs	r2, #2
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001280:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001286:	2101      	movs	r1, #1
 8001288:	430a      	orrs	r2, r1
 800128a:	635a      	str	r2, [r3, #52]	; 0x34
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HAL_TIM_Encoder_MspInit+0xfc>)
 800128e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001290:	2201      	movs	r2, #1
 8001292:	4013      	ands	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_ENCODER_LA_Pin|TIM3_CH2_ENCODER_LB_Pin;
 8001298:	211c      	movs	r1, #28
 800129a:	187b      	adds	r3, r7, r1
 800129c:	22c0      	movs	r2, #192	; 0xc0
 800129e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	2202      	movs	r2, #2
 80012a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80012b2:	187b      	adds	r3, r7, r1
 80012b4:	2201      	movs	r2, #1
 80012b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	187a      	adds	r2, r7, r1
 80012ba:	23a0      	movs	r3, #160	; 0xa0
 80012bc:	05db      	lsls	r3, r3, #23
 80012be:	0011      	movs	r1, r2
 80012c0:	0018      	movs	r0, r3
 80012c2:	f001 f84d 	bl	8002360 <HAL_GPIO_Init>
}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b00d      	add	sp, #52	; 0x34
 80012cc:	bd90      	pop	{r4, r7, pc}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	40012c00 	.word	0x40012c00
 80012d4:	40021000 	.word	0x40021000
 80012d8:	50000800 	.word	0x50000800
 80012dc:	40000400 	.word	0x40000400

080012e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a28      	ldr	r2, [pc, #160]	; (8001390 <HAL_TIM_Base_MspInit+0xb0>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10e      	bne.n	8001310 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80012f2:	4b28      	ldr	r3, [pc, #160]	; (8001394 <HAL_TIM_Base_MspInit+0xb4>)
 80012f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012f6:	4b27      	ldr	r3, [pc, #156]	; (8001394 <HAL_TIM_Base_MspInit+0xb4>)
 80012f8:	2180      	movs	r1, #128	; 0x80
 80012fa:	0209      	lsls	r1, r1, #8
 80012fc:	430a      	orrs	r2, r1
 80012fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001300:	4b24      	ldr	r3, [pc, #144]	; (8001394 <HAL_TIM_Base_MspInit+0xb4>)
 8001302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	4013      	ands	r3, r2
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800130e:	e03a      	b.n	8001386 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM15)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a20      	ldr	r2, [pc, #128]	; (8001398 <HAL_TIM_Base_MspInit+0xb8>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d10e      	bne.n	8001338 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800131a:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <HAL_TIM_Base_MspInit+0xb4>)
 800131c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <HAL_TIM_Base_MspInit+0xb4>)
 8001320:	2180      	movs	r1, #128	; 0x80
 8001322:	0249      	lsls	r1, r1, #9
 8001324:	430a      	orrs	r2, r1
 8001326:	641a      	str	r2, [r3, #64]	; 0x40
 8001328:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <HAL_TIM_Base_MspInit+0xb4>)
 800132a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	025b      	lsls	r3, r3, #9
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
}
 8001336:	e026      	b.n	8001386 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM16)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a17      	ldr	r2, [pc, #92]	; (800139c <HAL_TIM_Base_MspInit+0xbc>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d10e      	bne.n	8001360 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_TIM_Base_MspInit+0xb4>)
 8001344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_TIM_Base_MspInit+0xb4>)
 8001348:	2180      	movs	r1, #128	; 0x80
 800134a:	0289      	lsls	r1, r1, #10
 800134c:	430a      	orrs	r2, r1
 800134e:	641a      	str	r2, [r3, #64]	; 0x40
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <HAL_TIM_Base_MspInit+0xb4>)
 8001352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	029b      	lsls	r3, r3, #10
 8001358:	4013      	ands	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
}
 800135e:	e012      	b.n	8001386 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM17)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <HAL_TIM_Base_MspInit+0xc0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d10d      	bne.n	8001386 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_TIM_Base_MspInit+0xb4>)
 800136c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_TIM_Base_MspInit+0xb4>)
 8001370:	2180      	movs	r1, #128	; 0x80
 8001372:	02c9      	lsls	r1, r1, #11
 8001374:	430a      	orrs	r2, r1
 8001376:	641a      	str	r2, [r3, #64]	; 0x40
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_TIM_Base_MspInit+0xb4>)
 800137a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	02db      	lsls	r3, r3, #11
 8001380:	4013      	ands	r3, r2
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	46bd      	mov	sp, r7
 800138a:	b006      	add	sp, #24
 800138c:	bd80      	pop	{r7, pc}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	40002000 	.word	0x40002000
 8001394:	40021000 	.word	0x40021000
 8001398:	40014000 	.word	0x40014000
 800139c:	40014400 	.word	0x40014400
 80013a0:	40014800 	.word	0x40014800

080013a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b08d      	sub	sp, #52	; 0x34
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	241c      	movs	r4, #28
 80013ae:	193b      	adds	r3, r7, r4
 80013b0:	0018      	movs	r0, r3
 80013b2:	2314      	movs	r3, #20
 80013b4:	001a      	movs	r2, r3
 80013b6:	2100      	movs	r1, #0
 80013b8:	f005 f832 	bl	8006420 <memset>
  if(timHandle->Instance==TIM14)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a62      	ldr	r2, [pc, #392]	; (800154c <HAL_TIM_MspPostInit+0x1a8>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d123      	bne.n	800140e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	4b62      	ldr	r3, [pc, #392]	; (8001550 <HAL_TIM_MspPostInit+0x1ac>)
 80013c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ca:	4b61      	ldr	r3, [pc, #388]	; (8001550 <HAL_TIM_MspPostInit+0x1ac>)
 80013cc:	2101      	movs	r1, #1
 80013ce:	430a      	orrs	r2, r1
 80013d0:	635a      	str	r2, [r3, #52]	; 0x34
 80013d2:	4b5f      	ldr	r3, [pc, #380]	; (8001550 <HAL_TIM_MspPostInit+0x1ac>)
 80013d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d6:	2201      	movs	r2, #1
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
 80013dc:	69bb      	ldr	r3, [r7, #24]
    /**TIM14 GPIO Configuration
    PA4     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = TIM14_CH1_M_SCTR_Pin;
 80013de:	0021      	movs	r1, r4
 80013e0:	187b      	adds	r3, r7, r1
 80013e2:	2210      	movs	r2, #16
 80013e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	187b      	adds	r3, r7, r1
 80013e8:	2202      	movs	r2, #2
 80013ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	2204      	movs	r2, #4
 80013fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM14_CH1_M_SCTR_GPIO_Port, &GPIO_InitStruct);
 80013fe:	187a      	adds	r2, r7, r1
 8001400:	23a0      	movs	r3, #160	; 0xa0
 8001402:	05db      	lsls	r3, r3, #23
 8001404:	0011      	movs	r1, r2
 8001406:	0018      	movs	r0, r3
 8001408:	f000 ffaa 	bl	8002360 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800140c:	e099      	b.n	8001542 <HAL_TIM_MspPostInit+0x19e>
  else if(timHandle->Instance==TIM15)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a50      	ldr	r2, [pc, #320]	; (8001554 <HAL_TIM_MspPostInit+0x1b0>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d145      	bne.n	80014a4 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001418:	4b4d      	ldr	r3, [pc, #308]	; (8001550 <HAL_TIM_MspPostInit+0x1ac>)
 800141a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800141c:	4b4c      	ldr	r3, [pc, #304]	; (8001550 <HAL_TIM_MspPostInit+0x1ac>)
 800141e:	2104      	movs	r1, #4
 8001420:	430a      	orrs	r2, r1
 8001422:	635a      	str	r2, [r3, #52]	; 0x34
 8001424:	4b4a      	ldr	r3, [pc, #296]	; (8001550 <HAL_TIM_MspPostInit+0x1ac>)
 8001426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001428:	2204      	movs	r2, #4
 800142a:	4013      	ands	r3, r2
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b47      	ldr	r3, [pc, #284]	; (8001550 <HAL_TIM_MspPostInit+0x1ac>)
 8001432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001434:	4b46      	ldr	r3, [pc, #280]	; (8001550 <HAL_TIM_MspPostInit+0x1ac>)
 8001436:	2101      	movs	r1, #1
 8001438:	430a      	orrs	r2, r1
 800143a:	635a      	str	r2, [r3, #52]	; 0x34
 800143c:	4b44      	ldr	r3, [pc, #272]	; (8001550 <HAL_TIM_MspPostInit+0x1ac>)
 800143e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001440:	2201      	movs	r2, #1
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM15_CH2_REV_MR_Pin;
 8001448:	241c      	movs	r4, #28
 800144a:	193b      	adds	r3, r7, r4
 800144c:	2204      	movs	r2, #4
 800144e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	193b      	adds	r3, r7, r4
 8001452:	2202      	movs	r2, #2
 8001454:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	193b      	adds	r3, r7, r4
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	193b      	adds	r3, r7, r4
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 8001462:	193b      	adds	r3, r7, r4
 8001464:	2202      	movs	r2, #2
 8001466:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM15_CH2_REV_MR_GPIO_Port, &GPIO_InitStruct);
 8001468:	193b      	adds	r3, r7, r4
 800146a:	4a3b      	ldr	r2, [pc, #236]	; (8001558 <HAL_TIM_MspPostInit+0x1b4>)
 800146c:	0019      	movs	r1, r3
 800146e:	0010      	movs	r0, r2
 8001470:	f000 ff76 	bl	8002360 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM15_CH1_REV_ML_Pin;
 8001474:	0021      	movs	r1, r4
 8001476:	187b      	adds	r3, r7, r1
 8001478:	2204      	movs	r2, #4
 800147a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	187b      	adds	r3, r7, r1
 800147e:	2202      	movs	r2, #2
 8001480:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	187b      	adds	r3, r7, r1
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	187b      	adds	r3, r7, r1
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 800148e:	187b      	adds	r3, r7, r1
 8001490:	2205      	movs	r2, #5
 8001492:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM15_CH1_REV_ML_GPIO_Port, &GPIO_InitStruct);
 8001494:	187a      	adds	r2, r7, r1
 8001496:	23a0      	movs	r3, #160	; 0xa0
 8001498:	05db      	lsls	r3, r3, #23
 800149a:	0011      	movs	r1, r2
 800149c:	0018      	movs	r0, r3
 800149e:	f000 ff5f 	bl	8002360 <HAL_GPIO_Init>
}
 80014a2:	e04e      	b.n	8001542 <HAL_TIM_MspPostInit+0x19e>
  else if(timHandle->Instance==TIM16)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a2c      	ldr	r2, [pc, #176]	; (800155c <HAL_TIM_MspPostInit+0x1b8>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d122      	bne.n	80014f4 <HAL_TIM_MspPostInit+0x150>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ae:	4b28      	ldr	r3, [pc, #160]	; (8001550 <HAL_TIM_MspPostInit+0x1ac>)
 80014b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014b2:	4b27      	ldr	r3, [pc, #156]	; (8001550 <HAL_TIM_MspPostInit+0x1ac>)
 80014b4:	2108      	movs	r1, #8
 80014b6:	430a      	orrs	r2, r1
 80014b8:	635a      	str	r2, [r3, #52]	; 0x34
 80014ba:	4b25      	ldr	r3, [pc, #148]	; (8001550 <HAL_TIM_MspPostInit+0x1ac>)
 80014bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014be:	2208      	movs	r2, #8
 80014c0:	4013      	ands	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM16_CH1_FWD_ML_Pin;
 80014c6:	211c      	movs	r1, #28
 80014c8:	187b      	adds	r3, r7, r1
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	187b      	adds	r3, r7, r1
 80014d0:	2202      	movs	r2, #2
 80014d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	187b      	adds	r3, r7, r1
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	187b      	adds	r3, r7, r1
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	2202      	movs	r2, #2
 80014e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM16_CH1_FWD_ML_GPIO_Port, &GPIO_InitStruct);
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <HAL_TIM_MspPostInit+0x1bc>)
 80014ea:	0019      	movs	r1, r3
 80014ec:	0010      	movs	r0, r2
 80014ee:	f000 ff37 	bl	8002360 <HAL_GPIO_Init>
}
 80014f2:	e026      	b.n	8001542 <HAL_TIM_MspPostInit+0x19e>
  else if(timHandle->Instance==TIM17)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a1a      	ldr	r2, [pc, #104]	; (8001564 <HAL_TIM_MspPostInit+0x1c0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d121      	bne.n	8001542 <HAL_TIM_MspPostInit+0x19e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_TIM_MspPostInit+0x1ac>)
 8001500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <HAL_TIM_MspPostInit+0x1ac>)
 8001504:	2108      	movs	r1, #8
 8001506:	430a      	orrs	r2, r1
 8001508:	635a      	str	r2, [r3, #52]	; 0x34
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_TIM_MspPostInit+0x1ac>)
 800150c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800150e:	2208      	movs	r2, #8
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM17_CH1_FWD_MR_Pin;
 8001516:	211c      	movs	r1, #28
 8001518:	187b      	adds	r3, r7, r1
 800151a:	2202      	movs	r2, #2
 800151c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	187b      	adds	r3, r7, r1
 8001520:	2202      	movs	r2, #2
 8001522:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	187b      	adds	r3, r7, r1
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	187b      	adds	r3, r7, r1
 800152c:	2200      	movs	r2, #0
 800152e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8001530:	187b      	adds	r3, r7, r1
 8001532:	2202      	movs	r2, #2
 8001534:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM17_CH1_FWD_MR_GPIO_Port, &GPIO_InitStruct);
 8001536:	187b      	adds	r3, r7, r1
 8001538:	4a09      	ldr	r2, [pc, #36]	; (8001560 <HAL_TIM_MspPostInit+0x1bc>)
 800153a:	0019      	movs	r1, r3
 800153c:	0010      	movs	r0, r2
 800153e:	f000 ff0f 	bl	8002360 <HAL_GPIO_Init>
}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	46bd      	mov	sp, r7
 8001546:	b00d      	add	sp, #52	; 0x34
 8001548:	bd90      	pop	{r4, r7, pc}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	40002000 	.word	0x40002000
 8001550:	40021000 	.word	0x40021000
 8001554:	40014000 	.word	0x40014000
 8001558:	50000800 	.word	0x50000800
 800155c:	40014400 	.word	0x40014400
 8001560:	50000c00 	.word	0x50000c00
 8001564:	40014800 	.word	0x40014800

08001568 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800156c:	4b23      	ldr	r3, [pc, #140]	; (80015fc <MX_USART1_UART_Init+0x94>)
 800156e:	4a24      	ldr	r2, [pc, #144]	; (8001600 <MX_USART1_UART_Init+0x98>)
 8001570:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001572:	4b22      	ldr	r3, [pc, #136]	; (80015fc <MX_USART1_UART_Init+0x94>)
 8001574:	22e1      	movs	r2, #225	; 0xe1
 8001576:	0252      	lsls	r2, r2, #9
 8001578:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	4b20      	ldr	r3, [pc, #128]	; (80015fc <MX_USART1_UART_Init+0x94>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <MX_USART1_UART_Init+0x94>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001586:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <MX_USART1_UART_Init+0x94>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <MX_USART1_UART_Init+0x94>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <MX_USART1_UART_Init+0x94>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <MX_USART1_UART_Init+0x94>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <MX_USART1_UART_Init+0x94>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <MX_USART1_UART_Init+0x94>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015aa:	4b14      	ldr	r3, [pc, #80]	; (80015fc <MX_USART1_UART_Init+0x94>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <MX_USART1_UART_Init+0x94>)
 80015b2:	0018      	movs	r0, r3
 80015b4:	f003 f894 	bl	80046e0 <HAL_UART_Init>
 80015b8:	1e03      	subs	r3, r0, #0
 80015ba:	d001      	beq.n	80015c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015bc:	f7ff f98a 	bl	80008d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_USART1_UART_Init+0x94>)
 80015c2:	2100      	movs	r1, #0
 80015c4:	0018      	movs	r0, r3
 80015c6:	f003 fd25 	bl	8005014 <HAL_UARTEx_SetTxFifoThreshold>
 80015ca:	1e03      	subs	r3, r0, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015ce:	f7ff f981 	bl	80008d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <MX_USART1_UART_Init+0x94>)
 80015d4:	2100      	movs	r1, #0
 80015d6:	0018      	movs	r0, r3
 80015d8:	f003 fd5c 	bl	8005094 <HAL_UARTEx_SetRxFifoThreshold>
 80015dc:	1e03      	subs	r3, r0, #0
 80015de:	d001      	beq.n	80015e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015e0:	f7ff f978 	bl	80008d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <MX_USART1_UART_Init+0x94>)
 80015e6:	0018      	movs	r0, r3
 80015e8:	f003 fcda 	bl	8004fa0 <HAL_UARTEx_DisableFifoMode>
 80015ec:	1e03      	subs	r3, r0, #0
 80015ee:	d001      	beq.n	80015f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015f0:	f7ff f970 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015f4:	46c0      	nop			; (mov r8, r8)
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	20000328 	.word	0x20000328
 8001600:	40013800 	.word	0x40013800

08001604 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001608:	4b23      	ldr	r3, [pc, #140]	; (8001698 <MX_USART2_UART_Init+0x94>)
 800160a:	4a24      	ldr	r2, [pc, #144]	; (800169c <MX_USART2_UART_Init+0x98>)
 800160c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800160e:	4b22      	ldr	r3, [pc, #136]	; (8001698 <MX_USART2_UART_Init+0x94>)
 8001610:	22e1      	movs	r2, #225	; 0xe1
 8001612:	0252      	lsls	r2, r2, #9
 8001614:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <MX_USART2_UART_Init+0x94>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <MX_USART2_UART_Init+0x94>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <MX_USART2_UART_Init+0x94>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <MX_USART2_UART_Init+0x94>)
 800162a:	220c      	movs	r2, #12
 800162c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162e:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <MX_USART2_UART_Init+0x94>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <MX_USART2_UART_Init+0x94>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <MX_USART2_UART_Init+0x94>)
 800163c:	2200      	movs	r2, #0
 800163e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001640:	4b15      	ldr	r3, [pc, #84]	; (8001698 <MX_USART2_UART_Init+0x94>)
 8001642:	2200      	movs	r2, #0
 8001644:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001646:	4b14      	ldr	r3, [pc, #80]	; (8001698 <MX_USART2_UART_Init+0x94>)
 8001648:	2200      	movs	r2, #0
 800164a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <MX_USART2_UART_Init+0x94>)
 800164e:	0018      	movs	r0, r3
 8001650:	f003 f846 	bl	80046e0 <HAL_UART_Init>
 8001654:	1e03      	subs	r3, r0, #0
 8001656:	d001      	beq.n	800165c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001658:	f7ff f93c 	bl	80008d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <MX_USART2_UART_Init+0x94>)
 800165e:	2100      	movs	r1, #0
 8001660:	0018      	movs	r0, r3
 8001662:	f003 fcd7 	bl	8005014 <HAL_UARTEx_SetTxFifoThreshold>
 8001666:	1e03      	subs	r3, r0, #0
 8001668:	d001      	beq.n	800166e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800166a:	f7ff f933 	bl	80008d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <MX_USART2_UART_Init+0x94>)
 8001670:	2100      	movs	r1, #0
 8001672:	0018      	movs	r0, r3
 8001674:	f003 fd0e 	bl	8005094 <HAL_UARTEx_SetRxFifoThreshold>
 8001678:	1e03      	subs	r3, r0, #0
 800167a:	d001      	beq.n	8001680 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800167c:	f7ff f92a 	bl	80008d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <MX_USART2_UART_Init+0x94>)
 8001682:	0018      	movs	r0, r3
 8001684:	f003 fc8c 	bl	8004fa0 <HAL_UARTEx_DisableFifoMode>
 8001688:	1e03      	subs	r3, r0, #0
 800168a:	d001      	beq.n	8001690 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800168c:	f7ff f922 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001690:	46c0      	nop			; (mov r8, r8)
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	200003bc 	.word	0x200003bc
 800169c:	40004400 	.word	0x40004400

080016a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b093      	sub	sp, #76	; 0x4c
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	2334      	movs	r3, #52	; 0x34
 80016aa:	18fb      	adds	r3, r7, r3
 80016ac:	0018      	movs	r0, r3
 80016ae:	2314      	movs	r3, #20
 80016b0:	001a      	movs	r2, r3
 80016b2:	2100      	movs	r1, #0
 80016b4:	f004 feb4 	bl	8006420 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b8:	2418      	movs	r4, #24
 80016ba:	193b      	adds	r3, r7, r4
 80016bc:	0018      	movs	r0, r3
 80016be:	231c      	movs	r3, #28
 80016c0:	001a      	movs	r2, r3
 80016c2:	2100      	movs	r1, #0
 80016c4:	f004 feac 	bl	8006420 <memset>
  if(uartHandle->Instance==USART1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a44      	ldr	r2, [pc, #272]	; (80017e0 <HAL_UART_MspInit+0x140>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d13e      	bne.n	8001750 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016d2:	193b      	adds	r3, r7, r4
 80016d4:	2201      	movs	r2, #1
 80016d6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80016d8:	193b      	adds	r3, r7, r4
 80016da:	2200      	movs	r2, #0
 80016dc:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016de:	193b      	adds	r3, r7, r4
 80016e0:	0018      	movs	r0, r3
 80016e2:	f001 fcef 	bl	80030c4 <HAL_RCCEx_PeriphCLKConfig>
 80016e6:	1e03      	subs	r3, r0, #0
 80016e8:	d001      	beq.n	80016ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016ea:	f7ff f8f3 	bl	80008d4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016ee:	4b3d      	ldr	r3, [pc, #244]	; (80017e4 <HAL_UART_MspInit+0x144>)
 80016f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f2:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <HAL_UART_MspInit+0x144>)
 80016f4:	2180      	movs	r1, #128	; 0x80
 80016f6:	01c9      	lsls	r1, r1, #7
 80016f8:	430a      	orrs	r2, r1
 80016fa:	641a      	str	r2, [r3, #64]	; 0x40
 80016fc:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <HAL_UART_MspInit+0x144>)
 80016fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	01db      	lsls	r3, r3, #7
 8001704:	4013      	ands	r3, r2
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170a:	4b36      	ldr	r3, [pc, #216]	; (80017e4 <HAL_UART_MspInit+0x144>)
 800170c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800170e:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <HAL_UART_MspInit+0x144>)
 8001710:	2104      	movs	r1, #4
 8001712:	430a      	orrs	r2, r1
 8001714:	635a      	str	r2, [r3, #52]	; 0x34
 8001716:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <HAL_UART_MspInit+0x144>)
 8001718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171a:	2204      	movs	r2, #4
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_VCP_TX_Pin|USART1_RX_VCP_RX_Pin;
 8001722:	2134      	movs	r1, #52	; 0x34
 8001724:	187b      	adds	r3, r7, r1
 8001726:	2230      	movs	r2, #48	; 0x30
 8001728:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	187b      	adds	r3, r7, r1
 800172c:	2202      	movs	r2, #2
 800172e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	187b      	adds	r3, r7, r1
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	187b      	adds	r3, r7, r1
 8001738:	2200      	movs	r2, #0
 800173a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800173c:	187b      	adds	r3, r7, r1
 800173e:	2201      	movs	r2, #1
 8001740:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001742:	187b      	adds	r3, r7, r1
 8001744:	4a28      	ldr	r2, [pc, #160]	; (80017e8 <HAL_UART_MspInit+0x148>)
 8001746:	0019      	movs	r1, r3
 8001748:	0010      	movs	r0, r2
 800174a:	f000 fe09 	bl	8002360 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800174e:	e043      	b.n	80017d8 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a25      	ldr	r2, [pc, #148]	; (80017ec <HAL_UART_MspInit+0x14c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d13e      	bne.n	80017d8 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800175a:	2118      	movs	r1, #24
 800175c:	187b      	adds	r3, r7, r1
 800175e:	2202      	movs	r2, #2
 8001760:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001762:	187b      	adds	r3, r7, r1
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001768:	187b      	adds	r3, r7, r1
 800176a:	0018      	movs	r0, r3
 800176c:	f001 fcaa 	bl	80030c4 <HAL_RCCEx_PeriphCLKConfig>
 8001770:	1e03      	subs	r3, r0, #0
 8001772:	d001      	beq.n	8001778 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001774:	f7ff f8ae 	bl	80008d4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <HAL_UART_MspInit+0x144>)
 800177a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_UART_MspInit+0x144>)
 800177e:	2180      	movs	r1, #128	; 0x80
 8001780:	0289      	lsls	r1, r1, #10
 8001782:	430a      	orrs	r2, r1
 8001784:	63da      	str	r2, [r3, #60]	; 0x3c
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <HAL_UART_MspInit+0x144>)
 8001788:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	029b      	lsls	r3, r3, #10
 800178e:	4013      	ands	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <HAL_UART_MspInit+0x144>)
 8001796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_UART_MspInit+0x144>)
 800179a:	2108      	movs	r1, #8
 800179c:	430a      	orrs	r2, r1
 800179e:	635a      	str	r2, [r3, #52]	; 0x34
 80017a0:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <HAL_UART_MspInit+0x144>)
 80017a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a4:	2208      	movs	r2, #8
 80017a6:	4013      	ands	r3, r2
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_LIDAR_TX_Pin|USART2_RX_LIDAR_RX_Pin;
 80017ac:	2134      	movs	r1, #52	; 0x34
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	2260      	movs	r2, #96	; 0x60
 80017b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	187b      	adds	r3, r7, r1
 80017b6:	2202      	movs	r2, #2
 80017b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	187b      	adds	r3, r7, r1
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	187b      	adds	r3, r7, r1
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 80017c6:	187b      	adds	r3, r7, r1
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017cc:	187b      	adds	r3, r7, r1
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <HAL_UART_MspInit+0x150>)
 80017d0:	0019      	movs	r1, r3
 80017d2:	0010      	movs	r0, r2
 80017d4:	f000 fdc4 	bl	8002360 <HAL_GPIO_Init>
}
 80017d8:	46c0      	nop			; (mov r8, r8)
 80017da:	46bd      	mov	sp, r7
 80017dc:	b013      	add	sp, #76	; 0x4c
 80017de:	bd90      	pop	{r4, r7, pc}
 80017e0:	40013800 	.word	0x40013800
 80017e4:	40021000 	.word	0x40021000
 80017e8:	50000800 	.word	0x50000800
 80017ec:	40004400 	.word	0x40004400
 80017f0:	50000c00 	.word	0x50000c00

080017f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017f4:	480d      	ldr	r0, [pc, #52]	; (800182c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017f8:	f7ff f9f6 	bl	8000be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017fc:	480c      	ldr	r0, [pc, #48]	; (8001830 <LoopForever+0x6>)
  ldr r1, =_edata
 80017fe:	490d      	ldr	r1, [pc, #52]	; (8001834 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <LoopForever+0xe>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001814:	4c0a      	ldr	r4, [pc, #40]	; (8001840 <LoopForever+0x16>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001822:	f004 fe59 	bl	80064d8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001826:	f7fe ffb3 	bl	8000790 <main>

0800182a <LoopForever>:

LoopForever:
  b LoopForever
 800182a:	e7fe      	b.n	800182a <LoopForever>
  ldr   r0, =_estack
 800182c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001834:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001838:	08007210 	.word	0x08007210
  ldr r2, =_sbss
 800183c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001840:	200012ec 	.word	0x200012ec

08001844 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC1_IRQHandler>
	...

08001848 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800184e:	1dfb      	adds	r3, r7, #7
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_Init+0x3c>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_Init+0x3c>)
 800185a:	2180      	movs	r1, #128	; 0x80
 800185c:	0049      	lsls	r1, r1, #1
 800185e:	430a      	orrs	r2, r1
 8001860:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001862:	2003      	movs	r0, #3
 8001864:	f7ff f88e 	bl	8000984 <HAL_InitTick>
 8001868:	1e03      	subs	r3, r0, #0
 800186a:	d003      	beq.n	8001874 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800186c:	1dfb      	adds	r3, r7, #7
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
 8001872:	e001      	b.n	8001878 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001874:	f7ff f85c 	bl	8000930 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001878:	1dfb      	adds	r3, r7, #7
 800187a:	781b      	ldrb	r3, [r3, #0]
}
 800187c:	0018      	movs	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	b002      	add	sp, #8
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40022000 	.word	0x40022000

08001888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_IncTick+0x1c>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	001a      	movs	r2, r3
 8001892:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_IncTick+0x20>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	18d2      	adds	r2, r2, r3
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_IncTick+0x20>)
 800189a:	601a      	str	r2, [r3, #0]
}
 800189c:	46c0      	nop			; (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	20000008 	.word	0x20000008
 80018a8:	20000450 	.word	0x20000450

080018ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  return uwTick;
 80018b0:	4b02      	ldr	r3, [pc, #8]	; (80018bc <HAL_GetTick+0x10>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	0018      	movs	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	20000450 	.word	0x20000450

080018c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c8:	f7ff fff0 	bl	80018ac <HAL_GetTick>
 80018cc:	0003      	movs	r3, r0
 80018ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	3301      	adds	r3, #1
 80018d8:	d005      	beq.n	80018e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_Delay+0x44>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	001a      	movs	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	189b      	adds	r3, r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	f7ff ffe0 	bl	80018ac <HAL_GetTick>
 80018ec:	0002      	movs	r2, r0
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d8f7      	bhi.n	80018e8 <HAL_Delay+0x28>
  {
  }
}
 80018f8:	46c0      	nop			; (mov r8, r8)
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b004      	add	sp, #16
 8001900:	bd80      	pop	{r7, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	20000008 	.word	0x20000008

08001908 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a05      	ldr	r2, [pc, #20]	; (800192c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001918:	401a      	ands	r2, r3
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	601a      	str	r2, [r3, #0]
}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	46bd      	mov	sp, r7
 8001926:	b002      	add	sp, #8
 8001928:	bd80      	pop	{r7, pc}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	fe3fffff 	.word	0xfe3fffff

08001930 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	23e0      	movs	r3, #224	; 0xe0
 800193e:	045b      	lsls	r3, r3, #17
 8001940:	4013      	ands	r3, r2
}
 8001942:	0018      	movs	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	b002      	add	sp, #8
 8001948:	bd80      	pop	{r7, pc}

0800194a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	2104      	movs	r1, #4
 800195e:	400a      	ands	r2, r1
 8001960:	2107      	movs	r1, #7
 8001962:	4091      	lsls	r1, r2
 8001964:	000a      	movs	r2, r1
 8001966:	43d2      	mvns	r2, r2
 8001968:	401a      	ands	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2104      	movs	r1, #4
 800196e:	400b      	ands	r3, r1
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	4099      	lsls	r1, r3
 8001974:	000b      	movs	r3, r1
 8001976:	431a      	orrs	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800197c:	46c0      	nop			; (mov r8, r8)
 800197e:	46bd      	mov	sp, r7
 8001980:	b004      	add	sp, #16
 8001982:	bd80      	pop	{r7, pc}

08001984 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	2104      	movs	r1, #4
 8001996:	400a      	ands	r2, r1
 8001998:	2107      	movs	r1, #7
 800199a:	4091      	lsls	r1, r2
 800199c:	000a      	movs	r2, r1
 800199e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	2104      	movs	r1, #4
 80019a4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80019a6:	40da      	lsrs	r2, r3
 80019a8:	0013      	movs	r3, r2
}
 80019aa:	0018      	movs	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b002      	add	sp, #8
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b084      	sub	sp, #16
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	211f      	movs	r1, #31
 80019c6:	400a      	ands	r2, r1
 80019c8:	210f      	movs	r1, #15
 80019ca:	4091      	lsls	r1, r2
 80019cc:	000a      	movs	r2, r1
 80019ce:	43d2      	mvns	r2, r2
 80019d0:	401a      	ands	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	0e9b      	lsrs	r3, r3, #26
 80019d6:	210f      	movs	r1, #15
 80019d8:	4019      	ands	r1, r3
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	201f      	movs	r0, #31
 80019de:	4003      	ands	r3, r0
 80019e0:	4099      	lsls	r1, r3
 80019e2:	000b      	movs	r3, r1
 80019e4:	431a      	orrs	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b004      	add	sp, #16
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	035b      	lsls	r3, r3, #13
 8001a04:	0b5b      	lsrs	r3, r3, #13
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a0c:	46c0      	nop			; (mov r8, r8)
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	b002      	add	sp, #8
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	0352      	lsls	r2, r2, #13
 8001a26:	0b52      	lsrs	r2, r2, #13
 8001a28:	43d2      	mvns	r2, r2
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a30:	46c0      	nop			; (mov r8, r8)
 8001a32:	46bd      	mov	sp, r7
 8001a34:	b002      	add	sp, #8
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	0212      	lsls	r2, r2, #8
 8001a4c:	43d2      	mvns	r2, r2
 8001a4e:	401a      	ands	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	021b      	lsls	r3, r3, #8
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	400b      	ands	r3, r1
 8001a58:	4904      	ldr	r1, [pc, #16]	; (8001a6c <LL_ADC_SetChannelSamplingTime+0x34>)
 8001a5a:	400b      	ands	r3, r1
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b004      	add	sp, #16
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	07ffff00 	.word	0x07ffff00

08001a70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <LL_ADC_EnableInternalRegulator+0x24>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2280      	movs	r2, #128	; 0x80
 8001a82:	0552      	lsls	r2, r2, #21
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b002      	add	sp, #8
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	6fffffe8 	.word	0x6fffffe8

08001a98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	055b      	lsls	r3, r3, #21
 8001aa8:	401a      	ands	r2, r3
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	055b      	lsls	r3, r3, #21
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d101      	bne.n	8001ab6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	0018      	movs	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b002      	add	sp, #8
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2201      	movs	r2, #1
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <LL_ADC_IsEnabled+0x18>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <LL_ADC_IsEnabled+0x1a>
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	0018      	movs	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b002      	add	sp, #8
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2204      	movs	r2, #4
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d101      	bne.n	8001afa <LL_ADC_REG_IsConversionOngoing+0x18>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	0018      	movs	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b002      	add	sp, #8
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0c:	231f      	movs	r3, #31
 8001b0e:	18fb      	adds	r3, r7, r3
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e17f      	b.n	8001e2a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10a      	bne.n	8001b48 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	0018      	movs	r0, r3
 8001b36:	f7fe fd39 	bl	80005ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2254      	movs	r2, #84	; 0x54
 8001b44:	2100      	movs	r1, #0
 8001b46:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f7ff ffa3 	bl	8001a98 <LL_ADC_IsInternalRegulatorEnabled>
 8001b52:	1e03      	subs	r3, r0, #0
 8001b54:	d115      	bne.n	8001b82 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f7ff ff88 	bl	8001a70 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b60:	4bb4      	ldr	r3, [pc, #720]	; (8001e34 <HAL_ADC_Init+0x330>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	49b4      	ldr	r1, [pc, #720]	; (8001e38 <HAL_ADC_Init+0x334>)
 8001b66:	0018      	movs	r0, r3
 8001b68:	f7fe fad8 	bl	800011c <__udivsi3>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	3301      	adds	r3, #1
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b74:	e002      	b.n	8001b7c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f9      	bne.n	8001b76 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	0018      	movs	r0, r3
 8001b88:	f7ff ff86 	bl	8001a98 <LL_ADC_IsInternalRegulatorEnabled>
 8001b8c:	1e03      	subs	r3, r0, #0
 8001b8e:	d10f      	bne.n	8001bb0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b94:	2210      	movs	r2, #16
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ba8:	231f      	movs	r3, #31
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f7ff ff94 	bl	8001ae2 <LL_ADC_REG_IsConversionOngoing>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	2210      	movs	r2, #16
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d000      	beq.n	8001bca <HAL_ADC_Init+0xc6>
 8001bc8:	e122      	b.n	8001e10 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d000      	beq.n	8001bd2 <HAL_ADC_Init+0xce>
 8001bd0:	e11e      	b.n	8001e10 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd6:	4a99      	ldr	r2, [pc, #612]	; (8001e3c <HAL_ADC_Init+0x338>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2202      	movs	r2, #2
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	0018      	movs	r0, r3
 8001be8:	f7ff ff6a 	bl	8001ac0 <LL_ADC_IsEnabled>
 8001bec:	1e03      	subs	r3, r0, #0
 8001bee:	d000      	beq.n	8001bf2 <HAL_ADC_Init+0xee>
 8001bf0:	e0ad      	b.n	8001d4e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	7e1b      	ldrb	r3, [r3, #24]
 8001bfa:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001bfc:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	7e5b      	ldrb	r3, [r3, #25]
 8001c02:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001c04:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	7e9b      	ldrb	r3, [r3, #26]
 8001c0a:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001c0c:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <HAL_ADC_Init+0x118>
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	015b      	lsls	r3, r3, #5
 8001c1a:	e000      	b.n	8001c1e <HAL_ADC_Init+0x11a>
 8001c1c:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001c1e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001c24:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	da04      	bge.n	8001c38 <HAL_ADC_Init+0x134>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	085b      	lsrs	r3, r3, #1
 8001c36:	e001      	b.n	8001c3c <HAL_ADC_Init+0x138>
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001c3c:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	212c      	movs	r1, #44	; 0x2c
 8001c42:	5c5b      	ldrb	r3, [r3, r1]
 8001c44:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001c46:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2220      	movs	r2, #32
 8001c52:	5c9b      	ldrb	r3, [r3, r2]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d115      	bne.n	8001c84 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7e9b      	ldrb	r3, [r3, #26]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d105      	bne.n	8001c6c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	2280      	movs	r2, #128	; 0x80
 8001c64:	0252      	lsls	r2, r2, #9
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	e00b      	b.n	8001c84 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c70:	2220      	movs	r2, #32
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00a      	beq.n	8001ca2 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c90:	23e0      	movs	r3, #224	; 0xe0
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	4a65      	ldr	r2, [pc, #404]	; (8001e40 <HAL_ADC_Init+0x33c>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	0019      	movs	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	0f9b      	lsrs	r3, r3, #30
 8001cbe:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	223c      	movs	r2, #60	; 0x3c
 8001cd0:	5c9b      	ldrb	r3, [r3, r2]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d111      	bne.n	8001cfa <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	0f9b      	lsrs	r3, r3, #30
 8001cdc:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ce2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001ce8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001cee:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	4a50      	ldr	r2, [pc, #320]	; (8001e44 <HAL_ADC_Init+0x340>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	0019      	movs	r1, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	23c0      	movs	r3, #192	; 0xc0
 8001d16:	061b      	lsls	r3, r3, #24
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d018      	beq.n	8001d4e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	05db      	lsls	r3, r3, #23
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d012      	beq.n	8001d4e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	061b      	lsls	r3, r3, #24
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d00c      	beq.n	8001d4e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001d34:	4b44      	ldr	r3, [pc, #272]	; (8001e48 <HAL_ADC_Init+0x344>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a44      	ldr	r2, [pc, #272]	; (8001e4c <HAL_ADC_Init+0x348>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	0019      	movs	r1, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	23f0      	movs	r3, #240	; 0xf0
 8001d44:	039b      	lsls	r3, r3, #14
 8001d46:	401a      	ands	r2, r3
 8001d48:	4b3f      	ldr	r3, [pc, #252]	; (8001e48 <HAL_ADC_Init+0x344>)
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d56:	001a      	movs	r2, r3
 8001d58:	2100      	movs	r1, #0
 8001d5a:	f7ff fdf6 	bl	800194a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d66:	493a      	ldr	r1, [pc, #232]	; (8001e50 <HAL_ADC_Init+0x34c>)
 8001d68:	001a      	movs	r2, r3
 8001d6a:	f7ff fdee 	bl	800194a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d109      	bne.n	8001d8a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2110      	movs	r1, #16
 8001d82:	4249      	negs	r1, r1
 8001d84:	430a      	orrs	r2, r1
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28
 8001d88:	e018      	b.n	8001dbc <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691a      	ldr	r2, [r3, #16]
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	039b      	lsls	r3, r3, #14
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d112      	bne.n	8001dbc <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	221c      	movs	r2, #28
 8001da6:	4013      	ands	r3, r2
 8001da8:	2210      	movs	r2, #16
 8001daa:	4252      	negs	r2, r2
 8001dac:	409a      	lsls	r2, r3
 8001dae:	0011      	movs	r1, r2
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f7ff fdde 	bl	8001984 <LL_ADC_GetSamplingTimeCommonChannels>
 8001dc8:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d10b      	bne.n	8001dea <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ddc:	2203      	movs	r2, #3
 8001dde:	4393      	bics	r3, r2
 8001de0:	2201      	movs	r2, #1
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001de8:	e01c      	b.n	8001e24 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dee:	2212      	movs	r2, #18
 8001df0:	4393      	bics	r3, r2
 8001df2:	2210      	movs	r2, #16
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfe:	2201      	movs	r2, #1
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001e06:	231f      	movs	r3, #31
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001e0e:	e009      	b.n	8001e24 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e14:	2210      	movs	r2, #16
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e1c:	231f      	movs	r3, #31
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001e24:	231f      	movs	r3, #31
 8001e26:	18fb      	adds	r3, r7, r3
 8001e28:	781b      	ldrb	r3, [r3, #0]
}
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b008      	add	sp, #32
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	20000000 	.word	0x20000000
 8001e38:	00030d40 	.word	0x00030d40
 8001e3c:	fffffefd 	.word	0xfffffefd
 8001e40:	fffe0201 	.word	0xfffe0201
 8001e44:	1ffffc02 	.word	0x1ffffc02
 8001e48:	40012708 	.word	0x40012708
 8001e4c:	ffc3ffff 	.word	0xffc3ffff
 8001e50:	07ffff04 	.word	0x07ffff04

08001e54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e5e:	2317      	movs	r3, #23
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2254      	movs	r2, #84	; 0x54
 8001e6e:	5c9b      	ldrb	r3, [r3, r2]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x24>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e1c0      	b.n	80021fa <HAL_ADC_ConfigChannel+0x3a6>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2254      	movs	r2, #84	; 0x54
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0018      	movs	r0, r3
 8001e86:	f7ff fe2c 	bl	8001ae2 <LL_ADC_REG_IsConversionOngoing>
 8001e8a:	1e03      	subs	r3, r0, #0
 8001e8c:	d000      	beq.n	8001e90 <HAL_ADC_ConfigChannel+0x3c>
 8001e8e:	e1a3      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d100      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x46>
 8001e98:	e143      	b.n	8002122 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	2380      	movs	r3, #128	; 0x80
 8001ea0:	061b      	lsls	r3, r3, #24
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d004      	beq.n	8001eb0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001eaa:	4ac1      	ldr	r2, [pc, #772]	; (80021b0 <HAL_ADC_ConfigChannel+0x35c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d108      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	0019      	movs	r1, r3
 8001eba:	0010      	movs	r0, r2
 8001ebc:	f7ff fd99 	bl	80019f2 <LL_ADC_REG_SetSequencerChAdd>
 8001ec0:	e0c9      	b.n	8002056 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	211f      	movs	r1, #31
 8001ecc:	400b      	ands	r3, r1
 8001ece:	210f      	movs	r1, #15
 8001ed0:	4099      	lsls	r1, r3
 8001ed2:	000b      	movs	r3, r1
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	0019      	movs	r1, r3
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	035b      	lsls	r3, r3, #13
 8001ee0:	0b5b      	lsrs	r3, r3, #13
 8001ee2:	d105      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x9c>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	0e9b      	lsrs	r3, r3, #26
 8001eea:	221f      	movs	r2, #31
 8001eec:	4013      	ands	r3, r2
 8001eee:	e098      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1ce>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d000      	beq.n	8001efc <HAL_ADC_ConfigChannel+0xa8>
 8001efa:	e091      	b.n	8002020 <HAL_ADC_ConfigChannel+0x1cc>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2202      	movs	r2, #2
 8001f02:	4013      	ands	r3, r2
 8001f04:	d000      	beq.n	8001f08 <HAL_ADC_ConfigChannel+0xb4>
 8001f06:	e089      	b.n	800201c <HAL_ADC_ConfigChannel+0x1c8>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d000      	beq.n	8001f14 <HAL_ADC_ConfigChannel+0xc0>
 8001f12:	e081      	b.n	8002018 <HAL_ADC_ConfigChannel+0x1c4>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2208      	movs	r2, #8
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d000      	beq.n	8001f20 <HAL_ADC_ConfigChannel+0xcc>
 8001f1e:	e079      	b.n	8002014 <HAL_ADC_ConfigChannel+0x1c0>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2210      	movs	r2, #16
 8001f26:	4013      	ands	r3, r2
 8001f28:	d000      	beq.n	8001f2c <HAL_ADC_ConfigChannel+0xd8>
 8001f2a:	e071      	b.n	8002010 <HAL_ADC_ConfigChannel+0x1bc>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2220      	movs	r2, #32
 8001f32:	4013      	ands	r3, r2
 8001f34:	d000      	beq.n	8001f38 <HAL_ADC_ConfigChannel+0xe4>
 8001f36:	e069      	b.n	800200c <HAL_ADC_ConfigChannel+0x1b8>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2240      	movs	r2, #64	; 0x40
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d000      	beq.n	8001f44 <HAL_ADC_ConfigChannel+0xf0>
 8001f42:	e061      	b.n	8002008 <HAL_ADC_ConfigChannel+0x1b4>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2280      	movs	r2, #128	; 0x80
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d000      	beq.n	8001f50 <HAL_ADC_ConfigChannel+0xfc>
 8001f4e:	e059      	b.n	8002004 <HAL_ADC_ConfigChannel+0x1b0>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d151      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1ac>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4013      	ands	r3, r2
 8001f66:	d149      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x1a8>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4013      	ands	r3, r2
 8001f72:	d141      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x1a4>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d139      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x1a0>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	015b      	lsls	r3, r3, #5
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d131      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x19c>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	019b      	lsls	r3, r3, #6
 8001f94:	4013      	ands	r3, r2
 8001f96:	d129      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x198>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	01db      	lsls	r3, r3, #7
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d121      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x194>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	021b      	lsls	r3, r3, #8
 8001fac:	4013      	ands	r3, r2
 8001fae:	d119      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x190>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	025b      	lsls	r3, r3, #9
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d111      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x18c>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	029b      	lsls	r3, r3, #10
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d109      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x188>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	02db      	lsls	r3, r3, #11
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d001      	beq.n	8001fd8 <HAL_ADC_ConfigChannel+0x184>
 8001fd4:	2312      	movs	r3, #18
 8001fd6:	e024      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1ce>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	e022      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1ce>
 8001fdc:	2311      	movs	r3, #17
 8001fde:	e020      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1ce>
 8001fe0:	2310      	movs	r3, #16
 8001fe2:	e01e      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1ce>
 8001fe4:	230f      	movs	r3, #15
 8001fe6:	e01c      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1ce>
 8001fe8:	230e      	movs	r3, #14
 8001fea:	e01a      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1ce>
 8001fec:	230d      	movs	r3, #13
 8001fee:	e018      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1ce>
 8001ff0:	230c      	movs	r3, #12
 8001ff2:	e016      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1ce>
 8001ff4:	230b      	movs	r3, #11
 8001ff6:	e014      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1ce>
 8001ff8:	230a      	movs	r3, #10
 8001ffa:	e012      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1ce>
 8001ffc:	2309      	movs	r3, #9
 8001ffe:	e010      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1ce>
 8002000:	2308      	movs	r3, #8
 8002002:	e00e      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1ce>
 8002004:	2307      	movs	r3, #7
 8002006:	e00c      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1ce>
 8002008:	2306      	movs	r3, #6
 800200a:	e00a      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1ce>
 800200c:	2305      	movs	r3, #5
 800200e:	e008      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1ce>
 8002010:	2304      	movs	r3, #4
 8002012:	e006      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1ce>
 8002014:	2303      	movs	r3, #3
 8002016:	e004      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1ce>
 8002018:	2302      	movs	r3, #2
 800201a:	e002      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1ce>
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1ce>
 8002020:	2300      	movs	r3, #0
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	6852      	ldr	r2, [r2, #4]
 8002026:	201f      	movs	r0, #31
 8002028:	4002      	ands	r2, r0
 800202a:	4093      	lsls	r3, r2
 800202c:	000a      	movs	r2, r1
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	089b      	lsrs	r3, r3, #2
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	429a      	cmp	r2, r3
 8002042:	d808      	bhi.n	8002056 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	6859      	ldr	r1, [r3, #4]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	001a      	movs	r2, r3
 8002052:	f7ff fcae 	bl	80019b2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6819      	ldr	r1, [r3, #0]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	001a      	movs	r2, r3
 8002064:	f7ff fce8 	bl	8001a38 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	db00      	blt.n	8002072 <HAL_ADC_ConfigChannel+0x21e>
 8002070:	e0bc      	b.n	80021ec <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002072:	4b50      	ldr	r3, [pc, #320]	; (80021b4 <HAL_ADC_ConfigChannel+0x360>)
 8002074:	0018      	movs	r0, r3
 8002076:	f7ff fc5b 	bl	8001930 <LL_ADC_GetCommonPathInternalCh>
 800207a:	0003      	movs	r3, r0
 800207c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a4d      	ldr	r2, [pc, #308]	; (80021b8 <HAL_ADC_ConfigChannel+0x364>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d122      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	2380      	movs	r3, #128	; 0x80
 800208c:	041b      	lsls	r3, r3, #16
 800208e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002090:	d11d      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	2280      	movs	r2, #128	; 0x80
 8002096:	0412      	lsls	r2, r2, #16
 8002098:	4313      	orrs	r3, r2
 800209a:	4a46      	ldr	r2, [pc, #280]	; (80021b4 <HAL_ADC_ConfigChannel+0x360>)
 800209c:	0019      	movs	r1, r3
 800209e:	0010      	movs	r0, r2
 80020a0:	f7ff fc32 	bl	8001908 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020a4:	4b45      	ldr	r3, [pc, #276]	; (80021bc <HAL_ADC_ConfigChannel+0x368>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4945      	ldr	r1, [pc, #276]	; (80021c0 <HAL_ADC_ConfigChannel+0x36c>)
 80020aa:	0018      	movs	r0, r3
 80020ac:	f7fe f836 	bl	800011c <__udivsi3>
 80020b0:	0003      	movs	r3, r0
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	0013      	movs	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	189b      	adds	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020be:	e002      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f9      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020cc:	e08e      	b.n	80021ec <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a3c      	ldr	r2, [pc, #240]	; (80021c4 <HAL_ADC_ConfigChannel+0x370>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d10e      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	045b      	lsls	r3, r3, #17
 80020de:	4013      	ands	r3, r2
 80020e0:	d109      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	2280      	movs	r2, #128	; 0x80
 80020e6:	0452      	lsls	r2, r2, #17
 80020e8:	4313      	orrs	r3, r2
 80020ea:	4a32      	ldr	r2, [pc, #200]	; (80021b4 <HAL_ADC_ConfigChannel+0x360>)
 80020ec:	0019      	movs	r1, r3
 80020ee:	0010      	movs	r0, r2
 80020f0:	f7ff fc0a 	bl	8001908 <LL_ADC_SetCommonPathInternalCh>
 80020f4:	e07a      	b.n	80021ec <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a33      	ldr	r2, [pc, #204]	; (80021c8 <HAL_ADC_ConfigChannel+0x374>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d000      	beq.n	8002102 <HAL_ADC_ConfigChannel+0x2ae>
 8002100:	e074      	b.n	80021ec <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	03db      	lsls	r3, r3, #15
 8002108:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800210a:	d000      	beq.n	800210e <HAL_ADC_ConfigChannel+0x2ba>
 800210c:	e06e      	b.n	80021ec <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	2280      	movs	r2, #128	; 0x80
 8002112:	03d2      	lsls	r2, r2, #15
 8002114:	4313      	orrs	r3, r2
 8002116:	4a27      	ldr	r2, [pc, #156]	; (80021b4 <HAL_ADC_ConfigChannel+0x360>)
 8002118:	0019      	movs	r1, r3
 800211a:	0010      	movs	r0, r2
 800211c:	f7ff fbf4 	bl	8001908 <LL_ADC_SetCommonPathInternalCh>
 8002120:	e064      	b.n	80021ec <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691a      	ldr	r2, [r3, #16]
 8002126:	2380      	movs	r3, #128	; 0x80
 8002128:	061b      	lsls	r3, r3, #24
 800212a:	429a      	cmp	r2, r3
 800212c:	d004      	beq.n	8002138 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002132:	4a1f      	ldr	r2, [pc, #124]	; (80021b0 <HAL_ADC_ConfigChannel+0x35c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d107      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	0019      	movs	r1, r3
 8002142:	0010      	movs	r0, r2
 8002144:	f7ff fc66 	bl	8001a14 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	da4d      	bge.n	80021ec <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002150:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <HAL_ADC_ConfigChannel+0x360>)
 8002152:	0018      	movs	r0, r3
 8002154:	f7ff fbec 	bl	8001930 <LL_ADC_GetCommonPathInternalCh>
 8002158:	0003      	movs	r3, r0
 800215a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a15      	ldr	r2, [pc, #84]	; (80021b8 <HAL_ADC_ConfigChannel+0x364>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d108      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4a18      	ldr	r2, [pc, #96]	; (80021cc <HAL_ADC_ConfigChannel+0x378>)
 800216a:	4013      	ands	r3, r2
 800216c:	4a11      	ldr	r2, [pc, #68]	; (80021b4 <HAL_ADC_ConfigChannel+0x360>)
 800216e:	0019      	movs	r1, r3
 8002170:	0010      	movs	r0, r2
 8002172:	f7ff fbc9 	bl	8001908 <LL_ADC_SetCommonPathInternalCh>
 8002176:	e039      	b.n	80021ec <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a11      	ldr	r2, [pc, #68]	; (80021c4 <HAL_ADC_ConfigChannel+0x370>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d108      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <HAL_ADC_ConfigChannel+0x37c>)
 8002186:	4013      	ands	r3, r2
 8002188:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <HAL_ADC_ConfigChannel+0x360>)
 800218a:	0019      	movs	r1, r3
 800218c:	0010      	movs	r0, r2
 800218e:	f7ff fbbb 	bl	8001908 <LL_ADC_SetCommonPathInternalCh>
 8002192:	e02b      	b.n	80021ec <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a0b      	ldr	r2, [pc, #44]	; (80021c8 <HAL_ADC_ConfigChannel+0x374>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d126      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4a0c      	ldr	r2, [pc, #48]	; (80021d4 <HAL_ADC_ConfigChannel+0x380>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	4a03      	ldr	r2, [pc, #12]	; (80021b4 <HAL_ADC_ConfigChannel+0x360>)
 80021a6:	0019      	movs	r1, r3
 80021a8:	0010      	movs	r0, r2
 80021aa:	f7ff fbad 	bl	8001908 <LL_ADC_SetCommonPathInternalCh>
 80021ae:	e01d      	b.n	80021ec <HAL_ADC_ConfigChannel+0x398>
 80021b0:	80000004 	.word	0x80000004
 80021b4:	40012708 	.word	0x40012708
 80021b8:	b0001000 	.word	0xb0001000
 80021bc:	20000000 	.word	0x20000000
 80021c0:	00030d40 	.word	0x00030d40
 80021c4:	b8004000 	.word	0xb8004000
 80021c8:	b4002000 	.word	0xb4002000
 80021cc:	ff7fffff 	.word	0xff7fffff
 80021d0:	feffffff 	.word	0xfeffffff
 80021d4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021dc:	2220      	movs	r2, #32
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021e4:	2317      	movs	r3, #23
 80021e6:	18fb      	adds	r3, r7, r3
 80021e8:	2201      	movs	r2, #1
 80021ea:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2254      	movs	r2, #84	; 0x54
 80021f0:	2100      	movs	r1, #0
 80021f2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80021f4:	2317      	movs	r3, #23
 80021f6:	18fb      	adds	r3, r7, r3
 80021f8:	781b      	ldrb	r3, [r3, #0]
}
 80021fa:	0018      	movs	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	b006      	add	sp, #24
 8002200:	bd80      	pop	{r7, pc}
 8002202:	46c0      	nop			; (mov r8, r8)

08002204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	0002      	movs	r2, r0
 800220c:	1dfb      	adds	r3, r7, #7
 800220e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002210:	1dfb      	adds	r3, r7, #7
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b7f      	cmp	r3, #127	; 0x7f
 8002216:	d809      	bhi.n	800222c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002218:	1dfb      	adds	r3, r7, #7
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	001a      	movs	r2, r3
 800221e:	231f      	movs	r3, #31
 8002220:	401a      	ands	r2, r3
 8002222:	4b04      	ldr	r3, [pc, #16]	; (8002234 <__NVIC_EnableIRQ+0x30>)
 8002224:	2101      	movs	r1, #1
 8002226:	4091      	lsls	r1, r2
 8002228:	000a      	movs	r2, r1
 800222a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	b002      	add	sp, #8
 8002232:	bd80      	pop	{r7, pc}
 8002234:	e000e100 	.word	0xe000e100

08002238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002238:	b590      	push	{r4, r7, lr}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	0002      	movs	r2, r0
 8002240:	6039      	str	r1, [r7, #0]
 8002242:	1dfb      	adds	r3, r7, #7
 8002244:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002246:	1dfb      	adds	r3, r7, #7
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b7f      	cmp	r3, #127	; 0x7f
 800224c:	d828      	bhi.n	80022a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800224e:	4a2f      	ldr	r2, [pc, #188]	; (800230c <__NVIC_SetPriority+0xd4>)
 8002250:	1dfb      	adds	r3, r7, #7
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	b25b      	sxtb	r3, r3
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	33c0      	adds	r3, #192	; 0xc0
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	589b      	ldr	r3, [r3, r2]
 800225e:	1dfa      	adds	r2, r7, #7
 8002260:	7812      	ldrb	r2, [r2, #0]
 8002262:	0011      	movs	r1, r2
 8002264:	2203      	movs	r2, #3
 8002266:	400a      	ands	r2, r1
 8002268:	00d2      	lsls	r2, r2, #3
 800226a:	21ff      	movs	r1, #255	; 0xff
 800226c:	4091      	lsls	r1, r2
 800226e:	000a      	movs	r2, r1
 8002270:	43d2      	mvns	r2, r2
 8002272:	401a      	ands	r2, r3
 8002274:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	019b      	lsls	r3, r3, #6
 800227a:	22ff      	movs	r2, #255	; 0xff
 800227c:	401a      	ands	r2, r3
 800227e:	1dfb      	adds	r3, r7, #7
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	0018      	movs	r0, r3
 8002284:	2303      	movs	r3, #3
 8002286:	4003      	ands	r3, r0
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800228c:	481f      	ldr	r0, [pc, #124]	; (800230c <__NVIC_SetPriority+0xd4>)
 800228e:	1dfb      	adds	r3, r7, #7
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	b25b      	sxtb	r3, r3
 8002294:	089b      	lsrs	r3, r3, #2
 8002296:	430a      	orrs	r2, r1
 8002298:	33c0      	adds	r3, #192	; 0xc0
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800229e:	e031      	b.n	8002304 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022a0:	4a1b      	ldr	r2, [pc, #108]	; (8002310 <__NVIC_SetPriority+0xd8>)
 80022a2:	1dfb      	adds	r3, r7, #7
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	0019      	movs	r1, r3
 80022a8:	230f      	movs	r3, #15
 80022aa:	400b      	ands	r3, r1
 80022ac:	3b08      	subs	r3, #8
 80022ae:	089b      	lsrs	r3, r3, #2
 80022b0:	3306      	adds	r3, #6
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	18d3      	adds	r3, r2, r3
 80022b6:	3304      	adds	r3, #4
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	1dfa      	adds	r2, r7, #7
 80022bc:	7812      	ldrb	r2, [r2, #0]
 80022be:	0011      	movs	r1, r2
 80022c0:	2203      	movs	r2, #3
 80022c2:	400a      	ands	r2, r1
 80022c4:	00d2      	lsls	r2, r2, #3
 80022c6:	21ff      	movs	r1, #255	; 0xff
 80022c8:	4091      	lsls	r1, r2
 80022ca:	000a      	movs	r2, r1
 80022cc:	43d2      	mvns	r2, r2
 80022ce:	401a      	ands	r2, r3
 80022d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	019b      	lsls	r3, r3, #6
 80022d6:	22ff      	movs	r2, #255	; 0xff
 80022d8:	401a      	ands	r2, r3
 80022da:	1dfb      	adds	r3, r7, #7
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	0018      	movs	r0, r3
 80022e0:	2303      	movs	r3, #3
 80022e2:	4003      	ands	r3, r0
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022e8:	4809      	ldr	r0, [pc, #36]	; (8002310 <__NVIC_SetPriority+0xd8>)
 80022ea:	1dfb      	adds	r3, r7, #7
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	001c      	movs	r4, r3
 80022f0:	230f      	movs	r3, #15
 80022f2:	4023      	ands	r3, r4
 80022f4:	3b08      	subs	r3, #8
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	430a      	orrs	r2, r1
 80022fa:	3306      	adds	r3, #6
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	18c3      	adds	r3, r0, r3
 8002300:	3304      	adds	r3, #4
 8002302:	601a      	str	r2, [r3, #0]
}
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	b003      	add	sp, #12
 800230a:	bd90      	pop	{r4, r7, pc}
 800230c:	e000e100 	.word	0xe000e100
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	210f      	movs	r1, #15
 8002320:	187b      	adds	r3, r7, r1
 8002322:	1c02      	adds	r2, r0, #0
 8002324:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	187b      	adds	r3, r7, r1
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	b25b      	sxtb	r3, r3
 800232e:	0011      	movs	r1, r2
 8002330:	0018      	movs	r0, r3
 8002332:	f7ff ff81 	bl	8002238 <__NVIC_SetPriority>
}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	46bd      	mov	sp, r7
 800233a:	b004      	add	sp, #16
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	0002      	movs	r2, r0
 8002346:	1dfb      	adds	r3, r7, #7
 8002348:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800234a:	1dfb      	adds	r3, r7, #7
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	b25b      	sxtb	r3, r3
 8002350:	0018      	movs	r0, r3
 8002352:	f7ff ff57 	bl	8002204 <__NVIC_EnableIRQ>
}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	46bd      	mov	sp, r7
 800235a:	b002      	add	sp, #8
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800236e:	e147      	b.n	8002600 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2101      	movs	r1, #1
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4091      	lsls	r1, r2
 800237a:	000a      	movs	r2, r1
 800237c:	4013      	ands	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d100      	bne.n	8002388 <HAL_GPIO_Init+0x28>
 8002386:	e138      	b.n	80025fa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2203      	movs	r2, #3
 800238e:	4013      	ands	r3, r2
 8002390:	2b01      	cmp	r3, #1
 8002392:	d005      	beq.n	80023a0 <HAL_GPIO_Init+0x40>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2203      	movs	r2, #3
 800239a:	4013      	ands	r3, r2
 800239c:	2b02      	cmp	r3, #2
 800239e:	d130      	bne.n	8002402 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	409a      	lsls	r2, r3
 80023ae:	0013      	movs	r3, r2
 80023b0:	43da      	mvns	r2, r3
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	409a      	lsls	r2, r3
 80023c2:	0013      	movs	r3, r2
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023d6:	2201      	movs	r2, #1
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	409a      	lsls	r2, r3
 80023dc:	0013      	movs	r3, r2
 80023de:	43da      	mvns	r2, r3
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	2201      	movs	r2, #1
 80023ee:	401a      	ands	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	409a      	lsls	r2, r3
 80023f4:	0013      	movs	r3, r2
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2203      	movs	r2, #3
 8002408:	4013      	ands	r3, r2
 800240a:	2b03      	cmp	r3, #3
 800240c:	d017      	beq.n	800243e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	2203      	movs	r2, #3
 800241a:	409a      	lsls	r2, r3
 800241c:	0013      	movs	r3, r2
 800241e:	43da      	mvns	r2, r3
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	409a      	lsls	r2, r3
 8002430:	0013      	movs	r3, r2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2203      	movs	r2, #3
 8002444:	4013      	ands	r3, r2
 8002446:	2b02      	cmp	r3, #2
 8002448:	d123      	bne.n	8002492 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	08da      	lsrs	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3208      	adds	r2, #8
 8002452:	0092      	lsls	r2, r2, #2
 8002454:	58d3      	ldr	r3, [r2, r3]
 8002456:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2207      	movs	r2, #7
 800245c:	4013      	ands	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	220f      	movs	r2, #15
 8002462:	409a      	lsls	r2, r3
 8002464:	0013      	movs	r3, r2
 8002466:	43da      	mvns	r2, r3
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2107      	movs	r1, #7
 8002476:	400b      	ands	r3, r1
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	409a      	lsls	r2, r3
 800247c:	0013      	movs	r3, r2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	08da      	lsrs	r2, r3, #3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3208      	adds	r2, #8
 800248c:	0092      	lsls	r2, r2, #2
 800248e:	6939      	ldr	r1, [r7, #16]
 8002490:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	2203      	movs	r2, #3
 800249e:	409a      	lsls	r2, r3
 80024a0:	0013      	movs	r3, r2
 80024a2:	43da      	mvns	r2, r3
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2203      	movs	r2, #3
 80024b0:	401a      	ands	r2, r3
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	409a      	lsls	r2, r3
 80024b8:	0013      	movs	r3, r2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	23c0      	movs	r3, #192	; 0xc0
 80024cc:	029b      	lsls	r3, r3, #10
 80024ce:	4013      	ands	r3, r2
 80024d0:	d100      	bne.n	80024d4 <HAL_GPIO_Init+0x174>
 80024d2:	e092      	b.n	80025fa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80024d4:	4a50      	ldr	r2, [pc, #320]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	3318      	adds	r3, #24
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	589b      	ldr	r3, [r3, r2]
 80024e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2203      	movs	r2, #3
 80024e6:	4013      	ands	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	220f      	movs	r2, #15
 80024ec:	409a      	lsls	r2, r3
 80024ee:	0013      	movs	r3, r2
 80024f0:	43da      	mvns	r2, r3
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	23a0      	movs	r3, #160	; 0xa0
 80024fc:	05db      	lsls	r3, r3, #23
 80024fe:	429a      	cmp	r2, r3
 8002500:	d013      	beq.n	800252a <HAL_GPIO_Init+0x1ca>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a45      	ldr	r2, [pc, #276]	; (800261c <HAL_GPIO_Init+0x2bc>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00d      	beq.n	8002526 <HAL_GPIO_Init+0x1c6>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a44      	ldr	r2, [pc, #272]	; (8002620 <HAL_GPIO_Init+0x2c0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d007      	beq.n	8002522 <HAL_GPIO_Init+0x1c2>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a43      	ldr	r2, [pc, #268]	; (8002624 <HAL_GPIO_Init+0x2c4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d101      	bne.n	800251e <HAL_GPIO_Init+0x1be>
 800251a:	2303      	movs	r3, #3
 800251c:	e006      	b.n	800252c <HAL_GPIO_Init+0x1cc>
 800251e:	2305      	movs	r3, #5
 8002520:	e004      	b.n	800252c <HAL_GPIO_Init+0x1cc>
 8002522:	2302      	movs	r3, #2
 8002524:	e002      	b.n	800252c <HAL_GPIO_Init+0x1cc>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <HAL_GPIO_Init+0x1cc>
 800252a:	2300      	movs	r3, #0
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	2103      	movs	r1, #3
 8002530:	400a      	ands	r2, r1
 8002532:	00d2      	lsls	r2, r2, #3
 8002534:	4093      	lsls	r3, r2
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800253c:	4936      	ldr	r1, [pc, #216]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	3318      	adds	r3, #24
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800254a:	4b33      	ldr	r3, [pc, #204]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	43da      	mvns	r2, r3
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	2380      	movs	r3, #128	; 0x80
 8002560:	035b      	lsls	r3, r3, #13
 8002562:	4013      	ands	r3, r2
 8002564:	d003      	beq.n	800256e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800256e:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002574:	4b28      	ldr	r3, [pc, #160]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	43da      	mvns	r2, r3
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	039b      	lsls	r3, r3, #14
 800258c:	4013      	ands	r3, r2
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002598:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800259e:	4a1e      	ldr	r2, [pc, #120]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 80025a0:	2384      	movs	r3, #132	; 0x84
 80025a2:	58d3      	ldr	r3, [r2, r3]
 80025a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	43da      	mvns	r2, r3
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	029b      	lsls	r3, r3, #10
 80025b8:	4013      	ands	r3, r2
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025c4:	4914      	ldr	r1, [pc, #80]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 80025c6:	2284      	movs	r2, #132	; 0x84
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80025cc:	4a12      	ldr	r2, [pc, #72]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	58d3      	ldr	r3, [r2, r3]
 80025d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	43da      	mvns	r2, r3
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4013      	ands	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	2380      	movs	r3, #128	; 0x80
 80025e4:	025b      	lsls	r3, r3, #9
 80025e6:	4013      	ands	r3, r2
 80025e8:	d003      	beq.n	80025f2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025f2:	4909      	ldr	r1, [pc, #36]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 80025f4:	2280      	movs	r2, #128	; 0x80
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	3301      	adds	r3, #1
 80025fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	40da      	lsrs	r2, r3
 8002608:	1e13      	subs	r3, r2, #0
 800260a:	d000      	beq.n	800260e <HAL_GPIO_Init+0x2ae>
 800260c:	e6b0      	b.n	8002370 <HAL_GPIO_Init+0x10>
  }
}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	46c0      	nop			; (mov r8, r8)
 8002612:	46bd      	mov	sp, r7
 8002614:	b006      	add	sp, #24
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40021800 	.word	0x40021800
 800261c:	50000400 	.word	0x50000400
 8002620:	50000800 	.word	0x50000800
 8002624:	50000c00 	.word	0x50000c00

08002628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	0008      	movs	r0, r1
 8002632:	0011      	movs	r1, r2
 8002634:	1cbb      	adds	r3, r7, #2
 8002636:	1c02      	adds	r2, r0, #0
 8002638:	801a      	strh	r2, [r3, #0]
 800263a:	1c7b      	adds	r3, r7, #1
 800263c:	1c0a      	adds	r2, r1, #0
 800263e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002640:	1c7b      	adds	r3, r7, #1
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d004      	beq.n	8002652 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002648:	1cbb      	adds	r3, r7, #2
 800264a:	881a      	ldrh	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002650:	e003      	b.n	800265a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002652:	1cbb      	adds	r3, r7, #2
 8002654:	881a      	ldrh	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	629a      	str	r2, [r3, #40]	; 0x28
}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	46bd      	mov	sp, r7
 800265e:	b002      	add	sp, #8
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a19      	ldr	r2, [pc, #100]	; (80026d8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002672:	4013      	ands	r3, r2
 8002674:	0019      	movs	r1, r3
 8002676:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	430a      	orrs	r2, r1
 800267c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	429a      	cmp	r2, r3
 8002686:	d11f      	bne.n	80026c8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	0013      	movs	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	189b      	adds	r3, r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4912      	ldr	r1, [pc, #72]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002696:	0018      	movs	r0, r3
 8002698:	f7fd fd40 	bl	800011c <__udivsi3>
 800269c:	0003      	movs	r3, r0
 800269e:	3301      	adds	r3, #1
 80026a0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026a2:	e008      	b.n	80026b6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	3b01      	subs	r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	e001      	b.n	80026b6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e009      	b.n	80026ca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80026b8:	695a      	ldr	r2, [r3, #20]
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	401a      	ands	r2, r3
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d0ed      	beq.n	80026a4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b004      	add	sp, #16
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	40007000 	.word	0x40007000
 80026d8:	fffff9ff 	.word	0xfffff9ff
 80026dc:	20000000 	.word	0x20000000
 80026e0:	000f4240 	.word	0x000f4240

080026e4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	23e0      	movs	r3, #224	; 0xe0
 80026ee:	01db      	lsls	r3, r3, #7
 80026f0:	4013      	ands	r3, r2
}
 80026f2:	0018      	movs	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000

080026fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e2f3      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2201      	movs	r2, #1
 8002714:	4013      	ands	r3, r2
 8002716:	d100      	bne.n	800271a <HAL_RCC_OscConfig+0x1e>
 8002718:	e07c      	b.n	8002814 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800271a:	4bc3      	ldr	r3, [pc, #780]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2238      	movs	r2, #56	; 0x38
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002724:	4bc0      	ldr	r3, [pc, #768]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2203      	movs	r2, #3
 800272a:	4013      	ands	r3, r2
 800272c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	2b10      	cmp	r3, #16
 8002732:	d102      	bne.n	800273a <HAL_RCC_OscConfig+0x3e>
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2b03      	cmp	r3, #3
 8002738:	d002      	beq.n	8002740 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2b08      	cmp	r3, #8
 800273e:	d10b      	bne.n	8002758 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002740:	4bb9      	ldr	r3, [pc, #740]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	029b      	lsls	r3, r3, #10
 8002748:	4013      	ands	r3, r2
 800274a:	d062      	beq.n	8002812 <HAL_RCC_OscConfig+0x116>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d15e      	bne.n	8002812 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e2ce      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	025b      	lsls	r3, r3, #9
 8002760:	429a      	cmp	r2, r3
 8002762:	d107      	bne.n	8002774 <HAL_RCC_OscConfig+0x78>
 8002764:	4bb0      	ldr	r3, [pc, #704]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4baf      	ldr	r3, [pc, #700]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800276a:	2180      	movs	r1, #128	; 0x80
 800276c:	0249      	lsls	r1, r1, #9
 800276e:	430a      	orrs	r2, r1
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	e020      	b.n	80027b6 <HAL_RCC_OscConfig+0xba>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	23a0      	movs	r3, #160	; 0xa0
 800277a:	02db      	lsls	r3, r3, #11
 800277c:	429a      	cmp	r2, r3
 800277e:	d10e      	bne.n	800279e <HAL_RCC_OscConfig+0xa2>
 8002780:	4ba9      	ldr	r3, [pc, #676]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4ba8      	ldr	r3, [pc, #672]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002786:	2180      	movs	r1, #128	; 0x80
 8002788:	02c9      	lsls	r1, r1, #11
 800278a:	430a      	orrs	r2, r1
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	4ba6      	ldr	r3, [pc, #664]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	4ba5      	ldr	r3, [pc, #660]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002794:	2180      	movs	r1, #128	; 0x80
 8002796:	0249      	lsls	r1, r1, #9
 8002798:	430a      	orrs	r2, r1
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	e00b      	b.n	80027b6 <HAL_RCC_OscConfig+0xba>
 800279e:	4ba2      	ldr	r3, [pc, #648]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4ba1      	ldr	r3, [pc, #644]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80027a4:	49a1      	ldr	r1, [pc, #644]	; (8002a2c <HAL_RCC_OscConfig+0x330>)
 80027a6:	400a      	ands	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	4b9f      	ldr	r3, [pc, #636]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	4b9e      	ldr	r3, [pc, #632]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80027b0:	499f      	ldr	r1, [pc, #636]	; (8002a30 <HAL_RCC_OscConfig+0x334>)
 80027b2:	400a      	ands	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d014      	beq.n	80027e8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7ff f875 	bl	80018ac <HAL_GetTick>
 80027c2:	0003      	movs	r3, r0
 80027c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c8:	f7ff f870 	bl	80018ac <HAL_GetTick>
 80027cc:	0002      	movs	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	; 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e28d      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027da:	4b93      	ldr	r3, [pc, #588]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	2380      	movs	r3, #128	; 0x80
 80027e0:	029b      	lsls	r3, r3, #10
 80027e2:	4013      	ands	r3, r2
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0xcc>
 80027e6:	e015      	b.n	8002814 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7ff f860 	bl	80018ac <HAL_GetTick>
 80027ec:	0003      	movs	r3, r0
 80027ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f2:	f7ff f85b 	bl	80018ac <HAL_GetTick>
 80027f6:	0002      	movs	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b64      	cmp	r3, #100	; 0x64
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e278      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002804:	4b88      	ldr	r3, [pc, #544]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	029b      	lsls	r3, r3, #10
 800280c:	4013      	ands	r3, r2
 800280e:	d1f0      	bne.n	80027f2 <HAL_RCC_OscConfig+0xf6>
 8002810:	e000      	b.n	8002814 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002812:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2202      	movs	r2, #2
 800281a:	4013      	ands	r3, r2
 800281c:	d100      	bne.n	8002820 <HAL_RCC_OscConfig+0x124>
 800281e:	e099      	b.n	8002954 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002820:	4b81      	ldr	r3, [pc, #516]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2238      	movs	r2, #56	; 0x38
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800282a:	4b7f      	ldr	r3, [pc, #508]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2203      	movs	r2, #3
 8002830:	4013      	ands	r3, r2
 8002832:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b10      	cmp	r3, #16
 8002838:	d102      	bne.n	8002840 <HAL_RCC_OscConfig+0x144>
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d002      	beq.n	8002846 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d135      	bne.n	80028b2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002846:	4b78      	ldr	r3, [pc, #480]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4013      	ands	r3, r2
 8002850:	d005      	beq.n	800285e <HAL_RCC_OscConfig+0x162>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e24b      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285e:	4b72      	ldr	r3, [pc, #456]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4a74      	ldr	r2, [pc, #464]	; (8002a34 <HAL_RCC_OscConfig+0x338>)
 8002864:	4013      	ands	r3, r2
 8002866:	0019      	movs	r1, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	021a      	lsls	r2, r3, #8
 800286e:	4b6e      	ldr	r3, [pc, #440]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002870:	430a      	orrs	r2, r1
 8002872:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d112      	bne.n	80028a0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800287a:	4b6b      	ldr	r3, [pc, #428]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a6e      	ldr	r2, [pc, #440]	; (8002a38 <HAL_RCC_OscConfig+0x33c>)
 8002880:	4013      	ands	r3, r2
 8002882:	0019      	movs	r1, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	4b67      	ldr	r3, [pc, #412]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800288a:	430a      	orrs	r2, r1
 800288c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800288e:	4b66      	ldr	r3, [pc, #408]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	0adb      	lsrs	r3, r3, #11
 8002894:	2207      	movs	r2, #7
 8002896:	4013      	ands	r3, r2
 8002898:	4a68      	ldr	r2, [pc, #416]	; (8002a3c <HAL_RCC_OscConfig+0x340>)
 800289a:	40da      	lsrs	r2, r3
 800289c:	4b68      	ldr	r3, [pc, #416]	; (8002a40 <HAL_RCC_OscConfig+0x344>)
 800289e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028a0:	4b68      	ldr	r3, [pc, #416]	; (8002a44 <HAL_RCC_OscConfig+0x348>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	0018      	movs	r0, r3
 80028a6:	f7fe f86d 	bl	8000984 <HAL_InitTick>
 80028aa:	1e03      	subs	r3, r0, #0
 80028ac:	d051      	beq.n	8002952 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e221      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d030      	beq.n	800291c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80028ba:	4b5b      	ldr	r3, [pc, #364]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a5e      	ldr	r2, [pc, #376]	; (8002a38 <HAL_RCC_OscConfig+0x33c>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	4b57      	ldr	r3, [pc, #348]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80028ca:	430a      	orrs	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80028ce:	4b56      	ldr	r3, [pc, #344]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4b55      	ldr	r3, [pc, #340]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80028d4:	2180      	movs	r1, #128	; 0x80
 80028d6:	0049      	lsls	r1, r1, #1
 80028d8:	430a      	orrs	r2, r1
 80028da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fe ffe6 	bl	80018ac <HAL_GetTick>
 80028e0:	0003      	movs	r3, r0
 80028e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e6:	f7fe ffe1 	bl	80018ac <HAL_GetTick>
 80028ea:	0002      	movs	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e1fe      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028f8:	4b4b      	ldr	r3, [pc, #300]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4013      	ands	r3, r2
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002904:	4b48      	ldr	r3, [pc, #288]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4a4a      	ldr	r2, [pc, #296]	; (8002a34 <HAL_RCC_OscConfig+0x338>)
 800290a:	4013      	ands	r3, r2
 800290c:	0019      	movs	r1, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	021a      	lsls	r2, r3, #8
 8002914:	4b44      	ldr	r3, [pc, #272]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	e01b      	b.n	8002954 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800291c:	4b42      	ldr	r3, [pc, #264]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b41      	ldr	r3, [pc, #260]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002922:	4949      	ldr	r1, [pc, #292]	; (8002a48 <HAL_RCC_OscConfig+0x34c>)
 8002924:	400a      	ands	r2, r1
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7fe ffc0 	bl	80018ac <HAL_GetTick>
 800292c:	0003      	movs	r3, r0
 800292e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002932:	f7fe ffbb 	bl	80018ac <HAL_GetTick>
 8002936:	0002      	movs	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e1d8      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002944:	4b38      	ldr	r3, [pc, #224]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4013      	ands	r3, r2
 800294e:	d1f0      	bne.n	8002932 <HAL_RCC_OscConfig+0x236>
 8002950:	e000      	b.n	8002954 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002952:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2208      	movs	r2, #8
 800295a:	4013      	ands	r3, r2
 800295c:	d047      	beq.n	80029ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800295e:	4b32      	ldr	r3, [pc, #200]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2238      	movs	r2, #56	; 0x38
 8002964:	4013      	ands	r3, r2
 8002966:	2b18      	cmp	r3, #24
 8002968:	d10a      	bne.n	8002980 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800296a:	4b2f      	ldr	r3, [pc, #188]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800296c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296e:	2202      	movs	r2, #2
 8002970:	4013      	ands	r3, r2
 8002972:	d03c      	beq.n	80029ee <HAL_RCC_OscConfig+0x2f2>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d138      	bne.n	80029ee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e1ba      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d019      	beq.n	80029bc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002988:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800298a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800298c:	4b26      	ldr	r3, [pc, #152]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800298e:	2101      	movs	r1, #1
 8002990:	430a      	orrs	r2, r1
 8002992:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f7fe ff8a 	bl	80018ac <HAL_GetTick>
 8002998:	0003      	movs	r3, r0
 800299a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800299e:	f7fe ff85 	bl	80018ac <HAL_GetTick>
 80029a2:	0002      	movs	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e1a2      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029b0:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80029b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b4:	2202      	movs	r2, #2
 80029b6:	4013      	ands	r3, r2
 80029b8:	d0f1      	beq.n	800299e <HAL_RCC_OscConfig+0x2a2>
 80029ba:	e018      	b.n	80029ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80029bc:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80029be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029c0:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80029c2:	2101      	movs	r1, #1
 80029c4:	438a      	bics	r2, r1
 80029c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7fe ff70 	bl	80018ac <HAL_GetTick>
 80029cc:	0003      	movs	r3, r0
 80029ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d2:	f7fe ff6b 	bl	80018ac <HAL_GetTick>
 80029d6:	0002      	movs	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e188      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029e4:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80029e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e8:	2202      	movs	r2, #2
 80029ea:	4013      	ands	r3, r2
 80029ec:	d1f1      	bne.n	80029d2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2204      	movs	r2, #4
 80029f4:	4013      	ands	r3, r2
 80029f6:	d100      	bne.n	80029fa <HAL_RCC_OscConfig+0x2fe>
 80029f8:	e0c6      	b.n	8002b88 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029fa:	231f      	movs	r3, #31
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2238      	movs	r2, #56	; 0x38
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	d11e      	bne.n	8002a4c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a12:	2202      	movs	r2, #2
 8002a14:	4013      	ands	r3, r2
 8002a16:	d100      	bne.n	8002a1a <HAL_RCC_OscConfig+0x31e>
 8002a18:	e0b6      	b.n	8002b88 <HAL_RCC_OscConfig+0x48c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d000      	beq.n	8002a24 <HAL_RCC_OscConfig+0x328>
 8002a22:	e0b1      	b.n	8002b88 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e166      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	fffeffff 	.word	0xfffeffff
 8002a30:	fffbffff 	.word	0xfffbffff
 8002a34:	ffff80ff 	.word	0xffff80ff
 8002a38:	ffffc7ff 	.word	0xffffc7ff
 8002a3c:	00f42400 	.word	0x00f42400
 8002a40:	20000000 	.word	0x20000000
 8002a44:	20000004 	.word	0x20000004
 8002a48:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a4c:	4bac      	ldr	r3, [pc, #688]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002a4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	055b      	lsls	r3, r3, #21
 8002a54:	4013      	ands	r3, r2
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_OscConfig+0x360>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <HAL_RCC_OscConfig+0x362>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d011      	beq.n	8002a86 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002a62:	4ba7      	ldr	r3, [pc, #668]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002a64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a66:	4ba6      	ldr	r3, [pc, #664]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002a68:	2180      	movs	r1, #128	; 0x80
 8002a6a:	0549      	lsls	r1, r1, #21
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a70:	4ba3      	ldr	r3, [pc, #652]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a74:	2380      	movs	r3, #128	; 0x80
 8002a76:	055b      	lsls	r3, r3, #21
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002a7e:	231f      	movs	r3, #31
 8002a80:	18fb      	adds	r3, r7, r3
 8002a82:	2201      	movs	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a86:	4b9f      	ldr	r3, [pc, #636]	; (8002d04 <HAL_RCC_OscConfig+0x608>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d11a      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a92:	4b9c      	ldr	r3, [pc, #624]	; (8002d04 <HAL_RCC_OscConfig+0x608>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4b9b      	ldr	r3, [pc, #620]	; (8002d04 <HAL_RCC_OscConfig+0x608>)
 8002a98:	2180      	movs	r1, #128	; 0x80
 8002a9a:	0049      	lsls	r1, r1, #1
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002aa0:	f7fe ff04 	bl	80018ac <HAL_GetTick>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aaa:	f7fe feff 	bl	80018ac <HAL_GetTick>
 8002aae:	0002      	movs	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e11c      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002abc:	4b91      	ldr	r3, [pc, #580]	; (8002d04 <HAL_RCC_OscConfig+0x608>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d106      	bne.n	8002ade <HAL_RCC_OscConfig+0x3e2>
 8002ad0:	4b8b      	ldr	r3, [pc, #556]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002ad2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ad4:	4b8a      	ldr	r3, [pc, #552]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	65da      	str	r2, [r3, #92]	; 0x5c
 8002adc:	e01c      	b.n	8002b18 <HAL_RCC_OscConfig+0x41c>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2b05      	cmp	r3, #5
 8002ae4:	d10c      	bne.n	8002b00 <HAL_RCC_OscConfig+0x404>
 8002ae6:	4b86      	ldr	r3, [pc, #536]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002ae8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002aea:	4b85      	ldr	r3, [pc, #532]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002aec:	2104      	movs	r1, #4
 8002aee:	430a      	orrs	r2, r1
 8002af0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002af2:	4b83      	ldr	r3, [pc, #524]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002af4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002af6:	4b82      	ldr	r3, [pc, #520]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002af8:	2101      	movs	r1, #1
 8002afa:	430a      	orrs	r2, r1
 8002afc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002afe:	e00b      	b.n	8002b18 <HAL_RCC_OscConfig+0x41c>
 8002b00:	4b7f      	ldr	r3, [pc, #508]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002b02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b04:	4b7e      	ldr	r3, [pc, #504]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002b06:	2101      	movs	r1, #1
 8002b08:	438a      	bics	r2, r1
 8002b0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b0c:	4b7c      	ldr	r3, [pc, #496]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002b0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b10:	4b7b      	ldr	r3, [pc, #492]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002b12:	2104      	movs	r1, #4
 8002b14:	438a      	bics	r2, r1
 8002b16:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d014      	beq.n	8002b4a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7fe fec4 	bl	80018ac <HAL_GetTick>
 8002b24:	0003      	movs	r3, r0
 8002b26:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b28:	e009      	b.n	8002b3e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2a:	f7fe febf 	bl	80018ac <HAL_GetTick>
 8002b2e:	0002      	movs	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	4a74      	ldr	r2, [pc, #464]	; (8002d08 <HAL_RCC_OscConfig+0x60c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e0db      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3e:	4b70      	ldr	r3, [pc, #448]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	2202      	movs	r2, #2
 8002b44:	4013      	ands	r3, r2
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x42e>
 8002b48:	e013      	b.n	8002b72 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4a:	f7fe feaf 	bl	80018ac <HAL_GetTick>
 8002b4e:	0003      	movs	r3, r0
 8002b50:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b52:	e009      	b.n	8002b68 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b54:	f7fe feaa 	bl	80018ac <HAL_GetTick>
 8002b58:	0002      	movs	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	4a6a      	ldr	r2, [pc, #424]	; (8002d08 <HAL_RCC_OscConfig+0x60c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e0c6      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b68:	4b65      	ldr	r3, [pc, #404]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002b72:	231f      	movs	r3, #31
 8002b74:	18fb      	adds	r3, r7, r3
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d105      	bne.n	8002b88 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002b7c:	4b60      	ldr	r3, [pc, #384]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b80:	4b5f      	ldr	r3, [pc, #380]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002b82:	4962      	ldr	r1, [pc, #392]	; (8002d0c <HAL_RCC_OscConfig+0x610>)
 8002b84:	400a      	ands	r2, r1
 8002b86:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d100      	bne.n	8002b92 <HAL_RCC_OscConfig+0x496>
 8002b90:	e0b0      	b.n	8002cf4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b92:	4b5b      	ldr	r3, [pc, #364]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2238      	movs	r2, #56	; 0x38
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b10      	cmp	r3, #16
 8002b9c:	d100      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x4a4>
 8002b9e:	e078      	b.n	8002c92 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d153      	bne.n	8002c50 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba8:	4b55      	ldr	r3, [pc, #340]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b54      	ldr	r3, [pc, #336]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002bae:	4958      	ldr	r1, [pc, #352]	; (8002d10 <HAL_RCC_OscConfig+0x614>)
 8002bb0:	400a      	ands	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fe7a 	bl	80018ac <HAL_GetTick>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbe:	f7fe fe75 	bl	80018ac <HAL_GetTick>
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e092      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd0:	4b4b      	ldr	r3, [pc, #300]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	049b      	lsls	r3, r3, #18
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d1f0      	bne.n	8002bbe <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bdc:	4b48      	ldr	r3, [pc, #288]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4a4c      	ldr	r2, [pc, #304]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	0019      	movs	r1, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1a      	ldr	r2, [r3, #32]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	431a      	orrs	r2, r3
 8002c04:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002c06:	430a      	orrs	r2, r1
 8002c08:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c0a:	4b3d      	ldr	r3, [pc, #244]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	4b3c      	ldr	r3, [pc, #240]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002c10:	2180      	movs	r1, #128	; 0x80
 8002c12:	0449      	lsls	r1, r1, #17
 8002c14:	430a      	orrs	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002c18:	4b39      	ldr	r3, [pc, #228]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	4b38      	ldr	r3, [pc, #224]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002c1e:	2180      	movs	r1, #128	; 0x80
 8002c20:	0549      	lsls	r1, r1, #21
 8002c22:	430a      	orrs	r2, r1
 8002c24:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c26:	f7fe fe41 	bl	80018ac <HAL_GetTick>
 8002c2a:	0003      	movs	r3, r0
 8002c2c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c30:	f7fe fe3c 	bl	80018ac <HAL_GetTick>
 8002c34:	0002      	movs	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e059      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c42:	4b2f      	ldr	r3, [pc, #188]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	049b      	lsls	r3, r3, #18
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0x534>
 8002c4e:	e051      	b.n	8002cf4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c50:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002c56:	492e      	ldr	r1, [pc, #184]	; (8002d10 <HAL_RCC_OscConfig+0x614>)
 8002c58:	400a      	ands	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5c:	f7fe fe26 	bl	80018ac <HAL_GetTick>
 8002c60:	0003      	movs	r3, r0
 8002c62:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c66:	f7fe fe21 	bl	80018ac <HAL_GetTick>
 8002c6a:	0002      	movs	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e03e      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c78:	4b21      	ldr	r3, [pc, #132]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	049b      	lsls	r3, r3, #18
 8002c80:	4013      	ands	r3, r2
 8002c82:	d1f0      	bne.n	8002c66 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002c84:	4b1e      	ldr	r3, [pc, #120]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002c8a:	4923      	ldr	r1, [pc, #140]	; (8002d18 <HAL_RCC_OscConfig+0x61c>)
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	60da      	str	r2, [r3, #12]
 8002c90:	e030      	b.n	8002cf4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e02b      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002c9e:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <HAL_RCC_OscConfig+0x604>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	401a      	ands	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d11e      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2270      	movs	r2, #112	; 0x70
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d117      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	23fe      	movs	r3, #254	; 0xfe
 8002cc4:	01db      	lsls	r3, r3, #7
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d10e      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	23f8      	movs	r3, #248	; 0xf8
 8002cd6:	039b      	lsls	r3, r3, #14
 8002cd8:	401a      	ands	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d106      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	0f5b      	lsrs	r3, r3, #29
 8002ce6:	075a      	lsls	r2, r3, #29
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b008      	add	sp, #32
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40007000 	.word	0x40007000
 8002d08:	00001388 	.word	0x00001388
 8002d0c:	efffffff 	.word	0xefffffff
 8002d10:	feffffff 	.word	0xfeffffff
 8002d14:	1fc1808c 	.word	0x1fc1808c
 8002d18:	effefffc 	.word	0xeffefffc

08002d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0e9      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d30:	4b76      	ldr	r3, [pc, #472]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2207      	movs	r2, #7
 8002d36:	4013      	ands	r3, r2
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d91e      	bls.n	8002d7c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b73      	ldr	r3, [pc, #460]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2207      	movs	r2, #7
 8002d44:	4393      	bics	r3, r2
 8002d46:	0019      	movs	r1, r3
 8002d48:	4b70      	ldr	r3, [pc, #448]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d50:	f7fe fdac 	bl	80018ac <HAL_GetTick>
 8002d54:	0003      	movs	r3, r0
 8002d56:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d58:	e009      	b.n	8002d6e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5a:	f7fe fda7 	bl	80018ac <HAL_GetTick>
 8002d5e:	0002      	movs	r2, r0
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	4a6a      	ldr	r2, [pc, #424]	; (8002f10 <HAL_RCC_ClockConfig+0x1f4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e0ca      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d6e:	4b67      	ldr	r3, [pc, #412]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2207      	movs	r2, #7
 8002d74:	4013      	ands	r3, r2
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d1ee      	bne.n	8002d5a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2202      	movs	r2, #2
 8002d82:	4013      	ands	r3, r2
 8002d84:	d015      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d006      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d90:	4b60      	ldr	r3, [pc, #384]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	4b5f      	ldr	r3, [pc, #380]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002d96:	21e0      	movs	r1, #224	; 0xe0
 8002d98:	01c9      	lsls	r1, r1, #7
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d9e:	4b5d      	ldr	r3, [pc, #372]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	4a5d      	ldr	r2, [pc, #372]	; (8002f18 <HAL_RCC_ClockConfig+0x1fc>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	0019      	movs	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	4b59      	ldr	r3, [pc, #356]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002dae:	430a      	orrs	r2, r1
 8002db0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2201      	movs	r2, #1
 8002db8:	4013      	ands	r3, r2
 8002dba:	d057      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d107      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dc4:	4b53      	ldr	r3, [pc, #332]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	2380      	movs	r3, #128	; 0x80
 8002dca:	029b      	lsls	r3, r3, #10
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d12b      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e097      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d107      	bne.n	8002dec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ddc:	4b4d      	ldr	r3, [pc, #308]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	049b      	lsls	r3, r3, #18
 8002de4:	4013      	ands	r3, r2
 8002de6:	d11f      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e08b      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d107      	bne.n	8002e04 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002df4:	4b47      	ldr	r3, [pc, #284]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d113      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e07f      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d106      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e0c:	4b41      	ldr	r3, [pc, #260]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e10:	2202      	movs	r2, #2
 8002e12:	4013      	ands	r3, r2
 8002e14:	d108      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e074      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e1a:	4b3e      	ldr	r3, [pc, #248]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1e:	2202      	movs	r2, #2
 8002e20:	4013      	ands	r3, r2
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e06d      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e28:	4b3a      	ldr	r3, [pc, #232]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2207      	movs	r2, #7
 8002e2e:	4393      	bics	r3, r2
 8002e30:	0019      	movs	r1, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	4b37      	ldr	r3, [pc, #220]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e3c:	f7fe fd36 	bl	80018ac <HAL_GetTick>
 8002e40:	0003      	movs	r3, r0
 8002e42:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e44:	e009      	b.n	8002e5a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e46:	f7fe fd31 	bl	80018ac <HAL_GetTick>
 8002e4a:	0002      	movs	r2, r0
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	4a2f      	ldr	r2, [pc, #188]	; (8002f10 <HAL_RCC_ClockConfig+0x1f4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e054      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5a:	4b2e      	ldr	r3, [pc, #184]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2238      	movs	r2, #56	; 0x38
 8002e60:	401a      	ands	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d1ec      	bne.n	8002e46 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e6c:	4b27      	ldr	r3, [pc, #156]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2207      	movs	r2, #7
 8002e72:	4013      	ands	r3, r2
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d21e      	bcs.n	8002eb8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7a:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2207      	movs	r2, #7
 8002e80:	4393      	bics	r3, r2
 8002e82:	0019      	movs	r1, r3
 8002e84:	4b21      	ldr	r3, [pc, #132]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e8c:	f7fe fd0e 	bl	80018ac <HAL_GetTick>
 8002e90:	0003      	movs	r3, r0
 8002e92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e94:	e009      	b.n	8002eaa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e96:	f7fe fd09 	bl	80018ac <HAL_GetTick>
 8002e9a:	0002      	movs	r2, r0
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	4a1b      	ldr	r2, [pc, #108]	; (8002f10 <HAL_RCC_ClockConfig+0x1f4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e02c      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002eaa:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2207      	movs	r2, #7
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d1ee      	bne.n	8002e96 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d009      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec2:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	4a15      	ldr	r2, [pc, #84]	; (8002f1c <HAL_RCC_ClockConfig+0x200>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	0019      	movs	r1, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002ed6:	f000 f829 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
 8002eda:	0001      	movs	r1, r0
 8002edc:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	0a1b      	lsrs	r3, r3, #8
 8002ee2:	220f      	movs	r2, #15
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <HAL_RCC_ClockConfig+0x204>)
 8002ee8:	0092      	lsls	r2, r2, #2
 8002eea:	58d3      	ldr	r3, [r2, r3]
 8002eec:	221f      	movs	r2, #31
 8002eee:	4013      	ands	r3, r2
 8002ef0:	000a      	movs	r2, r1
 8002ef2:	40da      	lsrs	r2, r3
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_RCC_ClockConfig+0x208>)
 8002ef6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <HAL_RCC_ClockConfig+0x20c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	0018      	movs	r0, r3
 8002efe:	f7fd fd41 	bl	8000984 <HAL_InitTick>
 8002f02:	0003      	movs	r3, r0
}
 8002f04:	0018      	movs	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b004      	add	sp, #16
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40022000 	.word	0x40022000
 8002f10:	00001388 	.word	0x00001388
 8002f14:	40021000 	.word	0x40021000
 8002f18:	fffff0ff 	.word	0xfffff0ff
 8002f1c:	ffff8fff 	.word	0xffff8fff
 8002f20:	080070f8 	.word	0x080070f8
 8002f24:	20000000 	.word	0x20000000
 8002f28:	20000004 	.word	0x20000004

08002f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f32:	4b3c      	ldr	r3, [pc, #240]	; (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2238      	movs	r2, #56	; 0x38
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d10f      	bne.n	8002f5c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002f3c:	4b39      	ldr	r3, [pc, #228]	; (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	0adb      	lsrs	r3, r3, #11
 8002f42:	2207      	movs	r2, #7
 8002f44:	4013      	ands	r3, r2
 8002f46:	2201      	movs	r2, #1
 8002f48:	409a      	lsls	r2, r3
 8002f4a:	0013      	movs	r3, r2
 8002f4c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002f4e:	6839      	ldr	r1, [r7, #0]
 8002f50:	4835      	ldr	r0, [pc, #212]	; (8003028 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f52:	f7fd f8e3 	bl	800011c <__udivsi3>
 8002f56:	0003      	movs	r3, r0
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	e05d      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f5c:	4b31      	ldr	r3, [pc, #196]	; (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2238      	movs	r2, #56	; 0x38
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d102      	bne.n	8002f6e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f68:	4b30      	ldr	r3, [pc, #192]	; (800302c <HAL_RCC_GetSysClockFreq+0x100>)
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	e054      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f6e:	4b2d      	ldr	r3, [pc, #180]	; (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2238      	movs	r2, #56	; 0x38
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b10      	cmp	r3, #16
 8002f78:	d138      	bne.n	8002fec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f7a:	4b2a      	ldr	r3, [pc, #168]	; (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2203      	movs	r2, #3
 8002f80:	4013      	ands	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f84:	4b27      	ldr	r3, [pc, #156]	; (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	2207      	movs	r2, #7
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	3301      	adds	r3, #1
 8002f90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d10d      	bne.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	4824      	ldr	r0, [pc, #144]	; (800302c <HAL_RCC_GetSysClockFreq+0x100>)
 8002f9c:	f7fd f8be 	bl	800011c <__udivsi3>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	0019      	movs	r1, r3
 8002fa4:	4b1f      	ldr	r3, [pc, #124]	; (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	0a1b      	lsrs	r3, r3, #8
 8002faa:	227f      	movs	r2, #127	; 0x7f
 8002fac:	4013      	ands	r3, r2
 8002fae:	434b      	muls	r3, r1
 8002fb0:	617b      	str	r3, [r7, #20]
        break;
 8002fb2:	e00d      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	481c      	ldr	r0, [pc, #112]	; (8003028 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002fb8:	f7fd f8b0 	bl	800011c <__udivsi3>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	0019      	movs	r1, r3
 8002fc0:	4b18      	ldr	r3, [pc, #96]	; (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	227f      	movs	r2, #127	; 0x7f
 8002fc8:	4013      	ands	r3, r2
 8002fca:	434b      	muls	r3, r1
 8002fcc:	617b      	str	r3, [r7, #20]
        break;
 8002fce:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002fd0:	4b14      	ldr	r3, [pc, #80]	; (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	0f5b      	lsrs	r3, r3, #29
 8002fd6:	2207      	movs	r2, #7
 8002fd8:	4013      	ands	r3, r2
 8002fda:	3301      	adds	r3, #1
 8002fdc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	6978      	ldr	r0, [r7, #20]
 8002fe2:	f7fd f89b 	bl	800011c <__udivsi3>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	e015      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002fec:	4b0d      	ldr	r3, [pc, #52]	; (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2238      	movs	r2, #56	; 0x38
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d103      	bne.n	8003000 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	021b      	lsls	r3, r3, #8
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	e00b      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003000:	4b08      	ldr	r3, [pc, #32]	; (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2238      	movs	r2, #56	; 0x38
 8003006:	4013      	ands	r3, r2
 8003008:	2b18      	cmp	r3, #24
 800300a:	d103      	bne.n	8003014 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800300c:	23fa      	movs	r3, #250	; 0xfa
 800300e:	01db      	lsls	r3, r3, #7
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	e001      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003018:	693b      	ldr	r3, [r7, #16]
}
 800301a:	0018      	movs	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	b006      	add	sp, #24
 8003020:	bd80      	pop	{r7, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	40021000 	.word	0x40021000
 8003028:	00f42400 	.word	0x00f42400
 800302c:	007a1200 	.word	0x007a1200

08003030 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003034:	4b02      	ldr	r3, [pc, #8]	; (8003040 <HAL_RCC_GetHCLKFreq+0x10>)
 8003036:	681b      	ldr	r3, [r3, #0]
}
 8003038:	0018      	movs	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	20000000 	.word	0x20000000

08003044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003044:	b5b0      	push	{r4, r5, r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003048:	f7ff fff2 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 800304c:	0004      	movs	r4, r0
 800304e:	f7ff fb49 	bl	80026e4 <LL_RCC_GetAPB1Prescaler>
 8003052:	0003      	movs	r3, r0
 8003054:	0b1a      	lsrs	r2, r3, #12
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003058:	0092      	lsls	r2, r2, #2
 800305a:	58d3      	ldr	r3, [r2, r3]
 800305c:	221f      	movs	r2, #31
 800305e:	4013      	ands	r3, r2
 8003060:	40dc      	lsrs	r4, r3
 8003062:	0023      	movs	r3, r4
}
 8003064:	0018      	movs	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	bdb0      	pop	{r4, r5, r7, pc}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	08007138 	.word	0x08007138

08003070 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2207      	movs	r2, #7
 800307e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003080:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <HAL_RCC_GetClockConfig+0x4c>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2207      	movs	r2, #7
 8003086:	401a      	ands	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <HAL_RCC_GetClockConfig+0x4c>)
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	23f0      	movs	r3, #240	; 0xf0
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	401a      	ands	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800309a:	4b08      	ldr	r3, [pc, #32]	; (80030bc <HAL_RCC_GetClockConfig+0x4c>)
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	23e0      	movs	r3, #224	; 0xe0
 80030a0:	01db      	lsls	r3, r3, #7
 80030a2:	401a      	ands	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_RCC_GetClockConfig+0x50>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2207      	movs	r2, #7
 80030ae:	401a      	ands	r2, r3
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	601a      	str	r2, [r3, #0]
}
 80030b4:	46c0      	nop			; (mov r8, r8)
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b002      	add	sp, #8
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40021000 	.word	0x40021000
 80030c0:	40022000 	.word	0x40022000

080030c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80030cc:	2313      	movs	r3, #19
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030d4:	2312      	movs	r3, #18
 80030d6:	18fb      	adds	r3, r7, r3
 80030d8:	2200      	movs	r2, #0
 80030da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	2380      	movs	r3, #128	; 0x80
 80030e2:	029b      	lsls	r3, r3, #10
 80030e4:	4013      	ands	r3, r2
 80030e6:	d100      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x26>
 80030e8:	e0a3      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ea:	2011      	movs	r0, #17
 80030ec:	183b      	adds	r3, r7, r0
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f2:	4b86      	ldr	r3, [pc, #536]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	055b      	lsls	r3, r3, #21
 80030fa:	4013      	ands	r3, r2
 80030fc:	d110      	bne.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fe:	4b83      	ldr	r3, [pc, #524]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003100:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003102:	4b82      	ldr	r3, [pc, #520]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003104:	2180      	movs	r1, #128	; 0x80
 8003106:	0549      	lsls	r1, r1, #21
 8003108:	430a      	orrs	r2, r1
 800310a:	63da      	str	r2, [r3, #60]	; 0x3c
 800310c:	4b7f      	ldr	r3, [pc, #508]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800310e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003110:	2380      	movs	r3, #128	; 0x80
 8003112:	055b      	lsls	r3, r3, #21
 8003114:	4013      	ands	r3, r2
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800311a:	183b      	adds	r3, r7, r0
 800311c:	2201      	movs	r2, #1
 800311e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003120:	4b7b      	ldr	r3, [pc, #492]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	4b7a      	ldr	r3, [pc, #488]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003126:	2180      	movs	r1, #128	; 0x80
 8003128:	0049      	lsls	r1, r1, #1
 800312a:	430a      	orrs	r2, r1
 800312c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800312e:	f7fe fbbd 	bl	80018ac <HAL_GetTick>
 8003132:	0003      	movs	r3, r0
 8003134:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003136:	e00b      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003138:	f7fe fbb8 	bl	80018ac <HAL_GetTick>
 800313c:	0002      	movs	r2, r0
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d904      	bls.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003146:	2313      	movs	r3, #19
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	2203      	movs	r2, #3
 800314c:	701a      	strb	r2, [r3, #0]
        break;
 800314e:	e005      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003150:	4b6f      	ldr	r3, [pc, #444]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	4013      	ands	r3, r2
 800315a:	d0ed      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800315c:	2313      	movs	r3, #19
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d154      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003166:	4b69      	ldr	r3, [pc, #420]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003168:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800316a:	23c0      	movs	r3, #192	; 0xc0
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4013      	ands	r3, r2
 8003170:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d019      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	429a      	cmp	r2, r3
 8003180:	d014      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003182:	4b62      	ldr	r3, [pc, #392]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003186:	4a63      	ldr	r2, [pc, #396]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003188:	4013      	ands	r3, r2
 800318a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800318c:	4b5f      	ldr	r3, [pc, #380]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800318e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003190:	4b5e      	ldr	r3, [pc, #376]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003192:	2180      	movs	r1, #128	; 0x80
 8003194:	0249      	lsls	r1, r1, #9
 8003196:	430a      	orrs	r2, r1
 8003198:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800319a:	4b5c      	ldr	r3, [pc, #368]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800319c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800319e:	4b5b      	ldr	r3, [pc, #364]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031a0:	495d      	ldr	r1, [pc, #372]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031a2:	400a      	ands	r2, r1
 80031a4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031a6:	4b59      	ldr	r3, [pc, #356]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	2201      	movs	r2, #1
 80031b0:	4013      	ands	r3, r2
 80031b2:	d016      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b4:	f7fe fb7a 	bl	80018ac <HAL_GetTick>
 80031b8:	0003      	movs	r3, r0
 80031ba:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031bc:	e00c      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031be:	f7fe fb75 	bl	80018ac <HAL_GetTick>
 80031c2:	0002      	movs	r2, r0
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	4a54      	ldr	r2, [pc, #336]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d904      	bls.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80031ce:	2313      	movs	r3, #19
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	2203      	movs	r2, #3
 80031d4:	701a      	strb	r2, [r3, #0]
            break;
 80031d6:	e004      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d8:	4b4c      	ldr	r3, [pc, #304]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031dc:	2202      	movs	r2, #2
 80031de:	4013      	ands	r3, r2
 80031e0:	d0ed      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80031e2:	2313      	movs	r3, #19
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10a      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031ec:	4b47      	ldr	r3, [pc, #284]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f0:	4a48      	ldr	r2, [pc, #288]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031f2:	4013      	ands	r3, r2
 80031f4:	0019      	movs	r1, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	4b44      	ldr	r3, [pc, #272]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031fc:	430a      	orrs	r2, r1
 80031fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8003200:	e00c      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003202:	2312      	movs	r3, #18
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	2213      	movs	r2, #19
 8003208:	18ba      	adds	r2, r7, r2
 800320a:	7812      	ldrb	r2, [r2, #0]
 800320c:	701a      	strb	r2, [r3, #0]
 800320e:	e005      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003210:	2312      	movs	r3, #18
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	2213      	movs	r2, #19
 8003216:	18ba      	adds	r2, r7, r2
 8003218:	7812      	ldrb	r2, [r2, #0]
 800321a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800321c:	2311      	movs	r3, #17
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d105      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003226:	4b39      	ldr	r3, [pc, #228]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003228:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800322a:	4b38      	ldr	r3, [pc, #224]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800322c:	493c      	ldr	r1, [pc, #240]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800322e:	400a      	ands	r2, r1
 8003230:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2201      	movs	r2, #1
 8003238:	4013      	ands	r3, r2
 800323a:	d009      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800323c:	4b33      	ldr	r3, [pc, #204]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	2203      	movs	r2, #3
 8003242:	4393      	bics	r3, r2
 8003244:	0019      	movs	r1, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	4b30      	ldr	r3, [pc, #192]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800324c:	430a      	orrs	r2, r1
 800324e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2202      	movs	r2, #2
 8003256:	4013      	ands	r3, r2
 8003258:	d009      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800325a:	4b2c      	ldr	r3, [pc, #176]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800325c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325e:	220c      	movs	r2, #12
 8003260:	4393      	bics	r3, r2
 8003262:	0019      	movs	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	4b28      	ldr	r3, [pc, #160]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800326a:	430a      	orrs	r2, r1
 800326c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2220      	movs	r2, #32
 8003274:	4013      	ands	r3, r2
 8003276:	d009      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003278:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800327a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327c:	4a29      	ldr	r2, [pc, #164]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327e:	4013      	ands	r3, r2
 8003280:	0019      	movs	r1, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	4b21      	ldr	r3, [pc, #132]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003288:	430a      	orrs	r2, r1
 800328a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	2380      	movs	r3, #128	; 0x80
 8003292:	01db      	lsls	r3, r3, #7
 8003294:	4013      	ands	r3, r2
 8003296:	d015      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003298:	4b1c      	ldr	r3, [pc, #112]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800329a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	0899      	lsrs	r1, r3, #2
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	695a      	ldr	r2, [r3, #20]
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032a6:	430a      	orrs	r2, r1
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695a      	ldr	r2, [r3, #20]
 80032ae:	2380      	movs	r3, #128	; 0x80
 80032b0:	05db      	lsls	r3, r3, #23
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d106      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032b6:	4b15      	ldr	r3, [pc, #84]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	4b14      	ldr	r3, [pc, #80]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032bc:	2180      	movs	r1, #128	; 0x80
 80032be:	0249      	lsls	r1, r1, #9
 80032c0:	430a      	orrs	r2, r1
 80032c2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	4013      	ands	r3, r2
 80032ce:	d016      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80032d0:	4b0e      	ldr	r3, [pc, #56]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d4:	4a14      	ldr	r2, [pc, #80]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	0019      	movs	r1, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032e0:	430a      	orrs	r2, r1
 80032e2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	01db      	lsls	r3, r3, #7
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d106      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032f0:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	4b05      	ldr	r3, [pc, #20]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032f6:	2180      	movs	r1, #128	; 0x80
 80032f8:	0249      	lsls	r1, r1, #9
 80032fa:	430a      	orrs	r2, r1
 80032fc:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80032fe:	2312      	movs	r3, #18
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	781b      	ldrb	r3, [r3, #0]
}
 8003304:	0018      	movs	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	b006      	add	sp, #24
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40021000 	.word	0x40021000
 8003310:	40007000 	.word	0x40007000
 8003314:	fffffcff 	.word	0xfffffcff
 8003318:	fffeffff 	.word	0xfffeffff
 800331c:	00001388 	.word	0x00001388
 8003320:	efffffff 	.word	0xefffffff
 8003324:	ffffcfff 	.word	0xffffcfff
 8003328:	ffff3fff 	.word	0xffff3fff

0800332c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e04a      	b.n	80033d4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	223d      	movs	r2, #61	; 0x3d
 8003342:	5c9b      	ldrb	r3, [r3, r2]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d107      	bne.n	800335a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	223c      	movs	r2, #60	; 0x3c
 800334e:	2100      	movs	r1, #0
 8003350:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	0018      	movs	r0, r3
 8003356:	f7fd ffc3 	bl	80012e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	223d      	movs	r2, #61	; 0x3d
 800335e:	2102      	movs	r1, #2
 8003360:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3304      	adds	r3, #4
 800336a:	0019      	movs	r1, r3
 800336c:	0010      	movs	r0, r2
 800336e:	f000 fcbb 	bl	8003ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2248      	movs	r2, #72	; 0x48
 8003376:	2101      	movs	r1, #1
 8003378:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	223e      	movs	r2, #62	; 0x3e
 800337e:	2101      	movs	r1, #1
 8003380:	5499      	strb	r1, [r3, r2]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	223f      	movs	r2, #63	; 0x3f
 8003386:	2101      	movs	r1, #1
 8003388:	5499      	strb	r1, [r3, r2]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2240      	movs	r2, #64	; 0x40
 800338e:	2101      	movs	r1, #1
 8003390:	5499      	strb	r1, [r3, r2]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2241      	movs	r2, #65	; 0x41
 8003396:	2101      	movs	r1, #1
 8003398:	5499      	strb	r1, [r3, r2]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2242      	movs	r2, #66	; 0x42
 800339e:	2101      	movs	r1, #1
 80033a0:	5499      	strb	r1, [r3, r2]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2243      	movs	r2, #67	; 0x43
 80033a6:	2101      	movs	r1, #1
 80033a8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2244      	movs	r2, #68	; 0x44
 80033ae:	2101      	movs	r1, #1
 80033b0:	5499      	strb	r1, [r3, r2]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2245      	movs	r2, #69	; 0x45
 80033b6:	2101      	movs	r1, #1
 80033b8:	5499      	strb	r1, [r3, r2]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2246      	movs	r2, #70	; 0x46
 80033be:	2101      	movs	r1, #1
 80033c0:	5499      	strb	r1, [r3, r2]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2247      	movs	r2, #71	; 0x47
 80033c6:	2101      	movs	r1, #1
 80033c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	223d      	movs	r2, #61	; 0x3d
 80033ce:	2101      	movs	r1, #1
 80033d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	0018      	movs	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	b002      	add	sp, #8
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	223d      	movs	r2, #61	; 0x3d
 80033e8:	5c9b      	ldrb	r3, [r3, r2]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d001      	beq.n	80033f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e03c      	b.n	800346e <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	223d      	movs	r2, #61	; 0x3d
 80033f8:	2102      	movs	r1, #2
 80033fa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2101      	movs	r1, #1
 8003408:	430a      	orrs	r2, r1
 800340a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a19      	ldr	r2, [pc, #100]	; (8003478 <HAL_TIM_Base_Start_IT+0x9c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d009      	beq.n	800342a <HAL_TIM_Base_Start_IT+0x4e>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a18      	ldr	r2, [pc, #96]	; (800347c <HAL_TIM_Base_Start_IT+0xa0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d004      	beq.n	800342a <HAL_TIM_Base_Start_IT+0x4e>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a16      	ldr	r2, [pc, #88]	; (8003480 <HAL_TIM_Base_Start_IT+0xa4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d116      	bne.n	8003458 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	4a14      	ldr	r2, [pc, #80]	; (8003484 <HAL_TIM_Base_Start_IT+0xa8>)
 8003432:	4013      	ands	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b06      	cmp	r3, #6
 800343a:	d016      	beq.n	800346a <HAL_TIM_Base_Start_IT+0x8e>
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	2380      	movs	r3, #128	; 0x80
 8003440:	025b      	lsls	r3, r3, #9
 8003442:	429a      	cmp	r2, r3
 8003444:	d011      	beq.n	800346a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2101      	movs	r1, #1
 8003452:	430a      	orrs	r2, r1
 8003454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003456:	e008      	b.n	800346a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2101      	movs	r1, #1
 8003464:	430a      	orrs	r2, r1
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	e000      	b.n	800346c <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800346a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	0018      	movs	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	b004      	add	sp, #16
 8003474:	bd80      	pop	{r7, pc}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	40012c00 	.word	0x40012c00
 800347c:	40000400 	.word	0x40000400
 8003480:	40014000 	.word	0x40014000
 8003484:	00010007 	.word	0x00010007

08003488 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e04a      	b.n	8003530 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	223d      	movs	r2, #61	; 0x3d
 800349e:	5c9b      	ldrb	r3, [r3, r2]
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d107      	bne.n	80034b6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	223c      	movs	r2, #60	; 0x3c
 80034aa:	2100      	movs	r1, #0
 80034ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	0018      	movs	r0, r3
 80034b2:	f000 f841 	bl	8003538 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	223d      	movs	r2, #61	; 0x3d
 80034ba:	2102      	movs	r1, #2
 80034bc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3304      	adds	r3, #4
 80034c6:	0019      	movs	r1, r3
 80034c8:	0010      	movs	r0, r2
 80034ca:	f000 fc0d 	bl	8003ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2248      	movs	r2, #72	; 0x48
 80034d2:	2101      	movs	r1, #1
 80034d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	223e      	movs	r2, #62	; 0x3e
 80034da:	2101      	movs	r1, #1
 80034dc:	5499      	strb	r1, [r3, r2]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	223f      	movs	r2, #63	; 0x3f
 80034e2:	2101      	movs	r1, #1
 80034e4:	5499      	strb	r1, [r3, r2]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2240      	movs	r2, #64	; 0x40
 80034ea:	2101      	movs	r1, #1
 80034ec:	5499      	strb	r1, [r3, r2]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2241      	movs	r2, #65	; 0x41
 80034f2:	2101      	movs	r1, #1
 80034f4:	5499      	strb	r1, [r3, r2]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2242      	movs	r2, #66	; 0x42
 80034fa:	2101      	movs	r1, #1
 80034fc:	5499      	strb	r1, [r3, r2]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2243      	movs	r2, #67	; 0x43
 8003502:	2101      	movs	r1, #1
 8003504:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2244      	movs	r2, #68	; 0x44
 800350a:	2101      	movs	r1, #1
 800350c:	5499      	strb	r1, [r3, r2]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2245      	movs	r2, #69	; 0x45
 8003512:	2101      	movs	r1, #1
 8003514:	5499      	strb	r1, [r3, r2]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2246      	movs	r2, #70	; 0x46
 800351a:	2101      	movs	r1, #1
 800351c:	5499      	strb	r1, [r3, r2]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2247      	movs	r2, #71	; 0x47
 8003522:	2101      	movs	r1, #1
 8003524:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	223d      	movs	r2, #61	; 0x3d
 800352a:	2101      	movs	r1, #1
 800352c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	0018      	movs	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	b002      	add	sp, #8
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003540:	46c0      	nop			; (mov r8, r8)
 8003542:	46bd      	mov	sp, r7
 8003544:	b002      	add	sp, #8
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e090      	b.n	800367e <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	223d      	movs	r2, #61	; 0x3d
 8003560:	5c9b      	ldrb	r3, [r3, r2]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d107      	bne.n	8003578 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	223c      	movs	r2, #60	; 0x3c
 800356c:	2100      	movs	r1, #0
 800356e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	0018      	movs	r0, r3
 8003574:	f7fd fe30 	bl	80011d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	223d      	movs	r2, #61	; 0x3d
 800357c:	2102      	movs	r1, #2
 800357e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	493f      	ldr	r1, [pc, #252]	; (8003688 <HAL_TIM_Encoder_Init+0x140>)
 800358c:	400a      	ands	r2, r1
 800358e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3304      	adds	r3, #4
 8003598:	0019      	movs	r1, r3
 800359a:	0010      	movs	r0, r2
 800359c:	f000 fba4 	bl	8003ce8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	4313      	orrs	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4a31      	ldr	r2, [pc, #196]	; (800368c <HAL_TIM_Encoder_Init+0x144>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	021b      	lsls	r3, r3, #8
 80035d4:	4313      	orrs	r3, r2
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4a2c      	ldr	r2, [pc, #176]	; (8003690 <HAL_TIM_Encoder_Init+0x148>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4a2b      	ldr	r2, [pc, #172]	; (8003694 <HAL_TIM_Encoder_Init+0x14c>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	021b      	lsls	r3, r3, #8
 80035f6:	4313      	orrs	r3, r2
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	011a      	lsls	r2, r3, #4
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	031b      	lsls	r3, r3, #12
 800360a:	4313      	orrs	r3, r2
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2222      	movs	r2, #34	; 0x22
 8003616:	4393      	bics	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2288      	movs	r2, #136	; 0x88
 800361e:	4393      	bics	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	4313      	orrs	r3, r2
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2248      	movs	r2, #72	; 0x48
 8003650:	2101      	movs	r1, #1
 8003652:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	223e      	movs	r2, #62	; 0x3e
 8003658:	2101      	movs	r1, #1
 800365a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	223f      	movs	r2, #63	; 0x3f
 8003660:	2101      	movs	r1, #1
 8003662:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2244      	movs	r2, #68	; 0x44
 8003668:	2101      	movs	r1, #1
 800366a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2245      	movs	r2, #69	; 0x45
 8003670:	2101      	movs	r1, #1
 8003672:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	223d      	movs	r2, #61	; 0x3d
 8003678:	2101      	movs	r1, #1
 800367a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	b006      	add	sp, #24
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	fffebff8 	.word	0xfffebff8
 800368c:	fffffcfc 	.word	0xfffffcfc
 8003690:	fffff3f3 	.word	0xfffff3f3
 8003694:	ffff0f0f 	.word	0xffff0f0f

08003698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	2202      	movs	r2, #2
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d124      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2202      	movs	r2, #2
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d11d      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2203      	movs	r2, #3
 80036c2:	4252      	negs	r2, r2
 80036c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2203      	movs	r2, #3
 80036d4:	4013      	ands	r3, r2
 80036d6:	d004      	beq.n	80036e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	0018      	movs	r0, r3
 80036dc:	f000 faec 	bl	8003cb8 <HAL_TIM_IC_CaptureCallback>
 80036e0:	e007      	b.n	80036f2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	0018      	movs	r0, r3
 80036e6:	f000 fadf 	bl	8003ca8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f000 faeb 	bl	8003cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2204      	movs	r2, #4
 8003700:	4013      	ands	r3, r2
 8003702:	2b04      	cmp	r3, #4
 8003704:	d125      	bne.n	8003752 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	2204      	movs	r2, #4
 800370e:	4013      	ands	r3, r2
 8003710:	2b04      	cmp	r3, #4
 8003712:	d11e      	bne.n	8003752 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2205      	movs	r2, #5
 800371a:	4252      	negs	r2, r2
 800371c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2202      	movs	r2, #2
 8003722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699a      	ldr	r2, [r3, #24]
 800372a:	23c0      	movs	r3, #192	; 0xc0
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4013      	ands	r3, r2
 8003730:	d004      	beq.n	800373c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	0018      	movs	r0, r3
 8003736:	f000 fabf 	bl	8003cb8 <HAL_TIM_IC_CaptureCallback>
 800373a:	e007      	b.n	800374c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	0018      	movs	r0, r3
 8003740:	f000 fab2 	bl	8003ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	0018      	movs	r0, r3
 8003748:	f000 fabe 	bl	8003cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	2208      	movs	r2, #8
 800375a:	4013      	ands	r3, r2
 800375c:	2b08      	cmp	r3, #8
 800375e:	d124      	bne.n	80037aa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	2208      	movs	r2, #8
 8003768:	4013      	ands	r3, r2
 800376a:	2b08      	cmp	r3, #8
 800376c:	d11d      	bne.n	80037aa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2209      	movs	r2, #9
 8003774:	4252      	negs	r2, r2
 8003776:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2204      	movs	r2, #4
 800377c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	2203      	movs	r2, #3
 8003786:	4013      	ands	r3, r2
 8003788:	d004      	beq.n	8003794 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	0018      	movs	r0, r3
 800378e:	f000 fa93 	bl	8003cb8 <HAL_TIM_IC_CaptureCallback>
 8003792:	e007      	b.n	80037a4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	0018      	movs	r0, r3
 8003798:	f000 fa86 	bl	8003ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	0018      	movs	r0, r3
 80037a0:	f000 fa92 	bl	8003cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	2210      	movs	r2, #16
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b10      	cmp	r3, #16
 80037b6:	d125      	bne.n	8003804 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2210      	movs	r2, #16
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b10      	cmp	r3, #16
 80037c4:	d11e      	bne.n	8003804 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2211      	movs	r2, #17
 80037cc:	4252      	negs	r2, r2
 80037ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2208      	movs	r2, #8
 80037d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69da      	ldr	r2, [r3, #28]
 80037dc:	23c0      	movs	r3, #192	; 0xc0
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4013      	ands	r3, r2
 80037e2:	d004      	beq.n	80037ee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f000 fa66 	bl	8003cb8 <HAL_TIM_IC_CaptureCallback>
 80037ec:	e007      	b.n	80037fe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	0018      	movs	r0, r3
 80037f2:	f000 fa59 	bl	8003ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	0018      	movs	r0, r3
 80037fa:	f000 fa65 	bl	8003cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2201      	movs	r2, #1
 800380c:	4013      	ands	r3, r2
 800380e:	2b01      	cmp	r3, #1
 8003810:	d10f      	bne.n	8003832 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	4013      	ands	r3, r2
 800381c:	2b01      	cmp	r3, #1
 800381e:	d108      	bne.n	8003832 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2202      	movs	r2, #2
 8003826:	4252      	negs	r2, r2
 8003828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	0018      	movs	r0, r3
 800382e:	f7fd f83f 	bl	80008b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	2280      	movs	r2, #128	; 0x80
 800383a:	4013      	ands	r3, r2
 800383c:	2b80      	cmp	r3, #128	; 0x80
 800383e:	d10f      	bne.n	8003860 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	2280      	movs	r2, #128	; 0x80
 8003848:	4013      	ands	r3, r2
 800384a:	2b80      	cmp	r3, #128	; 0x80
 800384c:	d108      	bne.n	8003860 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2281      	movs	r2, #129	; 0x81
 8003854:	4252      	negs	r2, r2
 8003856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	0018      	movs	r0, r3
 800385c:	f000 ff30 	bl	80046c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691a      	ldr	r2, [r3, #16]
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	401a      	ands	r2, r3
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	429a      	cmp	r2, r3
 8003872:	d10e      	bne.n	8003892 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	2280      	movs	r2, #128	; 0x80
 800387c:	4013      	ands	r3, r2
 800387e:	2b80      	cmp	r3, #128	; 0x80
 8003880:	d107      	bne.n	8003892 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1c      	ldr	r2, [pc, #112]	; (80038f8 <HAL_TIM_IRQHandler+0x260>)
 8003888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	0018      	movs	r0, r3
 800388e:	f000 ff1f 	bl	80046d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	2240      	movs	r2, #64	; 0x40
 800389a:	4013      	ands	r3, r2
 800389c:	2b40      	cmp	r3, #64	; 0x40
 800389e:	d10f      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	2240      	movs	r2, #64	; 0x40
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b40      	cmp	r3, #64	; 0x40
 80038ac:	d108      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2241      	movs	r2, #65	; 0x41
 80038b4:	4252      	negs	r2, r2
 80038b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	0018      	movs	r0, r3
 80038bc:	f000 fa0c 	bl	8003cd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	2220      	movs	r2, #32
 80038c8:	4013      	ands	r3, r2
 80038ca:	2b20      	cmp	r3, #32
 80038cc:	d10f      	bne.n	80038ee <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	2220      	movs	r2, #32
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d108      	bne.n	80038ee <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2221      	movs	r2, #33	; 0x21
 80038e2:	4252      	negs	r2, r2
 80038e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	0018      	movs	r0, r3
 80038ea:	f000 fee1 	bl	80046b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	46bd      	mov	sp, r7
 80038f2:	b002      	add	sp, #8
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	fffffeff 	.word	0xfffffeff

080038fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003908:	2317      	movs	r3, #23
 800390a:	18fb      	adds	r3, r7, r3
 800390c:	2200      	movs	r2, #0
 800390e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	223c      	movs	r2, #60	; 0x3c
 8003914:	5c9b      	ldrb	r3, [r3, r2]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d101      	bne.n	800391e <HAL_TIM_PWM_ConfigChannel+0x22>
 800391a:	2302      	movs	r3, #2
 800391c:	e0e5      	b.n	8003aea <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	223c      	movs	r2, #60	; 0x3c
 8003922:	2101      	movs	r1, #1
 8003924:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b14      	cmp	r3, #20
 800392a:	d900      	bls.n	800392e <HAL_TIM_PWM_ConfigChannel+0x32>
 800392c:	e0d1      	b.n	8003ad2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	009a      	lsls	r2, r3, #2
 8003932:	4b70      	ldr	r3, [pc, #448]	; (8003af4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003934:	18d3      	adds	r3, r2, r3
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	0011      	movs	r1, r2
 8003942:	0018      	movs	r0, r3
 8003944:	f000 fa46 	bl	8003dd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2108      	movs	r1, #8
 8003954:	430a      	orrs	r2, r1
 8003956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2104      	movs	r1, #4
 8003964:	438a      	bics	r2, r1
 8003966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6999      	ldr	r1, [r3, #24]
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	619a      	str	r2, [r3, #24]
      break;
 800397a:	e0af      	b.n	8003adc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	0011      	movs	r1, r2
 8003984:	0018      	movs	r0, r3
 8003986:	f000 faaf 	bl	8003ee8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699a      	ldr	r2, [r3, #24]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2180      	movs	r1, #128	; 0x80
 8003996:	0109      	lsls	r1, r1, #4
 8003998:	430a      	orrs	r2, r1
 800399a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699a      	ldr	r2, [r3, #24]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4954      	ldr	r1, [pc, #336]	; (8003af8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80039a8:	400a      	ands	r2, r1
 80039aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6999      	ldr	r1, [r3, #24]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	021a      	lsls	r2, r3, #8
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	619a      	str	r2, [r3, #24]
      break;
 80039c0:	e08c      	b.n	8003adc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	0011      	movs	r1, r2
 80039ca:	0018      	movs	r0, r3
 80039cc:	f000 fb10 	bl	8003ff0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69da      	ldr	r2, [r3, #28]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2108      	movs	r1, #8
 80039dc:	430a      	orrs	r2, r1
 80039de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69da      	ldr	r2, [r3, #28]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2104      	movs	r1, #4
 80039ec:	438a      	bics	r2, r1
 80039ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	69d9      	ldr	r1, [r3, #28]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	691a      	ldr	r2, [r3, #16]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	61da      	str	r2, [r3, #28]
      break;
 8003a02:	e06b      	b.n	8003adc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	0011      	movs	r1, r2
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f000 fb77 	bl	8004100 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69da      	ldr	r2, [r3, #28]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2180      	movs	r1, #128	; 0x80
 8003a1e:	0109      	lsls	r1, r1, #4
 8003a20:	430a      	orrs	r2, r1
 8003a22:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69da      	ldr	r2, [r3, #28]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4932      	ldr	r1, [pc, #200]	; (8003af8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003a30:	400a      	ands	r2, r1
 8003a32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69d9      	ldr	r1, [r3, #28]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	021a      	lsls	r2, r3, #8
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	61da      	str	r2, [r3, #28]
      break;
 8003a48:	e048      	b.n	8003adc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	0011      	movs	r1, r2
 8003a52:	0018      	movs	r0, r3
 8003a54:	f000 fbbe 	bl	80041d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2108      	movs	r1, #8
 8003a64:	430a      	orrs	r2, r1
 8003a66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2104      	movs	r1, #4
 8003a74:	438a      	bics	r2, r1
 8003a76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a8a:	e027      	b.n	8003adc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	0011      	movs	r1, r2
 8003a94:	0018      	movs	r0, r3
 8003a96:	f000 fbfd 	bl	8004294 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2180      	movs	r1, #128	; 0x80
 8003aa6:	0109      	lsls	r1, r1, #4
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4910      	ldr	r1, [pc, #64]	; (8003af8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003ab8:	400a      	ands	r2, r1
 8003aba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	021a      	lsls	r2, r3, #8
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ad0:	e004      	b.n	8003adc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003ad2:	2317      	movs	r3, #23
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	701a      	strb	r2, [r3, #0]
      break;
 8003ada:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	223c      	movs	r2, #60	; 0x3c
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	5499      	strb	r1, [r3, r2]

  return status;
 8003ae4:	2317      	movs	r3, #23
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	781b      	ldrb	r3, [r3, #0]
}
 8003aea:	0018      	movs	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b006      	add	sp, #24
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	08007158 	.word	0x08007158
 8003af8:	fffffbff 	.word	0xfffffbff

08003afc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b06:	230f      	movs	r3, #15
 8003b08:	18fb      	adds	r3, r7, r3
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	223c      	movs	r2, #60	; 0x3c
 8003b12:	5c9b      	ldrb	r3, [r3, r2]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_TIM_ConfigClockSource+0x20>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e0bc      	b.n	8003c96 <HAL_TIM_ConfigClockSource+0x19a>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	223c      	movs	r2, #60	; 0x3c
 8003b20:	2101      	movs	r1, #1
 8003b22:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	223d      	movs	r2, #61	; 0x3d
 8003b28:	2102      	movs	r1, #2
 8003b2a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	4a5a      	ldr	r2, [pc, #360]	; (8003ca0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	4a59      	ldr	r2, [pc, #356]	; (8003ca4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2280      	movs	r2, #128	; 0x80
 8003b52:	0192      	lsls	r2, r2, #6
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d040      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0xde>
 8003b58:	2280      	movs	r2, #128	; 0x80
 8003b5a:	0192      	lsls	r2, r2, #6
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d900      	bls.n	8003b62 <HAL_TIM_ConfigClockSource+0x66>
 8003b60:	e088      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x178>
 8003b62:	2280      	movs	r2, #128	; 0x80
 8003b64:	0152      	lsls	r2, r2, #5
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d100      	bne.n	8003b6c <HAL_TIM_ConfigClockSource+0x70>
 8003b6a:	e088      	b.n	8003c7e <HAL_TIM_ConfigClockSource+0x182>
 8003b6c:	2280      	movs	r2, #128	; 0x80
 8003b6e:	0152      	lsls	r2, r2, #5
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d900      	bls.n	8003b76 <HAL_TIM_ConfigClockSource+0x7a>
 8003b74:	e07e      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x178>
 8003b76:	2b70      	cmp	r3, #112	; 0x70
 8003b78:	d018      	beq.n	8003bac <HAL_TIM_ConfigClockSource+0xb0>
 8003b7a:	d900      	bls.n	8003b7e <HAL_TIM_ConfigClockSource+0x82>
 8003b7c:	e07a      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x178>
 8003b7e:	2b60      	cmp	r3, #96	; 0x60
 8003b80:	d04f      	beq.n	8003c22 <HAL_TIM_ConfigClockSource+0x126>
 8003b82:	d900      	bls.n	8003b86 <HAL_TIM_ConfigClockSource+0x8a>
 8003b84:	e076      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x178>
 8003b86:	2b50      	cmp	r3, #80	; 0x50
 8003b88:	d03b      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x106>
 8003b8a:	d900      	bls.n	8003b8e <HAL_TIM_ConfigClockSource+0x92>
 8003b8c:	e072      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x178>
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d057      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x146>
 8003b92:	d900      	bls.n	8003b96 <HAL_TIM_ConfigClockSource+0x9a>
 8003b94:	e06e      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x178>
 8003b96:	2b30      	cmp	r3, #48	; 0x30
 8003b98:	d063      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x166>
 8003b9a:	d86b      	bhi.n	8003c74 <HAL_TIM_ConfigClockSource+0x178>
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d060      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x166>
 8003ba0:	d868      	bhi.n	8003c74 <HAL_TIM_ConfigClockSource+0x178>
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d05d      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x166>
 8003ba6:	2b10      	cmp	r3, #16
 8003ba8:	d05b      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x166>
 8003baa:	e063      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bbc:	f000 fc4a 	bl	8004454 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2277      	movs	r2, #119	; 0x77
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	609a      	str	r2, [r3, #8]
      break;
 8003bd8:	e052      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bea:	f000 fc33 	bl	8004454 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	01c9      	lsls	r1, r1, #7
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	609a      	str	r2, [r3, #8]
      break;
 8003c00:	e03e      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c0e:	001a      	movs	r2, r3
 8003c10:	f000 fba4 	bl	800435c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2150      	movs	r1, #80	; 0x50
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f000 fbfe 	bl	800441c <TIM_ITRx_SetConfig>
      break;
 8003c20:	e02e      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c2e:	001a      	movs	r2, r3
 8003c30:	f000 fbc2 	bl	80043b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2160      	movs	r1, #96	; 0x60
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f000 fbee 	bl	800441c <TIM_ITRx_SetConfig>
      break;
 8003c40:	e01e      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c4e:	001a      	movs	r2, r3
 8003c50:	f000 fb84 	bl	800435c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2140      	movs	r1, #64	; 0x40
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f000 fbde 	bl	800441c <TIM_ITRx_SetConfig>
      break;
 8003c60:	e00e      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	0019      	movs	r1, r3
 8003c6c:	0010      	movs	r0, r2
 8003c6e:	f000 fbd5 	bl	800441c <TIM_ITRx_SetConfig>
      break;
 8003c72:	e005      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003c74:	230f      	movs	r3, #15
 8003c76:	18fb      	adds	r3, r7, r3
 8003c78:	2201      	movs	r2, #1
 8003c7a:	701a      	strb	r2, [r3, #0]
      break;
 8003c7c:	e000      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003c7e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	223d      	movs	r2, #61	; 0x3d
 8003c84:	2101      	movs	r1, #1
 8003c86:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	223c      	movs	r2, #60	; 0x3c
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	5499      	strb	r1, [r3, r2]

  return status;
 8003c90:	230f      	movs	r3, #15
 8003c92:	18fb      	adds	r3, r7, r3
 8003c94:	781b      	ldrb	r3, [r3, #0]
}
 8003c96:	0018      	movs	r0, r3
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b004      	add	sp, #16
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	ffceff88 	.word	0xffceff88
 8003ca4:	ffff00ff 	.word	0xffff00ff

08003ca8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cb0:	46c0      	nop			; (mov r8, r8)
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b002      	add	sp, #8
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cc0:	46c0      	nop			; (mov r8, r8)
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b002      	add	sp, #8
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b002      	add	sp, #8
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ce0:	46c0      	nop			; (mov r8, r8)
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	b002      	add	sp, #8
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a2f      	ldr	r2, [pc, #188]	; (8003db8 <TIM_Base_SetConfig+0xd0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d003      	beq.n	8003d08 <TIM_Base_SetConfig+0x20>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a2e      	ldr	r2, [pc, #184]	; (8003dbc <TIM_Base_SetConfig+0xd4>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d108      	bne.n	8003d1a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2270      	movs	r2, #112	; 0x70
 8003d0c:	4393      	bics	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a26      	ldr	r2, [pc, #152]	; (8003db8 <TIM_Base_SetConfig+0xd0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d013      	beq.n	8003d4a <TIM_Base_SetConfig+0x62>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a25      	ldr	r2, [pc, #148]	; (8003dbc <TIM_Base_SetConfig+0xd4>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00f      	beq.n	8003d4a <TIM_Base_SetConfig+0x62>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a24      	ldr	r2, [pc, #144]	; (8003dc0 <TIM_Base_SetConfig+0xd8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00b      	beq.n	8003d4a <TIM_Base_SetConfig+0x62>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a23      	ldr	r2, [pc, #140]	; (8003dc4 <TIM_Base_SetConfig+0xdc>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d007      	beq.n	8003d4a <TIM_Base_SetConfig+0x62>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a22      	ldr	r2, [pc, #136]	; (8003dc8 <TIM_Base_SetConfig+0xe0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d003      	beq.n	8003d4a <TIM_Base_SetConfig+0x62>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a21      	ldr	r2, [pc, #132]	; (8003dcc <TIM_Base_SetConfig+0xe4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d108      	bne.n	8003d5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4a20      	ldr	r2, [pc, #128]	; (8003dd0 <TIM_Base_SetConfig+0xe8>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2280      	movs	r2, #128	; 0x80
 8003d60:	4393      	bics	r3, r2
 8003d62:	001a      	movs	r2, r3
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a0c      	ldr	r2, [pc, #48]	; (8003db8 <TIM_Base_SetConfig+0xd0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00b      	beq.n	8003da2 <TIM_Base_SetConfig+0xba>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a0d      	ldr	r2, [pc, #52]	; (8003dc4 <TIM_Base_SetConfig+0xdc>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d007      	beq.n	8003da2 <TIM_Base_SetConfig+0xba>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a0c      	ldr	r2, [pc, #48]	; (8003dc8 <TIM_Base_SetConfig+0xe0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d003      	beq.n	8003da2 <TIM_Base_SetConfig+0xba>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a0b      	ldr	r2, [pc, #44]	; (8003dcc <TIM_Base_SetConfig+0xe4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d103      	bne.n	8003daa <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	691a      	ldr	r2, [r3, #16]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	615a      	str	r2, [r3, #20]
}
 8003db0:	46c0      	nop			; (mov r8, r8)
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b004      	add	sp, #16
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40012c00 	.word	0x40012c00
 8003dbc:	40000400 	.word	0x40000400
 8003dc0:	40002000 	.word	0x40002000
 8003dc4:	40014000 	.word	0x40014000
 8003dc8:	40014400 	.word	0x40014400
 8003dcc:	40014800 	.word	0x40014800
 8003dd0:	fffffcff 	.word	0xfffffcff

08003dd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	2201      	movs	r2, #1
 8003de4:	4393      	bics	r3, r2
 8003de6:	001a      	movs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4a32      	ldr	r2, [pc, #200]	; (8003ecc <TIM_OC1_SetConfig+0xf8>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2203      	movs	r2, #3
 8003e0a:	4393      	bics	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	4393      	bics	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a28      	ldr	r2, [pc, #160]	; (8003ed0 <TIM_OC1_SetConfig+0xfc>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00b      	beq.n	8003e4a <TIM_OC1_SetConfig+0x76>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a27      	ldr	r2, [pc, #156]	; (8003ed4 <TIM_OC1_SetConfig+0x100>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d007      	beq.n	8003e4a <TIM_OC1_SetConfig+0x76>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a26      	ldr	r2, [pc, #152]	; (8003ed8 <TIM_OC1_SetConfig+0x104>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d003      	beq.n	8003e4a <TIM_OC1_SetConfig+0x76>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a25      	ldr	r2, [pc, #148]	; (8003edc <TIM_OC1_SetConfig+0x108>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d10c      	bne.n	8003e64 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2208      	movs	r2, #8
 8003e4e:	4393      	bics	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	2204      	movs	r2, #4
 8003e60:	4393      	bics	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a1a      	ldr	r2, [pc, #104]	; (8003ed0 <TIM_OC1_SetConfig+0xfc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00b      	beq.n	8003e84 <TIM_OC1_SetConfig+0xb0>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a19      	ldr	r2, [pc, #100]	; (8003ed4 <TIM_OC1_SetConfig+0x100>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d007      	beq.n	8003e84 <TIM_OC1_SetConfig+0xb0>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a18      	ldr	r2, [pc, #96]	; (8003ed8 <TIM_OC1_SetConfig+0x104>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d003      	beq.n	8003e84 <TIM_OC1_SetConfig+0xb0>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a17      	ldr	r2, [pc, #92]	; (8003edc <TIM_OC1_SetConfig+0x108>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d111      	bne.n	8003ea8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	4a16      	ldr	r2, [pc, #88]	; (8003ee0 <TIM_OC1_SetConfig+0x10c>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4a15      	ldr	r2, [pc, #84]	; (8003ee4 <TIM_OC1_SetConfig+0x110>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	621a      	str	r2, [r3, #32]
}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b006      	add	sp, #24
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	fffeff8f 	.word	0xfffeff8f
 8003ed0:	40012c00 	.word	0x40012c00
 8003ed4:	40014000 	.word	0x40014000
 8003ed8:	40014400 	.word	0x40014400
 8003edc:	40014800 	.word	0x40014800
 8003ee0:	fffffeff 	.word	0xfffffeff
 8003ee4:	fffffdff 	.word	0xfffffdff

08003ee8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	2210      	movs	r2, #16
 8003ef8:	4393      	bics	r3, r2
 8003efa:	001a      	movs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4a2e      	ldr	r2, [pc, #184]	; (8003fd0 <TIM_OC2_SetConfig+0xe8>)
 8003f16:	4013      	ands	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4a2d      	ldr	r2, [pc, #180]	; (8003fd4 <TIM_OC2_SetConfig+0xec>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	021b      	lsls	r3, r3, #8
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2220      	movs	r2, #32
 8003f32:	4393      	bics	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a24      	ldr	r2, [pc, #144]	; (8003fd8 <TIM_OC2_SetConfig+0xf0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d10d      	bne.n	8003f66 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2280      	movs	r2, #128	; 0x80
 8003f4e:	4393      	bics	r3, r2
 8003f50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2240      	movs	r2, #64	; 0x40
 8003f62:	4393      	bics	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a1b      	ldr	r2, [pc, #108]	; (8003fd8 <TIM_OC2_SetConfig+0xf0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00b      	beq.n	8003f86 <TIM_OC2_SetConfig+0x9e>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a1a      	ldr	r2, [pc, #104]	; (8003fdc <TIM_OC2_SetConfig+0xf4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d007      	beq.n	8003f86 <TIM_OC2_SetConfig+0x9e>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a19      	ldr	r2, [pc, #100]	; (8003fe0 <TIM_OC2_SetConfig+0xf8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d003      	beq.n	8003f86 <TIM_OC2_SetConfig+0x9e>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a18      	ldr	r2, [pc, #96]	; (8003fe4 <TIM_OC2_SetConfig+0xfc>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d113      	bne.n	8003fae <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	4a17      	ldr	r2, [pc, #92]	; (8003fe8 <TIM_OC2_SetConfig+0x100>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4a16      	ldr	r2, [pc, #88]	; (8003fec <TIM_OC2_SetConfig+0x104>)
 8003f92:	4013      	ands	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	621a      	str	r2, [r3, #32]
}
 8003fc8:	46c0      	nop			; (mov r8, r8)
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b006      	add	sp, #24
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	feff8fff 	.word	0xfeff8fff
 8003fd4:	fffffcff 	.word	0xfffffcff
 8003fd8:	40012c00 	.word	0x40012c00
 8003fdc:	40014000 	.word	0x40014000
 8003fe0:	40014400 	.word	0x40014400
 8003fe4:	40014800 	.word	0x40014800
 8003fe8:	fffffbff 	.word	0xfffffbff
 8003fec:	fffff7ff 	.word	0xfffff7ff

08003ff0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	4a35      	ldr	r2, [pc, #212]	; (80040d4 <TIM_OC3_SetConfig+0xe4>)
 8004000:	401a      	ands	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4a2f      	ldr	r2, [pc, #188]	; (80040d8 <TIM_OC3_SetConfig+0xe8>)
 800401c:	4013      	ands	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2203      	movs	r2, #3
 8004024:	4393      	bics	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	4a29      	ldr	r2, [pc, #164]	; (80040dc <TIM_OC3_SetConfig+0xec>)
 8004036:	4013      	ands	r3, r2
 8004038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	021b      	lsls	r3, r3, #8
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	4313      	orrs	r3, r2
 8004044:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a25      	ldr	r2, [pc, #148]	; (80040e0 <TIM_OC3_SetConfig+0xf0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d10d      	bne.n	800406a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	4a24      	ldr	r2, [pc, #144]	; (80040e4 <TIM_OC3_SetConfig+0xf4>)
 8004052:	4013      	ands	r3, r2
 8004054:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	021b      	lsls	r3, r3, #8
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	4a20      	ldr	r2, [pc, #128]	; (80040e8 <TIM_OC3_SetConfig+0xf8>)
 8004066:	4013      	ands	r3, r2
 8004068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a1c      	ldr	r2, [pc, #112]	; (80040e0 <TIM_OC3_SetConfig+0xf0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00b      	beq.n	800408a <TIM_OC3_SetConfig+0x9a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a1d      	ldr	r2, [pc, #116]	; (80040ec <TIM_OC3_SetConfig+0xfc>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d007      	beq.n	800408a <TIM_OC3_SetConfig+0x9a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a1c      	ldr	r2, [pc, #112]	; (80040f0 <TIM_OC3_SetConfig+0x100>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d003      	beq.n	800408a <TIM_OC3_SetConfig+0x9a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a1b      	ldr	r2, [pc, #108]	; (80040f4 <TIM_OC3_SetConfig+0x104>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d113      	bne.n	80040b2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4a1a      	ldr	r2, [pc, #104]	; (80040f8 <TIM_OC3_SetConfig+0x108>)
 800408e:	4013      	ands	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	4a19      	ldr	r2, [pc, #100]	; (80040fc <TIM_OC3_SetConfig+0x10c>)
 8004096:	4013      	ands	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	621a      	str	r2, [r3, #32]
}
 80040cc:	46c0      	nop			; (mov r8, r8)
 80040ce:	46bd      	mov	sp, r7
 80040d0:	b006      	add	sp, #24
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	fffffeff 	.word	0xfffffeff
 80040d8:	fffeff8f 	.word	0xfffeff8f
 80040dc:	fffffdff 	.word	0xfffffdff
 80040e0:	40012c00 	.word	0x40012c00
 80040e4:	fffff7ff 	.word	0xfffff7ff
 80040e8:	fffffbff 	.word	0xfffffbff
 80040ec:	40014000 	.word	0x40014000
 80040f0:	40014400 	.word	0x40014400
 80040f4:	40014800 	.word	0x40014800
 80040f8:	ffffefff 	.word	0xffffefff
 80040fc:	ffffdfff 	.word	0xffffdfff

08004100 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	4a28      	ldr	r2, [pc, #160]	; (80041b0 <TIM_OC4_SetConfig+0xb0>)
 8004110:	401a      	ands	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4a22      	ldr	r2, [pc, #136]	; (80041b4 <TIM_OC4_SetConfig+0xb4>)
 800412c:	4013      	ands	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4a21      	ldr	r2, [pc, #132]	; (80041b8 <TIM_OC4_SetConfig+0xb8>)
 8004134:	4013      	ands	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	021b      	lsls	r3, r3, #8
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4313      	orrs	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4a1d      	ldr	r2, [pc, #116]	; (80041bc <TIM_OC4_SetConfig+0xbc>)
 8004148:	4013      	ands	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	031b      	lsls	r3, r3, #12
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a19      	ldr	r2, [pc, #100]	; (80041c0 <TIM_OC4_SetConfig+0xc0>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00b      	beq.n	8004178 <TIM_OC4_SetConfig+0x78>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a18      	ldr	r2, [pc, #96]	; (80041c4 <TIM_OC4_SetConfig+0xc4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d007      	beq.n	8004178 <TIM_OC4_SetConfig+0x78>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a17      	ldr	r2, [pc, #92]	; (80041c8 <TIM_OC4_SetConfig+0xc8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d003      	beq.n	8004178 <TIM_OC4_SetConfig+0x78>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a16      	ldr	r2, [pc, #88]	; (80041cc <TIM_OC4_SetConfig+0xcc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d109      	bne.n	800418c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	4a15      	ldr	r2, [pc, #84]	; (80041d0 <TIM_OC4_SetConfig+0xd0>)
 800417c:	4013      	ands	r3, r2
 800417e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	019b      	lsls	r3, r3, #6
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4313      	orrs	r3, r2
 800418a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	621a      	str	r2, [r3, #32]
}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	46bd      	mov	sp, r7
 80041aa:	b006      	add	sp, #24
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	ffffefff 	.word	0xffffefff
 80041b4:	feff8fff 	.word	0xfeff8fff
 80041b8:	fffffcff 	.word	0xfffffcff
 80041bc:	ffffdfff 	.word	0xffffdfff
 80041c0:	40012c00 	.word	0x40012c00
 80041c4:	40014000 	.word	0x40014000
 80041c8:	40014400 	.word	0x40014400
 80041cc:	40014800 	.word	0x40014800
 80041d0:	ffffbfff 	.word	0xffffbfff

080041d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	4a25      	ldr	r2, [pc, #148]	; (8004278 <TIM_OC5_SetConfig+0xa4>)
 80041e4:	401a      	ands	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4a1f      	ldr	r2, [pc, #124]	; (800427c <TIM_OC5_SetConfig+0xa8>)
 8004200:	4013      	ands	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	4313      	orrs	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <TIM_OC5_SetConfig+0xac>)
 8004212:	4013      	ands	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	041b      	lsls	r3, r3, #16
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4313      	orrs	r3, r2
 8004220:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a17      	ldr	r2, [pc, #92]	; (8004284 <TIM_OC5_SetConfig+0xb0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d00b      	beq.n	8004242 <TIM_OC5_SetConfig+0x6e>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a16      	ldr	r2, [pc, #88]	; (8004288 <TIM_OC5_SetConfig+0xb4>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d007      	beq.n	8004242 <TIM_OC5_SetConfig+0x6e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a15      	ldr	r2, [pc, #84]	; (800428c <TIM_OC5_SetConfig+0xb8>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d003      	beq.n	8004242 <TIM_OC5_SetConfig+0x6e>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a14      	ldr	r2, [pc, #80]	; (8004290 <TIM_OC5_SetConfig+0xbc>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d109      	bne.n	8004256 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	4a0c      	ldr	r2, [pc, #48]	; (8004278 <TIM_OC5_SetConfig+0xa4>)
 8004246:	4013      	ands	r3, r2
 8004248:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	021b      	lsls	r3, r3, #8
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	621a      	str	r2, [r3, #32]
}
 8004270:	46c0      	nop			; (mov r8, r8)
 8004272:	46bd      	mov	sp, r7
 8004274:	b006      	add	sp, #24
 8004276:	bd80      	pop	{r7, pc}
 8004278:	fffeffff 	.word	0xfffeffff
 800427c:	fffeff8f 	.word	0xfffeff8f
 8004280:	fffdffff 	.word	0xfffdffff
 8004284:	40012c00 	.word	0x40012c00
 8004288:	40014000 	.word	0x40014000
 800428c:	40014400 	.word	0x40014400
 8004290:	40014800 	.word	0x40014800

08004294 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	4a26      	ldr	r2, [pc, #152]	; (800433c <TIM_OC6_SetConfig+0xa8>)
 80042a4:	401a      	ands	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4a20      	ldr	r2, [pc, #128]	; (8004340 <TIM_OC6_SetConfig+0xac>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	021b      	lsls	r3, r3, #8
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	4a1c      	ldr	r2, [pc, #112]	; (8004344 <TIM_OC6_SetConfig+0xb0>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	051b      	lsls	r3, r3, #20
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a18      	ldr	r2, [pc, #96]	; (8004348 <TIM_OC6_SetConfig+0xb4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00b      	beq.n	8004304 <TIM_OC6_SetConfig+0x70>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a17      	ldr	r2, [pc, #92]	; (800434c <TIM_OC6_SetConfig+0xb8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d007      	beq.n	8004304 <TIM_OC6_SetConfig+0x70>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a16      	ldr	r2, [pc, #88]	; (8004350 <TIM_OC6_SetConfig+0xbc>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d003      	beq.n	8004304 <TIM_OC6_SetConfig+0x70>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a15      	ldr	r2, [pc, #84]	; (8004354 <TIM_OC6_SetConfig+0xc0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d109      	bne.n	8004318 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	4a14      	ldr	r2, [pc, #80]	; (8004358 <TIM_OC6_SetConfig+0xc4>)
 8004308:	4013      	ands	r3, r2
 800430a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	029b      	lsls	r3, r3, #10
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	4313      	orrs	r3, r2
 8004316:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	621a      	str	r2, [r3, #32]
}
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	46bd      	mov	sp, r7
 8004336:	b006      	add	sp, #24
 8004338:	bd80      	pop	{r7, pc}
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	ffefffff 	.word	0xffefffff
 8004340:	feff8fff 	.word	0xfeff8fff
 8004344:	ffdfffff 	.word	0xffdfffff
 8004348:	40012c00 	.word	0x40012c00
 800434c:	40014000 	.word	0x40014000
 8004350:	40014400 	.word	0x40014400
 8004354:	40014800 	.word	0x40014800
 8004358:	fffbffff 	.word	0xfffbffff

0800435c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	2201      	movs	r2, #1
 8004374:	4393      	bics	r3, r2
 8004376:	001a      	movs	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	22f0      	movs	r2, #240	; 0xf0
 8004386:	4393      	bics	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	220a      	movs	r2, #10
 8004398:	4393      	bics	r3, r2
 800439a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	621a      	str	r2, [r3, #32]
}
 80043b0:	46c0      	nop			; (mov r8, r8)
 80043b2:	46bd      	mov	sp, r7
 80043b4:	b006      	add	sp, #24
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	2210      	movs	r2, #16
 80043ca:	4393      	bics	r3, r2
 80043cc:	001a      	movs	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	4a0d      	ldr	r2, [pc, #52]	; (8004418 <TIM_TI2_ConfigInputStage+0x60>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	031b      	lsls	r3, r3, #12
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	22a0      	movs	r2, #160	; 0xa0
 80043f4:	4393      	bics	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	621a      	str	r2, [r3, #32]
}
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	46bd      	mov	sp, r7
 8004412:	b006      	add	sp, #24
 8004414:	bd80      	pop	{r7, pc}
 8004416:	46c0      	nop			; (mov r8, r8)
 8004418:	ffff0fff 	.word	0xffff0fff

0800441c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4a08      	ldr	r2, [pc, #32]	; (8004450 <TIM_ITRx_SetConfig+0x34>)
 8004430:	4013      	ands	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4313      	orrs	r3, r2
 800443a:	2207      	movs	r2, #7
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	609a      	str	r2, [r3, #8]
}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	46bd      	mov	sp, r7
 800444a:	b004      	add	sp, #16
 800444c:	bd80      	pop	{r7, pc}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	ffcfff8f 	.word	0xffcfff8f

08004454 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
 8004460:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	4a09      	ldr	r2, [pc, #36]	; (8004490 <TIM_ETR_SetConfig+0x3c>)
 800446c:	4013      	ands	r3, r2
 800446e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	021a      	lsls	r2, r3, #8
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	431a      	orrs	r2, r3
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	4313      	orrs	r3, r2
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	609a      	str	r2, [r3, #8]
}
 8004488:	46c0      	nop			; (mov r8, r8)
 800448a:	46bd      	mov	sp, r7
 800448c:	b006      	add	sp, #24
 800448e:	bd80      	pop	{r7, pc}
 8004490:	ffff00ff 	.word	0xffff00ff

08004494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	223c      	movs	r2, #60	; 0x3c
 80044a2:	5c9b      	ldrb	r3, [r3, r2]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d101      	bne.n	80044ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044a8:	2302      	movs	r3, #2
 80044aa:	e04f      	b.n	800454c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	223c      	movs	r2, #60	; 0x3c
 80044b0:	2101      	movs	r1, #1
 80044b2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	223d      	movs	r2, #61	; 0x3d
 80044b8:	2102      	movs	r1, #2
 80044ba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a20      	ldr	r2, [pc, #128]	; (8004554 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d108      	bne.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4a1f      	ldr	r2, [pc, #124]	; (8004558 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80044da:	4013      	ands	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2270      	movs	r2, #112	; 0x70
 80044ec:	4393      	bics	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a13      	ldr	r2, [pc, #76]	; (8004554 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d009      	beq.n	8004520 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a12      	ldr	r2, [pc, #72]	; (800455c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d004      	beq.n	8004520 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a11      	ldr	r2, [pc, #68]	; (8004560 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d10c      	bne.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2280      	movs	r2, #128	; 0x80
 8004524:	4393      	bics	r3, r2
 8004526:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	4313      	orrs	r3, r2
 8004530:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	223d      	movs	r2, #61	; 0x3d
 800453e:	2101      	movs	r1, #1
 8004540:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	223c      	movs	r2, #60	; 0x3c
 8004546:	2100      	movs	r1, #0
 8004548:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	0018      	movs	r0, r3
 800454e:	46bd      	mov	sp, r7
 8004550:	b004      	add	sp, #16
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40012c00 	.word	0x40012c00
 8004558:	ff0fffff 	.word	0xff0fffff
 800455c:	40000400 	.word	0x40000400
 8004560:	40014000 	.word	0x40014000

08004564 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	223c      	movs	r2, #60	; 0x3c
 8004576:	5c9b      	ldrb	r3, [r3, r2]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800457c:	2302      	movs	r3, #2
 800457e:	e079      	b.n	8004674 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	223c      	movs	r2, #60	; 0x3c
 8004584:	2101      	movs	r1, #1
 8004586:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	22ff      	movs	r2, #255	; 0xff
 800458c:	4393      	bics	r3, r2
 800458e:	001a      	movs	r2, r3
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4313      	orrs	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4a38      	ldr	r2, [pc, #224]	; (800467c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800459c:	401a      	ands	r2, r3
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4a35      	ldr	r2, [pc, #212]	; (8004680 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80045aa:	401a      	ands	r2, r3
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4a33      	ldr	r2, [pc, #204]	; (8004684 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80045b8:	401a      	ands	r2, r3
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4a30      	ldr	r2, [pc, #192]	; (8004688 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80045c6:	401a      	ands	r2, r3
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4a2e      	ldr	r2, [pc, #184]	; (800468c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80045d4:	401a      	ands	r2, r3
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4a2b      	ldr	r2, [pc, #172]	; (8004690 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80045e2:	401a      	ands	r2, r3
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4a29      	ldr	r2, [pc, #164]	; (8004694 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80045f0:	401a      	ands	r2, r3
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	041b      	lsls	r3, r3, #16
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a25      	ldr	r2, [pc, #148]	; (8004698 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d106      	bne.n	8004614 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4a24      	ldr	r2, [pc, #144]	; (800469c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800460a:	401a      	ands	r2, r3
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	4313      	orrs	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a1f      	ldr	r2, [pc, #124]	; (8004698 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d121      	bne.n	8004662 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4a1f      	ldr	r2, [pc, #124]	; (80046a0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004622:	401a      	ands	r2, r3
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004628:	051b      	lsls	r3, r3, #20
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4a1c      	ldr	r2, [pc, #112]	; (80046a4 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8004632:	401a      	ands	r2, r3
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	4313      	orrs	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4a1a      	ldr	r2, [pc, #104]	; (80046a8 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004640:	401a      	ands	r2, r3
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a12      	ldr	r2, [pc, #72]	; (8004698 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d106      	bne.n	8004662 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4a15      	ldr	r2, [pc, #84]	; (80046ac <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004658:	401a      	ands	r2, r3
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	223c      	movs	r2, #60	; 0x3c
 800466e:	2100      	movs	r1, #0
 8004670:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	0018      	movs	r0, r3
 8004676:	46bd      	mov	sp, r7
 8004678:	b004      	add	sp, #16
 800467a:	bd80      	pop	{r7, pc}
 800467c:	fffffcff 	.word	0xfffffcff
 8004680:	fffffbff 	.word	0xfffffbff
 8004684:	fffff7ff 	.word	0xfffff7ff
 8004688:	ffffefff 	.word	0xffffefff
 800468c:	ffffdfff 	.word	0xffffdfff
 8004690:	ffffbfff 	.word	0xffffbfff
 8004694:	fff0ffff 	.word	0xfff0ffff
 8004698:	40012c00 	.word	0x40012c00
 800469c:	efffffff 	.word	0xefffffff
 80046a0:	ff0fffff 	.word	0xff0fffff
 80046a4:	feffffff 	.word	0xfeffffff
 80046a8:	fdffffff 	.word	0xfdffffff
 80046ac:	dfffffff 	.word	0xdfffffff

080046b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046b8:	46c0      	nop			; (mov r8, r8)
 80046ba:	46bd      	mov	sp, r7
 80046bc:	b002      	add	sp, #8
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046c8:	46c0      	nop			; (mov r8, r8)
 80046ca:	46bd      	mov	sp, r7
 80046cc:	b002      	add	sp, #8
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046d8:	46c0      	nop			; (mov r8, r8)
 80046da:	46bd      	mov	sp, r7
 80046dc:	b002      	add	sp, #8
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e046      	b.n	8004780 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2288      	movs	r2, #136	; 0x88
 80046f6:	589b      	ldr	r3, [r3, r2]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d107      	bne.n	800470c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2284      	movs	r2, #132	; 0x84
 8004700:	2100      	movs	r1, #0
 8004702:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	0018      	movs	r0, r3
 8004708:	f7fc ffca 	bl	80016a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2288      	movs	r2, #136	; 0x88
 8004710:	2124      	movs	r1, #36	; 0x24
 8004712:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2101      	movs	r1, #1
 8004720:	438a      	bics	r2, r1
 8004722:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	0018      	movs	r0, r3
 8004728:	f000 f8cc 	bl	80048c4 <UART_SetConfig>
 800472c:	0003      	movs	r3, r0
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e024      	b.n	8004780 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	0018      	movs	r0, r3
 8004742:	f000 fa63 	bl	8004c0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	490d      	ldr	r1, [pc, #52]	; (8004788 <HAL_UART_Init+0xa8>)
 8004752:	400a      	ands	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	212a      	movs	r1, #42	; 0x2a
 8004762:	438a      	bics	r2, r1
 8004764:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2101      	movs	r1, #1
 8004772:	430a      	orrs	r2, r1
 8004774:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	0018      	movs	r0, r3
 800477a:	f000 fafb 	bl	8004d74 <UART_CheckIdleState>
 800477e:	0003      	movs	r3, r0
}
 8004780:	0018      	movs	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	b002      	add	sp, #8
 8004786:	bd80      	pop	{r7, pc}
 8004788:	ffffb7ff 	.word	0xffffb7ff

0800478c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08a      	sub	sp, #40	; 0x28
 8004790:	af02      	add	r7, sp, #8
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	1dbb      	adds	r3, r7, #6
 800479a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2288      	movs	r2, #136	; 0x88
 80047a0:	589b      	ldr	r3, [r3, r2]
 80047a2:	2b20      	cmp	r3, #32
 80047a4:	d000      	beq.n	80047a8 <HAL_UART_Transmit+0x1c>
 80047a6:	e088      	b.n	80048ba <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_UART_Transmit+0x2a>
 80047ae:	1dbb      	adds	r3, r7, #6
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e080      	b.n	80048bc <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	2380      	movs	r3, #128	; 0x80
 80047c0:	015b      	lsls	r3, r3, #5
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d109      	bne.n	80047da <HAL_UART_Transmit+0x4e>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d105      	bne.n	80047da <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2201      	movs	r2, #1
 80047d2:	4013      	ands	r3, r2
 80047d4:	d001      	beq.n	80047da <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e070      	b.n	80048bc <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2290      	movs	r2, #144	; 0x90
 80047de:	2100      	movs	r1, #0
 80047e0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2288      	movs	r2, #136	; 0x88
 80047e6:	2121      	movs	r1, #33	; 0x21
 80047e8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047ea:	f7fd f85f 	bl	80018ac <HAL_GetTick>
 80047ee:	0003      	movs	r3, r0
 80047f0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	1dba      	adds	r2, r7, #6
 80047f6:	2154      	movs	r1, #84	; 0x54
 80047f8:	8812      	ldrh	r2, [r2, #0]
 80047fa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	1dba      	adds	r2, r7, #6
 8004800:	2156      	movs	r1, #86	; 0x56
 8004802:	8812      	ldrh	r2, [r2, #0]
 8004804:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	2380      	movs	r3, #128	; 0x80
 800480c:	015b      	lsls	r3, r3, #5
 800480e:	429a      	cmp	r2, r3
 8004810:	d108      	bne.n	8004824 <HAL_UART_Transmit+0x98>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d104      	bne.n	8004824 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800481a:	2300      	movs	r3, #0
 800481c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	e003      	b.n	800482c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004828:	2300      	movs	r3, #0
 800482a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800482c:	e02c      	b.n	8004888 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	0013      	movs	r3, r2
 8004838:	2200      	movs	r2, #0
 800483a:	2180      	movs	r1, #128	; 0x80
 800483c:	f000 fae8 	bl	8004e10 <UART_WaitOnFlagUntilTimeout>
 8004840:	1e03      	subs	r3, r0, #0
 8004842:	d001      	beq.n	8004848 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e039      	b.n	80048bc <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10b      	bne.n	8004866 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	001a      	movs	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	05d2      	lsls	r2, r2, #23
 800485a:	0dd2      	lsrs	r2, r2, #23
 800485c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	3302      	adds	r3, #2
 8004862:	61bb      	str	r3, [r7, #24]
 8004864:	e007      	b.n	8004876 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	781a      	ldrb	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	3301      	adds	r3, #1
 8004874:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2256      	movs	r2, #86	; 0x56
 800487a:	5a9b      	ldrh	r3, [r3, r2]
 800487c:	b29b      	uxth	r3, r3
 800487e:	3b01      	subs	r3, #1
 8004880:	b299      	uxth	r1, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2256      	movs	r2, #86	; 0x56
 8004886:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2256      	movs	r2, #86	; 0x56
 800488c:	5a9b      	ldrh	r3, [r3, r2]
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1cc      	bne.n	800482e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	0013      	movs	r3, r2
 800489e:	2200      	movs	r2, #0
 80048a0:	2140      	movs	r1, #64	; 0x40
 80048a2:	f000 fab5 	bl	8004e10 <UART_WaitOnFlagUntilTimeout>
 80048a6:	1e03      	subs	r3, r0, #0
 80048a8:	d001      	beq.n	80048ae <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e006      	b.n	80048bc <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2288      	movs	r2, #136	; 0x88
 80048b2:	2120      	movs	r1, #32
 80048b4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	e000      	b.n	80048bc <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80048ba:	2302      	movs	r3, #2
  }
}
 80048bc:	0018      	movs	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	b008      	add	sp, #32
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b088      	sub	sp, #32
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048cc:	231a      	movs	r3, #26
 80048ce:	18fb      	adds	r3, r7, r3
 80048d0:	2200      	movs	r2, #0
 80048d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4abc      	ldr	r2, [pc, #752]	; (8004be4 <UART_SetConfig+0x320>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	0019      	movs	r1, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	69fa      	ldr	r2, [r7, #28]
 80048fe:	430a      	orrs	r2, r1
 8004900:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	4ab7      	ldr	r2, [pc, #732]	; (8004be8 <UART_SetConfig+0x324>)
 800490a:	4013      	ands	r3, r2
 800490c:	0019      	movs	r1, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	69fa      	ldr	r2, [r7, #28]
 8004926:	4313      	orrs	r3, r2
 8004928:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	4aae      	ldr	r2, [pc, #696]	; (8004bec <UART_SetConfig+0x328>)
 8004932:	4013      	ands	r3, r2
 8004934:	0019      	movs	r1, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	430a      	orrs	r2, r1
 800493e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004946:	220f      	movs	r2, #15
 8004948:	4393      	bics	r3, r2
 800494a:	0019      	movs	r1, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4aa4      	ldr	r2, [pc, #656]	; (8004bf0 <UART_SetConfig+0x32c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d127      	bne.n	80049b2 <UART_SetConfig+0xee>
 8004962:	4ba4      	ldr	r3, [pc, #656]	; (8004bf4 <UART_SetConfig+0x330>)
 8004964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004966:	2203      	movs	r2, #3
 8004968:	4013      	ands	r3, r2
 800496a:	2b03      	cmp	r3, #3
 800496c:	d017      	beq.n	800499e <UART_SetConfig+0xda>
 800496e:	d81b      	bhi.n	80049a8 <UART_SetConfig+0xe4>
 8004970:	2b02      	cmp	r3, #2
 8004972:	d00a      	beq.n	800498a <UART_SetConfig+0xc6>
 8004974:	d818      	bhi.n	80049a8 <UART_SetConfig+0xe4>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <UART_SetConfig+0xbc>
 800497a:	2b01      	cmp	r3, #1
 800497c:	d00a      	beq.n	8004994 <UART_SetConfig+0xd0>
 800497e:	e013      	b.n	80049a8 <UART_SetConfig+0xe4>
 8004980:	231b      	movs	r3, #27
 8004982:	18fb      	adds	r3, r7, r3
 8004984:	2200      	movs	r2, #0
 8004986:	701a      	strb	r2, [r3, #0]
 8004988:	e058      	b.n	8004a3c <UART_SetConfig+0x178>
 800498a:	231b      	movs	r3, #27
 800498c:	18fb      	adds	r3, r7, r3
 800498e:	2202      	movs	r2, #2
 8004990:	701a      	strb	r2, [r3, #0]
 8004992:	e053      	b.n	8004a3c <UART_SetConfig+0x178>
 8004994:	231b      	movs	r3, #27
 8004996:	18fb      	adds	r3, r7, r3
 8004998:	2204      	movs	r2, #4
 800499a:	701a      	strb	r2, [r3, #0]
 800499c:	e04e      	b.n	8004a3c <UART_SetConfig+0x178>
 800499e:	231b      	movs	r3, #27
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	2208      	movs	r2, #8
 80049a4:	701a      	strb	r2, [r3, #0]
 80049a6:	e049      	b.n	8004a3c <UART_SetConfig+0x178>
 80049a8:	231b      	movs	r3, #27
 80049aa:	18fb      	adds	r3, r7, r3
 80049ac:	2210      	movs	r2, #16
 80049ae:	701a      	strb	r2, [r3, #0]
 80049b0:	e044      	b.n	8004a3c <UART_SetConfig+0x178>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a90      	ldr	r2, [pc, #576]	; (8004bf8 <UART_SetConfig+0x334>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d127      	bne.n	8004a0c <UART_SetConfig+0x148>
 80049bc:	4b8d      	ldr	r3, [pc, #564]	; (8004bf4 <UART_SetConfig+0x330>)
 80049be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c0:	220c      	movs	r2, #12
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b0c      	cmp	r3, #12
 80049c6:	d017      	beq.n	80049f8 <UART_SetConfig+0x134>
 80049c8:	d81b      	bhi.n	8004a02 <UART_SetConfig+0x13e>
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d00a      	beq.n	80049e4 <UART_SetConfig+0x120>
 80049ce:	d818      	bhi.n	8004a02 <UART_SetConfig+0x13e>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <UART_SetConfig+0x116>
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d00a      	beq.n	80049ee <UART_SetConfig+0x12a>
 80049d8:	e013      	b.n	8004a02 <UART_SetConfig+0x13e>
 80049da:	231b      	movs	r3, #27
 80049dc:	18fb      	adds	r3, r7, r3
 80049de:	2200      	movs	r2, #0
 80049e0:	701a      	strb	r2, [r3, #0]
 80049e2:	e02b      	b.n	8004a3c <UART_SetConfig+0x178>
 80049e4:	231b      	movs	r3, #27
 80049e6:	18fb      	adds	r3, r7, r3
 80049e8:	2202      	movs	r2, #2
 80049ea:	701a      	strb	r2, [r3, #0]
 80049ec:	e026      	b.n	8004a3c <UART_SetConfig+0x178>
 80049ee:	231b      	movs	r3, #27
 80049f0:	18fb      	adds	r3, r7, r3
 80049f2:	2204      	movs	r2, #4
 80049f4:	701a      	strb	r2, [r3, #0]
 80049f6:	e021      	b.n	8004a3c <UART_SetConfig+0x178>
 80049f8:	231b      	movs	r3, #27
 80049fa:	18fb      	adds	r3, r7, r3
 80049fc:	2208      	movs	r2, #8
 80049fe:	701a      	strb	r2, [r3, #0]
 8004a00:	e01c      	b.n	8004a3c <UART_SetConfig+0x178>
 8004a02:	231b      	movs	r3, #27
 8004a04:	18fb      	adds	r3, r7, r3
 8004a06:	2210      	movs	r2, #16
 8004a08:	701a      	strb	r2, [r3, #0]
 8004a0a:	e017      	b.n	8004a3c <UART_SetConfig+0x178>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a7a      	ldr	r2, [pc, #488]	; (8004bfc <UART_SetConfig+0x338>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d104      	bne.n	8004a20 <UART_SetConfig+0x15c>
 8004a16:	231b      	movs	r3, #27
 8004a18:	18fb      	adds	r3, r7, r3
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	e00d      	b.n	8004a3c <UART_SetConfig+0x178>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a76      	ldr	r2, [pc, #472]	; (8004c00 <UART_SetConfig+0x33c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d104      	bne.n	8004a34 <UART_SetConfig+0x170>
 8004a2a:	231b      	movs	r3, #27
 8004a2c:	18fb      	adds	r3, r7, r3
 8004a2e:	2200      	movs	r2, #0
 8004a30:	701a      	strb	r2, [r3, #0]
 8004a32:	e003      	b.n	8004a3c <UART_SetConfig+0x178>
 8004a34:	231b      	movs	r3, #27
 8004a36:	18fb      	adds	r3, r7, r3
 8004a38:	2210      	movs	r2, #16
 8004a3a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	69da      	ldr	r2, [r3, #28]
 8004a40:	2380      	movs	r3, #128	; 0x80
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d000      	beq.n	8004a4a <UART_SetConfig+0x186>
 8004a48:	e065      	b.n	8004b16 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8004a4a:	231b      	movs	r3, #27
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d015      	beq.n	8004a80 <UART_SetConfig+0x1bc>
 8004a54:	dc18      	bgt.n	8004a88 <UART_SetConfig+0x1c4>
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d00d      	beq.n	8004a76 <UART_SetConfig+0x1b2>
 8004a5a:	dc15      	bgt.n	8004a88 <UART_SetConfig+0x1c4>
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <UART_SetConfig+0x1a2>
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d005      	beq.n	8004a70 <UART_SetConfig+0x1ac>
 8004a64:	e010      	b.n	8004a88 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a66:	f7fe faed 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 8004a6a:	0003      	movs	r3, r0
 8004a6c:	617b      	str	r3, [r7, #20]
        break;
 8004a6e:	e012      	b.n	8004a96 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a70:	4b64      	ldr	r3, [pc, #400]	; (8004c04 <UART_SetConfig+0x340>)
 8004a72:	617b      	str	r3, [r7, #20]
        break;
 8004a74:	e00f      	b.n	8004a96 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a76:	f7fe fa59 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
 8004a7a:	0003      	movs	r3, r0
 8004a7c:	617b      	str	r3, [r7, #20]
        break;
 8004a7e:	e00a      	b.n	8004a96 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	617b      	str	r3, [r7, #20]
        break;
 8004a86:	e006      	b.n	8004a96 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a8c:	231a      	movs	r3, #26
 8004a8e:	18fb      	adds	r3, r7, r3
 8004a90:	2201      	movs	r2, #1
 8004a92:	701a      	strb	r2, [r3, #0]
        break;
 8004a94:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d100      	bne.n	8004a9e <UART_SetConfig+0x1da>
 8004a9c:	e08d      	b.n	8004bba <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aa2:	4b59      	ldr	r3, [pc, #356]	; (8004c08 <UART_SetConfig+0x344>)
 8004aa4:	0052      	lsls	r2, r2, #1
 8004aa6:	5ad3      	ldrh	r3, [r2, r3]
 8004aa8:	0019      	movs	r1, r3
 8004aaa:	6978      	ldr	r0, [r7, #20]
 8004aac:	f7fb fb36 	bl	800011c <__udivsi3>
 8004ab0:	0003      	movs	r3, r0
 8004ab2:	005a      	lsls	r2, r3, #1
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	085b      	lsrs	r3, r3, #1
 8004aba:	18d2      	adds	r2, r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	0019      	movs	r1, r3
 8004ac2:	0010      	movs	r0, r2
 8004ac4:	f7fb fb2a 	bl	800011c <__udivsi3>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	2b0f      	cmp	r3, #15
 8004ad0:	d91c      	bls.n	8004b0c <UART_SetConfig+0x248>
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	2380      	movs	r3, #128	; 0x80
 8004ad6:	025b      	lsls	r3, r3, #9
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d217      	bcs.n	8004b0c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	200e      	movs	r0, #14
 8004ae2:	183b      	adds	r3, r7, r0
 8004ae4:	210f      	movs	r1, #15
 8004ae6:	438a      	bics	r2, r1
 8004ae8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	085b      	lsrs	r3, r3, #1
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2207      	movs	r2, #7
 8004af2:	4013      	ands	r3, r2
 8004af4:	b299      	uxth	r1, r3
 8004af6:	183b      	adds	r3, r7, r0
 8004af8:	183a      	adds	r2, r7, r0
 8004afa:	8812      	ldrh	r2, [r2, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	183a      	adds	r2, r7, r0
 8004b06:	8812      	ldrh	r2, [r2, #0]
 8004b08:	60da      	str	r2, [r3, #12]
 8004b0a:	e056      	b.n	8004bba <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8004b0c:	231a      	movs	r3, #26
 8004b0e:	18fb      	adds	r3, r7, r3
 8004b10:	2201      	movs	r2, #1
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	e051      	b.n	8004bba <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b16:	231b      	movs	r3, #27
 8004b18:	18fb      	adds	r3, r7, r3
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d015      	beq.n	8004b4c <UART_SetConfig+0x288>
 8004b20:	dc18      	bgt.n	8004b54 <UART_SetConfig+0x290>
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d00d      	beq.n	8004b42 <UART_SetConfig+0x27e>
 8004b26:	dc15      	bgt.n	8004b54 <UART_SetConfig+0x290>
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <UART_SetConfig+0x26e>
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d005      	beq.n	8004b3c <UART_SetConfig+0x278>
 8004b30:	e010      	b.n	8004b54 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b32:	f7fe fa87 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 8004b36:	0003      	movs	r3, r0
 8004b38:	617b      	str	r3, [r7, #20]
        break;
 8004b3a:	e012      	b.n	8004b62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b3c:	4b31      	ldr	r3, [pc, #196]	; (8004c04 <UART_SetConfig+0x340>)
 8004b3e:	617b      	str	r3, [r7, #20]
        break;
 8004b40:	e00f      	b.n	8004b62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b42:	f7fe f9f3 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
 8004b46:	0003      	movs	r3, r0
 8004b48:	617b      	str	r3, [r7, #20]
        break;
 8004b4a:	e00a      	b.n	8004b62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b4c:	2380      	movs	r3, #128	; 0x80
 8004b4e:	021b      	lsls	r3, r3, #8
 8004b50:	617b      	str	r3, [r7, #20]
        break;
 8004b52:	e006      	b.n	8004b62 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b58:	231a      	movs	r3, #26
 8004b5a:	18fb      	adds	r3, r7, r3
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	701a      	strb	r2, [r3, #0]
        break;
 8004b60:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d028      	beq.n	8004bba <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b6c:	4b26      	ldr	r3, [pc, #152]	; (8004c08 <UART_SetConfig+0x344>)
 8004b6e:	0052      	lsls	r2, r2, #1
 8004b70:	5ad3      	ldrh	r3, [r2, r3]
 8004b72:	0019      	movs	r1, r3
 8004b74:	6978      	ldr	r0, [r7, #20]
 8004b76:	f7fb fad1 	bl	800011c <__udivsi3>
 8004b7a:	0003      	movs	r3, r0
 8004b7c:	001a      	movs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	085b      	lsrs	r3, r3, #1
 8004b84:	18d2      	adds	r2, r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	0019      	movs	r1, r3
 8004b8c:	0010      	movs	r0, r2
 8004b8e:	f7fb fac5 	bl	800011c <__udivsi3>
 8004b92:	0003      	movs	r3, r0
 8004b94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	2b0f      	cmp	r3, #15
 8004b9a:	d90a      	bls.n	8004bb2 <UART_SetConfig+0x2ee>
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	2380      	movs	r3, #128	; 0x80
 8004ba0:	025b      	lsls	r3, r3, #9
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d205      	bcs.n	8004bb2 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	60da      	str	r2, [r3, #12]
 8004bb0:	e003      	b.n	8004bba <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8004bb2:	231a      	movs	r3, #26
 8004bb4:	18fb      	adds	r3, r7, r3
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	226a      	movs	r2, #106	; 0x6a
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2268      	movs	r2, #104	; 0x68
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004bd6:	231a      	movs	r3, #26
 8004bd8:	18fb      	adds	r3, r7, r3
 8004bda:	781b      	ldrb	r3, [r3, #0]
}
 8004bdc:	0018      	movs	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b008      	add	sp, #32
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	cfff69f3 	.word	0xcfff69f3
 8004be8:	ffffcfff 	.word	0xffffcfff
 8004bec:	11fff4ff 	.word	0x11fff4ff
 8004bf0:	40013800 	.word	0x40013800
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	40004400 	.word	0x40004400
 8004bfc:	40004800 	.word	0x40004800
 8004c00:	40004c00 	.word	0x40004c00
 8004c04:	00f42400 	.word	0x00f42400
 8004c08:	080071ac 	.word	0x080071ac

08004c0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	2201      	movs	r2, #1
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	d00b      	beq.n	8004c36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	4a4a      	ldr	r2, [pc, #296]	; (8004d50 <UART_AdvFeatureConfig+0x144>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	0019      	movs	r1, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d00b      	beq.n	8004c58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	4a43      	ldr	r2, [pc, #268]	; (8004d54 <UART_AdvFeatureConfig+0x148>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	0019      	movs	r1, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5c:	2204      	movs	r2, #4
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d00b      	beq.n	8004c7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	4a3b      	ldr	r2, [pc, #236]	; (8004d58 <UART_AdvFeatureConfig+0x14c>)
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	0019      	movs	r1, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	2208      	movs	r2, #8
 8004c80:	4013      	ands	r3, r2
 8004c82:	d00b      	beq.n	8004c9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	4a34      	ldr	r2, [pc, #208]	; (8004d5c <UART_AdvFeatureConfig+0x150>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	0019      	movs	r1, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca0:	2210      	movs	r2, #16
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d00b      	beq.n	8004cbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	4a2c      	ldr	r2, [pc, #176]	; (8004d60 <UART_AdvFeatureConfig+0x154>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	0019      	movs	r1, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d00b      	beq.n	8004ce0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	4a25      	ldr	r2, [pc, #148]	; (8004d64 <UART_AdvFeatureConfig+0x158>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	0019      	movs	r1, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce4:	2240      	movs	r2, #64	; 0x40
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	d01d      	beq.n	8004d26 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	4a1d      	ldr	r2, [pc, #116]	; (8004d68 <UART_AdvFeatureConfig+0x15c>)
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	0019      	movs	r1, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d06:	2380      	movs	r3, #128	; 0x80
 8004d08:	035b      	lsls	r3, r3, #13
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d10b      	bne.n	8004d26 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	4a15      	ldr	r2, [pc, #84]	; (8004d6c <UART_AdvFeatureConfig+0x160>)
 8004d16:	4013      	ands	r3, r2
 8004d18:	0019      	movs	r1, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2a:	2280      	movs	r2, #128	; 0x80
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	d00b      	beq.n	8004d48 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	4a0e      	ldr	r2, [pc, #56]	; (8004d70 <UART_AdvFeatureConfig+0x164>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	0019      	movs	r1, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	605a      	str	r2, [r3, #4]
  }
}
 8004d48:	46c0      	nop			; (mov r8, r8)
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	b002      	add	sp, #8
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	fffdffff 	.word	0xfffdffff
 8004d54:	fffeffff 	.word	0xfffeffff
 8004d58:	fffbffff 	.word	0xfffbffff
 8004d5c:	ffff7fff 	.word	0xffff7fff
 8004d60:	ffffefff 	.word	0xffffefff
 8004d64:	ffffdfff 	.word	0xffffdfff
 8004d68:	ffefffff 	.word	0xffefffff
 8004d6c:	ff9fffff 	.word	0xff9fffff
 8004d70:	fff7ffff 	.word	0xfff7ffff

08004d74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af02      	add	r7, sp, #8
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2290      	movs	r2, #144	; 0x90
 8004d80:	2100      	movs	r1, #0
 8004d82:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d84:	f7fc fd92 	bl	80018ac <HAL_GetTick>
 8004d88:	0003      	movs	r3, r0
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2208      	movs	r2, #8
 8004d94:	4013      	ands	r3, r2
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	d10c      	bne.n	8004db4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2280      	movs	r2, #128	; 0x80
 8004d9e:	0391      	lsls	r1, r2, #14
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	4a1a      	ldr	r2, [pc, #104]	; (8004e0c <UART_CheckIdleState+0x98>)
 8004da4:	9200      	str	r2, [sp, #0]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f000 f832 	bl	8004e10 <UART_WaitOnFlagUntilTimeout>
 8004dac:	1e03      	subs	r3, r0, #0
 8004dae:	d001      	beq.n	8004db4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e026      	b.n	8004e02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2204      	movs	r2, #4
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d10c      	bne.n	8004ddc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2280      	movs	r2, #128	; 0x80
 8004dc6:	03d1      	lsls	r1, r2, #15
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	4a10      	ldr	r2, [pc, #64]	; (8004e0c <UART_CheckIdleState+0x98>)
 8004dcc:	9200      	str	r2, [sp, #0]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f000 f81e 	bl	8004e10 <UART_WaitOnFlagUntilTimeout>
 8004dd4:	1e03      	subs	r3, r0, #0
 8004dd6:	d001      	beq.n	8004ddc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e012      	b.n	8004e02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2288      	movs	r2, #136	; 0x88
 8004de0:	2120      	movs	r1, #32
 8004de2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	228c      	movs	r2, #140	; 0x8c
 8004de8:	2120      	movs	r1, #32
 8004dea:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2284      	movs	r2, #132	; 0x84
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	0018      	movs	r0, r3
 8004e04:	46bd      	mov	sp, r7
 8004e06:	b004      	add	sp, #16
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	46c0      	nop			; (mov r8, r8)
 8004e0c:	01ffffff 	.word	0x01ffffff

08004e10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b094      	sub	sp, #80	; 0x50
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	603b      	str	r3, [r7, #0]
 8004e1c:	1dfb      	adds	r3, r7, #7
 8004e1e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e20:	e0a7      	b.n	8004f72 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e24:	3301      	adds	r3, #1
 8004e26:	d100      	bne.n	8004e2a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004e28:	e0a3      	b.n	8004f72 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e2a:	f7fc fd3f 	bl	80018ac <HAL_GetTick>
 8004e2e:	0002      	movs	r2, r0
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d302      	bcc.n	8004e40 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d13f      	bne.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e40:	f3ef 8310 	mrs	r3, PRIMASK
 8004e44:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e48:	647b      	str	r3, [r7, #68]	; 0x44
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e50:	f383 8810 	msr	PRIMASK, r3
}
 8004e54:	46c0      	nop			; (mov r8, r8)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	494e      	ldr	r1, [pc, #312]	; (8004f9c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004e62:	400a      	ands	r2, r1
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e68:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6c:	f383 8810 	msr	PRIMASK, r3
}
 8004e70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e72:	f3ef 8310 	mrs	r3, PRIMASK
 8004e76:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e82:	f383 8810 	msr	PRIMASK, r3
}
 8004e86:	46c0      	nop			; (mov r8, r8)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689a      	ldr	r2, [r3, #8]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2101      	movs	r1, #1
 8004e94:	438a      	bics	r2, r1
 8004e96:	609a      	str	r2, [r3, #8]
 8004e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e9e:	f383 8810 	msr	PRIMASK, r3
}
 8004ea2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2288      	movs	r2, #136	; 0x88
 8004ea8:	2120      	movs	r1, #32
 8004eaa:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	228c      	movs	r2, #140	; 0x8c
 8004eb0:	2120      	movs	r1, #32
 8004eb2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2284      	movs	r2, #132	; 0x84
 8004eb8:	2100      	movs	r1, #0
 8004eba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e069      	b.n	8004f94 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2204      	movs	r2, #4
 8004ec8:	4013      	ands	r3, r2
 8004eca:	d052      	beq.n	8004f72 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	69da      	ldr	r2, [r3, #28]
 8004ed2:	2380      	movs	r3, #128	; 0x80
 8004ed4:	011b      	lsls	r3, r3, #4
 8004ed6:	401a      	ands	r2, r3
 8004ed8:	2380      	movs	r3, #128	; 0x80
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d148      	bne.n	8004f72 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2280      	movs	r2, #128	; 0x80
 8004ee6:	0112      	lsls	r2, r2, #4
 8004ee8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eea:	f3ef 8310 	mrs	r3, PRIMASK
 8004eee:	613b      	str	r3, [r7, #16]
  return(result);
 8004ef0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f383 8810 	msr	PRIMASK, r3
}
 8004efe:	46c0      	nop			; (mov r8, r8)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4924      	ldr	r1, [pc, #144]	; (8004f9c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004f0c:	400a      	ands	r2, r1
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f12:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	f383 8810 	msr	PRIMASK, r3
}
 8004f1a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f20:	61fb      	str	r3, [r7, #28]
  return(result);
 8004f22:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f24:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f26:	2301      	movs	r3, #1
 8004f28:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	f383 8810 	msr	PRIMASK, r3
}
 8004f30:	46c0      	nop			; (mov r8, r8)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	438a      	bics	r2, r1
 8004f40:	609a      	str	r2, [r3, #8]
 8004f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	f383 8810 	msr	PRIMASK, r3
}
 8004f4c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2288      	movs	r2, #136	; 0x88
 8004f52:	2120      	movs	r1, #32
 8004f54:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	228c      	movs	r2, #140	; 0x8c
 8004f5a:	2120      	movs	r1, #32
 8004f5c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2290      	movs	r2, #144	; 0x90
 8004f62:	2120      	movs	r1, #32
 8004f64:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2284      	movs	r2, #132	; 0x84
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e010      	b.n	8004f94 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	425a      	negs	r2, r3
 8004f82:	4153      	adcs	r3, r2
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	001a      	movs	r2, r3
 8004f88:	1dfb      	adds	r3, r7, #7
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d100      	bne.n	8004f92 <UART_WaitOnFlagUntilTimeout+0x182>
 8004f90:	e747      	b.n	8004e22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	0018      	movs	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	b014      	add	sp, #80	; 0x50
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	fffffe5f 	.word	0xfffffe5f

08004fa0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2284      	movs	r2, #132	; 0x84
 8004fac:	5c9b      	ldrb	r3, [r3, r2]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d101      	bne.n	8004fb6 <HAL_UARTEx_DisableFifoMode+0x16>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	e027      	b.n	8005006 <HAL_UARTEx_DisableFifoMode+0x66>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2284      	movs	r2, #132	; 0x84
 8004fba:	2101      	movs	r1, #1
 8004fbc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2288      	movs	r2, #136	; 0x88
 8004fc2:	2124      	movs	r1, #36	; 0x24
 8004fc4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2101      	movs	r1, #1
 8004fda:	438a      	bics	r2, r1
 8004fdc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	4a0b      	ldr	r2, [pc, #44]	; (8005010 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2288      	movs	r2, #136	; 0x88
 8004ff8:	2120      	movs	r1, #32
 8004ffa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2284      	movs	r2, #132	; 0x84
 8005000:	2100      	movs	r1, #0
 8005002:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	0018      	movs	r0, r3
 8005008:	46bd      	mov	sp, r7
 800500a:	b004      	add	sp, #16
 800500c:	bd80      	pop	{r7, pc}
 800500e:	46c0      	nop			; (mov r8, r8)
 8005010:	dfffffff 	.word	0xdfffffff

08005014 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2284      	movs	r2, #132	; 0x84
 8005022:	5c9b      	ldrb	r3, [r3, r2]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005028:	2302      	movs	r3, #2
 800502a:	e02e      	b.n	800508a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2284      	movs	r2, #132	; 0x84
 8005030:	2101      	movs	r1, #1
 8005032:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2288      	movs	r2, #136	; 0x88
 8005038:	2124      	movs	r1, #36	; 0x24
 800503a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2101      	movs	r1, #1
 8005050:	438a      	bics	r2, r1
 8005052:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	08d9      	lsrs	r1, r3, #3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	0018      	movs	r0, r3
 800506c:	f000 f854 	bl	8005118 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2288      	movs	r2, #136	; 0x88
 800507c:	2120      	movs	r1, #32
 800507e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2284      	movs	r2, #132	; 0x84
 8005084:	2100      	movs	r1, #0
 8005086:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	0018      	movs	r0, r3
 800508c:	46bd      	mov	sp, r7
 800508e:	b004      	add	sp, #16
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2284      	movs	r2, #132	; 0x84
 80050a2:	5c9b      	ldrb	r3, [r3, r2]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d101      	bne.n	80050ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80050a8:	2302      	movs	r3, #2
 80050aa:	e02f      	b.n	800510c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2284      	movs	r2, #132	; 0x84
 80050b0:	2101      	movs	r1, #1
 80050b2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2288      	movs	r2, #136	; 0x88
 80050b8:	2124      	movs	r1, #36	; 0x24
 80050ba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2101      	movs	r1, #1
 80050d0:	438a      	bics	r2, r1
 80050d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	4a0e      	ldr	r2, [pc, #56]	; (8005114 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80050dc:	4013      	ands	r3, r2
 80050de:	0019      	movs	r1, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	0018      	movs	r0, r3
 80050ee:	f000 f813 	bl	8005118 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2288      	movs	r2, #136	; 0x88
 80050fe:	2120      	movs	r1, #32
 8005100:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2284      	movs	r2, #132	; 0x84
 8005106:	2100      	movs	r1, #0
 8005108:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	0018      	movs	r0, r3
 800510e:	46bd      	mov	sp, r7
 8005110:	b004      	add	sp, #16
 8005112:	bd80      	pop	{r7, pc}
 8005114:	f1ffffff 	.word	0xf1ffffff

08005118 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005124:	2b00      	cmp	r3, #0
 8005126:	d108      	bne.n	800513a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	226a      	movs	r2, #106	; 0x6a
 800512c:	2101      	movs	r1, #1
 800512e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2268      	movs	r2, #104	; 0x68
 8005134:	2101      	movs	r1, #1
 8005136:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005138:	e043      	b.n	80051c2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800513a:	260f      	movs	r6, #15
 800513c:	19bb      	adds	r3, r7, r6
 800513e:	2208      	movs	r2, #8
 8005140:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005142:	200e      	movs	r0, #14
 8005144:	183b      	adds	r3, r7, r0
 8005146:	2208      	movs	r2, #8
 8005148:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	0e5b      	lsrs	r3, r3, #25
 8005152:	b2da      	uxtb	r2, r3
 8005154:	240d      	movs	r4, #13
 8005156:	193b      	adds	r3, r7, r4
 8005158:	2107      	movs	r1, #7
 800515a:	400a      	ands	r2, r1
 800515c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	0f5b      	lsrs	r3, r3, #29
 8005166:	b2da      	uxtb	r2, r3
 8005168:	250c      	movs	r5, #12
 800516a:	197b      	adds	r3, r7, r5
 800516c:	2107      	movs	r1, #7
 800516e:	400a      	ands	r2, r1
 8005170:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005172:	183b      	adds	r3, r7, r0
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	197a      	adds	r2, r7, r5
 8005178:	7812      	ldrb	r2, [r2, #0]
 800517a:	4914      	ldr	r1, [pc, #80]	; (80051cc <UARTEx_SetNbDataToProcess+0xb4>)
 800517c:	5c8a      	ldrb	r2, [r1, r2]
 800517e:	435a      	muls	r2, r3
 8005180:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005182:	197b      	adds	r3, r7, r5
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	4a12      	ldr	r2, [pc, #72]	; (80051d0 <UARTEx_SetNbDataToProcess+0xb8>)
 8005188:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800518a:	0019      	movs	r1, r3
 800518c:	f7fb f850 	bl	8000230 <__divsi3>
 8005190:	0003      	movs	r3, r0
 8005192:	b299      	uxth	r1, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	226a      	movs	r2, #106	; 0x6a
 8005198:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800519a:	19bb      	adds	r3, r7, r6
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	193a      	adds	r2, r7, r4
 80051a0:	7812      	ldrb	r2, [r2, #0]
 80051a2:	490a      	ldr	r1, [pc, #40]	; (80051cc <UARTEx_SetNbDataToProcess+0xb4>)
 80051a4:	5c8a      	ldrb	r2, [r1, r2]
 80051a6:	435a      	muls	r2, r3
 80051a8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80051aa:	193b      	adds	r3, r7, r4
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	4a08      	ldr	r2, [pc, #32]	; (80051d0 <UARTEx_SetNbDataToProcess+0xb8>)
 80051b0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051b2:	0019      	movs	r1, r3
 80051b4:	f7fb f83c 	bl	8000230 <__divsi3>
 80051b8:	0003      	movs	r3, r0
 80051ba:	b299      	uxth	r1, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2268      	movs	r2, #104	; 0x68
 80051c0:	5299      	strh	r1, [r3, r2]
}
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	46bd      	mov	sp, r7
 80051c6:	b005      	add	sp, #20
 80051c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	080071c4 	.word	0x080071c4
 80051d0:	080071cc 	.word	0x080071cc

080051d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	0002      	movs	r2, r0
 80051dc:	1dbb      	adds	r3, r7, #6
 80051de:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80051e0:	2300      	movs	r3, #0
 80051e2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80051e4:	1dbb      	adds	r3, r7, #6
 80051e6:	2200      	movs	r2, #0
 80051e8:	5e9b      	ldrsh	r3, [r3, r2]
 80051ea:	2b84      	cmp	r3, #132	; 0x84
 80051ec:	d006      	beq.n	80051fc <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80051ee:	1dbb      	adds	r3, r7, #6
 80051f0:	2200      	movs	r2, #0
 80051f2:	5e9a      	ldrsh	r2, [r3, r2]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	18d3      	adds	r3, r2, r3
 80051f8:	3303      	adds	r3, #3
 80051fa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80051fc:	68fb      	ldr	r3, [r7, #12]
}
 80051fe:	0018      	movs	r0, r3
 8005200:	46bd      	mov	sp, r7
 8005202:	b004      	add	sp, #16
 8005204:	bd80      	pop	{r7, pc}

08005206 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800520a:	f000 fa3d 	bl	8005688 <vTaskStartScheduler>
  
  return osOK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	0018      	movs	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005216:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005218:	b087      	sub	sp, #28
 800521a:	af02      	add	r7, sp, #8
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685c      	ldr	r4, [r3, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800522c:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2208      	movs	r2, #8
 8005232:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005234:	0018      	movs	r0, r3
 8005236:	f7ff ffcd 	bl	80051d4 <makeFreeRtosPriority>
 800523a:	0001      	movs	r1, r0
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	230c      	movs	r3, #12
 8005240:	18fb      	adds	r3, r7, r3
 8005242:	9301      	str	r3, [sp, #4]
 8005244:	9100      	str	r1, [sp, #0]
 8005246:	0013      	movs	r3, r2
 8005248:	0032      	movs	r2, r6
 800524a:	0029      	movs	r1, r5
 800524c:	0020      	movs	r0, r4
 800524e:	f000 f8c7 	bl	80053e0 <xTaskCreate>
 8005252:	0003      	movs	r3, r0
 8005254:	2b01      	cmp	r3, #1
 8005256:	d001      	beq.n	800525c <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8005258:	2300      	movs	r3, #0
 800525a:	e000      	b.n	800525e <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 800525c:	68fb      	ldr	r3, [r7, #12]
}
 800525e:	0018      	movs	r0, r3
 8005260:	46bd      	mov	sp, r7
 8005262:	b005      	add	sp, #20
 8005264:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005266 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <osDelay+0x16>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	e000      	b.n	800527e <osDelay+0x18>
 800527c:	2301      	movs	r3, #1
 800527e:	0018      	movs	r0, r3
 8005280:	f000 f9dc 	bl	800563c <vTaskDelay>
  
  return osOK;
 8005284:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005286:	0018      	movs	r0, r3
 8005288:	46bd      	mov	sp, r7
 800528a:	b004      	add	sp, #16
 800528c:	bd80      	pop	{r7, pc}

0800528e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b082      	sub	sp, #8
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3308      	adds	r3, #8
 800529a:	001a      	movs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	4252      	negs	r2, r2
 80052a6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3308      	adds	r3, #8
 80052ac:	001a      	movs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	3308      	adds	r3, #8
 80052b6:	001a      	movs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052c2:	46c0      	nop			; (mov r8, r8)
 80052c4:	46bd      	mov	sp, r7
 80052c6:	b002      	add	sp, #8
 80052c8:	bd80      	pop	{r7, pc}

080052ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b082      	sub	sp, #8
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052d8:	46c0      	nop			; (mov r8, r8)
 80052da:	46bd      	mov	sp, r7
 80052dc:	b002      	add	sp, #8
 80052de:	bd80      	pop	{r7, pc}

080052e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	601a      	str	r2, [r3, #0]
}
 800531c:	46c0      	nop			; (mov r8, r8)
 800531e:	46bd      	mov	sp, r7
 8005320:	b004      	add	sp, #16
 8005322:	bd80      	pop	{r7, pc}

08005324 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	3301      	adds	r3, #1
 8005338:	d103      	bne.n	8005342 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	e00c      	b.n	800535c <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	3308      	adds	r3, #8
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	e002      	b.n	8005350 <vListInsert+0x2c>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	429a      	cmp	r2, r3
 800535a:	d2f6      	bcs.n	800534a <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	601a      	str	r2, [r3, #0]
}
 8005388:	46c0      	nop			; (mov r8, r8)
 800538a:	46bd      	mov	sp, r7
 800538c:	b004      	add	sp, #16
 800538e:	bd80      	pop	{r7, pc}

08005390 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6892      	ldr	r2, [r2, #8]
 80053a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6852      	ldr	r2, [r2, #4]
 80053b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d103      	bne.n	80053c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	1e5a      	subs	r2, r3, #1
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
}
 80053d8:	0018      	movs	r0, r3
 80053da:	46bd      	mov	sp, r7
 80053dc:	b004      	add	sp, #16
 80053de:	bd80      	pop	{r7, pc}

080053e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80053e0:	b590      	push	{r4, r7, lr}
 80053e2:	b08d      	sub	sp, #52	; 0x34
 80053e4:	af04      	add	r7, sp, #16
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	1dbb      	adds	r3, r7, #6
 80053ee:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053f0:	1dbb      	adds	r3, r7, #6
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	0018      	movs	r0, r3
 80053f8:	f000 fd52 	bl	8005ea0 <pvPortMalloc>
 80053fc:	0003      	movs	r3, r0
 80053fe:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d010      	beq.n	8005428 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005406:	2054      	movs	r0, #84	; 0x54
 8005408:	f000 fd4a 	bl	8005ea0 <pvPortMalloc>
 800540c:	0003      	movs	r3, r0
 800540e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	631a      	str	r2, [r3, #48]	; 0x30
 800541c:	e006      	b.n	800542c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	0018      	movs	r0, r3
 8005422:	f000 fde9 	bl	8005ff8 <vPortFree>
 8005426:	e001      	b.n	800542c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005428:	2300      	movs	r3, #0
 800542a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d016      	beq.n	8005460 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005432:	1dbb      	adds	r3, r7, #6
 8005434:	881a      	ldrh	r2, [r3, #0]
 8005436:	683c      	ldr	r4, [r7, #0]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	2300      	movs	r3, #0
 800543e:	9303      	str	r3, [sp, #12]
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	9302      	str	r3, [sp, #8]
 8005444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005446:	9301      	str	r3, [sp, #4]
 8005448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	0023      	movs	r3, r4
 800544e:	f000 f80f 	bl	8005470 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	0018      	movs	r0, r3
 8005456:	f000 f88d 	bl	8005574 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800545a:	2301      	movs	r3, #1
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	e002      	b.n	8005466 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005460:	2301      	movs	r3, #1
 8005462:	425b      	negs	r3, r3
 8005464:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005466:	69bb      	ldr	r3, [r7, #24]
	}
 8005468:	0018      	movs	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	b009      	add	sp, #36	; 0x24
 800546e:	bd90      	pop	{r4, r7, pc}

08005470 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800547e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	493a      	ldr	r1, [pc, #232]	; (8005570 <prvInitialiseNewTask+0x100>)
 8005486:	468c      	mov	ip, r1
 8005488:	4463      	add	r3, ip
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	18d3      	adds	r3, r2, r3
 800548e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	2207      	movs	r2, #7
 8005494:	4393      	bics	r3, r2
 8005496:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	2207      	movs	r2, #7
 800549c:	4013      	ands	r3, r2
 800549e:	d001      	beq.n	80054a4 <prvInitialiseNewTask+0x34>
 80054a0:	b672      	cpsid	i
 80054a2:	e7fe      	b.n	80054a2 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d020      	beq.n	80054ec <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054aa:	2300      	movs	r3, #0
 80054ac:	617b      	str	r3, [r7, #20]
 80054ae:	e013      	b.n	80054d8 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	18d3      	adds	r3, r2, r3
 80054b6:	7818      	ldrb	r0, [r3, #0]
 80054b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054ba:	2134      	movs	r1, #52	; 0x34
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	18d3      	adds	r3, r2, r3
 80054c0:	185b      	adds	r3, r3, r1
 80054c2:	1c02      	adds	r2, r0, #0
 80054c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	18d3      	adds	r3, r2, r3
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d006      	beq.n	80054e0 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	3301      	adds	r3, #1
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2b0f      	cmp	r3, #15
 80054dc:	d9e8      	bls.n	80054b0 <prvInitialiseNewTask+0x40>
 80054de:	e000      	b.n	80054e2 <prvInitialiseNewTask+0x72>
			{
				break;
 80054e0:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e4:	2243      	movs	r2, #67	; 0x43
 80054e6:	2100      	movs	r1, #0
 80054e8:	5499      	strb	r1, [r3, r2]
 80054ea:	e003      	b.n	80054f4 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80054ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ee:	2234      	movs	r2, #52	; 0x34
 80054f0:	2100      	movs	r1, #0
 80054f2:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	2b06      	cmp	r3, #6
 80054f8:	d901      	bls.n	80054fe <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054fa:	2306      	movs	r3, #6
 80054fc:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005500:	6a3a      	ldr	r2, [r7, #32]
 8005502:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	6a3a      	ldr	r2, [r7, #32]
 8005508:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800550a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550c:	2200      	movs	r2, #0
 800550e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	3304      	adds	r3, #4
 8005514:	0018      	movs	r0, r3
 8005516:	f7ff fed8 	bl	80052ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551c:	3318      	adds	r3, #24
 800551e:	0018      	movs	r0, r3
 8005520:	f7ff fed3 	bl	80052ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005528:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	2207      	movs	r2, #7
 800552e:	1ad2      	subs	r2, r2, r3
 8005530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005532:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005538:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800553a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553c:	2200      	movs	r2, #0
 800553e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	2250      	movs	r2, #80	; 0x50
 8005544:	2100      	movs	r1, #0
 8005546:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	68f9      	ldr	r1, [r7, #12]
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	0018      	movs	r0, r3
 8005550:	f000 fb70 	bl	8005c34 <pxPortInitialiseStack>
 8005554:	0002      	movs	r2, r0
 8005556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005558:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005566:	46c0      	nop			; (mov r8, r8)
 8005568:	46bd      	mov	sp, r7
 800556a:	b006      	add	sp, #24
 800556c:	bd80      	pop	{r7, pc}
 800556e:	46c0      	nop			; (mov r8, r8)
 8005570:	3fffffff 	.word	0x3fffffff

08005574 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800557c:	f000 fbf8 	bl	8005d70 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005580:	4b28      	ldr	r3, [pc, #160]	; (8005624 <prvAddNewTaskToReadyList+0xb0>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	4b27      	ldr	r3, [pc, #156]	; (8005624 <prvAddNewTaskToReadyList+0xb0>)
 8005588:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800558a:	4b27      	ldr	r3, [pc, #156]	; (8005628 <prvAddNewTaskToReadyList+0xb4>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d109      	bne.n	80055a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005592:	4b25      	ldr	r3, [pc, #148]	; (8005628 <prvAddNewTaskToReadyList+0xb4>)
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005598:	4b22      	ldr	r3, [pc, #136]	; (8005624 <prvAddNewTaskToReadyList+0xb0>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d110      	bne.n	80055c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055a0:	f000 fa52 	bl	8005a48 <prvInitialiseTaskLists>
 80055a4:	e00d      	b.n	80055c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055a6:	4b21      	ldr	r3, [pc, #132]	; (800562c <prvAddNewTaskToReadyList+0xb8>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d109      	bne.n	80055c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055ae:	4b1e      	ldr	r3, [pc, #120]	; (8005628 <prvAddNewTaskToReadyList+0xb4>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d802      	bhi.n	80055c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80055bc:	4b1a      	ldr	r3, [pc, #104]	; (8005628 <prvAddNewTaskToReadyList+0xb4>)
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80055c2:	4b1b      	ldr	r3, [pc, #108]	; (8005630 <prvAddNewTaskToReadyList+0xbc>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	4b19      	ldr	r3, [pc, #100]	; (8005630 <prvAddNewTaskToReadyList+0xbc>)
 80055ca:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d0:	4b18      	ldr	r3, [pc, #96]	; (8005634 <prvAddNewTaskToReadyList+0xc0>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d903      	bls.n	80055e0 <prvAddNewTaskToReadyList+0x6c>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055dc:	4b15      	ldr	r3, [pc, #84]	; (8005634 <prvAddNewTaskToReadyList+0xc0>)
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e4:	0013      	movs	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	189b      	adds	r3, r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4a12      	ldr	r2, [pc, #72]	; (8005638 <prvAddNewTaskToReadyList+0xc4>)
 80055ee:	189a      	adds	r2, r3, r2
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3304      	adds	r3, #4
 80055f4:	0019      	movs	r1, r3
 80055f6:	0010      	movs	r0, r2
 80055f8:	f7ff fe72 	bl	80052e0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80055fc:	f000 fbca 	bl	8005d94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005600:	4b0a      	ldr	r3, [pc, #40]	; (800562c <prvAddNewTaskToReadyList+0xb8>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d008      	beq.n	800561a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005608:	4b07      	ldr	r3, [pc, #28]	; (8005628 <prvAddNewTaskToReadyList+0xb4>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005612:	429a      	cmp	r2, r3
 8005614:	d201      	bcs.n	800561a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005616:	f000 fb9b 	bl	8005d50 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	46bd      	mov	sp, r7
 800561e:	b002      	add	sp, #8
 8005620:	bd80      	pop	{r7, pc}
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	20000554 	.word	0x20000554
 8005628:	20000454 	.word	0x20000454
 800562c:	20000560 	.word	0x20000560
 8005630:	20000570 	.word	0x20000570
 8005634:	2000055c 	.word	0x2000055c
 8005638:	20000458 	.word	0x20000458

0800563c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d010      	beq.n	8005670 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800564e:	4b0d      	ldr	r3, [pc, #52]	; (8005684 <vTaskDelay+0x48>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <vTaskDelay+0x1e>
 8005656:	b672      	cpsid	i
 8005658:	e7fe      	b.n	8005658 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800565a:	f000 f84b 	bl	80056f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2100      	movs	r1, #0
 8005662:	0018      	movs	r0, r3
 8005664:	f000 fa92 	bl	8005b8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005668:	f000 f850 	bl	800570c <xTaskResumeAll>
 800566c:	0003      	movs	r3, r0
 800566e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8005676:	f000 fb6b 	bl	8005d50 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	46bd      	mov	sp, r7
 800567e:	b004      	add	sp, #16
 8005680:	bd80      	pop	{r7, pc}
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	2000057c 	.word	0x2000057c

08005688 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800568e:	4913      	ldr	r1, [pc, #76]	; (80056dc <vTaskStartScheduler+0x54>)
 8005690:	4813      	ldr	r0, [pc, #76]	; (80056e0 <vTaskStartScheduler+0x58>)
 8005692:	4b14      	ldr	r3, [pc, #80]	; (80056e4 <vTaskStartScheduler+0x5c>)
 8005694:	9301      	str	r3, [sp, #4]
 8005696:	2300      	movs	r3, #0
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	2300      	movs	r3, #0
 800569c:	2280      	movs	r2, #128	; 0x80
 800569e:	f7ff fe9f 	bl	80053e0 <xTaskCreate>
 80056a2:	0003      	movs	r3, r0
 80056a4:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d10d      	bne.n	80056c8 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80056ac:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056ae:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <vTaskStartScheduler+0x60>)
 80056b0:	2201      	movs	r2, #1
 80056b2:	4252      	negs	r2, r2
 80056b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056b6:	4b0d      	ldr	r3, [pc, #52]	; (80056ec <vTaskStartScheduler+0x64>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056bc:	4b0c      	ldr	r3, [pc, #48]	; (80056f0 <vTaskStartScheduler+0x68>)
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056c2:	f000 fb21 	bl	8005d08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056c6:	e004      	b.n	80056d2 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3301      	adds	r3, #1
 80056cc:	d101      	bne.n	80056d2 <vTaskStartScheduler+0x4a>
 80056ce:	b672      	cpsid	i
 80056d0:	e7fe      	b.n	80056d0 <vTaskStartScheduler+0x48>
}
 80056d2:	46c0      	nop			; (mov r8, r8)
 80056d4:	46bd      	mov	sp, r7
 80056d6:	b002      	add	sp, #8
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	46c0      	nop			; (mov r8, r8)
 80056dc:	080070f0 	.word	0x080070f0
 80056e0:	08005a29 	.word	0x08005a29
 80056e4:	20000578 	.word	0x20000578
 80056e8:	20000574 	.word	0x20000574
 80056ec:	20000560 	.word	0x20000560
 80056f0:	20000558 	.word	0x20000558

080056f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80056f8:	4b03      	ldr	r3, [pc, #12]	; (8005708 <vTaskSuspendAll+0x14>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	4b02      	ldr	r3, [pc, #8]	; (8005708 <vTaskSuspendAll+0x14>)
 8005700:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005702:	46c0      	nop			; (mov r8, r8)
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	2000057c 	.word	0x2000057c

0800570c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005712:	2300      	movs	r3, #0
 8005714:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005716:	2300      	movs	r3, #0
 8005718:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800571a:	4b3a      	ldr	r3, [pc, #232]	; (8005804 <xTaskResumeAll+0xf8>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <xTaskResumeAll+0x1a>
 8005722:	b672      	cpsid	i
 8005724:	e7fe      	b.n	8005724 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005726:	f000 fb23 	bl	8005d70 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800572a:	4b36      	ldr	r3, [pc, #216]	; (8005804 <xTaskResumeAll+0xf8>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	1e5a      	subs	r2, r3, #1
 8005730:	4b34      	ldr	r3, [pc, #208]	; (8005804 <xTaskResumeAll+0xf8>)
 8005732:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005734:	4b33      	ldr	r3, [pc, #204]	; (8005804 <xTaskResumeAll+0xf8>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d15b      	bne.n	80057f4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800573c:	4b32      	ldr	r3, [pc, #200]	; (8005808 <xTaskResumeAll+0xfc>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d057      	beq.n	80057f4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005744:	e02f      	b.n	80057a6 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005746:	4b31      	ldr	r3, [pc, #196]	; (800580c <xTaskResumeAll+0x100>)
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	3318      	adds	r3, #24
 8005752:	0018      	movs	r0, r3
 8005754:	f7ff fe1c 	bl	8005390 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3304      	adds	r3, #4
 800575c:	0018      	movs	r0, r3
 800575e:	f7ff fe17 	bl	8005390 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005766:	4b2a      	ldr	r3, [pc, #168]	; (8005810 <xTaskResumeAll+0x104>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d903      	bls.n	8005776 <xTaskResumeAll+0x6a>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005772:	4b27      	ldr	r3, [pc, #156]	; (8005810 <xTaskResumeAll+0x104>)
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800577a:	0013      	movs	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	189b      	adds	r3, r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4a24      	ldr	r2, [pc, #144]	; (8005814 <xTaskResumeAll+0x108>)
 8005784:	189a      	adds	r2, r3, r2
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	3304      	adds	r3, #4
 800578a:	0019      	movs	r1, r3
 800578c:	0010      	movs	r0, r2
 800578e:	f7ff fda7 	bl	80052e0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005796:	4b20      	ldr	r3, [pc, #128]	; (8005818 <xTaskResumeAll+0x10c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	429a      	cmp	r2, r3
 800579e:	d302      	bcc.n	80057a6 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80057a0:	4b1e      	ldr	r3, [pc, #120]	; (800581c <xTaskResumeAll+0x110>)
 80057a2:	2201      	movs	r2, #1
 80057a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057a6:	4b19      	ldr	r3, [pc, #100]	; (800580c <xTaskResumeAll+0x100>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1cb      	bne.n	8005746 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80057b4:	f000 f9cc 	bl	8005b50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80057b8:	4b19      	ldr	r3, [pc, #100]	; (8005820 <xTaskResumeAll+0x114>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00f      	beq.n	80057e4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80057c4:	f000 f82e 	bl	8005824 <xTaskIncrementTick>
 80057c8:	1e03      	subs	r3, r0, #0
 80057ca:	d002      	beq.n	80057d2 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80057cc:	4b13      	ldr	r3, [pc, #76]	; (800581c <xTaskResumeAll+0x110>)
 80057ce:	2201      	movs	r2, #1
 80057d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3b01      	subs	r3, #1
 80057d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1f2      	bne.n	80057c4 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 80057de:	4b10      	ldr	r3, [pc, #64]	; (8005820 <xTaskResumeAll+0x114>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80057e4:	4b0d      	ldr	r3, [pc, #52]	; (800581c <xTaskResumeAll+0x110>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057ec:	2301      	movs	r3, #1
 80057ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057f0:	f000 faae 	bl	8005d50 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057f4:	f000 face 	bl	8005d94 <vPortExitCritical>

	return xAlreadyYielded;
 80057f8:	68bb      	ldr	r3, [r7, #8]
}
 80057fa:	0018      	movs	r0, r3
 80057fc:	46bd      	mov	sp, r7
 80057fe:	b004      	add	sp, #16
 8005800:	bd80      	pop	{r7, pc}
 8005802:	46c0      	nop			; (mov r8, r8)
 8005804:	2000057c 	.word	0x2000057c
 8005808:	20000554 	.word	0x20000554
 800580c:	20000514 	.word	0x20000514
 8005810:	2000055c 	.word	0x2000055c
 8005814:	20000458 	.word	0x20000458
 8005818:	20000454 	.word	0x20000454
 800581c:	20000568 	.word	0x20000568
 8005820:	20000564 	.word	0x20000564

08005824 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800582a:	2300      	movs	r3, #0
 800582c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800582e:	4b4a      	ldr	r3, [pc, #296]	; (8005958 <xTaskIncrementTick+0x134>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d000      	beq.n	8005838 <xTaskIncrementTick+0x14>
 8005836:	e084      	b.n	8005942 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005838:	4b48      	ldr	r3, [pc, #288]	; (800595c <xTaskIncrementTick+0x138>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3301      	adds	r3, #1
 800583e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005840:	4b46      	ldr	r3, [pc, #280]	; (800595c <xTaskIncrementTick+0x138>)
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d117      	bne.n	800587c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800584c:	4b44      	ldr	r3, [pc, #272]	; (8005960 <xTaskIncrementTick+0x13c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <xTaskIncrementTick+0x36>
 8005856:	b672      	cpsid	i
 8005858:	e7fe      	b.n	8005858 <xTaskIncrementTick+0x34>
 800585a:	4b41      	ldr	r3, [pc, #260]	; (8005960 <xTaskIncrementTick+0x13c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	4b40      	ldr	r3, [pc, #256]	; (8005964 <xTaskIncrementTick+0x140>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	4b3e      	ldr	r3, [pc, #248]	; (8005960 <xTaskIncrementTick+0x13c>)
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	4b3e      	ldr	r3, [pc, #248]	; (8005964 <xTaskIncrementTick+0x140>)
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	4b3e      	ldr	r3, [pc, #248]	; (8005968 <xTaskIncrementTick+0x144>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	4b3c      	ldr	r3, [pc, #240]	; (8005968 <xTaskIncrementTick+0x144>)
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	f000 f96a 	bl	8005b50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800587c:	4b3b      	ldr	r3, [pc, #236]	; (800596c <xTaskIncrementTick+0x148>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	429a      	cmp	r2, r3
 8005884:	d349      	bcc.n	800591a <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005886:	4b36      	ldr	r3, [pc, #216]	; (8005960 <xTaskIncrementTick+0x13c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d104      	bne.n	800589a <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005890:	4b36      	ldr	r3, [pc, #216]	; (800596c <xTaskIncrementTick+0x148>)
 8005892:	2201      	movs	r2, #1
 8005894:	4252      	negs	r2, r2
 8005896:	601a      	str	r2, [r3, #0]
					break;
 8005898:	e03f      	b.n	800591a <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800589a:	4b31      	ldr	r3, [pc, #196]	; (8005960 <xTaskIncrementTick+0x13c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d203      	bcs.n	80058ba <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80058b2:	4b2e      	ldr	r3, [pc, #184]	; (800596c <xTaskIncrementTick+0x148>)
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80058b8:	e02f      	b.n	800591a <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	3304      	adds	r3, #4
 80058be:	0018      	movs	r0, r3
 80058c0:	f7ff fd66 	bl	8005390 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d004      	beq.n	80058d6 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	3318      	adds	r3, #24
 80058d0:	0018      	movs	r0, r3
 80058d2:	f7ff fd5d 	bl	8005390 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058da:	4b25      	ldr	r3, [pc, #148]	; (8005970 <xTaskIncrementTick+0x14c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d903      	bls.n	80058ea <xTaskIncrementTick+0xc6>
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e6:	4b22      	ldr	r3, [pc, #136]	; (8005970 <xTaskIncrementTick+0x14c>)
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ee:	0013      	movs	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	189b      	adds	r3, r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4a1f      	ldr	r2, [pc, #124]	; (8005974 <xTaskIncrementTick+0x150>)
 80058f8:	189a      	adds	r2, r3, r2
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	3304      	adds	r3, #4
 80058fe:	0019      	movs	r1, r3
 8005900:	0010      	movs	r0, r2
 8005902:	f7ff fced 	bl	80052e0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800590a:	4b1b      	ldr	r3, [pc, #108]	; (8005978 <xTaskIncrementTick+0x154>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005910:	429a      	cmp	r2, r3
 8005912:	d3b8      	bcc.n	8005886 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8005914:	2301      	movs	r3, #1
 8005916:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005918:	e7b5      	b.n	8005886 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800591a:	4b17      	ldr	r3, [pc, #92]	; (8005978 <xTaskIncrementTick+0x154>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005920:	4914      	ldr	r1, [pc, #80]	; (8005974 <xTaskIncrementTick+0x150>)
 8005922:	0013      	movs	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	189b      	adds	r3, r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	585b      	ldr	r3, [r3, r1]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d901      	bls.n	8005934 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8005930:	2301      	movs	r3, #1
 8005932:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005934:	4b11      	ldr	r3, [pc, #68]	; (800597c <xTaskIncrementTick+0x158>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d007      	beq.n	800594c <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 800593c:	2301      	movs	r3, #1
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	e004      	b.n	800594c <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005942:	4b0f      	ldr	r3, [pc, #60]	; (8005980 <xTaskIncrementTick+0x15c>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	4b0d      	ldr	r3, [pc, #52]	; (8005980 <xTaskIncrementTick+0x15c>)
 800594a:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800594c:	697b      	ldr	r3, [r7, #20]
}
 800594e:	0018      	movs	r0, r3
 8005950:	46bd      	mov	sp, r7
 8005952:	b006      	add	sp, #24
 8005954:	bd80      	pop	{r7, pc}
 8005956:	46c0      	nop			; (mov r8, r8)
 8005958:	2000057c 	.word	0x2000057c
 800595c:	20000558 	.word	0x20000558
 8005960:	2000050c 	.word	0x2000050c
 8005964:	20000510 	.word	0x20000510
 8005968:	2000056c 	.word	0x2000056c
 800596c:	20000574 	.word	0x20000574
 8005970:	2000055c 	.word	0x2000055c
 8005974:	20000458 	.word	0x20000458
 8005978:	20000454 	.word	0x20000454
 800597c:	20000568 	.word	0x20000568
 8005980:	20000564 	.word	0x20000564

08005984 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800598a:	4b22      	ldr	r3, [pc, #136]	; (8005a14 <vTaskSwitchContext+0x90>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005992:	4b21      	ldr	r3, [pc, #132]	; (8005a18 <vTaskSwitchContext+0x94>)
 8005994:	2201      	movs	r2, #1
 8005996:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005998:	e037      	b.n	8005a0a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800599a:	4b1f      	ldr	r3, [pc, #124]	; (8005a18 <vTaskSwitchContext+0x94>)
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059a0:	4b1e      	ldr	r3, [pc, #120]	; (8005a1c <vTaskSwitchContext+0x98>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	607b      	str	r3, [r7, #4]
 80059a6:	e007      	b.n	80059b8 <vTaskSwitchContext+0x34>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <vTaskSwitchContext+0x2e>
 80059ae:	b672      	cpsid	i
 80059b0:	e7fe      	b.n	80059b0 <vTaskSwitchContext+0x2c>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3b01      	subs	r3, #1
 80059b6:	607b      	str	r3, [r7, #4]
 80059b8:	4919      	ldr	r1, [pc, #100]	; (8005a20 <vTaskSwitchContext+0x9c>)
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	0013      	movs	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	189b      	adds	r3, r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	585b      	ldr	r3, [r3, r1]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0ee      	beq.n	80059a8 <vTaskSwitchContext+0x24>
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	0013      	movs	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	189b      	adds	r3, r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4a12      	ldr	r2, [pc, #72]	; (8005a20 <vTaskSwitchContext+0x9c>)
 80059d6:	189b      	adds	r3, r3, r2
 80059d8:	603b      	str	r3, [r7, #0]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	605a      	str	r2, [r3, #4]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	3308      	adds	r3, #8
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d104      	bne.n	80059fa <vTaskSwitchContext+0x76>
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	605a      	str	r2, [r3, #4]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	4b08      	ldr	r3, [pc, #32]	; (8005a24 <vTaskSwitchContext+0xa0>)
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <vTaskSwitchContext+0x98>)
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	601a      	str	r2, [r3, #0]
}
 8005a0a:	46c0      	nop			; (mov r8, r8)
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	b002      	add	sp, #8
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	2000057c 	.word	0x2000057c
 8005a18:	20000568 	.word	0x20000568
 8005a1c:	2000055c 	.word	0x2000055c
 8005a20:	20000458 	.word	0x20000458
 8005a24:	20000454 	.word	0x20000454

08005a28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a30:	f000 f84e 	bl	8005ad0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a34:	4b03      	ldr	r3, [pc, #12]	; (8005a44 <prvIdleTask+0x1c>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d9f9      	bls.n	8005a30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a3c:	f000 f988 	bl	8005d50 <vPortYield>
		prvCheckTasksWaitingTermination();
 8005a40:	e7f6      	b.n	8005a30 <prvIdleTask+0x8>
 8005a42:	46c0      	nop			; (mov r8, r8)
 8005a44:	20000458 	.word	0x20000458

08005a48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a4e:	2300      	movs	r3, #0
 8005a50:	607b      	str	r3, [r7, #4]
 8005a52:	e00c      	b.n	8005a6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	0013      	movs	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	189b      	adds	r3, r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4a14      	ldr	r2, [pc, #80]	; (8005ab0 <prvInitialiseTaskLists+0x68>)
 8005a60:	189b      	adds	r3, r3, r2
 8005a62:	0018      	movs	r0, r3
 8005a64:	f7ff fc13 	bl	800528e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	607b      	str	r3, [r7, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b06      	cmp	r3, #6
 8005a72:	d9ef      	bls.n	8005a54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a74:	4b0f      	ldr	r3, [pc, #60]	; (8005ab4 <prvInitialiseTaskLists+0x6c>)
 8005a76:	0018      	movs	r0, r3
 8005a78:	f7ff fc09 	bl	800528e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a7c:	4b0e      	ldr	r3, [pc, #56]	; (8005ab8 <prvInitialiseTaskLists+0x70>)
 8005a7e:	0018      	movs	r0, r3
 8005a80:	f7ff fc05 	bl	800528e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a84:	4b0d      	ldr	r3, [pc, #52]	; (8005abc <prvInitialiseTaskLists+0x74>)
 8005a86:	0018      	movs	r0, r3
 8005a88:	f7ff fc01 	bl	800528e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a8c:	4b0c      	ldr	r3, [pc, #48]	; (8005ac0 <prvInitialiseTaskLists+0x78>)
 8005a8e:	0018      	movs	r0, r3
 8005a90:	f7ff fbfd 	bl	800528e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a94:	4b0b      	ldr	r3, [pc, #44]	; (8005ac4 <prvInitialiseTaskLists+0x7c>)
 8005a96:	0018      	movs	r0, r3
 8005a98:	f7ff fbf9 	bl	800528e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ac8 <prvInitialiseTaskLists+0x80>)
 8005a9e:	4a05      	ldr	r2, [pc, #20]	; (8005ab4 <prvInitialiseTaskLists+0x6c>)
 8005aa0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005aa2:	4b0a      	ldr	r3, [pc, #40]	; (8005acc <prvInitialiseTaskLists+0x84>)
 8005aa4:	4a04      	ldr	r2, [pc, #16]	; (8005ab8 <prvInitialiseTaskLists+0x70>)
 8005aa6:	601a      	str	r2, [r3, #0]
}
 8005aa8:	46c0      	nop			; (mov r8, r8)
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	b002      	add	sp, #8
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	20000458 	.word	0x20000458
 8005ab4:	200004e4 	.word	0x200004e4
 8005ab8:	200004f8 	.word	0x200004f8
 8005abc:	20000514 	.word	0x20000514
 8005ac0:	20000528 	.word	0x20000528
 8005ac4:	20000540 	.word	0x20000540
 8005ac8:	2000050c 	.word	0x2000050c
 8005acc:	20000510 	.word	0x20000510

08005ad0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ad6:	e01a      	b.n	8005b0e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005ad8:	f000 f94a 	bl	8005d70 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005adc:	4b10      	ldr	r3, [pc, #64]	; (8005b20 <prvCheckTasksWaitingTermination+0x50>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f7ff fc51 	bl	8005390 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005aee:	4b0d      	ldr	r3, [pc, #52]	; (8005b24 <prvCheckTasksWaitingTermination+0x54>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	1e5a      	subs	r2, r3, #1
 8005af4:	4b0b      	ldr	r3, [pc, #44]	; (8005b24 <prvCheckTasksWaitingTermination+0x54>)
 8005af6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005af8:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <prvCheckTasksWaitingTermination+0x58>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	1e5a      	subs	r2, r3, #1
 8005afe:	4b0a      	ldr	r3, [pc, #40]	; (8005b28 <prvCheckTasksWaitingTermination+0x58>)
 8005b00:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8005b02:	f000 f947 	bl	8005d94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f000 f80f 	bl	8005b2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b0e:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <prvCheckTasksWaitingTermination+0x58>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e0      	bne.n	8005ad8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b16:	46c0      	nop			; (mov r8, r8)
 8005b18:	46c0      	nop			; (mov r8, r8)
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b002      	add	sp, #8
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	20000528 	.word	0x20000528
 8005b24:	20000554 	.word	0x20000554
 8005b28:	2000053c 	.word	0x2000053c

08005b2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b38:	0018      	movs	r0, r3
 8005b3a:	f000 fa5d 	bl	8005ff8 <vPortFree>
			vPortFree( pxTCB );
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	0018      	movs	r0, r3
 8005b42:	f000 fa59 	bl	8005ff8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b46:	46c0      	nop			; (mov r8, r8)
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	b002      	add	sp, #8
 8005b4c:	bd80      	pop	{r7, pc}
	...

08005b50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b56:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <prvResetNextTaskUnblockTime+0x34>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d104      	bne.n	8005b6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b60:	4b09      	ldr	r3, [pc, #36]	; (8005b88 <prvResetNextTaskUnblockTime+0x38>)
 8005b62:	2201      	movs	r2, #1
 8005b64:	4252      	negs	r2, r2
 8005b66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b68:	e008      	b.n	8005b7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b6a:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <prvResetNextTaskUnblockTime+0x34>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	4b03      	ldr	r3, [pc, #12]	; (8005b88 <prvResetNextTaskUnblockTime+0x38>)
 8005b7a:	601a      	str	r2, [r3, #0]
}
 8005b7c:	46c0      	nop			; (mov r8, r8)
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	b002      	add	sp, #8
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	2000050c 	.word	0x2000050c
 8005b88:	20000574 	.word	0x20000574

08005b8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b96:	4b21      	ldr	r3, [pc, #132]	; (8005c1c <prvAddCurrentTaskToDelayedList+0x90>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b9c:	4b20      	ldr	r3, [pc, #128]	; (8005c20 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	f7ff fbf4 	bl	8005390 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3301      	adds	r3, #1
 8005bac:	d10b      	bne.n	8005bc6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d008      	beq.n	8005bc6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bb4:	4b1a      	ldr	r3, [pc, #104]	; (8005c20 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	1d1a      	adds	r2, r3, #4
 8005bba:	4b1a      	ldr	r3, [pc, #104]	; (8005c24 <prvAddCurrentTaskToDelayedList+0x98>)
 8005bbc:	0011      	movs	r1, r2
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	f7ff fb8e 	bl	80052e0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005bc4:	e026      	b.n	8005c14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	18d3      	adds	r3, r2, r3
 8005bcc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005bce:	4b14      	ldr	r3, [pc, #80]	; (8005c20 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d209      	bcs.n	8005bf2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bde:	4b12      	ldr	r3, [pc, #72]	; (8005c28 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	4b0f      	ldr	r3, [pc, #60]	; (8005c20 <prvAddCurrentTaskToDelayedList+0x94>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3304      	adds	r3, #4
 8005be8:	0019      	movs	r1, r3
 8005bea:	0010      	movs	r0, r2
 8005bec:	f7ff fb9a 	bl	8005324 <vListInsert>
}
 8005bf0:	e010      	b.n	8005c14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bf2:	4b0e      	ldr	r3, [pc, #56]	; (8005c2c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3304      	adds	r3, #4
 8005bfc:	0019      	movs	r1, r3
 8005bfe:	0010      	movs	r0, r2
 8005c00:	f7ff fb90 	bl	8005324 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c04:	4b0a      	ldr	r3, [pc, #40]	; (8005c30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d202      	bcs.n	8005c14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c0e:	4b08      	ldr	r3, [pc, #32]	; (8005c30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	601a      	str	r2, [r3, #0]
}
 8005c14:	46c0      	nop			; (mov r8, r8)
 8005c16:	46bd      	mov	sp, r7
 8005c18:	b004      	add	sp, #16
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	20000558 	.word	0x20000558
 8005c20:	20000454 	.word	0x20000454
 8005c24:	20000540 	.word	0x20000540
 8005c28:	20000510 	.word	0x20000510
 8005c2c:	2000050c 	.word	0x2000050c
 8005c30:	20000574 	.word	0x20000574

08005c34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	3b04      	subs	r3, #4
 8005c44:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2280      	movs	r2, #128	; 0x80
 8005c4a:	0452      	lsls	r2, r2, #17
 8005c4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	3b04      	subs	r3, #4
 8005c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3b04      	subs	r3, #4
 8005c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c60:	4a08      	ldr	r2, [pc, #32]	; (8005c84 <pxPortInitialiseStack+0x50>)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3b14      	subs	r3, #20
 8005c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	3b20      	subs	r3, #32
 8005c76:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c78:	68fb      	ldr	r3, [r7, #12]
}
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	b004      	add	sp, #16
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	46c0      	nop			; (mov r8, r8)
 8005c84:	08005c89 	.word	0x08005c89

08005c88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c92:	4b08      	ldr	r3, [pc, #32]	; (8005cb4 <prvTaskExitError+0x2c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3301      	adds	r3, #1
 8005c98:	d001      	beq.n	8005c9e <prvTaskExitError+0x16>
 8005c9a:	b672      	cpsid	i
 8005c9c:	e7fe      	b.n	8005c9c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005c9e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005ca0:	46c0      	nop			; (mov r8, r8)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0fc      	beq.n	8005ca2 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ca8:	46c0      	nop			; (mov r8, r8)
 8005caa:	46c0      	nop			; (mov r8, r8)
 8005cac:	46bd      	mov	sp, r7
 8005cae:	b002      	add	sp, #8
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	46c0      	nop			; (mov r8, r8)
 8005cb4:	2000000c 	.word	0x2000000c

08005cb8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005cbc:	46c0      	nop			; (mov r8, r8)
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cd0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005cd0:	4a0b      	ldr	r2, [pc, #44]	; (8005d00 <pxCurrentTCBConst2>)
 8005cd2:	6813      	ldr	r3, [r2, #0]
 8005cd4:	6818      	ldr	r0, [r3, #0]
 8005cd6:	3020      	adds	r0, #32
 8005cd8:	f380 8809 	msr	PSP, r0
 8005cdc:	2002      	movs	r0, #2
 8005cde:	f380 8814 	msr	CONTROL, r0
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005ce8:	46ae      	mov	lr, r5
 8005cea:	bc08      	pop	{r3}
 8005cec:	bc04      	pop	{r2}
 8005cee:	b662      	cpsie	i
 8005cf0:	4718      	bx	r3
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	46c0      	nop			; (mov r8, r8)
 8005cf6:	46c0      	nop			; (mov r8, r8)
 8005cf8:	46c0      	nop			; (mov r8, r8)
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	46c0      	nop			; (mov r8, r8)
 8005cfe:	46c0      	nop			; (mov r8, r8)

08005d00 <pxCurrentTCBConst2>:
 8005d00:	20000454 	.word	0x20000454
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005d04:	46c0      	nop			; (mov r8, r8)
 8005d06:	46c0      	nop			; (mov r8, r8)

08005d08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d0c:	4b0e      	ldr	r3, [pc, #56]	; (8005d48 <xPortStartScheduler+0x40>)
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	4b0d      	ldr	r3, [pc, #52]	; (8005d48 <xPortStartScheduler+0x40>)
 8005d12:	21ff      	movs	r1, #255	; 0xff
 8005d14:	0409      	lsls	r1, r1, #16
 8005d16:	430a      	orrs	r2, r1
 8005d18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d1a:	4b0b      	ldr	r3, [pc, #44]	; (8005d48 <xPortStartScheduler+0x40>)
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	4b0a      	ldr	r3, [pc, #40]	; (8005d48 <xPortStartScheduler+0x40>)
 8005d20:	21ff      	movs	r1, #255	; 0xff
 8005d22:	0609      	lsls	r1, r1, #24
 8005d24:	430a      	orrs	r2, r1
 8005d26:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d28:	f000 f898 	bl	8005e5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d2c:	4b07      	ldr	r3, [pc, #28]	; (8005d4c <xPortStartScheduler+0x44>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005d32:	f7ff ffcd 	bl	8005cd0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d36:	f7ff fe25 	bl	8005984 <vTaskSwitchContext>
	prvTaskExitError();
 8005d3a:	f7ff ffa5 	bl	8005c88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	0018      	movs	r0, r3
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	46c0      	nop			; (mov r8, r8)
 8005d48:	e000ed20 	.word	0xe000ed20
 8005d4c:	2000000c 	.word	0x2000000c

08005d50 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d54:	4b05      	ldr	r3, [pc, #20]	; (8005d6c <vPortYield+0x1c>)
 8005d56:	2280      	movs	r2, #128	; 0x80
 8005d58:	0552      	lsls	r2, r2, #21
 8005d5a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8005d5c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005d60:	f3bf 8f6f 	isb	sy
}
 8005d64:	46c0      	nop			; (mov r8, r8)
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	46c0      	nop			; (mov r8, r8)
 8005d6c:	e000ed04 	.word	0xe000ed04

08005d70 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8005d74:	b672      	cpsid	i
	uxCriticalNesting++;
 8005d76:	4b06      	ldr	r3, [pc, #24]	; (8005d90 <vPortEnterCritical+0x20>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	1c5a      	adds	r2, r3, #1
 8005d7c:	4b04      	ldr	r3, [pc, #16]	; (8005d90 <vPortEnterCritical+0x20>)
 8005d7e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005d80:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005d84:	f3bf 8f6f 	isb	sy
}
 8005d88:	46c0      	nop			; (mov r8, r8)
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	46c0      	nop			; (mov r8, r8)
 8005d90:	2000000c 	.word	0x2000000c

08005d94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d98:	4b09      	ldr	r3, [pc, #36]	; (8005dc0 <vPortExitCritical+0x2c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <vPortExitCritical+0x10>
 8005da0:	b672      	cpsid	i
 8005da2:	e7fe      	b.n	8005da2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8005da4:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <vPortExitCritical+0x2c>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	1e5a      	subs	r2, r3, #1
 8005daa:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <vPortExitCritical+0x2c>)
 8005dac:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8005dae:	4b04      	ldr	r3, [pc, #16]	; (8005dc0 <vPortExitCritical+0x2c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d100      	bne.n	8005db8 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8005db6:	b662      	cpsie	i
	}
}
 8005db8:	46c0      	nop			; (mov r8, r8)
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	46c0      	nop			; (mov r8, r8)
 8005dc0:	2000000c 	.word	0x2000000c

08005dc4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005dc4:	f3ef 8010 	mrs	r0, PRIMASK
 8005dc8:	b672      	cpsid	i
 8005dca:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8005dcc:	46c0      	nop			; (mov r8, r8)
 8005dce:	0018      	movs	r0, r3

08005dd0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005dd0:	f380 8810 	msr	PRIMASK, r0
 8005dd4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8005dd6:	46c0      	nop			; (mov r8, r8)
	...

08005de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005de0:	f3ef 8009 	mrs	r0, PSP
 8005de4:	4b0e      	ldr	r3, [pc, #56]	; (8005e20 <pxCurrentTCBConst>)
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	3820      	subs	r0, #32
 8005dea:	6010      	str	r0, [r2, #0]
 8005dec:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005dee:	4644      	mov	r4, r8
 8005df0:	464d      	mov	r5, r9
 8005df2:	4656      	mov	r6, sl
 8005df4:	465f      	mov	r7, fp
 8005df6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005df8:	b508      	push	{r3, lr}
 8005dfa:	b672      	cpsid	i
 8005dfc:	f7ff fdc2 	bl	8005984 <vTaskSwitchContext>
 8005e00:	b662      	cpsie	i
 8005e02:	bc0c      	pop	{r2, r3}
 8005e04:	6811      	ldr	r1, [r2, #0]
 8005e06:	6808      	ldr	r0, [r1, #0]
 8005e08:	3010      	adds	r0, #16
 8005e0a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005e0c:	46a0      	mov	r8, r4
 8005e0e:	46a9      	mov	r9, r5
 8005e10:	46b2      	mov	sl, r6
 8005e12:	46bb      	mov	fp, r7
 8005e14:	f380 8809 	msr	PSP, r0
 8005e18:	3820      	subs	r0, #32
 8005e1a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005e1c:	4718      	bx	r3
 8005e1e:	46c0      	nop			; (mov r8, r8)

08005e20 <pxCurrentTCBConst>:
 8005e20:	20000454 	.word	0x20000454
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005e24:	46c0      	nop			; (mov r8, r8)
 8005e26:	46c0      	nop			; (mov r8, r8)

08005e28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e2e:	f7ff ffc9 	bl	8005dc4 <ulSetInterruptMaskFromISR>
 8005e32:	0003      	movs	r3, r0
 8005e34:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e36:	f7ff fcf5 	bl	8005824 <xTaskIncrementTick>
 8005e3a:	1e03      	subs	r3, r0, #0
 8005e3c:	d003      	beq.n	8005e46 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e3e:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <SysTick_Handler+0x30>)
 8005e40:	2280      	movs	r2, #128	; 0x80
 8005e42:	0552      	lsls	r2, r2, #21
 8005e44:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	0018      	movs	r0, r3
 8005e4a:	f7ff ffc1 	bl	8005dd0 <vClearInterruptMaskFromISR>
}
 8005e4e:	46c0      	nop			; (mov r8, r8)
 8005e50:	46bd      	mov	sp, r7
 8005e52:	b002      	add	sp, #8
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	46c0      	nop			; (mov r8, r8)
 8005e58:	e000ed04 	.word	0xe000ed04

08005e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e60:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <vPortSetupTimerInterrupt+0x34>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e66:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <vPortSetupTimerInterrupt+0x38>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e6c:	4b0a      	ldr	r3, [pc, #40]	; (8005e98 <vPortSetupTimerInterrupt+0x3c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	22fa      	movs	r2, #250	; 0xfa
 8005e72:	0091      	lsls	r1, r2, #2
 8005e74:	0018      	movs	r0, r3
 8005e76:	f7fa f951 	bl	800011c <__udivsi3>
 8005e7a:	0003      	movs	r3, r0
 8005e7c:	001a      	movs	r2, r3
 8005e7e:	4b07      	ldr	r3, [pc, #28]	; (8005e9c <vPortSetupTimerInterrupt+0x40>)
 8005e80:	3a01      	subs	r2, #1
 8005e82:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8005e84:	4b02      	ldr	r3, [pc, #8]	; (8005e90 <vPortSetupTimerInterrupt+0x34>)
 8005e86:	2207      	movs	r2, #7
 8005e88:	601a      	str	r2, [r3, #0]
}
 8005e8a:	46c0      	nop			; (mov r8, r8)
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	e000e010 	.word	0xe000e010
 8005e94:	e000e018 	.word	0xe000e018
 8005e98:	20000000 	.word	0x20000000
 8005e9c:	e000e014 	.word	0xe000e014

08005ea0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8005eac:	f7ff fc22 	bl	80056f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005eb0:	4b4b      	ldr	r3, [pc, #300]	; (8005fe0 <pvPortMalloc+0x140>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005eb8:	f000 f8ec 	bl	8006094 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ebc:	4b49      	ldr	r3, [pc, #292]	; (8005fe4 <pvPortMalloc+0x144>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	d000      	beq.n	8005ec8 <pvPortMalloc+0x28>
 8005ec6:	e07e      	b.n	8005fc6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d012      	beq.n	8005ef4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8005ece:	2208      	movs	r2, #8
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	189b      	adds	r3, r3, r2
 8005ed4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2207      	movs	r2, #7
 8005eda:	4013      	ands	r3, r2
 8005edc:	d00a      	beq.n	8005ef4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2207      	movs	r2, #7
 8005ee2:	4393      	bics	r3, r2
 8005ee4:	3308      	adds	r3, #8
 8005ee6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2207      	movs	r2, #7
 8005eec:	4013      	ands	r3, r2
 8005eee:	d001      	beq.n	8005ef4 <pvPortMalloc+0x54>
 8005ef0:	b672      	cpsid	i
 8005ef2:	e7fe      	b.n	8005ef2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d065      	beq.n	8005fc6 <pvPortMalloc+0x126>
 8005efa:	4b3b      	ldr	r3, [pc, #236]	; (8005fe8 <pvPortMalloc+0x148>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d860      	bhi.n	8005fc6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f04:	4b39      	ldr	r3, [pc, #228]	; (8005fec <pvPortMalloc+0x14c>)
 8005f06:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005f08:	4b38      	ldr	r3, [pc, #224]	; (8005fec <pvPortMalloc+0x14c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f0e:	e004      	b.n	8005f1a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d903      	bls.n	8005f2c <pvPortMalloc+0x8c>
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1f1      	bne.n	8005f10 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f2c:	4b2c      	ldr	r3, [pc, #176]	; (8005fe0 <pvPortMalloc+0x140>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d047      	beq.n	8005fc6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2208      	movs	r2, #8
 8005f3c:	189b      	adds	r3, r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	1ad2      	subs	r2, r2, r3
 8005f50:	2308      	movs	r3, #8
 8005f52:	005b      	lsls	r3, r3, #1
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d916      	bls.n	8005f86 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	18d3      	adds	r3, r2, r3
 8005f5e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2207      	movs	r2, #7
 8005f64:	4013      	ands	r3, r2
 8005f66:	d001      	beq.n	8005f6c <pvPortMalloc+0xcc>
 8005f68:	b672      	cpsid	i
 8005f6a:	e7fe      	b.n	8005f6a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	1ad2      	subs	r2, r2, r3
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	0018      	movs	r0, r3
 8005f82:	f000 f8e7 	bl	8006154 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f86:	4b18      	ldr	r3, [pc, #96]	; (8005fe8 <pvPortMalloc+0x148>)
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	1ad2      	subs	r2, r2, r3
 8005f90:	4b15      	ldr	r3, [pc, #84]	; (8005fe8 <pvPortMalloc+0x148>)
 8005f92:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f94:	4b14      	ldr	r3, [pc, #80]	; (8005fe8 <pvPortMalloc+0x148>)
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	4b15      	ldr	r3, [pc, #84]	; (8005ff0 <pvPortMalloc+0x150>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d203      	bcs.n	8005fa8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005fa0:	4b11      	ldr	r3, [pc, #68]	; (8005fe8 <pvPortMalloc+0x148>)
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	4b12      	ldr	r3, [pc, #72]	; (8005ff0 <pvPortMalloc+0x150>)
 8005fa6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	4b0d      	ldr	r3, [pc, #52]	; (8005fe4 <pvPortMalloc+0x144>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005fbc:	4b0d      	ldr	r3, [pc, #52]	; (8005ff4 <pvPortMalloc+0x154>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	1c5a      	adds	r2, r3, #1
 8005fc2:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <pvPortMalloc+0x154>)
 8005fc4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005fc6:	f7ff fba1 	bl	800570c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2207      	movs	r2, #7
 8005fce:	4013      	ands	r3, r2
 8005fd0:	d001      	beq.n	8005fd6 <pvPortMalloc+0x136>
 8005fd2:	b672      	cpsid	i
 8005fd4:	e7fe      	b.n	8005fd4 <pvPortMalloc+0x134>
	return pvReturn;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
}
 8005fd8:	0018      	movs	r0, r3
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	b006      	add	sp, #24
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	20001188 	.word	0x20001188
 8005fe4:	2000119c 	.word	0x2000119c
 8005fe8:	2000118c 	.word	0x2000118c
 8005fec:	20001180 	.word	0x20001180
 8005ff0:	20001190 	.word	0x20001190
 8005ff4:	20001194 	.word	0x20001194

08005ff8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d03a      	beq.n	8006080 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800600a:	2308      	movs	r3, #8
 800600c:	425b      	negs	r3, r3
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	18d3      	adds	r3, r2, r3
 8006012:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	4b1a      	ldr	r3, [pc, #104]	; (8006088 <vPortFree+0x90>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4013      	ands	r3, r2
 8006022:	d101      	bne.n	8006028 <vPortFree+0x30>
 8006024:	b672      	cpsid	i
 8006026:	e7fe      	b.n	8006026 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <vPortFree+0x3c>
 8006030:	b672      	cpsid	i
 8006032:	e7fe      	b.n	8006032 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	4b13      	ldr	r3, [pc, #76]	; (8006088 <vPortFree+0x90>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4013      	ands	r3, r2
 800603e:	d01f      	beq.n	8006080 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d11b      	bne.n	8006080 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	4b0e      	ldr	r3, [pc, #56]	; (8006088 <vPortFree+0x90>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	43db      	mvns	r3, r3
 8006052:	401a      	ands	r2, r3
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006058:	f7ff fb4c 	bl	80056f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	4b0a      	ldr	r3, [pc, #40]	; (800608c <vPortFree+0x94>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	18d2      	adds	r2, r2, r3
 8006066:	4b09      	ldr	r3, [pc, #36]	; (800608c <vPortFree+0x94>)
 8006068:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	0018      	movs	r0, r3
 800606e:	f000 f871 	bl	8006154 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006072:	4b07      	ldr	r3, [pc, #28]	; (8006090 <vPortFree+0x98>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	4b05      	ldr	r3, [pc, #20]	; (8006090 <vPortFree+0x98>)
 800607a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800607c:	f7ff fb46 	bl	800570c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006080:	46c0      	nop			; (mov r8, r8)
 8006082:	46bd      	mov	sp, r7
 8006084:	b004      	add	sp, #16
 8006086:	bd80      	pop	{r7, pc}
 8006088:	2000119c 	.word	0x2000119c
 800608c:	2000118c 	.word	0x2000118c
 8006090:	20001198 	.word	0x20001198

08006094 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800609a:	23c0      	movs	r3, #192	; 0xc0
 800609c:	011b      	lsls	r3, r3, #4
 800609e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060a0:	4b26      	ldr	r3, [pc, #152]	; (800613c <prvHeapInit+0xa8>)
 80060a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2207      	movs	r2, #7
 80060a8:	4013      	ands	r3, r2
 80060aa:	d00c      	beq.n	80060c6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	3307      	adds	r3, #7
 80060b0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2207      	movs	r2, #7
 80060b6:	4393      	bics	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	1ad2      	subs	r2, r2, r3
 80060c0:	4b1e      	ldr	r3, [pc, #120]	; (800613c <prvHeapInit+0xa8>)
 80060c2:	18d3      	adds	r3, r2, r3
 80060c4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80060ca:	4b1d      	ldr	r3, [pc, #116]	; (8006140 <prvHeapInit+0xac>)
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060d0:	4b1b      	ldr	r3, [pc, #108]	; (8006140 <prvHeapInit+0xac>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	18d3      	adds	r3, r2, r3
 80060dc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80060de:	2208      	movs	r2, #8
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	1a9b      	subs	r3, r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2207      	movs	r2, #7
 80060ea:	4393      	bics	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4b14      	ldr	r3, [pc, #80]	; (8006144 <prvHeapInit+0xb0>)
 80060f2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80060f4:	4b13      	ldr	r3, [pc, #76]	; (8006144 <prvHeapInit+0xb0>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2200      	movs	r2, #0
 80060fa:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80060fc:	4b11      	ldr	r3, [pc, #68]	; (8006144 <prvHeapInit+0xb0>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	1ad2      	subs	r2, r2, r3
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006112:	4b0c      	ldr	r3, [pc, #48]	; (8006144 <prvHeapInit+0xb0>)
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	4b0a      	ldr	r3, [pc, #40]	; (8006148 <prvHeapInit+0xb4>)
 8006120:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	4b09      	ldr	r3, [pc, #36]	; (800614c <prvHeapInit+0xb8>)
 8006128:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800612a:	4b09      	ldr	r3, [pc, #36]	; (8006150 <prvHeapInit+0xbc>)
 800612c:	2280      	movs	r2, #128	; 0x80
 800612e:	0612      	lsls	r2, r2, #24
 8006130:	601a      	str	r2, [r3, #0]
}
 8006132:	46c0      	nop			; (mov r8, r8)
 8006134:	46bd      	mov	sp, r7
 8006136:	b004      	add	sp, #16
 8006138:	bd80      	pop	{r7, pc}
 800613a:	46c0      	nop			; (mov r8, r8)
 800613c:	20000580 	.word	0x20000580
 8006140:	20001180 	.word	0x20001180
 8006144:	20001188 	.word	0x20001188
 8006148:	20001190 	.word	0x20001190
 800614c:	2000118c 	.word	0x2000118c
 8006150:	2000119c 	.word	0x2000119c

08006154 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800615c:	4b27      	ldr	r3, [pc, #156]	; (80061fc <prvInsertBlockIntoFreeList+0xa8>)
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	e002      	b.n	8006168 <prvInsertBlockIntoFreeList+0x14>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	429a      	cmp	r2, r3
 8006170:	d8f7      	bhi.n	8006162 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	18d3      	adds	r3, r2, r3
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	429a      	cmp	r2, r3
 8006182:	d108      	bne.n	8006196 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	18d2      	adds	r2, r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	18d2      	adds	r2, r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d118      	bne.n	80061dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	4b14      	ldr	r3, [pc, #80]	; (8006200 <prvInsertBlockIntoFreeList+0xac>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d00d      	beq.n	80061d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	18d2      	adds	r2, r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	e008      	b.n	80061e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061d2:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <prvInsertBlockIntoFreeList+0xac>)
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	e003      	b.n	80061e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d002      	beq.n	80061f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	46bd      	mov	sp, r7
 80061f6:	b004      	add	sp, #16
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	46c0      	nop			; (mov r8, r8)
 80061fc:	20001180 	.word	0x20001180
 8006200:	20001188 	.word	0x20001188

08006204 <std>:
 8006204:	2300      	movs	r3, #0
 8006206:	b510      	push	{r4, lr}
 8006208:	0004      	movs	r4, r0
 800620a:	6003      	str	r3, [r0, #0]
 800620c:	6043      	str	r3, [r0, #4]
 800620e:	6083      	str	r3, [r0, #8]
 8006210:	8181      	strh	r1, [r0, #12]
 8006212:	6643      	str	r3, [r0, #100]	; 0x64
 8006214:	0019      	movs	r1, r3
 8006216:	81c2      	strh	r2, [r0, #14]
 8006218:	6103      	str	r3, [r0, #16]
 800621a:	6143      	str	r3, [r0, #20]
 800621c:	6183      	str	r3, [r0, #24]
 800621e:	2208      	movs	r2, #8
 8006220:	305c      	adds	r0, #92	; 0x5c
 8006222:	f000 f8fd 	bl	8006420 <memset>
 8006226:	4b05      	ldr	r3, [pc, #20]	; (800623c <std+0x38>)
 8006228:	6224      	str	r4, [r4, #32]
 800622a:	6263      	str	r3, [r4, #36]	; 0x24
 800622c:	4b04      	ldr	r3, [pc, #16]	; (8006240 <std+0x3c>)
 800622e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006230:	4b04      	ldr	r3, [pc, #16]	; (8006244 <std+0x40>)
 8006232:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006234:	4b04      	ldr	r3, [pc, #16]	; (8006248 <std+0x44>)
 8006236:	6323      	str	r3, [r4, #48]	; 0x30
 8006238:	bd10      	pop	{r4, pc}
 800623a:	46c0      	nop			; (mov r8, r8)
 800623c:	08006389 	.word	0x08006389
 8006240:	080063b1 	.word	0x080063b1
 8006244:	080063e9 	.word	0x080063e9
 8006248:	08006415 	.word	0x08006415

0800624c <stdio_exit_handler>:
 800624c:	b510      	push	{r4, lr}
 800624e:	4a03      	ldr	r2, [pc, #12]	; (800625c <stdio_exit_handler+0x10>)
 8006250:	4903      	ldr	r1, [pc, #12]	; (8006260 <stdio_exit_handler+0x14>)
 8006252:	4804      	ldr	r0, [pc, #16]	; (8006264 <stdio_exit_handler+0x18>)
 8006254:	f000 f86c 	bl	8006330 <_fwalk_sglue>
 8006258:	bd10      	pop	{r4, pc}
 800625a:	46c0      	nop			; (mov r8, r8)
 800625c:	20000010 	.word	0x20000010
 8006260:	08006dbd 	.word	0x08006dbd
 8006264:	2000001c 	.word	0x2000001c

08006268 <cleanup_stdio>:
 8006268:	6841      	ldr	r1, [r0, #4]
 800626a:	4b0b      	ldr	r3, [pc, #44]	; (8006298 <cleanup_stdio+0x30>)
 800626c:	b510      	push	{r4, lr}
 800626e:	0004      	movs	r4, r0
 8006270:	4299      	cmp	r1, r3
 8006272:	d001      	beq.n	8006278 <cleanup_stdio+0x10>
 8006274:	f000 fda2 	bl	8006dbc <_fflush_r>
 8006278:	68a1      	ldr	r1, [r4, #8]
 800627a:	4b08      	ldr	r3, [pc, #32]	; (800629c <cleanup_stdio+0x34>)
 800627c:	4299      	cmp	r1, r3
 800627e:	d002      	beq.n	8006286 <cleanup_stdio+0x1e>
 8006280:	0020      	movs	r0, r4
 8006282:	f000 fd9b 	bl	8006dbc <_fflush_r>
 8006286:	68e1      	ldr	r1, [r4, #12]
 8006288:	4b05      	ldr	r3, [pc, #20]	; (80062a0 <cleanup_stdio+0x38>)
 800628a:	4299      	cmp	r1, r3
 800628c:	d002      	beq.n	8006294 <cleanup_stdio+0x2c>
 800628e:	0020      	movs	r0, r4
 8006290:	f000 fd94 	bl	8006dbc <_fflush_r>
 8006294:	bd10      	pop	{r4, pc}
 8006296:	46c0      	nop			; (mov r8, r8)
 8006298:	200011a0 	.word	0x200011a0
 800629c:	20001208 	.word	0x20001208
 80062a0:	20001270 	.word	0x20001270

080062a4 <global_stdio_init.part.0>:
 80062a4:	b510      	push	{r4, lr}
 80062a6:	4b09      	ldr	r3, [pc, #36]	; (80062cc <global_stdio_init.part.0+0x28>)
 80062a8:	4a09      	ldr	r2, [pc, #36]	; (80062d0 <global_stdio_init.part.0+0x2c>)
 80062aa:	2104      	movs	r1, #4
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	4809      	ldr	r0, [pc, #36]	; (80062d4 <global_stdio_init.part.0+0x30>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	f7ff ffa7 	bl	8006204 <std>
 80062b6:	2201      	movs	r2, #1
 80062b8:	2109      	movs	r1, #9
 80062ba:	4807      	ldr	r0, [pc, #28]	; (80062d8 <global_stdio_init.part.0+0x34>)
 80062bc:	f7ff ffa2 	bl	8006204 <std>
 80062c0:	2202      	movs	r2, #2
 80062c2:	2112      	movs	r1, #18
 80062c4:	4805      	ldr	r0, [pc, #20]	; (80062dc <global_stdio_init.part.0+0x38>)
 80062c6:	f7ff ff9d 	bl	8006204 <std>
 80062ca:	bd10      	pop	{r4, pc}
 80062cc:	200012d8 	.word	0x200012d8
 80062d0:	0800624d 	.word	0x0800624d
 80062d4:	200011a0 	.word	0x200011a0
 80062d8:	20001208 	.word	0x20001208
 80062dc:	20001270 	.word	0x20001270

080062e0 <__sfp_lock_acquire>:
 80062e0:	b510      	push	{r4, lr}
 80062e2:	4802      	ldr	r0, [pc, #8]	; (80062ec <__sfp_lock_acquire+0xc>)
 80062e4:	f000 f91c 	bl	8006520 <__retarget_lock_acquire_recursive>
 80062e8:	bd10      	pop	{r4, pc}
 80062ea:	46c0      	nop			; (mov r8, r8)
 80062ec:	200012e1 	.word	0x200012e1

080062f0 <__sfp_lock_release>:
 80062f0:	b510      	push	{r4, lr}
 80062f2:	4802      	ldr	r0, [pc, #8]	; (80062fc <__sfp_lock_release+0xc>)
 80062f4:	f000 f915 	bl	8006522 <__retarget_lock_release_recursive>
 80062f8:	bd10      	pop	{r4, pc}
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	200012e1 	.word	0x200012e1

08006300 <__sinit>:
 8006300:	b510      	push	{r4, lr}
 8006302:	0004      	movs	r4, r0
 8006304:	f7ff ffec 	bl	80062e0 <__sfp_lock_acquire>
 8006308:	6a23      	ldr	r3, [r4, #32]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <__sinit+0x14>
 800630e:	f7ff ffef 	bl	80062f0 <__sfp_lock_release>
 8006312:	bd10      	pop	{r4, pc}
 8006314:	4b04      	ldr	r3, [pc, #16]	; (8006328 <__sinit+0x28>)
 8006316:	6223      	str	r3, [r4, #32]
 8006318:	4b04      	ldr	r3, [pc, #16]	; (800632c <__sinit+0x2c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1f6      	bne.n	800630e <__sinit+0xe>
 8006320:	f7ff ffc0 	bl	80062a4 <global_stdio_init.part.0>
 8006324:	e7f3      	b.n	800630e <__sinit+0xe>
 8006326:	46c0      	nop			; (mov r8, r8)
 8006328:	08006269 	.word	0x08006269
 800632c:	200012d8 	.word	0x200012d8

08006330 <_fwalk_sglue>:
 8006330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006332:	0014      	movs	r4, r2
 8006334:	2600      	movs	r6, #0
 8006336:	9000      	str	r0, [sp, #0]
 8006338:	9101      	str	r1, [sp, #4]
 800633a:	68a5      	ldr	r5, [r4, #8]
 800633c:	6867      	ldr	r7, [r4, #4]
 800633e:	3f01      	subs	r7, #1
 8006340:	d504      	bpl.n	800634c <_fwalk_sglue+0x1c>
 8006342:	6824      	ldr	r4, [r4, #0]
 8006344:	2c00      	cmp	r4, #0
 8006346:	d1f8      	bne.n	800633a <_fwalk_sglue+0xa>
 8006348:	0030      	movs	r0, r6
 800634a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800634c:	89ab      	ldrh	r3, [r5, #12]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d908      	bls.n	8006364 <_fwalk_sglue+0x34>
 8006352:	220e      	movs	r2, #14
 8006354:	5eab      	ldrsh	r3, [r5, r2]
 8006356:	3301      	adds	r3, #1
 8006358:	d004      	beq.n	8006364 <_fwalk_sglue+0x34>
 800635a:	0029      	movs	r1, r5
 800635c:	9800      	ldr	r0, [sp, #0]
 800635e:	9b01      	ldr	r3, [sp, #4]
 8006360:	4798      	blx	r3
 8006362:	4306      	orrs	r6, r0
 8006364:	3568      	adds	r5, #104	; 0x68
 8006366:	e7ea      	b.n	800633e <_fwalk_sglue+0xe>

08006368 <iprintf>:
 8006368:	b40f      	push	{r0, r1, r2, r3}
 800636a:	b507      	push	{r0, r1, r2, lr}
 800636c:	4905      	ldr	r1, [pc, #20]	; (8006384 <iprintf+0x1c>)
 800636e:	ab04      	add	r3, sp, #16
 8006370:	6808      	ldr	r0, [r1, #0]
 8006372:	cb04      	ldmia	r3!, {r2}
 8006374:	6881      	ldr	r1, [r0, #8]
 8006376:	9301      	str	r3, [sp, #4]
 8006378:	f000 f9fa 	bl	8006770 <_vfiprintf_r>
 800637c:	b003      	add	sp, #12
 800637e:	bc08      	pop	{r3}
 8006380:	b004      	add	sp, #16
 8006382:	4718      	bx	r3
 8006384:	20000068 	.word	0x20000068

08006388 <__sread>:
 8006388:	b570      	push	{r4, r5, r6, lr}
 800638a:	000c      	movs	r4, r1
 800638c:	250e      	movs	r5, #14
 800638e:	5f49      	ldrsh	r1, [r1, r5]
 8006390:	f000 f874 	bl	800647c <_read_r>
 8006394:	2800      	cmp	r0, #0
 8006396:	db03      	blt.n	80063a0 <__sread+0x18>
 8006398:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800639a:	181b      	adds	r3, r3, r0
 800639c:	6563      	str	r3, [r4, #84]	; 0x54
 800639e:	bd70      	pop	{r4, r5, r6, pc}
 80063a0:	89a3      	ldrh	r3, [r4, #12]
 80063a2:	4a02      	ldr	r2, [pc, #8]	; (80063ac <__sread+0x24>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	81a3      	strh	r3, [r4, #12]
 80063a8:	e7f9      	b.n	800639e <__sread+0x16>
 80063aa:	46c0      	nop			; (mov r8, r8)
 80063ac:	ffffefff 	.word	0xffffefff

080063b0 <__swrite>:
 80063b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b2:	001f      	movs	r7, r3
 80063b4:	898b      	ldrh	r3, [r1, #12]
 80063b6:	0005      	movs	r5, r0
 80063b8:	000c      	movs	r4, r1
 80063ba:	0016      	movs	r6, r2
 80063bc:	05db      	lsls	r3, r3, #23
 80063be:	d505      	bpl.n	80063cc <__swrite+0x1c>
 80063c0:	230e      	movs	r3, #14
 80063c2:	5ec9      	ldrsh	r1, [r1, r3]
 80063c4:	2200      	movs	r2, #0
 80063c6:	2302      	movs	r3, #2
 80063c8:	f000 f844 	bl	8006454 <_lseek_r>
 80063cc:	89a3      	ldrh	r3, [r4, #12]
 80063ce:	4a05      	ldr	r2, [pc, #20]	; (80063e4 <__swrite+0x34>)
 80063d0:	0028      	movs	r0, r5
 80063d2:	4013      	ands	r3, r2
 80063d4:	81a3      	strh	r3, [r4, #12]
 80063d6:	0032      	movs	r2, r6
 80063d8:	230e      	movs	r3, #14
 80063da:	5ee1      	ldrsh	r1, [r4, r3]
 80063dc:	003b      	movs	r3, r7
 80063de:	f000 f861 	bl	80064a4 <_write_r>
 80063e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063e4:	ffffefff 	.word	0xffffefff

080063e8 <__sseek>:
 80063e8:	b570      	push	{r4, r5, r6, lr}
 80063ea:	000c      	movs	r4, r1
 80063ec:	250e      	movs	r5, #14
 80063ee:	5f49      	ldrsh	r1, [r1, r5]
 80063f0:	f000 f830 	bl	8006454 <_lseek_r>
 80063f4:	89a3      	ldrh	r3, [r4, #12]
 80063f6:	1c42      	adds	r2, r0, #1
 80063f8:	d103      	bne.n	8006402 <__sseek+0x1a>
 80063fa:	4a05      	ldr	r2, [pc, #20]	; (8006410 <__sseek+0x28>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	81a3      	strh	r3, [r4, #12]
 8006400:	bd70      	pop	{r4, r5, r6, pc}
 8006402:	2280      	movs	r2, #128	; 0x80
 8006404:	0152      	lsls	r2, r2, #5
 8006406:	4313      	orrs	r3, r2
 8006408:	81a3      	strh	r3, [r4, #12]
 800640a:	6560      	str	r0, [r4, #84]	; 0x54
 800640c:	e7f8      	b.n	8006400 <__sseek+0x18>
 800640e:	46c0      	nop			; (mov r8, r8)
 8006410:	ffffefff 	.word	0xffffefff

08006414 <__sclose>:
 8006414:	b510      	push	{r4, lr}
 8006416:	230e      	movs	r3, #14
 8006418:	5ec9      	ldrsh	r1, [r1, r3]
 800641a:	f000 f809 	bl	8006430 <_close_r>
 800641e:	bd10      	pop	{r4, pc}

08006420 <memset>:
 8006420:	0003      	movs	r3, r0
 8006422:	1882      	adds	r2, r0, r2
 8006424:	4293      	cmp	r3, r2
 8006426:	d100      	bne.n	800642a <memset+0xa>
 8006428:	4770      	bx	lr
 800642a:	7019      	strb	r1, [r3, #0]
 800642c:	3301      	adds	r3, #1
 800642e:	e7f9      	b.n	8006424 <memset+0x4>

08006430 <_close_r>:
 8006430:	2300      	movs	r3, #0
 8006432:	b570      	push	{r4, r5, r6, lr}
 8006434:	4d06      	ldr	r5, [pc, #24]	; (8006450 <_close_r+0x20>)
 8006436:	0004      	movs	r4, r0
 8006438:	0008      	movs	r0, r1
 800643a:	602b      	str	r3, [r5, #0]
 800643c:	f7fa fb71 	bl	8000b22 <_close>
 8006440:	1c43      	adds	r3, r0, #1
 8006442:	d103      	bne.n	800644c <_close_r+0x1c>
 8006444:	682b      	ldr	r3, [r5, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d000      	beq.n	800644c <_close_r+0x1c>
 800644a:	6023      	str	r3, [r4, #0]
 800644c:	bd70      	pop	{r4, r5, r6, pc}
 800644e:	46c0      	nop			; (mov r8, r8)
 8006450:	200012dc 	.word	0x200012dc

08006454 <_lseek_r>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	0004      	movs	r4, r0
 8006458:	0008      	movs	r0, r1
 800645a:	0011      	movs	r1, r2
 800645c:	001a      	movs	r2, r3
 800645e:	2300      	movs	r3, #0
 8006460:	4d05      	ldr	r5, [pc, #20]	; (8006478 <_lseek_r+0x24>)
 8006462:	602b      	str	r3, [r5, #0]
 8006464:	f7fa fb7e 	bl	8000b64 <_lseek>
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	d103      	bne.n	8006474 <_lseek_r+0x20>
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d000      	beq.n	8006474 <_lseek_r+0x20>
 8006472:	6023      	str	r3, [r4, #0]
 8006474:	bd70      	pop	{r4, r5, r6, pc}
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	200012dc 	.word	0x200012dc

0800647c <_read_r>:
 800647c:	b570      	push	{r4, r5, r6, lr}
 800647e:	0004      	movs	r4, r0
 8006480:	0008      	movs	r0, r1
 8006482:	0011      	movs	r1, r2
 8006484:	001a      	movs	r2, r3
 8006486:	2300      	movs	r3, #0
 8006488:	4d05      	ldr	r5, [pc, #20]	; (80064a0 <_read_r+0x24>)
 800648a:	602b      	str	r3, [r5, #0]
 800648c:	f7fa fb10 	bl	8000ab0 <_read>
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	d103      	bne.n	800649c <_read_r+0x20>
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d000      	beq.n	800649c <_read_r+0x20>
 800649a:	6023      	str	r3, [r4, #0]
 800649c:	bd70      	pop	{r4, r5, r6, pc}
 800649e:	46c0      	nop			; (mov r8, r8)
 80064a0:	200012dc 	.word	0x200012dc

080064a4 <_write_r>:
 80064a4:	b570      	push	{r4, r5, r6, lr}
 80064a6:	0004      	movs	r4, r0
 80064a8:	0008      	movs	r0, r1
 80064aa:	0011      	movs	r1, r2
 80064ac:	001a      	movs	r2, r3
 80064ae:	2300      	movs	r3, #0
 80064b0:	4d05      	ldr	r5, [pc, #20]	; (80064c8 <_write_r+0x24>)
 80064b2:	602b      	str	r3, [r5, #0]
 80064b4:	f7fa fb19 	bl	8000aea <_write>
 80064b8:	1c43      	adds	r3, r0, #1
 80064ba:	d103      	bne.n	80064c4 <_write_r+0x20>
 80064bc:	682b      	ldr	r3, [r5, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d000      	beq.n	80064c4 <_write_r+0x20>
 80064c2:	6023      	str	r3, [r4, #0]
 80064c4:	bd70      	pop	{r4, r5, r6, pc}
 80064c6:	46c0      	nop			; (mov r8, r8)
 80064c8:	200012dc 	.word	0x200012dc

080064cc <__errno>:
 80064cc:	4b01      	ldr	r3, [pc, #4]	; (80064d4 <__errno+0x8>)
 80064ce:	6818      	ldr	r0, [r3, #0]
 80064d0:	4770      	bx	lr
 80064d2:	46c0      	nop			; (mov r8, r8)
 80064d4:	20000068 	.word	0x20000068

080064d8 <__libc_init_array>:
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	2600      	movs	r6, #0
 80064dc:	4c0c      	ldr	r4, [pc, #48]	; (8006510 <__libc_init_array+0x38>)
 80064de:	4d0d      	ldr	r5, [pc, #52]	; (8006514 <__libc_init_array+0x3c>)
 80064e0:	1b64      	subs	r4, r4, r5
 80064e2:	10a4      	asrs	r4, r4, #2
 80064e4:	42a6      	cmp	r6, r4
 80064e6:	d109      	bne.n	80064fc <__libc_init_array+0x24>
 80064e8:	2600      	movs	r6, #0
 80064ea:	f000 fde1 	bl	80070b0 <_init>
 80064ee:	4c0a      	ldr	r4, [pc, #40]	; (8006518 <__libc_init_array+0x40>)
 80064f0:	4d0a      	ldr	r5, [pc, #40]	; (800651c <__libc_init_array+0x44>)
 80064f2:	1b64      	subs	r4, r4, r5
 80064f4:	10a4      	asrs	r4, r4, #2
 80064f6:	42a6      	cmp	r6, r4
 80064f8:	d105      	bne.n	8006506 <__libc_init_array+0x2e>
 80064fa:	bd70      	pop	{r4, r5, r6, pc}
 80064fc:	00b3      	lsls	r3, r6, #2
 80064fe:	58eb      	ldr	r3, [r5, r3]
 8006500:	4798      	blx	r3
 8006502:	3601      	adds	r6, #1
 8006504:	e7ee      	b.n	80064e4 <__libc_init_array+0xc>
 8006506:	00b3      	lsls	r3, r6, #2
 8006508:	58eb      	ldr	r3, [r5, r3]
 800650a:	4798      	blx	r3
 800650c:	3601      	adds	r6, #1
 800650e:	e7f2      	b.n	80064f6 <__libc_init_array+0x1e>
 8006510:	08007208 	.word	0x08007208
 8006514:	08007208 	.word	0x08007208
 8006518:	0800720c 	.word	0x0800720c
 800651c:	08007208 	.word	0x08007208

08006520 <__retarget_lock_acquire_recursive>:
 8006520:	4770      	bx	lr

08006522 <__retarget_lock_release_recursive>:
 8006522:	4770      	bx	lr

08006524 <_free_r>:
 8006524:	b570      	push	{r4, r5, r6, lr}
 8006526:	0005      	movs	r5, r0
 8006528:	2900      	cmp	r1, #0
 800652a:	d010      	beq.n	800654e <_free_r+0x2a>
 800652c:	1f0c      	subs	r4, r1, #4
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	da00      	bge.n	8006536 <_free_r+0x12>
 8006534:	18e4      	adds	r4, r4, r3
 8006536:	0028      	movs	r0, r5
 8006538:	f000 f8e2 	bl	8006700 <__malloc_lock>
 800653c:	4a1d      	ldr	r2, [pc, #116]	; (80065b4 <_free_r+0x90>)
 800653e:	6813      	ldr	r3, [r2, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d105      	bne.n	8006550 <_free_r+0x2c>
 8006544:	6063      	str	r3, [r4, #4]
 8006546:	6014      	str	r4, [r2, #0]
 8006548:	0028      	movs	r0, r5
 800654a:	f000 f8e1 	bl	8006710 <__malloc_unlock>
 800654e:	bd70      	pop	{r4, r5, r6, pc}
 8006550:	42a3      	cmp	r3, r4
 8006552:	d908      	bls.n	8006566 <_free_r+0x42>
 8006554:	6820      	ldr	r0, [r4, #0]
 8006556:	1821      	adds	r1, r4, r0
 8006558:	428b      	cmp	r3, r1
 800655a:	d1f3      	bne.n	8006544 <_free_r+0x20>
 800655c:	6819      	ldr	r1, [r3, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	1809      	adds	r1, r1, r0
 8006562:	6021      	str	r1, [r4, #0]
 8006564:	e7ee      	b.n	8006544 <_free_r+0x20>
 8006566:	001a      	movs	r2, r3
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <_free_r+0x4e>
 800656e:	42a3      	cmp	r3, r4
 8006570:	d9f9      	bls.n	8006566 <_free_r+0x42>
 8006572:	6811      	ldr	r1, [r2, #0]
 8006574:	1850      	adds	r0, r2, r1
 8006576:	42a0      	cmp	r0, r4
 8006578:	d10b      	bne.n	8006592 <_free_r+0x6e>
 800657a:	6820      	ldr	r0, [r4, #0]
 800657c:	1809      	adds	r1, r1, r0
 800657e:	1850      	adds	r0, r2, r1
 8006580:	6011      	str	r1, [r2, #0]
 8006582:	4283      	cmp	r3, r0
 8006584:	d1e0      	bne.n	8006548 <_free_r+0x24>
 8006586:	6818      	ldr	r0, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	1841      	adds	r1, r0, r1
 800658c:	6011      	str	r1, [r2, #0]
 800658e:	6053      	str	r3, [r2, #4]
 8006590:	e7da      	b.n	8006548 <_free_r+0x24>
 8006592:	42a0      	cmp	r0, r4
 8006594:	d902      	bls.n	800659c <_free_r+0x78>
 8006596:	230c      	movs	r3, #12
 8006598:	602b      	str	r3, [r5, #0]
 800659a:	e7d5      	b.n	8006548 <_free_r+0x24>
 800659c:	6820      	ldr	r0, [r4, #0]
 800659e:	1821      	adds	r1, r4, r0
 80065a0:	428b      	cmp	r3, r1
 80065a2:	d103      	bne.n	80065ac <_free_r+0x88>
 80065a4:	6819      	ldr	r1, [r3, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	1809      	adds	r1, r1, r0
 80065aa:	6021      	str	r1, [r4, #0]
 80065ac:	6063      	str	r3, [r4, #4]
 80065ae:	6054      	str	r4, [r2, #4]
 80065b0:	e7ca      	b.n	8006548 <_free_r+0x24>
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	200012e4 	.word	0x200012e4

080065b8 <sbrk_aligned>:
 80065b8:	b570      	push	{r4, r5, r6, lr}
 80065ba:	4e0f      	ldr	r6, [pc, #60]	; (80065f8 <sbrk_aligned+0x40>)
 80065bc:	000d      	movs	r5, r1
 80065be:	6831      	ldr	r1, [r6, #0]
 80065c0:	0004      	movs	r4, r0
 80065c2:	2900      	cmp	r1, #0
 80065c4:	d102      	bne.n	80065cc <sbrk_aligned+0x14>
 80065c6:	f000 fccb 	bl	8006f60 <_sbrk_r>
 80065ca:	6030      	str	r0, [r6, #0]
 80065cc:	0029      	movs	r1, r5
 80065ce:	0020      	movs	r0, r4
 80065d0:	f000 fcc6 	bl	8006f60 <_sbrk_r>
 80065d4:	1c43      	adds	r3, r0, #1
 80065d6:	d00a      	beq.n	80065ee <sbrk_aligned+0x36>
 80065d8:	2303      	movs	r3, #3
 80065da:	1cc5      	adds	r5, r0, #3
 80065dc:	439d      	bics	r5, r3
 80065de:	42a8      	cmp	r0, r5
 80065e0:	d007      	beq.n	80065f2 <sbrk_aligned+0x3a>
 80065e2:	1a29      	subs	r1, r5, r0
 80065e4:	0020      	movs	r0, r4
 80065e6:	f000 fcbb 	bl	8006f60 <_sbrk_r>
 80065ea:	3001      	adds	r0, #1
 80065ec:	d101      	bne.n	80065f2 <sbrk_aligned+0x3a>
 80065ee:	2501      	movs	r5, #1
 80065f0:	426d      	negs	r5, r5
 80065f2:	0028      	movs	r0, r5
 80065f4:	bd70      	pop	{r4, r5, r6, pc}
 80065f6:	46c0      	nop			; (mov r8, r8)
 80065f8:	200012e8 	.word	0x200012e8

080065fc <_malloc_r>:
 80065fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065fe:	2203      	movs	r2, #3
 8006600:	1ccb      	adds	r3, r1, #3
 8006602:	4393      	bics	r3, r2
 8006604:	3308      	adds	r3, #8
 8006606:	0006      	movs	r6, r0
 8006608:	001f      	movs	r7, r3
 800660a:	2b0c      	cmp	r3, #12
 800660c:	d238      	bcs.n	8006680 <_malloc_r+0x84>
 800660e:	270c      	movs	r7, #12
 8006610:	42b9      	cmp	r1, r7
 8006612:	d837      	bhi.n	8006684 <_malloc_r+0x88>
 8006614:	0030      	movs	r0, r6
 8006616:	f000 f873 	bl	8006700 <__malloc_lock>
 800661a:	4b38      	ldr	r3, [pc, #224]	; (80066fc <_malloc_r+0x100>)
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	001c      	movs	r4, r3
 8006622:	2c00      	cmp	r4, #0
 8006624:	d133      	bne.n	800668e <_malloc_r+0x92>
 8006626:	0039      	movs	r1, r7
 8006628:	0030      	movs	r0, r6
 800662a:	f7ff ffc5 	bl	80065b8 <sbrk_aligned>
 800662e:	0004      	movs	r4, r0
 8006630:	1c43      	adds	r3, r0, #1
 8006632:	d15e      	bne.n	80066f2 <_malloc_r+0xf6>
 8006634:	9b00      	ldr	r3, [sp, #0]
 8006636:	681c      	ldr	r4, [r3, #0]
 8006638:	0025      	movs	r5, r4
 800663a:	2d00      	cmp	r5, #0
 800663c:	d14e      	bne.n	80066dc <_malloc_r+0xe0>
 800663e:	2c00      	cmp	r4, #0
 8006640:	d051      	beq.n	80066e6 <_malloc_r+0xea>
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	0029      	movs	r1, r5
 8006646:	18e3      	adds	r3, r4, r3
 8006648:	0030      	movs	r0, r6
 800664a:	9301      	str	r3, [sp, #4]
 800664c:	f000 fc88 	bl	8006f60 <_sbrk_r>
 8006650:	9b01      	ldr	r3, [sp, #4]
 8006652:	4283      	cmp	r3, r0
 8006654:	d147      	bne.n	80066e6 <_malloc_r+0xea>
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	0030      	movs	r0, r6
 800665a:	1aff      	subs	r7, r7, r3
 800665c:	0039      	movs	r1, r7
 800665e:	f7ff ffab 	bl	80065b8 <sbrk_aligned>
 8006662:	3001      	adds	r0, #1
 8006664:	d03f      	beq.n	80066e6 <_malloc_r+0xea>
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	19db      	adds	r3, r3, r7
 800666a:	6023      	str	r3, [r4, #0]
 800666c:	9b00      	ldr	r3, [sp, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d040      	beq.n	80066f6 <_malloc_r+0xfa>
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	42a2      	cmp	r2, r4
 8006678:	d133      	bne.n	80066e2 <_malloc_r+0xe6>
 800667a:	2200      	movs	r2, #0
 800667c:	605a      	str	r2, [r3, #4]
 800667e:	e014      	b.n	80066aa <_malloc_r+0xae>
 8006680:	2b00      	cmp	r3, #0
 8006682:	dac5      	bge.n	8006610 <_malloc_r+0x14>
 8006684:	230c      	movs	r3, #12
 8006686:	2500      	movs	r5, #0
 8006688:	6033      	str	r3, [r6, #0]
 800668a:	0028      	movs	r0, r5
 800668c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800668e:	6821      	ldr	r1, [r4, #0]
 8006690:	1bc9      	subs	r1, r1, r7
 8006692:	d420      	bmi.n	80066d6 <_malloc_r+0xda>
 8006694:	290b      	cmp	r1, #11
 8006696:	d918      	bls.n	80066ca <_malloc_r+0xce>
 8006698:	19e2      	adds	r2, r4, r7
 800669a:	6027      	str	r7, [r4, #0]
 800669c:	42a3      	cmp	r3, r4
 800669e:	d112      	bne.n	80066c6 <_malloc_r+0xca>
 80066a0:	9b00      	ldr	r3, [sp, #0]
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	6863      	ldr	r3, [r4, #4]
 80066a6:	6011      	str	r1, [r2, #0]
 80066a8:	6053      	str	r3, [r2, #4]
 80066aa:	0030      	movs	r0, r6
 80066ac:	0025      	movs	r5, r4
 80066ae:	f000 f82f 	bl	8006710 <__malloc_unlock>
 80066b2:	2207      	movs	r2, #7
 80066b4:	350b      	adds	r5, #11
 80066b6:	1d23      	adds	r3, r4, #4
 80066b8:	4395      	bics	r5, r2
 80066ba:	1aea      	subs	r2, r5, r3
 80066bc:	429d      	cmp	r5, r3
 80066be:	d0e4      	beq.n	800668a <_malloc_r+0x8e>
 80066c0:	1b5b      	subs	r3, r3, r5
 80066c2:	50a3      	str	r3, [r4, r2]
 80066c4:	e7e1      	b.n	800668a <_malloc_r+0x8e>
 80066c6:	605a      	str	r2, [r3, #4]
 80066c8:	e7ec      	b.n	80066a4 <_malloc_r+0xa8>
 80066ca:	6862      	ldr	r2, [r4, #4]
 80066cc:	42a3      	cmp	r3, r4
 80066ce:	d1d5      	bne.n	800667c <_malloc_r+0x80>
 80066d0:	9b00      	ldr	r3, [sp, #0]
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	e7e9      	b.n	80066aa <_malloc_r+0xae>
 80066d6:	0023      	movs	r3, r4
 80066d8:	6864      	ldr	r4, [r4, #4]
 80066da:	e7a2      	b.n	8006622 <_malloc_r+0x26>
 80066dc:	002c      	movs	r4, r5
 80066de:	686d      	ldr	r5, [r5, #4]
 80066e0:	e7ab      	b.n	800663a <_malloc_r+0x3e>
 80066e2:	0013      	movs	r3, r2
 80066e4:	e7c4      	b.n	8006670 <_malloc_r+0x74>
 80066e6:	230c      	movs	r3, #12
 80066e8:	0030      	movs	r0, r6
 80066ea:	6033      	str	r3, [r6, #0]
 80066ec:	f000 f810 	bl	8006710 <__malloc_unlock>
 80066f0:	e7cb      	b.n	800668a <_malloc_r+0x8e>
 80066f2:	6027      	str	r7, [r4, #0]
 80066f4:	e7d9      	b.n	80066aa <_malloc_r+0xae>
 80066f6:	605b      	str	r3, [r3, #4]
 80066f8:	deff      	udf	#255	; 0xff
 80066fa:	46c0      	nop			; (mov r8, r8)
 80066fc:	200012e4 	.word	0x200012e4

08006700 <__malloc_lock>:
 8006700:	b510      	push	{r4, lr}
 8006702:	4802      	ldr	r0, [pc, #8]	; (800670c <__malloc_lock+0xc>)
 8006704:	f7ff ff0c 	bl	8006520 <__retarget_lock_acquire_recursive>
 8006708:	bd10      	pop	{r4, pc}
 800670a:	46c0      	nop			; (mov r8, r8)
 800670c:	200012e0 	.word	0x200012e0

08006710 <__malloc_unlock>:
 8006710:	b510      	push	{r4, lr}
 8006712:	4802      	ldr	r0, [pc, #8]	; (800671c <__malloc_unlock+0xc>)
 8006714:	f7ff ff05 	bl	8006522 <__retarget_lock_release_recursive>
 8006718:	bd10      	pop	{r4, pc}
 800671a:	46c0      	nop			; (mov r8, r8)
 800671c:	200012e0 	.word	0x200012e0

08006720 <__sfputc_r>:
 8006720:	6893      	ldr	r3, [r2, #8]
 8006722:	b510      	push	{r4, lr}
 8006724:	3b01      	subs	r3, #1
 8006726:	6093      	str	r3, [r2, #8]
 8006728:	2b00      	cmp	r3, #0
 800672a:	da04      	bge.n	8006736 <__sfputc_r+0x16>
 800672c:	6994      	ldr	r4, [r2, #24]
 800672e:	42a3      	cmp	r3, r4
 8006730:	db07      	blt.n	8006742 <__sfputc_r+0x22>
 8006732:	290a      	cmp	r1, #10
 8006734:	d005      	beq.n	8006742 <__sfputc_r+0x22>
 8006736:	6813      	ldr	r3, [r2, #0]
 8006738:	1c58      	adds	r0, r3, #1
 800673a:	6010      	str	r0, [r2, #0]
 800673c:	7019      	strb	r1, [r3, #0]
 800673e:	0008      	movs	r0, r1
 8006740:	bd10      	pop	{r4, pc}
 8006742:	f000 fb66 	bl	8006e12 <__swbuf_r>
 8006746:	0001      	movs	r1, r0
 8006748:	e7f9      	b.n	800673e <__sfputc_r+0x1e>

0800674a <__sfputs_r>:
 800674a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674c:	0006      	movs	r6, r0
 800674e:	000f      	movs	r7, r1
 8006750:	0014      	movs	r4, r2
 8006752:	18d5      	adds	r5, r2, r3
 8006754:	42ac      	cmp	r4, r5
 8006756:	d101      	bne.n	800675c <__sfputs_r+0x12>
 8006758:	2000      	movs	r0, #0
 800675a:	e007      	b.n	800676c <__sfputs_r+0x22>
 800675c:	7821      	ldrb	r1, [r4, #0]
 800675e:	003a      	movs	r2, r7
 8006760:	0030      	movs	r0, r6
 8006762:	f7ff ffdd 	bl	8006720 <__sfputc_r>
 8006766:	3401      	adds	r4, #1
 8006768:	1c43      	adds	r3, r0, #1
 800676a:	d1f3      	bne.n	8006754 <__sfputs_r+0xa>
 800676c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006770 <_vfiprintf_r>:
 8006770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006772:	b0a1      	sub	sp, #132	; 0x84
 8006774:	000f      	movs	r7, r1
 8006776:	0015      	movs	r5, r2
 8006778:	001e      	movs	r6, r3
 800677a:	9003      	str	r0, [sp, #12]
 800677c:	2800      	cmp	r0, #0
 800677e:	d004      	beq.n	800678a <_vfiprintf_r+0x1a>
 8006780:	6a03      	ldr	r3, [r0, #32]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <_vfiprintf_r+0x1a>
 8006786:	f7ff fdbb 	bl	8006300 <__sinit>
 800678a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800678c:	07db      	lsls	r3, r3, #31
 800678e:	d405      	bmi.n	800679c <_vfiprintf_r+0x2c>
 8006790:	89bb      	ldrh	r3, [r7, #12]
 8006792:	059b      	lsls	r3, r3, #22
 8006794:	d402      	bmi.n	800679c <_vfiprintf_r+0x2c>
 8006796:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006798:	f7ff fec2 	bl	8006520 <__retarget_lock_acquire_recursive>
 800679c:	89bb      	ldrh	r3, [r7, #12]
 800679e:	071b      	lsls	r3, r3, #28
 80067a0:	d502      	bpl.n	80067a8 <_vfiprintf_r+0x38>
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d113      	bne.n	80067d0 <_vfiprintf_r+0x60>
 80067a8:	0039      	movs	r1, r7
 80067aa:	9803      	ldr	r0, [sp, #12]
 80067ac:	f000 fb74 	bl	8006e98 <__swsetup_r>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d00d      	beq.n	80067d0 <_vfiprintf_r+0x60>
 80067b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067b6:	07db      	lsls	r3, r3, #31
 80067b8:	d503      	bpl.n	80067c2 <_vfiprintf_r+0x52>
 80067ba:	2001      	movs	r0, #1
 80067bc:	4240      	negs	r0, r0
 80067be:	b021      	add	sp, #132	; 0x84
 80067c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067c2:	89bb      	ldrh	r3, [r7, #12]
 80067c4:	059b      	lsls	r3, r3, #22
 80067c6:	d4f8      	bmi.n	80067ba <_vfiprintf_r+0x4a>
 80067c8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80067ca:	f7ff feaa 	bl	8006522 <__retarget_lock_release_recursive>
 80067ce:	e7f4      	b.n	80067ba <_vfiprintf_r+0x4a>
 80067d0:	2300      	movs	r3, #0
 80067d2:	ac08      	add	r4, sp, #32
 80067d4:	6163      	str	r3, [r4, #20]
 80067d6:	3320      	adds	r3, #32
 80067d8:	7663      	strb	r3, [r4, #25]
 80067da:	3310      	adds	r3, #16
 80067dc:	76a3      	strb	r3, [r4, #26]
 80067de:	9607      	str	r6, [sp, #28]
 80067e0:	002e      	movs	r6, r5
 80067e2:	7833      	ldrb	r3, [r6, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <_vfiprintf_r+0x7c>
 80067e8:	2b25      	cmp	r3, #37	; 0x25
 80067ea:	d148      	bne.n	800687e <_vfiprintf_r+0x10e>
 80067ec:	1b73      	subs	r3, r6, r5
 80067ee:	9305      	str	r3, [sp, #20]
 80067f0:	42ae      	cmp	r6, r5
 80067f2:	d00b      	beq.n	800680c <_vfiprintf_r+0x9c>
 80067f4:	002a      	movs	r2, r5
 80067f6:	0039      	movs	r1, r7
 80067f8:	9803      	ldr	r0, [sp, #12]
 80067fa:	f7ff ffa6 	bl	800674a <__sfputs_r>
 80067fe:	3001      	adds	r0, #1
 8006800:	d100      	bne.n	8006804 <_vfiprintf_r+0x94>
 8006802:	e0af      	b.n	8006964 <_vfiprintf_r+0x1f4>
 8006804:	6963      	ldr	r3, [r4, #20]
 8006806:	9a05      	ldr	r2, [sp, #20]
 8006808:	189b      	adds	r3, r3, r2
 800680a:	6163      	str	r3, [r4, #20]
 800680c:	7833      	ldrb	r3, [r6, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d100      	bne.n	8006814 <_vfiprintf_r+0xa4>
 8006812:	e0a7      	b.n	8006964 <_vfiprintf_r+0x1f4>
 8006814:	2201      	movs	r2, #1
 8006816:	2300      	movs	r3, #0
 8006818:	4252      	negs	r2, r2
 800681a:	6062      	str	r2, [r4, #4]
 800681c:	a904      	add	r1, sp, #16
 800681e:	3254      	adds	r2, #84	; 0x54
 8006820:	1852      	adds	r2, r2, r1
 8006822:	1c75      	adds	r5, r6, #1
 8006824:	6023      	str	r3, [r4, #0]
 8006826:	60e3      	str	r3, [r4, #12]
 8006828:	60a3      	str	r3, [r4, #8]
 800682a:	7013      	strb	r3, [r2, #0]
 800682c:	65a3      	str	r3, [r4, #88]	; 0x58
 800682e:	4b59      	ldr	r3, [pc, #356]	; (8006994 <_vfiprintf_r+0x224>)
 8006830:	2205      	movs	r2, #5
 8006832:	0018      	movs	r0, r3
 8006834:	7829      	ldrb	r1, [r5, #0]
 8006836:	9305      	str	r3, [sp, #20]
 8006838:	f000 fba4 	bl	8006f84 <memchr>
 800683c:	1c6e      	adds	r6, r5, #1
 800683e:	2800      	cmp	r0, #0
 8006840:	d11f      	bne.n	8006882 <_vfiprintf_r+0x112>
 8006842:	6822      	ldr	r2, [r4, #0]
 8006844:	06d3      	lsls	r3, r2, #27
 8006846:	d504      	bpl.n	8006852 <_vfiprintf_r+0xe2>
 8006848:	2353      	movs	r3, #83	; 0x53
 800684a:	a904      	add	r1, sp, #16
 800684c:	185b      	adds	r3, r3, r1
 800684e:	2120      	movs	r1, #32
 8006850:	7019      	strb	r1, [r3, #0]
 8006852:	0713      	lsls	r3, r2, #28
 8006854:	d504      	bpl.n	8006860 <_vfiprintf_r+0xf0>
 8006856:	2353      	movs	r3, #83	; 0x53
 8006858:	a904      	add	r1, sp, #16
 800685a:	185b      	adds	r3, r3, r1
 800685c:	212b      	movs	r1, #43	; 0x2b
 800685e:	7019      	strb	r1, [r3, #0]
 8006860:	782b      	ldrb	r3, [r5, #0]
 8006862:	2b2a      	cmp	r3, #42	; 0x2a
 8006864:	d016      	beq.n	8006894 <_vfiprintf_r+0x124>
 8006866:	002e      	movs	r6, r5
 8006868:	2100      	movs	r1, #0
 800686a:	200a      	movs	r0, #10
 800686c:	68e3      	ldr	r3, [r4, #12]
 800686e:	7832      	ldrb	r2, [r6, #0]
 8006870:	1c75      	adds	r5, r6, #1
 8006872:	3a30      	subs	r2, #48	; 0x30
 8006874:	2a09      	cmp	r2, #9
 8006876:	d94e      	bls.n	8006916 <_vfiprintf_r+0x1a6>
 8006878:	2900      	cmp	r1, #0
 800687a:	d111      	bne.n	80068a0 <_vfiprintf_r+0x130>
 800687c:	e017      	b.n	80068ae <_vfiprintf_r+0x13e>
 800687e:	3601      	adds	r6, #1
 8006880:	e7af      	b.n	80067e2 <_vfiprintf_r+0x72>
 8006882:	9b05      	ldr	r3, [sp, #20]
 8006884:	6822      	ldr	r2, [r4, #0]
 8006886:	1ac0      	subs	r0, r0, r3
 8006888:	2301      	movs	r3, #1
 800688a:	4083      	lsls	r3, r0
 800688c:	4313      	orrs	r3, r2
 800688e:	0035      	movs	r5, r6
 8006890:	6023      	str	r3, [r4, #0]
 8006892:	e7cc      	b.n	800682e <_vfiprintf_r+0xbe>
 8006894:	9b07      	ldr	r3, [sp, #28]
 8006896:	1d19      	adds	r1, r3, #4
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	9107      	str	r1, [sp, #28]
 800689c:	2b00      	cmp	r3, #0
 800689e:	db01      	blt.n	80068a4 <_vfiprintf_r+0x134>
 80068a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80068a2:	e004      	b.n	80068ae <_vfiprintf_r+0x13e>
 80068a4:	425b      	negs	r3, r3
 80068a6:	60e3      	str	r3, [r4, #12]
 80068a8:	2302      	movs	r3, #2
 80068aa:	4313      	orrs	r3, r2
 80068ac:	6023      	str	r3, [r4, #0]
 80068ae:	7833      	ldrb	r3, [r6, #0]
 80068b0:	2b2e      	cmp	r3, #46	; 0x2e
 80068b2:	d10a      	bne.n	80068ca <_vfiprintf_r+0x15a>
 80068b4:	7873      	ldrb	r3, [r6, #1]
 80068b6:	2b2a      	cmp	r3, #42	; 0x2a
 80068b8:	d135      	bne.n	8006926 <_vfiprintf_r+0x1b6>
 80068ba:	9b07      	ldr	r3, [sp, #28]
 80068bc:	3602      	adds	r6, #2
 80068be:	1d1a      	adds	r2, r3, #4
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	9207      	str	r2, [sp, #28]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	db2b      	blt.n	8006920 <_vfiprintf_r+0x1b0>
 80068c8:	9309      	str	r3, [sp, #36]	; 0x24
 80068ca:	4d33      	ldr	r5, [pc, #204]	; (8006998 <_vfiprintf_r+0x228>)
 80068cc:	2203      	movs	r2, #3
 80068ce:	0028      	movs	r0, r5
 80068d0:	7831      	ldrb	r1, [r6, #0]
 80068d2:	f000 fb57 	bl	8006f84 <memchr>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	d006      	beq.n	80068e8 <_vfiprintf_r+0x178>
 80068da:	2340      	movs	r3, #64	; 0x40
 80068dc:	1b40      	subs	r0, r0, r5
 80068de:	4083      	lsls	r3, r0
 80068e0:	6822      	ldr	r2, [r4, #0]
 80068e2:	3601      	adds	r6, #1
 80068e4:	4313      	orrs	r3, r2
 80068e6:	6023      	str	r3, [r4, #0]
 80068e8:	7831      	ldrb	r1, [r6, #0]
 80068ea:	2206      	movs	r2, #6
 80068ec:	482b      	ldr	r0, [pc, #172]	; (800699c <_vfiprintf_r+0x22c>)
 80068ee:	1c75      	adds	r5, r6, #1
 80068f0:	7621      	strb	r1, [r4, #24]
 80068f2:	f000 fb47 	bl	8006f84 <memchr>
 80068f6:	2800      	cmp	r0, #0
 80068f8:	d043      	beq.n	8006982 <_vfiprintf_r+0x212>
 80068fa:	4b29      	ldr	r3, [pc, #164]	; (80069a0 <_vfiprintf_r+0x230>)
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d125      	bne.n	800694c <_vfiprintf_r+0x1dc>
 8006900:	2207      	movs	r2, #7
 8006902:	9b07      	ldr	r3, [sp, #28]
 8006904:	3307      	adds	r3, #7
 8006906:	4393      	bics	r3, r2
 8006908:	3308      	adds	r3, #8
 800690a:	9307      	str	r3, [sp, #28]
 800690c:	6963      	ldr	r3, [r4, #20]
 800690e:	9a04      	ldr	r2, [sp, #16]
 8006910:	189b      	adds	r3, r3, r2
 8006912:	6163      	str	r3, [r4, #20]
 8006914:	e764      	b.n	80067e0 <_vfiprintf_r+0x70>
 8006916:	4343      	muls	r3, r0
 8006918:	002e      	movs	r6, r5
 800691a:	2101      	movs	r1, #1
 800691c:	189b      	adds	r3, r3, r2
 800691e:	e7a6      	b.n	800686e <_vfiprintf_r+0xfe>
 8006920:	2301      	movs	r3, #1
 8006922:	425b      	negs	r3, r3
 8006924:	e7d0      	b.n	80068c8 <_vfiprintf_r+0x158>
 8006926:	2300      	movs	r3, #0
 8006928:	200a      	movs	r0, #10
 800692a:	001a      	movs	r2, r3
 800692c:	3601      	adds	r6, #1
 800692e:	6063      	str	r3, [r4, #4]
 8006930:	7831      	ldrb	r1, [r6, #0]
 8006932:	1c75      	adds	r5, r6, #1
 8006934:	3930      	subs	r1, #48	; 0x30
 8006936:	2909      	cmp	r1, #9
 8006938:	d903      	bls.n	8006942 <_vfiprintf_r+0x1d2>
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0c5      	beq.n	80068ca <_vfiprintf_r+0x15a>
 800693e:	9209      	str	r2, [sp, #36]	; 0x24
 8006940:	e7c3      	b.n	80068ca <_vfiprintf_r+0x15a>
 8006942:	4342      	muls	r2, r0
 8006944:	002e      	movs	r6, r5
 8006946:	2301      	movs	r3, #1
 8006948:	1852      	adds	r2, r2, r1
 800694a:	e7f1      	b.n	8006930 <_vfiprintf_r+0x1c0>
 800694c:	aa07      	add	r2, sp, #28
 800694e:	9200      	str	r2, [sp, #0]
 8006950:	0021      	movs	r1, r4
 8006952:	003a      	movs	r2, r7
 8006954:	4b13      	ldr	r3, [pc, #76]	; (80069a4 <_vfiprintf_r+0x234>)
 8006956:	9803      	ldr	r0, [sp, #12]
 8006958:	e000      	b.n	800695c <_vfiprintf_r+0x1ec>
 800695a:	bf00      	nop
 800695c:	9004      	str	r0, [sp, #16]
 800695e:	9b04      	ldr	r3, [sp, #16]
 8006960:	3301      	adds	r3, #1
 8006962:	d1d3      	bne.n	800690c <_vfiprintf_r+0x19c>
 8006964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006966:	07db      	lsls	r3, r3, #31
 8006968:	d405      	bmi.n	8006976 <_vfiprintf_r+0x206>
 800696a:	89bb      	ldrh	r3, [r7, #12]
 800696c:	059b      	lsls	r3, r3, #22
 800696e:	d402      	bmi.n	8006976 <_vfiprintf_r+0x206>
 8006970:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006972:	f7ff fdd6 	bl	8006522 <__retarget_lock_release_recursive>
 8006976:	89bb      	ldrh	r3, [r7, #12]
 8006978:	065b      	lsls	r3, r3, #25
 800697a:	d500      	bpl.n	800697e <_vfiprintf_r+0x20e>
 800697c:	e71d      	b.n	80067ba <_vfiprintf_r+0x4a>
 800697e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006980:	e71d      	b.n	80067be <_vfiprintf_r+0x4e>
 8006982:	aa07      	add	r2, sp, #28
 8006984:	9200      	str	r2, [sp, #0]
 8006986:	0021      	movs	r1, r4
 8006988:	003a      	movs	r2, r7
 800698a:	4b06      	ldr	r3, [pc, #24]	; (80069a4 <_vfiprintf_r+0x234>)
 800698c:	9803      	ldr	r0, [sp, #12]
 800698e:	f000 f87b 	bl	8006a88 <_printf_i>
 8006992:	e7e3      	b.n	800695c <_vfiprintf_r+0x1ec>
 8006994:	080071d4 	.word	0x080071d4
 8006998:	080071da 	.word	0x080071da
 800699c:	080071de 	.word	0x080071de
 80069a0:	00000000 	.word	0x00000000
 80069a4:	0800674b 	.word	0x0800674b

080069a8 <_printf_common>:
 80069a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069aa:	0016      	movs	r6, r2
 80069ac:	9301      	str	r3, [sp, #4]
 80069ae:	688a      	ldr	r2, [r1, #8]
 80069b0:	690b      	ldr	r3, [r1, #16]
 80069b2:	000c      	movs	r4, r1
 80069b4:	9000      	str	r0, [sp, #0]
 80069b6:	4293      	cmp	r3, r2
 80069b8:	da00      	bge.n	80069bc <_printf_common+0x14>
 80069ba:	0013      	movs	r3, r2
 80069bc:	0022      	movs	r2, r4
 80069be:	6033      	str	r3, [r6, #0]
 80069c0:	3243      	adds	r2, #67	; 0x43
 80069c2:	7812      	ldrb	r2, [r2, #0]
 80069c4:	2a00      	cmp	r2, #0
 80069c6:	d001      	beq.n	80069cc <_printf_common+0x24>
 80069c8:	3301      	adds	r3, #1
 80069ca:	6033      	str	r3, [r6, #0]
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	069b      	lsls	r3, r3, #26
 80069d0:	d502      	bpl.n	80069d8 <_printf_common+0x30>
 80069d2:	6833      	ldr	r3, [r6, #0]
 80069d4:	3302      	adds	r3, #2
 80069d6:	6033      	str	r3, [r6, #0]
 80069d8:	6822      	ldr	r2, [r4, #0]
 80069da:	2306      	movs	r3, #6
 80069dc:	0015      	movs	r5, r2
 80069de:	401d      	ands	r5, r3
 80069e0:	421a      	tst	r2, r3
 80069e2:	d027      	beq.n	8006a34 <_printf_common+0x8c>
 80069e4:	0023      	movs	r3, r4
 80069e6:	3343      	adds	r3, #67	; 0x43
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	1e5a      	subs	r2, r3, #1
 80069ec:	4193      	sbcs	r3, r2
 80069ee:	6822      	ldr	r2, [r4, #0]
 80069f0:	0692      	lsls	r2, r2, #26
 80069f2:	d430      	bmi.n	8006a56 <_printf_common+0xae>
 80069f4:	0022      	movs	r2, r4
 80069f6:	9901      	ldr	r1, [sp, #4]
 80069f8:	9800      	ldr	r0, [sp, #0]
 80069fa:	9d08      	ldr	r5, [sp, #32]
 80069fc:	3243      	adds	r2, #67	; 0x43
 80069fe:	47a8      	blx	r5
 8006a00:	3001      	adds	r0, #1
 8006a02:	d025      	beq.n	8006a50 <_printf_common+0xa8>
 8006a04:	2206      	movs	r2, #6
 8006a06:	6823      	ldr	r3, [r4, #0]
 8006a08:	2500      	movs	r5, #0
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	2b04      	cmp	r3, #4
 8006a0e:	d105      	bne.n	8006a1c <_printf_common+0x74>
 8006a10:	6833      	ldr	r3, [r6, #0]
 8006a12:	68e5      	ldr	r5, [r4, #12]
 8006a14:	1aed      	subs	r5, r5, r3
 8006a16:	43eb      	mvns	r3, r5
 8006a18:	17db      	asrs	r3, r3, #31
 8006a1a:	401d      	ands	r5, r3
 8006a1c:	68a3      	ldr	r3, [r4, #8]
 8006a1e:	6922      	ldr	r2, [r4, #16]
 8006a20:	4293      	cmp	r3, r2
 8006a22:	dd01      	ble.n	8006a28 <_printf_common+0x80>
 8006a24:	1a9b      	subs	r3, r3, r2
 8006a26:	18ed      	adds	r5, r5, r3
 8006a28:	2600      	movs	r6, #0
 8006a2a:	42b5      	cmp	r5, r6
 8006a2c:	d120      	bne.n	8006a70 <_printf_common+0xc8>
 8006a2e:	2000      	movs	r0, #0
 8006a30:	e010      	b.n	8006a54 <_printf_common+0xac>
 8006a32:	3501      	adds	r5, #1
 8006a34:	68e3      	ldr	r3, [r4, #12]
 8006a36:	6832      	ldr	r2, [r6, #0]
 8006a38:	1a9b      	subs	r3, r3, r2
 8006a3a:	42ab      	cmp	r3, r5
 8006a3c:	ddd2      	ble.n	80069e4 <_printf_common+0x3c>
 8006a3e:	0022      	movs	r2, r4
 8006a40:	2301      	movs	r3, #1
 8006a42:	9901      	ldr	r1, [sp, #4]
 8006a44:	9800      	ldr	r0, [sp, #0]
 8006a46:	9f08      	ldr	r7, [sp, #32]
 8006a48:	3219      	adds	r2, #25
 8006a4a:	47b8      	blx	r7
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d1f0      	bne.n	8006a32 <_printf_common+0x8a>
 8006a50:	2001      	movs	r0, #1
 8006a52:	4240      	negs	r0, r0
 8006a54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a56:	2030      	movs	r0, #48	; 0x30
 8006a58:	18e1      	adds	r1, r4, r3
 8006a5a:	3143      	adds	r1, #67	; 0x43
 8006a5c:	7008      	strb	r0, [r1, #0]
 8006a5e:	0021      	movs	r1, r4
 8006a60:	1c5a      	adds	r2, r3, #1
 8006a62:	3145      	adds	r1, #69	; 0x45
 8006a64:	7809      	ldrb	r1, [r1, #0]
 8006a66:	18a2      	adds	r2, r4, r2
 8006a68:	3243      	adds	r2, #67	; 0x43
 8006a6a:	3302      	adds	r3, #2
 8006a6c:	7011      	strb	r1, [r2, #0]
 8006a6e:	e7c1      	b.n	80069f4 <_printf_common+0x4c>
 8006a70:	0022      	movs	r2, r4
 8006a72:	2301      	movs	r3, #1
 8006a74:	9901      	ldr	r1, [sp, #4]
 8006a76:	9800      	ldr	r0, [sp, #0]
 8006a78:	9f08      	ldr	r7, [sp, #32]
 8006a7a:	321a      	adds	r2, #26
 8006a7c:	47b8      	blx	r7
 8006a7e:	3001      	adds	r0, #1
 8006a80:	d0e6      	beq.n	8006a50 <_printf_common+0xa8>
 8006a82:	3601      	adds	r6, #1
 8006a84:	e7d1      	b.n	8006a2a <_printf_common+0x82>
	...

08006a88 <_printf_i>:
 8006a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a8a:	b08b      	sub	sp, #44	; 0x2c
 8006a8c:	9206      	str	r2, [sp, #24]
 8006a8e:	000a      	movs	r2, r1
 8006a90:	3243      	adds	r2, #67	; 0x43
 8006a92:	9307      	str	r3, [sp, #28]
 8006a94:	9005      	str	r0, [sp, #20]
 8006a96:	9204      	str	r2, [sp, #16]
 8006a98:	7e0a      	ldrb	r2, [r1, #24]
 8006a9a:	000c      	movs	r4, r1
 8006a9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a9e:	2a78      	cmp	r2, #120	; 0x78
 8006aa0:	d809      	bhi.n	8006ab6 <_printf_i+0x2e>
 8006aa2:	2a62      	cmp	r2, #98	; 0x62
 8006aa4:	d80b      	bhi.n	8006abe <_printf_i+0x36>
 8006aa6:	2a00      	cmp	r2, #0
 8006aa8:	d100      	bne.n	8006aac <_printf_i+0x24>
 8006aaa:	e0be      	b.n	8006c2a <_printf_i+0x1a2>
 8006aac:	497c      	ldr	r1, [pc, #496]	; (8006ca0 <_printf_i+0x218>)
 8006aae:	9103      	str	r1, [sp, #12]
 8006ab0:	2a58      	cmp	r2, #88	; 0x58
 8006ab2:	d100      	bne.n	8006ab6 <_printf_i+0x2e>
 8006ab4:	e093      	b.n	8006bde <_printf_i+0x156>
 8006ab6:	0026      	movs	r6, r4
 8006ab8:	3642      	adds	r6, #66	; 0x42
 8006aba:	7032      	strb	r2, [r6, #0]
 8006abc:	e022      	b.n	8006b04 <_printf_i+0x7c>
 8006abe:	0010      	movs	r0, r2
 8006ac0:	3863      	subs	r0, #99	; 0x63
 8006ac2:	2815      	cmp	r0, #21
 8006ac4:	d8f7      	bhi.n	8006ab6 <_printf_i+0x2e>
 8006ac6:	f7f9 fb1f 	bl	8000108 <__gnu_thumb1_case_shi>
 8006aca:	0016      	.short	0x0016
 8006acc:	fff6001f 	.word	0xfff6001f
 8006ad0:	fff6fff6 	.word	0xfff6fff6
 8006ad4:	001ffff6 	.word	0x001ffff6
 8006ad8:	fff6fff6 	.word	0xfff6fff6
 8006adc:	fff6fff6 	.word	0xfff6fff6
 8006ae0:	003600a3 	.word	0x003600a3
 8006ae4:	fff60083 	.word	0xfff60083
 8006ae8:	00b4fff6 	.word	0x00b4fff6
 8006aec:	0036fff6 	.word	0x0036fff6
 8006af0:	fff6fff6 	.word	0xfff6fff6
 8006af4:	0087      	.short	0x0087
 8006af6:	0026      	movs	r6, r4
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	3642      	adds	r6, #66	; 0x42
 8006afc:	1d11      	adds	r1, r2, #4
 8006afe:	6019      	str	r1, [r3, #0]
 8006b00:	6813      	ldr	r3, [r2, #0]
 8006b02:	7033      	strb	r3, [r6, #0]
 8006b04:	2301      	movs	r3, #1
 8006b06:	e0a2      	b.n	8006c4e <_printf_i+0x1c6>
 8006b08:	6818      	ldr	r0, [r3, #0]
 8006b0a:	6809      	ldr	r1, [r1, #0]
 8006b0c:	1d02      	adds	r2, r0, #4
 8006b0e:	060d      	lsls	r5, r1, #24
 8006b10:	d50b      	bpl.n	8006b2a <_printf_i+0xa2>
 8006b12:	6805      	ldr	r5, [r0, #0]
 8006b14:	601a      	str	r2, [r3, #0]
 8006b16:	2d00      	cmp	r5, #0
 8006b18:	da03      	bge.n	8006b22 <_printf_i+0x9a>
 8006b1a:	232d      	movs	r3, #45	; 0x2d
 8006b1c:	9a04      	ldr	r2, [sp, #16]
 8006b1e:	426d      	negs	r5, r5
 8006b20:	7013      	strb	r3, [r2, #0]
 8006b22:	4b5f      	ldr	r3, [pc, #380]	; (8006ca0 <_printf_i+0x218>)
 8006b24:	270a      	movs	r7, #10
 8006b26:	9303      	str	r3, [sp, #12]
 8006b28:	e01b      	b.n	8006b62 <_printf_i+0xda>
 8006b2a:	6805      	ldr	r5, [r0, #0]
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	0649      	lsls	r1, r1, #25
 8006b30:	d5f1      	bpl.n	8006b16 <_printf_i+0x8e>
 8006b32:	b22d      	sxth	r5, r5
 8006b34:	e7ef      	b.n	8006b16 <_printf_i+0x8e>
 8006b36:	680d      	ldr	r5, [r1, #0]
 8006b38:	6819      	ldr	r1, [r3, #0]
 8006b3a:	1d08      	adds	r0, r1, #4
 8006b3c:	6018      	str	r0, [r3, #0]
 8006b3e:	062e      	lsls	r6, r5, #24
 8006b40:	d501      	bpl.n	8006b46 <_printf_i+0xbe>
 8006b42:	680d      	ldr	r5, [r1, #0]
 8006b44:	e003      	b.n	8006b4e <_printf_i+0xc6>
 8006b46:	066d      	lsls	r5, r5, #25
 8006b48:	d5fb      	bpl.n	8006b42 <_printf_i+0xba>
 8006b4a:	680d      	ldr	r5, [r1, #0]
 8006b4c:	b2ad      	uxth	r5, r5
 8006b4e:	4b54      	ldr	r3, [pc, #336]	; (8006ca0 <_printf_i+0x218>)
 8006b50:	2708      	movs	r7, #8
 8006b52:	9303      	str	r3, [sp, #12]
 8006b54:	2a6f      	cmp	r2, #111	; 0x6f
 8006b56:	d000      	beq.n	8006b5a <_printf_i+0xd2>
 8006b58:	3702      	adds	r7, #2
 8006b5a:	0023      	movs	r3, r4
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	3343      	adds	r3, #67	; 0x43
 8006b60:	701a      	strb	r2, [r3, #0]
 8006b62:	6863      	ldr	r3, [r4, #4]
 8006b64:	60a3      	str	r3, [r4, #8]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	db03      	blt.n	8006b72 <_printf_i+0xea>
 8006b6a:	2104      	movs	r1, #4
 8006b6c:	6822      	ldr	r2, [r4, #0]
 8006b6e:	438a      	bics	r2, r1
 8006b70:	6022      	str	r2, [r4, #0]
 8006b72:	2d00      	cmp	r5, #0
 8006b74:	d102      	bne.n	8006b7c <_printf_i+0xf4>
 8006b76:	9e04      	ldr	r6, [sp, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00c      	beq.n	8006b96 <_printf_i+0x10e>
 8006b7c:	9e04      	ldr	r6, [sp, #16]
 8006b7e:	0028      	movs	r0, r5
 8006b80:	0039      	movs	r1, r7
 8006b82:	f7f9 fb51 	bl	8000228 <__aeabi_uidivmod>
 8006b86:	9b03      	ldr	r3, [sp, #12]
 8006b88:	3e01      	subs	r6, #1
 8006b8a:	5c5b      	ldrb	r3, [r3, r1]
 8006b8c:	7033      	strb	r3, [r6, #0]
 8006b8e:	002b      	movs	r3, r5
 8006b90:	0005      	movs	r5, r0
 8006b92:	429f      	cmp	r7, r3
 8006b94:	d9f3      	bls.n	8006b7e <_printf_i+0xf6>
 8006b96:	2f08      	cmp	r7, #8
 8006b98:	d109      	bne.n	8006bae <_printf_i+0x126>
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	07db      	lsls	r3, r3, #31
 8006b9e:	d506      	bpl.n	8006bae <_printf_i+0x126>
 8006ba0:	6862      	ldr	r2, [r4, #4]
 8006ba2:	6923      	ldr	r3, [r4, #16]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	dc02      	bgt.n	8006bae <_printf_i+0x126>
 8006ba8:	2330      	movs	r3, #48	; 0x30
 8006baa:	3e01      	subs	r6, #1
 8006bac:	7033      	strb	r3, [r6, #0]
 8006bae:	9b04      	ldr	r3, [sp, #16]
 8006bb0:	1b9b      	subs	r3, r3, r6
 8006bb2:	6123      	str	r3, [r4, #16]
 8006bb4:	9b07      	ldr	r3, [sp, #28]
 8006bb6:	0021      	movs	r1, r4
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	9805      	ldr	r0, [sp, #20]
 8006bbc:	9b06      	ldr	r3, [sp, #24]
 8006bbe:	aa09      	add	r2, sp, #36	; 0x24
 8006bc0:	f7ff fef2 	bl	80069a8 <_printf_common>
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	d147      	bne.n	8006c58 <_printf_i+0x1d0>
 8006bc8:	2001      	movs	r0, #1
 8006bca:	4240      	negs	r0, r0
 8006bcc:	b00b      	add	sp, #44	; 0x2c
 8006bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	6809      	ldr	r1, [r1, #0]
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	6022      	str	r2, [r4, #0]
 8006bd8:	2278      	movs	r2, #120	; 0x78
 8006bda:	4932      	ldr	r1, [pc, #200]	; (8006ca4 <_printf_i+0x21c>)
 8006bdc:	9103      	str	r1, [sp, #12]
 8006bde:	0021      	movs	r1, r4
 8006be0:	3145      	adds	r1, #69	; 0x45
 8006be2:	700a      	strb	r2, [r1, #0]
 8006be4:	6819      	ldr	r1, [r3, #0]
 8006be6:	6822      	ldr	r2, [r4, #0]
 8006be8:	c920      	ldmia	r1!, {r5}
 8006bea:	0610      	lsls	r0, r2, #24
 8006bec:	d402      	bmi.n	8006bf4 <_printf_i+0x16c>
 8006bee:	0650      	lsls	r0, r2, #25
 8006bf0:	d500      	bpl.n	8006bf4 <_printf_i+0x16c>
 8006bf2:	b2ad      	uxth	r5, r5
 8006bf4:	6019      	str	r1, [r3, #0]
 8006bf6:	07d3      	lsls	r3, r2, #31
 8006bf8:	d502      	bpl.n	8006c00 <_printf_i+0x178>
 8006bfa:	2320      	movs	r3, #32
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	6023      	str	r3, [r4, #0]
 8006c00:	2710      	movs	r7, #16
 8006c02:	2d00      	cmp	r5, #0
 8006c04:	d1a9      	bne.n	8006b5a <_printf_i+0xd2>
 8006c06:	2220      	movs	r2, #32
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	4393      	bics	r3, r2
 8006c0c:	6023      	str	r3, [r4, #0]
 8006c0e:	e7a4      	b.n	8006b5a <_printf_i+0xd2>
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	680d      	ldr	r5, [r1, #0]
 8006c14:	1d10      	adds	r0, r2, #4
 8006c16:	6949      	ldr	r1, [r1, #20]
 8006c18:	6018      	str	r0, [r3, #0]
 8006c1a:	6813      	ldr	r3, [r2, #0]
 8006c1c:	062e      	lsls	r6, r5, #24
 8006c1e:	d501      	bpl.n	8006c24 <_printf_i+0x19c>
 8006c20:	6019      	str	r1, [r3, #0]
 8006c22:	e002      	b.n	8006c2a <_printf_i+0x1a2>
 8006c24:	066d      	lsls	r5, r5, #25
 8006c26:	d5fb      	bpl.n	8006c20 <_printf_i+0x198>
 8006c28:	8019      	strh	r1, [r3, #0]
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	9e04      	ldr	r6, [sp, #16]
 8006c2e:	6123      	str	r3, [r4, #16]
 8006c30:	e7c0      	b.n	8006bb4 <_printf_i+0x12c>
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	1d11      	adds	r1, r2, #4
 8006c36:	6019      	str	r1, [r3, #0]
 8006c38:	6816      	ldr	r6, [r2, #0]
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	0030      	movs	r0, r6
 8006c3e:	6862      	ldr	r2, [r4, #4]
 8006c40:	f000 f9a0 	bl	8006f84 <memchr>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	d001      	beq.n	8006c4c <_printf_i+0x1c4>
 8006c48:	1b80      	subs	r0, r0, r6
 8006c4a:	6060      	str	r0, [r4, #4]
 8006c4c:	6863      	ldr	r3, [r4, #4]
 8006c4e:	6123      	str	r3, [r4, #16]
 8006c50:	2300      	movs	r3, #0
 8006c52:	9a04      	ldr	r2, [sp, #16]
 8006c54:	7013      	strb	r3, [r2, #0]
 8006c56:	e7ad      	b.n	8006bb4 <_printf_i+0x12c>
 8006c58:	0032      	movs	r2, r6
 8006c5a:	6923      	ldr	r3, [r4, #16]
 8006c5c:	9906      	ldr	r1, [sp, #24]
 8006c5e:	9805      	ldr	r0, [sp, #20]
 8006c60:	9d07      	ldr	r5, [sp, #28]
 8006c62:	47a8      	blx	r5
 8006c64:	3001      	adds	r0, #1
 8006c66:	d0af      	beq.n	8006bc8 <_printf_i+0x140>
 8006c68:	6823      	ldr	r3, [r4, #0]
 8006c6a:	079b      	lsls	r3, r3, #30
 8006c6c:	d415      	bmi.n	8006c9a <_printf_i+0x212>
 8006c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c70:	68e0      	ldr	r0, [r4, #12]
 8006c72:	4298      	cmp	r0, r3
 8006c74:	daaa      	bge.n	8006bcc <_printf_i+0x144>
 8006c76:	0018      	movs	r0, r3
 8006c78:	e7a8      	b.n	8006bcc <_printf_i+0x144>
 8006c7a:	0022      	movs	r2, r4
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	9906      	ldr	r1, [sp, #24]
 8006c80:	9805      	ldr	r0, [sp, #20]
 8006c82:	9e07      	ldr	r6, [sp, #28]
 8006c84:	3219      	adds	r2, #25
 8006c86:	47b0      	blx	r6
 8006c88:	3001      	adds	r0, #1
 8006c8a:	d09d      	beq.n	8006bc8 <_printf_i+0x140>
 8006c8c:	3501      	adds	r5, #1
 8006c8e:	68e3      	ldr	r3, [r4, #12]
 8006c90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c92:	1a9b      	subs	r3, r3, r2
 8006c94:	42ab      	cmp	r3, r5
 8006c96:	dcf0      	bgt.n	8006c7a <_printf_i+0x1f2>
 8006c98:	e7e9      	b.n	8006c6e <_printf_i+0x1e6>
 8006c9a:	2500      	movs	r5, #0
 8006c9c:	e7f7      	b.n	8006c8e <_printf_i+0x206>
 8006c9e:	46c0      	nop			; (mov r8, r8)
 8006ca0:	080071e5 	.word	0x080071e5
 8006ca4:	080071f6 	.word	0x080071f6

08006ca8 <__sflush_r>:
 8006ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006caa:	898b      	ldrh	r3, [r1, #12]
 8006cac:	0005      	movs	r5, r0
 8006cae:	000c      	movs	r4, r1
 8006cb0:	071a      	lsls	r2, r3, #28
 8006cb2:	d45c      	bmi.n	8006d6e <__sflush_r+0xc6>
 8006cb4:	684a      	ldr	r2, [r1, #4]
 8006cb6:	2a00      	cmp	r2, #0
 8006cb8:	dc04      	bgt.n	8006cc4 <__sflush_r+0x1c>
 8006cba:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006cbc:	2a00      	cmp	r2, #0
 8006cbe:	dc01      	bgt.n	8006cc4 <__sflush_r+0x1c>
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006cc4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006cc6:	2f00      	cmp	r7, #0
 8006cc8:	d0fa      	beq.n	8006cc0 <__sflush_r+0x18>
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2080      	movs	r0, #128	; 0x80
 8006cce:	682e      	ldr	r6, [r5, #0]
 8006cd0:	602a      	str	r2, [r5, #0]
 8006cd2:	001a      	movs	r2, r3
 8006cd4:	0140      	lsls	r0, r0, #5
 8006cd6:	6a21      	ldr	r1, [r4, #32]
 8006cd8:	4002      	ands	r2, r0
 8006cda:	4203      	tst	r3, r0
 8006cdc:	d034      	beq.n	8006d48 <__sflush_r+0xa0>
 8006cde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ce0:	89a3      	ldrh	r3, [r4, #12]
 8006ce2:	075b      	lsls	r3, r3, #29
 8006ce4:	d506      	bpl.n	8006cf4 <__sflush_r+0x4c>
 8006ce6:	6863      	ldr	r3, [r4, #4]
 8006ce8:	1ac0      	subs	r0, r0, r3
 8006cea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <__sflush_r+0x4c>
 8006cf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cf2:	1ac0      	subs	r0, r0, r3
 8006cf4:	0002      	movs	r2, r0
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	0028      	movs	r0, r5
 8006cfa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006cfc:	6a21      	ldr	r1, [r4, #32]
 8006cfe:	47b8      	blx	r7
 8006d00:	89a2      	ldrh	r2, [r4, #12]
 8006d02:	1c43      	adds	r3, r0, #1
 8006d04:	d106      	bne.n	8006d14 <__sflush_r+0x6c>
 8006d06:	6829      	ldr	r1, [r5, #0]
 8006d08:	291d      	cmp	r1, #29
 8006d0a:	d82c      	bhi.n	8006d66 <__sflush_r+0xbe>
 8006d0c:	4b2a      	ldr	r3, [pc, #168]	; (8006db8 <__sflush_r+0x110>)
 8006d0e:	410b      	asrs	r3, r1
 8006d10:	07db      	lsls	r3, r3, #31
 8006d12:	d428      	bmi.n	8006d66 <__sflush_r+0xbe>
 8006d14:	2300      	movs	r3, #0
 8006d16:	6063      	str	r3, [r4, #4]
 8006d18:	6923      	ldr	r3, [r4, #16]
 8006d1a:	6023      	str	r3, [r4, #0]
 8006d1c:	04d2      	lsls	r2, r2, #19
 8006d1e:	d505      	bpl.n	8006d2c <__sflush_r+0x84>
 8006d20:	1c43      	adds	r3, r0, #1
 8006d22:	d102      	bne.n	8006d2a <__sflush_r+0x82>
 8006d24:	682b      	ldr	r3, [r5, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d100      	bne.n	8006d2c <__sflush_r+0x84>
 8006d2a:	6560      	str	r0, [r4, #84]	; 0x54
 8006d2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d2e:	602e      	str	r6, [r5, #0]
 8006d30:	2900      	cmp	r1, #0
 8006d32:	d0c5      	beq.n	8006cc0 <__sflush_r+0x18>
 8006d34:	0023      	movs	r3, r4
 8006d36:	3344      	adds	r3, #68	; 0x44
 8006d38:	4299      	cmp	r1, r3
 8006d3a:	d002      	beq.n	8006d42 <__sflush_r+0x9a>
 8006d3c:	0028      	movs	r0, r5
 8006d3e:	f7ff fbf1 	bl	8006524 <_free_r>
 8006d42:	2000      	movs	r0, #0
 8006d44:	6360      	str	r0, [r4, #52]	; 0x34
 8006d46:	e7bc      	b.n	8006cc2 <__sflush_r+0x1a>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	0028      	movs	r0, r5
 8006d4c:	47b8      	blx	r7
 8006d4e:	1c43      	adds	r3, r0, #1
 8006d50:	d1c6      	bne.n	8006ce0 <__sflush_r+0x38>
 8006d52:	682b      	ldr	r3, [r5, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d0c3      	beq.n	8006ce0 <__sflush_r+0x38>
 8006d58:	2b1d      	cmp	r3, #29
 8006d5a:	d001      	beq.n	8006d60 <__sflush_r+0xb8>
 8006d5c:	2b16      	cmp	r3, #22
 8006d5e:	d101      	bne.n	8006d64 <__sflush_r+0xbc>
 8006d60:	602e      	str	r6, [r5, #0]
 8006d62:	e7ad      	b.n	8006cc0 <__sflush_r+0x18>
 8006d64:	89a2      	ldrh	r2, [r4, #12]
 8006d66:	2340      	movs	r3, #64	; 0x40
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	81a3      	strh	r3, [r4, #12]
 8006d6c:	e7a9      	b.n	8006cc2 <__sflush_r+0x1a>
 8006d6e:	690e      	ldr	r6, [r1, #16]
 8006d70:	2e00      	cmp	r6, #0
 8006d72:	d0a5      	beq.n	8006cc0 <__sflush_r+0x18>
 8006d74:	680f      	ldr	r7, [r1, #0]
 8006d76:	600e      	str	r6, [r1, #0]
 8006d78:	1bba      	subs	r2, r7, r6
 8006d7a:	9201      	str	r2, [sp, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	079b      	lsls	r3, r3, #30
 8006d80:	d100      	bne.n	8006d84 <__sflush_r+0xdc>
 8006d82:	694a      	ldr	r2, [r1, #20]
 8006d84:	60a2      	str	r2, [r4, #8]
 8006d86:	9b01      	ldr	r3, [sp, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	dd99      	ble.n	8006cc0 <__sflush_r+0x18>
 8006d8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d8e:	0032      	movs	r2, r6
 8006d90:	001f      	movs	r7, r3
 8006d92:	0028      	movs	r0, r5
 8006d94:	9b01      	ldr	r3, [sp, #4]
 8006d96:	6a21      	ldr	r1, [r4, #32]
 8006d98:	47b8      	blx	r7
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	dc06      	bgt.n	8006dac <__sflush_r+0x104>
 8006d9e:	2340      	movs	r3, #64	; 0x40
 8006da0:	2001      	movs	r0, #1
 8006da2:	89a2      	ldrh	r2, [r4, #12]
 8006da4:	4240      	negs	r0, r0
 8006da6:	4313      	orrs	r3, r2
 8006da8:	81a3      	strh	r3, [r4, #12]
 8006daa:	e78a      	b.n	8006cc2 <__sflush_r+0x1a>
 8006dac:	9b01      	ldr	r3, [sp, #4]
 8006dae:	1836      	adds	r6, r6, r0
 8006db0:	1a1b      	subs	r3, r3, r0
 8006db2:	9301      	str	r3, [sp, #4]
 8006db4:	e7e7      	b.n	8006d86 <__sflush_r+0xde>
 8006db6:	46c0      	nop			; (mov r8, r8)
 8006db8:	dfbffffe 	.word	0xdfbffffe

08006dbc <_fflush_r>:
 8006dbc:	690b      	ldr	r3, [r1, #16]
 8006dbe:	b570      	push	{r4, r5, r6, lr}
 8006dc0:	0005      	movs	r5, r0
 8006dc2:	000c      	movs	r4, r1
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d102      	bne.n	8006dce <_fflush_r+0x12>
 8006dc8:	2500      	movs	r5, #0
 8006dca:	0028      	movs	r0, r5
 8006dcc:	bd70      	pop	{r4, r5, r6, pc}
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	d004      	beq.n	8006ddc <_fflush_r+0x20>
 8006dd2:	6a03      	ldr	r3, [r0, #32]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <_fflush_r+0x20>
 8006dd8:	f7ff fa92 	bl	8006300 <__sinit>
 8006ddc:	220c      	movs	r2, #12
 8006dde:	5ea3      	ldrsh	r3, [r4, r2]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d0f1      	beq.n	8006dc8 <_fflush_r+0xc>
 8006de4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006de6:	07d2      	lsls	r2, r2, #31
 8006de8:	d404      	bmi.n	8006df4 <_fflush_r+0x38>
 8006dea:	059b      	lsls	r3, r3, #22
 8006dec:	d402      	bmi.n	8006df4 <_fflush_r+0x38>
 8006dee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006df0:	f7ff fb96 	bl	8006520 <__retarget_lock_acquire_recursive>
 8006df4:	0028      	movs	r0, r5
 8006df6:	0021      	movs	r1, r4
 8006df8:	f7ff ff56 	bl	8006ca8 <__sflush_r>
 8006dfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dfe:	0005      	movs	r5, r0
 8006e00:	07db      	lsls	r3, r3, #31
 8006e02:	d4e2      	bmi.n	8006dca <_fflush_r+0xe>
 8006e04:	89a3      	ldrh	r3, [r4, #12]
 8006e06:	059b      	lsls	r3, r3, #22
 8006e08:	d4df      	bmi.n	8006dca <_fflush_r+0xe>
 8006e0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e0c:	f7ff fb89 	bl	8006522 <__retarget_lock_release_recursive>
 8006e10:	e7db      	b.n	8006dca <_fflush_r+0xe>

08006e12 <__swbuf_r>:
 8006e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e14:	0006      	movs	r6, r0
 8006e16:	000d      	movs	r5, r1
 8006e18:	0014      	movs	r4, r2
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	d004      	beq.n	8006e28 <__swbuf_r+0x16>
 8006e1e:	6a03      	ldr	r3, [r0, #32]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <__swbuf_r+0x16>
 8006e24:	f7ff fa6c 	bl	8006300 <__sinit>
 8006e28:	69a3      	ldr	r3, [r4, #24]
 8006e2a:	60a3      	str	r3, [r4, #8]
 8006e2c:	89a3      	ldrh	r3, [r4, #12]
 8006e2e:	071b      	lsls	r3, r3, #28
 8006e30:	d528      	bpl.n	8006e84 <__swbuf_r+0x72>
 8006e32:	6923      	ldr	r3, [r4, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d025      	beq.n	8006e84 <__swbuf_r+0x72>
 8006e38:	6923      	ldr	r3, [r4, #16]
 8006e3a:	6820      	ldr	r0, [r4, #0]
 8006e3c:	b2ef      	uxtb	r7, r5
 8006e3e:	1ac0      	subs	r0, r0, r3
 8006e40:	6963      	ldr	r3, [r4, #20]
 8006e42:	b2ed      	uxtb	r5, r5
 8006e44:	4283      	cmp	r3, r0
 8006e46:	dc05      	bgt.n	8006e54 <__swbuf_r+0x42>
 8006e48:	0021      	movs	r1, r4
 8006e4a:	0030      	movs	r0, r6
 8006e4c:	f7ff ffb6 	bl	8006dbc <_fflush_r>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d11d      	bne.n	8006e90 <__swbuf_r+0x7e>
 8006e54:	68a3      	ldr	r3, [r4, #8]
 8006e56:	3001      	adds	r0, #1
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	60a3      	str	r3, [r4, #8]
 8006e5c:	6823      	ldr	r3, [r4, #0]
 8006e5e:	1c5a      	adds	r2, r3, #1
 8006e60:	6022      	str	r2, [r4, #0]
 8006e62:	701f      	strb	r7, [r3, #0]
 8006e64:	6963      	ldr	r3, [r4, #20]
 8006e66:	4283      	cmp	r3, r0
 8006e68:	d004      	beq.n	8006e74 <__swbuf_r+0x62>
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	07db      	lsls	r3, r3, #31
 8006e6e:	d507      	bpl.n	8006e80 <__swbuf_r+0x6e>
 8006e70:	2d0a      	cmp	r5, #10
 8006e72:	d105      	bne.n	8006e80 <__swbuf_r+0x6e>
 8006e74:	0021      	movs	r1, r4
 8006e76:	0030      	movs	r0, r6
 8006e78:	f7ff ffa0 	bl	8006dbc <_fflush_r>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d107      	bne.n	8006e90 <__swbuf_r+0x7e>
 8006e80:	0028      	movs	r0, r5
 8006e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e84:	0021      	movs	r1, r4
 8006e86:	0030      	movs	r0, r6
 8006e88:	f000 f806 	bl	8006e98 <__swsetup_r>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d0d3      	beq.n	8006e38 <__swbuf_r+0x26>
 8006e90:	2501      	movs	r5, #1
 8006e92:	426d      	negs	r5, r5
 8006e94:	e7f4      	b.n	8006e80 <__swbuf_r+0x6e>
	...

08006e98 <__swsetup_r>:
 8006e98:	4b30      	ldr	r3, [pc, #192]	; (8006f5c <__swsetup_r+0xc4>)
 8006e9a:	b570      	push	{r4, r5, r6, lr}
 8006e9c:	0005      	movs	r5, r0
 8006e9e:	6818      	ldr	r0, [r3, #0]
 8006ea0:	000c      	movs	r4, r1
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	d004      	beq.n	8006eb0 <__swsetup_r+0x18>
 8006ea6:	6a03      	ldr	r3, [r0, #32]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <__swsetup_r+0x18>
 8006eac:	f7ff fa28 	bl	8006300 <__sinit>
 8006eb0:	230c      	movs	r3, #12
 8006eb2:	5ee2      	ldrsh	r2, [r4, r3]
 8006eb4:	b293      	uxth	r3, r2
 8006eb6:	0711      	lsls	r1, r2, #28
 8006eb8:	d423      	bmi.n	8006f02 <__swsetup_r+0x6a>
 8006eba:	06d9      	lsls	r1, r3, #27
 8006ebc:	d407      	bmi.n	8006ece <__swsetup_r+0x36>
 8006ebe:	2309      	movs	r3, #9
 8006ec0:	2001      	movs	r0, #1
 8006ec2:	602b      	str	r3, [r5, #0]
 8006ec4:	3337      	adds	r3, #55	; 0x37
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	81a3      	strh	r3, [r4, #12]
 8006eca:	4240      	negs	r0, r0
 8006ecc:	bd70      	pop	{r4, r5, r6, pc}
 8006ece:	075b      	lsls	r3, r3, #29
 8006ed0:	d513      	bpl.n	8006efa <__swsetup_r+0x62>
 8006ed2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ed4:	2900      	cmp	r1, #0
 8006ed6:	d008      	beq.n	8006eea <__swsetup_r+0x52>
 8006ed8:	0023      	movs	r3, r4
 8006eda:	3344      	adds	r3, #68	; 0x44
 8006edc:	4299      	cmp	r1, r3
 8006ede:	d002      	beq.n	8006ee6 <__swsetup_r+0x4e>
 8006ee0:	0028      	movs	r0, r5
 8006ee2:	f7ff fb1f 	bl	8006524 <_free_r>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	6363      	str	r3, [r4, #52]	; 0x34
 8006eea:	2224      	movs	r2, #36	; 0x24
 8006eec:	89a3      	ldrh	r3, [r4, #12]
 8006eee:	4393      	bics	r3, r2
 8006ef0:	81a3      	strh	r3, [r4, #12]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	6063      	str	r3, [r4, #4]
 8006ef6:	6923      	ldr	r3, [r4, #16]
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	2308      	movs	r3, #8
 8006efc:	89a2      	ldrh	r2, [r4, #12]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	81a3      	strh	r3, [r4, #12]
 8006f02:	6923      	ldr	r3, [r4, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10b      	bne.n	8006f20 <__swsetup_r+0x88>
 8006f08:	21a0      	movs	r1, #160	; 0xa0
 8006f0a:	2280      	movs	r2, #128	; 0x80
 8006f0c:	89a3      	ldrh	r3, [r4, #12]
 8006f0e:	0089      	lsls	r1, r1, #2
 8006f10:	0092      	lsls	r2, r2, #2
 8006f12:	400b      	ands	r3, r1
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d003      	beq.n	8006f20 <__swsetup_r+0x88>
 8006f18:	0021      	movs	r1, r4
 8006f1a:	0028      	movs	r0, r5
 8006f1c:	f000 f866 	bl	8006fec <__smakebuf_r>
 8006f20:	220c      	movs	r2, #12
 8006f22:	5ea3      	ldrsh	r3, [r4, r2]
 8006f24:	2001      	movs	r0, #1
 8006f26:	001a      	movs	r2, r3
 8006f28:	b299      	uxth	r1, r3
 8006f2a:	4002      	ands	r2, r0
 8006f2c:	4203      	tst	r3, r0
 8006f2e:	d00f      	beq.n	8006f50 <__swsetup_r+0xb8>
 8006f30:	2200      	movs	r2, #0
 8006f32:	60a2      	str	r2, [r4, #8]
 8006f34:	6962      	ldr	r2, [r4, #20]
 8006f36:	4252      	negs	r2, r2
 8006f38:	61a2      	str	r2, [r4, #24]
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	6922      	ldr	r2, [r4, #16]
 8006f3e:	4282      	cmp	r2, r0
 8006f40:	d1c4      	bne.n	8006ecc <__swsetup_r+0x34>
 8006f42:	0609      	lsls	r1, r1, #24
 8006f44:	d5c2      	bpl.n	8006ecc <__swsetup_r+0x34>
 8006f46:	2240      	movs	r2, #64	; 0x40
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	81a3      	strh	r3, [r4, #12]
 8006f4c:	3801      	subs	r0, #1
 8006f4e:	e7bd      	b.n	8006ecc <__swsetup_r+0x34>
 8006f50:	0788      	lsls	r0, r1, #30
 8006f52:	d400      	bmi.n	8006f56 <__swsetup_r+0xbe>
 8006f54:	6962      	ldr	r2, [r4, #20]
 8006f56:	60a2      	str	r2, [r4, #8]
 8006f58:	e7ef      	b.n	8006f3a <__swsetup_r+0xa2>
 8006f5a:	46c0      	nop			; (mov r8, r8)
 8006f5c:	20000068 	.word	0x20000068

08006f60 <_sbrk_r>:
 8006f60:	2300      	movs	r3, #0
 8006f62:	b570      	push	{r4, r5, r6, lr}
 8006f64:	4d06      	ldr	r5, [pc, #24]	; (8006f80 <_sbrk_r+0x20>)
 8006f66:	0004      	movs	r4, r0
 8006f68:	0008      	movs	r0, r1
 8006f6a:	602b      	str	r3, [r5, #0]
 8006f6c:	f7f9 fe06 	bl	8000b7c <_sbrk>
 8006f70:	1c43      	adds	r3, r0, #1
 8006f72:	d103      	bne.n	8006f7c <_sbrk_r+0x1c>
 8006f74:	682b      	ldr	r3, [r5, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d000      	beq.n	8006f7c <_sbrk_r+0x1c>
 8006f7a:	6023      	str	r3, [r4, #0]
 8006f7c:	bd70      	pop	{r4, r5, r6, pc}
 8006f7e:	46c0      	nop			; (mov r8, r8)
 8006f80:	200012dc 	.word	0x200012dc

08006f84 <memchr>:
 8006f84:	b2c9      	uxtb	r1, r1
 8006f86:	1882      	adds	r2, r0, r2
 8006f88:	4290      	cmp	r0, r2
 8006f8a:	d101      	bne.n	8006f90 <memchr+0xc>
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	4770      	bx	lr
 8006f90:	7803      	ldrb	r3, [r0, #0]
 8006f92:	428b      	cmp	r3, r1
 8006f94:	d0fb      	beq.n	8006f8e <memchr+0xa>
 8006f96:	3001      	adds	r0, #1
 8006f98:	e7f6      	b.n	8006f88 <memchr+0x4>
	...

08006f9c <__swhatbuf_r>:
 8006f9c:	b570      	push	{r4, r5, r6, lr}
 8006f9e:	000e      	movs	r6, r1
 8006fa0:	001d      	movs	r5, r3
 8006fa2:	230e      	movs	r3, #14
 8006fa4:	5ec9      	ldrsh	r1, [r1, r3]
 8006fa6:	0014      	movs	r4, r2
 8006fa8:	b096      	sub	sp, #88	; 0x58
 8006faa:	2900      	cmp	r1, #0
 8006fac:	da0c      	bge.n	8006fc8 <__swhatbuf_r+0x2c>
 8006fae:	89b2      	ldrh	r2, [r6, #12]
 8006fb0:	2380      	movs	r3, #128	; 0x80
 8006fb2:	0011      	movs	r1, r2
 8006fb4:	4019      	ands	r1, r3
 8006fb6:	421a      	tst	r2, r3
 8006fb8:	d013      	beq.n	8006fe2 <__swhatbuf_r+0x46>
 8006fba:	2100      	movs	r1, #0
 8006fbc:	3b40      	subs	r3, #64	; 0x40
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	6029      	str	r1, [r5, #0]
 8006fc2:	6023      	str	r3, [r4, #0]
 8006fc4:	b016      	add	sp, #88	; 0x58
 8006fc6:	bd70      	pop	{r4, r5, r6, pc}
 8006fc8:	466a      	mov	r2, sp
 8006fca:	f000 f84d 	bl	8007068 <_fstat_r>
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	dbed      	blt.n	8006fae <__swhatbuf_r+0x12>
 8006fd2:	23f0      	movs	r3, #240	; 0xf0
 8006fd4:	9901      	ldr	r1, [sp, #4]
 8006fd6:	021b      	lsls	r3, r3, #8
 8006fd8:	4019      	ands	r1, r3
 8006fda:	4b03      	ldr	r3, [pc, #12]	; (8006fe8 <__swhatbuf_r+0x4c>)
 8006fdc:	18c9      	adds	r1, r1, r3
 8006fde:	424b      	negs	r3, r1
 8006fe0:	4159      	adcs	r1, r3
 8006fe2:	2380      	movs	r3, #128	; 0x80
 8006fe4:	00db      	lsls	r3, r3, #3
 8006fe6:	e7ea      	b.n	8006fbe <__swhatbuf_r+0x22>
 8006fe8:	ffffe000 	.word	0xffffe000

08006fec <__smakebuf_r>:
 8006fec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fee:	2602      	movs	r6, #2
 8006ff0:	898b      	ldrh	r3, [r1, #12]
 8006ff2:	0005      	movs	r5, r0
 8006ff4:	000c      	movs	r4, r1
 8006ff6:	4233      	tst	r3, r6
 8006ff8:	d006      	beq.n	8007008 <__smakebuf_r+0x1c>
 8006ffa:	0023      	movs	r3, r4
 8006ffc:	3347      	adds	r3, #71	; 0x47
 8006ffe:	6023      	str	r3, [r4, #0]
 8007000:	6123      	str	r3, [r4, #16]
 8007002:	2301      	movs	r3, #1
 8007004:	6163      	str	r3, [r4, #20]
 8007006:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007008:	466a      	mov	r2, sp
 800700a:	ab01      	add	r3, sp, #4
 800700c:	f7ff ffc6 	bl	8006f9c <__swhatbuf_r>
 8007010:	9900      	ldr	r1, [sp, #0]
 8007012:	0007      	movs	r7, r0
 8007014:	0028      	movs	r0, r5
 8007016:	f7ff faf1 	bl	80065fc <_malloc_r>
 800701a:	2800      	cmp	r0, #0
 800701c:	d108      	bne.n	8007030 <__smakebuf_r+0x44>
 800701e:	220c      	movs	r2, #12
 8007020:	5ea3      	ldrsh	r3, [r4, r2]
 8007022:	059a      	lsls	r2, r3, #22
 8007024:	d4ef      	bmi.n	8007006 <__smakebuf_r+0x1a>
 8007026:	2203      	movs	r2, #3
 8007028:	4393      	bics	r3, r2
 800702a:	431e      	orrs	r6, r3
 800702c:	81a6      	strh	r6, [r4, #12]
 800702e:	e7e4      	b.n	8006ffa <__smakebuf_r+0xe>
 8007030:	2380      	movs	r3, #128	; 0x80
 8007032:	89a2      	ldrh	r2, [r4, #12]
 8007034:	6020      	str	r0, [r4, #0]
 8007036:	4313      	orrs	r3, r2
 8007038:	81a3      	strh	r3, [r4, #12]
 800703a:	9b00      	ldr	r3, [sp, #0]
 800703c:	6120      	str	r0, [r4, #16]
 800703e:	6163      	str	r3, [r4, #20]
 8007040:	9b01      	ldr	r3, [sp, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00c      	beq.n	8007060 <__smakebuf_r+0x74>
 8007046:	0028      	movs	r0, r5
 8007048:	230e      	movs	r3, #14
 800704a:	5ee1      	ldrsh	r1, [r4, r3]
 800704c:	f000 f81e 	bl	800708c <_isatty_r>
 8007050:	2800      	cmp	r0, #0
 8007052:	d005      	beq.n	8007060 <__smakebuf_r+0x74>
 8007054:	2303      	movs	r3, #3
 8007056:	89a2      	ldrh	r2, [r4, #12]
 8007058:	439a      	bics	r2, r3
 800705a:	3b02      	subs	r3, #2
 800705c:	4313      	orrs	r3, r2
 800705e:	81a3      	strh	r3, [r4, #12]
 8007060:	89a3      	ldrh	r3, [r4, #12]
 8007062:	433b      	orrs	r3, r7
 8007064:	81a3      	strh	r3, [r4, #12]
 8007066:	e7ce      	b.n	8007006 <__smakebuf_r+0x1a>

08007068 <_fstat_r>:
 8007068:	2300      	movs	r3, #0
 800706a:	b570      	push	{r4, r5, r6, lr}
 800706c:	4d06      	ldr	r5, [pc, #24]	; (8007088 <_fstat_r+0x20>)
 800706e:	0004      	movs	r4, r0
 8007070:	0008      	movs	r0, r1
 8007072:	0011      	movs	r1, r2
 8007074:	602b      	str	r3, [r5, #0]
 8007076:	f7f9 fd5e 	bl	8000b36 <_fstat>
 800707a:	1c43      	adds	r3, r0, #1
 800707c:	d103      	bne.n	8007086 <_fstat_r+0x1e>
 800707e:	682b      	ldr	r3, [r5, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d000      	beq.n	8007086 <_fstat_r+0x1e>
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	bd70      	pop	{r4, r5, r6, pc}
 8007088:	200012dc 	.word	0x200012dc

0800708c <_isatty_r>:
 800708c:	2300      	movs	r3, #0
 800708e:	b570      	push	{r4, r5, r6, lr}
 8007090:	4d06      	ldr	r5, [pc, #24]	; (80070ac <_isatty_r+0x20>)
 8007092:	0004      	movs	r4, r0
 8007094:	0008      	movs	r0, r1
 8007096:	602b      	str	r3, [r5, #0]
 8007098:	f7f9 fd5b 	bl	8000b52 <_isatty>
 800709c:	1c43      	adds	r3, r0, #1
 800709e:	d103      	bne.n	80070a8 <_isatty_r+0x1c>
 80070a0:	682b      	ldr	r3, [r5, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d000      	beq.n	80070a8 <_isatty_r+0x1c>
 80070a6:	6023      	str	r3, [r4, #0]
 80070a8:	bd70      	pop	{r4, r5, r6, pc}
 80070aa:	46c0      	nop			; (mov r8, r8)
 80070ac:	200012dc 	.word	0x200012dc

080070b0 <_init>:
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b2:	46c0      	nop			; (mov r8, r8)
 80070b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b6:	bc08      	pop	{r3}
 80070b8:	469e      	mov	lr, r3
 80070ba:	4770      	bx	lr

080070bc <_fini>:
 80070bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070be:	46c0      	nop			; (mov r8, r8)
 80070c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070c2:	bc08      	pop	{r3}
 80070c4:	469e      	mov	lr, r3
 80070c6:	4770      	bx	lr
