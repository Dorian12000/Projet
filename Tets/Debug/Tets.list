
Tets.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007960  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08007b40  08007b40  00017b40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f44  08007f44  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007f44  08007f44  00017f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f4c  08007f4c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f4c  08007f4c  00017f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f50  08007f50  00017f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  200001d4  08008128  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08008128  00020478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013de5  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cfc  00000000  00000000  0003402c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  00036d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d40  00000000  00000000  00037e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fbc4  00000000  00000000  00038b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015a08  00000000  00000000  00058754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7cbb  00000000  00000000  0006e15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000057b0  00000000  00000000  00135e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0013b5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007b28 	.word	0x08007b28

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08007b28 	.word	0x08007b28

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b970 	b.w	8000f30 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	460d      	mov	r5, r1
 8000c70:	4604      	mov	r4, r0
 8000c72:	460f      	mov	r7, r1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d14a      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4694      	mov	ip, r2
 8000c7c:	d965      	bls.n	8000d4a <__udivmoddi4+0xe2>
 8000c7e:	fab2 f382 	clz	r3, r2
 8000c82:	b143      	cbz	r3, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c88:	f1c3 0220 	rsb	r2, r3, #32
 8000c8c:	409f      	lsls	r7, r3
 8000c8e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c92:	4317      	orrs	r7, r2
 8000c94:	409c      	lsls	r4, r3
 8000c96:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c9a:	fa1f f58c 	uxth.w	r5, ip
 8000c9e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ca2:	0c22      	lsrs	r2, r4, #16
 8000ca4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ca8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cac:	fb01 f005 	mul.w	r0, r1, r5
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x62>
 8000cb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cbc:	f080 811c 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	f240 8119 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cc6:	3902      	subs	r1, #2
 8000cc8:	4462      	add	r2, ip
 8000cca:	1a12      	subs	r2, r2, r0
 8000ccc:	b2a4      	uxth	r4, r4
 8000cce:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cd2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cd6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cda:	fb00 f505 	mul.w	r5, r0, r5
 8000cde:	42a5      	cmp	r5, r4
 8000ce0:	d90a      	bls.n	8000cf8 <__udivmoddi4+0x90>
 8000ce2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cea:	f080 8107 	bcs.w	8000efc <__udivmoddi4+0x294>
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	f240 8104 	bls.w	8000efc <__udivmoddi4+0x294>
 8000cf4:	4464      	add	r4, ip
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cfc:	1b64      	subs	r4, r4, r5
 8000cfe:	2100      	movs	r1, #0
 8000d00:	b11e      	cbz	r6, 8000d0a <__udivmoddi4+0xa2>
 8000d02:	40dc      	lsrs	r4, r3
 8000d04:	2300      	movs	r3, #0
 8000d06:	e9c6 4300 	strd	r4, r3, [r6]
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0xbc>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80ed 	beq.w	8000ef2 <__udivmoddi4+0x28a>
 8000d18:	2100      	movs	r1, #0
 8000d1a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	fab3 f183 	clz	r1, r3
 8000d28:	2900      	cmp	r1, #0
 8000d2a:	d149      	bne.n	8000dc0 <__udivmoddi4+0x158>
 8000d2c:	42ab      	cmp	r3, r5
 8000d2e:	d302      	bcc.n	8000d36 <__udivmoddi4+0xce>
 8000d30:	4282      	cmp	r2, r0
 8000d32:	f200 80f8 	bhi.w	8000f26 <__udivmoddi4+0x2be>
 8000d36:	1a84      	subs	r4, r0, r2
 8000d38:	eb65 0203 	sbc.w	r2, r5, r3
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	4617      	mov	r7, r2
 8000d40:	2e00      	cmp	r6, #0
 8000d42:	d0e2      	beq.n	8000d0a <__udivmoddi4+0xa2>
 8000d44:	e9c6 4700 	strd	r4, r7, [r6]
 8000d48:	e7df      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000d4a:	b902      	cbnz	r2, 8000d4e <__udivmoddi4+0xe6>
 8000d4c:	deff      	udf	#255	; 0xff
 8000d4e:	fab2 f382 	clz	r3, r2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f040 8090 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d58:	1a8a      	subs	r2, r1, r2
 8000d5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5e:	fa1f fe8c 	uxth.w	lr, ip
 8000d62:	2101      	movs	r1, #1
 8000d64:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d68:	fb07 2015 	mls	r0, r7, r5, r2
 8000d6c:	0c22      	lsrs	r2, r4, #16
 8000d6e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d72:	fb0e f005 	mul.w	r0, lr, r5
 8000d76:	4290      	cmp	r0, r2
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d7e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4290      	cmp	r0, r2
 8000d86:	f200 80cb 	bhi.w	8000f20 <__udivmoddi4+0x2b8>
 8000d8a:	4645      	mov	r5, r8
 8000d8c:	1a12      	subs	r2, r2, r0
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d94:	fb07 2210 	mls	r2, r7, r0, r2
 8000d98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d9c:	fb0e fe00 	mul.w	lr, lr, r0
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x14e>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x14c>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f200 80bb 	bhi.w	8000f2a <__udivmoddi4+0x2c2>
 8000db4:	4610      	mov	r0, r2
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dbe:	e79f      	b.n	8000d00 <__udivmoddi4+0x98>
 8000dc0:	f1c1 0720 	rsb	r7, r1, #32
 8000dc4:	408b      	lsls	r3, r1
 8000dc6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dca:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dce:	fa05 f401 	lsl.w	r4, r5, r1
 8000dd2:	fa20 f307 	lsr.w	r3, r0, r7
 8000dd6:	40fd      	lsrs	r5, r7
 8000dd8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ddc:	4323      	orrs	r3, r4
 8000dde:	fbb5 f8f9 	udiv	r8, r5, r9
 8000de2:	fa1f fe8c 	uxth.w	lr, ip
 8000de6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dea:	0c1c      	lsrs	r4, r3, #16
 8000dec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000df0:	fb08 f50e 	mul.w	r5, r8, lr
 8000df4:	42a5      	cmp	r5, r4
 8000df6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e08:	f080 8088 	bcs.w	8000f1c <__udivmoddi4+0x2b4>
 8000e0c:	42a5      	cmp	r5, r4
 8000e0e:	f240 8085 	bls.w	8000f1c <__udivmoddi4+0x2b4>
 8000e12:	f1a8 0802 	sub.w	r8, r8, #2
 8000e16:	4464      	add	r4, ip
 8000e18:	1b64      	subs	r4, r4, r5
 8000e1a:	b29d      	uxth	r5, r3
 8000e1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e20:	fb09 4413 	mls	r4, r9, r3, r4
 8000e24:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e28:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e38:	d26c      	bcs.n	8000f14 <__udivmoddi4+0x2ac>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	d96a      	bls.n	8000f14 <__udivmoddi4+0x2ac>
 8000e3e:	3b02      	subs	r3, #2
 8000e40:	4464      	add	r4, ip
 8000e42:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e46:	fba3 9502 	umull	r9, r5, r3, r2
 8000e4a:	eba4 040e 	sub.w	r4, r4, lr
 8000e4e:	42ac      	cmp	r4, r5
 8000e50:	46c8      	mov	r8, r9
 8000e52:	46ae      	mov	lr, r5
 8000e54:	d356      	bcc.n	8000f04 <__udivmoddi4+0x29c>
 8000e56:	d053      	beq.n	8000f00 <__udivmoddi4+0x298>
 8000e58:	b156      	cbz	r6, 8000e70 <__udivmoddi4+0x208>
 8000e5a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e5e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e62:	fa04 f707 	lsl.w	r7, r4, r7
 8000e66:	40ca      	lsrs	r2, r1
 8000e68:	40cc      	lsrs	r4, r1
 8000e6a:	4317      	orrs	r7, r2
 8000e6c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e70:	4618      	mov	r0, r3
 8000e72:	2100      	movs	r1, #0
 8000e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e78:	f1c3 0120 	rsb	r1, r3, #32
 8000e7c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e80:	fa20 f201 	lsr.w	r2, r0, r1
 8000e84:	fa25 f101 	lsr.w	r1, r5, r1
 8000e88:	409d      	lsls	r5, r3
 8000e8a:	432a      	orrs	r2, r5
 8000e8c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1510 	mls	r5, r7, r0, r1
 8000e9c:	0c11      	lsrs	r1, r2, #16
 8000e9e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ea2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ea6:	428d      	cmp	r5, r1
 8000ea8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x258>
 8000eae:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eb6:	d22f      	bcs.n	8000f18 <__udivmoddi4+0x2b0>
 8000eb8:	428d      	cmp	r5, r1
 8000eba:	d92d      	bls.n	8000f18 <__udivmoddi4+0x2b0>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	1b49      	subs	r1, r1, r5
 8000ec2:	b292      	uxth	r2, r2
 8000ec4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ec8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ecc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ed0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ed4:	4291      	cmp	r1, r2
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x282>
 8000ed8:	eb1c 0202 	adds.w	r2, ip, r2
 8000edc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ee0:	d216      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000ee2:	4291      	cmp	r1, r2
 8000ee4:	d914      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000ee6:	3d02      	subs	r5, #2
 8000ee8:	4462      	add	r2, ip
 8000eea:	1a52      	subs	r2, r2, r1
 8000eec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ef0:	e738      	b.n	8000d64 <__udivmoddi4+0xfc>
 8000ef2:	4631      	mov	r1, r6
 8000ef4:	4630      	mov	r0, r6
 8000ef6:	e708      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000ef8:	4639      	mov	r1, r7
 8000efa:	e6e6      	b.n	8000cca <__udivmoddi4+0x62>
 8000efc:	4610      	mov	r0, r2
 8000efe:	e6fb      	b.n	8000cf8 <__udivmoddi4+0x90>
 8000f00:	4548      	cmp	r0, r9
 8000f02:	d2a9      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f04:	ebb9 0802 	subs.w	r8, r9, r2
 8000f08:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	e7a3      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f10:	4645      	mov	r5, r8
 8000f12:	e7ea      	b.n	8000eea <__udivmoddi4+0x282>
 8000f14:	462b      	mov	r3, r5
 8000f16:	e794      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f18:	4640      	mov	r0, r8
 8000f1a:	e7d1      	b.n	8000ec0 <__udivmoddi4+0x258>
 8000f1c:	46d0      	mov	r8, sl
 8000f1e:	e77b      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f20:	3d02      	subs	r5, #2
 8000f22:	4462      	add	r2, ip
 8000f24:	e732      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f26:	4608      	mov	r0, r1
 8000f28:	e70a      	b.n	8000d40 <__udivmoddi4+0xd8>
 8000f2a:	4464      	add	r4, ip
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	e742      	b.n	8000db6 <__udivmoddi4+0x14e>

08000f30 <__aeabi_idiv0>:
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <readEncoder>:
 */

#include "encoder.h"

uint32_t readEncoder(TIM_HandleTypeDef *enc_timer)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	return enc_timer->Instance->CNT;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <convertEncoderToSpeed>:

float convertEncoderToSpeed(uint32_t enc_prev, uint32_t enc_curr, uint16_t time_ms)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	80fb      	strh	r3, [r7, #6]
	// Conversion en tour par minute
	uint32_t distance = (enc_curr - enc_prev) / RES_ENCODER;
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff faf5 	bl	8000554 <__aeabi_ui2d>
 8000f6a:	a314      	add	r3, pc, #80	; (adr r3, 8000fbc <convertEncoderToSpeed+0x6c>)
 8000f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f70:	f7ff fc94 	bl	800089c <__aeabi_ddiv>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4610      	mov	r0, r2
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f7ff fe3c 	bl	8000bf8 <__aeabi_d2uiz>
 8000f80:	4603      	mov	r3, r0
 8000f82:	617b      	str	r3, [r7, #20]
	return ((float) distance * 60000.0f) /(time_ms);
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	ee07 3a90 	vmov	s15, r3
 8000f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f8e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000fb8 <convertEncoderToSpeed+0x68>
 8000f92:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000fa4:	eef0 7a66 	vmov.f32	s15, s13
}
 8000fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	f3af 8000 	nop.w
 8000fb8:	476a6000 	.word	0x476a6000
 8000fbc:	cccccccd 	.word	0xcccccccd
 8000fc0:	406c0ccc 	.word	0x406c0ccc

08000fc4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	4b36      	ldr	r3, [pc, #216]	; (80010b4 <MX_GPIO_Init+0xf0>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a35      	ldr	r2, [pc, #212]	; (80010b4 <MX_GPIO_Init+0xf0>)
 8000fe0:	f043 0304 	orr.w	r3, r3, #4
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b33      	ldr	r3, [pc, #204]	; (80010b4 <MX_GPIO_Init+0xf0>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0304 	and.w	r3, r3, #4
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ff2:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <MX_GPIO_Init+0xf0>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4a2f      	ldr	r2, [pc, #188]	; (80010b4 <MX_GPIO_Init+0xf0>)
 8000ff8:	f043 0320 	orr.w	r3, r3, #32
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <MX_GPIO_Init+0xf0>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0320 	and.w	r3, r3, #32
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	4b2a      	ldr	r3, [pc, #168]	; (80010b4 <MX_GPIO_Init+0xf0>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a29      	ldr	r2, [pc, #164]	; (80010b4 <MX_GPIO_Init+0xf0>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <MX_GPIO_Init+0xf0>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <MX_GPIO_Init+0xf0>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	4a23      	ldr	r2, [pc, #140]	; (80010b4 <MX_GPIO_Init+0xf0>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <MX_GPIO_Init+0xf0>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2120      	movs	r1, #32
 800103e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001042:	f001 f89b 	bl	800217c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_EN_Pin|GPIO_ENU_Pin|GPIO_ENV_Pin, GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800104c:	481a      	ldr	r0, [pc, #104]	; (80010b8 <MX_GPIO_Init+0xf4>)
 800104e:	f001 f895 	bl	800217c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001052:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001058:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800105c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	4814      	ldr	r0, [pc, #80]	; (80010bc <MX_GPIO_Init+0xf8>)
 800106a:	f000 ff05 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800106e:	2320      	movs	r3, #32
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001072:	2301      	movs	r3, #1
 8001074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001088:	f000 fef6 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_EN_Pin|GPIO_ENU_Pin|GPIO_ENV_Pin;
 800108c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	2301      	movs	r3, #1
 8001094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <MX_GPIO_Init+0xf4>)
 80010a6:	f000 fee7 	bl	8001e78 <HAL_GPIO_Init>

}
 80010aa:	bf00      	nop
 80010ac:	3728      	adds	r7, #40	; 0x28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40021000 	.word	0x40021000
 80010b8:	48000400 	.word	0x48000400
 80010bc:	48000800 	.word	0x48000800

080010c0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 80010c8:	1d39      	adds	r1, r7, #4
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	2201      	movs	r2, #1
 80010d0:	4803      	ldr	r0, [pc, #12]	; (80010e0 <__io_putchar+0x20>)
 80010d2:	f003 f9f9 	bl	80044c8 <HAL_UART_Transmit>
	return chr;
 80010d6:	687b      	ldr	r3, [r7, #4]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000298 	.word	0x20000298

080010e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08c      	sub	sp, #48	; 0x30
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ea:	f000 fd4e 	bl	8001b8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ee:	f000 f8fb 	bl	80012e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f2:	f7ff ff67 	bl	8000fc4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80010f6:	f000 fc7d 	bl	80019f4 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 80010fa:	f000 faef 	bl	80016dc <MX_TIM1_Init>
  MX_TIM2_Init();
 80010fe:	f000 fb8d 	bl	800181c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001102:	486d      	ldr	r0, [pc, #436]	; (80012b8 <main+0x1d4>)
 8001104:	f002 f82a 	bl	800315c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8001108:	486c      	ldr	r0, [pc, #432]	; (80012bc <main+0x1d8>)
 800110a:	f002 f827 	bl	800315c <HAL_TIM_Base_Start>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800110e:	213c      	movs	r1, #60	; 0x3c
 8001110:	486a      	ldr	r0, [pc, #424]	; (80012bc <main+0x1d8>)
 8001112:	f002 fb19 	bl	8003748 <HAL_TIM_Encoder_Start>

  // Pwm motor init
  PWM fwd = {&htim1, TIM_CHANNEL_1, 0.0};
 8001116:	4b68      	ldr	r3, [pc, #416]	; (80012b8 <main+0x1d4>)
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  PWM rev = {&htim1, TIM_CHANNEL_2, 0.0};
 8001124:	4a66      	ldr	r2, [pc, #408]	; (80012c0 <main+0x1dc>)
 8001126:	463b      	mov	r3, r7
 8001128:	ca07      	ldmia	r2, {r0, r1, r2}
 800112a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  INIT_PWM(fwd);
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d104      	bne.n	800113e <main+0x5a>
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2200      	movs	r2, #0
 800113a:	635a      	str	r2, [r3, #52]	; 0x34
 800113c:	e023      	b.n	8001186 <main+0xa2>
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	2b04      	cmp	r3, #4
 8001142:	d104      	bne.n	800114e <main+0x6a>
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	2300      	movs	r3, #0
 800114a:	6393      	str	r3, [r2, #56]	; 0x38
 800114c:	e01b      	b.n	8001186 <main+0xa2>
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	2b08      	cmp	r3, #8
 8001152:	d104      	bne.n	800115e <main+0x7a>
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2300      	movs	r3, #0
 800115a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800115c:	e013      	b.n	8001186 <main+0xa2>
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	2b0c      	cmp	r3, #12
 8001162:	d104      	bne.n	800116e <main+0x8a>
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	2300      	movs	r3, #0
 800116a:	6413      	str	r3, [r2, #64]	; 0x40
 800116c:	e00b      	b.n	8001186 <main+0xa2>
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	2b10      	cmp	r3, #16
 8001172:	d104      	bne.n	800117e <main+0x9a>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2300      	movs	r3, #0
 800117a:	6493      	str	r3, [r2, #72]	; 0x48
 800117c:	e003      	b.n	8001186 <main+0xa2>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	2300      	movs	r3, #0
 8001184:	64d3      	str	r3, [r2, #76]	; 0x4c
  INIT_PWM(rev);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d104      	bne.n	8001196 <main+0xb2>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2200      	movs	r2, #0
 8001192:	635a      	str	r2, [r3, #52]	; 0x34
 8001194:	e023      	b.n	80011de <main+0xfa>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b04      	cmp	r3, #4
 800119a:	d104      	bne.n	80011a6 <main+0xc2>
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	2300      	movs	r3, #0
 80011a2:	6393      	str	r3, [r2, #56]	; 0x38
 80011a4:	e01b      	b.n	80011de <main+0xfa>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b08      	cmp	r3, #8
 80011aa:	d104      	bne.n	80011b6 <main+0xd2>
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	2300      	movs	r3, #0
 80011b2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011b4:	e013      	b.n	80011de <main+0xfa>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0c      	cmp	r3, #12
 80011ba:	d104      	bne.n	80011c6 <main+0xe2>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	2300      	movs	r3, #0
 80011c2:	6413      	str	r3, [r2, #64]	; 0x40
 80011c4:	e00b      	b.n	80011de <main+0xfa>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b10      	cmp	r3, #16
 80011ca:	d104      	bne.n	80011d6 <main+0xf2>
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	2300      	movs	r3, #0
 80011d2:	6493      	str	r3, [r2, #72]	; 0x48
 80011d4:	e003      	b.n	80011de <main+0xfa>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	2300      	movs	r3, #0
 80011dc:	64d3      	str	r3, [r2, #76]	; 0x4c

  // Motor init
  initMotor(&motor_left, &fwd, &rev);
 80011de:	463a      	mov	r2, r7
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	4619      	mov	r1, r3
 80011e6:	4837      	ldr	r0, [pc, #220]	; (80012c4 <main+0x1e0>)
 80011e8:	f000 f8ce 	bl	8001388 <initMotor>

  // Start Pwm
  setPwmDutyCycle(&fwd, 0.2f);
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80012c8 <main+0x1e4>
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 f8df 	bl	80013b8 <setPwmDutyCycle>

  int i = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t prev_encoder_value = readEncoder(&htim2);
 80011fe:	482f      	ldr	r0, [pc, #188]	; (80012bc <main+0x1d8>)
 8001200:	f7ff fe98 	bl	8000f34 <readEncoder>
 8001204:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t current_encoder_value;
  uint32_t start_ms = HAL_GetTick();
 8001206:	f000 fd25 	bl	8001c54 <HAL_GetTick>
 800120a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t time_ms;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  START_PWM(fwd);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f002 f85c 	bl	80032d0 <HAL_TIM_PWM_Start>

  while (1)
  {
	  while(i < 15)
 8001218:	e043      	b.n	80012a2 <main+0x1be>
	  {
		  current_encoder_value = READ_ENCODER(htim2);
 800121a:	4b28      	ldr	r3, [pc, #160]	; (80012bc <main+0x1d8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001220:	623b      	str	r3, [r7, #32]
		  end_ms = HAL_GetTick();
 8001222:	f000 fd17 	bl	8001c54 <HAL_GetTick>
 8001226:	61f8      	str	r0, [r7, #28]

		  time_ms = end_ms - start_ms;
 8001228:	69fa      	ldr	r2, [r7, #28]
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	61bb      	str	r3, [r7, #24]

		  printf("i = %d\n\r", i);
 8001230:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001232:	4826      	ldr	r0, [pc, #152]	; (80012cc <main+0x1e8>)
 8001234:	f004 fc78 	bl	8005b28 <iprintf>
		  printf("%ld\n\r", end_ms);
 8001238:	69f9      	ldr	r1, [r7, #28]
 800123a:	4825      	ldr	r0, [pc, #148]	; (80012d0 <main+0x1ec>)
 800123c:	f004 fc74 	bl	8005b28 <iprintf>
		  printf("Time = %ld\r\n", time_ms);
 8001240:	69b9      	ldr	r1, [r7, #24]
 8001242:	4824      	ldr	r0, [pc, #144]	; (80012d4 <main+0x1f0>)
 8001244:	f004 fc70 	bl	8005b28 <iprintf>
		  printf("Encoder = %ld\r\n", current_encoder_value);
 8001248:	6a39      	ldr	r1, [r7, #32]
 800124a:	4823      	ldr	r0, [pc, #140]	; (80012d8 <main+0x1f4>)
 800124c:	f004 fc6c 	bl	8005b28 <iprintf>
		  printf("Speed = %f\r\n", convertEncoderToSpeed(prev_encoder_value, current_encoder_value, time_ms));
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	b29b      	uxth	r3, r3
 8001254:	461a      	mov	r2, r3
 8001256:	6a39      	ldr	r1, [r7, #32]
 8001258:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800125a:	f7ff fe79 	bl	8000f50 <convertEncoderToSpeed>
 800125e:	ee10 3a10 	vmov	r3, s0
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f998 	bl	8000598 <__aeabi_f2d>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	481b      	ldr	r0, [pc, #108]	; (80012dc <main+0x1f8>)
 800126e:	f004 fc5b 	bl	8005b28 <iprintf>
		  printf("\n\n");
 8001272:	481b      	ldr	r0, [pc, #108]	; (80012e0 <main+0x1fc>)
 8001274:	f004 fcbe 	bl	8005bf4 <puts>
		  prev_encoder_value = current_encoder_value;
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
		  start_ms = end_ms;
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	627b      	str	r3, [r7, #36]	; 0x24

		  HAL_Delay(1000);
 8001280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001284:	f000 fcf2 	bl	8001c6c <HAL_Delay>
		  i++;
 8001288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128a:	3301      	adds	r3, #1
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c

		  if(i == 7)
 800128e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001290:	2b07      	cmp	r3, #7
 8001292:	d106      	bne.n	80012a2 <main+0x1be>
		  {
			  setPwmDutyCycle(&fwd, 0.3f);
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80012e4 <main+0x200>
 800129c:	4618      	mov	r0, r3
 800129e:	f000 f88b 	bl	80013b8 <setPwmDutyCycle>
	  while(i < 15)
 80012a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a4:	2b0e      	cmp	r3, #14
 80012a6:	ddb8      	ble.n	800121a <main+0x136>
		  }
	  }
	  STOP_PWM(fwd);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f002 f90e 	bl	80034d0 <HAL_TIM_PWM_Stop>
	  while(i < 15)
 80012b4:	e7f5      	b.n	80012a2 <main+0x1be>
 80012b6:	bf00      	nop
 80012b8:	20000200 	.word	0x20000200
 80012bc:	2000024c 	.word	0x2000024c
 80012c0:	08007b88 	.word	0x08007b88
 80012c4:	200001f0 	.word	0x200001f0
 80012c8:	3e4ccccd 	.word	0x3e4ccccd
 80012cc:	08007b40 	.word	0x08007b40
 80012d0:	08007b4c 	.word	0x08007b4c
 80012d4:	08007b54 	.word	0x08007b54
 80012d8:	08007b64 	.word	0x08007b64
 80012dc:	08007b74 	.word	0x08007b74
 80012e0:	08007b84 	.word	0x08007b84
 80012e4:	3e99999a 	.word	0x3e99999a

080012e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b094      	sub	sp, #80	; 0x50
 80012ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ee:	f107 0318 	add.w	r3, r7, #24
 80012f2:	2238      	movs	r2, #56	; 0x38
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f004 fd5c 	bl	8005db4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800130a:	2000      	movs	r0, #0
 800130c:	f000 ff4e 	bl	80021ac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001310:	2302      	movs	r3, #2
 8001312:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800131a:	2340      	movs	r3, #64	; 0x40
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800131e:	2302      	movs	r3, #2
 8001320:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001322:	2302      	movs	r3, #2
 8001324:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001326:	2304      	movs	r3, #4
 8001328:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800132a:	2355      	movs	r3, #85	; 0x55
 800132c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800132e:	2302      	movs	r3, #2
 8001330:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001332:	2302      	movs	r3, #2
 8001334:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001336:	2302      	movs	r3, #2
 8001338:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133a:	f107 0318 	add.w	r3, r7, #24
 800133e:	4618      	mov	r0, r3
 8001340:	f000 ffe8 	bl	8002314 <HAL_RCC_OscConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800134a:	f000 f818 	bl	800137e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134e:	230f      	movs	r3, #15
 8001350:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001352:	2303      	movs	r3, #3
 8001354:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2104      	movs	r1, #4
 8001366:	4618      	mov	r0, r3
 8001368:	f001 faec 	bl	8002944 <HAL_RCC_ClockConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001372:	f000 f804 	bl	800137e <Error_Handler>
  }
}
 8001376:	bf00      	nop
 8001378:	3750      	adds	r7, #80	; 0x50
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001382:	b672      	cpsid	i
}
 8001384:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001386:	e7fe      	b.n	8001386 <Error_Handler+0x8>

08001388 <initMotor>:

h_motor_t motor_left;
h_motor_t motor_right;

void initMotor(h_motor_t *motor, PWM *fwd, PWM *rev)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
	motor->speed = 0;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
	motor->state = STOP;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2202      	movs	r2, #2
 800139e:	705a      	strb	r2, [r3, #1]
	motor->fwd = fwd;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	605a      	str	r2, [r3, #4]
	motor->rev = rev;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	609a      	str	r2, [r3, #8]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <setPwmDutyCycle>:
 */

#include "pwm.h"

void setPwmDutyCycle(PWM *pwm, float duty_cycle)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	ed87 0a00 	vstr	s0, [r7]
    if (duty_cycle < 0.0f)
 80013c4:	edd7 7a00 	vldr	s15, [r7]
 80013c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d0:	d503      	bpl.n	80013da <setPwmDutyCycle+0x22>
    {
        duty_cycle = 0.0f;
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	e00b      	b.n	80013f2 <setPwmDutyCycle+0x3a>
    }
    else if (duty_cycle > 1.0f)
 80013da:	edd7 7a00 	vldr	s15, [r7]
 80013de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	dd02      	ble.n	80013f2 <setPwmDutyCycle+0x3a>
    {
        duty_cycle = 1.0f;
 80013ec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80013f0:	603b      	str	r3, [r7, #0]
    }

    uint16_t period = pwm->timer->Init.Period;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	81fb      	strh	r3, [r7, #14]
    uint16_t ccr_value = (uint16_t)(duty_cycle * period);
 80013fa:	89fb      	ldrh	r3, [r7, #14]
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001404:	edd7 7a00 	vldr	s15, [r7]
 8001408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800140c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001410:	ee17 3a90 	vmov	r3, s15
 8001414:	81bb      	strh	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, ccr_value);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d105      	bne.n	800142a <setPwmDutyCycle+0x72>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	89ba      	ldrh	r2, [r7, #12]
 8001426:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001428:	e02c      	b.n	8001484 <setPwmDutyCycle+0xcc>
    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, ccr_value);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b04      	cmp	r3, #4
 8001430:	d105      	bne.n	800143e <setPwmDutyCycle+0x86>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	89bb      	ldrh	r3, [r7, #12]
 800143a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800143c:	e022      	b.n	8001484 <setPwmDutyCycle+0xcc>
    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, ccr_value);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b08      	cmp	r3, #8
 8001444:	d105      	bne.n	8001452 <setPwmDutyCycle+0x9a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	89bb      	ldrh	r3, [r7, #12]
 800144e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001450:	e018      	b.n	8001484 <setPwmDutyCycle+0xcc>
    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, ccr_value);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b0c      	cmp	r3, #12
 8001458:	d105      	bne.n	8001466 <setPwmDutyCycle+0xae>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	89bb      	ldrh	r3, [r7, #12]
 8001462:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001464:	e00e      	b.n	8001484 <setPwmDutyCycle+0xcc>
    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, ccr_value);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b10      	cmp	r3, #16
 800146c:	d105      	bne.n	800147a <setPwmDutyCycle+0xc2>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	89bb      	ldrh	r3, [r7, #12]
 8001476:	6493      	str	r3, [r2, #72]	; 0x48
}
 8001478:	e004      	b.n	8001484 <setPwmDutyCycle+0xcc>
    __HAL_TIM_SET_COMPARE(pwm->timer, pwm->channel, ccr_value);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	89bb      	ldrh	r3, [r7, #12]
 8001482:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <HAL_MspInit+0x44>)
 8001498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149a:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <HAL_MspInit+0x44>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6613      	str	r3, [r2, #96]	; 0x60
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <HAL_MspInit+0x44>)
 80014a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_MspInit+0x44>)
 80014b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b2:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <HAL_MspInit+0x44>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	6593      	str	r3, [r2, #88]	; 0x58
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_MspInit+0x44>)
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014c6:	f000 ff15 	bl	80022f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <NMI_Handler+0x4>

080014de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <HardFault_Handler+0x4>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <MemManage_Handler+0x4>

080014ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001524:	f000 fb84 	bl	8001c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}

0800152c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return 1;
 8001530:	2301      	movs	r3, #1
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <_kill>:

int _kill(int pid, int sig)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001546:	f004 fc87 	bl	8005e58 <__errno>
 800154a:	4603      	mov	r3, r0
 800154c:	2216      	movs	r2, #22
 800154e:	601a      	str	r2, [r3, #0]
  return -1;
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_exit>:

void _exit (int status)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001564:	f04f 31ff 	mov.w	r1, #4294967295
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ffe7 	bl	800153c <_kill>
  while (1) {}    /* Make sure we hang here */
 800156e:	e7fe      	b.n	800156e <_exit+0x12>

08001570 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	e00a      	b.n	8001598 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001582:	f3af 8000 	nop.w
 8001586:	4601      	mov	r1, r0
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	60ba      	str	r2, [r7, #8]
 800158e:	b2ca      	uxtb	r2, r1
 8001590:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	3301      	adds	r3, #1
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	429a      	cmp	r2, r3
 800159e:	dbf0      	blt.n	8001582 <_read+0x12>
  }

  return len;
 80015a0:	687b      	ldr	r3, [r7, #4]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	e009      	b.n	80015d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	60ba      	str	r2, [r7, #8]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fd7b 	bl	80010c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	3301      	adds	r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	dbf1      	blt.n	80015bc <_write+0x12>
  }
  return len;
 80015d8:	687b      	ldr	r3, [r7, #4]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <_close>:

int _close(int file)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800160a:	605a      	str	r2, [r3, #4]
  return 0;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <_isatty>:

int _isatty(int file)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001622:	2301      	movs	r3, #1
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001654:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <_sbrk+0x5c>)
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <_sbrk+0x60>)
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <_sbrk+0x64>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d102      	bne.n	800166e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <_sbrk+0x64>)
 800166a:	4a12      	ldr	r2, [pc, #72]	; (80016b4 <_sbrk+0x68>)
 800166c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <_sbrk+0x64>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	429a      	cmp	r2, r3
 800167a:	d207      	bcs.n	800168c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800167c:	f004 fbec 	bl	8005e58 <__errno>
 8001680:	4603      	mov	r3, r0
 8001682:	220c      	movs	r2, #12
 8001684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001686:	f04f 33ff 	mov.w	r3, #4294967295
 800168a:	e009      	b.n	80016a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001692:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <_sbrk+0x64>)
 800169c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800169e:	68fb      	ldr	r3, [r7, #12]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20008000 	.word	0x20008000
 80016ac:	00000400 	.word	0x00000400
 80016b0:	200001fc 	.word	0x200001fc
 80016b4:	20000478 	.word	0x20000478

080016b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <SystemInit+0x20>)
 80016be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c2:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <SystemInit+0x20>)
 80016c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b098      	sub	sp, #96	; 0x60
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	611a      	str	r2, [r3, #16]
 80016fe:	615a      	str	r2, [r3, #20]
 8001700:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	2234      	movs	r2, #52	; 0x34
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f004 fb53 	bl	8005db4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800170e:	4b41      	ldr	r3, [pc, #260]	; (8001814 <MX_TIM1_Init+0x138>)
 8001710:	4a41      	ldr	r2, [pc, #260]	; (8001818 <MX_TIM1_Init+0x13c>)
 8001712:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001714:	4b3f      	ldr	r3, [pc, #252]	; (8001814 <MX_TIM1_Init+0x138>)
 8001716:	2200      	movs	r2, #0
 8001718:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171a:	4b3e      	ldr	r3, [pc, #248]	; (8001814 <MX_TIM1_Init+0x138>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6799;
 8001720:	4b3c      	ldr	r3, [pc, #240]	; (8001814 <MX_TIM1_Init+0x138>)
 8001722:	f641 228f 	movw	r2, #6799	; 0x1a8f
 8001726:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001728:	4b3a      	ldr	r3, [pc, #232]	; (8001814 <MX_TIM1_Init+0x138>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800172e:	4b39      	ldr	r3, [pc, #228]	; (8001814 <MX_TIM1_Init+0x138>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001734:	4b37      	ldr	r3, [pc, #220]	; (8001814 <MX_TIM1_Init+0x138>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800173a:	4836      	ldr	r0, [pc, #216]	; (8001814 <MX_TIM1_Init+0x138>)
 800173c:	f001 fd70 	bl	8003220 <HAL_TIM_PWM_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001746:	f7ff fe1a 	bl	800137e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174a:	2300      	movs	r3, #0
 800174c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001756:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800175a:	4619      	mov	r1, r3
 800175c:	482d      	ldr	r0, [pc, #180]	; (8001814 <MX_TIM1_Init+0x138>)
 800175e:	f002 fd41 	bl	80041e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001768:	f7ff fe09 	bl	800137e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800176c:	2360      	movs	r3, #96	; 0x60
 800176e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001774:	2300      	movs	r3, #0
 8001776:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001778:	2300      	movs	r3, #0
 800177a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001780:	2300      	movs	r3, #0
 8001782:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001788:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800178c:	2200      	movs	r2, #0
 800178e:	4619      	mov	r1, r3
 8001790:	4820      	ldr	r0, [pc, #128]	; (8001814 <MX_TIM1_Init+0x138>)
 8001792:	f002 f867 	bl	8003864 <HAL_TIM_PWM_ConfigChannel>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800179c:	f7ff fdef 	bl	800137e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017a4:	2204      	movs	r2, #4
 80017a6:	4619      	mov	r1, r3
 80017a8:	481a      	ldr	r0, [pc, #104]	; (8001814 <MX_TIM1_Init+0x138>)
 80017aa:	f002 f85b 	bl	8003864 <HAL_TIM_PWM_ConfigChannel>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80017b4:	f7ff fde3 	bl	800137e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80017e8:	2300      	movs	r3, #0
 80017ea:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	4619      	mov	r1, r3
 80017f4:	4807      	ldr	r0, [pc, #28]	; (8001814 <MX_TIM1_Init+0x138>)
 80017f6:	f002 fd77 	bl	80042e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001800:	f7ff fdbd 	bl	800137e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001804:	4803      	ldr	r0, [pc, #12]	; (8001814 <MX_TIM1_Init+0x138>)
 8001806:	f000 f8bd 	bl	8001984 <HAL_TIM_MspPostInit>

}
 800180a:	bf00      	nop
 800180c:	3760      	adds	r7, #96	; 0x60
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000200 	.word	0x20000200
 8001818:	40012c00 	.word	0x40012c00

0800181c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	; 0x30
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001822:	f107 030c 	add.w	r3, r7, #12
 8001826:	2224      	movs	r2, #36	; 0x24
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f004 fac2 	bl	8005db4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001830:	463b      	mov	r3, r7
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800183a:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <MX_TIM2_Init+0xa4>)
 800183c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001840:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8001842:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <MX_TIM2_Init+0xa4>)
 8001844:	22a9      	movs	r2, #169	; 0xa9
 8001846:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001848:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <MX_TIM2_Init+0xa4>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <MX_TIM2_Init+0xa4>)
 8001850:	f04f 32ff 	mov.w	r2, #4294967295
 8001854:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_TIM2_Init+0xa4>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <MX_TIM2_Init+0xa4>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001862:	2303      	movs	r3, #3
 8001864:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800186a:	2301      	movs	r3, #1
 800186c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800186e:	2300      	movs	r3, #0
 8001870:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800187a:	2301      	movs	r3, #1
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800187e:	2300      	movs	r3, #0
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	4619      	mov	r1, r3
 800188c:	480c      	ldr	r0, [pc, #48]	; (80018c0 <MX_TIM2_Init+0xa4>)
 800188e:	f001 feb5 	bl	80035fc <HAL_TIM_Encoder_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001898:	f7ff fd71 	bl	800137e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189c:	2300      	movs	r3, #0
 800189e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018a4:	463b      	mov	r3, r7
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_TIM2_Init+0xa4>)
 80018aa:	f002 fc9b 	bl	80041e4 <HAL_TIMEx_MasterConfigSynchronization>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80018b4:	f7ff fd63 	bl	800137e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	3730      	adds	r7, #48	; 0x30
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	2000024c 	.word	0x2000024c

080018c4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <HAL_TIM_PWM_MspInit+0x38>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d10b      	bne.n	80018ee <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018d6:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <HAL_TIM_PWM_MspInit+0x3c>)
 80018d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018da:	4a09      	ldr	r2, [pc, #36]	; (8001900 <HAL_TIM_PWM_MspInit+0x3c>)
 80018dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018e0:	6613      	str	r3, [r2, #96]	; 0x60
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <HAL_TIM_PWM_MspInit+0x3c>)
 80018e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80018ee:	bf00      	nop
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40012c00 	.word	0x40012c00
 8001900:	40021000 	.word	0x40021000

08001904 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	; 0x28
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001924:	d128      	bne.n	8001978 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001926:	4b16      	ldr	r3, [pc, #88]	; (8001980 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	4a15      	ldr	r2, [pc, #84]	; (8001980 <HAL_TIM_Encoder_MspInit+0x7c>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6593      	str	r3, [r2, #88]	; 0x58
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	4a0f      	ldr	r2, [pc, #60]	; (8001980 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <HAL_TIM_Encoder_MspInit+0x7c>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001956:	2303      	movs	r3, #3
 8001958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001966:	2301      	movs	r3, #1
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001974:	f000 fa80 	bl	8001e78 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001978:	bf00      	nop
 800197a:	3728      	adds	r7, #40	; 0x28
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40021000 	.word	0x40021000

08001984 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a12      	ldr	r2, [pc, #72]	; (80019ec <HAL_TIM_MspPostInit+0x68>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d11d      	bne.n	80019e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_TIM_MspPostInit+0x6c>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	4a11      	ldr	r2, [pc, #68]	; (80019f0 <HAL_TIM_MspPostInit+0x6c>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <HAL_TIM_MspPostInit+0x6c>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80019d0:	2306      	movs	r3, #6
 80019d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	f107 030c 	add.w	r3, r7, #12
 80019d8:	4619      	mov	r1, r3
 80019da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019de:	f000 fa4b 	bl	8001e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019e2:	bf00      	nop
 80019e4:	3720      	adds	r7, #32
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40012c00 	.word	0x40012c00
 80019f0:	40021000 	.word	0x40021000

080019f4 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80019f8:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <MX_LPUART1_UART_Init+0x8c>)
 80019fa:	4a22      	ldr	r2, [pc, #136]	; (8001a84 <MX_LPUART1_UART_Init+0x90>)
 80019fc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80019fe:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <MX_LPUART1_UART_Init+0x8c>)
 8001a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a04:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a06:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <MX_LPUART1_UART_Init+0x8c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001a0c:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <MX_LPUART1_UART_Init+0x8c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <MX_LPUART1_UART_Init+0x8c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <MX_LPUART1_UART_Init+0x8c>)
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <MX_LPUART1_UART_Init+0x8c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a24:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <MX_LPUART1_UART_Init+0x8c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <MX_LPUART1_UART_Init+0x8c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a30:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <MX_LPUART1_UART_Init+0x8c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001a36:	4812      	ldr	r0, [pc, #72]	; (8001a80 <MX_LPUART1_UART_Init+0x8c>)
 8001a38:	f002 fcf6 	bl	8004428 <HAL_UART_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a42:	f7ff fc9c 	bl	800137e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a46:	2100      	movs	r1, #0
 8001a48:	480d      	ldr	r0, [pc, #52]	; (8001a80 <MX_LPUART1_UART_Init+0x8c>)
 8001a4a:	f003 fa8d 	bl	8004f68 <HAL_UARTEx_SetTxFifoThreshold>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001a54:	f7ff fc93 	bl	800137e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4809      	ldr	r0, [pc, #36]	; (8001a80 <MX_LPUART1_UART_Init+0x8c>)
 8001a5c:	f003 fac2 	bl	8004fe4 <HAL_UARTEx_SetRxFifoThreshold>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001a66:	f7ff fc8a 	bl	800137e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_LPUART1_UART_Init+0x8c>)
 8001a6c:	f003 fa43 	bl	8004ef6 <HAL_UARTEx_DisableFifoMode>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001a76:	f7ff fc82 	bl	800137e <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000298 	.word	0x20000298
 8001a84:	40008000 	.word	0x40008000

08001a88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b09a      	sub	sp, #104	; 0x68
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	2244      	movs	r2, #68	; 0x44
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f004 f983 	bl	8005db4 <memset>
  if(uartHandle->Instance==LPUART1)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a1f      	ldr	r2, [pc, #124]	; (8001b30 <HAL_UART_MspInit+0xa8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d136      	bne.n	8001b26 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001ab8:	2320      	movs	r3, #32
 8001aba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f001 f959 	bl	8002d7c <HAL_RCCEx_PeriphCLKConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ad0:	f7ff fc55 	bl	800137e <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <HAL_UART_MspInit+0xac>)
 8001ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad8:	4a16      	ldr	r2, [pc, #88]	; (8001b34 <HAL_UART_MspInit+0xac>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <HAL_UART_MspInit+0xac>)
 8001ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_UART_MspInit+0xac>)
 8001aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af0:	4a10      	ldr	r2, [pc, #64]	; (8001b34 <HAL_UART_MspInit+0xac>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af8:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HAL_UART_MspInit+0xac>)
 8001afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001b04:	230c      	movs	r3, #12
 8001b06:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001b14:	230c      	movs	r3, #12
 8001b16:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b22:	f000 f9a9 	bl	8001e78 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001b26:	bf00      	nop
 8001b28:	3768      	adds	r7, #104	; 0x68
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40008000 	.word	0x40008000
 8001b34:	40021000 	.word	0x40021000

08001b38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b38:	480d      	ldr	r0, [pc, #52]	; (8001b70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b3c:	480d      	ldr	r0, [pc, #52]	; (8001b74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b3e:	490e      	ldr	r1, [pc, #56]	; (8001b78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b40:	4a0e      	ldr	r2, [pc, #56]	; (8001b7c <LoopForever+0xe>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b44:	e002      	b.n	8001b4c <LoopCopyDataInit>

08001b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4a:	3304      	adds	r3, #4

08001b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b50:	d3f9      	bcc.n	8001b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b52:	4a0b      	ldr	r2, [pc, #44]	; (8001b80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b54:	4c0b      	ldr	r4, [pc, #44]	; (8001b84 <LoopForever+0x16>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b58:	e001      	b.n	8001b5e <LoopFillZerobss>

08001b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b5c:	3204      	adds	r2, #4

08001b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b60:	d3fb      	bcc.n	8001b5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b62:	f7ff fda9 	bl	80016b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b66:	f004 f97d 	bl	8005e64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b6a:	f7ff fabb 	bl	80010e4 <main>

08001b6e <LoopForever>:

LoopForever:
    b LoopForever
 8001b6e:	e7fe      	b.n	8001b6e <LoopForever>
  ldr   r0, =_estack
 8001b70:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b78:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b7c:	08007f54 	.word	0x08007f54
  ldr r2, =_sbss
 8001b80:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b84:	20000478 	.word	0x20000478

08001b88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b88:	e7fe      	b.n	8001b88 <ADC1_2_IRQHandler>

08001b8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b94:	2003      	movs	r0, #3
 8001b96:	f000 f93d 	bl	8001e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f000 f80e 	bl	8001bbc <HAL_InitTick>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	71fb      	strb	r3, [r7, #7]
 8001baa:	e001      	b.n	8001bb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bac:	f7ff fc70 	bl	8001490 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bb0:	79fb      	ldrb	r3, [r7, #7]

}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001bc8:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <HAL_InitTick+0x68>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d022      	beq.n	8001c16 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001bd0:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <HAL_InitTick+0x6c>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <HAL_InitTick+0x68>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 f93a 	bl	8001e5e <HAL_SYSTICK_Config>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10f      	bne.n	8001c10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b0f      	cmp	r3, #15
 8001bf4:	d809      	bhi.n	8001c0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfe:	f000 f914 	bl	8001e2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c02:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <HAL_InitTick+0x70>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	e007      	b.n	8001c1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	73fb      	strb	r3, [r7, #15]
 8001c0e:	e004      	b.n	8001c1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
 8001c14:	e001      	b.n	8001c1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000008 	.word	0x20000008
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	20000004 	.word	0x20000004

08001c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_IncTick+0x1c>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_IncTick+0x20>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4a03      	ldr	r2, [pc, #12]	; (8001c4c <HAL_IncTick+0x1c>)
 8001c40:	6013      	str	r3, [r2, #0]
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	20000328 	.word	0x20000328
 8001c50:	20000008 	.word	0x20000008

08001c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return uwTick;
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <HAL_GetTick+0x14>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000328 	.word	0x20000328

08001c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c74:	f7ff ffee 	bl	8001c54 <HAL_GetTick>
 8001c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c84:	d004      	beq.n	8001c90 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_Delay+0x40>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c90:	bf00      	nop
 8001c92:	f7ff ffdf 	bl	8001c54 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d8f7      	bhi.n	8001c92 <HAL_Delay+0x26>
  {
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	bf00      	nop
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000008 	.word	0x20000008

08001cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce2:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	60d3      	str	r3, [r2, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cfc:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <__NVIC_GetPriorityGrouping+0x18>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	f003 0307 	and.w	r3, r3, #7
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	6039      	str	r1, [r7, #0]
 8001d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	db0a      	blt.n	8001d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	490c      	ldr	r1, [pc, #48]	; (8001d60 <__NVIC_SetPriority+0x4c>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	0112      	lsls	r2, r2, #4
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	440b      	add	r3, r1
 8001d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d3c:	e00a      	b.n	8001d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4908      	ldr	r1, [pc, #32]	; (8001d64 <__NVIC_SetPriority+0x50>)
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	3b04      	subs	r3, #4
 8001d4c:	0112      	lsls	r2, r2, #4
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	440b      	add	r3, r1
 8001d52:	761a      	strb	r2, [r3, #24]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	; 0x24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f1c3 0307 	rsb	r3, r3, #7
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	bf28      	it	cs
 8001d86:	2304      	movcs	r3, #4
 8001d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	2b06      	cmp	r3, #6
 8001d90:	d902      	bls.n	8001d98 <NVIC_EncodePriority+0x30>
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3b03      	subs	r3, #3
 8001d96:	e000      	b.n	8001d9a <NVIC_EncodePriority+0x32>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43da      	mvns	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	401a      	ands	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db0:	f04f 31ff 	mov.w	r1, #4294967295
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	43d9      	mvns	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	4313      	orrs	r3, r2
         );
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3724      	adds	r7, #36	; 0x24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de0:	d301      	bcc.n	8001de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00f      	b.n	8001e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <SysTick_Config+0x40>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dee:	210f      	movs	r1, #15
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f7ff ff8e 	bl	8001d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <SysTick_Config+0x40>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfe:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <SysTick_Config+0x40>)
 8001e00:	2207      	movs	r2, #7
 8001e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	e000e010 	.word	0xe000e010

08001e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ff47 	bl	8001cb0 <__NVIC_SetPriorityGrouping>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b086      	sub	sp, #24
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e38:	f7ff ff5e 	bl	8001cf8 <__NVIC_GetPriorityGrouping>
 8001e3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	6978      	ldr	r0, [r7, #20]
 8001e44:	f7ff ff90 	bl	8001d68 <NVIC_EncodePriority>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff5f 	bl	8001d14 <__NVIC_SetPriority>
}
 8001e56:	bf00      	nop
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff ffb2 	bl	8001dd0 <SysTick_Config>
 8001e6c:	4603      	mov	r3, r0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e86:	e15a      	b.n	800213e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 814c 	beq.w	8002138 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d005      	beq.n	8001eb8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d130      	bne.n	8001f1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eee:	2201      	movs	r2, #1
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	f003 0201 	and.w	r2, r3, #1
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d017      	beq.n	8001f56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	2203      	movs	r2, #3
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d123      	bne.n	8001faa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	08da      	lsrs	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3208      	adds	r2, #8
 8001f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	220f      	movs	r2, #15
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	6939      	ldr	r1, [r7, #16]
 8001fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 0203 	and.w	r2, r3, #3
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80a6 	beq.w	8002138 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fec:	4b5b      	ldr	r3, [pc, #364]	; (800215c <HAL_GPIO_Init+0x2e4>)
 8001fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff0:	4a5a      	ldr	r2, [pc, #360]	; (800215c <HAL_GPIO_Init+0x2e4>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6613      	str	r3, [r2, #96]	; 0x60
 8001ff8:	4b58      	ldr	r3, [pc, #352]	; (800215c <HAL_GPIO_Init+0x2e4>)
 8001ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002004:	4a56      	ldr	r2, [pc, #344]	; (8002160 <HAL_GPIO_Init+0x2e8>)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	3302      	adds	r3, #2
 800200c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	220f      	movs	r2, #15
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800202e:	d01f      	beq.n	8002070 <HAL_GPIO_Init+0x1f8>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a4c      	ldr	r2, [pc, #304]	; (8002164 <HAL_GPIO_Init+0x2ec>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d019      	beq.n	800206c <HAL_GPIO_Init+0x1f4>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a4b      	ldr	r2, [pc, #300]	; (8002168 <HAL_GPIO_Init+0x2f0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d013      	beq.n	8002068 <HAL_GPIO_Init+0x1f0>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a4a      	ldr	r2, [pc, #296]	; (800216c <HAL_GPIO_Init+0x2f4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d00d      	beq.n	8002064 <HAL_GPIO_Init+0x1ec>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a49      	ldr	r2, [pc, #292]	; (8002170 <HAL_GPIO_Init+0x2f8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d007      	beq.n	8002060 <HAL_GPIO_Init+0x1e8>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a48      	ldr	r2, [pc, #288]	; (8002174 <HAL_GPIO_Init+0x2fc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d101      	bne.n	800205c <HAL_GPIO_Init+0x1e4>
 8002058:	2305      	movs	r3, #5
 800205a:	e00a      	b.n	8002072 <HAL_GPIO_Init+0x1fa>
 800205c:	2306      	movs	r3, #6
 800205e:	e008      	b.n	8002072 <HAL_GPIO_Init+0x1fa>
 8002060:	2304      	movs	r3, #4
 8002062:	e006      	b.n	8002072 <HAL_GPIO_Init+0x1fa>
 8002064:	2303      	movs	r3, #3
 8002066:	e004      	b.n	8002072 <HAL_GPIO_Init+0x1fa>
 8002068:	2302      	movs	r3, #2
 800206a:	e002      	b.n	8002072 <HAL_GPIO_Init+0x1fa>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <HAL_GPIO_Init+0x1fa>
 8002070:	2300      	movs	r3, #0
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	f002 0203 	and.w	r2, r2, #3
 8002078:	0092      	lsls	r2, r2, #2
 800207a:	4093      	lsls	r3, r2
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002082:	4937      	ldr	r1, [pc, #220]	; (8002160 <HAL_GPIO_Init+0x2e8>)
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	3302      	adds	r3, #2
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002090:	4b39      	ldr	r3, [pc, #228]	; (8002178 <HAL_GPIO_Init+0x300>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	43db      	mvns	r3, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4013      	ands	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020b4:	4a30      	ldr	r2, [pc, #192]	; (8002178 <HAL_GPIO_Init+0x300>)
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020ba:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <HAL_GPIO_Init+0x300>)
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	4013      	ands	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020de:	4a26      	ldr	r2, [pc, #152]	; (8002178 <HAL_GPIO_Init+0x300>)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80020e4:	4b24      	ldr	r3, [pc, #144]	; (8002178 <HAL_GPIO_Init+0x300>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002108:	4a1b      	ldr	r2, [pc, #108]	; (8002178 <HAL_GPIO_Init+0x300>)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800210e:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <HAL_GPIO_Init+0x300>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	43db      	mvns	r3, r3
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002132:	4a11      	ldr	r2, [pc, #68]	; (8002178 <HAL_GPIO_Init+0x300>)
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	3301      	adds	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	f47f ae9d 	bne.w	8001e88 <HAL_GPIO_Init+0x10>
  }
}
 800214e:	bf00      	nop
 8002150:	bf00      	nop
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	40021000 	.word	0x40021000
 8002160:	40010000 	.word	0x40010000
 8002164:	48000400 	.word	0x48000400
 8002168:	48000800 	.word	0x48000800
 800216c:	48000c00 	.word	0x48000c00
 8002170:	48001000 	.word	0x48001000
 8002174:	48001400 	.word	0x48001400
 8002178:	40010400 	.word	0x40010400

0800217c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]
 8002188:	4613      	mov	r3, r2
 800218a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800218c:	787b      	ldrb	r3, [r7, #1]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002192:	887a      	ldrh	r2, [r7, #2]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002198:	e002      	b.n	80021a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d141      	bne.n	800223e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021ba:	4b4b      	ldr	r3, [pc, #300]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c6:	d131      	bne.n	800222c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021c8:	4b47      	ldr	r3, [pc, #284]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021ce:	4a46      	ldr	r2, [pc, #280]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021d8:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021e0:	4a41      	ldr	r2, [pc, #260]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021e8:	4b40      	ldr	r3, [pc, #256]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2232      	movs	r2, #50	; 0x32
 80021ee:	fb02 f303 	mul.w	r3, r2, r3
 80021f2:	4a3f      	ldr	r2, [pc, #252]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021f4:	fba2 2303 	umull	r2, r3, r2, r3
 80021f8:	0c9b      	lsrs	r3, r3, #18
 80021fa:	3301      	adds	r3, #1
 80021fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021fe:	e002      	b.n	8002206 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3b01      	subs	r3, #1
 8002204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002206:	4b38      	ldr	r3, [pc, #224]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002212:	d102      	bne.n	800221a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f2      	bne.n	8002200 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800221a:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002226:	d158      	bne.n	80022da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e057      	b.n	80022dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800222c:	4b2e      	ldr	r3, [pc, #184]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800222e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002232:	4a2d      	ldr	r2, [pc, #180]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002238:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800223c:	e04d      	b.n	80022da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002244:	d141      	bne.n	80022ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002246:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800224e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002252:	d131      	bne.n	80022b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002254:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800225a:	4a23      	ldr	r2, [pc, #140]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002260:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002264:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800226c:	4a1e      	ldr	r2, [pc, #120]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002272:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002274:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2232      	movs	r2, #50	; 0x32
 800227a:	fb02 f303 	mul.w	r3, r2, r3
 800227e:	4a1c      	ldr	r2, [pc, #112]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002280:	fba2 2303 	umull	r2, r3, r2, r3
 8002284:	0c9b      	lsrs	r3, r3, #18
 8002286:	3301      	adds	r3, #1
 8002288:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800228a:	e002      	b.n	8002292 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3b01      	subs	r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229e:	d102      	bne.n	80022a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f2      	bne.n	800228c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b2:	d112      	bne.n	80022da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e011      	b.n	80022dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022be:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022c8:	e007      	b.n	80022da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022d2:	4a05      	ldr	r2, [pc, #20]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	40007000 	.word	0x40007000
 80022ec:	20000000 	.word	0x20000000
 80022f0:	431bde83 	.word	0x431bde83

080022f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	4a04      	ldr	r2, [pc, #16]	; (8002310 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80022fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002302:	6093      	str	r3, [r2, #8]
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40007000 	.word	0x40007000

08002314 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e306      	b.n	8002934 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d075      	beq.n	800241e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002332:	4b97      	ldr	r3, [pc, #604]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800233c:	4b94      	ldr	r3, [pc, #592]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	2b0c      	cmp	r3, #12
 800234a:	d102      	bne.n	8002352 <HAL_RCC_OscConfig+0x3e>
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2b03      	cmp	r3, #3
 8002350:	d002      	beq.n	8002358 <HAL_RCC_OscConfig+0x44>
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	2b08      	cmp	r3, #8
 8002356:	d10b      	bne.n	8002370 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002358:	4b8d      	ldr	r3, [pc, #564]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d05b      	beq.n	800241c <HAL_RCC_OscConfig+0x108>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d157      	bne.n	800241c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e2e1      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002378:	d106      	bne.n	8002388 <HAL_RCC_OscConfig+0x74>
 800237a:	4b85      	ldr	r3, [pc, #532]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a84      	ldr	r2, [pc, #528]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e01d      	b.n	80023c4 <HAL_RCC_OscConfig+0xb0>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002390:	d10c      	bne.n	80023ac <HAL_RCC_OscConfig+0x98>
 8002392:	4b7f      	ldr	r3, [pc, #508]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a7e      	ldr	r2, [pc, #504]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	4b7c      	ldr	r3, [pc, #496]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a7b      	ldr	r2, [pc, #492]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e00b      	b.n	80023c4 <HAL_RCC_OscConfig+0xb0>
 80023ac:	4b78      	ldr	r3, [pc, #480]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a77      	ldr	r2, [pc, #476]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80023b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	4b75      	ldr	r3, [pc, #468]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a74      	ldr	r2, [pc, #464]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80023be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d013      	beq.n	80023f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7ff fc42 	bl	8001c54 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d4:	f7ff fc3e 	bl	8001c54 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b64      	cmp	r3, #100	; 0x64
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e2a6      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023e6:	4b6a      	ldr	r3, [pc, #424]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCC_OscConfig+0xc0>
 80023f2:	e014      	b.n	800241e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7ff fc2e 	bl	8001c54 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023fc:	f7ff fc2a 	bl	8001c54 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	; 0x64
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e292      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800240e:	4b60      	ldr	r3, [pc, #384]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0xe8>
 800241a:	e000      	b.n	800241e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d075      	beq.n	8002516 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800242a:	4b59      	ldr	r3, [pc, #356]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002434:	4b56      	ldr	r3, [pc, #344]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	2b0c      	cmp	r3, #12
 8002442:	d102      	bne.n	800244a <HAL_RCC_OscConfig+0x136>
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d002      	beq.n	8002450 <HAL_RCC_OscConfig+0x13c>
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	2b04      	cmp	r3, #4
 800244e:	d11f      	bne.n	8002490 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002450:	4b4f      	ldr	r3, [pc, #316]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_OscConfig+0x154>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e265      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002468:	4b49      	ldr	r3, [pc, #292]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	061b      	lsls	r3, r3, #24
 8002476:	4946      	ldr	r1, [pc, #280]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002478:	4313      	orrs	r3, r2
 800247a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800247c:	4b45      	ldr	r3, [pc, #276]	; (8002594 <HAL_RCC_OscConfig+0x280>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fb9b 	bl	8001bbc <HAL_InitTick>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d043      	beq.n	8002514 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e251      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d023      	beq.n	80024e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002498:	4b3d      	ldr	r3, [pc, #244]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a3c      	ldr	r2, [pc, #240]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 800249e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7ff fbd6 	bl	8001c54 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ac:	f7ff fbd2 	bl	8001c54 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e23a      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024be:	4b34      	ldr	r3, [pc, #208]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ca:	4b31      	ldr	r3, [pc, #196]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	061b      	lsls	r3, r3, #24
 80024d8:	492d      	ldr	r1, [pc, #180]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	604b      	str	r3, [r1, #4]
 80024de:	e01a      	b.n	8002516 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e0:	4b2b      	ldr	r3, [pc, #172]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a2a      	ldr	r2, [pc, #168]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 80024e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ec:	f7ff fbb2 	bl	8001c54 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f4:	f7ff fbae 	bl	8001c54 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e216      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002506:	4b22      	ldr	r3, [pc, #136]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x1e0>
 8002512:	e000      	b.n	8002516 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002514:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d041      	beq.n	80025a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d01c      	beq.n	8002564 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 800252c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002530:	4a17      	ldr	r2, [pc, #92]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253a:	f7ff fb8b 	bl	8001c54 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002542:	f7ff fb87 	bl	8001c54 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e1ef      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002554:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0ef      	beq.n	8002542 <HAL_RCC_OscConfig+0x22e>
 8002562:	e020      	b.n	80025a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002564:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800256a:	4a09      	ldr	r2, [pc, #36]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002574:	f7ff fb6e 	bl	8001c54 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800257a:	e00d      	b.n	8002598 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800257c:	f7ff fb6a 	bl	8001c54 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d906      	bls.n	8002598 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e1d2      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000
 8002594:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002598:	4b8c      	ldr	r3, [pc, #560]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 800259a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1ea      	bne.n	800257c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 80a6 	beq.w	8002700 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b4:	2300      	movs	r3, #0
 80025b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025b8:	4b84      	ldr	r3, [pc, #528]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 80025ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_OscConfig+0x2b4>
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <HAL_RCC_OscConfig+0x2b6>
 80025c8:	2300      	movs	r3, #0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00d      	beq.n	80025ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ce:	4b7f      	ldr	r3, [pc, #508]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 80025d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d2:	4a7e      	ldr	r2, [pc, #504]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d8:	6593      	str	r3, [r2, #88]	; 0x58
 80025da:	4b7c      	ldr	r3, [pc, #496]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 80025dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025e6:	2301      	movs	r3, #1
 80025e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ea:	4b79      	ldr	r3, [pc, #484]	; (80027d0 <HAL_RCC_OscConfig+0x4bc>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d118      	bne.n	8002628 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025f6:	4b76      	ldr	r3, [pc, #472]	; (80027d0 <HAL_RCC_OscConfig+0x4bc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a75      	ldr	r2, [pc, #468]	; (80027d0 <HAL_RCC_OscConfig+0x4bc>)
 80025fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002602:	f7ff fb27 	bl	8001c54 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260a:	f7ff fb23 	bl	8001c54 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e18b      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800261c:	4b6c      	ldr	r3, [pc, #432]	; (80027d0 <HAL_RCC_OscConfig+0x4bc>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d108      	bne.n	8002642 <HAL_RCC_OscConfig+0x32e>
 8002630:	4b66      	ldr	r3, [pc, #408]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	4a65      	ldr	r2, [pc, #404]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002640:	e024      	b.n	800268c <HAL_RCC_OscConfig+0x378>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b05      	cmp	r3, #5
 8002648:	d110      	bne.n	800266c <HAL_RCC_OscConfig+0x358>
 800264a:	4b60      	ldr	r3, [pc, #384]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 800264c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002650:	4a5e      	ldr	r2, [pc, #376]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 8002652:	f043 0304 	orr.w	r3, r3, #4
 8002656:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800265a:	4b5c      	ldr	r3, [pc, #368]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 800265c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002660:	4a5a      	ldr	r2, [pc, #360]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800266a:	e00f      	b.n	800268c <HAL_RCC_OscConfig+0x378>
 800266c:	4b57      	ldr	r3, [pc, #348]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002672:	4a56      	ldr	r2, [pc, #344]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 8002674:	f023 0301 	bic.w	r3, r3, #1
 8002678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800267c:	4b53      	ldr	r3, [pc, #332]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	4a52      	ldr	r2, [pc, #328]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 8002684:	f023 0304 	bic.w	r3, r3, #4
 8002688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d016      	beq.n	80026c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7ff fade 	bl	8001c54 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269c:	f7ff fada 	bl	8001c54 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e140      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b2:	4b46      	ldr	r3, [pc, #280]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 80026b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0ed      	beq.n	800269c <HAL_RCC_OscConfig+0x388>
 80026c0:	e015      	b.n	80026ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c2:	f7ff fac7 	bl	8001c54 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026c8:	e00a      	b.n	80026e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ca:	f7ff fac3 	bl	8001c54 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d8:	4293      	cmp	r3, r2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e129      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026e0:	4b3a      	ldr	r3, [pc, #232]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1ed      	bne.n	80026ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026ee:	7ffb      	ldrb	r3, [r7, #31]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d105      	bne.n	8002700 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f4:	4b35      	ldr	r3, [pc, #212]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 80026f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f8:	4a34      	ldr	r2, [pc, #208]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 80026fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	2b00      	cmp	r3, #0
 800270a:	d03c      	beq.n	8002786 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d01c      	beq.n	800274e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002714:	4b2d      	ldr	r3, [pc, #180]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 8002716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800271a:	4a2c      	ldr	r2, [pc, #176]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002724:	f7ff fa96 	bl	8001c54 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800272c:	f7ff fa92 	bl	8001c54 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e0fa      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800273e:	4b23      	ldr	r3, [pc, #140]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 8002740:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0ef      	beq.n	800272c <HAL_RCC_OscConfig+0x418>
 800274c:	e01b      	b.n	8002786 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800274e:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 8002750:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002754:	4a1d      	ldr	r2, [pc, #116]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 8002756:	f023 0301 	bic.w	r3, r3, #1
 800275a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275e:	f7ff fa79 	bl	8001c54 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002766:	f7ff fa75 	bl	8001c54 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e0dd      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002778:	4b14      	ldr	r3, [pc, #80]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 800277a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1ef      	bne.n	8002766 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80d1 	beq.w	8002932 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002790:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b0c      	cmp	r3, #12
 800279a:	f000 808b 	beq.w	80028b4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d15e      	bne.n	8002864 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a08      	ldr	r2, [pc, #32]	; (80027cc <HAL_RCC_OscConfig+0x4b8>)
 80027ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b2:	f7ff fa4f 	bl	8001c54 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b8:	e00c      	b.n	80027d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ba:	f7ff fa4b 	bl	8001c54 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d905      	bls.n	80027d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e0b3      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d4:	4b59      	ldr	r3, [pc, #356]	; (800293c <HAL_RCC_OscConfig+0x628>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1ec      	bne.n	80027ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027e0:	4b56      	ldr	r3, [pc, #344]	; (800293c <HAL_RCC_OscConfig+0x628>)
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	4b56      	ldr	r3, [pc, #344]	; (8002940 <HAL_RCC_OscConfig+0x62c>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6a11      	ldr	r1, [r2, #32]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027f0:	3a01      	subs	r2, #1
 80027f2:	0112      	lsls	r2, r2, #4
 80027f4:	4311      	orrs	r1, r2
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80027fa:	0212      	lsls	r2, r2, #8
 80027fc:	4311      	orrs	r1, r2
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002802:	0852      	lsrs	r2, r2, #1
 8002804:	3a01      	subs	r2, #1
 8002806:	0552      	lsls	r2, r2, #21
 8002808:	4311      	orrs	r1, r2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800280e:	0852      	lsrs	r2, r2, #1
 8002810:	3a01      	subs	r2, #1
 8002812:	0652      	lsls	r2, r2, #25
 8002814:	4311      	orrs	r1, r2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800281a:	06d2      	lsls	r2, r2, #27
 800281c:	430a      	orrs	r2, r1
 800281e:	4947      	ldr	r1, [pc, #284]	; (800293c <HAL_RCC_OscConfig+0x628>)
 8002820:	4313      	orrs	r3, r2
 8002822:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002824:	4b45      	ldr	r3, [pc, #276]	; (800293c <HAL_RCC_OscConfig+0x628>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a44      	ldr	r2, [pc, #272]	; (800293c <HAL_RCC_OscConfig+0x628>)
 800282a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800282e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002830:	4b42      	ldr	r3, [pc, #264]	; (800293c <HAL_RCC_OscConfig+0x628>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4a41      	ldr	r2, [pc, #260]	; (800293c <HAL_RCC_OscConfig+0x628>)
 8002836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800283a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7ff fa0a 	bl	8001c54 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002844:	f7ff fa06 	bl	8001c54 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e06e      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002856:	4b39      	ldr	r3, [pc, #228]	; (800293c <HAL_RCC_OscConfig+0x628>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0x530>
 8002862:	e066      	b.n	8002932 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002864:	4b35      	ldr	r3, [pc, #212]	; (800293c <HAL_RCC_OscConfig+0x628>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a34      	ldr	r2, [pc, #208]	; (800293c <HAL_RCC_OscConfig+0x628>)
 800286a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800286e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002870:	4b32      	ldr	r3, [pc, #200]	; (800293c <HAL_RCC_OscConfig+0x628>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4a31      	ldr	r2, [pc, #196]	; (800293c <HAL_RCC_OscConfig+0x628>)
 8002876:	f023 0303 	bic.w	r3, r3, #3
 800287a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800287c:	4b2f      	ldr	r3, [pc, #188]	; (800293c <HAL_RCC_OscConfig+0x628>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4a2e      	ldr	r2, [pc, #184]	; (800293c <HAL_RCC_OscConfig+0x628>)
 8002882:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7ff f9e2 	bl	8001c54 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002894:	f7ff f9de 	bl	8001c54 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e046      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a6:	4b25      	ldr	r3, [pc, #148]	; (800293c <HAL_RCC_OscConfig+0x628>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x580>
 80028b2:	e03e      	b.n	8002932 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e039      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80028c0:	4b1e      	ldr	r3, [pc, #120]	; (800293c <HAL_RCC_OscConfig+0x628>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f003 0203 	and.w	r2, r3, #3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d12c      	bne.n	800292e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	3b01      	subs	r3, #1
 80028e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d123      	bne.n	800292e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d11b      	bne.n	800292e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002902:	429a      	cmp	r2, r3
 8002904:	d113      	bne.n	800292e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	085b      	lsrs	r3, r3, #1
 8002912:	3b01      	subs	r3, #1
 8002914:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d109      	bne.n	800292e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002924:	085b      	lsrs	r3, r3, #1
 8002926:	3b01      	subs	r3, #1
 8002928:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d001      	beq.n	8002932 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3720      	adds	r7, #32
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40021000 	.word	0x40021000
 8002940:	019f800c 	.word	0x019f800c

08002944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e11e      	b.n	8002b9a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800295c:	4b91      	ldr	r3, [pc, #580]	; (8002ba4 <HAL_RCC_ClockConfig+0x260>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d910      	bls.n	800298c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296a:	4b8e      	ldr	r3, [pc, #568]	; (8002ba4 <HAL_RCC_ClockConfig+0x260>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f023 020f 	bic.w	r2, r3, #15
 8002972:	498c      	ldr	r1, [pc, #560]	; (8002ba4 <HAL_RCC_ClockConfig+0x260>)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297a:	4b8a      	ldr	r3, [pc, #552]	; (8002ba4 <HAL_RCC_ClockConfig+0x260>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d001      	beq.n	800298c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e106      	b.n	8002b9a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d073      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d129      	bne.n	80029f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a0:	4b81      	ldr	r3, [pc, #516]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0f4      	b.n	8002b9a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80029b0:	f000 f99e 	bl	8002cf0 <RCC_GetSysClockFreqFromPLLSource>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4a7c      	ldr	r2, [pc, #496]	; (8002bac <HAL_RCC_ClockConfig+0x268>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d93f      	bls.n	8002a3e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80029be:	4b7a      	ldr	r3, [pc, #488]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d009      	beq.n	80029de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d033      	beq.n	8002a3e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d12f      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029de:	4b72      	ldr	r3, [pc, #456]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029e6:	4a70      	ldr	r2, [pc, #448]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 80029e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80029ee:	2380      	movs	r3, #128	; 0x80
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	e024      	b.n	8002a3e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d107      	bne.n	8002a0c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029fc:	4b6a      	ldr	r3, [pc, #424]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d109      	bne.n	8002a1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0c6      	b.n	8002b9a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a0c:	4b66      	ldr	r3, [pc, #408]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0be      	b.n	8002b9a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002a1c:	f000 f8ce 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8002a20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4a61      	ldr	r2, [pc, #388]	; (8002bac <HAL_RCC_ClockConfig+0x268>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d909      	bls.n	8002a3e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a2a:	4b5f      	ldr	r3, [pc, #380]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a32:	4a5d      	ldr	r2, [pc, #372]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a38:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002a3a:	2380      	movs	r3, #128	; 0x80
 8002a3c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a3e:	4b5a      	ldr	r3, [pc, #360]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f023 0203 	bic.w	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4957      	ldr	r1, [pc, #348]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a50:	f7ff f900 	bl	8001c54 <HAL_GetTick>
 8002a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a58:	f7ff f8fc 	bl	8001c54 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e095      	b.n	8002b9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6e:	4b4e      	ldr	r3, [pc, #312]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 020c 	and.w	r2, r3, #12
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d1eb      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d023      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a98:	4b43      	ldr	r3, [pc, #268]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4a42      	ldr	r2, [pc, #264]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002a9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002aa2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d007      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002ab0:	4b3d      	ldr	r3, [pc, #244]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ab8:	4a3b      	ldr	r2, [pc, #236]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002aba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002abe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac0:	4b39      	ldr	r3, [pc, #228]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	4936      	ldr	r1, [pc, #216]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	608b      	str	r3, [r1, #8]
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2b80      	cmp	r3, #128	; 0x80
 8002ad8:	d105      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002ada:	4b33      	ldr	r3, [pc, #204]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	4a32      	ldr	r2, [pc, #200]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002ae0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ae4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae6:	4b2f      	ldr	r3, [pc, #188]	; (8002ba4 <HAL_RCC_ClockConfig+0x260>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d21d      	bcs.n	8002b30 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af4:	4b2b      	ldr	r3, [pc, #172]	; (8002ba4 <HAL_RCC_ClockConfig+0x260>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f023 020f 	bic.w	r2, r3, #15
 8002afc:	4929      	ldr	r1, [pc, #164]	; (8002ba4 <HAL_RCC_ClockConfig+0x260>)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b04:	f7ff f8a6 	bl	8001c54 <HAL_GetTick>
 8002b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b0c:	f7ff f8a2 	bl	8001c54 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e03b      	b.n	8002b9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b22:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <HAL_RCC_ClockConfig+0x260>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d1ed      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4917      	ldr	r1, [pc, #92]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d009      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b5a:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	490f      	ldr	r1, [pc, #60]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b6e:	f000 f825 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8002b72:	4602      	mov	r2, r0
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <HAL_RCC_ClockConfig+0x264>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	490c      	ldr	r1, [pc, #48]	; (8002bb0 <HAL_RCC_ClockConfig+0x26c>)
 8002b80:	5ccb      	ldrb	r3, [r1, r3]
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <HAL_RCC_ClockConfig+0x270>)
 8002b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <HAL_RCC_ClockConfig+0x274>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff f812 	bl	8001bbc <HAL_InitTick>
 8002b98:	4603      	mov	r3, r0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40022000 	.word	0x40022000
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	04c4b400 	.word	0x04c4b400
 8002bb0:	08007b94 	.word	0x08007b94
 8002bb4:	20000000 	.word	0x20000000
 8002bb8:	20000004 	.word	0x20000004

08002bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002bc2:	4b2c      	ldr	r3, [pc, #176]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d102      	bne.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bce:	4b2a      	ldr	r3, [pc, #168]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	e047      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002bd4:	4b27      	ldr	r3, [pc, #156]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d102      	bne.n	8002be6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002be0:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	e03e      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002be6:	4b23      	ldr	r3, [pc, #140]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b0c      	cmp	r3, #12
 8002bf0:	d136      	bne.n	8002c60 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bf2:	4b20      	ldr	r3, [pc, #128]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	3301      	adds	r3, #1
 8002c08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d10c      	bne.n	8002c2a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c10:	4a1a      	ldr	r2, [pc, #104]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c18:	4a16      	ldr	r2, [pc, #88]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c1a:	68d2      	ldr	r2, [r2, #12]
 8002c1c:	0a12      	lsrs	r2, r2, #8
 8002c1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c22:	fb02 f303 	mul.w	r3, r2, r3
 8002c26:	617b      	str	r3, [r7, #20]
      break;
 8002c28:	e00c      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c2a:	4a13      	ldr	r2, [pc, #76]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c32:	4a10      	ldr	r2, [pc, #64]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c34:	68d2      	ldr	r2, [r2, #12]
 8002c36:	0a12      	lsrs	r2, r2, #8
 8002c38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c3c:	fb02 f303 	mul.w	r3, r2, r3
 8002c40:	617b      	str	r3, [r7, #20]
      break;
 8002c42:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c44:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	0e5b      	lsrs	r3, r3, #25
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	e001      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c64:	693b      	ldr	r3, [r7, #16]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	371c      	adds	r7, #28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	00f42400 	.word	0x00f42400
 8002c7c:	016e3600 	.word	0x016e3600

08002c80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c84:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c86:	681b      	ldr	r3, [r3, #0]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	20000000 	.word	0x20000000

08002c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c9c:	f7ff fff0 	bl	8002c80 <HAL_RCC_GetHCLKFreq>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	0a1b      	lsrs	r3, r3, #8
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	4904      	ldr	r1, [pc, #16]	; (8002cc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cae:	5ccb      	ldrb	r3, [r1, r3]
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	08007ba4 	.word	0x08007ba4

08002cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cc8:	f7ff ffda 	bl	8002c80 <HAL_RCC_GetHCLKFreq>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	0adb      	lsrs	r3, r3, #11
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	4904      	ldr	r1, [pc, #16]	; (8002cec <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cda:	5ccb      	ldrb	r3, [r1, r3]
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	08007ba4 	.word	0x08007ba4

08002cf0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cf6:	4b1e      	ldr	r3, [pc, #120]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d00:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d10c      	bne.n	8002d2e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d14:	4a17      	ldr	r2, [pc, #92]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1c:	4a14      	ldr	r2, [pc, #80]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d1e:	68d2      	ldr	r2, [r2, #12]
 8002d20:	0a12      	lsrs	r2, r2, #8
 8002d22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	617b      	str	r3, [r7, #20]
    break;
 8002d2c:	e00c      	b.n	8002d48 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d2e:	4a12      	ldr	r2, [pc, #72]	; (8002d78 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d36:	4a0e      	ldr	r2, [pc, #56]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d38:	68d2      	ldr	r2, [r2, #12]
 8002d3a:	0a12      	lsrs	r2, r2, #8
 8002d3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d40:	fb02 f303 	mul.w	r3, r2, r3
 8002d44:	617b      	str	r3, [r7, #20]
    break;
 8002d46:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d48:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	0e5b      	lsrs	r3, r3, #25
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	3301      	adds	r3, #1
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d60:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002d62:	687b      	ldr	r3, [r7, #4]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	371c      	adds	r7, #28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	40021000 	.word	0x40021000
 8002d74:	016e3600 	.word	0x016e3600
 8002d78:	00f42400 	.word	0x00f42400

08002d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d84:	2300      	movs	r3, #0
 8002d86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d88:	2300      	movs	r3, #0
 8002d8a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 8098 	beq.w	8002eca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d9e:	4b43      	ldr	r3, [pc, #268]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10d      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002daa:	4b40      	ldr	r3, [pc, #256]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dae:	4a3f      	ldr	r2, [pc, #252]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db4:	6593      	str	r3, [r2, #88]	; 0x58
 8002db6:	4b3d      	ldr	r3, [pc, #244]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc6:	4b3a      	ldr	r3, [pc, #232]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a39      	ldr	r2, [pc, #228]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dd2:	f7fe ff3f 	bl	8001c54 <HAL_GetTick>
 8002dd6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dd8:	e009      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dda:	f7fe ff3b 	bl	8001c54 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d902      	bls.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	74fb      	strb	r3, [r7, #19]
        break;
 8002dec:	e005      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dee:	4b30      	ldr	r3, [pc, #192]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0ef      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002dfa:	7cfb      	ldrb	r3, [r7, #19]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d159      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e00:	4b2a      	ldr	r3, [pc, #168]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e0a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d01e      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d019      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e1c:	4b23      	ldr	r3, [pc, #140]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e28:	4b20      	ldr	r3, [pc, #128]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2e:	4a1f      	ldr	r2, [pc, #124]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e38:	4b1c      	ldr	r3, [pc, #112]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3e:	4a1b      	ldr	r2, [pc, #108]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e48:	4a18      	ldr	r2, [pc, #96]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d016      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5a:	f7fe fefb 	bl	8001c54 <HAL_GetTick>
 8002e5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e60:	e00b      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e62:	f7fe fef7 	bl	8001c54 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d902      	bls.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	74fb      	strb	r3, [r7, #19]
            break;
 8002e78:	e006      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e7a:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0ec      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002e88:	7cfb      	ldrb	r3, [r7, #19]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10b      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e8e:	4b07      	ldr	r3, [pc, #28]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	4903      	ldr	r1, [pc, #12]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ea6:	7cfb      	ldrb	r3, [r7, #19]
 8002ea8:	74bb      	strb	r3, [r7, #18]
 8002eaa:	e005      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb4:	7cfb      	ldrb	r3, [r7, #19]
 8002eb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eb8:	7c7b      	ldrb	r3, [r7, #17]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d105      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ebe:	4ba6      	ldr	r3, [pc, #664]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec2:	4aa5      	ldr	r2, [pc, #660]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ed6:	4ba0      	ldr	r3, [pc, #640]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002edc:	f023 0203 	bic.w	r2, r3, #3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	499c      	ldr	r1, [pc, #624]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00a      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ef8:	4b97      	ldr	r3, [pc, #604]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efe:	f023 020c 	bic.w	r2, r3, #12
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	4994      	ldr	r1, [pc, #592]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f1a:	4b8f      	ldr	r3, [pc, #572]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	498b      	ldr	r1, [pc, #556]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00a      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f3c:	4b86      	ldr	r3, [pc, #536]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	4983      	ldr	r1, [pc, #524]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f5e:	4b7e      	ldr	r3, [pc, #504]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	497a      	ldr	r1, [pc, #488]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00a      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f80:	4b75      	ldr	r3, [pc, #468]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	4972      	ldr	r1, [pc, #456]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fa2:	4b6d      	ldr	r3, [pc, #436]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	4969      	ldr	r1, [pc, #420]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fc4:	4b64      	ldr	r3, [pc, #400]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	4961      	ldr	r1, [pc, #388]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fe6:	4b5c      	ldr	r3, [pc, #368]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	4958      	ldr	r1, [pc, #352]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003004:	2b00      	cmp	r3, #0
 8003006:	d015      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003008:	4b53      	ldr	r3, [pc, #332]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	4950      	ldr	r1, [pc, #320]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003026:	d105      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003028:	4b4b      	ldr	r3, [pc, #300]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	4a4a      	ldr	r2, [pc, #296]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800302e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003032:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800303c:	2b00      	cmp	r3, #0
 800303e:	d015      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003040:	4b45      	ldr	r3, [pc, #276]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003046:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304e:	4942      	ldr	r1, [pc, #264]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800305e:	d105      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003060:	4b3d      	ldr	r3, [pc, #244]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4a3c      	ldr	r2, [pc, #240]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800306a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d015      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003078:	4b37      	ldr	r3, [pc, #220]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	4934      	ldr	r1, [pc, #208]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003096:	d105      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003098:	4b2f      	ldr	r3, [pc, #188]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4a2e      	ldr	r2, [pc, #184]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800309e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030a2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d015      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030b0:	4b29      	ldr	r3, [pc, #164]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030be:	4926      	ldr	r1, [pc, #152]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030ce:	d105      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030d0:	4b21      	ldr	r3, [pc, #132]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	4a20      	ldr	r2, [pc, #128]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030da:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d015      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030e8:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f6:	4918      	ldr	r1, [pc, #96]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003106:	d105      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003108:	4b13      	ldr	r3, [pc, #76]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	4a12      	ldr	r2, [pc, #72]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800310e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003112:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d015      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003120:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003126:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312e:	490a      	ldr	r1, [pc, #40]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800313e:	d105      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	4a04      	ldr	r2, [pc, #16]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800314c:	7cbb      	ldrb	r3, [r7, #18]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40021000 	.word	0x40021000

0800315c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b01      	cmp	r3, #1
 800316e:	d001      	beq.n	8003174 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e042      	b.n	80031fa <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a21      	ldr	r2, [pc, #132]	; (8003208 <HAL_TIM_Base_Start+0xac>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d018      	beq.n	80031b8 <HAL_TIM_Base_Start+0x5c>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318e:	d013      	beq.n	80031b8 <HAL_TIM_Base_Start+0x5c>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1d      	ldr	r2, [pc, #116]	; (800320c <HAL_TIM_Base_Start+0xb0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d00e      	beq.n	80031b8 <HAL_TIM_Base_Start+0x5c>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a1c      	ldr	r2, [pc, #112]	; (8003210 <HAL_TIM_Base_Start+0xb4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d009      	beq.n	80031b8 <HAL_TIM_Base_Start+0x5c>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1a      	ldr	r2, [pc, #104]	; (8003214 <HAL_TIM_Base_Start+0xb8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d004      	beq.n	80031b8 <HAL_TIM_Base_Start+0x5c>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a19      	ldr	r2, [pc, #100]	; (8003218 <HAL_TIM_Base_Start+0xbc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d115      	bne.n	80031e4 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	4b17      	ldr	r3, [pc, #92]	; (800321c <HAL_TIM_Base_Start+0xc0>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b06      	cmp	r3, #6
 80031c8:	d015      	beq.n	80031f6 <HAL_TIM_Base_Start+0x9a>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d0:	d011      	beq.n	80031f6 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0201 	orr.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e2:	e008      	b.n	80031f6 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	e000      	b.n	80031f8 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40012c00 	.word	0x40012c00
 800320c:	40000400 	.word	0x40000400
 8003210:	40000800 	.word	0x40000800
 8003214:	40013400 	.word	0x40013400
 8003218:	40014000 	.word	0x40014000
 800321c:	00010007 	.word	0x00010007

08003220 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e049      	b.n	80032c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d106      	bne.n	800324c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fe fb3c 	bl	80018c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3304      	adds	r3, #4
 800325c:	4619      	mov	r1, r3
 800325e:	4610      	mov	r0, r2
 8003260:	f000 fc14 	bl	8003a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d109      	bne.n	80032f4 <HAL_TIM_PWM_Start+0x24>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	bf14      	ite	ne
 80032ec:	2301      	movne	r3, #1
 80032ee:	2300      	moveq	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	e03c      	b.n	800336e <HAL_TIM_PWM_Start+0x9e>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d109      	bne.n	800330e <HAL_TIM_PWM_Start+0x3e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b01      	cmp	r3, #1
 8003304:	bf14      	ite	ne
 8003306:	2301      	movne	r3, #1
 8003308:	2300      	moveq	r3, #0
 800330a:	b2db      	uxtb	r3, r3
 800330c:	e02f      	b.n	800336e <HAL_TIM_PWM_Start+0x9e>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b08      	cmp	r3, #8
 8003312:	d109      	bne.n	8003328 <HAL_TIM_PWM_Start+0x58>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b01      	cmp	r3, #1
 800331e:	bf14      	ite	ne
 8003320:	2301      	movne	r3, #1
 8003322:	2300      	moveq	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	e022      	b.n	800336e <HAL_TIM_PWM_Start+0x9e>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2b0c      	cmp	r3, #12
 800332c:	d109      	bne.n	8003342 <HAL_TIM_PWM_Start+0x72>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b01      	cmp	r3, #1
 8003338:	bf14      	ite	ne
 800333a:	2301      	movne	r3, #1
 800333c:	2300      	moveq	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	e015      	b.n	800336e <HAL_TIM_PWM_Start+0x9e>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b10      	cmp	r3, #16
 8003346:	d109      	bne.n	800335c <HAL_TIM_PWM_Start+0x8c>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	bf14      	ite	ne
 8003354:	2301      	movne	r3, #1
 8003356:	2300      	moveq	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	e008      	b.n	800336e <HAL_TIM_PWM_Start+0x9e>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b01      	cmp	r3, #1
 8003366:	bf14      	ite	ne
 8003368:	2301      	movne	r3, #1
 800336a:	2300      	moveq	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e097      	b.n	80034a6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d104      	bne.n	8003386 <HAL_TIM_PWM_Start+0xb6>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003384:	e023      	b.n	80033ce <HAL_TIM_PWM_Start+0xfe>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b04      	cmp	r3, #4
 800338a:	d104      	bne.n	8003396 <HAL_TIM_PWM_Start+0xc6>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003394:	e01b      	b.n	80033ce <HAL_TIM_PWM_Start+0xfe>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b08      	cmp	r3, #8
 800339a:	d104      	bne.n	80033a6 <HAL_TIM_PWM_Start+0xd6>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033a4:	e013      	b.n	80033ce <HAL_TIM_PWM_Start+0xfe>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b0c      	cmp	r3, #12
 80033aa:	d104      	bne.n	80033b6 <HAL_TIM_PWM_Start+0xe6>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033b4:	e00b      	b.n	80033ce <HAL_TIM_PWM_Start+0xfe>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b10      	cmp	r3, #16
 80033ba:	d104      	bne.n	80033c6 <HAL_TIM_PWM_Start+0xf6>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033c4:	e003      	b.n	80033ce <HAL_TIM_PWM_Start+0xfe>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2202      	movs	r2, #2
 80033ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2201      	movs	r2, #1
 80033d4:	6839      	ldr	r1, [r7, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fede 	bl	8004198 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a33      	ldr	r2, [pc, #204]	; (80034b0 <HAL_TIM_PWM_Start+0x1e0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d013      	beq.n	800340e <HAL_TIM_PWM_Start+0x13e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a32      	ldr	r2, [pc, #200]	; (80034b4 <HAL_TIM_PWM_Start+0x1e4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00e      	beq.n	800340e <HAL_TIM_PWM_Start+0x13e>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a30      	ldr	r2, [pc, #192]	; (80034b8 <HAL_TIM_PWM_Start+0x1e8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d009      	beq.n	800340e <HAL_TIM_PWM_Start+0x13e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a2f      	ldr	r2, [pc, #188]	; (80034bc <HAL_TIM_PWM_Start+0x1ec>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d004      	beq.n	800340e <HAL_TIM_PWM_Start+0x13e>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a2d      	ldr	r2, [pc, #180]	; (80034c0 <HAL_TIM_PWM_Start+0x1f0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d101      	bne.n	8003412 <HAL_TIM_PWM_Start+0x142>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <HAL_TIM_PWM_Start+0x144>
 8003412:	2300      	movs	r3, #0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d007      	beq.n	8003428 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003426:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a20      	ldr	r2, [pc, #128]	; (80034b0 <HAL_TIM_PWM_Start+0x1e0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d018      	beq.n	8003464 <HAL_TIM_PWM_Start+0x194>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343a:	d013      	beq.n	8003464 <HAL_TIM_PWM_Start+0x194>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a20      	ldr	r2, [pc, #128]	; (80034c4 <HAL_TIM_PWM_Start+0x1f4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00e      	beq.n	8003464 <HAL_TIM_PWM_Start+0x194>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a1f      	ldr	r2, [pc, #124]	; (80034c8 <HAL_TIM_PWM_Start+0x1f8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d009      	beq.n	8003464 <HAL_TIM_PWM_Start+0x194>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a17      	ldr	r2, [pc, #92]	; (80034b4 <HAL_TIM_PWM_Start+0x1e4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d004      	beq.n	8003464 <HAL_TIM_PWM_Start+0x194>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a16      	ldr	r2, [pc, #88]	; (80034b8 <HAL_TIM_PWM_Start+0x1e8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d115      	bne.n	8003490 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	4b18      	ldr	r3, [pc, #96]	; (80034cc <HAL_TIM_PWM_Start+0x1fc>)
 800346c:	4013      	ands	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b06      	cmp	r3, #6
 8003474:	d015      	beq.n	80034a2 <HAL_TIM_PWM_Start+0x1d2>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800347c:	d011      	beq.n	80034a2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 0201 	orr.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348e:	e008      	b.n	80034a2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	e000      	b.n	80034a4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40012c00 	.word	0x40012c00
 80034b4:	40013400 	.word	0x40013400
 80034b8:	40014000 	.word	0x40014000
 80034bc:	40014400 	.word	0x40014400
 80034c0:	40014800 	.word	0x40014800
 80034c4:	40000400 	.word	0x40000400
 80034c8:	40000800 	.word	0x40000800
 80034cc:	00010007 	.word	0x00010007

080034d0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2200      	movs	r2, #0
 80034e0:	6839      	ldr	r1, [r7, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fe58 	bl	8004198 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a3e      	ldr	r2, [pc, #248]	; (80035e8 <HAL_TIM_PWM_Stop+0x118>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d013      	beq.n	800351a <HAL_TIM_PWM_Stop+0x4a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a3d      	ldr	r2, [pc, #244]	; (80035ec <HAL_TIM_PWM_Stop+0x11c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00e      	beq.n	800351a <HAL_TIM_PWM_Stop+0x4a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a3b      	ldr	r2, [pc, #236]	; (80035f0 <HAL_TIM_PWM_Stop+0x120>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d009      	beq.n	800351a <HAL_TIM_PWM_Stop+0x4a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a3a      	ldr	r2, [pc, #232]	; (80035f4 <HAL_TIM_PWM_Stop+0x124>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d004      	beq.n	800351a <HAL_TIM_PWM_Stop+0x4a>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a38      	ldr	r2, [pc, #224]	; (80035f8 <HAL_TIM_PWM_Stop+0x128>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d101      	bne.n	800351e <HAL_TIM_PWM_Stop+0x4e>
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <HAL_TIM_PWM_Stop+0x50>
 800351e:	2300      	movs	r3, #0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d017      	beq.n	8003554 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6a1a      	ldr	r2, [r3, #32]
 800352a:	f241 1311 	movw	r3, #4369	; 0x1111
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10f      	bne.n	8003554 <HAL_TIM_PWM_Stop+0x84>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6a1a      	ldr	r2, [r3, #32]
 800353a:	f244 4344 	movw	r3, #17476	; 0x4444
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d107      	bne.n	8003554 <HAL_TIM_PWM_Stop+0x84>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003552:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6a1a      	ldr	r2, [r3, #32]
 800355a:	f241 1311 	movw	r3, #4369	; 0x1111
 800355e:	4013      	ands	r3, r2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10f      	bne.n	8003584 <HAL_TIM_PWM_Stop+0xb4>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6a1a      	ldr	r2, [r3, #32]
 800356a:	f244 4344 	movw	r3, #17476	; 0x4444
 800356e:	4013      	ands	r3, r2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d107      	bne.n	8003584 <HAL_TIM_PWM_Stop+0xb4>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d104      	bne.n	8003594 <HAL_TIM_PWM_Stop+0xc4>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003592:	e023      	b.n	80035dc <HAL_TIM_PWM_Stop+0x10c>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2b04      	cmp	r3, #4
 8003598:	d104      	bne.n	80035a4 <HAL_TIM_PWM_Stop+0xd4>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035a2:	e01b      	b.n	80035dc <HAL_TIM_PWM_Stop+0x10c>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d104      	bne.n	80035b4 <HAL_TIM_PWM_Stop+0xe4>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035b2:	e013      	b.n	80035dc <HAL_TIM_PWM_Stop+0x10c>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	2b0c      	cmp	r3, #12
 80035b8:	d104      	bne.n	80035c4 <HAL_TIM_PWM_Stop+0xf4>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035c2:	e00b      	b.n	80035dc <HAL_TIM_PWM_Stop+0x10c>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	2b10      	cmp	r3, #16
 80035c8:	d104      	bne.n	80035d4 <HAL_TIM_PWM_Stop+0x104>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035d2:	e003      	b.n	80035dc <HAL_TIM_PWM_Stop+0x10c>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40012c00 	.word	0x40012c00
 80035ec:	40013400 	.word	0x40013400
 80035f0:	40014000 	.word	0x40014000
 80035f4:	40014400 	.word	0x40014400
 80035f8:	40014800 	.word	0x40014800

080035fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e097      	b.n	8003740 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d106      	bne.n	800362a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7fe f96d 	bl	8001904 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2202      	movs	r2, #2
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003640:	f023 0307 	bic.w	r3, r3, #7
 8003644:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3304      	adds	r3, #4
 800364e:	4619      	mov	r1, r3
 8003650:	4610      	mov	r0, r2
 8003652:	f000 fa1b 	bl	8003a8c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367e:	f023 0303 	bic.w	r3, r3, #3
 8003682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	021b      	lsls	r3, r3, #8
 800368e:	4313      	orrs	r3, r2
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800369c:	f023 030c 	bic.w	r3, r3, #12
 80036a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	021b      	lsls	r3, r3, #8
 80036b8:	4313      	orrs	r3, r2
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	011a      	lsls	r2, r3, #4
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	031b      	lsls	r3, r3, #12
 80036cc:	4313      	orrs	r3, r2
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80036da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80036e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	4313      	orrs	r3, r2
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003758:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003760:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003768:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003770:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d110      	bne.n	800379a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d102      	bne.n	8003784 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800377e:	7b7b      	ldrb	r3, [r7, #13]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d001      	beq.n	8003788 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e069      	b.n	800385c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003798:	e031      	b.n	80037fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b04      	cmp	r3, #4
 800379e:	d110      	bne.n	80037c2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80037a0:	7bbb      	ldrb	r3, [r7, #14]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d102      	bne.n	80037ac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80037a6:	7b3b      	ldrb	r3, [r7, #12]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d001      	beq.n	80037b0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e055      	b.n	800385c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037c0:	e01d      	b.n	80037fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d108      	bne.n	80037da <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80037c8:	7bbb      	ldrb	r3, [r7, #14]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d105      	bne.n	80037da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037ce:	7b7b      	ldrb	r3, [r7, #13]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d102      	bne.n	80037da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80037d4:	7b3b      	ldrb	r3, [r7, #12]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d001      	beq.n	80037de <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e03e      	b.n	800385c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2202      	movs	r2, #2
 80037e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2202      	movs	r2, #2
 80037ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2202      	movs	r2, #2
 80037f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2202      	movs	r2, #2
 80037fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <HAL_TIM_Encoder_Start+0xc4>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2b04      	cmp	r3, #4
 8003808:	d008      	beq.n	800381c <HAL_TIM_Encoder_Start+0xd4>
 800380a:	e00f      	b.n	800382c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2201      	movs	r2, #1
 8003812:	2100      	movs	r1, #0
 8003814:	4618      	mov	r0, r3
 8003816:	f000 fcbf 	bl	8004198 <TIM_CCxChannelCmd>
      break;
 800381a:	e016      	b.n	800384a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2201      	movs	r2, #1
 8003822:	2104      	movs	r1, #4
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fcb7 	bl	8004198 <TIM_CCxChannelCmd>
      break;
 800382a:	e00e      	b.n	800384a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2201      	movs	r2, #1
 8003832:	2100      	movs	r1, #0
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fcaf 	bl	8004198 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2201      	movs	r2, #1
 8003840:	2104      	movs	r1, #4
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fca8 	bl	8004198 <TIM_CCxChannelCmd>
      break;
 8003848:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0201 	orr.w	r2, r2, #1
 8003858:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003870:	2300      	movs	r3, #0
 8003872:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800387e:	2302      	movs	r3, #2
 8003880:	e0ff      	b.n	8003a82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b14      	cmp	r3, #20
 800388e:	f200 80f0 	bhi.w	8003a72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003892:	a201      	add	r2, pc, #4	; (adr r2, 8003898 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003898:	080038ed 	.word	0x080038ed
 800389c:	08003a73 	.word	0x08003a73
 80038a0:	08003a73 	.word	0x08003a73
 80038a4:	08003a73 	.word	0x08003a73
 80038a8:	0800392d 	.word	0x0800392d
 80038ac:	08003a73 	.word	0x08003a73
 80038b0:	08003a73 	.word	0x08003a73
 80038b4:	08003a73 	.word	0x08003a73
 80038b8:	0800396f 	.word	0x0800396f
 80038bc:	08003a73 	.word	0x08003a73
 80038c0:	08003a73 	.word	0x08003a73
 80038c4:	08003a73 	.word	0x08003a73
 80038c8:	080039af 	.word	0x080039af
 80038cc:	08003a73 	.word	0x08003a73
 80038d0:	08003a73 	.word	0x08003a73
 80038d4:	08003a73 	.word	0x08003a73
 80038d8:	080039f1 	.word	0x080039f1
 80038dc:	08003a73 	.word	0x08003a73
 80038e0:	08003a73 	.word	0x08003a73
 80038e4:	08003a73 	.word	0x08003a73
 80038e8:	08003a31 	.word	0x08003a31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 f95a 	bl	8003bac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0208 	orr.w	r2, r2, #8
 8003906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0204 	bic.w	r2, r2, #4
 8003916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6999      	ldr	r1, [r3, #24]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	619a      	str	r2, [r3, #24]
      break;
 800392a:	e0a5      	b.n	8003a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	4618      	mov	r0, r3
 8003934:	f000 f9ca 	bl	8003ccc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6999      	ldr	r1, [r3, #24]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	021a      	lsls	r2, r3, #8
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	619a      	str	r2, [r3, #24]
      break;
 800396c:	e084      	b.n	8003a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68b9      	ldr	r1, [r7, #8]
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fa33 	bl	8003de0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69da      	ldr	r2, [r3, #28]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0208 	orr.w	r2, r2, #8
 8003988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0204 	bic.w	r2, r2, #4
 8003998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69d9      	ldr	r1, [r3, #28]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	61da      	str	r2, [r3, #28]
      break;
 80039ac:	e064      	b.n	8003a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 fa9b 	bl	8003ef0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69da      	ldr	r2, [r3, #28]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69da      	ldr	r2, [r3, #28]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69d9      	ldr	r1, [r3, #28]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	021a      	lsls	r2, r3, #8
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	61da      	str	r2, [r3, #28]
      break;
 80039ee:	e043      	b.n	8003a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fb04 	bl	8004004 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0208 	orr.w	r2, r2, #8
 8003a0a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0204 	bic.w	r2, r2, #4
 8003a1a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003a2e:	e023      	b.n	8003a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fb48 	bl	80040cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a4a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a5a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	021a      	lsls	r2, r3, #8
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003a70:	e002      	b.n	8003a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	75fb      	strb	r3, [r7, #23]
      break;
 8003a76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop

08003a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a3c      	ldr	r2, [pc, #240]	; (8003b90 <TIM_Base_SetConfig+0x104>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00f      	beq.n	8003ac4 <TIM_Base_SetConfig+0x38>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aaa:	d00b      	beq.n	8003ac4 <TIM_Base_SetConfig+0x38>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a39      	ldr	r2, [pc, #228]	; (8003b94 <TIM_Base_SetConfig+0x108>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d007      	beq.n	8003ac4 <TIM_Base_SetConfig+0x38>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a38      	ldr	r2, [pc, #224]	; (8003b98 <TIM_Base_SetConfig+0x10c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d003      	beq.n	8003ac4 <TIM_Base_SetConfig+0x38>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a37      	ldr	r2, [pc, #220]	; (8003b9c <TIM_Base_SetConfig+0x110>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d108      	bne.n	8003ad6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a2d      	ldr	r2, [pc, #180]	; (8003b90 <TIM_Base_SetConfig+0x104>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d01b      	beq.n	8003b16 <TIM_Base_SetConfig+0x8a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae4:	d017      	beq.n	8003b16 <TIM_Base_SetConfig+0x8a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a2a      	ldr	r2, [pc, #168]	; (8003b94 <TIM_Base_SetConfig+0x108>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d013      	beq.n	8003b16 <TIM_Base_SetConfig+0x8a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a29      	ldr	r2, [pc, #164]	; (8003b98 <TIM_Base_SetConfig+0x10c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00f      	beq.n	8003b16 <TIM_Base_SetConfig+0x8a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a28      	ldr	r2, [pc, #160]	; (8003b9c <TIM_Base_SetConfig+0x110>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00b      	beq.n	8003b16 <TIM_Base_SetConfig+0x8a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a27      	ldr	r2, [pc, #156]	; (8003ba0 <TIM_Base_SetConfig+0x114>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d007      	beq.n	8003b16 <TIM_Base_SetConfig+0x8a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a26      	ldr	r2, [pc, #152]	; (8003ba4 <TIM_Base_SetConfig+0x118>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d003      	beq.n	8003b16 <TIM_Base_SetConfig+0x8a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a25      	ldr	r2, [pc, #148]	; (8003ba8 <TIM_Base_SetConfig+0x11c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d108      	bne.n	8003b28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a10      	ldr	r2, [pc, #64]	; (8003b90 <TIM_Base_SetConfig+0x104>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00f      	beq.n	8003b74 <TIM_Base_SetConfig+0xe8>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a11      	ldr	r2, [pc, #68]	; (8003b9c <TIM_Base_SetConfig+0x110>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00b      	beq.n	8003b74 <TIM_Base_SetConfig+0xe8>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a10      	ldr	r2, [pc, #64]	; (8003ba0 <TIM_Base_SetConfig+0x114>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d007      	beq.n	8003b74 <TIM_Base_SetConfig+0xe8>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a0f      	ldr	r2, [pc, #60]	; (8003ba4 <TIM_Base_SetConfig+0x118>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d003      	beq.n	8003b74 <TIM_Base_SetConfig+0xe8>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a0e      	ldr	r2, [pc, #56]	; (8003ba8 <TIM_Base_SetConfig+0x11c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d103      	bne.n	8003b7c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	615a      	str	r2, [r3, #20]
}
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40012c00 	.word	0x40012c00
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40000800 	.word	0x40000800
 8003b9c:	40013400 	.word	0x40013400
 8003ba0:	40014000 	.word	0x40014000
 8003ba4:	40014400 	.word	0x40014400
 8003ba8:	40014800 	.word	0x40014800

08003bac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	f023 0201 	bic.w	r2, r3, #1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0303 	bic.w	r3, r3, #3
 8003be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f023 0302 	bic.w	r3, r3, #2
 8003bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a2c      	ldr	r2, [pc, #176]	; (8003cb8 <TIM_OC1_SetConfig+0x10c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d00f      	beq.n	8003c2c <TIM_OC1_SetConfig+0x80>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a2b      	ldr	r2, [pc, #172]	; (8003cbc <TIM_OC1_SetConfig+0x110>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d00b      	beq.n	8003c2c <TIM_OC1_SetConfig+0x80>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a2a      	ldr	r2, [pc, #168]	; (8003cc0 <TIM_OC1_SetConfig+0x114>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d007      	beq.n	8003c2c <TIM_OC1_SetConfig+0x80>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a29      	ldr	r2, [pc, #164]	; (8003cc4 <TIM_OC1_SetConfig+0x118>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d003      	beq.n	8003c2c <TIM_OC1_SetConfig+0x80>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a28      	ldr	r2, [pc, #160]	; (8003cc8 <TIM_OC1_SetConfig+0x11c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d10c      	bne.n	8003c46 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f023 0308 	bic.w	r3, r3, #8
 8003c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f023 0304 	bic.w	r3, r3, #4
 8003c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a1b      	ldr	r2, [pc, #108]	; (8003cb8 <TIM_OC1_SetConfig+0x10c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00f      	beq.n	8003c6e <TIM_OC1_SetConfig+0xc2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a1a      	ldr	r2, [pc, #104]	; (8003cbc <TIM_OC1_SetConfig+0x110>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00b      	beq.n	8003c6e <TIM_OC1_SetConfig+0xc2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a19      	ldr	r2, [pc, #100]	; (8003cc0 <TIM_OC1_SetConfig+0x114>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d007      	beq.n	8003c6e <TIM_OC1_SetConfig+0xc2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a18      	ldr	r2, [pc, #96]	; (8003cc4 <TIM_OC1_SetConfig+0x118>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d003      	beq.n	8003c6e <TIM_OC1_SetConfig+0xc2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a17      	ldr	r2, [pc, #92]	; (8003cc8 <TIM_OC1_SetConfig+0x11c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d111      	bne.n	8003c92 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	621a      	str	r2, [r3, #32]
}
 8003cac:	bf00      	nop
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	40012c00 	.word	0x40012c00
 8003cbc:	40013400 	.word	0x40013400
 8003cc0:	40014000 	.word	0x40014000
 8003cc4:	40014400 	.word	0x40014400
 8003cc8:	40014800 	.word	0x40014800

08003ccc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	f023 0210 	bic.w	r2, r3, #16
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	021b      	lsls	r3, r3, #8
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f023 0320 	bic.w	r3, r3, #32
 8003d1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a28      	ldr	r2, [pc, #160]	; (8003dcc <TIM_OC2_SetConfig+0x100>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d003      	beq.n	8003d38 <TIM_OC2_SetConfig+0x6c>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a27      	ldr	r2, [pc, #156]	; (8003dd0 <TIM_OC2_SetConfig+0x104>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d10d      	bne.n	8003d54 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a1d      	ldr	r2, [pc, #116]	; (8003dcc <TIM_OC2_SetConfig+0x100>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00f      	beq.n	8003d7c <TIM_OC2_SetConfig+0xb0>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a1c      	ldr	r2, [pc, #112]	; (8003dd0 <TIM_OC2_SetConfig+0x104>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00b      	beq.n	8003d7c <TIM_OC2_SetConfig+0xb0>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a1b      	ldr	r2, [pc, #108]	; (8003dd4 <TIM_OC2_SetConfig+0x108>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d007      	beq.n	8003d7c <TIM_OC2_SetConfig+0xb0>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a1a      	ldr	r2, [pc, #104]	; (8003dd8 <TIM_OC2_SetConfig+0x10c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d003      	beq.n	8003d7c <TIM_OC2_SetConfig+0xb0>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a19      	ldr	r2, [pc, #100]	; (8003ddc <TIM_OC2_SetConfig+0x110>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d113      	bne.n	8003da4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	621a      	str	r2, [r3, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40012c00 	.word	0x40012c00
 8003dd0:	40013400 	.word	0x40013400
 8003dd4:	40014000 	.word	0x40014000
 8003dd8:	40014400 	.word	0x40014400
 8003ddc:	40014800 	.word	0x40014800

08003de0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 0303 	bic.w	r3, r3, #3
 8003e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a27      	ldr	r2, [pc, #156]	; (8003edc <TIM_OC3_SetConfig+0xfc>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d003      	beq.n	8003e4a <TIM_OC3_SetConfig+0x6a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a26      	ldr	r2, [pc, #152]	; (8003ee0 <TIM_OC3_SetConfig+0x100>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d10d      	bne.n	8003e66 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	021b      	lsls	r3, r3, #8
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a1c      	ldr	r2, [pc, #112]	; (8003edc <TIM_OC3_SetConfig+0xfc>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00f      	beq.n	8003e8e <TIM_OC3_SetConfig+0xae>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a1b      	ldr	r2, [pc, #108]	; (8003ee0 <TIM_OC3_SetConfig+0x100>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d00b      	beq.n	8003e8e <TIM_OC3_SetConfig+0xae>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a1a      	ldr	r2, [pc, #104]	; (8003ee4 <TIM_OC3_SetConfig+0x104>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d007      	beq.n	8003e8e <TIM_OC3_SetConfig+0xae>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a19      	ldr	r2, [pc, #100]	; (8003ee8 <TIM_OC3_SetConfig+0x108>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d003      	beq.n	8003e8e <TIM_OC3_SetConfig+0xae>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a18      	ldr	r2, [pc, #96]	; (8003eec <TIM_OC3_SetConfig+0x10c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d113      	bne.n	8003eb6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	621a      	str	r2, [r3, #32]
}
 8003ed0:	bf00      	nop
 8003ed2:	371c      	adds	r7, #28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	40012c00 	.word	0x40012c00
 8003ee0:	40013400 	.word	0x40013400
 8003ee4:	40014000 	.word	0x40014000
 8003ee8:	40014400 	.word	0x40014400
 8003eec:	40014800 	.word	0x40014800

08003ef0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b087      	sub	sp, #28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	021b      	lsls	r3, r3, #8
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	031b      	lsls	r3, r3, #12
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a28      	ldr	r2, [pc, #160]	; (8003ff0 <TIM_OC4_SetConfig+0x100>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d003      	beq.n	8003f5c <TIM_OC4_SetConfig+0x6c>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a27      	ldr	r2, [pc, #156]	; (8003ff4 <TIM_OC4_SetConfig+0x104>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d10d      	bne.n	8003f78 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	031b      	lsls	r3, r3, #12
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a1d      	ldr	r2, [pc, #116]	; (8003ff0 <TIM_OC4_SetConfig+0x100>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00f      	beq.n	8003fa0 <TIM_OC4_SetConfig+0xb0>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a1c      	ldr	r2, [pc, #112]	; (8003ff4 <TIM_OC4_SetConfig+0x104>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d00b      	beq.n	8003fa0 <TIM_OC4_SetConfig+0xb0>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a1b      	ldr	r2, [pc, #108]	; (8003ff8 <TIM_OC4_SetConfig+0x108>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d007      	beq.n	8003fa0 <TIM_OC4_SetConfig+0xb0>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a1a      	ldr	r2, [pc, #104]	; (8003ffc <TIM_OC4_SetConfig+0x10c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d003      	beq.n	8003fa0 <TIM_OC4_SetConfig+0xb0>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a19      	ldr	r2, [pc, #100]	; (8004000 <TIM_OC4_SetConfig+0x110>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d113      	bne.n	8003fc8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fa6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003fae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	019b      	lsls	r3, r3, #6
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	019b      	lsls	r3, r3, #6
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	621a      	str	r2, [r3, #32]
}
 8003fe2:	bf00      	nop
 8003fe4:	371c      	adds	r7, #28
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40012c00 	.word	0x40012c00
 8003ff4:	40013400 	.word	0x40013400
 8003ff8:	40014000 	.word	0x40014000
 8003ffc:	40014400 	.word	0x40014400
 8004000:	40014800 	.word	0x40014800

08004004 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800402a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004048:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	041b      	lsls	r3, r3, #16
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a17      	ldr	r2, [pc, #92]	; (80040b8 <TIM_OC5_SetConfig+0xb4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00f      	beq.n	800407e <TIM_OC5_SetConfig+0x7a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a16      	ldr	r2, [pc, #88]	; (80040bc <TIM_OC5_SetConfig+0xb8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00b      	beq.n	800407e <TIM_OC5_SetConfig+0x7a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a15      	ldr	r2, [pc, #84]	; (80040c0 <TIM_OC5_SetConfig+0xbc>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d007      	beq.n	800407e <TIM_OC5_SetConfig+0x7a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a14      	ldr	r2, [pc, #80]	; (80040c4 <TIM_OC5_SetConfig+0xc0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d003      	beq.n	800407e <TIM_OC5_SetConfig+0x7a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a13      	ldr	r2, [pc, #76]	; (80040c8 <TIM_OC5_SetConfig+0xc4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d109      	bne.n	8004092 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004084:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	021b      	lsls	r3, r3, #8
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	4313      	orrs	r3, r2
 8004090:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	621a      	str	r2, [r3, #32]
}
 80040ac:	bf00      	nop
 80040ae:	371c      	adds	r7, #28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	40012c00 	.word	0x40012c00
 80040bc:	40013400 	.word	0x40013400
 80040c0:	40014000 	.word	0x40014000
 80040c4:	40014400 	.word	0x40014400
 80040c8:	40014800 	.word	0x40014800

080040cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	021b      	lsls	r3, r3, #8
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4313      	orrs	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004112:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	051b      	lsls	r3, r3, #20
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a18      	ldr	r2, [pc, #96]	; (8004184 <TIM_OC6_SetConfig+0xb8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00f      	beq.n	8004148 <TIM_OC6_SetConfig+0x7c>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a17      	ldr	r2, [pc, #92]	; (8004188 <TIM_OC6_SetConfig+0xbc>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00b      	beq.n	8004148 <TIM_OC6_SetConfig+0x7c>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a16      	ldr	r2, [pc, #88]	; (800418c <TIM_OC6_SetConfig+0xc0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d007      	beq.n	8004148 <TIM_OC6_SetConfig+0x7c>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a15      	ldr	r2, [pc, #84]	; (8004190 <TIM_OC6_SetConfig+0xc4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d003      	beq.n	8004148 <TIM_OC6_SetConfig+0x7c>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a14      	ldr	r2, [pc, #80]	; (8004194 <TIM_OC6_SetConfig+0xc8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d109      	bne.n	800415c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800414e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	029b      	lsls	r3, r3, #10
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	621a      	str	r2, [r3, #32]
}
 8004176:	bf00      	nop
 8004178:	371c      	adds	r7, #28
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40012c00 	.word	0x40012c00
 8004188:	40013400 	.word	0x40013400
 800418c:	40014000 	.word	0x40014000
 8004190:	40014400 	.word	0x40014400
 8004194:	40014800 	.word	0x40014800

08004198 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f003 031f 	and.w	r3, r3, #31
 80041aa:	2201      	movs	r2, #1
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a1a      	ldr	r2, [r3, #32]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	43db      	mvns	r3, r3
 80041ba:	401a      	ands	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a1a      	ldr	r2, [r3, #32]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f003 031f 	and.w	r3, r3, #31
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	fa01 f303 	lsl.w	r3, r1, r3
 80041d0:	431a      	orrs	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	621a      	str	r2, [r3, #32]
}
 80041d6:	bf00      	nop
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
	...

080041e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e065      	b.n	80042c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a2c      	ldr	r2, [pc, #176]	; (80042d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d004      	beq.n	8004230 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a2b      	ldr	r2, [pc, #172]	; (80042d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d108      	bne.n	8004242 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004236:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a1b      	ldr	r2, [pc, #108]	; (80042d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d018      	beq.n	800429c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004272:	d013      	beq.n	800429c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a18      	ldr	r2, [pc, #96]	; (80042dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00e      	beq.n	800429c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a17      	ldr	r2, [pc, #92]	; (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d009      	beq.n	800429c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a12      	ldr	r2, [pc, #72]	; (80042d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d004      	beq.n	800429c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a13      	ldr	r2, [pc, #76]	; (80042e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d10c      	bne.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	40012c00 	.word	0x40012c00
 80042d8:	40013400 	.word	0x40013400
 80042dc:	40000400 	.word	0x40000400
 80042e0:	40000800 	.word	0x40000800
 80042e4:	40014000 	.word	0x40014000

080042e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004300:	2302      	movs	r3, #2
 8004302:	e087      	b.n	8004414 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	4313      	orrs	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4313      	orrs	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	041b      	lsls	r3, r3, #16
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a27      	ldr	r2, [pc, #156]	; (8004420 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d004      	beq.n	8004392 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a25      	ldr	r2, [pc, #148]	; (8004424 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d106      	bne.n	80043a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	4313      	orrs	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1e      	ldr	r2, [pc, #120]	; (8004420 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d004      	beq.n	80043b4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a1d      	ldr	r2, [pc, #116]	; (8004424 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d126      	bne.n	8004402 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	051b      	lsls	r3, r3, #20
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	4313      	orrs	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a0e      	ldr	r2, [pc, #56]	; (8004420 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d004      	beq.n	80043f4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a0d      	ldr	r2, [pc, #52]	; (8004424 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d106      	bne.n	8004402 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	40012c00 	.word	0x40012c00
 8004424:	40013400 	.word	0x40013400

08004428 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e042      	b.n	80044c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004440:	2b00      	cmp	r3, #0
 8004442:	d106      	bne.n	8004452 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7fd fb1b 	bl	8001a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2224      	movs	r2, #36	; 0x24
 8004456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0201 	bic.w	r2, r2, #1
 8004468:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f8c2 	bl	80045f4 <UART_SetConfig>
 8004470:	4603      	mov	r3, r0
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e022      	b.n	80044c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fb82 	bl	8004b8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004496:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fc09 	bl	8004cd0 <UART_CheckIdleState>
 80044be:	4603      	mov	r3, r0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08a      	sub	sp, #40	; 0x28
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	4613      	mov	r3, r2
 80044d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044de:	2b20      	cmp	r3, #32
 80044e0:	f040 8083 	bne.w	80045ea <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <HAL_UART_Transmit+0x28>
 80044ea:	88fb      	ldrh	r3, [r7, #6]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e07b      	b.n	80045ec <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_UART_Transmit+0x3a>
 80044fe:	2302      	movs	r3, #2
 8004500:	e074      	b.n	80045ec <HAL_UART_Transmit+0x124>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2221      	movs	r2, #33	; 0x21
 8004516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800451a:	f7fd fb9b 	bl	8001c54 <HAL_GetTick>
 800451e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	88fa      	ldrh	r2, [r7, #6]
 8004524:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	88fa      	ldrh	r2, [r7, #6]
 800452c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004538:	d108      	bne.n	800454c <HAL_UART_Transmit+0x84>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d104      	bne.n	800454c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004542:	2300      	movs	r3, #0
 8004544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	61bb      	str	r3, [r7, #24]
 800454a:	e003      	b.n	8004554 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004550:	2300      	movs	r3, #0
 8004552:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800455c:	e02c      	b.n	80045b8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2200      	movs	r2, #0
 8004566:	2180      	movs	r1, #128	; 0x80
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 fbfc 	bl	8004d66 <UART_WaitOnFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e039      	b.n	80045ec <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10b      	bne.n	8004596 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800458c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	3302      	adds	r3, #2
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	e007      	b.n	80045a6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	781a      	ldrb	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	3301      	adds	r3, #1
 80045a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045be:	b29b      	uxth	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1cc      	bne.n	800455e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2200      	movs	r2, #0
 80045cc:	2140      	movs	r1, #64	; 0x40
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 fbc9 	bl	8004d66 <UART_WaitOnFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e006      	b.n	80045ec <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	e000      	b.n	80045ec <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80045ea:	2302      	movs	r3, #2
  }
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3720      	adds	r7, #32
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045f8:	b08c      	sub	sp, #48	; 0x30
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	431a      	orrs	r2, r3
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	431a      	orrs	r2, r3
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	4313      	orrs	r3, r2
 800461a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	4bab      	ldr	r3, [pc, #684]	; (80048d0 <UART_SetConfig+0x2dc>)
 8004624:	4013      	ands	r3, r2
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800462c:	430b      	orrs	r3, r1
 800462e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4aa0      	ldr	r2, [pc, #640]	; (80048d4 <UART_SetConfig+0x2e0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d004      	beq.n	8004660 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800465c:	4313      	orrs	r3, r2
 800465e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800466a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	6812      	ldr	r2, [r2, #0]
 8004672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004674:	430b      	orrs	r3, r1
 8004676:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	f023 010f 	bic.w	r1, r3, #15
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a91      	ldr	r2, [pc, #580]	; (80048d8 <UART_SetConfig+0x2e4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d125      	bne.n	80046e4 <UART_SetConfig+0xf0>
 8004698:	4b90      	ldr	r3, [pc, #576]	; (80048dc <UART_SetConfig+0x2e8>)
 800469a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d81a      	bhi.n	80046dc <UART_SetConfig+0xe8>
 80046a6:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <UART_SetConfig+0xb8>)
 80046a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ac:	080046bd 	.word	0x080046bd
 80046b0:	080046cd 	.word	0x080046cd
 80046b4:	080046c5 	.word	0x080046c5
 80046b8:	080046d5 	.word	0x080046d5
 80046bc:	2301      	movs	r3, #1
 80046be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046c2:	e0d6      	b.n	8004872 <UART_SetConfig+0x27e>
 80046c4:	2302      	movs	r3, #2
 80046c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ca:	e0d2      	b.n	8004872 <UART_SetConfig+0x27e>
 80046cc:	2304      	movs	r3, #4
 80046ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046d2:	e0ce      	b.n	8004872 <UART_SetConfig+0x27e>
 80046d4:	2308      	movs	r3, #8
 80046d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046da:	e0ca      	b.n	8004872 <UART_SetConfig+0x27e>
 80046dc:	2310      	movs	r3, #16
 80046de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046e2:	e0c6      	b.n	8004872 <UART_SetConfig+0x27e>
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a7d      	ldr	r2, [pc, #500]	; (80048e0 <UART_SetConfig+0x2ec>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d138      	bne.n	8004760 <UART_SetConfig+0x16c>
 80046ee:	4b7b      	ldr	r3, [pc, #492]	; (80048dc <UART_SetConfig+0x2e8>)
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f4:	f003 030c 	and.w	r3, r3, #12
 80046f8:	2b0c      	cmp	r3, #12
 80046fa:	d82d      	bhi.n	8004758 <UART_SetConfig+0x164>
 80046fc:	a201      	add	r2, pc, #4	; (adr r2, 8004704 <UART_SetConfig+0x110>)
 80046fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004702:	bf00      	nop
 8004704:	08004739 	.word	0x08004739
 8004708:	08004759 	.word	0x08004759
 800470c:	08004759 	.word	0x08004759
 8004710:	08004759 	.word	0x08004759
 8004714:	08004749 	.word	0x08004749
 8004718:	08004759 	.word	0x08004759
 800471c:	08004759 	.word	0x08004759
 8004720:	08004759 	.word	0x08004759
 8004724:	08004741 	.word	0x08004741
 8004728:	08004759 	.word	0x08004759
 800472c:	08004759 	.word	0x08004759
 8004730:	08004759 	.word	0x08004759
 8004734:	08004751 	.word	0x08004751
 8004738:	2300      	movs	r3, #0
 800473a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800473e:	e098      	b.n	8004872 <UART_SetConfig+0x27e>
 8004740:	2302      	movs	r3, #2
 8004742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004746:	e094      	b.n	8004872 <UART_SetConfig+0x27e>
 8004748:	2304      	movs	r3, #4
 800474a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800474e:	e090      	b.n	8004872 <UART_SetConfig+0x27e>
 8004750:	2308      	movs	r3, #8
 8004752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004756:	e08c      	b.n	8004872 <UART_SetConfig+0x27e>
 8004758:	2310      	movs	r3, #16
 800475a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800475e:	e088      	b.n	8004872 <UART_SetConfig+0x27e>
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a5f      	ldr	r2, [pc, #380]	; (80048e4 <UART_SetConfig+0x2f0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d125      	bne.n	80047b6 <UART_SetConfig+0x1c2>
 800476a:	4b5c      	ldr	r3, [pc, #368]	; (80048dc <UART_SetConfig+0x2e8>)
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004770:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004774:	2b30      	cmp	r3, #48	; 0x30
 8004776:	d016      	beq.n	80047a6 <UART_SetConfig+0x1b2>
 8004778:	2b30      	cmp	r3, #48	; 0x30
 800477a:	d818      	bhi.n	80047ae <UART_SetConfig+0x1ba>
 800477c:	2b20      	cmp	r3, #32
 800477e:	d00a      	beq.n	8004796 <UART_SetConfig+0x1a2>
 8004780:	2b20      	cmp	r3, #32
 8004782:	d814      	bhi.n	80047ae <UART_SetConfig+0x1ba>
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <UART_SetConfig+0x19a>
 8004788:	2b10      	cmp	r3, #16
 800478a:	d008      	beq.n	800479e <UART_SetConfig+0x1aa>
 800478c:	e00f      	b.n	80047ae <UART_SetConfig+0x1ba>
 800478e:	2300      	movs	r3, #0
 8004790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004794:	e06d      	b.n	8004872 <UART_SetConfig+0x27e>
 8004796:	2302      	movs	r3, #2
 8004798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800479c:	e069      	b.n	8004872 <UART_SetConfig+0x27e>
 800479e:	2304      	movs	r3, #4
 80047a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047a4:	e065      	b.n	8004872 <UART_SetConfig+0x27e>
 80047a6:	2308      	movs	r3, #8
 80047a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ac:	e061      	b.n	8004872 <UART_SetConfig+0x27e>
 80047ae:	2310      	movs	r3, #16
 80047b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047b4:	e05d      	b.n	8004872 <UART_SetConfig+0x27e>
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a4b      	ldr	r2, [pc, #300]	; (80048e8 <UART_SetConfig+0x2f4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d125      	bne.n	800480c <UART_SetConfig+0x218>
 80047c0:	4b46      	ldr	r3, [pc, #280]	; (80048dc <UART_SetConfig+0x2e8>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047ca:	2bc0      	cmp	r3, #192	; 0xc0
 80047cc:	d016      	beq.n	80047fc <UART_SetConfig+0x208>
 80047ce:	2bc0      	cmp	r3, #192	; 0xc0
 80047d0:	d818      	bhi.n	8004804 <UART_SetConfig+0x210>
 80047d2:	2b80      	cmp	r3, #128	; 0x80
 80047d4:	d00a      	beq.n	80047ec <UART_SetConfig+0x1f8>
 80047d6:	2b80      	cmp	r3, #128	; 0x80
 80047d8:	d814      	bhi.n	8004804 <UART_SetConfig+0x210>
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <UART_SetConfig+0x1f0>
 80047de:	2b40      	cmp	r3, #64	; 0x40
 80047e0:	d008      	beq.n	80047f4 <UART_SetConfig+0x200>
 80047e2:	e00f      	b.n	8004804 <UART_SetConfig+0x210>
 80047e4:	2300      	movs	r3, #0
 80047e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ea:	e042      	b.n	8004872 <UART_SetConfig+0x27e>
 80047ec:	2302      	movs	r3, #2
 80047ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047f2:	e03e      	b.n	8004872 <UART_SetConfig+0x27e>
 80047f4:	2304      	movs	r3, #4
 80047f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047fa:	e03a      	b.n	8004872 <UART_SetConfig+0x27e>
 80047fc:	2308      	movs	r3, #8
 80047fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004802:	e036      	b.n	8004872 <UART_SetConfig+0x27e>
 8004804:	2310      	movs	r3, #16
 8004806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800480a:	e032      	b.n	8004872 <UART_SetConfig+0x27e>
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a30      	ldr	r2, [pc, #192]	; (80048d4 <UART_SetConfig+0x2e0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d12a      	bne.n	800486c <UART_SetConfig+0x278>
 8004816:	4b31      	ldr	r3, [pc, #196]	; (80048dc <UART_SetConfig+0x2e8>)
 8004818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004820:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004824:	d01a      	beq.n	800485c <UART_SetConfig+0x268>
 8004826:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800482a:	d81b      	bhi.n	8004864 <UART_SetConfig+0x270>
 800482c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004830:	d00c      	beq.n	800484c <UART_SetConfig+0x258>
 8004832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004836:	d815      	bhi.n	8004864 <UART_SetConfig+0x270>
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <UART_SetConfig+0x250>
 800483c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004840:	d008      	beq.n	8004854 <UART_SetConfig+0x260>
 8004842:	e00f      	b.n	8004864 <UART_SetConfig+0x270>
 8004844:	2300      	movs	r3, #0
 8004846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800484a:	e012      	b.n	8004872 <UART_SetConfig+0x27e>
 800484c:	2302      	movs	r3, #2
 800484e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004852:	e00e      	b.n	8004872 <UART_SetConfig+0x27e>
 8004854:	2304      	movs	r3, #4
 8004856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800485a:	e00a      	b.n	8004872 <UART_SetConfig+0x27e>
 800485c:	2308      	movs	r3, #8
 800485e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004862:	e006      	b.n	8004872 <UART_SetConfig+0x27e>
 8004864:	2310      	movs	r3, #16
 8004866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800486a:	e002      	b.n	8004872 <UART_SetConfig+0x27e>
 800486c:	2310      	movs	r3, #16
 800486e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a17      	ldr	r2, [pc, #92]	; (80048d4 <UART_SetConfig+0x2e0>)
 8004878:	4293      	cmp	r3, r2
 800487a:	f040 80a8 	bne.w	80049ce <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800487e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004882:	2b08      	cmp	r3, #8
 8004884:	d834      	bhi.n	80048f0 <UART_SetConfig+0x2fc>
 8004886:	a201      	add	r2, pc, #4	; (adr r2, 800488c <UART_SetConfig+0x298>)
 8004888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488c:	080048b1 	.word	0x080048b1
 8004890:	080048f1 	.word	0x080048f1
 8004894:	080048b9 	.word	0x080048b9
 8004898:	080048f1 	.word	0x080048f1
 800489c:	080048bf 	.word	0x080048bf
 80048a0:	080048f1 	.word	0x080048f1
 80048a4:	080048f1 	.word	0x080048f1
 80048a8:	080048f1 	.word	0x080048f1
 80048ac:	080048c7 	.word	0x080048c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b0:	f7fe f9f2 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 80048b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048b6:	e021      	b.n	80048fc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048b8:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <UART_SetConfig+0x2f8>)
 80048ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048bc:	e01e      	b.n	80048fc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048be:	f7fe f97d 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 80048c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048c4:	e01a      	b.n	80048fc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048cc:	e016      	b.n	80048fc <UART_SetConfig+0x308>
 80048ce:	bf00      	nop
 80048d0:	cfff69f3 	.word	0xcfff69f3
 80048d4:	40008000 	.word	0x40008000
 80048d8:	40013800 	.word	0x40013800
 80048dc:	40021000 	.word	0x40021000
 80048e0:	40004400 	.word	0x40004400
 80048e4:	40004800 	.word	0x40004800
 80048e8:	40004c00 	.word	0x40004c00
 80048ec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80048fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 812a 	beq.w	8004b58 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	4a9e      	ldr	r2, [pc, #632]	; (8004b84 <UART_SetConfig+0x590>)
 800490a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800490e:	461a      	mov	r2, r3
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	fbb3 f3f2 	udiv	r3, r3, r2
 8004916:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	4613      	mov	r3, r2
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	4413      	add	r3, r2
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	429a      	cmp	r2, r3
 8004926:	d305      	bcc.n	8004934 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	429a      	cmp	r2, r3
 8004932:	d903      	bls.n	800493c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800493a:	e10d      	b.n	8004b58 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	2200      	movs	r2, #0
 8004940:	60bb      	str	r3, [r7, #8]
 8004942:	60fa      	str	r2, [r7, #12]
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	4a8e      	ldr	r2, [pc, #568]	; (8004b84 <UART_SetConfig+0x590>)
 800494a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800494e:	b29b      	uxth	r3, r3
 8004950:	2200      	movs	r2, #0
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	607a      	str	r2, [r7, #4]
 8004956:	e9d7 2300 	ldrd	r2, r3, [r7]
 800495a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800495e:	f7fc f96b 	bl	8000c38 <__aeabi_uldivmod>
 8004962:	4602      	mov	r2, r0
 8004964:	460b      	mov	r3, r1
 8004966:	4610      	mov	r0, r2
 8004968:	4619      	mov	r1, r3
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	f04f 0300 	mov.w	r3, #0
 8004972:	020b      	lsls	r3, r1, #8
 8004974:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004978:	0202      	lsls	r2, r0, #8
 800497a:	6979      	ldr	r1, [r7, #20]
 800497c:	6849      	ldr	r1, [r1, #4]
 800497e:	0849      	lsrs	r1, r1, #1
 8004980:	2000      	movs	r0, #0
 8004982:	460c      	mov	r4, r1
 8004984:	4605      	mov	r5, r0
 8004986:	eb12 0804 	adds.w	r8, r2, r4
 800498a:	eb43 0905 	adc.w	r9, r3, r5
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	469a      	mov	sl, r3
 8004996:	4693      	mov	fp, r2
 8004998:	4652      	mov	r2, sl
 800499a:	465b      	mov	r3, fp
 800499c:	4640      	mov	r0, r8
 800499e:	4649      	mov	r1, r9
 80049a0:	f7fc f94a 	bl	8000c38 <__aeabi_uldivmod>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4613      	mov	r3, r2
 80049aa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049b2:	d308      	bcc.n	80049c6 <UART_SetConfig+0x3d2>
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049ba:	d204      	bcs.n	80049c6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6a3a      	ldr	r2, [r7, #32]
 80049c2:	60da      	str	r2, [r3, #12]
 80049c4:	e0c8      	b.n	8004b58 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80049cc:	e0c4      	b.n	8004b58 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049d6:	d167      	bne.n	8004aa8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80049d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d828      	bhi.n	8004a32 <UART_SetConfig+0x43e>
 80049e0:	a201      	add	r2, pc, #4	; (adr r2, 80049e8 <UART_SetConfig+0x3f4>)
 80049e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e6:	bf00      	nop
 80049e8:	08004a0d 	.word	0x08004a0d
 80049ec:	08004a15 	.word	0x08004a15
 80049f0:	08004a1d 	.word	0x08004a1d
 80049f4:	08004a33 	.word	0x08004a33
 80049f8:	08004a23 	.word	0x08004a23
 80049fc:	08004a33 	.word	0x08004a33
 8004a00:	08004a33 	.word	0x08004a33
 8004a04:	08004a33 	.word	0x08004a33
 8004a08:	08004a2b 	.word	0x08004a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a0c:	f7fe f944 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 8004a10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a12:	e014      	b.n	8004a3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a14:	f7fe f956 	bl	8002cc4 <HAL_RCC_GetPCLK2Freq>
 8004a18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a1a:	e010      	b.n	8004a3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a1c:	4b5a      	ldr	r3, [pc, #360]	; (8004b88 <UART_SetConfig+0x594>)
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a20:	e00d      	b.n	8004a3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a22:	f7fe f8cb 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8004a26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a28:	e009      	b.n	8004a3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a30:	e005      	b.n	8004a3e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 8089 	beq.w	8004b58 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	4a4e      	ldr	r2, [pc, #312]	; (8004b84 <UART_SetConfig+0x590>)
 8004a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a50:	461a      	mov	r2, r3
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a58:	005a      	lsls	r2, r3, #1
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	085b      	lsrs	r3, r3, #1
 8004a60:	441a      	add	r2, r3
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	2b0f      	cmp	r3, #15
 8004a70:	d916      	bls.n	8004aa0 <UART_SetConfig+0x4ac>
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a78:	d212      	bcs.n	8004aa0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	f023 030f 	bic.w	r3, r3, #15
 8004a82:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	085b      	lsrs	r3, r3, #1
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	8bfb      	ldrh	r3, [r7, #30]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	8bfa      	ldrh	r2, [r7, #30]
 8004a9c:	60da      	str	r2, [r3, #12]
 8004a9e:	e05b      	b.n	8004b58 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004aa6:	e057      	b.n	8004b58 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004aa8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d828      	bhi.n	8004b02 <UART_SetConfig+0x50e>
 8004ab0:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <UART_SetConfig+0x4c4>)
 8004ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab6:	bf00      	nop
 8004ab8:	08004add 	.word	0x08004add
 8004abc:	08004ae5 	.word	0x08004ae5
 8004ac0:	08004aed 	.word	0x08004aed
 8004ac4:	08004b03 	.word	0x08004b03
 8004ac8:	08004af3 	.word	0x08004af3
 8004acc:	08004b03 	.word	0x08004b03
 8004ad0:	08004b03 	.word	0x08004b03
 8004ad4:	08004b03 	.word	0x08004b03
 8004ad8:	08004afb 	.word	0x08004afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004adc:	f7fe f8dc 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 8004ae0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ae2:	e014      	b.n	8004b0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ae4:	f7fe f8ee 	bl	8002cc4 <HAL_RCC_GetPCLK2Freq>
 8004ae8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004aea:	e010      	b.n	8004b0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aec:	4b26      	ldr	r3, [pc, #152]	; (8004b88 <UART_SetConfig+0x594>)
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004af0:	e00d      	b.n	8004b0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004af2:	f7fe f863 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8004af6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004af8:	e009      	b.n	8004b0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b00:	e005      	b.n	8004b0e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b0c:	bf00      	nop
    }

    if (pclk != 0U)
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d021      	beq.n	8004b58 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	4a1a      	ldr	r2, [pc, #104]	; (8004b84 <UART_SetConfig+0x590>)
 8004b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	085b      	lsrs	r3, r3, #1
 8004b2c:	441a      	add	r2, r3
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	2b0f      	cmp	r3, #15
 8004b3c:	d909      	bls.n	8004b52 <UART_SetConfig+0x55e>
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b44:	d205      	bcs.n	8004b52 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60da      	str	r2, [r3, #12]
 8004b50:	e002      	b.n	8004b58 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2200      	movs	r2, #0
 8004b72:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004b74:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3730      	adds	r7, #48	; 0x30
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b82:	bf00      	nop
 8004b84:	08007bac 	.word	0x08007bac
 8004b88:	00f42400 	.word	0x00f42400

08004b8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d01a      	beq.n	8004ca2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c8a:	d10a      	bne.n	8004ca2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	605a      	str	r2, [r3, #4]
  }
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ce0:	f7fc ffb8 	bl	8001c54 <HAL_GetTick>
 8004ce4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0308 	and.w	r3, r3, #8
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d10e      	bne.n	8004d12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f82f 	bl	8004d66 <UART_WaitOnFlagUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e025      	b.n	8004d5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d10e      	bne.n	8004d3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f819 	bl	8004d66 <UART_WaitOnFlagUntilTimeout>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e00f      	b.n	8004d5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b09c      	sub	sp, #112	; 0x70
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	4613      	mov	r3, r2
 8004d74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d76:	e0a9      	b.n	8004ecc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7e:	f000 80a5 	beq.w	8004ecc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d82:	f7fc ff67 	bl	8001c54 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d302      	bcc.n	8004d98 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d140      	bne.n	8004e1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dac:	667b      	str	r3, [r7, #100]	; 0x64
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004db6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004db8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004dbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004dbe:	e841 2300 	strex	r3, r2, [r1]
 8004dc2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1e6      	bne.n	8004d98 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3308      	adds	r3, #8
 8004dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd4:	e853 3f00 	ldrex	r3, [r3]
 8004dd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ddc:	f023 0301 	bic.w	r3, r3, #1
 8004de0:	663b      	str	r3, [r7, #96]	; 0x60
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3308      	adds	r3, #8
 8004de8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004dea:	64ba      	str	r2, [r7, #72]	; 0x48
 8004dec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004df0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004df2:	e841 2300 	strex	r3, r2, [r1]
 8004df6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1e5      	bne.n	8004dca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e069      	b.n	8004eee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d051      	beq.n	8004ecc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e36:	d149      	bne.n	8004ecc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4a:	e853 3f00 	ldrex	r3, [r3]
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e60:	637b      	str	r3, [r7, #52]	; 0x34
 8004e62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e68:	e841 2300 	strex	r3, r2, [r1]
 8004e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e6      	bne.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3308      	adds	r3, #8
 8004e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	e853 3f00 	ldrex	r3, [r3]
 8004e82:	613b      	str	r3, [r7, #16]
   return(result);
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f023 0301 	bic.w	r3, r3, #1
 8004e8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3308      	adds	r3, #8
 8004e92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e94:	623a      	str	r2, [r7, #32]
 8004e96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e98:	69f9      	ldr	r1, [r7, #28]
 8004e9a:	6a3a      	ldr	r2, [r7, #32]
 8004e9c:	e841 2300 	strex	r3, r2, [r1]
 8004ea0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e5      	bne.n	8004e74 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e010      	b.n	8004eee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	69da      	ldr	r2, [r3, #28]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	bf0c      	ite	eq
 8004edc:	2301      	moveq	r3, #1
 8004ede:	2300      	movne	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	f43f af46 	beq.w	8004d78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3770      	adds	r7, #112	; 0x70
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b085      	sub	sp, #20
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d101      	bne.n	8004f0c <HAL_UARTEx_DisableFifoMode+0x16>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e027      	b.n	8004f5c <HAL_UARTEx_DisableFifoMode+0x66>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2224      	movs	r2, #36	; 0x24
 8004f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0201 	bic.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f3a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e02d      	b.n	8004fdc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2224      	movs	r2, #36	; 0x24
 8004f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0201 	bic.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f84f 	bl	8005060 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d101      	bne.n	8004ffc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	e02d      	b.n	8005058 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2224      	movs	r2, #36	; 0x24
 8005008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0201 	bic.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f811 	bl	8005060 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2220      	movs	r2, #32
 800504a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800506c:	2b00      	cmp	r3, #0
 800506e:	d108      	bne.n	8005082 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005080:	e031      	b.n	80050e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005082:	2308      	movs	r3, #8
 8005084:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005086:	2308      	movs	r3, #8
 8005088:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	0e5b      	lsrs	r3, r3, #25
 8005092:	b2db      	uxtb	r3, r3
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	0f5b      	lsrs	r3, r3, #29
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050aa:	7bbb      	ldrb	r3, [r7, #14]
 80050ac:	7b3a      	ldrb	r2, [r7, #12]
 80050ae:	4911      	ldr	r1, [pc, #68]	; (80050f4 <UARTEx_SetNbDataToProcess+0x94>)
 80050b0:	5c8a      	ldrb	r2, [r1, r2]
 80050b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80050b6:	7b3a      	ldrb	r2, [r7, #12]
 80050b8:	490f      	ldr	r1, [pc, #60]	; (80050f8 <UARTEx_SetNbDataToProcess+0x98>)
 80050ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
 80050ca:	7b7a      	ldrb	r2, [r7, #13]
 80050cc:	4909      	ldr	r1, [pc, #36]	; (80050f4 <UARTEx_SetNbDataToProcess+0x94>)
 80050ce:	5c8a      	ldrb	r2, [r1, r2]
 80050d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80050d4:	7b7a      	ldrb	r2, [r7, #13]
 80050d6:	4908      	ldr	r1, [pc, #32]	; (80050f8 <UARTEx_SetNbDataToProcess+0x98>)
 80050d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050da:	fb93 f3f2 	sdiv	r3, r3, r2
 80050de:	b29a      	uxth	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80050e6:	bf00      	nop
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	08007bc4 	.word	0x08007bc4
 80050f8:	08007bcc 	.word	0x08007bcc

080050fc <__cvt>:
 80050fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005100:	ec55 4b10 	vmov	r4, r5, d0
 8005104:	2d00      	cmp	r5, #0
 8005106:	460e      	mov	r6, r1
 8005108:	4619      	mov	r1, r3
 800510a:	462b      	mov	r3, r5
 800510c:	bfbb      	ittet	lt
 800510e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005112:	461d      	movlt	r5, r3
 8005114:	2300      	movge	r3, #0
 8005116:	232d      	movlt	r3, #45	; 0x2d
 8005118:	700b      	strb	r3, [r1, #0]
 800511a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800511c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005120:	4691      	mov	r9, r2
 8005122:	f023 0820 	bic.w	r8, r3, #32
 8005126:	bfbc      	itt	lt
 8005128:	4622      	movlt	r2, r4
 800512a:	4614      	movlt	r4, r2
 800512c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005130:	d005      	beq.n	800513e <__cvt+0x42>
 8005132:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005136:	d100      	bne.n	800513a <__cvt+0x3e>
 8005138:	3601      	adds	r6, #1
 800513a:	2102      	movs	r1, #2
 800513c:	e000      	b.n	8005140 <__cvt+0x44>
 800513e:	2103      	movs	r1, #3
 8005140:	ab03      	add	r3, sp, #12
 8005142:	9301      	str	r3, [sp, #4]
 8005144:	ab02      	add	r3, sp, #8
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	ec45 4b10 	vmov	d0, r4, r5
 800514c:	4653      	mov	r3, sl
 800514e:	4632      	mov	r2, r6
 8005150:	f000 ff36 	bl	8005fc0 <_dtoa_r>
 8005154:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005158:	4607      	mov	r7, r0
 800515a:	d102      	bne.n	8005162 <__cvt+0x66>
 800515c:	f019 0f01 	tst.w	r9, #1
 8005160:	d022      	beq.n	80051a8 <__cvt+0xac>
 8005162:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005166:	eb07 0906 	add.w	r9, r7, r6
 800516a:	d110      	bne.n	800518e <__cvt+0x92>
 800516c:	783b      	ldrb	r3, [r7, #0]
 800516e:	2b30      	cmp	r3, #48	; 0x30
 8005170:	d10a      	bne.n	8005188 <__cvt+0x8c>
 8005172:	2200      	movs	r2, #0
 8005174:	2300      	movs	r3, #0
 8005176:	4620      	mov	r0, r4
 8005178:	4629      	mov	r1, r5
 800517a:	f7fb fccd 	bl	8000b18 <__aeabi_dcmpeq>
 800517e:	b918      	cbnz	r0, 8005188 <__cvt+0x8c>
 8005180:	f1c6 0601 	rsb	r6, r6, #1
 8005184:	f8ca 6000 	str.w	r6, [sl]
 8005188:	f8da 3000 	ldr.w	r3, [sl]
 800518c:	4499      	add	r9, r3
 800518e:	2200      	movs	r2, #0
 8005190:	2300      	movs	r3, #0
 8005192:	4620      	mov	r0, r4
 8005194:	4629      	mov	r1, r5
 8005196:	f7fb fcbf 	bl	8000b18 <__aeabi_dcmpeq>
 800519a:	b108      	cbz	r0, 80051a0 <__cvt+0xa4>
 800519c:	f8cd 900c 	str.w	r9, [sp, #12]
 80051a0:	2230      	movs	r2, #48	; 0x30
 80051a2:	9b03      	ldr	r3, [sp, #12]
 80051a4:	454b      	cmp	r3, r9
 80051a6:	d307      	bcc.n	80051b8 <__cvt+0xbc>
 80051a8:	9b03      	ldr	r3, [sp, #12]
 80051aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051ac:	1bdb      	subs	r3, r3, r7
 80051ae:	4638      	mov	r0, r7
 80051b0:	6013      	str	r3, [r2, #0]
 80051b2:	b004      	add	sp, #16
 80051b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b8:	1c59      	adds	r1, r3, #1
 80051ba:	9103      	str	r1, [sp, #12]
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	e7f0      	b.n	80051a2 <__cvt+0xa6>

080051c0 <__exponent>:
 80051c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051c2:	4603      	mov	r3, r0
 80051c4:	2900      	cmp	r1, #0
 80051c6:	bfb8      	it	lt
 80051c8:	4249      	neglt	r1, r1
 80051ca:	f803 2b02 	strb.w	r2, [r3], #2
 80051ce:	bfb4      	ite	lt
 80051d0:	222d      	movlt	r2, #45	; 0x2d
 80051d2:	222b      	movge	r2, #43	; 0x2b
 80051d4:	2909      	cmp	r1, #9
 80051d6:	7042      	strb	r2, [r0, #1]
 80051d8:	dd2a      	ble.n	8005230 <__exponent+0x70>
 80051da:	f10d 0207 	add.w	r2, sp, #7
 80051de:	4617      	mov	r7, r2
 80051e0:	260a      	movs	r6, #10
 80051e2:	4694      	mov	ip, r2
 80051e4:	fb91 f5f6 	sdiv	r5, r1, r6
 80051e8:	fb06 1415 	mls	r4, r6, r5, r1
 80051ec:	3430      	adds	r4, #48	; 0x30
 80051ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80051f2:	460c      	mov	r4, r1
 80051f4:	2c63      	cmp	r4, #99	; 0x63
 80051f6:	f102 32ff 	add.w	r2, r2, #4294967295
 80051fa:	4629      	mov	r1, r5
 80051fc:	dcf1      	bgt.n	80051e2 <__exponent+0x22>
 80051fe:	3130      	adds	r1, #48	; 0x30
 8005200:	f1ac 0402 	sub.w	r4, ip, #2
 8005204:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005208:	1c41      	adds	r1, r0, #1
 800520a:	4622      	mov	r2, r4
 800520c:	42ba      	cmp	r2, r7
 800520e:	d30a      	bcc.n	8005226 <__exponent+0x66>
 8005210:	f10d 0209 	add.w	r2, sp, #9
 8005214:	eba2 020c 	sub.w	r2, r2, ip
 8005218:	42bc      	cmp	r4, r7
 800521a:	bf88      	it	hi
 800521c:	2200      	movhi	r2, #0
 800521e:	4413      	add	r3, r2
 8005220:	1a18      	subs	r0, r3, r0
 8005222:	b003      	add	sp, #12
 8005224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005226:	f812 5b01 	ldrb.w	r5, [r2], #1
 800522a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800522e:	e7ed      	b.n	800520c <__exponent+0x4c>
 8005230:	2330      	movs	r3, #48	; 0x30
 8005232:	3130      	adds	r1, #48	; 0x30
 8005234:	7083      	strb	r3, [r0, #2]
 8005236:	70c1      	strb	r1, [r0, #3]
 8005238:	1d03      	adds	r3, r0, #4
 800523a:	e7f1      	b.n	8005220 <__exponent+0x60>

0800523c <_printf_float>:
 800523c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005240:	ed2d 8b02 	vpush	{d8}
 8005244:	b08d      	sub	sp, #52	; 0x34
 8005246:	460c      	mov	r4, r1
 8005248:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800524c:	4616      	mov	r6, r2
 800524e:	461f      	mov	r7, r3
 8005250:	4605      	mov	r5, r0
 8005252:	f000 fdb7 	bl	8005dc4 <_localeconv_r>
 8005256:	f8d0 a000 	ldr.w	sl, [r0]
 800525a:	4650      	mov	r0, sl
 800525c:	f7fb f830 	bl	80002c0 <strlen>
 8005260:	2300      	movs	r3, #0
 8005262:	930a      	str	r3, [sp, #40]	; 0x28
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	9305      	str	r3, [sp, #20]
 8005268:	f8d8 3000 	ldr.w	r3, [r8]
 800526c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005270:	3307      	adds	r3, #7
 8005272:	f023 0307 	bic.w	r3, r3, #7
 8005276:	f103 0208 	add.w	r2, r3, #8
 800527a:	f8c8 2000 	str.w	r2, [r8]
 800527e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005282:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005286:	9307      	str	r3, [sp, #28]
 8005288:	f8cd 8018 	str.w	r8, [sp, #24]
 800528c:	ee08 0a10 	vmov	s16, r0
 8005290:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005294:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005298:	4b9e      	ldr	r3, [pc, #632]	; (8005514 <_printf_float+0x2d8>)
 800529a:	f04f 32ff 	mov.w	r2, #4294967295
 800529e:	f7fb fc6d 	bl	8000b7c <__aeabi_dcmpun>
 80052a2:	bb88      	cbnz	r0, 8005308 <_printf_float+0xcc>
 80052a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80052a8:	4b9a      	ldr	r3, [pc, #616]	; (8005514 <_printf_float+0x2d8>)
 80052aa:	f04f 32ff 	mov.w	r2, #4294967295
 80052ae:	f7fb fc47 	bl	8000b40 <__aeabi_dcmple>
 80052b2:	bb48      	cbnz	r0, 8005308 <_printf_float+0xcc>
 80052b4:	2200      	movs	r2, #0
 80052b6:	2300      	movs	r3, #0
 80052b8:	4640      	mov	r0, r8
 80052ba:	4649      	mov	r1, r9
 80052bc:	f7fb fc36 	bl	8000b2c <__aeabi_dcmplt>
 80052c0:	b110      	cbz	r0, 80052c8 <_printf_float+0x8c>
 80052c2:	232d      	movs	r3, #45	; 0x2d
 80052c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052c8:	4a93      	ldr	r2, [pc, #588]	; (8005518 <_printf_float+0x2dc>)
 80052ca:	4b94      	ldr	r3, [pc, #592]	; (800551c <_printf_float+0x2e0>)
 80052cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80052d0:	bf94      	ite	ls
 80052d2:	4690      	movls	r8, r2
 80052d4:	4698      	movhi	r8, r3
 80052d6:	2303      	movs	r3, #3
 80052d8:	6123      	str	r3, [r4, #16]
 80052da:	9b05      	ldr	r3, [sp, #20]
 80052dc:	f023 0304 	bic.w	r3, r3, #4
 80052e0:	6023      	str	r3, [r4, #0]
 80052e2:	f04f 0900 	mov.w	r9, #0
 80052e6:	9700      	str	r7, [sp, #0]
 80052e8:	4633      	mov	r3, r6
 80052ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80052ec:	4621      	mov	r1, r4
 80052ee:	4628      	mov	r0, r5
 80052f0:	f000 f9da 	bl	80056a8 <_printf_common>
 80052f4:	3001      	adds	r0, #1
 80052f6:	f040 8090 	bne.w	800541a <_printf_float+0x1de>
 80052fa:	f04f 30ff 	mov.w	r0, #4294967295
 80052fe:	b00d      	add	sp, #52	; 0x34
 8005300:	ecbd 8b02 	vpop	{d8}
 8005304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005308:	4642      	mov	r2, r8
 800530a:	464b      	mov	r3, r9
 800530c:	4640      	mov	r0, r8
 800530e:	4649      	mov	r1, r9
 8005310:	f7fb fc34 	bl	8000b7c <__aeabi_dcmpun>
 8005314:	b140      	cbz	r0, 8005328 <_printf_float+0xec>
 8005316:	464b      	mov	r3, r9
 8005318:	2b00      	cmp	r3, #0
 800531a:	bfbc      	itt	lt
 800531c:	232d      	movlt	r3, #45	; 0x2d
 800531e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005322:	4a7f      	ldr	r2, [pc, #508]	; (8005520 <_printf_float+0x2e4>)
 8005324:	4b7f      	ldr	r3, [pc, #508]	; (8005524 <_printf_float+0x2e8>)
 8005326:	e7d1      	b.n	80052cc <_printf_float+0x90>
 8005328:	6863      	ldr	r3, [r4, #4]
 800532a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800532e:	9206      	str	r2, [sp, #24]
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	d13f      	bne.n	80053b4 <_printf_float+0x178>
 8005334:	2306      	movs	r3, #6
 8005336:	6063      	str	r3, [r4, #4]
 8005338:	9b05      	ldr	r3, [sp, #20]
 800533a:	6861      	ldr	r1, [r4, #4]
 800533c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005340:	2300      	movs	r3, #0
 8005342:	9303      	str	r3, [sp, #12]
 8005344:	ab0a      	add	r3, sp, #40	; 0x28
 8005346:	e9cd b301 	strd	fp, r3, [sp, #4]
 800534a:	ab09      	add	r3, sp, #36	; 0x24
 800534c:	ec49 8b10 	vmov	d0, r8, r9
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	6022      	str	r2, [r4, #0]
 8005354:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005358:	4628      	mov	r0, r5
 800535a:	f7ff fecf 	bl	80050fc <__cvt>
 800535e:	9b06      	ldr	r3, [sp, #24]
 8005360:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005362:	2b47      	cmp	r3, #71	; 0x47
 8005364:	4680      	mov	r8, r0
 8005366:	d108      	bne.n	800537a <_printf_float+0x13e>
 8005368:	1cc8      	adds	r0, r1, #3
 800536a:	db02      	blt.n	8005372 <_printf_float+0x136>
 800536c:	6863      	ldr	r3, [r4, #4]
 800536e:	4299      	cmp	r1, r3
 8005370:	dd41      	ble.n	80053f6 <_printf_float+0x1ba>
 8005372:	f1ab 0302 	sub.w	r3, fp, #2
 8005376:	fa5f fb83 	uxtb.w	fp, r3
 800537a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800537e:	d820      	bhi.n	80053c2 <_printf_float+0x186>
 8005380:	3901      	subs	r1, #1
 8005382:	465a      	mov	r2, fp
 8005384:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005388:	9109      	str	r1, [sp, #36]	; 0x24
 800538a:	f7ff ff19 	bl	80051c0 <__exponent>
 800538e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005390:	1813      	adds	r3, r2, r0
 8005392:	2a01      	cmp	r2, #1
 8005394:	4681      	mov	r9, r0
 8005396:	6123      	str	r3, [r4, #16]
 8005398:	dc02      	bgt.n	80053a0 <_printf_float+0x164>
 800539a:	6822      	ldr	r2, [r4, #0]
 800539c:	07d2      	lsls	r2, r2, #31
 800539e:	d501      	bpl.n	80053a4 <_printf_float+0x168>
 80053a0:	3301      	adds	r3, #1
 80053a2:	6123      	str	r3, [r4, #16]
 80053a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d09c      	beq.n	80052e6 <_printf_float+0xaa>
 80053ac:	232d      	movs	r3, #45	; 0x2d
 80053ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053b2:	e798      	b.n	80052e6 <_printf_float+0xaa>
 80053b4:	9a06      	ldr	r2, [sp, #24]
 80053b6:	2a47      	cmp	r2, #71	; 0x47
 80053b8:	d1be      	bne.n	8005338 <_printf_float+0xfc>
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1bc      	bne.n	8005338 <_printf_float+0xfc>
 80053be:	2301      	movs	r3, #1
 80053c0:	e7b9      	b.n	8005336 <_printf_float+0xfa>
 80053c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80053c6:	d118      	bne.n	80053fa <_printf_float+0x1be>
 80053c8:	2900      	cmp	r1, #0
 80053ca:	6863      	ldr	r3, [r4, #4]
 80053cc:	dd0b      	ble.n	80053e6 <_printf_float+0x1aa>
 80053ce:	6121      	str	r1, [r4, #16]
 80053d0:	b913      	cbnz	r3, 80053d8 <_printf_float+0x19c>
 80053d2:	6822      	ldr	r2, [r4, #0]
 80053d4:	07d0      	lsls	r0, r2, #31
 80053d6:	d502      	bpl.n	80053de <_printf_float+0x1a2>
 80053d8:	3301      	adds	r3, #1
 80053da:	440b      	add	r3, r1
 80053dc:	6123      	str	r3, [r4, #16]
 80053de:	65a1      	str	r1, [r4, #88]	; 0x58
 80053e0:	f04f 0900 	mov.w	r9, #0
 80053e4:	e7de      	b.n	80053a4 <_printf_float+0x168>
 80053e6:	b913      	cbnz	r3, 80053ee <_printf_float+0x1b2>
 80053e8:	6822      	ldr	r2, [r4, #0]
 80053ea:	07d2      	lsls	r2, r2, #31
 80053ec:	d501      	bpl.n	80053f2 <_printf_float+0x1b6>
 80053ee:	3302      	adds	r3, #2
 80053f0:	e7f4      	b.n	80053dc <_printf_float+0x1a0>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e7f2      	b.n	80053dc <_printf_float+0x1a0>
 80053f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80053fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053fc:	4299      	cmp	r1, r3
 80053fe:	db05      	blt.n	800540c <_printf_float+0x1d0>
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	6121      	str	r1, [r4, #16]
 8005404:	07d8      	lsls	r0, r3, #31
 8005406:	d5ea      	bpl.n	80053de <_printf_float+0x1a2>
 8005408:	1c4b      	adds	r3, r1, #1
 800540a:	e7e7      	b.n	80053dc <_printf_float+0x1a0>
 800540c:	2900      	cmp	r1, #0
 800540e:	bfd4      	ite	le
 8005410:	f1c1 0202 	rsble	r2, r1, #2
 8005414:	2201      	movgt	r2, #1
 8005416:	4413      	add	r3, r2
 8005418:	e7e0      	b.n	80053dc <_printf_float+0x1a0>
 800541a:	6823      	ldr	r3, [r4, #0]
 800541c:	055a      	lsls	r2, r3, #21
 800541e:	d407      	bmi.n	8005430 <_printf_float+0x1f4>
 8005420:	6923      	ldr	r3, [r4, #16]
 8005422:	4642      	mov	r2, r8
 8005424:	4631      	mov	r1, r6
 8005426:	4628      	mov	r0, r5
 8005428:	47b8      	blx	r7
 800542a:	3001      	adds	r0, #1
 800542c:	d12c      	bne.n	8005488 <_printf_float+0x24c>
 800542e:	e764      	b.n	80052fa <_printf_float+0xbe>
 8005430:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005434:	f240 80e0 	bls.w	80055f8 <_printf_float+0x3bc>
 8005438:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800543c:	2200      	movs	r2, #0
 800543e:	2300      	movs	r3, #0
 8005440:	f7fb fb6a 	bl	8000b18 <__aeabi_dcmpeq>
 8005444:	2800      	cmp	r0, #0
 8005446:	d034      	beq.n	80054b2 <_printf_float+0x276>
 8005448:	4a37      	ldr	r2, [pc, #220]	; (8005528 <_printf_float+0x2ec>)
 800544a:	2301      	movs	r3, #1
 800544c:	4631      	mov	r1, r6
 800544e:	4628      	mov	r0, r5
 8005450:	47b8      	blx	r7
 8005452:	3001      	adds	r0, #1
 8005454:	f43f af51 	beq.w	80052fa <_printf_float+0xbe>
 8005458:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800545c:	429a      	cmp	r2, r3
 800545e:	db02      	blt.n	8005466 <_printf_float+0x22a>
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	07d8      	lsls	r0, r3, #31
 8005464:	d510      	bpl.n	8005488 <_printf_float+0x24c>
 8005466:	ee18 3a10 	vmov	r3, s16
 800546a:	4652      	mov	r2, sl
 800546c:	4631      	mov	r1, r6
 800546e:	4628      	mov	r0, r5
 8005470:	47b8      	blx	r7
 8005472:	3001      	adds	r0, #1
 8005474:	f43f af41 	beq.w	80052fa <_printf_float+0xbe>
 8005478:	f04f 0800 	mov.w	r8, #0
 800547c:	f104 091a 	add.w	r9, r4, #26
 8005480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005482:	3b01      	subs	r3, #1
 8005484:	4543      	cmp	r3, r8
 8005486:	dc09      	bgt.n	800549c <_printf_float+0x260>
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	079b      	lsls	r3, r3, #30
 800548c:	f100 8107 	bmi.w	800569e <_printf_float+0x462>
 8005490:	68e0      	ldr	r0, [r4, #12]
 8005492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005494:	4298      	cmp	r0, r3
 8005496:	bfb8      	it	lt
 8005498:	4618      	movlt	r0, r3
 800549a:	e730      	b.n	80052fe <_printf_float+0xc2>
 800549c:	2301      	movs	r3, #1
 800549e:	464a      	mov	r2, r9
 80054a0:	4631      	mov	r1, r6
 80054a2:	4628      	mov	r0, r5
 80054a4:	47b8      	blx	r7
 80054a6:	3001      	adds	r0, #1
 80054a8:	f43f af27 	beq.w	80052fa <_printf_float+0xbe>
 80054ac:	f108 0801 	add.w	r8, r8, #1
 80054b0:	e7e6      	b.n	8005480 <_printf_float+0x244>
 80054b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	dc39      	bgt.n	800552c <_printf_float+0x2f0>
 80054b8:	4a1b      	ldr	r2, [pc, #108]	; (8005528 <_printf_float+0x2ec>)
 80054ba:	2301      	movs	r3, #1
 80054bc:	4631      	mov	r1, r6
 80054be:	4628      	mov	r0, r5
 80054c0:	47b8      	blx	r7
 80054c2:	3001      	adds	r0, #1
 80054c4:	f43f af19 	beq.w	80052fa <_printf_float+0xbe>
 80054c8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80054cc:	4313      	orrs	r3, r2
 80054ce:	d102      	bne.n	80054d6 <_printf_float+0x29a>
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	07d9      	lsls	r1, r3, #31
 80054d4:	d5d8      	bpl.n	8005488 <_printf_float+0x24c>
 80054d6:	ee18 3a10 	vmov	r3, s16
 80054da:	4652      	mov	r2, sl
 80054dc:	4631      	mov	r1, r6
 80054de:	4628      	mov	r0, r5
 80054e0:	47b8      	blx	r7
 80054e2:	3001      	adds	r0, #1
 80054e4:	f43f af09 	beq.w	80052fa <_printf_float+0xbe>
 80054e8:	f04f 0900 	mov.w	r9, #0
 80054ec:	f104 0a1a 	add.w	sl, r4, #26
 80054f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054f2:	425b      	negs	r3, r3
 80054f4:	454b      	cmp	r3, r9
 80054f6:	dc01      	bgt.n	80054fc <_printf_float+0x2c0>
 80054f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054fa:	e792      	b.n	8005422 <_printf_float+0x1e6>
 80054fc:	2301      	movs	r3, #1
 80054fe:	4652      	mov	r2, sl
 8005500:	4631      	mov	r1, r6
 8005502:	4628      	mov	r0, r5
 8005504:	47b8      	blx	r7
 8005506:	3001      	adds	r0, #1
 8005508:	f43f aef7 	beq.w	80052fa <_printf_float+0xbe>
 800550c:	f109 0901 	add.w	r9, r9, #1
 8005510:	e7ee      	b.n	80054f0 <_printf_float+0x2b4>
 8005512:	bf00      	nop
 8005514:	7fefffff 	.word	0x7fefffff
 8005518:	08007bd4 	.word	0x08007bd4
 800551c:	08007bd8 	.word	0x08007bd8
 8005520:	08007bdc 	.word	0x08007bdc
 8005524:	08007be0 	.word	0x08007be0
 8005528:	08007be4 	.word	0x08007be4
 800552c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800552e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005530:	429a      	cmp	r2, r3
 8005532:	bfa8      	it	ge
 8005534:	461a      	movge	r2, r3
 8005536:	2a00      	cmp	r2, #0
 8005538:	4691      	mov	r9, r2
 800553a:	dc37      	bgt.n	80055ac <_printf_float+0x370>
 800553c:	f04f 0b00 	mov.w	fp, #0
 8005540:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005544:	f104 021a 	add.w	r2, r4, #26
 8005548:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800554a:	9305      	str	r3, [sp, #20]
 800554c:	eba3 0309 	sub.w	r3, r3, r9
 8005550:	455b      	cmp	r3, fp
 8005552:	dc33      	bgt.n	80055bc <_printf_float+0x380>
 8005554:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005558:	429a      	cmp	r2, r3
 800555a:	db3b      	blt.n	80055d4 <_printf_float+0x398>
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	07da      	lsls	r2, r3, #31
 8005560:	d438      	bmi.n	80055d4 <_printf_float+0x398>
 8005562:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005566:	eba2 0903 	sub.w	r9, r2, r3
 800556a:	9b05      	ldr	r3, [sp, #20]
 800556c:	1ad2      	subs	r2, r2, r3
 800556e:	4591      	cmp	r9, r2
 8005570:	bfa8      	it	ge
 8005572:	4691      	movge	r9, r2
 8005574:	f1b9 0f00 	cmp.w	r9, #0
 8005578:	dc35      	bgt.n	80055e6 <_printf_float+0x3aa>
 800557a:	f04f 0800 	mov.w	r8, #0
 800557e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005582:	f104 0a1a 	add.w	sl, r4, #26
 8005586:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800558a:	1a9b      	subs	r3, r3, r2
 800558c:	eba3 0309 	sub.w	r3, r3, r9
 8005590:	4543      	cmp	r3, r8
 8005592:	f77f af79 	ble.w	8005488 <_printf_float+0x24c>
 8005596:	2301      	movs	r3, #1
 8005598:	4652      	mov	r2, sl
 800559a:	4631      	mov	r1, r6
 800559c:	4628      	mov	r0, r5
 800559e:	47b8      	blx	r7
 80055a0:	3001      	adds	r0, #1
 80055a2:	f43f aeaa 	beq.w	80052fa <_printf_float+0xbe>
 80055a6:	f108 0801 	add.w	r8, r8, #1
 80055aa:	e7ec      	b.n	8005586 <_printf_float+0x34a>
 80055ac:	4613      	mov	r3, r2
 80055ae:	4631      	mov	r1, r6
 80055b0:	4642      	mov	r2, r8
 80055b2:	4628      	mov	r0, r5
 80055b4:	47b8      	blx	r7
 80055b6:	3001      	adds	r0, #1
 80055b8:	d1c0      	bne.n	800553c <_printf_float+0x300>
 80055ba:	e69e      	b.n	80052fa <_printf_float+0xbe>
 80055bc:	2301      	movs	r3, #1
 80055be:	4631      	mov	r1, r6
 80055c0:	4628      	mov	r0, r5
 80055c2:	9205      	str	r2, [sp, #20]
 80055c4:	47b8      	blx	r7
 80055c6:	3001      	adds	r0, #1
 80055c8:	f43f ae97 	beq.w	80052fa <_printf_float+0xbe>
 80055cc:	9a05      	ldr	r2, [sp, #20]
 80055ce:	f10b 0b01 	add.w	fp, fp, #1
 80055d2:	e7b9      	b.n	8005548 <_printf_float+0x30c>
 80055d4:	ee18 3a10 	vmov	r3, s16
 80055d8:	4652      	mov	r2, sl
 80055da:	4631      	mov	r1, r6
 80055dc:	4628      	mov	r0, r5
 80055de:	47b8      	blx	r7
 80055e0:	3001      	adds	r0, #1
 80055e2:	d1be      	bne.n	8005562 <_printf_float+0x326>
 80055e4:	e689      	b.n	80052fa <_printf_float+0xbe>
 80055e6:	9a05      	ldr	r2, [sp, #20]
 80055e8:	464b      	mov	r3, r9
 80055ea:	4442      	add	r2, r8
 80055ec:	4631      	mov	r1, r6
 80055ee:	4628      	mov	r0, r5
 80055f0:	47b8      	blx	r7
 80055f2:	3001      	adds	r0, #1
 80055f4:	d1c1      	bne.n	800557a <_printf_float+0x33e>
 80055f6:	e680      	b.n	80052fa <_printf_float+0xbe>
 80055f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055fa:	2a01      	cmp	r2, #1
 80055fc:	dc01      	bgt.n	8005602 <_printf_float+0x3c6>
 80055fe:	07db      	lsls	r3, r3, #31
 8005600:	d53a      	bpl.n	8005678 <_printf_float+0x43c>
 8005602:	2301      	movs	r3, #1
 8005604:	4642      	mov	r2, r8
 8005606:	4631      	mov	r1, r6
 8005608:	4628      	mov	r0, r5
 800560a:	47b8      	blx	r7
 800560c:	3001      	adds	r0, #1
 800560e:	f43f ae74 	beq.w	80052fa <_printf_float+0xbe>
 8005612:	ee18 3a10 	vmov	r3, s16
 8005616:	4652      	mov	r2, sl
 8005618:	4631      	mov	r1, r6
 800561a:	4628      	mov	r0, r5
 800561c:	47b8      	blx	r7
 800561e:	3001      	adds	r0, #1
 8005620:	f43f ae6b 	beq.w	80052fa <_printf_float+0xbe>
 8005624:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005628:	2200      	movs	r2, #0
 800562a:	2300      	movs	r3, #0
 800562c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005630:	f7fb fa72 	bl	8000b18 <__aeabi_dcmpeq>
 8005634:	b9d8      	cbnz	r0, 800566e <_printf_float+0x432>
 8005636:	f10a 33ff 	add.w	r3, sl, #4294967295
 800563a:	f108 0201 	add.w	r2, r8, #1
 800563e:	4631      	mov	r1, r6
 8005640:	4628      	mov	r0, r5
 8005642:	47b8      	blx	r7
 8005644:	3001      	adds	r0, #1
 8005646:	d10e      	bne.n	8005666 <_printf_float+0x42a>
 8005648:	e657      	b.n	80052fa <_printf_float+0xbe>
 800564a:	2301      	movs	r3, #1
 800564c:	4652      	mov	r2, sl
 800564e:	4631      	mov	r1, r6
 8005650:	4628      	mov	r0, r5
 8005652:	47b8      	blx	r7
 8005654:	3001      	adds	r0, #1
 8005656:	f43f ae50 	beq.w	80052fa <_printf_float+0xbe>
 800565a:	f108 0801 	add.w	r8, r8, #1
 800565e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005660:	3b01      	subs	r3, #1
 8005662:	4543      	cmp	r3, r8
 8005664:	dcf1      	bgt.n	800564a <_printf_float+0x40e>
 8005666:	464b      	mov	r3, r9
 8005668:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800566c:	e6da      	b.n	8005424 <_printf_float+0x1e8>
 800566e:	f04f 0800 	mov.w	r8, #0
 8005672:	f104 0a1a 	add.w	sl, r4, #26
 8005676:	e7f2      	b.n	800565e <_printf_float+0x422>
 8005678:	2301      	movs	r3, #1
 800567a:	4642      	mov	r2, r8
 800567c:	e7df      	b.n	800563e <_printf_float+0x402>
 800567e:	2301      	movs	r3, #1
 8005680:	464a      	mov	r2, r9
 8005682:	4631      	mov	r1, r6
 8005684:	4628      	mov	r0, r5
 8005686:	47b8      	blx	r7
 8005688:	3001      	adds	r0, #1
 800568a:	f43f ae36 	beq.w	80052fa <_printf_float+0xbe>
 800568e:	f108 0801 	add.w	r8, r8, #1
 8005692:	68e3      	ldr	r3, [r4, #12]
 8005694:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005696:	1a5b      	subs	r3, r3, r1
 8005698:	4543      	cmp	r3, r8
 800569a:	dcf0      	bgt.n	800567e <_printf_float+0x442>
 800569c:	e6f8      	b.n	8005490 <_printf_float+0x254>
 800569e:	f04f 0800 	mov.w	r8, #0
 80056a2:	f104 0919 	add.w	r9, r4, #25
 80056a6:	e7f4      	b.n	8005692 <_printf_float+0x456>

080056a8 <_printf_common>:
 80056a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056ac:	4616      	mov	r6, r2
 80056ae:	4699      	mov	r9, r3
 80056b0:	688a      	ldr	r2, [r1, #8]
 80056b2:	690b      	ldr	r3, [r1, #16]
 80056b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056b8:	4293      	cmp	r3, r2
 80056ba:	bfb8      	it	lt
 80056bc:	4613      	movlt	r3, r2
 80056be:	6033      	str	r3, [r6, #0]
 80056c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056c4:	4607      	mov	r7, r0
 80056c6:	460c      	mov	r4, r1
 80056c8:	b10a      	cbz	r2, 80056ce <_printf_common+0x26>
 80056ca:	3301      	adds	r3, #1
 80056cc:	6033      	str	r3, [r6, #0]
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	0699      	lsls	r1, r3, #26
 80056d2:	bf42      	ittt	mi
 80056d4:	6833      	ldrmi	r3, [r6, #0]
 80056d6:	3302      	addmi	r3, #2
 80056d8:	6033      	strmi	r3, [r6, #0]
 80056da:	6825      	ldr	r5, [r4, #0]
 80056dc:	f015 0506 	ands.w	r5, r5, #6
 80056e0:	d106      	bne.n	80056f0 <_printf_common+0x48>
 80056e2:	f104 0a19 	add.w	sl, r4, #25
 80056e6:	68e3      	ldr	r3, [r4, #12]
 80056e8:	6832      	ldr	r2, [r6, #0]
 80056ea:	1a9b      	subs	r3, r3, r2
 80056ec:	42ab      	cmp	r3, r5
 80056ee:	dc26      	bgt.n	800573e <_printf_common+0x96>
 80056f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056f4:	1e13      	subs	r3, r2, #0
 80056f6:	6822      	ldr	r2, [r4, #0]
 80056f8:	bf18      	it	ne
 80056fa:	2301      	movne	r3, #1
 80056fc:	0692      	lsls	r2, r2, #26
 80056fe:	d42b      	bmi.n	8005758 <_printf_common+0xb0>
 8005700:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005704:	4649      	mov	r1, r9
 8005706:	4638      	mov	r0, r7
 8005708:	47c0      	blx	r8
 800570a:	3001      	adds	r0, #1
 800570c:	d01e      	beq.n	800574c <_printf_common+0xa4>
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	6922      	ldr	r2, [r4, #16]
 8005712:	f003 0306 	and.w	r3, r3, #6
 8005716:	2b04      	cmp	r3, #4
 8005718:	bf02      	ittt	eq
 800571a:	68e5      	ldreq	r5, [r4, #12]
 800571c:	6833      	ldreq	r3, [r6, #0]
 800571e:	1aed      	subeq	r5, r5, r3
 8005720:	68a3      	ldr	r3, [r4, #8]
 8005722:	bf0c      	ite	eq
 8005724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005728:	2500      	movne	r5, #0
 800572a:	4293      	cmp	r3, r2
 800572c:	bfc4      	itt	gt
 800572e:	1a9b      	subgt	r3, r3, r2
 8005730:	18ed      	addgt	r5, r5, r3
 8005732:	2600      	movs	r6, #0
 8005734:	341a      	adds	r4, #26
 8005736:	42b5      	cmp	r5, r6
 8005738:	d11a      	bne.n	8005770 <_printf_common+0xc8>
 800573a:	2000      	movs	r0, #0
 800573c:	e008      	b.n	8005750 <_printf_common+0xa8>
 800573e:	2301      	movs	r3, #1
 8005740:	4652      	mov	r2, sl
 8005742:	4649      	mov	r1, r9
 8005744:	4638      	mov	r0, r7
 8005746:	47c0      	blx	r8
 8005748:	3001      	adds	r0, #1
 800574a:	d103      	bne.n	8005754 <_printf_common+0xac>
 800574c:	f04f 30ff 	mov.w	r0, #4294967295
 8005750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005754:	3501      	adds	r5, #1
 8005756:	e7c6      	b.n	80056e6 <_printf_common+0x3e>
 8005758:	18e1      	adds	r1, r4, r3
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	2030      	movs	r0, #48	; 0x30
 800575e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005762:	4422      	add	r2, r4
 8005764:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005768:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800576c:	3302      	adds	r3, #2
 800576e:	e7c7      	b.n	8005700 <_printf_common+0x58>
 8005770:	2301      	movs	r3, #1
 8005772:	4622      	mov	r2, r4
 8005774:	4649      	mov	r1, r9
 8005776:	4638      	mov	r0, r7
 8005778:	47c0      	blx	r8
 800577a:	3001      	adds	r0, #1
 800577c:	d0e6      	beq.n	800574c <_printf_common+0xa4>
 800577e:	3601      	adds	r6, #1
 8005780:	e7d9      	b.n	8005736 <_printf_common+0x8e>
	...

08005784 <_printf_i>:
 8005784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005788:	7e0f      	ldrb	r7, [r1, #24]
 800578a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800578c:	2f78      	cmp	r7, #120	; 0x78
 800578e:	4691      	mov	r9, r2
 8005790:	4680      	mov	r8, r0
 8005792:	460c      	mov	r4, r1
 8005794:	469a      	mov	sl, r3
 8005796:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800579a:	d807      	bhi.n	80057ac <_printf_i+0x28>
 800579c:	2f62      	cmp	r7, #98	; 0x62
 800579e:	d80a      	bhi.n	80057b6 <_printf_i+0x32>
 80057a0:	2f00      	cmp	r7, #0
 80057a2:	f000 80d4 	beq.w	800594e <_printf_i+0x1ca>
 80057a6:	2f58      	cmp	r7, #88	; 0x58
 80057a8:	f000 80c0 	beq.w	800592c <_printf_i+0x1a8>
 80057ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057b4:	e03a      	b.n	800582c <_printf_i+0xa8>
 80057b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057ba:	2b15      	cmp	r3, #21
 80057bc:	d8f6      	bhi.n	80057ac <_printf_i+0x28>
 80057be:	a101      	add	r1, pc, #4	; (adr r1, 80057c4 <_printf_i+0x40>)
 80057c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057c4:	0800581d 	.word	0x0800581d
 80057c8:	08005831 	.word	0x08005831
 80057cc:	080057ad 	.word	0x080057ad
 80057d0:	080057ad 	.word	0x080057ad
 80057d4:	080057ad 	.word	0x080057ad
 80057d8:	080057ad 	.word	0x080057ad
 80057dc:	08005831 	.word	0x08005831
 80057e0:	080057ad 	.word	0x080057ad
 80057e4:	080057ad 	.word	0x080057ad
 80057e8:	080057ad 	.word	0x080057ad
 80057ec:	080057ad 	.word	0x080057ad
 80057f0:	08005935 	.word	0x08005935
 80057f4:	0800585d 	.word	0x0800585d
 80057f8:	080058ef 	.word	0x080058ef
 80057fc:	080057ad 	.word	0x080057ad
 8005800:	080057ad 	.word	0x080057ad
 8005804:	08005957 	.word	0x08005957
 8005808:	080057ad 	.word	0x080057ad
 800580c:	0800585d 	.word	0x0800585d
 8005810:	080057ad 	.word	0x080057ad
 8005814:	080057ad 	.word	0x080057ad
 8005818:	080058f7 	.word	0x080058f7
 800581c:	682b      	ldr	r3, [r5, #0]
 800581e:	1d1a      	adds	r2, r3, #4
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	602a      	str	r2, [r5, #0]
 8005824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005828:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800582c:	2301      	movs	r3, #1
 800582e:	e09f      	b.n	8005970 <_printf_i+0x1ec>
 8005830:	6820      	ldr	r0, [r4, #0]
 8005832:	682b      	ldr	r3, [r5, #0]
 8005834:	0607      	lsls	r7, r0, #24
 8005836:	f103 0104 	add.w	r1, r3, #4
 800583a:	6029      	str	r1, [r5, #0]
 800583c:	d501      	bpl.n	8005842 <_printf_i+0xbe>
 800583e:	681e      	ldr	r6, [r3, #0]
 8005840:	e003      	b.n	800584a <_printf_i+0xc6>
 8005842:	0646      	lsls	r6, r0, #25
 8005844:	d5fb      	bpl.n	800583e <_printf_i+0xba>
 8005846:	f9b3 6000 	ldrsh.w	r6, [r3]
 800584a:	2e00      	cmp	r6, #0
 800584c:	da03      	bge.n	8005856 <_printf_i+0xd2>
 800584e:	232d      	movs	r3, #45	; 0x2d
 8005850:	4276      	negs	r6, r6
 8005852:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005856:	485a      	ldr	r0, [pc, #360]	; (80059c0 <_printf_i+0x23c>)
 8005858:	230a      	movs	r3, #10
 800585a:	e012      	b.n	8005882 <_printf_i+0xfe>
 800585c:	682b      	ldr	r3, [r5, #0]
 800585e:	6820      	ldr	r0, [r4, #0]
 8005860:	1d19      	adds	r1, r3, #4
 8005862:	6029      	str	r1, [r5, #0]
 8005864:	0605      	lsls	r5, r0, #24
 8005866:	d501      	bpl.n	800586c <_printf_i+0xe8>
 8005868:	681e      	ldr	r6, [r3, #0]
 800586a:	e002      	b.n	8005872 <_printf_i+0xee>
 800586c:	0641      	lsls	r1, r0, #25
 800586e:	d5fb      	bpl.n	8005868 <_printf_i+0xe4>
 8005870:	881e      	ldrh	r6, [r3, #0]
 8005872:	4853      	ldr	r0, [pc, #332]	; (80059c0 <_printf_i+0x23c>)
 8005874:	2f6f      	cmp	r7, #111	; 0x6f
 8005876:	bf0c      	ite	eq
 8005878:	2308      	moveq	r3, #8
 800587a:	230a      	movne	r3, #10
 800587c:	2100      	movs	r1, #0
 800587e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005882:	6865      	ldr	r5, [r4, #4]
 8005884:	60a5      	str	r5, [r4, #8]
 8005886:	2d00      	cmp	r5, #0
 8005888:	bfa2      	ittt	ge
 800588a:	6821      	ldrge	r1, [r4, #0]
 800588c:	f021 0104 	bicge.w	r1, r1, #4
 8005890:	6021      	strge	r1, [r4, #0]
 8005892:	b90e      	cbnz	r6, 8005898 <_printf_i+0x114>
 8005894:	2d00      	cmp	r5, #0
 8005896:	d04b      	beq.n	8005930 <_printf_i+0x1ac>
 8005898:	4615      	mov	r5, r2
 800589a:	fbb6 f1f3 	udiv	r1, r6, r3
 800589e:	fb03 6711 	mls	r7, r3, r1, r6
 80058a2:	5dc7      	ldrb	r7, [r0, r7]
 80058a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058a8:	4637      	mov	r7, r6
 80058aa:	42bb      	cmp	r3, r7
 80058ac:	460e      	mov	r6, r1
 80058ae:	d9f4      	bls.n	800589a <_printf_i+0x116>
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d10b      	bne.n	80058cc <_printf_i+0x148>
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	07de      	lsls	r6, r3, #31
 80058b8:	d508      	bpl.n	80058cc <_printf_i+0x148>
 80058ba:	6923      	ldr	r3, [r4, #16]
 80058bc:	6861      	ldr	r1, [r4, #4]
 80058be:	4299      	cmp	r1, r3
 80058c0:	bfde      	ittt	le
 80058c2:	2330      	movle	r3, #48	; 0x30
 80058c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058cc:	1b52      	subs	r2, r2, r5
 80058ce:	6122      	str	r2, [r4, #16]
 80058d0:	f8cd a000 	str.w	sl, [sp]
 80058d4:	464b      	mov	r3, r9
 80058d6:	aa03      	add	r2, sp, #12
 80058d8:	4621      	mov	r1, r4
 80058da:	4640      	mov	r0, r8
 80058dc:	f7ff fee4 	bl	80056a8 <_printf_common>
 80058e0:	3001      	adds	r0, #1
 80058e2:	d14a      	bne.n	800597a <_printf_i+0x1f6>
 80058e4:	f04f 30ff 	mov.w	r0, #4294967295
 80058e8:	b004      	add	sp, #16
 80058ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	f043 0320 	orr.w	r3, r3, #32
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	4833      	ldr	r0, [pc, #204]	; (80059c4 <_printf_i+0x240>)
 80058f8:	2778      	movs	r7, #120	; 0x78
 80058fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	6829      	ldr	r1, [r5, #0]
 8005902:	061f      	lsls	r7, r3, #24
 8005904:	f851 6b04 	ldr.w	r6, [r1], #4
 8005908:	d402      	bmi.n	8005910 <_printf_i+0x18c>
 800590a:	065f      	lsls	r7, r3, #25
 800590c:	bf48      	it	mi
 800590e:	b2b6      	uxthmi	r6, r6
 8005910:	07df      	lsls	r7, r3, #31
 8005912:	bf48      	it	mi
 8005914:	f043 0320 	orrmi.w	r3, r3, #32
 8005918:	6029      	str	r1, [r5, #0]
 800591a:	bf48      	it	mi
 800591c:	6023      	strmi	r3, [r4, #0]
 800591e:	b91e      	cbnz	r6, 8005928 <_printf_i+0x1a4>
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	f023 0320 	bic.w	r3, r3, #32
 8005926:	6023      	str	r3, [r4, #0]
 8005928:	2310      	movs	r3, #16
 800592a:	e7a7      	b.n	800587c <_printf_i+0xf8>
 800592c:	4824      	ldr	r0, [pc, #144]	; (80059c0 <_printf_i+0x23c>)
 800592e:	e7e4      	b.n	80058fa <_printf_i+0x176>
 8005930:	4615      	mov	r5, r2
 8005932:	e7bd      	b.n	80058b0 <_printf_i+0x12c>
 8005934:	682b      	ldr	r3, [r5, #0]
 8005936:	6826      	ldr	r6, [r4, #0]
 8005938:	6961      	ldr	r1, [r4, #20]
 800593a:	1d18      	adds	r0, r3, #4
 800593c:	6028      	str	r0, [r5, #0]
 800593e:	0635      	lsls	r5, r6, #24
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	d501      	bpl.n	8005948 <_printf_i+0x1c4>
 8005944:	6019      	str	r1, [r3, #0]
 8005946:	e002      	b.n	800594e <_printf_i+0x1ca>
 8005948:	0670      	lsls	r0, r6, #25
 800594a:	d5fb      	bpl.n	8005944 <_printf_i+0x1c0>
 800594c:	8019      	strh	r1, [r3, #0]
 800594e:	2300      	movs	r3, #0
 8005950:	6123      	str	r3, [r4, #16]
 8005952:	4615      	mov	r5, r2
 8005954:	e7bc      	b.n	80058d0 <_printf_i+0x14c>
 8005956:	682b      	ldr	r3, [r5, #0]
 8005958:	1d1a      	adds	r2, r3, #4
 800595a:	602a      	str	r2, [r5, #0]
 800595c:	681d      	ldr	r5, [r3, #0]
 800595e:	6862      	ldr	r2, [r4, #4]
 8005960:	2100      	movs	r1, #0
 8005962:	4628      	mov	r0, r5
 8005964:	f7fa fc5c 	bl	8000220 <memchr>
 8005968:	b108      	cbz	r0, 800596e <_printf_i+0x1ea>
 800596a:	1b40      	subs	r0, r0, r5
 800596c:	6060      	str	r0, [r4, #4]
 800596e:	6863      	ldr	r3, [r4, #4]
 8005970:	6123      	str	r3, [r4, #16]
 8005972:	2300      	movs	r3, #0
 8005974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005978:	e7aa      	b.n	80058d0 <_printf_i+0x14c>
 800597a:	6923      	ldr	r3, [r4, #16]
 800597c:	462a      	mov	r2, r5
 800597e:	4649      	mov	r1, r9
 8005980:	4640      	mov	r0, r8
 8005982:	47d0      	blx	sl
 8005984:	3001      	adds	r0, #1
 8005986:	d0ad      	beq.n	80058e4 <_printf_i+0x160>
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	079b      	lsls	r3, r3, #30
 800598c:	d413      	bmi.n	80059b6 <_printf_i+0x232>
 800598e:	68e0      	ldr	r0, [r4, #12]
 8005990:	9b03      	ldr	r3, [sp, #12]
 8005992:	4298      	cmp	r0, r3
 8005994:	bfb8      	it	lt
 8005996:	4618      	movlt	r0, r3
 8005998:	e7a6      	b.n	80058e8 <_printf_i+0x164>
 800599a:	2301      	movs	r3, #1
 800599c:	4632      	mov	r2, r6
 800599e:	4649      	mov	r1, r9
 80059a0:	4640      	mov	r0, r8
 80059a2:	47d0      	blx	sl
 80059a4:	3001      	adds	r0, #1
 80059a6:	d09d      	beq.n	80058e4 <_printf_i+0x160>
 80059a8:	3501      	adds	r5, #1
 80059aa:	68e3      	ldr	r3, [r4, #12]
 80059ac:	9903      	ldr	r1, [sp, #12]
 80059ae:	1a5b      	subs	r3, r3, r1
 80059b0:	42ab      	cmp	r3, r5
 80059b2:	dcf2      	bgt.n	800599a <_printf_i+0x216>
 80059b4:	e7eb      	b.n	800598e <_printf_i+0x20a>
 80059b6:	2500      	movs	r5, #0
 80059b8:	f104 0619 	add.w	r6, r4, #25
 80059bc:	e7f5      	b.n	80059aa <_printf_i+0x226>
 80059be:	bf00      	nop
 80059c0:	08007be6 	.word	0x08007be6
 80059c4:	08007bf7 	.word	0x08007bf7

080059c8 <std>:
 80059c8:	2300      	movs	r3, #0
 80059ca:	b510      	push	{r4, lr}
 80059cc:	4604      	mov	r4, r0
 80059ce:	e9c0 3300 	strd	r3, r3, [r0]
 80059d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059d6:	6083      	str	r3, [r0, #8]
 80059d8:	8181      	strh	r1, [r0, #12]
 80059da:	6643      	str	r3, [r0, #100]	; 0x64
 80059dc:	81c2      	strh	r2, [r0, #14]
 80059de:	6183      	str	r3, [r0, #24]
 80059e0:	4619      	mov	r1, r3
 80059e2:	2208      	movs	r2, #8
 80059e4:	305c      	adds	r0, #92	; 0x5c
 80059e6:	f000 f9e5 	bl	8005db4 <memset>
 80059ea:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <std+0x38>)
 80059ec:	6263      	str	r3, [r4, #36]	; 0x24
 80059ee:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <std+0x3c>)
 80059f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80059f2:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <std+0x40>)
 80059f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059f6:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <std+0x44>)
 80059f8:	6224      	str	r4, [r4, #32]
 80059fa:	6323      	str	r3, [r4, #48]	; 0x30
 80059fc:	bd10      	pop	{r4, pc}
 80059fe:	bf00      	nop
 8005a00:	08005c05 	.word	0x08005c05
 8005a04:	08005c27 	.word	0x08005c27
 8005a08:	08005c5f 	.word	0x08005c5f
 8005a0c:	08005c83 	.word	0x08005c83

08005a10 <stdio_exit_handler>:
 8005a10:	4a02      	ldr	r2, [pc, #8]	; (8005a1c <stdio_exit_handler+0xc>)
 8005a12:	4903      	ldr	r1, [pc, #12]	; (8005a20 <stdio_exit_handler+0x10>)
 8005a14:	4803      	ldr	r0, [pc, #12]	; (8005a24 <stdio_exit_handler+0x14>)
 8005a16:	f000 b869 	b.w	8005aec <_fwalk_sglue>
 8005a1a:	bf00      	nop
 8005a1c:	2000000c 	.word	0x2000000c
 8005a20:	08007831 	.word	0x08007831
 8005a24:	20000018 	.word	0x20000018

08005a28 <cleanup_stdio>:
 8005a28:	6841      	ldr	r1, [r0, #4]
 8005a2a:	4b0c      	ldr	r3, [pc, #48]	; (8005a5c <cleanup_stdio+0x34>)
 8005a2c:	4299      	cmp	r1, r3
 8005a2e:	b510      	push	{r4, lr}
 8005a30:	4604      	mov	r4, r0
 8005a32:	d001      	beq.n	8005a38 <cleanup_stdio+0x10>
 8005a34:	f001 fefc 	bl	8007830 <_fflush_r>
 8005a38:	68a1      	ldr	r1, [r4, #8]
 8005a3a:	4b09      	ldr	r3, [pc, #36]	; (8005a60 <cleanup_stdio+0x38>)
 8005a3c:	4299      	cmp	r1, r3
 8005a3e:	d002      	beq.n	8005a46 <cleanup_stdio+0x1e>
 8005a40:	4620      	mov	r0, r4
 8005a42:	f001 fef5 	bl	8007830 <_fflush_r>
 8005a46:	68e1      	ldr	r1, [r4, #12]
 8005a48:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <cleanup_stdio+0x3c>)
 8005a4a:	4299      	cmp	r1, r3
 8005a4c:	d004      	beq.n	8005a58 <cleanup_stdio+0x30>
 8005a4e:	4620      	mov	r0, r4
 8005a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a54:	f001 beec 	b.w	8007830 <_fflush_r>
 8005a58:	bd10      	pop	{r4, pc}
 8005a5a:	bf00      	nop
 8005a5c:	2000032c 	.word	0x2000032c
 8005a60:	20000394 	.word	0x20000394
 8005a64:	200003fc 	.word	0x200003fc

08005a68 <global_stdio_init.part.0>:
 8005a68:	b510      	push	{r4, lr}
 8005a6a:	4b0b      	ldr	r3, [pc, #44]	; (8005a98 <global_stdio_init.part.0+0x30>)
 8005a6c:	4c0b      	ldr	r4, [pc, #44]	; (8005a9c <global_stdio_init.part.0+0x34>)
 8005a6e:	4a0c      	ldr	r2, [pc, #48]	; (8005aa0 <global_stdio_init.part.0+0x38>)
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	4620      	mov	r0, r4
 8005a74:	2200      	movs	r2, #0
 8005a76:	2104      	movs	r1, #4
 8005a78:	f7ff ffa6 	bl	80059c8 <std>
 8005a7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005a80:	2201      	movs	r2, #1
 8005a82:	2109      	movs	r1, #9
 8005a84:	f7ff ffa0 	bl	80059c8 <std>
 8005a88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a92:	2112      	movs	r1, #18
 8005a94:	f7ff bf98 	b.w	80059c8 <std>
 8005a98:	20000464 	.word	0x20000464
 8005a9c:	2000032c 	.word	0x2000032c
 8005aa0:	08005a11 	.word	0x08005a11

08005aa4 <__sfp_lock_acquire>:
 8005aa4:	4801      	ldr	r0, [pc, #4]	; (8005aac <__sfp_lock_acquire+0x8>)
 8005aa6:	f000 ba01 	b.w	8005eac <__retarget_lock_acquire_recursive>
 8005aaa:	bf00      	nop
 8005aac:	2000046d 	.word	0x2000046d

08005ab0 <__sfp_lock_release>:
 8005ab0:	4801      	ldr	r0, [pc, #4]	; (8005ab8 <__sfp_lock_release+0x8>)
 8005ab2:	f000 b9fc 	b.w	8005eae <__retarget_lock_release_recursive>
 8005ab6:	bf00      	nop
 8005ab8:	2000046d 	.word	0x2000046d

08005abc <__sinit>:
 8005abc:	b510      	push	{r4, lr}
 8005abe:	4604      	mov	r4, r0
 8005ac0:	f7ff fff0 	bl	8005aa4 <__sfp_lock_acquire>
 8005ac4:	6a23      	ldr	r3, [r4, #32]
 8005ac6:	b11b      	cbz	r3, 8005ad0 <__sinit+0x14>
 8005ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005acc:	f7ff bff0 	b.w	8005ab0 <__sfp_lock_release>
 8005ad0:	4b04      	ldr	r3, [pc, #16]	; (8005ae4 <__sinit+0x28>)
 8005ad2:	6223      	str	r3, [r4, #32]
 8005ad4:	4b04      	ldr	r3, [pc, #16]	; (8005ae8 <__sinit+0x2c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1f5      	bne.n	8005ac8 <__sinit+0xc>
 8005adc:	f7ff ffc4 	bl	8005a68 <global_stdio_init.part.0>
 8005ae0:	e7f2      	b.n	8005ac8 <__sinit+0xc>
 8005ae2:	bf00      	nop
 8005ae4:	08005a29 	.word	0x08005a29
 8005ae8:	20000464 	.word	0x20000464

08005aec <_fwalk_sglue>:
 8005aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005af0:	4607      	mov	r7, r0
 8005af2:	4688      	mov	r8, r1
 8005af4:	4614      	mov	r4, r2
 8005af6:	2600      	movs	r6, #0
 8005af8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005afc:	f1b9 0901 	subs.w	r9, r9, #1
 8005b00:	d505      	bpl.n	8005b0e <_fwalk_sglue+0x22>
 8005b02:	6824      	ldr	r4, [r4, #0]
 8005b04:	2c00      	cmp	r4, #0
 8005b06:	d1f7      	bne.n	8005af8 <_fwalk_sglue+0xc>
 8005b08:	4630      	mov	r0, r6
 8005b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b0e:	89ab      	ldrh	r3, [r5, #12]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d907      	bls.n	8005b24 <_fwalk_sglue+0x38>
 8005b14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	d003      	beq.n	8005b24 <_fwalk_sglue+0x38>
 8005b1c:	4629      	mov	r1, r5
 8005b1e:	4638      	mov	r0, r7
 8005b20:	47c0      	blx	r8
 8005b22:	4306      	orrs	r6, r0
 8005b24:	3568      	adds	r5, #104	; 0x68
 8005b26:	e7e9      	b.n	8005afc <_fwalk_sglue+0x10>

08005b28 <iprintf>:
 8005b28:	b40f      	push	{r0, r1, r2, r3}
 8005b2a:	b507      	push	{r0, r1, r2, lr}
 8005b2c:	4906      	ldr	r1, [pc, #24]	; (8005b48 <iprintf+0x20>)
 8005b2e:	ab04      	add	r3, sp, #16
 8005b30:	6808      	ldr	r0, [r1, #0]
 8005b32:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b36:	6881      	ldr	r1, [r0, #8]
 8005b38:	9301      	str	r3, [sp, #4]
 8005b3a:	f001 fcd9 	bl	80074f0 <_vfiprintf_r>
 8005b3e:	b003      	add	sp, #12
 8005b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b44:	b004      	add	sp, #16
 8005b46:	4770      	bx	lr
 8005b48:	20000064 	.word	0x20000064

08005b4c <_puts_r>:
 8005b4c:	6a03      	ldr	r3, [r0, #32]
 8005b4e:	b570      	push	{r4, r5, r6, lr}
 8005b50:	6884      	ldr	r4, [r0, #8]
 8005b52:	4605      	mov	r5, r0
 8005b54:	460e      	mov	r6, r1
 8005b56:	b90b      	cbnz	r3, 8005b5c <_puts_r+0x10>
 8005b58:	f7ff ffb0 	bl	8005abc <__sinit>
 8005b5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b5e:	07db      	lsls	r3, r3, #31
 8005b60:	d405      	bmi.n	8005b6e <_puts_r+0x22>
 8005b62:	89a3      	ldrh	r3, [r4, #12]
 8005b64:	0598      	lsls	r0, r3, #22
 8005b66:	d402      	bmi.n	8005b6e <_puts_r+0x22>
 8005b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b6a:	f000 f99f 	bl	8005eac <__retarget_lock_acquire_recursive>
 8005b6e:	89a3      	ldrh	r3, [r4, #12]
 8005b70:	0719      	lsls	r1, r3, #28
 8005b72:	d513      	bpl.n	8005b9c <_puts_r+0x50>
 8005b74:	6923      	ldr	r3, [r4, #16]
 8005b76:	b18b      	cbz	r3, 8005b9c <_puts_r+0x50>
 8005b78:	3e01      	subs	r6, #1
 8005b7a:	68a3      	ldr	r3, [r4, #8]
 8005b7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b80:	3b01      	subs	r3, #1
 8005b82:	60a3      	str	r3, [r4, #8]
 8005b84:	b9e9      	cbnz	r1, 8005bc2 <_puts_r+0x76>
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	da2e      	bge.n	8005be8 <_puts_r+0x9c>
 8005b8a:	4622      	mov	r2, r4
 8005b8c:	210a      	movs	r1, #10
 8005b8e:	4628      	mov	r0, r5
 8005b90:	f000 f87b 	bl	8005c8a <__swbuf_r>
 8005b94:	3001      	adds	r0, #1
 8005b96:	d007      	beq.n	8005ba8 <_puts_r+0x5c>
 8005b98:	250a      	movs	r5, #10
 8005b9a:	e007      	b.n	8005bac <_puts_r+0x60>
 8005b9c:	4621      	mov	r1, r4
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f000 f8b0 	bl	8005d04 <__swsetup_r>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	d0e7      	beq.n	8005b78 <_puts_r+0x2c>
 8005ba8:	f04f 35ff 	mov.w	r5, #4294967295
 8005bac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bae:	07da      	lsls	r2, r3, #31
 8005bb0:	d405      	bmi.n	8005bbe <_puts_r+0x72>
 8005bb2:	89a3      	ldrh	r3, [r4, #12]
 8005bb4:	059b      	lsls	r3, r3, #22
 8005bb6:	d402      	bmi.n	8005bbe <_puts_r+0x72>
 8005bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bba:	f000 f978 	bl	8005eae <__retarget_lock_release_recursive>
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	bd70      	pop	{r4, r5, r6, pc}
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	da04      	bge.n	8005bd0 <_puts_r+0x84>
 8005bc6:	69a2      	ldr	r2, [r4, #24]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	dc06      	bgt.n	8005bda <_puts_r+0x8e>
 8005bcc:	290a      	cmp	r1, #10
 8005bce:	d004      	beq.n	8005bda <_puts_r+0x8e>
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	1c5a      	adds	r2, r3, #1
 8005bd4:	6022      	str	r2, [r4, #0]
 8005bd6:	7019      	strb	r1, [r3, #0]
 8005bd8:	e7cf      	b.n	8005b7a <_puts_r+0x2e>
 8005bda:	4622      	mov	r2, r4
 8005bdc:	4628      	mov	r0, r5
 8005bde:	f000 f854 	bl	8005c8a <__swbuf_r>
 8005be2:	3001      	adds	r0, #1
 8005be4:	d1c9      	bne.n	8005b7a <_puts_r+0x2e>
 8005be6:	e7df      	b.n	8005ba8 <_puts_r+0x5c>
 8005be8:	6823      	ldr	r3, [r4, #0]
 8005bea:	250a      	movs	r5, #10
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	6022      	str	r2, [r4, #0]
 8005bf0:	701d      	strb	r5, [r3, #0]
 8005bf2:	e7db      	b.n	8005bac <_puts_r+0x60>

08005bf4 <puts>:
 8005bf4:	4b02      	ldr	r3, [pc, #8]	; (8005c00 <puts+0xc>)
 8005bf6:	4601      	mov	r1, r0
 8005bf8:	6818      	ldr	r0, [r3, #0]
 8005bfa:	f7ff bfa7 	b.w	8005b4c <_puts_r>
 8005bfe:	bf00      	nop
 8005c00:	20000064 	.word	0x20000064

08005c04 <__sread>:
 8005c04:	b510      	push	{r4, lr}
 8005c06:	460c      	mov	r4, r1
 8005c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c0c:	f000 f900 	bl	8005e10 <_read_r>
 8005c10:	2800      	cmp	r0, #0
 8005c12:	bfab      	itete	ge
 8005c14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c16:	89a3      	ldrhlt	r3, [r4, #12]
 8005c18:	181b      	addge	r3, r3, r0
 8005c1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c1e:	bfac      	ite	ge
 8005c20:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c22:	81a3      	strhlt	r3, [r4, #12]
 8005c24:	bd10      	pop	{r4, pc}

08005c26 <__swrite>:
 8005c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c2a:	461f      	mov	r7, r3
 8005c2c:	898b      	ldrh	r3, [r1, #12]
 8005c2e:	05db      	lsls	r3, r3, #23
 8005c30:	4605      	mov	r5, r0
 8005c32:	460c      	mov	r4, r1
 8005c34:	4616      	mov	r6, r2
 8005c36:	d505      	bpl.n	8005c44 <__swrite+0x1e>
 8005c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f000 f8d4 	bl	8005dec <_lseek_r>
 8005c44:	89a3      	ldrh	r3, [r4, #12]
 8005c46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c4e:	81a3      	strh	r3, [r4, #12]
 8005c50:	4632      	mov	r2, r6
 8005c52:	463b      	mov	r3, r7
 8005c54:	4628      	mov	r0, r5
 8005c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c5a:	f000 b8eb 	b.w	8005e34 <_write_r>

08005c5e <__sseek>:
 8005c5e:	b510      	push	{r4, lr}
 8005c60:	460c      	mov	r4, r1
 8005c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c66:	f000 f8c1 	bl	8005dec <_lseek_r>
 8005c6a:	1c43      	adds	r3, r0, #1
 8005c6c:	89a3      	ldrh	r3, [r4, #12]
 8005c6e:	bf15      	itete	ne
 8005c70:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c7a:	81a3      	strheq	r3, [r4, #12]
 8005c7c:	bf18      	it	ne
 8005c7e:	81a3      	strhne	r3, [r4, #12]
 8005c80:	bd10      	pop	{r4, pc}

08005c82 <__sclose>:
 8005c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c86:	f000 b8a1 	b.w	8005dcc <_close_r>

08005c8a <__swbuf_r>:
 8005c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8c:	460e      	mov	r6, r1
 8005c8e:	4614      	mov	r4, r2
 8005c90:	4605      	mov	r5, r0
 8005c92:	b118      	cbz	r0, 8005c9c <__swbuf_r+0x12>
 8005c94:	6a03      	ldr	r3, [r0, #32]
 8005c96:	b90b      	cbnz	r3, 8005c9c <__swbuf_r+0x12>
 8005c98:	f7ff ff10 	bl	8005abc <__sinit>
 8005c9c:	69a3      	ldr	r3, [r4, #24]
 8005c9e:	60a3      	str	r3, [r4, #8]
 8005ca0:	89a3      	ldrh	r3, [r4, #12]
 8005ca2:	071a      	lsls	r2, r3, #28
 8005ca4:	d525      	bpl.n	8005cf2 <__swbuf_r+0x68>
 8005ca6:	6923      	ldr	r3, [r4, #16]
 8005ca8:	b31b      	cbz	r3, 8005cf2 <__swbuf_r+0x68>
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	6922      	ldr	r2, [r4, #16]
 8005cae:	1a98      	subs	r0, r3, r2
 8005cb0:	6963      	ldr	r3, [r4, #20]
 8005cb2:	b2f6      	uxtb	r6, r6
 8005cb4:	4283      	cmp	r3, r0
 8005cb6:	4637      	mov	r7, r6
 8005cb8:	dc04      	bgt.n	8005cc4 <__swbuf_r+0x3a>
 8005cba:	4621      	mov	r1, r4
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	f001 fdb7 	bl	8007830 <_fflush_r>
 8005cc2:	b9e0      	cbnz	r0, 8005cfe <__swbuf_r+0x74>
 8005cc4:	68a3      	ldr	r3, [r4, #8]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	60a3      	str	r3, [r4, #8]
 8005cca:	6823      	ldr	r3, [r4, #0]
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	6022      	str	r2, [r4, #0]
 8005cd0:	701e      	strb	r6, [r3, #0]
 8005cd2:	6962      	ldr	r2, [r4, #20]
 8005cd4:	1c43      	adds	r3, r0, #1
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d004      	beq.n	8005ce4 <__swbuf_r+0x5a>
 8005cda:	89a3      	ldrh	r3, [r4, #12]
 8005cdc:	07db      	lsls	r3, r3, #31
 8005cde:	d506      	bpl.n	8005cee <__swbuf_r+0x64>
 8005ce0:	2e0a      	cmp	r6, #10
 8005ce2:	d104      	bne.n	8005cee <__swbuf_r+0x64>
 8005ce4:	4621      	mov	r1, r4
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	f001 fda2 	bl	8007830 <_fflush_r>
 8005cec:	b938      	cbnz	r0, 8005cfe <__swbuf_r+0x74>
 8005cee:	4638      	mov	r0, r7
 8005cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	f000 f805 	bl	8005d04 <__swsetup_r>
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	d0d5      	beq.n	8005caa <__swbuf_r+0x20>
 8005cfe:	f04f 37ff 	mov.w	r7, #4294967295
 8005d02:	e7f4      	b.n	8005cee <__swbuf_r+0x64>

08005d04 <__swsetup_r>:
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	4b2a      	ldr	r3, [pc, #168]	; (8005db0 <__swsetup_r+0xac>)
 8005d08:	4605      	mov	r5, r0
 8005d0a:	6818      	ldr	r0, [r3, #0]
 8005d0c:	460c      	mov	r4, r1
 8005d0e:	b118      	cbz	r0, 8005d18 <__swsetup_r+0x14>
 8005d10:	6a03      	ldr	r3, [r0, #32]
 8005d12:	b90b      	cbnz	r3, 8005d18 <__swsetup_r+0x14>
 8005d14:	f7ff fed2 	bl	8005abc <__sinit>
 8005d18:	89a3      	ldrh	r3, [r4, #12]
 8005d1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d1e:	0718      	lsls	r0, r3, #28
 8005d20:	d422      	bmi.n	8005d68 <__swsetup_r+0x64>
 8005d22:	06d9      	lsls	r1, r3, #27
 8005d24:	d407      	bmi.n	8005d36 <__swsetup_r+0x32>
 8005d26:	2309      	movs	r3, #9
 8005d28:	602b      	str	r3, [r5, #0]
 8005d2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d2e:	81a3      	strh	r3, [r4, #12]
 8005d30:	f04f 30ff 	mov.w	r0, #4294967295
 8005d34:	e034      	b.n	8005da0 <__swsetup_r+0x9c>
 8005d36:	0758      	lsls	r0, r3, #29
 8005d38:	d512      	bpl.n	8005d60 <__swsetup_r+0x5c>
 8005d3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d3c:	b141      	cbz	r1, 8005d50 <__swsetup_r+0x4c>
 8005d3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d42:	4299      	cmp	r1, r3
 8005d44:	d002      	beq.n	8005d4c <__swsetup_r+0x48>
 8005d46:	4628      	mov	r0, r5
 8005d48:	f000 ff2c 	bl	8006ba4 <_free_r>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	6363      	str	r3, [r4, #52]	; 0x34
 8005d50:	89a3      	ldrh	r3, [r4, #12]
 8005d52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d56:	81a3      	strh	r3, [r4, #12]
 8005d58:	2300      	movs	r3, #0
 8005d5a:	6063      	str	r3, [r4, #4]
 8005d5c:	6923      	ldr	r3, [r4, #16]
 8005d5e:	6023      	str	r3, [r4, #0]
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	f043 0308 	orr.w	r3, r3, #8
 8005d66:	81a3      	strh	r3, [r4, #12]
 8005d68:	6923      	ldr	r3, [r4, #16]
 8005d6a:	b94b      	cbnz	r3, 8005d80 <__swsetup_r+0x7c>
 8005d6c:	89a3      	ldrh	r3, [r4, #12]
 8005d6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d76:	d003      	beq.n	8005d80 <__swsetup_r+0x7c>
 8005d78:	4621      	mov	r1, r4
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	f001 fda6 	bl	80078cc <__smakebuf_r>
 8005d80:	89a0      	ldrh	r0, [r4, #12]
 8005d82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d86:	f010 0301 	ands.w	r3, r0, #1
 8005d8a:	d00a      	beq.n	8005da2 <__swsetup_r+0x9e>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60a3      	str	r3, [r4, #8]
 8005d90:	6963      	ldr	r3, [r4, #20]
 8005d92:	425b      	negs	r3, r3
 8005d94:	61a3      	str	r3, [r4, #24]
 8005d96:	6923      	ldr	r3, [r4, #16]
 8005d98:	b943      	cbnz	r3, 8005dac <__swsetup_r+0xa8>
 8005d9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d9e:	d1c4      	bne.n	8005d2a <__swsetup_r+0x26>
 8005da0:	bd38      	pop	{r3, r4, r5, pc}
 8005da2:	0781      	lsls	r1, r0, #30
 8005da4:	bf58      	it	pl
 8005da6:	6963      	ldrpl	r3, [r4, #20]
 8005da8:	60a3      	str	r3, [r4, #8]
 8005daa:	e7f4      	b.n	8005d96 <__swsetup_r+0x92>
 8005dac:	2000      	movs	r0, #0
 8005dae:	e7f7      	b.n	8005da0 <__swsetup_r+0x9c>
 8005db0:	20000064 	.word	0x20000064

08005db4 <memset>:
 8005db4:	4402      	add	r2, r0
 8005db6:	4603      	mov	r3, r0
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d100      	bne.n	8005dbe <memset+0xa>
 8005dbc:	4770      	bx	lr
 8005dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8005dc2:	e7f9      	b.n	8005db8 <memset+0x4>

08005dc4 <_localeconv_r>:
 8005dc4:	4800      	ldr	r0, [pc, #0]	; (8005dc8 <_localeconv_r+0x4>)
 8005dc6:	4770      	bx	lr
 8005dc8:	20000158 	.word	0x20000158

08005dcc <_close_r>:
 8005dcc:	b538      	push	{r3, r4, r5, lr}
 8005dce:	4d06      	ldr	r5, [pc, #24]	; (8005de8 <_close_r+0x1c>)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	4608      	mov	r0, r1
 8005dd6:	602b      	str	r3, [r5, #0]
 8005dd8:	f7fb fc03 	bl	80015e2 <_close>
 8005ddc:	1c43      	adds	r3, r0, #1
 8005dde:	d102      	bne.n	8005de6 <_close_r+0x1a>
 8005de0:	682b      	ldr	r3, [r5, #0]
 8005de2:	b103      	cbz	r3, 8005de6 <_close_r+0x1a>
 8005de4:	6023      	str	r3, [r4, #0]
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	20000468 	.word	0x20000468

08005dec <_lseek_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	4d07      	ldr	r5, [pc, #28]	; (8005e0c <_lseek_r+0x20>)
 8005df0:	4604      	mov	r4, r0
 8005df2:	4608      	mov	r0, r1
 8005df4:	4611      	mov	r1, r2
 8005df6:	2200      	movs	r2, #0
 8005df8:	602a      	str	r2, [r5, #0]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	f7fb fc18 	bl	8001630 <_lseek>
 8005e00:	1c43      	adds	r3, r0, #1
 8005e02:	d102      	bne.n	8005e0a <_lseek_r+0x1e>
 8005e04:	682b      	ldr	r3, [r5, #0]
 8005e06:	b103      	cbz	r3, 8005e0a <_lseek_r+0x1e>
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	bd38      	pop	{r3, r4, r5, pc}
 8005e0c:	20000468 	.word	0x20000468

08005e10 <_read_r>:
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	4d07      	ldr	r5, [pc, #28]	; (8005e30 <_read_r+0x20>)
 8005e14:	4604      	mov	r4, r0
 8005e16:	4608      	mov	r0, r1
 8005e18:	4611      	mov	r1, r2
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	602a      	str	r2, [r5, #0]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f7fb fba6 	bl	8001570 <_read>
 8005e24:	1c43      	adds	r3, r0, #1
 8005e26:	d102      	bne.n	8005e2e <_read_r+0x1e>
 8005e28:	682b      	ldr	r3, [r5, #0]
 8005e2a:	b103      	cbz	r3, 8005e2e <_read_r+0x1e>
 8005e2c:	6023      	str	r3, [r4, #0]
 8005e2e:	bd38      	pop	{r3, r4, r5, pc}
 8005e30:	20000468 	.word	0x20000468

08005e34 <_write_r>:
 8005e34:	b538      	push	{r3, r4, r5, lr}
 8005e36:	4d07      	ldr	r5, [pc, #28]	; (8005e54 <_write_r+0x20>)
 8005e38:	4604      	mov	r4, r0
 8005e3a:	4608      	mov	r0, r1
 8005e3c:	4611      	mov	r1, r2
 8005e3e:	2200      	movs	r2, #0
 8005e40:	602a      	str	r2, [r5, #0]
 8005e42:	461a      	mov	r2, r3
 8005e44:	f7fb fbb1 	bl	80015aa <_write>
 8005e48:	1c43      	adds	r3, r0, #1
 8005e4a:	d102      	bne.n	8005e52 <_write_r+0x1e>
 8005e4c:	682b      	ldr	r3, [r5, #0]
 8005e4e:	b103      	cbz	r3, 8005e52 <_write_r+0x1e>
 8005e50:	6023      	str	r3, [r4, #0]
 8005e52:	bd38      	pop	{r3, r4, r5, pc}
 8005e54:	20000468 	.word	0x20000468

08005e58 <__errno>:
 8005e58:	4b01      	ldr	r3, [pc, #4]	; (8005e60 <__errno+0x8>)
 8005e5a:	6818      	ldr	r0, [r3, #0]
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	20000064 	.word	0x20000064

08005e64 <__libc_init_array>:
 8005e64:	b570      	push	{r4, r5, r6, lr}
 8005e66:	4d0d      	ldr	r5, [pc, #52]	; (8005e9c <__libc_init_array+0x38>)
 8005e68:	4c0d      	ldr	r4, [pc, #52]	; (8005ea0 <__libc_init_array+0x3c>)
 8005e6a:	1b64      	subs	r4, r4, r5
 8005e6c:	10a4      	asrs	r4, r4, #2
 8005e6e:	2600      	movs	r6, #0
 8005e70:	42a6      	cmp	r6, r4
 8005e72:	d109      	bne.n	8005e88 <__libc_init_array+0x24>
 8005e74:	4d0b      	ldr	r5, [pc, #44]	; (8005ea4 <__libc_init_array+0x40>)
 8005e76:	4c0c      	ldr	r4, [pc, #48]	; (8005ea8 <__libc_init_array+0x44>)
 8005e78:	f001 fe56 	bl	8007b28 <_init>
 8005e7c:	1b64      	subs	r4, r4, r5
 8005e7e:	10a4      	asrs	r4, r4, #2
 8005e80:	2600      	movs	r6, #0
 8005e82:	42a6      	cmp	r6, r4
 8005e84:	d105      	bne.n	8005e92 <__libc_init_array+0x2e>
 8005e86:	bd70      	pop	{r4, r5, r6, pc}
 8005e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e8c:	4798      	blx	r3
 8005e8e:	3601      	adds	r6, #1
 8005e90:	e7ee      	b.n	8005e70 <__libc_init_array+0xc>
 8005e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e96:	4798      	blx	r3
 8005e98:	3601      	adds	r6, #1
 8005e9a:	e7f2      	b.n	8005e82 <__libc_init_array+0x1e>
 8005e9c:	08007f4c 	.word	0x08007f4c
 8005ea0:	08007f4c 	.word	0x08007f4c
 8005ea4:	08007f4c 	.word	0x08007f4c
 8005ea8:	08007f50 	.word	0x08007f50

08005eac <__retarget_lock_acquire_recursive>:
 8005eac:	4770      	bx	lr

08005eae <__retarget_lock_release_recursive>:
 8005eae:	4770      	bx	lr

08005eb0 <quorem>:
 8005eb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb4:	6903      	ldr	r3, [r0, #16]
 8005eb6:	690c      	ldr	r4, [r1, #16]
 8005eb8:	42a3      	cmp	r3, r4
 8005eba:	4607      	mov	r7, r0
 8005ebc:	db7e      	blt.n	8005fbc <quorem+0x10c>
 8005ebe:	3c01      	subs	r4, #1
 8005ec0:	f101 0814 	add.w	r8, r1, #20
 8005ec4:	f100 0514 	add.w	r5, r0, #20
 8005ec8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ecc:	9301      	str	r3, [sp, #4]
 8005ece:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ed2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ede:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ee2:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ee6:	d331      	bcc.n	8005f4c <quorem+0x9c>
 8005ee8:	f04f 0e00 	mov.w	lr, #0
 8005eec:	4640      	mov	r0, r8
 8005eee:	46ac      	mov	ip, r5
 8005ef0:	46f2      	mov	sl, lr
 8005ef2:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ef6:	b293      	uxth	r3, r2
 8005ef8:	fb06 e303 	mla	r3, r6, r3, lr
 8005efc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f00:	0c1a      	lsrs	r2, r3, #16
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	ebaa 0303 	sub.w	r3, sl, r3
 8005f08:	f8dc a000 	ldr.w	sl, [ip]
 8005f0c:	fa13 f38a 	uxtah	r3, r3, sl
 8005f10:	fb06 220e 	mla	r2, r6, lr, r2
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	9b00      	ldr	r3, [sp, #0]
 8005f18:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f1c:	b292      	uxth	r2, r2
 8005f1e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f26:	f8bd 3000 	ldrh.w	r3, [sp]
 8005f2a:	4581      	cmp	r9, r0
 8005f2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f30:	f84c 3b04 	str.w	r3, [ip], #4
 8005f34:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f38:	d2db      	bcs.n	8005ef2 <quorem+0x42>
 8005f3a:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f3e:	b92b      	cbnz	r3, 8005f4c <quorem+0x9c>
 8005f40:	9b01      	ldr	r3, [sp, #4]
 8005f42:	3b04      	subs	r3, #4
 8005f44:	429d      	cmp	r5, r3
 8005f46:	461a      	mov	r2, r3
 8005f48:	d32c      	bcc.n	8005fa4 <quorem+0xf4>
 8005f4a:	613c      	str	r4, [r7, #16]
 8005f4c:	4638      	mov	r0, r7
 8005f4e:	f001 f9a5 	bl	800729c <__mcmp>
 8005f52:	2800      	cmp	r0, #0
 8005f54:	db22      	blt.n	8005f9c <quorem+0xec>
 8005f56:	3601      	adds	r6, #1
 8005f58:	4629      	mov	r1, r5
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f60:	f8d1 c000 	ldr.w	ip, [r1]
 8005f64:	b293      	uxth	r3, r2
 8005f66:	1ac3      	subs	r3, r0, r3
 8005f68:	0c12      	lsrs	r2, r2, #16
 8005f6a:	fa13 f38c 	uxtah	r3, r3, ip
 8005f6e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005f72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f7c:	45c1      	cmp	r9, r8
 8005f7e:	f841 3b04 	str.w	r3, [r1], #4
 8005f82:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f86:	d2e9      	bcs.n	8005f5c <quorem+0xac>
 8005f88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f90:	b922      	cbnz	r2, 8005f9c <quorem+0xec>
 8005f92:	3b04      	subs	r3, #4
 8005f94:	429d      	cmp	r5, r3
 8005f96:	461a      	mov	r2, r3
 8005f98:	d30a      	bcc.n	8005fb0 <quorem+0x100>
 8005f9a:	613c      	str	r4, [r7, #16]
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	b003      	add	sp, #12
 8005fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fa4:	6812      	ldr	r2, [r2, #0]
 8005fa6:	3b04      	subs	r3, #4
 8005fa8:	2a00      	cmp	r2, #0
 8005faa:	d1ce      	bne.n	8005f4a <quorem+0x9a>
 8005fac:	3c01      	subs	r4, #1
 8005fae:	e7c9      	b.n	8005f44 <quorem+0x94>
 8005fb0:	6812      	ldr	r2, [r2, #0]
 8005fb2:	3b04      	subs	r3, #4
 8005fb4:	2a00      	cmp	r2, #0
 8005fb6:	d1f0      	bne.n	8005f9a <quorem+0xea>
 8005fb8:	3c01      	subs	r4, #1
 8005fba:	e7eb      	b.n	8005f94 <quorem+0xe4>
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	e7ee      	b.n	8005f9e <quorem+0xee>

08005fc0 <_dtoa_r>:
 8005fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc4:	ed2d 8b04 	vpush	{d8-d9}
 8005fc8:	69c5      	ldr	r5, [r0, #28]
 8005fca:	b093      	sub	sp, #76	; 0x4c
 8005fcc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005fd0:	ec57 6b10 	vmov	r6, r7, d0
 8005fd4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005fd8:	9107      	str	r1, [sp, #28]
 8005fda:	4604      	mov	r4, r0
 8005fdc:	920a      	str	r2, [sp, #40]	; 0x28
 8005fde:	930d      	str	r3, [sp, #52]	; 0x34
 8005fe0:	b975      	cbnz	r5, 8006000 <_dtoa_r+0x40>
 8005fe2:	2010      	movs	r0, #16
 8005fe4:	f000 fe2a 	bl	8006c3c <malloc>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	61e0      	str	r0, [r4, #28]
 8005fec:	b920      	cbnz	r0, 8005ff8 <_dtoa_r+0x38>
 8005fee:	4bae      	ldr	r3, [pc, #696]	; (80062a8 <_dtoa_r+0x2e8>)
 8005ff0:	21ef      	movs	r1, #239	; 0xef
 8005ff2:	48ae      	ldr	r0, [pc, #696]	; (80062ac <_dtoa_r+0x2ec>)
 8005ff4:	f001 fce6 	bl	80079c4 <__assert_func>
 8005ff8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ffc:	6005      	str	r5, [r0, #0]
 8005ffe:	60c5      	str	r5, [r0, #12]
 8006000:	69e3      	ldr	r3, [r4, #28]
 8006002:	6819      	ldr	r1, [r3, #0]
 8006004:	b151      	cbz	r1, 800601c <_dtoa_r+0x5c>
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	604a      	str	r2, [r1, #4]
 800600a:	2301      	movs	r3, #1
 800600c:	4093      	lsls	r3, r2
 800600e:	608b      	str	r3, [r1, #8]
 8006010:	4620      	mov	r0, r4
 8006012:	f000 ff07 	bl	8006e24 <_Bfree>
 8006016:	69e3      	ldr	r3, [r4, #28]
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	1e3b      	subs	r3, r7, #0
 800601e:	bfbb      	ittet	lt
 8006020:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006024:	9303      	strlt	r3, [sp, #12]
 8006026:	2300      	movge	r3, #0
 8006028:	2201      	movlt	r2, #1
 800602a:	bfac      	ite	ge
 800602c:	f8c8 3000 	strge.w	r3, [r8]
 8006030:	f8c8 2000 	strlt.w	r2, [r8]
 8006034:	4b9e      	ldr	r3, [pc, #632]	; (80062b0 <_dtoa_r+0x2f0>)
 8006036:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800603a:	ea33 0308 	bics.w	r3, r3, r8
 800603e:	d11b      	bne.n	8006078 <_dtoa_r+0xb8>
 8006040:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006042:	f242 730f 	movw	r3, #9999	; 0x270f
 8006046:	6013      	str	r3, [r2, #0]
 8006048:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800604c:	4333      	orrs	r3, r6
 800604e:	f000 8593 	beq.w	8006b78 <_dtoa_r+0xbb8>
 8006052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006054:	b963      	cbnz	r3, 8006070 <_dtoa_r+0xb0>
 8006056:	4b97      	ldr	r3, [pc, #604]	; (80062b4 <_dtoa_r+0x2f4>)
 8006058:	e027      	b.n	80060aa <_dtoa_r+0xea>
 800605a:	4b97      	ldr	r3, [pc, #604]	; (80062b8 <_dtoa_r+0x2f8>)
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	3308      	adds	r3, #8
 8006060:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006062:	6013      	str	r3, [r2, #0]
 8006064:	9800      	ldr	r0, [sp, #0]
 8006066:	b013      	add	sp, #76	; 0x4c
 8006068:	ecbd 8b04 	vpop	{d8-d9}
 800606c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006070:	4b90      	ldr	r3, [pc, #576]	; (80062b4 <_dtoa_r+0x2f4>)
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	3303      	adds	r3, #3
 8006076:	e7f3      	b.n	8006060 <_dtoa_r+0xa0>
 8006078:	ed9d 7b02 	vldr	d7, [sp, #8]
 800607c:	2200      	movs	r2, #0
 800607e:	ec51 0b17 	vmov	r0, r1, d7
 8006082:	eeb0 8a47 	vmov.f32	s16, s14
 8006086:	eef0 8a67 	vmov.f32	s17, s15
 800608a:	2300      	movs	r3, #0
 800608c:	f7fa fd44 	bl	8000b18 <__aeabi_dcmpeq>
 8006090:	4681      	mov	r9, r0
 8006092:	b160      	cbz	r0, 80060ae <_dtoa_r+0xee>
 8006094:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006096:	2301      	movs	r3, #1
 8006098:	6013      	str	r3, [r2, #0]
 800609a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 8568 	beq.w	8006b72 <_dtoa_r+0xbb2>
 80060a2:	4b86      	ldr	r3, [pc, #536]	; (80062bc <_dtoa_r+0x2fc>)
 80060a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060a6:	6013      	str	r3, [r2, #0]
 80060a8:	3b01      	subs	r3, #1
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	e7da      	b.n	8006064 <_dtoa_r+0xa4>
 80060ae:	aa10      	add	r2, sp, #64	; 0x40
 80060b0:	a911      	add	r1, sp, #68	; 0x44
 80060b2:	4620      	mov	r0, r4
 80060b4:	eeb0 0a48 	vmov.f32	s0, s16
 80060b8:	eef0 0a68 	vmov.f32	s1, s17
 80060bc:	f001 f994 	bl	80073e8 <__d2b>
 80060c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80060c4:	4682      	mov	sl, r0
 80060c6:	2d00      	cmp	r5, #0
 80060c8:	d07f      	beq.n	80061ca <_dtoa_r+0x20a>
 80060ca:	ee18 3a90 	vmov	r3, s17
 80060ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060d2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80060d6:	ec51 0b18 	vmov	r0, r1, d8
 80060da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80060de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80060e2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80060e6:	4619      	mov	r1, r3
 80060e8:	2200      	movs	r2, #0
 80060ea:	4b75      	ldr	r3, [pc, #468]	; (80062c0 <_dtoa_r+0x300>)
 80060ec:	f7fa f8f4 	bl	80002d8 <__aeabi_dsub>
 80060f0:	a367      	add	r3, pc, #412	; (adr r3, 8006290 <_dtoa_r+0x2d0>)
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	f7fa faa7 	bl	8000648 <__aeabi_dmul>
 80060fa:	a367      	add	r3, pc, #412	; (adr r3, 8006298 <_dtoa_r+0x2d8>)
 80060fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006100:	f7fa f8ec 	bl	80002dc <__adddf3>
 8006104:	4606      	mov	r6, r0
 8006106:	4628      	mov	r0, r5
 8006108:	460f      	mov	r7, r1
 800610a:	f7fa fa33 	bl	8000574 <__aeabi_i2d>
 800610e:	a364      	add	r3, pc, #400	; (adr r3, 80062a0 <_dtoa_r+0x2e0>)
 8006110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006114:	f7fa fa98 	bl	8000648 <__aeabi_dmul>
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	4630      	mov	r0, r6
 800611e:	4639      	mov	r1, r7
 8006120:	f7fa f8dc 	bl	80002dc <__adddf3>
 8006124:	4606      	mov	r6, r0
 8006126:	460f      	mov	r7, r1
 8006128:	f7fa fd3e 	bl	8000ba8 <__aeabi_d2iz>
 800612c:	2200      	movs	r2, #0
 800612e:	4683      	mov	fp, r0
 8006130:	2300      	movs	r3, #0
 8006132:	4630      	mov	r0, r6
 8006134:	4639      	mov	r1, r7
 8006136:	f7fa fcf9 	bl	8000b2c <__aeabi_dcmplt>
 800613a:	b148      	cbz	r0, 8006150 <_dtoa_r+0x190>
 800613c:	4658      	mov	r0, fp
 800613e:	f7fa fa19 	bl	8000574 <__aeabi_i2d>
 8006142:	4632      	mov	r2, r6
 8006144:	463b      	mov	r3, r7
 8006146:	f7fa fce7 	bl	8000b18 <__aeabi_dcmpeq>
 800614a:	b908      	cbnz	r0, 8006150 <_dtoa_r+0x190>
 800614c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006150:	f1bb 0f16 	cmp.w	fp, #22
 8006154:	d857      	bhi.n	8006206 <_dtoa_r+0x246>
 8006156:	4b5b      	ldr	r3, [pc, #364]	; (80062c4 <_dtoa_r+0x304>)
 8006158:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800615c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006160:	ec51 0b18 	vmov	r0, r1, d8
 8006164:	f7fa fce2 	bl	8000b2c <__aeabi_dcmplt>
 8006168:	2800      	cmp	r0, #0
 800616a:	d04e      	beq.n	800620a <_dtoa_r+0x24a>
 800616c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006170:	2300      	movs	r3, #0
 8006172:	930c      	str	r3, [sp, #48]	; 0x30
 8006174:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006176:	1b5b      	subs	r3, r3, r5
 8006178:	1e5a      	subs	r2, r3, #1
 800617a:	bf45      	ittet	mi
 800617c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006180:	9305      	strmi	r3, [sp, #20]
 8006182:	2300      	movpl	r3, #0
 8006184:	2300      	movmi	r3, #0
 8006186:	9206      	str	r2, [sp, #24]
 8006188:	bf54      	ite	pl
 800618a:	9305      	strpl	r3, [sp, #20]
 800618c:	9306      	strmi	r3, [sp, #24]
 800618e:	f1bb 0f00 	cmp.w	fp, #0
 8006192:	db3c      	blt.n	800620e <_dtoa_r+0x24e>
 8006194:	9b06      	ldr	r3, [sp, #24]
 8006196:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800619a:	445b      	add	r3, fp
 800619c:	9306      	str	r3, [sp, #24]
 800619e:	2300      	movs	r3, #0
 80061a0:	9308      	str	r3, [sp, #32]
 80061a2:	9b07      	ldr	r3, [sp, #28]
 80061a4:	2b09      	cmp	r3, #9
 80061a6:	d868      	bhi.n	800627a <_dtoa_r+0x2ba>
 80061a8:	2b05      	cmp	r3, #5
 80061aa:	bfc4      	itt	gt
 80061ac:	3b04      	subgt	r3, #4
 80061ae:	9307      	strgt	r3, [sp, #28]
 80061b0:	9b07      	ldr	r3, [sp, #28]
 80061b2:	f1a3 0302 	sub.w	r3, r3, #2
 80061b6:	bfcc      	ite	gt
 80061b8:	2500      	movgt	r5, #0
 80061ba:	2501      	movle	r5, #1
 80061bc:	2b03      	cmp	r3, #3
 80061be:	f200 8085 	bhi.w	80062cc <_dtoa_r+0x30c>
 80061c2:	e8df f003 	tbb	[pc, r3]
 80061c6:	3b2e      	.short	0x3b2e
 80061c8:	5839      	.short	0x5839
 80061ca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80061ce:	441d      	add	r5, r3
 80061d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80061d4:	2b20      	cmp	r3, #32
 80061d6:	bfc1      	itttt	gt
 80061d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80061e0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80061e4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80061e8:	bfd6      	itet	le
 80061ea:	f1c3 0320 	rsble	r3, r3, #32
 80061ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80061f2:	fa06 f003 	lslle.w	r0, r6, r3
 80061f6:	f7fa f9ad 	bl	8000554 <__aeabi_ui2d>
 80061fa:	2201      	movs	r2, #1
 80061fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006200:	3d01      	subs	r5, #1
 8006202:	920e      	str	r2, [sp, #56]	; 0x38
 8006204:	e76f      	b.n	80060e6 <_dtoa_r+0x126>
 8006206:	2301      	movs	r3, #1
 8006208:	e7b3      	b.n	8006172 <_dtoa_r+0x1b2>
 800620a:	900c      	str	r0, [sp, #48]	; 0x30
 800620c:	e7b2      	b.n	8006174 <_dtoa_r+0x1b4>
 800620e:	9b05      	ldr	r3, [sp, #20]
 8006210:	eba3 030b 	sub.w	r3, r3, fp
 8006214:	9305      	str	r3, [sp, #20]
 8006216:	f1cb 0300 	rsb	r3, fp, #0
 800621a:	9308      	str	r3, [sp, #32]
 800621c:	2300      	movs	r3, #0
 800621e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006220:	e7bf      	b.n	80061a2 <_dtoa_r+0x1e2>
 8006222:	2300      	movs	r3, #0
 8006224:	9309      	str	r3, [sp, #36]	; 0x24
 8006226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006228:	2b00      	cmp	r3, #0
 800622a:	dc52      	bgt.n	80062d2 <_dtoa_r+0x312>
 800622c:	2301      	movs	r3, #1
 800622e:	9301      	str	r3, [sp, #4]
 8006230:	9304      	str	r3, [sp, #16]
 8006232:	461a      	mov	r2, r3
 8006234:	920a      	str	r2, [sp, #40]	; 0x28
 8006236:	e00b      	b.n	8006250 <_dtoa_r+0x290>
 8006238:	2301      	movs	r3, #1
 800623a:	e7f3      	b.n	8006224 <_dtoa_r+0x264>
 800623c:	2300      	movs	r3, #0
 800623e:	9309      	str	r3, [sp, #36]	; 0x24
 8006240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006242:	445b      	add	r3, fp
 8006244:	9301      	str	r3, [sp, #4]
 8006246:	3301      	adds	r3, #1
 8006248:	2b01      	cmp	r3, #1
 800624a:	9304      	str	r3, [sp, #16]
 800624c:	bfb8      	it	lt
 800624e:	2301      	movlt	r3, #1
 8006250:	69e0      	ldr	r0, [r4, #28]
 8006252:	2100      	movs	r1, #0
 8006254:	2204      	movs	r2, #4
 8006256:	f102 0614 	add.w	r6, r2, #20
 800625a:	429e      	cmp	r6, r3
 800625c:	d93d      	bls.n	80062da <_dtoa_r+0x31a>
 800625e:	6041      	str	r1, [r0, #4]
 8006260:	4620      	mov	r0, r4
 8006262:	f000 fd9f 	bl	8006da4 <_Balloc>
 8006266:	9000      	str	r0, [sp, #0]
 8006268:	2800      	cmp	r0, #0
 800626a:	d139      	bne.n	80062e0 <_dtoa_r+0x320>
 800626c:	4b16      	ldr	r3, [pc, #88]	; (80062c8 <_dtoa_r+0x308>)
 800626e:	4602      	mov	r2, r0
 8006270:	f240 11af 	movw	r1, #431	; 0x1af
 8006274:	e6bd      	b.n	8005ff2 <_dtoa_r+0x32>
 8006276:	2301      	movs	r3, #1
 8006278:	e7e1      	b.n	800623e <_dtoa_r+0x27e>
 800627a:	2501      	movs	r5, #1
 800627c:	2300      	movs	r3, #0
 800627e:	9307      	str	r3, [sp, #28]
 8006280:	9509      	str	r5, [sp, #36]	; 0x24
 8006282:	f04f 33ff 	mov.w	r3, #4294967295
 8006286:	9301      	str	r3, [sp, #4]
 8006288:	9304      	str	r3, [sp, #16]
 800628a:	2200      	movs	r2, #0
 800628c:	2312      	movs	r3, #18
 800628e:	e7d1      	b.n	8006234 <_dtoa_r+0x274>
 8006290:	636f4361 	.word	0x636f4361
 8006294:	3fd287a7 	.word	0x3fd287a7
 8006298:	8b60c8b3 	.word	0x8b60c8b3
 800629c:	3fc68a28 	.word	0x3fc68a28
 80062a0:	509f79fb 	.word	0x509f79fb
 80062a4:	3fd34413 	.word	0x3fd34413
 80062a8:	08007c15 	.word	0x08007c15
 80062ac:	08007c2c 	.word	0x08007c2c
 80062b0:	7ff00000 	.word	0x7ff00000
 80062b4:	08007c11 	.word	0x08007c11
 80062b8:	08007c08 	.word	0x08007c08
 80062bc:	08007be5 	.word	0x08007be5
 80062c0:	3ff80000 	.word	0x3ff80000
 80062c4:	08007d18 	.word	0x08007d18
 80062c8:	08007c84 	.word	0x08007c84
 80062cc:	2301      	movs	r3, #1
 80062ce:	9309      	str	r3, [sp, #36]	; 0x24
 80062d0:	e7d7      	b.n	8006282 <_dtoa_r+0x2c2>
 80062d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062d4:	9301      	str	r3, [sp, #4]
 80062d6:	9304      	str	r3, [sp, #16]
 80062d8:	e7ba      	b.n	8006250 <_dtoa_r+0x290>
 80062da:	3101      	adds	r1, #1
 80062dc:	0052      	lsls	r2, r2, #1
 80062de:	e7ba      	b.n	8006256 <_dtoa_r+0x296>
 80062e0:	69e3      	ldr	r3, [r4, #28]
 80062e2:	9a00      	ldr	r2, [sp, #0]
 80062e4:	601a      	str	r2, [r3, #0]
 80062e6:	9b04      	ldr	r3, [sp, #16]
 80062e8:	2b0e      	cmp	r3, #14
 80062ea:	f200 80a8 	bhi.w	800643e <_dtoa_r+0x47e>
 80062ee:	2d00      	cmp	r5, #0
 80062f0:	f000 80a5 	beq.w	800643e <_dtoa_r+0x47e>
 80062f4:	f1bb 0f00 	cmp.w	fp, #0
 80062f8:	dd38      	ble.n	800636c <_dtoa_r+0x3ac>
 80062fa:	4bc0      	ldr	r3, [pc, #768]	; (80065fc <_dtoa_r+0x63c>)
 80062fc:	f00b 020f 	and.w	r2, fp, #15
 8006300:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006304:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006308:	e9d3 6700 	ldrd	r6, r7, [r3]
 800630c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006310:	d019      	beq.n	8006346 <_dtoa_r+0x386>
 8006312:	4bbb      	ldr	r3, [pc, #748]	; (8006600 <_dtoa_r+0x640>)
 8006314:	ec51 0b18 	vmov	r0, r1, d8
 8006318:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800631c:	f7fa fabe 	bl	800089c <__aeabi_ddiv>
 8006320:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006324:	f008 080f 	and.w	r8, r8, #15
 8006328:	2503      	movs	r5, #3
 800632a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006600 <_dtoa_r+0x640>
 800632e:	f1b8 0f00 	cmp.w	r8, #0
 8006332:	d10a      	bne.n	800634a <_dtoa_r+0x38a>
 8006334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006338:	4632      	mov	r2, r6
 800633a:	463b      	mov	r3, r7
 800633c:	f7fa faae 	bl	800089c <__aeabi_ddiv>
 8006340:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006344:	e02b      	b.n	800639e <_dtoa_r+0x3de>
 8006346:	2502      	movs	r5, #2
 8006348:	e7ef      	b.n	800632a <_dtoa_r+0x36a>
 800634a:	f018 0f01 	tst.w	r8, #1
 800634e:	d008      	beq.n	8006362 <_dtoa_r+0x3a2>
 8006350:	4630      	mov	r0, r6
 8006352:	4639      	mov	r1, r7
 8006354:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006358:	f7fa f976 	bl	8000648 <__aeabi_dmul>
 800635c:	3501      	adds	r5, #1
 800635e:	4606      	mov	r6, r0
 8006360:	460f      	mov	r7, r1
 8006362:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006366:	f109 0908 	add.w	r9, r9, #8
 800636a:	e7e0      	b.n	800632e <_dtoa_r+0x36e>
 800636c:	f000 809f 	beq.w	80064ae <_dtoa_r+0x4ee>
 8006370:	f1cb 0600 	rsb	r6, fp, #0
 8006374:	4ba1      	ldr	r3, [pc, #644]	; (80065fc <_dtoa_r+0x63c>)
 8006376:	4fa2      	ldr	r7, [pc, #648]	; (8006600 <_dtoa_r+0x640>)
 8006378:	f006 020f 	and.w	r2, r6, #15
 800637c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006384:	ec51 0b18 	vmov	r0, r1, d8
 8006388:	f7fa f95e 	bl	8000648 <__aeabi_dmul>
 800638c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006390:	1136      	asrs	r6, r6, #4
 8006392:	2300      	movs	r3, #0
 8006394:	2502      	movs	r5, #2
 8006396:	2e00      	cmp	r6, #0
 8006398:	d17e      	bne.n	8006498 <_dtoa_r+0x4d8>
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1d0      	bne.n	8006340 <_dtoa_r+0x380>
 800639e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 8084 	beq.w	80064b2 <_dtoa_r+0x4f2>
 80063aa:	4b96      	ldr	r3, [pc, #600]	; (8006604 <_dtoa_r+0x644>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	4640      	mov	r0, r8
 80063b0:	4649      	mov	r1, r9
 80063b2:	f7fa fbbb 	bl	8000b2c <__aeabi_dcmplt>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	d07b      	beq.n	80064b2 <_dtoa_r+0x4f2>
 80063ba:	9b04      	ldr	r3, [sp, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d078      	beq.n	80064b2 <_dtoa_r+0x4f2>
 80063c0:	9b01      	ldr	r3, [sp, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	dd39      	ble.n	800643a <_dtoa_r+0x47a>
 80063c6:	4b90      	ldr	r3, [pc, #576]	; (8006608 <_dtoa_r+0x648>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	4640      	mov	r0, r8
 80063cc:	4649      	mov	r1, r9
 80063ce:	f7fa f93b 	bl	8000648 <__aeabi_dmul>
 80063d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063d6:	9e01      	ldr	r6, [sp, #4]
 80063d8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80063dc:	3501      	adds	r5, #1
 80063de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80063e2:	4628      	mov	r0, r5
 80063e4:	f7fa f8c6 	bl	8000574 <__aeabi_i2d>
 80063e8:	4642      	mov	r2, r8
 80063ea:	464b      	mov	r3, r9
 80063ec:	f7fa f92c 	bl	8000648 <__aeabi_dmul>
 80063f0:	4b86      	ldr	r3, [pc, #536]	; (800660c <_dtoa_r+0x64c>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	f7f9 ff72 	bl	80002dc <__adddf3>
 80063f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80063fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006400:	9303      	str	r3, [sp, #12]
 8006402:	2e00      	cmp	r6, #0
 8006404:	d158      	bne.n	80064b8 <_dtoa_r+0x4f8>
 8006406:	4b82      	ldr	r3, [pc, #520]	; (8006610 <_dtoa_r+0x650>)
 8006408:	2200      	movs	r2, #0
 800640a:	4640      	mov	r0, r8
 800640c:	4649      	mov	r1, r9
 800640e:	f7f9 ff63 	bl	80002d8 <__aeabi_dsub>
 8006412:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006416:	4680      	mov	r8, r0
 8006418:	4689      	mov	r9, r1
 800641a:	f7fa fba5 	bl	8000b68 <__aeabi_dcmpgt>
 800641e:	2800      	cmp	r0, #0
 8006420:	f040 8296 	bne.w	8006950 <_dtoa_r+0x990>
 8006424:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006428:	4640      	mov	r0, r8
 800642a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800642e:	4649      	mov	r1, r9
 8006430:	f7fa fb7c 	bl	8000b2c <__aeabi_dcmplt>
 8006434:	2800      	cmp	r0, #0
 8006436:	f040 8289 	bne.w	800694c <_dtoa_r+0x98c>
 800643a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800643e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006440:	2b00      	cmp	r3, #0
 8006442:	f2c0 814e 	blt.w	80066e2 <_dtoa_r+0x722>
 8006446:	f1bb 0f0e 	cmp.w	fp, #14
 800644a:	f300 814a 	bgt.w	80066e2 <_dtoa_r+0x722>
 800644e:	4b6b      	ldr	r3, [pc, #428]	; (80065fc <_dtoa_r+0x63c>)
 8006450:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006454:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800645a:	2b00      	cmp	r3, #0
 800645c:	f280 80dc 	bge.w	8006618 <_dtoa_r+0x658>
 8006460:	9b04      	ldr	r3, [sp, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	f300 80d8 	bgt.w	8006618 <_dtoa_r+0x658>
 8006468:	f040 826f 	bne.w	800694a <_dtoa_r+0x98a>
 800646c:	4b68      	ldr	r3, [pc, #416]	; (8006610 <_dtoa_r+0x650>)
 800646e:	2200      	movs	r2, #0
 8006470:	4640      	mov	r0, r8
 8006472:	4649      	mov	r1, r9
 8006474:	f7fa f8e8 	bl	8000648 <__aeabi_dmul>
 8006478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800647c:	f7fa fb6a 	bl	8000b54 <__aeabi_dcmpge>
 8006480:	9e04      	ldr	r6, [sp, #16]
 8006482:	4637      	mov	r7, r6
 8006484:	2800      	cmp	r0, #0
 8006486:	f040 8245 	bne.w	8006914 <_dtoa_r+0x954>
 800648a:	9d00      	ldr	r5, [sp, #0]
 800648c:	2331      	movs	r3, #49	; 0x31
 800648e:	f805 3b01 	strb.w	r3, [r5], #1
 8006492:	f10b 0b01 	add.w	fp, fp, #1
 8006496:	e241      	b.n	800691c <_dtoa_r+0x95c>
 8006498:	07f2      	lsls	r2, r6, #31
 800649a:	d505      	bpl.n	80064a8 <_dtoa_r+0x4e8>
 800649c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064a0:	f7fa f8d2 	bl	8000648 <__aeabi_dmul>
 80064a4:	3501      	adds	r5, #1
 80064a6:	2301      	movs	r3, #1
 80064a8:	1076      	asrs	r6, r6, #1
 80064aa:	3708      	adds	r7, #8
 80064ac:	e773      	b.n	8006396 <_dtoa_r+0x3d6>
 80064ae:	2502      	movs	r5, #2
 80064b0:	e775      	b.n	800639e <_dtoa_r+0x3de>
 80064b2:	9e04      	ldr	r6, [sp, #16]
 80064b4:	465f      	mov	r7, fp
 80064b6:	e792      	b.n	80063de <_dtoa_r+0x41e>
 80064b8:	9900      	ldr	r1, [sp, #0]
 80064ba:	4b50      	ldr	r3, [pc, #320]	; (80065fc <_dtoa_r+0x63c>)
 80064bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80064c0:	4431      	add	r1, r6
 80064c2:	9102      	str	r1, [sp, #8]
 80064c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064c6:	eeb0 9a47 	vmov.f32	s18, s14
 80064ca:	eef0 9a67 	vmov.f32	s19, s15
 80064ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80064d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064d6:	2900      	cmp	r1, #0
 80064d8:	d044      	beq.n	8006564 <_dtoa_r+0x5a4>
 80064da:	494e      	ldr	r1, [pc, #312]	; (8006614 <_dtoa_r+0x654>)
 80064dc:	2000      	movs	r0, #0
 80064de:	f7fa f9dd 	bl	800089c <__aeabi_ddiv>
 80064e2:	ec53 2b19 	vmov	r2, r3, d9
 80064e6:	f7f9 fef7 	bl	80002d8 <__aeabi_dsub>
 80064ea:	9d00      	ldr	r5, [sp, #0]
 80064ec:	ec41 0b19 	vmov	d9, r0, r1
 80064f0:	4649      	mov	r1, r9
 80064f2:	4640      	mov	r0, r8
 80064f4:	f7fa fb58 	bl	8000ba8 <__aeabi_d2iz>
 80064f8:	4606      	mov	r6, r0
 80064fa:	f7fa f83b 	bl	8000574 <__aeabi_i2d>
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	4640      	mov	r0, r8
 8006504:	4649      	mov	r1, r9
 8006506:	f7f9 fee7 	bl	80002d8 <__aeabi_dsub>
 800650a:	3630      	adds	r6, #48	; 0x30
 800650c:	f805 6b01 	strb.w	r6, [r5], #1
 8006510:	ec53 2b19 	vmov	r2, r3, d9
 8006514:	4680      	mov	r8, r0
 8006516:	4689      	mov	r9, r1
 8006518:	f7fa fb08 	bl	8000b2c <__aeabi_dcmplt>
 800651c:	2800      	cmp	r0, #0
 800651e:	d164      	bne.n	80065ea <_dtoa_r+0x62a>
 8006520:	4642      	mov	r2, r8
 8006522:	464b      	mov	r3, r9
 8006524:	4937      	ldr	r1, [pc, #220]	; (8006604 <_dtoa_r+0x644>)
 8006526:	2000      	movs	r0, #0
 8006528:	f7f9 fed6 	bl	80002d8 <__aeabi_dsub>
 800652c:	ec53 2b19 	vmov	r2, r3, d9
 8006530:	f7fa fafc 	bl	8000b2c <__aeabi_dcmplt>
 8006534:	2800      	cmp	r0, #0
 8006536:	f040 80b6 	bne.w	80066a6 <_dtoa_r+0x6e6>
 800653a:	9b02      	ldr	r3, [sp, #8]
 800653c:	429d      	cmp	r5, r3
 800653e:	f43f af7c 	beq.w	800643a <_dtoa_r+0x47a>
 8006542:	4b31      	ldr	r3, [pc, #196]	; (8006608 <_dtoa_r+0x648>)
 8006544:	ec51 0b19 	vmov	r0, r1, d9
 8006548:	2200      	movs	r2, #0
 800654a:	f7fa f87d 	bl	8000648 <__aeabi_dmul>
 800654e:	4b2e      	ldr	r3, [pc, #184]	; (8006608 <_dtoa_r+0x648>)
 8006550:	ec41 0b19 	vmov	d9, r0, r1
 8006554:	2200      	movs	r2, #0
 8006556:	4640      	mov	r0, r8
 8006558:	4649      	mov	r1, r9
 800655a:	f7fa f875 	bl	8000648 <__aeabi_dmul>
 800655e:	4680      	mov	r8, r0
 8006560:	4689      	mov	r9, r1
 8006562:	e7c5      	b.n	80064f0 <_dtoa_r+0x530>
 8006564:	ec51 0b17 	vmov	r0, r1, d7
 8006568:	f7fa f86e 	bl	8000648 <__aeabi_dmul>
 800656c:	9b02      	ldr	r3, [sp, #8]
 800656e:	9d00      	ldr	r5, [sp, #0]
 8006570:	930f      	str	r3, [sp, #60]	; 0x3c
 8006572:	ec41 0b19 	vmov	d9, r0, r1
 8006576:	4649      	mov	r1, r9
 8006578:	4640      	mov	r0, r8
 800657a:	f7fa fb15 	bl	8000ba8 <__aeabi_d2iz>
 800657e:	4606      	mov	r6, r0
 8006580:	f7f9 fff8 	bl	8000574 <__aeabi_i2d>
 8006584:	3630      	adds	r6, #48	; 0x30
 8006586:	4602      	mov	r2, r0
 8006588:	460b      	mov	r3, r1
 800658a:	4640      	mov	r0, r8
 800658c:	4649      	mov	r1, r9
 800658e:	f7f9 fea3 	bl	80002d8 <__aeabi_dsub>
 8006592:	f805 6b01 	strb.w	r6, [r5], #1
 8006596:	9b02      	ldr	r3, [sp, #8]
 8006598:	429d      	cmp	r5, r3
 800659a:	4680      	mov	r8, r0
 800659c:	4689      	mov	r9, r1
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	d124      	bne.n	80065ee <_dtoa_r+0x62e>
 80065a4:	4b1b      	ldr	r3, [pc, #108]	; (8006614 <_dtoa_r+0x654>)
 80065a6:	ec51 0b19 	vmov	r0, r1, d9
 80065aa:	f7f9 fe97 	bl	80002dc <__adddf3>
 80065ae:	4602      	mov	r2, r0
 80065b0:	460b      	mov	r3, r1
 80065b2:	4640      	mov	r0, r8
 80065b4:	4649      	mov	r1, r9
 80065b6:	f7fa fad7 	bl	8000b68 <__aeabi_dcmpgt>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d173      	bne.n	80066a6 <_dtoa_r+0x6e6>
 80065be:	ec53 2b19 	vmov	r2, r3, d9
 80065c2:	4914      	ldr	r1, [pc, #80]	; (8006614 <_dtoa_r+0x654>)
 80065c4:	2000      	movs	r0, #0
 80065c6:	f7f9 fe87 	bl	80002d8 <__aeabi_dsub>
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	4640      	mov	r0, r8
 80065d0:	4649      	mov	r1, r9
 80065d2:	f7fa faab 	bl	8000b2c <__aeabi_dcmplt>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	f43f af2f 	beq.w	800643a <_dtoa_r+0x47a>
 80065dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80065de:	1e6b      	subs	r3, r5, #1
 80065e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80065e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065e6:	2b30      	cmp	r3, #48	; 0x30
 80065e8:	d0f8      	beq.n	80065dc <_dtoa_r+0x61c>
 80065ea:	46bb      	mov	fp, r7
 80065ec:	e04a      	b.n	8006684 <_dtoa_r+0x6c4>
 80065ee:	4b06      	ldr	r3, [pc, #24]	; (8006608 <_dtoa_r+0x648>)
 80065f0:	f7fa f82a 	bl	8000648 <__aeabi_dmul>
 80065f4:	4680      	mov	r8, r0
 80065f6:	4689      	mov	r9, r1
 80065f8:	e7bd      	b.n	8006576 <_dtoa_r+0x5b6>
 80065fa:	bf00      	nop
 80065fc:	08007d18 	.word	0x08007d18
 8006600:	08007cf0 	.word	0x08007cf0
 8006604:	3ff00000 	.word	0x3ff00000
 8006608:	40240000 	.word	0x40240000
 800660c:	401c0000 	.word	0x401c0000
 8006610:	40140000 	.word	0x40140000
 8006614:	3fe00000 	.word	0x3fe00000
 8006618:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800661c:	9d00      	ldr	r5, [sp, #0]
 800661e:	4642      	mov	r2, r8
 8006620:	464b      	mov	r3, r9
 8006622:	4630      	mov	r0, r6
 8006624:	4639      	mov	r1, r7
 8006626:	f7fa f939 	bl	800089c <__aeabi_ddiv>
 800662a:	f7fa fabd 	bl	8000ba8 <__aeabi_d2iz>
 800662e:	9001      	str	r0, [sp, #4]
 8006630:	f7f9 ffa0 	bl	8000574 <__aeabi_i2d>
 8006634:	4642      	mov	r2, r8
 8006636:	464b      	mov	r3, r9
 8006638:	f7fa f806 	bl	8000648 <__aeabi_dmul>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4630      	mov	r0, r6
 8006642:	4639      	mov	r1, r7
 8006644:	f7f9 fe48 	bl	80002d8 <__aeabi_dsub>
 8006648:	9e01      	ldr	r6, [sp, #4]
 800664a:	9f04      	ldr	r7, [sp, #16]
 800664c:	3630      	adds	r6, #48	; 0x30
 800664e:	f805 6b01 	strb.w	r6, [r5], #1
 8006652:	9e00      	ldr	r6, [sp, #0]
 8006654:	1bae      	subs	r6, r5, r6
 8006656:	42b7      	cmp	r7, r6
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	d134      	bne.n	80066c8 <_dtoa_r+0x708>
 800665e:	f7f9 fe3d 	bl	80002dc <__adddf3>
 8006662:	4642      	mov	r2, r8
 8006664:	464b      	mov	r3, r9
 8006666:	4606      	mov	r6, r0
 8006668:	460f      	mov	r7, r1
 800666a:	f7fa fa7d 	bl	8000b68 <__aeabi_dcmpgt>
 800666e:	b9c8      	cbnz	r0, 80066a4 <_dtoa_r+0x6e4>
 8006670:	4642      	mov	r2, r8
 8006672:	464b      	mov	r3, r9
 8006674:	4630      	mov	r0, r6
 8006676:	4639      	mov	r1, r7
 8006678:	f7fa fa4e 	bl	8000b18 <__aeabi_dcmpeq>
 800667c:	b110      	cbz	r0, 8006684 <_dtoa_r+0x6c4>
 800667e:	9b01      	ldr	r3, [sp, #4]
 8006680:	07db      	lsls	r3, r3, #31
 8006682:	d40f      	bmi.n	80066a4 <_dtoa_r+0x6e4>
 8006684:	4651      	mov	r1, sl
 8006686:	4620      	mov	r0, r4
 8006688:	f000 fbcc 	bl	8006e24 <_Bfree>
 800668c:	2300      	movs	r3, #0
 800668e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006690:	702b      	strb	r3, [r5, #0]
 8006692:	f10b 0301 	add.w	r3, fp, #1
 8006696:	6013      	str	r3, [r2, #0]
 8006698:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800669a:	2b00      	cmp	r3, #0
 800669c:	f43f ace2 	beq.w	8006064 <_dtoa_r+0xa4>
 80066a0:	601d      	str	r5, [r3, #0]
 80066a2:	e4df      	b.n	8006064 <_dtoa_r+0xa4>
 80066a4:	465f      	mov	r7, fp
 80066a6:	462b      	mov	r3, r5
 80066a8:	461d      	mov	r5, r3
 80066aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066ae:	2a39      	cmp	r2, #57	; 0x39
 80066b0:	d106      	bne.n	80066c0 <_dtoa_r+0x700>
 80066b2:	9a00      	ldr	r2, [sp, #0]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d1f7      	bne.n	80066a8 <_dtoa_r+0x6e8>
 80066b8:	9900      	ldr	r1, [sp, #0]
 80066ba:	2230      	movs	r2, #48	; 0x30
 80066bc:	3701      	adds	r7, #1
 80066be:	700a      	strb	r2, [r1, #0]
 80066c0:	781a      	ldrb	r2, [r3, #0]
 80066c2:	3201      	adds	r2, #1
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	e790      	b.n	80065ea <_dtoa_r+0x62a>
 80066c8:	4ba3      	ldr	r3, [pc, #652]	; (8006958 <_dtoa_r+0x998>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	f7f9 ffbc 	bl	8000648 <__aeabi_dmul>
 80066d0:	2200      	movs	r2, #0
 80066d2:	2300      	movs	r3, #0
 80066d4:	4606      	mov	r6, r0
 80066d6:	460f      	mov	r7, r1
 80066d8:	f7fa fa1e 	bl	8000b18 <__aeabi_dcmpeq>
 80066dc:	2800      	cmp	r0, #0
 80066de:	d09e      	beq.n	800661e <_dtoa_r+0x65e>
 80066e0:	e7d0      	b.n	8006684 <_dtoa_r+0x6c4>
 80066e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066e4:	2a00      	cmp	r2, #0
 80066e6:	f000 80ca 	beq.w	800687e <_dtoa_r+0x8be>
 80066ea:	9a07      	ldr	r2, [sp, #28]
 80066ec:	2a01      	cmp	r2, #1
 80066ee:	f300 80ad 	bgt.w	800684c <_dtoa_r+0x88c>
 80066f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066f4:	2a00      	cmp	r2, #0
 80066f6:	f000 80a5 	beq.w	8006844 <_dtoa_r+0x884>
 80066fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066fe:	9e08      	ldr	r6, [sp, #32]
 8006700:	9d05      	ldr	r5, [sp, #20]
 8006702:	9a05      	ldr	r2, [sp, #20]
 8006704:	441a      	add	r2, r3
 8006706:	9205      	str	r2, [sp, #20]
 8006708:	9a06      	ldr	r2, [sp, #24]
 800670a:	2101      	movs	r1, #1
 800670c:	441a      	add	r2, r3
 800670e:	4620      	mov	r0, r4
 8006710:	9206      	str	r2, [sp, #24]
 8006712:	f000 fc3d 	bl	8006f90 <__i2b>
 8006716:	4607      	mov	r7, r0
 8006718:	b165      	cbz	r5, 8006734 <_dtoa_r+0x774>
 800671a:	9b06      	ldr	r3, [sp, #24]
 800671c:	2b00      	cmp	r3, #0
 800671e:	dd09      	ble.n	8006734 <_dtoa_r+0x774>
 8006720:	42ab      	cmp	r3, r5
 8006722:	9a05      	ldr	r2, [sp, #20]
 8006724:	bfa8      	it	ge
 8006726:	462b      	movge	r3, r5
 8006728:	1ad2      	subs	r2, r2, r3
 800672a:	9205      	str	r2, [sp, #20]
 800672c:	9a06      	ldr	r2, [sp, #24]
 800672e:	1aed      	subs	r5, r5, r3
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	9306      	str	r3, [sp, #24]
 8006734:	9b08      	ldr	r3, [sp, #32]
 8006736:	b1f3      	cbz	r3, 8006776 <_dtoa_r+0x7b6>
 8006738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 80a3 	beq.w	8006886 <_dtoa_r+0x8c6>
 8006740:	2e00      	cmp	r6, #0
 8006742:	dd10      	ble.n	8006766 <_dtoa_r+0x7a6>
 8006744:	4639      	mov	r1, r7
 8006746:	4632      	mov	r2, r6
 8006748:	4620      	mov	r0, r4
 800674a:	f000 fce1 	bl	8007110 <__pow5mult>
 800674e:	4652      	mov	r2, sl
 8006750:	4601      	mov	r1, r0
 8006752:	4607      	mov	r7, r0
 8006754:	4620      	mov	r0, r4
 8006756:	f000 fc31 	bl	8006fbc <__multiply>
 800675a:	4651      	mov	r1, sl
 800675c:	4680      	mov	r8, r0
 800675e:	4620      	mov	r0, r4
 8006760:	f000 fb60 	bl	8006e24 <_Bfree>
 8006764:	46c2      	mov	sl, r8
 8006766:	9b08      	ldr	r3, [sp, #32]
 8006768:	1b9a      	subs	r2, r3, r6
 800676a:	d004      	beq.n	8006776 <_dtoa_r+0x7b6>
 800676c:	4651      	mov	r1, sl
 800676e:	4620      	mov	r0, r4
 8006770:	f000 fcce 	bl	8007110 <__pow5mult>
 8006774:	4682      	mov	sl, r0
 8006776:	2101      	movs	r1, #1
 8006778:	4620      	mov	r0, r4
 800677a:	f000 fc09 	bl	8006f90 <__i2b>
 800677e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006780:	2b00      	cmp	r3, #0
 8006782:	4606      	mov	r6, r0
 8006784:	f340 8081 	ble.w	800688a <_dtoa_r+0x8ca>
 8006788:	461a      	mov	r2, r3
 800678a:	4601      	mov	r1, r0
 800678c:	4620      	mov	r0, r4
 800678e:	f000 fcbf 	bl	8007110 <__pow5mult>
 8006792:	9b07      	ldr	r3, [sp, #28]
 8006794:	2b01      	cmp	r3, #1
 8006796:	4606      	mov	r6, r0
 8006798:	dd7a      	ble.n	8006890 <_dtoa_r+0x8d0>
 800679a:	f04f 0800 	mov.w	r8, #0
 800679e:	6933      	ldr	r3, [r6, #16]
 80067a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80067a4:	6918      	ldr	r0, [r3, #16]
 80067a6:	f000 fba5 	bl	8006ef4 <__hi0bits>
 80067aa:	f1c0 0020 	rsb	r0, r0, #32
 80067ae:	9b06      	ldr	r3, [sp, #24]
 80067b0:	4418      	add	r0, r3
 80067b2:	f010 001f 	ands.w	r0, r0, #31
 80067b6:	f000 8094 	beq.w	80068e2 <_dtoa_r+0x922>
 80067ba:	f1c0 0320 	rsb	r3, r0, #32
 80067be:	2b04      	cmp	r3, #4
 80067c0:	f340 8085 	ble.w	80068ce <_dtoa_r+0x90e>
 80067c4:	9b05      	ldr	r3, [sp, #20]
 80067c6:	f1c0 001c 	rsb	r0, r0, #28
 80067ca:	4403      	add	r3, r0
 80067cc:	9305      	str	r3, [sp, #20]
 80067ce:	9b06      	ldr	r3, [sp, #24]
 80067d0:	4403      	add	r3, r0
 80067d2:	4405      	add	r5, r0
 80067d4:	9306      	str	r3, [sp, #24]
 80067d6:	9b05      	ldr	r3, [sp, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	dd05      	ble.n	80067e8 <_dtoa_r+0x828>
 80067dc:	4651      	mov	r1, sl
 80067de:	461a      	mov	r2, r3
 80067e0:	4620      	mov	r0, r4
 80067e2:	f000 fcef 	bl	80071c4 <__lshift>
 80067e6:	4682      	mov	sl, r0
 80067e8:	9b06      	ldr	r3, [sp, #24]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	dd05      	ble.n	80067fa <_dtoa_r+0x83a>
 80067ee:	4631      	mov	r1, r6
 80067f0:	461a      	mov	r2, r3
 80067f2:	4620      	mov	r0, r4
 80067f4:	f000 fce6 	bl	80071c4 <__lshift>
 80067f8:	4606      	mov	r6, r0
 80067fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d072      	beq.n	80068e6 <_dtoa_r+0x926>
 8006800:	4631      	mov	r1, r6
 8006802:	4650      	mov	r0, sl
 8006804:	f000 fd4a 	bl	800729c <__mcmp>
 8006808:	2800      	cmp	r0, #0
 800680a:	da6c      	bge.n	80068e6 <_dtoa_r+0x926>
 800680c:	2300      	movs	r3, #0
 800680e:	4651      	mov	r1, sl
 8006810:	220a      	movs	r2, #10
 8006812:	4620      	mov	r0, r4
 8006814:	f000 fb28 	bl	8006e68 <__multadd>
 8006818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800681a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800681e:	4682      	mov	sl, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 81b0 	beq.w	8006b86 <_dtoa_r+0xbc6>
 8006826:	2300      	movs	r3, #0
 8006828:	4639      	mov	r1, r7
 800682a:	220a      	movs	r2, #10
 800682c:	4620      	mov	r0, r4
 800682e:	f000 fb1b 	bl	8006e68 <__multadd>
 8006832:	9b01      	ldr	r3, [sp, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	4607      	mov	r7, r0
 8006838:	f300 8096 	bgt.w	8006968 <_dtoa_r+0x9a8>
 800683c:	9b07      	ldr	r3, [sp, #28]
 800683e:	2b02      	cmp	r3, #2
 8006840:	dc59      	bgt.n	80068f6 <_dtoa_r+0x936>
 8006842:	e091      	b.n	8006968 <_dtoa_r+0x9a8>
 8006844:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006846:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800684a:	e758      	b.n	80066fe <_dtoa_r+0x73e>
 800684c:	9b04      	ldr	r3, [sp, #16]
 800684e:	1e5e      	subs	r6, r3, #1
 8006850:	9b08      	ldr	r3, [sp, #32]
 8006852:	42b3      	cmp	r3, r6
 8006854:	bfbf      	itttt	lt
 8006856:	9b08      	ldrlt	r3, [sp, #32]
 8006858:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800685a:	9608      	strlt	r6, [sp, #32]
 800685c:	1af3      	sublt	r3, r6, r3
 800685e:	bfb4      	ite	lt
 8006860:	18d2      	addlt	r2, r2, r3
 8006862:	1b9e      	subge	r6, r3, r6
 8006864:	9b04      	ldr	r3, [sp, #16]
 8006866:	bfbc      	itt	lt
 8006868:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800686a:	2600      	movlt	r6, #0
 800686c:	2b00      	cmp	r3, #0
 800686e:	bfb7      	itett	lt
 8006870:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006874:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006878:	1a9d      	sublt	r5, r3, r2
 800687a:	2300      	movlt	r3, #0
 800687c:	e741      	b.n	8006702 <_dtoa_r+0x742>
 800687e:	9e08      	ldr	r6, [sp, #32]
 8006880:	9d05      	ldr	r5, [sp, #20]
 8006882:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006884:	e748      	b.n	8006718 <_dtoa_r+0x758>
 8006886:	9a08      	ldr	r2, [sp, #32]
 8006888:	e770      	b.n	800676c <_dtoa_r+0x7ac>
 800688a:	9b07      	ldr	r3, [sp, #28]
 800688c:	2b01      	cmp	r3, #1
 800688e:	dc19      	bgt.n	80068c4 <_dtoa_r+0x904>
 8006890:	9b02      	ldr	r3, [sp, #8]
 8006892:	b9bb      	cbnz	r3, 80068c4 <_dtoa_r+0x904>
 8006894:	9b03      	ldr	r3, [sp, #12]
 8006896:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800689a:	b99b      	cbnz	r3, 80068c4 <_dtoa_r+0x904>
 800689c:	9b03      	ldr	r3, [sp, #12]
 800689e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068a2:	0d1b      	lsrs	r3, r3, #20
 80068a4:	051b      	lsls	r3, r3, #20
 80068a6:	b183      	cbz	r3, 80068ca <_dtoa_r+0x90a>
 80068a8:	9b05      	ldr	r3, [sp, #20]
 80068aa:	3301      	adds	r3, #1
 80068ac:	9305      	str	r3, [sp, #20]
 80068ae:	9b06      	ldr	r3, [sp, #24]
 80068b0:	3301      	adds	r3, #1
 80068b2:	9306      	str	r3, [sp, #24]
 80068b4:	f04f 0801 	mov.w	r8, #1
 80068b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f47f af6f 	bne.w	800679e <_dtoa_r+0x7de>
 80068c0:	2001      	movs	r0, #1
 80068c2:	e774      	b.n	80067ae <_dtoa_r+0x7ee>
 80068c4:	f04f 0800 	mov.w	r8, #0
 80068c8:	e7f6      	b.n	80068b8 <_dtoa_r+0x8f8>
 80068ca:	4698      	mov	r8, r3
 80068cc:	e7f4      	b.n	80068b8 <_dtoa_r+0x8f8>
 80068ce:	d082      	beq.n	80067d6 <_dtoa_r+0x816>
 80068d0:	9a05      	ldr	r2, [sp, #20]
 80068d2:	331c      	adds	r3, #28
 80068d4:	441a      	add	r2, r3
 80068d6:	9205      	str	r2, [sp, #20]
 80068d8:	9a06      	ldr	r2, [sp, #24]
 80068da:	441a      	add	r2, r3
 80068dc:	441d      	add	r5, r3
 80068de:	9206      	str	r2, [sp, #24]
 80068e0:	e779      	b.n	80067d6 <_dtoa_r+0x816>
 80068e2:	4603      	mov	r3, r0
 80068e4:	e7f4      	b.n	80068d0 <_dtoa_r+0x910>
 80068e6:	9b04      	ldr	r3, [sp, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	dc37      	bgt.n	800695c <_dtoa_r+0x99c>
 80068ec:	9b07      	ldr	r3, [sp, #28]
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	dd34      	ble.n	800695c <_dtoa_r+0x99c>
 80068f2:	9b04      	ldr	r3, [sp, #16]
 80068f4:	9301      	str	r3, [sp, #4]
 80068f6:	9b01      	ldr	r3, [sp, #4]
 80068f8:	b963      	cbnz	r3, 8006914 <_dtoa_r+0x954>
 80068fa:	4631      	mov	r1, r6
 80068fc:	2205      	movs	r2, #5
 80068fe:	4620      	mov	r0, r4
 8006900:	f000 fab2 	bl	8006e68 <__multadd>
 8006904:	4601      	mov	r1, r0
 8006906:	4606      	mov	r6, r0
 8006908:	4650      	mov	r0, sl
 800690a:	f000 fcc7 	bl	800729c <__mcmp>
 800690e:	2800      	cmp	r0, #0
 8006910:	f73f adbb 	bgt.w	800648a <_dtoa_r+0x4ca>
 8006914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006916:	9d00      	ldr	r5, [sp, #0]
 8006918:	ea6f 0b03 	mvn.w	fp, r3
 800691c:	f04f 0800 	mov.w	r8, #0
 8006920:	4631      	mov	r1, r6
 8006922:	4620      	mov	r0, r4
 8006924:	f000 fa7e 	bl	8006e24 <_Bfree>
 8006928:	2f00      	cmp	r7, #0
 800692a:	f43f aeab 	beq.w	8006684 <_dtoa_r+0x6c4>
 800692e:	f1b8 0f00 	cmp.w	r8, #0
 8006932:	d005      	beq.n	8006940 <_dtoa_r+0x980>
 8006934:	45b8      	cmp	r8, r7
 8006936:	d003      	beq.n	8006940 <_dtoa_r+0x980>
 8006938:	4641      	mov	r1, r8
 800693a:	4620      	mov	r0, r4
 800693c:	f000 fa72 	bl	8006e24 <_Bfree>
 8006940:	4639      	mov	r1, r7
 8006942:	4620      	mov	r0, r4
 8006944:	f000 fa6e 	bl	8006e24 <_Bfree>
 8006948:	e69c      	b.n	8006684 <_dtoa_r+0x6c4>
 800694a:	2600      	movs	r6, #0
 800694c:	4637      	mov	r7, r6
 800694e:	e7e1      	b.n	8006914 <_dtoa_r+0x954>
 8006950:	46bb      	mov	fp, r7
 8006952:	4637      	mov	r7, r6
 8006954:	e599      	b.n	800648a <_dtoa_r+0x4ca>
 8006956:	bf00      	nop
 8006958:	40240000 	.word	0x40240000
 800695c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 80c8 	beq.w	8006af4 <_dtoa_r+0xb34>
 8006964:	9b04      	ldr	r3, [sp, #16]
 8006966:	9301      	str	r3, [sp, #4]
 8006968:	2d00      	cmp	r5, #0
 800696a:	dd05      	ble.n	8006978 <_dtoa_r+0x9b8>
 800696c:	4639      	mov	r1, r7
 800696e:	462a      	mov	r2, r5
 8006970:	4620      	mov	r0, r4
 8006972:	f000 fc27 	bl	80071c4 <__lshift>
 8006976:	4607      	mov	r7, r0
 8006978:	f1b8 0f00 	cmp.w	r8, #0
 800697c:	d05b      	beq.n	8006a36 <_dtoa_r+0xa76>
 800697e:	6879      	ldr	r1, [r7, #4]
 8006980:	4620      	mov	r0, r4
 8006982:	f000 fa0f 	bl	8006da4 <_Balloc>
 8006986:	4605      	mov	r5, r0
 8006988:	b928      	cbnz	r0, 8006996 <_dtoa_r+0x9d6>
 800698a:	4b83      	ldr	r3, [pc, #524]	; (8006b98 <_dtoa_r+0xbd8>)
 800698c:	4602      	mov	r2, r0
 800698e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006992:	f7ff bb2e 	b.w	8005ff2 <_dtoa_r+0x32>
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	3202      	adds	r2, #2
 800699a:	0092      	lsls	r2, r2, #2
 800699c:	f107 010c 	add.w	r1, r7, #12
 80069a0:	300c      	adds	r0, #12
 80069a2:	f001 f801 	bl	80079a8 <memcpy>
 80069a6:	2201      	movs	r2, #1
 80069a8:	4629      	mov	r1, r5
 80069aa:	4620      	mov	r0, r4
 80069ac:	f000 fc0a 	bl	80071c4 <__lshift>
 80069b0:	9b00      	ldr	r3, [sp, #0]
 80069b2:	3301      	adds	r3, #1
 80069b4:	9304      	str	r3, [sp, #16]
 80069b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069ba:	4413      	add	r3, r2
 80069bc:	9308      	str	r3, [sp, #32]
 80069be:	9b02      	ldr	r3, [sp, #8]
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	46b8      	mov	r8, r7
 80069c6:	9306      	str	r3, [sp, #24]
 80069c8:	4607      	mov	r7, r0
 80069ca:	9b04      	ldr	r3, [sp, #16]
 80069cc:	4631      	mov	r1, r6
 80069ce:	3b01      	subs	r3, #1
 80069d0:	4650      	mov	r0, sl
 80069d2:	9301      	str	r3, [sp, #4]
 80069d4:	f7ff fa6c 	bl	8005eb0 <quorem>
 80069d8:	4641      	mov	r1, r8
 80069da:	9002      	str	r0, [sp, #8]
 80069dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80069e0:	4650      	mov	r0, sl
 80069e2:	f000 fc5b 	bl	800729c <__mcmp>
 80069e6:	463a      	mov	r2, r7
 80069e8:	9005      	str	r0, [sp, #20]
 80069ea:	4631      	mov	r1, r6
 80069ec:	4620      	mov	r0, r4
 80069ee:	f000 fc71 	bl	80072d4 <__mdiff>
 80069f2:	68c2      	ldr	r2, [r0, #12]
 80069f4:	4605      	mov	r5, r0
 80069f6:	bb02      	cbnz	r2, 8006a3a <_dtoa_r+0xa7a>
 80069f8:	4601      	mov	r1, r0
 80069fa:	4650      	mov	r0, sl
 80069fc:	f000 fc4e 	bl	800729c <__mcmp>
 8006a00:	4602      	mov	r2, r0
 8006a02:	4629      	mov	r1, r5
 8006a04:	4620      	mov	r0, r4
 8006a06:	9209      	str	r2, [sp, #36]	; 0x24
 8006a08:	f000 fa0c 	bl	8006e24 <_Bfree>
 8006a0c:	9b07      	ldr	r3, [sp, #28]
 8006a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a10:	9d04      	ldr	r5, [sp, #16]
 8006a12:	ea43 0102 	orr.w	r1, r3, r2
 8006a16:	9b06      	ldr	r3, [sp, #24]
 8006a18:	4319      	orrs	r1, r3
 8006a1a:	d110      	bne.n	8006a3e <_dtoa_r+0xa7e>
 8006a1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a20:	d029      	beq.n	8006a76 <_dtoa_r+0xab6>
 8006a22:	9b05      	ldr	r3, [sp, #20]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	dd02      	ble.n	8006a2e <_dtoa_r+0xa6e>
 8006a28:	9b02      	ldr	r3, [sp, #8]
 8006a2a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006a2e:	9b01      	ldr	r3, [sp, #4]
 8006a30:	f883 9000 	strb.w	r9, [r3]
 8006a34:	e774      	b.n	8006920 <_dtoa_r+0x960>
 8006a36:	4638      	mov	r0, r7
 8006a38:	e7ba      	b.n	80069b0 <_dtoa_r+0x9f0>
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	e7e1      	b.n	8006a02 <_dtoa_r+0xa42>
 8006a3e:	9b05      	ldr	r3, [sp, #20]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	db04      	blt.n	8006a4e <_dtoa_r+0xa8e>
 8006a44:	9907      	ldr	r1, [sp, #28]
 8006a46:	430b      	orrs	r3, r1
 8006a48:	9906      	ldr	r1, [sp, #24]
 8006a4a:	430b      	orrs	r3, r1
 8006a4c:	d120      	bne.n	8006a90 <_dtoa_r+0xad0>
 8006a4e:	2a00      	cmp	r2, #0
 8006a50:	dded      	ble.n	8006a2e <_dtoa_r+0xa6e>
 8006a52:	4651      	mov	r1, sl
 8006a54:	2201      	movs	r2, #1
 8006a56:	4620      	mov	r0, r4
 8006a58:	f000 fbb4 	bl	80071c4 <__lshift>
 8006a5c:	4631      	mov	r1, r6
 8006a5e:	4682      	mov	sl, r0
 8006a60:	f000 fc1c 	bl	800729c <__mcmp>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	dc03      	bgt.n	8006a70 <_dtoa_r+0xab0>
 8006a68:	d1e1      	bne.n	8006a2e <_dtoa_r+0xa6e>
 8006a6a:	f019 0f01 	tst.w	r9, #1
 8006a6e:	d0de      	beq.n	8006a2e <_dtoa_r+0xa6e>
 8006a70:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a74:	d1d8      	bne.n	8006a28 <_dtoa_r+0xa68>
 8006a76:	9a01      	ldr	r2, [sp, #4]
 8006a78:	2339      	movs	r3, #57	; 0x39
 8006a7a:	7013      	strb	r3, [r2, #0]
 8006a7c:	462b      	mov	r3, r5
 8006a7e:	461d      	mov	r5, r3
 8006a80:	3b01      	subs	r3, #1
 8006a82:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a86:	2a39      	cmp	r2, #57	; 0x39
 8006a88:	d06c      	beq.n	8006b64 <_dtoa_r+0xba4>
 8006a8a:	3201      	adds	r2, #1
 8006a8c:	701a      	strb	r2, [r3, #0]
 8006a8e:	e747      	b.n	8006920 <_dtoa_r+0x960>
 8006a90:	2a00      	cmp	r2, #0
 8006a92:	dd07      	ble.n	8006aa4 <_dtoa_r+0xae4>
 8006a94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a98:	d0ed      	beq.n	8006a76 <_dtoa_r+0xab6>
 8006a9a:	9a01      	ldr	r2, [sp, #4]
 8006a9c:	f109 0301 	add.w	r3, r9, #1
 8006aa0:	7013      	strb	r3, [r2, #0]
 8006aa2:	e73d      	b.n	8006920 <_dtoa_r+0x960>
 8006aa4:	9b04      	ldr	r3, [sp, #16]
 8006aa6:	9a08      	ldr	r2, [sp, #32]
 8006aa8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d043      	beq.n	8006b38 <_dtoa_r+0xb78>
 8006ab0:	4651      	mov	r1, sl
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	220a      	movs	r2, #10
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f000 f9d6 	bl	8006e68 <__multadd>
 8006abc:	45b8      	cmp	r8, r7
 8006abe:	4682      	mov	sl, r0
 8006ac0:	f04f 0300 	mov.w	r3, #0
 8006ac4:	f04f 020a 	mov.w	r2, #10
 8006ac8:	4641      	mov	r1, r8
 8006aca:	4620      	mov	r0, r4
 8006acc:	d107      	bne.n	8006ade <_dtoa_r+0xb1e>
 8006ace:	f000 f9cb 	bl	8006e68 <__multadd>
 8006ad2:	4680      	mov	r8, r0
 8006ad4:	4607      	mov	r7, r0
 8006ad6:	9b04      	ldr	r3, [sp, #16]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	9304      	str	r3, [sp, #16]
 8006adc:	e775      	b.n	80069ca <_dtoa_r+0xa0a>
 8006ade:	f000 f9c3 	bl	8006e68 <__multadd>
 8006ae2:	4639      	mov	r1, r7
 8006ae4:	4680      	mov	r8, r0
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	220a      	movs	r2, #10
 8006aea:	4620      	mov	r0, r4
 8006aec:	f000 f9bc 	bl	8006e68 <__multadd>
 8006af0:	4607      	mov	r7, r0
 8006af2:	e7f0      	b.n	8006ad6 <_dtoa_r+0xb16>
 8006af4:	9b04      	ldr	r3, [sp, #16]
 8006af6:	9301      	str	r3, [sp, #4]
 8006af8:	9d00      	ldr	r5, [sp, #0]
 8006afa:	4631      	mov	r1, r6
 8006afc:	4650      	mov	r0, sl
 8006afe:	f7ff f9d7 	bl	8005eb0 <quorem>
 8006b02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006b06:	9b00      	ldr	r3, [sp, #0]
 8006b08:	f805 9b01 	strb.w	r9, [r5], #1
 8006b0c:	1aea      	subs	r2, r5, r3
 8006b0e:	9b01      	ldr	r3, [sp, #4]
 8006b10:	4293      	cmp	r3, r2
 8006b12:	dd07      	ble.n	8006b24 <_dtoa_r+0xb64>
 8006b14:	4651      	mov	r1, sl
 8006b16:	2300      	movs	r3, #0
 8006b18:	220a      	movs	r2, #10
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f000 f9a4 	bl	8006e68 <__multadd>
 8006b20:	4682      	mov	sl, r0
 8006b22:	e7ea      	b.n	8006afa <_dtoa_r+0xb3a>
 8006b24:	9b01      	ldr	r3, [sp, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	bfc8      	it	gt
 8006b2a:	461d      	movgt	r5, r3
 8006b2c:	9b00      	ldr	r3, [sp, #0]
 8006b2e:	bfd8      	it	le
 8006b30:	2501      	movle	r5, #1
 8006b32:	441d      	add	r5, r3
 8006b34:	f04f 0800 	mov.w	r8, #0
 8006b38:	4651      	mov	r1, sl
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f000 fb41 	bl	80071c4 <__lshift>
 8006b42:	4631      	mov	r1, r6
 8006b44:	4682      	mov	sl, r0
 8006b46:	f000 fba9 	bl	800729c <__mcmp>
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	dc96      	bgt.n	8006a7c <_dtoa_r+0xabc>
 8006b4e:	d102      	bne.n	8006b56 <_dtoa_r+0xb96>
 8006b50:	f019 0f01 	tst.w	r9, #1
 8006b54:	d192      	bne.n	8006a7c <_dtoa_r+0xabc>
 8006b56:	462b      	mov	r3, r5
 8006b58:	461d      	mov	r5, r3
 8006b5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b5e:	2a30      	cmp	r2, #48	; 0x30
 8006b60:	d0fa      	beq.n	8006b58 <_dtoa_r+0xb98>
 8006b62:	e6dd      	b.n	8006920 <_dtoa_r+0x960>
 8006b64:	9a00      	ldr	r2, [sp, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d189      	bne.n	8006a7e <_dtoa_r+0xabe>
 8006b6a:	f10b 0b01 	add.w	fp, fp, #1
 8006b6e:	2331      	movs	r3, #49	; 0x31
 8006b70:	e796      	b.n	8006aa0 <_dtoa_r+0xae0>
 8006b72:	4b0a      	ldr	r3, [pc, #40]	; (8006b9c <_dtoa_r+0xbdc>)
 8006b74:	f7ff ba99 	b.w	80060aa <_dtoa_r+0xea>
 8006b78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f47f aa6d 	bne.w	800605a <_dtoa_r+0x9a>
 8006b80:	4b07      	ldr	r3, [pc, #28]	; (8006ba0 <_dtoa_r+0xbe0>)
 8006b82:	f7ff ba92 	b.w	80060aa <_dtoa_r+0xea>
 8006b86:	9b01      	ldr	r3, [sp, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	dcb5      	bgt.n	8006af8 <_dtoa_r+0xb38>
 8006b8c:	9b07      	ldr	r3, [sp, #28]
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	f73f aeb1 	bgt.w	80068f6 <_dtoa_r+0x936>
 8006b94:	e7b0      	b.n	8006af8 <_dtoa_r+0xb38>
 8006b96:	bf00      	nop
 8006b98:	08007c84 	.word	0x08007c84
 8006b9c:	08007be4 	.word	0x08007be4
 8006ba0:	08007c08 	.word	0x08007c08

08006ba4 <_free_r>:
 8006ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ba6:	2900      	cmp	r1, #0
 8006ba8:	d044      	beq.n	8006c34 <_free_r+0x90>
 8006baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bae:	9001      	str	r0, [sp, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f1a1 0404 	sub.w	r4, r1, #4
 8006bb6:	bfb8      	it	lt
 8006bb8:	18e4      	addlt	r4, r4, r3
 8006bba:	f000 f8e7 	bl	8006d8c <__malloc_lock>
 8006bbe:	4a1e      	ldr	r2, [pc, #120]	; (8006c38 <_free_r+0x94>)
 8006bc0:	9801      	ldr	r0, [sp, #4]
 8006bc2:	6813      	ldr	r3, [r2, #0]
 8006bc4:	b933      	cbnz	r3, 8006bd4 <_free_r+0x30>
 8006bc6:	6063      	str	r3, [r4, #4]
 8006bc8:	6014      	str	r4, [r2, #0]
 8006bca:	b003      	add	sp, #12
 8006bcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bd0:	f000 b8e2 	b.w	8006d98 <__malloc_unlock>
 8006bd4:	42a3      	cmp	r3, r4
 8006bd6:	d908      	bls.n	8006bea <_free_r+0x46>
 8006bd8:	6825      	ldr	r5, [r4, #0]
 8006bda:	1961      	adds	r1, r4, r5
 8006bdc:	428b      	cmp	r3, r1
 8006bde:	bf01      	itttt	eq
 8006be0:	6819      	ldreq	r1, [r3, #0]
 8006be2:	685b      	ldreq	r3, [r3, #4]
 8006be4:	1949      	addeq	r1, r1, r5
 8006be6:	6021      	streq	r1, [r4, #0]
 8006be8:	e7ed      	b.n	8006bc6 <_free_r+0x22>
 8006bea:	461a      	mov	r2, r3
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	b10b      	cbz	r3, 8006bf4 <_free_r+0x50>
 8006bf0:	42a3      	cmp	r3, r4
 8006bf2:	d9fa      	bls.n	8006bea <_free_r+0x46>
 8006bf4:	6811      	ldr	r1, [r2, #0]
 8006bf6:	1855      	adds	r5, r2, r1
 8006bf8:	42a5      	cmp	r5, r4
 8006bfa:	d10b      	bne.n	8006c14 <_free_r+0x70>
 8006bfc:	6824      	ldr	r4, [r4, #0]
 8006bfe:	4421      	add	r1, r4
 8006c00:	1854      	adds	r4, r2, r1
 8006c02:	42a3      	cmp	r3, r4
 8006c04:	6011      	str	r1, [r2, #0]
 8006c06:	d1e0      	bne.n	8006bca <_free_r+0x26>
 8006c08:	681c      	ldr	r4, [r3, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	6053      	str	r3, [r2, #4]
 8006c0e:	440c      	add	r4, r1
 8006c10:	6014      	str	r4, [r2, #0]
 8006c12:	e7da      	b.n	8006bca <_free_r+0x26>
 8006c14:	d902      	bls.n	8006c1c <_free_r+0x78>
 8006c16:	230c      	movs	r3, #12
 8006c18:	6003      	str	r3, [r0, #0]
 8006c1a:	e7d6      	b.n	8006bca <_free_r+0x26>
 8006c1c:	6825      	ldr	r5, [r4, #0]
 8006c1e:	1961      	adds	r1, r4, r5
 8006c20:	428b      	cmp	r3, r1
 8006c22:	bf04      	itt	eq
 8006c24:	6819      	ldreq	r1, [r3, #0]
 8006c26:	685b      	ldreq	r3, [r3, #4]
 8006c28:	6063      	str	r3, [r4, #4]
 8006c2a:	bf04      	itt	eq
 8006c2c:	1949      	addeq	r1, r1, r5
 8006c2e:	6021      	streq	r1, [r4, #0]
 8006c30:	6054      	str	r4, [r2, #4]
 8006c32:	e7ca      	b.n	8006bca <_free_r+0x26>
 8006c34:	b003      	add	sp, #12
 8006c36:	bd30      	pop	{r4, r5, pc}
 8006c38:	20000470 	.word	0x20000470

08006c3c <malloc>:
 8006c3c:	4b02      	ldr	r3, [pc, #8]	; (8006c48 <malloc+0xc>)
 8006c3e:	4601      	mov	r1, r0
 8006c40:	6818      	ldr	r0, [r3, #0]
 8006c42:	f000 b823 	b.w	8006c8c <_malloc_r>
 8006c46:	bf00      	nop
 8006c48:	20000064 	.word	0x20000064

08006c4c <sbrk_aligned>:
 8006c4c:	b570      	push	{r4, r5, r6, lr}
 8006c4e:	4e0e      	ldr	r6, [pc, #56]	; (8006c88 <sbrk_aligned+0x3c>)
 8006c50:	460c      	mov	r4, r1
 8006c52:	6831      	ldr	r1, [r6, #0]
 8006c54:	4605      	mov	r5, r0
 8006c56:	b911      	cbnz	r1, 8006c5e <sbrk_aligned+0x12>
 8006c58:	f000 fe96 	bl	8007988 <_sbrk_r>
 8006c5c:	6030      	str	r0, [r6, #0]
 8006c5e:	4621      	mov	r1, r4
 8006c60:	4628      	mov	r0, r5
 8006c62:	f000 fe91 	bl	8007988 <_sbrk_r>
 8006c66:	1c43      	adds	r3, r0, #1
 8006c68:	d00a      	beq.n	8006c80 <sbrk_aligned+0x34>
 8006c6a:	1cc4      	adds	r4, r0, #3
 8006c6c:	f024 0403 	bic.w	r4, r4, #3
 8006c70:	42a0      	cmp	r0, r4
 8006c72:	d007      	beq.n	8006c84 <sbrk_aligned+0x38>
 8006c74:	1a21      	subs	r1, r4, r0
 8006c76:	4628      	mov	r0, r5
 8006c78:	f000 fe86 	bl	8007988 <_sbrk_r>
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d101      	bne.n	8006c84 <sbrk_aligned+0x38>
 8006c80:	f04f 34ff 	mov.w	r4, #4294967295
 8006c84:	4620      	mov	r0, r4
 8006c86:	bd70      	pop	{r4, r5, r6, pc}
 8006c88:	20000474 	.word	0x20000474

08006c8c <_malloc_r>:
 8006c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c90:	1ccd      	adds	r5, r1, #3
 8006c92:	f025 0503 	bic.w	r5, r5, #3
 8006c96:	3508      	adds	r5, #8
 8006c98:	2d0c      	cmp	r5, #12
 8006c9a:	bf38      	it	cc
 8006c9c:	250c      	movcc	r5, #12
 8006c9e:	2d00      	cmp	r5, #0
 8006ca0:	4607      	mov	r7, r0
 8006ca2:	db01      	blt.n	8006ca8 <_malloc_r+0x1c>
 8006ca4:	42a9      	cmp	r1, r5
 8006ca6:	d905      	bls.n	8006cb4 <_malloc_r+0x28>
 8006ca8:	230c      	movs	r3, #12
 8006caa:	603b      	str	r3, [r7, #0]
 8006cac:	2600      	movs	r6, #0
 8006cae:	4630      	mov	r0, r6
 8006cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cb4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d88 <_malloc_r+0xfc>
 8006cb8:	f000 f868 	bl	8006d8c <__malloc_lock>
 8006cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8006cc0:	461c      	mov	r4, r3
 8006cc2:	bb5c      	cbnz	r4, 8006d1c <_malloc_r+0x90>
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	4638      	mov	r0, r7
 8006cc8:	f7ff ffc0 	bl	8006c4c <sbrk_aligned>
 8006ccc:	1c43      	adds	r3, r0, #1
 8006cce:	4604      	mov	r4, r0
 8006cd0:	d155      	bne.n	8006d7e <_malloc_r+0xf2>
 8006cd2:	f8d8 4000 	ldr.w	r4, [r8]
 8006cd6:	4626      	mov	r6, r4
 8006cd8:	2e00      	cmp	r6, #0
 8006cda:	d145      	bne.n	8006d68 <_malloc_r+0xdc>
 8006cdc:	2c00      	cmp	r4, #0
 8006cde:	d048      	beq.n	8006d72 <_malloc_r+0xe6>
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	4638      	mov	r0, r7
 8006ce6:	eb04 0903 	add.w	r9, r4, r3
 8006cea:	f000 fe4d 	bl	8007988 <_sbrk_r>
 8006cee:	4581      	cmp	r9, r0
 8006cf0:	d13f      	bne.n	8006d72 <_malloc_r+0xe6>
 8006cf2:	6821      	ldr	r1, [r4, #0]
 8006cf4:	1a6d      	subs	r5, r5, r1
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	4638      	mov	r0, r7
 8006cfa:	f7ff ffa7 	bl	8006c4c <sbrk_aligned>
 8006cfe:	3001      	adds	r0, #1
 8006d00:	d037      	beq.n	8006d72 <_malloc_r+0xe6>
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	442b      	add	r3, r5
 8006d06:	6023      	str	r3, [r4, #0]
 8006d08:	f8d8 3000 	ldr.w	r3, [r8]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d038      	beq.n	8006d82 <_malloc_r+0xf6>
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	42a2      	cmp	r2, r4
 8006d14:	d12b      	bne.n	8006d6e <_malloc_r+0xe2>
 8006d16:	2200      	movs	r2, #0
 8006d18:	605a      	str	r2, [r3, #4]
 8006d1a:	e00f      	b.n	8006d3c <_malloc_r+0xb0>
 8006d1c:	6822      	ldr	r2, [r4, #0]
 8006d1e:	1b52      	subs	r2, r2, r5
 8006d20:	d41f      	bmi.n	8006d62 <_malloc_r+0xd6>
 8006d22:	2a0b      	cmp	r2, #11
 8006d24:	d917      	bls.n	8006d56 <_malloc_r+0xca>
 8006d26:	1961      	adds	r1, r4, r5
 8006d28:	42a3      	cmp	r3, r4
 8006d2a:	6025      	str	r5, [r4, #0]
 8006d2c:	bf18      	it	ne
 8006d2e:	6059      	strne	r1, [r3, #4]
 8006d30:	6863      	ldr	r3, [r4, #4]
 8006d32:	bf08      	it	eq
 8006d34:	f8c8 1000 	streq.w	r1, [r8]
 8006d38:	5162      	str	r2, [r4, r5]
 8006d3a:	604b      	str	r3, [r1, #4]
 8006d3c:	4638      	mov	r0, r7
 8006d3e:	f104 060b 	add.w	r6, r4, #11
 8006d42:	f000 f829 	bl	8006d98 <__malloc_unlock>
 8006d46:	f026 0607 	bic.w	r6, r6, #7
 8006d4a:	1d23      	adds	r3, r4, #4
 8006d4c:	1af2      	subs	r2, r6, r3
 8006d4e:	d0ae      	beq.n	8006cae <_malloc_r+0x22>
 8006d50:	1b9b      	subs	r3, r3, r6
 8006d52:	50a3      	str	r3, [r4, r2]
 8006d54:	e7ab      	b.n	8006cae <_malloc_r+0x22>
 8006d56:	42a3      	cmp	r3, r4
 8006d58:	6862      	ldr	r2, [r4, #4]
 8006d5a:	d1dd      	bne.n	8006d18 <_malloc_r+0x8c>
 8006d5c:	f8c8 2000 	str.w	r2, [r8]
 8006d60:	e7ec      	b.n	8006d3c <_malloc_r+0xb0>
 8006d62:	4623      	mov	r3, r4
 8006d64:	6864      	ldr	r4, [r4, #4]
 8006d66:	e7ac      	b.n	8006cc2 <_malloc_r+0x36>
 8006d68:	4634      	mov	r4, r6
 8006d6a:	6876      	ldr	r6, [r6, #4]
 8006d6c:	e7b4      	b.n	8006cd8 <_malloc_r+0x4c>
 8006d6e:	4613      	mov	r3, r2
 8006d70:	e7cc      	b.n	8006d0c <_malloc_r+0x80>
 8006d72:	230c      	movs	r3, #12
 8006d74:	603b      	str	r3, [r7, #0]
 8006d76:	4638      	mov	r0, r7
 8006d78:	f000 f80e 	bl	8006d98 <__malloc_unlock>
 8006d7c:	e797      	b.n	8006cae <_malloc_r+0x22>
 8006d7e:	6025      	str	r5, [r4, #0]
 8006d80:	e7dc      	b.n	8006d3c <_malloc_r+0xb0>
 8006d82:	605b      	str	r3, [r3, #4]
 8006d84:	deff      	udf	#255	; 0xff
 8006d86:	bf00      	nop
 8006d88:	20000470 	.word	0x20000470

08006d8c <__malloc_lock>:
 8006d8c:	4801      	ldr	r0, [pc, #4]	; (8006d94 <__malloc_lock+0x8>)
 8006d8e:	f7ff b88d 	b.w	8005eac <__retarget_lock_acquire_recursive>
 8006d92:	bf00      	nop
 8006d94:	2000046c 	.word	0x2000046c

08006d98 <__malloc_unlock>:
 8006d98:	4801      	ldr	r0, [pc, #4]	; (8006da0 <__malloc_unlock+0x8>)
 8006d9a:	f7ff b888 	b.w	8005eae <__retarget_lock_release_recursive>
 8006d9e:	bf00      	nop
 8006da0:	2000046c 	.word	0x2000046c

08006da4 <_Balloc>:
 8006da4:	b570      	push	{r4, r5, r6, lr}
 8006da6:	69c6      	ldr	r6, [r0, #28]
 8006da8:	4604      	mov	r4, r0
 8006daa:	460d      	mov	r5, r1
 8006dac:	b976      	cbnz	r6, 8006dcc <_Balloc+0x28>
 8006dae:	2010      	movs	r0, #16
 8006db0:	f7ff ff44 	bl	8006c3c <malloc>
 8006db4:	4602      	mov	r2, r0
 8006db6:	61e0      	str	r0, [r4, #28]
 8006db8:	b920      	cbnz	r0, 8006dc4 <_Balloc+0x20>
 8006dba:	4b18      	ldr	r3, [pc, #96]	; (8006e1c <_Balloc+0x78>)
 8006dbc:	4818      	ldr	r0, [pc, #96]	; (8006e20 <_Balloc+0x7c>)
 8006dbe:	216b      	movs	r1, #107	; 0x6b
 8006dc0:	f000 fe00 	bl	80079c4 <__assert_func>
 8006dc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dc8:	6006      	str	r6, [r0, #0]
 8006dca:	60c6      	str	r6, [r0, #12]
 8006dcc:	69e6      	ldr	r6, [r4, #28]
 8006dce:	68f3      	ldr	r3, [r6, #12]
 8006dd0:	b183      	cbz	r3, 8006df4 <_Balloc+0x50>
 8006dd2:	69e3      	ldr	r3, [r4, #28]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dda:	b9b8      	cbnz	r0, 8006e0c <_Balloc+0x68>
 8006ddc:	2101      	movs	r1, #1
 8006dde:	fa01 f605 	lsl.w	r6, r1, r5
 8006de2:	1d72      	adds	r2, r6, #5
 8006de4:	0092      	lsls	r2, r2, #2
 8006de6:	4620      	mov	r0, r4
 8006de8:	f000 fe0a 	bl	8007a00 <_calloc_r>
 8006dec:	b160      	cbz	r0, 8006e08 <_Balloc+0x64>
 8006dee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006df2:	e00e      	b.n	8006e12 <_Balloc+0x6e>
 8006df4:	2221      	movs	r2, #33	; 0x21
 8006df6:	2104      	movs	r1, #4
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f000 fe01 	bl	8007a00 <_calloc_r>
 8006dfe:	69e3      	ldr	r3, [r4, #28]
 8006e00:	60f0      	str	r0, [r6, #12]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e4      	bne.n	8006dd2 <_Balloc+0x2e>
 8006e08:	2000      	movs	r0, #0
 8006e0a:	bd70      	pop	{r4, r5, r6, pc}
 8006e0c:	6802      	ldr	r2, [r0, #0]
 8006e0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e12:	2300      	movs	r3, #0
 8006e14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e18:	e7f7      	b.n	8006e0a <_Balloc+0x66>
 8006e1a:	bf00      	nop
 8006e1c:	08007c15 	.word	0x08007c15
 8006e20:	08007c95 	.word	0x08007c95

08006e24 <_Bfree>:
 8006e24:	b570      	push	{r4, r5, r6, lr}
 8006e26:	69c6      	ldr	r6, [r0, #28]
 8006e28:	4605      	mov	r5, r0
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	b976      	cbnz	r6, 8006e4c <_Bfree+0x28>
 8006e2e:	2010      	movs	r0, #16
 8006e30:	f7ff ff04 	bl	8006c3c <malloc>
 8006e34:	4602      	mov	r2, r0
 8006e36:	61e8      	str	r0, [r5, #28]
 8006e38:	b920      	cbnz	r0, 8006e44 <_Bfree+0x20>
 8006e3a:	4b09      	ldr	r3, [pc, #36]	; (8006e60 <_Bfree+0x3c>)
 8006e3c:	4809      	ldr	r0, [pc, #36]	; (8006e64 <_Bfree+0x40>)
 8006e3e:	218f      	movs	r1, #143	; 0x8f
 8006e40:	f000 fdc0 	bl	80079c4 <__assert_func>
 8006e44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e48:	6006      	str	r6, [r0, #0]
 8006e4a:	60c6      	str	r6, [r0, #12]
 8006e4c:	b13c      	cbz	r4, 8006e5e <_Bfree+0x3a>
 8006e4e:	69eb      	ldr	r3, [r5, #28]
 8006e50:	6862      	ldr	r2, [r4, #4]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e58:	6021      	str	r1, [r4, #0]
 8006e5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e5e:	bd70      	pop	{r4, r5, r6, pc}
 8006e60:	08007c15 	.word	0x08007c15
 8006e64:	08007c95 	.word	0x08007c95

08006e68 <__multadd>:
 8006e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e6c:	690d      	ldr	r5, [r1, #16]
 8006e6e:	4607      	mov	r7, r0
 8006e70:	460c      	mov	r4, r1
 8006e72:	461e      	mov	r6, r3
 8006e74:	f101 0c14 	add.w	ip, r1, #20
 8006e78:	2000      	movs	r0, #0
 8006e7a:	f8dc 3000 	ldr.w	r3, [ip]
 8006e7e:	b299      	uxth	r1, r3
 8006e80:	fb02 6101 	mla	r1, r2, r1, r6
 8006e84:	0c1e      	lsrs	r6, r3, #16
 8006e86:	0c0b      	lsrs	r3, r1, #16
 8006e88:	fb02 3306 	mla	r3, r2, r6, r3
 8006e8c:	b289      	uxth	r1, r1
 8006e8e:	3001      	adds	r0, #1
 8006e90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e94:	4285      	cmp	r5, r0
 8006e96:	f84c 1b04 	str.w	r1, [ip], #4
 8006e9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e9e:	dcec      	bgt.n	8006e7a <__multadd+0x12>
 8006ea0:	b30e      	cbz	r6, 8006ee6 <__multadd+0x7e>
 8006ea2:	68a3      	ldr	r3, [r4, #8]
 8006ea4:	42ab      	cmp	r3, r5
 8006ea6:	dc19      	bgt.n	8006edc <__multadd+0x74>
 8006ea8:	6861      	ldr	r1, [r4, #4]
 8006eaa:	4638      	mov	r0, r7
 8006eac:	3101      	adds	r1, #1
 8006eae:	f7ff ff79 	bl	8006da4 <_Balloc>
 8006eb2:	4680      	mov	r8, r0
 8006eb4:	b928      	cbnz	r0, 8006ec2 <__multadd+0x5a>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	4b0c      	ldr	r3, [pc, #48]	; (8006eec <__multadd+0x84>)
 8006eba:	480d      	ldr	r0, [pc, #52]	; (8006ef0 <__multadd+0x88>)
 8006ebc:	21ba      	movs	r1, #186	; 0xba
 8006ebe:	f000 fd81 	bl	80079c4 <__assert_func>
 8006ec2:	6922      	ldr	r2, [r4, #16]
 8006ec4:	3202      	adds	r2, #2
 8006ec6:	f104 010c 	add.w	r1, r4, #12
 8006eca:	0092      	lsls	r2, r2, #2
 8006ecc:	300c      	adds	r0, #12
 8006ece:	f000 fd6b 	bl	80079a8 <memcpy>
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	f7ff ffa5 	bl	8006e24 <_Bfree>
 8006eda:	4644      	mov	r4, r8
 8006edc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ee0:	3501      	adds	r5, #1
 8006ee2:	615e      	str	r6, [r3, #20]
 8006ee4:	6125      	str	r5, [r4, #16]
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eec:	08007c84 	.word	0x08007c84
 8006ef0:	08007c95 	.word	0x08007c95

08006ef4 <__hi0bits>:
 8006ef4:	0c03      	lsrs	r3, r0, #16
 8006ef6:	041b      	lsls	r3, r3, #16
 8006ef8:	b9d3      	cbnz	r3, 8006f30 <__hi0bits+0x3c>
 8006efa:	0400      	lsls	r0, r0, #16
 8006efc:	2310      	movs	r3, #16
 8006efe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f02:	bf04      	itt	eq
 8006f04:	0200      	lsleq	r0, r0, #8
 8006f06:	3308      	addeq	r3, #8
 8006f08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006f0c:	bf04      	itt	eq
 8006f0e:	0100      	lsleq	r0, r0, #4
 8006f10:	3304      	addeq	r3, #4
 8006f12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f16:	bf04      	itt	eq
 8006f18:	0080      	lsleq	r0, r0, #2
 8006f1a:	3302      	addeq	r3, #2
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	db05      	blt.n	8006f2c <__hi0bits+0x38>
 8006f20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006f24:	f103 0301 	add.w	r3, r3, #1
 8006f28:	bf08      	it	eq
 8006f2a:	2320      	moveq	r3, #32
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	4770      	bx	lr
 8006f30:	2300      	movs	r3, #0
 8006f32:	e7e4      	b.n	8006efe <__hi0bits+0xa>

08006f34 <__lo0bits>:
 8006f34:	6803      	ldr	r3, [r0, #0]
 8006f36:	f013 0207 	ands.w	r2, r3, #7
 8006f3a:	d00c      	beq.n	8006f56 <__lo0bits+0x22>
 8006f3c:	07d9      	lsls	r1, r3, #31
 8006f3e:	d422      	bmi.n	8006f86 <__lo0bits+0x52>
 8006f40:	079a      	lsls	r2, r3, #30
 8006f42:	bf49      	itett	mi
 8006f44:	085b      	lsrmi	r3, r3, #1
 8006f46:	089b      	lsrpl	r3, r3, #2
 8006f48:	6003      	strmi	r3, [r0, #0]
 8006f4a:	2201      	movmi	r2, #1
 8006f4c:	bf5c      	itt	pl
 8006f4e:	6003      	strpl	r3, [r0, #0]
 8006f50:	2202      	movpl	r2, #2
 8006f52:	4610      	mov	r0, r2
 8006f54:	4770      	bx	lr
 8006f56:	b299      	uxth	r1, r3
 8006f58:	b909      	cbnz	r1, 8006f5e <__lo0bits+0x2a>
 8006f5a:	0c1b      	lsrs	r3, r3, #16
 8006f5c:	2210      	movs	r2, #16
 8006f5e:	b2d9      	uxtb	r1, r3
 8006f60:	b909      	cbnz	r1, 8006f66 <__lo0bits+0x32>
 8006f62:	3208      	adds	r2, #8
 8006f64:	0a1b      	lsrs	r3, r3, #8
 8006f66:	0719      	lsls	r1, r3, #28
 8006f68:	bf04      	itt	eq
 8006f6a:	091b      	lsreq	r3, r3, #4
 8006f6c:	3204      	addeq	r2, #4
 8006f6e:	0799      	lsls	r1, r3, #30
 8006f70:	bf04      	itt	eq
 8006f72:	089b      	lsreq	r3, r3, #2
 8006f74:	3202      	addeq	r2, #2
 8006f76:	07d9      	lsls	r1, r3, #31
 8006f78:	d403      	bmi.n	8006f82 <__lo0bits+0x4e>
 8006f7a:	085b      	lsrs	r3, r3, #1
 8006f7c:	f102 0201 	add.w	r2, r2, #1
 8006f80:	d003      	beq.n	8006f8a <__lo0bits+0x56>
 8006f82:	6003      	str	r3, [r0, #0]
 8006f84:	e7e5      	b.n	8006f52 <__lo0bits+0x1e>
 8006f86:	2200      	movs	r2, #0
 8006f88:	e7e3      	b.n	8006f52 <__lo0bits+0x1e>
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	e7e1      	b.n	8006f52 <__lo0bits+0x1e>
	...

08006f90 <__i2b>:
 8006f90:	b510      	push	{r4, lr}
 8006f92:	460c      	mov	r4, r1
 8006f94:	2101      	movs	r1, #1
 8006f96:	f7ff ff05 	bl	8006da4 <_Balloc>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	b928      	cbnz	r0, 8006faa <__i2b+0x1a>
 8006f9e:	4b05      	ldr	r3, [pc, #20]	; (8006fb4 <__i2b+0x24>)
 8006fa0:	4805      	ldr	r0, [pc, #20]	; (8006fb8 <__i2b+0x28>)
 8006fa2:	f240 1145 	movw	r1, #325	; 0x145
 8006fa6:	f000 fd0d 	bl	80079c4 <__assert_func>
 8006faa:	2301      	movs	r3, #1
 8006fac:	6144      	str	r4, [r0, #20]
 8006fae:	6103      	str	r3, [r0, #16]
 8006fb0:	bd10      	pop	{r4, pc}
 8006fb2:	bf00      	nop
 8006fb4:	08007c84 	.word	0x08007c84
 8006fb8:	08007c95 	.word	0x08007c95

08006fbc <__multiply>:
 8006fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc0:	4691      	mov	r9, r2
 8006fc2:	690a      	ldr	r2, [r1, #16]
 8006fc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	bfb8      	it	lt
 8006fcc:	460b      	movlt	r3, r1
 8006fce:	460c      	mov	r4, r1
 8006fd0:	bfbc      	itt	lt
 8006fd2:	464c      	movlt	r4, r9
 8006fd4:	4699      	movlt	r9, r3
 8006fd6:	6927      	ldr	r7, [r4, #16]
 8006fd8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006fdc:	68a3      	ldr	r3, [r4, #8]
 8006fde:	6861      	ldr	r1, [r4, #4]
 8006fe0:	eb07 060a 	add.w	r6, r7, sl
 8006fe4:	42b3      	cmp	r3, r6
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	bfb8      	it	lt
 8006fea:	3101      	addlt	r1, #1
 8006fec:	f7ff feda 	bl	8006da4 <_Balloc>
 8006ff0:	b930      	cbnz	r0, 8007000 <__multiply+0x44>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	4b44      	ldr	r3, [pc, #272]	; (8007108 <__multiply+0x14c>)
 8006ff6:	4845      	ldr	r0, [pc, #276]	; (800710c <__multiply+0x150>)
 8006ff8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006ffc:	f000 fce2 	bl	80079c4 <__assert_func>
 8007000:	f100 0514 	add.w	r5, r0, #20
 8007004:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007008:	462b      	mov	r3, r5
 800700a:	2200      	movs	r2, #0
 800700c:	4543      	cmp	r3, r8
 800700e:	d321      	bcc.n	8007054 <__multiply+0x98>
 8007010:	f104 0314 	add.w	r3, r4, #20
 8007014:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007018:	f109 0314 	add.w	r3, r9, #20
 800701c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007020:	9202      	str	r2, [sp, #8]
 8007022:	1b3a      	subs	r2, r7, r4
 8007024:	3a15      	subs	r2, #21
 8007026:	f022 0203 	bic.w	r2, r2, #3
 800702a:	3204      	adds	r2, #4
 800702c:	f104 0115 	add.w	r1, r4, #21
 8007030:	428f      	cmp	r7, r1
 8007032:	bf38      	it	cc
 8007034:	2204      	movcc	r2, #4
 8007036:	9201      	str	r2, [sp, #4]
 8007038:	9a02      	ldr	r2, [sp, #8]
 800703a:	9303      	str	r3, [sp, #12]
 800703c:	429a      	cmp	r2, r3
 800703e:	d80c      	bhi.n	800705a <__multiply+0x9e>
 8007040:	2e00      	cmp	r6, #0
 8007042:	dd03      	ble.n	800704c <__multiply+0x90>
 8007044:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007048:	2b00      	cmp	r3, #0
 800704a:	d05b      	beq.n	8007104 <__multiply+0x148>
 800704c:	6106      	str	r6, [r0, #16]
 800704e:	b005      	add	sp, #20
 8007050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007054:	f843 2b04 	str.w	r2, [r3], #4
 8007058:	e7d8      	b.n	800700c <__multiply+0x50>
 800705a:	f8b3 a000 	ldrh.w	sl, [r3]
 800705e:	f1ba 0f00 	cmp.w	sl, #0
 8007062:	d024      	beq.n	80070ae <__multiply+0xf2>
 8007064:	f104 0e14 	add.w	lr, r4, #20
 8007068:	46a9      	mov	r9, r5
 800706a:	f04f 0c00 	mov.w	ip, #0
 800706e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007072:	f8d9 1000 	ldr.w	r1, [r9]
 8007076:	fa1f fb82 	uxth.w	fp, r2
 800707a:	b289      	uxth	r1, r1
 800707c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007080:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007084:	f8d9 2000 	ldr.w	r2, [r9]
 8007088:	4461      	add	r1, ip
 800708a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800708e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007092:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007096:	b289      	uxth	r1, r1
 8007098:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800709c:	4577      	cmp	r7, lr
 800709e:	f849 1b04 	str.w	r1, [r9], #4
 80070a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80070a6:	d8e2      	bhi.n	800706e <__multiply+0xb2>
 80070a8:	9a01      	ldr	r2, [sp, #4]
 80070aa:	f845 c002 	str.w	ip, [r5, r2]
 80070ae:	9a03      	ldr	r2, [sp, #12]
 80070b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80070b4:	3304      	adds	r3, #4
 80070b6:	f1b9 0f00 	cmp.w	r9, #0
 80070ba:	d021      	beq.n	8007100 <__multiply+0x144>
 80070bc:	6829      	ldr	r1, [r5, #0]
 80070be:	f104 0c14 	add.w	ip, r4, #20
 80070c2:	46ae      	mov	lr, r5
 80070c4:	f04f 0a00 	mov.w	sl, #0
 80070c8:	f8bc b000 	ldrh.w	fp, [ip]
 80070cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80070d0:	fb09 220b 	mla	r2, r9, fp, r2
 80070d4:	4452      	add	r2, sl
 80070d6:	b289      	uxth	r1, r1
 80070d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80070dc:	f84e 1b04 	str.w	r1, [lr], #4
 80070e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80070e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070e8:	f8be 1000 	ldrh.w	r1, [lr]
 80070ec:	fb09 110a 	mla	r1, r9, sl, r1
 80070f0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80070f4:	4567      	cmp	r7, ip
 80070f6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070fa:	d8e5      	bhi.n	80070c8 <__multiply+0x10c>
 80070fc:	9a01      	ldr	r2, [sp, #4]
 80070fe:	50a9      	str	r1, [r5, r2]
 8007100:	3504      	adds	r5, #4
 8007102:	e799      	b.n	8007038 <__multiply+0x7c>
 8007104:	3e01      	subs	r6, #1
 8007106:	e79b      	b.n	8007040 <__multiply+0x84>
 8007108:	08007c84 	.word	0x08007c84
 800710c:	08007c95 	.word	0x08007c95

08007110 <__pow5mult>:
 8007110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007114:	4615      	mov	r5, r2
 8007116:	f012 0203 	ands.w	r2, r2, #3
 800711a:	4606      	mov	r6, r0
 800711c:	460f      	mov	r7, r1
 800711e:	d007      	beq.n	8007130 <__pow5mult+0x20>
 8007120:	4c25      	ldr	r4, [pc, #148]	; (80071b8 <__pow5mult+0xa8>)
 8007122:	3a01      	subs	r2, #1
 8007124:	2300      	movs	r3, #0
 8007126:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800712a:	f7ff fe9d 	bl	8006e68 <__multadd>
 800712e:	4607      	mov	r7, r0
 8007130:	10ad      	asrs	r5, r5, #2
 8007132:	d03d      	beq.n	80071b0 <__pow5mult+0xa0>
 8007134:	69f4      	ldr	r4, [r6, #28]
 8007136:	b97c      	cbnz	r4, 8007158 <__pow5mult+0x48>
 8007138:	2010      	movs	r0, #16
 800713a:	f7ff fd7f 	bl	8006c3c <malloc>
 800713e:	4602      	mov	r2, r0
 8007140:	61f0      	str	r0, [r6, #28]
 8007142:	b928      	cbnz	r0, 8007150 <__pow5mult+0x40>
 8007144:	4b1d      	ldr	r3, [pc, #116]	; (80071bc <__pow5mult+0xac>)
 8007146:	481e      	ldr	r0, [pc, #120]	; (80071c0 <__pow5mult+0xb0>)
 8007148:	f240 11b3 	movw	r1, #435	; 0x1b3
 800714c:	f000 fc3a 	bl	80079c4 <__assert_func>
 8007150:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007154:	6004      	str	r4, [r0, #0]
 8007156:	60c4      	str	r4, [r0, #12]
 8007158:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800715c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007160:	b94c      	cbnz	r4, 8007176 <__pow5mult+0x66>
 8007162:	f240 2171 	movw	r1, #625	; 0x271
 8007166:	4630      	mov	r0, r6
 8007168:	f7ff ff12 	bl	8006f90 <__i2b>
 800716c:	2300      	movs	r3, #0
 800716e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007172:	4604      	mov	r4, r0
 8007174:	6003      	str	r3, [r0, #0]
 8007176:	f04f 0900 	mov.w	r9, #0
 800717a:	07eb      	lsls	r3, r5, #31
 800717c:	d50a      	bpl.n	8007194 <__pow5mult+0x84>
 800717e:	4639      	mov	r1, r7
 8007180:	4622      	mov	r2, r4
 8007182:	4630      	mov	r0, r6
 8007184:	f7ff ff1a 	bl	8006fbc <__multiply>
 8007188:	4639      	mov	r1, r7
 800718a:	4680      	mov	r8, r0
 800718c:	4630      	mov	r0, r6
 800718e:	f7ff fe49 	bl	8006e24 <_Bfree>
 8007192:	4647      	mov	r7, r8
 8007194:	106d      	asrs	r5, r5, #1
 8007196:	d00b      	beq.n	80071b0 <__pow5mult+0xa0>
 8007198:	6820      	ldr	r0, [r4, #0]
 800719a:	b938      	cbnz	r0, 80071ac <__pow5mult+0x9c>
 800719c:	4622      	mov	r2, r4
 800719e:	4621      	mov	r1, r4
 80071a0:	4630      	mov	r0, r6
 80071a2:	f7ff ff0b 	bl	8006fbc <__multiply>
 80071a6:	6020      	str	r0, [r4, #0]
 80071a8:	f8c0 9000 	str.w	r9, [r0]
 80071ac:	4604      	mov	r4, r0
 80071ae:	e7e4      	b.n	800717a <__pow5mult+0x6a>
 80071b0:	4638      	mov	r0, r7
 80071b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071b6:	bf00      	nop
 80071b8:	08007de0 	.word	0x08007de0
 80071bc:	08007c15 	.word	0x08007c15
 80071c0:	08007c95 	.word	0x08007c95

080071c4 <__lshift>:
 80071c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071c8:	460c      	mov	r4, r1
 80071ca:	6849      	ldr	r1, [r1, #4]
 80071cc:	6923      	ldr	r3, [r4, #16]
 80071ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071d2:	68a3      	ldr	r3, [r4, #8]
 80071d4:	4607      	mov	r7, r0
 80071d6:	4691      	mov	r9, r2
 80071d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071dc:	f108 0601 	add.w	r6, r8, #1
 80071e0:	42b3      	cmp	r3, r6
 80071e2:	db0b      	blt.n	80071fc <__lshift+0x38>
 80071e4:	4638      	mov	r0, r7
 80071e6:	f7ff fddd 	bl	8006da4 <_Balloc>
 80071ea:	4605      	mov	r5, r0
 80071ec:	b948      	cbnz	r0, 8007202 <__lshift+0x3e>
 80071ee:	4602      	mov	r2, r0
 80071f0:	4b28      	ldr	r3, [pc, #160]	; (8007294 <__lshift+0xd0>)
 80071f2:	4829      	ldr	r0, [pc, #164]	; (8007298 <__lshift+0xd4>)
 80071f4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80071f8:	f000 fbe4 	bl	80079c4 <__assert_func>
 80071fc:	3101      	adds	r1, #1
 80071fe:	005b      	lsls	r3, r3, #1
 8007200:	e7ee      	b.n	80071e0 <__lshift+0x1c>
 8007202:	2300      	movs	r3, #0
 8007204:	f100 0114 	add.w	r1, r0, #20
 8007208:	f100 0210 	add.w	r2, r0, #16
 800720c:	4618      	mov	r0, r3
 800720e:	4553      	cmp	r3, sl
 8007210:	db33      	blt.n	800727a <__lshift+0xb6>
 8007212:	6920      	ldr	r0, [r4, #16]
 8007214:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007218:	f104 0314 	add.w	r3, r4, #20
 800721c:	f019 091f 	ands.w	r9, r9, #31
 8007220:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007224:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007228:	d02b      	beq.n	8007282 <__lshift+0xbe>
 800722a:	f1c9 0e20 	rsb	lr, r9, #32
 800722e:	468a      	mov	sl, r1
 8007230:	2200      	movs	r2, #0
 8007232:	6818      	ldr	r0, [r3, #0]
 8007234:	fa00 f009 	lsl.w	r0, r0, r9
 8007238:	4310      	orrs	r0, r2
 800723a:	f84a 0b04 	str.w	r0, [sl], #4
 800723e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007242:	459c      	cmp	ip, r3
 8007244:	fa22 f20e 	lsr.w	r2, r2, lr
 8007248:	d8f3      	bhi.n	8007232 <__lshift+0x6e>
 800724a:	ebac 0304 	sub.w	r3, ip, r4
 800724e:	3b15      	subs	r3, #21
 8007250:	f023 0303 	bic.w	r3, r3, #3
 8007254:	3304      	adds	r3, #4
 8007256:	f104 0015 	add.w	r0, r4, #21
 800725a:	4584      	cmp	ip, r0
 800725c:	bf38      	it	cc
 800725e:	2304      	movcc	r3, #4
 8007260:	50ca      	str	r2, [r1, r3]
 8007262:	b10a      	cbz	r2, 8007268 <__lshift+0xa4>
 8007264:	f108 0602 	add.w	r6, r8, #2
 8007268:	3e01      	subs	r6, #1
 800726a:	4638      	mov	r0, r7
 800726c:	612e      	str	r6, [r5, #16]
 800726e:	4621      	mov	r1, r4
 8007270:	f7ff fdd8 	bl	8006e24 <_Bfree>
 8007274:	4628      	mov	r0, r5
 8007276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800727a:	f842 0f04 	str.w	r0, [r2, #4]!
 800727e:	3301      	adds	r3, #1
 8007280:	e7c5      	b.n	800720e <__lshift+0x4a>
 8007282:	3904      	subs	r1, #4
 8007284:	f853 2b04 	ldr.w	r2, [r3], #4
 8007288:	f841 2f04 	str.w	r2, [r1, #4]!
 800728c:	459c      	cmp	ip, r3
 800728e:	d8f9      	bhi.n	8007284 <__lshift+0xc0>
 8007290:	e7ea      	b.n	8007268 <__lshift+0xa4>
 8007292:	bf00      	nop
 8007294:	08007c84 	.word	0x08007c84
 8007298:	08007c95 	.word	0x08007c95

0800729c <__mcmp>:
 800729c:	b530      	push	{r4, r5, lr}
 800729e:	6902      	ldr	r2, [r0, #16]
 80072a0:	690c      	ldr	r4, [r1, #16]
 80072a2:	1b12      	subs	r2, r2, r4
 80072a4:	d10e      	bne.n	80072c4 <__mcmp+0x28>
 80072a6:	f100 0314 	add.w	r3, r0, #20
 80072aa:	3114      	adds	r1, #20
 80072ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80072b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80072b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80072b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80072bc:	42a5      	cmp	r5, r4
 80072be:	d003      	beq.n	80072c8 <__mcmp+0x2c>
 80072c0:	d305      	bcc.n	80072ce <__mcmp+0x32>
 80072c2:	2201      	movs	r2, #1
 80072c4:	4610      	mov	r0, r2
 80072c6:	bd30      	pop	{r4, r5, pc}
 80072c8:	4283      	cmp	r3, r0
 80072ca:	d3f3      	bcc.n	80072b4 <__mcmp+0x18>
 80072cc:	e7fa      	b.n	80072c4 <__mcmp+0x28>
 80072ce:	f04f 32ff 	mov.w	r2, #4294967295
 80072d2:	e7f7      	b.n	80072c4 <__mcmp+0x28>

080072d4 <__mdiff>:
 80072d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d8:	460c      	mov	r4, r1
 80072da:	4606      	mov	r6, r0
 80072dc:	4611      	mov	r1, r2
 80072de:	4620      	mov	r0, r4
 80072e0:	4690      	mov	r8, r2
 80072e2:	f7ff ffdb 	bl	800729c <__mcmp>
 80072e6:	1e05      	subs	r5, r0, #0
 80072e8:	d110      	bne.n	800730c <__mdiff+0x38>
 80072ea:	4629      	mov	r1, r5
 80072ec:	4630      	mov	r0, r6
 80072ee:	f7ff fd59 	bl	8006da4 <_Balloc>
 80072f2:	b930      	cbnz	r0, 8007302 <__mdiff+0x2e>
 80072f4:	4b3a      	ldr	r3, [pc, #232]	; (80073e0 <__mdiff+0x10c>)
 80072f6:	4602      	mov	r2, r0
 80072f8:	f240 2137 	movw	r1, #567	; 0x237
 80072fc:	4839      	ldr	r0, [pc, #228]	; (80073e4 <__mdiff+0x110>)
 80072fe:	f000 fb61 	bl	80079c4 <__assert_func>
 8007302:	2301      	movs	r3, #1
 8007304:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007308:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730c:	bfa4      	itt	ge
 800730e:	4643      	movge	r3, r8
 8007310:	46a0      	movge	r8, r4
 8007312:	4630      	mov	r0, r6
 8007314:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007318:	bfa6      	itte	ge
 800731a:	461c      	movge	r4, r3
 800731c:	2500      	movge	r5, #0
 800731e:	2501      	movlt	r5, #1
 8007320:	f7ff fd40 	bl	8006da4 <_Balloc>
 8007324:	b920      	cbnz	r0, 8007330 <__mdiff+0x5c>
 8007326:	4b2e      	ldr	r3, [pc, #184]	; (80073e0 <__mdiff+0x10c>)
 8007328:	4602      	mov	r2, r0
 800732a:	f240 2145 	movw	r1, #581	; 0x245
 800732e:	e7e5      	b.n	80072fc <__mdiff+0x28>
 8007330:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007334:	6926      	ldr	r6, [r4, #16]
 8007336:	60c5      	str	r5, [r0, #12]
 8007338:	f104 0914 	add.w	r9, r4, #20
 800733c:	f108 0514 	add.w	r5, r8, #20
 8007340:	f100 0e14 	add.w	lr, r0, #20
 8007344:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007348:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800734c:	f108 0210 	add.w	r2, r8, #16
 8007350:	46f2      	mov	sl, lr
 8007352:	2100      	movs	r1, #0
 8007354:	f859 3b04 	ldr.w	r3, [r9], #4
 8007358:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800735c:	fa11 f88b 	uxtah	r8, r1, fp
 8007360:	b299      	uxth	r1, r3
 8007362:	0c1b      	lsrs	r3, r3, #16
 8007364:	eba8 0801 	sub.w	r8, r8, r1
 8007368:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800736c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007370:	fa1f f888 	uxth.w	r8, r8
 8007374:	1419      	asrs	r1, r3, #16
 8007376:	454e      	cmp	r6, r9
 8007378:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800737c:	f84a 3b04 	str.w	r3, [sl], #4
 8007380:	d8e8      	bhi.n	8007354 <__mdiff+0x80>
 8007382:	1b33      	subs	r3, r6, r4
 8007384:	3b15      	subs	r3, #21
 8007386:	f023 0303 	bic.w	r3, r3, #3
 800738a:	3304      	adds	r3, #4
 800738c:	3415      	adds	r4, #21
 800738e:	42a6      	cmp	r6, r4
 8007390:	bf38      	it	cc
 8007392:	2304      	movcc	r3, #4
 8007394:	441d      	add	r5, r3
 8007396:	4473      	add	r3, lr
 8007398:	469e      	mov	lr, r3
 800739a:	462e      	mov	r6, r5
 800739c:	4566      	cmp	r6, ip
 800739e:	d30e      	bcc.n	80073be <__mdiff+0xea>
 80073a0:	f10c 0203 	add.w	r2, ip, #3
 80073a4:	1b52      	subs	r2, r2, r5
 80073a6:	f022 0203 	bic.w	r2, r2, #3
 80073aa:	3d03      	subs	r5, #3
 80073ac:	45ac      	cmp	ip, r5
 80073ae:	bf38      	it	cc
 80073b0:	2200      	movcc	r2, #0
 80073b2:	4413      	add	r3, r2
 80073b4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80073b8:	b17a      	cbz	r2, 80073da <__mdiff+0x106>
 80073ba:	6107      	str	r7, [r0, #16]
 80073bc:	e7a4      	b.n	8007308 <__mdiff+0x34>
 80073be:	f856 8b04 	ldr.w	r8, [r6], #4
 80073c2:	fa11 f288 	uxtah	r2, r1, r8
 80073c6:	1414      	asrs	r4, r2, #16
 80073c8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80073cc:	b292      	uxth	r2, r2
 80073ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80073d2:	f84e 2b04 	str.w	r2, [lr], #4
 80073d6:	1421      	asrs	r1, r4, #16
 80073d8:	e7e0      	b.n	800739c <__mdiff+0xc8>
 80073da:	3f01      	subs	r7, #1
 80073dc:	e7ea      	b.n	80073b4 <__mdiff+0xe0>
 80073de:	bf00      	nop
 80073e0:	08007c84 	.word	0x08007c84
 80073e4:	08007c95 	.word	0x08007c95

080073e8 <__d2b>:
 80073e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073ec:	460f      	mov	r7, r1
 80073ee:	2101      	movs	r1, #1
 80073f0:	ec59 8b10 	vmov	r8, r9, d0
 80073f4:	4616      	mov	r6, r2
 80073f6:	f7ff fcd5 	bl	8006da4 <_Balloc>
 80073fa:	4604      	mov	r4, r0
 80073fc:	b930      	cbnz	r0, 800740c <__d2b+0x24>
 80073fe:	4602      	mov	r2, r0
 8007400:	4b24      	ldr	r3, [pc, #144]	; (8007494 <__d2b+0xac>)
 8007402:	4825      	ldr	r0, [pc, #148]	; (8007498 <__d2b+0xb0>)
 8007404:	f240 310f 	movw	r1, #783	; 0x30f
 8007408:	f000 fadc 	bl	80079c4 <__assert_func>
 800740c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007410:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007414:	bb2d      	cbnz	r5, 8007462 <__d2b+0x7a>
 8007416:	9301      	str	r3, [sp, #4]
 8007418:	f1b8 0300 	subs.w	r3, r8, #0
 800741c:	d026      	beq.n	800746c <__d2b+0x84>
 800741e:	4668      	mov	r0, sp
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	f7ff fd87 	bl	8006f34 <__lo0bits>
 8007426:	e9dd 1200 	ldrd	r1, r2, [sp]
 800742a:	b1e8      	cbz	r0, 8007468 <__d2b+0x80>
 800742c:	f1c0 0320 	rsb	r3, r0, #32
 8007430:	fa02 f303 	lsl.w	r3, r2, r3
 8007434:	430b      	orrs	r3, r1
 8007436:	40c2      	lsrs	r2, r0
 8007438:	6163      	str	r3, [r4, #20]
 800743a:	9201      	str	r2, [sp, #4]
 800743c:	9b01      	ldr	r3, [sp, #4]
 800743e:	61a3      	str	r3, [r4, #24]
 8007440:	2b00      	cmp	r3, #0
 8007442:	bf14      	ite	ne
 8007444:	2202      	movne	r2, #2
 8007446:	2201      	moveq	r2, #1
 8007448:	6122      	str	r2, [r4, #16]
 800744a:	b1bd      	cbz	r5, 800747c <__d2b+0x94>
 800744c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007450:	4405      	add	r5, r0
 8007452:	603d      	str	r5, [r7, #0]
 8007454:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007458:	6030      	str	r0, [r6, #0]
 800745a:	4620      	mov	r0, r4
 800745c:	b003      	add	sp, #12
 800745e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007466:	e7d6      	b.n	8007416 <__d2b+0x2e>
 8007468:	6161      	str	r1, [r4, #20]
 800746a:	e7e7      	b.n	800743c <__d2b+0x54>
 800746c:	a801      	add	r0, sp, #4
 800746e:	f7ff fd61 	bl	8006f34 <__lo0bits>
 8007472:	9b01      	ldr	r3, [sp, #4]
 8007474:	6163      	str	r3, [r4, #20]
 8007476:	3020      	adds	r0, #32
 8007478:	2201      	movs	r2, #1
 800747a:	e7e5      	b.n	8007448 <__d2b+0x60>
 800747c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007480:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007484:	6038      	str	r0, [r7, #0]
 8007486:	6918      	ldr	r0, [r3, #16]
 8007488:	f7ff fd34 	bl	8006ef4 <__hi0bits>
 800748c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007490:	e7e2      	b.n	8007458 <__d2b+0x70>
 8007492:	bf00      	nop
 8007494:	08007c84 	.word	0x08007c84
 8007498:	08007c95 	.word	0x08007c95

0800749c <__sfputc_r>:
 800749c:	6893      	ldr	r3, [r2, #8]
 800749e:	3b01      	subs	r3, #1
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	b410      	push	{r4}
 80074a4:	6093      	str	r3, [r2, #8]
 80074a6:	da08      	bge.n	80074ba <__sfputc_r+0x1e>
 80074a8:	6994      	ldr	r4, [r2, #24]
 80074aa:	42a3      	cmp	r3, r4
 80074ac:	db01      	blt.n	80074b2 <__sfputc_r+0x16>
 80074ae:	290a      	cmp	r1, #10
 80074b0:	d103      	bne.n	80074ba <__sfputc_r+0x1e>
 80074b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074b6:	f7fe bbe8 	b.w	8005c8a <__swbuf_r>
 80074ba:	6813      	ldr	r3, [r2, #0]
 80074bc:	1c58      	adds	r0, r3, #1
 80074be:	6010      	str	r0, [r2, #0]
 80074c0:	7019      	strb	r1, [r3, #0]
 80074c2:	4608      	mov	r0, r1
 80074c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <__sfputs_r>:
 80074ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074cc:	4606      	mov	r6, r0
 80074ce:	460f      	mov	r7, r1
 80074d0:	4614      	mov	r4, r2
 80074d2:	18d5      	adds	r5, r2, r3
 80074d4:	42ac      	cmp	r4, r5
 80074d6:	d101      	bne.n	80074dc <__sfputs_r+0x12>
 80074d8:	2000      	movs	r0, #0
 80074da:	e007      	b.n	80074ec <__sfputs_r+0x22>
 80074dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074e0:	463a      	mov	r2, r7
 80074e2:	4630      	mov	r0, r6
 80074e4:	f7ff ffda 	bl	800749c <__sfputc_r>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d1f3      	bne.n	80074d4 <__sfputs_r+0xa>
 80074ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074f0 <_vfiprintf_r>:
 80074f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	460d      	mov	r5, r1
 80074f6:	b09d      	sub	sp, #116	; 0x74
 80074f8:	4614      	mov	r4, r2
 80074fa:	4698      	mov	r8, r3
 80074fc:	4606      	mov	r6, r0
 80074fe:	b118      	cbz	r0, 8007508 <_vfiprintf_r+0x18>
 8007500:	6a03      	ldr	r3, [r0, #32]
 8007502:	b90b      	cbnz	r3, 8007508 <_vfiprintf_r+0x18>
 8007504:	f7fe fada 	bl	8005abc <__sinit>
 8007508:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800750a:	07d9      	lsls	r1, r3, #31
 800750c:	d405      	bmi.n	800751a <_vfiprintf_r+0x2a>
 800750e:	89ab      	ldrh	r3, [r5, #12]
 8007510:	059a      	lsls	r2, r3, #22
 8007512:	d402      	bmi.n	800751a <_vfiprintf_r+0x2a>
 8007514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007516:	f7fe fcc9 	bl	8005eac <__retarget_lock_acquire_recursive>
 800751a:	89ab      	ldrh	r3, [r5, #12]
 800751c:	071b      	lsls	r3, r3, #28
 800751e:	d501      	bpl.n	8007524 <_vfiprintf_r+0x34>
 8007520:	692b      	ldr	r3, [r5, #16]
 8007522:	b99b      	cbnz	r3, 800754c <_vfiprintf_r+0x5c>
 8007524:	4629      	mov	r1, r5
 8007526:	4630      	mov	r0, r6
 8007528:	f7fe fbec 	bl	8005d04 <__swsetup_r>
 800752c:	b170      	cbz	r0, 800754c <_vfiprintf_r+0x5c>
 800752e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007530:	07dc      	lsls	r4, r3, #31
 8007532:	d504      	bpl.n	800753e <_vfiprintf_r+0x4e>
 8007534:	f04f 30ff 	mov.w	r0, #4294967295
 8007538:	b01d      	add	sp, #116	; 0x74
 800753a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800753e:	89ab      	ldrh	r3, [r5, #12]
 8007540:	0598      	lsls	r0, r3, #22
 8007542:	d4f7      	bmi.n	8007534 <_vfiprintf_r+0x44>
 8007544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007546:	f7fe fcb2 	bl	8005eae <__retarget_lock_release_recursive>
 800754a:	e7f3      	b.n	8007534 <_vfiprintf_r+0x44>
 800754c:	2300      	movs	r3, #0
 800754e:	9309      	str	r3, [sp, #36]	; 0x24
 8007550:	2320      	movs	r3, #32
 8007552:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007556:	f8cd 800c 	str.w	r8, [sp, #12]
 800755a:	2330      	movs	r3, #48	; 0x30
 800755c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007710 <_vfiprintf_r+0x220>
 8007560:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007564:	f04f 0901 	mov.w	r9, #1
 8007568:	4623      	mov	r3, r4
 800756a:	469a      	mov	sl, r3
 800756c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007570:	b10a      	cbz	r2, 8007576 <_vfiprintf_r+0x86>
 8007572:	2a25      	cmp	r2, #37	; 0x25
 8007574:	d1f9      	bne.n	800756a <_vfiprintf_r+0x7a>
 8007576:	ebba 0b04 	subs.w	fp, sl, r4
 800757a:	d00b      	beq.n	8007594 <_vfiprintf_r+0xa4>
 800757c:	465b      	mov	r3, fp
 800757e:	4622      	mov	r2, r4
 8007580:	4629      	mov	r1, r5
 8007582:	4630      	mov	r0, r6
 8007584:	f7ff ffa1 	bl	80074ca <__sfputs_r>
 8007588:	3001      	adds	r0, #1
 800758a:	f000 80a9 	beq.w	80076e0 <_vfiprintf_r+0x1f0>
 800758e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007590:	445a      	add	r2, fp
 8007592:	9209      	str	r2, [sp, #36]	; 0x24
 8007594:	f89a 3000 	ldrb.w	r3, [sl]
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 80a1 	beq.w	80076e0 <_vfiprintf_r+0x1f0>
 800759e:	2300      	movs	r3, #0
 80075a0:	f04f 32ff 	mov.w	r2, #4294967295
 80075a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075a8:	f10a 0a01 	add.w	sl, sl, #1
 80075ac:	9304      	str	r3, [sp, #16]
 80075ae:	9307      	str	r3, [sp, #28]
 80075b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075b4:	931a      	str	r3, [sp, #104]	; 0x68
 80075b6:	4654      	mov	r4, sl
 80075b8:	2205      	movs	r2, #5
 80075ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075be:	4854      	ldr	r0, [pc, #336]	; (8007710 <_vfiprintf_r+0x220>)
 80075c0:	f7f8 fe2e 	bl	8000220 <memchr>
 80075c4:	9a04      	ldr	r2, [sp, #16]
 80075c6:	b9d8      	cbnz	r0, 8007600 <_vfiprintf_r+0x110>
 80075c8:	06d1      	lsls	r1, r2, #27
 80075ca:	bf44      	itt	mi
 80075cc:	2320      	movmi	r3, #32
 80075ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075d2:	0713      	lsls	r3, r2, #28
 80075d4:	bf44      	itt	mi
 80075d6:	232b      	movmi	r3, #43	; 0x2b
 80075d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075dc:	f89a 3000 	ldrb.w	r3, [sl]
 80075e0:	2b2a      	cmp	r3, #42	; 0x2a
 80075e2:	d015      	beq.n	8007610 <_vfiprintf_r+0x120>
 80075e4:	9a07      	ldr	r2, [sp, #28]
 80075e6:	4654      	mov	r4, sl
 80075e8:	2000      	movs	r0, #0
 80075ea:	f04f 0c0a 	mov.w	ip, #10
 80075ee:	4621      	mov	r1, r4
 80075f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075f4:	3b30      	subs	r3, #48	; 0x30
 80075f6:	2b09      	cmp	r3, #9
 80075f8:	d94d      	bls.n	8007696 <_vfiprintf_r+0x1a6>
 80075fa:	b1b0      	cbz	r0, 800762a <_vfiprintf_r+0x13a>
 80075fc:	9207      	str	r2, [sp, #28]
 80075fe:	e014      	b.n	800762a <_vfiprintf_r+0x13a>
 8007600:	eba0 0308 	sub.w	r3, r0, r8
 8007604:	fa09 f303 	lsl.w	r3, r9, r3
 8007608:	4313      	orrs	r3, r2
 800760a:	9304      	str	r3, [sp, #16]
 800760c:	46a2      	mov	sl, r4
 800760e:	e7d2      	b.n	80075b6 <_vfiprintf_r+0xc6>
 8007610:	9b03      	ldr	r3, [sp, #12]
 8007612:	1d19      	adds	r1, r3, #4
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	9103      	str	r1, [sp, #12]
 8007618:	2b00      	cmp	r3, #0
 800761a:	bfbb      	ittet	lt
 800761c:	425b      	neglt	r3, r3
 800761e:	f042 0202 	orrlt.w	r2, r2, #2
 8007622:	9307      	strge	r3, [sp, #28]
 8007624:	9307      	strlt	r3, [sp, #28]
 8007626:	bfb8      	it	lt
 8007628:	9204      	strlt	r2, [sp, #16]
 800762a:	7823      	ldrb	r3, [r4, #0]
 800762c:	2b2e      	cmp	r3, #46	; 0x2e
 800762e:	d10c      	bne.n	800764a <_vfiprintf_r+0x15a>
 8007630:	7863      	ldrb	r3, [r4, #1]
 8007632:	2b2a      	cmp	r3, #42	; 0x2a
 8007634:	d134      	bne.n	80076a0 <_vfiprintf_r+0x1b0>
 8007636:	9b03      	ldr	r3, [sp, #12]
 8007638:	1d1a      	adds	r2, r3, #4
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	9203      	str	r2, [sp, #12]
 800763e:	2b00      	cmp	r3, #0
 8007640:	bfb8      	it	lt
 8007642:	f04f 33ff 	movlt.w	r3, #4294967295
 8007646:	3402      	adds	r4, #2
 8007648:	9305      	str	r3, [sp, #20]
 800764a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007720 <_vfiprintf_r+0x230>
 800764e:	7821      	ldrb	r1, [r4, #0]
 8007650:	2203      	movs	r2, #3
 8007652:	4650      	mov	r0, sl
 8007654:	f7f8 fde4 	bl	8000220 <memchr>
 8007658:	b138      	cbz	r0, 800766a <_vfiprintf_r+0x17a>
 800765a:	9b04      	ldr	r3, [sp, #16]
 800765c:	eba0 000a 	sub.w	r0, r0, sl
 8007660:	2240      	movs	r2, #64	; 0x40
 8007662:	4082      	lsls	r2, r0
 8007664:	4313      	orrs	r3, r2
 8007666:	3401      	adds	r4, #1
 8007668:	9304      	str	r3, [sp, #16]
 800766a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800766e:	4829      	ldr	r0, [pc, #164]	; (8007714 <_vfiprintf_r+0x224>)
 8007670:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007674:	2206      	movs	r2, #6
 8007676:	f7f8 fdd3 	bl	8000220 <memchr>
 800767a:	2800      	cmp	r0, #0
 800767c:	d03f      	beq.n	80076fe <_vfiprintf_r+0x20e>
 800767e:	4b26      	ldr	r3, [pc, #152]	; (8007718 <_vfiprintf_r+0x228>)
 8007680:	bb1b      	cbnz	r3, 80076ca <_vfiprintf_r+0x1da>
 8007682:	9b03      	ldr	r3, [sp, #12]
 8007684:	3307      	adds	r3, #7
 8007686:	f023 0307 	bic.w	r3, r3, #7
 800768a:	3308      	adds	r3, #8
 800768c:	9303      	str	r3, [sp, #12]
 800768e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007690:	443b      	add	r3, r7
 8007692:	9309      	str	r3, [sp, #36]	; 0x24
 8007694:	e768      	b.n	8007568 <_vfiprintf_r+0x78>
 8007696:	fb0c 3202 	mla	r2, ip, r2, r3
 800769a:	460c      	mov	r4, r1
 800769c:	2001      	movs	r0, #1
 800769e:	e7a6      	b.n	80075ee <_vfiprintf_r+0xfe>
 80076a0:	2300      	movs	r3, #0
 80076a2:	3401      	adds	r4, #1
 80076a4:	9305      	str	r3, [sp, #20]
 80076a6:	4619      	mov	r1, r3
 80076a8:	f04f 0c0a 	mov.w	ip, #10
 80076ac:	4620      	mov	r0, r4
 80076ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076b2:	3a30      	subs	r2, #48	; 0x30
 80076b4:	2a09      	cmp	r2, #9
 80076b6:	d903      	bls.n	80076c0 <_vfiprintf_r+0x1d0>
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d0c6      	beq.n	800764a <_vfiprintf_r+0x15a>
 80076bc:	9105      	str	r1, [sp, #20]
 80076be:	e7c4      	b.n	800764a <_vfiprintf_r+0x15a>
 80076c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80076c4:	4604      	mov	r4, r0
 80076c6:	2301      	movs	r3, #1
 80076c8:	e7f0      	b.n	80076ac <_vfiprintf_r+0x1bc>
 80076ca:	ab03      	add	r3, sp, #12
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	462a      	mov	r2, r5
 80076d0:	4b12      	ldr	r3, [pc, #72]	; (800771c <_vfiprintf_r+0x22c>)
 80076d2:	a904      	add	r1, sp, #16
 80076d4:	4630      	mov	r0, r6
 80076d6:	f7fd fdb1 	bl	800523c <_printf_float>
 80076da:	4607      	mov	r7, r0
 80076dc:	1c78      	adds	r0, r7, #1
 80076de:	d1d6      	bne.n	800768e <_vfiprintf_r+0x19e>
 80076e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076e2:	07d9      	lsls	r1, r3, #31
 80076e4:	d405      	bmi.n	80076f2 <_vfiprintf_r+0x202>
 80076e6:	89ab      	ldrh	r3, [r5, #12]
 80076e8:	059a      	lsls	r2, r3, #22
 80076ea:	d402      	bmi.n	80076f2 <_vfiprintf_r+0x202>
 80076ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076ee:	f7fe fbde 	bl	8005eae <__retarget_lock_release_recursive>
 80076f2:	89ab      	ldrh	r3, [r5, #12]
 80076f4:	065b      	lsls	r3, r3, #25
 80076f6:	f53f af1d 	bmi.w	8007534 <_vfiprintf_r+0x44>
 80076fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076fc:	e71c      	b.n	8007538 <_vfiprintf_r+0x48>
 80076fe:	ab03      	add	r3, sp, #12
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	462a      	mov	r2, r5
 8007704:	4b05      	ldr	r3, [pc, #20]	; (800771c <_vfiprintf_r+0x22c>)
 8007706:	a904      	add	r1, sp, #16
 8007708:	4630      	mov	r0, r6
 800770a:	f7fe f83b 	bl	8005784 <_printf_i>
 800770e:	e7e4      	b.n	80076da <_vfiprintf_r+0x1ea>
 8007710:	08007dec 	.word	0x08007dec
 8007714:	08007df6 	.word	0x08007df6
 8007718:	0800523d 	.word	0x0800523d
 800771c:	080074cb 	.word	0x080074cb
 8007720:	08007df2 	.word	0x08007df2

08007724 <__sflush_r>:
 8007724:	898a      	ldrh	r2, [r1, #12]
 8007726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800772a:	4605      	mov	r5, r0
 800772c:	0710      	lsls	r0, r2, #28
 800772e:	460c      	mov	r4, r1
 8007730:	d458      	bmi.n	80077e4 <__sflush_r+0xc0>
 8007732:	684b      	ldr	r3, [r1, #4]
 8007734:	2b00      	cmp	r3, #0
 8007736:	dc05      	bgt.n	8007744 <__sflush_r+0x20>
 8007738:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800773a:	2b00      	cmp	r3, #0
 800773c:	dc02      	bgt.n	8007744 <__sflush_r+0x20>
 800773e:	2000      	movs	r0, #0
 8007740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007744:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007746:	2e00      	cmp	r6, #0
 8007748:	d0f9      	beq.n	800773e <__sflush_r+0x1a>
 800774a:	2300      	movs	r3, #0
 800774c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007750:	682f      	ldr	r7, [r5, #0]
 8007752:	6a21      	ldr	r1, [r4, #32]
 8007754:	602b      	str	r3, [r5, #0]
 8007756:	d032      	beq.n	80077be <__sflush_r+0x9a>
 8007758:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800775a:	89a3      	ldrh	r3, [r4, #12]
 800775c:	075a      	lsls	r2, r3, #29
 800775e:	d505      	bpl.n	800776c <__sflush_r+0x48>
 8007760:	6863      	ldr	r3, [r4, #4]
 8007762:	1ac0      	subs	r0, r0, r3
 8007764:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007766:	b10b      	cbz	r3, 800776c <__sflush_r+0x48>
 8007768:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800776a:	1ac0      	subs	r0, r0, r3
 800776c:	2300      	movs	r3, #0
 800776e:	4602      	mov	r2, r0
 8007770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007772:	6a21      	ldr	r1, [r4, #32]
 8007774:	4628      	mov	r0, r5
 8007776:	47b0      	blx	r6
 8007778:	1c43      	adds	r3, r0, #1
 800777a:	89a3      	ldrh	r3, [r4, #12]
 800777c:	d106      	bne.n	800778c <__sflush_r+0x68>
 800777e:	6829      	ldr	r1, [r5, #0]
 8007780:	291d      	cmp	r1, #29
 8007782:	d82b      	bhi.n	80077dc <__sflush_r+0xb8>
 8007784:	4a29      	ldr	r2, [pc, #164]	; (800782c <__sflush_r+0x108>)
 8007786:	410a      	asrs	r2, r1
 8007788:	07d6      	lsls	r6, r2, #31
 800778a:	d427      	bmi.n	80077dc <__sflush_r+0xb8>
 800778c:	2200      	movs	r2, #0
 800778e:	6062      	str	r2, [r4, #4]
 8007790:	04d9      	lsls	r1, r3, #19
 8007792:	6922      	ldr	r2, [r4, #16]
 8007794:	6022      	str	r2, [r4, #0]
 8007796:	d504      	bpl.n	80077a2 <__sflush_r+0x7e>
 8007798:	1c42      	adds	r2, r0, #1
 800779a:	d101      	bne.n	80077a0 <__sflush_r+0x7c>
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	b903      	cbnz	r3, 80077a2 <__sflush_r+0x7e>
 80077a0:	6560      	str	r0, [r4, #84]	; 0x54
 80077a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077a4:	602f      	str	r7, [r5, #0]
 80077a6:	2900      	cmp	r1, #0
 80077a8:	d0c9      	beq.n	800773e <__sflush_r+0x1a>
 80077aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077ae:	4299      	cmp	r1, r3
 80077b0:	d002      	beq.n	80077b8 <__sflush_r+0x94>
 80077b2:	4628      	mov	r0, r5
 80077b4:	f7ff f9f6 	bl	8006ba4 <_free_r>
 80077b8:	2000      	movs	r0, #0
 80077ba:	6360      	str	r0, [r4, #52]	; 0x34
 80077bc:	e7c0      	b.n	8007740 <__sflush_r+0x1c>
 80077be:	2301      	movs	r3, #1
 80077c0:	4628      	mov	r0, r5
 80077c2:	47b0      	blx	r6
 80077c4:	1c41      	adds	r1, r0, #1
 80077c6:	d1c8      	bne.n	800775a <__sflush_r+0x36>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d0c5      	beq.n	800775a <__sflush_r+0x36>
 80077ce:	2b1d      	cmp	r3, #29
 80077d0:	d001      	beq.n	80077d6 <__sflush_r+0xb2>
 80077d2:	2b16      	cmp	r3, #22
 80077d4:	d101      	bne.n	80077da <__sflush_r+0xb6>
 80077d6:	602f      	str	r7, [r5, #0]
 80077d8:	e7b1      	b.n	800773e <__sflush_r+0x1a>
 80077da:	89a3      	ldrh	r3, [r4, #12]
 80077dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077e0:	81a3      	strh	r3, [r4, #12]
 80077e2:	e7ad      	b.n	8007740 <__sflush_r+0x1c>
 80077e4:	690f      	ldr	r7, [r1, #16]
 80077e6:	2f00      	cmp	r7, #0
 80077e8:	d0a9      	beq.n	800773e <__sflush_r+0x1a>
 80077ea:	0793      	lsls	r3, r2, #30
 80077ec:	680e      	ldr	r6, [r1, #0]
 80077ee:	bf08      	it	eq
 80077f0:	694b      	ldreq	r3, [r1, #20]
 80077f2:	600f      	str	r7, [r1, #0]
 80077f4:	bf18      	it	ne
 80077f6:	2300      	movne	r3, #0
 80077f8:	eba6 0807 	sub.w	r8, r6, r7
 80077fc:	608b      	str	r3, [r1, #8]
 80077fe:	f1b8 0f00 	cmp.w	r8, #0
 8007802:	dd9c      	ble.n	800773e <__sflush_r+0x1a>
 8007804:	6a21      	ldr	r1, [r4, #32]
 8007806:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007808:	4643      	mov	r3, r8
 800780a:	463a      	mov	r2, r7
 800780c:	4628      	mov	r0, r5
 800780e:	47b0      	blx	r6
 8007810:	2800      	cmp	r0, #0
 8007812:	dc06      	bgt.n	8007822 <__sflush_r+0xfe>
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800781a:	81a3      	strh	r3, [r4, #12]
 800781c:	f04f 30ff 	mov.w	r0, #4294967295
 8007820:	e78e      	b.n	8007740 <__sflush_r+0x1c>
 8007822:	4407      	add	r7, r0
 8007824:	eba8 0800 	sub.w	r8, r8, r0
 8007828:	e7e9      	b.n	80077fe <__sflush_r+0xda>
 800782a:	bf00      	nop
 800782c:	dfbffffe 	.word	0xdfbffffe

08007830 <_fflush_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	690b      	ldr	r3, [r1, #16]
 8007834:	4605      	mov	r5, r0
 8007836:	460c      	mov	r4, r1
 8007838:	b913      	cbnz	r3, 8007840 <_fflush_r+0x10>
 800783a:	2500      	movs	r5, #0
 800783c:	4628      	mov	r0, r5
 800783e:	bd38      	pop	{r3, r4, r5, pc}
 8007840:	b118      	cbz	r0, 800784a <_fflush_r+0x1a>
 8007842:	6a03      	ldr	r3, [r0, #32]
 8007844:	b90b      	cbnz	r3, 800784a <_fflush_r+0x1a>
 8007846:	f7fe f939 	bl	8005abc <__sinit>
 800784a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d0f3      	beq.n	800783a <_fflush_r+0xa>
 8007852:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007854:	07d0      	lsls	r0, r2, #31
 8007856:	d404      	bmi.n	8007862 <_fflush_r+0x32>
 8007858:	0599      	lsls	r1, r3, #22
 800785a:	d402      	bmi.n	8007862 <_fflush_r+0x32>
 800785c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800785e:	f7fe fb25 	bl	8005eac <__retarget_lock_acquire_recursive>
 8007862:	4628      	mov	r0, r5
 8007864:	4621      	mov	r1, r4
 8007866:	f7ff ff5d 	bl	8007724 <__sflush_r>
 800786a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800786c:	07da      	lsls	r2, r3, #31
 800786e:	4605      	mov	r5, r0
 8007870:	d4e4      	bmi.n	800783c <_fflush_r+0xc>
 8007872:	89a3      	ldrh	r3, [r4, #12]
 8007874:	059b      	lsls	r3, r3, #22
 8007876:	d4e1      	bmi.n	800783c <_fflush_r+0xc>
 8007878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800787a:	f7fe fb18 	bl	8005eae <__retarget_lock_release_recursive>
 800787e:	e7dd      	b.n	800783c <_fflush_r+0xc>

08007880 <__swhatbuf_r>:
 8007880:	b570      	push	{r4, r5, r6, lr}
 8007882:	460c      	mov	r4, r1
 8007884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007888:	2900      	cmp	r1, #0
 800788a:	b096      	sub	sp, #88	; 0x58
 800788c:	4615      	mov	r5, r2
 800788e:	461e      	mov	r6, r3
 8007890:	da0d      	bge.n	80078ae <__swhatbuf_r+0x2e>
 8007892:	89a3      	ldrh	r3, [r4, #12]
 8007894:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007898:	f04f 0100 	mov.w	r1, #0
 800789c:	bf0c      	ite	eq
 800789e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80078a2:	2340      	movne	r3, #64	; 0x40
 80078a4:	2000      	movs	r0, #0
 80078a6:	6031      	str	r1, [r6, #0]
 80078a8:	602b      	str	r3, [r5, #0]
 80078aa:	b016      	add	sp, #88	; 0x58
 80078ac:	bd70      	pop	{r4, r5, r6, pc}
 80078ae:	466a      	mov	r2, sp
 80078b0:	f000 f848 	bl	8007944 <_fstat_r>
 80078b4:	2800      	cmp	r0, #0
 80078b6:	dbec      	blt.n	8007892 <__swhatbuf_r+0x12>
 80078b8:	9901      	ldr	r1, [sp, #4]
 80078ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80078be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80078c2:	4259      	negs	r1, r3
 80078c4:	4159      	adcs	r1, r3
 80078c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078ca:	e7eb      	b.n	80078a4 <__swhatbuf_r+0x24>

080078cc <__smakebuf_r>:
 80078cc:	898b      	ldrh	r3, [r1, #12]
 80078ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078d0:	079d      	lsls	r5, r3, #30
 80078d2:	4606      	mov	r6, r0
 80078d4:	460c      	mov	r4, r1
 80078d6:	d507      	bpl.n	80078e8 <__smakebuf_r+0x1c>
 80078d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	6123      	str	r3, [r4, #16]
 80078e0:	2301      	movs	r3, #1
 80078e2:	6163      	str	r3, [r4, #20]
 80078e4:	b002      	add	sp, #8
 80078e6:	bd70      	pop	{r4, r5, r6, pc}
 80078e8:	ab01      	add	r3, sp, #4
 80078ea:	466a      	mov	r2, sp
 80078ec:	f7ff ffc8 	bl	8007880 <__swhatbuf_r>
 80078f0:	9900      	ldr	r1, [sp, #0]
 80078f2:	4605      	mov	r5, r0
 80078f4:	4630      	mov	r0, r6
 80078f6:	f7ff f9c9 	bl	8006c8c <_malloc_r>
 80078fa:	b948      	cbnz	r0, 8007910 <__smakebuf_r+0x44>
 80078fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007900:	059a      	lsls	r2, r3, #22
 8007902:	d4ef      	bmi.n	80078e4 <__smakebuf_r+0x18>
 8007904:	f023 0303 	bic.w	r3, r3, #3
 8007908:	f043 0302 	orr.w	r3, r3, #2
 800790c:	81a3      	strh	r3, [r4, #12]
 800790e:	e7e3      	b.n	80078d8 <__smakebuf_r+0xc>
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	6020      	str	r0, [r4, #0]
 8007914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007918:	81a3      	strh	r3, [r4, #12]
 800791a:	9b00      	ldr	r3, [sp, #0]
 800791c:	6163      	str	r3, [r4, #20]
 800791e:	9b01      	ldr	r3, [sp, #4]
 8007920:	6120      	str	r0, [r4, #16]
 8007922:	b15b      	cbz	r3, 800793c <__smakebuf_r+0x70>
 8007924:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007928:	4630      	mov	r0, r6
 800792a:	f000 f81d 	bl	8007968 <_isatty_r>
 800792e:	b128      	cbz	r0, 800793c <__smakebuf_r+0x70>
 8007930:	89a3      	ldrh	r3, [r4, #12]
 8007932:	f023 0303 	bic.w	r3, r3, #3
 8007936:	f043 0301 	orr.w	r3, r3, #1
 800793a:	81a3      	strh	r3, [r4, #12]
 800793c:	89a3      	ldrh	r3, [r4, #12]
 800793e:	431d      	orrs	r5, r3
 8007940:	81a5      	strh	r5, [r4, #12]
 8007942:	e7cf      	b.n	80078e4 <__smakebuf_r+0x18>

08007944 <_fstat_r>:
 8007944:	b538      	push	{r3, r4, r5, lr}
 8007946:	4d07      	ldr	r5, [pc, #28]	; (8007964 <_fstat_r+0x20>)
 8007948:	2300      	movs	r3, #0
 800794a:	4604      	mov	r4, r0
 800794c:	4608      	mov	r0, r1
 800794e:	4611      	mov	r1, r2
 8007950:	602b      	str	r3, [r5, #0]
 8007952:	f7f9 fe52 	bl	80015fa <_fstat>
 8007956:	1c43      	adds	r3, r0, #1
 8007958:	d102      	bne.n	8007960 <_fstat_r+0x1c>
 800795a:	682b      	ldr	r3, [r5, #0]
 800795c:	b103      	cbz	r3, 8007960 <_fstat_r+0x1c>
 800795e:	6023      	str	r3, [r4, #0]
 8007960:	bd38      	pop	{r3, r4, r5, pc}
 8007962:	bf00      	nop
 8007964:	20000468 	.word	0x20000468

08007968 <_isatty_r>:
 8007968:	b538      	push	{r3, r4, r5, lr}
 800796a:	4d06      	ldr	r5, [pc, #24]	; (8007984 <_isatty_r+0x1c>)
 800796c:	2300      	movs	r3, #0
 800796e:	4604      	mov	r4, r0
 8007970:	4608      	mov	r0, r1
 8007972:	602b      	str	r3, [r5, #0]
 8007974:	f7f9 fe51 	bl	800161a <_isatty>
 8007978:	1c43      	adds	r3, r0, #1
 800797a:	d102      	bne.n	8007982 <_isatty_r+0x1a>
 800797c:	682b      	ldr	r3, [r5, #0]
 800797e:	b103      	cbz	r3, 8007982 <_isatty_r+0x1a>
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	bd38      	pop	{r3, r4, r5, pc}
 8007984:	20000468 	.word	0x20000468

08007988 <_sbrk_r>:
 8007988:	b538      	push	{r3, r4, r5, lr}
 800798a:	4d06      	ldr	r5, [pc, #24]	; (80079a4 <_sbrk_r+0x1c>)
 800798c:	2300      	movs	r3, #0
 800798e:	4604      	mov	r4, r0
 8007990:	4608      	mov	r0, r1
 8007992:	602b      	str	r3, [r5, #0]
 8007994:	f7f9 fe5a 	bl	800164c <_sbrk>
 8007998:	1c43      	adds	r3, r0, #1
 800799a:	d102      	bne.n	80079a2 <_sbrk_r+0x1a>
 800799c:	682b      	ldr	r3, [r5, #0]
 800799e:	b103      	cbz	r3, 80079a2 <_sbrk_r+0x1a>
 80079a0:	6023      	str	r3, [r4, #0]
 80079a2:	bd38      	pop	{r3, r4, r5, pc}
 80079a4:	20000468 	.word	0x20000468

080079a8 <memcpy>:
 80079a8:	440a      	add	r2, r1
 80079aa:	4291      	cmp	r1, r2
 80079ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80079b0:	d100      	bne.n	80079b4 <memcpy+0xc>
 80079b2:	4770      	bx	lr
 80079b4:	b510      	push	{r4, lr}
 80079b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079be:	4291      	cmp	r1, r2
 80079c0:	d1f9      	bne.n	80079b6 <memcpy+0xe>
 80079c2:	bd10      	pop	{r4, pc}

080079c4 <__assert_func>:
 80079c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079c6:	4614      	mov	r4, r2
 80079c8:	461a      	mov	r2, r3
 80079ca:	4b09      	ldr	r3, [pc, #36]	; (80079f0 <__assert_func+0x2c>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4605      	mov	r5, r0
 80079d0:	68d8      	ldr	r0, [r3, #12]
 80079d2:	b14c      	cbz	r4, 80079e8 <__assert_func+0x24>
 80079d4:	4b07      	ldr	r3, [pc, #28]	; (80079f4 <__assert_func+0x30>)
 80079d6:	9100      	str	r1, [sp, #0]
 80079d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079dc:	4906      	ldr	r1, [pc, #24]	; (80079f8 <__assert_func+0x34>)
 80079de:	462b      	mov	r3, r5
 80079e0:	f000 f844 	bl	8007a6c <fiprintf>
 80079e4:	f000 f854 	bl	8007a90 <abort>
 80079e8:	4b04      	ldr	r3, [pc, #16]	; (80079fc <__assert_func+0x38>)
 80079ea:	461c      	mov	r4, r3
 80079ec:	e7f3      	b.n	80079d6 <__assert_func+0x12>
 80079ee:	bf00      	nop
 80079f0:	20000064 	.word	0x20000064
 80079f4:	08007e07 	.word	0x08007e07
 80079f8:	08007e14 	.word	0x08007e14
 80079fc:	08007e42 	.word	0x08007e42

08007a00 <_calloc_r>:
 8007a00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a02:	fba1 2402 	umull	r2, r4, r1, r2
 8007a06:	b94c      	cbnz	r4, 8007a1c <_calloc_r+0x1c>
 8007a08:	4611      	mov	r1, r2
 8007a0a:	9201      	str	r2, [sp, #4]
 8007a0c:	f7ff f93e 	bl	8006c8c <_malloc_r>
 8007a10:	9a01      	ldr	r2, [sp, #4]
 8007a12:	4605      	mov	r5, r0
 8007a14:	b930      	cbnz	r0, 8007a24 <_calloc_r+0x24>
 8007a16:	4628      	mov	r0, r5
 8007a18:	b003      	add	sp, #12
 8007a1a:	bd30      	pop	{r4, r5, pc}
 8007a1c:	220c      	movs	r2, #12
 8007a1e:	6002      	str	r2, [r0, #0]
 8007a20:	2500      	movs	r5, #0
 8007a22:	e7f8      	b.n	8007a16 <_calloc_r+0x16>
 8007a24:	4621      	mov	r1, r4
 8007a26:	f7fe f9c5 	bl	8005db4 <memset>
 8007a2a:	e7f4      	b.n	8007a16 <_calloc_r+0x16>

08007a2c <__ascii_mbtowc>:
 8007a2c:	b082      	sub	sp, #8
 8007a2e:	b901      	cbnz	r1, 8007a32 <__ascii_mbtowc+0x6>
 8007a30:	a901      	add	r1, sp, #4
 8007a32:	b142      	cbz	r2, 8007a46 <__ascii_mbtowc+0x1a>
 8007a34:	b14b      	cbz	r3, 8007a4a <__ascii_mbtowc+0x1e>
 8007a36:	7813      	ldrb	r3, [r2, #0]
 8007a38:	600b      	str	r3, [r1, #0]
 8007a3a:	7812      	ldrb	r2, [r2, #0]
 8007a3c:	1e10      	subs	r0, r2, #0
 8007a3e:	bf18      	it	ne
 8007a40:	2001      	movne	r0, #1
 8007a42:	b002      	add	sp, #8
 8007a44:	4770      	bx	lr
 8007a46:	4610      	mov	r0, r2
 8007a48:	e7fb      	b.n	8007a42 <__ascii_mbtowc+0x16>
 8007a4a:	f06f 0001 	mvn.w	r0, #1
 8007a4e:	e7f8      	b.n	8007a42 <__ascii_mbtowc+0x16>

08007a50 <__ascii_wctomb>:
 8007a50:	b149      	cbz	r1, 8007a66 <__ascii_wctomb+0x16>
 8007a52:	2aff      	cmp	r2, #255	; 0xff
 8007a54:	bf85      	ittet	hi
 8007a56:	238a      	movhi	r3, #138	; 0x8a
 8007a58:	6003      	strhi	r3, [r0, #0]
 8007a5a:	700a      	strbls	r2, [r1, #0]
 8007a5c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007a60:	bf98      	it	ls
 8007a62:	2001      	movls	r0, #1
 8007a64:	4770      	bx	lr
 8007a66:	4608      	mov	r0, r1
 8007a68:	4770      	bx	lr
	...

08007a6c <fiprintf>:
 8007a6c:	b40e      	push	{r1, r2, r3}
 8007a6e:	b503      	push	{r0, r1, lr}
 8007a70:	4601      	mov	r1, r0
 8007a72:	ab03      	add	r3, sp, #12
 8007a74:	4805      	ldr	r0, [pc, #20]	; (8007a8c <fiprintf+0x20>)
 8007a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a7a:	6800      	ldr	r0, [r0, #0]
 8007a7c:	9301      	str	r3, [sp, #4]
 8007a7e:	f7ff fd37 	bl	80074f0 <_vfiprintf_r>
 8007a82:	b002      	add	sp, #8
 8007a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a88:	b003      	add	sp, #12
 8007a8a:	4770      	bx	lr
 8007a8c:	20000064 	.word	0x20000064

08007a90 <abort>:
 8007a90:	b508      	push	{r3, lr}
 8007a92:	2006      	movs	r0, #6
 8007a94:	f000 f82c 	bl	8007af0 <raise>
 8007a98:	2001      	movs	r0, #1
 8007a9a:	f7f9 fd5f 	bl	800155c <_exit>

08007a9e <_raise_r>:
 8007a9e:	291f      	cmp	r1, #31
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	460d      	mov	r5, r1
 8007aa6:	d904      	bls.n	8007ab2 <_raise_r+0x14>
 8007aa8:	2316      	movs	r3, #22
 8007aaa:	6003      	str	r3, [r0, #0]
 8007aac:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab0:	bd38      	pop	{r3, r4, r5, pc}
 8007ab2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007ab4:	b112      	cbz	r2, 8007abc <_raise_r+0x1e>
 8007ab6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007aba:	b94b      	cbnz	r3, 8007ad0 <_raise_r+0x32>
 8007abc:	4620      	mov	r0, r4
 8007abe:	f000 f831 	bl	8007b24 <_getpid_r>
 8007ac2:	462a      	mov	r2, r5
 8007ac4:	4601      	mov	r1, r0
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007acc:	f000 b818 	b.w	8007b00 <_kill_r>
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d00a      	beq.n	8007aea <_raise_r+0x4c>
 8007ad4:	1c59      	adds	r1, r3, #1
 8007ad6:	d103      	bne.n	8007ae0 <_raise_r+0x42>
 8007ad8:	2316      	movs	r3, #22
 8007ada:	6003      	str	r3, [r0, #0]
 8007adc:	2001      	movs	r0, #1
 8007ade:	e7e7      	b.n	8007ab0 <_raise_r+0x12>
 8007ae0:	2400      	movs	r4, #0
 8007ae2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	4798      	blx	r3
 8007aea:	2000      	movs	r0, #0
 8007aec:	e7e0      	b.n	8007ab0 <_raise_r+0x12>
	...

08007af0 <raise>:
 8007af0:	4b02      	ldr	r3, [pc, #8]	; (8007afc <raise+0xc>)
 8007af2:	4601      	mov	r1, r0
 8007af4:	6818      	ldr	r0, [r3, #0]
 8007af6:	f7ff bfd2 	b.w	8007a9e <_raise_r>
 8007afa:	bf00      	nop
 8007afc:	20000064 	.word	0x20000064

08007b00 <_kill_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	4d07      	ldr	r5, [pc, #28]	; (8007b20 <_kill_r+0x20>)
 8007b04:	2300      	movs	r3, #0
 8007b06:	4604      	mov	r4, r0
 8007b08:	4608      	mov	r0, r1
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	602b      	str	r3, [r5, #0]
 8007b0e:	f7f9 fd15 	bl	800153c <_kill>
 8007b12:	1c43      	adds	r3, r0, #1
 8007b14:	d102      	bne.n	8007b1c <_kill_r+0x1c>
 8007b16:	682b      	ldr	r3, [r5, #0]
 8007b18:	b103      	cbz	r3, 8007b1c <_kill_r+0x1c>
 8007b1a:	6023      	str	r3, [r4, #0]
 8007b1c:	bd38      	pop	{r3, r4, r5, pc}
 8007b1e:	bf00      	nop
 8007b20:	20000468 	.word	0x20000468

08007b24 <_getpid_r>:
 8007b24:	f7f9 bd02 	b.w	800152c <_getpid>

08007b28 <_init>:
 8007b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2a:	bf00      	nop
 8007b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b2e:	bc08      	pop	{r3}
 8007b30:	469e      	mov	lr, r3
 8007b32:	4770      	bx	lr

08007b34 <_fini>:
 8007b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b36:	bf00      	nop
 8007b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b3a:	bc08      	pop	{r3}
 8007b3c:	469e      	mov	lr, r3
 8007b3e:	4770      	bx	lr
