
Tets.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005190  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005410  08005410  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005410  08005410  00015410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005418  08005418  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005418  08005418  00015418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800541c  0800541c  0001541c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000068  08005488  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08005488  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013563  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b2f  00000000  00000000  0003363e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001108  00000000  00000000  00036170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d2c  00000000  00000000  00037278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f999  00000000  00000000  00037fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015198  00000000  00000000  0005793d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7b92  00000000  00000000  0006cad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e30  00000000  00000000  00134668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00139498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005358 	.word	0x08005358

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08005358 	.word	0x08005358

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <readEncoder>:
 */

#include "encoder.h"

uint32_t readEncoder(TIM_HandleTypeDef *enc_timer)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	return enc_timer->Instance->CNT;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <convertEncoderToSpeed>:

uint32_t convertEncoderToSpeed(uint32_t enc_prev, uint32_t enc_curr, uint16_t time_ms)
{
 80005d6:	b480      	push	{r7}
 80005d8:	b087      	sub	sp, #28
 80005da:	af00      	add	r7, sp, #0
 80005dc:	60f8      	str	r0, [r7, #12]
 80005de:	60b9      	str	r1, [r7, #8]
 80005e0:	4613      	mov	r3, r2
 80005e2:	80fb      	strh	r3, [r7, #6]
	// Conversion en tour par minute
	uint32_t distance = enc_curr - enc_prev;
 80005e4:	68ba      	ldr	r2, [r7, #8]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	617b      	str	r3, [r7, #20]
	return (distance * 60000) /(time_ms);
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	f64e 2260 	movw	r2, #60000	; 0xea60
 80005f2:	fb03 f202 	mul.w	r2, r3, r2
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	371c      	adds	r7, #28
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	4b36      	ldr	r3, [pc, #216]	; (80006f8 <MX_GPIO_Init+0xf0>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	4a35      	ldr	r2, [pc, #212]	; (80006f8 <MX_GPIO_Init+0xf0>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062a:	4b33      	ldr	r3, [pc, #204]	; (80006f8 <MX_GPIO_Init+0xf0>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000636:	4b30      	ldr	r3, [pc, #192]	; (80006f8 <MX_GPIO_Init+0xf0>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	4a2f      	ldr	r2, [pc, #188]	; (80006f8 <MX_GPIO_Init+0xf0>)
 800063c:	f043 0320 	orr.w	r3, r3, #32
 8000640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000642:	4b2d      	ldr	r3, [pc, #180]	; (80006f8 <MX_GPIO_Init+0xf0>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	f003 0320 	and.w	r3, r3, #32
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b2a      	ldr	r3, [pc, #168]	; (80006f8 <MX_GPIO_Init+0xf0>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	4a29      	ldr	r2, [pc, #164]	; (80006f8 <MX_GPIO_Init+0xf0>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065a:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <MX_GPIO_Init+0xf0>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	4b24      	ldr	r3, [pc, #144]	; (80006f8 <MX_GPIO_Init+0xf0>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	4a23      	ldr	r2, [pc, #140]	; (80006f8 <MX_GPIO_Init+0xf0>)
 800066c:	f043 0302 	orr.w	r3, r3, #2
 8000670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <MX_GPIO_Init+0xf0>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2120      	movs	r1, #32
 8000682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000686:	f000 ff83 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_EN_Pin|GPIO_ENU_Pin|GPIO_ENV_Pin, GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000690:	481a      	ldr	r0, [pc, #104]	; (80006fc <MX_GPIO_Init+0xf4>)
 8000692:	f000 ff7d 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000696:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800069c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	4814      	ldr	r0, [pc, #80]	; (8000700 <MX_GPIO_Init+0xf8>)
 80006ae:	f000 fded 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006b2:	2320      	movs	r3, #32
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2300      	movs	r3, #0
 80006c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006cc:	f000 fdde 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_EN_Pin|GPIO_ENU_Pin|GPIO_ENV_Pin;
 80006d0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80006d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	2301      	movs	r3, #1
 80006d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4619      	mov	r1, r3
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_GPIO_Init+0xf4>)
 80006ea:	f000 fdcf 	bl	800128c <HAL_GPIO_Init>

}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	; 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000
 80006fc:	48000400 	.word	0x48000400
 8000700:	48000800 	.word	0x48000800

08000704 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 800070c:	1d39      	adds	r1, r7, #4
 800070e:	f04f 33ff 	mov.w	r3, #4294967295
 8000712:	2201      	movs	r2, #1
 8000714:	4803      	ldr	r0, [pc, #12]	; (8000724 <__io_putchar+0x20>)
 8000716:	f003 f8e1 	bl	80038dc <HAL_UART_Transmit>
	return chr;
 800071a:	687b      	ldr	r3, [r7, #4]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	2000012c 	.word	0x2000012c

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	; 0x30
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fc36 	bl	8000f9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f873 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000736:	f7ff ff67 	bl	8000608 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800073a:	f000 fb65 	bl	8000e08 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 800073e:	f000 f9d9 	bl	8000af4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000742:	f000 fa75 	bl	8000c30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000746:	482f      	ldr	r0, [pc, #188]	; (8000804 <main+0xdc>)
 8000748:	f001 ff12 	bl	8002570 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 800074c:	482e      	ldr	r0, [pc, #184]	; (8000808 <main+0xe0>)
 800074e:	f001 ff0f 	bl	8002570 <HAL_TIM_Base_Start>

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000752:	213c      	movs	r1, #60	; 0x3c
 8000754:	482c      	ldr	r0, [pc, #176]	; (8000808 <main+0xe0>)
 8000756:	f002 fa01 	bl	8002b5c <HAL_TIM_Encoder_Start>

  // Motor init
  PWM fwd = {&htim1, TIM_CHANNEL_1, 0.0};
 800075a:	4b2a      	ldr	r3, [pc, #168]	; (8000804 <main+0xdc>)
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	f04f 0300 	mov.w	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  PWM rev = {&htim1, TIM_CHANNEL_2, 0.0};
 8000768:	4a28      	ldr	r2, [pc, #160]	; (800080c <main+0xe4>)
 800076a:	463b      	mov	r3, r7
 800076c:	ca07      	ldmia	r2, {r0, r1, r2}
 800076e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  initMotor(&motor_left, &fwd, &rev);
 8000772:	463a      	mov	r2, r7
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	4619      	mov	r1, r3
 800077a:	4825      	ldr	r0, [pc, #148]	; (8000810 <main+0xe8>)
 800077c:	f000 f89e 	bl	80008bc <initMotor>


  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 10);
 8000780:	4b20      	ldr	r3, [pc, #128]	; (8000804 <main+0xdc>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	220a      	movs	r2, #10
 8000786:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 15);
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <main+0xdc>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	220f      	movs	r2, #15
 800078e:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000790:	2104      	movs	r1, #4
 8000792:	481c      	ldr	r0, [pc, #112]	; (8000804 <main+0xdc>)
 8000794:	f001 ffa6 	bl	80026e4 <HAL_TIM_PWM_Start>

  int i = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t prev_encoder_value = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t current_encoder_value;
  uint32_t start_ms = HAL_GetTick();
 80007a0:	f000 fc62 	bl	8001068 <HAL_GetTick>
 80007a4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(i < 15)
 80007a6:	e025      	b.n	80007f4 <main+0xcc>
	  {
		  current_encoder_value = readEncoder(&htim2);
 80007a8:	4817      	ldr	r0, [pc, #92]	; (8000808 <main+0xe0>)
 80007aa:	f7ff ff07 	bl	80005bc <readEncoder>
 80007ae:	6238      	str	r0, [r7, #32]
		  end_ms = HAL_GetTick();
 80007b0:	f000 fc5a 	bl	8001068 <HAL_GetTick>
 80007b4:	61f8      	str	r0, [r7, #28]
		  time_ms = end_ms - start_ms;
 80007b6:	69fa      	ldr	r2, [r7, #28]
 80007b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	61bb      	str	r3, [r7, #24]
		  printf("Encoder = %ld\r\n", current_encoder_value);
 80007be:	6a39      	ldr	r1, [r7, #32]
 80007c0:	4814      	ldr	r0, [pc, #80]	; (8000814 <main+0xec>)
 80007c2:	f003 ff55 	bl	8004670 <iprintf>
		  printf("Speed = %ld\r\n", convertEncoderToSpeed(prev_encoder_value, current_encoder_value, time_ms));
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	461a      	mov	r2, r3
 80007cc:	6a39      	ldr	r1, [r7, #32]
 80007ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80007d0:	f7ff ff01 	bl	80005d6 <convertEncoderToSpeed>
 80007d4:	4603      	mov	r3, r0
 80007d6:	4619      	mov	r1, r3
 80007d8:	480f      	ldr	r0, [pc, #60]	; (8000818 <main+0xf0>)
 80007da:	f003 ff49 	bl	8004670 <iprintf>
		  HAL_Delay(1000);
 80007de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e2:	f000 fc4d 	bl	8001080 <HAL_Delay>
		  i++;
 80007e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007e8:	3301      	adds	r3, #1
 80007ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		  prev_encoder_value = current_encoder_value;
 80007ec:	6a3b      	ldr	r3, [r7, #32]
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
		  start_ms = end_ms;
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
	  while(i < 15)
 80007f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f6:	2b0e      	cmp	r3, #14
 80007f8:	ddd6      	ble.n	80007a8 <main+0x80>
	  }
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80007fa:	2104      	movs	r1, #4
 80007fc:	4801      	ldr	r0, [pc, #4]	; (8000804 <main+0xdc>)
 80007fe:	f002 f871 	bl	80028e4 <HAL_TIM_PWM_Stop>
	  while(i < 15)
 8000802:	e7f7      	b.n	80007f4 <main+0xcc>
 8000804:	20000094 	.word	0x20000094
 8000808:	200000e0 	.word	0x200000e0
 800080c:	08005390 	.word	0x08005390
 8000810:	20000084 	.word	0x20000084
 8000814:	08005370 	.word	0x08005370
 8000818:	08005380 	.word	0x08005380

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b094      	sub	sp, #80	; 0x50
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0318 	add.w	r3, r7, #24
 8000826:	2238      	movs	r2, #56	; 0x38
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f003 ff75 	bl	800471a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800083e:	2000      	movs	r0, #0
 8000840:	f000 febe 	bl	80015c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000844:	2302      	movs	r3, #2
 8000846:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084e:	2340      	movs	r3, #64	; 0x40
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000852:	2302      	movs	r3, #2
 8000854:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000856:	2302      	movs	r3, #2
 8000858:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800085a:	2304      	movs	r3, #4
 800085c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800085e:	2355      	movs	r3, #85	; 0x55
 8000860:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000862:	2302      	movs	r3, #2
 8000864:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000866:	2302      	movs	r3, #2
 8000868:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800086a:	2302      	movs	r3, #2
 800086c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086e:	f107 0318 	add.w	r3, r7, #24
 8000872:	4618      	mov	r0, r3
 8000874:	f000 ff58 	bl	8001728 <HAL_RCC_OscConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800087e:	f000 f818 	bl	80008b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000882:	230f      	movs	r3, #15
 8000884:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000886:	2303      	movs	r3, #3
 8000888:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2104      	movs	r1, #4
 800089a:	4618      	mov	r0, r3
 800089c:	f001 fa5c 	bl	8001d58 <HAL_RCC_ClockConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80008a6:	f000 f804 	bl	80008b2 <Error_Handler>
  }
}
 80008aa:	bf00      	nop
 80008ac:	3750      	adds	r7, #80	; 0x50
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b6:	b672      	cpsid	i
}
 80008b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ba:	e7fe      	b.n	80008ba <Error_Handler+0x8>

080008bc <initMotor>:

h_motor_t motor_left;
h_motor_t motor_right;

void initMotor(h_motor_t *motor, PWM *fwd, PWM *rev)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
	motor->speed = 0;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
	motor->state = STOP;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	2202      	movs	r2, #2
 80008d2:	705a      	strb	r2, [r3, #1]
	motor->fwd = fwd;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	605a      	str	r2, [r3, #4]
	motor->rev = rev;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	609a      	str	r2, [r3, #8]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <HAL_MspInit+0x44>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <HAL_MspInit+0x44>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6613      	str	r3, [r2, #96]	; 0x60
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <HAL_MspInit+0x44>)
 8000900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x44>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x44>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6593      	str	r3, [r2, #88]	; 0x58
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x44>)
 8000918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000922:	f000 fef1 	bl	8001708 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <MemManage_Handler+0x4>

08000946 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler+0x4>

08000952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000980:	f000 fb60 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}

08000988 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	e00a      	b.n	80009b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800099a:	f3af 8000 	nop.w
 800099e:	4601      	mov	r1, r0
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	1c5a      	adds	r2, r3, #1
 80009a4:	60ba      	str	r2, [r7, #8]
 80009a6:	b2ca      	uxtb	r2, r1
 80009a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	3301      	adds	r3, #1
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	697a      	ldr	r2, [r7, #20]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	dbf0      	blt.n	800099a <_read+0x12>
  }

  return len;
 80009b8:	687b      	ldr	r3, [r7, #4]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b086      	sub	sp, #24
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	e009      	b.n	80009e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	1c5a      	adds	r2, r3, #1
 80009d8:	60ba      	str	r2, [r7, #8]
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fe91 	bl	8000704 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	3301      	adds	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	dbf1      	blt.n	80009d4 <_write+0x12>
  }
  return len;
 80009f0:	687b      	ldr	r3, [r7, #4]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <_close>:

int _close(int file)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
 8000a1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a22:	605a      	str	r2, [r3, #4]
  return 0;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <_isatty>:

int _isatty(int file)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
	...

08000a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a6c:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <_sbrk+0x5c>)
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <_sbrk+0x60>)
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d102      	bne.n	8000a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <_sbrk+0x64>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	; (8000acc <_sbrk+0x68>)
 8000a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d207      	bcs.n	8000aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a94:	f003 fe90 	bl	80047b8 <__errno>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	e009      	b.n	8000ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a05      	ldr	r2, [pc, #20]	; (8000ac8 <_sbrk+0x64>)
 8000ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20008000 	.word	0x20008000
 8000ac4:	00000400 	.word	0x00000400
 8000ac8:	20000090 	.word	0x20000090
 8000acc:	20000310 	.word	0x20000310

08000ad0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <SystemInit+0x20>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <SystemInit+0x20>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b098      	sub	sp, #96	; 0x60
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]
 8000b16:	615a      	str	r2, [r3, #20]
 8000b18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2234      	movs	r2, #52	; 0x34
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f003 fdfa 	bl	800471a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b26:	4b40      	ldr	r3, [pc, #256]	; (8000c28 <MX_TIM1_Init+0x134>)
 8000b28:	4a40      	ldr	r2, [pc, #256]	; (8000c2c <MX_TIM1_Init+0x138>)
 8000b2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000b2c:	4b3e      	ldr	r3, [pc, #248]	; (8000c28 <MX_TIM1_Init+0x134>)
 8000b2e:	22a9      	movs	r2, #169	; 0xa9
 8000b30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b32:	4b3d      	ldr	r3, [pc, #244]	; (8000c28 <MX_TIM1_Init+0x134>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000b38:	4b3b      	ldr	r3, [pc, #236]	; (8000c28 <MX_TIM1_Init+0x134>)
 8000b3a:	2263      	movs	r2, #99	; 0x63
 8000b3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3e:	4b3a      	ldr	r3, [pc, #232]	; (8000c28 <MX_TIM1_Init+0x134>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b44:	4b38      	ldr	r3, [pc, #224]	; (8000c28 <MX_TIM1_Init+0x134>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4a:	4b37      	ldr	r3, [pc, #220]	; (8000c28 <MX_TIM1_Init+0x134>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b50:	4835      	ldr	r0, [pc, #212]	; (8000c28 <MX_TIM1_Init+0x134>)
 8000b52:	f001 fd6f 	bl	8002634 <HAL_TIM_PWM_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000b5c:	f7ff fea9 	bl	80008b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b60:	2300      	movs	r3, #0
 8000b62:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b70:	4619      	mov	r1, r3
 8000b72:	482d      	ldr	r0, [pc, #180]	; (8000c28 <MX_TIM1_Init+0x134>)
 8000b74:	f002 fd40 	bl	80035f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000b7e:	f7ff fe98 	bl	80008b2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b82:	2360      	movs	r3, #96	; 0x60
 8000b84:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b96:	2300      	movs	r3, #0
 8000b98:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4820      	ldr	r0, [pc, #128]	; (8000c28 <MX_TIM1_Init+0x134>)
 8000ba8:	f002 f866 	bl	8002c78 <HAL_TIM_PWM_ConfigChannel>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000bb2:	f7ff fe7e 	bl	80008b2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bb6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bba:	2204      	movs	r2, #4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	481a      	ldr	r0, [pc, #104]	; (8000c28 <MX_TIM1_Init+0x134>)
 8000bc0:	f002 f85a 	bl	8002c78 <HAL_TIM_PWM_ConfigChannel>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000bca:	f7ff fe72 	bl	80008b2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000be2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4807      	ldr	r0, [pc, #28]	; (8000c28 <MX_TIM1_Init+0x134>)
 8000c0c:	f002 fd76 	bl	80036fc <HAL_TIMEx_ConfigBreakDeadTime>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000c16:	f7ff fe4c 	bl	80008b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c1a:	4803      	ldr	r0, [pc, #12]	; (8000c28 <MX_TIM1_Init+0x134>)
 8000c1c:	f000 f8bc 	bl	8000d98 <HAL_TIM_MspPostInit>

}
 8000c20:	bf00      	nop
 8000c22:	3760      	adds	r7, #96	; 0x60
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000094 	.word	0x20000094
 8000c2c:	40012c00 	.word	0x40012c00

08000c30 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08c      	sub	sp, #48	; 0x30
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c36:	f107 030c 	add.w	r3, r7, #12
 8000c3a:	2224      	movs	r2, #36	; 0x24
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f003 fd6b 	bl	800471a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c44:	463b      	mov	r3, r7
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <MX_TIM2_Init+0xa4>)
 8000c50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000c56:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_TIM2_Init+0xa4>)
 8000c58:	22a9      	movs	r2, #169	; 0xa9
 8000c5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_TIM2_Init+0xa4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_TIM2_Init+0xa4>)
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295
 8000c68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_TIM2_Init+0xa4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c70:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_TIM2_Init+0xa4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c76:	2303      	movs	r3, #3
 8000c78:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <MX_TIM2_Init+0xa4>)
 8000ca2:	f001 feb5 	bl	8002a10 <HAL_TIM_Encoder_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000cac:	f7ff fe01 	bl	80008b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cb8:	463b      	mov	r3, r7
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_TIM2_Init+0xa4>)
 8000cbe:	f002 fc9b 	bl	80035f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000cc8:	f7ff fdf3 	bl	80008b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	3730      	adds	r7, #48	; 0x30
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200000e0 	.word	0x200000e0

08000cd8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <HAL_TIM_PWM_MspInit+0x38>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d10b      	bne.n	8000d02 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_TIM_PWM_MspInit+0x3c>)
 8000cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cee:	4a09      	ldr	r2, [pc, #36]	; (8000d14 <HAL_TIM_PWM_MspInit+0x3c>)
 8000cf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cf4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <HAL_TIM_PWM_MspInit+0x3c>)
 8000cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000d02:	bf00      	nop
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40012c00 	.word	0x40012c00
 8000d14:	40021000 	.word	0x40021000

08000d18 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d38:	d128      	bne.n	8000d8c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d3a:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3e:	4a15      	ldr	r2, [pc, #84]	; (8000d94 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6593      	str	r3, [r2, #88]	; 0x58
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	4a0f      	ldr	r2, [pc, #60]	; (8000d94 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d88:	f000 fa80 	bl	800128c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	3728      	adds	r7, #40	; 0x28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40021000 	.word	0x40021000

08000d98 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <HAL_TIM_MspPostInit+0x68>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d11d      	bne.n	8000df6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_TIM_MspPostInit+0x6c>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	4a11      	ldr	r2, [pc, #68]	; (8000e04 <HAL_TIM_MspPostInit+0x6c>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <HAL_TIM_MspPostInit+0x6c>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000de4:	2306      	movs	r3, #6
 8000de6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	4619      	mov	r1, r3
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f000 fa4b 	bl	800128c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000df6:	bf00      	nop
 8000df8:	3720      	adds	r7, #32
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40012c00 	.word	0x40012c00
 8000e04:	40021000 	.word	0x40021000

08000e08 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e0c:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e0e:	4a22      	ldr	r2, [pc, #136]	; (8000e98 <MX_LPUART1_UART_Init+0x90>)
 8000e10:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e18:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e2c:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e2e:	220c      	movs	r2, #12
 8000e30:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e4a:	4812      	ldr	r0, [pc, #72]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e4c:	f002 fcf6 	bl	800383c <HAL_UART_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e56:	f7ff fd2c 	bl	80008b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e5e:	f003 fa8d 	bl	800437c <HAL_UARTEx_SetTxFifoThreshold>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000e68:	f7ff fd23 	bl	80008b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4809      	ldr	r0, [pc, #36]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e70:	f003 fac2 	bl	80043f8 <HAL_UARTEx_SetRxFifoThreshold>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000e7a:	f7ff fd1a 	bl	80008b2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e80:	f003 fa43 	bl	800430a <HAL_UARTEx_DisableFifoMode>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000e8a:	f7ff fd12 	bl	80008b2 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000012c 	.word	0x2000012c
 8000e98:	40008000 	.word	0x40008000

08000e9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b09a      	sub	sp, #104	; 0x68
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	2244      	movs	r2, #68	; 0x44
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f003 fc2c 	bl	800471a <memset>
  if(uartHandle->Instance==LPUART1)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a1f      	ldr	r2, [pc, #124]	; (8000f44 <HAL_UART_MspInit+0xa8>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d136      	bne.n	8000f3a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ecc:	2320      	movs	r3, #32
 8000ece:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f001 f959 	bl	8002190 <HAL_RCCEx_PeriphCLKConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ee4:	f7ff fce5 	bl	80008b2 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ee8:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <HAL_UART_MspInit+0xac>)
 8000eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eec:	4a16      	ldr	r2, [pc, #88]	; (8000f48 <HAL_UART_MspInit+0xac>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <HAL_UART_MspInit+0xac>)
 8000ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <HAL_UART_MspInit+0xac>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f04:	4a10      	ldr	r2, [pc, #64]	; (8000f48 <HAL_UART_MspInit+0xac>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <HAL_UART_MspInit+0xac>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000f18:	230c      	movs	r3, #12
 8000f1a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000f28:	230c      	movs	r3, #12
 8000f2a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f30:	4619      	mov	r1, r3
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f36:	f000 f9a9 	bl	800128c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	3768      	adds	r7, #104	; 0x68
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40008000 	.word	0x40008000
 8000f48:	40021000 	.word	0x40021000

08000f4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f4c:	480d      	ldr	r0, [pc, #52]	; (8000f84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f52:	490e      	ldr	r1, [pc, #56]	; (8000f8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <LoopForever+0xe>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f68:	4c0b      	ldr	r4, [pc, #44]	; (8000f98 <LoopForever+0x16>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f76:	f7ff fdab 	bl	8000ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f003 fc23 	bl	80047c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f7e:	f7ff fbd3 	bl	8000728 <main>

08000f82 <LoopForever>:

LoopForever:
    b LoopForever
 8000f82:	e7fe      	b.n	8000f82 <LoopForever>
  ldr   r0, =_estack
 8000f84:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f90:	08005420 	.word	0x08005420
  ldr r2, =_sbss
 8000f94:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f98:	2000030c 	.word	0x2000030c

08000f9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC1_2_IRQHandler>

08000f9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 f93d 	bl	8001228 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f000 f80e 	bl	8000fd0 <HAL_InitTick>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d002      	beq.n	8000fc0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	71fb      	strb	r3, [r7, #7]
 8000fbe:	e001      	b.n	8000fc4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fc0:	f7ff fc94 	bl	80008ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fc4:	79fb      	ldrb	r3, [r7, #7]

}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <HAL_InitTick+0x68>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d022      	beq.n	800102a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_InitTick+0x6c>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <HAL_InitTick+0x68>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ff0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 f93a 	bl	8001272 <HAL_SYSTICK_Config>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d10f      	bne.n	8001024 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b0f      	cmp	r3, #15
 8001008:	d809      	bhi.n	800101e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800100a:	2200      	movs	r2, #0
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	f04f 30ff 	mov.w	r0, #4294967295
 8001012:	f000 f914 	bl	800123e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <HAL_InitTick+0x70>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	e007      	b.n	800102e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	e004      	b.n	800102e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	e001      	b.n	800102e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800102e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000008 	.word	0x20000008
 800103c:	20000000 	.word	0x20000000
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x1c>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_IncTick+0x20>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4413      	add	r3, r2
 8001052:	4a03      	ldr	r2, [pc, #12]	; (8001060 <HAL_IncTick+0x1c>)
 8001054:	6013      	str	r3, [r2, #0]
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	200001bc 	.word	0x200001bc
 8001064:	20000008 	.word	0x20000008

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <HAL_GetTick+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	200001bc 	.word	0x200001bc

08001080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff ffee 	bl	8001068 <HAL_GetTick>
 800108c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001098:	d004      	beq.n	80010a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <HAL_Delay+0x40>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	4413      	add	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a4:	bf00      	nop
 80010a6:	f7ff ffdf 	bl	8001068 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d8f7      	bhi.n	80010a6 <HAL_Delay+0x26>
  {
  }
}
 80010b6:	bf00      	nop
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000008 	.word	0x20000008

080010c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f6:	4a04      	ldr	r2, [pc, #16]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <__NVIC_GetPriorityGrouping+0x18>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	f003 0307 	and.w	r3, r3, #7
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	db0a      	blt.n	8001152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	490c      	ldr	r1, [pc, #48]	; (8001174 <__NVIC_SetPriority+0x4c>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	0112      	lsls	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	440b      	add	r3, r1
 800114c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001150:	e00a      	b.n	8001168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4908      	ldr	r1, [pc, #32]	; (8001178 <__NVIC_SetPriority+0x50>)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	3b04      	subs	r3, #4
 8001160:	0112      	lsls	r2, r2, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	440b      	add	r3, r1
 8001166:	761a      	strb	r2, [r3, #24]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000e100 	.word	0xe000e100
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f1c3 0307 	rsb	r3, r3, #7
 8001196:	2b04      	cmp	r3, #4
 8001198:	bf28      	it	cs
 800119a:	2304      	movcs	r3, #4
 800119c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3304      	adds	r3, #4
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d902      	bls.n	80011ac <NVIC_EncodePriority+0x30>
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3b03      	subs	r3, #3
 80011aa:	e000      	b.n	80011ae <NVIC_EncodePriority+0x32>
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43da      	mvns	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43d9      	mvns	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	4313      	orrs	r3, r2
         );
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3724      	adds	r7, #36	; 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f4:	d301      	bcc.n	80011fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00f      	b.n	800121a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <SysTick_Config+0x40>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001202:	210f      	movs	r1, #15
 8001204:	f04f 30ff 	mov.w	r0, #4294967295
 8001208:	f7ff ff8e 	bl	8001128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <SysTick_Config+0x40>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <SysTick_Config+0x40>)
 8001214:	2207      	movs	r2, #7
 8001216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	e000e010 	.word	0xe000e010

08001228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff47 	bl	80010c4 <__NVIC_SetPriorityGrouping>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b086      	sub	sp, #24
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800124c:	f7ff ff5e 	bl	800110c <__NVIC_GetPriorityGrouping>
 8001250:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	6978      	ldr	r0, [r7, #20]
 8001258:	f7ff ff90 	bl	800117c <NVIC_EncodePriority>
 800125c:	4602      	mov	r2, r0
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff5f 	bl	8001128 <__NVIC_SetPriority>
}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffb2 	bl	80011e4 <SysTick_Config>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800129a:	e15a      	b.n	8001552 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	2101      	movs	r1, #1
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	4013      	ands	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 814c 	beq.w	800154c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d005      	beq.n	80012cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d130      	bne.n	800132e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001302:	2201      	movs	r2, #1
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	f003 0201 	and.w	r2, r3, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	2b03      	cmp	r3, #3
 8001338:	d017      	beq.n	800136a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d123      	bne.n	80013be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	691a      	ldr	r2, [r3, #16]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	08da      	lsrs	r2, r3, #3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3208      	adds	r2, #8
 80013b8:	6939      	ldr	r1, [r7, #16]
 80013ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2203      	movs	r2, #3
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0203 	and.w	r2, r3, #3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 80a6 	beq.w	800154c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001400:	4b5b      	ldr	r3, [pc, #364]	; (8001570 <HAL_GPIO_Init+0x2e4>)
 8001402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001404:	4a5a      	ldr	r2, [pc, #360]	; (8001570 <HAL_GPIO_Init+0x2e4>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6613      	str	r3, [r2, #96]	; 0x60
 800140c:	4b58      	ldr	r3, [pc, #352]	; (8001570 <HAL_GPIO_Init+0x2e4>)
 800140e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001418:	4a56      	ldr	r2, [pc, #344]	; (8001574 <HAL_GPIO_Init+0x2e8>)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	220f      	movs	r2, #15
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001442:	d01f      	beq.n	8001484 <HAL_GPIO_Init+0x1f8>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a4c      	ldr	r2, [pc, #304]	; (8001578 <HAL_GPIO_Init+0x2ec>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d019      	beq.n	8001480 <HAL_GPIO_Init+0x1f4>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a4b      	ldr	r2, [pc, #300]	; (800157c <HAL_GPIO_Init+0x2f0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d013      	beq.n	800147c <HAL_GPIO_Init+0x1f0>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a4a      	ldr	r2, [pc, #296]	; (8001580 <HAL_GPIO_Init+0x2f4>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d00d      	beq.n	8001478 <HAL_GPIO_Init+0x1ec>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a49      	ldr	r2, [pc, #292]	; (8001584 <HAL_GPIO_Init+0x2f8>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d007      	beq.n	8001474 <HAL_GPIO_Init+0x1e8>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a48      	ldr	r2, [pc, #288]	; (8001588 <HAL_GPIO_Init+0x2fc>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d101      	bne.n	8001470 <HAL_GPIO_Init+0x1e4>
 800146c:	2305      	movs	r3, #5
 800146e:	e00a      	b.n	8001486 <HAL_GPIO_Init+0x1fa>
 8001470:	2306      	movs	r3, #6
 8001472:	e008      	b.n	8001486 <HAL_GPIO_Init+0x1fa>
 8001474:	2304      	movs	r3, #4
 8001476:	e006      	b.n	8001486 <HAL_GPIO_Init+0x1fa>
 8001478:	2303      	movs	r3, #3
 800147a:	e004      	b.n	8001486 <HAL_GPIO_Init+0x1fa>
 800147c:	2302      	movs	r3, #2
 800147e:	e002      	b.n	8001486 <HAL_GPIO_Init+0x1fa>
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <HAL_GPIO_Init+0x1fa>
 8001484:	2300      	movs	r3, #0
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	f002 0203 	and.w	r2, r2, #3
 800148c:	0092      	lsls	r2, r2, #2
 800148e:	4093      	lsls	r3, r2
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001496:	4937      	ldr	r1, [pc, #220]	; (8001574 <HAL_GPIO_Init+0x2e8>)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	089b      	lsrs	r3, r3, #2
 800149c:	3302      	adds	r3, #2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014a4:	4b39      	ldr	r3, [pc, #228]	; (800158c <HAL_GPIO_Init+0x300>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014c8:	4a30      	ldr	r2, [pc, #192]	; (800158c <HAL_GPIO_Init+0x300>)
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014ce:	4b2f      	ldr	r3, [pc, #188]	; (800158c <HAL_GPIO_Init+0x300>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014f2:	4a26      	ldr	r2, [pc, #152]	; (800158c <HAL_GPIO_Init+0x300>)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <HAL_GPIO_Init+0x300>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	43db      	mvns	r3, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800151c:	4a1b      	ldr	r2, [pc, #108]	; (800158c <HAL_GPIO_Init+0x300>)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001522:	4b1a      	ldr	r3, [pc, #104]	; (800158c <HAL_GPIO_Init+0x300>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001546:	4a11      	ldr	r2, [pc, #68]	; (800158c <HAL_GPIO_Init+0x300>)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	3301      	adds	r3, #1
 8001550:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	fa22 f303 	lsr.w	r3, r2, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	f47f ae9d 	bne.w	800129c <HAL_GPIO_Init+0x10>
  }
}
 8001562:	bf00      	nop
 8001564:	bf00      	nop
 8001566:	371c      	adds	r7, #28
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	40021000 	.word	0x40021000
 8001574:	40010000 	.word	0x40010000
 8001578:	48000400 	.word	0x48000400
 800157c:	48000800 	.word	0x48000800
 8001580:	48000c00 	.word	0x48000c00
 8001584:	48001000 	.word	0x48001000
 8001588:	48001400 	.word	0x48001400
 800158c:	40010400 	.word	0x40010400

08001590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015ac:	e002      	b.n	80015b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ae:	887a      	ldrh	r2, [r7, #2]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d141      	bne.n	8001652 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015ce:	4b4b      	ldr	r3, [pc, #300]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015da:	d131      	bne.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015dc:	4b47      	ldr	r3, [pc, #284]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015e2:	4a46      	ldr	r2, [pc, #280]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ec:	4b43      	ldr	r3, [pc, #268]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015f4:	4a41      	ldr	r2, [pc, #260]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015fc:	4b40      	ldr	r3, [pc, #256]	; (8001700 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2232      	movs	r2, #50	; 0x32
 8001602:	fb02 f303 	mul.w	r3, r2, r3
 8001606:	4a3f      	ldr	r2, [pc, #252]	; (8001704 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001608:	fba2 2303 	umull	r2, r3, r2, r3
 800160c:	0c9b      	lsrs	r3, r3, #18
 800160e:	3301      	adds	r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001612:	e002      	b.n	800161a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	3b01      	subs	r3, #1
 8001618:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800161a:	4b38      	ldr	r3, [pc, #224]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001626:	d102      	bne.n	800162e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f2      	bne.n	8001614 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800162e:	4b33      	ldr	r3, [pc, #204]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800163a:	d158      	bne.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e057      	b.n	80016f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001640:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001646:	4a2d      	ldr	r2, [pc, #180]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800164c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001650:	e04d      	b.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001658:	d141      	bne.n	80016de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800165a:	4b28      	ldr	r3, [pc, #160]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001666:	d131      	bne.n	80016cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001668:	4b24      	ldr	r3, [pc, #144]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800166e:	4a23      	ldr	r2, [pc, #140]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001674:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001678:	4b20      	ldr	r3, [pc, #128]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001680:	4a1e      	ldr	r2, [pc, #120]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001686:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2232      	movs	r2, #50	; 0x32
 800168e:	fb02 f303 	mul.w	r3, r2, r3
 8001692:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	0c9b      	lsrs	r3, r3, #18
 800169a:	3301      	adds	r3, #1
 800169c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800169e:	e002      	b.n	80016a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b2:	d102      	bne.n	80016ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f2      	bne.n	80016a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c6:	d112      	bne.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e011      	b.n	80016f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016dc:	e007      	b.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016de:	4b07      	ldr	r3, [pc, #28]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	40007000 	.word	0x40007000
 8001700:	20000000 	.word	0x20000000
 8001704:	431bde83 	.word	0x431bde83

08001708 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001716:	6093      	str	r3, [r2, #8]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40007000 	.word	0x40007000

08001728 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e306      	b.n	8001d48 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d075      	beq.n	8001832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001746:	4b97      	ldr	r3, [pc, #604]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001750:	4b94      	ldr	r3, [pc, #592]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	2b0c      	cmp	r3, #12
 800175e:	d102      	bne.n	8001766 <HAL_RCC_OscConfig+0x3e>
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	2b03      	cmp	r3, #3
 8001764:	d002      	beq.n	800176c <HAL_RCC_OscConfig+0x44>
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	2b08      	cmp	r3, #8
 800176a:	d10b      	bne.n	8001784 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	4b8d      	ldr	r3, [pc, #564]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d05b      	beq.n	8001830 <HAL_RCC_OscConfig+0x108>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d157      	bne.n	8001830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e2e1      	b.n	8001d48 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178c:	d106      	bne.n	800179c <HAL_RCC_OscConfig+0x74>
 800178e:	4b85      	ldr	r3, [pc, #532]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a84      	ldr	r2, [pc, #528]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e01d      	b.n	80017d8 <HAL_RCC_OscConfig+0xb0>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x98>
 80017a6:	4b7f      	ldr	r3, [pc, #508]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a7e      	ldr	r2, [pc, #504]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80017ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b7c      	ldr	r3, [pc, #496]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a7b      	ldr	r2, [pc, #492]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e00b      	b.n	80017d8 <HAL_RCC_OscConfig+0xb0>
 80017c0:	4b78      	ldr	r3, [pc, #480]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a77      	ldr	r2, [pc, #476]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80017c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b75      	ldr	r3, [pc, #468]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a74      	ldr	r2, [pc, #464]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80017d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d013      	beq.n	8001808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fc42 	bl	8001068 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff fc3e 	bl	8001068 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	; 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e2a6      	b.n	8001d48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017fa:	4b6a      	ldr	r3, [pc, #424]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0xc0>
 8001806:	e014      	b.n	8001832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff fc2e 	bl	8001068 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001810:	f7ff fc2a 	bl	8001068 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b64      	cmp	r3, #100	; 0x64
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e292      	b.n	8001d48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001822:	4b60      	ldr	r3, [pc, #384]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0xe8>
 800182e:	e000      	b.n	8001832 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d075      	beq.n	800192a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800183e:	4b59      	ldr	r3, [pc, #356]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001848:	4b56      	ldr	r3, [pc, #344]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	2b0c      	cmp	r3, #12
 8001856:	d102      	bne.n	800185e <HAL_RCC_OscConfig+0x136>
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d002      	beq.n	8001864 <HAL_RCC_OscConfig+0x13c>
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	2b04      	cmp	r3, #4
 8001862:	d11f      	bne.n	80018a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001864:	4b4f      	ldr	r3, [pc, #316]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_RCC_OscConfig+0x154>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e265      	b.n	8001d48 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187c:	4b49      	ldr	r3, [pc, #292]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	061b      	lsls	r3, r3, #24
 800188a:	4946      	ldr	r1, [pc, #280]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001890:	4b45      	ldr	r3, [pc, #276]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fb9b 	bl	8000fd0 <HAL_InitTick>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d043      	beq.n	8001928 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e251      	b.n	8001d48 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d023      	beq.n	80018f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ac:	4b3d      	ldr	r3, [pc, #244]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a3c      	ldr	r2, [pc, #240]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80018b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff fbd6 	bl	8001068 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c0:	f7ff fbd2 	bl	8001068 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e23a      	b.n	8001d48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018d2:	4b34      	ldr	r3, [pc, #208]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018de:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	061b      	lsls	r3, r3, #24
 80018ec:	492d      	ldr	r1, [pc, #180]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
 80018f2:	e01a      	b.n	800192a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f4:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a2a      	ldr	r2, [pc, #168]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80018fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff fbb2 	bl	8001068 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001908:	f7ff fbae 	bl	8001068 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e216      	b.n	8001d48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800191a:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x1e0>
 8001926:	e000      	b.n	800192a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001928:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d041      	beq.n	80019ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d01c      	beq.n	8001978 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800193e:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 8001940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001944:	4a17      	ldr	r2, [pc, #92]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194e:	f7ff fb8b 	bl	8001068 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001956:	f7ff fb87 	bl	8001068 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e1ef      	b.n	8001d48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001968:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 800196a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0ef      	beq.n	8001956 <HAL_RCC_OscConfig+0x22e>
 8001976:	e020      	b.n	80019ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 800197a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800197e:	4a09      	ldr	r2, [pc, #36]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 8001980:	f023 0301 	bic.w	r3, r3, #1
 8001984:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001988:	f7ff fb6e 	bl	8001068 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800198e:	e00d      	b.n	80019ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001990:	f7ff fb6a 	bl	8001068 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d906      	bls.n	80019ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e1d2      	b.n	8001d48 <HAL_RCC_OscConfig+0x620>
 80019a2:	bf00      	nop
 80019a4:	40021000 	.word	0x40021000
 80019a8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019ac:	4b8c      	ldr	r3, [pc, #560]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 80019ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1ea      	bne.n	8001990 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 80a6 	beq.w	8001b14 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c8:	2300      	movs	r3, #0
 80019ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019cc:	4b84      	ldr	r3, [pc, #528]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 80019ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_OscConfig+0x2b4>
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <HAL_RCC_OscConfig+0x2b6>
 80019dc:	2300      	movs	r3, #0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00d      	beq.n	80019fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	4b7f      	ldr	r3, [pc, #508]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 80019e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e6:	4a7e      	ldr	r2, [pc, #504]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	6593      	str	r3, [r2, #88]	; 0x58
 80019ee:	4b7c      	ldr	r3, [pc, #496]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 80019f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019fa:	2301      	movs	r3, #1
 80019fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019fe:	4b79      	ldr	r3, [pc, #484]	; (8001be4 <HAL_RCC_OscConfig+0x4bc>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d118      	bne.n	8001a3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a0a:	4b76      	ldr	r3, [pc, #472]	; (8001be4 <HAL_RCC_OscConfig+0x4bc>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a75      	ldr	r2, [pc, #468]	; (8001be4 <HAL_RCC_OscConfig+0x4bc>)
 8001a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a16:	f7ff fb27 	bl	8001068 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a1e:	f7ff fb23 	bl	8001068 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e18b      	b.n	8001d48 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a30:	4b6c      	ldr	r3, [pc, #432]	; (8001be4 <HAL_RCC_OscConfig+0x4bc>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d108      	bne.n	8001a56 <HAL_RCC_OscConfig+0x32e>
 8001a44:	4b66      	ldr	r3, [pc, #408]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4a:	4a65      	ldr	r2, [pc, #404]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a54:	e024      	b.n	8001aa0 <HAL_RCC_OscConfig+0x378>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b05      	cmp	r3, #5
 8001a5c:	d110      	bne.n	8001a80 <HAL_RCC_OscConfig+0x358>
 8001a5e:	4b60      	ldr	r3, [pc, #384]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a64:	4a5e      	ldr	r2, [pc, #376]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001a66:	f043 0304 	orr.w	r3, r3, #4
 8001a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a6e:	4b5c      	ldr	r3, [pc, #368]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a74:	4a5a      	ldr	r2, [pc, #360]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a7e:	e00f      	b.n	8001aa0 <HAL_RCC_OscConfig+0x378>
 8001a80:	4b57      	ldr	r3, [pc, #348]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a86:	4a56      	ldr	r2, [pc, #344]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001a88:	f023 0301 	bic.w	r3, r3, #1
 8001a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a90:	4b53      	ldr	r3, [pc, #332]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a96:	4a52      	ldr	r2, [pc, #328]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001a98:	f023 0304 	bic.w	r3, r3, #4
 8001a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d016      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa8:	f7ff fade 	bl	8001068 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aae:	e00a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab0:	f7ff fada 	bl	8001068 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e140      	b.n	8001d48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ac6:	4b46      	ldr	r3, [pc, #280]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0ed      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x388>
 8001ad4:	e015      	b.n	8001b02 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad6:	f7ff fac7 	bl	8001068 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001adc:	e00a      	b.n	8001af4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ade:	f7ff fac3 	bl	8001068 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e129      	b.n	8001d48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001af4:	4b3a      	ldr	r3, [pc, #232]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1ed      	bne.n	8001ade <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b02:	7ffb      	ldrb	r3, [r7, #31]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d105      	bne.n	8001b14 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b08:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0c:	4a34      	ldr	r2, [pc, #208]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0320 	and.w	r3, r3, #32
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d03c      	beq.n	8001b9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d01c      	beq.n	8001b62 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b28:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001b2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b2e:	4a2c      	ldr	r2, [pc, #176]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b38:	f7ff fa96 	bl	8001068 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b40:	f7ff fa92 	bl	8001068 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e0fa      	b.n	8001d48 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b52:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0ef      	beq.n	8001b40 <HAL_RCC_OscConfig+0x418>
 8001b60:	e01b      	b.n	8001b9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b62:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001b64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b68:	4a1d      	ldr	r2, [pc, #116]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fa79 	bl	8001068 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b7a:	f7ff fa75 	bl	8001068 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e0dd      	b.n	8001d48 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001b8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1ef      	bne.n	8001b7a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 80d1 	beq.w	8001d46 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	2b0c      	cmp	r3, #12
 8001bae:	f000 808b 	beq.w	8001cc8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d15e      	bne.n	8001c78 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001bc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc6:	f7ff fa4f 	bl	8001068 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bcc:	e00c      	b.n	8001be8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bce:	f7ff fa4b 	bl	8001068 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d905      	bls.n	8001be8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e0b3      	b.n	8001d48 <HAL_RCC_OscConfig+0x620>
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be8:	4b59      	ldr	r3, [pc, #356]	; (8001d50 <HAL_RCC_OscConfig+0x628>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1ec      	bne.n	8001bce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bf4:	4b56      	ldr	r3, [pc, #344]	; (8001d50 <HAL_RCC_OscConfig+0x628>)
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	4b56      	ldr	r3, [pc, #344]	; (8001d54 <HAL_RCC_OscConfig+0x62c>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6a11      	ldr	r1, [r2, #32]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c04:	3a01      	subs	r2, #1
 8001c06:	0112      	lsls	r2, r2, #4
 8001c08:	4311      	orrs	r1, r2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c0e:	0212      	lsls	r2, r2, #8
 8001c10:	4311      	orrs	r1, r2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c16:	0852      	lsrs	r2, r2, #1
 8001c18:	3a01      	subs	r2, #1
 8001c1a:	0552      	lsls	r2, r2, #21
 8001c1c:	4311      	orrs	r1, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c22:	0852      	lsrs	r2, r2, #1
 8001c24:	3a01      	subs	r2, #1
 8001c26:	0652      	lsls	r2, r2, #25
 8001c28:	4311      	orrs	r1, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c2e:	06d2      	lsls	r2, r2, #27
 8001c30:	430a      	orrs	r2, r1
 8001c32:	4947      	ldr	r1, [pc, #284]	; (8001d50 <HAL_RCC_OscConfig+0x628>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c38:	4b45      	ldr	r3, [pc, #276]	; (8001d50 <HAL_RCC_OscConfig+0x628>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a44      	ldr	r2, [pc, #272]	; (8001d50 <HAL_RCC_OscConfig+0x628>)
 8001c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c42:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c44:	4b42      	ldr	r3, [pc, #264]	; (8001d50 <HAL_RCC_OscConfig+0x628>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4a41      	ldr	r2, [pc, #260]	; (8001d50 <HAL_RCC_OscConfig+0x628>)
 8001c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7ff fa0a 	bl	8001068 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c58:	f7ff fa06 	bl	8001068 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e06e      	b.n	8001d48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6a:	4b39      	ldr	r3, [pc, #228]	; (8001d50 <HAL_RCC_OscConfig+0x628>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0x530>
 8001c76:	e066      	b.n	8001d46 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c78:	4b35      	ldr	r3, [pc, #212]	; (8001d50 <HAL_RCC_OscConfig+0x628>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a34      	ldr	r2, [pc, #208]	; (8001d50 <HAL_RCC_OscConfig+0x628>)
 8001c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c82:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c84:	4b32      	ldr	r3, [pc, #200]	; (8001d50 <HAL_RCC_OscConfig+0x628>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	4a31      	ldr	r2, [pc, #196]	; (8001d50 <HAL_RCC_OscConfig+0x628>)
 8001c8a:	f023 0303 	bic.w	r3, r3, #3
 8001c8e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c90:	4b2f      	ldr	r3, [pc, #188]	; (8001d50 <HAL_RCC_OscConfig+0x628>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	4a2e      	ldr	r2, [pc, #184]	; (8001d50 <HAL_RCC_OscConfig+0x628>)
 8001c96:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff f9e2 	bl	8001068 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7ff f9de 	bl	8001068 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e046      	b.n	8001d48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cba:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <HAL_RCC_OscConfig+0x628>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x580>
 8001cc6:	e03e      	b.n	8001d46 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e039      	b.n	8001d48 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <HAL_RCC_OscConfig+0x628>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f003 0203 	and.w	r2, r3, #3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d12c      	bne.n	8001d42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d123      	bne.n	8001d42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d04:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d11b      	bne.n	8001d42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d113      	bne.n	8001d42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	085b      	lsrs	r3, r3, #1
 8001d26:	3b01      	subs	r3, #1
 8001d28:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d109      	bne.n	8001d42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d38:	085b      	lsrs	r3, r3, #1
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3720      	adds	r7, #32
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	019f800c 	.word	0x019f800c

08001d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e11e      	b.n	8001fae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d70:	4b91      	ldr	r3, [pc, #580]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 030f 	and.w	r3, r3, #15
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d910      	bls.n	8001da0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7e:	4b8e      	ldr	r3, [pc, #568]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 020f 	bic.w	r2, r3, #15
 8001d86:	498c      	ldr	r1, [pc, #560]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8e:	4b8a      	ldr	r3, [pc, #552]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e106      	b.n	8001fae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d073      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d129      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db4:	4b81      	ldr	r3, [pc, #516]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0f4      	b.n	8001fae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001dc4:	f000 f99e 	bl	8002104 <RCC_GetSysClockFreqFromPLLSource>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4a7c      	ldr	r2, [pc, #496]	; (8001fc0 <HAL_RCC_ClockConfig+0x268>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d93f      	bls.n	8001e52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001dd2:	4b7a      	ldr	r3, [pc, #488]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d009      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d033      	beq.n	8001e52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d12f      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001df2:	4b72      	ldr	r3, [pc, #456]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dfa:	4a70      	ldr	r2, [pc, #448]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	e024      	b.n	8001e52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d107      	bne.n	8001e20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e10:	4b6a      	ldr	r3, [pc, #424]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d109      	bne.n	8001e30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0c6      	b.n	8001fae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e20:	4b66      	ldr	r3, [pc, #408]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0be      	b.n	8001fae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001e30:	f000 f8ce 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8001e34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4a61      	ldr	r2, [pc, #388]	; (8001fc0 <HAL_RCC_ClockConfig+0x268>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d909      	bls.n	8001e52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e3e:	4b5f      	ldr	r3, [pc, #380]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e46:	4a5d      	ldr	r2, [pc, #372]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e52:	4b5a      	ldr	r3, [pc, #360]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f023 0203 	bic.w	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	4957      	ldr	r1, [pc, #348]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e64:	f7ff f900 	bl	8001068 <HAL_GetTick>
 8001e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	e00a      	b.n	8001e82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6c:	f7ff f8fc 	bl	8001068 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e095      	b.n	8001fae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	4b4e      	ldr	r3, [pc, #312]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 020c 	and.w	r2, r3, #12
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d1eb      	bne.n	8001e6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d023      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eac:	4b43      	ldr	r3, [pc, #268]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	4a42      	ldr	r2, [pc, #264]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001eb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eb6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d007      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ec4:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001ecc:	4a3b      	ldr	r2, [pc, #236]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001ece:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ed2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed4:	4b39      	ldr	r3, [pc, #228]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	4936      	ldr	r1, [pc, #216]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	608b      	str	r3, [r1, #8]
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2b80      	cmp	r3, #128	; 0x80
 8001eec:	d105      	bne.n	8001efa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001eee:	4b33      	ldr	r3, [pc, #204]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	4a32      	ldr	r2, [pc, #200]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001ef4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ef8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001efa:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d21d      	bcs.n	8001f44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f08:	4b2b      	ldr	r3, [pc, #172]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f023 020f 	bic.w	r2, r3, #15
 8001f10:	4929      	ldr	r1, [pc, #164]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f18:	f7ff f8a6 	bl	8001068 <HAL_GetTick>
 8001f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	e00a      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f20:	f7ff f8a2 	bl	8001068 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e03b      	b.n	8001fae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_RCC_ClockConfig+0x260>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d1ed      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f50:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	4917      	ldr	r1, [pc, #92]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d009      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	490f      	ldr	r1, [pc, #60]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f82:	f000 f825 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8001f86:	4602      	mov	r2, r0
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <HAL_RCC_ClockConfig+0x264>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	490c      	ldr	r1, [pc, #48]	; (8001fc4 <HAL_RCC_ClockConfig+0x26c>)
 8001f94:	5ccb      	ldrb	r3, [r1, r3]
 8001f96:	f003 031f 	and.w	r3, r3, #31
 8001f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <HAL_RCC_ClockConfig+0x270>)
 8001fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_RCC_ClockConfig+0x274>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff f812 	bl	8000fd0 <HAL_InitTick>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40022000 	.word	0x40022000
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	04c4b400 	.word	0x04c4b400
 8001fc4:	0800539c 	.word	0x0800539c
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	20000004 	.word	0x20000004

08001fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001fd6:	4b2c      	ldr	r3, [pc, #176]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d102      	bne.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fe2:	4b2a      	ldr	r3, [pc, #168]	; (800208c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	e047      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001fe8:	4b27      	ldr	r3, [pc, #156]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 030c 	and.w	r3, r3, #12
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d102      	bne.n	8001ffa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ff4:	4b26      	ldr	r3, [pc, #152]	; (8002090 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	e03e      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ffa:	4b23      	ldr	r3, [pc, #140]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b0c      	cmp	r3, #12
 8002004:	d136      	bne.n	8002074 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002006:	4b20      	ldr	r3, [pc, #128]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002010:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3301      	adds	r3, #1
 800201c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2b03      	cmp	r3, #3
 8002022:	d10c      	bne.n	800203e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002024:	4a1a      	ldr	r2, [pc, #104]	; (8002090 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	fbb2 f3f3 	udiv	r3, r2, r3
 800202c:	4a16      	ldr	r2, [pc, #88]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb8>)
 800202e:	68d2      	ldr	r2, [r2, #12]
 8002030:	0a12      	lsrs	r2, r2, #8
 8002032:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002036:	fb02 f303 	mul.w	r3, r2, r3
 800203a:	617b      	str	r3, [r7, #20]
      break;
 800203c:	e00c      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800203e:	4a13      	ldr	r2, [pc, #76]	; (800208c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	fbb2 f3f3 	udiv	r3, r2, r3
 8002046:	4a10      	ldr	r2, [pc, #64]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002048:	68d2      	ldr	r2, [r2, #12]
 800204a:	0a12      	lsrs	r2, r2, #8
 800204c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002050:	fb02 f303 	mul.w	r3, r2, r3
 8002054:	617b      	str	r3, [r7, #20]
      break;
 8002056:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb8>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	0e5b      	lsrs	r3, r3, #25
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	3301      	adds	r3, #1
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	e001      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002078:	693b      	ldr	r3, [r7, #16]
}
 800207a:	4618      	mov	r0, r3
 800207c:	371c      	adds	r7, #28
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	00f42400 	.word	0x00f42400
 8002090:	016e3600 	.word	0x016e3600

08002094 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000000 	.word	0x20000000

080020ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020b0:	f7ff fff0 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020b4:	4602      	mov	r2, r0
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	4904      	ldr	r1, [pc, #16]	; (80020d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020c2:	5ccb      	ldrb	r3, [r1, r3]
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	080053ac 	.word	0x080053ac

080020d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020dc:	f7ff ffda 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	0adb      	lsrs	r3, r3, #11
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	4904      	ldr	r1, [pc, #16]	; (8002100 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ee:	5ccb      	ldrb	r3, [r1, r3]
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	080053ac 	.word	0x080053ac

08002104 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800210a:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002114:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	3301      	adds	r3, #1
 8002120:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d10c      	bne.n	8002142 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002128:	4a17      	ldr	r2, [pc, #92]	; (8002188 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002130:	4a14      	ldr	r2, [pc, #80]	; (8002184 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002132:	68d2      	ldr	r2, [r2, #12]
 8002134:	0a12      	lsrs	r2, r2, #8
 8002136:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	617b      	str	r3, [r7, #20]
    break;
 8002140:	e00c      	b.n	800215c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002142:	4a12      	ldr	r2, [pc, #72]	; (800218c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	fbb2 f3f3 	udiv	r3, r2, r3
 800214a:	4a0e      	ldr	r2, [pc, #56]	; (8002184 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800214c:	68d2      	ldr	r2, [r2, #12]
 800214e:	0a12      	lsrs	r2, r2, #8
 8002150:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002154:	fb02 f303 	mul.w	r3, r2, r3
 8002158:	617b      	str	r3, [r7, #20]
    break;
 800215a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	0e5b      	lsrs	r3, r3, #25
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	3301      	adds	r3, #1
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	fbb2 f3f3 	udiv	r3, r2, r3
 8002174:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002176:	687b      	ldr	r3, [r7, #4]
}
 8002178:	4618      	mov	r0, r3
 800217a:	371c      	adds	r7, #28
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	40021000 	.word	0x40021000
 8002188:	016e3600 	.word	0x016e3600
 800218c:	00f42400 	.word	0x00f42400

08002190 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002198:	2300      	movs	r3, #0
 800219a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800219c:	2300      	movs	r3, #0
 800219e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 8098 	beq.w	80022de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b2:	4b43      	ldr	r3, [pc, #268]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10d      	bne.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	4b40      	ldr	r3, [pc, #256]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	4a3f      	ldr	r2, [pc, #252]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c8:	6593      	str	r3, [r2, #88]	; 0x58
 80021ca:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d6:	2301      	movs	r3, #1
 80021d8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021da:	4b3a      	ldr	r3, [pc, #232]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a39      	ldr	r2, [pc, #228]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021e6:	f7fe ff3f 	bl	8001068 <HAL_GetTick>
 80021ea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021ec:	e009      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ee:	f7fe ff3b 	bl	8001068 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d902      	bls.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	74fb      	strb	r3, [r7, #19]
        break;
 8002200:	e005      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002202:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0ef      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800220e:	7cfb      	ldrb	r3, [r7, #19]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d159      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002214:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800221e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d01e      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	429a      	cmp	r2, r3
 800222e:	d019      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002230:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800223a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800223c:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800223e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002242:	4a1f      	ldr	r2, [pc, #124]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800224c:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800224e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002252:	4a1b      	ldr	r2, [pc, #108]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800225c:	4a18      	ldr	r2, [pc, #96]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d016      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226e:	f7fe fefb 	bl	8001068 <HAL_GetTick>
 8002272:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002274:	e00b      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002276:	f7fe fef7 	bl	8001068 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	f241 3288 	movw	r2, #5000	; 0x1388
 8002284:	4293      	cmp	r3, r2
 8002286:	d902      	bls.n	800228e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	74fb      	strb	r3, [r7, #19]
            break;
 800228c:	e006      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800228e:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0ec      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800229c:	7cfb      	ldrb	r3, [r7, #19]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10b      	bne.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	4903      	ldr	r1, [pc, #12]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022b8:	e008      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022ba:	7cfb      	ldrb	r3, [r7, #19]
 80022bc:	74bb      	strb	r3, [r7, #18]
 80022be:	e005      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022c8:	7cfb      	ldrb	r3, [r7, #19]
 80022ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022cc:	7c7b      	ldrb	r3, [r7, #17]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d105      	bne.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d2:	4ba6      	ldr	r3, [pc, #664]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	4aa5      	ldr	r2, [pc, #660]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00a      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022ea:	4ba0      	ldr	r3, [pc, #640]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f0:	f023 0203 	bic.w	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	499c      	ldr	r1, [pc, #624]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00a      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800230c:	4b97      	ldr	r3, [pc, #604]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002312:	f023 020c 	bic.w	r2, r3, #12
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	4994      	ldr	r1, [pc, #592]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800232e:	4b8f      	ldr	r3, [pc, #572]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002334:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	498b      	ldr	r1, [pc, #556]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00a      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002350:	4b86      	ldr	r3, [pc, #536]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002356:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	4983      	ldr	r1, [pc, #524]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00a      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002372:	4b7e      	ldr	r3, [pc, #504]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002378:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	497a      	ldr	r1, [pc, #488]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002382:	4313      	orrs	r3, r2
 8002384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00a      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002394:	4b75      	ldr	r3, [pc, #468]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	4972      	ldr	r1, [pc, #456]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00a      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023b6:	4b6d      	ldr	r3, [pc, #436]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	4969      	ldr	r1, [pc, #420]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00a      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023d8:	4b64      	ldr	r3, [pc, #400]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4961      	ldr	r1, [pc, #388]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023fa:	4b5c      	ldr	r3, [pc, #368]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002400:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	4958      	ldr	r1, [pc, #352]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002418:	2b00      	cmp	r3, #0
 800241a:	d015      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800241c:	4b53      	ldr	r3, [pc, #332]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002422:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	4950      	ldr	r1, [pc, #320]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800243a:	d105      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800243c:	4b4b      	ldr	r3, [pc, #300]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4a4a      	ldr	r2, [pc, #296]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002446:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002450:	2b00      	cmp	r3, #0
 8002452:	d015      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002454:	4b45      	ldr	r3, [pc, #276]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	4942      	ldr	r1, [pc, #264]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002472:	d105      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002474:	4b3d      	ldr	r3, [pc, #244]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4a3c      	ldr	r2, [pc, #240]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800247e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d015      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800248c:	4b37      	ldr	r3, [pc, #220]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4934      	ldr	r1, [pc, #208]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024aa:	d105      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ac:	4b2f      	ldr	r3, [pc, #188]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	4a2e      	ldr	r2, [pc, #184]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d015      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024c4:	4b29      	ldr	r3, [pc, #164]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d2:	4926      	ldr	r1, [pc, #152]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024e2:	d105      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024e4:	4b21      	ldr	r3, [pc, #132]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4a20      	ldr	r2, [pc, #128]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d015      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024fc:	4b1b      	ldr	r3, [pc, #108]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002502:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250a:	4918      	ldr	r1, [pc, #96]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002516:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800251a:	d105      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800251c:	4b13      	ldr	r3, [pc, #76]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4a12      	ldr	r2, [pc, #72]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002526:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d015      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002534:	4b0d      	ldr	r3, [pc, #52]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002542:	490a      	ldr	r1, [pc, #40]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002552:	d105      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	4a04      	ldr	r2, [pc, #16]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800255a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002560:	7cbb      	ldrb	r3, [r7, #18]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40021000 	.word	0x40021000

08002570 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b01      	cmp	r3, #1
 8002582:	d001      	beq.n	8002588 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e042      	b.n	800260e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a21      	ldr	r2, [pc, #132]	; (800261c <HAL_TIM_Base_Start+0xac>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d018      	beq.n	80025cc <HAL_TIM_Base_Start+0x5c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a2:	d013      	beq.n	80025cc <HAL_TIM_Base_Start+0x5c>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1d      	ldr	r2, [pc, #116]	; (8002620 <HAL_TIM_Base_Start+0xb0>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00e      	beq.n	80025cc <HAL_TIM_Base_Start+0x5c>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a1c      	ldr	r2, [pc, #112]	; (8002624 <HAL_TIM_Base_Start+0xb4>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d009      	beq.n	80025cc <HAL_TIM_Base_Start+0x5c>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a1a      	ldr	r2, [pc, #104]	; (8002628 <HAL_TIM_Base_Start+0xb8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d004      	beq.n	80025cc <HAL_TIM_Base_Start+0x5c>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a19      	ldr	r2, [pc, #100]	; (800262c <HAL_TIM_Base_Start+0xbc>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d115      	bne.n	80025f8 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	4b17      	ldr	r3, [pc, #92]	; (8002630 <HAL_TIM_Base_Start+0xc0>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b06      	cmp	r3, #6
 80025dc:	d015      	beq.n	800260a <HAL_TIM_Base_Start+0x9a>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e4:	d011      	beq.n	800260a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 0201 	orr.w	r2, r2, #1
 80025f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f6:	e008      	b.n	800260a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	e000      	b.n	800260c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800260a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40012c00 	.word	0x40012c00
 8002620:	40000400 	.word	0x40000400
 8002624:	40000800 	.word	0x40000800
 8002628:	40013400 	.word	0x40013400
 800262c:	40014000 	.word	0x40014000
 8002630:	00010007 	.word	0x00010007

08002634 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e049      	b.n	80026da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7fe fb3c 	bl	8000cd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3304      	adds	r3, #4
 8002670:	4619      	mov	r1, r3
 8002672:	4610      	mov	r0, r2
 8002674:	f000 fc14 	bl	8002ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d109      	bne.n	8002708 <HAL_TIM_PWM_Start+0x24>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	bf14      	ite	ne
 8002700:	2301      	movne	r3, #1
 8002702:	2300      	moveq	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	e03c      	b.n	8002782 <HAL_TIM_PWM_Start+0x9e>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2b04      	cmp	r3, #4
 800270c:	d109      	bne.n	8002722 <HAL_TIM_PWM_Start+0x3e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b01      	cmp	r3, #1
 8002718:	bf14      	ite	ne
 800271a:	2301      	movne	r3, #1
 800271c:	2300      	moveq	r3, #0
 800271e:	b2db      	uxtb	r3, r3
 8002720:	e02f      	b.n	8002782 <HAL_TIM_PWM_Start+0x9e>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b08      	cmp	r3, #8
 8002726:	d109      	bne.n	800273c <HAL_TIM_PWM_Start+0x58>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b01      	cmp	r3, #1
 8002732:	bf14      	ite	ne
 8002734:	2301      	movne	r3, #1
 8002736:	2300      	moveq	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	e022      	b.n	8002782 <HAL_TIM_PWM_Start+0x9e>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b0c      	cmp	r3, #12
 8002740:	d109      	bne.n	8002756 <HAL_TIM_PWM_Start+0x72>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b01      	cmp	r3, #1
 800274c:	bf14      	ite	ne
 800274e:	2301      	movne	r3, #1
 8002750:	2300      	moveq	r3, #0
 8002752:	b2db      	uxtb	r3, r3
 8002754:	e015      	b.n	8002782 <HAL_TIM_PWM_Start+0x9e>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b10      	cmp	r3, #16
 800275a:	d109      	bne.n	8002770 <HAL_TIM_PWM_Start+0x8c>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b01      	cmp	r3, #1
 8002766:	bf14      	ite	ne
 8002768:	2301      	movne	r3, #1
 800276a:	2300      	moveq	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	e008      	b.n	8002782 <HAL_TIM_PWM_Start+0x9e>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	bf14      	ite	ne
 800277c:	2301      	movne	r3, #1
 800277e:	2300      	moveq	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e097      	b.n	80028ba <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d104      	bne.n	800279a <HAL_TIM_PWM_Start+0xb6>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002798:	e023      	b.n	80027e2 <HAL_TIM_PWM_Start+0xfe>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b04      	cmp	r3, #4
 800279e:	d104      	bne.n	80027aa <HAL_TIM_PWM_Start+0xc6>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027a8:	e01b      	b.n	80027e2 <HAL_TIM_PWM_Start+0xfe>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d104      	bne.n	80027ba <HAL_TIM_PWM_Start+0xd6>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027b8:	e013      	b.n	80027e2 <HAL_TIM_PWM_Start+0xfe>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b0c      	cmp	r3, #12
 80027be:	d104      	bne.n	80027ca <HAL_TIM_PWM_Start+0xe6>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027c8:	e00b      	b.n	80027e2 <HAL_TIM_PWM_Start+0xfe>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	d104      	bne.n	80027da <HAL_TIM_PWM_Start+0xf6>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027d8:	e003      	b.n	80027e2 <HAL_TIM_PWM_Start+0xfe>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2202      	movs	r2, #2
 80027de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2201      	movs	r2, #1
 80027e8:	6839      	ldr	r1, [r7, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fede 	bl	80035ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a33      	ldr	r2, [pc, #204]	; (80028c4 <HAL_TIM_PWM_Start+0x1e0>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d013      	beq.n	8002822 <HAL_TIM_PWM_Start+0x13e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a32      	ldr	r2, [pc, #200]	; (80028c8 <HAL_TIM_PWM_Start+0x1e4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d00e      	beq.n	8002822 <HAL_TIM_PWM_Start+0x13e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a30      	ldr	r2, [pc, #192]	; (80028cc <HAL_TIM_PWM_Start+0x1e8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d009      	beq.n	8002822 <HAL_TIM_PWM_Start+0x13e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a2f      	ldr	r2, [pc, #188]	; (80028d0 <HAL_TIM_PWM_Start+0x1ec>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d004      	beq.n	8002822 <HAL_TIM_PWM_Start+0x13e>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a2d      	ldr	r2, [pc, #180]	; (80028d4 <HAL_TIM_PWM_Start+0x1f0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d101      	bne.n	8002826 <HAL_TIM_PWM_Start+0x142>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <HAL_TIM_PWM_Start+0x144>
 8002826:	2300      	movs	r3, #0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d007      	beq.n	800283c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800283a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a20      	ldr	r2, [pc, #128]	; (80028c4 <HAL_TIM_PWM_Start+0x1e0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d018      	beq.n	8002878 <HAL_TIM_PWM_Start+0x194>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284e:	d013      	beq.n	8002878 <HAL_TIM_PWM_Start+0x194>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a20      	ldr	r2, [pc, #128]	; (80028d8 <HAL_TIM_PWM_Start+0x1f4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00e      	beq.n	8002878 <HAL_TIM_PWM_Start+0x194>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1f      	ldr	r2, [pc, #124]	; (80028dc <HAL_TIM_PWM_Start+0x1f8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d009      	beq.n	8002878 <HAL_TIM_PWM_Start+0x194>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a17      	ldr	r2, [pc, #92]	; (80028c8 <HAL_TIM_PWM_Start+0x1e4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d004      	beq.n	8002878 <HAL_TIM_PWM_Start+0x194>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a16      	ldr	r2, [pc, #88]	; (80028cc <HAL_TIM_PWM_Start+0x1e8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d115      	bne.n	80028a4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <HAL_TIM_PWM_Start+0x1fc>)
 8002880:	4013      	ands	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b06      	cmp	r3, #6
 8002888:	d015      	beq.n	80028b6 <HAL_TIM_PWM_Start+0x1d2>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002890:	d011      	beq.n	80028b6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0201 	orr.w	r2, r2, #1
 80028a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a2:	e008      	b.n	80028b6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	e000      	b.n	80028b8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40012c00 	.word	0x40012c00
 80028c8:	40013400 	.word	0x40013400
 80028cc:	40014000 	.word	0x40014000
 80028d0:	40014400 	.word	0x40014400
 80028d4:	40014800 	.word	0x40014800
 80028d8:	40000400 	.word	0x40000400
 80028dc:	40000800 	.word	0x40000800
 80028e0:	00010007 	.word	0x00010007

080028e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2200      	movs	r2, #0
 80028f4:	6839      	ldr	r1, [r7, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 fe58 	bl	80035ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a3e      	ldr	r2, [pc, #248]	; (80029fc <HAL_TIM_PWM_Stop+0x118>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_TIM_PWM_Stop+0x4a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a3d      	ldr	r2, [pc, #244]	; (8002a00 <HAL_TIM_PWM_Stop+0x11c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00e      	beq.n	800292e <HAL_TIM_PWM_Stop+0x4a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a3b      	ldr	r2, [pc, #236]	; (8002a04 <HAL_TIM_PWM_Stop+0x120>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d009      	beq.n	800292e <HAL_TIM_PWM_Stop+0x4a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a3a      	ldr	r2, [pc, #232]	; (8002a08 <HAL_TIM_PWM_Stop+0x124>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d004      	beq.n	800292e <HAL_TIM_PWM_Stop+0x4a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a38      	ldr	r2, [pc, #224]	; (8002a0c <HAL_TIM_PWM_Stop+0x128>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d101      	bne.n	8002932 <HAL_TIM_PWM_Stop+0x4e>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <HAL_TIM_PWM_Stop+0x50>
 8002932:	2300      	movs	r3, #0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d017      	beq.n	8002968 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6a1a      	ldr	r2, [r3, #32]
 800293e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10f      	bne.n	8002968 <HAL_TIM_PWM_Stop+0x84>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6a1a      	ldr	r2, [r3, #32]
 800294e:	f244 4344 	movw	r3, #17476	; 0x4444
 8002952:	4013      	ands	r3, r2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d107      	bne.n	8002968 <HAL_TIM_PWM_Stop+0x84>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002966:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6a1a      	ldr	r2, [r3, #32]
 800296e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10f      	bne.n	8002998 <HAL_TIM_PWM_Stop+0xb4>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6a1a      	ldr	r2, [r3, #32]
 800297e:	f244 4344 	movw	r3, #17476	; 0x4444
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d107      	bne.n	8002998 <HAL_TIM_PWM_Stop+0xb4>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0201 	bic.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d104      	bne.n	80029a8 <HAL_TIM_PWM_Stop+0xc4>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029a6:	e023      	b.n	80029f0 <HAL_TIM_PWM_Stop+0x10c>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d104      	bne.n	80029b8 <HAL_TIM_PWM_Stop+0xd4>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029b6:	e01b      	b.n	80029f0 <HAL_TIM_PWM_Stop+0x10c>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d104      	bne.n	80029c8 <HAL_TIM_PWM_Stop+0xe4>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029c6:	e013      	b.n	80029f0 <HAL_TIM_PWM_Stop+0x10c>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	2b0c      	cmp	r3, #12
 80029cc:	d104      	bne.n	80029d8 <HAL_TIM_PWM_Stop+0xf4>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029d6:	e00b      	b.n	80029f0 <HAL_TIM_PWM_Stop+0x10c>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	2b10      	cmp	r3, #16
 80029dc:	d104      	bne.n	80029e8 <HAL_TIM_PWM_Stop+0x104>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029e6:	e003      	b.n	80029f0 <HAL_TIM_PWM_Stop+0x10c>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40012c00 	.word	0x40012c00
 8002a00:	40013400 	.word	0x40013400
 8002a04:	40014000 	.word	0x40014000
 8002a08:	40014400 	.word	0x40014400
 8002a0c:	40014800 	.word	0x40014800

08002a10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e097      	b.n	8002b54 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d106      	bne.n	8002a3e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7fe f96d 	bl	8000d18 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2202      	movs	r2, #2
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002a54:	f023 0307 	bic.w	r3, r3, #7
 8002a58:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3304      	adds	r3, #4
 8002a62:	4619      	mov	r1, r3
 8002a64:	4610      	mov	r0, r2
 8002a66:	f000 fa1b 	bl	8002ea0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a92:	f023 0303 	bic.w	r3, r3, #3
 8002a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002ab0:	f023 030c 	bic.w	r3, r3, #12
 8002ab4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002abc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ac0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	021b      	lsls	r3, r3, #8
 8002acc:	4313      	orrs	r3, r2
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	011a      	lsls	r2, r3, #4
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	031b      	lsls	r3, r3, #12
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002aee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002af6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	4313      	orrs	r3, r2
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b6c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b74:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b7c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b84:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d110      	bne.n	8002bae <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d102      	bne.n	8002b98 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b92:	7b7b      	ldrb	r3, [r7, #13]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d001      	beq.n	8002b9c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e069      	b.n	8002c70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bac:	e031      	b.n	8002c12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d110      	bne.n	8002bd6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002bb4:	7bbb      	ldrb	r3, [r7, #14]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d102      	bne.n	8002bc0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002bba:	7b3b      	ldrb	r3, [r7, #12]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d001      	beq.n	8002bc4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e055      	b.n	8002c70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bd4:	e01d      	b.n	8002c12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d108      	bne.n	8002bee <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002bdc:	7bbb      	ldrb	r3, [r7, #14]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d105      	bne.n	8002bee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002be2:	7b7b      	ldrb	r3, [r7, #13]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d102      	bne.n	8002bee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002be8:	7b3b      	ldrb	r3, [r7, #12]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d001      	beq.n	8002bf2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e03e      	b.n	8002c70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_TIM_Encoder_Start+0xc4>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d008      	beq.n	8002c30 <HAL_TIM_Encoder_Start+0xd4>
 8002c1e:	e00f      	b.n	8002c40 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2201      	movs	r2, #1
 8002c26:	2100      	movs	r1, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 fcbf 	bl	80035ac <TIM_CCxChannelCmd>
      break;
 8002c2e:	e016      	b.n	8002c5e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2201      	movs	r2, #1
 8002c36:	2104      	movs	r1, #4
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fcb7 	bl	80035ac <TIM_CCxChannelCmd>
      break;
 8002c3e:	e00e      	b.n	8002c5e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2201      	movs	r2, #1
 8002c46:	2100      	movs	r1, #0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 fcaf 	bl	80035ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2201      	movs	r2, #1
 8002c54:	2104      	movs	r1, #4
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fca8 	bl	80035ac <TIM_CCxChannelCmd>
      break;
 8002c5c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 0201 	orr.w	r2, r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e0ff      	b.n	8002e96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b14      	cmp	r3, #20
 8002ca2:	f200 80f0 	bhi.w	8002e86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002ca6:	a201      	add	r2, pc, #4	; (adr r2, 8002cac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cac:	08002d01 	.word	0x08002d01
 8002cb0:	08002e87 	.word	0x08002e87
 8002cb4:	08002e87 	.word	0x08002e87
 8002cb8:	08002e87 	.word	0x08002e87
 8002cbc:	08002d41 	.word	0x08002d41
 8002cc0:	08002e87 	.word	0x08002e87
 8002cc4:	08002e87 	.word	0x08002e87
 8002cc8:	08002e87 	.word	0x08002e87
 8002ccc:	08002d83 	.word	0x08002d83
 8002cd0:	08002e87 	.word	0x08002e87
 8002cd4:	08002e87 	.word	0x08002e87
 8002cd8:	08002e87 	.word	0x08002e87
 8002cdc:	08002dc3 	.word	0x08002dc3
 8002ce0:	08002e87 	.word	0x08002e87
 8002ce4:	08002e87 	.word	0x08002e87
 8002ce8:	08002e87 	.word	0x08002e87
 8002cec:	08002e05 	.word	0x08002e05
 8002cf0:	08002e87 	.word	0x08002e87
 8002cf4:	08002e87 	.word	0x08002e87
 8002cf8:	08002e87 	.word	0x08002e87
 8002cfc:	08002e45 	.word	0x08002e45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f95a 	bl	8002fc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0208 	orr.w	r2, r2, #8
 8002d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0204 	bic.w	r2, r2, #4
 8002d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6999      	ldr	r1, [r3, #24]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	691a      	ldr	r2, [r3, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	619a      	str	r2, [r3, #24]
      break;
 8002d3e:	e0a5      	b.n	8002e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 f9ca 	bl	80030e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6999      	ldr	r1, [r3, #24]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	021a      	lsls	r2, r3, #8
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	619a      	str	r2, [r3, #24]
      break;
 8002d80:	e084      	b.n	8002e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68b9      	ldr	r1, [r7, #8]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fa33 	bl	80031f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69da      	ldr	r2, [r3, #28]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f042 0208 	orr.w	r2, r2, #8
 8002d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	69da      	ldr	r2, [r3, #28]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0204 	bic.w	r2, r2, #4
 8002dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69d9      	ldr	r1, [r3, #28]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	61da      	str	r2, [r3, #28]
      break;
 8002dc0:	e064      	b.n	8002e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 fa9b 	bl	8003304 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69da      	ldr	r2, [r3, #28]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69da      	ldr	r2, [r3, #28]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69d9      	ldr	r1, [r3, #28]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	021a      	lsls	r2, r3, #8
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	61da      	str	r2, [r3, #28]
      break;
 8002e02:	e043      	b.n	8002e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fb04 	bl	8003418 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0208 	orr.w	r2, r2, #8
 8002e1e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0204 	bic.w	r2, r2, #4
 8002e2e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	691a      	ldr	r2, [r3, #16]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002e42:	e023      	b.n	8002e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fb48 	bl	80034e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e5e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e6e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	021a      	lsls	r2, r3, #8
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002e84:	e002      	b.n	8002e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	75fb      	strb	r3, [r7, #23]
      break;
 8002e8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop

08002ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a3c      	ldr	r2, [pc, #240]	; (8002fa4 <TIM_Base_SetConfig+0x104>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00f      	beq.n	8002ed8 <TIM_Base_SetConfig+0x38>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ebe:	d00b      	beq.n	8002ed8 <TIM_Base_SetConfig+0x38>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a39      	ldr	r2, [pc, #228]	; (8002fa8 <TIM_Base_SetConfig+0x108>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d007      	beq.n	8002ed8 <TIM_Base_SetConfig+0x38>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a38      	ldr	r2, [pc, #224]	; (8002fac <TIM_Base_SetConfig+0x10c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d003      	beq.n	8002ed8 <TIM_Base_SetConfig+0x38>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a37      	ldr	r2, [pc, #220]	; (8002fb0 <TIM_Base_SetConfig+0x110>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d108      	bne.n	8002eea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a2d      	ldr	r2, [pc, #180]	; (8002fa4 <TIM_Base_SetConfig+0x104>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01b      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef8:	d017      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a2a      	ldr	r2, [pc, #168]	; (8002fa8 <TIM_Base_SetConfig+0x108>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a29      	ldr	r2, [pc, #164]	; (8002fac <TIM_Base_SetConfig+0x10c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00f      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a28      	ldr	r2, [pc, #160]	; (8002fb0 <TIM_Base_SetConfig+0x110>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00b      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a27      	ldr	r2, [pc, #156]	; (8002fb4 <TIM_Base_SetConfig+0x114>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d007      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a26      	ldr	r2, [pc, #152]	; (8002fb8 <TIM_Base_SetConfig+0x118>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d003      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a25      	ldr	r2, [pc, #148]	; (8002fbc <TIM_Base_SetConfig+0x11c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d108      	bne.n	8002f3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a10      	ldr	r2, [pc, #64]	; (8002fa4 <TIM_Base_SetConfig+0x104>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d00f      	beq.n	8002f88 <TIM_Base_SetConfig+0xe8>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a11      	ldr	r2, [pc, #68]	; (8002fb0 <TIM_Base_SetConfig+0x110>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d00b      	beq.n	8002f88 <TIM_Base_SetConfig+0xe8>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a10      	ldr	r2, [pc, #64]	; (8002fb4 <TIM_Base_SetConfig+0x114>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d007      	beq.n	8002f88 <TIM_Base_SetConfig+0xe8>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a0f      	ldr	r2, [pc, #60]	; (8002fb8 <TIM_Base_SetConfig+0x118>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d003      	beq.n	8002f88 <TIM_Base_SetConfig+0xe8>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a0e      	ldr	r2, [pc, #56]	; (8002fbc <TIM_Base_SetConfig+0x11c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d103      	bne.n	8002f90 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	615a      	str	r2, [r3, #20]
}
 8002f96:	bf00      	nop
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40012c00 	.word	0x40012c00
 8002fa8:	40000400 	.word	0x40000400
 8002fac:	40000800 	.word	0x40000800
 8002fb0:	40013400 	.word	0x40013400
 8002fb4:	40014000 	.word	0x40014000
 8002fb8:	40014400 	.word	0x40014400
 8002fbc:	40014800 	.word	0x40014800

08002fc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	f023 0201 	bic.w	r2, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f023 0303 	bic.w	r3, r3, #3
 8002ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	4313      	orrs	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f023 0302 	bic.w	r3, r3, #2
 800300c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a2c      	ldr	r2, [pc, #176]	; (80030cc <TIM_OC1_SetConfig+0x10c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d00f      	beq.n	8003040 <TIM_OC1_SetConfig+0x80>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a2b      	ldr	r2, [pc, #172]	; (80030d0 <TIM_OC1_SetConfig+0x110>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d00b      	beq.n	8003040 <TIM_OC1_SetConfig+0x80>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a2a      	ldr	r2, [pc, #168]	; (80030d4 <TIM_OC1_SetConfig+0x114>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d007      	beq.n	8003040 <TIM_OC1_SetConfig+0x80>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a29      	ldr	r2, [pc, #164]	; (80030d8 <TIM_OC1_SetConfig+0x118>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d003      	beq.n	8003040 <TIM_OC1_SetConfig+0x80>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a28      	ldr	r2, [pc, #160]	; (80030dc <TIM_OC1_SetConfig+0x11c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d10c      	bne.n	800305a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f023 0308 	bic.w	r3, r3, #8
 8003046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f023 0304 	bic.w	r3, r3, #4
 8003058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a1b      	ldr	r2, [pc, #108]	; (80030cc <TIM_OC1_SetConfig+0x10c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00f      	beq.n	8003082 <TIM_OC1_SetConfig+0xc2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a1a      	ldr	r2, [pc, #104]	; (80030d0 <TIM_OC1_SetConfig+0x110>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00b      	beq.n	8003082 <TIM_OC1_SetConfig+0xc2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a19      	ldr	r2, [pc, #100]	; (80030d4 <TIM_OC1_SetConfig+0x114>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d007      	beq.n	8003082 <TIM_OC1_SetConfig+0xc2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a18      	ldr	r2, [pc, #96]	; (80030d8 <TIM_OC1_SetConfig+0x118>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d003      	beq.n	8003082 <TIM_OC1_SetConfig+0xc2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a17      	ldr	r2, [pc, #92]	; (80030dc <TIM_OC1_SetConfig+0x11c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d111      	bne.n	80030a6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	621a      	str	r2, [r3, #32]
}
 80030c0:	bf00      	nop
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	40012c00 	.word	0x40012c00
 80030d0:	40013400 	.word	0x40013400
 80030d4:	40014000 	.word	0x40014000
 80030d8:	40014400 	.word	0x40014400
 80030dc:	40014800 	.word	0x40014800

080030e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	f023 0210 	bic.w	r2, r3, #16
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800310e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800311a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	021b      	lsls	r3, r3, #8
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4313      	orrs	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f023 0320 	bic.w	r3, r3, #32
 800312e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a28      	ldr	r2, [pc, #160]	; (80031e0 <TIM_OC2_SetConfig+0x100>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d003      	beq.n	800314c <TIM_OC2_SetConfig+0x6c>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a27      	ldr	r2, [pc, #156]	; (80031e4 <TIM_OC2_SetConfig+0x104>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d10d      	bne.n	8003168 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4313      	orrs	r3, r2
 800315e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003166:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a1d      	ldr	r2, [pc, #116]	; (80031e0 <TIM_OC2_SetConfig+0x100>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00f      	beq.n	8003190 <TIM_OC2_SetConfig+0xb0>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a1c      	ldr	r2, [pc, #112]	; (80031e4 <TIM_OC2_SetConfig+0x104>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00b      	beq.n	8003190 <TIM_OC2_SetConfig+0xb0>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a1b      	ldr	r2, [pc, #108]	; (80031e8 <TIM_OC2_SetConfig+0x108>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d007      	beq.n	8003190 <TIM_OC2_SetConfig+0xb0>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a1a      	ldr	r2, [pc, #104]	; (80031ec <TIM_OC2_SetConfig+0x10c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d003      	beq.n	8003190 <TIM_OC2_SetConfig+0xb0>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a19      	ldr	r2, [pc, #100]	; (80031f0 <TIM_OC2_SetConfig+0x110>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d113      	bne.n	80031b8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003196:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800319e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	621a      	str	r2, [r3, #32]
}
 80031d2:	bf00      	nop
 80031d4:	371c      	adds	r7, #28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40012c00 	.word	0x40012c00
 80031e4:	40013400 	.word	0x40013400
 80031e8:	40014000 	.word	0x40014000
 80031ec:	40014400 	.word	0x40014400
 80031f0:	40014800 	.word	0x40014800

080031f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 0303 	bic.w	r3, r3, #3
 800322e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	021b      	lsls	r3, r3, #8
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	4313      	orrs	r3, r2
 800324c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a27      	ldr	r2, [pc, #156]	; (80032f0 <TIM_OC3_SetConfig+0xfc>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d003      	beq.n	800325e <TIM_OC3_SetConfig+0x6a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a26      	ldr	r2, [pc, #152]	; (80032f4 <TIM_OC3_SetConfig+0x100>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d10d      	bne.n	800327a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003264:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	021b      	lsls	r3, r3, #8
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <TIM_OC3_SetConfig+0xfc>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00f      	beq.n	80032a2 <TIM_OC3_SetConfig+0xae>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a1b      	ldr	r2, [pc, #108]	; (80032f4 <TIM_OC3_SetConfig+0x100>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00b      	beq.n	80032a2 <TIM_OC3_SetConfig+0xae>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a1a      	ldr	r2, [pc, #104]	; (80032f8 <TIM_OC3_SetConfig+0x104>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d007      	beq.n	80032a2 <TIM_OC3_SetConfig+0xae>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a19      	ldr	r2, [pc, #100]	; (80032fc <TIM_OC3_SetConfig+0x108>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d003      	beq.n	80032a2 <TIM_OC3_SetConfig+0xae>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a18      	ldr	r2, [pc, #96]	; (8003300 <TIM_OC3_SetConfig+0x10c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d113      	bne.n	80032ca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	621a      	str	r2, [r3, #32]
}
 80032e4:	bf00      	nop
 80032e6:	371c      	adds	r7, #28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	40012c00 	.word	0x40012c00
 80032f4:	40013400 	.word	0x40013400
 80032f8:	40014000 	.word	0x40014000
 80032fc:	40014400 	.word	0x40014400
 8003300:	40014800 	.word	0x40014800

08003304 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4313      	orrs	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003352:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	031b      	lsls	r3, r3, #12
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4313      	orrs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a28      	ldr	r2, [pc, #160]	; (8003404 <TIM_OC4_SetConfig+0x100>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d003      	beq.n	8003370 <TIM_OC4_SetConfig+0x6c>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a27      	ldr	r2, [pc, #156]	; (8003408 <TIM_OC4_SetConfig+0x104>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d10d      	bne.n	800338c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	031b      	lsls	r3, r3, #12
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	4313      	orrs	r3, r2
 8003382:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800338a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a1d      	ldr	r2, [pc, #116]	; (8003404 <TIM_OC4_SetConfig+0x100>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d00f      	beq.n	80033b4 <TIM_OC4_SetConfig+0xb0>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a1c      	ldr	r2, [pc, #112]	; (8003408 <TIM_OC4_SetConfig+0x104>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00b      	beq.n	80033b4 <TIM_OC4_SetConfig+0xb0>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a1b      	ldr	r2, [pc, #108]	; (800340c <TIM_OC4_SetConfig+0x108>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d007      	beq.n	80033b4 <TIM_OC4_SetConfig+0xb0>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a1a      	ldr	r2, [pc, #104]	; (8003410 <TIM_OC4_SetConfig+0x10c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d003      	beq.n	80033b4 <TIM_OC4_SetConfig+0xb0>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a19      	ldr	r2, [pc, #100]	; (8003414 <TIM_OC4_SetConfig+0x110>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d113      	bne.n	80033dc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ba:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033c2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	019b      	lsls	r3, r3, #6
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	019b      	lsls	r3, r3, #6
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	621a      	str	r2, [r3, #32]
}
 80033f6:	bf00      	nop
 80033f8:	371c      	adds	r7, #28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40012c00 	.word	0x40012c00
 8003408:	40013400 	.word	0x40013400
 800340c:	40014000 	.word	0x40014000
 8003410:	40014400 	.word	0x40014400
 8003414:	40014800 	.word	0x40014800

08003418 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800345c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	041b      	lsls	r3, r3, #16
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a17      	ldr	r2, [pc, #92]	; (80034cc <TIM_OC5_SetConfig+0xb4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00f      	beq.n	8003492 <TIM_OC5_SetConfig+0x7a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a16      	ldr	r2, [pc, #88]	; (80034d0 <TIM_OC5_SetConfig+0xb8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00b      	beq.n	8003492 <TIM_OC5_SetConfig+0x7a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a15      	ldr	r2, [pc, #84]	; (80034d4 <TIM_OC5_SetConfig+0xbc>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d007      	beq.n	8003492 <TIM_OC5_SetConfig+0x7a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a14      	ldr	r2, [pc, #80]	; (80034d8 <TIM_OC5_SetConfig+0xc0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d003      	beq.n	8003492 <TIM_OC5_SetConfig+0x7a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a13      	ldr	r2, [pc, #76]	; (80034dc <TIM_OC5_SetConfig+0xc4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d109      	bne.n	80034a6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003498:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	621a      	str	r2, [r3, #32]
}
 80034c0:	bf00      	nop
 80034c2:	371c      	adds	r7, #28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	40012c00 	.word	0x40012c00
 80034d0:	40013400 	.word	0x40013400
 80034d4:	40014000 	.word	0x40014000
 80034d8:	40014400 	.word	0x40014400
 80034dc:	40014800 	.word	0x40014800

080034e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b087      	sub	sp, #28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800350e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003526:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	051b      	lsls	r3, r3, #20
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a18      	ldr	r2, [pc, #96]	; (8003598 <TIM_OC6_SetConfig+0xb8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00f      	beq.n	800355c <TIM_OC6_SetConfig+0x7c>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a17      	ldr	r2, [pc, #92]	; (800359c <TIM_OC6_SetConfig+0xbc>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00b      	beq.n	800355c <TIM_OC6_SetConfig+0x7c>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a16      	ldr	r2, [pc, #88]	; (80035a0 <TIM_OC6_SetConfig+0xc0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d007      	beq.n	800355c <TIM_OC6_SetConfig+0x7c>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a15      	ldr	r2, [pc, #84]	; (80035a4 <TIM_OC6_SetConfig+0xc4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d003      	beq.n	800355c <TIM_OC6_SetConfig+0x7c>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a14      	ldr	r2, [pc, #80]	; (80035a8 <TIM_OC6_SetConfig+0xc8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d109      	bne.n	8003570 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003562:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	029b      	lsls	r3, r3, #10
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	4313      	orrs	r3, r2
 800356e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	621a      	str	r2, [r3, #32]
}
 800358a:	bf00      	nop
 800358c:	371c      	adds	r7, #28
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40012c00 	.word	0x40012c00
 800359c:	40013400 	.word	0x40013400
 80035a0:	40014000 	.word	0x40014000
 80035a4:	40014400 	.word	0x40014400
 80035a8:	40014800 	.word	0x40014800

080035ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f003 031f 	and.w	r3, r3, #31
 80035be:	2201      	movs	r2, #1
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a1a      	ldr	r2, [r3, #32]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	43db      	mvns	r3, r3
 80035ce:	401a      	ands	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a1a      	ldr	r2, [r3, #32]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f003 031f 	and.w	r3, r3, #31
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	fa01 f303 	lsl.w	r3, r1, r3
 80035e4:	431a      	orrs	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	621a      	str	r2, [r3, #32]
}
 80035ea:	bf00      	nop
 80035ec:	371c      	adds	r7, #28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800360c:	2302      	movs	r3, #2
 800360e:	e065      	b.n	80036dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a2c      	ldr	r2, [pc, #176]	; (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d004      	beq.n	8003644 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a2b      	ldr	r2, [pc, #172]	; (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d108      	bne.n	8003656 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800364a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800365c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003660:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1b      	ldr	r2, [pc, #108]	; (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d018      	beq.n	80036b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003686:	d013      	beq.n	80036b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a18      	ldr	r2, [pc, #96]	; (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00e      	beq.n	80036b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a17      	ldr	r2, [pc, #92]	; (80036f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d009      	beq.n	80036b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a12      	ldr	r2, [pc, #72]	; (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d004      	beq.n	80036b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a13      	ldr	r2, [pc, #76]	; (80036f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d10c      	bne.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	40012c00 	.word	0x40012c00
 80036ec:	40013400 	.word	0x40013400
 80036f0:	40000400 	.word	0x40000400
 80036f4:	40000800 	.word	0x40000800
 80036f8:	40014000 	.word	0x40014000

080036fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003714:	2302      	movs	r3, #2
 8003716:	e087      	b.n	8003828 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	4313      	orrs	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4313      	orrs	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	041b      	lsls	r3, r3, #16
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a27      	ldr	r2, [pc, #156]	; (8003834 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d004      	beq.n	80037a6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a25      	ldr	r2, [pc, #148]	; (8003838 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d106      	bne.n	80037b4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a1e      	ldr	r2, [pc, #120]	; (8003834 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d004      	beq.n	80037c8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a1d      	ldr	r2, [pc, #116]	; (8003838 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d126      	bne.n	8003816 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d2:	051b      	lsls	r3, r3, #20
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a0e      	ldr	r2, [pc, #56]	; (8003834 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d004      	beq.n	8003808 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a0d      	ldr	r2, [pc, #52]	; (8003838 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d106      	bne.n	8003816 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	40012c00 	.word	0x40012c00
 8003838:	40013400 	.word	0x40013400

0800383c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e042      	b.n	80038d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003854:	2b00      	cmp	r3, #0
 8003856:	d106      	bne.n	8003866 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7fd fb1b 	bl	8000e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2224      	movs	r2, #36	; 0x24
 800386a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0201 	bic.w	r2, r2, #1
 800387c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f8c2 	bl	8003a08 <UART_SetConfig>
 8003884:	4603      	mov	r3, r0
 8003886:	2b01      	cmp	r3, #1
 8003888:	d101      	bne.n	800388e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e022      	b.n	80038d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fb82 	bl	8003fa0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0201 	orr.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fc09 	bl	80040e4 <UART_CheckIdleState>
 80038d2:	4603      	mov	r3, r0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08a      	sub	sp, #40	; 0x28
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	603b      	str	r3, [r7, #0]
 80038e8:	4613      	mov	r3, r2
 80038ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	f040 8083 	bne.w	80039fe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <HAL_UART_Transmit+0x28>
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e07b      	b.n	8003a00 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_UART_Transmit+0x3a>
 8003912:	2302      	movs	r3, #2
 8003914:	e074      	b.n	8003a00 <HAL_UART_Transmit+0x124>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2221      	movs	r2, #33	; 0x21
 800392a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800392e:	f7fd fb9b 	bl	8001068 <HAL_GetTick>
 8003932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	88fa      	ldrh	r2, [r7, #6]
 8003938:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	88fa      	ldrh	r2, [r7, #6]
 8003940:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800394c:	d108      	bne.n	8003960 <HAL_UART_Transmit+0x84>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d104      	bne.n	8003960 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	e003      	b.n	8003968 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003964:	2300      	movs	r3, #0
 8003966:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003970:	e02c      	b.n	80039cc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2200      	movs	r2, #0
 800397a:	2180      	movs	r1, #128	; 0x80
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 fbfc 	bl	800417a <UART_WaitOnFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e039      	b.n	8003a00 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10b      	bne.n	80039aa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	3302      	adds	r3, #2
 80039a6:	61bb      	str	r3, [r7, #24]
 80039a8:	e007      	b.n	80039ba <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	781a      	ldrb	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	3301      	adds	r3, #1
 80039b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1cc      	bne.n	8003972 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2200      	movs	r2, #0
 80039e0:	2140      	movs	r1, #64	; 0x40
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 fbc9 	bl	800417a <UART_WaitOnFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e006      	b.n	8003a00 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2220      	movs	r2, #32
 80039f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	e000      	b.n	8003a00 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80039fe:	2302      	movs	r3, #2
  }
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3720      	adds	r7, #32
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a0c:	b08c      	sub	sp, #48	; 0x30
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	431a      	orrs	r2, r3
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	4bab      	ldr	r3, [pc, #684]	; (8003ce4 <UART_SetConfig+0x2dc>)
 8003a38:	4013      	ands	r3, r2
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a40:	430b      	orrs	r3, r1
 8003a42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4aa0      	ldr	r2, [pc, #640]	; (8003ce8 <UART_SetConfig+0x2e0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d004      	beq.n	8003a74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a70:	4313      	orrs	r3, r2
 8003a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003a7e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	6812      	ldr	r2, [r2, #0]
 8003a86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	f023 010f 	bic.w	r1, r3, #15
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a91      	ldr	r2, [pc, #580]	; (8003cec <UART_SetConfig+0x2e4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d125      	bne.n	8003af8 <UART_SetConfig+0xf0>
 8003aac:	4b90      	ldr	r3, [pc, #576]	; (8003cf0 <UART_SetConfig+0x2e8>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d81a      	bhi.n	8003af0 <UART_SetConfig+0xe8>
 8003aba:	a201      	add	r2, pc, #4	; (adr r2, 8003ac0 <UART_SetConfig+0xb8>)
 8003abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac0:	08003ad1 	.word	0x08003ad1
 8003ac4:	08003ae1 	.word	0x08003ae1
 8003ac8:	08003ad9 	.word	0x08003ad9
 8003acc:	08003ae9 	.word	0x08003ae9
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ad6:	e0d6      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ade:	e0d2      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003ae0:	2304      	movs	r3, #4
 8003ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ae6:	e0ce      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003ae8:	2308      	movs	r3, #8
 8003aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aee:	e0ca      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003af0:	2310      	movs	r3, #16
 8003af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003af6:	e0c6      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a7d      	ldr	r2, [pc, #500]	; (8003cf4 <UART_SetConfig+0x2ec>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d138      	bne.n	8003b74 <UART_SetConfig+0x16c>
 8003b02:	4b7b      	ldr	r3, [pc, #492]	; (8003cf0 <UART_SetConfig+0x2e8>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b08:	f003 030c 	and.w	r3, r3, #12
 8003b0c:	2b0c      	cmp	r3, #12
 8003b0e:	d82d      	bhi.n	8003b6c <UART_SetConfig+0x164>
 8003b10:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <UART_SetConfig+0x110>)
 8003b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b16:	bf00      	nop
 8003b18:	08003b4d 	.word	0x08003b4d
 8003b1c:	08003b6d 	.word	0x08003b6d
 8003b20:	08003b6d 	.word	0x08003b6d
 8003b24:	08003b6d 	.word	0x08003b6d
 8003b28:	08003b5d 	.word	0x08003b5d
 8003b2c:	08003b6d 	.word	0x08003b6d
 8003b30:	08003b6d 	.word	0x08003b6d
 8003b34:	08003b6d 	.word	0x08003b6d
 8003b38:	08003b55 	.word	0x08003b55
 8003b3c:	08003b6d 	.word	0x08003b6d
 8003b40:	08003b6d 	.word	0x08003b6d
 8003b44:	08003b6d 	.word	0x08003b6d
 8003b48:	08003b65 	.word	0x08003b65
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b52:	e098      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003b54:	2302      	movs	r3, #2
 8003b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b5a:	e094      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003b5c:	2304      	movs	r3, #4
 8003b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b62:	e090      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003b64:	2308      	movs	r3, #8
 8003b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b6a:	e08c      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003b6c:	2310      	movs	r3, #16
 8003b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b72:	e088      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a5f      	ldr	r2, [pc, #380]	; (8003cf8 <UART_SetConfig+0x2f0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d125      	bne.n	8003bca <UART_SetConfig+0x1c2>
 8003b7e:	4b5c      	ldr	r3, [pc, #368]	; (8003cf0 <UART_SetConfig+0x2e8>)
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b88:	2b30      	cmp	r3, #48	; 0x30
 8003b8a:	d016      	beq.n	8003bba <UART_SetConfig+0x1b2>
 8003b8c:	2b30      	cmp	r3, #48	; 0x30
 8003b8e:	d818      	bhi.n	8003bc2 <UART_SetConfig+0x1ba>
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d00a      	beq.n	8003baa <UART_SetConfig+0x1a2>
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d814      	bhi.n	8003bc2 <UART_SetConfig+0x1ba>
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <UART_SetConfig+0x19a>
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d008      	beq.n	8003bb2 <UART_SetConfig+0x1aa>
 8003ba0:	e00f      	b.n	8003bc2 <UART_SetConfig+0x1ba>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ba8:	e06d      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003baa:	2302      	movs	r3, #2
 8003bac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bb0:	e069      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003bb2:	2304      	movs	r3, #4
 8003bb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bb8:	e065      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003bba:	2308      	movs	r3, #8
 8003bbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bc0:	e061      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003bc2:	2310      	movs	r3, #16
 8003bc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bc8:	e05d      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a4b      	ldr	r2, [pc, #300]	; (8003cfc <UART_SetConfig+0x2f4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d125      	bne.n	8003c20 <UART_SetConfig+0x218>
 8003bd4:	4b46      	ldr	r3, [pc, #280]	; (8003cf0 <UART_SetConfig+0x2e8>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bde:	2bc0      	cmp	r3, #192	; 0xc0
 8003be0:	d016      	beq.n	8003c10 <UART_SetConfig+0x208>
 8003be2:	2bc0      	cmp	r3, #192	; 0xc0
 8003be4:	d818      	bhi.n	8003c18 <UART_SetConfig+0x210>
 8003be6:	2b80      	cmp	r3, #128	; 0x80
 8003be8:	d00a      	beq.n	8003c00 <UART_SetConfig+0x1f8>
 8003bea:	2b80      	cmp	r3, #128	; 0x80
 8003bec:	d814      	bhi.n	8003c18 <UART_SetConfig+0x210>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <UART_SetConfig+0x1f0>
 8003bf2:	2b40      	cmp	r3, #64	; 0x40
 8003bf4:	d008      	beq.n	8003c08 <UART_SetConfig+0x200>
 8003bf6:	e00f      	b.n	8003c18 <UART_SetConfig+0x210>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bfe:	e042      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003c00:	2302      	movs	r3, #2
 8003c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c06:	e03e      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003c08:	2304      	movs	r3, #4
 8003c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c0e:	e03a      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003c10:	2308      	movs	r3, #8
 8003c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c16:	e036      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003c18:	2310      	movs	r3, #16
 8003c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c1e:	e032      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a30      	ldr	r2, [pc, #192]	; (8003ce8 <UART_SetConfig+0x2e0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d12a      	bne.n	8003c80 <UART_SetConfig+0x278>
 8003c2a:	4b31      	ldr	r3, [pc, #196]	; (8003cf0 <UART_SetConfig+0x2e8>)
 8003c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c38:	d01a      	beq.n	8003c70 <UART_SetConfig+0x268>
 8003c3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c3e:	d81b      	bhi.n	8003c78 <UART_SetConfig+0x270>
 8003c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c44:	d00c      	beq.n	8003c60 <UART_SetConfig+0x258>
 8003c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c4a:	d815      	bhi.n	8003c78 <UART_SetConfig+0x270>
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <UART_SetConfig+0x250>
 8003c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c54:	d008      	beq.n	8003c68 <UART_SetConfig+0x260>
 8003c56:	e00f      	b.n	8003c78 <UART_SetConfig+0x270>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c5e:	e012      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003c60:	2302      	movs	r3, #2
 8003c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c66:	e00e      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003c68:	2304      	movs	r3, #4
 8003c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c6e:	e00a      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003c70:	2308      	movs	r3, #8
 8003c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c76:	e006      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003c78:	2310      	movs	r3, #16
 8003c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c7e:	e002      	b.n	8003c86 <UART_SetConfig+0x27e>
 8003c80:	2310      	movs	r3, #16
 8003c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a17      	ldr	r2, [pc, #92]	; (8003ce8 <UART_SetConfig+0x2e0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	f040 80a8 	bne.w	8003de2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d834      	bhi.n	8003d04 <UART_SetConfig+0x2fc>
 8003c9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ca0 <UART_SetConfig+0x298>)
 8003c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca0:	08003cc5 	.word	0x08003cc5
 8003ca4:	08003d05 	.word	0x08003d05
 8003ca8:	08003ccd 	.word	0x08003ccd
 8003cac:	08003d05 	.word	0x08003d05
 8003cb0:	08003cd3 	.word	0x08003cd3
 8003cb4:	08003d05 	.word	0x08003d05
 8003cb8:	08003d05 	.word	0x08003d05
 8003cbc:	08003d05 	.word	0x08003d05
 8003cc0:	08003cdb 	.word	0x08003cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc4:	f7fe f9f2 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 8003cc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cca:	e021      	b.n	8003d10 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ccc:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <UART_SetConfig+0x2f8>)
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003cd0:	e01e      	b.n	8003d10 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cd2:	f7fe f97d 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8003cd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cd8:	e01a      	b.n	8003d10 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ce0:	e016      	b.n	8003d10 <UART_SetConfig+0x308>
 8003ce2:	bf00      	nop
 8003ce4:	cfff69f3 	.word	0xcfff69f3
 8003ce8:	40008000 	.word	0x40008000
 8003cec:	40013800 	.word	0x40013800
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40004400 	.word	0x40004400
 8003cf8:	40004800 	.word	0x40004800
 8003cfc:	40004c00 	.word	0x40004c00
 8003d00:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d0e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 812a 	beq.w	8003f6c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	4a9e      	ldr	r2, [pc, #632]	; (8003f98 <UART_SetConfig+0x590>)
 8003d1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d22:	461a      	mov	r2, r3
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	4613      	mov	r3, r2
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	4413      	add	r3, r2
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d305      	bcc.n	8003d48 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d903      	bls.n	8003d50 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d4e:	e10d      	b.n	8003f6c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	2200      	movs	r2, #0
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	60fa      	str	r2, [r7, #12]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	4a8e      	ldr	r2, [pc, #568]	; (8003f98 <UART_SetConfig+0x590>)
 8003d5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	2200      	movs	r2, #0
 8003d66:	603b      	str	r3, [r7, #0]
 8003d68:	607a      	str	r2, [r7, #4]
 8003d6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d72:	f7fc faa5 	bl	80002c0 <__aeabi_uldivmod>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	020b      	lsls	r3, r1, #8
 8003d88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d8c:	0202      	lsls	r2, r0, #8
 8003d8e:	6979      	ldr	r1, [r7, #20]
 8003d90:	6849      	ldr	r1, [r1, #4]
 8003d92:	0849      	lsrs	r1, r1, #1
 8003d94:	2000      	movs	r0, #0
 8003d96:	460c      	mov	r4, r1
 8003d98:	4605      	mov	r5, r0
 8003d9a:	eb12 0804 	adds.w	r8, r2, r4
 8003d9e:	eb43 0905 	adc.w	r9, r3, r5
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	469a      	mov	sl, r3
 8003daa:	4693      	mov	fp, r2
 8003dac:	4652      	mov	r2, sl
 8003dae:	465b      	mov	r3, fp
 8003db0:	4640      	mov	r0, r8
 8003db2:	4649      	mov	r1, r9
 8003db4:	f7fc fa84 	bl	80002c0 <__aeabi_uldivmod>
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dc6:	d308      	bcc.n	8003dda <UART_SetConfig+0x3d2>
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dce:	d204      	bcs.n	8003dda <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6a3a      	ldr	r2, [r7, #32]
 8003dd6:	60da      	str	r2, [r3, #12]
 8003dd8:	e0c8      	b.n	8003f6c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003de0:	e0c4      	b.n	8003f6c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dea:	d167      	bne.n	8003ebc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003dec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d828      	bhi.n	8003e46 <UART_SetConfig+0x43e>
 8003df4:	a201      	add	r2, pc, #4	; (adr r2, 8003dfc <UART_SetConfig+0x3f4>)
 8003df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfa:	bf00      	nop
 8003dfc:	08003e21 	.word	0x08003e21
 8003e00:	08003e29 	.word	0x08003e29
 8003e04:	08003e31 	.word	0x08003e31
 8003e08:	08003e47 	.word	0x08003e47
 8003e0c:	08003e37 	.word	0x08003e37
 8003e10:	08003e47 	.word	0x08003e47
 8003e14:	08003e47 	.word	0x08003e47
 8003e18:	08003e47 	.word	0x08003e47
 8003e1c:	08003e3f 	.word	0x08003e3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e20:	f7fe f944 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 8003e24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e26:	e014      	b.n	8003e52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e28:	f7fe f956 	bl	80020d8 <HAL_RCC_GetPCLK2Freq>
 8003e2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e2e:	e010      	b.n	8003e52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e30:	4b5a      	ldr	r3, [pc, #360]	; (8003f9c <UART_SetConfig+0x594>)
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e34:	e00d      	b.n	8003e52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e36:	f7fe f8cb 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8003e3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e3c:	e009      	b.n	8003e52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e44:	e005      	b.n	8003e52 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8089 	beq.w	8003f6c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	4a4e      	ldr	r2, [pc, #312]	; (8003f98 <UART_SetConfig+0x590>)
 8003e60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e64:	461a      	mov	r2, r3
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e6c:	005a      	lsls	r2, r3, #1
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	085b      	lsrs	r3, r3, #1
 8003e74:	441a      	add	r2, r3
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	2b0f      	cmp	r3, #15
 8003e84:	d916      	bls.n	8003eb4 <UART_SetConfig+0x4ac>
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e8c:	d212      	bcs.n	8003eb4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	f023 030f 	bic.w	r3, r3, #15
 8003e96:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	085b      	lsrs	r3, r3, #1
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	8bfb      	ldrh	r3, [r7, #30]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	8bfa      	ldrh	r2, [r7, #30]
 8003eb0:	60da      	str	r2, [r3, #12]
 8003eb2:	e05b      	b.n	8003f6c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003eba:	e057      	b.n	8003f6c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ebc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d828      	bhi.n	8003f16 <UART_SetConfig+0x50e>
 8003ec4:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <UART_SetConfig+0x4c4>)
 8003ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eca:	bf00      	nop
 8003ecc:	08003ef1 	.word	0x08003ef1
 8003ed0:	08003ef9 	.word	0x08003ef9
 8003ed4:	08003f01 	.word	0x08003f01
 8003ed8:	08003f17 	.word	0x08003f17
 8003edc:	08003f07 	.word	0x08003f07
 8003ee0:	08003f17 	.word	0x08003f17
 8003ee4:	08003f17 	.word	0x08003f17
 8003ee8:	08003f17 	.word	0x08003f17
 8003eec:	08003f0f 	.word	0x08003f0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ef0:	f7fe f8dc 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 8003ef4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ef6:	e014      	b.n	8003f22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ef8:	f7fe f8ee 	bl	80020d8 <HAL_RCC_GetPCLK2Freq>
 8003efc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003efe:	e010      	b.n	8003f22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f00:	4b26      	ldr	r3, [pc, #152]	; (8003f9c <UART_SetConfig+0x594>)
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f04:	e00d      	b.n	8003f22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f06:	f7fe f863 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8003f0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f0c:	e009      	b.n	8003f22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f14:	e005      	b.n	8003f22 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f20:	bf00      	nop
    }

    if (pclk != 0U)
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d021      	beq.n	8003f6c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	4a1a      	ldr	r2, [pc, #104]	; (8003f98 <UART_SetConfig+0x590>)
 8003f2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f32:	461a      	mov	r2, r3
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	085b      	lsrs	r3, r3, #1
 8003f40:	441a      	add	r2, r3
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	2b0f      	cmp	r3, #15
 8003f50:	d909      	bls.n	8003f66 <UART_SetConfig+0x55e>
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f58:	d205      	bcs.n	8003f66 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60da      	str	r2, [r3, #12]
 8003f64:	e002      	b.n	8003f6c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2200      	movs	r2, #0
 8003f86:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003f88:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3730      	adds	r7, #48	; 0x30
 8003f90:	46bd      	mov	sp, r7
 8003f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f96:	bf00      	nop
 8003f98:	080053b4 	.word	0x080053b4
 8003f9c:	00f42400 	.word	0x00f42400

08003fa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407c:	2b00      	cmp	r3, #0
 800407e:	d01a      	beq.n	80040b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800409e:	d10a      	bne.n	80040b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	605a      	str	r2, [r3, #4]
  }
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040f4:	f7fc ffb8 	bl	8001068 <HAL_GetTick>
 80040f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b08      	cmp	r3, #8
 8004106:	d10e      	bne.n	8004126 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004108:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f82f 	bl	800417a <UART_WaitOnFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e025      	b.n	8004172 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b04      	cmp	r3, #4
 8004132:	d10e      	bne.n	8004152 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004134:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f819 	bl	800417a <UART_WaitOnFlagUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e00f      	b.n	8004172 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2220      	movs	r2, #32
 8004156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b09c      	sub	sp, #112	; 0x70
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	603b      	str	r3, [r7, #0]
 8004186:	4613      	mov	r3, r2
 8004188:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800418a:	e0a9      	b.n	80042e0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800418e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004192:	f000 80a5 	beq.w	80042e0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004196:	f7fc ff67 	bl	8001068 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d302      	bcc.n	80041ac <UART_WaitOnFlagUntilTimeout+0x32>
 80041a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d140      	bne.n	800422e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041c0:	667b      	str	r3, [r7, #100]	; 0x64
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041d2:	e841 2300 	strex	r3, r2, [r1]
 80041d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80041d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1e6      	bne.n	80041ac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3308      	adds	r3, #8
 80041e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e8:	e853 3f00 	ldrex	r3, [r3]
 80041ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f0:	f023 0301 	bic.w	r3, r3, #1
 80041f4:	663b      	str	r3, [r7, #96]	; 0x60
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3308      	adds	r3, #8
 80041fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004200:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004204:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800420c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e5      	bne.n	80041de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2220      	movs	r2, #32
 8004216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2220      	movs	r2, #32
 800421e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e069      	b.n	8004302 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d051      	beq.n	80042e0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800424a:	d149      	bne.n	80042e0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004254:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	e853 3f00 	ldrex	r3, [r3]
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800426a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004274:	637b      	str	r3, [r7, #52]	; 0x34
 8004276:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800427a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800427c:	e841 2300 	strex	r3, r2, [r1]
 8004280:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1e6      	bne.n	8004256 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3308      	adds	r3, #8
 800428e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	e853 3f00 	ldrex	r3, [r3]
 8004296:	613b      	str	r3, [r7, #16]
   return(result);
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f023 0301 	bic.w	r3, r3, #1
 800429e:	66bb      	str	r3, [r7, #104]	; 0x68
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3308      	adds	r3, #8
 80042a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042a8:	623a      	str	r2, [r7, #32]
 80042aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ac:	69f9      	ldr	r1, [r7, #28]
 80042ae:	6a3a      	ldr	r2, [r7, #32]
 80042b0:	e841 2300 	strex	r3, r2, [r1]
 80042b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1e5      	bne.n	8004288 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2220      	movs	r2, #32
 80042c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e010      	b.n	8004302 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	69da      	ldr	r2, [r3, #28]
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	4013      	ands	r3, r2
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	bf0c      	ite	eq
 80042f0:	2301      	moveq	r3, #1
 80042f2:	2300      	movne	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	461a      	mov	r2, r3
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	f43f af46 	beq.w	800418c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3770      	adds	r7, #112	; 0x70
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800430a:	b480      	push	{r7}
 800430c:	b085      	sub	sp, #20
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_UARTEx_DisableFifoMode+0x16>
 800431c:	2302      	movs	r3, #2
 800431e:	e027      	b.n	8004370 <HAL_UARTEx_DisableFifoMode+0x66>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2224      	movs	r2, #36	; 0x24
 800432c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0201 	bic.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800434e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2220      	movs	r2, #32
 8004362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004390:	2302      	movs	r3, #2
 8004392:	e02d      	b.n	80043f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2224      	movs	r2, #36	; 0x24
 80043a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0201 	bic.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f84f 	bl	8004474 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800440c:	2302      	movs	r3, #2
 800440e:	e02d      	b.n	800446c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2224      	movs	r2, #36	; 0x24
 800441c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0201 	bic.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f811 	bl	8004474 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004480:	2b00      	cmp	r3, #0
 8004482:	d108      	bne.n	8004496 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004494:	e031      	b.n	80044fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004496:	2308      	movs	r3, #8
 8004498:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800449a:	2308      	movs	r3, #8
 800449c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	0e5b      	lsrs	r3, r3, #25
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	0f5b      	lsrs	r3, r3, #29
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044be:	7bbb      	ldrb	r3, [r7, #14]
 80044c0:	7b3a      	ldrb	r2, [r7, #12]
 80044c2:	4911      	ldr	r1, [pc, #68]	; (8004508 <UARTEx_SetNbDataToProcess+0x94>)
 80044c4:	5c8a      	ldrb	r2, [r1, r2]
 80044c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80044ca:	7b3a      	ldrb	r2, [r7, #12]
 80044cc:	490f      	ldr	r1, [pc, #60]	; (800450c <UARTEx_SetNbDataToProcess+0x98>)
 80044ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	7b7a      	ldrb	r2, [r7, #13]
 80044e0:	4909      	ldr	r1, [pc, #36]	; (8004508 <UARTEx_SetNbDataToProcess+0x94>)
 80044e2:	5c8a      	ldrb	r2, [r1, r2]
 80044e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80044e8:	7b7a      	ldrb	r2, [r7, #13]
 80044ea:	4908      	ldr	r1, [pc, #32]	; (800450c <UARTEx_SetNbDataToProcess+0x98>)
 80044ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80044ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80044fa:	bf00      	nop
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	080053cc 	.word	0x080053cc
 800450c:	080053d4 	.word	0x080053d4

08004510 <std>:
 8004510:	2300      	movs	r3, #0
 8004512:	b510      	push	{r4, lr}
 8004514:	4604      	mov	r4, r0
 8004516:	e9c0 3300 	strd	r3, r3, [r0]
 800451a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800451e:	6083      	str	r3, [r0, #8]
 8004520:	8181      	strh	r1, [r0, #12]
 8004522:	6643      	str	r3, [r0, #100]	; 0x64
 8004524:	81c2      	strh	r2, [r0, #14]
 8004526:	6183      	str	r3, [r0, #24]
 8004528:	4619      	mov	r1, r3
 800452a:	2208      	movs	r2, #8
 800452c:	305c      	adds	r0, #92	; 0x5c
 800452e:	f000 f8f4 	bl	800471a <memset>
 8004532:	4b05      	ldr	r3, [pc, #20]	; (8004548 <std+0x38>)
 8004534:	6263      	str	r3, [r4, #36]	; 0x24
 8004536:	4b05      	ldr	r3, [pc, #20]	; (800454c <std+0x3c>)
 8004538:	62a3      	str	r3, [r4, #40]	; 0x28
 800453a:	4b05      	ldr	r3, [pc, #20]	; (8004550 <std+0x40>)
 800453c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800453e:	4b05      	ldr	r3, [pc, #20]	; (8004554 <std+0x44>)
 8004540:	6224      	str	r4, [r4, #32]
 8004542:	6323      	str	r3, [r4, #48]	; 0x30
 8004544:	bd10      	pop	{r4, pc}
 8004546:	bf00      	nop
 8004548:	08004695 	.word	0x08004695
 800454c:	080046b7 	.word	0x080046b7
 8004550:	080046ef 	.word	0x080046ef
 8004554:	08004713 	.word	0x08004713

08004558 <stdio_exit_handler>:
 8004558:	4a02      	ldr	r2, [pc, #8]	; (8004564 <stdio_exit_handler+0xc>)
 800455a:	4903      	ldr	r1, [pc, #12]	; (8004568 <stdio_exit_handler+0x10>)
 800455c:	4803      	ldr	r0, [pc, #12]	; (800456c <stdio_exit_handler+0x14>)
 800455e:	f000 b869 	b.w	8004634 <_fwalk_sglue>
 8004562:	bf00      	nop
 8004564:	2000000c 	.word	0x2000000c
 8004568:	080050b5 	.word	0x080050b5
 800456c:	20000018 	.word	0x20000018

08004570 <cleanup_stdio>:
 8004570:	6841      	ldr	r1, [r0, #4]
 8004572:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <cleanup_stdio+0x34>)
 8004574:	4299      	cmp	r1, r3
 8004576:	b510      	push	{r4, lr}
 8004578:	4604      	mov	r4, r0
 800457a:	d001      	beq.n	8004580 <cleanup_stdio+0x10>
 800457c:	f000 fd9a 	bl	80050b4 <_fflush_r>
 8004580:	68a1      	ldr	r1, [r4, #8]
 8004582:	4b09      	ldr	r3, [pc, #36]	; (80045a8 <cleanup_stdio+0x38>)
 8004584:	4299      	cmp	r1, r3
 8004586:	d002      	beq.n	800458e <cleanup_stdio+0x1e>
 8004588:	4620      	mov	r0, r4
 800458a:	f000 fd93 	bl	80050b4 <_fflush_r>
 800458e:	68e1      	ldr	r1, [r4, #12]
 8004590:	4b06      	ldr	r3, [pc, #24]	; (80045ac <cleanup_stdio+0x3c>)
 8004592:	4299      	cmp	r1, r3
 8004594:	d004      	beq.n	80045a0 <cleanup_stdio+0x30>
 8004596:	4620      	mov	r0, r4
 8004598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800459c:	f000 bd8a 	b.w	80050b4 <_fflush_r>
 80045a0:	bd10      	pop	{r4, pc}
 80045a2:	bf00      	nop
 80045a4:	200001c0 	.word	0x200001c0
 80045a8:	20000228 	.word	0x20000228
 80045ac:	20000290 	.word	0x20000290

080045b0 <global_stdio_init.part.0>:
 80045b0:	b510      	push	{r4, lr}
 80045b2:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <global_stdio_init.part.0+0x30>)
 80045b4:	4c0b      	ldr	r4, [pc, #44]	; (80045e4 <global_stdio_init.part.0+0x34>)
 80045b6:	4a0c      	ldr	r2, [pc, #48]	; (80045e8 <global_stdio_init.part.0+0x38>)
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	4620      	mov	r0, r4
 80045bc:	2200      	movs	r2, #0
 80045be:	2104      	movs	r1, #4
 80045c0:	f7ff ffa6 	bl	8004510 <std>
 80045c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80045c8:	2201      	movs	r2, #1
 80045ca:	2109      	movs	r1, #9
 80045cc:	f7ff ffa0 	bl	8004510 <std>
 80045d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80045d4:	2202      	movs	r2, #2
 80045d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045da:	2112      	movs	r1, #18
 80045dc:	f7ff bf98 	b.w	8004510 <std>
 80045e0:	200002f8 	.word	0x200002f8
 80045e4:	200001c0 	.word	0x200001c0
 80045e8:	08004559 	.word	0x08004559

080045ec <__sfp_lock_acquire>:
 80045ec:	4801      	ldr	r0, [pc, #4]	; (80045f4 <__sfp_lock_acquire+0x8>)
 80045ee:	f000 b90d 	b.w	800480c <__retarget_lock_acquire_recursive>
 80045f2:	bf00      	nop
 80045f4:	20000301 	.word	0x20000301

080045f8 <__sfp_lock_release>:
 80045f8:	4801      	ldr	r0, [pc, #4]	; (8004600 <__sfp_lock_release+0x8>)
 80045fa:	f000 b908 	b.w	800480e <__retarget_lock_release_recursive>
 80045fe:	bf00      	nop
 8004600:	20000301 	.word	0x20000301

08004604 <__sinit>:
 8004604:	b510      	push	{r4, lr}
 8004606:	4604      	mov	r4, r0
 8004608:	f7ff fff0 	bl	80045ec <__sfp_lock_acquire>
 800460c:	6a23      	ldr	r3, [r4, #32]
 800460e:	b11b      	cbz	r3, 8004618 <__sinit+0x14>
 8004610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004614:	f7ff bff0 	b.w	80045f8 <__sfp_lock_release>
 8004618:	4b04      	ldr	r3, [pc, #16]	; (800462c <__sinit+0x28>)
 800461a:	6223      	str	r3, [r4, #32]
 800461c:	4b04      	ldr	r3, [pc, #16]	; (8004630 <__sinit+0x2c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1f5      	bne.n	8004610 <__sinit+0xc>
 8004624:	f7ff ffc4 	bl	80045b0 <global_stdio_init.part.0>
 8004628:	e7f2      	b.n	8004610 <__sinit+0xc>
 800462a:	bf00      	nop
 800462c:	08004571 	.word	0x08004571
 8004630:	200002f8 	.word	0x200002f8

08004634 <_fwalk_sglue>:
 8004634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004638:	4607      	mov	r7, r0
 800463a:	4688      	mov	r8, r1
 800463c:	4614      	mov	r4, r2
 800463e:	2600      	movs	r6, #0
 8004640:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004644:	f1b9 0901 	subs.w	r9, r9, #1
 8004648:	d505      	bpl.n	8004656 <_fwalk_sglue+0x22>
 800464a:	6824      	ldr	r4, [r4, #0]
 800464c:	2c00      	cmp	r4, #0
 800464e:	d1f7      	bne.n	8004640 <_fwalk_sglue+0xc>
 8004650:	4630      	mov	r0, r6
 8004652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004656:	89ab      	ldrh	r3, [r5, #12]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d907      	bls.n	800466c <_fwalk_sglue+0x38>
 800465c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004660:	3301      	adds	r3, #1
 8004662:	d003      	beq.n	800466c <_fwalk_sglue+0x38>
 8004664:	4629      	mov	r1, r5
 8004666:	4638      	mov	r0, r7
 8004668:	47c0      	blx	r8
 800466a:	4306      	orrs	r6, r0
 800466c:	3568      	adds	r5, #104	; 0x68
 800466e:	e7e9      	b.n	8004644 <_fwalk_sglue+0x10>

08004670 <iprintf>:
 8004670:	b40f      	push	{r0, r1, r2, r3}
 8004672:	b507      	push	{r0, r1, r2, lr}
 8004674:	4906      	ldr	r1, [pc, #24]	; (8004690 <iprintf+0x20>)
 8004676:	ab04      	add	r3, sp, #16
 8004678:	6808      	ldr	r0, [r1, #0]
 800467a:	f853 2b04 	ldr.w	r2, [r3], #4
 800467e:	6881      	ldr	r1, [r0, #8]
 8004680:	9301      	str	r3, [sp, #4]
 8004682:	f000 f9e7 	bl	8004a54 <_vfiprintf_r>
 8004686:	b003      	add	sp, #12
 8004688:	f85d eb04 	ldr.w	lr, [sp], #4
 800468c:	b004      	add	sp, #16
 800468e:	4770      	bx	lr
 8004690:	20000064 	.word	0x20000064

08004694 <__sread>:
 8004694:	b510      	push	{r4, lr}
 8004696:	460c      	mov	r4, r1
 8004698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800469c:	f000 f868 	bl	8004770 <_read_r>
 80046a0:	2800      	cmp	r0, #0
 80046a2:	bfab      	itete	ge
 80046a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046a6:	89a3      	ldrhlt	r3, [r4, #12]
 80046a8:	181b      	addge	r3, r3, r0
 80046aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046ae:	bfac      	ite	ge
 80046b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80046b2:	81a3      	strhlt	r3, [r4, #12]
 80046b4:	bd10      	pop	{r4, pc}

080046b6 <__swrite>:
 80046b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ba:	461f      	mov	r7, r3
 80046bc:	898b      	ldrh	r3, [r1, #12]
 80046be:	05db      	lsls	r3, r3, #23
 80046c0:	4605      	mov	r5, r0
 80046c2:	460c      	mov	r4, r1
 80046c4:	4616      	mov	r6, r2
 80046c6:	d505      	bpl.n	80046d4 <__swrite+0x1e>
 80046c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046cc:	2302      	movs	r3, #2
 80046ce:	2200      	movs	r2, #0
 80046d0:	f000 f83c 	bl	800474c <_lseek_r>
 80046d4:	89a3      	ldrh	r3, [r4, #12]
 80046d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046de:	81a3      	strh	r3, [r4, #12]
 80046e0:	4632      	mov	r2, r6
 80046e2:	463b      	mov	r3, r7
 80046e4:	4628      	mov	r0, r5
 80046e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046ea:	f000 b853 	b.w	8004794 <_write_r>

080046ee <__sseek>:
 80046ee:	b510      	push	{r4, lr}
 80046f0:	460c      	mov	r4, r1
 80046f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046f6:	f000 f829 	bl	800474c <_lseek_r>
 80046fa:	1c43      	adds	r3, r0, #1
 80046fc:	89a3      	ldrh	r3, [r4, #12]
 80046fe:	bf15      	itete	ne
 8004700:	6560      	strne	r0, [r4, #84]	; 0x54
 8004702:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004706:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800470a:	81a3      	strheq	r3, [r4, #12]
 800470c:	bf18      	it	ne
 800470e:	81a3      	strhne	r3, [r4, #12]
 8004710:	bd10      	pop	{r4, pc}

08004712 <__sclose>:
 8004712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004716:	f000 b809 	b.w	800472c <_close_r>

0800471a <memset>:
 800471a:	4402      	add	r2, r0
 800471c:	4603      	mov	r3, r0
 800471e:	4293      	cmp	r3, r2
 8004720:	d100      	bne.n	8004724 <memset+0xa>
 8004722:	4770      	bx	lr
 8004724:	f803 1b01 	strb.w	r1, [r3], #1
 8004728:	e7f9      	b.n	800471e <memset+0x4>
	...

0800472c <_close_r>:
 800472c:	b538      	push	{r3, r4, r5, lr}
 800472e:	4d06      	ldr	r5, [pc, #24]	; (8004748 <_close_r+0x1c>)
 8004730:	2300      	movs	r3, #0
 8004732:	4604      	mov	r4, r0
 8004734:	4608      	mov	r0, r1
 8004736:	602b      	str	r3, [r5, #0]
 8004738:	f7fc f95f 	bl	80009fa <_close>
 800473c:	1c43      	adds	r3, r0, #1
 800473e:	d102      	bne.n	8004746 <_close_r+0x1a>
 8004740:	682b      	ldr	r3, [r5, #0]
 8004742:	b103      	cbz	r3, 8004746 <_close_r+0x1a>
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	bd38      	pop	{r3, r4, r5, pc}
 8004748:	200002fc 	.word	0x200002fc

0800474c <_lseek_r>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	4d07      	ldr	r5, [pc, #28]	; (800476c <_lseek_r+0x20>)
 8004750:	4604      	mov	r4, r0
 8004752:	4608      	mov	r0, r1
 8004754:	4611      	mov	r1, r2
 8004756:	2200      	movs	r2, #0
 8004758:	602a      	str	r2, [r5, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	f7fc f974 	bl	8000a48 <_lseek>
 8004760:	1c43      	adds	r3, r0, #1
 8004762:	d102      	bne.n	800476a <_lseek_r+0x1e>
 8004764:	682b      	ldr	r3, [r5, #0]
 8004766:	b103      	cbz	r3, 800476a <_lseek_r+0x1e>
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	bd38      	pop	{r3, r4, r5, pc}
 800476c:	200002fc 	.word	0x200002fc

08004770 <_read_r>:
 8004770:	b538      	push	{r3, r4, r5, lr}
 8004772:	4d07      	ldr	r5, [pc, #28]	; (8004790 <_read_r+0x20>)
 8004774:	4604      	mov	r4, r0
 8004776:	4608      	mov	r0, r1
 8004778:	4611      	mov	r1, r2
 800477a:	2200      	movs	r2, #0
 800477c:	602a      	str	r2, [r5, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	f7fc f902 	bl	8000988 <_read>
 8004784:	1c43      	adds	r3, r0, #1
 8004786:	d102      	bne.n	800478e <_read_r+0x1e>
 8004788:	682b      	ldr	r3, [r5, #0]
 800478a:	b103      	cbz	r3, 800478e <_read_r+0x1e>
 800478c:	6023      	str	r3, [r4, #0]
 800478e:	bd38      	pop	{r3, r4, r5, pc}
 8004790:	200002fc 	.word	0x200002fc

08004794 <_write_r>:
 8004794:	b538      	push	{r3, r4, r5, lr}
 8004796:	4d07      	ldr	r5, [pc, #28]	; (80047b4 <_write_r+0x20>)
 8004798:	4604      	mov	r4, r0
 800479a:	4608      	mov	r0, r1
 800479c:	4611      	mov	r1, r2
 800479e:	2200      	movs	r2, #0
 80047a0:	602a      	str	r2, [r5, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	f7fc f90d 	bl	80009c2 <_write>
 80047a8:	1c43      	adds	r3, r0, #1
 80047aa:	d102      	bne.n	80047b2 <_write_r+0x1e>
 80047ac:	682b      	ldr	r3, [r5, #0]
 80047ae:	b103      	cbz	r3, 80047b2 <_write_r+0x1e>
 80047b0:	6023      	str	r3, [r4, #0]
 80047b2:	bd38      	pop	{r3, r4, r5, pc}
 80047b4:	200002fc 	.word	0x200002fc

080047b8 <__errno>:
 80047b8:	4b01      	ldr	r3, [pc, #4]	; (80047c0 <__errno+0x8>)
 80047ba:	6818      	ldr	r0, [r3, #0]
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	20000064 	.word	0x20000064

080047c4 <__libc_init_array>:
 80047c4:	b570      	push	{r4, r5, r6, lr}
 80047c6:	4d0d      	ldr	r5, [pc, #52]	; (80047fc <__libc_init_array+0x38>)
 80047c8:	4c0d      	ldr	r4, [pc, #52]	; (8004800 <__libc_init_array+0x3c>)
 80047ca:	1b64      	subs	r4, r4, r5
 80047cc:	10a4      	asrs	r4, r4, #2
 80047ce:	2600      	movs	r6, #0
 80047d0:	42a6      	cmp	r6, r4
 80047d2:	d109      	bne.n	80047e8 <__libc_init_array+0x24>
 80047d4:	4d0b      	ldr	r5, [pc, #44]	; (8004804 <__libc_init_array+0x40>)
 80047d6:	4c0c      	ldr	r4, [pc, #48]	; (8004808 <__libc_init_array+0x44>)
 80047d8:	f000 fdbe 	bl	8005358 <_init>
 80047dc:	1b64      	subs	r4, r4, r5
 80047de:	10a4      	asrs	r4, r4, #2
 80047e0:	2600      	movs	r6, #0
 80047e2:	42a6      	cmp	r6, r4
 80047e4:	d105      	bne.n	80047f2 <__libc_init_array+0x2e>
 80047e6:	bd70      	pop	{r4, r5, r6, pc}
 80047e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ec:	4798      	blx	r3
 80047ee:	3601      	adds	r6, #1
 80047f0:	e7ee      	b.n	80047d0 <__libc_init_array+0xc>
 80047f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047f6:	4798      	blx	r3
 80047f8:	3601      	adds	r6, #1
 80047fa:	e7f2      	b.n	80047e2 <__libc_init_array+0x1e>
 80047fc:	08005418 	.word	0x08005418
 8004800:	08005418 	.word	0x08005418
 8004804:	08005418 	.word	0x08005418
 8004808:	0800541c 	.word	0x0800541c

0800480c <__retarget_lock_acquire_recursive>:
 800480c:	4770      	bx	lr

0800480e <__retarget_lock_release_recursive>:
 800480e:	4770      	bx	lr

08004810 <_free_r>:
 8004810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004812:	2900      	cmp	r1, #0
 8004814:	d044      	beq.n	80048a0 <_free_r+0x90>
 8004816:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800481a:	9001      	str	r0, [sp, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	f1a1 0404 	sub.w	r4, r1, #4
 8004822:	bfb8      	it	lt
 8004824:	18e4      	addlt	r4, r4, r3
 8004826:	f000 f8df 	bl	80049e8 <__malloc_lock>
 800482a:	4a1e      	ldr	r2, [pc, #120]	; (80048a4 <_free_r+0x94>)
 800482c:	9801      	ldr	r0, [sp, #4]
 800482e:	6813      	ldr	r3, [r2, #0]
 8004830:	b933      	cbnz	r3, 8004840 <_free_r+0x30>
 8004832:	6063      	str	r3, [r4, #4]
 8004834:	6014      	str	r4, [r2, #0]
 8004836:	b003      	add	sp, #12
 8004838:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800483c:	f000 b8da 	b.w	80049f4 <__malloc_unlock>
 8004840:	42a3      	cmp	r3, r4
 8004842:	d908      	bls.n	8004856 <_free_r+0x46>
 8004844:	6825      	ldr	r5, [r4, #0]
 8004846:	1961      	adds	r1, r4, r5
 8004848:	428b      	cmp	r3, r1
 800484a:	bf01      	itttt	eq
 800484c:	6819      	ldreq	r1, [r3, #0]
 800484e:	685b      	ldreq	r3, [r3, #4]
 8004850:	1949      	addeq	r1, r1, r5
 8004852:	6021      	streq	r1, [r4, #0]
 8004854:	e7ed      	b.n	8004832 <_free_r+0x22>
 8004856:	461a      	mov	r2, r3
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	b10b      	cbz	r3, 8004860 <_free_r+0x50>
 800485c:	42a3      	cmp	r3, r4
 800485e:	d9fa      	bls.n	8004856 <_free_r+0x46>
 8004860:	6811      	ldr	r1, [r2, #0]
 8004862:	1855      	adds	r5, r2, r1
 8004864:	42a5      	cmp	r5, r4
 8004866:	d10b      	bne.n	8004880 <_free_r+0x70>
 8004868:	6824      	ldr	r4, [r4, #0]
 800486a:	4421      	add	r1, r4
 800486c:	1854      	adds	r4, r2, r1
 800486e:	42a3      	cmp	r3, r4
 8004870:	6011      	str	r1, [r2, #0]
 8004872:	d1e0      	bne.n	8004836 <_free_r+0x26>
 8004874:	681c      	ldr	r4, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	6053      	str	r3, [r2, #4]
 800487a:	440c      	add	r4, r1
 800487c:	6014      	str	r4, [r2, #0]
 800487e:	e7da      	b.n	8004836 <_free_r+0x26>
 8004880:	d902      	bls.n	8004888 <_free_r+0x78>
 8004882:	230c      	movs	r3, #12
 8004884:	6003      	str	r3, [r0, #0]
 8004886:	e7d6      	b.n	8004836 <_free_r+0x26>
 8004888:	6825      	ldr	r5, [r4, #0]
 800488a:	1961      	adds	r1, r4, r5
 800488c:	428b      	cmp	r3, r1
 800488e:	bf04      	itt	eq
 8004890:	6819      	ldreq	r1, [r3, #0]
 8004892:	685b      	ldreq	r3, [r3, #4]
 8004894:	6063      	str	r3, [r4, #4]
 8004896:	bf04      	itt	eq
 8004898:	1949      	addeq	r1, r1, r5
 800489a:	6021      	streq	r1, [r4, #0]
 800489c:	6054      	str	r4, [r2, #4]
 800489e:	e7ca      	b.n	8004836 <_free_r+0x26>
 80048a0:	b003      	add	sp, #12
 80048a2:	bd30      	pop	{r4, r5, pc}
 80048a4:	20000304 	.word	0x20000304

080048a8 <sbrk_aligned>:
 80048a8:	b570      	push	{r4, r5, r6, lr}
 80048aa:	4e0e      	ldr	r6, [pc, #56]	; (80048e4 <sbrk_aligned+0x3c>)
 80048ac:	460c      	mov	r4, r1
 80048ae:	6831      	ldr	r1, [r6, #0]
 80048b0:	4605      	mov	r5, r0
 80048b2:	b911      	cbnz	r1, 80048ba <sbrk_aligned+0x12>
 80048b4:	f000 fcbc 	bl	8005230 <_sbrk_r>
 80048b8:	6030      	str	r0, [r6, #0]
 80048ba:	4621      	mov	r1, r4
 80048bc:	4628      	mov	r0, r5
 80048be:	f000 fcb7 	bl	8005230 <_sbrk_r>
 80048c2:	1c43      	adds	r3, r0, #1
 80048c4:	d00a      	beq.n	80048dc <sbrk_aligned+0x34>
 80048c6:	1cc4      	adds	r4, r0, #3
 80048c8:	f024 0403 	bic.w	r4, r4, #3
 80048cc:	42a0      	cmp	r0, r4
 80048ce:	d007      	beq.n	80048e0 <sbrk_aligned+0x38>
 80048d0:	1a21      	subs	r1, r4, r0
 80048d2:	4628      	mov	r0, r5
 80048d4:	f000 fcac 	bl	8005230 <_sbrk_r>
 80048d8:	3001      	adds	r0, #1
 80048da:	d101      	bne.n	80048e0 <sbrk_aligned+0x38>
 80048dc:	f04f 34ff 	mov.w	r4, #4294967295
 80048e0:	4620      	mov	r0, r4
 80048e2:	bd70      	pop	{r4, r5, r6, pc}
 80048e4:	20000308 	.word	0x20000308

080048e8 <_malloc_r>:
 80048e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048ec:	1ccd      	adds	r5, r1, #3
 80048ee:	f025 0503 	bic.w	r5, r5, #3
 80048f2:	3508      	adds	r5, #8
 80048f4:	2d0c      	cmp	r5, #12
 80048f6:	bf38      	it	cc
 80048f8:	250c      	movcc	r5, #12
 80048fa:	2d00      	cmp	r5, #0
 80048fc:	4607      	mov	r7, r0
 80048fe:	db01      	blt.n	8004904 <_malloc_r+0x1c>
 8004900:	42a9      	cmp	r1, r5
 8004902:	d905      	bls.n	8004910 <_malloc_r+0x28>
 8004904:	230c      	movs	r3, #12
 8004906:	603b      	str	r3, [r7, #0]
 8004908:	2600      	movs	r6, #0
 800490a:	4630      	mov	r0, r6
 800490c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004910:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80049e4 <_malloc_r+0xfc>
 8004914:	f000 f868 	bl	80049e8 <__malloc_lock>
 8004918:	f8d8 3000 	ldr.w	r3, [r8]
 800491c:	461c      	mov	r4, r3
 800491e:	bb5c      	cbnz	r4, 8004978 <_malloc_r+0x90>
 8004920:	4629      	mov	r1, r5
 8004922:	4638      	mov	r0, r7
 8004924:	f7ff ffc0 	bl	80048a8 <sbrk_aligned>
 8004928:	1c43      	adds	r3, r0, #1
 800492a:	4604      	mov	r4, r0
 800492c:	d155      	bne.n	80049da <_malloc_r+0xf2>
 800492e:	f8d8 4000 	ldr.w	r4, [r8]
 8004932:	4626      	mov	r6, r4
 8004934:	2e00      	cmp	r6, #0
 8004936:	d145      	bne.n	80049c4 <_malloc_r+0xdc>
 8004938:	2c00      	cmp	r4, #0
 800493a:	d048      	beq.n	80049ce <_malloc_r+0xe6>
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	4631      	mov	r1, r6
 8004940:	4638      	mov	r0, r7
 8004942:	eb04 0903 	add.w	r9, r4, r3
 8004946:	f000 fc73 	bl	8005230 <_sbrk_r>
 800494a:	4581      	cmp	r9, r0
 800494c:	d13f      	bne.n	80049ce <_malloc_r+0xe6>
 800494e:	6821      	ldr	r1, [r4, #0]
 8004950:	1a6d      	subs	r5, r5, r1
 8004952:	4629      	mov	r1, r5
 8004954:	4638      	mov	r0, r7
 8004956:	f7ff ffa7 	bl	80048a8 <sbrk_aligned>
 800495a:	3001      	adds	r0, #1
 800495c:	d037      	beq.n	80049ce <_malloc_r+0xe6>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	442b      	add	r3, r5
 8004962:	6023      	str	r3, [r4, #0]
 8004964:	f8d8 3000 	ldr.w	r3, [r8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d038      	beq.n	80049de <_malloc_r+0xf6>
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	42a2      	cmp	r2, r4
 8004970:	d12b      	bne.n	80049ca <_malloc_r+0xe2>
 8004972:	2200      	movs	r2, #0
 8004974:	605a      	str	r2, [r3, #4]
 8004976:	e00f      	b.n	8004998 <_malloc_r+0xb0>
 8004978:	6822      	ldr	r2, [r4, #0]
 800497a:	1b52      	subs	r2, r2, r5
 800497c:	d41f      	bmi.n	80049be <_malloc_r+0xd6>
 800497e:	2a0b      	cmp	r2, #11
 8004980:	d917      	bls.n	80049b2 <_malloc_r+0xca>
 8004982:	1961      	adds	r1, r4, r5
 8004984:	42a3      	cmp	r3, r4
 8004986:	6025      	str	r5, [r4, #0]
 8004988:	bf18      	it	ne
 800498a:	6059      	strne	r1, [r3, #4]
 800498c:	6863      	ldr	r3, [r4, #4]
 800498e:	bf08      	it	eq
 8004990:	f8c8 1000 	streq.w	r1, [r8]
 8004994:	5162      	str	r2, [r4, r5]
 8004996:	604b      	str	r3, [r1, #4]
 8004998:	4638      	mov	r0, r7
 800499a:	f104 060b 	add.w	r6, r4, #11
 800499e:	f000 f829 	bl	80049f4 <__malloc_unlock>
 80049a2:	f026 0607 	bic.w	r6, r6, #7
 80049a6:	1d23      	adds	r3, r4, #4
 80049a8:	1af2      	subs	r2, r6, r3
 80049aa:	d0ae      	beq.n	800490a <_malloc_r+0x22>
 80049ac:	1b9b      	subs	r3, r3, r6
 80049ae:	50a3      	str	r3, [r4, r2]
 80049b0:	e7ab      	b.n	800490a <_malloc_r+0x22>
 80049b2:	42a3      	cmp	r3, r4
 80049b4:	6862      	ldr	r2, [r4, #4]
 80049b6:	d1dd      	bne.n	8004974 <_malloc_r+0x8c>
 80049b8:	f8c8 2000 	str.w	r2, [r8]
 80049bc:	e7ec      	b.n	8004998 <_malloc_r+0xb0>
 80049be:	4623      	mov	r3, r4
 80049c0:	6864      	ldr	r4, [r4, #4]
 80049c2:	e7ac      	b.n	800491e <_malloc_r+0x36>
 80049c4:	4634      	mov	r4, r6
 80049c6:	6876      	ldr	r6, [r6, #4]
 80049c8:	e7b4      	b.n	8004934 <_malloc_r+0x4c>
 80049ca:	4613      	mov	r3, r2
 80049cc:	e7cc      	b.n	8004968 <_malloc_r+0x80>
 80049ce:	230c      	movs	r3, #12
 80049d0:	603b      	str	r3, [r7, #0]
 80049d2:	4638      	mov	r0, r7
 80049d4:	f000 f80e 	bl	80049f4 <__malloc_unlock>
 80049d8:	e797      	b.n	800490a <_malloc_r+0x22>
 80049da:	6025      	str	r5, [r4, #0]
 80049dc:	e7dc      	b.n	8004998 <_malloc_r+0xb0>
 80049de:	605b      	str	r3, [r3, #4]
 80049e0:	deff      	udf	#255	; 0xff
 80049e2:	bf00      	nop
 80049e4:	20000304 	.word	0x20000304

080049e8 <__malloc_lock>:
 80049e8:	4801      	ldr	r0, [pc, #4]	; (80049f0 <__malloc_lock+0x8>)
 80049ea:	f7ff bf0f 	b.w	800480c <__retarget_lock_acquire_recursive>
 80049ee:	bf00      	nop
 80049f0:	20000300 	.word	0x20000300

080049f4 <__malloc_unlock>:
 80049f4:	4801      	ldr	r0, [pc, #4]	; (80049fc <__malloc_unlock+0x8>)
 80049f6:	f7ff bf0a 	b.w	800480e <__retarget_lock_release_recursive>
 80049fa:	bf00      	nop
 80049fc:	20000300 	.word	0x20000300

08004a00 <__sfputc_r>:
 8004a00:	6893      	ldr	r3, [r2, #8]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	b410      	push	{r4}
 8004a08:	6093      	str	r3, [r2, #8]
 8004a0a:	da08      	bge.n	8004a1e <__sfputc_r+0x1e>
 8004a0c:	6994      	ldr	r4, [r2, #24]
 8004a0e:	42a3      	cmp	r3, r4
 8004a10:	db01      	blt.n	8004a16 <__sfputc_r+0x16>
 8004a12:	290a      	cmp	r1, #10
 8004a14:	d103      	bne.n	8004a1e <__sfputc_r+0x1e>
 8004a16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a1a:	f000 bb73 	b.w	8005104 <__swbuf_r>
 8004a1e:	6813      	ldr	r3, [r2, #0]
 8004a20:	1c58      	adds	r0, r3, #1
 8004a22:	6010      	str	r0, [r2, #0]
 8004a24:	7019      	strb	r1, [r3, #0]
 8004a26:	4608      	mov	r0, r1
 8004a28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <__sfputs_r>:
 8004a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a30:	4606      	mov	r6, r0
 8004a32:	460f      	mov	r7, r1
 8004a34:	4614      	mov	r4, r2
 8004a36:	18d5      	adds	r5, r2, r3
 8004a38:	42ac      	cmp	r4, r5
 8004a3a:	d101      	bne.n	8004a40 <__sfputs_r+0x12>
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	e007      	b.n	8004a50 <__sfputs_r+0x22>
 8004a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a44:	463a      	mov	r2, r7
 8004a46:	4630      	mov	r0, r6
 8004a48:	f7ff ffda 	bl	8004a00 <__sfputc_r>
 8004a4c:	1c43      	adds	r3, r0, #1
 8004a4e:	d1f3      	bne.n	8004a38 <__sfputs_r+0xa>
 8004a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a54 <_vfiprintf_r>:
 8004a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a58:	460d      	mov	r5, r1
 8004a5a:	b09d      	sub	sp, #116	; 0x74
 8004a5c:	4614      	mov	r4, r2
 8004a5e:	4698      	mov	r8, r3
 8004a60:	4606      	mov	r6, r0
 8004a62:	b118      	cbz	r0, 8004a6c <_vfiprintf_r+0x18>
 8004a64:	6a03      	ldr	r3, [r0, #32]
 8004a66:	b90b      	cbnz	r3, 8004a6c <_vfiprintf_r+0x18>
 8004a68:	f7ff fdcc 	bl	8004604 <__sinit>
 8004a6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a6e:	07d9      	lsls	r1, r3, #31
 8004a70:	d405      	bmi.n	8004a7e <_vfiprintf_r+0x2a>
 8004a72:	89ab      	ldrh	r3, [r5, #12]
 8004a74:	059a      	lsls	r2, r3, #22
 8004a76:	d402      	bmi.n	8004a7e <_vfiprintf_r+0x2a>
 8004a78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a7a:	f7ff fec7 	bl	800480c <__retarget_lock_acquire_recursive>
 8004a7e:	89ab      	ldrh	r3, [r5, #12]
 8004a80:	071b      	lsls	r3, r3, #28
 8004a82:	d501      	bpl.n	8004a88 <_vfiprintf_r+0x34>
 8004a84:	692b      	ldr	r3, [r5, #16]
 8004a86:	b99b      	cbnz	r3, 8004ab0 <_vfiprintf_r+0x5c>
 8004a88:	4629      	mov	r1, r5
 8004a8a:	4630      	mov	r0, r6
 8004a8c:	f000 fb78 	bl	8005180 <__swsetup_r>
 8004a90:	b170      	cbz	r0, 8004ab0 <_vfiprintf_r+0x5c>
 8004a92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a94:	07dc      	lsls	r4, r3, #31
 8004a96:	d504      	bpl.n	8004aa2 <_vfiprintf_r+0x4e>
 8004a98:	f04f 30ff 	mov.w	r0, #4294967295
 8004a9c:	b01d      	add	sp, #116	; 0x74
 8004a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa2:	89ab      	ldrh	r3, [r5, #12]
 8004aa4:	0598      	lsls	r0, r3, #22
 8004aa6:	d4f7      	bmi.n	8004a98 <_vfiprintf_r+0x44>
 8004aa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004aaa:	f7ff feb0 	bl	800480e <__retarget_lock_release_recursive>
 8004aae:	e7f3      	b.n	8004a98 <_vfiprintf_r+0x44>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ab4:	2320      	movs	r3, #32
 8004ab6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004aba:	f8cd 800c 	str.w	r8, [sp, #12]
 8004abe:	2330      	movs	r3, #48	; 0x30
 8004ac0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004c74 <_vfiprintf_r+0x220>
 8004ac4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ac8:	f04f 0901 	mov.w	r9, #1
 8004acc:	4623      	mov	r3, r4
 8004ace:	469a      	mov	sl, r3
 8004ad0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ad4:	b10a      	cbz	r2, 8004ada <_vfiprintf_r+0x86>
 8004ad6:	2a25      	cmp	r2, #37	; 0x25
 8004ad8:	d1f9      	bne.n	8004ace <_vfiprintf_r+0x7a>
 8004ada:	ebba 0b04 	subs.w	fp, sl, r4
 8004ade:	d00b      	beq.n	8004af8 <_vfiprintf_r+0xa4>
 8004ae0:	465b      	mov	r3, fp
 8004ae2:	4622      	mov	r2, r4
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	4630      	mov	r0, r6
 8004ae8:	f7ff ffa1 	bl	8004a2e <__sfputs_r>
 8004aec:	3001      	adds	r0, #1
 8004aee:	f000 80a9 	beq.w	8004c44 <_vfiprintf_r+0x1f0>
 8004af2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004af4:	445a      	add	r2, fp
 8004af6:	9209      	str	r2, [sp, #36]	; 0x24
 8004af8:	f89a 3000 	ldrb.w	r3, [sl]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 80a1 	beq.w	8004c44 <_vfiprintf_r+0x1f0>
 8004b02:	2300      	movs	r3, #0
 8004b04:	f04f 32ff 	mov.w	r2, #4294967295
 8004b08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b0c:	f10a 0a01 	add.w	sl, sl, #1
 8004b10:	9304      	str	r3, [sp, #16]
 8004b12:	9307      	str	r3, [sp, #28]
 8004b14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b18:	931a      	str	r3, [sp, #104]	; 0x68
 8004b1a:	4654      	mov	r4, sl
 8004b1c:	2205      	movs	r2, #5
 8004b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b22:	4854      	ldr	r0, [pc, #336]	; (8004c74 <_vfiprintf_r+0x220>)
 8004b24:	f7fb fb7c 	bl	8000220 <memchr>
 8004b28:	9a04      	ldr	r2, [sp, #16]
 8004b2a:	b9d8      	cbnz	r0, 8004b64 <_vfiprintf_r+0x110>
 8004b2c:	06d1      	lsls	r1, r2, #27
 8004b2e:	bf44      	itt	mi
 8004b30:	2320      	movmi	r3, #32
 8004b32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b36:	0713      	lsls	r3, r2, #28
 8004b38:	bf44      	itt	mi
 8004b3a:	232b      	movmi	r3, #43	; 0x2b
 8004b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b40:	f89a 3000 	ldrb.w	r3, [sl]
 8004b44:	2b2a      	cmp	r3, #42	; 0x2a
 8004b46:	d015      	beq.n	8004b74 <_vfiprintf_r+0x120>
 8004b48:	9a07      	ldr	r2, [sp, #28]
 8004b4a:	4654      	mov	r4, sl
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	f04f 0c0a 	mov.w	ip, #10
 8004b52:	4621      	mov	r1, r4
 8004b54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b58:	3b30      	subs	r3, #48	; 0x30
 8004b5a:	2b09      	cmp	r3, #9
 8004b5c:	d94d      	bls.n	8004bfa <_vfiprintf_r+0x1a6>
 8004b5e:	b1b0      	cbz	r0, 8004b8e <_vfiprintf_r+0x13a>
 8004b60:	9207      	str	r2, [sp, #28]
 8004b62:	e014      	b.n	8004b8e <_vfiprintf_r+0x13a>
 8004b64:	eba0 0308 	sub.w	r3, r0, r8
 8004b68:	fa09 f303 	lsl.w	r3, r9, r3
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	9304      	str	r3, [sp, #16]
 8004b70:	46a2      	mov	sl, r4
 8004b72:	e7d2      	b.n	8004b1a <_vfiprintf_r+0xc6>
 8004b74:	9b03      	ldr	r3, [sp, #12]
 8004b76:	1d19      	adds	r1, r3, #4
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	9103      	str	r1, [sp, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	bfbb      	ittet	lt
 8004b80:	425b      	neglt	r3, r3
 8004b82:	f042 0202 	orrlt.w	r2, r2, #2
 8004b86:	9307      	strge	r3, [sp, #28]
 8004b88:	9307      	strlt	r3, [sp, #28]
 8004b8a:	bfb8      	it	lt
 8004b8c:	9204      	strlt	r2, [sp, #16]
 8004b8e:	7823      	ldrb	r3, [r4, #0]
 8004b90:	2b2e      	cmp	r3, #46	; 0x2e
 8004b92:	d10c      	bne.n	8004bae <_vfiprintf_r+0x15a>
 8004b94:	7863      	ldrb	r3, [r4, #1]
 8004b96:	2b2a      	cmp	r3, #42	; 0x2a
 8004b98:	d134      	bne.n	8004c04 <_vfiprintf_r+0x1b0>
 8004b9a:	9b03      	ldr	r3, [sp, #12]
 8004b9c:	1d1a      	adds	r2, r3, #4
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	9203      	str	r2, [sp, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	bfb8      	it	lt
 8004ba6:	f04f 33ff 	movlt.w	r3, #4294967295
 8004baa:	3402      	adds	r4, #2
 8004bac:	9305      	str	r3, [sp, #20]
 8004bae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004c84 <_vfiprintf_r+0x230>
 8004bb2:	7821      	ldrb	r1, [r4, #0]
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	4650      	mov	r0, sl
 8004bb8:	f7fb fb32 	bl	8000220 <memchr>
 8004bbc:	b138      	cbz	r0, 8004bce <_vfiprintf_r+0x17a>
 8004bbe:	9b04      	ldr	r3, [sp, #16]
 8004bc0:	eba0 000a 	sub.w	r0, r0, sl
 8004bc4:	2240      	movs	r2, #64	; 0x40
 8004bc6:	4082      	lsls	r2, r0
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	3401      	adds	r4, #1
 8004bcc:	9304      	str	r3, [sp, #16]
 8004bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bd2:	4829      	ldr	r0, [pc, #164]	; (8004c78 <_vfiprintf_r+0x224>)
 8004bd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bd8:	2206      	movs	r2, #6
 8004bda:	f7fb fb21 	bl	8000220 <memchr>
 8004bde:	2800      	cmp	r0, #0
 8004be0:	d03f      	beq.n	8004c62 <_vfiprintf_r+0x20e>
 8004be2:	4b26      	ldr	r3, [pc, #152]	; (8004c7c <_vfiprintf_r+0x228>)
 8004be4:	bb1b      	cbnz	r3, 8004c2e <_vfiprintf_r+0x1da>
 8004be6:	9b03      	ldr	r3, [sp, #12]
 8004be8:	3307      	adds	r3, #7
 8004bea:	f023 0307 	bic.w	r3, r3, #7
 8004bee:	3308      	adds	r3, #8
 8004bf0:	9303      	str	r3, [sp, #12]
 8004bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bf4:	443b      	add	r3, r7
 8004bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8004bf8:	e768      	b.n	8004acc <_vfiprintf_r+0x78>
 8004bfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bfe:	460c      	mov	r4, r1
 8004c00:	2001      	movs	r0, #1
 8004c02:	e7a6      	b.n	8004b52 <_vfiprintf_r+0xfe>
 8004c04:	2300      	movs	r3, #0
 8004c06:	3401      	adds	r4, #1
 8004c08:	9305      	str	r3, [sp, #20]
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	f04f 0c0a 	mov.w	ip, #10
 8004c10:	4620      	mov	r0, r4
 8004c12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c16:	3a30      	subs	r2, #48	; 0x30
 8004c18:	2a09      	cmp	r2, #9
 8004c1a:	d903      	bls.n	8004c24 <_vfiprintf_r+0x1d0>
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0c6      	beq.n	8004bae <_vfiprintf_r+0x15a>
 8004c20:	9105      	str	r1, [sp, #20]
 8004c22:	e7c4      	b.n	8004bae <_vfiprintf_r+0x15a>
 8004c24:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c28:	4604      	mov	r4, r0
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e7f0      	b.n	8004c10 <_vfiprintf_r+0x1bc>
 8004c2e:	ab03      	add	r3, sp, #12
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	462a      	mov	r2, r5
 8004c34:	4b12      	ldr	r3, [pc, #72]	; (8004c80 <_vfiprintf_r+0x22c>)
 8004c36:	a904      	add	r1, sp, #16
 8004c38:	4630      	mov	r0, r6
 8004c3a:	f3af 8000 	nop.w
 8004c3e:	4607      	mov	r7, r0
 8004c40:	1c78      	adds	r0, r7, #1
 8004c42:	d1d6      	bne.n	8004bf2 <_vfiprintf_r+0x19e>
 8004c44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c46:	07d9      	lsls	r1, r3, #31
 8004c48:	d405      	bmi.n	8004c56 <_vfiprintf_r+0x202>
 8004c4a:	89ab      	ldrh	r3, [r5, #12]
 8004c4c:	059a      	lsls	r2, r3, #22
 8004c4e:	d402      	bmi.n	8004c56 <_vfiprintf_r+0x202>
 8004c50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c52:	f7ff fddc 	bl	800480e <__retarget_lock_release_recursive>
 8004c56:	89ab      	ldrh	r3, [r5, #12]
 8004c58:	065b      	lsls	r3, r3, #25
 8004c5a:	f53f af1d 	bmi.w	8004a98 <_vfiprintf_r+0x44>
 8004c5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c60:	e71c      	b.n	8004a9c <_vfiprintf_r+0x48>
 8004c62:	ab03      	add	r3, sp, #12
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	462a      	mov	r2, r5
 8004c68:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <_vfiprintf_r+0x22c>)
 8004c6a:	a904      	add	r1, sp, #16
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	f000 f879 	bl	8004d64 <_printf_i>
 8004c72:	e7e4      	b.n	8004c3e <_vfiprintf_r+0x1ea>
 8004c74:	080053dc 	.word	0x080053dc
 8004c78:	080053e6 	.word	0x080053e6
 8004c7c:	00000000 	.word	0x00000000
 8004c80:	08004a2f 	.word	0x08004a2f
 8004c84:	080053e2 	.word	0x080053e2

08004c88 <_printf_common>:
 8004c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c8c:	4616      	mov	r6, r2
 8004c8e:	4699      	mov	r9, r3
 8004c90:	688a      	ldr	r2, [r1, #8]
 8004c92:	690b      	ldr	r3, [r1, #16]
 8004c94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	bfb8      	it	lt
 8004c9c:	4613      	movlt	r3, r2
 8004c9e:	6033      	str	r3, [r6, #0]
 8004ca0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ca4:	4607      	mov	r7, r0
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	b10a      	cbz	r2, 8004cae <_printf_common+0x26>
 8004caa:	3301      	adds	r3, #1
 8004cac:	6033      	str	r3, [r6, #0]
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	0699      	lsls	r1, r3, #26
 8004cb2:	bf42      	ittt	mi
 8004cb4:	6833      	ldrmi	r3, [r6, #0]
 8004cb6:	3302      	addmi	r3, #2
 8004cb8:	6033      	strmi	r3, [r6, #0]
 8004cba:	6825      	ldr	r5, [r4, #0]
 8004cbc:	f015 0506 	ands.w	r5, r5, #6
 8004cc0:	d106      	bne.n	8004cd0 <_printf_common+0x48>
 8004cc2:	f104 0a19 	add.w	sl, r4, #25
 8004cc6:	68e3      	ldr	r3, [r4, #12]
 8004cc8:	6832      	ldr	r2, [r6, #0]
 8004cca:	1a9b      	subs	r3, r3, r2
 8004ccc:	42ab      	cmp	r3, r5
 8004cce:	dc26      	bgt.n	8004d1e <_printf_common+0x96>
 8004cd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cd4:	1e13      	subs	r3, r2, #0
 8004cd6:	6822      	ldr	r2, [r4, #0]
 8004cd8:	bf18      	it	ne
 8004cda:	2301      	movne	r3, #1
 8004cdc:	0692      	lsls	r2, r2, #26
 8004cde:	d42b      	bmi.n	8004d38 <_printf_common+0xb0>
 8004ce0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ce4:	4649      	mov	r1, r9
 8004ce6:	4638      	mov	r0, r7
 8004ce8:	47c0      	blx	r8
 8004cea:	3001      	adds	r0, #1
 8004cec:	d01e      	beq.n	8004d2c <_printf_common+0xa4>
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	6922      	ldr	r2, [r4, #16]
 8004cf2:	f003 0306 	and.w	r3, r3, #6
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	bf02      	ittt	eq
 8004cfa:	68e5      	ldreq	r5, [r4, #12]
 8004cfc:	6833      	ldreq	r3, [r6, #0]
 8004cfe:	1aed      	subeq	r5, r5, r3
 8004d00:	68a3      	ldr	r3, [r4, #8]
 8004d02:	bf0c      	ite	eq
 8004d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d08:	2500      	movne	r5, #0
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	bfc4      	itt	gt
 8004d0e:	1a9b      	subgt	r3, r3, r2
 8004d10:	18ed      	addgt	r5, r5, r3
 8004d12:	2600      	movs	r6, #0
 8004d14:	341a      	adds	r4, #26
 8004d16:	42b5      	cmp	r5, r6
 8004d18:	d11a      	bne.n	8004d50 <_printf_common+0xc8>
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	e008      	b.n	8004d30 <_printf_common+0xa8>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	4652      	mov	r2, sl
 8004d22:	4649      	mov	r1, r9
 8004d24:	4638      	mov	r0, r7
 8004d26:	47c0      	blx	r8
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d103      	bne.n	8004d34 <_printf_common+0xac>
 8004d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d34:	3501      	adds	r5, #1
 8004d36:	e7c6      	b.n	8004cc6 <_printf_common+0x3e>
 8004d38:	18e1      	adds	r1, r4, r3
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	2030      	movs	r0, #48	; 0x30
 8004d3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d42:	4422      	add	r2, r4
 8004d44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d4c:	3302      	adds	r3, #2
 8004d4e:	e7c7      	b.n	8004ce0 <_printf_common+0x58>
 8004d50:	2301      	movs	r3, #1
 8004d52:	4622      	mov	r2, r4
 8004d54:	4649      	mov	r1, r9
 8004d56:	4638      	mov	r0, r7
 8004d58:	47c0      	blx	r8
 8004d5a:	3001      	adds	r0, #1
 8004d5c:	d0e6      	beq.n	8004d2c <_printf_common+0xa4>
 8004d5e:	3601      	adds	r6, #1
 8004d60:	e7d9      	b.n	8004d16 <_printf_common+0x8e>
	...

08004d64 <_printf_i>:
 8004d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d68:	7e0f      	ldrb	r7, [r1, #24]
 8004d6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d6c:	2f78      	cmp	r7, #120	; 0x78
 8004d6e:	4691      	mov	r9, r2
 8004d70:	4680      	mov	r8, r0
 8004d72:	460c      	mov	r4, r1
 8004d74:	469a      	mov	sl, r3
 8004d76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d7a:	d807      	bhi.n	8004d8c <_printf_i+0x28>
 8004d7c:	2f62      	cmp	r7, #98	; 0x62
 8004d7e:	d80a      	bhi.n	8004d96 <_printf_i+0x32>
 8004d80:	2f00      	cmp	r7, #0
 8004d82:	f000 80d4 	beq.w	8004f2e <_printf_i+0x1ca>
 8004d86:	2f58      	cmp	r7, #88	; 0x58
 8004d88:	f000 80c0 	beq.w	8004f0c <_printf_i+0x1a8>
 8004d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d94:	e03a      	b.n	8004e0c <_printf_i+0xa8>
 8004d96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d9a:	2b15      	cmp	r3, #21
 8004d9c:	d8f6      	bhi.n	8004d8c <_printf_i+0x28>
 8004d9e:	a101      	add	r1, pc, #4	; (adr r1, 8004da4 <_printf_i+0x40>)
 8004da0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004da4:	08004dfd 	.word	0x08004dfd
 8004da8:	08004e11 	.word	0x08004e11
 8004dac:	08004d8d 	.word	0x08004d8d
 8004db0:	08004d8d 	.word	0x08004d8d
 8004db4:	08004d8d 	.word	0x08004d8d
 8004db8:	08004d8d 	.word	0x08004d8d
 8004dbc:	08004e11 	.word	0x08004e11
 8004dc0:	08004d8d 	.word	0x08004d8d
 8004dc4:	08004d8d 	.word	0x08004d8d
 8004dc8:	08004d8d 	.word	0x08004d8d
 8004dcc:	08004d8d 	.word	0x08004d8d
 8004dd0:	08004f15 	.word	0x08004f15
 8004dd4:	08004e3d 	.word	0x08004e3d
 8004dd8:	08004ecf 	.word	0x08004ecf
 8004ddc:	08004d8d 	.word	0x08004d8d
 8004de0:	08004d8d 	.word	0x08004d8d
 8004de4:	08004f37 	.word	0x08004f37
 8004de8:	08004d8d 	.word	0x08004d8d
 8004dec:	08004e3d 	.word	0x08004e3d
 8004df0:	08004d8d 	.word	0x08004d8d
 8004df4:	08004d8d 	.word	0x08004d8d
 8004df8:	08004ed7 	.word	0x08004ed7
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	1d1a      	adds	r2, r3, #4
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	602a      	str	r2, [r5, #0]
 8004e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e09f      	b.n	8004f50 <_printf_i+0x1ec>
 8004e10:	6820      	ldr	r0, [r4, #0]
 8004e12:	682b      	ldr	r3, [r5, #0]
 8004e14:	0607      	lsls	r7, r0, #24
 8004e16:	f103 0104 	add.w	r1, r3, #4
 8004e1a:	6029      	str	r1, [r5, #0]
 8004e1c:	d501      	bpl.n	8004e22 <_printf_i+0xbe>
 8004e1e:	681e      	ldr	r6, [r3, #0]
 8004e20:	e003      	b.n	8004e2a <_printf_i+0xc6>
 8004e22:	0646      	lsls	r6, r0, #25
 8004e24:	d5fb      	bpl.n	8004e1e <_printf_i+0xba>
 8004e26:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004e2a:	2e00      	cmp	r6, #0
 8004e2c:	da03      	bge.n	8004e36 <_printf_i+0xd2>
 8004e2e:	232d      	movs	r3, #45	; 0x2d
 8004e30:	4276      	negs	r6, r6
 8004e32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e36:	485a      	ldr	r0, [pc, #360]	; (8004fa0 <_printf_i+0x23c>)
 8004e38:	230a      	movs	r3, #10
 8004e3a:	e012      	b.n	8004e62 <_printf_i+0xfe>
 8004e3c:	682b      	ldr	r3, [r5, #0]
 8004e3e:	6820      	ldr	r0, [r4, #0]
 8004e40:	1d19      	adds	r1, r3, #4
 8004e42:	6029      	str	r1, [r5, #0]
 8004e44:	0605      	lsls	r5, r0, #24
 8004e46:	d501      	bpl.n	8004e4c <_printf_i+0xe8>
 8004e48:	681e      	ldr	r6, [r3, #0]
 8004e4a:	e002      	b.n	8004e52 <_printf_i+0xee>
 8004e4c:	0641      	lsls	r1, r0, #25
 8004e4e:	d5fb      	bpl.n	8004e48 <_printf_i+0xe4>
 8004e50:	881e      	ldrh	r6, [r3, #0]
 8004e52:	4853      	ldr	r0, [pc, #332]	; (8004fa0 <_printf_i+0x23c>)
 8004e54:	2f6f      	cmp	r7, #111	; 0x6f
 8004e56:	bf0c      	ite	eq
 8004e58:	2308      	moveq	r3, #8
 8004e5a:	230a      	movne	r3, #10
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e62:	6865      	ldr	r5, [r4, #4]
 8004e64:	60a5      	str	r5, [r4, #8]
 8004e66:	2d00      	cmp	r5, #0
 8004e68:	bfa2      	ittt	ge
 8004e6a:	6821      	ldrge	r1, [r4, #0]
 8004e6c:	f021 0104 	bicge.w	r1, r1, #4
 8004e70:	6021      	strge	r1, [r4, #0]
 8004e72:	b90e      	cbnz	r6, 8004e78 <_printf_i+0x114>
 8004e74:	2d00      	cmp	r5, #0
 8004e76:	d04b      	beq.n	8004f10 <_printf_i+0x1ac>
 8004e78:	4615      	mov	r5, r2
 8004e7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e7e:	fb03 6711 	mls	r7, r3, r1, r6
 8004e82:	5dc7      	ldrb	r7, [r0, r7]
 8004e84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e88:	4637      	mov	r7, r6
 8004e8a:	42bb      	cmp	r3, r7
 8004e8c:	460e      	mov	r6, r1
 8004e8e:	d9f4      	bls.n	8004e7a <_printf_i+0x116>
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d10b      	bne.n	8004eac <_printf_i+0x148>
 8004e94:	6823      	ldr	r3, [r4, #0]
 8004e96:	07de      	lsls	r6, r3, #31
 8004e98:	d508      	bpl.n	8004eac <_printf_i+0x148>
 8004e9a:	6923      	ldr	r3, [r4, #16]
 8004e9c:	6861      	ldr	r1, [r4, #4]
 8004e9e:	4299      	cmp	r1, r3
 8004ea0:	bfde      	ittt	le
 8004ea2:	2330      	movle	r3, #48	; 0x30
 8004ea4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ea8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004eac:	1b52      	subs	r2, r2, r5
 8004eae:	6122      	str	r2, [r4, #16]
 8004eb0:	f8cd a000 	str.w	sl, [sp]
 8004eb4:	464b      	mov	r3, r9
 8004eb6:	aa03      	add	r2, sp, #12
 8004eb8:	4621      	mov	r1, r4
 8004eba:	4640      	mov	r0, r8
 8004ebc:	f7ff fee4 	bl	8004c88 <_printf_common>
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d14a      	bne.n	8004f5a <_printf_i+0x1f6>
 8004ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec8:	b004      	add	sp, #16
 8004eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	f043 0320 	orr.w	r3, r3, #32
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	4833      	ldr	r0, [pc, #204]	; (8004fa4 <_printf_i+0x240>)
 8004ed8:	2778      	movs	r7, #120	; 0x78
 8004eda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	6829      	ldr	r1, [r5, #0]
 8004ee2:	061f      	lsls	r7, r3, #24
 8004ee4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ee8:	d402      	bmi.n	8004ef0 <_printf_i+0x18c>
 8004eea:	065f      	lsls	r7, r3, #25
 8004eec:	bf48      	it	mi
 8004eee:	b2b6      	uxthmi	r6, r6
 8004ef0:	07df      	lsls	r7, r3, #31
 8004ef2:	bf48      	it	mi
 8004ef4:	f043 0320 	orrmi.w	r3, r3, #32
 8004ef8:	6029      	str	r1, [r5, #0]
 8004efa:	bf48      	it	mi
 8004efc:	6023      	strmi	r3, [r4, #0]
 8004efe:	b91e      	cbnz	r6, 8004f08 <_printf_i+0x1a4>
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	f023 0320 	bic.w	r3, r3, #32
 8004f06:	6023      	str	r3, [r4, #0]
 8004f08:	2310      	movs	r3, #16
 8004f0a:	e7a7      	b.n	8004e5c <_printf_i+0xf8>
 8004f0c:	4824      	ldr	r0, [pc, #144]	; (8004fa0 <_printf_i+0x23c>)
 8004f0e:	e7e4      	b.n	8004eda <_printf_i+0x176>
 8004f10:	4615      	mov	r5, r2
 8004f12:	e7bd      	b.n	8004e90 <_printf_i+0x12c>
 8004f14:	682b      	ldr	r3, [r5, #0]
 8004f16:	6826      	ldr	r6, [r4, #0]
 8004f18:	6961      	ldr	r1, [r4, #20]
 8004f1a:	1d18      	adds	r0, r3, #4
 8004f1c:	6028      	str	r0, [r5, #0]
 8004f1e:	0635      	lsls	r5, r6, #24
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	d501      	bpl.n	8004f28 <_printf_i+0x1c4>
 8004f24:	6019      	str	r1, [r3, #0]
 8004f26:	e002      	b.n	8004f2e <_printf_i+0x1ca>
 8004f28:	0670      	lsls	r0, r6, #25
 8004f2a:	d5fb      	bpl.n	8004f24 <_printf_i+0x1c0>
 8004f2c:	8019      	strh	r1, [r3, #0]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	6123      	str	r3, [r4, #16]
 8004f32:	4615      	mov	r5, r2
 8004f34:	e7bc      	b.n	8004eb0 <_printf_i+0x14c>
 8004f36:	682b      	ldr	r3, [r5, #0]
 8004f38:	1d1a      	adds	r2, r3, #4
 8004f3a:	602a      	str	r2, [r5, #0]
 8004f3c:	681d      	ldr	r5, [r3, #0]
 8004f3e:	6862      	ldr	r2, [r4, #4]
 8004f40:	2100      	movs	r1, #0
 8004f42:	4628      	mov	r0, r5
 8004f44:	f7fb f96c 	bl	8000220 <memchr>
 8004f48:	b108      	cbz	r0, 8004f4e <_printf_i+0x1ea>
 8004f4a:	1b40      	subs	r0, r0, r5
 8004f4c:	6060      	str	r0, [r4, #4]
 8004f4e:	6863      	ldr	r3, [r4, #4]
 8004f50:	6123      	str	r3, [r4, #16]
 8004f52:	2300      	movs	r3, #0
 8004f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f58:	e7aa      	b.n	8004eb0 <_printf_i+0x14c>
 8004f5a:	6923      	ldr	r3, [r4, #16]
 8004f5c:	462a      	mov	r2, r5
 8004f5e:	4649      	mov	r1, r9
 8004f60:	4640      	mov	r0, r8
 8004f62:	47d0      	blx	sl
 8004f64:	3001      	adds	r0, #1
 8004f66:	d0ad      	beq.n	8004ec4 <_printf_i+0x160>
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	079b      	lsls	r3, r3, #30
 8004f6c:	d413      	bmi.n	8004f96 <_printf_i+0x232>
 8004f6e:	68e0      	ldr	r0, [r4, #12]
 8004f70:	9b03      	ldr	r3, [sp, #12]
 8004f72:	4298      	cmp	r0, r3
 8004f74:	bfb8      	it	lt
 8004f76:	4618      	movlt	r0, r3
 8004f78:	e7a6      	b.n	8004ec8 <_printf_i+0x164>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	4632      	mov	r2, r6
 8004f7e:	4649      	mov	r1, r9
 8004f80:	4640      	mov	r0, r8
 8004f82:	47d0      	blx	sl
 8004f84:	3001      	adds	r0, #1
 8004f86:	d09d      	beq.n	8004ec4 <_printf_i+0x160>
 8004f88:	3501      	adds	r5, #1
 8004f8a:	68e3      	ldr	r3, [r4, #12]
 8004f8c:	9903      	ldr	r1, [sp, #12]
 8004f8e:	1a5b      	subs	r3, r3, r1
 8004f90:	42ab      	cmp	r3, r5
 8004f92:	dcf2      	bgt.n	8004f7a <_printf_i+0x216>
 8004f94:	e7eb      	b.n	8004f6e <_printf_i+0x20a>
 8004f96:	2500      	movs	r5, #0
 8004f98:	f104 0619 	add.w	r6, r4, #25
 8004f9c:	e7f5      	b.n	8004f8a <_printf_i+0x226>
 8004f9e:	bf00      	nop
 8004fa0:	080053ed 	.word	0x080053ed
 8004fa4:	080053fe 	.word	0x080053fe

08004fa8 <__sflush_r>:
 8004fa8:	898a      	ldrh	r2, [r1, #12]
 8004faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fae:	4605      	mov	r5, r0
 8004fb0:	0710      	lsls	r0, r2, #28
 8004fb2:	460c      	mov	r4, r1
 8004fb4:	d458      	bmi.n	8005068 <__sflush_r+0xc0>
 8004fb6:	684b      	ldr	r3, [r1, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	dc05      	bgt.n	8004fc8 <__sflush_r+0x20>
 8004fbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	dc02      	bgt.n	8004fc8 <__sflush_r+0x20>
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fca:	2e00      	cmp	r6, #0
 8004fcc:	d0f9      	beq.n	8004fc2 <__sflush_r+0x1a>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004fd4:	682f      	ldr	r7, [r5, #0]
 8004fd6:	6a21      	ldr	r1, [r4, #32]
 8004fd8:	602b      	str	r3, [r5, #0]
 8004fda:	d032      	beq.n	8005042 <__sflush_r+0x9a>
 8004fdc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fde:	89a3      	ldrh	r3, [r4, #12]
 8004fe0:	075a      	lsls	r2, r3, #29
 8004fe2:	d505      	bpl.n	8004ff0 <__sflush_r+0x48>
 8004fe4:	6863      	ldr	r3, [r4, #4]
 8004fe6:	1ac0      	subs	r0, r0, r3
 8004fe8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fea:	b10b      	cbz	r3, 8004ff0 <__sflush_r+0x48>
 8004fec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fee:	1ac0      	subs	r0, r0, r3
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ff6:	6a21      	ldr	r1, [r4, #32]
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	47b0      	blx	r6
 8004ffc:	1c43      	adds	r3, r0, #1
 8004ffe:	89a3      	ldrh	r3, [r4, #12]
 8005000:	d106      	bne.n	8005010 <__sflush_r+0x68>
 8005002:	6829      	ldr	r1, [r5, #0]
 8005004:	291d      	cmp	r1, #29
 8005006:	d82b      	bhi.n	8005060 <__sflush_r+0xb8>
 8005008:	4a29      	ldr	r2, [pc, #164]	; (80050b0 <__sflush_r+0x108>)
 800500a:	410a      	asrs	r2, r1
 800500c:	07d6      	lsls	r6, r2, #31
 800500e:	d427      	bmi.n	8005060 <__sflush_r+0xb8>
 8005010:	2200      	movs	r2, #0
 8005012:	6062      	str	r2, [r4, #4]
 8005014:	04d9      	lsls	r1, r3, #19
 8005016:	6922      	ldr	r2, [r4, #16]
 8005018:	6022      	str	r2, [r4, #0]
 800501a:	d504      	bpl.n	8005026 <__sflush_r+0x7e>
 800501c:	1c42      	adds	r2, r0, #1
 800501e:	d101      	bne.n	8005024 <__sflush_r+0x7c>
 8005020:	682b      	ldr	r3, [r5, #0]
 8005022:	b903      	cbnz	r3, 8005026 <__sflush_r+0x7e>
 8005024:	6560      	str	r0, [r4, #84]	; 0x54
 8005026:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005028:	602f      	str	r7, [r5, #0]
 800502a:	2900      	cmp	r1, #0
 800502c:	d0c9      	beq.n	8004fc2 <__sflush_r+0x1a>
 800502e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005032:	4299      	cmp	r1, r3
 8005034:	d002      	beq.n	800503c <__sflush_r+0x94>
 8005036:	4628      	mov	r0, r5
 8005038:	f7ff fbea 	bl	8004810 <_free_r>
 800503c:	2000      	movs	r0, #0
 800503e:	6360      	str	r0, [r4, #52]	; 0x34
 8005040:	e7c0      	b.n	8004fc4 <__sflush_r+0x1c>
 8005042:	2301      	movs	r3, #1
 8005044:	4628      	mov	r0, r5
 8005046:	47b0      	blx	r6
 8005048:	1c41      	adds	r1, r0, #1
 800504a:	d1c8      	bne.n	8004fde <__sflush_r+0x36>
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0c5      	beq.n	8004fde <__sflush_r+0x36>
 8005052:	2b1d      	cmp	r3, #29
 8005054:	d001      	beq.n	800505a <__sflush_r+0xb2>
 8005056:	2b16      	cmp	r3, #22
 8005058:	d101      	bne.n	800505e <__sflush_r+0xb6>
 800505a:	602f      	str	r7, [r5, #0]
 800505c:	e7b1      	b.n	8004fc2 <__sflush_r+0x1a>
 800505e:	89a3      	ldrh	r3, [r4, #12]
 8005060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005064:	81a3      	strh	r3, [r4, #12]
 8005066:	e7ad      	b.n	8004fc4 <__sflush_r+0x1c>
 8005068:	690f      	ldr	r7, [r1, #16]
 800506a:	2f00      	cmp	r7, #0
 800506c:	d0a9      	beq.n	8004fc2 <__sflush_r+0x1a>
 800506e:	0793      	lsls	r3, r2, #30
 8005070:	680e      	ldr	r6, [r1, #0]
 8005072:	bf08      	it	eq
 8005074:	694b      	ldreq	r3, [r1, #20]
 8005076:	600f      	str	r7, [r1, #0]
 8005078:	bf18      	it	ne
 800507a:	2300      	movne	r3, #0
 800507c:	eba6 0807 	sub.w	r8, r6, r7
 8005080:	608b      	str	r3, [r1, #8]
 8005082:	f1b8 0f00 	cmp.w	r8, #0
 8005086:	dd9c      	ble.n	8004fc2 <__sflush_r+0x1a>
 8005088:	6a21      	ldr	r1, [r4, #32]
 800508a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800508c:	4643      	mov	r3, r8
 800508e:	463a      	mov	r2, r7
 8005090:	4628      	mov	r0, r5
 8005092:	47b0      	blx	r6
 8005094:	2800      	cmp	r0, #0
 8005096:	dc06      	bgt.n	80050a6 <__sflush_r+0xfe>
 8005098:	89a3      	ldrh	r3, [r4, #12]
 800509a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800509e:	81a3      	strh	r3, [r4, #12]
 80050a0:	f04f 30ff 	mov.w	r0, #4294967295
 80050a4:	e78e      	b.n	8004fc4 <__sflush_r+0x1c>
 80050a6:	4407      	add	r7, r0
 80050a8:	eba8 0800 	sub.w	r8, r8, r0
 80050ac:	e7e9      	b.n	8005082 <__sflush_r+0xda>
 80050ae:	bf00      	nop
 80050b0:	dfbffffe 	.word	0xdfbffffe

080050b4 <_fflush_r>:
 80050b4:	b538      	push	{r3, r4, r5, lr}
 80050b6:	690b      	ldr	r3, [r1, #16]
 80050b8:	4605      	mov	r5, r0
 80050ba:	460c      	mov	r4, r1
 80050bc:	b913      	cbnz	r3, 80050c4 <_fflush_r+0x10>
 80050be:	2500      	movs	r5, #0
 80050c0:	4628      	mov	r0, r5
 80050c2:	bd38      	pop	{r3, r4, r5, pc}
 80050c4:	b118      	cbz	r0, 80050ce <_fflush_r+0x1a>
 80050c6:	6a03      	ldr	r3, [r0, #32]
 80050c8:	b90b      	cbnz	r3, 80050ce <_fflush_r+0x1a>
 80050ca:	f7ff fa9b 	bl	8004604 <__sinit>
 80050ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0f3      	beq.n	80050be <_fflush_r+0xa>
 80050d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050d8:	07d0      	lsls	r0, r2, #31
 80050da:	d404      	bmi.n	80050e6 <_fflush_r+0x32>
 80050dc:	0599      	lsls	r1, r3, #22
 80050de:	d402      	bmi.n	80050e6 <_fflush_r+0x32>
 80050e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050e2:	f7ff fb93 	bl	800480c <__retarget_lock_acquire_recursive>
 80050e6:	4628      	mov	r0, r5
 80050e8:	4621      	mov	r1, r4
 80050ea:	f7ff ff5d 	bl	8004fa8 <__sflush_r>
 80050ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050f0:	07da      	lsls	r2, r3, #31
 80050f2:	4605      	mov	r5, r0
 80050f4:	d4e4      	bmi.n	80050c0 <_fflush_r+0xc>
 80050f6:	89a3      	ldrh	r3, [r4, #12]
 80050f8:	059b      	lsls	r3, r3, #22
 80050fa:	d4e1      	bmi.n	80050c0 <_fflush_r+0xc>
 80050fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050fe:	f7ff fb86 	bl	800480e <__retarget_lock_release_recursive>
 8005102:	e7dd      	b.n	80050c0 <_fflush_r+0xc>

08005104 <__swbuf_r>:
 8005104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005106:	460e      	mov	r6, r1
 8005108:	4614      	mov	r4, r2
 800510a:	4605      	mov	r5, r0
 800510c:	b118      	cbz	r0, 8005116 <__swbuf_r+0x12>
 800510e:	6a03      	ldr	r3, [r0, #32]
 8005110:	b90b      	cbnz	r3, 8005116 <__swbuf_r+0x12>
 8005112:	f7ff fa77 	bl	8004604 <__sinit>
 8005116:	69a3      	ldr	r3, [r4, #24]
 8005118:	60a3      	str	r3, [r4, #8]
 800511a:	89a3      	ldrh	r3, [r4, #12]
 800511c:	071a      	lsls	r2, r3, #28
 800511e:	d525      	bpl.n	800516c <__swbuf_r+0x68>
 8005120:	6923      	ldr	r3, [r4, #16]
 8005122:	b31b      	cbz	r3, 800516c <__swbuf_r+0x68>
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	6922      	ldr	r2, [r4, #16]
 8005128:	1a98      	subs	r0, r3, r2
 800512a:	6963      	ldr	r3, [r4, #20]
 800512c:	b2f6      	uxtb	r6, r6
 800512e:	4283      	cmp	r3, r0
 8005130:	4637      	mov	r7, r6
 8005132:	dc04      	bgt.n	800513e <__swbuf_r+0x3a>
 8005134:	4621      	mov	r1, r4
 8005136:	4628      	mov	r0, r5
 8005138:	f7ff ffbc 	bl	80050b4 <_fflush_r>
 800513c:	b9e0      	cbnz	r0, 8005178 <__swbuf_r+0x74>
 800513e:	68a3      	ldr	r3, [r4, #8]
 8005140:	3b01      	subs	r3, #1
 8005142:	60a3      	str	r3, [r4, #8]
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	6022      	str	r2, [r4, #0]
 800514a:	701e      	strb	r6, [r3, #0]
 800514c:	6962      	ldr	r2, [r4, #20]
 800514e:	1c43      	adds	r3, r0, #1
 8005150:	429a      	cmp	r2, r3
 8005152:	d004      	beq.n	800515e <__swbuf_r+0x5a>
 8005154:	89a3      	ldrh	r3, [r4, #12]
 8005156:	07db      	lsls	r3, r3, #31
 8005158:	d506      	bpl.n	8005168 <__swbuf_r+0x64>
 800515a:	2e0a      	cmp	r6, #10
 800515c:	d104      	bne.n	8005168 <__swbuf_r+0x64>
 800515e:	4621      	mov	r1, r4
 8005160:	4628      	mov	r0, r5
 8005162:	f7ff ffa7 	bl	80050b4 <_fflush_r>
 8005166:	b938      	cbnz	r0, 8005178 <__swbuf_r+0x74>
 8005168:	4638      	mov	r0, r7
 800516a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800516c:	4621      	mov	r1, r4
 800516e:	4628      	mov	r0, r5
 8005170:	f000 f806 	bl	8005180 <__swsetup_r>
 8005174:	2800      	cmp	r0, #0
 8005176:	d0d5      	beq.n	8005124 <__swbuf_r+0x20>
 8005178:	f04f 37ff 	mov.w	r7, #4294967295
 800517c:	e7f4      	b.n	8005168 <__swbuf_r+0x64>
	...

08005180 <__swsetup_r>:
 8005180:	b538      	push	{r3, r4, r5, lr}
 8005182:	4b2a      	ldr	r3, [pc, #168]	; (800522c <__swsetup_r+0xac>)
 8005184:	4605      	mov	r5, r0
 8005186:	6818      	ldr	r0, [r3, #0]
 8005188:	460c      	mov	r4, r1
 800518a:	b118      	cbz	r0, 8005194 <__swsetup_r+0x14>
 800518c:	6a03      	ldr	r3, [r0, #32]
 800518e:	b90b      	cbnz	r3, 8005194 <__swsetup_r+0x14>
 8005190:	f7ff fa38 	bl	8004604 <__sinit>
 8005194:	89a3      	ldrh	r3, [r4, #12]
 8005196:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800519a:	0718      	lsls	r0, r3, #28
 800519c:	d422      	bmi.n	80051e4 <__swsetup_r+0x64>
 800519e:	06d9      	lsls	r1, r3, #27
 80051a0:	d407      	bmi.n	80051b2 <__swsetup_r+0x32>
 80051a2:	2309      	movs	r3, #9
 80051a4:	602b      	str	r3, [r5, #0]
 80051a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80051aa:	81a3      	strh	r3, [r4, #12]
 80051ac:	f04f 30ff 	mov.w	r0, #4294967295
 80051b0:	e034      	b.n	800521c <__swsetup_r+0x9c>
 80051b2:	0758      	lsls	r0, r3, #29
 80051b4:	d512      	bpl.n	80051dc <__swsetup_r+0x5c>
 80051b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051b8:	b141      	cbz	r1, 80051cc <__swsetup_r+0x4c>
 80051ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051be:	4299      	cmp	r1, r3
 80051c0:	d002      	beq.n	80051c8 <__swsetup_r+0x48>
 80051c2:	4628      	mov	r0, r5
 80051c4:	f7ff fb24 	bl	8004810 <_free_r>
 80051c8:	2300      	movs	r3, #0
 80051ca:	6363      	str	r3, [r4, #52]	; 0x34
 80051cc:	89a3      	ldrh	r3, [r4, #12]
 80051ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051d2:	81a3      	strh	r3, [r4, #12]
 80051d4:	2300      	movs	r3, #0
 80051d6:	6063      	str	r3, [r4, #4]
 80051d8:	6923      	ldr	r3, [r4, #16]
 80051da:	6023      	str	r3, [r4, #0]
 80051dc:	89a3      	ldrh	r3, [r4, #12]
 80051de:	f043 0308 	orr.w	r3, r3, #8
 80051e2:	81a3      	strh	r3, [r4, #12]
 80051e4:	6923      	ldr	r3, [r4, #16]
 80051e6:	b94b      	cbnz	r3, 80051fc <__swsetup_r+0x7c>
 80051e8:	89a3      	ldrh	r3, [r4, #12]
 80051ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80051ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051f2:	d003      	beq.n	80051fc <__swsetup_r+0x7c>
 80051f4:	4621      	mov	r1, r4
 80051f6:	4628      	mov	r0, r5
 80051f8:	f000 f850 	bl	800529c <__smakebuf_r>
 80051fc:	89a0      	ldrh	r0, [r4, #12]
 80051fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005202:	f010 0301 	ands.w	r3, r0, #1
 8005206:	d00a      	beq.n	800521e <__swsetup_r+0x9e>
 8005208:	2300      	movs	r3, #0
 800520a:	60a3      	str	r3, [r4, #8]
 800520c:	6963      	ldr	r3, [r4, #20]
 800520e:	425b      	negs	r3, r3
 8005210:	61a3      	str	r3, [r4, #24]
 8005212:	6923      	ldr	r3, [r4, #16]
 8005214:	b943      	cbnz	r3, 8005228 <__swsetup_r+0xa8>
 8005216:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800521a:	d1c4      	bne.n	80051a6 <__swsetup_r+0x26>
 800521c:	bd38      	pop	{r3, r4, r5, pc}
 800521e:	0781      	lsls	r1, r0, #30
 8005220:	bf58      	it	pl
 8005222:	6963      	ldrpl	r3, [r4, #20]
 8005224:	60a3      	str	r3, [r4, #8]
 8005226:	e7f4      	b.n	8005212 <__swsetup_r+0x92>
 8005228:	2000      	movs	r0, #0
 800522a:	e7f7      	b.n	800521c <__swsetup_r+0x9c>
 800522c:	20000064 	.word	0x20000064

08005230 <_sbrk_r>:
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	4d06      	ldr	r5, [pc, #24]	; (800524c <_sbrk_r+0x1c>)
 8005234:	2300      	movs	r3, #0
 8005236:	4604      	mov	r4, r0
 8005238:	4608      	mov	r0, r1
 800523a:	602b      	str	r3, [r5, #0]
 800523c:	f7fb fc12 	bl	8000a64 <_sbrk>
 8005240:	1c43      	adds	r3, r0, #1
 8005242:	d102      	bne.n	800524a <_sbrk_r+0x1a>
 8005244:	682b      	ldr	r3, [r5, #0]
 8005246:	b103      	cbz	r3, 800524a <_sbrk_r+0x1a>
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	bd38      	pop	{r3, r4, r5, pc}
 800524c:	200002fc 	.word	0x200002fc

08005250 <__swhatbuf_r>:
 8005250:	b570      	push	{r4, r5, r6, lr}
 8005252:	460c      	mov	r4, r1
 8005254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005258:	2900      	cmp	r1, #0
 800525a:	b096      	sub	sp, #88	; 0x58
 800525c:	4615      	mov	r5, r2
 800525e:	461e      	mov	r6, r3
 8005260:	da0d      	bge.n	800527e <__swhatbuf_r+0x2e>
 8005262:	89a3      	ldrh	r3, [r4, #12]
 8005264:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005268:	f04f 0100 	mov.w	r1, #0
 800526c:	bf0c      	ite	eq
 800526e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005272:	2340      	movne	r3, #64	; 0x40
 8005274:	2000      	movs	r0, #0
 8005276:	6031      	str	r1, [r6, #0]
 8005278:	602b      	str	r3, [r5, #0]
 800527a:	b016      	add	sp, #88	; 0x58
 800527c:	bd70      	pop	{r4, r5, r6, pc}
 800527e:	466a      	mov	r2, sp
 8005280:	f000 f848 	bl	8005314 <_fstat_r>
 8005284:	2800      	cmp	r0, #0
 8005286:	dbec      	blt.n	8005262 <__swhatbuf_r+0x12>
 8005288:	9901      	ldr	r1, [sp, #4]
 800528a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800528e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005292:	4259      	negs	r1, r3
 8005294:	4159      	adcs	r1, r3
 8005296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800529a:	e7eb      	b.n	8005274 <__swhatbuf_r+0x24>

0800529c <__smakebuf_r>:
 800529c:	898b      	ldrh	r3, [r1, #12]
 800529e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052a0:	079d      	lsls	r5, r3, #30
 80052a2:	4606      	mov	r6, r0
 80052a4:	460c      	mov	r4, r1
 80052a6:	d507      	bpl.n	80052b8 <__smakebuf_r+0x1c>
 80052a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	6123      	str	r3, [r4, #16]
 80052b0:	2301      	movs	r3, #1
 80052b2:	6163      	str	r3, [r4, #20]
 80052b4:	b002      	add	sp, #8
 80052b6:	bd70      	pop	{r4, r5, r6, pc}
 80052b8:	ab01      	add	r3, sp, #4
 80052ba:	466a      	mov	r2, sp
 80052bc:	f7ff ffc8 	bl	8005250 <__swhatbuf_r>
 80052c0:	9900      	ldr	r1, [sp, #0]
 80052c2:	4605      	mov	r5, r0
 80052c4:	4630      	mov	r0, r6
 80052c6:	f7ff fb0f 	bl	80048e8 <_malloc_r>
 80052ca:	b948      	cbnz	r0, 80052e0 <__smakebuf_r+0x44>
 80052cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052d0:	059a      	lsls	r2, r3, #22
 80052d2:	d4ef      	bmi.n	80052b4 <__smakebuf_r+0x18>
 80052d4:	f023 0303 	bic.w	r3, r3, #3
 80052d8:	f043 0302 	orr.w	r3, r3, #2
 80052dc:	81a3      	strh	r3, [r4, #12]
 80052de:	e7e3      	b.n	80052a8 <__smakebuf_r+0xc>
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	6020      	str	r0, [r4, #0]
 80052e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e8:	81a3      	strh	r3, [r4, #12]
 80052ea:	9b00      	ldr	r3, [sp, #0]
 80052ec:	6163      	str	r3, [r4, #20]
 80052ee:	9b01      	ldr	r3, [sp, #4]
 80052f0:	6120      	str	r0, [r4, #16]
 80052f2:	b15b      	cbz	r3, 800530c <__smakebuf_r+0x70>
 80052f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052f8:	4630      	mov	r0, r6
 80052fa:	f000 f81d 	bl	8005338 <_isatty_r>
 80052fe:	b128      	cbz	r0, 800530c <__smakebuf_r+0x70>
 8005300:	89a3      	ldrh	r3, [r4, #12]
 8005302:	f023 0303 	bic.w	r3, r3, #3
 8005306:	f043 0301 	orr.w	r3, r3, #1
 800530a:	81a3      	strh	r3, [r4, #12]
 800530c:	89a3      	ldrh	r3, [r4, #12]
 800530e:	431d      	orrs	r5, r3
 8005310:	81a5      	strh	r5, [r4, #12]
 8005312:	e7cf      	b.n	80052b4 <__smakebuf_r+0x18>

08005314 <_fstat_r>:
 8005314:	b538      	push	{r3, r4, r5, lr}
 8005316:	4d07      	ldr	r5, [pc, #28]	; (8005334 <_fstat_r+0x20>)
 8005318:	2300      	movs	r3, #0
 800531a:	4604      	mov	r4, r0
 800531c:	4608      	mov	r0, r1
 800531e:	4611      	mov	r1, r2
 8005320:	602b      	str	r3, [r5, #0]
 8005322:	f7fb fb76 	bl	8000a12 <_fstat>
 8005326:	1c43      	adds	r3, r0, #1
 8005328:	d102      	bne.n	8005330 <_fstat_r+0x1c>
 800532a:	682b      	ldr	r3, [r5, #0]
 800532c:	b103      	cbz	r3, 8005330 <_fstat_r+0x1c>
 800532e:	6023      	str	r3, [r4, #0]
 8005330:	bd38      	pop	{r3, r4, r5, pc}
 8005332:	bf00      	nop
 8005334:	200002fc 	.word	0x200002fc

08005338 <_isatty_r>:
 8005338:	b538      	push	{r3, r4, r5, lr}
 800533a:	4d06      	ldr	r5, [pc, #24]	; (8005354 <_isatty_r+0x1c>)
 800533c:	2300      	movs	r3, #0
 800533e:	4604      	mov	r4, r0
 8005340:	4608      	mov	r0, r1
 8005342:	602b      	str	r3, [r5, #0]
 8005344:	f7fb fb75 	bl	8000a32 <_isatty>
 8005348:	1c43      	adds	r3, r0, #1
 800534a:	d102      	bne.n	8005352 <_isatty_r+0x1a>
 800534c:	682b      	ldr	r3, [r5, #0]
 800534e:	b103      	cbz	r3, 8005352 <_isatty_r+0x1a>
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	bd38      	pop	{r3, r4, r5, pc}
 8005354:	200002fc 	.word	0x200002fc

08005358 <_init>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	bf00      	nop
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr

08005364 <_fini>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	bf00      	nop
 8005368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536a:	bc08      	pop	{r3}
 800536c:	469e      	mov	lr, r3
 800536e:	4770      	bx	lr
